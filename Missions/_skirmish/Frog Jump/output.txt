// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 63241 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 110
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// end ;
11035: LD_VAR 0 6
11039: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11040: LD_INT 0
11042: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11043: LD_VAR 0 1
11047: PUSH
11048: LD_INT 250
11050: EQUAL
11051: PUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL_OW 264
11061: PUSH
11062: LD_EXP 113
11066: EQUAL
11067: AND
11068: IFFALSE 11089
// MinerPlaceMine ( unit , x , y ) ;
11070: LD_VAR 0 2
11074: PPUSH
11075: LD_VAR 0 4
11079: PPUSH
11080: LD_VAR 0 5
11084: PPUSH
11085: CALL 13438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11089: LD_VAR 0 1
11093: PUSH
11094: LD_INT 251
11096: EQUAL
11097: PUSH
11098: LD_VAR 0 2
11102: PPUSH
11103: CALL_OW 264
11107: PUSH
11108: LD_EXP 113
11112: EQUAL
11113: AND
11114: IFFALSE 11135
// MinerDetonateMine ( unit , x , y ) ;
11116: LD_VAR 0 2
11120: PPUSH
11121: LD_VAR 0 4
11125: PPUSH
11126: LD_VAR 0 5
11130: PPUSH
11131: CALL 13715 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11135: LD_VAR 0 1
11139: PUSH
11140: LD_INT 252
11142: EQUAL
11143: PUSH
11144: LD_VAR 0 2
11148: PPUSH
11149: CALL_OW 264
11153: PUSH
11154: LD_EXP 113
11158: EQUAL
11159: AND
11160: IFFALSE 11181
// MinerCreateMinefield ( unit , x , y ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: LD_VAR 0 4
11171: PPUSH
11172: LD_VAR 0 5
11176: PPUSH
11177: CALL 14132 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11181: LD_VAR 0 1
11185: PUSH
11186: LD_INT 253
11188: EQUAL
11189: PUSH
11190: LD_VAR 0 2
11194: PPUSH
11195: CALL_OW 257
11199: PUSH
11200: LD_INT 5
11202: EQUAL
11203: AND
11204: IFFALSE 11225
// ComBinocular ( unit , x , y ) ;
11206: LD_VAR 0 2
11210: PPUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_VAR 0 5
11220: PPUSH
11221: CALL 14503 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11225: LD_VAR 0 1
11229: PUSH
11230: LD_INT 254
11232: EQUAL
11233: PUSH
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 264
11243: PUSH
11244: LD_EXP 108
11248: EQUAL
11249: AND
11250: PUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: CALL_OW 263
11260: PUSH
11261: LD_INT 3
11263: EQUAL
11264: AND
11265: IFFALSE 11281
// HackDestroyVehicle ( unit , selectedUnit ) ;
11267: LD_VAR 0 2
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: CALL 12798 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11281: LD_VAR 0 1
11285: PUSH
11286: LD_INT 255
11288: EQUAL
11289: PUSH
11290: LD_VAR 0 2
11294: PPUSH
11295: CALL_OW 264
11299: PUSH
11300: LD_INT 14
11302: PUSH
11303: LD_INT 53
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: IN
11310: AND
11311: PUSH
11312: LD_VAR 0 4
11316: PPUSH
11317: LD_VAR 0 5
11321: PPUSH
11322: CALL_OW 488
11326: AND
11327: IFFALSE 11351
// CutTreeXYR ( unit , x , y , 12 ) ;
11329: LD_VAR 0 2
11333: PPUSH
11334: LD_VAR 0 4
11338: PPUSH
11339: LD_VAR 0 5
11343: PPUSH
11344: LD_INT 12
11346: PPUSH
11347: CALL 11364 0 4
// end ;
11351: LD_VAR 0 6
11355: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
11356: LD_INT 0
11358: PPUSH
// end ;
11359: LD_VAR 0 4
11363: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11364: LD_INT 0
11366: PPUSH
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11375: LD_VAR 0 1
11379: NOT
11380: PUSH
11381: LD_VAR 0 2
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: CALL_OW 488
11395: NOT
11396: OR
11397: PUSH
11398: LD_VAR 0 4
11402: NOT
11403: OR
11404: IFFALSE 11408
// exit ;
11406: GO 11748
// list := [ ] ;
11408: LD_ADDR_VAR 0 13
11412: PUSH
11413: EMPTY
11414: ST_TO_ADDR
// if x - r < 0 then
11415: LD_VAR 0 2
11419: PUSH
11420: LD_VAR 0 4
11424: MINUS
11425: PUSH
11426: LD_INT 0
11428: LESS
11429: IFFALSE 11441
// min_x := 0 else
11431: LD_ADDR_VAR 0 7
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
11439: GO 11457
// min_x := x - r ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 2
11450: PUSH
11451: LD_VAR 0 4
11455: MINUS
11456: ST_TO_ADDR
// if y - r < 0 then
11457: LD_VAR 0 3
11461: PUSH
11462: LD_VAR 0 4
11466: MINUS
11467: PUSH
11468: LD_INT 0
11470: LESS
11471: IFFALSE 11483
// min_y := 0 else
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
11481: GO 11499
// min_y := y - r ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 3
11492: PUSH
11493: LD_VAR 0 4
11497: MINUS
11498: ST_TO_ADDR
// max_x := x + r ;
11499: LD_ADDR_VAR 0 9
11503: PUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: PLUS
11514: ST_TO_ADDR
// max_y := y + r ;
11515: LD_ADDR_VAR 0 10
11519: PUSH
11520: LD_VAR 0 3
11524: PUSH
11525: LD_VAR 0 4
11529: PLUS
11530: ST_TO_ADDR
// for _x = min_x to max_x do
11531: LD_ADDR_VAR 0 11
11535: PUSH
11536: DOUBLE
11537: LD_VAR 0 7
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 9
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11666
// for _y = min_y to max_y do
11551: LD_ADDR_VAR 0 12
11555: PUSH
11556: DOUBLE
11557: LD_VAR 0 8
11561: DEC
11562: ST_TO_ADDR
11563: LD_VAR 0 10
11567: PUSH
11568: FOR_TO
11569: IFFALSE 11662
// begin if not ValidHex ( _x , _y ) then
11571: LD_VAR 0 11
11575: PPUSH
11576: LD_VAR 0 12
11580: PPUSH
11581: CALL_OW 488
11585: NOT
11586: IFFALSE 11590
// continue ;
11588: GO 11568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11590: LD_VAR 0 11
11594: PPUSH
11595: LD_VAR 0 12
11599: PPUSH
11600: CALL_OW 351
11604: PUSH
11605: LD_VAR 0 11
11609: PPUSH
11610: LD_VAR 0 12
11614: PPUSH
11615: CALL_OW 554
11619: AND
11620: IFFALSE 11660
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11622: LD_ADDR_VAR 0 13
11626: PUSH
11627: LD_VAR 0 13
11631: PPUSH
11632: LD_VAR 0 13
11636: PUSH
11637: LD_INT 1
11639: PLUS
11640: PPUSH
11641: LD_VAR 0 11
11645: PUSH
11646: LD_VAR 0 12
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: CALL_OW 2
11659: ST_TO_ADDR
// end ;
11660: GO 11568
11662: POP
11663: POP
11664: GO 11548
11666: POP
11667: POP
// if not list then
11668: LD_VAR 0 13
11672: NOT
11673: IFFALSE 11677
// exit ;
11675: GO 11748
// for i in list do
11677: LD_ADDR_VAR 0 6
11681: PUSH
11682: LD_VAR 0 13
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11746
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_STRING M
11697: PUSH
11698: LD_VAR 0 6
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PUSH
11707: LD_VAR 0 6
11711: PUSH
11712: LD_INT 2
11714: ARRAY
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: LD_INT 0
11721: PUSH
11722: LD_INT 0
11724: PUSH
11725: LD_INT 0
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: PPUSH
11740: CALL_OW 447
11744: GO 11687
11746: POP
11747: POP
// end ;
11748: LD_VAR 0 5
11752: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11753: LD_EXP 38
11757: NOT
11758: IFFALSE 11808
11760: GO 11762
11762: DISABLE
// begin initHack := true ;
11763: LD_ADDR_EXP 38
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// hackTanks := [ ] ;
11771: LD_ADDR_EXP 39
11775: PUSH
11776: EMPTY
11777: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11778: LD_ADDR_EXP 40
11782: PUSH
11783: EMPTY
11784: ST_TO_ADDR
// hackLimit := 3 ;
11785: LD_ADDR_EXP 41
11789: PUSH
11790: LD_INT 3
11792: ST_TO_ADDR
// hackDist := 12 ;
11793: LD_ADDR_EXP 42
11797: PUSH
11798: LD_INT 12
11800: ST_TO_ADDR
// hackCounter := [ ] ;
11801: LD_ADDR_EXP 43
11805: PUSH
11806: EMPTY
11807: ST_TO_ADDR
// end ;
11808: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11809: LD_EXP 38
11813: PUSH
11814: LD_INT 34
11816: PUSH
11817: LD_EXP 108
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: AND
11831: IFFALSE 12086
11833: GO 11835
11835: DISABLE
11836: LD_INT 0
11838: PPUSH
11839: PPUSH
// begin enable ;
11840: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 34
11848: PUSH
11849: LD_EXP 108
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 69
11862: PUSH
11863: FOR_IN
11864: IFFALSE 12084
// begin if not i in hackTanks then
11866: LD_VAR 0 1
11870: PUSH
11871: LD_EXP 39
11875: IN
11876: NOT
11877: IFFALSE 11960
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11879: LD_ADDR_EXP 39
11883: PUSH
11884: LD_EXP 39
11888: PPUSH
11889: LD_EXP 39
11893: PUSH
11894: LD_INT 1
11896: PLUS
11897: PPUSH
11898: LD_VAR 0 1
11902: PPUSH
11903: CALL_OW 1
11907: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11908: LD_ADDR_EXP 40
11912: PUSH
11913: LD_EXP 40
11917: PPUSH
11918: LD_EXP 40
11922: PUSH
11923: LD_INT 1
11925: PLUS
11926: PPUSH
11927: EMPTY
11928: PPUSH
11929: CALL_OW 1
11933: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11934: LD_ADDR_EXP 43
11938: PUSH
11939: LD_EXP 43
11943: PPUSH
11944: LD_EXP 43
11948: PUSH
11949: LD_INT 1
11951: PLUS
11952: PPUSH
11953: EMPTY
11954: PPUSH
11955: CALL_OW 1
11959: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 302
11969: NOT
11970: IFFALSE 11983
// begin HackUnlinkAll ( i ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL 12089 0 1
// continue ;
11981: GO 11863
// end ; HackCheckCapturedStatus ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 12532 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11992: LD_ADDR_VAR 0 2
11996: PUSH
11997: LD_INT 81
11999: PUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 255
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 33
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 91
12026: PUSH
12027: LD_VAR 0 1
12031: PUSH
12032: LD_EXP 42
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 50
12044: PUSH
12045: EMPTY
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: ST_TO_ADDR
// if not tmp then
12059: LD_VAR 0 2
12063: NOT
12064: IFFALSE 12068
// continue ;
12066: GO 11863
// HackLink ( i , tmp ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL 12225 0 2
// end ;
12082: GO 11863
12084: POP
12085: POP
// end ;
12086: PPOPN 2
12088: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
12093: PPUSH
// if not hack in hackTanks then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 39
12103: IN
12104: NOT
12105: IFFALSE 12109
// exit ;
12107: GO 12220
// index := GetElementIndex ( hackTanks , hack ) ;
12109: LD_ADDR_VAR 0 4
12113: PUSH
12114: LD_EXP 39
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL 33669 0 2
12128: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12129: LD_EXP 40
12133: PUSH
12134: LD_VAR 0 4
12138: ARRAY
12139: IFFALSE 12220
// begin for i in hackTanksCaptured [ index ] do
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_EXP 40
12150: PUSH
12151: LD_VAR 0 4
12155: ARRAY
12156: PUSH
12157: FOR_IN
12158: IFFALSE 12184
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 1
12167: ARRAY
12168: PPUSH
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 2
12176: ARRAY
12177: PPUSH
12178: CALL_OW 235
12182: GO 12157
12184: POP
12185: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12186: LD_ADDR_EXP 40
12190: PUSH
12191: LD_EXP 40
12195: PPUSH
12196: LD_VAR 0 4
12200: PPUSH
12201: EMPTY
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12208: LD_VAR 0 1
12212: PPUSH
12213: LD_INT 0
12215: PPUSH
12216: CALL_OW 505
// end ; end ;
12220: LD_VAR 0 2
12224: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
// if not hack in hackTanks or not vehicles then
12230: LD_VAR 0 1
12234: PUSH
12235: LD_EXP 39
12239: IN
12240: NOT
12241: PUSH
12242: LD_VAR 0 2
12246: NOT
12247: OR
12248: IFFALSE 12252
// exit ;
12250: GO 12527
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: LD_VAR 0 1
12261: PPUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL 34319 0 4
12277: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 39
12287: PPUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: CALL 33669 0 2
12297: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12298: LD_EXP 40
12302: PUSH
12303: LD_VAR 0 5
12307: ARRAY
12308: PUSH
12309: LD_EXP 41
12313: LESS
12314: IFFALSE 12503
// begin for i := 1 to vehicles do
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: DOUBLE
12322: LD_INT 1
12324: DEC
12325: ST_TO_ADDR
12326: LD_VAR 0 2
12330: PUSH
12331: FOR_TO
12332: IFFALSE 12501
// begin if hackTanksCaptured [ index ] = hackLimit then
12334: LD_EXP 40
12338: PUSH
12339: LD_VAR 0 5
12343: ARRAY
12344: PUSH
12345: LD_EXP 41
12349: EQUAL
12350: IFFALSE 12354
// break ;
12352: GO 12501
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12354: LD_ADDR_EXP 43
12358: PUSH
12359: LD_EXP 43
12363: PPUSH
12364: LD_VAR 0 5
12368: PPUSH
12369: LD_EXP 43
12373: PUSH
12374: LD_VAR 0 5
12378: ARRAY
12379: PUSH
12380: LD_INT 1
12382: PLUS
12383: PPUSH
12384: CALL_OW 1
12388: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12389: LD_ADDR_EXP 40
12393: PUSH
12394: LD_EXP 40
12398: PPUSH
12399: LD_VAR 0 5
12403: PUSH
12404: LD_EXP 40
12408: PUSH
12409: LD_VAR 0 5
12413: ARRAY
12414: PUSH
12415: LD_INT 1
12417: PLUS
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: LD_VAR 0 2
12427: PUSH
12428: LD_VAR 0 4
12432: ARRAY
12433: PUSH
12434: LD_VAR 0 2
12438: PUSH
12439: LD_VAR 0 4
12443: ARRAY
12444: PPUSH
12445: CALL_OW 255
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL 33884 0 3
12458: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12459: LD_VAR 0 2
12463: PUSH
12464: LD_VAR 0 4
12468: ARRAY
12469: PPUSH
12470: LD_VAR 0 1
12474: PPUSH
12475: CALL_OW 255
12479: PPUSH
12480: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12484: LD_VAR 0 2
12488: PUSH
12489: LD_VAR 0 4
12493: ARRAY
12494: PPUSH
12495: CALL_OW 141
// end ;
12499: GO 12331
12501: POP
12502: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: LD_EXP 40
12512: PUSH
12513: LD_VAR 0 5
12517: ARRAY
12518: PUSH
12519: LD_INT 0
12521: PLUS
12522: PPUSH
12523: CALL_OW 505
// end ;
12527: LD_VAR 0 3
12531: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
12536: PPUSH
12537: PPUSH
// if not hack in hackTanks then
12538: LD_VAR 0 1
12542: PUSH
12543: LD_EXP 39
12547: IN
12548: NOT
12549: IFFALSE 12553
// exit ;
12551: GO 12793
// index := GetElementIndex ( hackTanks , hack ) ;
12553: LD_ADDR_VAR 0 4
12557: PUSH
12558: LD_EXP 39
12562: PPUSH
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL 33669 0 2
12572: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12573: LD_ADDR_VAR 0 3
12577: PUSH
12578: DOUBLE
12579: LD_EXP 40
12583: PUSH
12584: LD_VAR 0 4
12588: ARRAY
12589: INC
12590: ST_TO_ADDR
12591: LD_INT 1
12593: PUSH
12594: FOR_DOWNTO
12595: IFFALSE 12767
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12597: LD_ADDR_VAR 0 5
12601: PUSH
12602: LD_EXP 40
12606: PUSH
12607: LD_VAR 0 4
12611: ARRAY
12612: PUSH
12613: LD_VAR 0 3
12617: ARRAY
12618: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12619: LD_VAR 0 5
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PPUSH
12628: CALL_OW 302
12632: NOT
12633: PUSH
12634: LD_VAR 0 5
12638: PUSH
12639: LD_INT 1
12641: ARRAY
12642: PPUSH
12643: CALL_OW 255
12647: PUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 255
12657: NONEQUAL
12658: OR
12659: IFFALSE 12765
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12661: LD_VAR 0 5
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PPUSH
12670: CALL_OW 305
12674: PUSH
12675: LD_VAR 0 5
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PPUSH
12684: CALL_OW 255
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 255
12698: EQUAL
12699: AND
12700: IFFALSE 12724
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12702: LD_VAR 0 5
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 5
12715: PUSH
12716: LD_INT 2
12718: ARRAY
12719: PPUSH
12720: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12724: LD_ADDR_EXP 40
12728: PUSH
12729: LD_EXP 40
12733: PPUSH
12734: LD_VAR 0 4
12738: PPUSH
12739: LD_EXP 40
12743: PUSH
12744: LD_VAR 0 4
12748: ARRAY
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 3
12759: PPUSH
12760: CALL_OW 1
12764: ST_TO_ADDR
// end ; end ;
12765: GO 12594
12767: POP
12768: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12769: LD_VAR 0 1
12773: PPUSH
12774: LD_EXP 40
12778: PUSH
12779: LD_VAR 0 4
12783: ARRAY
12784: PUSH
12785: LD_INT 0
12787: PLUS
12788: PPUSH
12789: CALL_OW 505
// end ;
12793: LD_VAR 0 2
12797: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12798: LD_INT 0
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// if not hack in hackTanks then
12804: LD_VAR 0 1
12808: PUSH
12809: LD_EXP 39
12813: IN
12814: NOT
12815: IFFALSE 12819
// exit ;
12817: GO 12904
// index := GetElementIndex ( hackTanks , hack ) ;
12819: LD_ADDR_VAR 0 5
12823: PUSH
12824: LD_EXP 39
12828: PPUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: CALL 33669 0 2
12838: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12839: LD_ADDR_VAR 0 4
12843: PUSH
12844: DOUBLE
12845: LD_INT 1
12847: DEC
12848: ST_TO_ADDR
12849: LD_EXP 40
12853: PUSH
12854: LD_VAR 0 5
12858: ARRAY
12859: PUSH
12860: FOR_TO
12861: IFFALSE 12902
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12863: LD_EXP 40
12867: PUSH
12868: LD_VAR 0 5
12872: ARRAY
12873: PUSH
12874: LD_VAR 0 4
12878: ARRAY
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_VAR 0 2
12888: EQUAL
12889: IFFALSE 12900
// KillUnit ( vehicle ) ;
12891: LD_VAR 0 2
12895: PPUSH
12896: CALL_OW 66
12900: GO 12860
12902: POP
12903: POP
// end ;
12904: LD_VAR 0 3
12908: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12909: LD_EXP 44
12913: NOT
12914: IFFALSE 12949
12916: GO 12918
12918: DISABLE
// begin initMiner := true ;
12919: LD_ADDR_EXP 44
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// minersList := [ ] ;
12927: LD_ADDR_EXP 45
12931: PUSH
12932: EMPTY
12933: ST_TO_ADDR
// minerMinesList := [ ] ;
12934: LD_ADDR_EXP 46
12938: PUSH
12939: EMPTY
12940: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12941: LD_ADDR_EXP 47
12945: PUSH
12946: LD_INT 5
12948: ST_TO_ADDR
// end ;
12949: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12950: LD_EXP 44
12954: PUSH
12955: LD_INT 34
12957: PUSH
12958: LD_EXP 113
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: AND
12972: IFFALSE 13435
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
// begin enable ;
12983: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12984: LD_ADDR_VAR 0 1
12988: PUSH
12989: LD_INT 34
12991: PUSH
12992: LD_EXP 113
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 69
13005: PUSH
13006: FOR_IN
13007: IFFALSE 13079
// begin if not i in minersList then
13009: LD_VAR 0 1
13013: PUSH
13014: LD_EXP 45
13018: IN
13019: NOT
13020: IFFALSE 13077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13022: LD_ADDR_EXP 45
13026: PUSH
13027: LD_EXP 45
13031: PPUSH
13032: LD_EXP 45
13036: PUSH
13037: LD_INT 1
13039: PLUS
13040: PPUSH
13041: LD_VAR 0 1
13045: PPUSH
13046: CALL_OW 1
13050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13051: LD_ADDR_EXP 46
13055: PUSH
13056: LD_EXP 46
13060: PPUSH
13061: LD_EXP 46
13065: PUSH
13066: LD_INT 1
13068: PLUS
13069: PPUSH
13070: EMPTY
13071: PPUSH
13072: CALL_OW 1
13076: ST_TO_ADDR
// end end ;
13077: GO 13006
13079: POP
13080: POP
// for i := minerMinesList downto 1 do
13081: LD_ADDR_VAR 0 1
13085: PUSH
13086: DOUBLE
13087: LD_EXP 46
13091: INC
13092: ST_TO_ADDR
13093: LD_INT 1
13095: PUSH
13096: FOR_DOWNTO
13097: IFFALSE 13433
// begin if IsLive ( minersList [ i ] ) then
13099: LD_EXP 45
13103: PUSH
13104: LD_VAR 0 1
13108: ARRAY
13109: PPUSH
13110: CALL_OW 300
13114: IFFALSE 13142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13116: LD_EXP 45
13120: PUSH
13121: LD_VAR 0 1
13125: ARRAY
13126: PPUSH
13127: LD_EXP 46
13131: PUSH
13132: LD_VAR 0 1
13136: ARRAY
13137: PPUSH
13138: CALL_OW 505
// if not minerMinesList [ i ] then
13142: LD_EXP 46
13146: PUSH
13147: LD_VAR 0 1
13151: ARRAY
13152: NOT
13153: IFFALSE 13157
// continue ;
13155: GO 13096
// for j := minerMinesList [ i ] downto 1 do
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: DOUBLE
13163: LD_EXP 46
13167: PUSH
13168: LD_VAR 0 1
13172: ARRAY
13173: INC
13174: ST_TO_ADDR
13175: LD_INT 1
13177: PUSH
13178: FOR_DOWNTO
13179: IFFALSE 13429
// begin side := GetSide ( minersList [ i ] ) ;
13181: LD_ADDR_VAR 0 3
13185: PUSH
13186: LD_EXP 45
13190: PUSH
13191: LD_VAR 0 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 255
13201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_EXP 46
13211: PUSH
13212: LD_VAR 0 1
13216: ARRAY
13217: PUSH
13218: LD_VAR 0 2
13222: ARRAY
13223: PUSH
13224: LD_INT 1
13226: ARRAY
13227: PPUSH
13228: LD_EXP 46
13232: PUSH
13233: LD_VAR 0 1
13237: ARRAY
13238: PUSH
13239: LD_VAR 0 2
13243: ARRAY
13244: PUSH
13245: LD_INT 2
13247: ARRAY
13248: PPUSH
13249: CALL_OW 428
13253: ST_TO_ADDR
// if not tmp then
13254: LD_VAR 0 4
13258: NOT
13259: IFFALSE 13263
// continue ;
13261: GO 13178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13263: LD_VAR 0 4
13267: PUSH
13268: LD_INT 81
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: IN
13285: PUSH
13286: LD_EXP 46
13290: PUSH
13291: LD_VAR 0 1
13295: ARRAY
13296: PUSH
13297: LD_VAR 0 2
13301: ARRAY
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_EXP 46
13311: PUSH
13312: LD_VAR 0 1
13316: ARRAY
13317: PUSH
13318: LD_VAR 0 2
13322: ARRAY
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: PPUSH
13328: CALL_OW 458
13332: AND
13333: IFFALSE 13427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13335: LD_EXP 46
13339: PUSH
13340: LD_VAR 0 1
13344: ARRAY
13345: PUSH
13346: LD_VAR 0 2
13350: ARRAY
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: LD_EXP 46
13360: PUSH
13361: LD_VAR 0 1
13365: ARRAY
13366: PUSH
13367: LD_VAR 0 2
13371: ARRAY
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13386: LD_ADDR_EXP 46
13390: PUSH
13391: LD_EXP 46
13395: PPUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: LD_EXP 46
13405: PUSH
13406: LD_VAR 0 1
13410: ARRAY
13411: PPUSH
13412: LD_VAR 0 2
13416: PPUSH
13417: CALL_OW 3
13421: PPUSH
13422: CALL_OW 1
13426: ST_TO_ADDR
// end ; end ;
13427: GO 13178
13429: POP
13430: POP
// end ;
13431: GO 13096
13433: POP
13434: POP
// end ;
13435: PPOPN 4
13437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
// result := false ;
13442: LD_ADDR_VAR 0 4
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 264
13459: PUSH
13460: LD_EXP 113
13464: EQUAL
13465: NOT
13466: IFFALSE 13470
// exit ;
13468: GO 13710
// index := GetElementIndex ( minersList , unit ) ;
13470: LD_ADDR_VAR 0 5
13474: PUSH
13475: LD_EXP 45
13479: PPUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL 33669 0 2
13489: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13490: LD_EXP 46
13494: PUSH
13495: LD_VAR 0 5
13499: ARRAY
13500: PUSH
13501: LD_EXP 47
13505: GREATEREQUAL
13506: IFFALSE 13510
// exit ;
13508: GO 13710
// ComMoveXY ( unit , x , y ) ;
13510: LD_VAR 0 1
13514: PPUSH
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13529: LD_INT 35
13531: PPUSH
13532: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13536: LD_VAR 0 1
13540: PPUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: CALL 64441 0 3
13555: NOT
13556: PUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 314
13566: AND
13567: IFFALSE 13571
// exit ;
13569: GO 13710
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13571: LD_VAR 0 2
13575: PPUSH
13576: LD_VAR 0 3
13580: PPUSH
13581: CALL_OW 428
13585: PUSH
13586: LD_VAR 0 1
13590: EQUAL
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 314
13601: NOT
13602: AND
13603: IFFALSE 13529
// PlaySoundXY ( x , y , PlantMine ) ;
13605: LD_VAR 0 2
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_STRING PlantMine
13617: PPUSH
13618: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13622: LD_VAR 0 2
13626: PPUSH
13627: LD_VAR 0 3
13631: PPUSH
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 255
13641: PPUSH
13642: LD_INT 0
13644: PPUSH
13645: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13649: LD_ADDR_EXP 46
13653: PUSH
13654: LD_EXP 46
13658: PPUSH
13659: LD_VAR 0 5
13663: PUSH
13664: LD_EXP 46
13668: PUSH
13669: LD_VAR 0 5
13673: ARRAY
13674: PUSH
13675: LD_INT 1
13677: PLUS
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: LD_VAR 0 2
13687: PUSH
13688: LD_VAR 0 3
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL 33884 0 3
13701: ST_TO_ADDR
// result := true ;
13702: LD_ADDR_VAR 0 4
13706: PUSH
13707: LD_INT 1
13709: ST_TO_ADDR
// end ;
13710: LD_VAR 0 4
13714: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13715: LD_INT 0
13717: PPUSH
13718: PPUSH
13719: PPUSH
// if not unit in minersList then
13720: LD_VAR 0 1
13724: PUSH
13725: LD_EXP 45
13729: IN
13730: NOT
13731: IFFALSE 13735
// exit ;
13733: GO 14127
// index := GetElementIndex ( minersList , unit ) ;
13735: LD_ADDR_VAR 0 6
13739: PUSH
13740: LD_EXP 45
13744: PPUSH
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL 33669 0 2
13754: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: DOUBLE
13761: LD_EXP 46
13765: PUSH
13766: LD_VAR 0 6
13770: ARRAY
13771: INC
13772: ST_TO_ADDR
13773: LD_INT 1
13775: PUSH
13776: FOR_DOWNTO
13777: IFFALSE 13938
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13779: LD_EXP 46
13783: PUSH
13784: LD_VAR 0 6
13788: ARRAY
13789: PUSH
13790: LD_VAR 0 5
13794: ARRAY
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PUSH
13800: LD_VAR 0 2
13804: EQUAL
13805: PUSH
13806: LD_EXP 46
13810: PUSH
13811: LD_VAR 0 6
13815: ARRAY
13816: PUSH
13817: LD_VAR 0 5
13821: ARRAY
13822: PUSH
13823: LD_INT 2
13825: ARRAY
13826: PUSH
13827: LD_VAR 0 3
13831: EQUAL
13832: AND
13833: IFFALSE 13936
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13835: LD_EXP 46
13839: PUSH
13840: LD_VAR 0 6
13844: ARRAY
13845: PUSH
13846: LD_VAR 0 5
13850: ARRAY
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: LD_EXP 46
13860: PUSH
13861: LD_VAR 0 6
13865: ARRAY
13866: PUSH
13867: LD_VAR 0 5
13871: ARRAY
13872: PUSH
13873: LD_INT 2
13875: ARRAY
13876: PPUSH
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 255
13886: PPUSH
13887: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13891: LD_ADDR_EXP 46
13895: PUSH
13896: LD_EXP 46
13900: PPUSH
13901: LD_VAR 0 6
13905: PPUSH
13906: LD_EXP 46
13910: PUSH
13911: LD_VAR 0 6
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 5
13921: PPUSH
13922: CALL_OW 3
13926: PPUSH
13927: CALL_OW 1
13931: ST_TO_ADDR
// exit ;
13932: POP
13933: POP
13934: GO 14127
// end ; end ;
13936: GO 13776
13938: POP
13939: POP
// for i := minerMinesList [ index ] downto 1 do
13940: LD_ADDR_VAR 0 5
13944: PUSH
13945: DOUBLE
13946: LD_EXP 46
13950: PUSH
13951: LD_VAR 0 6
13955: ARRAY
13956: INC
13957: ST_TO_ADDR
13958: LD_INT 1
13960: PUSH
13961: FOR_DOWNTO
13962: IFFALSE 14125
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13964: LD_EXP 46
13968: PUSH
13969: LD_VAR 0 6
13973: ARRAY
13974: PUSH
13975: LD_VAR 0 5
13979: ARRAY
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_EXP 46
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PUSH
13996: LD_VAR 0 5
14000: ARRAY
14001: PUSH
14002: LD_INT 2
14004: ARRAY
14005: PPUSH
14006: LD_VAR 0 2
14010: PPUSH
14011: LD_VAR 0 3
14015: PPUSH
14016: CALL_OW 298
14020: PUSH
14021: LD_INT 6
14023: LESS
14024: IFFALSE 14123
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14026: LD_EXP 46
14030: PUSH
14031: LD_VAR 0 6
14035: ARRAY
14036: PUSH
14037: LD_VAR 0 5
14041: ARRAY
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: LD_EXP 46
14051: PUSH
14052: LD_VAR 0 6
14056: ARRAY
14057: PUSH
14058: LD_VAR 0 5
14062: ARRAY
14063: PUSH
14064: LD_INT 2
14066: ARRAY
14067: PPUSH
14068: LD_VAR 0 1
14072: PPUSH
14073: CALL_OW 255
14077: PPUSH
14078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14082: LD_ADDR_EXP 46
14086: PUSH
14087: LD_EXP 46
14091: PPUSH
14092: LD_VAR 0 6
14096: PPUSH
14097: LD_EXP 46
14101: PUSH
14102: LD_VAR 0 6
14106: ARRAY
14107: PPUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 3
14117: PPUSH
14118: CALL_OW 1
14122: ST_TO_ADDR
// end ; end ;
14123: GO 13961
14125: POP
14126: POP
// end ;
14127: LD_VAR 0 4
14131: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
14136: PPUSH
14137: PPUSH
14138: PPUSH
14139: PPUSH
14140: PPUSH
14141: PPUSH
14142: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 264
14152: PUSH
14153: LD_EXP 113
14157: EQUAL
14158: NOT
14159: PUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_EXP 45
14169: IN
14170: NOT
14171: OR
14172: IFFALSE 14176
// exit ;
14174: GO 14498
// index := GetElementIndex ( minersList , unit ) ;
14176: LD_ADDR_VAR 0 6
14180: PUSH
14181: LD_EXP 45
14185: PPUSH
14186: LD_VAR 0 1
14190: PPUSH
14191: CALL 33669 0 2
14195: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14196: LD_ADDR_VAR 0 8
14200: PUSH
14201: LD_EXP 47
14205: PUSH
14206: LD_EXP 46
14210: PUSH
14211: LD_VAR 0 6
14215: ARRAY
14216: MINUS
14217: ST_TO_ADDR
// if not minesFreeAmount then
14218: LD_VAR 0 8
14222: NOT
14223: IFFALSE 14227
// exit ;
14225: GO 14498
// tmp := [ ] ;
14227: LD_ADDR_VAR 0 7
14231: PUSH
14232: EMPTY
14233: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14234: LD_ADDR_VAR 0 5
14238: PUSH
14239: DOUBLE
14240: LD_INT 1
14242: DEC
14243: ST_TO_ADDR
14244: LD_VAR 0 8
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14445
// begin _d := rand ( 0 , 5 ) ;
14252: LD_ADDR_VAR 0 11
14256: PUSH
14257: LD_INT 0
14259: PPUSH
14260: LD_INT 5
14262: PPUSH
14263: CALL_OW 12
14267: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14268: LD_ADDR_VAR 0 12
14272: PUSH
14273: LD_INT 2
14275: PPUSH
14276: LD_INT 6
14278: PPUSH
14279: CALL_OW 12
14283: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14284: LD_ADDR_VAR 0 9
14288: PUSH
14289: LD_VAR 0 2
14293: PPUSH
14294: LD_VAR 0 11
14298: PPUSH
14299: LD_VAR 0 12
14303: PPUSH
14304: CALL_OW 272
14308: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14309: LD_ADDR_VAR 0 10
14313: PUSH
14314: LD_VAR 0 3
14318: PPUSH
14319: LD_VAR 0 11
14323: PPUSH
14324: LD_VAR 0 12
14328: PPUSH
14329: CALL_OW 273
14333: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14334: LD_VAR 0 9
14338: PPUSH
14339: LD_VAR 0 10
14343: PPUSH
14344: CALL_OW 488
14348: PUSH
14349: LD_VAR 0 9
14353: PUSH
14354: LD_VAR 0 10
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_VAR 0 7
14367: IN
14368: NOT
14369: AND
14370: PUSH
14371: LD_VAR 0 9
14375: PPUSH
14376: LD_VAR 0 10
14380: PPUSH
14381: CALL_OW 458
14385: NOT
14386: AND
14387: IFFALSE 14429
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14389: LD_ADDR_VAR 0 7
14393: PUSH
14394: LD_VAR 0 7
14398: PPUSH
14399: LD_VAR 0 7
14403: PUSH
14404: LD_INT 1
14406: PLUS
14407: PPUSH
14408: LD_VAR 0 9
14412: PUSH
14413: LD_VAR 0 10
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 1
14426: ST_TO_ADDR
14427: GO 14443
// i := i - 1 ;
14429: LD_ADDR_VAR 0 5
14433: PUSH
14434: LD_VAR 0 5
14438: PUSH
14439: LD_INT 1
14441: MINUS
14442: ST_TO_ADDR
// end ;
14443: GO 14249
14445: POP
14446: POP
// for i in tmp do
14447: LD_ADDR_VAR 0 5
14451: PUSH
14452: LD_VAR 0 7
14456: PUSH
14457: FOR_IN
14458: IFFALSE 14496
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14460: LD_VAR 0 1
14464: PPUSH
14465: LD_VAR 0 5
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_VAR 0 5
14478: PUSH
14479: LD_INT 2
14481: ARRAY
14482: PPUSH
14483: CALL 13438 0 3
14487: NOT
14488: IFFALSE 14494
// exit ;
14490: POP
14491: POP
14492: GO 14498
14494: GO 14457
14496: POP
14497: POP
// end ;
14498: LD_VAR 0 4
14502: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14503: LD_INT 0
14505: PPUSH
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
// if not GetClass ( unit ) = class_sniper then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 257
14521: PUSH
14522: LD_INT 5
14524: EQUAL
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14918
// dist := 8 ;
14530: LD_ADDR_VAR 0 5
14534: PUSH
14535: LD_INT 8
14537: ST_TO_ADDR
// viewRange := 12 ;
14538: LD_ADDR_VAR 0 7
14542: PUSH
14543: LD_INT 12
14545: ST_TO_ADDR
// side := GetSide ( unit ) ;
14546: LD_ADDR_VAR 0 6
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 255
14560: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14561: LD_INT 61
14563: PPUSH
14564: LD_VAR 0 6
14568: PPUSH
14569: CALL_OW 321
14573: PUSH
14574: LD_INT 2
14576: EQUAL
14577: IFFALSE 14587
// viewRange := 16 ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_INT 16
14586: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14587: LD_VAR 0 1
14591: PPUSH
14592: LD_VAR 0 2
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: CALL_OW 297
14606: PUSH
14607: LD_VAR 0 5
14611: GREATER
14612: IFFALSE 14691
// begin ComMoveXY ( unit , x , y ) ;
14614: LD_VAR 0 1
14618: PPUSH
14619: LD_VAR 0 2
14623: PPUSH
14624: LD_VAR 0 3
14628: PPUSH
14629: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14633: LD_INT 35
14635: PPUSH
14636: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_VAR 0 2
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL 64441 0 3
14659: NOT
14660: IFFALSE 14664
// exit ;
14662: GO 14918
// until GetDistUnitXY ( unit , x , y ) < dist ;
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: LESS
14689: IFFALSE 14633
// end ; ComTurnXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 118
// wait ( 5 ) ;
14710: LD_INT 5
14712: PPUSH
14713: CALL_OW 67
// _d := GetDir ( unit ) ;
14717: LD_ADDR_VAR 0 10
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: CALL_OW 254
14731: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14732: LD_ADDR_VAR 0 8
14736: PUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 250
14746: PPUSH
14747: LD_VAR 0 10
14751: PPUSH
14752: LD_VAR 0 5
14756: PPUSH
14757: CALL_OW 272
14761: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14762: LD_ADDR_VAR 0 9
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 251
14776: PPUSH
14777: LD_VAR 0 10
14781: PPUSH
14782: LD_VAR 0 5
14786: PPUSH
14787: CALL_OW 273
14791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14792: LD_VAR 0 8
14796: PPUSH
14797: LD_VAR 0 9
14801: PPUSH
14802: CALL_OW 488
14806: NOT
14807: IFFALSE 14811
// exit ;
14809: GO 14918
// ComAnimCustom ( unit , 1 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14823: LD_VAR 0 8
14827: PPUSH
14828: LD_VAR 0 9
14832: PPUSH
14833: LD_VAR 0 6
14837: PPUSH
14838: LD_VAR 0 7
14842: PPUSH
14843: CALL_OW 330
// repeat wait ( 1 ) ;
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 316
14863: PUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 314
14873: OR
14874: PUSH
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 302
14884: NOT
14885: OR
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: OR
14897: IFFALSE 14847
// RemoveSeeing ( _x , _y , side ) ;
14899: LD_VAR 0 8
14903: PPUSH
14904: LD_VAR 0 9
14908: PPUSH
14909: LD_VAR 0 6
14913: PPUSH
14914: CALL_OW 331
// end ; end_of_file
14918: LD_VAR 0 4
14922: RET
// every 0 0$1 do
14923: GO 14925
14925: DISABLE
// begin enable ;
14926: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14927: LD_STRING updateTimer(
14929: PUSH
14930: LD_OWVAR 1
14934: STR
14935: PUSH
14936: LD_STRING );
14938: STR
14939: PPUSH
14940: CALL_OW 559
// end ;
14944: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14945: LD_INT 0
14947: PPUSH
// if p2 = 100 then
14948: LD_VAR 0 2
14952: PUSH
14953: LD_INT 100
14955: EQUAL
14956: IFFALSE 15959
// begin if not StreamModeActive then
14958: LD_EXP 48
14962: NOT
14963: IFFALSE 14973
// StreamModeActive := true ;
14965: LD_ADDR_EXP 48
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// if p3 = 0 then
14973: LD_VAR 0 3
14977: PUSH
14978: LD_INT 0
14980: EQUAL
14981: IFFALSE 14987
// InitStreamMode ;
14983: CALL 16119 0 0
// if p3 = 1 then
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 1
14994: EQUAL
14995: IFFALSE 15005
// sRocket := true ;
14997: LD_ADDR_EXP 53
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// if p3 = 2 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 2
15012: EQUAL
15013: IFFALSE 15023
// sSpeed := true ;
15015: LD_ADDR_EXP 52
15019: PUSH
15020: LD_INT 1
15022: ST_TO_ADDR
// if p3 = 3 then
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 3
15030: EQUAL
15031: IFFALSE 15041
// sEngine := true ;
15033: LD_ADDR_EXP 54
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// if p3 = 4 then
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 4
15048: EQUAL
15049: IFFALSE 15059
// sSpec := true ;
15051: LD_ADDR_EXP 51
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if p3 = 5 then
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 5
15066: EQUAL
15067: IFFALSE 15077
// sLevel := true ;
15069: LD_ADDR_EXP 55
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// if p3 = 6 then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 6
15084: EQUAL
15085: IFFALSE 15095
// sArmoury := true ;
15087: LD_ADDR_EXP 56
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 7 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 7
15102: EQUAL
15103: IFFALSE 15113
// sRadar := true ;
15105: LD_ADDR_EXP 57
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// if p3 = 8 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 8
15120: EQUAL
15121: IFFALSE 15131
// sBunker := true ;
15123: LD_ADDR_EXP 58
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 9 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 9
15138: EQUAL
15139: IFFALSE 15149
// sHack := true ;
15141: LD_ADDR_EXP 59
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// if p3 = 10 then
15149: LD_VAR 0 3
15153: PUSH
15154: LD_INT 10
15156: EQUAL
15157: IFFALSE 15167
// sFire := true ;
15159: LD_ADDR_EXP 60
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// if p3 = 11 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_INT 11
15174: EQUAL
15175: IFFALSE 15185
// sRefresh := true ;
15177: LD_ADDR_EXP 61
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 12 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 12
15192: EQUAL
15193: IFFALSE 15203
// sExp := true ;
15195: LD_ADDR_EXP 62
15199: PUSH
15200: LD_INT 1
15202: ST_TO_ADDR
// if p3 = 13 then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_INT 13
15210: EQUAL
15211: IFFALSE 15221
// sDepot := true ;
15213: LD_ADDR_EXP 63
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// if p3 = 14 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 14
15228: EQUAL
15229: IFFALSE 15239
// sFlag := true ;
15231: LD_ADDR_EXP 64
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 15 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 15
15246: EQUAL
15247: IFFALSE 15257
// sKamikadze := true ;
15249: LD_ADDR_EXP 72
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 16 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 16
15264: EQUAL
15265: IFFALSE 15275
// sTroll := true ;
15267: LD_ADDR_EXP 73
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 17 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 17
15282: EQUAL
15283: IFFALSE 15293
// sSlow := true ;
15285: LD_ADDR_EXP 74
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 18 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 18
15300: EQUAL
15301: IFFALSE 15311
// sLack := true ;
15303: LD_ADDR_EXP 75
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 19 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 19
15318: EQUAL
15319: IFFALSE 15329
// sTank := true ;
15321: LD_ADDR_EXP 77
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 20 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 20
15336: EQUAL
15337: IFFALSE 15347
// sRemote := true ;
15339: LD_ADDR_EXP 78
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 21 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 21
15354: EQUAL
15355: IFFALSE 15365
// sPowell := true ;
15357: LD_ADDR_EXP 79
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 22 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 22
15372: EQUAL
15373: IFFALSE 15383
// sTeleport := true ;
15375: LD_ADDR_EXP 82
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 23 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 23
15390: EQUAL
15391: IFFALSE 15401
// sOilTower := true ;
15393: LD_ADDR_EXP 84
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 24 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 24
15408: EQUAL
15409: IFFALSE 15419
// sShovel := true ;
15411: LD_ADDR_EXP 85
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 25 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 25
15426: EQUAL
15427: IFFALSE 15437
// sSheik := true ;
15429: LD_ADDR_EXP 86
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 26 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 26
15444: EQUAL
15445: IFFALSE 15455
// sEarthquake := true ;
15447: LD_ADDR_EXP 88
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 27 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 27
15462: EQUAL
15463: IFFALSE 15473
// sAI := true ;
15465: LD_ADDR_EXP 89
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 28 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 28
15480: EQUAL
15481: IFFALSE 15491
// sCargo := true ;
15483: LD_ADDR_EXP 92
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 29 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 29
15498: EQUAL
15499: IFFALSE 15509
// sDLaser := true ;
15501: LD_ADDR_EXP 93
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 30 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 30
15516: EQUAL
15517: IFFALSE 15527
// sExchange := true ;
15519: LD_ADDR_EXP 94
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 31 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 31
15534: EQUAL
15535: IFFALSE 15545
// sFac := true ;
15537: LD_ADDR_EXP 95
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 32 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 32
15552: EQUAL
15553: IFFALSE 15563
// sPower := true ;
15555: LD_ADDR_EXP 96
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if p3 = 33 then
15563: LD_VAR 0 3
15567: PUSH
15568: LD_INT 33
15570: EQUAL
15571: IFFALSE 15581
// sRandom := true ;
15573: LD_ADDR_EXP 97
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// if p3 = 34 then
15581: LD_VAR 0 3
15585: PUSH
15586: LD_INT 34
15588: EQUAL
15589: IFFALSE 15599
// sShield := true ;
15591: LD_ADDR_EXP 98
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// if p3 = 35 then
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 35
15606: EQUAL
15607: IFFALSE 15617
// sTime := true ;
15609: LD_ADDR_EXP 99
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// if p3 = 36 then
15617: LD_VAR 0 3
15621: PUSH
15622: LD_INT 36
15624: EQUAL
15625: IFFALSE 15635
// sTools := true ;
15627: LD_ADDR_EXP 100
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// if p3 = 101 then
15635: LD_VAR 0 3
15639: PUSH
15640: LD_INT 101
15642: EQUAL
15643: IFFALSE 15653
// sSold := true ;
15645: LD_ADDR_EXP 65
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// if p3 = 102 then
15653: LD_VAR 0 3
15657: PUSH
15658: LD_INT 102
15660: EQUAL
15661: IFFALSE 15671
// sDiff := true ;
15663: LD_ADDR_EXP 66
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// if p3 = 103 then
15671: LD_VAR 0 3
15675: PUSH
15676: LD_INT 103
15678: EQUAL
15679: IFFALSE 15689
// sFog := true ;
15681: LD_ADDR_EXP 69
15685: PUSH
15686: LD_INT 1
15688: ST_TO_ADDR
// if p3 = 104 then
15689: LD_VAR 0 3
15693: PUSH
15694: LD_INT 104
15696: EQUAL
15697: IFFALSE 15707
// sReset := true ;
15699: LD_ADDR_EXP 70
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
// if p3 = 105 then
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 105
15714: EQUAL
15715: IFFALSE 15725
// sSun := true ;
15717: LD_ADDR_EXP 71
15721: PUSH
15722: LD_INT 1
15724: ST_TO_ADDR
// if p3 = 106 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 106
15732: EQUAL
15733: IFFALSE 15743
// sTiger := true ;
15735: LD_ADDR_EXP 67
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 107 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 107
15750: EQUAL
15751: IFFALSE 15761
// sBomb := true ;
15753: LD_ADDR_EXP 68
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 108 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 108
15768: EQUAL
15769: IFFALSE 15779
// sWound := true ;
15771: LD_ADDR_EXP 76
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 109 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 109
15786: EQUAL
15787: IFFALSE 15797
// sBetray := true ;
15789: LD_ADDR_EXP 80
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// if p3 = 110 then
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 110
15804: EQUAL
15805: IFFALSE 15815
// sContamin := true ;
15807: LD_ADDR_EXP 81
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// if p3 = 111 then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 111
15822: EQUAL
15823: IFFALSE 15833
// sOil := true ;
15825: LD_ADDR_EXP 83
15829: PUSH
15830: LD_INT 1
15832: ST_TO_ADDR
// if p3 = 112 then
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 112
15840: EQUAL
15841: IFFALSE 15851
// sStu := true ;
15843: LD_ADDR_EXP 87
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// if p3 = 113 then
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 113
15858: EQUAL
15859: IFFALSE 15869
// sBazooka := true ;
15861: LD_ADDR_EXP 90
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// if p3 = 114 then
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 114
15876: EQUAL
15877: IFFALSE 15887
// sMortar := true ;
15879: LD_ADDR_EXP 91
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if p3 = 115 then
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 115
15894: EQUAL
15895: IFFALSE 15905
// sRanger := true ;
15897: LD_ADDR_EXP 101
15901: PUSH
15902: LD_INT 1
15904: ST_TO_ADDR
// if p3 = 116 then
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 116
15912: EQUAL
15913: IFFALSE 15923
// sComputer := true ;
15915: LD_ADDR_EXP 102
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if p3 = 117 then
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 117
15930: EQUAL
15931: IFFALSE 15941
// s30 := true ;
15933: LD_ADDR_EXP 103
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// if p3 = 118 then
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 118
15948: EQUAL
15949: IFFALSE 15959
// s60 := true ;
15951: LD_ADDR_EXP 104
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// end ; if p2 = 101 then
15959: LD_VAR 0 2
15963: PUSH
15964: LD_INT 101
15966: EQUAL
15967: IFFALSE 16095
// begin case p3 of 1 :
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 1
15976: DOUBLE
15977: EQUAL
15978: IFTRUE 15982
15980: GO 15989
15982: POP
// hHackUnlimitedResources ; 2 :
15983: CALL 27691 0 0
15987: GO 16095
15989: LD_INT 2
15991: DOUBLE
15992: EQUAL
15993: IFTRUE 15997
15995: GO 16004
15997: POP
// hHackSetLevel10 ; 3 :
15998: CALL 27824 0 0
16002: GO 16095
16004: LD_INT 3
16006: DOUBLE
16007: EQUAL
16008: IFTRUE 16012
16010: GO 16019
16012: POP
// hHackSetLevel10YourUnits ; 4 :
16013: CALL 27909 0 0
16017: GO 16095
16019: LD_INT 4
16021: DOUBLE
16022: EQUAL
16023: IFTRUE 16027
16025: GO 16034
16027: POP
// hHackInvincible ; 5 :
16028: CALL 28357 0 0
16032: GO 16095
16034: LD_INT 5
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16049
16042: POP
// hHackInvisible ; 6 :
16043: CALL 28468 0 0
16047: GO 16095
16049: LD_INT 6
16051: DOUBLE
16052: EQUAL
16053: IFTRUE 16057
16055: GO 16064
16057: POP
// hHackChangeYourSide ; 7 :
16058: CALL 28525 0 0
16062: GO 16095
16064: LD_INT 7
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16079
16072: POP
// hHackChangeUnitSide ; 8 :
16073: CALL 28567 0 0
16077: GO 16095
16079: LD_INT 8
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16094
16087: POP
// hHackFog ; end ;
16088: CALL 28668 0 0
16092: GO 16095
16094: POP
// end ; end ;
16095: LD_VAR 0 7
16099: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16100: GO 16102
16102: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16103: LD_STRING initStreamRollete();
16105: PPUSH
16106: CALL_OW 559
// InitStreamMode ;
16110: CALL 16119 0 0
// DefineStreamItems ( ) ;
16114: CALL 16583 0 0
// end ;
16118: END
// function InitStreamMode ; begin
16119: LD_INT 0
16121: PPUSH
// streamModeActive := false ;
16122: LD_ADDR_EXP 48
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
// normalCounter := 36 ;
16130: LD_ADDR_EXP 49
16134: PUSH
16135: LD_INT 36
16137: ST_TO_ADDR
// hardcoreCounter := 16 ;
16138: LD_ADDR_EXP 50
16142: PUSH
16143: LD_INT 16
16145: ST_TO_ADDR
// sRocket := false ;
16146: LD_ADDR_EXP 53
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
// sSpeed := false ;
16154: LD_ADDR_EXP 52
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// sEngine := false ;
16162: LD_ADDR_EXP 54
16166: PUSH
16167: LD_INT 0
16169: ST_TO_ADDR
// sSpec := false ;
16170: LD_ADDR_EXP 51
16174: PUSH
16175: LD_INT 0
16177: ST_TO_ADDR
// sLevel := false ;
16178: LD_ADDR_EXP 55
16182: PUSH
16183: LD_INT 0
16185: ST_TO_ADDR
// sArmoury := false ;
16186: LD_ADDR_EXP 56
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// sRadar := false ;
16194: LD_ADDR_EXP 57
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
// sBunker := false ;
16202: LD_ADDR_EXP 58
16206: PUSH
16207: LD_INT 0
16209: ST_TO_ADDR
// sHack := false ;
16210: LD_ADDR_EXP 59
16214: PUSH
16215: LD_INT 0
16217: ST_TO_ADDR
// sFire := false ;
16218: LD_ADDR_EXP 60
16222: PUSH
16223: LD_INT 0
16225: ST_TO_ADDR
// sRefresh := false ;
16226: LD_ADDR_EXP 61
16230: PUSH
16231: LD_INT 0
16233: ST_TO_ADDR
// sExp := false ;
16234: LD_ADDR_EXP 62
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
// sDepot := false ;
16242: LD_ADDR_EXP 63
16246: PUSH
16247: LD_INT 0
16249: ST_TO_ADDR
// sFlag := false ;
16250: LD_ADDR_EXP 64
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
// sKamikadze := false ;
16258: LD_ADDR_EXP 72
16262: PUSH
16263: LD_INT 0
16265: ST_TO_ADDR
// sTroll := false ;
16266: LD_ADDR_EXP 73
16270: PUSH
16271: LD_INT 0
16273: ST_TO_ADDR
// sSlow := false ;
16274: LD_ADDR_EXP 74
16278: PUSH
16279: LD_INT 0
16281: ST_TO_ADDR
// sLack := false ;
16282: LD_ADDR_EXP 75
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// sTank := false ;
16290: LD_ADDR_EXP 77
16294: PUSH
16295: LD_INT 0
16297: ST_TO_ADDR
// sRemote := false ;
16298: LD_ADDR_EXP 78
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// sPowell := false ;
16306: LD_ADDR_EXP 79
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// sTeleport := false ;
16314: LD_ADDR_EXP 82
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// sOilTower := false ;
16322: LD_ADDR_EXP 84
16326: PUSH
16327: LD_INT 0
16329: ST_TO_ADDR
// sShovel := false ;
16330: LD_ADDR_EXP 85
16334: PUSH
16335: LD_INT 0
16337: ST_TO_ADDR
// sSheik := false ;
16338: LD_ADDR_EXP 86
16342: PUSH
16343: LD_INT 0
16345: ST_TO_ADDR
// sEarthquake := false ;
16346: LD_ADDR_EXP 88
16350: PUSH
16351: LD_INT 0
16353: ST_TO_ADDR
// sAI := false ;
16354: LD_ADDR_EXP 89
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// sCargo := false ;
16362: LD_ADDR_EXP 92
16366: PUSH
16367: LD_INT 0
16369: ST_TO_ADDR
// sDLaser := false ;
16370: LD_ADDR_EXP 93
16374: PUSH
16375: LD_INT 0
16377: ST_TO_ADDR
// sExchange := false ;
16378: LD_ADDR_EXP 94
16382: PUSH
16383: LD_INT 0
16385: ST_TO_ADDR
// sFac := false ;
16386: LD_ADDR_EXP 95
16390: PUSH
16391: LD_INT 0
16393: ST_TO_ADDR
// sPower := false ;
16394: LD_ADDR_EXP 96
16398: PUSH
16399: LD_INT 0
16401: ST_TO_ADDR
// sRandom := false ;
16402: LD_ADDR_EXP 97
16406: PUSH
16407: LD_INT 0
16409: ST_TO_ADDR
// sShield := false ;
16410: LD_ADDR_EXP 98
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// sTime := false ;
16418: LD_ADDR_EXP 99
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// sTools := false ;
16426: LD_ADDR_EXP 100
16430: PUSH
16431: LD_INT 0
16433: ST_TO_ADDR
// sSold := false ;
16434: LD_ADDR_EXP 65
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// sDiff := false ;
16442: LD_ADDR_EXP 66
16446: PUSH
16447: LD_INT 0
16449: ST_TO_ADDR
// sFog := false ;
16450: LD_ADDR_EXP 69
16454: PUSH
16455: LD_INT 0
16457: ST_TO_ADDR
// sReset := false ;
16458: LD_ADDR_EXP 70
16462: PUSH
16463: LD_INT 0
16465: ST_TO_ADDR
// sSun := false ;
16466: LD_ADDR_EXP 71
16470: PUSH
16471: LD_INT 0
16473: ST_TO_ADDR
// sTiger := false ;
16474: LD_ADDR_EXP 67
16478: PUSH
16479: LD_INT 0
16481: ST_TO_ADDR
// sBomb := false ;
16482: LD_ADDR_EXP 68
16486: PUSH
16487: LD_INT 0
16489: ST_TO_ADDR
// sWound := false ;
16490: LD_ADDR_EXP 76
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// sBetray := false ;
16498: LD_ADDR_EXP 80
16502: PUSH
16503: LD_INT 0
16505: ST_TO_ADDR
// sContamin := false ;
16506: LD_ADDR_EXP 81
16510: PUSH
16511: LD_INT 0
16513: ST_TO_ADDR
// sOil := false ;
16514: LD_ADDR_EXP 83
16518: PUSH
16519: LD_INT 0
16521: ST_TO_ADDR
// sStu := false ;
16522: LD_ADDR_EXP 87
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// sBazooka := false ;
16530: LD_ADDR_EXP 90
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// sMortar := false ;
16538: LD_ADDR_EXP 91
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// sRanger := false ;
16546: LD_ADDR_EXP 101
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// sComputer := false ;
16554: LD_ADDR_EXP 102
16558: PUSH
16559: LD_INT 0
16561: ST_TO_ADDR
// s30 := false ;
16562: LD_ADDR_EXP 103
16566: PUSH
16567: LD_INT 0
16569: ST_TO_ADDR
// s60 := false ;
16570: LD_ADDR_EXP 104
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// end ;
16578: LD_VAR 0 1
16582: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
// result := [ ] ;
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: EMPTY
16596: ST_TO_ADDR
// if campaign_id = 1 then
16597: LD_OWVAR 69
16601: PUSH
16602: LD_INT 1
16604: EQUAL
16605: IFFALSE 19771
// begin case mission_number of 1 :
16607: LD_OWVAR 70
16611: PUSH
16612: LD_INT 1
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16696
16620: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 4
16631: PUSH
16632: LD_INT 11
16634: PUSH
16635: LD_INT 12
16637: PUSH
16638: LD_INT 15
16640: PUSH
16641: LD_INT 16
16643: PUSH
16644: LD_INT 22
16646: PUSH
16647: LD_INT 23
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 101
16666: PUSH
16667: LD_INT 102
16669: PUSH
16670: LD_INT 106
16672: PUSH
16673: LD_INT 116
16675: PUSH
16676: LD_INT 117
16678: PUSH
16679: LD_INT 118
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: ST_TO_ADDR
16694: GO 19769
16696: LD_INT 2
16698: DOUBLE
16699: EQUAL
16700: IFTRUE 16704
16702: GO 16788
16704: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: LD_INT 4
16715: PUSH
16716: LD_INT 11
16718: PUSH
16719: LD_INT 12
16721: PUSH
16722: LD_INT 15
16724: PUSH
16725: LD_INT 16
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_INT 23
16733: PUSH
16734: LD_INT 26
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 101
16750: PUSH
16751: LD_INT 102
16753: PUSH
16754: LD_INT 105
16756: PUSH
16757: LD_INT 106
16759: PUSH
16760: LD_INT 108
16762: PUSH
16763: LD_INT 116
16765: PUSH
16766: LD_INT 117
16768: PUSH
16769: LD_INT 118
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: ST_TO_ADDR
16786: GO 19769
16788: LD_INT 3
16790: DOUBLE
16791: EQUAL
16792: IFTRUE 16796
16794: GO 16884
16796: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: LD_INT 5
16810: PUSH
16811: LD_INT 11
16813: PUSH
16814: LD_INT 12
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: LD_INT 16
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_INT 26
16828: PUSH
16829: LD_INT 36
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 101
16846: PUSH
16847: LD_INT 102
16849: PUSH
16850: LD_INT 105
16852: PUSH
16853: LD_INT 106
16855: PUSH
16856: LD_INT 108
16858: PUSH
16859: LD_INT 116
16861: PUSH
16862: LD_INT 117
16864: PUSH
16865: LD_INT 118
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: ST_TO_ADDR
16882: GO 19769
16884: LD_INT 4
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16988
16892: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16893: LD_ADDR_VAR 0 1
16897: PUSH
16898: LD_INT 2
16900: PUSH
16901: LD_INT 4
16903: PUSH
16904: LD_INT 5
16906: PUSH
16907: LD_INT 8
16909: PUSH
16910: LD_INT 11
16912: PUSH
16913: LD_INT 12
16915: PUSH
16916: LD_INT 15
16918: PUSH
16919: LD_INT 16
16921: PUSH
16922: LD_INT 22
16924: PUSH
16925: LD_INT 23
16927: PUSH
16928: LD_INT 26
16930: PUSH
16931: LD_INT 36
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 101
16950: PUSH
16951: LD_INT 102
16953: PUSH
16954: LD_INT 105
16956: PUSH
16957: LD_INT 106
16959: PUSH
16960: LD_INT 108
16962: PUSH
16963: LD_INT 116
16965: PUSH
16966: LD_INT 117
16968: PUSH
16969: LD_INT 118
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: ST_TO_ADDR
16986: GO 19769
16988: LD_INT 5
16990: DOUBLE
16991: EQUAL
16992: IFTRUE 16996
16994: GO 17108
16996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16997: LD_ADDR_VAR 0 1
17001: PUSH
17002: LD_INT 2
17004: PUSH
17005: LD_INT 4
17007: PUSH
17008: LD_INT 5
17010: PUSH
17011: LD_INT 6
17013: PUSH
17014: LD_INT 8
17016: PUSH
17017: LD_INT 11
17019: PUSH
17020: LD_INT 12
17022: PUSH
17023: LD_INT 15
17025: PUSH
17026: LD_INT 16
17028: PUSH
17029: LD_INT 22
17031: PUSH
17032: LD_INT 23
17034: PUSH
17035: LD_INT 25
17037: PUSH
17038: LD_INT 26
17040: PUSH
17041: LD_INT 36
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 101
17062: PUSH
17063: LD_INT 102
17065: PUSH
17066: LD_INT 105
17068: PUSH
17069: LD_INT 106
17071: PUSH
17072: LD_INT 108
17074: PUSH
17075: LD_INT 109
17077: PUSH
17078: LD_INT 112
17080: PUSH
17081: LD_INT 116
17083: PUSH
17084: LD_INT 117
17086: PUSH
17087: LD_INT 118
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: ST_TO_ADDR
17106: GO 19769
17108: LD_INT 6
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17248
17116: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17117: LD_ADDR_VAR 0 1
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 6
17133: PUSH
17134: LD_INT 8
17136: PUSH
17137: LD_INT 11
17139: PUSH
17140: LD_INT 12
17142: PUSH
17143: LD_INT 15
17145: PUSH
17146: LD_INT 16
17148: PUSH
17149: LD_INT 20
17151: PUSH
17152: LD_INT 21
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 23
17160: PUSH
17161: LD_INT 25
17163: PUSH
17164: LD_INT 26
17166: PUSH
17167: LD_INT 30
17169: PUSH
17170: LD_INT 31
17172: PUSH
17173: LD_INT 32
17175: PUSH
17176: LD_INT 36
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 101
17202: PUSH
17203: LD_INT 102
17205: PUSH
17206: LD_INT 105
17208: PUSH
17209: LD_INT 106
17211: PUSH
17212: LD_INT 108
17214: PUSH
17215: LD_INT 109
17217: PUSH
17218: LD_INT 112
17220: PUSH
17221: LD_INT 116
17223: PUSH
17224: LD_INT 117
17226: PUSH
17227: LD_INT 118
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: ST_TO_ADDR
17246: GO 19769
17248: LD_INT 7
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17368
17256: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_INT 2
17264: PUSH
17265: LD_INT 4
17267: PUSH
17268: LD_INT 5
17270: PUSH
17271: LD_INT 7
17273: PUSH
17274: LD_INT 11
17276: PUSH
17277: LD_INT 12
17279: PUSH
17280: LD_INT 15
17282: PUSH
17283: LD_INT 16
17285: PUSH
17286: LD_INT 20
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_INT 23
17297: PUSH
17298: LD_INT 25
17300: PUSH
17301: LD_INT 26
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 101
17322: PUSH
17323: LD_INT 102
17325: PUSH
17326: LD_INT 103
17328: PUSH
17329: LD_INT 105
17331: PUSH
17332: LD_INT 106
17334: PUSH
17335: LD_INT 108
17337: PUSH
17338: LD_INT 112
17340: PUSH
17341: LD_INT 116
17343: PUSH
17344: LD_INT 117
17346: PUSH
17347: LD_INT 118
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: ST_TO_ADDR
17366: GO 19769
17368: LD_INT 8
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17516
17376: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17377: LD_ADDR_VAR 0 1
17381: PUSH
17382: LD_INT 2
17384: PUSH
17385: LD_INT 4
17387: PUSH
17388: LD_INT 5
17390: PUSH
17391: LD_INT 6
17393: PUSH
17394: LD_INT 7
17396: PUSH
17397: LD_INT 8
17399: PUSH
17400: LD_INT 11
17402: PUSH
17403: LD_INT 12
17405: PUSH
17406: LD_INT 15
17408: PUSH
17409: LD_INT 16
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 25
17426: PUSH
17427: LD_INT 26
17429: PUSH
17430: LD_INT 30
17432: PUSH
17433: LD_INT 31
17435: PUSH
17436: LD_INT 32
17438: PUSH
17439: LD_INT 36
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 101
17466: PUSH
17467: LD_INT 102
17469: PUSH
17470: LD_INT 103
17472: PUSH
17473: LD_INT 105
17475: PUSH
17476: LD_INT 106
17478: PUSH
17479: LD_INT 108
17481: PUSH
17482: LD_INT 109
17484: PUSH
17485: LD_INT 112
17487: PUSH
17488: LD_INT 116
17490: PUSH
17491: LD_INT 117
17493: PUSH
17494: LD_INT 118
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: ST_TO_ADDR
17514: GO 19769
17516: LD_INT 9
17518: DOUBLE
17519: EQUAL
17520: IFTRUE 17524
17522: GO 17672
17524: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17525: LD_ADDR_VAR 0 1
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: LD_INT 4
17535: PUSH
17536: LD_INT 5
17538: PUSH
17539: LD_INT 6
17541: PUSH
17542: LD_INT 7
17544: PUSH
17545: LD_INT 8
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 15
17556: PUSH
17557: LD_INT 16
17559: PUSH
17560: LD_INT 20
17562: PUSH
17563: LD_INT 21
17565: PUSH
17566: LD_INT 22
17568: PUSH
17569: LD_INT 23
17571: PUSH
17572: LD_INT 25
17574: PUSH
17575: LD_INT 26
17577: PUSH
17578: LD_INT 28
17580: PUSH
17581: LD_INT 30
17583: PUSH
17584: LD_INT 31
17586: PUSH
17587: LD_INT 32
17589: PUSH
17590: LD_INT 36
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 101
17618: PUSH
17619: LD_INT 102
17621: PUSH
17622: LD_INT 103
17624: PUSH
17625: LD_INT 105
17627: PUSH
17628: LD_INT 106
17630: PUSH
17631: LD_INT 108
17633: PUSH
17634: LD_INT 109
17636: PUSH
17637: LD_INT 112
17639: PUSH
17640: LD_INT 114
17642: PUSH
17643: LD_INT 116
17645: PUSH
17646: LD_INT 117
17648: PUSH
17649: LD_INT 118
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: ST_TO_ADDR
17670: GO 19769
17672: LD_INT 10
17674: DOUBLE
17675: EQUAL
17676: IFTRUE 17680
17678: GO 17876
17680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17681: LD_ADDR_VAR 0 1
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: LD_INT 4
17691: PUSH
17692: LD_INT 5
17694: PUSH
17695: LD_INT 6
17697: PUSH
17698: LD_INT 7
17700: PUSH
17701: LD_INT 8
17703: PUSH
17704: LD_INT 9
17706: PUSH
17707: LD_INT 10
17709: PUSH
17710: LD_INT 11
17712: PUSH
17713: LD_INT 12
17715: PUSH
17716: LD_INT 13
17718: PUSH
17719: LD_INT 14
17721: PUSH
17722: LD_INT 15
17724: PUSH
17725: LD_INT 16
17727: PUSH
17728: LD_INT 17
17730: PUSH
17731: LD_INT 18
17733: PUSH
17734: LD_INT 19
17736: PUSH
17737: LD_INT 20
17739: PUSH
17740: LD_INT 21
17742: PUSH
17743: LD_INT 22
17745: PUSH
17746: LD_INT 23
17748: PUSH
17749: LD_INT 24
17751: PUSH
17752: LD_INT 25
17754: PUSH
17755: LD_INT 26
17757: PUSH
17758: LD_INT 28
17760: PUSH
17761: LD_INT 30
17763: PUSH
17764: LD_INT 31
17766: PUSH
17767: LD_INT 32
17769: PUSH
17770: LD_INT 36
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 101
17806: PUSH
17807: LD_INT 102
17809: PUSH
17810: LD_INT 103
17812: PUSH
17813: LD_INT 104
17815: PUSH
17816: LD_INT 105
17818: PUSH
17819: LD_INT 106
17821: PUSH
17822: LD_INT 107
17824: PUSH
17825: LD_INT 108
17827: PUSH
17828: LD_INT 109
17830: PUSH
17831: LD_INT 110
17833: PUSH
17834: LD_INT 111
17836: PUSH
17837: LD_INT 112
17839: PUSH
17840: LD_INT 114
17842: PUSH
17843: LD_INT 116
17845: PUSH
17846: LD_INT 117
17848: PUSH
17849: LD_INT 118
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: ST_TO_ADDR
17874: GO 19769
17876: LD_INT 11
17878: DOUBLE
17879: EQUAL
17880: IFTRUE 17884
17882: GO 18088
17884: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: LD_INT 4
17898: PUSH
17899: LD_INT 5
17901: PUSH
17902: LD_INT 6
17904: PUSH
17905: LD_INT 7
17907: PUSH
17908: LD_INT 8
17910: PUSH
17911: LD_INT 9
17913: PUSH
17914: LD_INT 10
17916: PUSH
17917: LD_INT 11
17919: PUSH
17920: LD_INT 12
17922: PUSH
17923: LD_INT 13
17925: PUSH
17926: LD_INT 14
17928: PUSH
17929: LD_INT 15
17931: PUSH
17932: LD_INT 16
17934: PUSH
17935: LD_INT 17
17937: PUSH
17938: LD_INT 18
17940: PUSH
17941: LD_INT 19
17943: PUSH
17944: LD_INT 20
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_INT 23
17955: PUSH
17956: LD_INT 24
17958: PUSH
17959: LD_INT 25
17961: PUSH
17962: LD_INT 26
17964: PUSH
17965: LD_INT 28
17967: PUSH
17968: LD_INT 30
17970: PUSH
17971: LD_INT 31
17973: PUSH
17974: LD_INT 32
17976: PUSH
17977: LD_INT 34
17979: PUSH
17980: LD_INT 36
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 101
18018: PUSH
18019: LD_INT 102
18021: PUSH
18022: LD_INT 103
18024: PUSH
18025: LD_INT 104
18027: PUSH
18028: LD_INT 105
18030: PUSH
18031: LD_INT 106
18033: PUSH
18034: LD_INT 107
18036: PUSH
18037: LD_INT 108
18039: PUSH
18040: LD_INT 109
18042: PUSH
18043: LD_INT 110
18045: PUSH
18046: LD_INT 111
18048: PUSH
18049: LD_INT 112
18051: PUSH
18052: LD_INT 114
18054: PUSH
18055: LD_INT 116
18057: PUSH
18058: LD_INT 117
18060: PUSH
18061: LD_INT 118
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: ST_TO_ADDR
18086: GO 19769
18088: LD_INT 12
18090: DOUBLE
18091: EQUAL
18092: IFTRUE 18096
18094: GO 18316
18096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: LD_INT 4
18113: PUSH
18114: LD_INT 5
18116: PUSH
18117: LD_INT 6
18119: PUSH
18120: LD_INT 7
18122: PUSH
18123: LD_INT 8
18125: PUSH
18126: LD_INT 9
18128: PUSH
18129: LD_INT 10
18131: PUSH
18132: LD_INT 11
18134: PUSH
18135: LD_INT 12
18137: PUSH
18138: LD_INT 13
18140: PUSH
18141: LD_INT 14
18143: PUSH
18144: LD_INT 15
18146: PUSH
18147: LD_INT 16
18149: PUSH
18150: LD_INT 17
18152: PUSH
18153: LD_INT 18
18155: PUSH
18156: LD_INT 19
18158: PUSH
18159: LD_INT 20
18161: PUSH
18162: LD_INT 21
18164: PUSH
18165: LD_INT 22
18167: PUSH
18168: LD_INT 23
18170: PUSH
18171: LD_INT 24
18173: PUSH
18174: LD_INT 25
18176: PUSH
18177: LD_INT 26
18179: PUSH
18180: LD_INT 27
18182: PUSH
18183: LD_INT 28
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 31
18191: PUSH
18192: LD_INT 32
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: LD_INT 36
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 101
18242: PUSH
18243: LD_INT 102
18245: PUSH
18246: LD_INT 103
18248: PUSH
18249: LD_INT 104
18251: PUSH
18252: LD_INT 105
18254: PUSH
18255: LD_INT 106
18257: PUSH
18258: LD_INT 107
18260: PUSH
18261: LD_INT 108
18263: PUSH
18264: LD_INT 109
18266: PUSH
18267: LD_INT 110
18269: PUSH
18270: LD_INT 111
18272: PUSH
18273: LD_INT 112
18275: PUSH
18276: LD_INT 113
18278: PUSH
18279: LD_INT 114
18281: PUSH
18282: LD_INT 116
18284: PUSH
18285: LD_INT 117
18287: PUSH
18288: LD_INT 118
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: ST_TO_ADDR
18314: GO 19769
18316: LD_INT 13
18318: DOUBLE
18319: EQUAL
18320: IFTRUE 18324
18322: GO 18532
18324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 4
18341: PUSH
18342: LD_INT 5
18344: PUSH
18345: LD_INT 8
18347: PUSH
18348: LD_INT 9
18350: PUSH
18351: LD_INT 10
18353: PUSH
18354: LD_INT 11
18356: PUSH
18357: LD_INT 12
18359: PUSH
18360: LD_INT 14
18362: PUSH
18363: LD_INT 15
18365: PUSH
18366: LD_INT 16
18368: PUSH
18369: LD_INT 17
18371: PUSH
18372: LD_INT 18
18374: PUSH
18375: LD_INT 19
18377: PUSH
18378: LD_INT 20
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 22
18386: PUSH
18387: LD_INT 23
18389: PUSH
18390: LD_INT 24
18392: PUSH
18393: LD_INT 25
18395: PUSH
18396: LD_INT 26
18398: PUSH
18399: LD_INT 27
18401: PUSH
18402: LD_INT 28
18404: PUSH
18405: LD_INT 30
18407: PUSH
18408: LD_INT 31
18410: PUSH
18411: LD_INT 32
18413: PUSH
18414: LD_INT 33
18416: PUSH
18417: LD_INT 34
18419: PUSH
18420: LD_INT 36
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 101
18458: PUSH
18459: LD_INT 102
18461: PUSH
18462: LD_INT 103
18464: PUSH
18465: LD_INT 104
18467: PUSH
18468: LD_INT 105
18470: PUSH
18471: LD_INT 106
18473: PUSH
18474: LD_INT 107
18476: PUSH
18477: LD_INT 108
18479: PUSH
18480: LD_INT 109
18482: PUSH
18483: LD_INT 110
18485: PUSH
18486: LD_INT 111
18488: PUSH
18489: LD_INT 112
18491: PUSH
18492: LD_INT 113
18494: PUSH
18495: LD_INT 114
18497: PUSH
18498: LD_INT 116
18500: PUSH
18501: LD_INT 117
18503: PUSH
18504: LD_INT 118
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: ST_TO_ADDR
18530: GO 19769
18532: LD_INT 14
18534: DOUBLE
18535: EQUAL
18536: IFTRUE 18540
18538: GO 18764
18540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18541: LD_ADDR_VAR 0 1
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: LD_INT 5
18560: PUSH
18561: LD_INT 6
18563: PUSH
18564: LD_INT 7
18566: PUSH
18567: LD_INT 8
18569: PUSH
18570: LD_INT 9
18572: PUSH
18573: LD_INT 10
18575: PUSH
18576: LD_INT 11
18578: PUSH
18579: LD_INT 12
18581: PUSH
18582: LD_INT 13
18584: PUSH
18585: LD_INT 14
18587: PUSH
18588: LD_INT 15
18590: PUSH
18591: LD_INT 16
18593: PUSH
18594: LD_INT 17
18596: PUSH
18597: LD_INT 18
18599: PUSH
18600: LD_INT 19
18602: PUSH
18603: LD_INT 20
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 23
18614: PUSH
18615: LD_INT 24
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 26
18623: PUSH
18624: LD_INT 27
18626: PUSH
18627: LD_INT 28
18629: PUSH
18630: LD_INT 29
18632: PUSH
18633: LD_INT 30
18635: PUSH
18636: LD_INT 31
18638: PUSH
18639: LD_INT 32
18641: PUSH
18642: LD_INT 33
18644: PUSH
18645: LD_INT 34
18647: PUSH
18648: LD_INT 36
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 103
18696: PUSH
18697: LD_INT 104
18699: PUSH
18700: LD_INT 105
18702: PUSH
18703: LD_INT 106
18705: PUSH
18706: LD_INT 107
18708: PUSH
18709: LD_INT 108
18711: PUSH
18712: LD_INT 109
18714: PUSH
18715: LD_INT 110
18717: PUSH
18718: LD_INT 111
18720: PUSH
18721: LD_INT 112
18723: PUSH
18724: LD_INT 113
18726: PUSH
18727: LD_INT 114
18729: PUSH
18730: LD_INT 116
18732: PUSH
18733: LD_INT 117
18735: PUSH
18736: LD_INT 118
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: ST_TO_ADDR
18762: GO 19769
18764: LD_INT 15
18766: DOUBLE
18767: EQUAL
18768: IFTRUE 18772
18770: GO 18996
18772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18773: LD_ADDR_VAR 0 1
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: LD_INT 4
18789: PUSH
18790: LD_INT 5
18792: PUSH
18793: LD_INT 6
18795: PUSH
18796: LD_INT 7
18798: PUSH
18799: LD_INT 8
18801: PUSH
18802: LD_INT 9
18804: PUSH
18805: LD_INT 10
18807: PUSH
18808: LD_INT 11
18810: PUSH
18811: LD_INT 12
18813: PUSH
18814: LD_INT 13
18816: PUSH
18817: LD_INT 14
18819: PUSH
18820: LD_INT 15
18822: PUSH
18823: LD_INT 16
18825: PUSH
18826: LD_INT 17
18828: PUSH
18829: LD_INT 18
18831: PUSH
18832: LD_INT 19
18834: PUSH
18835: LD_INT 20
18837: PUSH
18838: LD_INT 21
18840: PUSH
18841: LD_INT 22
18843: PUSH
18844: LD_INT 23
18846: PUSH
18847: LD_INT 24
18849: PUSH
18850: LD_INT 25
18852: PUSH
18853: LD_INT 26
18855: PUSH
18856: LD_INT 27
18858: PUSH
18859: LD_INT 28
18861: PUSH
18862: LD_INT 29
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 31
18870: PUSH
18871: LD_INT 32
18873: PUSH
18874: LD_INT 33
18876: PUSH
18877: LD_INT 34
18879: PUSH
18880: LD_INT 36
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 101
18922: PUSH
18923: LD_INT 102
18925: PUSH
18926: LD_INT 103
18928: PUSH
18929: LD_INT 104
18931: PUSH
18932: LD_INT 105
18934: PUSH
18935: LD_INT 106
18937: PUSH
18938: LD_INT 107
18940: PUSH
18941: LD_INT 108
18943: PUSH
18944: LD_INT 109
18946: PUSH
18947: LD_INT 110
18949: PUSH
18950: LD_INT 111
18952: PUSH
18953: LD_INT 112
18955: PUSH
18956: LD_INT 113
18958: PUSH
18959: LD_INT 114
18961: PUSH
18962: LD_INT 116
18964: PUSH
18965: LD_INT 117
18967: PUSH
18968: LD_INT 118
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 19769
18996: LD_INT 16
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19140
19004: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 7
19021: PUSH
19022: LD_INT 11
19024: PUSH
19025: LD_INT 12
19027: PUSH
19028: LD_INT 15
19030: PUSH
19031: LD_INT 16
19033: PUSH
19034: LD_INT 20
19036: PUSH
19037: LD_INT 21
19039: PUSH
19040: LD_INT 22
19042: PUSH
19043: LD_INT 23
19045: PUSH
19046: LD_INT 25
19048: PUSH
19049: LD_INT 26
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 31
19057: PUSH
19058: LD_INT 32
19060: PUSH
19061: LD_INT 33
19063: PUSH
19064: LD_INT 34
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 101
19090: PUSH
19091: LD_INT 102
19093: PUSH
19094: LD_INT 103
19096: PUSH
19097: LD_INT 106
19099: PUSH
19100: LD_INT 108
19102: PUSH
19103: LD_INT 112
19105: PUSH
19106: LD_INT 113
19108: PUSH
19109: LD_INT 114
19111: PUSH
19112: LD_INT 116
19114: PUSH
19115: LD_INT 117
19117: PUSH
19118: LD_INT 118
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: ST_TO_ADDR
19138: GO 19769
19140: LD_INT 17
19142: DOUBLE
19143: EQUAL
19144: IFTRUE 19148
19146: GO 19372
19148: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19149: LD_ADDR_VAR 0 1
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 3
19162: PUSH
19163: LD_INT 4
19165: PUSH
19166: LD_INT 5
19168: PUSH
19169: LD_INT 6
19171: PUSH
19172: LD_INT 7
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: LD_INT 9
19180: PUSH
19181: LD_INT 10
19183: PUSH
19184: LD_INT 11
19186: PUSH
19187: LD_INT 12
19189: PUSH
19190: LD_INT 13
19192: PUSH
19193: LD_INT 14
19195: PUSH
19196: LD_INT 15
19198: PUSH
19199: LD_INT 16
19201: PUSH
19202: LD_INT 17
19204: PUSH
19205: LD_INT 18
19207: PUSH
19208: LD_INT 19
19210: PUSH
19211: LD_INT 20
19213: PUSH
19214: LD_INT 21
19216: PUSH
19217: LD_INT 22
19219: PUSH
19220: LD_INT 23
19222: PUSH
19223: LD_INT 24
19225: PUSH
19226: LD_INT 25
19228: PUSH
19229: LD_INT 26
19231: PUSH
19232: LD_INT 27
19234: PUSH
19235: LD_INT 28
19237: PUSH
19238: LD_INT 29
19240: PUSH
19241: LD_INT 30
19243: PUSH
19244: LD_INT 31
19246: PUSH
19247: LD_INT 32
19249: PUSH
19250: LD_INT 33
19252: PUSH
19253: LD_INT 34
19255: PUSH
19256: LD_INT 36
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 101
19298: PUSH
19299: LD_INT 102
19301: PUSH
19302: LD_INT 103
19304: PUSH
19305: LD_INT 104
19307: PUSH
19308: LD_INT 105
19310: PUSH
19311: LD_INT 106
19313: PUSH
19314: LD_INT 107
19316: PUSH
19317: LD_INT 108
19319: PUSH
19320: LD_INT 109
19322: PUSH
19323: LD_INT 110
19325: PUSH
19326: LD_INT 111
19328: PUSH
19329: LD_INT 112
19331: PUSH
19332: LD_INT 113
19334: PUSH
19335: LD_INT 114
19337: PUSH
19338: LD_INT 116
19340: PUSH
19341: LD_INT 117
19343: PUSH
19344: LD_INT 118
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ST_TO_ADDR
19370: GO 19769
19372: LD_INT 18
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19528
19380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19381: LD_ADDR_VAR 0 1
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: LD_INT 7
19397: PUSH
19398: LD_INT 11
19400: PUSH
19401: LD_INT 12
19403: PUSH
19404: LD_INT 15
19406: PUSH
19407: LD_INT 16
19409: PUSH
19410: LD_INT 20
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_INT 23
19421: PUSH
19422: LD_INT 25
19424: PUSH
19425: LD_INT 26
19427: PUSH
19428: LD_INT 30
19430: PUSH
19431: LD_INT 31
19433: PUSH
19434: LD_INT 32
19436: PUSH
19437: LD_INT 33
19439: PUSH
19440: LD_INT 34
19442: PUSH
19443: LD_INT 35
19445: PUSH
19446: LD_INT 36
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 106
19483: PUSH
19484: LD_INT 108
19486: PUSH
19487: LD_INT 112
19489: PUSH
19490: LD_INT 113
19492: PUSH
19493: LD_INT 114
19495: PUSH
19496: LD_INT 115
19498: PUSH
19499: LD_INT 116
19501: PUSH
19502: LD_INT 117
19504: PUSH
19505: LD_INT 118
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: ST_TO_ADDR
19526: GO 19769
19528: LD_INT 19
19530: DOUBLE
19531: EQUAL
19532: IFTRUE 19536
19534: GO 19768
19536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19537: LD_ADDR_VAR 0 1
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 3
19550: PUSH
19551: LD_INT 4
19553: PUSH
19554: LD_INT 5
19556: PUSH
19557: LD_INT 6
19559: PUSH
19560: LD_INT 7
19562: PUSH
19563: LD_INT 8
19565: PUSH
19566: LD_INT 9
19568: PUSH
19569: LD_INT 10
19571: PUSH
19572: LD_INT 11
19574: PUSH
19575: LD_INT 12
19577: PUSH
19578: LD_INT 13
19580: PUSH
19581: LD_INT 14
19583: PUSH
19584: LD_INT 15
19586: PUSH
19587: LD_INT 16
19589: PUSH
19590: LD_INT 17
19592: PUSH
19593: LD_INT 18
19595: PUSH
19596: LD_INT 19
19598: PUSH
19599: LD_INT 20
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 22
19607: PUSH
19608: LD_INT 23
19610: PUSH
19611: LD_INT 24
19613: PUSH
19614: LD_INT 25
19616: PUSH
19617: LD_INT 26
19619: PUSH
19620: LD_INT 27
19622: PUSH
19623: LD_INT 28
19625: PUSH
19626: LD_INT 29
19628: PUSH
19629: LD_INT 30
19631: PUSH
19632: LD_INT 31
19634: PUSH
19635: LD_INT 32
19637: PUSH
19638: LD_INT 33
19640: PUSH
19641: LD_INT 34
19643: PUSH
19644: LD_INT 35
19646: PUSH
19647: LD_INT 36
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 101
19690: PUSH
19691: LD_INT 102
19693: PUSH
19694: LD_INT 103
19696: PUSH
19697: LD_INT 104
19699: PUSH
19700: LD_INT 105
19702: PUSH
19703: LD_INT 106
19705: PUSH
19706: LD_INT 107
19708: PUSH
19709: LD_INT 108
19711: PUSH
19712: LD_INT 109
19714: PUSH
19715: LD_INT 110
19717: PUSH
19718: LD_INT 111
19720: PUSH
19721: LD_INT 112
19723: PUSH
19724: LD_INT 113
19726: PUSH
19727: LD_INT 114
19729: PUSH
19730: LD_INT 115
19732: PUSH
19733: LD_INT 116
19735: PUSH
19736: LD_INT 117
19738: PUSH
19739: LD_INT 118
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: ST_TO_ADDR
19766: GO 19769
19768: POP
// end else
19769: GO 20000
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19771: LD_ADDR_VAR 0 1
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: LD_INT 4
19787: PUSH
19788: LD_INT 5
19790: PUSH
19791: LD_INT 6
19793: PUSH
19794: LD_INT 7
19796: PUSH
19797: LD_INT 8
19799: PUSH
19800: LD_INT 9
19802: PUSH
19803: LD_INT 10
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 13
19814: PUSH
19815: LD_INT 14
19817: PUSH
19818: LD_INT 15
19820: PUSH
19821: LD_INT 16
19823: PUSH
19824: LD_INT 17
19826: PUSH
19827: LD_INT 18
19829: PUSH
19830: LD_INT 19
19832: PUSH
19833: LD_INT 20
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_INT 23
19844: PUSH
19845: LD_INT 24
19847: PUSH
19848: LD_INT 25
19850: PUSH
19851: LD_INT 26
19853: PUSH
19854: LD_INT 27
19856: PUSH
19857: LD_INT 28
19859: PUSH
19860: LD_INT 29
19862: PUSH
19863: LD_INT 30
19865: PUSH
19866: LD_INT 31
19868: PUSH
19869: LD_INT 32
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 34
19877: PUSH
19878: LD_INT 35
19880: PUSH
19881: LD_INT 36
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 101
19924: PUSH
19925: LD_INT 102
19927: PUSH
19928: LD_INT 103
19930: PUSH
19931: LD_INT 104
19933: PUSH
19934: LD_INT 105
19936: PUSH
19937: LD_INT 106
19939: PUSH
19940: LD_INT 107
19942: PUSH
19943: LD_INT 108
19945: PUSH
19946: LD_INT 109
19948: PUSH
19949: LD_INT 110
19951: PUSH
19952: LD_INT 111
19954: PUSH
19955: LD_INT 112
19957: PUSH
19958: LD_INT 113
19960: PUSH
19961: LD_INT 114
19963: PUSH
19964: LD_INT 115
19966: PUSH
19967: LD_INT 116
19969: PUSH
19970: LD_INT 117
19972: PUSH
19973: LD_INT 118
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: ST_TO_ADDR
// if result then
20000: LD_VAR 0 1
20004: IFFALSE 20293
// begin normal :=  ;
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: LD_STRING 
20013: ST_TO_ADDR
// hardcore :=  ;
20014: LD_ADDR_VAR 0 4
20018: PUSH
20019: LD_STRING 
20021: ST_TO_ADDR
// for i = 1 to normalCounter do
20022: LD_ADDR_VAR 0 5
20026: PUSH
20027: DOUBLE
20028: LD_INT 1
20030: DEC
20031: ST_TO_ADDR
20032: LD_EXP 49
20036: PUSH
20037: FOR_TO
20038: IFFALSE 20139
// begin tmp := 0 ;
20040: LD_ADDR_VAR 0 2
20044: PUSH
20045: LD_STRING 0
20047: ST_TO_ADDR
// if result [ 1 ] then
20048: LD_VAR 0 1
20052: PUSH
20053: LD_INT 1
20055: ARRAY
20056: IFFALSE 20121
// if result [ 1 ] [ 1 ] = i then
20058: LD_VAR 0 1
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: PUSH
20067: LD_INT 1
20069: ARRAY
20070: PUSH
20071: LD_VAR 0 5
20075: EQUAL
20076: IFFALSE 20121
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20078: LD_ADDR_VAR 0 1
20082: PUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: LD_INT 1
20090: PPUSH
20091: LD_VAR 0 1
20095: PUSH
20096: LD_INT 1
20098: ARRAY
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 3
20107: PPUSH
20108: CALL_OW 1
20112: ST_TO_ADDR
// tmp := 1 ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_STRING 1
20120: ST_TO_ADDR
// end ; normal := normal & tmp ;
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_VAR 0 3
20130: PUSH
20131: LD_VAR 0 2
20135: STR
20136: ST_TO_ADDR
// end ;
20137: GO 20037
20139: POP
20140: POP
// for i = 1 to hardcoreCounter do
20141: LD_ADDR_VAR 0 5
20145: PUSH
20146: DOUBLE
20147: LD_INT 1
20149: DEC
20150: ST_TO_ADDR
20151: LD_EXP 50
20155: PUSH
20156: FOR_TO
20157: IFFALSE 20262
// begin tmp := 0 ;
20159: LD_ADDR_VAR 0 2
20163: PUSH
20164: LD_STRING 0
20166: ST_TO_ADDR
// if result [ 2 ] then
20167: LD_VAR 0 1
20171: PUSH
20172: LD_INT 2
20174: ARRAY
20175: IFFALSE 20244
// if result [ 2 ] [ 1 ] = 100 + i then
20177: LD_VAR 0 1
20181: PUSH
20182: LD_INT 2
20184: ARRAY
20185: PUSH
20186: LD_INT 1
20188: ARRAY
20189: PUSH
20190: LD_INT 100
20192: PUSH
20193: LD_VAR 0 5
20197: PLUS
20198: EQUAL
20199: IFFALSE 20244
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20201: LD_ADDR_VAR 0 1
20205: PUSH
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_INT 2
20213: PPUSH
20214: LD_VAR 0 1
20218: PUSH
20219: LD_INT 2
20221: ARRAY
20222: PPUSH
20223: LD_INT 1
20225: PPUSH
20226: CALL_OW 3
20230: PPUSH
20231: CALL_OW 1
20235: ST_TO_ADDR
// tmp := 1 ;
20236: LD_ADDR_VAR 0 2
20240: PUSH
20241: LD_STRING 1
20243: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_VAR 0 4
20253: PUSH
20254: LD_VAR 0 2
20258: STR
20259: ST_TO_ADDR
// end ;
20260: GO 20156
20262: POP
20263: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20264: LD_STRING getStreamItemsFromMission("
20266: PUSH
20267: LD_VAR 0 3
20271: STR
20272: PUSH
20273: LD_STRING ","
20275: STR
20276: PUSH
20277: LD_VAR 0 4
20281: STR
20282: PUSH
20283: LD_STRING ")
20285: STR
20286: PPUSH
20287: CALL_OW 559
// end else
20291: GO 20300
// ToLua ( getStreamItemsFromMission("","") ) ;
20293: LD_STRING getStreamItemsFromMission("","")
20295: PPUSH
20296: CALL_OW 559
// end ;
20300: LD_VAR 0 1
20304: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20305: LD_EXP 48
20309: PUSH
20310: LD_EXP 53
20314: AND
20315: IFFALSE 20439
20317: GO 20319
20319: DISABLE
20320: LD_INT 0
20322: PPUSH
20323: PPUSH
// begin enable ;
20324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: LD_INT 22
20332: PUSH
20333: LD_OWVAR 2
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 34
20347: PUSH
20348: LD_INT 7
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 34
20357: PUSH
20358: LD_INT 45
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 34
20367: PUSH
20368: LD_INT 28
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 34
20377: PUSH
20378: LD_INT 47
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PPUSH
20396: CALL_OW 69
20400: ST_TO_ADDR
// if not tmp then
20401: LD_VAR 0 2
20405: NOT
20406: IFFALSE 20410
// exit ;
20408: GO 20439
// for i in tmp do
20410: LD_ADDR_VAR 0 1
20414: PUSH
20415: LD_VAR 0 2
20419: PUSH
20420: FOR_IN
20421: IFFALSE 20437
// begin SetLives ( i , 0 ) ;
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_INT 0
20430: PPUSH
20431: CALL_OW 234
// end ;
20435: GO 20420
20437: POP
20438: POP
// end ;
20439: PPOPN 2
20441: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20442: LD_EXP 48
20446: PUSH
20447: LD_EXP 54
20451: AND
20452: IFFALSE 20536
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
// begin enable ;
20461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 32
20481: PUSH
20482: LD_INT 3
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 2
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20536
// for i in tmp do
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_VAR 0 2
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20534
// begin SetLives ( i , 0 ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: LD_INT 0
20527: PPUSH
20528: CALL_OW 234
// end ;
20532: GO 20517
20534: POP
20535: POP
// end ;
20536: PPOPN 2
20538: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20539: LD_EXP 48
20543: PUSH
20544: LD_EXP 51
20548: AND
20549: IFFALSE 20642
20551: GO 20553
20553: DISABLE
20554: LD_INT 0
20556: PPUSH
// begin enable ;
20557: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20558: LD_ADDR_VAR 0 1
20562: PUSH
20563: LD_INT 22
20565: PUSH
20566: LD_OWVAR 2
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: LD_INT 25
20580: PUSH
20581: LD_INT 5
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 25
20590: PUSH
20591: LD_INT 9
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 25
20600: PUSH
20601: LD_INT 8
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 69
20622: PUSH
20623: FOR_IN
20624: IFFALSE 20640
// begin SetClass ( i , 1 ) ;
20626: LD_VAR 0 1
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 336
// end ;
20638: GO 20623
20640: POP
20641: POP
// end ;
20642: PPOPN 1
20644: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20645: LD_EXP 48
20649: PUSH
20650: LD_EXP 52
20654: AND
20655: PUSH
20656: LD_OWVAR 65
20660: PUSH
20661: LD_INT 7
20663: LESS
20664: AND
20665: IFFALSE 20679
20667: GO 20669
20669: DISABLE
// begin enable ;
20670: ENABLE
// game_speed := 7 ;
20671: LD_ADDR_OWVAR 65
20675: PUSH
20676: LD_INT 7
20678: ST_TO_ADDR
// end ;
20679: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20680: LD_EXP 48
20684: PUSH
20685: LD_EXP 55
20689: AND
20690: IFFALSE 20892
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20700: LD_ADDR_VAR 0 3
20704: PUSH
20705: LD_INT 81
20707: PUSH
20708: LD_OWVAR 2
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 21
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PPUSH
20731: CALL_OW 69
20735: ST_TO_ADDR
// if not tmp then
20736: LD_VAR 0 3
20740: NOT
20741: IFFALSE 20745
// exit ;
20743: GO 20892
// if tmp > 5 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 5
20752: GREATER
20753: IFFALSE 20765
// k := 5 else
20755: LD_ADDR_VAR 0 2
20759: PUSH
20760: LD_INT 5
20762: ST_TO_ADDR
20763: GO 20775
// k := tmp ;
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_VAR 0 3
20774: ST_TO_ADDR
// for i := 1 to k do
20775: LD_ADDR_VAR 0 1
20779: PUSH
20780: DOUBLE
20781: LD_INT 1
20783: DEC
20784: ST_TO_ADDR
20785: LD_VAR 0 2
20789: PUSH
20790: FOR_TO
20791: IFFALSE 20890
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_VAR 0 1
20802: ARRAY
20803: PPUSH
20804: LD_VAR 0 1
20808: PUSH
20809: LD_INT 4
20811: MOD
20812: PUSH
20813: LD_INT 1
20815: PLUS
20816: PPUSH
20817: CALL_OW 259
20821: PUSH
20822: LD_INT 10
20824: LESS
20825: IFFALSE 20888
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20827: LD_VAR 0 3
20831: PUSH
20832: LD_VAR 0 1
20836: ARRAY
20837: PPUSH
20838: LD_VAR 0 1
20842: PUSH
20843: LD_INT 4
20845: MOD
20846: PUSH
20847: LD_INT 1
20849: PLUS
20850: PPUSH
20851: LD_VAR 0 3
20855: PUSH
20856: LD_VAR 0 1
20860: ARRAY
20861: PPUSH
20862: LD_VAR 0 1
20866: PUSH
20867: LD_INT 4
20869: MOD
20870: PUSH
20871: LD_INT 1
20873: PLUS
20874: PPUSH
20875: CALL_OW 259
20879: PUSH
20880: LD_INT 1
20882: PLUS
20883: PPUSH
20884: CALL_OW 237
20888: GO 20790
20890: POP
20891: POP
// end ;
20892: PPOPN 3
20894: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20895: LD_EXP 48
20899: PUSH
20900: LD_EXP 56
20904: AND
20905: IFFALSE 20925
20907: GO 20909
20909: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20910: LD_INT 4
20912: PPUSH
20913: LD_OWVAR 2
20917: PPUSH
20918: LD_INT 0
20920: PPUSH
20921: CALL_OW 324
20925: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20926: LD_EXP 48
20930: PUSH
20931: LD_EXP 85
20935: AND
20936: IFFALSE 20956
20938: GO 20940
20940: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20941: LD_INT 19
20943: PPUSH
20944: LD_OWVAR 2
20948: PPUSH
20949: LD_INT 0
20951: PPUSH
20952: CALL_OW 324
20956: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20957: LD_EXP 48
20961: PUSH
20962: LD_EXP 57
20966: AND
20967: IFFALSE 21069
20969: GO 20971
20971: DISABLE
20972: LD_INT 0
20974: PPUSH
20975: PPUSH
// begin enable ;
20976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20977: LD_ADDR_VAR 0 2
20981: PUSH
20982: LD_INT 22
20984: PUSH
20985: LD_OWVAR 2
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: LD_INT 34
20999: PUSH
21000: LD_INT 11
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 34
21009: PUSH
21010: LD_INT 30
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PPUSH
21026: CALL_OW 69
21030: ST_TO_ADDR
// if not tmp then
21031: LD_VAR 0 2
21035: NOT
21036: IFFALSE 21040
// exit ;
21038: GO 21069
// for i in tmp do
21040: LD_ADDR_VAR 0 1
21044: PUSH
21045: LD_VAR 0 2
21049: PUSH
21050: FOR_IN
21051: IFFALSE 21067
// begin SetLives ( i , 0 ) ;
21053: LD_VAR 0 1
21057: PPUSH
21058: LD_INT 0
21060: PPUSH
21061: CALL_OW 234
// end ;
21065: GO 21050
21067: POP
21068: POP
// end ;
21069: PPOPN 2
21071: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21072: LD_EXP 48
21076: PUSH
21077: LD_EXP 58
21081: AND
21082: IFFALSE 21102
21084: GO 21086
21086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21087: LD_INT 32
21089: PPUSH
21090: LD_OWVAR 2
21094: PPUSH
21095: LD_INT 0
21097: PPUSH
21098: CALL_OW 324
21102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21103: LD_EXP 48
21107: PUSH
21108: LD_EXP 59
21112: AND
21113: IFFALSE 21294
21115: GO 21117
21117: DISABLE
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21123: LD_ADDR_VAR 0 2
21127: PUSH
21128: LD_INT 22
21130: PUSH
21131: LD_OWVAR 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 33
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: ST_TO_ADDR
// if not tmp then
21159: LD_VAR 0 2
21163: NOT
21164: IFFALSE 21168
// exit ;
21166: GO 21294
// side := 0 ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// for i := 1 to 8 do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: DOUBLE
21182: LD_INT 1
21184: DEC
21185: ST_TO_ADDR
21186: LD_INT 8
21188: PUSH
21189: FOR_TO
21190: IFFALSE 21238
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21192: LD_OWVAR 2
21196: PUSH
21197: LD_VAR 0 1
21201: NONEQUAL
21202: PUSH
21203: LD_OWVAR 2
21207: PPUSH
21208: LD_VAR 0 1
21212: PPUSH
21213: CALL_OW 81
21217: PUSH
21218: LD_INT 2
21220: EQUAL
21221: AND
21222: IFFALSE 21236
// begin side := i ;
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_VAR 0 1
21233: ST_TO_ADDR
// break ;
21234: GO 21238
// end ;
21236: GO 21189
21238: POP
21239: POP
// if not side then
21240: LD_VAR 0 3
21244: NOT
21245: IFFALSE 21249
// exit ;
21247: GO 21294
// for i := 1 to tmp do
21249: LD_ADDR_VAR 0 1
21253: PUSH
21254: DOUBLE
21255: LD_INT 1
21257: DEC
21258: ST_TO_ADDR
21259: LD_VAR 0 2
21263: PUSH
21264: FOR_TO
21265: IFFALSE 21292
// if Prob ( 60 ) then
21267: LD_INT 60
21269: PPUSH
21270: CALL_OW 13
21274: IFFALSE 21290
// SetSide ( i , side ) ;
21276: LD_VAR 0 1
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: CALL_OW 235
21290: GO 21264
21292: POP
21293: POP
// end ;
21294: PPOPN 3
21296: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21297: LD_EXP 48
21301: PUSH
21302: LD_EXP 61
21306: AND
21307: IFFALSE 21426
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_OWVAR 2
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: LD_INT 23
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: PPUSH
21364: CALL_OW 69
21368: PUSH
21369: FOR_IN
21370: IFFALSE 21424
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 257
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 4
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: IN
21400: IFFALSE 21422
// SetClass ( un , rand ( 1 , 4 ) ) ;
21402: LD_VAR 0 1
21406: PPUSH
21407: LD_INT 1
21409: PPUSH
21410: LD_INT 4
21412: PPUSH
21413: CALL_OW 12
21417: PPUSH
21418: CALL_OW 336
21422: GO 21369
21424: POP
21425: POP
// end ;
21426: PPOPN 1
21428: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21429: LD_EXP 48
21433: PUSH
21434: LD_EXP 60
21438: AND
21439: IFFALSE 21518
21441: GO 21443
21443: DISABLE
21444: LD_INT 0
21446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21447: LD_ADDR_VAR 0 1
21451: PUSH
21452: LD_INT 22
21454: PUSH
21455: LD_OWVAR 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 21
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PPUSH
21478: CALL_OW 69
21482: ST_TO_ADDR
// if not tmp then
21483: LD_VAR 0 1
21487: NOT
21488: IFFALSE 21492
// exit ;
21490: GO 21518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21492: LD_VAR 0 1
21496: PUSH
21497: LD_INT 1
21499: PPUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 12
21509: ARRAY
21510: PPUSH
21511: LD_INT 100
21513: PPUSH
21514: CALL_OW 234
// end ;
21518: PPOPN 1
21520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21521: LD_EXP 48
21525: PUSH
21526: LD_EXP 62
21530: AND
21531: IFFALSE 21629
21533: GO 21535
21535: DISABLE
21536: LD_INT 0
21538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21539: LD_ADDR_VAR 0 1
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_OWVAR 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 21
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 69
21574: ST_TO_ADDR
// if not tmp then
21575: LD_VAR 0 1
21579: NOT
21580: IFFALSE 21584
// exit ;
21582: GO 21629
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21584: LD_VAR 0 1
21588: PUSH
21589: LD_INT 1
21591: PPUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 12
21601: ARRAY
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: LD_INT 4
21608: PPUSH
21609: CALL_OW 12
21613: PPUSH
21614: LD_INT 3000
21616: PPUSH
21617: LD_INT 9000
21619: PPUSH
21620: CALL_OW 12
21624: PPUSH
21625: CALL_OW 492
// end ;
21629: PPOPN 1
21631: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21632: LD_EXP 48
21636: PUSH
21637: LD_EXP 63
21641: AND
21642: IFFALSE 21662
21644: GO 21646
21646: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21647: LD_INT 1
21649: PPUSH
21650: LD_OWVAR 2
21654: PPUSH
21655: LD_INT 0
21657: PPUSH
21658: CALL_OW 324
21662: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21663: LD_EXP 48
21667: PUSH
21668: LD_EXP 64
21672: AND
21673: IFFALSE 21756
21675: GO 21677
21677: DISABLE
21678: LD_INT 0
21680: PPUSH
21681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_INT 22
21689: PUSH
21690: LD_OWVAR 2
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PPUSH
21713: CALL_OW 69
21717: ST_TO_ADDR
// if not tmp then
21718: LD_VAR 0 2
21722: NOT
21723: IFFALSE 21727
// exit ;
21725: GO 21756
// for i in tmp do
21727: LD_ADDR_VAR 0 1
21731: PUSH
21732: LD_VAR 0 2
21736: PUSH
21737: FOR_IN
21738: IFFALSE 21754
// SetBLevel ( i , 10 ) ;
21740: LD_VAR 0 1
21744: PPUSH
21745: LD_INT 10
21747: PPUSH
21748: CALL_OW 241
21752: GO 21737
21754: POP
21755: POP
// end ;
21756: PPOPN 2
21758: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21759: LD_EXP 48
21763: PUSH
21764: LD_EXP 65
21768: AND
21769: IFFALSE 21880
21771: GO 21773
21773: DISABLE
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
21778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_INT 22
21786: PUSH
21787: LD_OWVAR 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 25
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: ST_TO_ADDR
// if not tmp then
21815: LD_VAR 0 3
21819: NOT
21820: IFFALSE 21824
// exit ;
21822: GO 21880
// un := tmp [ rand ( 1 , tmp ) ] ;
21824: LD_ADDR_VAR 0 2
21828: PUSH
21829: LD_VAR 0 3
21833: PUSH
21834: LD_INT 1
21836: PPUSH
21837: LD_VAR 0 3
21841: PPUSH
21842: CALL_OW 12
21846: ARRAY
21847: ST_TO_ADDR
// if Crawls ( un ) then
21848: LD_VAR 0 2
21852: PPUSH
21853: CALL_OW 318
21857: IFFALSE 21868
// ComWalk ( un ) ;
21859: LD_VAR 0 2
21863: PPUSH
21864: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: LD_INT 5
21875: PPUSH
21876: CALL_OW 336
// end ;
21880: PPOPN 3
21882: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21883: LD_EXP 48
21887: PUSH
21888: LD_EXP 66
21892: AND
21893: PUSH
21894: LD_OWVAR 67
21898: PUSH
21899: LD_INT 4
21901: LESS
21902: AND
21903: IFFALSE 21922
21905: GO 21907
21907: DISABLE
// begin Difficulty := Difficulty + 1 ;
21908: LD_ADDR_OWVAR 67
21912: PUSH
21913: LD_OWVAR 67
21917: PUSH
21918: LD_INT 1
21920: PLUS
21921: ST_TO_ADDR
// end ;
21922: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21923: LD_EXP 48
21927: PUSH
21928: LD_EXP 67
21932: AND
21933: IFFALSE 22036
21935: GO 21937
21937: DISABLE
21938: LD_INT 0
21940: PPUSH
// begin for i := 1 to 5 do
21941: LD_ADDR_VAR 0 1
21945: PUSH
21946: DOUBLE
21947: LD_INT 1
21949: DEC
21950: ST_TO_ADDR
21951: LD_INT 5
21953: PUSH
21954: FOR_TO
21955: IFFALSE 22034
// begin uc_nation := nation_nature ;
21957: LD_ADDR_OWVAR 21
21961: PUSH
21962: LD_INT 0
21964: ST_TO_ADDR
// uc_side := 0 ;
21965: LD_ADDR_OWVAR 20
21969: PUSH
21970: LD_INT 0
21972: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21973: LD_ADDR_OWVAR 29
21977: PUSH
21978: LD_INT 12
21980: PUSH
21981: LD_INT 12
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// hc_agressivity := 20 ;
21988: LD_ADDR_OWVAR 35
21992: PUSH
21993: LD_INT 20
21995: ST_TO_ADDR
// hc_class := class_tiger ;
21996: LD_ADDR_OWVAR 28
22000: PUSH
22001: LD_INT 14
22003: ST_TO_ADDR
// hc_gallery :=  ;
22004: LD_ADDR_OWVAR 33
22008: PUSH
22009: LD_STRING 
22011: ST_TO_ADDR
// hc_name :=  ;
22012: LD_ADDR_OWVAR 26
22016: PUSH
22017: LD_STRING 
22019: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22020: CALL_OW 44
22024: PPUSH
22025: LD_INT 0
22027: PPUSH
22028: CALL_OW 51
// end ;
22032: GO 21954
22034: POP
22035: POP
// end ;
22036: PPOPN 1
22038: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22039: LD_EXP 48
22043: PUSH
22044: LD_EXP 68
22048: AND
22049: IFFALSE 22058
22051: GO 22053
22053: DISABLE
// StreamSibBomb ;
22054: CALL 22059 0 0
22058: END
// export function StreamSibBomb ; var i , x , y ; begin
22059: LD_INT 0
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
// result := false ;
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_INT 0
22072: ST_TO_ADDR
// for i := 1 to 16 do
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: DOUBLE
22079: LD_INT 1
22081: DEC
22082: ST_TO_ADDR
22083: LD_INT 16
22085: PUSH
22086: FOR_TO
22087: IFFALSE 22286
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22089: LD_ADDR_VAR 0 3
22093: PUSH
22094: LD_INT 10
22096: PUSH
22097: LD_INT 20
22099: PUSH
22100: LD_INT 30
22102: PUSH
22103: LD_INT 40
22105: PUSH
22106: LD_INT 50
22108: PUSH
22109: LD_INT 60
22111: PUSH
22112: LD_INT 70
22114: PUSH
22115: LD_INT 80
22117: PUSH
22118: LD_INT 90
22120: PUSH
22121: LD_INT 100
22123: PUSH
22124: LD_INT 110
22126: PUSH
22127: LD_INT 120
22129: PUSH
22130: LD_INT 130
22132: PUSH
22133: LD_INT 140
22135: PUSH
22136: LD_INT 150
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PPUSH
22159: LD_INT 15
22161: PPUSH
22162: CALL_OW 12
22166: ARRAY
22167: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 10
22175: PUSH
22176: LD_INT 20
22178: PUSH
22179: LD_INT 30
22181: PUSH
22182: LD_INT 40
22184: PUSH
22185: LD_INT 50
22187: PUSH
22188: LD_INT 60
22190: PUSH
22191: LD_INT 70
22193: PUSH
22194: LD_INT 80
22196: PUSH
22197: LD_INT 90
22199: PUSH
22200: LD_INT 100
22202: PUSH
22203: LD_INT 110
22205: PUSH
22206: LD_INT 120
22208: PUSH
22209: LD_INT 130
22211: PUSH
22212: LD_INT 140
22214: PUSH
22215: LD_INT 150
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PPUSH
22238: LD_INT 15
22240: PPUSH
22241: CALL_OW 12
22245: ARRAY
22246: ST_TO_ADDR
// if ValidHex ( x , y ) then
22247: LD_VAR 0 3
22251: PPUSH
22252: LD_VAR 0 4
22256: PPUSH
22257: CALL_OW 488
22261: IFFALSE 22284
// begin result := [ x , y ] ;
22263: LD_ADDR_VAR 0 1
22267: PUSH
22268: LD_VAR 0 3
22272: PUSH
22273: LD_VAR 0 4
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: ST_TO_ADDR
// break ;
22282: GO 22286
// end ; end ;
22284: GO 22086
22286: POP
22287: POP
// if result then
22288: LD_VAR 0 1
22292: IFFALSE 22352
// begin ToLua ( playSibBomb() ) ;
22294: LD_STRING playSibBomb()
22296: PPUSH
22297: CALL_OW 559
// wait ( 0 0$14 ) ;
22301: LD_INT 490
22303: PPUSH
22304: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22308: LD_VAR 0 1
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 1
22321: PUSH
22322: LD_INT 2
22324: ARRAY
22325: PPUSH
22326: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22330: LD_VAR 0 1
22334: PUSH
22335: LD_INT 1
22337: ARRAY
22338: PPUSH
22339: LD_VAR 0 1
22343: PUSH
22344: LD_INT 2
22346: ARRAY
22347: PPUSH
22348: CALL_OW 429
// end ; end ;
22352: LD_VAR 0 1
22356: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22357: LD_EXP 48
22361: PUSH
22362: LD_EXP 70
22366: AND
22367: IFFALSE 22379
22369: GO 22371
22371: DISABLE
// YouLost (  ) ;
22372: LD_STRING 
22374: PPUSH
22375: CALL_OW 104
22379: END
// every 0 0$1 trigger StreamModeActive and sFog do
22380: LD_EXP 48
22384: PUSH
22385: LD_EXP 69
22389: AND
22390: IFFALSE 22404
22392: GO 22394
22394: DISABLE
// FogOff ( your_side ) ;
22395: LD_OWVAR 2
22399: PPUSH
22400: CALL_OW 344
22404: END
// every 0 0$1 trigger StreamModeActive and sSun do
22405: LD_EXP 48
22409: PUSH
22410: LD_EXP 71
22414: AND
22415: IFFALSE 22443
22417: GO 22419
22419: DISABLE
// begin solar_recharge_percent := 0 ;
22420: LD_ADDR_OWVAR 79
22424: PUSH
22425: LD_INT 0
22427: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22428: LD_INT 10500
22430: PPUSH
22431: CALL_OW 67
// solar_recharge_percent := 100 ;
22435: LD_ADDR_OWVAR 79
22439: PUSH
22440: LD_INT 100
22442: ST_TO_ADDR
// end ;
22443: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22444: LD_EXP 48
22448: PUSH
22449: LD_EXP 72
22453: AND
22454: IFFALSE 22693
22456: GO 22458
22458: DISABLE
22459: LD_INT 0
22461: PPUSH
22462: PPUSH
22463: PPUSH
// begin tmp := [ ] ;
22464: LD_ADDR_VAR 0 3
22468: PUSH
22469: EMPTY
22470: ST_TO_ADDR
// for i := 1 to 6 do
22471: LD_ADDR_VAR 0 1
22475: PUSH
22476: DOUBLE
22477: LD_INT 1
22479: DEC
22480: ST_TO_ADDR
22481: LD_INT 6
22483: PUSH
22484: FOR_TO
22485: IFFALSE 22590
// begin uc_nation := nation_nature ;
22487: LD_ADDR_OWVAR 21
22491: PUSH
22492: LD_INT 0
22494: ST_TO_ADDR
// uc_side := 0 ;
22495: LD_ADDR_OWVAR 20
22499: PUSH
22500: LD_INT 0
22502: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22503: LD_ADDR_OWVAR 29
22507: PUSH
22508: LD_INT 12
22510: PUSH
22511: LD_INT 12
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: ST_TO_ADDR
// hc_agressivity := 20 ;
22518: LD_ADDR_OWVAR 35
22522: PUSH
22523: LD_INT 20
22525: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22526: LD_ADDR_OWVAR 28
22530: PUSH
22531: LD_INT 17
22533: ST_TO_ADDR
// hc_gallery :=  ;
22534: LD_ADDR_OWVAR 33
22538: PUSH
22539: LD_STRING 
22541: ST_TO_ADDR
// hc_name :=  ;
22542: LD_ADDR_OWVAR 26
22546: PUSH
22547: LD_STRING 
22549: ST_TO_ADDR
// un := CreateHuman ;
22550: LD_ADDR_VAR 0 2
22554: PUSH
22555: CALL_OW 44
22559: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22560: LD_VAR 0 2
22564: PPUSH
22565: LD_INT 1
22567: PPUSH
22568: CALL_OW 51
// tmp := tmp ^ un ;
22572: LD_ADDR_VAR 0 3
22576: PUSH
22577: LD_VAR 0 3
22581: PUSH
22582: LD_VAR 0 2
22586: ADD
22587: ST_TO_ADDR
// end ;
22588: GO 22484
22590: POP
22591: POP
// repeat wait ( 0 0$1 ) ;
22592: LD_INT 35
22594: PPUSH
22595: CALL_OW 67
// for un in tmp do
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_VAR 0 3
22608: PUSH
22609: FOR_IN
22610: IFFALSE 22684
// begin if IsDead ( un ) then
22612: LD_VAR 0 2
22616: PPUSH
22617: CALL_OW 301
22621: IFFALSE 22641
// begin tmp := tmp diff un ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_VAR 0 3
22632: PUSH
22633: LD_VAR 0 2
22637: DIFF
22638: ST_TO_ADDR
// continue ;
22639: GO 22609
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22641: LD_VAR 0 2
22645: PPUSH
22646: LD_INT 3
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL_OW 69
22667: PPUSH
22668: LD_VAR 0 2
22672: PPUSH
22673: CALL_OW 74
22677: PPUSH
22678: CALL_OW 115
// end ;
22682: GO 22609
22684: POP
22685: POP
// until not tmp ;
22686: LD_VAR 0 3
22690: NOT
22691: IFFALSE 22592
// end ;
22693: PPOPN 3
22695: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22696: LD_EXP 48
22700: PUSH
22701: LD_EXP 73
22705: AND
22706: IFFALSE 22760
22708: GO 22710
22710: DISABLE
// begin ToLua ( displayTroll(); ) ;
22711: LD_STRING displayTroll();
22713: PPUSH
22714: CALL_OW 559
// wait ( 3 3$00 ) ;
22718: LD_INT 6300
22720: PPUSH
22721: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22725: LD_STRING hideTroll();
22727: PPUSH
22728: CALL_OW 559
// wait ( 1 1$00 ) ;
22732: LD_INT 2100
22734: PPUSH
22735: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22739: LD_STRING displayTroll();
22741: PPUSH
22742: CALL_OW 559
// wait ( 1 1$00 ) ;
22746: LD_INT 2100
22748: PPUSH
22749: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22753: LD_STRING hideTroll();
22755: PPUSH
22756: CALL_OW 559
// end ;
22760: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22761: LD_EXP 48
22765: PUSH
22766: LD_EXP 74
22770: AND
22771: IFFALSE 22834
22773: GO 22775
22775: DISABLE
22776: LD_INT 0
22778: PPUSH
// begin p := 0 ;
22779: LD_ADDR_VAR 0 1
22783: PUSH
22784: LD_INT 0
22786: ST_TO_ADDR
// repeat game_speed := 1 ;
22787: LD_ADDR_OWVAR 65
22791: PUSH
22792: LD_INT 1
22794: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22795: LD_INT 35
22797: PPUSH
22798: CALL_OW 67
// p := p + 1 ;
22802: LD_ADDR_VAR 0 1
22806: PUSH
22807: LD_VAR 0 1
22811: PUSH
22812: LD_INT 1
22814: PLUS
22815: ST_TO_ADDR
// until p >= 60 ;
22816: LD_VAR 0 1
22820: PUSH
22821: LD_INT 60
22823: GREATEREQUAL
22824: IFFALSE 22787
// game_speed := 4 ;
22826: LD_ADDR_OWVAR 65
22830: PUSH
22831: LD_INT 4
22833: ST_TO_ADDR
// end ;
22834: PPOPN 1
22836: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22837: LD_EXP 48
22841: PUSH
22842: LD_EXP 75
22846: AND
22847: IFFALSE 22993
22849: GO 22851
22851: DISABLE
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22856: LD_ADDR_VAR 0 1
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_OWVAR 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 30
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 30
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PPUSH
22905: CALL_OW 69
22909: ST_TO_ADDR
// if not depot then
22910: LD_VAR 0 1
22914: NOT
22915: IFFALSE 22919
// exit ;
22917: GO 22993
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22919: LD_ADDR_VAR 0 2
22923: PUSH
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 1
22931: PPUSH
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL_OW 12
22941: ARRAY
22942: PPUSH
22943: CALL_OW 274
22947: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22948: LD_VAR 0 2
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: LD_INT 0
22958: PPUSH
22959: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22963: LD_VAR 0 2
22967: PPUSH
22968: LD_INT 2
22970: PPUSH
22971: LD_INT 0
22973: PPUSH
22974: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22978: LD_VAR 0 2
22982: PPUSH
22983: LD_INT 3
22985: PPUSH
22986: LD_INT 0
22988: PPUSH
22989: CALL_OW 277
// end ;
22993: PPOPN 2
22995: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22996: LD_EXP 48
23000: PUSH
23001: LD_EXP 76
23005: AND
23006: IFFALSE 23103
23008: GO 23010
23010: DISABLE
23011: LD_INT 0
23013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23014: LD_ADDR_VAR 0 1
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_OWVAR 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: PPUSH
23063: CALL_OW 69
23067: ST_TO_ADDR
// if not tmp then
23068: LD_VAR 0 1
23072: NOT
23073: IFFALSE 23077
// exit ;
23075: GO 23103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23077: LD_VAR 0 1
23081: PUSH
23082: LD_INT 1
23084: PPUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 12
23094: ARRAY
23095: PPUSH
23096: LD_INT 200
23098: PPUSH
23099: CALL_OW 234
// end ;
23103: PPOPN 1
23105: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23106: LD_EXP 48
23110: PUSH
23111: LD_EXP 77
23115: AND
23116: IFFALSE 23195
23118: GO 23120
23120: DISABLE
23121: LD_INT 0
23123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23124: LD_ADDR_VAR 0 1
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_OWVAR 2
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 21
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL_OW 69
23159: ST_TO_ADDR
// if not tmp then
23160: LD_VAR 0 1
23164: NOT
23165: IFFALSE 23169
// exit ;
23167: GO 23195
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23169: LD_VAR 0 1
23173: PUSH
23174: LD_INT 1
23176: PPUSH
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 12
23186: ARRAY
23187: PPUSH
23188: LD_INT 60
23190: PPUSH
23191: CALL_OW 234
// end ;
23195: PPOPN 1
23197: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23198: LD_EXP 48
23202: PUSH
23203: LD_EXP 78
23207: AND
23208: IFFALSE 23307
23210: GO 23212
23212: DISABLE
23213: LD_INT 0
23215: PPUSH
23216: PPUSH
// begin enable ;
23217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_INT 22
23225: PUSH
23226: LD_OWVAR 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 61
23237: PUSH
23238: EMPTY
23239: LIST
23240: PUSH
23241: LD_INT 33
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: PPUSH
23256: CALL_OW 69
23260: ST_TO_ADDR
// if not tmp then
23261: LD_VAR 0 1
23265: NOT
23266: IFFALSE 23270
// exit ;
23268: GO 23307
// for i in tmp do
23270: LD_ADDR_VAR 0 2
23274: PUSH
23275: LD_VAR 0 1
23279: PUSH
23280: FOR_IN
23281: IFFALSE 23305
// if IsControledBy ( i ) then
23283: LD_VAR 0 2
23287: PPUSH
23288: CALL_OW 312
23292: IFFALSE 23303
// ComUnlink ( i ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 136
23303: GO 23280
23305: POP
23306: POP
// end ;
23307: PPOPN 2
23309: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23310: LD_EXP 48
23314: PUSH
23315: LD_EXP 79
23319: AND
23320: IFFALSE 23460
23322: GO 23324
23324: DISABLE
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
// begin ToLua ( displayPowell(); ) ;
23329: LD_STRING displayPowell();
23331: PPUSH
23332: CALL_OW 559
// uc_side := 0 ;
23336: LD_ADDR_OWVAR 20
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// uc_nation := 2 ;
23344: LD_ADDR_OWVAR 21
23348: PUSH
23349: LD_INT 2
23351: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23352: LD_ADDR_OWVAR 37
23356: PUSH
23357: LD_INT 14
23359: ST_TO_ADDR
// vc_engine := engine_siberite ;
23360: LD_ADDR_OWVAR 39
23364: PUSH
23365: LD_INT 3
23367: ST_TO_ADDR
// vc_control := control_apeman ;
23368: LD_ADDR_OWVAR 38
23372: PUSH
23373: LD_INT 5
23375: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23376: LD_ADDR_OWVAR 40
23380: PUSH
23381: LD_INT 29
23383: ST_TO_ADDR
// un := CreateVehicle ;
23384: LD_ADDR_VAR 0 2
23388: PUSH
23389: CALL_OW 45
23393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23406: LD_INT 35
23408: PPUSH
23409: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23413: LD_VAR 0 2
23417: PPUSH
23418: LD_INT 22
23420: PUSH
23421: LD_OWVAR 2
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PPUSH
23430: CALL_OW 69
23434: PPUSH
23435: LD_VAR 0 2
23439: PPUSH
23440: CALL_OW 74
23444: PPUSH
23445: CALL_OW 115
// until IsDead ( un ) ;
23449: LD_VAR 0 2
23453: PPUSH
23454: CALL_OW 301
23458: IFFALSE 23406
// end ;
23460: PPOPN 2
23462: END
// every 0 0$1 trigger StreamModeActive and sStu do
23463: LD_EXP 48
23467: PUSH
23468: LD_EXP 87
23472: AND
23473: IFFALSE 23489
23475: GO 23477
23477: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23478: LD_STRING displayStucuk();
23480: PPUSH
23481: CALL_OW 559
// ResetFog ;
23485: CALL_OW 335
// end ;
23489: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23490: LD_EXP 48
23494: PUSH
23495: LD_EXP 80
23499: AND
23500: IFFALSE 23641
23502: GO 23504
23504: DISABLE
23505: LD_INT 0
23507: PPUSH
23508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_OWVAR 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PPUSH
23540: CALL_OW 69
23544: ST_TO_ADDR
// if not tmp then
23545: LD_VAR 0 2
23549: NOT
23550: IFFALSE 23554
// exit ;
23552: GO 23641
// un := tmp [ rand ( 1 , tmp ) ] ;
23554: LD_ADDR_VAR 0 1
23558: PUSH
23559: LD_VAR 0 2
23563: PUSH
23564: LD_INT 1
23566: PPUSH
23567: LD_VAR 0 2
23571: PPUSH
23572: CALL_OW 12
23576: ARRAY
23577: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23578: LD_VAR 0 1
23582: PPUSH
23583: LD_INT 0
23585: PPUSH
23586: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23590: LD_VAR 0 1
23594: PPUSH
23595: LD_OWVAR 3
23599: PUSH
23600: LD_VAR 0 1
23604: DIFF
23605: PPUSH
23606: LD_VAR 0 1
23610: PPUSH
23611: CALL_OW 74
23615: PPUSH
23616: CALL_OW 115
// wait ( 0 0$20 ) ;
23620: LD_INT 700
23622: PPUSH
23623: CALL_OW 67
// SetSide ( un , your_side ) ;
23627: LD_VAR 0 1
23631: PPUSH
23632: LD_OWVAR 2
23636: PPUSH
23637: CALL_OW 235
// end ;
23641: PPOPN 2
23643: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23644: LD_EXP 48
23648: PUSH
23649: LD_EXP 81
23653: AND
23654: IFFALSE 23760
23656: GO 23658
23658: DISABLE
23659: LD_INT 0
23661: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23662: LD_ADDR_VAR 0 1
23666: PUSH
23667: LD_INT 22
23669: PUSH
23670: LD_OWVAR 2
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 30
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 69
23715: ST_TO_ADDR
// if not depot then
23716: LD_VAR 0 1
23720: NOT
23721: IFFALSE 23725
// exit ;
23723: GO 23760
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23725: LD_VAR 0 1
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: PPUSH
23734: CALL_OW 250
23738: PPUSH
23739: LD_VAR 0 1
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: PPUSH
23748: CALL_OW 251
23752: PPUSH
23753: LD_INT 70
23755: PPUSH
23756: CALL_OW 495
// end ;
23760: PPOPN 1
23762: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23763: LD_EXP 48
23767: PUSH
23768: LD_EXP 82
23772: AND
23773: IFFALSE 23984
23775: GO 23777
23777: DISABLE
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23785: LD_ADDR_VAR 0 5
23789: PUSH
23790: LD_INT 22
23792: PUSH
23793: LD_OWVAR 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 21
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PPUSH
23816: CALL_OW 69
23820: ST_TO_ADDR
// if not tmp then
23821: LD_VAR 0 5
23825: NOT
23826: IFFALSE 23830
// exit ;
23828: GO 23984
// for i in tmp do
23830: LD_ADDR_VAR 0 1
23834: PUSH
23835: LD_VAR 0 5
23839: PUSH
23840: FOR_IN
23841: IFFALSE 23982
// begin d := rand ( 0 , 5 ) ;
23843: LD_ADDR_VAR 0 4
23847: PUSH
23848: LD_INT 0
23850: PPUSH
23851: LD_INT 5
23853: PPUSH
23854: CALL_OW 12
23858: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 250
23873: PPUSH
23874: LD_VAR 0 4
23878: PPUSH
23879: LD_INT 3
23881: PPUSH
23882: LD_INT 12
23884: PPUSH
23885: CALL_OW 12
23889: PPUSH
23890: CALL_OW 272
23894: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23895: LD_ADDR_VAR 0 3
23899: PUSH
23900: LD_VAR 0 1
23904: PPUSH
23905: CALL_OW 251
23909: PPUSH
23910: LD_VAR 0 4
23914: PPUSH
23915: LD_INT 3
23917: PPUSH
23918: LD_INT 12
23920: PPUSH
23921: CALL_OW 12
23925: PPUSH
23926: CALL_OW 273
23930: ST_TO_ADDR
// if ValidHex ( x , y ) then
23931: LD_VAR 0 2
23935: PPUSH
23936: LD_VAR 0 3
23940: PPUSH
23941: CALL_OW 488
23945: IFFALSE 23980
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23947: LD_VAR 0 1
23951: PPUSH
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: LD_INT 3
23964: PPUSH
23965: LD_INT 6
23967: PPUSH
23968: CALL_OW 12
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 483
// end ;
23980: GO 23840
23982: POP
23983: POP
// end ;
23984: PPOPN 5
23986: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23987: LD_EXP 48
23991: PUSH
23992: LD_EXP 83
23996: AND
23997: IFFALSE 24091
23999: GO 24001
24001: DISABLE
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24006: LD_ADDR_VAR 0 2
24010: PUSH
24011: LD_INT 22
24013: PUSH
24014: LD_OWVAR 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 32
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 21
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// if not tmp then
24053: LD_VAR 0 2
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24091
// for i in tmp do
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_VAR 0 2
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24089
// SetFuel ( i , 0 ) ;
24075: LD_VAR 0 1
24079: PPUSH
24080: LD_INT 0
24082: PPUSH
24083: CALL_OW 240
24087: GO 24072
24089: POP
24090: POP
// end ;
24091: PPOPN 2
24093: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24094: LD_EXP 48
24098: PUSH
24099: LD_EXP 84
24103: AND
24104: IFFALSE 24170
24106: GO 24108
24108: DISABLE
24109: LD_INT 0
24111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24112: LD_ADDR_VAR 0 1
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 30
24131: PUSH
24132: LD_INT 29
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PPUSH
24143: CALL_OW 69
24147: ST_TO_ADDR
// if not tmp then
24148: LD_VAR 0 1
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24170
// DestroyUnit ( tmp [ 1 ] ) ;
24157: LD_VAR 0 1
24161: PUSH
24162: LD_INT 1
24164: ARRAY
24165: PPUSH
24166: CALL_OW 65
// end ;
24170: PPOPN 1
24172: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24173: LD_EXP 48
24177: PUSH
24178: LD_EXP 86
24182: AND
24183: IFFALSE 24312
24185: GO 24187
24187: DISABLE
24188: LD_INT 0
24190: PPUSH
// begin uc_side := 0 ;
24191: LD_ADDR_OWVAR 20
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// uc_nation := nation_arabian ;
24199: LD_ADDR_OWVAR 21
24203: PUSH
24204: LD_INT 2
24206: ST_TO_ADDR
// hc_gallery :=  ;
24207: LD_ADDR_OWVAR 33
24211: PUSH
24212: LD_STRING 
24214: ST_TO_ADDR
// hc_name :=  ;
24215: LD_ADDR_OWVAR 26
24219: PUSH
24220: LD_STRING 
24222: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24223: LD_INT 1
24225: PPUSH
24226: LD_INT 11
24228: PPUSH
24229: LD_INT 10
24231: PPUSH
24232: CALL_OW 380
// un := CreateHuman ;
24236: LD_ADDR_VAR 0 1
24240: PUSH
24241: CALL_OW 44
24245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24246: LD_VAR 0 1
24250: PPUSH
24251: LD_INT 1
24253: PPUSH
24254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24258: LD_INT 35
24260: PPUSH
24261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24265: LD_VAR 0 1
24269: PPUSH
24270: LD_INT 22
24272: PUSH
24273: LD_OWVAR 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: PPUSH
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 74
24296: PPUSH
24297: CALL_OW 115
// until IsDead ( un ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 301
24310: IFFALSE 24258
// end ;
24312: PPOPN 1
24314: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24315: LD_EXP 48
24319: PUSH
24320: LD_EXP 88
24324: AND
24325: IFFALSE 24337
24327: GO 24329
24329: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24330: LD_STRING earthquake(getX(game), 0, 32)
24332: PPUSH
24333: CALL_OW 559
24337: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24338: LD_EXP 48
24342: PUSH
24343: LD_EXP 89
24347: AND
24348: IFFALSE 24439
24350: GO 24352
24352: DISABLE
24353: LD_INT 0
24355: PPUSH
// begin enable ;
24356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24357: LD_ADDR_VAR 0 1
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_OWVAR 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 21
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 33
24386: PUSH
24387: LD_INT 3
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 69
24403: ST_TO_ADDR
// if not tmp then
24404: LD_VAR 0 1
24408: NOT
24409: IFFALSE 24413
// exit ;
24411: GO 24439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24413: LD_VAR 0 1
24417: PUSH
24418: LD_INT 1
24420: PPUSH
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL_OW 12
24430: ARRAY
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 234
// end ;
24439: PPOPN 1
24441: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24442: LD_EXP 48
24446: PUSH
24447: LD_EXP 90
24451: AND
24452: IFFALSE 24593
24454: GO 24456
24456: DISABLE
24457: LD_INT 0
24459: PPUSH
24460: PPUSH
24461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24462: LD_ADDR_VAR 0 3
24466: PUSH
24467: LD_INT 22
24469: PUSH
24470: LD_OWVAR 2
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 25
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 69
24497: ST_TO_ADDR
// if not tmp then
24498: LD_VAR 0 3
24502: NOT
24503: IFFALSE 24507
// exit ;
24505: GO 24593
// un := tmp [ rand ( 1 , tmp ) ] ;
24507: LD_ADDR_VAR 0 2
24511: PUSH
24512: LD_VAR 0 3
24516: PUSH
24517: LD_INT 1
24519: PPUSH
24520: LD_VAR 0 3
24524: PPUSH
24525: CALL_OW 12
24529: ARRAY
24530: ST_TO_ADDR
// if Crawls ( un ) then
24531: LD_VAR 0 2
24535: PPUSH
24536: CALL_OW 318
24540: IFFALSE 24551
// ComWalk ( un ) ;
24542: LD_VAR 0 2
24546: PPUSH
24547: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_INT 9
24558: PPUSH
24559: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24563: LD_INT 28
24565: PPUSH
24566: LD_OWVAR 2
24570: PPUSH
24571: LD_INT 2
24573: PPUSH
24574: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24578: LD_INT 29
24580: PPUSH
24581: LD_OWVAR 2
24585: PPUSH
24586: LD_INT 2
24588: PPUSH
24589: CALL_OW 322
// end ;
24593: PPOPN 3
24595: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24596: LD_EXP 48
24600: PUSH
24601: LD_EXP 91
24605: AND
24606: IFFALSE 24717
24608: GO 24610
24610: DISABLE
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
24615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24616: LD_ADDR_VAR 0 3
24620: PUSH
24621: LD_INT 22
24623: PUSH
24624: LD_OWVAR 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: ST_TO_ADDR
// if not tmp then
24652: LD_VAR 0 3
24656: NOT
24657: IFFALSE 24661
// exit ;
24659: GO 24717
// un := tmp [ rand ( 1 , tmp ) ] ;
24661: LD_ADDR_VAR 0 2
24665: PUSH
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 1
24673: PPUSH
24674: LD_VAR 0 3
24678: PPUSH
24679: CALL_OW 12
24683: ARRAY
24684: ST_TO_ADDR
// if Crawls ( un ) then
24685: LD_VAR 0 2
24689: PPUSH
24690: CALL_OW 318
24694: IFFALSE 24705
// ComWalk ( un ) ;
24696: LD_VAR 0 2
24700: PPUSH
24701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_INT 8
24712: PPUSH
24713: CALL_OW 336
// end ;
24717: PPOPN 3
24719: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24720: LD_EXP 48
24724: PUSH
24725: LD_EXP 92
24729: AND
24730: IFFALSE 24874
24732: GO 24734
24734: DISABLE
24735: LD_INT 0
24737: PPUSH
24738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24739: LD_ADDR_VAR 0 2
24743: PUSH
24744: LD_INT 22
24746: PUSH
24747: LD_OWVAR 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 21
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 34
24771: PUSH
24772: LD_INT 12
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 34
24781: PUSH
24782: LD_INT 51
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 34
24791: PUSH
24792: LD_INT 32
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: ST_TO_ADDR
// if not tmp then
24815: LD_VAR 0 2
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24874
// for i in tmp do
24824: LD_ADDR_VAR 0 1
24828: PUSH
24829: LD_VAR 0 2
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24872
// if GetCargo ( i , mat_artifact ) = 0 then
24837: LD_VAR 0 1
24841: PPUSH
24842: LD_INT 4
24844: PPUSH
24845: CALL_OW 289
24849: PUSH
24850: LD_INT 0
24852: EQUAL
24853: IFFALSE 24870
// SetCargo ( i , mat_siberit , 100 ) ;
24855: LD_VAR 0 1
24859: PPUSH
24860: LD_INT 3
24862: PPUSH
24863: LD_INT 100
24865: PPUSH
24866: CALL_OW 290
24870: GO 24834
24872: POP
24873: POP
// end ;
24874: PPOPN 2
24876: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24877: LD_EXP 48
24881: PUSH
24882: LD_EXP 93
24886: AND
24887: IFFALSE 25070
24889: GO 24891
24891: DISABLE
24892: LD_INT 0
24894: PPUSH
24895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24896: LD_ADDR_VAR 0 2
24900: PUSH
24901: LD_INT 22
24903: PUSH
24904: LD_OWVAR 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 69
24917: ST_TO_ADDR
// if not tmp then
24918: LD_VAR 0 2
24922: NOT
24923: IFFALSE 24927
// exit ;
24925: GO 25070
// for i := 1 to 2 do
24927: LD_ADDR_VAR 0 1
24931: PUSH
24932: DOUBLE
24933: LD_INT 1
24935: DEC
24936: ST_TO_ADDR
24937: LD_INT 2
24939: PUSH
24940: FOR_TO
24941: IFFALSE 25068
// begin uc_side := your_side ;
24943: LD_ADDR_OWVAR 20
24947: PUSH
24948: LD_OWVAR 2
24952: ST_TO_ADDR
// uc_nation := nation_american ;
24953: LD_ADDR_OWVAR 21
24957: PUSH
24958: LD_INT 1
24960: ST_TO_ADDR
// vc_chassis := us_morphling ;
24961: LD_ADDR_OWVAR 37
24965: PUSH
24966: LD_INT 5
24968: ST_TO_ADDR
// vc_engine := engine_siberite ;
24969: LD_ADDR_OWVAR 39
24973: PUSH
24974: LD_INT 3
24976: ST_TO_ADDR
// vc_control := control_computer ;
24977: LD_ADDR_OWVAR 38
24981: PUSH
24982: LD_INT 3
24984: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24985: LD_ADDR_OWVAR 40
24989: PUSH
24990: LD_INT 10
24992: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24993: LD_VAR 0 2
24997: PUSH
24998: LD_INT 1
25000: ARRAY
25001: PPUSH
25002: CALL_OW 310
25006: NOT
25007: IFFALSE 25054
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25009: CALL_OW 45
25013: PPUSH
25014: LD_VAR 0 2
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: PPUSH
25023: CALL_OW 250
25027: PPUSH
25028: LD_VAR 0 2
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: PPUSH
25037: CALL_OW 251
25041: PPUSH
25042: LD_INT 12
25044: PPUSH
25045: LD_INT 1
25047: PPUSH
25048: CALL_OW 50
25052: GO 25066
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25054: CALL_OW 45
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 51
// end ;
25066: GO 24940
25068: POP
25069: POP
// end ;
25070: PPOPN 2
25072: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25073: LD_EXP 48
25077: PUSH
25078: LD_EXP 94
25082: AND
25083: IFFALSE 25305
25085: GO 25087
25087: DISABLE
25088: LD_INT 0
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25096: LD_ADDR_VAR 0 6
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_OWVAR 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 21
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: LD_INT 23
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 69
25149: ST_TO_ADDR
// if not tmp then
25150: LD_VAR 0 6
25154: NOT
25155: IFFALSE 25159
// exit ;
25157: GO 25305
// s1 := rand ( 1 , 4 ) ;
25159: LD_ADDR_VAR 0 2
25163: PUSH
25164: LD_INT 1
25166: PPUSH
25167: LD_INT 4
25169: PPUSH
25170: CALL_OW 12
25174: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25175: LD_ADDR_VAR 0 4
25179: PUSH
25180: LD_VAR 0 6
25184: PUSH
25185: LD_INT 1
25187: ARRAY
25188: PPUSH
25189: LD_VAR 0 2
25193: PPUSH
25194: CALL_OW 259
25198: ST_TO_ADDR
// if s1 = 1 then
25199: LD_VAR 0 2
25203: PUSH
25204: LD_INT 1
25206: EQUAL
25207: IFFALSE 25227
// s2 := rand ( 2 , 4 ) else
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 2
25216: PPUSH
25217: LD_INT 4
25219: PPUSH
25220: CALL_OW 12
25224: ST_TO_ADDR
25225: GO 25235
// s2 := 1 ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_INT 1
25234: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25235: LD_ADDR_VAR 0 5
25239: PUSH
25240: LD_VAR 0 6
25244: PUSH
25245: LD_INT 1
25247: ARRAY
25248: PPUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: CALL_OW 259
25258: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25259: LD_VAR 0 6
25263: PUSH
25264: LD_INT 1
25266: ARRAY
25267: PPUSH
25268: LD_VAR 0 2
25272: PPUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25282: LD_VAR 0 6
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: LD_VAR 0 4
25300: PPUSH
25301: CALL_OW 237
// end ;
25305: PPOPN 6
25307: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25308: LD_EXP 48
25312: PUSH
25313: LD_EXP 95
25317: AND
25318: IFFALSE 25397
25320: GO 25322
25322: DISABLE
25323: LD_INT 0
25325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25326: LD_ADDR_VAR 0 1
25330: PUSH
25331: LD_INT 22
25333: PUSH
25334: LD_OWVAR 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 30
25345: PUSH
25346: LD_INT 3
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: ST_TO_ADDR
// if not tmp then
25362: LD_VAR 0 1
25366: NOT
25367: IFFALSE 25371
// exit ;
25369: GO 25397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25371: LD_VAR 0 1
25375: PUSH
25376: LD_INT 1
25378: PPUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 12
25388: ARRAY
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: CALL_OW 234
// end ;
25397: PPOPN 1
25399: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25400: LD_EXP 48
25404: PUSH
25405: LD_EXP 96
25409: AND
25410: IFFALSE 25522
25412: GO 25414
25414: DISABLE
25415: LD_INT 0
25417: PPUSH
25418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25419: LD_ADDR_VAR 0 2
25423: PUSH
25424: LD_INT 22
25426: PUSH
25427: LD_OWVAR 2
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: LD_INT 27
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 30
25451: PUSH
25452: LD_INT 26
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 30
25461: PUSH
25462: LD_INT 28
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PPUSH
25479: CALL_OW 69
25483: ST_TO_ADDR
// if not tmp then
25484: LD_VAR 0 2
25488: NOT
25489: IFFALSE 25493
// exit ;
25491: GO 25522
// for i in tmp do
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: LD_VAR 0 2
25502: PUSH
25503: FOR_IN
25504: IFFALSE 25520
// SetLives ( i , 1 ) ;
25506: LD_VAR 0 1
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 234
25518: GO 25503
25520: POP
25521: POP
// end ;
25522: PPOPN 2
25524: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25525: LD_EXP 48
25529: PUSH
25530: LD_EXP 97
25534: AND
25535: IFFALSE 25822
25537: GO 25539
25539: DISABLE
25540: LD_INT 0
25542: PPUSH
25543: PPUSH
25544: PPUSH
// begin i := rand ( 1 , 7 ) ;
25545: LD_ADDR_VAR 0 1
25549: PUSH
25550: LD_INT 1
25552: PPUSH
25553: LD_INT 7
25555: PPUSH
25556: CALL_OW 12
25560: ST_TO_ADDR
// case i of 1 :
25561: LD_VAR 0 1
25565: PUSH
25566: LD_INT 1
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25584
25574: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25575: LD_STRING earthquake(getX(game), 0, 32)
25577: PPUSH
25578: CALL_OW 559
25582: GO 25822
25584: LD_INT 2
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25606
25592: POP
// begin ToLua ( displayStucuk(); ) ;
25593: LD_STRING displayStucuk();
25595: PPUSH
25596: CALL_OW 559
// ResetFog ;
25600: CALL_OW 335
// end ; 3 :
25604: GO 25822
25606: LD_INT 3
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25718
25614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25615: LD_ADDR_VAR 0 2
25619: PUSH
25620: LD_INT 22
25622: PUSH
25623: LD_OWVAR 2
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 25
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PPUSH
25646: CALL_OW 69
25650: ST_TO_ADDR
// if not tmp then
25651: LD_VAR 0 2
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25822
// un := tmp [ rand ( 1 , tmp ) ] ;
25660: LD_ADDR_VAR 0 3
25664: PUSH
25665: LD_VAR 0 2
25669: PUSH
25670: LD_INT 1
25672: PPUSH
25673: LD_VAR 0 2
25677: PPUSH
25678: CALL_OW 12
25682: ARRAY
25683: ST_TO_ADDR
// if Crawls ( un ) then
25684: LD_VAR 0 3
25688: PPUSH
25689: CALL_OW 318
25693: IFFALSE 25704
// ComWalk ( un ) ;
25695: LD_VAR 0 3
25699: PPUSH
25700: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25704: LD_VAR 0 3
25708: PPUSH
25709: LD_INT 8
25711: PPUSH
25712: CALL_OW 336
// end ; 4 :
25716: GO 25822
25718: LD_INT 4
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25800
25726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 22
25734: PUSH
25735: LD_OWVAR 2
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 30
25746: PUSH
25747: LD_INT 29
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PPUSH
25758: CALL_OW 69
25762: ST_TO_ADDR
// if not tmp then
25763: LD_VAR 0 2
25767: NOT
25768: IFFALSE 25772
// exit ;
25770: GO 25822
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25772: LD_VAR 0 2
25776: PUSH
25777: LD_INT 1
25779: ARRAY
25780: PPUSH
25781: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25785: LD_VAR 0 2
25789: PUSH
25790: LD_INT 1
25792: ARRAY
25793: PPUSH
25794: CALL_OW 65
// end ; 5 .. 7 :
25798: GO 25822
25800: LD_INT 5
25802: DOUBLE
25803: GREATEREQUAL
25804: IFFALSE 25812
25806: LD_INT 7
25808: DOUBLE
25809: LESSEQUAL
25810: IFTRUE 25814
25812: GO 25821
25814: POP
// StreamSibBomb ; end ;
25815: CALL 22059 0 0
25819: GO 25822
25821: POP
// end ;
25822: PPOPN 3
25824: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25825: LD_EXP 48
25829: PUSH
25830: LD_EXP 98
25834: AND
25835: IFFALSE 25991
25837: GO 25839
25839: DISABLE
25840: LD_INT 0
25842: PPUSH
25843: PPUSH
25844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25845: LD_ADDR_VAR 0 2
25849: PUSH
25850: LD_INT 81
25852: PUSH
25853: LD_OWVAR 2
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: LD_INT 21
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 21
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PPUSH
25894: CALL_OW 69
25898: ST_TO_ADDR
// if not tmp then
25899: LD_VAR 0 2
25903: NOT
25904: IFFALSE 25908
// exit ;
25906: GO 25991
// p := 0 ;
25908: LD_ADDR_VAR 0 3
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25916: LD_INT 35
25918: PPUSH
25919: CALL_OW 67
// p := p + 1 ;
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_VAR 0 3
25932: PUSH
25933: LD_INT 1
25935: PLUS
25936: ST_TO_ADDR
// for i in tmp do
25937: LD_ADDR_VAR 0 1
25941: PUSH
25942: LD_VAR 0 2
25946: PUSH
25947: FOR_IN
25948: IFFALSE 25979
// if GetLives ( i ) < 1000 then
25950: LD_VAR 0 1
25954: PPUSH
25955: CALL_OW 256
25959: PUSH
25960: LD_INT 1000
25962: LESS
25963: IFFALSE 25977
// SetLives ( i , 1000 ) ;
25965: LD_VAR 0 1
25969: PPUSH
25970: LD_INT 1000
25972: PPUSH
25973: CALL_OW 234
25977: GO 25947
25979: POP
25980: POP
// until p > 20 ;
25981: LD_VAR 0 3
25985: PUSH
25986: LD_INT 20
25988: GREATER
25989: IFFALSE 25916
// end ;
25991: PPOPN 3
25993: END
// every 0 0$1 trigger StreamModeActive and sTime do
25994: LD_EXP 48
25998: PUSH
25999: LD_EXP 99
26003: AND
26004: IFFALSE 26039
26006: GO 26008
26008: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26009: LD_INT 28
26011: PPUSH
26012: LD_OWVAR 2
26016: PPUSH
26017: LD_INT 2
26019: PPUSH
26020: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26024: LD_INT 30
26026: PPUSH
26027: LD_OWVAR 2
26031: PPUSH
26032: LD_INT 2
26034: PPUSH
26035: CALL_OW 322
// end ;
26039: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26040: LD_EXP 48
26044: PUSH
26045: LD_EXP 100
26049: AND
26050: IFFALSE 26171
26052: GO 26054
26054: DISABLE
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26059: LD_ADDR_VAR 0 2
26063: PUSH
26064: LD_INT 22
26066: PUSH
26067: LD_OWVAR 2
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 21
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 3
26088: PUSH
26089: LD_INT 23
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: PPUSH
26108: CALL_OW 69
26112: ST_TO_ADDR
// if not tmp then
26113: LD_VAR 0 2
26117: NOT
26118: IFFALSE 26122
// exit ;
26120: GO 26171
// for i in tmp do
26122: LD_ADDR_VAR 0 1
26126: PUSH
26127: LD_VAR 0 2
26131: PUSH
26132: FOR_IN
26133: IFFALSE 26169
// begin if Crawls ( i ) then
26135: LD_VAR 0 1
26139: PPUSH
26140: CALL_OW 318
26144: IFFALSE 26155
// ComWalk ( i ) ;
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 138
// SetClass ( i , 2 ) ;
26155: LD_VAR 0 1
26159: PPUSH
26160: LD_INT 2
26162: PPUSH
26163: CALL_OW 336
// end ;
26167: GO 26132
26169: POP
26170: POP
// end ;
26171: PPOPN 2
26173: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26174: LD_EXP 48
26178: PUSH
26179: LD_EXP 101
26183: AND
26184: IFFALSE 26472
26186: GO 26188
26188: DISABLE
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
26193: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26194: LD_OWVAR 2
26198: PPUSH
26199: LD_INT 9
26201: PPUSH
26202: LD_INT 1
26204: PPUSH
26205: LD_INT 1
26207: PPUSH
26208: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26212: LD_INT 9
26214: PPUSH
26215: LD_OWVAR 2
26219: PPUSH
26220: CALL_OW 343
// uc_side := 9 ;
26224: LD_ADDR_OWVAR 20
26228: PUSH
26229: LD_INT 9
26231: ST_TO_ADDR
// uc_nation := 2 ;
26232: LD_ADDR_OWVAR 21
26236: PUSH
26237: LD_INT 2
26239: ST_TO_ADDR
// hc_name := Dark Warrior ;
26240: LD_ADDR_OWVAR 26
26244: PUSH
26245: LD_STRING Dark Warrior
26247: ST_TO_ADDR
// hc_gallery :=  ;
26248: LD_ADDR_OWVAR 33
26252: PUSH
26253: LD_STRING 
26255: ST_TO_ADDR
// hc_noskilllimit := true ;
26256: LD_ADDR_OWVAR 76
26260: PUSH
26261: LD_INT 1
26263: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26264: LD_ADDR_OWVAR 31
26268: PUSH
26269: LD_INT 30
26271: PUSH
26272: LD_INT 30
26274: PUSH
26275: LD_INT 30
26277: PUSH
26278: LD_INT 30
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// un := CreateHuman ;
26287: LD_ADDR_VAR 0 3
26291: PUSH
26292: CALL_OW 44
26296: ST_TO_ADDR
// hc_noskilllimit := false ;
26297: LD_ADDR_OWVAR 76
26301: PUSH
26302: LD_INT 0
26304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26305: LD_VAR 0 3
26309: PPUSH
26310: LD_INT 1
26312: PPUSH
26313: CALL_OW 51
// ToLua ( playRanger() ) ;
26317: LD_STRING playRanger()
26319: PPUSH
26320: CALL_OW 559
// p := 0 ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_INT 0
26331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26332: LD_INT 35
26334: PPUSH
26335: CALL_OW 67
// p := p + 1 ;
26339: LD_ADDR_VAR 0 2
26343: PUSH
26344: LD_VAR 0 2
26348: PUSH
26349: LD_INT 1
26351: PLUS
26352: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26353: LD_VAR 0 3
26357: PPUSH
26358: CALL_OW 256
26362: PUSH
26363: LD_INT 1000
26365: LESS
26366: IFFALSE 26380
// SetLives ( un , 1000 ) ;
26368: LD_VAR 0 3
26372: PPUSH
26373: LD_INT 1000
26375: PPUSH
26376: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26380: LD_VAR 0 3
26384: PPUSH
26385: LD_INT 81
26387: PUSH
26388: LD_OWVAR 2
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 91
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_INT 30
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PPUSH
26417: CALL_OW 69
26421: PPUSH
26422: LD_VAR 0 3
26426: PPUSH
26427: CALL_OW 74
26431: PPUSH
26432: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26436: LD_VAR 0 2
26440: PUSH
26441: LD_INT 80
26443: GREATER
26444: PUSH
26445: LD_VAR 0 3
26449: PPUSH
26450: CALL_OW 301
26454: OR
26455: IFFALSE 26332
// if un then
26457: LD_VAR 0 3
26461: IFFALSE 26472
// RemoveUnit ( un ) ;
26463: LD_VAR 0 3
26467: PPUSH
26468: CALL_OW 64
// end ;
26472: PPOPN 3
26474: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26475: LD_EXP 102
26479: IFFALSE 26595
26481: GO 26483
26483: DISABLE
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
26488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26489: LD_ADDR_VAR 0 2
26493: PUSH
26494: LD_INT 81
26496: PUSH
26497: LD_OWVAR 2
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 21
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 69
26524: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26525: LD_STRING playComputer()
26527: PPUSH
26528: CALL_OW 559
// if not tmp then
26532: LD_VAR 0 2
26536: NOT
26537: IFFALSE 26541
// exit ;
26539: GO 26595
// for i in tmp do
26541: LD_ADDR_VAR 0 1
26545: PUSH
26546: LD_VAR 0 2
26550: PUSH
26551: FOR_IN
26552: IFFALSE 26593
// for j := 1 to 4 do
26554: LD_ADDR_VAR 0 3
26558: PUSH
26559: DOUBLE
26560: LD_INT 1
26562: DEC
26563: ST_TO_ADDR
26564: LD_INT 4
26566: PUSH
26567: FOR_TO
26568: IFFALSE 26589
// SetSkill ( i , j , 10 ) ;
26570: LD_VAR 0 1
26574: PPUSH
26575: LD_VAR 0 3
26579: PPUSH
26580: LD_INT 10
26582: PPUSH
26583: CALL_OW 237
26587: GO 26567
26589: POP
26590: POP
26591: GO 26551
26593: POP
26594: POP
// end ;
26595: PPOPN 3
26597: END
// every 0 0$1 trigger s30 do var i , tmp ;
26598: LD_EXP 103
26602: IFFALSE 26671
26604: GO 26606
26606: DISABLE
26607: LD_INT 0
26609: PPUSH
26610: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26611: LD_ADDR_VAR 0 2
26615: PUSH
26616: LD_INT 22
26618: PUSH
26619: LD_OWVAR 2
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PPUSH
26628: CALL_OW 69
26632: ST_TO_ADDR
// if not tmp then
26633: LD_VAR 0 2
26637: NOT
26638: IFFALSE 26642
// exit ;
26640: GO 26671
// for i in tmp do
26642: LD_ADDR_VAR 0 1
26646: PUSH
26647: LD_VAR 0 2
26651: PUSH
26652: FOR_IN
26653: IFFALSE 26669
// SetLives ( i , 300 ) ;
26655: LD_VAR 0 1
26659: PPUSH
26660: LD_INT 300
26662: PPUSH
26663: CALL_OW 234
26667: GO 26652
26669: POP
26670: POP
// end ;
26671: PPOPN 2
26673: END
// every 0 0$1 trigger s60 do var i , tmp ;
26674: LD_EXP 104
26678: IFFALSE 26747
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: ST_TO_ADDR
// if not tmp then
26709: LD_VAR 0 2
26713: NOT
26714: IFFALSE 26718
// exit ;
26716: GO 26747
// for i in tmp do
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: LD_VAR 0 2
26727: PUSH
26728: FOR_IN
26729: IFFALSE 26745
// SetLives ( i , 600 ) ;
26731: LD_VAR 0 1
26735: PPUSH
26736: LD_INT 600
26738: PPUSH
26739: CALL_OW 234
26743: GO 26728
26745: POP
26746: POP
// end ;
26747: PPOPN 2
26749: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26750: LD_INT 0
26752: PPUSH
// case cmd of 301 :
26753: LD_VAR 0 1
26757: PUSH
26758: LD_INT 301
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26798
26766: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26767: LD_VAR 0 6
26771: PPUSH
26772: LD_VAR 0 7
26776: PPUSH
26777: LD_VAR 0 8
26781: PPUSH
26782: LD_VAR 0 4
26786: PPUSH
26787: LD_VAR 0 5
26791: PPUSH
26792: CALL 27999 0 5
26796: GO 26919
26798: LD_INT 302
26800: DOUBLE
26801: EQUAL
26802: IFTRUE 26806
26804: GO 26843
26806: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26807: LD_VAR 0 6
26811: PPUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 8
26821: PPUSH
26822: LD_VAR 0 9
26826: PPUSH
26827: LD_VAR 0 4
26831: PPUSH
26832: LD_VAR 0 5
26836: PPUSH
26837: CALL 28090 0 6
26841: GO 26919
26843: LD_INT 303
26845: DOUBLE
26846: EQUAL
26847: IFTRUE 26851
26849: GO 26888
26851: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26852: LD_VAR 0 6
26856: PPUSH
26857: LD_VAR 0 7
26861: PPUSH
26862: LD_VAR 0 8
26866: PPUSH
26867: LD_VAR 0 9
26871: PPUSH
26872: LD_VAR 0 4
26876: PPUSH
26877: LD_VAR 0 5
26881: PPUSH
26882: CALL 26924 0 6
26886: GO 26919
26888: LD_INT 304
26890: DOUBLE
26891: EQUAL
26892: IFTRUE 26896
26894: GO 26918
26896: POP
// hHackTeleport ( unit , x , y ) ; end ;
26897: LD_VAR 0 2
26901: PPUSH
26902: LD_VAR 0 4
26906: PPUSH
26907: LD_VAR 0 5
26911: PPUSH
26912: CALL 28683 0 3
26916: GO 26919
26918: POP
// end ;
26919: LD_VAR 0 12
26923: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26924: LD_INT 0
26926: PPUSH
26927: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26928: LD_VAR 0 1
26932: PUSH
26933: LD_INT 1
26935: LESS
26936: PUSH
26937: LD_VAR 0 1
26941: PUSH
26942: LD_INT 3
26944: GREATER
26945: OR
26946: PUSH
26947: LD_VAR 0 5
26951: PPUSH
26952: LD_VAR 0 6
26956: PPUSH
26957: CALL_OW 428
26961: OR
26962: IFFALSE 26966
// exit ;
26964: GO 27686
// uc_side := your_side ;
26966: LD_ADDR_OWVAR 20
26970: PUSH
26971: LD_OWVAR 2
26975: ST_TO_ADDR
// uc_nation := nation ;
26976: LD_ADDR_OWVAR 21
26980: PUSH
26981: LD_VAR 0 1
26985: ST_TO_ADDR
// bc_level = 1 ;
26986: LD_ADDR_OWVAR 43
26990: PUSH
26991: LD_INT 1
26993: ST_TO_ADDR
// case btype of 1 :
26994: LD_VAR 0 2
26998: PUSH
26999: LD_INT 1
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27018
27007: POP
// bc_type := b_depot ; 2 :
27008: LD_ADDR_OWVAR 42
27012: PUSH
27013: LD_INT 0
27015: ST_TO_ADDR
27016: GO 27630
27018: LD_INT 2
27020: DOUBLE
27021: EQUAL
27022: IFTRUE 27026
27024: GO 27037
27026: POP
// bc_type := b_warehouse ; 3 :
27027: LD_ADDR_OWVAR 42
27031: PUSH
27032: LD_INT 1
27034: ST_TO_ADDR
27035: GO 27630
27037: LD_INT 3
27039: DOUBLE
27040: EQUAL
27041: IFTRUE 27045
27043: GO 27056
27045: POP
// bc_type := b_lab ; 4 .. 9 :
27046: LD_ADDR_OWVAR 42
27050: PUSH
27051: LD_INT 6
27053: ST_TO_ADDR
27054: GO 27630
27056: LD_INT 4
27058: DOUBLE
27059: GREATEREQUAL
27060: IFFALSE 27068
27062: LD_INT 9
27064: DOUBLE
27065: LESSEQUAL
27066: IFTRUE 27070
27068: GO 27122
27070: POP
// begin bc_type := b_lab_half ;
27071: LD_ADDR_OWVAR 42
27075: PUSH
27076: LD_INT 7
27078: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27079: LD_ADDR_OWVAR 44
27083: PUSH
27084: LD_INT 10
27086: PUSH
27087: LD_INT 11
27089: PUSH
27090: LD_INT 12
27092: PUSH
27093: LD_INT 15
27095: PUSH
27096: LD_INT 14
27098: PUSH
27099: LD_INT 13
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: PUSH
27110: LD_VAR 0 2
27114: PUSH
27115: LD_INT 3
27117: MINUS
27118: ARRAY
27119: ST_TO_ADDR
// end ; 10 .. 13 :
27120: GO 27630
27122: LD_INT 10
27124: DOUBLE
27125: GREATEREQUAL
27126: IFFALSE 27134
27128: LD_INT 13
27130: DOUBLE
27131: LESSEQUAL
27132: IFTRUE 27136
27134: GO 27213
27136: POP
// begin bc_type := b_lab_full ;
27137: LD_ADDR_OWVAR 42
27141: PUSH
27142: LD_INT 8
27144: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27145: LD_ADDR_OWVAR 44
27149: PUSH
27150: LD_INT 10
27152: PUSH
27153: LD_INT 12
27155: PUSH
27156: LD_INT 14
27158: PUSH
27159: LD_INT 13
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: PUSH
27168: LD_VAR 0 2
27172: PUSH
27173: LD_INT 9
27175: MINUS
27176: ARRAY
27177: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27178: LD_ADDR_OWVAR 45
27182: PUSH
27183: LD_INT 11
27185: PUSH
27186: LD_INT 15
27188: PUSH
27189: LD_INT 12
27191: PUSH
27192: LD_INT 15
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: PUSH
27201: LD_VAR 0 2
27205: PUSH
27206: LD_INT 9
27208: MINUS
27209: ARRAY
27210: ST_TO_ADDR
// end ; 14 :
27211: GO 27630
27213: LD_INT 14
27215: DOUBLE
27216: EQUAL
27217: IFTRUE 27221
27219: GO 27232
27221: POP
// bc_type := b_workshop ; 15 :
27222: LD_ADDR_OWVAR 42
27226: PUSH
27227: LD_INT 2
27229: ST_TO_ADDR
27230: GO 27630
27232: LD_INT 15
27234: DOUBLE
27235: EQUAL
27236: IFTRUE 27240
27238: GO 27251
27240: POP
// bc_type := b_factory ; 16 :
27241: LD_ADDR_OWVAR 42
27245: PUSH
27246: LD_INT 3
27248: ST_TO_ADDR
27249: GO 27630
27251: LD_INT 16
27253: DOUBLE
27254: EQUAL
27255: IFTRUE 27259
27257: GO 27270
27259: POP
// bc_type := b_ext_gun ; 17 :
27260: LD_ADDR_OWVAR 42
27264: PUSH
27265: LD_INT 17
27267: ST_TO_ADDR
27268: GO 27630
27270: LD_INT 17
27272: DOUBLE
27273: EQUAL
27274: IFTRUE 27278
27276: GO 27306
27278: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27279: LD_ADDR_OWVAR 42
27283: PUSH
27284: LD_INT 19
27286: PUSH
27287: LD_INT 23
27289: PUSH
27290: LD_INT 19
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: PUSH
27298: LD_VAR 0 1
27302: ARRAY
27303: ST_TO_ADDR
27304: GO 27630
27306: LD_INT 18
27308: DOUBLE
27309: EQUAL
27310: IFTRUE 27314
27312: GO 27325
27314: POP
// bc_type := b_ext_radar ; 19 :
27315: LD_ADDR_OWVAR 42
27319: PUSH
27320: LD_INT 20
27322: ST_TO_ADDR
27323: GO 27630
27325: LD_INT 19
27327: DOUBLE
27328: EQUAL
27329: IFTRUE 27333
27331: GO 27344
27333: POP
// bc_type := b_ext_radio ; 20 :
27334: LD_ADDR_OWVAR 42
27338: PUSH
27339: LD_INT 22
27341: ST_TO_ADDR
27342: GO 27630
27344: LD_INT 20
27346: DOUBLE
27347: EQUAL
27348: IFTRUE 27352
27350: GO 27363
27352: POP
// bc_type := b_ext_siberium ; 21 :
27353: LD_ADDR_OWVAR 42
27357: PUSH
27358: LD_INT 21
27360: ST_TO_ADDR
27361: GO 27630
27363: LD_INT 21
27365: DOUBLE
27366: EQUAL
27367: IFTRUE 27371
27369: GO 27382
27371: POP
// bc_type := b_ext_computer ; 22 :
27372: LD_ADDR_OWVAR 42
27376: PUSH
27377: LD_INT 24
27379: ST_TO_ADDR
27380: GO 27630
27382: LD_INT 22
27384: DOUBLE
27385: EQUAL
27386: IFTRUE 27390
27388: GO 27401
27390: POP
// bc_type := b_ext_track ; 23 :
27391: LD_ADDR_OWVAR 42
27395: PUSH
27396: LD_INT 16
27398: ST_TO_ADDR
27399: GO 27630
27401: LD_INT 23
27403: DOUBLE
27404: EQUAL
27405: IFTRUE 27409
27407: GO 27420
27409: POP
// bc_type := b_ext_laser ; 24 :
27410: LD_ADDR_OWVAR 42
27414: PUSH
27415: LD_INT 25
27417: ST_TO_ADDR
27418: GO 27630
27420: LD_INT 24
27422: DOUBLE
27423: EQUAL
27424: IFTRUE 27428
27426: GO 27439
27428: POP
// bc_type := b_control_tower ; 25 :
27429: LD_ADDR_OWVAR 42
27433: PUSH
27434: LD_INT 36
27436: ST_TO_ADDR
27437: GO 27630
27439: LD_INT 25
27441: DOUBLE
27442: EQUAL
27443: IFTRUE 27447
27445: GO 27458
27447: POP
// bc_type := b_breastwork ; 26 :
27448: LD_ADDR_OWVAR 42
27452: PUSH
27453: LD_INT 31
27455: ST_TO_ADDR
27456: GO 27630
27458: LD_INT 26
27460: DOUBLE
27461: EQUAL
27462: IFTRUE 27466
27464: GO 27477
27466: POP
// bc_type := b_bunker ; 27 :
27467: LD_ADDR_OWVAR 42
27471: PUSH
27472: LD_INT 32
27474: ST_TO_ADDR
27475: GO 27630
27477: LD_INT 27
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27496
27485: POP
// bc_type := b_turret ; 28 :
27486: LD_ADDR_OWVAR 42
27490: PUSH
27491: LD_INT 33
27493: ST_TO_ADDR
27494: GO 27630
27496: LD_INT 28
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27515
27504: POP
// bc_type := b_armoury ; 29 :
27505: LD_ADDR_OWVAR 42
27509: PUSH
27510: LD_INT 4
27512: ST_TO_ADDR
27513: GO 27630
27515: LD_INT 29
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27534
27523: POP
// bc_type := b_barracks ; 30 :
27524: LD_ADDR_OWVAR 42
27528: PUSH
27529: LD_INT 5
27531: ST_TO_ADDR
27532: GO 27630
27534: LD_INT 30
27536: DOUBLE
27537: EQUAL
27538: IFTRUE 27542
27540: GO 27553
27542: POP
// bc_type := b_solar_power ; 31 :
27543: LD_ADDR_OWVAR 42
27547: PUSH
27548: LD_INT 27
27550: ST_TO_ADDR
27551: GO 27630
27553: LD_INT 31
27555: DOUBLE
27556: EQUAL
27557: IFTRUE 27561
27559: GO 27572
27561: POP
// bc_type := b_oil_power ; 32 :
27562: LD_ADDR_OWVAR 42
27566: PUSH
27567: LD_INT 26
27569: ST_TO_ADDR
27570: GO 27630
27572: LD_INT 32
27574: DOUBLE
27575: EQUAL
27576: IFTRUE 27580
27578: GO 27591
27580: POP
// bc_type := b_siberite_power ; 33 :
27581: LD_ADDR_OWVAR 42
27585: PUSH
27586: LD_INT 28
27588: ST_TO_ADDR
27589: GO 27630
27591: LD_INT 33
27593: DOUBLE
27594: EQUAL
27595: IFTRUE 27599
27597: GO 27610
27599: POP
// bc_type := b_oil_mine ; 34 :
27600: LD_ADDR_OWVAR 42
27604: PUSH
27605: LD_INT 29
27607: ST_TO_ADDR
27608: GO 27630
27610: LD_INT 34
27612: DOUBLE
27613: EQUAL
27614: IFTRUE 27618
27616: GO 27629
27618: POP
// bc_type := b_siberite_mine ; end ;
27619: LD_ADDR_OWVAR 42
27623: PUSH
27624: LD_INT 30
27626: ST_TO_ADDR
27627: GO 27630
27629: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27630: LD_ADDR_VAR 0 8
27634: PUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: LD_VAR 0 6
27644: PPUSH
27645: LD_VAR 0 3
27649: PPUSH
27650: CALL_OW 47
27654: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27655: LD_OWVAR 42
27659: PUSH
27660: LD_INT 32
27662: PUSH
27663: LD_INT 33
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: IN
27670: IFFALSE 27686
// PlaceWeaponTurret ( b , weapon ) ;
27672: LD_VAR 0 8
27676: PPUSH
27677: LD_VAR 0 4
27681: PPUSH
27682: CALL_OW 431
// end ;
27686: LD_VAR 0 7
27690: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27691: LD_INT 0
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27697: LD_ADDR_VAR 0 4
27701: PUSH
27702: LD_INT 22
27704: PUSH
27705: LD_OWVAR 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: LD_INT 30
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 30
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 69
27750: ST_TO_ADDR
// if not tmp then
27751: LD_VAR 0 4
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27819
// for i in tmp do
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_VAR 0 4
27769: PUSH
27770: FOR_IN
27771: IFFALSE 27817
// for j = 1 to 3 do
27773: LD_ADDR_VAR 0 3
27777: PUSH
27778: DOUBLE
27779: LD_INT 1
27781: DEC
27782: ST_TO_ADDR
27783: LD_INT 3
27785: PUSH
27786: FOR_TO
27787: IFFALSE 27813
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27789: LD_VAR 0 2
27793: PPUSH
27794: CALL_OW 274
27798: PPUSH
27799: LD_VAR 0 3
27803: PPUSH
27804: LD_INT 99999
27806: PPUSH
27807: CALL_OW 277
27811: GO 27786
27813: POP
27814: POP
27815: GO 27770
27817: POP
27818: POP
// end ;
27819: LD_VAR 0 1
27823: RET
// export function hHackSetLevel10 ; var i , j ; begin
27824: LD_INT 0
27826: PPUSH
27827: PPUSH
27828: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27829: LD_ADDR_VAR 0 2
27833: PUSH
27834: LD_INT 21
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 69
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27902
// if IsSelected ( i ) then
27852: LD_VAR 0 2
27856: PPUSH
27857: CALL_OW 306
27861: IFFALSE 27900
// begin for j := 1 to 4 do
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: DOUBLE
27869: LD_INT 1
27871: DEC
27872: ST_TO_ADDR
27873: LD_INT 4
27875: PUSH
27876: FOR_TO
27877: IFFALSE 27898
// SetSkill ( i , j , 10 ) ;
27879: LD_VAR 0 2
27883: PPUSH
27884: LD_VAR 0 3
27888: PPUSH
27889: LD_INT 10
27891: PPUSH
27892: CALL_OW 237
27896: GO 27876
27898: POP
27899: POP
// end ;
27900: GO 27849
27902: POP
27903: POP
// end ;
27904: LD_VAR 0 1
27908: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27909: LD_INT 0
27911: PPUSH
27912: PPUSH
27913: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27914: LD_ADDR_VAR 0 2
27918: PUSH
27919: LD_INT 22
27921: PUSH
27922: LD_OWVAR 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 21
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PPUSH
27945: CALL_OW 69
27949: PUSH
27950: FOR_IN
27951: IFFALSE 27992
// begin for j := 1 to 4 do
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: DOUBLE
27959: LD_INT 1
27961: DEC
27962: ST_TO_ADDR
27963: LD_INT 4
27965: PUSH
27966: FOR_TO
27967: IFFALSE 27988
// SetSkill ( i , j , 10 ) ;
27969: LD_VAR 0 2
27973: PPUSH
27974: LD_VAR 0 3
27978: PPUSH
27979: LD_INT 10
27981: PPUSH
27982: CALL_OW 237
27986: GO 27966
27988: POP
27989: POP
// end ;
27990: GO 27950
27992: POP
27993: POP
// end ;
27994: LD_VAR 0 1
27998: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27999: LD_INT 0
28001: PPUSH
// uc_side := your_side ;
28002: LD_ADDR_OWVAR 20
28006: PUSH
28007: LD_OWVAR 2
28011: ST_TO_ADDR
// uc_nation := nation ;
28012: LD_ADDR_OWVAR 21
28016: PUSH
28017: LD_VAR 0 1
28021: ST_TO_ADDR
// InitHc ;
28022: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28026: LD_INT 0
28028: PPUSH
28029: LD_VAR 0 2
28033: PPUSH
28034: LD_VAR 0 3
28038: PPUSH
28039: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28043: LD_VAR 0 4
28047: PPUSH
28048: LD_VAR 0 5
28052: PPUSH
28053: CALL_OW 428
28057: PUSH
28058: LD_INT 0
28060: EQUAL
28061: IFFALSE 28085
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28063: CALL_OW 44
28067: PPUSH
28068: LD_VAR 0 4
28072: PPUSH
28073: LD_VAR 0 5
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: CALL_OW 48
// end ;
28085: LD_VAR 0 6
28089: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
// uc_side := your_side ;
28094: LD_ADDR_OWVAR 20
28098: PUSH
28099: LD_OWVAR 2
28103: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28104: LD_VAR 0 1
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 3
28117: PUSH
28118: LD_INT 4
28120: PUSH
28121: LD_INT 5
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: IN
28131: IFFALSE 28143
// uc_nation := nation_american else
28133: LD_ADDR_OWVAR 21
28137: PUSH
28138: LD_INT 1
28140: ST_TO_ADDR
28141: GO 28186
// if chassis in [ 11 , 12 , 13 , 14 ] then
28143: LD_VAR 0 1
28147: PUSH
28148: LD_INT 11
28150: PUSH
28151: LD_INT 12
28153: PUSH
28154: LD_INT 13
28156: PUSH
28157: LD_INT 14
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: IN
28166: IFFALSE 28178
// uc_nation := nation_arabian else
28168: LD_ADDR_OWVAR 21
28172: PUSH
28173: LD_INT 2
28175: ST_TO_ADDR
28176: GO 28186
// uc_nation := nation_russian ;
28178: LD_ADDR_OWVAR 21
28182: PUSH
28183: LD_INT 3
28185: ST_TO_ADDR
// vc_chassis := chassis ;
28186: LD_ADDR_OWVAR 37
28190: PUSH
28191: LD_VAR 0 1
28195: ST_TO_ADDR
// vc_engine := engine ;
28196: LD_ADDR_OWVAR 39
28200: PUSH
28201: LD_VAR 0 2
28205: ST_TO_ADDR
// vc_control := control ;
28206: LD_ADDR_OWVAR 38
28210: PUSH
28211: LD_VAR 0 3
28215: ST_TO_ADDR
// vc_weapon := weapon ;
28216: LD_ADDR_OWVAR 40
28220: PUSH
28221: LD_VAR 0 4
28225: ST_TO_ADDR
// un := CreateVehicle ;
28226: LD_ADDR_VAR 0 8
28230: PUSH
28231: CALL_OW 45
28235: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28236: LD_VAR 0 8
28240: PPUSH
28241: LD_INT 0
28243: PPUSH
28244: LD_INT 5
28246: PPUSH
28247: CALL_OW 12
28251: PPUSH
28252: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28256: LD_VAR 0 8
28260: PPUSH
28261: LD_VAR 0 5
28265: PPUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: LD_INT 1
28273: PPUSH
28274: CALL_OW 48
// end ;
28278: LD_VAR 0 7
28282: RET
// export hInvincible ; every 1 do
28283: GO 28285
28285: DISABLE
// hInvincible := [ ] ;
28286: LD_ADDR_EXP 105
28290: PUSH
28291: EMPTY
28292: ST_TO_ADDR
28293: END
// every 10 do var i ;
28294: GO 28296
28296: DISABLE
28297: LD_INT 0
28299: PPUSH
// begin enable ;
28300: ENABLE
// if not hInvincible then
28301: LD_EXP 105
28305: NOT
28306: IFFALSE 28310
// exit ;
28308: GO 28354
// for i in hInvincible do
28310: LD_ADDR_VAR 0 1
28314: PUSH
28315: LD_EXP 105
28319: PUSH
28320: FOR_IN
28321: IFFALSE 28352
// if GetLives ( i ) < 1000 then
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 256
28332: PUSH
28333: LD_INT 1000
28335: LESS
28336: IFFALSE 28350
// SetLives ( i , 1000 ) ;
28338: LD_VAR 0 1
28342: PPUSH
28343: LD_INT 1000
28345: PPUSH
28346: CALL_OW 234
28350: GO 28320
28352: POP
28353: POP
// end ;
28354: PPOPN 1
28356: END
// export function hHackInvincible ; var i ; begin
28357: LD_INT 0
28359: PPUSH
28360: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28361: LD_ADDR_VAR 0 2
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: LD_INT 21
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 21
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 69
28398: PUSH
28399: FOR_IN
28400: IFFALSE 28461
// if IsSelected ( i ) then
28402: LD_VAR 0 2
28406: PPUSH
28407: CALL_OW 306
28411: IFFALSE 28459
// begin if i in hInvincible then
28413: LD_VAR 0 2
28417: PUSH
28418: LD_EXP 105
28422: IN
28423: IFFALSE 28443
// hInvincible := hInvincible diff i else
28425: LD_ADDR_EXP 105
28429: PUSH
28430: LD_EXP 105
28434: PUSH
28435: LD_VAR 0 2
28439: DIFF
28440: ST_TO_ADDR
28441: GO 28459
// hInvincible := hInvincible union i ;
28443: LD_ADDR_EXP 105
28447: PUSH
28448: LD_EXP 105
28452: PUSH
28453: LD_VAR 0 2
28457: UNION
28458: ST_TO_ADDR
// end ;
28459: GO 28399
28461: POP
28462: POP
// end ;
28463: LD_VAR 0 1
28467: RET
// export function hHackInvisible ; var i , j ; begin
28468: LD_INT 0
28470: PPUSH
28471: PPUSH
28472: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 21
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: PUSH
28493: FOR_IN
28494: IFFALSE 28518
// if IsSelected ( i ) then
28496: LD_VAR 0 2
28500: PPUSH
28501: CALL_OW 306
28505: IFFALSE 28516
// ComForceInvisible ( i ) ;
28507: LD_VAR 0 2
28511: PPUSH
28512: CALL_OW 496
28516: GO 28493
28518: POP
28519: POP
// end ;
28520: LD_VAR 0 1
28524: RET
// export function hHackChangeYourSide ; begin
28525: LD_INT 0
28527: PPUSH
// if your_side = 8 then
28528: LD_OWVAR 2
28532: PUSH
28533: LD_INT 8
28535: EQUAL
28536: IFFALSE 28548
// your_side := 0 else
28538: LD_ADDR_OWVAR 2
28542: PUSH
28543: LD_INT 0
28545: ST_TO_ADDR
28546: GO 28562
// your_side := your_side + 1 ;
28548: LD_ADDR_OWVAR 2
28552: PUSH
28553: LD_OWVAR 2
28557: PUSH
28558: LD_INT 1
28560: PLUS
28561: ST_TO_ADDR
// end ;
28562: LD_VAR 0 1
28566: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28567: LD_INT 0
28569: PPUSH
28570: PPUSH
28571: PPUSH
// for i in all_units do
28572: LD_ADDR_VAR 0 2
28576: PUSH
28577: LD_OWVAR 3
28581: PUSH
28582: FOR_IN
28583: IFFALSE 28661
// if IsSelected ( i ) then
28585: LD_VAR 0 2
28589: PPUSH
28590: CALL_OW 306
28594: IFFALSE 28659
// begin j := GetSide ( i ) ;
28596: LD_ADDR_VAR 0 3
28600: PUSH
28601: LD_VAR 0 2
28605: PPUSH
28606: CALL_OW 255
28610: ST_TO_ADDR
// if j = 8 then
28611: LD_VAR 0 3
28615: PUSH
28616: LD_INT 8
28618: EQUAL
28619: IFFALSE 28631
// j := 0 else
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
28629: GO 28645
// j := j + 1 ;
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_VAR 0 3
28640: PUSH
28641: LD_INT 1
28643: PLUS
28644: ST_TO_ADDR
// SetSide ( i , j ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_VAR 0 3
28654: PPUSH
28655: CALL_OW 235
// end ;
28659: GO 28582
28661: POP
28662: POP
// end ;
28663: LD_VAR 0 1
28667: RET
// export function hHackFog ; begin
28668: LD_INT 0
28670: PPUSH
// FogOff ( true ) ;
28671: LD_INT 1
28673: PPUSH
28674: CALL_OW 344
// end ;
28678: LD_VAR 0 1
28682: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28683: LD_INT 0
28685: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28686: LD_VAR 0 1
28690: PPUSH
28691: LD_VAR 0 2
28695: PPUSH
28696: LD_VAR 0 3
28700: PPUSH
28701: LD_INT 1
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL_OW 483
// CenterOnXY ( x , y ) ;
28711: LD_VAR 0 2
28715: PPUSH
28716: LD_VAR 0 3
28720: PPUSH
28721: CALL_OW 84
// end ; end_of_file end_of_file
28725: LD_VAR 0 4
28729: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
28730: LD_INT 0
28732: PPUSH
// ar_miner := 81 ;
28733: LD_ADDR_EXP 113
28737: PUSH
28738: LD_INT 81
28740: ST_TO_ADDR
// ar_crane := 88 ;
28741: LD_ADDR_EXP 112
28745: PUSH
28746: LD_INT 88
28748: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28749: LD_ADDR_EXP 107
28753: PUSH
28754: LD_INT 89
28756: ST_TO_ADDR
// us_hack := 99 ;
28757: LD_ADDR_EXP 108
28761: PUSH
28762: LD_INT 99
28764: ST_TO_ADDR
// us_artillery := 97 ;
28765: LD_ADDR_EXP 109
28769: PUSH
28770: LD_INT 97
28772: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28773: LD_ADDR_EXP 110
28777: PUSH
28778: LD_INT 91
28780: ST_TO_ADDR
// ar_mortar := 92 ;
28781: LD_ADDR_EXP 111
28785: PUSH
28786: LD_INT 92
28788: ST_TO_ADDR
// ru_radar := 98 ;
28789: LD_ADDR_EXP 106
28793: PUSH
28794: LD_INT 98
28796: ST_TO_ADDR
// tech_Artillery := 80 ;
28797: LD_ADDR_EXP 114
28801: PUSH
28802: LD_INT 80
28804: ST_TO_ADDR
// tech_RadMat := 81 ;
28805: LD_ADDR_EXP 115
28809: PUSH
28810: LD_INT 81
28812: ST_TO_ADDR
// tech_BasicTools := 82 ;
28813: LD_ADDR_EXP 116
28817: PUSH
28818: LD_INT 82
28820: ST_TO_ADDR
// tech_Cargo := 83 ;
28821: LD_ADDR_EXP 117
28825: PUSH
28826: LD_INT 83
28828: ST_TO_ADDR
// tech_Track := 84 ;
28829: LD_ADDR_EXP 118
28833: PUSH
28834: LD_INT 84
28836: ST_TO_ADDR
// tech_Crane := 85 ;
28837: LD_ADDR_EXP 119
28841: PUSH
28842: LD_INT 85
28844: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28845: LD_ADDR_EXP 120
28849: PUSH
28850: LD_INT 86
28852: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28853: LD_ADDR_EXP 121
28857: PUSH
28858: LD_INT 87
28860: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
28861: LD_ADDR_EXP 122
28865: PUSH
28866: LD_INT 88
28868: ST_TO_ADDR
// class_mastodont := 31 ;
28869: LD_ADDR_EXP 123
28873: PUSH
28874: LD_INT 31
28876: ST_TO_ADDR
// class_horse := 21 ;
28877: LD_ADDR_EXP 124
28881: PUSH
28882: LD_INT 21
28884: ST_TO_ADDR
// end ;
28885: LD_VAR 0 1
28889: RET
// every 1 do
28890: GO 28892
28892: DISABLE
// InitGlobalVariables ; end_of_file
28893: CALL 28730 0 0
28897: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28898: LD_INT 0
28900: PPUSH
28901: PPUSH
// if exist_mode then
28902: LD_VAR 0 2
28906: IFFALSE 28931
// unit := CreateCharacter ( prefix & ident ) else
28908: LD_ADDR_VAR 0 5
28912: PUSH
28913: LD_VAR 0 3
28917: PUSH
28918: LD_VAR 0 1
28922: STR
28923: PPUSH
28924: CALL_OW 34
28928: ST_TO_ADDR
28929: GO 28946
// unit := NewCharacter ( ident ) ;
28931: LD_ADDR_VAR 0 5
28935: PUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 25
28945: ST_TO_ADDR
// result := unit ;
28946: LD_ADDR_VAR 0 4
28950: PUSH
28951: LD_VAR 0 5
28955: ST_TO_ADDR
// end ;
28956: LD_VAR 0 4
28960: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
// if not side or not nation then
28965: LD_VAR 0 1
28969: NOT
28970: PUSH
28971: LD_VAR 0 2
28975: NOT
28976: OR
28977: IFFALSE 28981
// exit ;
28979: GO 29749
// case nation of nation_american :
28981: LD_VAR 0 2
28985: PUSH
28986: LD_INT 1
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29208
28994: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28995: LD_ADDR_VAR 0 4
28999: PUSH
29000: LD_INT 35
29002: PUSH
29003: LD_INT 45
29005: PUSH
29006: LD_INT 46
29008: PUSH
29009: LD_INT 47
29011: PUSH
29012: LD_INT 82
29014: PUSH
29015: LD_INT 83
29017: PUSH
29018: LD_INT 84
29020: PUSH
29021: LD_INT 85
29023: PUSH
29024: LD_INT 86
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 6
29035: PUSH
29036: LD_INT 15
29038: PUSH
29039: LD_INT 16
29041: PUSH
29042: LD_INT 7
29044: PUSH
29045: LD_INT 12
29047: PUSH
29048: LD_INT 13
29050: PUSH
29051: LD_INT 10
29053: PUSH
29054: LD_INT 14
29056: PUSH
29057: LD_INT 20
29059: PUSH
29060: LD_INT 21
29062: PUSH
29063: LD_INT 22
29065: PUSH
29066: LD_INT 25
29068: PUSH
29069: LD_INT 32
29071: PUSH
29072: LD_INT 27
29074: PUSH
29075: LD_INT 36
29077: PUSH
29078: LD_INT 69
29080: PUSH
29081: LD_INT 39
29083: PUSH
29084: LD_INT 34
29086: PUSH
29087: LD_INT 40
29089: PUSH
29090: LD_INT 48
29092: PUSH
29093: LD_INT 49
29095: PUSH
29096: LD_INT 50
29098: PUSH
29099: LD_INT 51
29101: PUSH
29102: LD_INT 52
29104: PUSH
29105: LD_INT 53
29107: PUSH
29108: LD_INT 54
29110: PUSH
29111: LD_INT 55
29113: PUSH
29114: LD_INT 56
29116: PUSH
29117: LD_INT 57
29119: PUSH
29120: LD_INT 58
29122: PUSH
29123: LD_INT 59
29125: PUSH
29126: LD_INT 60
29128: PUSH
29129: LD_INT 61
29131: PUSH
29132: LD_INT 62
29134: PUSH
29135: LD_INT 80
29137: PUSH
29138: LD_INT 82
29140: PUSH
29141: LD_INT 83
29143: PUSH
29144: LD_INT 84
29146: PUSH
29147: LD_INT 85
29149: PUSH
29150: LD_INT 86
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: ST_TO_ADDR
29206: GO 29673
29208: LD_INT 2
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29442
29216: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29217: LD_ADDR_VAR 0 4
29221: PUSH
29222: LD_INT 35
29224: PUSH
29225: LD_INT 45
29227: PUSH
29228: LD_INT 46
29230: PUSH
29231: LD_INT 47
29233: PUSH
29234: LD_INT 82
29236: PUSH
29237: LD_INT 83
29239: PUSH
29240: LD_INT 84
29242: PUSH
29243: LD_INT 85
29245: PUSH
29246: LD_INT 87
29248: PUSH
29249: LD_INT 70
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 11
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: LD_INT 4
29263: PUSH
29264: LD_INT 5
29266: PUSH
29267: LD_INT 6
29269: PUSH
29270: LD_INT 15
29272: PUSH
29273: LD_INT 18
29275: PUSH
29276: LD_INT 7
29278: PUSH
29279: LD_INT 17
29281: PUSH
29282: LD_INT 8
29284: PUSH
29285: LD_INT 20
29287: PUSH
29288: LD_INT 21
29290: PUSH
29291: LD_INT 22
29293: PUSH
29294: LD_INT 72
29296: PUSH
29297: LD_INT 26
29299: PUSH
29300: LD_INT 69
29302: PUSH
29303: LD_INT 39
29305: PUSH
29306: LD_INT 40
29308: PUSH
29309: LD_INT 41
29311: PUSH
29312: LD_INT 42
29314: PUSH
29315: LD_INT 43
29317: PUSH
29318: LD_INT 48
29320: PUSH
29321: LD_INT 49
29323: PUSH
29324: LD_INT 50
29326: PUSH
29327: LD_INT 51
29329: PUSH
29330: LD_INT 52
29332: PUSH
29333: LD_INT 53
29335: PUSH
29336: LD_INT 54
29338: PUSH
29339: LD_INT 55
29341: PUSH
29342: LD_INT 56
29344: PUSH
29345: LD_INT 60
29347: PUSH
29348: LD_INT 61
29350: PUSH
29351: LD_INT 62
29353: PUSH
29354: LD_INT 66
29356: PUSH
29357: LD_INT 67
29359: PUSH
29360: LD_INT 68
29362: PUSH
29363: LD_INT 81
29365: PUSH
29366: LD_INT 82
29368: PUSH
29369: LD_INT 83
29371: PUSH
29372: LD_INT 84
29374: PUSH
29375: LD_INT 85
29377: PUSH
29378: LD_INT 87
29380: PUSH
29381: LD_INT 88
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
29440: GO 29673
29442: LD_INT 3
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29672
29450: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29451: LD_ADDR_VAR 0 4
29455: PUSH
29456: LD_INT 46
29458: PUSH
29459: LD_INT 47
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 82
29470: PUSH
29471: LD_INT 83
29473: PUSH
29474: LD_INT 84
29476: PUSH
29477: LD_INT 85
29479: PUSH
29480: LD_INT 86
29482: PUSH
29483: LD_INT 11
29485: PUSH
29486: LD_INT 9
29488: PUSH
29489: LD_INT 20
29491: PUSH
29492: LD_INT 19
29494: PUSH
29495: LD_INT 21
29497: PUSH
29498: LD_INT 24
29500: PUSH
29501: LD_INT 22
29503: PUSH
29504: LD_INT 25
29506: PUSH
29507: LD_INT 28
29509: PUSH
29510: LD_INT 29
29512: PUSH
29513: LD_INT 30
29515: PUSH
29516: LD_INT 31
29518: PUSH
29519: LD_INT 37
29521: PUSH
29522: LD_INT 38
29524: PUSH
29525: LD_INT 32
29527: PUSH
29528: LD_INT 27
29530: PUSH
29531: LD_INT 33
29533: PUSH
29534: LD_INT 69
29536: PUSH
29537: LD_INT 39
29539: PUSH
29540: LD_INT 34
29542: PUSH
29543: LD_INT 40
29545: PUSH
29546: LD_INT 71
29548: PUSH
29549: LD_INT 23
29551: PUSH
29552: LD_INT 44
29554: PUSH
29555: LD_INT 48
29557: PUSH
29558: LD_INT 49
29560: PUSH
29561: LD_INT 50
29563: PUSH
29564: LD_INT 51
29566: PUSH
29567: LD_INT 52
29569: PUSH
29570: LD_INT 53
29572: PUSH
29573: LD_INT 54
29575: PUSH
29576: LD_INT 55
29578: PUSH
29579: LD_INT 56
29581: PUSH
29582: LD_INT 57
29584: PUSH
29585: LD_INT 58
29587: PUSH
29588: LD_INT 59
29590: PUSH
29591: LD_INT 63
29593: PUSH
29594: LD_INT 64
29596: PUSH
29597: LD_INT 65
29599: PUSH
29600: LD_INT 82
29602: PUSH
29603: LD_INT 83
29605: PUSH
29606: LD_INT 84
29608: PUSH
29609: LD_INT 85
29611: PUSH
29612: LD_INT 86
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
29670: GO 29673
29672: POP
// if state > - 1 and state < 3 then
29673: LD_VAR 0 3
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: GREATER
29682: PUSH
29683: LD_VAR 0 3
29687: PUSH
29688: LD_INT 3
29690: LESS
29691: AND
29692: IFFALSE 29749
// for i in result do
29694: LD_ADDR_VAR 0 5
29698: PUSH
29699: LD_VAR 0 4
29703: PUSH
29704: FOR_IN
29705: IFFALSE 29747
// if GetTech ( i , side ) <> state then
29707: LD_VAR 0 5
29711: PPUSH
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 321
29721: PUSH
29722: LD_VAR 0 3
29726: NONEQUAL
29727: IFFALSE 29745
// result := result diff i ;
29729: LD_ADDR_VAR 0 4
29733: PUSH
29734: LD_VAR 0 4
29738: PUSH
29739: LD_VAR 0 5
29743: DIFF
29744: ST_TO_ADDR
29745: GO 29704
29747: POP
29748: POP
// end ;
29749: LD_VAR 0 4
29753: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29754: LD_INT 0
29756: PPUSH
29757: PPUSH
29758: PPUSH
// result := true ;
29759: LD_ADDR_VAR 0 3
29763: PUSH
29764: LD_INT 1
29766: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29767: LD_ADDR_VAR 0 5
29771: PUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: CALL_OW 480
29781: ST_TO_ADDR
// if not tmp then
29782: LD_VAR 0 5
29786: NOT
29787: IFFALSE 29791
// exit ;
29789: GO 29840
// for i in tmp do
29791: LD_ADDR_VAR 0 4
29795: PUSH
29796: LD_VAR 0 5
29800: PUSH
29801: FOR_IN
29802: IFFALSE 29838
// if GetTech ( i , side ) <> state_researched then
29804: LD_VAR 0 4
29808: PPUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 321
29818: PUSH
29819: LD_INT 2
29821: NONEQUAL
29822: IFFALSE 29836
// begin result := false ;
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 0
29831: ST_TO_ADDR
// exit ;
29832: POP
29833: POP
29834: GO 29840
// end ;
29836: GO 29801
29838: POP
29839: POP
// end ;
29840: LD_VAR 0 3
29844: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29860: LD_VAR 0 1
29864: NOT
29865: PUSH
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 257
29875: PUSH
29876: LD_INT 9
29878: NONEQUAL
29879: OR
29880: IFFALSE 29884
// exit ;
29882: GO 30457
// side := GetSide ( unit ) ;
29884: LD_ADDR_VAR 0 9
29888: PUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 255
29898: ST_TO_ADDR
// tech_space := tech_spacanom ;
29899: LD_ADDR_VAR 0 12
29903: PUSH
29904: LD_INT 29
29906: ST_TO_ADDR
// tech_time := tech_taurad ;
29907: LD_ADDR_VAR 0 13
29911: PUSH
29912: LD_INT 28
29914: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29915: LD_ADDR_VAR 0 11
29919: PUSH
29920: LD_VAR 0 1
29924: PPUSH
29925: CALL_OW 310
29929: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29930: LD_VAR 0 11
29934: PPUSH
29935: CALL_OW 247
29939: PUSH
29940: LD_INT 2
29942: EQUAL
29943: IFFALSE 29947
// exit ;
29945: GO 30457
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29947: LD_ADDR_VAR 0 8
29951: PUSH
29952: LD_INT 81
29954: PUSH
29955: LD_VAR 0 9
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: LD_INT 21
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: ST_TO_ADDR
// if not tmp then
29990: LD_VAR 0 8
29994: NOT
29995: IFFALSE 29999
// exit ;
29997: GO 30457
// if in_unit then
29999: LD_VAR 0 11
30003: IFFALSE 30027
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30005: LD_ADDR_VAR 0 10
30009: PUSH
30010: LD_VAR 0 8
30014: PPUSH
30015: LD_VAR 0 11
30019: PPUSH
30020: CALL_OW 74
30024: ST_TO_ADDR
30025: GO 30047
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30027: LD_ADDR_VAR 0 10
30031: PUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 74
30046: ST_TO_ADDR
// if not enemy then
30047: LD_VAR 0 10
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30457
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30056: LD_VAR 0 11
30060: PUSH
30061: LD_VAR 0 11
30065: PPUSH
30066: LD_VAR 0 10
30070: PPUSH
30071: CALL_OW 296
30075: PUSH
30076: LD_INT 13
30078: GREATER
30079: AND
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: LD_VAR 0 10
30090: PPUSH
30091: CALL_OW 296
30095: PUSH
30096: LD_INT 12
30098: GREATER
30099: OR
30100: IFFALSE 30104
// exit ;
30102: GO 30457
// missile := [ 1 ] ;
30104: LD_ADDR_VAR 0 14
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30115: LD_VAR 0 9
30119: PPUSH
30120: LD_VAR 0 12
30124: PPUSH
30125: CALL_OW 325
30129: IFFALSE 30158
// missile := Insert ( missile , missile + 1 , 2 ) ;
30131: LD_ADDR_VAR 0 14
30135: PUSH
30136: LD_VAR 0 14
30140: PPUSH
30141: LD_VAR 0 14
30145: PUSH
30146: LD_INT 1
30148: PLUS
30149: PPUSH
30150: LD_INT 2
30152: PPUSH
30153: CALL_OW 2
30157: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30158: LD_VAR 0 9
30162: PPUSH
30163: LD_VAR 0 13
30167: PPUSH
30168: CALL_OW 325
30172: PUSH
30173: LD_VAR 0 10
30177: PPUSH
30178: CALL_OW 255
30182: PPUSH
30183: LD_VAR 0 13
30187: PPUSH
30188: CALL_OW 325
30192: NOT
30193: AND
30194: IFFALSE 30223
// missile := Insert ( missile , missile + 1 , 3 ) ;
30196: LD_ADDR_VAR 0 14
30200: PUSH
30201: LD_VAR 0 14
30205: PPUSH
30206: LD_VAR 0 14
30210: PUSH
30211: LD_INT 1
30213: PLUS
30214: PPUSH
30215: LD_INT 3
30217: PPUSH
30218: CALL_OW 2
30222: ST_TO_ADDR
// if missile < 2 then
30223: LD_VAR 0 14
30227: PUSH
30228: LD_INT 2
30230: LESS
30231: IFFALSE 30235
// exit ;
30233: GO 30457
// x := GetX ( enemy ) ;
30235: LD_ADDR_VAR 0 4
30239: PUSH
30240: LD_VAR 0 10
30244: PPUSH
30245: CALL_OW 250
30249: ST_TO_ADDR
// y := GetY ( enemy ) ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_VAR 0 10
30259: PPUSH
30260: CALL_OW 251
30264: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30265: LD_ADDR_VAR 0 6
30269: PUSH
30270: LD_VAR 0 4
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PPUSH
30279: LD_INT 1
30281: PPUSH
30282: CALL_OW 12
30286: PLUS
30287: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30288: LD_ADDR_VAR 0 7
30292: PUSH
30293: LD_VAR 0 5
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: CALL_OW 12
30309: PLUS
30310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30311: LD_VAR 0 6
30315: PPUSH
30316: LD_VAR 0 7
30320: PPUSH
30321: CALL_OW 488
30325: NOT
30326: IFFALSE 30348
// begin _x := x ;
30328: LD_ADDR_VAR 0 6
30332: PUSH
30333: LD_VAR 0 4
30337: ST_TO_ADDR
// _y := y ;
30338: LD_ADDR_VAR 0 7
30342: PUSH
30343: LD_VAR 0 5
30347: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_INT 1
30355: PPUSH
30356: LD_VAR 0 14
30360: PPUSH
30361: CALL_OW 12
30365: ST_TO_ADDR
// case i of 1 :
30366: LD_VAR 0 3
30370: PUSH
30371: LD_INT 1
30373: DOUBLE
30374: EQUAL
30375: IFTRUE 30379
30377: GO 30396
30379: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30380: LD_VAR 0 1
30384: PPUSH
30385: LD_VAR 0 10
30389: PPUSH
30390: CALL_OW 115
30394: GO 30457
30396: LD_INT 2
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30426
30404: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30405: LD_VAR 0 1
30409: PPUSH
30410: LD_VAR 0 6
30414: PPUSH
30415: LD_VAR 0 7
30419: PPUSH
30420: CALL_OW 153
30424: GO 30457
30426: LD_INT 3
30428: DOUBLE
30429: EQUAL
30430: IFTRUE 30434
30432: GO 30456
30434: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30435: LD_VAR 0 1
30439: PPUSH
30440: LD_VAR 0 6
30444: PPUSH
30445: LD_VAR 0 7
30449: PPUSH
30450: CALL_OW 154
30454: GO 30457
30456: POP
// end ;
30457: LD_VAR 0 2
30461: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30462: LD_INT 0
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
// if not unit or not building then
30470: LD_VAR 0 1
30474: NOT
30475: PUSH
30476: LD_VAR 0 2
30480: NOT
30481: OR
30482: IFFALSE 30486
// exit ;
30484: GO 30644
// x := GetX ( building ) ;
30486: LD_ADDR_VAR 0 5
30490: PUSH
30491: LD_VAR 0 2
30495: PPUSH
30496: CALL_OW 250
30500: ST_TO_ADDR
// y := GetY ( building ) ;
30501: LD_ADDR_VAR 0 6
30505: PUSH
30506: LD_VAR 0 2
30510: PPUSH
30511: CALL_OW 251
30515: ST_TO_ADDR
// for i = 0 to 5 do
30516: LD_ADDR_VAR 0 4
30520: PUSH
30521: DOUBLE
30522: LD_INT 0
30524: DEC
30525: ST_TO_ADDR
30526: LD_INT 5
30528: PUSH
30529: FOR_TO
30530: IFFALSE 30642
// begin _x := ShiftX ( x , i , 3 ) ;
30532: LD_ADDR_VAR 0 7
30536: PUSH
30537: LD_VAR 0 5
30541: PPUSH
30542: LD_VAR 0 4
30546: PPUSH
30547: LD_INT 3
30549: PPUSH
30550: CALL_OW 272
30554: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30555: LD_ADDR_VAR 0 8
30559: PUSH
30560: LD_VAR 0 6
30564: PPUSH
30565: LD_VAR 0 4
30569: PPUSH
30570: LD_INT 3
30572: PPUSH
30573: CALL_OW 273
30577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30578: LD_VAR 0 7
30582: PPUSH
30583: LD_VAR 0 8
30587: PPUSH
30588: CALL_OW 488
30592: NOT
30593: IFFALSE 30597
// continue ;
30595: GO 30529
// if HexInfo ( _x , _y ) = 0 then
30597: LD_VAR 0 7
30601: PPUSH
30602: LD_VAR 0 8
30606: PPUSH
30607: CALL_OW 428
30611: PUSH
30612: LD_INT 0
30614: EQUAL
30615: IFFALSE 30640
// begin ComMoveXY ( unit , _x , _y ) ;
30617: LD_VAR 0 1
30621: PPUSH
30622: LD_VAR 0 7
30626: PPUSH
30627: LD_VAR 0 8
30631: PPUSH
30632: CALL_OW 111
// exit ;
30636: POP
30637: POP
30638: GO 30644
// end ; end ;
30640: GO 30529
30642: POP
30643: POP
// end ;
30644: LD_VAR 0 3
30648: RET
// export function ScanBase ( side , base_area ) ; begin
30649: LD_INT 0
30651: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30652: LD_ADDR_VAR 0 3
30656: PUSH
30657: LD_VAR 0 2
30661: PPUSH
30662: LD_INT 81
30664: PUSH
30665: LD_VAR 0 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PPUSH
30674: CALL_OW 70
30678: ST_TO_ADDR
// end ;
30679: LD_VAR 0 3
30683: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30684: LD_INT 0
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
// result := false ;
30690: LD_ADDR_VAR 0 2
30694: PUSH
30695: LD_INT 0
30697: ST_TO_ADDR
// side := GetSide ( unit ) ;
30698: LD_ADDR_VAR 0 3
30702: PUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 255
30712: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30713: LD_ADDR_VAR 0 4
30717: PUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 248
30727: ST_TO_ADDR
// case nat of 1 :
30728: LD_VAR 0 4
30732: PUSH
30733: LD_INT 1
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30752
30741: POP
// tech := tech_lassight ; 2 :
30742: LD_ADDR_VAR 0 5
30746: PUSH
30747: LD_INT 12
30749: ST_TO_ADDR
30750: GO 30791
30752: LD_INT 2
30754: DOUBLE
30755: EQUAL
30756: IFTRUE 30760
30758: GO 30771
30760: POP
// tech := tech_mortar ; 3 :
30761: LD_ADDR_VAR 0 5
30765: PUSH
30766: LD_INT 41
30768: ST_TO_ADDR
30769: GO 30791
30771: LD_INT 3
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30790
30779: POP
// tech := tech_bazooka ; end ;
30780: LD_ADDR_VAR 0 5
30784: PUSH
30785: LD_INT 44
30787: ST_TO_ADDR
30788: GO 30791
30790: POP
// if Researched ( side , tech ) then
30791: LD_VAR 0 3
30795: PPUSH
30796: LD_VAR 0 5
30800: PPUSH
30801: CALL_OW 325
30805: IFFALSE 30832
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30807: LD_ADDR_VAR 0 2
30811: PUSH
30812: LD_INT 5
30814: PUSH
30815: LD_INT 8
30817: PUSH
30818: LD_INT 9
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: PUSH
30826: LD_VAR 0 4
30830: ARRAY
30831: ST_TO_ADDR
// end ;
30832: LD_VAR 0 2
30836: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
30841: PPUSH
// if not mines then
30842: LD_VAR 0 2
30846: NOT
30847: IFFALSE 30851
// exit ;
30849: GO 30995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30851: LD_ADDR_VAR 0 5
30855: PUSH
30856: LD_INT 81
30858: PUSH
30859: LD_VAR 0 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 21
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PPUSH
30889: CALL_OW 69
30893: ST_TO_ADDR
// for i in mines do
30894: LD_ADDR_VAR 0 4
30898: PUSH
30899: LD_VAR 0 2
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30993
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30907: LD_VAR 0 4
30911: PUSH
30912: LD_INT 1
30914: ARRAY
30915: PPUSH
30916: LD_VAR 0 4
30920: PUSH
30921: LD_INT 2
30923: ARRAY
30924: PPUSH
30925: CALL_OW 458
30929: NOT
30930: IFFALSE 30934
// continue ;
30932: GO 30904
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30934: LD_VAR 0 4
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PPUSH
30943: LD_VAR 0 4
30947: PUSH
30948: LD_INT 2
30950: ARRAY
30951: PPUSH
30952: CALL_OW 428
30956: PUSH
30957: LD_VAR 0 5
30961: IN
30962: IFFALSE 30991
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30964: LD_VAR 0 4
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: LD_VAR 0 4
30977: PUSH
30978: LD_INT 2
30980: ARRAY
30981: PPUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 456
// end ;
30991: GO 30904
30993: POP
30994: POP
// end ;
30995: LD_VAR 0 3
30999: RET
// export function Count ( array ) ; var i ; begin
31000: LD_INT 0
31002: PPUSH
31003: PPUSH
// result := 0 ;
31004: LD_ADDR_VAR 0 2
31008: PUSH
31009: LD_INT 0
31011: ST_TO_ADDR
// for i in array do
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_VAR 0 1
31021: PUSH
31022: FOR_IN
31023: IFFALSE 31047
// if i then
31025: LD_VAR 0 3
31029: IFFALSE 31045
// result := result + 1 ;
31031: LD_ADDR_VAR 0 2
31035: PUSH
31036: LD_VAR 0 2
31040: PUSH
31041: LD_INT 1
31043: PLUS
31044: ST_TO_ADDR
31045: GO 31022
31047: POP
31048: POP
// end ;
31049: LD_VAR 0 2
31053: RET
// export function IsEmpty ( building ) ; begin
31054: LD_INT 0
31056: PPUSH
// if not building then
31057: LD_VAR 0 1
31061: NOT
31062: IFFALSE 31066
// exit ;
31064: GO 31109
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31066: LD_ADDR_VAR 0 2
31070: PUSH
31071: LD_VAR 0 1
31075: PUSH
31076: LD_INT 22
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 255
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 58
31095: PUSH
31096: EMPTY
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PPUSH
31103: CALL_OW 69
31107: IN
31108: ST_TO_ADDR
// end ;
31109: LD_VAR 0 2
31113: RET
// export function IsNotFull ( building ) ; begin
31114: LD_INT 0
31116: PPUSH
// if not building then
31117: LD_VAR 0 1
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31145
// result := UnitsInside ( building ) < 6 ;
31126: LD_ADDR_VAR 0 2
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 313
31140: PUSH
31141: LD_INT 6
31143: LESS
31144: ST_TO_ADDR
// end ;
31145: LD_VAR 0 2
31149: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31150: LD_INT 0
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
// tmp := [ ] ;
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: EMPTY
31162: ST_TO_ADDR
// list := [ ] ;
31163: LD_ADDR_VAR 0 5
31167: PUSH
31168: EMPTY
31169: ST_TO_ADDR
// for i = 16 to 25 do
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: DOUBLE
31176: LD_INT 16
31178: DEC
31179: ST_TO_ADDR
31180: LD_INT 25
31182: PUSH
31183: FOR_TO
31184: IFFALSE 31257
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_VAR 0 3
31195: PUSH
31196: LD_INT 22
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 255
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 91
31215: PUSH
31216: LD_VAR 0 1
31220: PUSH
31221: LD_INT 6
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 30
31231: PUSH
31232: LD_VAR 0 4
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: PPUSH
31249: CALL_OW 69
31253: ADD
31254: ST_TO_ADDR
31255: GO 31183
31257: POP
31258: POP
// for i = 1 to tmp do
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: DOUBLE
31265: LD_INT 1
31267: DEC
31268: ST_TO_ADDR
31269: LD_VAR 0 3
31273: PUSH
31274: FOR_TO
31275: IFFALSE 31363
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31277: LD_ADDR_VAR 0 5
31281: PUSH
31282: LD_VAR 0 5
31286: PUSH
31287: LD_VAR 0 3
31291: PUSH
31292: LD_VAR 0 4
31296: ARRAY
31297: PPUSH
31298: CALL_OW 266
31302: PUSH
31303: LD_VAR 0 3
31307: PUSH
31308: LD_VAR 0 4
31312: ARRAY
31313: PPUSH
31314: CALL_OW 250
31318: PUSH
31319: LD_VAR 0 3
31323: PUSH
31324: LD_VAR 0 4
31328: ARRAY
31329: PPUSH
31330: CALL_OW 251
31334: PUSH
31335: LD_VAR 0 3
31339: PUSH
31340: LD_VAR 0 4
31344: ARRAY
31345: PPUSH
31346: CALL_OW 254
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: ADD
31360: ST_TO_ADDR
31361: GO 31274
31363: POP
31364: POP
// result := list ;
31365: LD_ADDR_VAR 0 2
31369: PUSH
31370: LD_VAR 0 5
31374: ST_TO_ADDR
// end ;
31375: LD_VAR 0 2
31379: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31380: LD_INT 0
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
31387: PPUSH
31388: PPUSH
// if not factory then
31389: LD_VAR 0 1
31393: NOT
31394: IFFALSE 31398
// exit ;
31396: GO 31991
// if control = control_apeman then
31398: LD_VAR 0 4
31402: PUSH
31403: LD_INT 5
31405: EQUAL
31406: IFFALSE 31515
// begin tmp := UnitsInside ( factory ) ;
31408: LD_ADDR_VAR 0 8
31412: PUSH
31413: LD_VAR 0 1
31417: PPUSH
31418: CALL_OW 313
31422: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31423: LD_VAR 0 8
31427: PPUSH
31428: LD_INT 25
31430: PUSH
31431: LD_INT 12
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PPUSH
31438: CALL_OW 72
31442: NOT
31443: IFFALSE 31453
// control := control_manual ;
31445: LD_ADDR_VAR 0 4
31449: PUSH
31450: LD_INT 1
31452: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31453: LD_ADDR_VAR 0 8
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL 31150 0 1
31467: ST_TO_ADDR
// if tmp then
31468: LD_VAR 0 8
31472: IFFALSE 31515
// begin for i in tmp do
31474: LD_ADDR_VAR 0 7
31478: PUSH
31479: LD_VAR 0 8
31483: PUSH
31484: FOR_IN
31485: IFFALSE 31513
// if i [ 1 ] = b_ext_radio then
31487: LD_VAR 0 7
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: PUSH
31496: LD_INT 22
31498: EQUAL
31499: IFFALSE 31511
// begin control := control_remote ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_INT 2
31508: ST_TO_ADDR
// break ;
31509: GO 31513
// end ;
31511: GO 31484
31513: POP
31514: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31515: LD_VAR 0 1
31519: PPUSH
31520: LD_VAR 0 2
31524: PPUSH
31525: LD_VAR 0 3
31529: PPUSH
31530: LD_VAR 0 4
31534: PPUSH
31535: LD_VAR 0 5
31539: PPUSH
31540: CALL_OW 448
31544: IFFALSE 31579
// begin result := [ chassis , engine , control , weapon ] ;
31546: LD_ADDR_VAR 0 6
31550: PUSH
31551: LD_VAR 0 2
31555: PUSH
31556: LD_VAR 0 3
31560: PUSH
31561: LD_VAR 0 4
31565: PUSH
31566: LD_VAR 0 5
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: ST_TO_ADDR
// exit ;
31577: GO 31991
// end ; _chassis := AvailableChassisList ( factory ) ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_VAR 0 1
31588: PPUSH
31589: CALL_OW 475
31593: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31594: LD_ADDR_VAR 0 11
31598: PUSH
31599: LD_VAR 0 1
31603: PPUSH
31604: CALL_OW 476
31608: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31609: LD_ADDR_VAR 0 12
31613: PUSH
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 477
31623: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31624: LD_ADDR_VAR 0 10
31628: PUSH
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 478
31638: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31639: LD_VAR 0 9
31643: NOT
31644: PUSH
31645: LD_VAR 0 11
31649: NOT
31650: OR
31651: PUSH
31652: LD_VAR 0 12
31656: NOT
31657: OR
31658: PUSH
31659: LD_VAR 0 10
31663: NOT
31664: OR
31665: IFFALSE 31700
// begin result := [ chassis , engine , control , weapon ] ;
31667: LD_ADDR_VAR 0 6
31671: PUSH
31672: LD_VAR 0 2
31676: PUSH
31677: LD_VAR 0 3
31681: PUSH
31682: LD_VAR 0 4
31686: PUSH
31687: LD_VAR 0 5
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: ST_TO_ADDR
// exit ;
31698: GO 31991
// end ; if not chassis in _chassis then
31700: LD_VAR 0 2
31704: PUSH
31705: LD_VAR 0 9
31709: IN
31710: NOT
31711: IFFALSE 31737
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31713: LD_ADDR_VAR 0 2
31717: PUSH
31718: LD_VAR 0 9
31722: PUSH
31723: LD_INT 1
31725: PPUSH
31726: LD_VAR 0 9
31730: PPUSH
31731: CALL_OW 12
31735: ARRAY
31736: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31737: LD_VAR 0 2
31741: PPUSH
31742: LD_VAR 0 3
31746: PPUSH
31747: CALL 31996 0 2
31751: NOT
31752: IFFALSE 31811
// repeat engine := _engine [ 1 ] ;
31754: LD_ADDR_VAR 0 3
31758: PUSH
31759: LD_VAR 0 11
31763: PUSH
31764: LD_INT 1
31766: ARRAY
31767: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31768: LD_ADDR_VAR 0 11
31772: PUSH
31773: LD_VAR 0 11
31777: PPUSH
31778: LD_INT 1
31780: PPUSH
31781: CALL_OW 3
31785: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31786: LD_VAR 0 2
31790: PPUSH
31791: LD_VAR 0 3
31795: PPUSH
31796: CALL 31996 0 2
31800: PUSH
31801: LD_VAR 0 11
31805: PUSH
31806: EMPTY
31807: EQUAL
31808: OR
31809: IFFALSE 31754
// if not control in _control then
31811: LD_VAR 0 4
31815: PUSH
31816: LD_VAR 0 12
31820: IN
31821: NOT
31822: IFFALSE 31848
// control := _control [ rand ( 1 , _control ) ] ;
31824: LD_ADDR_VAR 0 4
31828: PUSH
31829: LD_VAR 0 12
31833: PUSH
31834: LD_INT 1
31836: PPUSH
31837: LD_VAR 0 12
31841: PPUSH
31842: CALL_OW 12
31846: ARRAY
31847: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31848: LD_VAR 0 2
31852: PPUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: CALL 32216 0 2
31862: NOT
31863: IFFALSE 31922
// repeat weapon := _weapon [ 1 ] ;
31865: LD_ADDR_VAR 0 5
31869: PUSH
31870: LD_VAR 0 10
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31879: LD_ADDR_VAR 0 10
31883: PUSH
31884: LD_VAR 0 10
31888: PPUSH
31889: LD_INT 1
31891: PPUSH
31892: CALL_OW 3
31896: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31897: LD_VAR 0 2
31901: PPUSH
31902: LD_VAR 0 5
31906: PPUSH
31907: CALL 32216 0 2
31911: PUSH
31912: LD_VAR 0 10
31916: PUSH
31917: EMPTY
31918: EQUAL
31919: OR
31920: IFFALSE 31865
// result := [ ] ;
31922: LD_ADDR_VAR 0 6
31926: PUSH
31927: EMPTY
31928: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31929: LD_VAR 0 1
31933: PPUSH
31934: LD_VAR 0 2
31938: PPUSH
31939: LD_VAR 0 3
31943: PPUSH
31944: LD_VAR 0 4
31948: PPUSH
31949: LD_VAR 0 5
31953: PPUSH
31954: CALL_OW 448
31958: IFFALSE 31991
// result := [ chassis , engine , control , weapon ] ;
31960: LD_ADDR_VAR 0 6
31964: PUSH
31965: LD_VAR 0 2
31969: PUSH
31970: LD_VAR 0 3
31974: PUSH
31975: LD_VAR 0 4
31979: PUSH
31980: LD_VAR 0 5
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// end ;
31991: LD_VAR 0 6
31995: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31996: LD_INT 0
31998: PPUSH
// if not chassis or not engine then
31999: LD_VAR 0 1
32003: NOT
32004: PUSH
32005: LD_VAR 0 2
32009: NOT
32010: OR
32011: IFFALSE 32015
// exit ;
32013: GO 32211
// case engine of engine_solar :
32015: LD_VAR 0 2
32019: PUSH
32020: LD_INT 2
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32066
32028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 11
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 13
32042: PUSH
32043: LD_INT 14
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 3
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
32064: GO 32195
32066: LD_INT 1
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32136
32074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32075: LD_ADDR_VAR 0 3
32079: PUSH
32080: LD_INT 11
32082: PUSH
32083: LD_INT 12
32085: PUSH
32086: LD_INT 13
32088: PUSH
32089: LD_INT 14
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 4
32103: PUSH
32104: LD_INT 5
32106: PUSH
32107: LD_INT 21
32109: PUSH
32110: LD_INT 23
32112: PUSH
32113: LD_INT 22
32115: PUSH
32116: LD_INT 24
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
32134: GO 32195
32136: LD_INT 3
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32194
32144: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32145: LD_ADDR_VAR 0 3
32149: PUSH
32150: LD_INT 13
32152: PUSH
32153: LD_INT 14
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: LD_INT 4
32164: PUSH
32165: LD_INT 5
32167: PUSH
32168: LD_INT 21
32170: PUSH
32171: LD_INT 22
32173: PUSH
32174: LD_INT 23
32176: PUSH
32177: LD_INT 24
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
32192: GO 32195
32194: POP
// result := ( chassis in result ) ;
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_VAR 0 1
32204: PUSH
32205: LD_VAR 0 3
32209: IN
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 3
32215: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32216: LD_INT 0
32218: PPUSH
// if not chassis or not weapon then
32219: LD_VAR 0 1
32223: NOT
32224: PUSH
32225: LD_VAR 0 2
32229: NOT
32230: OR
32231: IFFALSE 32235
// exit ;
32233: GO 33297
// case weapon of us_machine_gun :
32235: LD_VAR 0 2
32239: PUSH
32240: LD_INT 2
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32248
32246: GO 32278
32248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32249: LD_ADDR_VAR 0 3
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
32276: GO 33281
32278: LD_INT 3
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32316
32286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32287: LD_ADDR_VAR 0 3
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 4
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
32314: GO 33281
32316: LD_INT 11
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32354
32324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32325: LD_ADDR_VAR 0 3
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: LD_INT 5
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: ST_TO_ADDR
32352: GO 33281
32354: LD_INT 4
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32388
32362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 4
32376: PUSH
32377: LD_INT 5
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
32386: GO 33281
32388: LD_INT 5
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32422
32396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: LD_INT 4
32410: PUSH
32411: LD_INT 5
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
32420: GO 33281
32422: LD_INT 9
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32456
32430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32431: LD_ADDR_VAR 0 3
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: LD_INT 4
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
32454: GO 33281
32456: LD_INT 7
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32464
32462: GO 32490
32464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32465: LD_ADDR_VAR 0 3
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 4
32478: PUSH
32479: LD_INT 5
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: ST_TO_ADDR
32488: GO 33281
32490: LD_INT 12
32492: DOUBLE
32493: EQUAL
32494: IFTRUE 32498
32496: GO 32524
32498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32499: LD_ADDR_VAR 0 3
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: LD_INT 5
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: ST_TO_ADDR
32522: GO 33281
32524: LD_INT 13
32526: DOUBLE
32527: EQUAL
32528: IFTRUE 32532
32530: GO 32558
32532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32533: LD_ADDR_VAR 0 3
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 3
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: LD_INT 5
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: ST_TO_ADDR
32556: GO 33281
32558: LD_INT 14
32560: DOUBLE
32561: EQUAL
32562: IFTRUE 32566
32564: GO 32584
32566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32567: LD_ADDR_VAR 0 3
32571: PUSH
32572: LD_INT 4
32574: PUSH
32575: LD_INT 5
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: ST_TO_ADDR
32582: GO 33281
32584: LD_INT 6
32586: DOUBLE
32587: EQUAL
32588: IFTRUE 32592
32590: GO 32610
32592: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32593: LD_ADDR_VAR 0 3
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: ST_TO_ADDR
32608: GO 33281
32610: LD_INT 10
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32636
32618: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: ST_TO_ADDR
32634: GO 33281
32636: LD_INT 22
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32670
32644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 11
32652: PUSH
32653: LD_INT 12
32655: PUSH
32656: LD_INT 13
32658: PUSH
32659: LD_INT 14
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
32668: GO 33281
32670: LD_INT 23
32672: DOUBLE
32673: EQUAL
32674: IFTRUE 32678
32676: GO 32704
32678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32679: LD_ADDR_VAR 0 3
32683: PUSH
32684: LD_INT 11
32686: PUSH
32687: LD_INT 12
32689: PUSH
32690: LD_INT 13
32692: PUSH
32693: LD_INT 14
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
32702: GO 33281
32704: LD_INT 24
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32738
32712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_INT 11
32720: PUSH
32721: LD_INT 12
32723: PUSH
32724: LD_INT 13
32726: PUSH
32727: LD_INT 14
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
32736: GO 33281
32738: LD_INT 30
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32772
32746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32747: LD_ADDR_VAR 0 3
32751: PUSH
32752: LD_INT 11
32754: PUSH
32755: LD_INT 12
32757: PUSH
32758: LD_INT 13
32760: PUSH
32761: LD_INT 14
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: ST_TO_ADDR
32770: GO 33281
32772: LD_INT 25
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32798
32780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_INT 13
32788: PUSH
32789: LD_INT 14
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: ST_TO_ADDR
32796: GO 33281
32798: LD_INT 27
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32824
32806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32807: LD_ADDR_VAR 0 3
32811: PUSH
32812: LD_INT 13
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: ST_TO_ADDR
32822: GO 33281
32824: LD_EXP 111
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32860
32834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 11
32842: PUSH
32843: LD_INT 12
32845: PUSH
32846: LD_INT 13
32848: PUSH
32849: LD_INT 14
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
32858: GO 33281
32860: LD_INT 28
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32886
32868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 13
32876: PUSH
32877: LD_INT 14
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: ST_TO_ADDR
32884: GO 33281
32886: LD_INT 29
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32912
32894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_INT 13
32902: PUSH
32903: LD_INT 14
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: ST_TO_ADDR
32910: GO 33281
32912: LD_INT 31
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32938
32920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 13
32928: PUSH
32929: LD_INT 14
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: ST_TO_ADDR
32936: GO 33281
32938: LD_INT 26
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 32964
32946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32947: LD_ADDR_VAR 0 3
32951: PUSH
32952: LD_INT 13
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: ST_TO_ADDR
32962: GO 33281
32964: LD_INT 42
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32998
32972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 21
32980: PUSH
32981: LD_INT 22
32983: PUSH
32984: LD_INT 23
32986: PUSH
32987: LD_INT 24
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
32996: GO 33281
32998: LD_INT 43
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33032
33006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_INT 21
33014: PUSH
33015: LD_INT 22
33017: PUSH
33018: LD_INT 23
33020: PUSH
33021: LD_INT 24
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33281
33032: LD_INT 44
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33066
33040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_INT 21
33048: PUSH
33049: LD_INT 22
33051: PUSH
33052: LD_INT 23
33054: PUSH
33055: LD_INT 24
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
33064: GO 33281
33066: LD_INT 45
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33100
33074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 22
33085: PUSH
33086: LD_INT 23
33088: PUSH
33089: LD_INT 24
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
33098: GO 33281
33100: LD_INT 49
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33134
33108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 21
33116: PUSH
33117: LD_INT 22
33119: PUSH
33120: LD_INT 23
33122: PUSH
33123: LD_INT 24
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
33132: GO 33281
33134: LD_INT 51
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33168
33142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_INT 21
33150: PUSH
33151: LD_INT 22
33153: PUSH
33154: LD_INT 23
33156: PUSH
33157: LD_INT 24
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
33166: GO 33281
33168: LD_INT 52
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33202
33176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33177: LD_ADDR_VAR 0 3
33181: PUSH
33182: LD_INT 21
33184: PUSH
33185: LD_INT 22
33187: PUSH
33188: LD_INT 23
33190: PUSH
33191: LD_INT 24
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: ST_TO_ADDR
33200: GO 33281
33202: LD_INT 53
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33210
33208: GO 33228
33210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 23
33218: PUSH
33219: LD_INT 24
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: ST_TO_ADDR
33226: GO 33281
33228: LD_INT 46
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33254
33236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: LD_INT 23
33244: PUSH
33245: LD_INT 24
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: ST_TO_ADDR
33252: GO 33281
33254: LD_INT 47
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33280
33262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 23
33270: PUSH
33271: LD_INT 24
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: ST_TO_ADDR
33278: GO 33281
33280: POP
// result := ( chassis in result ) ;
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_VAR 0 1
33290: PUSH
33291: LD_VAR 0 3
33295: IN
33296: ST_TO_ADDR
// end ;
33297: LD_VAR 0 3
33301: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33302: LD_INT 0
33304: PPUSH
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
33310: PPUSH
// result := array ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_VAR 0 1
33320: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33321: LD_VAR 0 1
33325: NOT
33326: PUSH
33327: LD_VAR 0 2
33331: NOT
33332: OR
33333: PUSH
33334: LD_VAR 0 3
33338: NOT
33339: OR
33340: PUSH
33341: LD_VAR 0 2
33345: PUSH
33346: LD_VAR 0 1
33350: GREATER
33351: OR
33352: PUSH
33353: LD_VAR 0 3
33357: PUSH
33358: LD_VAR 0 1
33362: GREATER
33363: OR
33364: IFFALSE 33368
// exit ;
33366: GO 33664
// if direction then
33368: LD_VAR 0 4
33372: IFFALSE 33436
// begin d := 1 ;
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: LD_INT 1
33381: ST_TO_ADDR
// if i_from > i_to then
33382: LD_VAR 0 2
33386: PUSH
33387: LD_VAR 0 3
33391: GREATER
33392: IFFALSE 33418
// length := ( array - i_from ) + i_to else
33394: LD_ADDR_VAR 0 11
33398: PUSH
33399: LD_VAR 0 1
33403: PUSH
33404: LD_VAR 0 2
33408: MINUS
33409: PUSH
33410: LD_VAR 0 3
33414: PLUS
33415: ST_TO_ADDR
33416: GO 33434
// length := i_to - i_from ;
33418: LD_ADDR_VAR 0 11
33422: PUSH
33423: LD_VAR 0 3
33427: PUSH
33428: LD_VAR 0 2
33432: MINUS
33433: ST_TO_ADDR
// end else
33434: GO 33497
// begin d := - 1 ;
33436: LD_ADDR_VAR 0 9
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: ST_TO_ADDR
// if i_from > i_to then
33445: LD_VAR 0 2
33449: PUSH
33450: LD_VAR 0 3
33454: GREATER
33455: IFFALSE 33475
// length := i_from - i_to else
33457: LD_ADDR_VAR 0 11
33461: PUSH
33462: LD_VAR 0 2
33466: PUSH
33467: LD_VAR 0 3
33471: MINUS
33472: ST_TO_ADDR
33473: GO 33497
// length := ( array - i_to ) + i_from ;
33475: LD_ADDR_VAR 0 11
33479: PUSH
33480: LD_VAR 0 1
33484: PUSH
33485: LD_VAR 0 3
33489: MINUS
33490: PUSH
33491: LD_VAR 0 2
33495: PLUS
33496: ST_TO_ADDR
// end ; if not length then
33497: LD_VAR 0 11
33501: NOT
33502: IFFALSE 33506
// exit ;
33504: GO 33664
// tmp := array ;
33506: LD_ADDR_VAR 0 10
33510: PUSH
33511: LD_VAR 0 1
33515: ST_TO_ADDR
// for i = 1 to length do
33516: LD_ADDR_VAR 0 6
33520: PUSH
33521: DOUBLE
33522: LD_INT 1
33524: DEC
33525: ST_TO_ADDR
33526: LD_VAR 0 11
33530: PUSH
33531: FOR_TO
33532: IFFALSE 33652
// begin for j = 1 to array do
33534: LD_ADDR_VAR 0 7
33538: PUSH
33539: DOUBLE
33540: LD_INT 1
33542: DEC
33543: ST_TO_ADDR
33544: LD_VAR 0 1
33548: PUSH
33549: FOR_TO
33550: IFFALSE 33638
// begin k := j + d ;
33552: LD_ADDR_VAR 0 8
33556: PUSH
33557: LD_VAR 0 7
33561: PUSH
33562: LD_VAR 0 9
33566: PLUS
33567: ST_TO_ADDR
// if k > array then
33568: LD_VAR 0 8
33572: PUSH
33573: LD_VAR 0 1
33577: GREATER
33578: IFFALSE 33588
// k := 1 ;
33580: LD_ADDR_VAR 0 8
33584: PUSH
33585: LD_INT 1
33587: ST_TO_ADDR
// if not k then
33588: LD_VAR 0 8
33592: NOT
33593: IFFALSE 33605
// k := array ;
33595: LD_ADDR_VAR 0 8
33599: PUSH
33600: LD_VAR 0 1
33604: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33605: LD_ADDR_VAR 0 10
33609: PUSH
33610: LD_VAR 0 10
33614: PPUSH
33615: LD_VAR 0 8
33619: PPUSH
33620: LD_VAR 0 1
33624: PUSH
33625: LD_VAR 0 7
33629: ARRAY
33630: PPUSH
33631: CALL_OW 1
33635: ST_TO_ADDR
// end ;
33636: GO 33549
33638: POP
33639: POP
// array := tmp ;
33640: LD_ADDR_VAR 0 1
33644: PUSH
33645: LD_VAR 0 10
33649: ST_TO_ADDR
// end ;
33650: GO 33531
33652: POP
33653: POP
// result := array ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_VAR 0 1
33663: ST_TO_ADDR
// end ;
33664: LD_VAR 0 5
33668: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33669: LD_INT 0
33671: PPUSH
33672: PPUSH
// result := 0 ;
33673: LD_ADDR_VAR 0 3
33677: PUSH
33678: LD_INT 0
33680: ST_TO_ADDR
// if not array or not value in array then
33681: LD_VAR 0 1
33685: NOT
33686: PUSH
33687: LD_VAR 0 2
33691: PUSH
33692: LD_VAR 0 1
33696: IN
33697: NOT
33698: OR
33699: IFFALSE 33703
// exit ;
33701: GO 33757
// for i = 1 to array do
33703: LD_ADDR_VAR 0 4
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_VAR 0 1
33717: PUSH
33718: FOR_TO
33719: IFFALSE 33755
// if value = array [ i ] then
33721: LD_VAR 0 2
33725: PUSH
33726: LD_VAR 0 1
33730: PUSH
33731: LD_VAR 0 4
33735: ARRAY
33736: EQUAL
33737: IFFALSE 33753
// begin result := i ;
33739: LD_ADDR_VAR 0 3
33743: PUSH
33744: LD_VAR 0 4
33748: ST_TO_ADDR
// exit ;
33749: POP
33750: POP
33751: GO 33757
// end ;
33753: GO 33718
33755: POP
33756: POP
// end ;
33757: LD_VAR 0 3
33761: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33762: LD_INT 0
33764: PPUSH
// vc_chassis := chassis ;
33765: LD_ADDR_OWVAR 37
33769: PUSH
33770: LD_VAR 0 1
33774: ST_TO_ADDR
// vc_engine := engine ;
33775: LD_ADDR_OWVAR 39
33779: PUSH
33780: LD_VAR 0 2
33784: ST_TO_ADDR
// vc_control := control ;
33785: LD_ADDR_OWVAR 38
33789: PUSH
33790: LD_VAR 0 3
33794: ST_TO_ADDR
// vc_weapon := weapon ;
33795: LD_ADDR_OWVAR 40
33799: PUSH
33800: LD_VAR 0 4
33804: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33805: LD_ADDR_OWVAR 41
33809: PUSH
33810: LD_VAR 0 5
33814: ST_TO_ADDR
// end ;
33815: LD_VAR 0 6
33819: RET
// export function WantPlant ( unit ) ; var task ; begin
33820: LD_INT 0
33822: PPUSH
33823: PPUSH
// result := false ;
33824: LD_ADDR_VAR 0 2
33828: PUSH
33829: LD_INT 0
33831: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL_OW 437
33846: ST_TO_ADDR
// if task then
33847: LD_VAR 0 3
33851: IFFALSE 33879
// if task [ 1 ] [ 1 ] = p then
33853: LD_VAR 0 3
33857: PUSH
33858: LD_INT 1
33860: ARRAY
33861: PUSH
33862: LD_INT 1
33864: ARRAY
33865: PUSH
33866: LD_STRING p
33868: EQUAL
33869: IFFALSE 33879
// result := true ;
33871: LD_ADDR_VAR 0 2
33875: PUSH
33876: LD_INT 1
33878: ST_TO_ADDR
// end ;
33879: LD_VAR 0 2
33883: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33884: LD_INT 0
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
// if pos < 1 then
33890: LD_VAR 0 2
33894: PUSH
33895: LD_INT 1
33897: LESS
33898: IFFALSE 33902
// exit ;
33900: GO 34205
// if pos = 1 then
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 1
33909: EQUAL
33910: IFFALSE 33943
// result := Replace ( arr , pos [ 1 ] , value ) else
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: LD_VAR 0 2
33926: PUSH
33927: LD_INT 1
33929: ARRAY
33930: PPUSH
33931: LD_VAR 0 3
33935: PPUSH
33936: CALL_OW 1
33940: ST_TO_ADDR
33941: GO 34205
// begin tmp := arr ;
33943: LD_ADDR_VAR 0 6
33947: PUSH
33948: LD_VAR 0 1
33952: ST_TO_ADDR
// s_arr := [ tmp ] ;
33953: LD_ADDR_VAR 0 7
33957: PUSH
33958: LD_VAR 0 6
33962: PUSH
33963: EMPTY
33964: LIST
33965: ST_TO_ADDR
// for i = 1 to pos - 1 do
33966: LD_ADDR_VAR 0 5
33970: PUSH
33971: DOUBLE
33972: LD_INT 1
33974: DEC
33975: ST_TO_ADDR
33976: LD_VAR 0 2
33980: PUSH
33981: LD_INT 1
33983: MINUS
33984: PUSH
33985: FOR_TO
33986: IFFALSE 34031
// begin tmp := tmp [ pos [ i ] ] ;
33988: LD_ADDR_VAR 0 6
33992: PUSH
33993: LD_VAR 0 6
33997: PUSH
33998: LD_VAR 0 2
34002: PUSH
34003: LD_VAR 0 5
34007: ARRAY
34008: ARRAY
34009: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34010: LD_ADDR_VAR 0 7
34014: PUSH
34015: LD_VAR 0 7
34019: PUSH
34020: LD_VAR 0 6
34024: PUSH
34025: EMPTY
34026: LIST
34027: ADD
34028: ST_TO_ADDR
// end ;
34029: GO 33985
34031: POP
34032: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34033: LD_ADDR_VAR 0 6
34037: PUSH
34038: LD_VAR 0 6
34042: PPUSH
34043: LD_VAR 0 2
34047: PUSH
34048: LD_VAR 0 2
34052: ARRAY
34053: PPUSH
34054: LD_VAR 0 3
34058: PPUSH
34059: CALL_OW 1
34063: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34064: LD_ADDR_VAR 0 7
34068: PUSH
34069: LD_VAR 0 7
34073: PPUSH
34074: LD_VAR 0 7
34078: PPUSH
34079: LD_VAR 0 6
34083: PPUSH
34084: CALL_OW 1
34088: ST_TO_ADDR
// for i = s_arr downto 2 do
34089: LD_ADDR_VAR 0 5
34093: PUSH
34094: DOUBLE
34095: LD_VAR 0 7
34099: INC
34100: ST_TO_ADDR
34101: LD_INT 2
34103: PUSH
34104: FOR_DOWNTO
34105: IFFALSE 34189
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34107: LD_ADDR_VAR 0 6
34111: PUSH
34112: LD_VAR 0 7
34116: PUSH
34117: LD_VAR 0 5
34121: PUSH
34122: LD_INT 1
34124: MINUS
34125: ARRAY
34126: PPUSH
34127: LD_VAR 0 2
34131: PUSH
34132: LD_VAR 0 5
34136: PUSH
34137: LD_INT 1
34139: MINUS
34140: ARRAY
34141: PPUSH
34142: LD_VAR 0 7
34146: PUSH
34147: LD_VAR 0 5
34151: ARRAY
34152: PPUSH
34153: CALL_OW 1
34157: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34158: LD_ADDR_VAR 0 7
34162: PUSH
34163: LD_VAR 0 7
34167: PPUSH
34168: LD_VAR 0 5
34172: PUSH
34173: LD_INT 1
34175: MINUS
34176: PPUSH
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 1
34186: ST_TO_ADDR
// end ;
34187: GO 34104
34189: POP
34190: POP
// result := s_arr [ 1 ] ;
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: LD_VAR 0 7
34200: PUSH
34201: LD_INT 1
34203: ARRAY
34204: ST_TO_ADDR
// end ; end ;
34205: LD_VAR 0 4
34209: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34210: LD_INT 0
34212: PPUSH
34213: PPUSH
// if not list then
34214: LD_VAR 0 1
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34314
// i := list [ pos1 ] ;
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_VAR 0 1
34232: PUSH
34233: LD_VAR 0 2
34237: ARRAY
34238: ST_TO_ADDR
// if not i then
34239: LD_VAR 0 5
34243: NOT
34244: IFFALSE 34248
// exit ;
34246: GO 34314
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34248: LD_ADDR_VAR 0 1
34252: PUSH
34253: LD_VAR 0 1
34257: PPUSH
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_VAR 0 1
34267: PUSH
34268: LD_VAR 0 3
34272: ARRAY
34273: PPUSH
34274: CALL_OW 1
34278: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34279: LD_ADDR_VAR 0 1
34283: PUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: LD_VAR 0 3
34293: PPUSH
34294: LD_VAR 0 5
34298: PPUSH
34299: CALL_OW 1
34303: ST_TO_ADDR
// result := list ;
34304: LD_ADDR_VAR 0 4
34308: PUSH
34309: LD_VAR 0 1
34313: ST_TO_ADDR
// end ;
34314: LD_VAR 0 4
34318: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34319: LD_INT 0
34321: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34322: LD_ADDR_VAR 0 5
34326: PUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 250
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 251
34346: PPUSH
34347: LD_VAR 0 2
34351: PPUSH
34352: LD_VAR 0 3
34356: PPUSH
34357: LD_VAR 0 4
34361: PPUSH
34362: CALL 34372 0 5
34366: ST_TO_ADDR
// end ;
34367: LD_VAR 0 5
34371: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34372: LD_INT 0
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
// if not list then
34378: LD_VAR 0 3
34382: NOT
34383: IFFALSE 34387
// exit ;
34385: GO 34775
// result := [ ] ;
34387: LD_ADDR_VAR 0 6
34391: PUSH
34392: EMPTY
34393: ST_TO_ADDR
// for i in list do
34394: LD_ADDR_VAR 0 7
34398: PUSH
34399: LD_VAR 0 3
34403: PUSH
34404: FOR_IN
34405: IFFALSE 34607
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34407: LD_ADDR_VAR 0 9
34411: PUSH
34412: LD_VAR 0 7
34416: PPUSH
34417: LD_VAR 0 1
34421: PPUSH
34422: LD_VAR 0 2
34426: PPUSH
34427: CALL_OW 297
34431: ST_TO_ADDR
// if not result then
34432: LD_VAR 0 6
34436: NOT
34437: IFFALSE 34463
// result := [ [ i , tmp ] ] else
34439: LD_ADDR_VAR 0 6
34443: PUSH
34444: LD_VAR 0 7
34448: PUSH
34449: LD_VAR 0 9
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: ST_TO_ADDR
34461: GO 34605
// begin if result [ result ] [ 2 ] < tmp then
34463: LD_VAR 0 6
34467: PUSH
34468: LD_VAR 0 6
34472: ARRAY
34473: PUSH
34474: LD_INT 2
34476: ARRAY
34477: PUSH
34478: LD_VAR 0 9
34482: LESS
34483: IFFALSE 34525
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34485: LD_ADDR_VAR 0 6
34489: PUSH
34490: LD_VAR 0 6
34494: PPUSH
34495: LD_VAR 0 6
34499: PUSH
34500: LD_INT 1
34502: PLUS
34503: PPUSH
34504: LD_VAR 0 7
34508: PUSH
34509: LD_VAR 0 9
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PPUSH
34518: CALL_OW 2
34522: ST_TO_ADDR
34523: GO 34605
// for j = 1 to result do
34525: LD_ADDR_VAR 0 8
34529: PUSH
34530: DOUBLE
34531: LD_INT 1
34533: DEC
34534: ST_TO_ADDR
34535: LD_VAR 0 6
34539: PUSH
34540: FOR_TO
34541: IFFALSE 34603
// begin if tmp < result [ j ] [ 2 ] then
34543: LD_VAR 0 9
34547: PUSH
34548: LD_VAR 0 6
34552: PUSH
34553: LD_VAR 0 8
34557: ARRAY
34558: PUSH
34559: LD_INT 2
34561: ARRAY
34562: LESS
34563: IFFALSE 34601
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34565: LD_ADDR_VAR 0 6
34569: PUSH
34570: LD_VAR 0 6
34574: PPUSH
34575: LD_VAR 0 8
34579: PPUSH
34580: LD_VAR 0 7
34584: PUSH
34585: LD_VAR 0 9
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 2
34598: ST_TO_ADDR
// break ;
34599: GO 34603
// end ; end ;
34601: GO 34540
34603: POP
34604: POP
// end ; end ;
34605: GO 34404
34607: POP
34608: POP
// if result and not asc then
34609: LD_VAR 0 6
34613: PUSH
34614: LD_VAR 0 4
34618: NOT
34619: AND
34620: IFFALSE 34695
// begin tmp := result ;
34622: LD_ADDR_VAR 0 9
34626: PUSH
34627: LD_VAR 0 6
34631: ST_TO_ADDR
// for i = tmp downto 1 do
34632: LD_ADDR_VAR 0 7
34636: PUSH
34637: DOUBLE
34638: LD_VAR 0 9
34642: INC
34643: ST_TO_ADDR
34644: LD_INT 1
34646: PUSH
34647: FOR_DOWNTO
34648: IFFALSE 34693
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34650: LD_ADDR_VAR 0 6
34654: PUSH
34655: LD_VAR 0 6
34659: PPUSH
34660: LD_VAR 0 9
34664: PUSH
34665: LD_VAR 0 7
34669: MINUS
34670: PUSH
34671: LD_INT 1
34673: PLUS
34674: PPUSH
34675: LD_VAR 0 9
34679: PUSH
34680: LD_VAR 0 7
34684: ARRAY
34685: PPUSH
34686: CALL_OW 1
34690: ST_TO_ADDR
34691: GO 34647
34693: POP
34694: POP
// end ; tmp := [ ] ;
34695: LD_ADDR_VAR 0 9
34699: PUSH
34700: EMPTY
34701: ST_TO_ADDR
// if mode then
34702: LD_VAR 0 5
34706: IFFALSE 34775
// begin for i = 1 to result do
34708: LD_ADDR_VAR 0 7
34712: PUSH
34713: DOUBLE
34714: LD_INT 1
34716: DEC
34717: ST_TO_ADDR
34718: LD_VAR 0 6
34722: PUSH
34723: FOR_TO
34724: IFFALSE 34763
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34726: LD_ADDR_VAR 0 9
34730: PUSH
34731: LD_VAR 0 9
34735: PPUSH
34736: LD_VAR 0 7
34740: PPUSH
34741: LD_VAR 0 6
34745: PUSH
34746: LD_VAR 0 7
34750: ARRAY
34751: PUSH
34752: LD_INT 1
34754: ARRAY
34755: PPUSH
34756: CALL_OW 1
34760: ST_TO_ADDR
34761: GO 34723
34763: POP
34764: POP
// result := tmp ;
34765: LD_ADDR_VAR 0 6
34769: PUSH
34770: LD_VAR 0 9
34774: ST_TO_ADDR
// end ; end ;
34775: LD_VAR 0 6
34779: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34780: LD_INT 0
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
34787: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34788: LD_ADDR_VAR 0 5
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: ST_TO_ADDR
// if not x or not y then
34810: LD_VAR 0 2
34814: NOT
34815: PUSH
34816: LD_VAR 0 3
34820: NOT
34821: OR
34822: IFFALSE 34826
// exit ;
34824: GO 36478
// if not range then
34826: LD_VAR 0 4
34830: NOT
34831: IFFALSE 34841
// range := 10 ;
34833: LD_ADDR_VAR 0 4
34837: PUSH
34838: LD_INT 10
34840: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34841: LD_ADDR_VAR 0 8
34845: PUSH
34846: LD_INT 81
34848: PUSH
34849: LD_VAR 0 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 92
34860: PUSH
34861: LD_VAR 0 2
34865: PUSH
34866: LD_VAR 0 3
34870: PUSH
34871: LD_VAR 0 4
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 21
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: PPUSH
34904: CALL_OW 69
34908: ST_TO_ADDR
// if not tmp then
34909: LD_VAR 0 8
34913: NOT
34914: IFFALSE 34918
// exit ;
34916: GO 36478
// for i in tmp do
34918: LD_ADDR_VAR 0 6
34922: PUSH
34923: LD_VAR 0 8
34927: PUSH
34928: FOR_IN
34929: IFFALSE 36453
// begin points := [ 0 , 0 , 0 ] ;
34931: LD_ADDR_VAR 0 9
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
// bpoints := 1 ;
34950: LD_ADDR_VAR 0 10
34954: PUSH
34955: LD_INT 1
34957: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34958: LD_VAR 0 6
34962: PPUSH
34963: CALL_OW 247
34967: PUSH
34968: LD_INT 1
34970: DOUBLE
34971: EQUAL
34972: IFTRUE 34976
34974: GO 35554
34976: POP
// begin if GetClass ( i ) = 1 then
34977: LD_VAR 0 6
34981: PPUSH
34982: CALL_OW 257
34986: PUSH
34987: LD_INT 1
34989: EQUAL
34990: IFFALSE 35011
// points := [ 10 , 5 , 3 ] ;
34992: LD_ADDR_VAR 0 9
34996: PUSH
34997: LD_INT 10
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35011: LD_VAR 0 6
35015: PPUSH
35016: CALL_OW 257
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 4
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: IN
35035: IFFALSE 35056
// points := [ 3 , 2 , 1 ] ;
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35056: LD_VAR 0 6
35060: PPUSH
35061: CALL_OW 257
35065: PUSH
35066: LD_INT 5
35068: EQUAL
35069: IFFALSE 35090
// points := [ 130 , 5 , 2 ] ;
35071: LD_ADDR_VAR 0 9
35075: PUSH
35076: LD_INT 130
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35090: LD_VAR 0 6
35094: PPUSH
35095: CALL_OW 257
35099: PUSH
35100: LD_INT 8
35102: EQUAL
35103: IFFALSE 35124
// points := [ 35 , 35 , 30 ] ;
35105: LD_ADDR_VAR 0 9
35109: PUSH
35110: LD_INT 35
35112: PUSH
35113: LD_INT 35
35115: PUSH
35116: LD_INT 30
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35124: LD_VAR 0 6
35128: PPUSH
35129: CALL_OW 257
35133: PUSH
35134: LD_INT 9
35136: EQUAL
35137: IFFALSE 35158
// points := [ 20 , 55 , 40 ] ;
35139: LD_ADDR_VAR 0 9
35143: PUSH
35144: LD_INT 20
35146: PUSH
35147: LD_INT 55
35149: PUSH
35150: LD_INT 40
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35158: LD_VAR 0 6
35162: PPUSH
35163: CALL_OW 257
35167: PUSH
35168: LD_INT 12
35170: PUSH
35171: LD_INT 16
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: IN
35178: IFFALSE 35199
// points := [ 5 , 3 , 2 ] ;
35180: LD_ADDR_VAR 0 9
35184: PUSH
35185: LD_INT 5
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35199: LD_VAR 0 6
35203: PPUSH
35204: CALL_OW 257
35208: PUSH
35209: LD_INT 17
35211: EQUAL
35212: IFFALSE 35233
// points := [ 100 , 50 , 75 ] ;
35214: LD_ADDR_VAR 0 9
35218: PUSH
35219: LD_INT 100
35221: PUSH
35222: LD_INT 50
35224: PUSH
35225: LD_INT 75
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35233: LD_VAR 0 6
35237: PPUSH
35238: CALL_OW 257
35242: PUSH
35243: LD_INT 15
35245: EQUAL
35246: IFFALSE 35267
// points := [ 10 , 5 , 3 ] ;
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_INT 10
35255: PUSH
35256: LD_INT 5
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35267: LD_VAR 0 6
35271: PPUSH
35272: CALL_OW 257
35276: PUSH
35277: LD_INT 14
35279: EQUAL
35280: IFFALSE 35301
// points := [ 10 , 0 , 0 ] ;
35282: LD_ADDR_VAR 0 9
35286: PUSH
35287: LD_INT 10
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35301: LD_VAR 0 6
35305: PPUSH
35306: CALL_OW 257
35310: PUSH
35311: LD_INT 11
35313: EQUAL
35314: IFFALSE 35335
// points := [ 30 , 10 , 5 ] ;
35316: LD_ADDR_VAR 0 9
35320: PUSH
35321: LD_INT 30
35323: PUSH
35324: LD_INT 10
35326: PUSH
35327: LD_INT 5
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35335: LD_VAR 0 1
35339: PPUSH
35340: LD_INT 5
35342: PPUSH
35343: CALL_OW 321
35347: PUSH
35348: LD_INT 2
35350: EQUAL
35351: IFFALSE 35368
// bpoints := bpoints * 1.8 ;
35353: LD_ADDR_VAR 0 10
35357: PUSH
35358: LD_VAR 0 10
35362: PUSH
35363: LD_REAL  1.80000000000000E+0000
35366: MUL
35367: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35368: LD_VAR 0 6
35372: PPUSH
35373: CALL_OW 257
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: LD_INT 4
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: IN
35396: PUSH
35397: LD_VAR 0 1
35401: PPUSH
35402: LD_INT 51
35404: PPUSH
35405: CALL_OW 321
35409: PUSH
35410: LD_INT 2
35412: EQUAL
35413: AND
35414: IFFALSE 35431
// bpoints := bpoints * 1.2 ;
35416: LD_ADDR_VAR 0 10
35420: PUSH
35421: LD_VAR 0 10
35425: PUSH
35426: LD_REAL  1.20000000000000E+0000
35429: MUL
35430: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35431: LD_VAR 0 6
35435: PPUSH
35436: CALL_OW 257
35440: PUSH
35441: LD_INT 5
35443: PUSH
35444: LD_INT 7
35446: PUSH
35447: LD_INT 9
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: IN
35455: PUSH
35456: LD_VAR 0 1
35460: PPUSH
35461: LD_INT 52
35463: PPUSH
35464: CALL_OW 321
35468: PUSH
35469: LD_INT 2
35471: EQUAL
35472: AND
35473: IFFALSE 35490
// bpoints := bpoints * 1.5 ;
35475: LD_ADDR_VAR 0 10
35479: PUSH
35480: LD_VAR 0 10
35484: PUSH
35485: LD_REAL  1.50000000000000E+0000
35488: MUL
35489: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35490: LD_VAR 0 1
35494: PPUSH
35495: LD_INT 66
35497: PPUSH
35498: CALL_OW 321
35502: PUSH
35503: LD_INT 2
35505: EQUAL
35506: IFFALSE 35523
// bpoints := bpoints * 1.1 ;
35508: LD_ADDR_VAR 0 10
35512: PUSH
35513: LD_VAR 0 10
35517: PUSH
35518: LD_REAL  1.10000000000000E+0000
35521: MUL
35522: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35523: LD_ADDR_VAR 0 10
35527: PUSH
35528: LD_VAR 0 10
35532: PUSH
35533: LD_VAR 0 6
35537: PPUSH
35538: LD_INT 1
35540: PPUSH
35541: CALL_OW 259
35545: PUSH
35546: LD_REAL  1.15000000000000E+0000
35549: MUL
35550: MUL
35551: ST_TO_ADDR
// end ; unit_vehicle :
35552: GO 36382
35554: LD_INT 2
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 36370
35562: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 264
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 42
35578: PUSH
35579: LD_INT 24
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: IN
35587: IFFALSE 35608
// points := [ 25 , 5 , 3 ] ;
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: LD_INT 25
35596: PUSH
35597: LD_INT 5
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35608: LD_VAR 0 6
35612: PPUSH
35613: CALL_OW 264
35617: PUSH
35618: LD_INT 4
35620: PUSH
35621: LD_INT 43
35623: PUSH
35624: LD_INT 25
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: IN
35632: IFFALSE 35653
// points := [ 40 , 15 , 5 ] ;
35634: LD_ADDR_VAR 0 9
35638: PUSH
35639: LD_INT 40
35641: PUSH
35642: LD_INT 15
35644: PUSH
35645: LD_INT 5
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35653: LD_VAR 0 6
35657: PPUSH
35658: CALL_OW 264
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: LD_INT 23
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: IN
35673: IFFALSE 35694
// points := [ 7 , 25 , 8 ] ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 7
35682: PUSH
35683: LD_INT 25
35685: PUSH
35686: LD_INT 8
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 264
35703: PUSH
35704: LD_INT 5
35706: PUSH
35707: LD_INT 27
35709: PUSH
35710: LD_INT 44
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: IFFALSE 35739
// points := [ 14 , 50 , 16 ] ;
35720: LD_ADDR_VAR 0 9
35724: PUSH
35725: LD_INT 14
35727: PUSH
35728: LD_INT 50
35730: PUSH
35731: LD_INT 16
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 264
35748: PUSH
35749: LD_INT 6
35751: PUSH
35752: LD_INT 46
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: IN
35759: IFFALSE 35780
// points := [ 32 , 120 , 70 ] ;
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_INT 32
35768: PUSH
35769: LD_INT 120
35771: PUSH
35772: LD_INT 70
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35780: LD_VAR 0 6
35784: PPUSH
35785: CALL_OW 264
35789: PUSH
35790: LD_INT 7
35792: PUSH
35793: LD_INT 28
35795: PUSH
35796: LD_INT 45
35798: PUSH
35799: LD_EXP 111
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: IN
35810: IFFALSE 35831
// points := [ 35 , 20 , 45 ] ;
35812: LD_ADDR_VAR 0 9
35816: PUSH
35817: LD_INT 35
35819: PUSH
35820: LD_INT 20
35822: PUSH
35823: LD_INT 45
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35831: LD_VAR 0 6
35835: PPUSH
35836: CALL_OW 264
35840: PUSH
35841: LD_INT 47
35843: PUSH
35844: EMPTY
35845: LIST
35846: IN
35847: IFFALSE 35868
// points := [ 67 , 45 , 75 ] ;
35849: LD_ADDR_VAR 0 9
35853: PUSH
35854: LD_INT 67
35856: PUSH
35857: LD_INT 45
35859: PUSH
35860: LD_INT 75
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35868: LD_VAR 0 6
35872: PPUSH
35873: CALL_OW 264
35877: PUSH
35878: LD_INT 26
35880: PUSH
35881: EMPTY
35882: LIST
35883: IN
35884: IFFALSE 35905
// points := [ 120 , 30 , 80 ] ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_INT 120
35893: PUSH
35894: LD_INT 30
35896: PUSH
35897: LD_INT 80
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35905: LD_VAR 0 6
35909: PPUSH
35910: CALL_OW 264
35914: PUSH
35915: LD_INT 22
35917: PUSH
35918: EMPTY
35919: LIST
35920: IN
35921: IFFALSE 35942
// points := [ 40 , 1 , 1 ] ;
35923: LD_ADDR_VAR 0 9
35927: PUSH
35928: LD_INT 40
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35942: LD_VAR 0 6
35946: PPUSH
35947: CALL_OW 264
35951: PUSH
35952: LD_INT 29
35954: PUSH
35955: EMPTY
35956: LIST
35957: IN
35958: IFFALSE 35979
// points := [ 70 , 200 , 400 ] ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_INT 70
35967: PUSH
35968: LD_INT 200
35970: PUSH
35971: LD_INT 400
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 264
35988: PUSH
35989: LD_INT 14
35991: PUSH
35992: LD_INT 53
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: IN
35999: IFFALSE 36020
// points := [ 40 , 10 , 20 ] ;
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_INT 40
36008: PUSH
36009: LD_INT 10
36011: PUSH
36012: LD_INT 20
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36020: LD_VAR 0 6
36024: PPUSH
36025: CALL_OW 264
36029: PUSH
36030: LD_INT 9
36032: PUSH
36033: EMPTY
36034: LIST
36035: IN
36036: IFFALSE 36057
// points := [ 5 , 70 , 20 ] ;
36038: LD_ADDR_VAR 0 9
36042: PUSH
36043: LD_INT 5
36045: PUSH
36046: LD_INT 70
36048: PUSH
36049: LD_INT 20
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36057: LD_VAR 0 6
36061: PPUSH
36062: CALL_OW 264
36066: PUSH
36067: LD_INT 10
36069: PUSH
36070: EMPTY
36071: LIST
36072: IN
36073: IFFALSE 36094
// points := [ 35 , 110 , 70 ] ;
36075: LD_ADDR_VAR 0 9
36079: PUSH
36080: LD_INT 35
36082: PUSH
36083: LD_INT 110
36085: PUSH
36086: LD_INT 70
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 265
36103: PUSH
36104: LD_INT 25
36106: EQUAL
36107: IFFALSE 36128
// points := [ 80 , 65 , 100 ] ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_INT 80
36116: PUSH
36117: LD_INT 65
36119: PUSH
36120: LD_INT 100
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36128: LD_VAR 0 6
36132: PPUSH
36133: CALL_OW 263
36137: PUSH
36138: LD_INT 1
36140: EQUAL
36141: IFFALSE 36176
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36143: LD_ADDR_VAR 0 10
36147: PUSH
36148: LD_VAR 0 10
36152: PUSH
36153: LD_VAR 0 6
36157: PPUSH
36158: CALL_OW 311
36162: PPUSH
36163: LD_INT 3
36165: PPUSH
36166: CALL_OW 259
36170: PUSH
36171: LD_INT 4
36173: MUL
36174: MUL
36175: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36176: LD_VAR 0 6
36180: PPUSH
36181: CALL_OW 263
36185: PUSH
36186: LD_INT 2
36188: EQUAL
36189: IFFALSE 36240
// begin j := IsControledBy ( i ) ;
36191: LD_ADDR_VAR 0 7
36195: PUSH
36196: LD_VAR 0 6
36200: PPUSH
36201: CALL_OW 312
36205: ST_TO_ADDR
// if j then
36206: LD_VAR 0 7
36210: IFFALSE 36240
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36212: LD_ADDR_VAR 0 10
36216: PUSH
36217: LD_VAR 0 10
36221: PUSH
36222: LD_VAR 0 7
36226: PPUSH
36227: LD_INT 3
36229: PPUSH
36230: CALL_OW 259
36234: PUSH
36235: LD_INT 3
36237: MUL
36238: MUL
36239: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36240: LD_VAR 0 6
36244: PPUSH
36245: CALL_OW 264
36249: PUSH
36250: LD_INT 5
36252: PUSH
36253: LD_INT 6
36255: PUSH
36256: LD_INT 46
36258: PUSH
36259: LD_INT 44
36261: PUSH
36262: LD_INT 47
36264: PUSH
36265: LD_INT 45
36267: PUSH
36268: LD_INT 28
36270: PUSH
36271: LD_INT 7
36273: PUSH
36274: LD_INT 27
36276: PUSH
36277: LD_INT 29
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: PUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: LD_INT 52
36300: PPUSH
36301: CALL_OW 321
36305: PUSH
36306: LD_INT 2
36308: EQUAL
36309: AND
36310: IFFALSE 36327
// bpoints := bpoints * 1.2 ;
36312: LD_ADDR_VAR 0 10
36316: PUSH
36317: LD_VAR 0 10
36321: PUSH
36322: LD_REAL  1.20000000000000E+0000
36325: MUL
36326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36327: LD_VAR 0 6
36331: PPUSH
36332: CALL_OW 264
36336: PUSH
36337: LD_INT 6
36339: PUSH
36340: LD_INT 46
36342: PUSH
36343: LD_INT 47
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: IN
36351: IFFALSE 36368
// bpoints := bpoints * 1.2 ;
36353: LD_ADDR_VAR 0 10
36357: PUSH
36358: LD_VAR 0 10
36362: PUSH
36363: LD_REAL  1.20000000000000E+0000
36366: MUL
36367: ST_TO_ADDR
// end ; unit_building :
36368: GO 36382
36370: LD_INT 3
36372: DOUBLE
36373: EQUAL
36374: IFTRUE 36378
36376: GO 36381
36378: POP
// ; end ;
36379: GO 36382
36381: POP
// for j = 1 to 3 do
36382: LD_ADDR_VAR 0 7
36386: PUSH
36387: DOUBLE
36388: LD_INT 1
36390: DEC
36391: ST_TO_ADDR
36392: LD_INT 3
36394: PUSH
36395: FOR_TO
36396: IFFALSE 36449
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: LD_VAR 0 5
36407: PPUSH
36408: LD_VAR 0 7
36412: PPUSH
36413: LD_VAR 0 5
36417: PUSH
36418: LD_VAR 0 7
36422: ARRAY
36423: PUSH
36424: LD_VAR 0 9
36428: PUSH
36429: LD_VAR 0 7
36433: ARRAY
36434: PUSH
36435: LD_VAR 0 10
36439: MUL
36440: PLUS
36441: PPUSH
36442: CALL_OW 1
36446: ST_TO_ADDR
36447: GO 36395
36449: POP
36450: POP
// end ;
36451: GO 34928
36453: POP
36454: POP
// result := Replace ( result , 4 , tmp ) ;
36455: LD_ADDR_VAR 0 5
36459: PUSH
36460: LD_VAR 0 5
36464: PPUSH
36465: LD_INT 4
36467: PPUSH
36468: LD_VAR 0 8
36472: PPUSH
36473: CALL_OW 1
36477: ST_TO_ADDR
// end ;
36478: LD_VAR 0 5
36482: RET
// export function DangerAtRange ( unit , range ) ; begin
36483: LD_INT 0
36485: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 255
36500: PPUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 250
36510: PPUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 251
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: CALL 34780 0 4
36530: ST_TO_ADDR
// end ;
36531: LD_VAR 0 3
36535: RET
// export function DangerInArea ( side , area ) ; begin
36536: LD_INT 0
36538: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36539: LD_ADDR_VAR 0 3
36543: PUSH
36544: LD_VAR 0 2
36548: PPUSH
36549: LD_INT 81
36551: PUSH
36552: LD_VAR 0 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PPUSH
36561: CALL_OW 70
36565: ST_TO_ADDR
// end ;
36566: LD_VAR 0 3
36570: RET
// export function IsExtension ( b ) ; begin
36571: LD_INT 0
36573: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36574: LD_ADDR_VAR 0 2
36578: PUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 23
36586: PUSH
36587: LD_INT 20
36589: PUSH
36590: LD_INT 22
36592: PUSH
36593: LD_INT 17
36595: PUSH
36596: LD_INT 24
36598: PUSH
36599: LD_INT 21
36601: PUSH
36602: LD_INT 19
36604: PUSH
36605: LD_INT 16
36607: PUSH
36608: LD_INT 25
36610: PUSH
36611: LD_INT 18
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: IN
36626: ST_TO_ADDR
// end ;
36627: LD_VAR 0 2
36631: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36632: LD_INT 0
36634: PPUSH
36635: PPUSH
36636: PPUSH
// result := [ ] ;
36637: LD_ADDR_VAR 0 4
36641: PUSH
36642: EMPTY
36643: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36644: LD_ADDR_VAR 0 5
36648: PUSH
36649: LD_VAR 0 2
36653: PPUSH
36654: LD_INT 21
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PPUSH
36664: CALL_OW 70
36668: ST_TO_ADDR
// if not tmp then
36669: LD_VAR 0 5
36673: NOT
36674: IFFALSE 36678
// exit ;
36676: GO 36742
// if checkLink then
36678: LD_VAR 0 3
36682: IFFALSE 36732
// begin for i in tmp do
36684: LD_ADDR_VAR 0 6
36688: PUSH
36689: LD_VAR 0 5
36693: PUSH
36694: FOR_IN
36695: IFFALSE 36730
// if GetBase ( i ) <> base then
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 274
36706: PUSH
36707: LD_VAR 0 1
36711: NONEQUAL
36712: IFFALSE 36728
// ComLinkToBase ( base , i ) ;
36714: LD_VAR 0 1
36718: PPUSH
36719: LD_VAR 0 6
36723: PPUSH
36724: CALL_OW 169
36728: GO 36694
36730: POP
36731: POP
// end ; result := tmp ;
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: LD_VAR 0 5
36741: ST_TO_ADDR
// end ;
36742: LD_VAR 0 4
36746: RET
// export function ComComplete ( units , b ) ; var i ; begin
36747: LD_INT 0
36749: PPUSH
36750: PPUSH
// if not units then
36751: LD_VAR 0 1
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 36850
// for i in units do
36760: LD_ADDR_VAR 0 4
36764: PUSH
36765: LD_VAR 0 1
36769: PUSH
36770: FOR_IN
36771: IFFALSE 36848
// if BuildingStatus ( b ) = bs_build then
36773: LD_VAR 0 2
36777: PPUSH
36778: CALL_OW 461
36782: PUSH
36783: LD_INT 1
36785: EQUAL
36786: IFFALSE 36846
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36788: LD_VAR 0 4
36792: PPUSH
36793: LD_STRING h
36795: PUSH
36796: LD_VAR 0 2
36800: PPUSH
36801: CALL_OW 250
36805: PUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: CALL_OW 251
36815: PUSH
36816: LD_VAR 0 2
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: PUSH
36839: EMPTY
36840: LIST
36841: PPUSH
36842: CALL_OW 446
36846: GO 36770
36848: POP
36849: POP
// end ;
36850: LD_VAR 0 3
36854: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36863: LD_VAR 0 1
36867: NOT
36868: PUSH
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 263
36878: PUSH
36879: LD_INT 2
36881: NONEQUAL
36882: OR
36883: IFFALSE 36887
// exit ;
36885: GO 37203
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36887: LD_ADDR_VAR 0 6
36891: PUSH
36892: LD_INT 22
36894: PUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 255
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 30
36914: PUSH
36915: LD_INT 36
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 34
36924: PUSH
36925: LD_INT 31
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PPUSH
36941: CALL_OW 69
36945: ST_TO_ADDR
// if not tmp then
36946: LD_VAR 0 6
36950: NOT
36951: IFFALSE 36955
// exit ;
36953: GO 37203
// result := [ ] ;
36955: LD_ADDR_VAR 0 2
36959: PUSH
36960: EMPTY
36961: ST_TO_ADDR
// for i in tmp do
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: LD_VAR 0 6
36971: PUSH
36972: FOR_IN
36973: IFFALSE 37044
// begin t := UnitsInside ( i ) ;
36975: LD_ADDR_VAR 0 4
36979: PUSH
36980: LD_VAR 0 3
36984: PPUSH
36985: CALL_OW 313
36989: ST_TO_ADDR
// if t then
36990: LD_VAR 0 4
36994: IFFALSE 37042
// for j in t do
36996: LD_ADDR_VAR 0 7
37000: PUSH
37001: LD_VAR 0 4
37005: PUSH
37006: FOR_IN
37007: IFFALSE 37040
// result := Replace ( result , result + 1 , j ) ;
37009: LD_ADDR_VAR 0 2
37013: PUSH
37014: LD_VAR 0 2
37018: PPUSH
37019: LD_VAR 0 2
37023: PUSH
37024: LD_INT 1
37026: PLUS
37027: PPUSH
37028: LD_VAR 0 7
37032: PPUSH
37033: CALL_OW 1
37037: ST_TO_ADDR
37038: GO 37006
37040: POP
37041: POP
// end ;
37042: GO 36972
37044: POP
37045: POP
// if not result then
37046: LD_VAR 0 2
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37203
// mech := result [ 1 ] ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_VAR 0 2
37064: PUSH
37065: LD_INT 1
37067: ARRAY
37068: ST_TO_ADDR
// if result > 1 then
37069: LD_VAR 0 2
37073: PUSH
37074: LD_INT 1
37076: GREATER
37077: IFFALSE 37189
// begin for i = 2 to result do
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: DOUBLE
37085: LD_INT 2
37087: DEC
37088: ST_TO_ADDR
37089: LD_VAR 0 2
37093: PUSH
37094: FOR_TO
37095: IFFALSE 37187
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37097: LD_ADDR_VAR 0 4
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_VAR 0 3
37111: ARRAY
37112: PPUSH
37113: LD_INT 3
37115: PPUSH
37116: CALL_OW 259
37120: PUSH
37121: LD_VAR 0 2
37125: PUSH
37126: LD_VAR 0 3
37130: ARRAY
37131: PPUSH
37132: CALL_OW 432
37136: MINUS
37137: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37138: LD_VAR 0 4
37142: PUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: LD_INT 3
37150: PPUSH
37151: CALL_OW 259
37155: PUSH
37156: LD_VAR 0 5
37160: PPUSH
37161: CALL_OW 432
37165: MINUS
37166: GREATEREQUAL
37167: IFFALSE 37185
// mech := result [ i ] ;
37169: LD_ADDR_VAR 0 5
37173: PUSH
37174: LD_VAR 0 2
37178: PUSH
37179: LD_VAR 0 3
37183: ARRAY
37184: ST_TO_ADDR
// end ;
37185: GO 37094
37187: POP
37188: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37189: LD_VAR 0 1
37193: PPUSH
37194: LD_VAR 0 5
37198: PPUSH
37199: CALL_OW 135
// end ;
37203: LD_VAR 0 2
37207: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
// result := [ ] ;
37223: LD_ADDR_VAR 0 7
37227: PUSH
37228: EMPTY
37229: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37230: LD_VAR 0 1
37234: PPUSH
37235: CALL_OW 266
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: IN
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 38889
// if name then
37255: LD_VAR 0 3
37259: IFFALSE 37275
// SetBName ( base_dep , name ) ;
37261: LD_VAR 0 1
37265: PPUSH
37266: LD_VAR 0 3
37270: PPUSH
37271: CALL_OW 500
// base := GetBase ( base_dep ) ;
37275: LD_ADDR_VAR 0 15
37279: PUSH
37280: LD_VAR 0 1
37284: PPUSH
37285: CALL_OW 274
37289: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37290: LD_ADDR_VAR 0 16
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 255
37304: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37305: LD_ADDR_VAR 0 17
37309: PUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 248
37319: ST_TO_ADDR
// if sources then
37320: LD_VAR 0 5
37324: IFFALSE 37371
// for i = 1 to 3 do
37326: LD_ADDR_VAR 0 8
37330: PUSH
37331: DOUBLE
37332: LD_INT 1
37334: DEC
37335: ST_TO_ADDR
37336: LD_INT 3
37338: PUSH
37339: FOR_TO
37340: IFFALSE 37369
// AddResourceType ( base , i , sources [ i ] ) ;
37342: LD_VAR 0 15
37346: PPUSH
37347: LD_VAR 0 8
37351: PPUSH
37352: LD_VAR 0 5
37356: PUSH
37357: LD_VAR 0 8
37361: ARRAY
37362: PPUSH
37363: CALL_OW 276
37367: GO 37339
37369: POP
37370: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37371: LD_ADDR_VAR 0 18
37375: PUSH
37376: LD_VAR 0 15
37380: PPUSH
37381: LD_VAR 0 2
37385: PPUSH
37386: LD_INT 1
37388: PPUSH
37389: CALL 36632 0 3
37393: ST_TO_ADDR
// InitHc ;
37394: CALL_OW 19
// InitUc ;
37398: CALL_OW 18
// uc_side := side ;
37402: LD_ADDR_OWVAR 20
37406: PUSH
37407: LD_VAR 0 16
37411: ST_TO_ADDR
// uc_nation := nation ;
37412: LD_ADDR_OWVAR 21
37416: PUSH
37417: LD_VAR 0 17
37421: ST_TO_ADDR
// if buildings then
37422: LD_VAR 0 18
37426: IFFALSE 38748
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37428: LD_ADDR_VAR 0 19
37432: PUSH
37433: LD_VAR 0 18
37437: PPUSH
37438: LD_INT 2
37440: PUSH
37441: LD_INT 30
37443: PUSH
37444: LD_INT 29
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 30
37453: PUSH
37454: LD_INT 30
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: PPUSH
37466: CALL_OW 72
37470: ST_TO_ADDR
// if tmp then
37471: LD_VAR 0 19
37475: IFFALSE 37523
// for i in tmp do
37477: LD_ADDR_VAR 0 8
37481: PUSH
37482: LD_VAR 0 19
37486: PUSH
37487: FOR_IN
37488: IFFALSE 37521
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37490: LD_VAR 0 8
37494: PPUSH
37495: CALL_OW 250
37499: PPUSH
37500: LD_VAR 0 8
37504: PPUSH
37505: CALL_OW 251
37509: PPUSH
37510: LD_VAR 0 16
37514: PPUSH
37515: CALL_OW 441
37519: GO 37487
37521: POP
37522: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37523: LD_VAR 0 18
37527: PPUSH
37528: LD_INT 2
37530: PUSH
37531: LD_INT 30
37533: PUSH
37534: LD_INT 32
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 30
37543: PUSH
37544: LD_INT 33
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: PPUSH
37556: CALL_OW 72
37560: IFFALSE 37648
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37562: LD_ADDR_VAR 0 8
37566: PUSH
37567: LD_VAR 0 18
37571: PPUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 30
37577: PUSH
37578: LD_INT 32
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 30
37587: PUSH
37588: LD_INT 33
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: PPUSH
37600: CALL_OW 72
37604: PUSH
37605: FOR_IN
37606: IFFALSE 37646
// begin if not GetBWeapon ( i ) then
37608: LD_VAR 0 8
37612: PPUSH
37613: CALL_OW 269
37617: NOT
37618: IFFALSE 37644
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37620: LD_VAR 0 8
37624: PPUSH
37625: LD_VAR 0 8
37629: PPUSH
37630: LD_VAR 0 2
37634: PPUSH
37635: CALL 38894 0 2
37639: PPUSH
37640: CALL_OW 431
// end ;
37644: GO 37605
37646: POP
37647: POP
// end ; for i = 1 to personel do
37648: LD_ADDR_VAR 0 8
37652: PUSH
37653: DOUBLE
37654: LD_INT 1
37656: DEC
37657: ST_TO_ADDR
37658: LD_VAR 0 6
37662: PUSH
37663: FOR_TO
37664: IFFALSE 38728
// begin if i > 4 then
37666: LD_VAR 0 8
37670: PUSH
37671: LD_INT 4
37673: GREATER
37674: IFFALSE 37678
// break ;
37676: GO 38728
// case i of 1 :
37678: LD_VAR 0 8
37682: PUSH
37683: LD_INT 1
37685: DOUBLE
37686: EQUAL
37687: IFTRUE 37691
37689: GO 37771
37691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37692: LD_ADDR_VAR 0 12
37696: PUSH
37697: LD_VAR 0 18
37701: PPUSH
37702: LD_INT 22
37704: PUSH
37705: LD_VAR 0 16
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 58
37716: PUSH
37717: EMPTY
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 30
37725: PUSH
37726: LD_INT 32
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 30
37735: PUSH
37736: LD_INT 4
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: PPUSH
37764: CALL_OW 72
37768: ST_TO_ADDR
37769: GO 37993
37771: LD_INT 2
37773: DOUBLE
37774: EQUAL
37775: IFTRUE 37779
37777: GO 37841
37779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37780: LD_ADDR_VAR 0 12
37784: PUSH
37785: LD_VAR 0 18
37789: PPUSH
37790: LD_INT 22
37792: PUSH
37793: LD_VAR 0 16
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 30
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 30
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PPUSH
37834: CALL_OW 72
37838: ST_TO_ADDR
37839: GO 37993
37841: LD_INT 3
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 37911
37849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37850: LD_ADDR_VAR 0 12
37854: PUSH
37855: LD_VAR 0 18
37859: PPUSH
37860: LD_INT 22
37862: PUSH
37863: LD_VAR 0 16
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 30
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 30
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PPUSH
37904: CALL_OW 72
37908: ST_TO_ADDR
37909: GO 37993
37911: LD_INT 4
37913: DOUBLE
37914: EQUAL
37915: IFTRUE 37919
37917: GO 37992
37919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37920: LD_ADDR_VAR 0 12
37924: PUSH
37925: LD_VAR 0 18
37929: PPUSH
37930: LD_INT 22
37932: PUSH
37933: LD_VAR 0 16
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: LD_INT 30
37947: PUSH
37948: LD_INT 6
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 30
37957: PUSH
37958: LD_INT 7
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 30
37967: PUSH
37968: LD_INT 8
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PPUSH
37985: CALL_OW 72
37989: ST_TO_ADDR
37990: GO 37993
37992: POP
// if i = 1 then
37993: LD_VAR 0 8
37997: PUSH
37998: LD_INT 1
38000: EQUAL
38001: IFFALSE 38112
// begin tmp := [ ] ;
38003: LD_ADDR_VAR 0 19
38007: PUSH
38008: EMPTY
38009: ST_TO_ADDR
// for j in f do
38010: LD_ADDR_VAR 0 9
38014: PUSH
38015: LD_VAR 0 12
38019: PUSH
38020: FOR_IN
38021: IFFALSE 38094
// if GetBType ( j ) = b_bunker then
38023: LD_VAR 0 9
38027: PPUSH
38028: CALL_OW 266
38032: PUSH
38033: LD_INT 32
38035: EQUAL
38036: IFFALSE 38063
// tmp := Insert ( tmp , 1 , j ) else
38038: LD_ADDR_VAR 0 19
38042: PUSH
38043: LD_VAR 0 19
38047: PPUSH
38048: LD_INT 1
38050: PPUSH
38051: LD_VAR 0 9
38055: PPUSH
38056: CALL_OW 2
38060: ST_TO_ADDR
38061: GO 38092
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38063: LD_ADDR_VAR 0 19
38067: PUSH
38068: LD_VAR 0 19
38072: PPUSH
38073: LD_VAR 0 19
38077: PUSH
38078: LD_INT 1
38080: PLUS
38081: PPUSH
38082: LD_VAR 0 9
38086: PPUSH
38087: CALL_OW 2
38091: ST_TO_ADDR
38092: GO 38020
38094: POP
38095: POP
// if tmp then
38096: LD_VAR 0 19
38100: IFFALSE 38112
// f := tmp ;
38102: LD_ADDR_VAR 0 12
38106: PUSH
38107: LD_VAR 0 19
38111: ST_TO_ADDR
// end ; x := personel [ i ] ;
38112: LD_ADDR_VAR 0 13
38116: PUSH
38117: LD_VAR 0 6
38121: PUSH
38122: LD_VAR 0 8
38126: ARRAY
38127: ST_TO_ADDR
// if x = - 1 then
38128: LD_VAR 0 13
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: EQUAL
38137: IFFALSE 38346
// begin for j in f do
38139: LD_ADDR_VAR 0 9
38143: PUSH
38144: LD_VAR 0 12
38148: PUSH
38149: FOR_IN
38150: IFFALSE 38342
// repeat InitHc ;
38152: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38156: LD_VAR 0 9
38160: PPUSH
38161: CALL_OW 266
38165: PUSH
38166: LD_INT 5
38168: EQUAL
38169: IFFALSE 38239
// begin if UnitsInside ( j ) < 3 then
38171: LD_VAR 0 9
38175: PPUSH
38176: CALL_OW 313
38180: PUSH
38181: LD_INT 3
38183: LESS
38184: IFFALSE 38220
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38186: LD_INT 0
38188: PPUSH
38189: LD_INT 5
38191: PUSH
38192: LD_INT 8
38194: PUSH
38195: LD_INT 9
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: PUSH
38203: LD_VAR 0 17
38207: ARRAY
38208: PPUSH
38209: LD_VAR 0 4
38213: PPUSH
38214: CALL_OW 380
38218: GO 38237
// PrepareHuman ( false , i , skill ) ;
38220: LD_INT 0
38222: PPUSH
38223: LD_VAR 0 8
38227: PPUSH
38228: LD_VAR 0 4
38232: PPUSH
38233: CALL_OW 380
// end else
38237: GO 38256
// PrepareHuman ( false , i , skill ) ;
38239: LD_INT 0
38241: PPUSH
38242: LD_VAR 0 8
38246: PPUSH
38247: LD_VAR 0 4
38251: PPUSH
38252: CALL_OW 380
// un := CreateHuman ;
38256: LD_ADDR_VAR 0 14
38260: PUSH
38261: CALL_OW 44
38265: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38266: LD_ADDR_VAR 0 7
38270: PUSH
38271: LD_VAR 0 7
38275: PPUSH
38276: LD_INT 1
38278: PPUSH
38279: LD_VAR 0 14
38283: PPUSH
38284: CALL_OW 2
38288: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38289: LD_VAR 0 14
38293: PPUSH
38294: LD_VAR 0 9
38298: PPUSH
38299: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38303: LD_VAR 0 9
38307: PPUSH
38308: CALL_OW 313
38312: PUSH
38313: LD_INT 6
38315: EQUAL
38316: PUSH
38317: LD_VAR 0 9
38321: PPUSH
38322: CALL_OW 266
38326: PUSH
38327: LD_INT 32
38329: PUSH
38330: LD_INT 31
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: IN
38337: OR
38338: IFFALSE 38152
38340: GO 38149
38342: POP
38343: POP
// end else
38344: GO 38726
// for j = 1 to x do
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: DOUBLE
38352: LD_INT 1
38354: DEC
38355: ST_TO_ADDR
38356: LD_VAR 0 13
38360: PUSH
38361: FOR_TO
38362: IFFALSE 38724
// begin InitHc ;
38364: CALL_OW 19
// if not f then
38368: LD_VAR 0 12
38372: NOT
38373: IFFALSE 38462
// begin PrepareHuman ( false , i , skill ) ;
38375: LD_INT 0
38377: PPUSH
38378: LD_VAR 0 8
38382: PPUSH
38383: LD_VAR 0 4
38387: PPUSH
38388: CALL_OW 380
// un := CreateHuman ;
38392: LD_ADDR_VAR 0 14
38396: PUSH
38397: CALL_OW 44
38401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38402: LD_ADDR_VAR 0 7
38406: PUSH
38407: LD_VAR 0 7
38411: PPUSH
38412: LD_INT 1
38414: PPUSH
38415: LD_VAR 0 14
38419: PPUSH
38420: CALL_OW 2
38424: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38425: LD_VAR 0 14
38429: PPUSH
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 250
38439: PPUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 251
38449: PPUSH
38450: LD_INT 10
38452: PPUSH
38453: LD_INT 0
38455: PPUSH
38456: CALL_OW 50
// continue ;
38460: GO 38361
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38462: LD_VAR 0 12
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: CALL_OW 313
38475: PUSH
38476: LD_VAR 0 12
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PPUSH
38485: CALL_OW 266
38489: PUSH
38490: LD_INT 32
38492: PUSH
38493: LD_INT 31
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: IN
38500: AND
38501: PUSH
38502: LD_VAR 0 12
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: PPUSH
38511: CALL_OW 313
38515: PUSH
38516: LD_INT 6
38518: EQUAL
38519: OR
38520: IFFALSE 38540
// f := Delete ( f , 1 ) ;
38522: LD_ADDR_VAR 0 12
38526: PUSH
38527: LD_VAR 0 12
38531: PPUSH
38532: LD_INT 1
38534: PPUSH
38535: CALL_OW 3
38539: ST_TO_ADDR
// if not f then
38540: LD_VAR 0 12
38544: NOT
38545: IFFALSE 38563
// begin x := x + 2 ;
38547: LD_ADDR_VAR 0 13
38551: PUSH
38552: LD_VAR 0 13
38556: PUSH
38557: LD_INT 2
38559: PLUS
38560: ST_TO_ADDR
// continue ;
38561: GO 38361
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38563: LD_VAR 0 12
38567: PUSH
38568: LD_INT 1
38570: ARRAY
38571: PPUSH
38572: CALL_OW 266
38576: PUSH
38577: LD_INT 5
38579: EQUAL
38580: IFFALSE 38654
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38582: LD_VAR 0 12
38586: PUSH
38587: LD_INT 1
38589: ARRAY
38590: PPUSH
38591: CALL_OW 313
38595: PUSH
38596: LD_INT 3
38598: LESS
38599: IFFALSE 38635
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38601: LD_INT 0
38603: PPUSH
38604: LD_INT 5
38606: PUSH
38607: LD_INT 8
38609: PUSH
38610: LD_INT 9
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: LD_VAR 0 17
38622: ARRAY
38623: PPUSH
38624: LD_VAR 0 4
38628: PPUSH
38629: CALL_OW 380
38633: GO 38652
// PrepareHuman ( false , i , skill ) ;
38635: LD_INT 0
38637: PPUSH
38638: LD_VAR 0 8
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: CALL_OW 380
// end else
38652: GO 38671
// PrepareHuman ( false , i , skill ) ;
38654: LD_INT 0
38656: PPUSH
38657: LD_VAR 0 8
38661: PPUSH
38662: LD_VAR 0 4
38666: PPUSH
38667: CALL_OW 380
// un := CreateHuman ;
38671: LD_ADDR_VAR 0 14
38675: PUSH
38676: CALL_OW 44
38680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38681: LD_ADDR_VAR 0 7
38685: PUSH
38686: LD_VAR 0 7
38690: PPUSH
38691: LD_INT 1
38693: PPUSH
38694: LD_VAR 0 14
38698: PPUSH
38699: CALL_OW 2
38703: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38704: LD_VAR 0 14
38708: PPUSH
38709: LD_VAR 0 12
38713: PUSH
38714: LD_INT 1
38716: ARRAY
38717: PPUSH
38718: CALL_OW 52
// end ;
38722: GO 38361
38724: POP
38725: POP
// end ;
38726: GO 37663
38728: POP
38729: POP
// result := result ^ buildings ;
38730: LD_ADDR_VAR 0 7
38734: PUSH
38735: LD_VAR 0 7
38739: PUSH
38740: LD_VAR 0 18
38744: ADD
38745: ST_TO_ADDR
// end else
38746: GO 38889
// begin for i = 1 to personel do
38748: LD_ADDR_VAR 0 8
38752: PUSH
38753: DOUBLE
38754: LD_INT 1
38756: DEC
38757: ST_TO_ADDR
38758: LD_VAR 0 6
38762: PUSH
38763: FOR_TO
38764: IFFALSE 38887
// begin if i > 4 then
38766: LD_VAR 0 8
38770: PUSH
38771: LD_INT 4
38773: GREATER
38774: IFFALSE 38778
// break ;
38776: GO 38887
// x := personel [ i ] ;
38778: LD_ADDR_VAR 0 13
38782: PUSH
38783: LD_VAR 0 6
38787: PUSH
38788: LD_VAR 0 8
38792: ARRAY
38793: ST_TO_ADDR
// if x = - 1 then
38794: LD_VAR 0 13
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: EQUAL
38803: IFFALSE 38807
// continue ;
38805: GO 38763
// PrepareHuman ( false , i , skill ) ;
38807: LD_INT 0
38809: PPUSH
38810: LD_VAR 0 8
38814: PPUSH
38815: LD_VAR 0 4
38819: PPUSH
38820: CALL_OW 380
// un := CreateHuman ;
38824: LD_ADDR_VAR 0 14
38828: PUSH
38829: CALL_OW 44
38833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38834: LD_VAR 0 14
38838: PPUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: CALL_OW 250
38848: PPUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 251
38858: PPUSH
38859: LD_INT 10
38861: PPUSH
38862: LD_INT 0
38864: PPUSH
38865: CALL_OW 50
// result := result ^ un ;
38869: LD_ADDR_VAR 0 7
38873: PUSH
38874: LD_VAR 0 7
38878: PUSH
38879: LD_VAR 0 14
38883: ADD
38884: ST_TO_ADDR
// end ;
38885: GO 38763
38887: POP
38888: POP
// end ; end ;
38889: LD_VAR 0 7
38893: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38894: LD_INT 0
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
// result := false ;
38912: LD_ADDR_VAR 0 3
38916: PUSH
38917: LD_INT 0
38919: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38920: LD_VAR 0 1
38924: NOT
38925: PUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 266
38935: PUSH
38936: LD_INT 32
38938: PUSH
38939: LD_INT 33
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: IN
38946: NOT
38947: OR
38948: IFFALSE 38952
// exit ;
38950: GO 40061
// nat := GetNation ( tower ) ;
38952: LD_ADDR_VAR 0 12
38956: PUSH
38957: LD_VAR 0 1
38961: PPUSH
38962: CALL_OW 248
38966: ST_TO_ADDR
// side := GetSide ( tower ) ;
38967: LD_ADDR_VAR 0 16
38971: PUSH
38972: LD_VAR 0 1
38976: PPUSH
38977: CALL_OW 255
38981: ST_TO_ADDR
// x := GetX ( tower ) ;
38982: LD_ADDR_VAR 0 10
38986: PUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 250
38996: ST_TO_ADDR
// y := GetY ( tower ) ;
38997: LD_ADDR_VAR 0 11
39001: PUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 251
39011: ST_TO_ADDR
// if not x or not y then
39012: LD_VAR 0 10
39016: NOT
39017: PUSH
39018: LD_VAR 0 11
39022: NOT
39023: OR
39024: IFFALSE 39028
// exit ;
39026: GO 40061
// weapon := 0 ;
39028: LD_ADDR_VAR 0 18
39032: PUSH
39033: LD_INT 0
39035: ST_TO_ADDR
// fac_list := [ ] ;
39036: LD_ADDR_VAR 0 17
39040: PUSH
39041: EMPTY
39042: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39043: LD_ADDR_VAR 0 6
39047: PUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 274
39057: PPUSH
39058: LD_VAR 0 2
39062: PPUSH
39063: LD_INT 0
39065: PPUSH
39066: CALL 36632 0 3
39070: PPUSH
39071: LD_INT 30
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PPUSH
39081: CALL_OW 72
39085: ST_TO_ADDR
// if not factories then
39086: LD_VAR 0 6
39090: NOT
39091: IFFALSE 39095
// exit ;
39093: GO 40061
// for i in factories do
39095: LD_ADDR_VAR 0 8
39099: PUSH
39100: LD_VAR 0 6
39104: PUSH
39105: FOR_IN
39106: IFFALSE 39131
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39108: LD_ADDR_VAR 0 17
39112: PUSH
39113: LD_VAR 0 17
39117: PUSH
39118: LD_VAR 0 8
39122: PPUSH
39123: CALL_OW 478
39127: UNION
39128: ST_TO_ADDR
39129: GO 39105
39131: POP
39132: POP
// if not fac_list then
39133: LD_VAR 0 17
39137: NOT
39138: IFFALSE 39142
// exit ;
39140: GO 40061
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39142: LD_ADDR_VAR 0 5
39146: PUSH
39147: LD_INT 4
39149: PUSH
39150: LD_INT 5
39152: PUSH
39153: LD_INT 9
39155: PUSH
39156: LD_INT 10
39158: PUSH
39159: LD_INT 6
39161: PUSH
39162: LD_INT 7
39164: PUSH
39165: LD_INT 11
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 27
39179: PUSH
39180: LD_INT 28
39182: PUSH
39183: LD_INT 26
39185: PUSH
39186: LD_INT 30
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 43
39197: PUSH
39198: LD_INT 44
39200: PUSH
39201: LD_INT 46
39203: PUSH
39204: LD_INT 45
39206: PUSH
39207: LD_INT 47
39209: PUSH
39210: LD_INT 49
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: PUSH
39226: LD_VAR 0 12
39230: ARRAY
39231: ST_TO_ADDR
// list := list isect fac_list ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_VAR 0 5
39241: PUSH
39242: LD_VAR 0 17
39246: ISECT
39247: ST_TO_ADDR
// if not list then
39248: LD_VAR 0 5
39252: NOT
39253: IFFALSE 39257
// exit ;
39255: GO 40061
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39257: LD_VAR 0 12
39261: PUSH
39262: LD_INT 3
39264: EQUAL
39265: PUSH
39266: LD_INT 49
39268: PUSH
39269: LD_VAR 0 5
39273: IN
39274: AND
39275: PUSH
39276: LD_INT 31
39278: PPUSH
39279: LD_VAR 0 16
39283: PPUSH
39284: CALL_OW 321
39288: PUSH
39289: LD_INT 2
39291: EQUAL
39292: AND
39293: IFFALSE 39353
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39295: LD_INT 22
39297: PUSH
39298: LD_VAR 0 16
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 35
39309: PUSH
39310: LD_INT 49
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 91
39319: PUSH
39320: LD_VAR 0 1
39324: PUSH
39325: LD_INT 10
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: PPUSH
39338: CALL_OW 69
39342: NOT
39343: IFFALSE 39353
// weapon := ru_time_lapser ;
39345: LD_ADDR_VAR 0 18
39349: PUSH
39350: LD_INT 49
39352: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39353: LD_VAR 0 12
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: IN
39368: PUSH
39369: LD_INT 11
39371: PUSH
39372: LD_VAR 0 5
39376: IN
39377: PUSH
39378: LD_INT 30
39380: PUSH
39381: LD_VAR 0 5
39385: IN
39386: OR
39387: AND
39388: PUSH
39389: LD_INT 6
39391: PPUSH
39392: LD_VAR 0 16
39396: PPUSH
39397: CALL_OW 321
39401: PUSH
39402: LD_INT 2
39404: EQUAL
39405: AND
39406: IFFALSE 39571
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39408: LD_INT 22
39410: PUSH
39411: LD_VAR 0 16
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 35
39425: PUSH
39426: LD_INT 11
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 35
39435: PUSH
39436: LD_INT 30
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 91
39450: PUSH
39451: LD_VAR 0 1
39455: PUSH
39456: LD_INT 18
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PPUSH
39469: CALL_OW 69
39473: NOT
39474: PUSH
39475: LD_INT 22
39477: PUSH
39478: LD_VAR 0 16
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 30
39492: PUSH
39493: LD_INT 32
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 30
39502: PUSH
39503: LD_INT 33
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 91
39517: PUSH
39518: LD_VAR 0 1
39522: PUSH
39523: LD_INT 12
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: PUSH
39536: EMPTY
39537: LIST
39538: PPUSH
39539: CALL_OW 69
39543: PUSH
39544: LD_INT 2
39546: GREATER
39547: AND
39548: IFFALSE 39571
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39550: LD_ADDR_VAR 0 18
39554: PUSH
39555: LD_INT 11
39557: PUSH
39558: LD_INT 30
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_VAR 0 12
39569: ARRAY
39570: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39571: LD_VAR 0 18
39575: NOT
39576: PUSH
39577: LD_INT 40
39579: PPUSH
39580: LD_VAR 0 16
39584: PPUSH
39585: CALL_OW 321
39589: PUSH
39590: LD_INT 2
39592: EQUAL
39593: AND
39594: PUSH
39595: LD_INT 7
39597: PUSH
39598: LD_VAR 0 5
39602: IN
39603: PUSH
39604: LD_INT 28
39606: PUSH
39607: LD_VAR 0 5
39611: IN
39612: OR
39613: PUSH
39614: LD_INT 45
39616: PUSH
39617: LD_VAR 0 5
39621: IN
39622: OR
39623: AND
39624: IFFALSE 39878
// begin hex := GetHexInfo ( x , y ) ;
39626: LD_ADDR_VAR 0 4
39630: PUSH
39631: LD_VAR 0 10
39635: PPUSH
39636: LD_VAR 0 11
39640: PPUSH
39641: CALL_OW 546
39645: ST_TO_ADDR
// if hex [ 1 ] then
39646: LD_VAR 0 4
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: IFFALSE 39658
// exit ;
39656: GO 40061
// height := hex [ 2 ] ;
39658: LD_ADDR_VAR 0 15
39662: PUSH
39663: LD_VAR 0 4
39667: PUSH
39668: LD_INT 2
39670: ARRAY
39671: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39672: LD_ADDR_VAR 0 14
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// for i in tmp do
39695: LD_ADDR_VAR 0 8
39699: PUSH
39700: LD_VAR 0 14
39704: PUSH
39705: FOR_IN
39706: IFFALSE 39876
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39708: LD_ADDR_VAR 0 9
39712: PUSH
39713: LD_VAR 0 10
39717: PPUSH
39718: LD_VAR 0 8
39722: PPUSH
39723: LD_INT 5
39725: PPUSH
39726: CALL_OW 272
39730: PUSH
39731: LD_VAR 0 11
39735: PPUSH
39736: LD_VAR 0 8
39740: PPUSH
39741: LD_INT 5
39743: PPUSH
39744: CALL_OW 273
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39753: LD_VAR 0 9
39757: PUSH
39758: LD_INT 1
39760: ARRAY
39761: PPUSH
39762: LD_VAR 0 9
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: PPUSH
39771: CALL_OW 488
39775: IFFALSE 39874
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39777: LD_ADDR_VAR 0 4
39781: PUSH
39782: LD_VAR 0 9
39786: PUSH
39787: LD_INT 1
39789: ARRAY
39790: PPUSH
39791: LD_VAR 0 9
39795: PUSH
39796: LD_INT 2
39798: ARRAY
39799: PPUSH
39800: CALL_OW 546
39804: ST_TO_ADDR
// if hex [ 1 ] then
39805: LD_VAR 0 4
39809: PUSH
39810: LD_INT 1
39812: ARRAY
39813: IFFALSE 39817
// continue ;
39815: GO 39705
// h := hex [ 2 ] ;
39817: LD_ADDR_VAR 0 13
39821: PUSH
39822: LD_VAR 0 4
39826: PUSH
39827: LD_INT 2
39829: ARRAY
39830: ST_TO_ADDR
// if h + 7 < height then
39831: LD_VAR 0 13
39835: PUSH
39836: LD_INT 7
39838: PLUS
39839: PUSH
39840: LD_VAR 0 15
39844: LESS
39845: IFFALSE 39874
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39847: LD_ADDR_VAR 0 18
39851: PUSH
39852: LD_INT 7
39854: PUSH
39855: LD_INT 28
39857: PUSH
39858: LD_INT 45
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: PUSH
39866: LD_VAR 0 12
39870: ARRAY
39871: ST_TO_ADDR
// break ;
39872: GO 39876
// end ; end ; end ;
39874: GO 39705
39876: POP
39877: POP
// end ; if not weapon then
39878: LD_VAR 0 18
39882: NOT
39883: IFFALSE 39943
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: LD_VAR 0 5
39894: PUSH
39895: LD_INT 11
39897: PUSH
39898: LD_INT 30
39900: PUSH
39901: LD_INT 49
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: LIST
39908: DIFF
39909: ST_TO_ADDR
// if not list then
39910: LD_VAR 0 5
39914: NOT
39915: IFFALSE 39919
// exit ;
39917: GO 40061
// weapon := list [ rand ( 1 , list ) ] ;
39919: LD_ADDR_VAR 0 18
39923: PUSH
39924: LD_VAR 0 5
39928: PUSH
39929: LD_INT 1
39931: PPUSH
39932: LD_VAR 0 5
39936: PPUSH
39937: CALL_OW 12
39941: ARRAY
39942: ST_TO_ADDR
// end ; if weapon then
39943: LD_VAR 0 18
39947: IFFALSE 40061
// begin tmp := CostOfWeapon ( weapon ) ;
39949: LD_ADDR_VAR 0 14
39953: PUSH
39954: LD_VAR 0 18
39958: PPUSH
39959: CALL_OW 451
39963: ST_TO_ADDR
// j := GetBase ( tower ) ;
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 274
39978: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39979: LD_VAR 0 9
39983: PPUSH
39984: LD_INT 1
39986: PPUSH
39987: CALL_OW 275
39991: PUSH
39992: LD_VAR 0 14
39996: PUSH
39997: LD_INT 1
39999: ARRAY
40000: GREATEREQUAL
40001: PUSH
40002: LD_VAR 0 9
40006: PPUSH
40007: LD_INT 2
40009: PPUSH
40010: CALL_OW 275
40014: PUSH
40015: LD_VAR 0 14
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: GREATEREQUAL
40024: AND
40025: PUSH
40026: LD_VAR 0 9
40030: PPUSH
40031: LD_INT 3
40033: PPUSH
40034: CALL_OW 275
40038: PUSH
40039: LD_VAR 0 14
40043: PUSH
40044: LD_INT 3
40046: ARRAY
40047: GREATEREQUAL
40048: AND
40049: IFFALSE 40061
// result := weapon ;
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_VAR 0 18
40060: ST_TO_ADDR
// end ; end ;
40061: LD_VAR 0 3
40065: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40066: LD_INT 0
40068: PPUSH
40069: PPUSH
// result := true ;
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_INT 1
40077: ST_TO_ADDR
// if array1 = array2 then
40078: LD_VAR 0 1
40082: PUSH
40083: LD_VAR 0 2
40087: EQUAL
40088: IFFALSE 40148
// begin for i = 1 to array1 do
40090: LD_ADDR_VAR 0 4
40094: PUSH
40095: DOUBLE
40096: LD_INT 1
40098: DEC
40099: ST_TO_ADDR
40100: LD_VAR 0 1
40104: PUSH
40105: FOR_TO
40106: IFFALSE 40144
// if array1 [ i ] <> array2 [ i ] then
40108: LD_VAR 0 1
40112: PUSH
40113: LD_VAR 0 4
40117: ARRAY
40118: PUSH
40119: LD_VAR 0 2
40123: PUSH
40124: LD_VAR 0 4
40128: ARRAY
40129: NONEQUAL
40130: IFFALSE 40142
// begin result := false ;
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_INT 0
40139: ST_TO_ADDR
// break ;
40140: GO 40144
// end ;
40142: GO 40105
40144: POP
40145: POP
// end else
40146: GO 40156
// result := false ;
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_INT 0
40155: ST_TO_ADDR
// end ;
40156: LD_VAR 0 3
40160: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40161: LD_INT 0
40163: PPUSH
40164: PPUSH
// if not array1 or not array2 then
40165: LD_VAR 0 1
40169: NOT
40170: PUSH
40171: LD_VAR 0 2
40175: NOT
40176: OR
40177: IFFALSE 40181
// exit ;
40179: GO 40245
// result := true ;
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_INT 1
40188: ST_TO_ADDR
// for i = 1 to array1 do
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: DOUBLE
40195: LD_INT 1
40197: DEC
40198: ST_TO_ADDR
40199: LD_VAR 0 1
40203: PUSH
40204: FOR_TO
40205: IFFALSE 40243
// if array1 [ i ] <> array2 [ i ] then
40207: LD_VAR 0 1
40211: PUSH
40212: LD_VAR 0 4
40216: ARRAY
40217: PUSH
40218: LD_VAR 0 2
40222: PUSH
40223: LD_VAR 0 4
40227: ARRAY
40228: NONEQUAL
40229: IFFALSE 40241
// begin result := false ;
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 0
40238: ST_TO_ADDR
// break ;
40239: GO 40243
// end ;
40241: GO 40204
40243: POP
40244: POP
// end ;
40245: LD_VAR 0 3
40249: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40250: LD_INT 0
40252: PPUSH
40253: PPUSH
40254: PPUSH
// pom := GetBase ( fac ) ;
40255: LD_ADDR_VAR 0 5
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 274
40269: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40270: LD_ADDR_VAR 0 4
40274: PUSH
40275: LD_VAR 0 2
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 2
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: PPUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_INT 3
40300: ARRAY
40301: PPUSH
40302: LD_VAR 0 2
40306: PUSH
40307: LD_INT 4
40309: ARRAY
40310: PPUSH
40311: CALL_OW 449
40315: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40316: LD_ADDR_VAR 0 3
40320: PUSH
40321: LD_VAR 0 5
40325: PPUSH
40326: LD_INT 1
40328: PPUSH
40329: CALL_OW 275
40333: PUSH
40334: LD_VAR 0 4
40338: PUSH
40339: LD_INT 1
40341: ARRAY
40342: GREATEREQUAL
40343: PUSH
40344: LD_VAR 0 5
40348: PPUSH
40349: LD_INT 2
40351: PPUSH
40352: CALL_OW 275
40356: PUSH
40357: LD_VAR 0 4
40361: PUSH
40362: LD_INT 2
40364: ARRAY
40365: GREATEREQUAL
40366: AND
40367: PUSH
40368: LD_VAR 0 5
40372: PPUSH
40373: LD_INT 3
40375: PPUSH
40376: CALL_OW 275
40380: PUSH
40381: LD_VAR 0 4
40385: PUSH
40386: LD_INT 3
40388: ARRAY
40389: GREATEREQUAL
40390: AND
40391: ST_TO_ADDR
// end ;
40392: LD_VAR 0 3
40396: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40397: LD_INT 0
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
// pom := GetBase ( building ) ;
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 274
40417: ST_TO_ADDR
// if not pom then
40418: LD_VAR 0 3
40422: NOT
40423: IFFALSE 40427
// exit ;
40425: GO 40597
// btype := GetBType ( building ) ;
40427: LD_ADDR_VAR 0 5
40431: PUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 266
40441: ST_TO_ADDR
// if btype = b_armoury then
40442: LD_VAR 0 5
40446: PUSH
40447: LD_INT 4
40449: EQUAL
40450: IFFALSE 40460
// btype := b_barracks ;
40452: LD_ADDR_VAR 0 5
40456: PUSH
40457: LD_INT 5
40459: ST_TO_ADDR
// if btype = b_depot then
40460: LD_VAR 0 5
40464: PUSH
40465: LD_INT 0
40467: EQUAL
40468: IFFALSE 40478
// btype := b_warehouse ;
40470: LD_ADDR_VAR 0 5
40474: PUSH
40475: LD_INT 1
40477: ST_TO_ADDR
// if btype = b_workshop then
40478: LD_VAR 0 5
40482: PUSH
40483: LD_INT 2
40485: EQUAL
40486: IFFALSE 40496
// btype := b_factory ;
40488: LD_ADDR_VAR 0 5
40492: PUSH
40493: LD_INT 3
40495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40496: LD_ADDR_VAR 0 4
40500: PUSH
40501: LD_VAR 0 5
40505: PPUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: CALL_OW 248
40515: PPUSH
40516: CALL_OW 450
40520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40521: LD_ADDR_VAR 0 2
40525: PUSH
40526: LD_VAR 0 3
40530: PPUSH
40531: LD_INT 1
40533: PPUSH
40534: CALL_OW 275
40538: PUSH
40539: LD_VAR 0 4
40543: PUSH
40544: LD_INT 1
40546: ARRAY
40547: GREATEREQUAL
40548: PUSH
40549: LD_VAR 0 3
40553: PPUSH
40554: LD_INT 2
40556: PPUSH
40557: CALL_OW 275
40561: PUSH
40562: LD_VAR 0 4
40566: PUSH
40567: LD_INT 2
40569: ARRAY
40570: GREATEREQUAL
40571: AND
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: LD_INT 3
40580: PPUSH
40581: CALL_OW 275
40585: PUSH
40586: LD_VAR 0 4
40590: PUSH
40591: LD_INT 3
40593: ARRAY
40594: GREATEREQUAL
40595: AND
40596: ST_TO_ADDR
// end ;
40597: LD_VAR 0 2
40601: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
40606: PPUSH
// pom := GetBase ( building ) ;
40607: LD_ADDR_VAR 0 4
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: CALL_OW 274
40621: ST_TO_ADDR
// if not pom then
40622: LD_VAR 0 4
40626: NOT
40627: IFFALSE 40631
// exit ;
40629: GO 40732
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40631: LD_ADDR_VAR 0 5
40635: PUSH
40636: LD_VAR 0 2
40640: PPUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 248
40650: PPUSH
40651: CALL_OW 450
40655: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 4
40665: PPUSH
40666: LD_INT 1
40668: PPUSH
40669: CALL_OW 275
40673: PUSH
40674: LD_VAR 0 5
40678: PUSH
40679: LD_INT 1
40681: ARRAY
40682: GREATEREQUAL
40683: PUSH
40684: LD_VAR 0 4
40688: PPUSH
40689: LD_INT 2
40691: PPUSH
40692: CALL_OW 275
40696: PUSH
40697: LD_VAR 0 5
40701: PUSH
40702: LD_INT 2
40704: ARRAY
40705: GREATEREQUAL
40706: AND
40707: PUSH
40708: LD_VAR 0 4
40712: PPUSH
40713: LD_INT 3
40715: PPUSH
40716: CALL_OW 275
40720: PUSH
40721: LD_VAR 0 5
40725: PUSH
40726: LD_INT 3
40728: ARRAY
40729: GREATEREQUAL
40730: AND
40731: ST_TO_ADDR
// end ;
40732: LD_VAR 0 3
40736: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40737: LD_INT 0
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
// result := false ;
40750: LD_ADDR_VAR 0 8
40754: PUSH
40755: LD_INT 0
40757: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40758: LD_VAR 0 5
40762: NOT
40763: PUSH
40764: LD_VAR 0 1
40768: NOT
40769: OR
40770: PUSH
40771: LD_VAR 0 2
40775: NOT
40776: OR
40777: PUSH
40778: LD_VAR 0 3
40782: NOT
40783: OR
40784: IFFALSE 40788
// exit ;
40786: GO 41602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40788: LD_ADDR_VAR 0 14
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: LD_VAR 0 2
40802: PPUSH
40803: LD_VAR 0 3
40807: PPUSH
40808: LD_VAR 0 4
40812: PPUSH
40813: LD_VAR 0 5
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PPUSH
40822: CALL_OW 248
40826: PPUSH
40827: LD_INT 0
40829: PPUSH
40830: CALL 42839 0 6
40834: ST_TO_ADDR
// if not hexes then
40835: LD_VAR 0 14
40839: NOT
40840: IFFALSE 40844
// exit ;
40842: GO 41602
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40844: LD_ADDR_VAR 0 17
40848: PUSH
40849: LD_VAR 0 5
40853: PPUSH
40854: LD_INT 22
40856: PUSH
40857: LD_VAR 0 13
40861: PPUSH
40862: CALL_OW 255
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 30
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PPUSH
40903: CALL_OW 72
40907: ST_TO_ADDR
// for i = 1 to hexes do
40908: LD_ADDR_VAR 0 9
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_VAR 0 14
40922: PUSH
40923: FOR_TO
40924: IFFALSE 41600
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40926: LD_ADDR_VAR 0 13
40930: PUSH
40931: LD_VAR 0 14
40935: PUSH
40936: LD_VAR 0 9
40940: ARRAY
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: PPUSH
40946: LD_VAR 0 14
40950: PUSH
40951: LD_VAR 0 9
40955: ARRAY
40956: PUSH
40957: LD_INT 2
40959: ARRAY
40960: PPUSH
40961: CALL_OW 428
40965: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40966: LD_VAR 0 14
40970: PUSH
40971: LD_VAR 0 9
40975: ARRAY
40976: PUSH
40977: LD_INT 1
40979: ARRAY
40980: PPUSH
40981: LD_VAR 0 14
40985: PUSH
40986: LD_VAR 0 9
40990: ARRAY
40991: PUSH
40992: LD_INT 2
40994: ARRAY
40995: PPUSH
40996: CALL_OW 351
41000: PUSH
41001: LD_VAR 0 14
41005: PUSH
41006: LD_VAR 0 9
41010: ARRAY
41011: PUSH
41012: LD_INT 1
41014: ARRAY
41015: PPUSH
41016: LD_VAR 0 14
41020: PUSH
41021: LD_VAR 0 9
41025: ARRAY
41026: PUSH
41027: LD_INT 2
41029: ARRAY
41030: PPUSH
41031: CALL_OW 488
41035: NOT
41036: OR
41037: PUSH
41038: LD_VAR 0 13
41042: PPUSH
41043: CALL_OW 247
41047: PUSH
41048: LD_INT 3
41050: EQUAL
41051: OR
41052: IFFALSE 41058
// exit ;
41054: POP
41055: POP
41056: GO 41602
// if not tmp then
41058: LD_VAR 0 13
41062: NOT
41063: IFFALSE 41067
// continue ;
41065: GO 40923
// result := true ;
41067: LD_ADDR_VAR 0 8
41071: PUSH
41072: LD_INT 1
41074: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41075: LD_VAR 0 6
41079: PUSH
41080: LD_VAR 0 13
41084: PPUSH
41085: CALL_OW 247
41089: PUSH
41090: LD_INT 2
41092: EQUAL
41093: AND
41094: PUSH
41095: LD_VAR 0 13
41099: PPUSH
41100: CALL_OW 263
41104: PUSH
41105: LD_INT 1
41107: EQUAL
41108: AND
41109: IFFALSE 41273
// begin if IsDrivenBy ( tmp ) then
41111: LD_VAR 0 13
41115: PPUSH
41116: CALL_OW 311
41120: IFFALSE 41124
// continue ;
41122: GO 40923
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41124: LD_VAR 0 6
41128: PPUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 60
41134: PUSH
41135: EMPTY
41136: LIST
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: LD_INT 55
41147: PUSH
41148: EMPTY
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 72
41163: IFFALSE 41271
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41165: LD_ADDR_VAR 0 18
41169: PUSH
41170: LD_VAR 0 6
41174: PPUSH
41175: LD_INT 3
41177: PUSH
41178: LD_INT 60
41180: PUSH
41181: EMPTY
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: LD_INT 55
41193: PUSH
41194: EMPTY
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PPUSH
41205: CALL_OW 72
41209: PUSH
41210: LD_INT 1
41212: ARRAY
41213: ST_TO_ADDR
// if IsInUnit ( driver ) then
41214: LD_VAR 0 18
41218: PPUSH
41219: CALL_OW 310
41223: IFFALSE 41234
// ComExit ( driver ) ;
41225: LD_VAR 0 18
41229: PPUSH
41230: CALL 66023 0 1
// AddComEnterUnit ( driver , tmp ) ;
41234: LD_VAR 0 18
41238: PPUSH
41239: LD_VAR 0 13
41243: PPUSH
41244: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41248: LD_VAR 0 18
41252: PPUSH
41253: LD_VAR 0 7
41257: PPUSH
41258: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41262: LD_VAR 0 18
41266: PPUSH
41267: CALL_OW 181
// end ; continue ;
41271: GO 40923
// end ; if not cleaners or not tmp in cleaners then
41273: LD_VAR 0 6
41277: NOT
41278: PUSH
41279: LD_VAR 0 13
41283: PUSH
41284: LD_VAR 0 6
41288: IN
41289: NOT
41290: OR
41291: IFFALSE 41598
// begin if dep then
41293: LD_VAR 0 17
41297: IFFALSE 41433
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41299: LD_ADDR_VAR 0 16
41303: PUSH
41304: LD_VAR 0 17
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: CALL_OW 250
41317: PPUSH
41318: LD_VAR 0 17
41322: PUSH
41323: LD_INT 1
41325: ARRAY
41326: PPUSH
41327: CALL_OW 254
41331: PPUSH
41332: LD_INT 5
41334: PPUSH
41335: CALL_OW 272
41339: PUSH
41340: LD_VAR 0 17
41344: PUSH
41345: LD_INT 1
41347: ARRAY
41348: PPUSH
41349: CALL_OW 251
41353: PPUSH
41354: LD_VAR 0 17
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: PPUSH
41363: CALL_OW 254
41367: PPUSH
41368: LD_INT 5
41370: PPUSH
41371: CALL_OW 273
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41380: LD_VAR 0 16
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 16
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: PPUSH
41398: CALL_OW 488
41402: IFFALSE 41433
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41404: LD_VAR 0 13
41408: PPUSH
41409: LD_VAR 0 16
41413: PUSH
41414: LD_INT 1
41416: ARRAY
41417: PPUSH
41418: LD_VAR 0 16
41422: PUSH
41423: LD_INT 2
41425: ARRAY
41426: PPUSH
41427: CALL_OW 111
// continue ;
41431: GO 40923
// end ; end ; r := GetDir ( tmp ) ;
41433: LD_ADDR_VAR 0 15
41437: PUSH
41438: LD_VAR 0 13
41442: PPUSH
41443: CALL_OW 254
41447: ST_TO_ADDR
// if r = 5 then
41448: LD_VAR 0 15
41452: PUSH
41453: LD_INT 5
41455: EQUAL
41456: IFFALSE 41466
// r := 0 ;
41458: LD_ADDR_VAR 0 15
41462: PUSH
41463: LD_INT 0
41465: ST_TO_ADDR
// for j = r to 5 do
41466: LD_ADDR_VAR 0 10
41470: PUSH
41471: DOUBLE
41472: LD_VAR 0 15
41476: DEC
41477: ST_TO_ADDR
41478: LD_INT 5
41480: PUSH
41481: FOR_TO
41482: IFFALSE 41596
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41484: LD_ADDR_VAR 0 11
41488: PUSH
41489: LD_VAR 0 13
41493: PPUSH
41494: CALL_OW 250
41498: PPUSH
41499: LD_VAR 0 10
41503: PPUSH
41504: LD_INT 2
41506: PPUSH
41507: CALL_OW 272
41511: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41512: LD_ADDR_VAR 0 12
41516: PUSH
41517: LD_VAR 0 13
41521: PPUSH
41522: CALL_OW 251
41526: PPUSH
41527: LD_VAR 0 10
41531: PPUSH
41532: LD_INT 2
41534: PPUSH
41535: CALL_OW 273
41539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41540: LD_VAR 0 11
41544: PPUSH
41545: LD_VAR 0 12
41549: PPUSH
41550: CALL_OW 488
41554: PUSH
41555: LD_VAR 0 11
41559: PPUSH
41560: LD_VAR 0 12
41564: PPUSH
41565: CALL_OW 428
41569: NOT
41570: AND
41571: IFFALSE 41594
// begin ComMoveXY ( tmp , _x , _y ) ;
41573: LD_VAR 0 13
41577: PPUSH
41578: LD_VAR 0 11
41582: PPUSH
41583: LD_VAR 0 12
41587: PPUSH
41588: CALL_OW 111
// break ;
41592: GO 41596
// end ; end ;
41594: GO 41481
41596: POP
41597: POP
// end ; end ;
41598: GO 40923
41600: POP
41601: POP
// end ;
41602: LD_VAR 0 8
41606: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41607: LD_INT 0
41609: PPUSH
// result := true ;
41610: LD_ADDR_VAR 0 3
41614: PUSH
41615: LD_INT 1
41617: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41618: LD_VAR 0 2
41622: PUSH
41623: LD_INT 24
41625: DOUBLE
41626: EQUAL
41627: IFTRUE 41637
41629: LD_INT 33
41631: DOUBLE
41632: EQUAL
41633: IFTRUE 41637
41635: GO 41662
41637: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41638: LD_ADDR_VAR 0 3
41642: PUSH
41643: LD_INT 32
41645: PPUSH
41646: LD_VAR 0 1
41650: PPUSH
41651: CALL_OW 321
41655: PUSH
41656: LD_INT 2
41658: EQUAL
41659: ST_TO_ADDR
41660: GO 41982
41662: LD_INT 20
41664: DOUBLE
41665: EQUAL
41666: IFTRUE 41670
41668: GO 41695
41670: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41671: LD_ADDR_VAR 0 3
41675: PUSH
41676: LD_INT 6
41678: PPUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 321
41688: PUSH
41689: LD_INT 2
41691: EQUAL
41692: ST_TO_ADDR
41693: GO 41982
41695: LD_INT 22
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41709
41701: LD_INT 36
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41709
41707: GO 41734
41709: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 15
41717: PPUSH
41718: LD_VAR 0 1
41722: PPUSH
41723: CALL_OW 321
41727: PUSH
41728: LD_INT 2
41730: EQUAL
41731: ST_TO_ADDR
41732: GO 41982
41734: LD_INT 30
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41767
41742: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: LD_INT 20
41750: PPUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL_OW 321
41760: PUSH
41761: LD_INT 2
41763: EQUAL
41764: ST_TO_ADDR
41765: GO 41982
41767: LD_INT 28
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41781
41773: LD_INT 21
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41781
41779: GO 41806
41781: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_INT 21
41789: PPUSH
41790: LD_VAR 0 1
41794: PPUSH
41795: CALL_OW 321
41799: PUSH
41800: LD_INT 2
41802: EQUAL
41803: ST_TO_ADDR
41804: GO 41982
41806: LD_INT 16
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41814
41812: GO 41841
41814: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41815: LD_ADDR_VAR 0 3
41819: PUSH
41820: LD_EXP 118
41824: PPUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 321
41834: PUSH
41835: LD_INT 2
41837: EQUAL
41838: ST_TO_ADDR
41839: GO 41982
41841: LD_INT 19
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41855
41847: LD_INT 23
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41882
41855: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_EXP 117
41865: PPUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 321
41875: PUSH
41876: LD_INT 2
41878: EQUAL
41879: ST_TO_ADDR
41880: GO 41982
41882: LD_INT 17
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41890
41888: GO 41915
41890: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_INT 39
41898: PPUSH
41899: LD_VAR 0 1
41903: PPUSH
41904: CALL_OW 321
41908: PUSH
41909: LD_INT 2
41911: EQUAL
41912: ST_TO_ADDR
41913: GO 41982
41915: LD_INT 18
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41948
41923: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 40
41931: PPUSH
41932: LD_VAR 0 1
41936: PPUSH
41937: CALL_OW 321
41941: PUSH
41942: LD_INT 2
41944: EQUAL
41945: ST_TO_ADDR
41946: GO 41982
41948: LD_INT 27
41950: DOUBLE
41951: EQUAL
41952: IFTRUE 41956
41954: GO 41981
41956: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41957: LD_ADDR_VAR 0 3
41961: PUSH
41962: LD_INT 35
41964: PPUSH
41965: LD_VAR 0 1
41969: PPUSH
41970: CALL_OW 321
41974: PUSH
41975: LD_INT 2
41977: EQUAL
41978: ST_TO_ADDR
41979: GO 41982
41981: POP
// end ;
41982: LD_VAR 0 3
41986: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41987: LD_INT 0
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
// result := false ;
42000: LD_ADDR_VAR 0 6
42004: PUSH
42005: LD_INT 0
42007: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42008: LD_VAR 0 1
42012: NOT
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 266
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: IN
42034: NOT
42035: OR
42036: PUSH
42037: LD_VAR 0 2
42041: NOT
42042: OR
42043: PUSH
42044: LD_VAR 0 5
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 4
42063: PUSH
42064: LD_INT 5
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: IN
42075: NOT
42076: OR
42077: PUSH
42078: LD_VAR 0 3
42082: PPUSH
42083: LD_VAR 0 4
42087: PPUSH
42088: CALL_OW 488
42092: NOT
42093: OR
42094: IFFALSE 42098
// exit ;
42096: GO 42834
// side := GetSide ( depot ) ;
42098: LD_ADDR_VAR 0 9
42102: PUSH
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 255
42112: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42113: LD_VAR 0 9
42117: PPUSH
42118: LD_VAR 0 2
42122: PPUSH
42123: CALL 41607 0 2
42127: NOT
42128: IFFALSE 42132
// exit ;
42130: GO 42834
// pom := GetBase ( depot ) ;
42132: LD_ADDR_VAR 0 10
42136: PUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 274
42146: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42147: LD_ADDR_VAR 0 11
42151: PUSH
42152: LD_VAR 0 2
42156: PPUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 248
42166: PPUSH
42167: CALL_OW 450
42171: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42172: LD_VAR 0 10
42176: PPUSH
42177: LD_INT 1
42179: PPUSH
42180: CALL_OW 275
42184: PUSH
42185: LD_VAR 0 11
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: GREATEREQUAL
42194: PUSH
42195: LD_VAR 0 10
42199: PPUSH
42200: LD_INT 2
42202: PPUSH
42203: CALL_OW 275
42207: PUSH
42208: LD_VAR 0 11
42212: PUSH
42213: LD_INT 2
42215: ARRAY
42216: GREATEREQUAL
42217: AND
42218: PUSH
42219: LD_VAR 0 10
42223: PPUSH
42224: LD_INT 3
42226: PPUSH
42227: CALL_OW 275
42231: PUSH
42232: LD_VAR 0 11
42236: PUSH
42237: LD_INT 3
42239: ARRAY
42240: GREATEREQUAL
42241: AND
42242: NOT
42243: IFFALSE 42247
// exit ;
42245: GO 42834
// if GetBType ( depot ) = b_depot then
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 266
42256: PUSH
42257: LD_INT 0
42259: EQUAL
42260: IFFALSE 42272
// dist := 28 else
42262: LD_ADDR_VAR 0 14
42266: PUSH
42267: LD_INT 28
42269: ST_TO_ADDR
42270: GO 42280
// dist := 36 ;
42272: LD_ADDR_VAR 0 14
42276: PUSH
42277: LD_INT 36
42279: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42280: LD_VAR 0 1
42284: PPUSH
42285: LD_VAR 0 3
42289: PPUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: CALL_OW 297
42299: PUSH
42300: LD_VAR 0 14
42304: GREATER
42305: IFFALSE 42309
// exit ;
42307: GO 42834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42309: LD_ADDR_VAR 0 12
42313: PUSH
42314: LD_VAR 0 2
42318: PPUSH
42319: LD_VAR 0 3
42323: PPUSH
42324: LD_VAR 0 4
42328: PPUSH
42329: LD_VAR 0 5
42333: PPUSH
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL_OW 248
42343: PPUSH
42344: LD_INT 0
42346: PPUSH
42347: CALL 42839 0 6
42351: ST_TO_ADDR
// if not hexes then
42352: LD_VAR 0 12
42356: NOT
42357: IFFALSE 42361
// exit ;
42359: GO 42834
// hex := GetHexInfo ( x , y ) ;
42361: LD_ADDR_VAR 0 15
42365: PUSH
42366: LD_VAR 0 3
42370: PPUSH
42371: LD_VAR 0 4
42375: PPUSH
42376: CALL_OW 546
42380: ST_TO_ADDR
// if hex [ 1 ] then
42381: LD_VAR 0 15
42385: PUSH
42386: LD_INT 1
42388: ARRAY
42389: IFFALSE 42393
// exit ;
42391: GO 42834
// height := hex [ 2 ] ;
42393: LD_ADDR_VAR 0 13
42397: PUSH
42398: LD_VAR 0 15
42402: PUSH
42403: LD_INT 2
42405: ARRAY
42406: ST_TO_ADDR
// for i = 1 to hexes do
42407: LD_ADDR_VAR 0 7
42411: PUSH
42412: DOUBLE
42413: LD_INT 1
42415: DEC
42416: ST_TO_ADDR
42417: LD_VAR 0 12
42421: PUSH
42422: FOR_TO
42423: IFFALSE 42753
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42425: LD_VAR 0 12
42429: PUSH
42430: LD_VAR 0 7
42434: ARRAY
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: PPUSH
42440: LD_VAR 0 12
42444: PUSH
42445: LD_VAR 0 7
42449: ARRAY
42450: PUSH
42451: LD_INT 2
42453: ARRAY
42454: PPUSH
42455: CALL_OW 488
42459: NOT
42460: PUSH
42461: LD_VAR 0 12
42465: PUSH
42466: LD_VAR 0 7
42470: ARRAY
42471: PUSH
42472: LD_INT 1
42474: ARRAY
42475: PPUSH
42476: LD_VAR 0 12
42480: PUSH
42481: LD_VAR 0 7
42485: ARRAY
42486: PUSH
42487: LD_INT 2
42489: ARRAY
42490: PPUSH
42491: CALL_OW 428
42495: PUSH
42496: LD_INT 0
42498: GREATER
42499: OR
42500: PUSH
42501: LD_VAR 0 12
42505: PUSH
42506: LD_VAR 0 7
42510: ARRAY
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: PPUSH
42516: LD_VAR 0 12
42520: PUSH
42521: LD_VAR 0 7
42525: ARRAY
42526: PUSH
42527: LD_INT 2
42529: ARRAY
42530: PPUSH
42531: CALL_OW 351
42535: OR
42536: IFFALSE 42542
// exit ;
42538: POP
42539: POP
42540: GO 42834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42542: LD_ADDR_VAR 0 8
42546: PUSH
42547: LD_VAR 0 12
42551: PUSH
42552: LD_VAR 0 7
42556: ARRAY
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: PPUSH
42562: LD_VAR 0 12
42566: PUSH
42567: LD_VAR 0 7
42571: ARRAY
42572: PUSH
42573: LD_INT 2
42575: ARRAY
42576: PPUSH
42577: CALL_OW 546
42581: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42582: LD_VAR 0 8
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: PUSH
42591: LD_VAR 0 8
42595: PUSH
42596: LD_INT 2
42598: ARRAY
42599: PUSH
42600: LD_VAR 0 13
42604: PUSH
42605: LD_INT 2
42607: PLUS
42608: GREATER
42609: OR
42610: PUSH
42611: LD_VAR 0 8
42615: PUSH
42616: LD_INT 2
42618: ARRAY
42619: PUSH
42620: LD_VAR 0 13
42624: PUSH
42625: LD_INT 2
42627: MINUS
42628: LESS
42629: OR
42630: PUSH
42631: LD_VAR 0 8
42635: PUSH
42636: LD_INT 3
42638: ARRAY
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 8
42645: PUSH
42646: LD_INT 9
42648: PUSH
42649: LD_INT 10
42651: PUSH
42652: LD_INT 11
42654: PUSH
42655: LD_INT 12
42657: PUSH
42658: LD_INT 13
42660: PUSH
42661: LD_INT 16
42663: PUSH
42664: LD_INT 17
42666: PUSH
42667: LD_INT 18
42669: PUSH
42670: LD_INT 19
42672: PUSH
42673: LD_INT 20
42675: PUSH
42676: LD_INT 21
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: IN
42694: NOT
42695: OR
42696: PUSH
42697: LD_VAR 0 8
42701: PUSH
42702: LD_INT 5
42704: ARRAY
42705: NOT
42706: OR
42707: PUSH
42708: LD_VAR 0 8
42712: PUSH
42713: LD_INT 6
42715: ARRAY
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 7
42725: PUSH
42726: LD_INT 9
42728: PUSH
42729: LD_INT 10
42731: PUSH
42732: LD_INT 11
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: IN
42743: NOT
42744: OR
42745: IFFALSE 42751
// exit ;
42747: POP
42748: POP
42749: GO 42834
// end ;
42751: GO 42422
42753: POP
42754: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42755: LD_VAR 0 9
42759: PPUSH
42760: LD_VAR 0 3
42764: PPUSH
42765: LD_VAR 0 4
42769: PPUSH
42770: LD_INT 20
42772: PPUSH
42773: CALL 34780 0 4
42777: PUSH
42778: LD_INT 4
42780: ARRAY
42781: IFFALSE 42785
// exit ;
42783: GO 42834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42785: LD_VAR 0 2
42789: PUSH
42790: LD_INT 29
42792: PUSH
42793: LD_INT 30
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: IN
42800: PUSH
42801: LD_VAR 0 3
42805: PPUSH
42806: LD_VAR 0 4
42810: PPUSH
42811: LD_VAR 0 9
42815: PPUSH
42816: CALL_OW 440
42820: NOT
42821: AND
42822: IFFALSE 42826
// exit ;
42824: GO 42834
// result := true ;
42826: LD_ADDR_VAR 0 6
42830: PUSH
42831: LD_INT 1
42833: ST_TO_ADDR
// end ;
42834: LD_VAR 0 6
42838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42839: LD_INT 0
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
// result = [ ] ;
42899: LD_ADDR_VAR 0 7
42903: PUSH
42904: EMPTY
42905: ST_TO_ADDR
// temp_list = [ ] ;
42906: LD_ADDR_VAR 0 9
42910: PUSH
42911: EMPTY
42912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42913: LD_VAR 0 4
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: LD_INT 4
42932: PUSH
42933: LD_INT 5
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: IN
42944: NOT
42945: PUSH
42946: LD_VAR 0 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: IN
42961: PUSH
42962: LD_VAR 0 5
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: IN
42981: NOT
42982: AND
42983: OR
42984: IFFALSE 42988
// exit ;
42986: GO 61379
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42988: LD_VAR 0 1
42992: PUSH
42993: LD_INT 6
42995: PUSH
42996: LD_INT 7
42998: PUSH
42999: LD_INT 8
43001: PUSH
43002: LD_INT 13
43004: PUSH
43005: LD_INT 12
43007: PUSH
43008: LD_INT 15
43010: PUSH
43011: LD_INT 11
43013: PUSH
43014: LD_INT 14
43016: PUSH
43017: LD_INT 10
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: IN
43031: IFFALSE 43041
// btype = b_lab ;
43033: LD_ADDR_VAR 0 1
43037: PUSH
43038: LD_INT 6
43040: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43041: LD_VAR 0 6
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: IN
43060: NOT
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 6
43081: PUSH
43082: LD_INT 36
43084: PUSH
43085: LD_INT 4
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: LD_INT 31
43093: PUSH
43094: LD_INT 32
43096: PUSH
43097: LD_INT 33
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: IN
43113: NOT
43114: PUSH
43115: LD_VAR 0 6
43119: PUSH
43120: LD_INT 1
43122: EQUAL
43123: AND
43124: OR
43125: PUSH
43126: LD_VAR 0 1
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: IN
43141: NOT
43142: PUSH
43143: LD_VAR 0 6
43147: PUSH
43148: LD_INT 2
43150: EQUAL
43151: AND
43152: OR
43153: IFFALSE 43163
// mode = 0 ;
43155: LD_ADDR_VAR 0 6
43159: PUSH
43160: LD_INT 0
43162: ST_TO_ADDR
// case mode of 0 :
43163: LD_VAR 0 6
43167: PUSH
43168: LD_INT 0
43170: DOUBLE
43171: EQUAL
43172: IFTRUE 43176
43174: GO 54629
43176: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43177: LD_ADDR_VAR 0 11
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 3
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43370: LD_ADDR_VAR 0 12
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43566: LD_ADDR_VAR 0 13
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 3
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43765: LD_ADDR_VAR 0 14
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43961: LD_ADDR_VAR 0 15
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 3
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44154: LD_ADDR_VAR 0 16
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44347: LD_ADDR_VAR 0 17
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44577: LD_ADDR_VAR 0 18
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44807: LD_ADDR_VAR 0 19
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45037: LD_ADDR_VAR 0 20
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45267: LD_ADDR_VAR 0 21
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45497: LD_ADDR_VAR 0 22
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45727: LD_ADDR_VAR 0 23
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46007: LD_ADDR_VAR 0 24
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46283: LD_ADDR_VAR 0 25
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46557: LD_ADDR_VAR 0 26
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46833: LD_ADDR_VAR 0 27
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47113: LD_ADDR_VAR 0 28
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47395: LD_ADDR_VAR 0 29
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 3
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: NEG
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47674: LD_ADDR_VAR 0 30
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 3
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47952: LD_ADDR_VAR 0 31
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 3
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48230: LD_ADDR_VAR 0 32
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 3
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 3
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48508: LD_ADDR_VAR 0 33
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 3
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48787: LD_ADDR_VAR 0 34
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49067: LD_ADDR_VAR 0 35
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49179: LD_ADDR_VAR 0 36
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49291: LD_ADDR_VAR 0 37
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49403: LD_ADDR_VAR 0 38
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49515: LD_ADDR_VAR 0 39
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49627: LD_ADDR_VAR 0 40
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49739: LD_ADDR_VAR 0 41
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50089: LD_ADDR_VAR 0 42
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50439: LD_ADDR_VAR 0 43
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50787: LD_ADDR_VAR 0 44
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 3
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51137: LD_ADDR_VAR 0 45
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51487: LD_ADDR_VAR 0 46
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51835: LD_ADDR_VAR 0 47
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51986: LD_ADDR_VAR 0 48
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52133: LD_ADDR_VAR 0 49
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52277: LD_ADDR_VAR 0 50
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52421: LD_ADDR_VAR 0 51
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52568: LD_ADDR_VAR 0 52
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52719: LD_ADDR_VAR 0 53
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52949: LD_ADDR_VAR 0 54
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53179: LD_ADDR_VAR 0 55
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53409: LD_ADDR_VAR 0 56
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53639: LD_ADDR_VAR 0 57
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53869: LD_ADDR_VAR 0 58
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54099: LD_ADDR_VAR 0 59
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54187: LD_ADDR_VAR 0 60
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54275: LD_ADDR_VAR 0 61
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54363: LD_ADDR_VAR 0 62
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54451: LD_ADDR_VAR 0 63
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54539: LD_ADDR_VAR 0 64
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// end ; 1 :
54627: GO 60524
54629: LD_INT 1
54631: DOUBLE
54632: EQUAL
54633: IFTRUE 54637
54635: GO 57260
54637: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54638: LD_ADDR_VAR 0 11
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54682: LD_ADDR_VAR 0 12
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 3
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: LIST
54722: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54723: LD_ADDR_VAR 0 13
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 3
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54763: LD_ADDR_VAR 0 14
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54804: LD_ADDR_VAR 0 15
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54848: LD_ADDR_VAR 0 16
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54894: LD_ADDR_VAR 0 17
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54938: LD_ADDR_VAR 0 18
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54979: LD_ADDR_VAR 0 19
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55019: LD_ADDR_VAR 0 20
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55060: LD_ADDR_VAR 0 21
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55104: LD_ADDR_VAR 0 22
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55150: LD_ADDR_VAR 0 23
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55194: LD_ADDR_VAR 0 24
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55235: LD_ADDR_VAR 0 25
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 4
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 4
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55275: LD_ADDR_VAR 0 26
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55316: LD_ADDR_VAR 0 27
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55360: LD_ADDR_VAR 0 28
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 4
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55406: LD_ADDR_VAR 0 29
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 3
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 4
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 5
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 5
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 4
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 6
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 6
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 5
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55561: LD_ADDR_VAR 0 30
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 4
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 4
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 6
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 6
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55704: LD_ADDR_VAR 0 31
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 5
55781: PUSH
55782: LD_INT 5
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 6
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 6
55811: PUSH
55812: LD_INT 6
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 5
55821: PUSH
55822: LD_INT 6
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55843: LD_ADDR_VAR 0 32
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 4
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 5
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 4
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 6
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 6
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55986: LD_ADDR_VAR 0 33
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 4
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 5
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 5
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 6
56106: NEG
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 6
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56141: LD_ADDR_VAR 0 34
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 4
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: NEG
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: LD_INT 5
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 5
56232: NEG
56233: PUSH
56234: LD_INT 4
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 5
56244: NEG
56245: PUSH
56246: LD_INT 5
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 5
56256: NEG
56257: PUSH
56258: LD_INT 6
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 6
56268: NEG
56269: PUSH
56270: LD_INT 5
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 6
56280: NEG
56281: PUSH
56282: LD_INT 6
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56304: LD_ADDR_VAR 0 41
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56348: LD_ADDR_VAR 0 42
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56389: LD_ADDR_VAR 0 43
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56429: LD_ADDR_VAR 0 44
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56470: LD_ADDR_VAR 0 45
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56514: LD_ADDR_VAR 0 46
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56560: LD_ADDR_VAR 0 47
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56593: LD_ADDR_VAR 0 48
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56624: LD_ADDR_VAR 0 49
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56653: LD_ADDR_VAR 0 50
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56682: LD_ADDR_VAR 0 51
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56713: LD_ADDR_VAR 0 52
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56746: LD_ADDR_VAR 0 53
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 3
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56790: LD_ADDR_VAR 0 54
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56831: LD_ADDR_VAR 0 55
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56871: LD_ADDR_VAR 0 56
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56912: LD_ADDR_VAR 0 57
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56956: LD_ADDR_VAR 0 58
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57002: LD_ADDR_VAR 0 59
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57046: LD_ADDR_VAR 0 60
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57087: LD_ADDR_VAR 0 61
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57127: LD_ADDR_VAR 0 62
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57168: LD_ADDR_VAR 0 63
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 64
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// end ; 2 :
57258: GO 60524
57260: LD_INT 2
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57268
57266: GO 60523
57268: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57269: LD_ADDR_VAR 0 29
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 5
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 5
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 4
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: LD_INT 4
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 4
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 4
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 4
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 5
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 5
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: LD_INT 4
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 5
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 4
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 4
57654: NEG
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: LD_INT 5
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: LD_INT 4
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 5
57714: NEG
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 5
57726: NEG
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 5
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 5
57750: NEG
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57807: LD_ADDR_VAR 0 30
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: LD_INT 4
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 5
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 5
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: LD_INT 5
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 5
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 5
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 4
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 4
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 5
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 5
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 5
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: LD_INT 4
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 4
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 4
58195: NEG
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 5
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 4
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 5
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58354: LD_ADDR_VAR 0 31
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 4
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 4
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 5
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 4
58510: NEG
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 4
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 4
58556: NEG
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 4
58568: NEG
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: LD_INT 4
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 4
58604: NEG
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 5
58616: NEG
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: NEG
58629: PUSH
58630: LD_INT 5
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: LD_INT 5
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 5
58652: NEG
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 4
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 4
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 4
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 5
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58904: LD_ADDR_VAR 0 32
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 5
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 5
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 5
58990: NEG
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 4
59073: NEG
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 4
59085: NEG
59086: PUSH
59087: LD_INT 4
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 4
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 5
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 4
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 5
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 5
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 5
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 5
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 4
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 5
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 5
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59451: LD_ADDR_VAR 0 33
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: LD_INT 5
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: NEG
59483: PUSH
59484: LD_INT 4
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 5
59518: NEG
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 5
59530: NEG
59531: PUSH
59532: LD_INT 5
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 5
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 5
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 4
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 4
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 5
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 4
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 5
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 5
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59989: LD_ADDR_VAR 0 34
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 4
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 5
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 5
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 4
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 5
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: LD_INT 5
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: LD_INT 5
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 5
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 4
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 4
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 5
60430: NEG
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 5
60441: NEG
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: NEG
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: ST_TO_ADDR
// end ; end ;
60521: GO 60524
60523: POP
// case btype of b_depot , b_warehouse :
60524: LD_VAR 0 1
60528: PUSH
60529: LD_INT 0
60531: DOUBLE
60532: EQUAL
60533: IFTRUE 60543
60535: LD_INT 1
60537: DOUBLE
60538: EQUAL
60539: IFTRUE 60543
60541: GO 60744
60543: POP
// case nation of nation_american :
60544: LD_VAR 0 5
60548: PUSH
60549: LD_INT 1
60551: DOUBLE
60552: EQUAL
60553: IFTRUE 60557
60555: GO 60613
60557: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60558: LD_ADDR_VAR 0 9
60562: PUSH
60563: LD_VAR 0 11
60567: PUSH
60568: LD_VAR 0 12
60572: PUSH
60573: LD_VAR 0 13
60577: PUSH
60578: LD_VAR 0 14
60582: PUSH
60583: LD_VAR 0 15
60587: PUSH
60588: LD_VAR 0 16
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: PUSH
60601: LD_VAR 0 4
60605: PUSH
60606: LD_INT 1
60608: PLUS
60609: ARRAY
60610: ST_TO_ADDR
60611: GO 60742
60613: LD_INT 2
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60621
60619: GO 60677
60621: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60622: LD_ADDR_VAR 0 9
60626: PUSH
60627: LD_VAR 0 17
60631: PUSH
60632: LD_VAR 0 18
60636: PUSH
60637: LD_VAR 0 19
60641: PUSH
60642: LD_VAR 0 20
60646: PUSH
60647: LD_VAR 0 21
60651: PUSH
60652: LD_VAR 0 22
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 4
60669: PUSH
60670: LD_INT 1
60672: PLUS
60673: ARRAY
60674: ST_TO_ADDR
60675: GO 60742
60677: LD_INT 3
60679: DOUBLE
60680: EQUAL
60681: IFTRUE 60685
60683: GO 60741
60685: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60686: LD_ADDR_VAR 0 9
60690: PUSH
60691: LD_VAR 0 23
60695: PUSH
60696: LD_VAR 0 24
60700: PUSH
60701: LD_VAR 0 25
60705: PUSH
60706: LD_VAR 0 26
60710: PUSH
60711: LD_VAR 0 27
60715: PUSH
60716: LD_VAR 0 28
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: PUSH
60729: LD_VAR 0 4
60733: PUSH
60734: LD_INT 1
60736: PLUS
60737: ARRAY
60738: ST_TO_ADDR
60739: GO 60742
60741: POP
60742: GO 61297
60744: LD_INT 2
60746: DOUBLE
60747: EQUAL
60748: IFTRUE 60758
60750: LD_INT 3
60752: DOUBLE
60753: EQUAL
60754: IFTRUE 60758
60756: GO 60814
60758: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60759: LD_ADDR_VAR 0 9
60763: PUSH
60764: LD_VAR 0 29
60768: PUSH
60769: LD_VAR 0 30
60773: PUSH
60774: LD_VAR 0 31
60778: PUSH
60779: LD_VAR 0 32
60783: PUSH
60784: LD_VAR 0 33
60788: PUSH
60789: LD_VAR 0 34
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: PUSH
60802: LD_VAR 0 4
60806: PUSH
60807: LD_INT 1
60809: PLUS
60810: ARRAY
60811: ST_TO_ADDR
60812: GO 61297
60814: LD_INT 16
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60876
60820: LD_INT 17
60822: DOUBLE
60823: EQUAL
60824: IFTRUE 60876
60826: LD_INT 18
60828: DOUBLE
60829: EQUAL
60830: IFTRUE 60876
60832: LD_INT 19
60834: DOUBLE
60835: EQUAL
60836: IFTRUE 60876
60838: LD_INT 22
60840: DOUBLE
60841: EQUAL
60842: IFTRUE 60876
60844: LD_INT 20
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60876
60850: LD_INT 21
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60876
60856: LD_INT 23
60858: DOUBLE
60859: EQUAL
60860: IFTRUE 60876
60862: LD_INT 24
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60876
60868: LD_INT 25
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60876
60874: GO 60932
60876: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60877: LD_ADDR_VAR 0 9
60881: PUSH
60882: LD_VAR 0 35
60886: PUSH
60887: LD_VAR 0 36
60891: PUSH
60892: LD_VAR 0 37
60896: PUSH
60897: LD_VAR 0 38
60901: PUSH
60902: LD_VAR 0 39
60906: PUSH
60907: LD_VAR 0 40
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: PUSH
60920: LD_VAR 0 4
60924: PUSH
60925: LD_INT 1
60927: PLUS
60928: ARRAY
60929: ST_TO_ADDR
60930: GO 61297
60932: LD_INT 6
60934: DOUBLE
60935: EQUAL
60936: IFTRUE 60988
60938: LD_INT 7
60940: DOUBLE
60941: EQUAL
60942: IFTRUE 60988
60944: LD_INT 8
60946: DOUBLE
60947: EQUAL
60948: IFTRUE 60988
60950: LD_INT 13
60952: DOUBLE
60953: EQUAL
60954: IFTRUE 60988
60956: LD_INT 12
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 60988
60962: LD_INT 15
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 60988
60968: LD_INT 11
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 60988
60974: LD_INT 14
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 60988
60980: LD_INT 10
60982: DOUBLE
60983: EQUAL
60984: IFTRUE 60988
60986: GO 61044
60988: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60989: LD_ADDR_VAR 0 9
60993: PUSH
60994: LD_VAR 0 41
60998: PUSH
60999: LD_VAR 0 42
61003: PUSH
61004: LD_VAR 0 43
61008: PUSH
61009: LD_VAR 0 44
61013: PUSH
61014: LD_VAR 0 45
61018: PUSH
61019: LD_VAR 0 46
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: PUSH
61032: LD_VAR 0 4
61036: PUSH
61037: LD_INT 1
61039: PLUS
61040: ARRAY
61041: ST_TO_ADDR
61042: GO 61297
61044: LD_INT 36
61046: DOUBLE
61047: EQUAL
61048: IFTRUE 61052
61050: GO 61108
61052: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61053: LD_ADDR_VAR 0 9
61057: PUSH
61058: LD_VAR 0 47
61062: PUSH
61063: LD_VAR 0 48
61067: PUSH
61068: LD_VAR 0 49
61072: PUSH
61073: LD_VAR 0 50
61077: PUSH
61078: LD_VAR 0 51
61082: PUSH
61083: LD_VAR 0 52
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: PUSH
61096: LD_VAR 0 4
61100: PUSH
61101: LD_INT 1
61103: PLUS
61104: ARRAY
61105: ST_TO_ADDR
61106: GO 61297
61108: LD_INT 4
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61134
61114: LD_INT 5
61116: DOUBLE
61117: EQUAL
61118: IFTRUE 61134
61120: LD_INT 34
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61134
61126: LD_INT 37
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61134
61132: GO 61190
61134: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61135: LD_ADDR_VAR 0 9
61139: PUSH
61140: LD_VAR 0 53
61144: PUSH
61145: LD_VAR 0 54
61149: PUSH
61150: LD_VAR 0 55
61154: PUSH
61155: LD_VAR 0 56
61159: PUSH
61160: LD_VAR 0 57
61164: PUSH
61165: LD_VAR 0 58
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: PUSH
61178: LD_VAR 0 4
61182: PUSH
61183: LD_INT 1
61185: PLUS
61186: ARRAY
61187: ST_TO_ADDR
61188: GO 61297
61190: LD_INT 31
61192: DOUBLE
61193: EQUAL
61194: IFTRUE 61240
61196: LD_INT 32
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61240
61202: LD_INT 33
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61240
61208: LD_INT 27
61210: DOUBLE
61211: EQUAL
61212: IFTRUE 61240
61214: LD_INT 26
61216: DOUBLE
61217: EQUAL
61218: IFTRUE 61240
61220: LD_INT 28
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61240
61226: LD_INT 29
61228: DOUBLE
61229: EQUAL
61230: IFTRUE 61240
61232: LD_INT 30
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61296
61240: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61241: LD_ADDR_VAR 0 9
61245: PUSH
61246: LD_VAR 0 59
61250: PUSH
61251: LD_VAR 0 60
61255: PUSH
61256: LD_VAR 0 61
61260: PUSH
61261: LD_VAR 0 62
61265: PUSH
61266: LD_VAR 0 63
61270: PUSH
61271: LD_VAR 0 64
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 4
61288: PUSH
61289: LD_INT 1
61291: PLUS
61292: ARRAY
61293: ST_TO_ADDR
61294: GO 61297
61296: POP
// temp_list2 = [ ] ;
61297: LD_ADDR_VAR 0 10
61301: PUSH
61302: EMPTY
61303: ST_TO_ADDR
// for i in temp_list do
61304: LD_ADDR_VAR 0 8
61308: PUSH
61309: LD_VAR 0 9
61313: PUSH
61314: FOR_IN
61315: IFFALSE 61367
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61317: LD_ADDR_VAR 0 10
61321: PUSH
61322: LD_VAR 0 10
61326: PUSH
61327: LD_VAR 0 8
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_VAR 0 2
61340: PLUS
61341: PUSH
61342: LD_VAR 0 8
61346: PUSH
61347: LD_INT 2
61349: ARRAY
61350: PUSH
61351: LD_VAR 0 3
61355: PLUS
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: ADD
61364: ST_TO_ADDR
61365: GO 61314
61367: POP
61368: POP
// result = temp_list2 ;
61369: LD_ADDR_VAR 0 7
61373: PUSH
61374: LD_VAR 0 10
61378: ST_TO_ADDR
// end ;
61379: LD_VAR 0 7
61383: RET
// export function EnemyInRange ( unit , dist ) ; begin
61384: LD_INT 0
61386: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61387: LD_ADDR_VAR 0 3
61391: PUSH
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 255
61401: PPUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 250
61411: PPUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 251
61421: PPUSH
61422: LD_VAR 0 2
61426: PPUSH
61427: CALL 34780 0 4
61431: PUSH
61432: LD_INT 4
61434: ARRAY
61435: ST_TO_ADDR
// end ;
61436: LD_VAR 0 3
61440: RET
// export function PlayerSeeMe ( unit ) ; begin
61441: LD_INT 0
61443: PPUSH
// result := See ( your_side , unit ) ;
61444: LD_ADDR_VAR 0 2
61448: PUSH
61449: LD_OWVAR 2
61453: PPUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 292
61463: ST_TO_ADDR
// end ;
61464: LD_VAR 0 2
61468: RET
// export function ReverseDir ( unit ) ; begin
61469: LD_INT 0
61471: PPUSH
// if not unit then
61472: LD_VAR 0 1
61476: NOT
61477: IFFALSE 61481
// exit ;
61479: GO 61504
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61481: LD_ADDR_VAR 0 2
61485: PUSH
61486: LD_VAR 0 1
61490: PPUSH
61491: CALL_OW 254
61495: PUSH
61496: LD_INT 3
61498: PLUS
61499: PUSH
61500: LD_INT 6
61502: MOD
61503: ST_TO_ADDR
// end ;
61504: LD_VAR 0 2
61508: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61509: LD_INT 0
61511: PPUSH
61512: PPUSH
61513: PPUSH
61514: PPUSH
61515: PPUSH
// if not hexes then
61516: LD_VAR 0 2
61520: NOT
61521: IFFALSE 61525
// exit ;
61523: GO 61673
// dist := 9999 ;
61525: LD_ADDR_VAR 0 5
61529: PUSH
61530: LD_INT 9999
61532: ST_TO_ADDR
// for i = 1 to hexes do
61533: LD_ADDR_VAR 0 4
61537: PUSH
61538: DOUBLE
61539: LD_INT 1
61541: DEC
61542: ST_TO_ADDR
61543: LD_VAR 0 2
61547: PUSH
61548: FOR_TO
61549: IFFALSE 61661
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61551: LD_VAR 0 1
61555: PPUSH
61556: LD_VAR 0 2
61560: PUSH
61561: LD_VAR 0 4
61565: ARRAY
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PPUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_VAR 0 4
61580: ARRAY
61581: PUSH
61582: LD_INT 2
61584: ARRAY
61585: PPUSH
61586: CALL_OW 297
61590: PUSH
61591: LD_VAR 0 5
61595: LESS
61596: IFFALSE 61659
// begin hex := hexes [ i ] ;
61598: LD_ADDR_VAR 0 7
61602: PUSH
61603: LD_VAR 0 2
61607: PUSH
61608: LD_VAR 0 4
61612: ARRAY
61613: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61614: LD_ADDR_VAR 0 5
61618: PUSH
61619: LD_VAR 0 1
61623: PPUSH
61624: LD_VAR 0 2
61628: PUSH
61629: LD_VAR 0 4
61633: ARRAY
61634: PUSH
61635: LD_INT 1
61637: ARRAY
61638: PPUSH
61639: LD_VAR 0 2
61643: PUSH
61644: LD_VAR 0 4
61648: ARRAY
61649: PUSH
61650: LD_INT 2
61652: ARRAY
61653: PPUSH
61654: CALL_OW 297
61658: ST_TO_ADDR
// end ; end ;
61659: GO 61548
61661: POP
61662: POP
// result := hex ;
61663: LD_ADDR_VAR 0 3
61667: PUSH
61668: LD_VAR 0 7
61672: ST_TO_ADDR
// end ;
61673: LD_VAR 0 3
61677: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61682: LD_VAR 0 1
61686: NOT
61687: PUSH
61688: LD_VAR 0 1
61692: PUSH
61693: LD_INT 21
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 23
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PPUSH
61717: CALL_OW 69
61721: IN
61722: NOT
61723: OR
61724: IFFALSE 61728
// exit ;
61726: GO 61775
// for i = 1 to 3 do
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: DOUBLE
61734: LD_INT 1
61736: DEC
61737: ST_TO_ADDR
61738: LD_INT 3
61740: PUSH
61741: FOR_TO
61742: IFFALSE 61773
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61744: LD_VAR 0 1
61748: PPUSH
61749: CALL_OW 250
61753: PPUSH
61754: LD_VAR 0 1
61758: PPUSH
61759: CALL_OW 251
61763: PPUSH
61764: LD_INT 1
61766: PPUSH
61767: CALL_OW 453
61771: GO 61741
61773: POP
61774: POP
// end ;
61775: LD_VAR 0 2
61779: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61780: LD_INT 0
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61788: LD_VAR 0 1
61792: NOT
61793: PUSH
61794: LD_VAR 0 2
61798: NOT
61799: OR
61800: PUSH
61801: LD_VAR 0 1
61805: PPUSH
61806: CALL_OW 314
61810: OR
61811: IFFALSE 61815
// exit ;
61813: GO 62256
// x := GetX ( enemy_unit ) ;
61815: LD_ADDR_VAR 0 7
61819: PUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: CALL_OW 250
61829: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61830: LD_ADDR_VAR 0 8
61834: PUSH
61835: LD_VAR 0 2
61839: PPUSH
61840: CALL_OW 251
61844: ST_TO_ADDR
// if not x or not y then
61845: LD_VAR 0 7
61849: NOT
61850: PUSH
61851: LD_VAR 0 8
61855: NOT
61856: OR
61857: IFFALSE 61861
// exit ;
61859: GO 62256
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61861: LD_ADDR_VAR 0 6
61865: PUSH
61866: LD_VAR 0 7
61870: PPUSH
61871: LD_INT 0
61873: PPUSH
61874: LD_INT 4
61876: PPUSH
61877: CALL_OW 272
61881: PUSH
61882: LD_VAR 0 8
61886: PPUSH
61887: LD_INT 0
61889: PPUSH
61890: LD_INT 4
61892: PPUSH
61893: CALL_OW 273
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_VAR 0 7
61906: PPUSH
61907: LD_INT 1
61909: PPUSH
61910: LD_INT 4
61912: PPUSH
61913: CALL_OW 272
61917: PUSH
61918: LD_VAR 0 8
61922: PPUSH
61923: LD_INT 1
61925: PPUSH
61926: LD_INT 4
61928: PPUSH
61929: CALL_OW 273
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 7
61942: PPUSH
61943: LD_INT 2
61945: PPUSH
61946: LD_INT 4
61948: PPUSH
61949: CALL_OW 272
61953: PUSH
61954: LD_VAR 0 8
61958: PPUSH
61959: LD_INT 2
61961: PPUSH
61962: LD_INT 4
61964: PPUSH
61965: CALL_OW 273
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_VAR 0 7
61978: PPUSH
61979: LD_INT 3
61981: PPUSH
61982: LD_INT 4
61984: PPUSH
61985: CALL_OW 272
61989: PUSH
61990: LD_VAR 0 8
61994: PPUSH
61995: LD_INT 3
61997: PPUSH
61998: LD_INT 4
62000: PPUSH
62001: CALL_OW 273
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_VAR 0 7
62014: PPUSH
62015: LD_INT 4
62017: PPUSH
62018: LD_INT 4
62020: PPUSH
62021: CALL_OW 272
62025: PUSH
62026: LD_VAR 0 8
62030: PPUSH
62031: LD_INT 4
62033: PPUSH
62034: LD_INT 4
62036: PPUSH
62037: CALL_OW 273
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_VAR 0 7
62050: PPUSH
62051: LD_INT 5
62053: PPUSH
62054: LD_INT 4
62056: PPUSH
62057: CALL_OW 272
62061: PUSH
62062: LD_VAR 0 8
62066: PPUSH
62067: LD_INT 5
62069: PPUSH
62070: LD_INT 4
62072: PPUSH
62073: CALL_OW 273
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// for i = tmp downto 1 do
62090: LD_ADDR_VAR 0 4
62094: PUSH
62095: DOUBLE
62096: LD_VAR 0 6
62100: INC
62101: ST_TO_ADDR
62102: LD_INT 1
62104: PUSH
62105: FOR_DOWNTO
62106: IFFALSE 62207
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62108: LD_VAR 0 6
62112: PUSH
62113: LD_VAR 0 4
62117: ARRAY
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PPUSH
62123: LD_VAR 0 6
62127: PUSH
62128: LD_VAR 0 4
62132: ARRAY
62133: PUSH
62134: LD_INT 2
62136: ARRAY
62137: PPUSH
62138: CALL_OW 488
62142: NOT
62143: PUSH
62144: LD_VAR 0 6
62148: PUSH
62149: LD_VAR 0 4
62153: ARRAY
62154: PUSH
62155: LD_INT 1
62157: ARRAY
62158: PPUSH
62159: LD_VAR 0 6
62163: PUSH
62164: LD_VAR 0 4
62168: ARRAY
62169: PUSH
62170: LD_INT 2
62172: ARRAY
62173: PPUSH
62174: CALL_OW 428
62178: PUSH
62179: LD_INT 0
62181: NONEQUAL
62182: OR
62183: IFFALSE 62205
// tmp := Delete ( tmp , i ) ;
62185: LD_ADDR_VAR 0 6
62189: PUSH
62190: LD_VAR 0 6
62194: PPUSH
62195: LD_VAR 0 4
62199: PPUSH
62200: CALL_OW 3
62204: ST_TO_ADDR
62205: GO 62105
62207: POP
62208: POP
// j := GetClosestHex ( unit , tmp ) ;
62209: LD_ADDR_VAR 0 5
62213: PUSH
62214: LD_VAR 0 1
62218: PPUSH
62219: LD_VAR 0 6
62223: PPUSH
62224: CALL 61509 0 2
62228: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62229: LD_VAR 0 1
62233: PPUSH
62234: LD_VAR 0 5
62238: PUSH
62239: LD_INT 1
62241: ARRAY
62242: PPUSH
62243: LD_VAR 0 5
62247: PUSH
62248: LD_INT 2
62250: ARRAY
62251: PPUSH
62252: CALL_OW 111
// end ;
62256: LD_VAR 0 3
62260: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62261: LD_INT 0
62263: PPUSH
62264: PPUSH
62265: PPUSH
// uc_side = 0 ;
62266: LD_ADDR_OWVAR 20
62270: PUSH
62271: LD_INT 0
62273: ST_TO_ADDR
// uc_nation = 0 ;
62274: LD_ADDR_OWVAR 21
62278: PUSH
62279: LD_INT 0
62281: ST_TO_ADDR
// InitHc_All ( ) ;
62282: CALL_OW 584
// InitVc ;
62286: CALL_OW 20
// if mastodonts then
62290: LD_VAR 0 6
62294: IFFALSE 62361
// for i = 1 to mastodonts do
62296: LD_ADDR_VAR 0 11
62300: PUSH
62301: DOUBLE
62302: LD_INT 1
62304: DEC
62305: ST_TO_ADDR
62306: LD_VAR 0 6
62310: PUSH
62311: FOR_TO
62312: IFFALSE 62359
// begin vc_chassis := 31 ;
62314: LD_ADDR_OWVAR 37
62318: PUSH
62319: LD_INT 31
62321: ST_TO_ADDR
// vc_control := control_rider ;
62322: LD_ADDR_OWVAR 38
62326: PUSH
62327: LD_INT 4
62329: ST_TO_ADDR
// animal := CreateVehicle ;
62330: LD_ADDR_VAR 0 12
62334: PUSH
62335: CALL_OW 45
62339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62340: LD_VAR 0 12
62344: PPUSH
62345: LD_VAR 0 8
62349: PPUSH
62350: LD_INT 0
62352: PPUSH
62353: CALL 64549 0 3
// end ;
62357: GO 62311
62359: POP
62360: POP
// if horses then
62361: LD_VAR 0 5
62365: IFFALSE 62432
// for i = 1 to horses do
62367: LD_ADDR_VAR 0 11
62371: PUSH
62372: DOUBLE
62373: LD_INT 1
62375: DEC
62376: ST_TO_ADDR
62377: LD_VAR 0 5
62381: PUSH
62382: FOR_TO
62383: IFFALSE 62430
// begin hc_class := 21 ;
62385: LD_ADDR_OWVAR 28
62389: PUSH
62390: LD_INT 21
62392: ST_TO_ADDR
// hc_gallery :=  ;
62393: LD_ADDR_OWVAR 33
62397: PUSH
62398: LD_STRING 
62400: ST_TO_ADDR
// animal := CreateHuman ;
62401: LD_ADDR_VAR 0 12
62405: PUSH
62406: CALL_OW 44
62410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62411: LD_VAR 0 12
62415: PPUSH
62416: LD_VAR 0 8
62420: PPUSH
62421: LD_INT 0
62423: PPUSH
62424: CALL 64549 0 3
// end ;
62428: GO 62382
62430: POP
62431: POP
// if birds then
62432: LD_VAR 0 1
62436: IFFALSE 62503
// for i = 1 to birds do
62438: LD_ADDR_VAR 0 11
62442: PUSH
62443: DOUBLE
62444: LD_INT 1
62446: DEC
62447: ST_TO_ADDR
62448: LD_VAR 0 1
62452: PUSH
62453: FOR_TO
62454: IFFALSE 62501
// begin hc_class = 18 ;
62456: LD_ADDR_OWVAR 28
62460: PUSH
62461: LD_INT 18
62463: ST_TO_ADDR
// hc_gallery =  ;
62464: LD_ADDR_OWVAR 33
62468: PUSH
62469: LD_STRING 
62471: ST_TO_ADDR
// animal := CreateHuman ;
62472: LD_ADDR_VAR 0 12
62476: PUSH
62477: CALL_OW 44
62481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62482: LD_VAR 0 12
62486: PPUSH
62487: LD_VAR 0 8
62491: PPUSH
62492: LD_INT 0
62494: PPUSH
62495: CALL 64549 0 3
// end ;
62499: GO 62453
62501: POP
62502: POP
// if tigers then
62503: LD_VAR 0 2
62507: IFFALSE 62591
// for i = 1 to tigers do
62509: LD_ADDR_VAR 0 11
62513: PUSH
62514: DOUBLE
62515: LD_INT 1
62517: DEC
62518: ST_TO_ADDR
62519: LD_VAR 0 2
62523: PUSH
62524: FOR_TO
62525: IFFALSE 62589
// begin hc_class = class_tiger ;
62527: LD_ADDR_OWVAR 28
62531: PUSH
62532: LD_INT 14
62534: ST_TO_ADDR
// hc_gallery =  ;
62535: LD_ADDR_OWVAR 33
62539: PUSH
62540: LD_STRING 
62542: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62543: LD_ADDR_OWVAR 35
62547: PUSH
62548: LD_INT 7
62550: NEG
62551: PPUSH
62552: LD_INT 7
62554: PPUSH
62555: CALL_OW 12
62559: ST_TO_ADDR
// animal := CreateHuman ;
62560: LD_ADDR_VAR 0 12
62564: PUSH
62565: CALL_OW 44
62569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62570: LD_VAR 0 12
62574: PPUSH
62575: LD_VAR 0 8
62579: PPUSH
62580: LD_INT 0
62582: PPUSH
62583: CALL 64549 0 3
// end ;
62587: GO 62524
62589: POP
62590: POP
// if apemans then
62591: LD_VAR 0 3
62595: IFFALSE 62718
// for i = 1 to apemans do
62597: LD_ADDR_VAR 0 11
62601: PUSH
62602: DOUBLE
62603: LD_INT 1
62605: DEC
62606: ST_TO_ADDR
62607: LD_VAR 0 3
62611: PUSH
62612: FOR_TO
62613: IFFALSE 62716
// begin hc_class = class_apeman ;
62615: LD_ADDR_OWVAR 28
62619: PUSH
62620: LD_INT 12
62622: ST_TO_ADDR
// hc_gallery =  ;
62623: LD_ADDR_OWVAR 33
62627: PUSH
62628: LD_STRING 
62630: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62631: LD_ADDR_OWVAR 35
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PPUSH
62640: LD_INT 2
62642: PPUSH
62643: CALL_OW 12
62647: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62648: LD_ADDR_OWVAR 31
62652: PUSH
62653: LD_INT 1
62655: PPUSH
62656: LD_INT 3
62658: PPUSH
62659: CALL_OW 12
62663: PUSH
62664: LD_INT 1
62666: PPUSH
62667: LD_INT 3
62669: PPUSH
62670: CALL_OW 12
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// animal := CreateHuman ;
62687: LD_ADDR_VAR 0 12
62691: PUSH
62692: CALL_OW 44
62696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62697: LD_VAR 0 12
62701: PPUSH
62702: LD_VAR 0 8
62706: PPUSH
62707: LD_INT 0
62709: PPUSH
62710: CALL 64549 0 3
// end ;
62714: GO 62612
62716: POP
62717: POP
// if enchidnas then
62718: LD_VAR 0 4
62722: IFFALSE 62789
// for i = 1 to enchidnas do
62724: LD_ADDR_VAR 0 11
62728: PUSH
62729: DOUBLE
62730: LD_INT 1
62732: DEC
62733: ST_TO_ADDR
62734: LD_VAR 0 4
62738: PUSH
62739: FOR_TO
62740: IFFALSE 62787
// begin hc_class = 13 ;
62742: LD_ADDR_OWVAR 28
62746: PUSH
62747: LD_INT 13
62749: ST_TO_ADDR
// hc_gallery =  ;
62750: LD_ADDR_OWVAR 33
62754: PUSH
62755: LD_STRING 
62757: ST_TO_ADDR
// animal := CreateHuman ;
62758: LD_ADDR_VAR 0 12
62762: PUSH
62763: CALL_OW 44
62767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62768: LD_VAR 0 12
62772: PPUSH
62773: LD_VAR 0 8
62777: PPUSH
62778: LD_INT 0
62780: PPUSH
62781: CALL 64549 0 3
// end ;
62785: GO 62739
62787: POP
62788: POP
// if fishes then
62789: LD_VAR 0 7
62793: IFFALSE 62860
// for i = 1 to fishes do
62795: LD_ADDR_VAR 0 11
62799: PUSH
62800: DOUBLE
62801: LD_INT 1
62803: DEC
62804: ST_TO_ADDR
62805: LD_VAR 0 7
62809: PUSH
62810: FOR_TO
62811: IFFALSE 62858
// begin hc_class = 20 ;
62813: LD_ADDR_OWVAR 28
62817: PUSH
62818: LD_INT 20
62820: ST_TO_ADDR
// hc_gallery =  ;
62821: LD_ADDR_OWVAR 33
62825: PUSH
62826: LD_STRING 
62828: ST_TO_ADDR
// animal := CreateHuman ;
62829: LD_ADDR_VAR 0 12
62833: PUSH
62834: CALL_OW 44
62838: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62839: LD_VAR 0 12
62843: PPUSH
62844: LD_VAR 0 9
62848: PPUSH
62849: LD_INT 0
62851: PPUSH
62852: CALL 64549 0 3
// end ;
62856: GO 62810
62858: POP
62859: POP
// end ;
62860: LD_VAR 0 10
62864: RET
// export function WantHeal ( sci , unit ) ; begin
62865: LD_INT 0
62867: PPUSH
// if GetTaskList ( sci ) > 0 then
62868: LD_VAR 0 1
62872: PPUSH
62873: CALL_OW 437
62877: PUSH
62878: LD_INT 0
62880: GREATER
62881: IFFALSE 62951
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62883: LD_VAR 0 1
62887: PPUSH
62888: CALL_OW 437
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: LD_INT 1
62899: ARRAY
62900: PUSH
62901: LD_STRING l
62903: EQUAL
62904: PUSH
62905: LD_VAR 0 1
62909: PPUSH
62910: CALL_OW 437
62914: PUSH
62915: LD_INT 1
62917: ARRAY
62918: PUSH
62919: LD_INT 4
62921: ARRAY
62922: PUSH
62923: LD_VAR 0 2
62927: EQUAL
62928: AND
62929: IFFALSE 62941
// result := true else
62931: LD_ADDR_VAR 0 3
62935: PUSH
62936: LD_INT 1
62938: ST_TO_ADDR
62939: GO 62949
// result := false ;
62941: LD_ADDR_VAR 0 3
62945: PUSH
62946: LD_INT 0
62948: ST_TO_ADDR
// end else
62949: GO 62959
// result := false ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// end ;
62959: LD_VAR 0 3
62963: RET
// export function HealTarget ( sci ) ; begin
62964: LD_INT 0
62966: PPUSH
// if not sci then
62967: LD_VAR 0 1
62971: NOT
62972: IFFALSE 62976
// exit ;
62974: GO 63041
// result := 0 ;
62976: LD_ADDR_VAR 0 2
62980: PUSH
62981: LD_INT 0
62983: ST_TO_ADDR
// if GetTaskList ( sci ) then
62984: LD_VAR 0 1
62988: PPUSH
62989: CALL_OW 437
62993: IFFALSE 63041
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62995: LD_VAR 0 1
62999: PPUSH
63000: CALL_OW 437
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: PUSH
63009: LD_INT 1
63011: ARRAY
63012: PUSH
63013: LD_STRING l
63015: EQUAL
63016: IFFALSE 63041
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63018: LD_ADDR_VAR 0 2
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: CALL_OW 437
63032: PUSH
63033: LD_INT 1
63035: ARRAY
63036: PUSH
63037: LD_INT 4
63039: ARRAY
63040: ST_TO_ADDR
// end ;
63041: LD_VAR 0 2
63045: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63046: LD_INT 0
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
// if not base_units then
63052: LD_VAR 0 1
63056: NOT
63057: IFFALSE 63061
// exit ;
63059: GO 63148
// result := false ;
63061: LD_ADDR_VAR 0 2
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63069: LD_ADDR_VAR 0 5
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: LD_INT 21
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PPUSH
63089: CALL_OW 72
63093: ST_TO_ADDR
// if not tmp then
63094: LD_VAR 0 5
63098: NOT
63099: IFFALSE 63103
// exit ;
63101: GO 63148
// for i in tmp do
63103: LD_ADDR_VAR 0 3
63107: PUSH
63108: LD_VAR 0 5
63112: PUSH
63113: FOR_IN
63114: IFFALSE 63146
// begin result := EnemyInRange ( i , 22 ) ;
63116: LD_ADDR_VAR 0 2
63120: PUSH
63121: LD_VAR 0 3
63125: PPUSH
63126: LD_INT 22
63128: PPUSH
63129: CALL 61384 0 2
63133: ST_TO_ADDR
// if result then
63134: LD_VAR 0 2
63138: IFFALSE 63144
// exit ;
63140: POP
63141: POP
63142: GO 63148
// end ;
63144: GO 63113
63146: POP
63147: POP
// end ;
63148: LD_VAR 0 2
63152: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63153: LD_INT 0
63155: PPUSH
63156: PPUSH
// if not units then
63157: LD_VAR 0 1
63161: NOT
63162: IFFALSE 63166
// exit ;
63164: GO 63236
// result := [ ] ;
63166: LD_ADDR_VAR 0 3
63170: PUSH
63171: EMPTY
63172: ST_TO_ADDR
// for i in units do
63173: LD_ADDR_VAR 0 4
63177: PUSH
63178: LD_VAR 0 1
63182: PUSH
63183: FOR_IN
63184: IFFALSE 63234
// if GetTag ( i ) = tag then
63186: LD_VAR 0 4
63190: PPUSH
63191: CALL_OW 110
63195: PUSH
63196: LD_VAR 0 2
63200: EQUAL
63201: IFFALSE 63232
// result := Replace ( result , result + 1 , i ) ;
63203: LD_ADDR_VAR 0 3
63207: PUSH
63208: LD_VAR 0 3
63212: PPUSH
63213: LD_VAR 0 3
63217: PUSH
63218: LD_INT 1
63220: PLUS
63221: PPUSH
63222: LD_VAR 0 4
63226: PPUSH
63227: CALL_OW 1
63231: ST_TO_ADDR
63232: GO 63183
63234: POP
63235: POP
// end ;
63236: LD_VAR 0 3
63240: RET
// export function IsDriver ( un ) ; begin
63241: LD_INT 0
63243: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_VAR 0 1
63253: PUSH
63254: LD_INT 55
63256: PUSH
63257: EMPTY
63258: LIST
63259: PPUSH
63260: CALL_OW 69
63264: IN
63265: ST_TO_ADDR
// end ;
63266: LD_VAR 0 2
63270: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
// list := [ ] ;
63275: LD_ADDR_VAR 0 5
63279: PUSH
63280: EMPTY
63281: ST_TO_ADDR
// case d of 0 :
63282: LD_VAR 0 3
63286: PUSH
63287: LD_INT 0
63289: DOUBLE
63290: EQUAL
63291: IFTRUE 63295
63293: GO 63428
63295: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63296: LD_ADDR_VAR 0 5
63300: PUSH
63301: LD_VAR 0 1
63305: PUSH
63306: LD_INT 4
63308: MINUS
63309: PUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_INT 4
63317: MINUS
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_INT 3
63334: MINUS
63335: PUSH
63336: LD_VAR 0 2
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: PUSH
63349: LD_VAR 0 1
63353: PUSH
63354: LD_INT 4
63356: PLUS
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: LD_INT 4
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: LD_VAR 0 1
63375: PUSH
63376: LD_INT 3
63378: PLUS
63379: PUSH
63380: LD_VAR 0 2
63384: PUSH
63385: LD_INT 3
63387: PLUS
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: PUSH
63397: LD_VAR 0 1
63401: PUSH
63402: LD_VAR 0 2
63406: PUSH
63407: LD_INT 4
63409: PLUS
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// end ; 1 :
63426: GO 64126
63428: LD_INT 1
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63569
63436: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63437: LD_ADDR_VAR 0 5
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 4
63454: MINUS
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: LD_VAR 0 1
63468: PUSH
63469: LD_INT 3
63471: MINUS
63472: PUSH
63473: LD_VAR 0 2
63477: PUSH
63478: LD_INT 3
63480: MINUS
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: PUSH
63490: LD_VAR 0 1
63494: PUSH
63495: LD_INT 4
63497: MINUS
63498: PUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: LD_VAR 0 2
63521: PUSH
63522: LD_INT 3
63524: PLUS
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: PUSH
63534: LD_VAR 0 1
63538: PUSH
63539: LD_INT 4
63541: PLUS
63542: PUSH
63543: LD_VAR 0 2
63547: PUSH
63548: LD_INT 4
63550: PLUS
63551: PUSH
63552: LD_INT 5
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// end ; 2 :
63567: GO 64126
63569: LD_INT 2
63571: DOUBLE
63572: EQUAL
63573: IFTRUE 63577
63575: GO 63706
63577: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63578: LD_ADDR_VAR 0 5
63582: PUSH
63583: LD_VAR 0 1
63587: PUSH
63588: LD_VAR 0 2
63592: PUSH
63593: LD_INT 3
63595: MINUS
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: LD_VAR 0 1
63609: PUSH
63610: LD_INT 4
63612: PLUS
63613: PUSH
63614: LD_VAR 0 2
63618: PUSH
63619: LD_INT 4
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_VAR 0 1
63631: PUSH
63632: LD_VAR 0 2
63636: PUSH
63637: LD_INT 4
63639: PLUS
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: PUSH
63649: LD_VAR 0 1
63653: PUSH
63654: LD_INT 3
63656: MINUS
63657: PUSH
63658: LD_VAR 0 2
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: PUSH
63671: LD_VAR 0 1
63675: PUSH
63676: LD_INT 4
63678: MINUS
63679: PUSH
63680: LD_VAR 0 2
63684: PUSH
63685: LD_INT 4
63687: MINUS
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// end ; 3 :
63704: GO 64126
63706: LD_INT 3
63708: DOUBLE
63709: EQUAL
63710: IFTRUE 63714
63712: GO 63847
63714: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63715: LD_ADDR_VAR 0 5
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: LD_INT 3
63727: PLUS
63728: PUSH
63729: LD_VAR 0 2
63733: PUSH
63734: LD_INT 4
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: PUSH
63742: LD_VAR 0 1
63746: PUSH
63747: LD_INT 4
63749: PLUS
63750: PUSH
63751: LD_VAR 0 2
63755: PUSH
63756: LD_INT 4
63758: PLUS
63759: PUSH
63760: LD_INT 5
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 1
63772: PUSH
63773: LD_INT 4
63775: MINUS
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PUSH
63790: LD_VAR 0 1
63794: PUSH
63795: LD_VAR 0 2
63799: PUSH
63800: LD_INT 4
63802: MINUS
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: PUSH
63812: LD_VAR 0 1
63816: PUSH
63817: LD_INT 3
63819: MINUS
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 3
63828: MINUS
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// end ; 4 :
63845: GO 64126
63847: LD_INT 4
63849: DOUBLE
63850: EQUAL
63851: IFTRUE 63855
63853: GO 63988
63855: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63856: LD_ADDR_VAR 0 5
63860: PUSH
63861: LD_VAR 0 1
63865: PUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_INT 4
63873: PLUS
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: PUSH
63883: LD_VAR 0 1
63887: PUSH
63888: LD_INT 3
63890: PLUS
63891: PUSH
63892: LD_VAR 0 2
63896: PUSH
63897: LD_INT 3
63899: PLUS
63900: PUSH
63901: LD_INT 5
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: PUSH
63909: LD_VAR 0 1
63913: PUSH
63914: LD_INT 4
63916: PLUS
63917: PUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: LD_VAR 0 1
63935: PUSH
63936: LD_VAR 0 2
63940: PUSH
63941: LD_INT 3
63943: MINUS
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: PUSH
63953: LD_VAR 0 1
63957: PUSH
63958: LD_INT 4
63960: MINUS
63961: PUSH
63962: LD_VAR 0 2
63966: PUSH
63967: LD_INT 4
63969: MINUS
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: ST_TO_ADDR
// end ; 5 :
63986: GO 64126
63988: LD_INT 5
63990: DOUBLE
63991: EQUAL
63992: IFTRUE 63996
63994: GO 64125
63996: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63997: LD_ADDR_VAR 0 5
64001: PUSH
64002: LD_VAR 0 1
64006: PUSH
64007: LD_INT 4
64009: MINUS
64010: PUSH
64011: LD_VAR 0 2
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: PUSH
64024: LD_VAR 0 1
64028: PUSH
64029: LD_VAR 0 2
64033: PUSH
64034: LD_INT 4
64036: MINUS
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: PUSH
64046: LD_VAR 0 1
64050: PUSH
64051: LD_INT 4
64053: PLUS
64054: PUSH
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 4
64062: PLUS
64063: PUSH
64064: LD_INT 5
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 3
64079: PLUS
64080: PUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_INT 4
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: LD_VAR 0 2
64103: PUSH
64104: LD_INT 3
64106: PLUS
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// end ; end ;
64123: GO 64126
64125: POP
// result := list ;
64126: LD_ADDR_VAR 0 4
64130: PUSH
64131: LD_VAR 0 5
64135: ST_TO_ADDR
// end ;
64136: LD_VAR 0 4
64140: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64141: LD_INT 0
64143: PPUSH
64144: PPUSH
64145: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64146: LD_VAR 0 1
64150: NOT
64151: PUSH
64152: LD_VAR 0 2
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: IN
64175: NOT
64176: OR
64177: IFFALSE 64181
// exit ;
64179: GO 64273
// tmp := [ ] ;
64181: LD_ADDR_VAR 0 5
64185: PUSH
64186: EMPTY
64187: ST_TO_ADDR
// for i in units do
64188: LD_ADDR_VAR 0 4
64192: PUSH
64193: LD_VAR 0 1
64197: PUSH
64198: FOR_IN
64199: IFFALSE 64242
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64201: LD_ADDR_VAR 0 5
64205: PUSH
64206: LD_VAR 0 5
64210: PPUSH
64211: LD_VAR 0 5
64215: PUSH
64216: LD_INT 1
64218: PLUS
64219: PPUSH
64220: LD_VAR 0 4
64224: PPUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: CALL_OW 259
64234: PPUSH
64235: CALL_OW 2
64239: ST_TO_ADDR
64240: GO 64198
64242: POP
64243: POP
// if not tmp then
64244: LD_VAR 0 5
64248: NOT
64249: IFFALSE 64253
// exit ;
64251: GO 64273
// result := SortListByListDesc ( units , tmp ) ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_VAR 0 1
64262: PPUSH
64263: LD_VAR 0 5
64267: PPUSH
64268: CALL_OW 77
64272: ST_TO_ADDR
// end ;
64273: LD_VAR 0 3
64277: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
64282: PPUSH
// result := false ;
64283: LD_ADDR_VAR 0 3
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// x := GetX ( building ) ;
64291: LD_ADDR_VAR 0 4
64295: PUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: CALL_OW 250
64305: ST_TO_ADDR
// y := GetY ( building ) ;
64306: LD_ADDR_VAR 0 5
64310: PUSH
64311: LD_VAR 0 2
64315: PPUSH
64316: CALL_OW 251
64320: ST_TO_ADDR
// if not building or not x or not y then
64321: LD_VAR 0 2
64325: NOT
64326: PUSH
64327: LD_VAR 0 4
64331: NOT
64332: OR
64333: PUSH
64334: LD_VAR 0 5
64338: NOT
64339: OR
64340: IFFALSE 64344
// exit ;
64342: GO 64436
// if GetTaskList ( unit ) then
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 437
64353: IFFALSE 64436
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64355: LD_STRING e
64357: PUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: CALL_OW 437
64367: PUSH
64368: LD_INT 1
64370: ARRAY
64371: PUSH
64372: LD_INT 1
64374: ARRAY
64375: EQUAL
64376: PUSH
64377: LD_VAR 0 4
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 437
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PUSH
64396: LD_INT 2
64398: ARRAY
64399: EQUAL
64400: AND
64401: PUSH
64402: LD_VAR 0 5
64406: PUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 437
64416: PUSH
64417: LD_INT 1
64419: ARRAY
64420: PUSH
64421: LD_INT 3
64423: ARRAY
64424: EQUAL
64425: AND
64426: IFFALSE 64436
// result := true end ;
64428: LD_ADDR_VAR 0 3
64432: PUSH
64433: LD_INT 1
64435: ST_TO_ADDR
// end ;
64436: LD_VAR 0 3
64440: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64441: LD_INT 0
64443: PPUSH
// result := false ;
64444: LD_ADDR_VAR 0 4
64448: PUSH
64449: LD_INT 0
64451: ST_TO_ADDR
// if GetTaskList ( unit ) then
64452: LD_VAR 0 1
64456: PPUSH
64457: CALL_OW 437
64461: IFFALSE 64544
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64463: LD_STRING M
64465: PUSH
64466: LD_VAR 0 1
64470: PPUSH
64471: CALL_OW 437
64475: PUSH
64476: LD_INT 1
64478: ARRAY
64479: PUSH
64480: LD_INT 1
64482: ARRAY
64483: EQUAL
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: CALL_OW 437
64499: PUSH
64500: LD_INT 1
64502: ARRAY
64503: PUSH
64504: LD_INT 2
64506: ARRAY
64507: EQUAL
64508: AND
64509: PUSH
64510: LD_VAR 0 3
64514: PUSH
64515: LD_VAR 0 1
64519: PPUSH
64520: CALL_OW 437
64524: PUSH
64525: LD_INT 1
64527: ARRAY
64528: PUSH
64529: LD_INT 3
64531: ARRAY
64532: EQUAL
64533: AND
64534: IFFALSE 64544
// result := true ;
64536: LD_ADDR_VAR 0 4
64540: PUSH
64541: LD_INT 1
64543: ST_TO_ADDR
// end ; end ;
64544: LD_VAR 0 4
64548: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
64553: PPUSH
64554: PPUSH
// if not unit or not area then
64555: LD_VAR 0 1
64559: NOT
64560: PUSH
64561: LD_VAR 0 2
64565: NOT
64566: OR
64567: IFFALSE 64571
// exit ;
64569: GO 64735
// tmp := AreaToList ( area , i ) ;
64571: LD_ADDR_VAR 0 6
64575: PUSH
64576: LD_VAR 0 2
64580: PPUSH
64581: LD_VAR 0 5
64585: PPUSH
64586: CALL_OW 517
64590: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64591: LD_ADDR_VAR 0 5
64595: PUSH
64596: DOUBLE
64597: LD_INT 1
64599: DEC
64600: ST_TO_ADDR
64601: LD_VAR 0 6
64605: PUSH
64606: LD_INT 1
64608: ARRAY
64609: PUSH
64610: FOR_TO
64611: IFFALSE 64733
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64613: LD_ADDR_VAR 0 7
64617: PUSH
64618: LD_VAR 0 6
64622: PUSH
64623: LD_INT 1
64625: ARRAY
64626: PUSH
64627: LD_VAR 0 5
64631: ARRAY
64632: PUSH
64633: LD_VAR 0 6
64637: PUSH
64638: LD_INT 2
64640: ARRAY
64641: PUSH
64642: LD_VAR 0 5
64646: ARRAY
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64652: LD_VAR 0 7
64656: PUSH
64657: LD_INT 1
64659: ARRAY
64660: PPUSH
64661: LD_VAR 0 7
64665: PUSH
64666: LD_INT 2
64668: ARRAY
64669: PPUSH
64670: CALL_OW 428
64674: PUSH
64675: LD_INT 0
64677: EQUAL
64678: IFFALSE 64731
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64680: LD_VAR 0 1
64684: PPUSH
64685: LD_VAR 0 7
64689: PUSH
64690: LD_INT 1
64692: ARRAY
64693: PPUSH
64694: LD_VAR 0 7
64698: PUSH
64699: LD_INT 2
64701: ARRAY
64702: PPUSH
64703: LD_VAR 0 3
64707: PPUSH
64708: CALL_OW 48
// result := IsPlaced ( unit ) ;
64712: LD_ADDR_VAR 0 4
64716: PUSH
64717: LD_VAR 0 1
64721: PPUSH
64722: CALL_OW 305
64726: ST_TO_ADDR
// exit ;
64727: POP
64728: POP
64729: GO 64735
// end ; end ;
64731: GO 64610
64733: POP
64734: POP
// end ;
64735: LD_VAR 0 4
64739: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64740: LD_INT 0
64742: PPUSH
64743: PPUSH
64744: PPUSH
// if not side or side > 8 then
64745: LD_VAR 0 1
64749: NOT
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 8
64758: GREATER
64759: OR
64760: IFFALSE 64764
// exit ;
64762: GO 64951
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64764: LD_ADDR_VAR 0 4
64768: PUSH
64769: LD_INT 22
64771: PUSH
64772: LD_VAR 0 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 21
64783: PUSH
64784: LD_INT 3
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PPUSH
64795: CALL_OW 69
64799: ST_TO_ADDR
// if not tmp then
64800: LD_VAR 0 4
64804: NOT
64805: IFFALSE 64809
// exit ;
64807: GO 64951
// enable_addtolog := true ;
64809: LD_ADDR_OWVAR 81
64813: PUSH
64814: LD_INT 1
64816: ST_TO_ADDR
// AddToLog ( [ ) ;
64817: LD_STRING [
64819: PPUSH
64820: CALL_OW 561
// for i in tmp do
64824: LD_ADDR_VAR 0 3
64828: PUSH
64829: LD_VAR 0 4
64833: PUSH
64834: FOR_IN
64835: IFFALSE 64942
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64837: LD_STRING [
64839: PUSH
64840: LD_VAR 0 3
64844: PPUSH
64845: CALL_OW 266
64849: STR
64850: PUSH
64851: LD_STRING , 
64853: STR
64854: PUSH
64855: LD_VAR 0 3
64859: PPUSH
64860: CALL_OW 250
64864: STR
64865: PUSH
64866: LD_STRING , 
64868: STR
64869: PUSH
64870: LD_VAR 0 3
64874: PPUSH
64875: CALL_OW 251
64879: STR
64880: PUSH
64881: LD_STRING , 
64883: STR
64884: PUSH
64885: LD_VAR 0 3
64889: PPUSH
64890: CALL_OW 254
64894: STR
64895: PUSH
64896: LD_STRING , 
64898: STR
64899: PUSH
64900: LD_VAR 0 3
64904: PPUSH
64905: LD_INT 1
64907: PPUSH
64908: CALL_OW 268
64912: STR
64913: PUSH
64914: LD_STRING , 
64916: STR
64917: PUSH
64918: LD_VAR 0 3
64922: PPUSH
64923: LD_INT 2
64925: PPUSH
64926: CALL_OW 268
64930: STR
64931: PUSH
64932: LD_STRING ],
64934: STR
64935: PPUSH
64936: CALL_OW 561
// end ;
64940: GO 64834
64942: POP
64943: POP
// AddToLog ( ]; ) ;
64944: LD_STRING ];
64946: PPUSH
64947: CALL_OW 561
// end ;
64951: LD_VAR 0 2
64955: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64956: LD_INT 0
64958: PPUSH
64959: PPUSH
64960: PPUSH
64961: PPUSH
64962: PPUSH
// if not area or not rate or not max then
64963: LD_VAR 0 1
64967: NOT
64968: PUSH
64969: LD_VAR 0 2
64973: NOT
64974: OR
64975: PUSH
64976: LD_VAR 0 4
64980: NOT
64981: OR
64982: IFFALSE 64986
// exit ;
64984: GO 65178
// while 1 do
64986: LD_INT 1
64988: IFFALSE 65178
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64990: LD_ADDR_VAR 0 9
64994: PUSH
64995: LD_VAR 0 1
64999: PPUSH
65000: LD_INT 1
65002: PPUSH
65003: CALL_OW 287
65007: PUSH
65008: LD_INT 10
65010: MUL
65011: ST_TO_ADDR
// r := rate / 10 ;
65012: LD_ADDR_VAR 0 7
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_INT 10
65024: DIVREAL
65025: ST_TO_ADDR
// time := 1 1$00 ;
65026: LD_ADDR_VAR 0 8
65030: PUSH
65031: LD_INT 2100
65033: ST_TO_ADDR
// if amount < min then
65034: LD_VAR 0 9
65038: PUSH
65039: LD_VAR 0 3
65043: LESS
65044: IFFALSE 65062
// r := r * 2 else
65046: LD_ADDR_VAR 0 7
65050: PUSH
65051: LD_VAR 0 7
65055: PUSH
65056: LD_INT 2
65058: MUL
65059: ST_TO_ADDR
65060: GO 65088
// if amount > max then
65062: LD_VAR 0 9
65066: PUSH
65067: LD_VAR 0 4
65071: GREATER
65072: IFFALSE 65088
// r := r / 2 ;
65074: LD_ADDR_VAR 0 7
65078: PUSH
65079: LD_VAR 0 7
65083: PUSH
65084: LD_INT 2
65086: DIVREAL
65087: ST_TO_ADDR
// time := time / r ;
65088: LD_ADDR_VAR 0 8
65092: PUSH
65093: LD_VAR 0 8
65097: PUSH
65098: LD_VAR 0 7
65102: DIVREAL
65103: ST_TO_ADDR
// if time < 0 then
65104: LD_VAR 0 8
65108: PUSH
65109: LD_INT 0
65111: LESS
65112: IFFALSE 65129
// time := time * - 1 ;
65114: LD_ADDR_VAR 0 8
65118: PUSH
65119: LD_VAR 0 8
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: MUL
65128: ST_TO_ADDR
// wait ( time ) ;
65129: LD_VAR 0 8
65133: PPUSH
65134: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65138: LD_INT 35
65140: PPUSH
65141: LD_INT 875
65143: PPUSH
65144: CALL_OW 12
65148: PPUSH
65149: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65153: LD_INT 1
65155: PPUSH
65156: LD_INT 5
65158: PPUSH
65159: CALL_OW 12
65163: PPUSH
65164: LD_VAR 0 1
65168: PPUSH
65169: LD_INT 1
65171: PPUSH
65172: CALL_OW 55
// end ;
65176: GO 64986
// end ;
65178: LD_VAR 0 5
65182: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65183: LD_INT 0
65185: PPUSH
65186: PPUSH
65187: PPUSH
65188: PPUSH
65189: PPUSH
65190: PPUSH
65191: PPUSH
65192: PPUSH
// if not turrets or not factories then
65193: LD_VAR 0 1
65197: NOT
65198: PUSH
65199: LD_VAR 0 2
65203: NOT
65204: OR
65205: IFFALSE 65209
// exit ;
65207: GO 65516
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65209: LD_ADDR_VAR 0 10
65213: PUSH
65214: LD_INT 5
65216: PUSH
65217: LD_INT 6
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 4
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 5
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 24
65251: PUSH
65252: LD_INT 25
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 23
65261: PUSH
65262: LD_INT 27
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 42
65275: PUSH
65276: LD_INT 43
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 44
65285: PUSH
65286: LD_INT 46
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 45
65295: PUSH
65296: LD_INT 47
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// result := [ ] ;
65313: LD_ADDR_VAR 0 3
65317: PUSH
65318: EMPTY
65319: ST_TO_ADDR
// for i in turrets do
65320: LD_ADDR_VAR 0 4
65324: PUSH
65325: LD_VAR 0 1
65329: PUSH
65330: FOR_IN
65331: IFFALSE 65514
// begin nat := GetNation ( i ) ;
65333: LD_ADDR_VAR 0 7
65337: PUSH
65338: LD_VAR 0 4
65342: PPUSH
65343: CALL_OW 248
65347: ST_TO_ADDR
// weapon := 0 ;
65348: LD_ADDR_VAR 0 8
65352: PUSH
65353: LD_INT 0
65355: ST_TO_ADDR
// if not nat then
65356: LD_VAR 0 7
65360: NOT
65361: IFFALSE 65365
// continue ;
65363: GO 65330
// for j in list [ nat ] do
65365: LD_ADDR_VAR 0 5
65369: PUSH
65370: LD_VAR 0 10
65374: PUSH
65375: LD_VAR 0 7
65379: ARRAY
65380: PUSH
65381: FOR_IN
65382: IFFALSE 65423
// if GetBWeapon ( i ) = j [ 1 ] then
65384: LD_VAR 0 4
65388: PPUSH
65389: CALL_OW 269
65393: PUSH
65394: LD_VAR 0 5
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: EQUAL
65403: IFFALSE 65421
// begin weapon := j [ 2 ] ;
65405: LD_ADDR_VAR 0 8
65409: PUSH
65410: LD_VAR 0 5
65414: PUSH
65415: LD_INT 2
65417: ARRAY
65418: ST_TO_ADDR
// break ;
65419: GO 65423
// end ;
65421: GO 65381
65423: POP
65424: POP
// if not weapon then
65425: LD_VAR 0 8
65429: NOT
65430: IFFALSE 65434
// continue ;
65432: GO 65330
// for k in factories do
65434: LD_ADDR_VAR 0 6
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: FOR_IN
65445: IFFALSE 65510
// begin weapons := AvailableWeaponList ( k ) ;
65447: LD_ADDR_VAR 0 9
65451: PUSH
65452: LD_VAR 0 6
65456: PPUSH
65457: CALL_OW 478
65461: ST_TO_ADDR
// if not weapons then
65462: LD_VAR 0 9
65466: NOT
65467: IFFALSE 65471
// continue ;
65469: GO 65444
// if weapon in weapons then
65471: LD_VAR 0 8
65475: PUSH
65476: LD_VAR 0 9
65480: IN
65481: IFFALSE 65508
// begin result := [ i , weapon ] ;
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_VAR 0 4
65492: PUSH
65493: LD_VAR 0 8
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: ST_TO_ADDR
// exit ;
65502: POP
65503: POP
65504: POP
65505: POP
65506: GO 65516
// end ; end ;
65508: GO 65444
65510: POP
65511: POP
// end ;
65512: GO 65330
65514: POP
65515: POP
// end ;
65516: LD_VAR 0 3
65520: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65521: LD_INT 0
65523: PPUSH
// if not side or side > 8 then
65524: LD_VAR 0 3
65528: NOT
65529: PUSH
65530: LD_VAR 0 3
65534: PUSH
65535: LD_INT 8
65537: GREATER
65538: OR
65539: IFFALSE 65543
// exit ;
65541: GO 65602
// if not range then
65543: LD_VAR 0 4
65547: NOT
65548: IFFALSE 65559
// range := - 12 ;
65550: LD_ADDR_VAR 0 4
65554: PUSH
65555: LD_INT 12
65557: NEG
65558: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65559: LD_VAR 0 1
65563: PPUSH
65564: LD_VAR 0 2
65568: PPUSH
65569: LD_VAR 0 3
65573: PPUSH
65574: LD_VAR 0 4
65578: PPUSH
65579: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_VAR 0 2
65592: PPUSH
65593: LD_VAR 0 3
65597: PPUSH
65598: CALL_OW 331
// end ;
65602: LD_VAR 0 5
65606: RET
// export function Video ( mode ) ; begin
65607: LD_INT 0
65609: PPUSH
// ingame_video = mode ;
65610: LD_ADDR_OWVAR 52
65614: PUSH
65615: LD_VAR 0 1
65619: ST_TO_ADDR
// interface_hidden = mode ;
65620: LD_ADDR_OWVAR 54
65624: PUSH
65625: LD_VAR 0 1
65629: ST_TO_ADDR
// end ;
65630: LD_VAR 0 2
65634: RET
// export function Join ( array , element ) ; begin
65635: LD_INT 0
65637: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65638: LD_ADDR_VAR 0 3
65642: PUSH
65643: LD_VAR 0 1
65647: PPUSH
65648: LD_VAR 0 1
65652: PUSH
65653: LD_INT 1
65655: PLUS
65656: PPUSH
65657: LD_VAR 0 2
65661: PPUSH
65662: CALL_OW 1
65666: ST_TO_ADDR
// end ;
65667: LD_VAR 0 3
65671: RET
// export function JoinUnion ( array , element ) ; begin
65672: LD_INT 0
65674: PPUSH
// result := array union element ;
65675: LD_ADDR_VAR 0 3
65679: PUSH
65680: LD_VAR 0 1
65684: PUSH
65685: LD_VAR 0 2
65689: UNION
65690: ST_TO_ADDR
// end ;
65691: LD_VAR 0 3
65695: RET
// export function GetBehemoths ( side ) ; begin
65696: LD_INT 0
65698: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65699: LD_ADDR_VAR 0 2
65703: PUSH
65704: LD_INT 22
65706: PUSH
65707: LD_VAR 0 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 31
65718: PUSH
65719: LD_INT 25
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PPUSH
65730: CALL_OW 69
65734: ST_TO_ADDR
// end ;
65735: LD_VAR 0 2
65739: RET
// export function Shuffle ( array ) ; var i , index ; begin
65740: LD_INT 0
65742: PPUSH
65743: PPUSH
65744: PPUSH
// result := [ ] ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: EMPTY
65751: ST_TO_ADDR
// if not array then
65752: LD_VAR 0 1
65756: NOT
65757: IFFALSE 65761
// exit ;
65759: GO 65860
// Randomize ;
65761: CALL_OW 10
// for i = array downto 1 do
65765: LD_ADDR_VAR 0 3
65769: PUSH
65770: DOUBLE
65771: LD_VAR 0 1
65775: INC
65776: ST_TO_ADDR
65777: LD_INT 1
65779: PUSH
65780: FOR_DOWNTO
65781: IFFALSE 65858
// begin index := rand ( 1 , array ) ;
65783: LD_ADDR_VAR 0 4
65787: PUSH
65788: LD_INT 1
65790: PPUSH
65791: LD_VAR 0 1
65795: PPUSH
65796: CALL_OW 12
65800: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65801: LD_ADDR_VAR 0 2
65805: PUSH
65806: LD_VAR 0 2
65810: PPUSH
65811: LD_VAR 0 2
65815: PUSH
65816: LD_INT 1
65818: PLUS
65819: PPUSH
65820: LD_VAR 0 1
65824: PUSH
65825: LD_VAR 0 4
65829: ARRAY
65830: PPUSH
65831: CALL_OW 2
65835: ST_TO_ADDR
// array := Delete ( array , index ) ;
65836: LD_ADDR_VAR 0 1
65840: PUSH
65841: LD_VAR 0 1
65845: PPUSH
65846: LD_VAR 0 4
65850: PPUSH
65851: CALL_OW 3
65855: ST_TO_ADDR
// end ;
65856: GO 65780
65858: POP
65859: POP
// end ;
65860: LD_VAR 0 2
65864: RET
// export function GetBaseMaterials ( base ) ; begin
65865: LD_INT 0
65867: PPUSH
// result := [ 0 , 0 , 0 ] ;
65868: LD_ADDR_VAR 0 2
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: ST_TO_ADDR
// if not base then
65887: LD_VAR 0 1
65891: NOT
65892: IFFALSE 65896
// exit ;
65894: GO 65945
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65896: LD_ADDR_VAR 0 2
65900: PUSH
65901: LD_VAR 0 1
65905: PPUSH
65906: LD_INT 1
65908: PPUSH
65909: CALL_OW 275
65913: PUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_INT 2
65921: PPUSH
65922: CALL_OW 275
65926: PUSH
65927: LD_VAR 0 1
65931: PPUSH
65932: LD_INT 3
65934: PPUSH
65935: CALL_OW 275
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// end ;
65945: LD_VAR 0 2
65949: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65950: LD_INT 0
65952: PPUSH
65953: PPUSH
// result := array ;
65954: LD_ADDR_VAR 0 3
65958: PUSH
65959: LD_VAR 0 1
65963: ST_TO_ADDR
// if size > 0 then
65964: LD_VAR 0 2
65968: PUSH
65969: LD_INT 0
65971: GREATER
65972: IFFALSE 66018
// for i := array downto size do
65974: LD_ADDR_VAR 0 4
65978: PUSH
65979: DOUBLE
65980: LD_VAR 0 1
65984: INC
65985: ST_TO_ADDR
65986: LD_VAR 0 2
65990: PUSH
65991: FOR_DOWNTO
65992: IFFALSE 66016
// result := Delete ( result , result ) ;
65994: LD_ADDR_VAR 0 3
65998: PUSH
65999: LD_VAR 0 3
66003: PPUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: CALL_OW 3
66013: ST_TO_ADDR
66014: GO 65991
66016: POP
66017: POP
// end ;
66018: LD_VAR 0 3
66022: RET
// export function ComExit ( unit ) ; var tmp ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
// if not IsInUnit ( unit ) then
66027: LD_VAR 0 1
66031: PPUSH
66032: CALL_OW 310
66036: NOT
66037: IFFALSE 66041
// exit ;
66039: GO 66101
// tmp := IsInUnit ( unit ) ;
66041: LD_ADDR_VAR 0 3
66045: PUSH
66046: LD_VAR 0 1
66050: PPUSH
66051: CALL_OW 310
66055: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66056: LD_VAR 0 3
66060: PPUSH
66061: CALL_OW 247
66065: PUSH
66066: LD_INT 2
66068: EQUAL
66069: IFFALSE 66082
// ComExitVehicle ( unit ) else
66071: LD_VAR 0 1
66075: PPUSH
66076: CALL_OW 121
66080: GO 66091
// ComExitBuilding ( unit ) ;
66082: LD_VAR 0 1
66086: PPUSH
66087: CALL_OW 122
// result := tmp ;
66091: LD_ADDR_VAR 0 2
66095: PUSH
66096: LD_VAR 0 3
66100: ST_TO_ADDR
// end ;
66101: LD_VAR 0 2
66105: RET
// export function ComExitAll ( units ) ; var i ; begin
66106: LD_INT 0
66108: PPUSH
66109: PPUSH
// if not units then
66110: LD_VAR 0 1
66114: NOT
66115: IFFALSE 66119
// exit ;
66117: GO 66145
// for i in units do
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_VAR 0 1
66128: PUSH
66129: FOR_IN
66130: IFFALSE 66143
// ComExit ( i ) ;
66132: LD_VAR 0 3
66136: PPUSH
66137: CALL 66023 0 1
66141: GO 66129
66143: POP
66144: POP
// end ;
66145: LD_VAR 0 2
66149: RET
// export function ResetHc ; begin
66150: LD_INT 0
66152: PPUSH
// InitHc ;
66153: CALL_OW 19
// hc_importance := 0 ;
66157: LD_ADDR_OWVAR 32
66161: PUSH
66162: LD_INT 0
66164: ST_TO_ADDR
// end ;
66165: LD_VAR 0 1
66169: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66170: LD_INT 0
66172: PPUSH
66173: PPUSH
66174: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66175: LD_ADDR_VAR 0 6
66179: PUSH
66180: LD_VAR 0 1
66184: PUSH
66185: LD_VAR 0 3
66189: PLUS
66190: PUSH
66191: LD_INT 2
66193: DIV
66194: ST_TO_ADDR
// if _x < 0 then
66195: LD_VAR 0 6
66199: PUSH
66200: LD_INT 0
66202: LESS
66203: IFFALSE 66220
// _x := _x * - 1 ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_VAR 0 6
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: MUL
66219: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66220: LD_ADDR_VAR 0 7
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_VAR 0 4
66234: PLUS
66235: PUSH
66236: LD_INT 2
66238: DIV
66239: ST_TO_ADDR
// if _y < 0 then
66240: LD_VAR 0 7
66244: PUSH
66245: LD_INT 0
66247: LESS
66248: IFFALSE 66265
// _y := _y * - 1 ;
66250: LD_ADDR_VAR 0 7
66254: PUSH
66255: LD_VAR 0 7
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: MUL
66264: ST_TO_ADDR
// result := [ _x , _y ] ;
66265: LD_ADDR_VAR 0 5
66269: PUSH
66270: LD_VAR 0 6
66274: PUSH
66275: LD_VAR 0 7
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// end ;
66284: LD_VAR 0 5
66288: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66289: LD_INT 0
66291: PPUSH
66292: PPUSH
66293: PPUSH
66294: PPUSH
// task := GetTaskList ( unit ) ;
66295: LD_ADDR_VAR 0 7
66299: PUSH
66300: LD_VAR 0 1
66304: PPUSH
66305: CALL_OW 437
66309: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66310: LD_VAR 0 7
66314: NOT
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: CALL_OW 308
66330: NOT
66331: AND
66332: IFFALSE 66336
// exit ;
66334: GO 66454
// if IsInArea ( unit , area ) then
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_VAR 0 2
66345: PPUSH
66346: CALL_OW 308
66350: IFFALSE 66368
// begin ComMoveToArea ( unit , goAway ) ;
66352: LD_VAR 0 1
66356: PPUSH
66357: LD_VAR 0 3
66361: PPUSH
66362: CALL_OW 113
// exit ;
66366: GO 66454
// end ; if task [ 1 ] [ 1 ] <> M then
66368: LD_VAR 0 7
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PUSH
66377: LD_INT 1
66379: ARRAY
66380: PUSH
66381: LD_STRING M
66383: NONEQUAL
66384: IFFALSE 66388
// exit ;
66386: GO 66454
// x := task [ 1 ] [ 2 ] ;
66388: LD_ADDR_VAR 0 5
66392: PUSH
66393: LD_VAR 0 7
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PUSH
66402: LD_INT 2
66404: ARRAY
66405: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66406: LD_ADDR_VAR 0 6
66410: PUSH
66411: LD_VAR 0 7
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: PUSH
66420: LD_INT 3
66422: ARRAY
66423: ST_TO_ADDR
// if InArea ( x , y , area ) then
66424: LD_VAR 0 5
66428: PPUSH
66429: LD_VAR 0 6
66433: PPUSH
66434: LD_VAR 0 2
66438: PPUSH
66439: CALL_OW 309
66443: IFFALSE 66454
// ComStop ( unit ) ;
66445: LD_VAR 0 1
66449: PPUSH
66450: CALL_OW 141
// end ;
66454: LD_VAR 0 4
66458: RET
// export function Abs ( value ) ; begin
66459: LD_INT 0
66461: PPUSH
// result := value ;
66462: LD_ADDR_VAR 0 2
66466: PUSH
66467: LD_VAR 0 1
66471: ST_TO_ADDR
// if value < 0 then
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 0
66479: LESS
66480: IFFALSE 66497
// result := value * - 1 ;
66482: LD_ADDR_VAR 0 2
66486: PUSH
66487: LD_VAR 0 1
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: MUL
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 2
66501: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
66506: PPUSH
66507: PPUSH
66508: PPUSH
66509: PPUSH
66510: PPUSH
66511: PPUSH
// if not unit or not building then
66512: LD_VAR 0 1
66516: NOT
66517: PUSH
66518: LD_VAR 0 2
66522: NOT
66523: OR
66524: IFFALSE 66528
// exit ;
66526: GO 66754
// x := GetX ( building ) ;
66528: LD_ADDR_VAR 0 4
66532: PUSH
66533: LD_VAR 0 2
66537: PPUSH
66538: CALL_OW 250
66542: ST_TO_ADDR
// y := GetY ( building ) ;
66543: LD_ADDR_VAR 0 6
66547: PUSH
66548: LD_VAR 0 2
66552: PPUSH
66553: CALL_OW 251
66557: ST_TO_ADDR
// d := GetDir ( building ) ;
66558: LD_ADDR_VAR 0 8
66562: PUSH
66563: LD_VAR 0 2
66567: PPUSH
66568: CALL_OW 254
66572: ST_TO_ADDR
// r := 4 ;
66573: LD_ADDR_VAR 0 9
66577: PUSH
66578: LD_INT 4
66580: ST_TO_ADDR
// for i := 1 to 5 do
66581: LD_ADDR_VAR 0 10
66585: PUSH
66586: DOUBLE
66587: LD_INT 1
66589: DEC
66590: ST_TO_ADDR
66591: LD_INT 5
66593: PUSH
66594: FOR_TO
66595: IFFALSE 66752
// begin _x := ShiftX ( x , d , r + i ) ;
66597: LD_ADDR_VAR 0 5
66601: PUSH
66602: LD_VAR 0 4
66606: PPUSH
66607: LD_VAR 0 8
66611: PPUSH
66612: LD_VAR 0 9
66616: PUSH
66617: LD_VAR 0 10
66621: PLUS
66622: PPUSH
66623: CALL_OW 272
66627: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66628: LD_ADDR_VAR 0 7
66632: PUSH
66633: LD_VAR 0 6
66637: PPUSH
66638: LD_VAR 0 8
66642: PPUSH
66643: LD_VAR 0 9
66647: PUSH
66648: LD_VAR 0 10
66652: PLUS
66653: PPUSH
66654: CALL_OW 273
66658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66659: LD_VAR 0 5
66663: PPUSH
66664: LD_VAR 0 7
66668: PPUSH
66669: CALL_OW 488
66673: PUSH
66674: LD_VAR 0 5
66678: PPUSH
66679: LD_VAR 0 7
66683: PPUSH
66684: CALL_OW 428
66688: PPUSH
66689: CALL_OW 247
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: IN
66704: NOT
66705: AND
66706: IFFALSE 66750
// begin ComMoveXY ( unit , _x , _y ) ;
66708: LD_VAR 0 1
66712: PPUSH
66713: LD_VAR 0 5
66717: PPUSH
66718: LD_VAR 0 7
66722: PPUSH
66723: CALL_OW 111
// result := [ _x , _y ] ;
66727: LD_ADDR_VAR 0 3
66731: PUSH
66732: LD_VAR 0 5
66736: PUSH
66737: LD_VAR 0 7
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// exit ;
66746: POP
66747: POP
66748: GO 66754
// end ; end ;
66750: GO 66594
66752: POP
66753: POP
// end ;
66754: LD_VAR 0 3
66758: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
// result := 0 ;
66764: LD_ADDR_VAR 0 3
66768: PUSH
66769: LD_INT 0
66771: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66772: LD_VAR 0 1
66776: PUSH
66777: LD_INT 0
66779: LESS
66780: PUSH
66781: LD_VAR 0 1
66785: PUSH
66786: LD_INT 8
66788: GREATER
66789: OR
66790: PUSH
66791: LD_VAR 0 2
66795: PUSH
66796: LD_INT 0
66798: LESS
66799: OR
66800: PUSH
66801: LD_VAR 0 2
66805: PUSH
66806: LD_INT 8
66808: GREATER
66809: OR
66810: IFFALSE 66814
// exit ;
66812: GO 66889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66814: LD_ADDR_VAR 0 4
66818: PUSH
66819: LD_INT 22
66821: PUSH
66822: LD_VAR 0 2
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PPUSH
66831: CALL_OW 69
66835: PUSH
66836: FOR_IN
66837: IFFALSE 66887
// begin un := UnitShoot ( i ) ;
66839: LD_ADDR_VAR 0 5
66843: PUSH
66844: LD_VAR 0 4
66848: PPUSH
66849: CALL_OW 504
66853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66854: LD_VAR 0 5
66858: PPUSH
66859: CALL_OW 255
66863: PUSH
66864: LD_VAR 0 1
66868: EQUAL
66869: IFFALSE 66885
// begin result := un ;
66871: LD_ADDR_VAR 0 3
66875: PUSH
66876: LD_VAR 0 5
66880: ST_TO_ADDR
// exit ;
66881: POP
66882: POP
66883: GO 66889
// end ; end ;
66885: GO 66836
66887: POP
66888: POP
// end ;
66889: LD_VAR 0 3
66893: RET
// export function GetCargoBay ( units ) ; begin
66894: LD_INT 0
66896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66897: LD_ADDR_VAR 0 2
66901: PUSH
66902: LD_VAR 0 1
66906: PPUSH
66907: LD_INT 2
66909: PUSH
66910: LD_INT 34
66912: PUSH
66913: LD_INT 12
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 34
66922: PUSH
66923: LD_INT 51
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 34
66932: PUSH
66933: LD_INT 32
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 34
66942: PUSH
66943: LD_EXP 107
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: PPUSH
66959: CALL_OW 72
66963: ST_TO_ADDR
// end ;
66964: LD_VAR 0 2
66968: RET
// export function Negate ( value ) ; begin
66969: LD_INT 0
66971: PPUSH
// result := not value ;
66972: LD_ADDR_VAR 0 2
66976: PUSH
66977: LD_VAR 0 1
66981: NOT
66982: ST_TO_ADDR
// end ;
66983: LD_VAR 0 2
66987: RET
// export function Inc ( value ) ; begin
66988: LD_INT 0
66990: PPUSH
// result := value + 1 ;
66991: LD_ADDR_VAR 0 2
66995: PUSH
66996: LD_VAR 0 1
67000: PUSH
67001: LD_INT 1
67003: PLUS
67004: ST_TO_ADDR
// end ;
67005: LD_VAR 0 2
67009: RET
// export function Dec ( value ) ; begin
67010: LD_INT 0
67012: PPUSH
// result := value - 1 ;
67013: LD_ADDR_VAR 0 2
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_INT 1
67025: MINUS
67026: ST_TO_ADDR
// end ;
67027: LD_VAR 0 2
67031: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67032: LD_INT 0
67034: PPUSH
67035: PPUSH
67036: PPUSH
67037: PPUSH
67038: PPUSH
67039: PPUSH
67040: PPUSH
67041: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67042: LD_VAR 0 1
67046: PPUSH
67047: LD_VAR 0 2
67051: PPUSH
67052: CALL_OW 488
67056: NOT
67057: PUSH
67058: LD_VAR 0 3
67062: PPUSH
67063: LD_VAR 0 4
67067: PPUSH
67068: CALL_OW 488
67072: NOT
67073: OR
67074: IFFALSE 67087
// begin result := - 1 ;
67076: LD_ADDR_VAR 0 5
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: ST_TO_ADDR
// exit ;
67085: GO 67322
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67087: LD_ADDR_VAR 0 12
67091: PUSH
67092: LD_VAR 0 1
67096: PPUSH
67097: LD_VAR 0 2
67101: PPUSH
67102: LD_VAR 0 3
67106: PPUSH
67107: LD_VAR 0 4
67111: PPUSH
67112: CALL 66170 0 4
67116: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67117: LD_ADDR_VAR 0 11
67121: PUSH
67122: LD_VAR 0 1
67126: PPUSH
67127: LD_VAR 0 2
67131: PPUSH
67132: LD_VAR 0 12
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PPUSH
67141: LD_VAR 0 12
67145: PUSH
67146: LD_INT 2
67148: ARRAY
67149: PPUSH
67150: CALL_OW 298
67154: ST_TO_ADDR
// distance := 9999 ;
67155: LD_ADDR_VAR 0 10
67159: PUSH
67160: LD_INT 9999
67162: ST_TO_ADDR
// for i := 0 to 5 do
67163: LD_ADDR_VAR 0 6
67167: PUSH
67168: DOUBLE
67169: LD_INT 0
67171: DEC
67172: ST_TO_ADDR
67173: LD_INT 5
67175: PUSH
67176: FOR_TO
67177: IFFALSE 67320
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67179: LD_ADDR_VAR 0 7
67183: PUSH
67184: LD_VAR 0 1
67188: PPUSH
67189: LD_VAR 0 6
67193: PPUSH
67194: LD_VAR 0 11
67198: PPUSH
67199: CALL_OW 272
67203: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67204: LD_ADDR_VAR 0 8
67208: PUSH
67209: LD_VAR 0 2
67213: PPUSH
67214: LD_VAR 0 6
67218: PPUSH
67219: LD_VAR 0 11
67223: PPUSH
67224: CALL_OW 273
67228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67229: LD_VAR 0 7
67233: PPUSH
67234: LD_VAR 0 8
67238: PPUSH
67239: CALL_OW 488
67243: NOT
67244: IFFALSE 67248
// continue ;
67246: GO 67176
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67248: LD_ADDR_VAR 0 9
67252: PUSH
67253: LD_VAR 0 12
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PPUSH
67262: LD_VAR 0 12
67266: PUSH
67267: LD_INT 2
67269: ARRAY
67270: PPUSH
67271: LD_VAR 0 7
67275: PPUSH
67276: LD_VAR 0 8
67280: PPUSH
67281: CALL_OW 298
67285: ST_TO_ADDR
// if tmp < distance then
67286: LD_VAR 0 9
67290: PUSH
67291: LD_VAR 0 10
67295: LESS
67296: IFFALSE 67318
// begin result := i ;
67298: LD_ADDR_VAR 0 5
67302: PUSH
67303: LD_VAR 0 6
67307: ST_TO_ADDR
// distance := tmp ;
67308: LD_ADDR_VAR 0 10
67312: PUSH
67313: LD_VAR 0 9
67317: ST_TO_ADDR
// end ; end ;
67318: GO 67176
67320: POP
67321: POP
// end ;
67322: LD_VAR 0 5
67326: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67327: LD_INT 0
67329: PPUSH
67330: PPUSH
// if not driver or not IsInUnit ( driver ) then
67331: LD_VAR 0 1
67335: NOT
67336: PUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL_OW 310
67346: NOT
67347: OR
67348: IFFALSE 67352
// exit ;
67350: GO 67442
// vehicle := IsInUnit ( driver ) ;
67352: LD_ADDR_VAR 0 3
67356: PUSH
67357: LD_VAR 0 1
67361: PPUSH
67362: CALL_OW 310
67366: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67367: LD_VAR 0 1
67371: PPUSH
67372: LD_STRING \
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: LD_STRING E
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: LD_VAR 0 3
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PPUSH
67438: CALL_OW 446
// end ;
67442: LD_VAR 0 2
67446: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
// if not driver or not IsInUnit ( driver ) then
67451: LD_VAR 0 1
67455: NOT
67456: PUSH
67457: LD_VAR 0 1
67461: PPUSH
67462: CALL_OW 310
67466: NOT
67467: OR
67468: IFFALSE 67472
// exit ;
67470: GO 67562
// vehicle := IsInUnit ( driver ) ;
67472: LD_ADDR_VAR 0 3
67476: PUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 310
67486: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67487: LD_VAR 0 1
67491: PPUSH
67492: LD_STRING \
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 0
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: PUSH
67522: LD_STRING E
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: LD_VAR 0 3
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PPUSH
67558: CALL_OW 447
// end ;
67562: LD_VAR 0 2
67566: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67567: LD_INT 0
67569: PPUSH
67570: PPUSH
67571: PPUSH
// tmp := [ ] ;
67572: LD_ADDR_VAR 0 5
67576: PUSH
67577: EMPTY
67578: ST_TO_ADDR
// for i in units do
67579: LD_ADDR_VAR 0 4
67583: PUSH
67584: LD_VAR 0 1
67588: PUSH
67589: FOR_IN
67590: IFFALSE 67628
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67592: LD_ADDR_VAR 0 5
67596: PUSH
67597: LD_VAR 0 5
67601: PPUSH
67602: LD_VAR 0 5
67606: PUSH
67607: LD_INT 1
67609: PLUS
67610: PPUSH
67611: LD_VAR 0 4
67615: PPUSH
67616: CALL_OW 256
67620: PPUSH
67621: CALL_OW 2
67625: ST_TO_ADDR
67626: GO 67589
67628: POP
67629: POP
// if not tmp then
67630: LD_VAR 0 5
67634: NOT
67635: IFFALSE 67639
// exit ;
67637: GO 67687
// if asc then
67639: LD_VAR 0 2
67643: IFFALSE 67667
// result := SortListByListAsc ( units , tmp ) else
67645: LD_ADDR_VAR 0 3
67649: PUSH
67650: LD_VAR 0 1
67654: PPUSH
67655: LD_VAR 0 5
67659: PPUSH
67660: CALL_OW 76
67664: ST_TO_ADDR
67665: GO 67687
// result := SortListByListDesc ( units , tmp ) ;
67667: LD_ADDR_VAR 0 3
67671: PUSH
67672: LD_VAR 0 1
67676: PPUSH
67677: LD_VAR 0 5
67681: PPUSH
67682: CALL_OW 77
67686: ST_TO_ADDR
// end ;
67687: LD_VAR 0 3
67691: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67692: LD_INT 0
67694: PPUSH
67695: PPUSH
// task := GetTaskList ( mech ) ;
67696: LD_ADDR_VAR 0 4
67700: PUSH
67701: LD_VAR 0 1
67705: PPUSH
67706: CALL_OW 437
67710: ST_TO_ADDR
// if not task then
67711: LD_VAR 0 4
67715: NOT
67716: IFFALSE 67720
// exit ;
67718: GO 67762
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67720: LD_ADDR_VAR 0 3
67724: PUSH
67725: LD_VAR 0 4
67729: PUSH
67730: LD_INT 1
67732: ARRAY
67733: PUSH
67734: LD_INT 1
67736: ARRAY
67737: PUSH
67738: LD_STRING r
67740: EQUAL
67741: PUSH
67742: LD_VAR 0 4
67746: PUSH
67747: LD_INT 1
67749: ARRAY
67750: PUSH
67751: LD_INT 4
67753: ARRAY
67754: PUSH
67755: LD_VAR 0 2
67759: EQUAL
67760: AND
67761: ST_TO_ADDR
// end ;
67762: LD_VAR 0 3
67766: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67767: LD_INT 0
67769: PPUSH
// SetDir ( unit , d ) ;
67770: LD_VAR 0 1
67774: PPUSH
67775: LD_VAR 0 4
67779: PPUSH
67780: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67784: LD_VAR 0 1
67788: PPUSH
67789: LD_VAR 0 2
67793: PPUSH
67794: LD_VAR 0 3
67798: PPUSH
67799: LD_VAR 0 5
67803: PPUSH
67804: CALL_OW 48
// end ;
67808: LD_VAR 0 6
67812: RET
// export function ToNaturalNumber ( number ) ; begin
67813: LD_INT 0
67815: PPUSH
// result := number div 1 ;
67816: LD_ADDR_VAR 0 2
67820: PUSH
67821: LD_VAR 0 1
67825: PUSH
67826: LD_INT 1
67828: DIV
67829: ST_TO_ADDR
// if number < 0 then
67830: LD_VAR 0 1
67834: PUSH
67835: LD_INT 0
67837: LESS
67838: IFFALSE 67848
// result := 0 ;
67840: LD_ADDR_VAR 0 2
67844: PUSH
67845: LD_INT 0
67847: ST_TO_ADDR
// end ;
67848: LD_VAR 0 2
67852: RET
// export function SortByClass ( units , class ) ; var un ; begin
67853: LD_INT 0
67855: PPUSH
67856: PPUSH
// if not units or not class then
67857: LD_VAR 0 1
67861: NOT
67862: PUSH
67863: LD_VAR 0 2
67867: NOT
67868: OR
67869: IFFALSE 67873
// exit ;
67871: GO 67968
// result := [ ] ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: EMPTY
67879: ST_TO_ADDR
// for un in units do
67880: LD_ADDR_VAR 0 4
67884: PUSH
67885: LD_VAR 0 1
67889: PUSH
67890: FOR_IN
67891: IFFALSE 67966
// if GetClass ( un ) = class then
67893: LD_VAR 0 4
67897: PPUSH
67898: CALL_OW 257
67902: PUSH
67903: LD_VAR 0 2
67907: EQUAL
67908: IFFALSE 67935
// result := Insert ( result , 1 , un ) else
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_VAR 0 3
67919: PPUSH
67920: LD_INT 1
67922: PPUSH
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 2
67932: ST_TO_ADDR
67933: GO 67964
// result := Replace ( result , result + 1 , un ) ;
67935: LD_ADDR_VAR 0 3
67939: PUSH
67940: LD_VAR 0 3
67944: PPUSH
67945: LD_VAR 0 3
67949: PUSH
67950: LD_INT 1
67952: PLUS
67953: PPUSH
67954: LD_VAR 0 4
67958: PPUSH
67959: CALL_OW 1
67963: ST_TO_ADDR
67964: GO 67890
67966: POP
67967: POP
// end ;
67968: LD_VAR 0 3
67972: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67973: LD_INT 0
67975: PPUSH
67976: PPUSH
67977: PPUSH
67978: PPUSH
67979: PPUSH
67980: PPUSH
67981: PPUSH
// result := [ ] ;
67982: LD_ADDR_VAR 0 4
67986: PUSH
67987: EMPTY
67988: ST_TO_ADDR
// if x - r < 0 then
67989: LD_VAR 0 1
67993: PUSH
67994: LD_VAR 0 3
67998: MINUS
67999: PUSH
68000: LD_INT 0
68002: LESS
68003: IFFALSE 68015
// min_x := 0 else
68005: LD_ADDR_VAR 0 8
68009: PUSH
68010: LD_INT 0
68012: ST_TO_ADDR
68013: GO 68031
// min_x := x - r ;
68015: LD_ADDR_VAR 0 8
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_VAR 0 3
68029: MINUS
68030: ST_TO_ADDR
// if y - r < 0 then
68031: LD_VAR 0 2
68035: PUSH
68036: LD_VAR 0 3
68040: MINUS
68041: PUSH
68042: LD_INT 0
68044: LESS
68045: IFFALSE 68057
// min_y := 0 else
68047: LD_ADDR_VAR 0 7
68051: PUSH
68052: LD_INT 0
68054: ST_TO_ADDR
68055: GO 68073
// min_y := y - r ;
68057: LD_ADDR_VAR 0 7
68061: PUSH
68062: LD_VAR 0 2
68066: PUSH
68067: LD_VAR 0 3
68071: MINUS
68072: ST_TO_ADDR
// max_x := x + r ;
68073: LD_ADDR_VAR 0 9
68077: PUSH
68078: LD_VAR 0 1
68082: PUSH
68083: LD_VAR 0 3
68087: PLUS
68088: ST_TO_ADDR
// max_y := y + r ;
68089: LD_ADDR_VAR 0 10
68093: PUSH
68094: LD_VAR 0 2
68098: PUSH
68099: LD_VAR 0 3
68103: PLUS
68104: ST_TO_ADDR
// for _x = min_x to max_x do
68105: LD_ADDR_VAR 0 5
68109: PUSH
68110: DOUBLE
68111: LD_VAR 0 8
68115: DEC
68116: ST_TO_ADDR
68117: LD_VAR 0 9
68121: PUSH
68122: FOR_TO
68123: IFFALSE 68224
// for _y = min_y to max_y do
68125: LD_ADDR_VAR 0 6
68129: PUSH
68130: DOUBLE
68131: LD_VAR 0 7
68135: DEC
68136: ST_TO_ADDR
68137: LD_VAR 0 10
68141: PUSH
68142: FOR_TO
68143: IFFALSE 68220
// begin if not ValidHex ( _x , _y ) then
68145: LD_VAR 0 5
68149: PPUSH
68150: LD_VAR 0 6
68154: PPUSH
68155: CALL_OW 488
68159: NOT
68160: IFFALSE 68164
// continue ;
68162: GO 68142
// if GetResourceTypeXY ( _x , _y ) then
68164: LD_VAR 0 5
68168: PPUSH
68169: LD_VAR 0 6
68173: PPUSH
68174: CALL_OW 283
68178: IFFALSE 68218
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68180: LD_ADDR_VAR 0 4
68184: PUSH
68185: LD_VAR 0 4
68189: PPUSH
68190: LD_VAR 0 4
68194: PUSH
68195: LD_INT 1
68197: PLUS
68198: PPUSH
68199: LD_VAR 0 5
68203: PUSH
68204: LD_VAR 0 6
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PPUSH
68213: CALL_OW 1
68217: ST_TO_ADDR
// end ;
68218: GO 68142
68220: POP
68221: POP
68222: GO 68122
68224: POP
68225: POP
// end ;
68226: LD_VAR 0 4
68230: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68231: LD_INT 0
68233: PPUSH
68234: PPUSH
68235: PPUSH
68236: PPUSH
68237: PPUSH
68238: PPUSH
68239: PPUSH
68240: PPUSH
// if not units then
68241: LD_VAR 0 1
68245: NOT
68246: IFFALSE 68250
// exit ;
68248: GO 68675
// result := UnitFilter ( units , [ f_ok ] ) ;
68250: LD_ADDR_VAR 0 3
68254: PUSH
68255: LD_VAR 0 1
68259: PPUSH
68260: LD_INT 50
68262: PUSH
68263: EMPTY
68264: LIST
68265: PPUSH
68266: CALL_OW 72
68270: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68271: LD_ADDR_VAR 0 8
68275: PUSH
68276: LD_VAR 0 1
68280: PUSH
68281: LD_INT 1
68283: ARRAY
68284: PPUSH
68285: CALL_OW 255
68289: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68290: LD_ADDR_VAR 0 10
68294: PUSH
68295: LD_INT 29
68297: PUSH
68298: LD_EXP 110
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: ST_TO_ADDR
// if not result then
68307: LD_VAR 0 3
68311: NOT
68312: IFFALSE 68316
// exit ;
68314: GO 68675
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68316: LD_ADDR_VAR 0 5
68320: PUSH
68321: LD_INT 81
68323: PUSH
68324: LD_VAR 0 8
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PPUSH
68333: CALL_OW 69
68337: ST_TO_ADDR
// for i in result do
68338: LD_ADDR_VAR 0 4
68342: PUSH
68343: LD_VAR 0 3
68347: PUSH
68348: FOR_IN
68349: IFFALSE 68673
// begin tag := GetTag ( i ) + 1 ;
68351: LD_ADDR_VAR 0 9
68355: PUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: CALL_OW 110
68365: PUSH
68366: LD_INT 1
68368: PLUS
68369: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68370: LD_ADDR_VAR 0 7
68374: PUSH
68375: LD_VAR 0 4
68379: PPUSH
68380: CALL_OW 250
68384: PPUSH
68385: LD_VAR 0 4
68389: PPUSH
68390: CALL_OW 251
68394: PPUSH
68395: LD_INT 6
68397: PPUSH
68398: CALL 67973 0 3
68402: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68403: LD_VAR 0 7
68407: PUSH
68408: LD_VAR 0 4
68412: PPUSH
68413: CALL_OW 264
68417: PUSH
68418: LD_VAR 0 10
68422: IN
68423: NOT
68424: AND
68425: IFFALSE 68464
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68427: LD_VAR 0 4
68431: PPUSH
68432: LD_VAR 0 7
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: PUSH
68441: LD_INT 1
68443: ARRAY
68444: PPUSH
68445: LD_VAR 0 7
68449: PUSH
68450: LD_INT 1
68452: ARRAY
68453: PUSH
68454: LD_INT 2
68456: ARRAY
68457: PPUSH
68458: CALL_OW 116
68462: GO 68671
// if path > tag then
68464: LD_VAR 0 2
68468: PUSH
68469: LD_VAR 0 9
68473: GREATER
68474: IFFALSE 68641
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68476: LD_ADDR_VAR 0 6
68480: PUSH
68481: LD_VAR 0 5
68485: PPUSH
68486: LD_INT 91
68488: PUSH
68489: LD_VAR 0 4
68493: PUSH
68494: LD_INT 12
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: PPUSH
68502: CALL_OW 72
68506: ST_TO_ADDR
// if nearEnemy then
68507: LD_VAR 0 6
68511: IFFALSE 68539
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68513: LD_VAR 0 4
68517: PPUSH
68518: LD_VAR 0 6
68522: PPUSH
68523: LD_VAR 0 4
68527: PPUSH
68528: CALL_OW 74
68532: PPUSH
68533: CALL_OW 115
68537: GO 68639
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68539: LD_VAR 0 4
68543: PPUSH
68544: LD_VAR 0 2
68548: PUSH
68549: LD_VAR 0 9
68553: ARRAY
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PPUSH
68559: LD_VAR 0 2
68563: PUSH
68564: LD_VAR 0 9
68568: ARRAY
68569: PUSH
68570: LD_INT 2
68572: ARRAY
68573: PPUSH
68574: CALL_OW 297
68578: PUSH
68579: LD_INT 6
68581: GREATER
68582: IFFALSE 68625
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68584: LD_VAR 0 4
68588: PPUSH
68589: LD_VAR 0 2
68593: PUSH
68594: LD_VAR 0 9
68598: ARRAY
68599: PUSH
68600: LD_INT 1
68602: ARRAY
68603: PPUSH
68604: LD_VAR 0 2
68608: PUSH
68609: LD_VAR 0 9
68613: ARRAY
68614: PUSH
68615: LD_INT 2
68617: ARRAY
68618: PPUSH
68619: CALL_OW 114
68623: GO 68639
// SetTag ( i , tag ) ;
68625: LD_VAR 0 4
68629: PPUSH
68630: LD_VAR 0 9
68634: PPUSH
68635: CALL_OW 109
// end else
68639: GO 68671
// if enemy then
68641: LD_VAR 0 5
68645: IFFALSE 68671
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68647: LD_VAR 0 4
68651: PPUSH
68652: LD_VAR 0 5
68656: PPUSH
68657: LD_VAR 0 4
68661: PPUSH
68662: CALL_OW 74
68666: PPUSH
68667: CALL_OW 115
// end ;
68671: GO 68348
68673: POP
68674: POP
// end ;
68675: LD_VAR 0 3
68679: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68680: LD_INT 0
68682: PPUSH
68683: PPUSH
68684: PPUSH
// if not unit or IsInUnit ( unit ) then
68685: LD_VAR 0 1
68689: NOT
68690: PUSH
68691: LD_VAR 0 1
68695: PPUSH
68696: CALL_OW 310
68700: OR
68701: IFFALSE 68705
// exit ;
68703: GO 68796
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68705: LD_ADDR_VAR 0 4
68709: PUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: CALL_OW 250
68719: PPUSH
68720: LD_VAR 0 2
68724: PPUSH
68725: LD_INT 1
68727: PPUSH
68728: CALL_OW 272
68732: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68733: LD_ADDR_VAR 0 5
68737: PUSH
68738: LD_VAR 0 1
68742: PPUSH
68743: CALL_OW 251
68747: PPUSH
68748: LD_VAR 0 2
68752: PPUSH
68753: LD_INT 1
68755: PPUSH
68756: CALL_OW 273
68760: ST_TO_ADDR
// if ValidHex ( x , y ) then
68761: LD_VAR 0 4
68765: PPUSH
68766: LD_VAR 0 5
68770: PPUSH
68771: CALL_OW 488
68775: IFFALSE 68796
// ComTurnXY ( unit , x , y ) ;
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_VAR 0 4
68786: PPUSH
68787: LD_VAR 0 5
68791: PPUSH
68792: CALL_OW 118
// end ;
68796: LD_VAR 0 3
68800: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68801: LD_INT 0
68803: PPUSH
68804: PPUSH
// result := false ;
68805: LD_ADDR_VAR 0 3
68809: PUSH
68810: LD_INT 0
68812: ST_TO_ADDR
// if not units then
68813: LD_VAR 0 2
68817: NOT
68818: IFFALSE 68822
// exit ;
68820: GO 68867
// for i in units do
68822: LD_ADDR_VAR 0 4
68826: PUSH
68827: LD_VAR 0 2
68831: PUSH
68832: FOR_IN
68833: IFFALSE 68865
// if See ( side , i ) then
68835: LD_VAR 0 1
68839: PPUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: CALL_OW 292
68849: IFFALSE 68863
// begin result := true ;
68851: LD_ADDR_VAR 0 3
68855: PUSH
68856: LD_INT 1
68858: ST_TO_ADDR
// exit ;
68859: POP
68860: POP
68861: GO 68867
// end ;
68863: GO 68832
68865: POP
68866: POP
// end ;
68867: LD_VAR 0 3
68871: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68872: LD_INT 0
68874: PPUSH
68875: PPUSH
68876: PPUSH
68877: PPUSH
// if not unit or not points then
68878: LD_VAR 0 1
68882: NOT
68883: PUSH
68884: LD_VAR 0 2
68888: NOT
68889: OR
68890: IFFALSE 68894
// exit ;
68892: GO 68984
// dist := 99999 ;
68894: LD_ADDR_VAR 0 5
68898: PUSH
68899: LD_INT 99999
68901: ST_TO_ADDR
// for i in points do
68902: LD_ADDR_VAR 0 4
68906: PUSH
68907: LD_VAR 0 2
68911: PUSH
68912: FOR_IN
68913: IFFALSE 68982
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68915: LD_ADDR_VAR 0 6
68919: PUSH
68920: LD_VAR 0 1
68924: PPUSH
68925: LD_VAR 0 4
68929: PUSH
68930: LD_INT 1
68932: ARRAY
68933: PPUSH
68934: LD_VAR 0 4
68938: PUSH
68939: LD_INT 2
68941: ARRAY
68942: PPUSH
68943: CALL_OW 297
68947: ST_TO_ADDR
// if tmpDist < dist then
68948: LD_VAR 0 6
68952: PUSH
68953: LD_VAR 0 5
68957: LESS
68958: IFFALSE 68980
// begin result := i ;
68960: LD_ADDR_VAR 0 3
68964: PUSH
68965: LD_VAR 0 4
68969: ST_TO_ADDR
// dist := tmpDist ;
68970: LD_ADDR_VAR 0 5
68974: PUSH
68975: LD_VAR 0 6
68979: ST_TO_ADDR
// end ; end ;
68980: GO 68912
68982: POP
68983: POP
// end ; end_of_file
68984: LD_VAR 0 3
68988: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68989: LD_VAR 0 1
68993: PUSH
68994: LD_INT 200
68996: DOUBLE
68997: GREATEREQUAL
68998: IFFALSE 69006
69000: LD_INT 299
69002: DOUBLE
69003: LESSEQUAL
69004: IFTRUE 69008
69006: GO 69040
69008: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69009: LD_VAR 0 1
69013: PPUSH
69014: LD_VAR 0 2
69018: PPUSH
69019: LD_VAR 0 3
69023: PPUSH
69024: LD_VAR 0 4
69028: PPUSH
69029: LD_VAR 0 5
69033: PPUSH
69034: CALL 11040 0 5
69038: GO 69117
69040: LD_INT 300
69042: DOUBLE
69043: GREATEREQUAL
69044: IFFALSE 69052
69046: LD_INT 399
69048: DOUBLE
69049: LESSEQUAL
69050: IFTRUE 69054
69052: GO 69116
69054: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_VAR 0 2
69064: PPUSH
69065: LD_VAR 0 3
69069: PPUSH
69070: LD_VAR 0 4
69074: PPUSH
69075: LD_VAR 0 5
69079: PPUSH
69080: LD_VAR 0 6
69084: PPUSH
69085: LD_VAR 0 7
69089: PPUSH
69090: LD_VAR 0 8
69094: PPUSH
69095: LD_VAR 0 9
69099: PPUSH
69100: LD_VAR 0 10
69104: PPUSH
69105: LD_VAR 0 11
69109: PPUSH
69110: CALL 26750 0 11
69114: GO 69117
69116: POP
// end ;
69117: PPOPN 11
69119: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69120: LD_VAR 0 1
69124: PPUSH
69125: LD_VAR 0 2
69129: PPUSH
69130: LD_VAR 0 3
69134: PPUSH
69135: LD_VAR 0 4
69139: PPUSH
69140: LD_VAR 0 5
69144: PPUSH
69145: CALL 11032 0 5
// end ; end_of_file
69149: PPOPN 5
69151: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69152: LD_VAR 0 1
69156: PPUSH
69157: LD_VAR 0 2
69161: PPUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: LD_VAR 0 4
69171: PPUSH
69172: LD_VAR 0 5
69176: PPUSH
69177: LD_VAR 0 6
69181: PPUSH
69182: CALL 14945 0 6
// end ;
69186: PPOPN 6
69188: END
