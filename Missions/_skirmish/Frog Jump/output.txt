// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 59095 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 101
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11032: LD_VAR 0 1
11036: PUSH
11037: LD_INT 254
11039: EQUAL
11040: PUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 264
11050: PUSH
11051: LD_EXP 99
11055: EQUAL
11056: AND
11057: PUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: CALL_OW 263
11067: PUSH
11068: LD_INT 3
11070: EQUAL
11071: AND
11072: IFFALSE 11088
// HackDestroyVehicle ( unit , selectedUnit ) ;
11074: LD_VAR 0 2
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: CALL 12595 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11088: LD_VAR 0 1
11092: PUSH
11093: LD_INT 255
11095: EQUAL
11096: PUSH
11097: LD_VAR 0 2
11101: PPUSH
11102: CALL_OW 264
11106: PUSH
11107: LD_INT 14
11109: PUSH
11110: LD_INT 53
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: IN
11117: AND
11118: PUSH
11119: LD_VAR 0 4
11123: PPUSH
11124: LD_VAR 0 5
11128: PPUSH
11129: CALL_OW 488
11133: AND
11134: IFFALSE 11158
// CutTreeXYR ( unit , x , y , 12 ) ;
11136: LD_VAR 0 2
11140: PPUSH
11141: LD_VAR 0 4
11145: PPUSH
11146: LD_VAR 0 5
11150: PPUSH
11151: LD_INT 12
11153: PPUSH
11154: CALL 11161 0 4
// end ;
11158: PPOPN 5
11160: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
11169: PPUSH
11170: PPUSH
11171: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11172: LD_VAR 0 1
11176: NOT
11177: PUSH
11178: LD_VAR 0 2
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: CALL_OW 488
11192: NOT
11193: OR
11194: PUSH
11195: LD_VAR 0 4
11199: NOT
11200: OR
11201: IFFALSE 11205
// exit ;
11203: GO 11545
// list := [ ] ;
11205: LD_ADDR_VAR 0 13
11209: PUSH
11210: EMPTY
11211: ST_TO_ADDR
// if x - r < 0 then
11212: LD_VAR 0 2
11216: PUSH
11217: LD_VAR 0 4
11221: MINUS
11222: PUSH
11223: LD_INT 0
11225: LESS
11226: IFFALSE 11238
// min_x := 0 else
11228: LD_ADDR_VAR 0 7
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
11236: GO 11254
// min_x := x - r ;
11238: LD_ADDR_VAR 0 7
11242: PUSH
11243: LD_VAR 0 2
11247: PUSH
11248: LD_VAR 0 4
11252: MINUS
11253: ST_TO_ADDR
// if y - r < 0 then
11254: LD_VAR 0 3
11258: PUSH
11259: LD_VAR 0 4
11263: MINUS
11264: PUSH
11265: LD_INT 0
11267: LESS
11268: IFFALSE 11280
// min_y := 0 else
11270: LD_ADDR_VAR 0 8
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
11278: GO 11296
// min_y := y - r ;
11280: LD_ADDR_VAR 0 8
11284: PUSH
11285: LD_VAR 0 3
11289: PUSH
11290: LD_VAR 0 4
11294: MINUS
11295: ST_TO_ADDR
// max_x := x + r ;
11296: LD_ADDR_VAR 0 9
11300: PUSH
11301: LD_VAR 0 2
11305: PUSH
11306: LD_VAR 0 4
11310: PLUS
11311: ST_TO_ADDR
// max_y := y + r ;
11312: LD_ADDR_VAR 0 10
11316: PUSH
11317: LD_VAR 0 3
11321: PUSH
11322: LD_VAR 0 4
11326: PLUS
11327: ST_TO_ADDR
// for _x = min_x to max_x do
11328: LD_ADDR_VAR 0 11
11332: PUSH
11333: DOUBLE
11334: LD_VAR 0 7
11338: DEC
11339: ST_TO_ADDR
11340: LD_VAR 0 9
11344: PUSH
11345: FOR_TO
11346: IFFALSE 11463
// for _y = min_y to max_y do
11348: LD_ADDR_VAR 0 12
11352: PUSH
11353: DOUBLE
11354: LD_VAR 0 8
11358: DEC
11359: ST_TO_ADDR
11360: LD_VAR 0 10
11364: PUSH
11365: FOR_TO
11366: IFFALSE 11459
// begin if not ValidHex ( _x , _y ) then
11368: LD_VAR 0 11
11372: PPUSH
11373: LD_VAR 0 12
11377: PPUSH
11378: CALL_OW 488
11382: NOT
11383: IFFALSE 11387
// continue ;
11385: GO 11365
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11387: LD_VAR 0 11
11391: PPUSH
11392: LD_VAR 0 12
11396: PPUSH
11397: CALL_OW 351
11401: PUSH
11402: LD_VAR 0 11
11406: PPUSH
11407: LD_VAR 0 12
11411: PPUSH
11412: CALL_OW 554
11416: AND
11417: IFFALSE 11457
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11419: LD_ADDR_VAR 0 13
11423: PUSH
11424: LD_VAR 0 13
11428: PPUSH
11429: LD_VAR 0 13
11433: PUSH
11434: LD_INT 1
11436: PLUS
11437: PPUSH
11438: LD_VAR 0 11
11442: PUSH
11443: LD_VAR 0 12
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PPUSH
11452: CALL_OW 2
11456: ST_TO_ADDR
// end ;
11457: GO 11365
11459: POP
11460: POP
11461: GO 11345
11463: POP
11464: POP
// if not list then
11465: LD_VAR 0 13
11469: NOT
11470: IFFALSE 11474
// exit ;
11472: GO 11545
// for i in list do
11474: LD_ADDR_VAR 0 6
11478: PUSH
11479: LD_VAR 0 13
11483: PUSH
11484: FOR_IN
11485: IFFALSE 11543
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11487: LD_VAR 0 1
11491: PPUSH
11492: LD_STRING M
11494: PUSH
11495: LD_VAR 0 6
11499: PUSH
11500: LD_INT 1
11502: ARRAY
11503: PUSH
11504: LD_VAR 0 6
11508: PUSH
11509: LD_INT 2
11511: ARRAY
11512: PUSH
11513: LD_INT 0
11515: PUSH
11516: LD_INT 0
11518: PUSH
11519: LD_INT 0
11521: PUSH
11522: LD_INT 0
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: PPUSH
11537: CALL_OW 447
11541: GO 11484
11543: POP
11544: POP
// end ;
11545: LD_VAR 0 5
11549: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11550: LD_EXP 36
11554: NOT
11555: IFFALSE 11605
11557: GO 11559
11559: DISABLE
// begin initHack := true ;
11560: LD_ADDR_EXP 36
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// hackTanks := [ ] ;
11568: LD_ADDR_EXP 37
11572: PUSH
11573: EMPTY
11574: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11575: LD_ADDR_EXP 38
11579: PUSH
11580: EMPTY
11581: ST_TO_ADDR
// hackLimit := 3 ;
11582: LD_ADDR_EXP 39
11586: PUSH
11587: LD_INT 3
11589: ST_TO_ADDR
// hackDist := 12 ;
11590: LD_ADDR_EXP 40
11594: PUSH
11595: LD_INT 12
11597: ST_TO_ADDR
// hackCounter := [ ] ;
11598: LD_ADDR_EXP 41
11602: PUSH
11603: EMPTY
11604: ST_TO_ADDR
// end ;
11605: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11606: LD_EXP 36
11610: PUSH
11611: LD_INT 34
11613: PUSH
11614: LD_EXP 99
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 69
11627: AND
11628: IFFALSE 11883
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin enable ;
11637: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: LD_INT 34
11645: PUSH
11646: LD_EXP 99
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: CALL_OW 69
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11881
// begin if not i in hackTanks then
11663: LD_VAR 0 1
11667: PUSH
11668: LD_EXP 37
11672: IN
11673: NOT
11674: IFFALSE 11757
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11676: LD_ADDR_EXP 37
11680: PUSH
11681: LD_EXP 37
11685: PPUSH
11686: LD_EXP 37
11690: PUSH
11691: LD_INT 1
11693: PLUS
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 1
11704: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11705: LD_ADDR_EXP 38
11709: PUSH
11710: LD_EXP 38
11714: PPUSH
11715: LD_EXP 38
11719: PUSH
11720: LD_INT 1
11722: PLUS
11723: PPUSH
11724: EMPTY
11725: PPUSH
11726: CALL_OW 1
11730: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11731: LD_ADDR_EXP 41
11735: PUSH
11736: LD_EXP 41
11740: PPUSH
11741: LD_EXP 41
11745: PUSH
11746: LD_INT 1
11748: PLUS
11749: PPUSH
11750: EMPTY
11751: PPUSH
11752: CALL_OW 1
11756: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 302
11766: NOT
11767: IFFALSE 11780
// begin HackUnlinkAll ( i ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL 11886 0 1
// continue ;
11778: GO 11660
// end ; HackCheckCapturedStatus ( i ) ;
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL 12329 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11789: LD_ADDR_VAR 0 2
11793: PUSH
11794: LD_INT 81
11796: PUSH
11797: LD_VAR 0 1
11801: PPUSH
11802: CALL_OW 255
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: LD_INT 3
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 91
11823: PUSH
11824: LD_VAR 0 1
11828: PUSH
11829: LD_EXP 40
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 50
11841: PUSH
11842: EMPTY
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 2
11860: NOT
11861: IFFALSE 11865
// continue ;
11863: GO 11660
// HackLink ( i , tmp ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: LD_VAR 0 2
11874: PPUSH
11875: CALL 12022 0 2
// end ;
11879: GO 11660
11881: POP
11882: POP
// end ;
11883: PPOPN 2
11885: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
11890: PPUSH
// if not hack in hackTanks then
11891: LD_VAR 0 1
11895: PUSH
11896: LD_EXP 37
11900: IN
11901: NOT
11902: IFFALSE 11906
// exit ;
11904: GO 12017
// index := GetElementIndex ( hackTanks , hack ) ;
11906: LD_ADDR_VAR 0 4
11910: PUSH
11911: LD_EXP 37
11915: PPUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: CALL 30231 0 2
11925: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11926: LD_EXP 38
11930: PUSH
11931: LD_VAR 0 4
11935: ARRAY
11936: IFFALSE 12017
// begin for i in hackTanksCaptured [ index ] do
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_EXP 38
11947: PUSH
11948: LD_VAR 0 4
11952: ARRAY
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11981
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 2
11973: ARRAY
11974: PPUSH
11975: CALL_OW 235
11979: GO 11954
11981: POP
11982: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11983: LD_ADDR_EXP 38
11987: PUSH
11988: LD_EXP 38
11992: PPUSH
11993: LD_VAR 0 4
11997: PPUSH
11998: EMPTY
11999: PPUSH
12000: CALL_OW 1
12004: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_INT 0
12012: PPUSH
12013: CALL_OW 505
// end ; end ;
12017: LD_VAR 0 2
12021: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
// if not hack in hackTanks or not vehicles then
12027: LD_VAR 0 1
12031: PUSH
12032: LD_EXP 37
12036: IN
12037: NOT
12038: PUSH
12039: LD_VAR 0 2
12043: NOT
12044: OR
12045: IFFALSE 12049
// exit ;
12047: GO 12324
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12049: LD_ADDR_VAR 0 2
12053: PUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL 30881 0 4
12074: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12075: LD_ADDR_VAR 0 5
12079: PUSH
12080: LD_EXP 37
12084: PPUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL 30231 0 2
12094: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12095: LD_EXP 38
12099: PUSH
12100: LD_VAR 0 5
12104: ARRAY
12105: PUSH
12106: LD_EXP 39
12110: LESS
12111: IFFALSE 12300
// begin for i := 1 to vehicles do
12113: LD_ADDR_VAR 0 4
12117: PUSH
12118: DOUBLE
12119: LD_INT 1
12121: DEC
12122: ST_TO_ADDR
12123: LD_VAR 0 2
12127: PUSH
12128: FOR_TO
12129: IFFALSE 12298
// begin if hackTanksCaptured [ index ] = hackLimit then
12131: LD_EXP 38
12135: PUSH
12136: LD_VAR 0 5
12140: ARRAY
12141: PUSH
12142: LD_EXP 39
12146: EQUAL
12147: IFFALSE 12151
// break ;
12149: GO 12298
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12151: LD_ADDR_EXP 41
12155: PUSH
12156: LD_EXP 41
12160: PPUSH
12161: LD_VAR 0 5
12165: PPUSH
12166: LD_EXP 41
12170: PUSH
12171: LD_VAR 0 5
12175: ARRAY
12176: PUSH
12177: LD_INT 1
12179: PLUS
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12186: LD_ADDR_EXP 38
12190: PUSH
12191: LD_EXP 38
12195: PPUSH
12196: LD_VAR 0 5
12200: PUSH
12201: LD_EXP 38
12205: PUSH
12206: LD_VAR 0 5
12210: ARRAY
12211: PUSH
12212: LD_INT 1
12214: PLUS
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: LD_VAR 0 2
12224: PUSH
12225: LD_VAR 0 4
12229: ARRAY
12230: PUSH
12231: LD_VAR 0 2
12235: PUSH
12236: LD_VAR 0 4
12240: ARRAY
12241: PPUSH
12242: CALL_OW 255
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL 30446 0 3
12255: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12256: LD_VAR 0 2
12260: PUSH
12261: LD_VAR 0 4
12265: ARRAY
12266: PPUSH
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL_OW 255
12276: PPUSH
12277: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12281: LD_VAR 0 2
12285: PUSH
12286: LD_VAR 0 4
12290: ARRAY
12291: PPUSH
12292: CALL_OW 141
// end ;
12296: GO 12128
12298: POP
12299: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12300: LD_VAR 0 1
12304: PPUSH
12305: LD_EXP 38
12309: PUSH
12310: LD_VAR 0 5
12314: ARRAY
12315: PUSH
12316: LD_INT 0
12318: PLUS
12319: PPUSH
12320: CALL_OW 505
// end ;
12324: LD_VAR 0 3
12328: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12329: LD_INT 0
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
// if not hack in hackTanks then
12335: LD_VAR 0 1
12339: PUSH
12340: LD_EXP 37
12344: IN
12345: NOT
12346: IFFALSE 12350
// exit ;
12348: GO 12590
// index := GetElementIndex ( hackTanks , hack ) ;
12350: LD_ADDR_VAR 0 4
12354: PUSH
12355: LD_EXP 37
12359: PPUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL 30231 0 2
12369: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12370: LD_ADDR_VAR 0 3
12374: PUSH
12375: DOUBLE
12376: LD_EXP 38
12380: PUSH
12381: LD_VAR 0 4
12385: ARRAY
12386: INC
12387: ST_TO_ADDR
12388: LD_INT 1
12390: PUSH
12391: FOR_DOWNTO
12392: IFFALSE 12564
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_EXP 38
12403: PUSH
12404: LD_VAR 0 4
12408: ARRAY
12409: PUSH
12410: LD_VAR 0 3
12414: ARRAY
12415: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12416: LD_VAR 0 5
12420: PUSH
12421: LD_INT 1
12423: ARRAY
12424: PPUSH
12425: CALL_OW 302
12429: NOT
12430: PUSH
12431: LD_VAR 0 5
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: CALL_OW 255
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 255
12454: NONEQUAL
12455: OR
12456: IFFALSE 12562
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12458: LD_VAR 0 5
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PPUSH
12467: CALL_OW 305
12471: PUSH
12472: LD_VAR 0 5
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PPUSH
12481: CALL_OW 255
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL_OW 255
12495: EQUAL
12496: AND
12497: IFFALSE 12521
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12499: LD_VAR 0 5
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: PPUSH
12508: LD_VAR 0 5
12512: PUSH
12513: LD_INT 2
12515: ARRAY
12516: PPUSH
12517: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12521: LD_ADDR_EXP 38
12525: PUSH
12526: LD_EXP 38
12530: PPUSH
12531: LD_VAR 0 4
12535: PPUSH
12536: LD_EXP 38
12540: PUSH
12541: LD_VAR 0 4
12545: ARRAY
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: CALL_OW 3
12556: PPUSH
12557: CALL_OW 1
12561: ST_TO_ADDR
// end ; end ;
12562: GO 12391
12564: POP
12565: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: LD_EXP 38
12575: PUSH
12576: LD_VAR 0 4
12580: ARRAY
12581: PUSH
12582: LD_INT 0
12584: PLUS
12585: PPUSH
12586: CALL_OW 505
// end ;
12590: LD_VAR 0 2
12594: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12595: LD_INT 0
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
// if not hack in hackTanks then
12601: LD_VAR 0 1
12605: PUSH
12606: LD_EXP 37
12610: IN
12611: NOT
12612: IFFALSE 12616
// exit ;
12614: GO 12701
// index := GetElementIndex ( hackTanks , hack ) ;
12616: LD_ADDR_VAR 0 5
12620: PUSH
12621: LD_EXP 37
12625: PPUSH
12626: LD_VAR 0 1
12630: PPUSH
12631: CALL 30231 0 2
12635: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12636: LD_ADDR_VAR 0 4
12640: PUSH
12641: DOUBLE
12642: LD_INT 1
12644: DEC
12645: ST_TO_ADDR
12646: LD_EXP 38
12650: PUSH
12651: LD_VAR 0 5
12655: ARRAY
12656: PUSH
12657: FOR_TO
12658: IFFALSE 12699
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12660: LD_EXP 38
12664: PUSH
12665: LD_VAR 0 5
12669: ARRAY
12670: PUSH
12671: LD_VAR 0 4
12675: ARRAY
12676: PUSH
12677: LD_INT 1
12679: ARRAY
12680: PUSH
12681: LD_VAR 0 2
12685: EQUAL
12686: IFFALSE 12697
// KillUnit ( vehicle ) ;
12688: LD_VAR 0 2
12692: PPUSH
12693: CALL_OW 66
12697: GO 12657
12699: POP
12700: POP
// end ; end_of_file
12701: LD_VAR 0 3
12705: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12706: LD_VAR 0 2
12710: PUSH
12711: LD_INT 100
12713: EQUAL
12714: IFFALSE 13663
// begin if not StreamModeActive then
12716: LD_EXP 42
12720: NOT
12721: IFFALSE 12731
// StreamModeActive := true ;
12723: LD_ADDR_EXP 42
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 0 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 0
12738: EQUAL
12739: IFFALSE 12745
// InitStreamMode ;
12741: CALL 13896 0 0
// if p3 = 1 then
12745: LD_VAR 0 3
12749: PUSH
12750: LD_INT 1
12752: EQUAL
12753: IFFALSE 12763
// sRocket := true ;
12755: LD_ADDR_EXP 47
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// if p3 = 2 then
12763: LD_VAR 0 3
12767: PUSH
12768: LD_INT 2
12770: EQUAL
12771: IFFALSE 12781
// sSpeed := true ;
12773: LD_ADDR_EXP 46
12777: PUSH
12778: LD_INT 1
12780: ST_TO_ADDR
// if p3 = 3 then
12781: LD_VAR 0 3
12785: PUSH
12786: LD_INT 3
12788: EQUAL
12789: IFFALSE 12799
// sEngine := true ;
12791: LD_ADDR_EXP 48
12795: PUSH
12796: LD_INT 1
12798: ST_TO_ADDR
// if p3 = 4 then
12799: LD_VAR 0 3
12803: PUSH
12804: LD_INT 4
12806: EQUAL
12807: IFFALSE 12817
// sSpec := true ;
12809: LD_ADDR_EXP 45
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// if p3 = 5 then
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 5
12824: EQUAL
12825: IFFALSE 12835
// sLevel := true ;
12827: LD_ADDR_EXP 49
12831: PUSH
12832: LD_INT 1
12834: ST_TO_ADDR
// if p3 = 6 then
12835: LD_VAR 0 3
12839: PUSH
12840: LD_INT 6
12842: EQUAL
12843: IFFALSE 12853
// sArmoury := true ;
12845: LD_ADDR_EXP 50
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// if p3 = 7 then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_INT 7
12860: EQUAL
12861: IFFALSE 12871
// sRadar := true ;
12863: LD_ADDR_EXP 51
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// if p3 = 8 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 8
12878: EQUAL
12879: IFFALSE 12889
// sBunker := true ;
12881: LD_ADDR_EXP 52
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// if p3 = 9 then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 9
12896: EQUAL
12897: IFFALSE 12907
// sHack := true ;
12899: LD_ADDR_EXP 53
12903: PUSH
12904: LD_INT 1
12906: ST_TO_ADDR
// if p3 = 10 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 10
12914: EQUAL
12915: IFFALSE 12925
// sFire := true ;
12917: LD_ADDR_EXP 54
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// if p3 = 11 then
12925: LD_VAR 0 3
12929: PUSH
12930: LD_INT 11
12932: EQUAL
12933: IFFALSE 12943
// sRefresh := true ;
12935: LD_ADDR_EXP 55
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// if p3 = 12 then
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 12
12950: EQUAL
12951: IFFALSE 12961
// sExp := true ;
12953: LD_ADDR_EXP 56
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// if p3 = 13 then
12961: LD_VAR 0 3
12965: PUSH
12966: LD_INT 13
12968: EQUAL
12969: IFFALSE 12979
// sDepot := true ;
12971: LD_ADDR_EXP 57
12975: PUSH
12976: LD_INT 1
12978: ST_TO_ADDR
// if p3 = 14 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 14
12986: EQUAL
12987: IFFALSE 12997
// sFlag := true ;
12989: LD_ADDR_EXP 58
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// if p3 = 15 then
12997: LD_VAR 0 3
13001: PUSH
13002: LD_INT 15
13004: EQUAL
13005: IFFALSE 13015
// sKamikadze := true ;
13007: LD_ADDR_EXP 66
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// if p3 = 16 then
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 16
13022: EQUAL
13023: IFFALSE 13033
// sTroll := true ;
13025: LD_ADDR_EXP 67
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if p3 = 17 then
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 17
13040: EQUAL
13041: IFFALSE 13051
// sSlow := true ;
13043: LD_ADDR_EXP 68
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if p3 = 18 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 18
13058: EQUAL
13059: IFFALSE 13069
// sLack := true ;
13061: LD_ADDR_EXP 69
13065: PUSH
13066: LD_INT 1
13068: ST_TO_ADDR
// if p3 = 19 then
13069: LD_VAR 0 3
13073: PUSH
13074: LD_INT 19
13076: EQUAL
13077: IFFALSE 13087
// sTank := true ;
13079: LD_ADDR_EXP 71
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// if p3 = 20 then
13087: LD_VAR 0 3
13091: PUSH
13092: LD_INT 20
13094: EQUAL
13095: IFFALSE 13105
// sRemote := true ;
13097: LD_ADDR_EXP 72
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// if p3 = 21 then
13105: LD_VAR 0 3
13109: PUSH
13110: LD_INT 21
13112: EQUAL
13113: IFFALSE 13123
// sPowell := true ;
13115: LD_ADDR_EXP 73
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// if p3 = 22 then
13123: LD_VAR 0 3
13127: PUSH
13128: LD_INT 22
13130: EQUAL
13131: IFFALSE 13141
// sTeleport := true ;
13133: LD_ADDR_EXP 76
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// if p3 = 23 then
13141: LD_VAR 0 3
13145: PUSH
13146: LD_INT 23
13148: EQUAL
13149: IFFALSE 13159
// sOilTower := true ;
13151: LD_ADDR_EXP 78
13155: PUSH
13156: LD_INT 1
13158: ST_TO_ADDR
// if p3 = 24 then
13159: LD_VAR 0 3
13163: PUSH
13164: LD_INT 24
13166: EQUAL
13167: IFFALSE 13177
// sShovel := true ;
13169: LD_ADDR_EXP 79
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// if p3 = 25 then
13177: LD_VAR 0 3
13181: PUSH
13182: LD_INT 25
13184: EQUAL
13185: IFFALSE 13195
// sSheik := true ;
13187: LD_ADDR_EXP 80
13191: PUSH
13192: LD_INT 1
13194: ST_TO_ADDR
// if p3 = 26 then
13195: LD_VAR 0 3
13199: PUSH
13200: LD_INT 26
13202: EQUAL
13203: IFFALSE 13213
// sEarthquake := true ;
13205: LD_ADDR_EXP 82
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// if p3 = 27 then
13213: LD_VAR 0 3
13217: PUSH
13218: LD_INT 27
13220: EQUAL
13221: IFFALSE 13231
// sAI := true ;
13223: LD_ADDR_EXP 83
13227: PUSH
13228: LD_INT 1
13230: ST_TO_ADDR
// if p3 = 28 then
13231: LD_VAR 0 3
13235: PUSH
13236: LD_INT 28
13238: EQUAL
13239: IFFALSE 13249
// sCargo := true ;
13241: LD_ADDR_EXP 86
13245: PUSH
13246: LD_INT 1
13248: ST_TO_ADDR
// if p3 = 29 then
13249: LD_VAR 0 3
13253: PUSH
13254: LD_INT 29
13256: EQUAL
13257: IFFALSE 13267
// sDLaser := true ;
13259: LD_ADDR_EXP 87
13263: PUSH
13264: LD_INT 1
13266: ST_TO_ADDR
// if p3 = 30 then
13267: LD_VAR 0 3
13271: PUSH
13272: LD_INT 30
13274: EQUAL
13275: IFFALSE 13285
// sExchange := true ;
13277: LD_ADDR_EXP 88
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// if p3 = 31 then
13285: LD_VAR 0 3
13289: PUSH
13290: LD_INT 31
13292: EQUAL
13293: IFFALSE 13303
// sFac := true ;
13295: LD_ADDR_EXP 89
13299: PUSH
13300: LD_INT 1
13302: ST_TO_ADDR
// if p3 = 32 then
13303: LD_VAR 0 3
13307: PUSH
13308: LD_INT 32
13310: EQUAL
13311: IFFALSE 13321
// sPower := true ;
13313: LD_ADDR_EXP 90
13317: PUSH
13318: LD_INT 1
13320: ST_TO_ADDR
// if p3 = 33 then
13321: LD_VAR 0 3
13325: PUSH
13326: LD_INT 33
13328: EQUAL
13329: IFFALSE 13339
// sRandom := true ;
13331: LD_ADDR_EXP 91
13335: PUSH
13336: LD_INT 1
13338: ST_TO_ADDR
// if p3 = 34 then
13339: LD_VAR 0 3
13343: PUSH
13344: LD_INT 34
13346: EQUAL
13347: IFFALSE 13357
// sShield := true ;
13349: LD_ADDR_EXP 92
13353: PUSH
13354: LD_INT 1
13356: ST_TO_ADDR
// if p3 = 35 then
13357: LD_VAR 0 3
13361: PUSH
13362: LD_INT 35
13364: EQUAL
13365: IFFALSE 13375
// sTime := true ;
13367: LD_ADDR_EXP 93
13371: PUSH
13372: LD_INT 1
13374: ST_TO_ADDR
// if p3 = 36 then
13375: LD_VAR 0 3
13379: PUSH
13380: LD_INT 36
13382: EQUAL
13383: IFFALSE 13393
// sTools := true ;
13385: LD_ADDR_EXP 94
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// if p3 = 101 then
13393: LD_VAR 0 3
13397: PUSH
13398: LD_INT 101
13400: EQUAL
13401: IFFALSE 13411
// sSold := true ;
13403: LD_ADDR_EXP 59
13407: PUSH
13408: LD_INT 1
13410: ST_TO_ADDR
// if p3 = 102 then
13411: LD_VAR 0 3
13415: PUSH
13416: LD_INT 102
13418: EQUAL
13419: IFFALSE 13429
// sDiff := true ;
13421: LD_ADDR_EXP 60
13425: PUSH
13426: LD_INT 1
13428: ST_TO_ADDR
// if p3 = 103 then
13429: LD_VAR 0 3
13433: PUSH
13434: LD_INT 103
13436: EQUAL
13437: IFFALSE 13447
// sFog := true ;
13439: LD_ADDR_EXP 63
13443: PUSH
13444: LD_INT 1
13446: ST_TO_ADDR
// if p3 = 104 then
13447: LD_VAR 0 3
13451: PUSH
13452: LD_INT 104
13454: EQUAL
13455: IFFALSE 13465
// sReset := true ;
13457: LD_ADDR_EXP 64
13461: PUSH
13462: LD_INT 1
13464: ST_TO_ADDR
// if p3 = 105 then
13465: LD_VAR 0 3
13469: PUSH
13470: LD_INT 105
13472: EQUAL
13473: IFFALSE 13483
// sSun := true ;
13475: LD_ADDR_EXP 65
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// if p3 = 106 then
13483: LD_VAR 0 3
13487: PUSH
13488: LD_INT 106
13490: EQUAL
13491: IFFALSE 13501
// sTiger := true ;
13493: LD_ADDR_EXP 61
13497: PUSH
13498: LD_INT 1
13500: ST_TO_ADDR
// if p3 = 107 then
13501: LD_VAR 0 3
13505: PUSH
13506: LD_INT 107
13508: EQUAL
13509: IFFALSE 13519
// sBomb := true ;
13511: LD_ADDR_EXP 62
13515: PUSH
13516: LD_INT 1
13518: ST_TO_ADDR
// if p3 = 108 then
13519: LD_VAR 0 3
13523: PUSH
13524: LD_INT 108
13526: EQUAL
13527: IFFALSE 13537
// sWound := true ;
13529: LD_ADDR_EXP 70
13533: PUSH
13534: LD_INT 1
13536: ST_TO_ADDR
// if p3 = 109 then
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 109
13544: EQUAL
13545: IFFALSE 13555
// sBetray := true ;
13547: LD_ADDR_EXP 74
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// if p3 = 110 then
13555: LD_VAR 0 3
13559: PUSH
13560: LD_INT 110
13562: EQUAL
13563: IFFALSE 13573
// sContamin := true ;
13565: LD_ADDR_EXP 75
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// if p3 = 111 then
13573: LD_VAR 0 3
13577: PUSH
13578: LD_INT 111
13580: EQUAL
13581: IFFALSE 13591
// sOil := true ;
13583: LD_ADDR_EXP 77
13587: PUSH
13588: LD_INT 1
13590: ST_TO_ADDR
// if p3 = 112 then
13591: LD_VAR 0 3
13595: PUSH
13596: LD_INT 112
13598: EQUAL
13599: IFFALSE 13609
// sStu := true ;
13601: LD_ADDR_EXP 81
13605: PUSH
13606: LD_INT 1
13608: ST_TO_ADDR
// if p3 = 113 then
13609: LD_VAR 0 3
13613: PUSH
13614: LD_INT 113
13616: EQUAL
13617: IFFALSE 13627
// sBazooka := true ;
13619: LD_ADDR_EXP 84
13623: PUSH
13624: LD_INT 1
13626: ST_TO_ADDR
// if p3 = 114 then
13627: LD_VAR 0 3
13631: PUSH
13632: LD_INT 114
13634: EQUAL
13635: IFFALSE 13645
// sMortar := true ;
13637: LD_ADDR_EXP 85
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// if p3 = 115 then
13645: LD_VAR 0 3
13649: PUSH
13650: LD_INT 115
13652: EQUAL
13653: IFFALSE 13663
// sRanger := true ;
13655: LD_ADDR_EXP 95
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// end ; if p2 = 101 then
13663: LD_VAR 0 2
13667: PUSH
13668: LD_INT 101
13670: EQUAL
13671: IFFALSE 13874
// begin case p3 of 1 :
13673: LD_VAR 0 3
13677: PUSH
13678: LD_INT 1
13680: DOUBLE
13681: EQUAL
13682: IFTRUE 13686
13684: GO 13693
13686: POP
// hHackUnlimitedResources ; 2 :
13687: CALL 23968 0 0
13691: GO 13874
13693: LD_INT 2
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13708
13701: POP
// hHackSetLevel10 ; 3 :
13702: CALL 24101 0 0
13706: GO 13874
13708: LD_INT 3
13710: DOUBLE
13711: EQUAL
13712: IFTRUE 13716
13714: GO 13723
13716: POP
// hHackSetLevel10YourUnits ; 4 :
13717: CALL 24186 0 0
13721: GO 13874
13723: LD_INT 4
13725: DOUBLE
13726: EQUAL
13727: IFTRUE 13731
13729: GO 13753
13731: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
13732: LD_VAR 0 4
13736: PPUSH
13737: LD_VAR 0 5
13741: PPUSH
13742: LD_VAR 0 6
13746: PPUSH
13747: CALL 24276 0 3
13751: GO 13874
13753: LD_INT 5
13755: DOUBLE
13756: EQUAL
13757: IFTRUE 13761
13759: GO 13768
13761: POP
// hHackSpawnVehicle ; 6 :
13762: CALL 24337 0 0
13766: GO 13874
13768: LD_INT 6
13770: DOUBLE
13771: EQUAL
13772: IFTRUE 13776
13774: GO 13783
13776: POP
// hHackInvincible ; 7 :
13777: CALL 24883 0 0
13781: GO 13874
13783: LD_INT 7
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 13798
13791: POP
// hHackInvisible ; 8 :
13792: CALL 24994 0 0
13796: GO 13874
13798: LD_INT 8
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13813
13806: POP
// hHackChangeYourSide ; 9 :
13807: CALL 25051 0 0
13811: GO 13874
13813: LD_INT 9
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13828
13821: POP
// hHackChangeUnitSide ; 10 :
13822: CALL 25093 0 0
13826: GO 13874
13828: LD_INT 10
13830: DOUBLE
13831: EQUAL
13832: IFTRUE 13836
13834: GO 13843
13836: POP
// hHackFog ; 11 :
13837: CALL 25194 0 0
13841: GO 13874
13843: LD_INT 11
13845: DOUBLE
13846: EQUAL
13847: IFTRUE 13851
13849: GO 13858
13851: POP
// hHackApeman ; 12 :
13852: CALL 25209 0 0
13856: GO 13874
13858: LD_INT 12
13860: DOUBLE
13861: EQUAL
13862: IFTRUE 13866
13864: GO 13873
13866: POP
// hHackBoom ; end ;
13867: CALL 25294 0 0
13871: GO 13874
13873: POP
// end ; end ;
13874: PPOPN 6
13876: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13877: GO 13879
13879: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13880: LD_STRING initStreamRollete();
13882: PPUSH
13883: CALL_OW 559
// InitStreamMode ;
13887: CALL 13896 0 0
// DefineStreamItems ( ) ;
13891: CALL 14336 0 0
// end ;
13895: END
// function InitStreamMode ; begin
13896: LD_INT 0
13898: PPUSH
// streamModeActive := false ;
13899: LD_ADDR_EXP 42
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// normalCounter := 36 ;
13907: LD_ADDR_EXP 43
13911: PUSH
13912: LD_INT 36
13914: ST_TO_ADDR
// hardcoreCounter := 16 ;
13915: LD_ADDR_EXP 44
13919: PUSH
13920: LD_INT 16
13922: ST_TO_ADDR
// sRocket := false ;
13923: LD_ADDR_EXP 47
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// sSpeed := false ;
13931: LD_ADDR_EXP 46
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// sEngine := false ;
13939: LD_ADDR_EXP 48
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// sSpec := false ;
13947: LD_ADDR_EXP 45
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// sLevel := false ;
13955: LD_ADDR_EXP 49
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// sArmoury := false ;
13963: LD_ADDR_EXP 50
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// sRadar := false ;
13971: LD_ADDR_EXP 51
13975: PUSH
13976: LD_INT 0
13978: ST_TO_ADDR
// sBunker := false ;
13979: LD_ADDR_EXP 52
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// sHack := false ;
13987: LD_ADDR_EXP 53
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// sFire := false ;
13995: LD_ADDR_EXP 54
13999: PUSH
14000: LD_INT 0
14002: ST_TO_ADDR
// sRefresh := false ;
14003: LD_ADDR_EXP 55
14007: PUSH
14008: LD_INT 0
14010: ST_TO_ADDR
// sExp := false ;
14011: LD_ADDR_EXP 56
14015: PUSH
14016: LD_INT 0
14018: ST_TO_ADDR
// sDepot := false ;
14019: LD_ADDR_EXP 57
14023: PUSH
14024: LD_INT 0
14026: ST_TO_ADDR
// sFlag := false ;
14027: LD_ADDR_EXP 58
14031: PUSH
14032: LD_INT 0
14034: ST_TO_ADDR
// sKamikadze := false ;
14035: LD_ADDR_EXP 66
14039: PUSH
14040: LD_INT 0
14042: ST_TO_ADDR
// sTroll := false ;
14043: LD_ADDR_EXP 67
14047: PUSH
14048: LD_INT 0
14050: ST_TO_ADDR
// sSlow := false ;
14051: LD_ADDR_EXP 68
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// sLack := false ;
14059: LD_ADDR_EXP 69
14063: PUSH
14064: LD_INT 0
14066: ST_TO_ADDR
// sTank := false ;
14067: LD_ADDR_EXP 71
14071: PUSH
14072: LD_INT 0
14074: ST_TO_ADDR
// sRemote := false ;
14075: LD_ADDR_EXP 72
14079: PUSH
14080: LD_INT 0
14082: ST_TO_ADDR
// sPowell := false ;
14083: LD_ADDR_EXP 73
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// sTeleport := false ;
14091: LD_ADDR_EXP 76
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// sOilTower := false ;
14099: LD_ADDR_EXP 78
14103: PUSH
14104: LD_INT 0
14106: ST_TO_ADDR
// sShovel := false ;
14107: LD_ADDR_EXP 79
14111: PUSH
14112: LD_INT 0
14114: ST_TO_ADDR
// sSheik := false ;
14115: LD_ADDR_EXP 80
14119: PUSH
14120: LD_INT 0
14122: ST_TO_ADDR
// sEarthquake := false ;
14123: LD_ADDR_EXP 82
14127: PUSH
14128: LD_INT 0
14130: ST_TO_ADDR
// sAI := false ;
14131: LD_ADDR_EXP 83
14135: PUSH
14136: LD_INT 0
14138: ST_TO_ADDR
// sCargo := false ;
14139: LD_ADDR_EXP 86
14143: PUSH
14144: LD_INT 0
14146: ST_TO_ADDR
// sDLaser := false ;
14147: LD_ADDR_EXP 87
14151: PUSH
14152: LD_INT 0
14154: ST_TO_ADDR
// sExchange := false ;
14155: LD_ADDR_EXP 88
14159: PUSH
14160: LD_INT 0
14162: ST_TO_ADDR
// sFac := false ;
14163: LD_ADDR_EXP 89
14167: PUSH
14168: LD_INT 0
14170: ST_TO_ADDR
// sPower := false ;
14171: LD_ADDR_EXP 90
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// sRandom := false ;
14179: LD_ADDR_EXP 91
14183: PUSH
14184: LD_INT 0
14186: ST_TO_ADDR
// sShield := false ;
14187: LD_ADDR_EXP 92
14191: PUSH
14192: LD_INT 0
14194: ST_TO_ADDR
// sTime := false ;
14195: LD_ADDR_EXP 93
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// sTools := false ;
14203: LD_ADDR_EXP 94
14207: PUSH
14208: LD_INT 0
14210: ST_TO_ADDR
// sSold := false ;
14211: LD_ADDR_EXP 59
14215: PUSH
14216: LD_INT 0
14218: ST_TO_ADDR
// sDiff := false ;
14219: LD_ADDR_EXP 60
14223: PUSH
14224: LD_INT 0
14226: ST_TO_ADDR
// sFog := false ;
14227: LD_ADDR_EXP 63
14231: PUSH
14232: LD_INT 0
14234: ST_TO_ADDR
// sReset := false ;
14235: LD_ADDR_EXP 64
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// sSun := false ;
14243: LD_ADDR_EXP 65
14247: PUSH
14248: LD_INT 0
14250: ST_TO_ADDR
// sTiger := false ;
14251: LD_ADDR_EXP 61
14255: PUSH
14256: LD_INT 0
14258: ST_TO_ADDR
// sBomb := false ;
14259: LD_ADDR_EXP 62
14263: PUSH
14264: LD_INT 0
14266: ST_TO_ADDR
// sWound := false ;
14267: LD_ADDR_EXP 70
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// sBetray := false ;
14275: LD_ADDR_EXP 74
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// sContamin := false ;
14283: LD_ADDR_EXP 75
14287: PUSH
14288: LD_INT 0
14290: ST_TO_ADDR
// sOil := false ;
14291: LD_ADDR_EXP 77
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// sStu := false ;
14299: LD_ADDR_EXP 81
14303: PUSH
14304: LD_INT 0
14306: ST_TO_ADDR
// sBazooka := false ;
14307: LD_ADDR_EXP 84
14311: PUSH
14312: LD_INT 0
14314: ST_TO_ADDR
// sMortar := false ;
14315: LD_ADDR_EXP 85
14319: PUSH
14320: LD_INT 0
14322: ST_TO_ADDR
// sRanger := false ;
14323: LD_ADDR_EXP 95
14327: PUSH
14328: LD_INT 0
14330: ST_TO_ADDR
// end ;
14331: LD_VAR 0 1
14335: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14336: LD_INT 0
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
// result := [ ] ;
14343: LD_ADDR_VAR 0 1
14347: PUSH
14348: EMPTY
14349: ST_TO_ADDR
// if campaign_id = 1 then
14350: LD_OWVAR 69
14354: PUSH
14355: LD_INT 1
14357: EQUAL
14358: IFFALSE 17296
// begin case mission_number of 1 :
14360: LD_OWVAR 70
14364: PUSH
14365: LD_INT 1
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14437
14373: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14374: LD_ADDR_VAR 0 1
14378: PUSH
14379: LD_INT 2
14381: PUSH
14382: LD_INT 4
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 15
14393: PUSH
14394: LD_INT 16
14396: PUSH
14397: LD_INT 22
14399: PUSH
14400: LD_INT 23
14402: PUSH
14403: LD_INT 26
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 101
14419: PUSH
14420: LD_INT 102
14422: PUSH
14423: LD_INT 106
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: ST_TO_ADDR
14435: GO 17294
14437: LD_INT 2
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14517
14445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: LD_INT 4
14456: PUSH
14457: LD_INT 11
14459: PUSH
14460: LD_INT 12
14462: PUSH
14463: LD_INT 15
14465: PUSH
14466: LD_INT 16
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 23
14474: PUSH
14475: LD_INT 26
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 105
14497: PUSH
14498: LD_INT 106
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: ST_TO_ADDR
14515: GO 17294
14517: LD_INT 3
14519: DOUBLE
14520: EQUAL
14521: IFTRUE 14525
14523: GO 14601
14525: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14526: LD_ADDR_VAR 0 1
14530: PUSH
14531: LD_INT 2
14533: PUSH
14534: LD_INT 4
14536: PUSH
14537: LD_INT 5
14539: PUSH
14540: LD_INT 11
14542: PUSH
14543: LD_INT 12
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 22
14554: PUSH
14555: LD_INT 26
14557: PUSH
14558: LD_INT 36
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 101
14575: PUSH
14576: LD_INT 102
14578: PUSH
14579: LD_INT 105
14581: PUSH
14582: LD_INT 106
14584: PUSH
14585: LD_INT 108
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: ST_TO_ADDR
14599: GO 17294
14601: LD_INT 4
14603: DOUBLE
14604: EQUAL
14605: IFTRUE 14609
14607: GO 14693
14609: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14610: LD_ADDR_VAR 0 1
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: LD_INT 4
14620: PUSH
14621: LD_INT 5
14623: PUSH
14624: LD_INT 8
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 15
14635: PUSH
14636: LD_INT 16
14638: PUSH
14639: LD_INT 22
14641: PUSH
14642: LD_INT 23
14644: PUSH
14645: LD_INT 26
14647: PUSH
14648: LD_INT 36
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 101
14667: PUSH
14668: LD_INT 102
14670: PUSH
14671: LD_INT 105
14673: PUSH
14674: LD_INT 106
14676: PUSH
14677: LD_INT 108
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: ST_TO_ADDR
14691: GO 17294
14693: LD_INT 5
14695: DOUBLE
14696: EQUAL
14697: IFTRUE 14701
14699: GO 14801
14701: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14702: LD_ADDR_VAR 0 1
14706: PUSH
14707: LD_INT 2
14709: PUSH
14710: LD_INT 4
14712: PUSH
14713: LD_INT 5
14715: PUSH
14716: LD_INT 6
14718: PUSH
14719: LD_INT 8
14721: PUSH
14722: LD_INT 11
14724: PUSH
14725: LD_INT 12
14727: PUSH
14728: LD_INT 15
14730: PUSH
14731: LD_INT 16
14733: PUSH
14734: LD_INT 22
14736: PUSH
14737: LD_INT 23
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 26
14745: PUSH
14746: LD_INT 36
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 101
14767: PUSH
14768: LD_INT 102
14770: PUSH
14771: LD_INT 105
14773: PUSH
14774: LD_INT 106
14776: PUSH
14777: LD_INT 108
14779: PUSH
14780: LD_INT 109
14782: PUSH
14783: LD_INT 112
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: ST_TO_ADDR
14799: GO 17294
14801: LD_INT 6
14803: DOUBLE
14804: EQUAL
14805: IFTRUE 14809
14807: GO 14929
14809: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14810: LD_ADDR_VAR 0 1
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 4
14820: PUSH
14821: LD_INT 5
14823: PUSH
14824: LD_INT 6
14826: PUSH
14827: LD_INT 8
14829: PUSH
14830: LD_INT 11
14832: PUSH
14833: LD_INT 12
14835: PUSH
14836: LD_INT 15
14838: PUSH
14839: LD_INT 16
14841: PUSH
14842: LD_INT 20
14844: PUSH
14845: LD_INT 21
14847: PUSH
14848: LD_INT 22
14850: PUSH
14851: LD_INT 23
14853: PUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 30
14862: PUSH
14863: LD_INT 31
14865: PUSH
14866: LD_INT 32
14868: PUSH
14869: LD_INT 36
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 101
14895: PUSH
14896: LD_INT 102
14898: PUSH
14899: LD_INT 105
14901: PUSH
14902: LD_INT 106
14904: PUSH
14905: LD_INT 108
14907: PUSH
14908: LD_INT 109
14910: PUSH
14911: LD_INT 112
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: ST_TO_ADDR
14927: GO 17294
14929: LD_INT 7
14931: DOUBLE
14932: EQUAL
14933: IFTRUE 14937
14935: GO 15037
14937: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: LD_INT 2
14945: PUSH
14946: LD_INT 4
14948: PUSH
14949: LD_INT 5
14951: PUSH
14952: LD_INT 7
14954: PUSH
14955: LD_INT 11
14957: PUSH
14958: LD_INT 12
14960: PUSH
14961: LD_INT 15
14963: PUSH
14964: LD_INT 16
14966: PUSH
14967: LD_INT 20
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 22
14975: PUSH
14976: LD_INT 23
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 26
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 101
15003: PUSH
15004: LD_INT 102
15006: PUSH
15007: LD_INT 103
15009: PUSH
15010: LD_INT 105
15012: PUSH
15013: LD_INT 106
15015: PUSH
15016: LD_INT 108
15018: PUSH
15019: LD_INT 112
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: ST_TO_ADDR
15035: GO 17294
15037: LD_INT 8
15039: DOUBLE
15040: EQUAL
15041: IFTRUE 15045
15043: GO 15173
15045: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15046: LD_ADDR_VAR 0 1
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 4
15056: PUSH
15057: LD_INT 5
15059: PUSH
15060: LD_INT 6
15062: PUSH
15063: LD_INT 7
15065: PUSH
15066: LD_INT 8
15068: PUSH
15069: LD_INT 11
15071: PUSH
15072: LD_INT 12
15074: PUSH
15075: LD_INT 15
15077: PUSH
15078: LD_INT 16
15080: PUSH
15081: LD_INT 20
15083: PUSH
15084: LD_INT 21
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 23
15092: PUSH
15093: LD_INT 25
15095: PUSH
15096: LD_INT 26
15098: PUSH
15099: LD_INT 30
15101: PUSH
15102: LD_INT 31
15104: PUSH
15105: LD_INT 32
15107: PUSH
15108: LD_INT 36
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 101
15135: PUSH
15136: LD_INT 102
15138: PUSH
15139: LD_INT 103
15141: PUSH
15142: LD_INT 105
15144: PUSH
15145: LD_INT 106
15147: PUSH
15148: LD_INT 108
15150: PUSH
15151: LD_INT 109
15153: PUSH
15154: LD_INT 112
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: ST_TO_ADDR
15171: GO 17294
15173: LD_INT 9
15175: DOUBLE
15176: EQUAL
15177: IFTRUE 15181
15179: GO 15317
15181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15182: LD_ADDR_VAR 0 1
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: LD_INT 6
15198: PUSH
15199: LD_INT 7
15201: PUSH
15202: LD_INT 8
15204: PUSH
15205: LD_INT 11
15207: PUSH
15208: LD_INT 12
15210: PUSH
15211: LD_INT 15
15213: PUSH
15214: LD_INT 16
15216: PUSH
15217: LD_INT 20
15219: PUSH
15220: LD_INT 21
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_INT 23
15228: PUSH
15229: LD_INT 25
15231: PUSH
15232: LD_INT 26
15234: PUSH
15235: LD_INT 28
15237: PUSH
15238: LD_INT 30
15240: PUSH
15241: LD_INT 31
15243: PUSH
15244: LD_INT 32
15246: PUSH
15247: LD_INT 36
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 101
15275: PUSH
15276: LD_INT 102
15278: PUSH
15279: LD_INT 103
15281: PUSH
15282: LD_INT 105
15284: PUSH
15285: LD_INT 106
15287: PUSH
15288: LD_INT 108
15290: PUSH
15291: LD_INT 109
15293: PUSH
15294: LD_INT 112
15296: PUSH
15297: LD_INT 114
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: ST_TO_ADDR
15315: GO 17294
15317: LD_INT 10
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15509
15325: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: LD_INT 6
15342: PUSH
15343: LD_INT 7
15345: PUSH
15346: LD_INT 8
15348: PUSH
15349: LD_INT 9
15351: PUSH
15352: LD_INT 10
15354: PUSH
15355: LD_INT 11
15357: PUSH
15358: LD_INT 12
15360: PUSH
15361: LD_INT 13
15363: PUSH
15364: LD_INT 14
15366: PUSH
15367: LD_INT 15
15369: PUSH
15370: LD_INT 16
15372: PUSH
15373: LD_INT 17
15375: PUSH
15376: LD_INT 18
15378: PUSH
15379: LD_INT 19
15381: PUSH
15382: LD_INT 20
15384: PUSH
15385: LD_INT 21
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 23
15393: PUSH
15394: LD_INT 24
15396: PUSH
15397: LD_INT 25
15399: PUSH
15400: LD_INT 26
15402: PUSH
15403: LD_INT 28
15405: PUSH
15406: LD_INT 30
15408: PUSH
15409: LD_INT 31
15411: PUSH
15412: LD_INT 32
15414: PUSH
15415: LD_INT 36
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 101
15451: PUSH
15452: LD_INT 102
15454: PUSH
15455: LD_INT 103
15457: PUSH
15458: LD_INT 104
15460: PUSH
15461: LD_INT 105
15463: PUSH
15464: LD_INT 106
15466: PUSH
15467: LD_INT 107
15469: PUSH
15470: LD_INT 108
15472: PUSH
15473: LD_INT 109
15475: PUSH
15476: LD_INT 110
15478: PUSH
15479: LD_INT 111
15481: PUSH
15482: LD_INT 112
15484: PUSH
15485: LD_INT 114
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: ST_TO_ADDR
15507: GO 17294
15509: LD_INT 11
15511: DOUBLE
15512: EQUAL
15513: IFTRUE 15517
15515: GO 15709
15517: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15518: LD_ADDR_VAR 0 1
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: LD_INT 4
15531: PUSH
15532: LD_INT 5
15534: PUSH
15535: LD_INT 6
15537: PUSH
15538: LD_INT 7
15540: PUSH
15541: LD_INT 8
15543: PUSH
15544: LD_INT 9
15546: PUSH
15547: LD_INT 10
15549: PUSH
15550: LD_INT 11
15552: PUSH
15553: LD_INT 12
15555: PUSH
15556: LD_INT 13
15558: PUSH
15559: LD_INT 14
15561: PUSH
15562: LD_INT 15
15564: PUSH
15565: LD_INT 16
15567: PUSH
15568: LD_INT 17
15570: PUSH
15571: LD_INT 18
15573: PUSH
15574: LD_INT 19
15576: PUSH
15577: LD_INT 20
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 22
15585: PUSH
15586: LD_INT 23
15588: PUSH
15589: LD_INT 24
15591: PUSH
15592: LD_INT 25
15594: PUSH
15595: LD_INT 26
15597: PUSH
15598: LD_INT 28
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 31
15606: PUSH
15607: LD_INT 32
15609: PUSH
15610: LD_INT 34
15612: PUSH
15613: LD_INT 36
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 101
15651: PUSH
15652: LD_INT 102
15654: PUSH
15655: LD_INT 103
15657: PUSH
15658: LD_INT 104
15660: PUSH
15661: LD_INT 105
15663: PUSH
15664: LD_INT 106
15666: PUSH
15667: LD_INT 107
15669: PUSH
15670: LD_INT 108
15672: PUSH
15673: LD_INT 109
15675: PUSH
15676: LD_INT 110
15678: PUSH
15679: LD_INT 111
15681: PUSH
15682: LD_INT 112
15684: PUSH
15685: LD_INT 114
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: ST_TO_ADDR
15707: GO 17294
15709: LD_INT 12
15711: DOUBLE
15712: EQUAL
15713: IFTRUE 15717
15715: GO 15925
15717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15718: LD_ADDR_VAR 0 1
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: LD_INT 2
15728: PUSH
15729: LD_INT 3
15731: PUSH
15732: LD_INT 4
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 6
15740: PUSH
15741: LD_INT 7
15743: PUSH
15744: LD_INT 8
15746: PUSH
15747: LD_INT 9
15749: PUSH
15750: LD_INT 10
15752: PUSH
15753: LD_INT 11
15755: PUSH
15756: LD_INT 12
15758: PUSH
15759: LD_INT 13
15761: PUSH
15762: LD_INT 14
15764: PUSH
15765: LD_INT 15
15767: PUSH
15768: LD_INT 16
15770: PUSH
15771: LD_INT 17
15773: PUSH
15774: LD_INT 18
15776: PUSH
15777: LD_INT 19
15779: PUSH
15780: LD_INT 20
15782: PUSH
15783: LD_INT 21
15785: PUSH
15786: LD_INT 22
15788: PUSH
15789: LD_INT 23
15791: PUSH
15792: LD_INT 24
15794: PUSH
15795: LD_INT 25
15797: PUSH
15798: LD_INT 26
15800: PUSH
15801: LD_INT 27
15803: PUSH
15804: LD_INT 28
15806: PUSH
15807: LD_INT 30
15809: PUSH
15810: LD_INT 31
15812: PUSH
15813: LD_INT 32
15815: PUSH
15816: LD_INT 33
15818: PUSH
15819: LD_INT 34
15821: PUSH
15822: LD_INT 36
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 101
15863: PUSH
15864: LD_INT 102
15866: PUSH
15867: LD_INT 103
15869: PUSH
15870: LD_INT 104
15872: PUSH
15873: LD_INT 105
15875: PUSH
15876: LD_INT 106
15878: PUSH
15879: LD_INT 107
15881: PUSH
15882: LD_INT 108
15884: PUSH
15885: LD_INT 109
15887: PUSH
15888: LD_INT 110
15890: PUSH
15891: LD_INT 111
15893: PUSH
15894: LD_INT 112
15896: PUSH
15897: LD_INT 113
15899: PUSH
15900: LD_INT 114
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: ST_TO_ADDR
15923: GO 17294
15925: LD_INT 13
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 16129
15933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: LD_INT 4
15950: PUSH
15951: LD_INT 5
15953: PUSH
15954: LD_INT 8
15956: PUSH
15957: LD_INT 9
15959: PUSH
15960: LD_INT 10
15962: PUSH
15963: LD_INT 11
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: LD_INT 14
15971: PUSH
15972: LD_INT 15
15974: PUSH
15975: LD_INT 16
15977: PUSH
15978: LD_INT 17
15980: PUSH
15981: LD_INT 18
15983: PUSH
15984: LD_INT 19
15986: PUSH
15987: LD_INT 20
15989: PUSH
15990: LD_INT 21
15992: PUSH
15993: LD_INT 22
15995: PUSH
15996: LD_INT 23
15998: PUSH
15999: LD_INT 24
16001: PUSH
16002: LD_INT 25
16004: PUSH
16005: LD_INT 26
16007: PUSH
16008: LD_INT 27
16010: PUSH
16011: LD_INT 28
16013: PUSH
16014: LD_INT 30
16016: PUSH
16017: LD_INT 31
16019: PUSH
16020: LD_INT 32
16022: PUSH
16023: LD_INT 33
16025: PUSH
16026: LD_INT 34
16028: PUSH
16029: LD_INT 36
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 101
16067: PUSH
16068: LD_INT 102
16070: PUSH
16071: LD_INT 103
16073: PUSH
16074: LD_INT 104
16076: PUSH
16077: LD_INT 105
16079: PUSH
16080: LD_INT 106
16082: PUSH
16083: LD_INT 107
16085: PUSH
16086: LD_INT 108
16088: PUSH
16089: LD_INT 109
16091: PUSH
16092: LD_INT 110
16094: PUSH
16095: LD_INT 111
16097: PUSH
16098: LD_INT 112
16100: PUSH
16101: LD_INT 113
16103: PUSH
16104: LD_INT 114
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: ST_TO_ADDR
16127: GO 17294
16129: LD_INT 14
16131: DOUBLE
16132: EQUAL
16133: IFTRUE 16137
16135: GO 16349
16137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16138: LD_ADDR_VAR 0 1
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: LD_INT 4
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: LD_INT 6
16160: PUSH
16161: LD_INT 7
16163: PUSH
16164: LD_INT 8
16166: PUSH
16167: LD_INT 9
16169: PUSH
16170: LD_INT 10
16172: PUSH
16173: LD_INT 11
16175: PUSH
16176: LD_INT 12
16178: PUSH
16179: LD_INT 13
16181: PUSH
16182: LD_INT 14
16184: PUSH
16185: LD_INT 15
16187: PUSH
16188: LD_INT 16
16190: PUSH
16191: LD_INT 17
16193: PUSH
16194: LD_INT 18
16196: PUSH
16197: LD_INT 19
16199: PUSH
16200: LD_INT 20
16202: PUSH
16203: LD_INT 21
16205: PUSH
16206: LD_INT 22
16208: PUSH
16209: LD_INT 23
16211: PUSH
16212: LD_INT 24
16214: PUSH
16215: LD_INT 25
16217: PUSH
16218: LD_INT 26
16220: PUSH
16221: LD_INT 27
16223: PUSH
16224: LD_INT 28
16226: PUSH
16227: LD_INT 29
16229: PUSH
16230: LD_INT 30
16232: PUSH
16233: LD_INT 31
16235: PUSH
16236: LD_INT 32
16238: PUSH
16239: LD_INT 33
16241: PUSH
16242: LD_INT 34
16244: PUSH
16245: LD_INT 36
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 101
16287: PUSH
16288: LD_INT 102
16290: PUSH
16291: LD_INT 103
16293: PUSH
16294: LD_INT 104
16296: PUSH
16297: LD_INT 105
16299: PUSH
16300: LD_INT 106
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: LD_INT 108
16308: PUSH
16309: LD_INT 109
16311: PUSH
16312: LD_INT 110
16314: PUSH
16315: LD_INT 111
16317: PUSH
16318: LD_INT 112
16320: PUSH
16321: LD_INT 113
16323: PUSH
16324: LD_INT 114
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: ST_TO_ADDR
16347: GO 17294
16349: LD_INT 15
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16357
16355: GO 16569
16357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16358: LD_ADDR_VAR 0 1
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: LD_INT 3
16371: PUSH
16372: LD_INT 4
16374: PUSH
16375: LD_INT 5
16377: PUSH
16378: LD_INT 6
16380: PUSH
16381: LD_INT 7
16383: PUSH
16384: LD_INT 8
16386: PUSH
16387: LD_INT 9
16389: PUSH
16390: LD_INT 10
16392: PUSH
16393: LD_INT 11
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: LD_INT 13
16401: PUSH
16402: LD_INT 14
16404: PUSH
16405: LD_INT 15
16407: PUSH
16408: LD_INT 16
16410: PUSH
16411: LD_INT 17
16413: PUSH
16414: LD_INT 18
16416: PUSH
16417: LD_INT 19
16419: PUSH
16420: LD_INT 20
16422: PUSH
16423: LD_INT 21
16425: PUSH
16426: LD_INT 22
16428: PUSH
16429: LD_INT 23
16431: PUSH
16432: LD_INT 24
16434: PUSH
16435: LD_INT 25
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: LD_INT 27
16443: PUSH
16444: LD_INT 28
16446: PUSH
16447: LD_INT 29
16449: PUSH
16450: LD_INT 30
16452: PUSH
16453: LD_INT 31
16455: PUSH
16456: LD_INT 32
16458: PUSH
16459: LD_INT 33
16461: PUSH
16462: LD_INT 34
16464: PUSH
16465: LD_INT 36
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 101
16507: PUSH
16508: LD_INT 102
16510: PUSH
16511: LD_INT 103
16513: PUSH
16514: LD_INT 104
16516: PUSH
16517: LD_INT 105
16519: PUSH
16520: LD_INT 106
16522: PUSH
16523: LD_INT 107
16525: PUSH
16526: LD_INT 108
16528: PUSH
16529: LD_INT 109
16531: PUSH
16532: LD_INT 110
16534: PUSH
16535: LD_INT 111
16537: PUSH
16538: LD_INT 112
16540: PUSH
16541: LD_INT 113
16543: PUSH
16544: LD_INT 114
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: ST_TO_ADDR
16567: GO 17294
16569: LD_INT 16
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16701
16577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16578: LD_ADDR_VAR 0 1
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: LD_INT 7
16594: PUSH
16595: LD_INT 11
16597: PUSH
16598: LD_INT 12
16600: PUSH
16601: LD_INT 15
16603: PUSH
16604: LD_INT 16
16606: PUSH
16607: LD_INT 20
16609: PUSH
16610: LD_INT 21
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_INT 23
16618: PUSH
16619: LD_INT 25
16621: PUSH
16622: LD_INT 26
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 31
16630: PUSH
16631: LD_INT 32
16633: PUSH
16634: LD_INT 33
16636: PUSH
16637: LD_INT 34
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 101
16663: PUSH
16664: LD_INT 102
16666: PUSH
16667: LD_INT 103
16669: PUSH
16670: LD_INT 106
16672: PUSH
16673: LD_INT 108
16675: PUSH
16676: LD_INT 112
16678: PUSH
16679: LD_INT 113
16681: PUSH
16682: LD_INT 114
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: ST_TO_ADDR
16699: GO 17294
16701: LD_INT 17
16703: DOUBLE
16704: EQUAL
16705: IFTRUE 16709
16707: GO 16921
16709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16710: LD_ADDR_VAR 0 1
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: LD_INT 3
16723: PUSH
16724: LD_INT 4
16726: PUSH
16727: LD_INT 5
16729: PUSH
16730: LD_INT 6
16732: PUSH
16733: LD_INT 7
16735: PUSH
16736: LD_INT 8
16738: PUSH
16739: LD_INT 9
16741: PUSH
16742: LD_INT 10
16744: PUSH
16745: LD_INT 11
16747: PUSH
16748: LD_INT 12
16750: PUSH
16751: LD_INT 13
16753: PUSH
16754: LD_INT 14
16756: PUSH
16757: LD_INT 15
16759: PUSH
16760: LD_INT 16
16762: PUSH
16763: LD_INT 17
16765: PUSH
16766: LD_INT 18
16768: PUSH
16769: LD_INT 19
16771: PUSH
16772: LD_INT 20
16774: PUSH
16775: LD_INT 21
16777: PUSH
16778: LD_INT 22
16780: PUSH
16781: LD_INT 23
16783: PUSH
16784: LD_INT 24
16786: PUSH
16787: LD_INT 25
16789: PUSH
16790: LD_INT 26
16792: PUSH
16793: LD_INT 27
16795: PUSH
16796: LD_INT 28
16798: PUSH
16799: LD_INT 29
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 31
16807: PUSH
16808: LD_INT 32
16810: PUSH
16811: LD_INT 33
16813: PUSH
16814: LD_INT 34
16816: PUSH
16817: LD_INT 36
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 101
16859: PUSH
16860: LD_INT 102
16862: PUSH
16863: LD_INT 103
16865: PUSH
16866: LD_INT 104
16868: PUSH
16869: LD_INT 105
16871: PUSH
16872: LD_INT 106
16874: PUSH
16875: LD_INT 107
16877: PUSH
16878: LD_INT 108
16880: PUSH
16881: LD_INT 109
16883: PUSH
16884: LD_INT 110
16886: PUSH
16887: LD_INT 111
16889: PUSH
16890: LD_INT 112
16892: PUSH
16893: LD_INT 113
16895: PUSH
16896: LD_INT 114
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: ST_TO_ADDR
16919: GO 17294
16921: LD_INT 18
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 17065
16929: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: LD_INT 2
16937: PUSH
16938: LD_INT 4
16940: PUSH
16941: LD_INT 5
16943: PUSH
16944: LD_INT 7
16946: PUSH
16947: LD_INT 11
16949: PUSH
16950: LD_INT 12
16952: PUSH
16953: LD_INT 15
16955: PUSH
16956: LD_INT 16
16958: PUSH
16959: LD_INT 20
16961: PUSH
16962: LD_INT 21
16964: PUSH
16965: LD_INT 22
16967: PUSH
16968: LD_INT 23
16970: PUSH
16971: LD_INT 25
16973: PUSH
16974: LD_INT 26
16976: PUSH
16977: LD_INT 30
16979: PUSH
16980: LD_INT 31
16982: PUSH
16983: LD_INT 32
16985: PUSH
16986: LD_INT 33
16988: PUSH
16989: LD_INT 34
16991: PUSH
16992: LD_INT 35
16994: PUSH
16995: LD_INT 36
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 101
17023: PUSH
17024: LD_INT 102
17026: PUSH
17027: LD_INT 103
17029: PUSH
17030: LD_INT 106
17032: PUSH
17033: LD_INT 108
17035: PUSH
17036: LD_INT 112
17038: PUSH
17039: LD_INT 113
17041: PUSH
17042: LD_INT 114
17044: PUSH
17045: LD_INT 115
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: ST_TO_ADDR
17063: GO 17294
17065: LD_INT 19
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17293
17073: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17074: LD_ADDR_VAR 0 1
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: LD_INT 3
17087: PUSH
17088: LD_INT 4
17090: PUSH
17091: LD_INT 5
17093: PUSH
17094: LD_INT 6
17096: PUSH
17097: LD_INT 7
17099: PUSH
17100: LD_INT 8
17102: PUSH
17103: LD_INT 9
17105: PUSH
17106: LD_INT 10
17108: PUSH
17109: LD_INT 11
17111: PUSH
17112: LD_INT 12
17114: PUSH
17115: LD_INT 13
17117: PUSH
17118: LD_INT 14
17120: PUSH
17121: LD_INT 15
17123: PUSH
17124: LD_INT 16
17126: PUSH
17127: LD_INT 17
17129: PUSH
17130: LD_INT 18
17132: PUSH
17133: LD_INT 19
17135: PUSH
17136: LD_INT 20
17138: PUSH
17139: LD_INT 21
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_INT 23
17147: PUSH
17148: LD_INT 24
17150: PUSH
17151: LD_INT 25
17153: PUSH
17154: LD_INT 26
17156: PUSH
17157: LD_INT 27
17159: PUSH
17160: LD_INT 28
17162: PUSH
17163: LD_INT 29
17165: PUSH
17166: LD_INT 30
17168: PUSH
17169: LD_INT 31
17171: PUSH
17172: LD_INT 32
17174: PUSH
17175: LD_INT 33
17177: PUSH
17178: LD_INT 34
17180: PUSH
17181: LD_INT 35
17183: PUSH
17184: LD_INT 36
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 101
17227: PUSH
17228: LD_INT 102
17230: PUSH
17231: LD_INT 103
17233: PUSH
17234: LD_INT 104
17236: PUSH
17237: LD_INT 105
17239: PUSH
17240: LD_INT 106
17242: PUSH
17243: LD_INT 107
17245: PUSH
17246: LD_INT 108
17248: PUSH
17249: LD_INT 109
17251: PUSH
17252: LD_INT 110
17254: PUSH
17255: LD_INT 111
17257: PUSH
17258: LD_INT 112
17260: PUSH
17261: LD_INT 113
17263: PUSH
17264: LD_INT 114
17266: PUSH
17267: LD_INT 115
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: ST_TO_ADDR
17291: GO 17294
17293: POP
// end else
17294: GO 17513
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17296: LD_ADDR_VAR 0 1
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: LD_INT 3
17309: PUSH
17310: LD_INT 4
17312: PUSH
17313: LD_INT 5
17315: PUSH
17316: LD_INT 6
17318: PUSH
17319: LD_INT 7
17321: PUSH
17322: LD_INT 8
17324: PUSH
17325: LD_INT 9
17327: PUSH
17328: LD_INT 10
17330: PUSH
17331: LD_INT 11
17333: PUSH
17334: LD_INT 12
17336: PUSH
17337: LD_INT 13
17339: PUSH
17340: LD_INT 14
17342: PUSH
17343: LD_INT 15
17345: PUSH
17346: LD_INT 16
17348: PUSH
17349: LD_INT 17
17351: PUSH
17352: LD_INT 18
17354: PUSH
17355: LD_INT 19
17357: PUSH
17358: LD_INT 20
17360: PUSH
17361: LD_INT 21
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_INT 23
17369: PUSH
17370: LD_INT 24
17372: PUSH
17373: LD_INT 25
17375: PUSH
17376: LD_INT 26
17378: PUSH
17379: LD_INT 27
17381: PUSH
17382: LD_INT 28
17384: PUSH
17385: LD_INT 29
17387: PUSH
17388: LD_INT 30
17390: PUSH
17391: LD_INT 31
17393: PUSH
17394: LD_INT 32
17396: PUSH
17397: LD_INT 33
17399: PUSH
17400: LD_INT 34
17402: PUSH
17403: LD_INT 35
17405: PUSH
17406: LD_INT 36
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 101
17449: PUSH
17450: LD_INT 102
17452: PUSH
17453: LD_INT 103
17455: PUSH
17456: LD_INT 104
17458: PUSH
17459: LD_INT 105
17461: PUSH
17462: LD_INT 106
17464: PUSH
17465: LD_INT 107
17467: PUSH
17468: LD_INT 108
17470: PUSH
17471: LD_INT 109
17473: PUSH
17474: LD_INT 110
17476: PUSH
17477: LD_INT 111
17479: PUSH
17480: LD_INT 112
17482: PUSH
17483: LD_INT 113
17485: PUSH
17486: LD_INT 114
17488: PUSH
17489: LD_INT 115
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: ST_TO_ADDR
// if result then
17513: LD_VAR 0 1
17517: IFFALSE 17806
// begin normal :=  ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_STRING 
17526: ST_TO_ADDR
// hardcore :=  ;
17527: LD_ADDR_VAR 0 4
17531: PUSH
17532: LD_STRING 
17534: ST_TO_ADDR
// for i = 1 to normalCounter do
17535: LD_ADDR_VAR 0 5
17539: PUSH
17540: DOUBLE
17541: LD_INT 1
17543: DEC
17544: ST_TO_ADDR
17545: LD_EXP 43
17549: PUSH
17550: FOR_TO
17551: IFFALSE 17652
// begin tmp := 0 ;
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: LD_STRING 0
17560: ST_TO_ADDR
// if result [ 1 ] then
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 1
17568: ARRAY
17569: IFFALSE 17634
// if result [ 1 ] [ 1 ] = i then
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: ARRAY
17579: PUSH
17580: LD_INT 1
17582: ARRAY
17583: PUSH
17584: LD_VAR 0 5
17588: EQUAL
17589: IFFALSE 17634
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17591: LD_ADDR_VAR 0 1
17595: PUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_VAR 0 1
17608: PUSH
17609: LD_INT 1
17611: ARRAY
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 3
17620: PPUSH
17621: CALL_OW 1
17625: ST_TO_ADDR
// tmp := 1 ;
17626: LD_ADDR_VAR 0 2
17630: PUSH
17631: LD_STRING 1
17633: ST_TO_ADDR
// end ; normal := normal & tmp ;
17634: LD_ADDR_VAR 0 3
17638: PUSH
17639: LD_VAR 0 3
17643: PUSH
17644: LD_VAR 0 2
17648: STR
17649: ST_TO_ADDR
// end ;
17650: GO 17550
17652: POP
17653: POP
// for i = 1 to hardcoreCounter do
17654: LD_ADDR_VAR 0 5
17658: PUSH
17659: DOUBLE
17660: LD_INT 1
17662: DEC
17663: ST_TO_ADDR
17664: LD_EXP 44
17668: PUSH
17669: FOR_TO
17670: IFFALSE 17775
// begin tmp := 0 ;
17672: LD_ADDR_VAR 0 2
17676: PUSH
17677: LD_STRING 0
17679: ST_TO_ADDR
// if result [ 2 ] then
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 2
17687: ARRAY
17688: IFFALSE 17757
// if result [ 2 ] [ 1 ] = 100 + i then
17690: LD_VAR 0 1
17694: PUSH
17695: LD_INT 2
17697: ARRAY
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PUSH
17703: LD_INT 100
17705: PUSH
17706: LD_VAR 0 5
17710: PLUS
17711: EQUAL
17712: IFFALSE 17757
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_INT 2
17726: PPUSH
17727: LD_VAR 0 1
17731: PUSH
17732: LD_INT 2
17734: ARRAY
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 3
17743: PPUSH
17744: CALL_OW 1
17748: ST_TO_ADDR
// tmp := 1 ;
17749: LD_ADDR_VAR 0 2
17753: PUSH
17754: LD_STRING 1
17756: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17757: LD_ADDR_VAR 0 4
17761: PUSH
17762: LD_VAR 0 4
17766: PUSH
17767: LD_VAR 0 2
17771: STR
17772: ST_TO_ADDR
// end ;
17773: GO 17669
17775: POP
17776: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17777: LD_STRING getStreamItemsFromMission("
17779: PUSH
17780: LD_VAR 0 3
17784: STR
17785: PUSH
17786: LD_STRING ","
17788: STR
17789: PUSH
17790: LD_VAR 0 4
17794: STR
17795: PUSH
17796: LD_STRING ")
17798: STR
17799: PPUSH
17800: CALL_OW 559
// end else
17804: GO 17813
// ToLua ( getStreamItemsFromMission("","") ) ;
17806: LD_STRING getStreamItemsFromMission("","")
17808: PPUSH
17809: CALL_OW 559
// end ;
17813: LD_VAR 0 1
17817: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17818: LD_EXP 42
17822: PUSH
17823: LD_EXP 47
17827: AND
17828: IFFALSE 17952
17830: GO 17832
17832: DISABLE
17833: LD_INT 0
17835: PPUSH
17836: PPUSH
// begin enable ;
17837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 34
17860: PUSH
17861: LD_INT 7
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 34
17870: PUSH
17871: LD_INT 45
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 34
17880: PUSH
17881: LD_INT 28
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 34
17890: PUSH
17891: LD_INT 47
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 17952
// for i in tmp do
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_VAR 0 2
17932: PUSH
17933: FOR_IN
17934: IFFALSE 17950
// begin SetLives ( i , 0 ) ;
17936: LD_VAR 0 1
17940: PPUSH
17941: LD_INT 0
17943: PPUSH
17944: CALL_OW 234
// end ;
17948: GO 17933
17950: POP
17951: POP
// end ;
17952: PPOPN 2
17954: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17955: LD_EXP 42
17959: PUSH
17960: LD_EXP 48
17964: AND
17965: IFFALSE 18049
17967: GO 17969
17969: DISABLE
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
// begin enable ;
17974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17975: LD_ADDR_VAR 0 2
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_OWVAR 2
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 32
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 69
18010: ST_TO_ADDR
// if not tmp then
18011: LD_VAR 0 2
18015: NOT
18016: IFFALSE 18020
// exit ;
18018: GO 18049
// for i in tmp do
18020: LD_ADDR_VAR 0 1
18024: PUSH
18025: LD_VAR 0 2
18029: PUSH
18030: FOR_IN
18031: IFFALSE 18047
// begin SetLives ( i , 0 ) ;
18033: LD_VAR 0 1
18037: PPUSH
18038: LD_INT 0
18040: PPUSH
18041: CALL_OW 234
// end ;
18045: GO 18030
18047: POP
18048: POP
// end ;
18049: PPOPN 2
18051: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18052: LD_EXP 42
18056: PUSH
18057: LD_EXP 45
18061: AND
18062: IFFALSE 18155
18064: GO 18066
18066: DISABLE
18067: LD_INT 0
18069: PPUSH
// begin enable ;
18070: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18071: LD_ADDR_VAR 0 1
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_OWVAR 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 25
18093: PUSH
18094: LD_INT 5
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 25
18103: PUSH
18104: LD_INT 9
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 25
18113: PUSH
18114: LD_INT 8
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: PUSH
18136: FOR_IN
18137: IFFALSE 18153
// begin SetClass ( i , 1 ) ;
18139: LD_VAR 0 1
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: CALL_OW 336
// end ;
18151: GO 18136
18153: POP
18154: POP
// end ;
18155: PPOPN 1
18157: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18158: LD_EXP 42
18162: PUSH
18163: LD_EXP 46
18167: AND
18168: PUSH
18169: LD_OWVAR 65
18173: PUSH
18174: LD_INT 7
18176: LESS
18177: AND
18178: IFFALSE 18192
18180: GO 18182
18182: DISABLE
// begin enable ;
18183: ENABLE
// game_speed := 7 ;
18184: LD_ADDR_OWVAR 65
18188: PUSH
18189: LD_INT 7
18191: ST_TO_ADDR
// end ;
18192: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18193: LD_EXP 42
18197: PUSH
18198: LD_EXP 49
18202: AND
18203: IFFALSE 18405
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18213: LD_ADDR_VAR 0 3
18217: PUSH
18218: LD_INT 81
18220: PUSH
18221: LD_OWVAR 2
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 21
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: ST_TO_ADDR
// if not tmp then
18249: LD_VAR 0 3
18253: NOT
18254: IFFALSE 18258
// exit ;
18256: GO 18405
// if tmp > 5 then
18258: LD_VAR 0 3
18262: PUSH
18263: LD_INT 5
18265: GREATER
18266: IFFALSE 18278
// k := 5 else
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_INT 5
18275: ST_TO_ADDR
18276: GO 18288
// k := tmp ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_VAR 0 3
18287: ST_TO_ADDR
// for i := 1 to k do
18288: LD_ADDR_VAR 0 1
18292: PUSH
18293: DOUBLE
18294: LD_INT 1
18296: DEC
18297: ST_TO_ADDR
18298: LD_VAR 0 2
18302: PUSH
18303: FOR_TO
18304: IFFALSE 18403
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18306: LD_VAR 0 3
18310: PUSH
18311: LD_VAR 0 1
18315: ARRAY
18316: PPUSH
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 4
18324: MOD
18325: PUSH
18326: LD_INT 1
18328: PLUS
18329: PPUSH
18330: CALL_OW 259
18334: PUSH
18335: LD_INT 10
18337: LESS
18338: IFFALSE 18401
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18340: LD_VAR 0 3
18344: PUSH
18345: LD_VAR 0 1
18349: ARRAY
18350: PPUSH
18351: LD_VAR 0 1
18355: PUSH
18356: LD_INT 4
18358: MOD
18359: PUSH
18360: LD_INT 1
18362: PLUS
18363: PPUSH
18364: LD_VAR 0 3
18368: PUSH
18369: LD_VAR 0 1
18373: ARRAY
18374: PPUSH
18375: LD_VAR 0 1
18379: PUSH
18380: LD_INT 4
18382: MOD
18383: PUSH
18384: LD_INT 1
18386: PLUS
18387: PPUSH
18388: CALL_OW 259
18392: PUSH
18393: LD_INT 1
18395: PLUS
18396: PPUSH
18397: CALL_OW 237
18401: GO 18303
18403: POP
18404: POP
// end ;
18405: PPOPN 3
18407: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18408: LD_EXP 42
18412: PUSH
18413: LD_EXP 50
18417: AND
18418: IFFALSE 18438
18420: GO 18422
18422: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18423: LD_INT 4
18425: PPUSH
18426: LD_OWVAR 2
18430: PPUSH
18431: LD_INT 0
18433: PPUSH
18434: CALL_OW 324
18438: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18439: LD_EXP 42
18443: PUSH
18444: LD_EXP 79
18448: AND
18449: IFFALSE 18469
18451: GO 18453
18453: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18454: LD_INT 19
18456: PPUSH
18457: LD_OWVAR 2
18461: PPUSH
18462: LD_INT 0
18464: PPUSH
18465: CALL_OW 324
18469: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18470: LD_EXP 42
18474: PUSH
18475: LD_EXP 51
18479: AND
18480: IFFALSE 18582
18482: GO 18484
18484: DISABLE
18485: LD_INT 0
18487: PPUSH
18488: PPUSH
// begin enable ;
18489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18490: LD_ADDR_VAR 0 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_OWVAR 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 34
18512: PUSH
18513: LD_INT 11
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 34
18522: PUSH
18523: LD_INT 30
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 69
18543: ST_TO_ADDR
// if not tmp then
18544: LD_VAR 0 2
18548: NOT
18549: IFFALSE 18553
// exit ;
18551: GO 18582
// for i in tmp do
18553: LD_ADDR_VAR 0 1
18557: PUSH
18558: LD_VAR 0 2
18562: PUSH
18563: FOR_IN
18564: IFFALSE 18580
// begin SetLives ( i , 0 ) ;
18566: LD_VAR 0 1
18570: PPUSH
18571: LD_INT 0
18573: PPUSH
18574: CALL_OW 234
// end ;
18578: GO 18563
18580: POP
18581: POP
// end ;
18582: PPOPN 2
18584: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18585: LD_EXP 42
18589: PUSH
18590: LD_EXP 52
18594: AND
18595: IFFALSE 18615
18597: GO 18599
18599: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18600: LD_INT 32
18602: PPUSH
18603: LD_OWVAR 2
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: CALL_OW 324
18615: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18616: LD_EXP 42
18620: PUSH
18621: LD_EXP 53
18625: AND
18626: IFFALSE 18807
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 33
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 69
18671: ST_TO_ADDR
// if not tmp then
18672: LD_VAR 0 2
18676: NOT
18677: IFFALSE 18681
// exit ;
18679: GO 18807
// side := 0 ;
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_INT 0
18688: ST_TO_ADDR
// for i := 1 to 8 do
18689: LD_ADDR_VAR 0 1
18693: PUSH
18694: DOUBLE
18695: LD_INT 1
18697: DEC
18698: ST_TO_ADDR
18699: LD_INT 8
18701: PUSH
18702: FOR_TO
18703: IFFALSE 18751
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18705: LD_OWVAR 2
18709: PUSH
18710: LD_VAR 0 1
18714: NONEQUAL
18715: PUSH
18716: LD_OWVAR 2
18720: PPUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 81
18730: PUSH
18731: LD_INT 2
18733: EQUAL
18734: AND
18735: IFFALSE 18749
// begin side := i ;
18737: LD_ADDR_VAR 0 3
18741: PUSH
18742: LD_VAR 0 1
18746: ST_TO_ADDR
// break ;
18747: GO 18751
// end ;
18749: GO 18702
18751: POP
18752: POP
// if not side then
18753: LD_VAR 0 3
18757: NOT
18758: IFFALSE 18762
// exit ;
18760: GO 18807
// for i := 1 to tmp do
18762: LD_ADDR_VAR 0 1
18766: PUSH
18767: DOUBLE
18768: LD_INT 1
18770: DEC
18771: ST_TO_ADDR
18772: LD_VAR 0 2
18776: PUSH
18777: FOR_TO
18778: IFFALSE 18805
// if Prob ( 60 ) then
18780: LD_INT 60
18782: PPUSH
18783: CALL_OW 13
18787: IFFALSE 18803
// SetSide ( i , side ) ;
18789: LD_VAR 0 1
18793: PPUSH
18794: LD_VAR 0 3
18798: PPUSH
18799: CALL_OW 235
18803: GO 18777
18805: POP
18806: POP
// end ;
18807: PPOPN 3
18809: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18810: LD_EXP 42
18814: PUSH
18815: LD_EXP 55
18819: AND
18820: IFFALSE 18939
18822: GO 18824
18824: DISABLE
18825: LD_INT 0
18827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18828: LD_ADDR_VAR 0 1
18832: PUSH
18833: LD_INT 22
18835: PUSH
18836: LD_OWVAR 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 21
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: LD_INT 23
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: PPUSH
18877: CALL_OW 69
18881: PUSH
18882: FOR_IN
18883: IFFALSE 18937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 257
18894: PUSH
18895: LD_INT 1
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: LD_INT 3
18903: PUSH
18904: LD_INT 4
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: IN
18913: IFFALSE 18935
// SetClass ( un , rand ( 1 , 4 ) ) ;
18915: LD_VAR 0 1
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: LD_INT 4
18925: PPUSH
18926: CALL_OW 12
18930: PPUSH
18931: CALL_OW 336
18935: GO 18882
18937: POP
18938: POP
// end ;
18939: PPOPN 1
18941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18942: LD_EXP 42
18946: PUSH
18947: LD_EXP 54
18951: AND
18952: IFFALSE 19031
18954: GO 18956
18956: DISABLE
18957: LD_INT 0
18959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18960: LD_ADDR_VAR 0 1
18964: PUSH
18965: LD_INT 22
18967: PUSH
18968: LD_OWVAR 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 21
18979: PUSH
18980: LD_INT 3
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: ST_TO_ADDR
// if not tmp then
18996: LD_VAR 0 1
19000: NOT
19001: IFFALSE 19005
// exit ;
19003: GO 19031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL_OW 12
19022: ARRAY
19023: PPUSH
19024: LD_INT 100
19026: PPUSH
19027: CALL_OW 234
// end ;
19031: PPOPN 1
19033: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19034: LD_EXP 42
19038: PUSH
19039: LD_EXP 56
19043: AND
19044: IFFALSE 19142
19046: GO 19048
19048: DISABLE
19049: LD_INT 0
19051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_INT 22
19059: PUSH
19060: LD_OWVAR 2
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 21
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PPUSH
19083: CALL_OW 69
19087: ST_TO_ADDR
// if not tmp then
19088: LD_VAR 0 1
19092: NOT
19093: IFFALSE 19097
// exit ;
19095: GO 19142
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19097: LD_VAR 0 1
19101: PUSH
19102: LD_INT 1
19104: PPUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 12
19114: ARRAY
19115: PPUSH
19116: LD_INT 1
19118: PPUSH
19119: LD_INT 4
19121: PPUSH
19122: CALL_OW 12
19126: PPUSH
19127: LD_INT 3000
19129: PPUSH
19130: LD_INT 9000
19132: PPUSH
19133: CALL_OW 12
19137: PPUSH
19138: CALL_OW 492
// end ;
19142: PPOPN 1
19144: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19145: LD_EXP 42
19149: PUSH
19150: LD_EXP 57
19154: AND
19155: IFFALSE 19175
19157: GO 19159
19159: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19160: LD_INT 1
19162: PPUSH
19163: LD_OWVAR 2
19167: PPUSH
19168: LD_INT 0
19170: PPUSH
19171: CALL_OW 324
19175: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19176: LD_EXP 42
19180: PUSH
19181: LD_EXP 58
19185: AND
19186: IFFALSE 19269
19188: GO 19190
19190: DISABLE
19191: LD_INT 0
19193: PPUSH
19194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19195: LD_ADDR_VAR 0 2
19199: PUSH
19200: LD_INT 22
19202: PUSH
19203: LD_OWVAR 2
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 21
19214: PUSH
19215: LD_INT 3
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PPUSH
19226: CALL_OW 69
19230: ST_TO_ADDR
// if not tmp then
19231: LD_VAR 0 2
19235: NOT
19236: IFFALSE 19240
// exit ;
19238: GO 19269
// for i in tmp do
19240: LD_ADDR_VAR 0 1
19244: PUSH
19245: LD_VAR 0 2
19249: PUSH
19250: FOR_IN
19251: IFFALSE 19267
// SetBLevel ( i , 10 ) ;
19253: LD_VAR 0 1
19257: PPUSH
19258: LD_INT 10
19260: PPUSH
19261: CALL_OW 241
19265: GO 19250
19267: POP
19268: POP
// end ;
19269: PPOPN 2
19271: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19272: LD_EXP 42
19276: PUSH
19277: LD_EXP 59
19281: AND
19282: IFFALSE 19393
19284: GO 19286
19286: DISABLE
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
19291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_OWVAR 2
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 25
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PPUSH
19323: CALL_OW 69
19327: ST_TO_ADDR
// if not tmp then
19328: LD_VAR 0 3
19332: NOT
19333: IFFALSE 19337
// exit ;
19335: GO 19393
// un := tmp [ rand ( 1 , tmp ) ] ;
19337: LD_ADDR_VAR 0 2
19341: PUSH
19342: LD_VAR 0 3
19346: PUSH
19347: LD_INT 1
19349: PPUSH
19350: LD_VAR 0 3
19354: PPUSH
19355: CALL_OW 12
19359: ARRAY
19360: ST_TO_ADDR
// if Crawls ( un ) then
19361: LD_VAR 0 2
19365: PPUSH
19366: CALL_OW 318
19370: IFFALSE 19381
// ComWalk ( un ) ;
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19381: LD_VAR 0 2
19385: PPUSH
19386: LD_INT 5
19388: PPUSH
19389: CALL_OW 336
// end ;
19393: PPOPN 3
19395: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19396: LD_EXP 42
19400: PUSH
19401: LD_EXP 60
19405: AND
19406: PUSH
19407: LD_OWVAR 67
19411: PUSH
19412: LD_INT 3
19414: LESS
19415: AND
19416: IFFALSE 19435
19418: GO 19420
19420: DISABLE
// Difficulty := Difficulty + 1 ;
19421: LD_ADDR_OWVAR 67
19425: PUSH
19426: LD_OWVAR 67
19430: PUSH
19431: LD_INT 1
19433: PLUS
19434: ST_TO_ADDR
19435: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19436: LD_EXP 42
19440: PUSH
19441: LD_EXP 61
19445: AND
19446: IFFALSE 19549
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
// begin for i := 1 to 5 do
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: DOUBLE
19460: LD_INT 1
19462: DEC
19463: ST_TO_ADDR
19464: LD_INT 5
19466: PUSH
19467: FOR_TO
19468: IFFALSE 19547
// begin uc_nation := nation_nature ;
19470: LD_ADDR_OWVAR 21
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// uc_side := 0 ;
19478: LD_ADDR_OWVAR 20
19482: PUSH
19483: LD_INT 0
19485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19486: LD_ADDR_OWVAR 29
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 12
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: ST_TO_ADDR
// hc_agressivity := 20 ;
19501: LD_ADDR_OWVAR 35
19505: PUSH
19506: LD_INT 20
19508: ST_TO_ADDR
// hc_class := class_tiger ;
19509: LD_ADDR_OWVAR 28
19513: PUSH
19514: LD_INT 14
19516: ST_TO_ADDR
// hc_gallery :=  ;
19517: LD_ADDR_OWVAR 33
19521: PUSH
19522: LD_STRING 
19524: ST_TO_ADDR
// hc_name :=  ;
19525: LD_ADDR_OWVAR 26
19529: PUSH
19530: LD_STRING 
19532: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19533: CALL_OW 44
19537: PPUSH
19538: LD_INT 0
19540: PPUSH
19541: CALL_OW 51
// end ;
19545: GO 19467
19547: POP
19548: POP
// end ;
19549: PPOPN 1
19551: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19552: LD_EXP 42
19556: PUSH
19557: LD_EXP 62
19561: AND
19562: IFFALSE 19571
19564: GO 19566
19566: DISABLE
// StreamSibBomb ;
19567: CALL 19572 0 0
19571: END
// export function StreamSibBomb ; var i , x , y ; begin
19572: LD_INT 0
19574: PPUSH
19575: PPUSH
19576: PPUSH
19577: PPUSH
// result := false ;
19578: LD_ADDR_VAR 0 1
19582: PUSH
19583: LD_INT 0
19585: ST_TO_ADDR
// for i := 1 to 16 do
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: DOUBLE
19592: LD_INT 1
19594: DEC
19595: ST_TO_ADDR
19596: LD_INT 16
19598: PUSH
19599: FOR_TO
19600: IFFALSE 19799
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19602: LD_ADDR_VAR 0 3
19606: PUSH
19607: LD_INT 10
19609: PUSH
19610: LD_INT 20
19612: PUSH
19613: LD_INT 30
19615: PUSH
19616: LD_INT 40
19618: PUSH
19619: LD_INT 50
19621: PUSH
19622: LD_INT 60
19624: PUSH
19625: LD_INT 70
19627: PUSH
19628: LD_INT 80
19630: PUSH
19631: LD_INT 90
19633: PUSH
19634: LD_INT 100
19636: PUSH
19637: LD_INT 110
19639: PUSH
19640: LD_INT 120
19642: PUSH
19643: LD_INT 130
19645: PUSH
19646: LD_INT 140
19648: PUSH
19649: LD_INT 150
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: PPUSH
19672: LD_INT 15
19674: PPUSH
19675: CALL_OW 12
19679: ARRAY
19680: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19681: LD_ADDR_VAR 0 4
19685: PUSH
19686: LD_INT 10
19688: PUSH
19689: LD_INT 20
19691: PUSH
19692: LD_INT 30
19694: PUSH
19695: LD_INT 40
19697: PUSH
19698: LD_INT 50
19700: PUSH
19701: LD_INT 60
19703: PUSH
19704: LD_INT 70
19706: PUSH
19707: LD_INT 80
19709: PUSH
19710: LD_INT 90
19712: PUSH
19713: LD_INT 100
19715: PUSH
19716: LD_INT 110
19718: PUSH
19719: LD_INT 120
19721: PUSH
19722: LD_INT 130
19724: PUSH
19725: LD_INT 140
19727: PUSH
19728: LD_INT 150
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: PPUSH
19751: LD_INT 15
19753: PPUSH
19754: CALL_OW 12
19758: ARRAY
19759: ST_TO_ADDR
// if ValidHex ( x , y ) then
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_VAR 0 4
19769: PPUSH
19770: CALL_OW 488
19774: IFFALSE 19797
// begin result := [ x , y ] ;
19776: LD_ADDR_VAR 0 1
19780: PUSH
19781: LD_VAR 0 3
19785: PUSH
19786: LD_VAR 0 4
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// break ;
19795: GO 19799
// end ; end ;
19797: GO 19599
19799: POP
19800: POP
// if result then
19801: LD_VAR 0 1
19805: IFFALSE 19865
// begin ToLua ( playSibBomb() ) ;
19807: LD_STRING playSibBomb()
19809: PPUSH
19810: CALL_OW 559
// wait ( 0 0$14 ) ;
19814: LD_INT 490
19816: PPUSH
19817: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19821: LD_VAR 0 1
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PPUSH
19830: LD_VAR 0 1
19834: PUSH
19835: LD_INT 2
19837: ARRAY
19838: PPUSH
19839: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19843: LD_VAR 0 1
19847: PUSH
19848: LD_INT 1
19850: ARRAY
19851: PPUSH
19852: LD_VAR 0 1
19856: PUSH
19857: LD_INT 2
19859: ARRAY
19860: PPUSH
19861: CALL_OW 429
// end ; end ;
19865: LD_VAR 0 1
19869: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19870: LD_EXP 42
19874: PUSH
19875: LD_EXP 64
19879: AND
19880: IFFALSE 19892
19882: GO 19884
19884: DISABLE
// YouLost (  ) ;
19885: LD_STRING 
19887: PPUSH
19888: CALL_OW 104
19892: END
// every 0 0$1 trigger StreamModeActive and sFog do
19893: LD_EXP 42
19897: PUSH
19898: LD_EXP 63
19902: AND
19903: IFFALSE 19917
19905: GO 19907
19907: DISABLE
// FogOff ( your_side ) ;
19908: LD_OWVAR 2
19912: PPUSH
19913: CALL_OW 344
19917: END
// every 0 0$1 trigger StreamModeActive and sSun do
19918: LD_EXP 42
19922: PUSH
19923: LD_EXP 65
19927: AND
19928: IFFALSE 19956
19930: GO 19932
19932: DISABLE
// begin solar_recharge_percent := 0 ;
19933: LD_ADDR_OWVAR 79
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19941: LD_INT 10500
19943: PPUSH
19944: CALL_OW 67
// solar_recharge_percent := 100 ;
19948: LD_ADDR_OWVAR 79
19952: PUSH
19953: LD_INT 100
19955: ST_TO_ADDR
// end ;
19956: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19957: LD_EXP 42
19961: PUSH
19962: LD_EXP 66
19966: AND
19967: IFFALSE 20206
19969: GO 19971
19971: DISABLE
19972: LD_INT 0
19974: PPUSH
19975: PPUSH
19976: PPUSH
// begin tmp := [ ] ;
19977: LD_ADDR_VAR 0 3
19981: PUSH
19982: EMPTY
19983: ST_TO_ADDR
// for i := 1 to 6 do
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: DOUBLE
19990: LD_INT 1
19992: DEC
19993: ST_TO_ADDR
19994: LD_INT 6
19996: PUSH
19997: FOR_TO
19998: IFFALSE 20103
// begin uc_nation := nation_nature ;
20000: LD_ADDR_OWVAR 21
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// uc_side := 0 ;
20008: LD_ADDR_OWVAR 20
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20016: LD_ADDR_OWVAR 29
20020: PUSH
20021: LD_INT 12
20023: PUSH
20024: LD_INT 12
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: ST_TO_ADDR
// hc_agressivity := 20 ;
20031: LD_ADDR_OWVAR 35
20035: PUSH
20036: LD_INT 20
20038: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20039: LD_ADDR_OWVAR 28
20043: PUSH
20044: LD_INT 17
20046: ST_TO_ADDR
// hc_gallery :=  ;
20047: LD_ADDR_OWVAR 33
20051: PUSH
20052: LD_STRING 
20054: ST_TO_ADDR
// hc_name :=  ;
20055: LD_ADDR_OWVAR 26
20059: PUSH
20060: LD_STRING 
20062: ST_TO_ADDR
// un := CreateHuman ;
20063: LD_ADDR_VAR 0 2
20067: PUSH
20068: CALL_OW 44
20072: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: CALL_OW 51
// tmp := tmp ^ un ;
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_VAR 0 3
20094: PUSH
20095: LD_VAR 0 2
20099: ADD
20100: ST_TO_ADDR
// end ;
20101: GO 19997
20103: POP
20104: POP
// repeat wait ( 0 0$1 ) ;
20105: LD_INT 35
20107: PPUSH
20108: CALL_OW 67
// for un in tmp do
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: FOR_IN
20123: IFFALSE 20197
// begin if IsDead ( un ) then
20125: LD_VAR 0 2
20129: PPUSH
20130: CALL_OW 301
20134: IFFALSE 20154
// begin tmp := tmp diff un ;
20136: LD_ADDR_VAR 0 3
20140: PUSH
20141: LD_VAR 0 3
20145: PUSH
20146: LD_VAR 0 2
20150: DIFF
20151: ST_TO_ADDR
// continue ;
20152: GO 20122
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20154: LD_VAR 0 2
20158: PPUSH
20159: LD_INT 3
20161: PUSH
20162: LD_INT 22
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: CALL_OW 69
20180: PPUSH
20181: LD_VAR 0 2
20185: PPUSH
20186: CALL_OW 74
20190: PPUSH
20191: CALL_OW 115
// end ;
20195: GO 20122
20197: POP
20198: POP
// until not tmp ;
20199: LD_VAR 0 3
20203: NOT
20204: IFFALSE 20105
// end ;
20206: PPOPN 3
20208: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20209: LD_EXP 42
20213: PUSH
20214: LD_EXP 67
20218: AND
20219: IFFALSE 20273
20221: GO 20223
20223: DISABLE
// begin ToLua ( displayTroll(); ) ;
20224: LD_STRING displayTroll();
20226: PPUSH
20227: CALL_OW 559
// wait ( 3 3$00 ) ;
20231: LD_INT 6300
20233: PPUSH
20234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20238: LD_STRING hideTroll();
20240: PPUSH
20241: CALL_OW 559
// wait ( 1 1$00 ) ;
20245: LD_INT 2100
20247: PPUSH
20248: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20252: LD_STRING displayTroll();
20254: PPUSH
20255: CALL_OW 559
// wait ( 1 1$00 ) ;
20259: LD_INT 2100
20261: PPUSH
20262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20266: LD_STRING hideTroll();
20268: PPUSH
20269: CALL_OW 559
// end ;
20273: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20274: LD_EXP 42
20278: PUSH
20279: LD_EXP 68
20283: AND
20284: IFFALSE 20347
20286: GO 20288
20288: DISABLE
20289: LD_INT 0
20291: PPUSH
// begin p := 0 ;
20292: LD_ADDR_VAR 0 1
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// repeat game_speed := 1 ;
20300: LD_ADDR_OWVAR 65
20304: PUSH
20305: LD_INT 1
20307: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20308: LD_INT 35
20310: PPUSH
20311: CALL_OW 67
// p := p + 1 ;
20315: LD_ADDR_VAR 0 1
20319: PUSH
20320: LD_VAR 0 1
20324: PUSH
20325: LD_INT 1
20327: PLUS
20328: ST_TO_ADDR
// until p >= 60 ;
20329: LD_VAR 0 1
20333: PUSH
20334: LD_INT 60
20336: GREATEREQUAL
20337: IFFALSE 20300
// game_speed := 4 ;
20339: LD_ADDR_OWVAR 65
20343: PUSH
20344: LD_INT 4
20346: ST_TO_ADDR
// end ;
20347: PPOPN 1
20349: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20350: LD_EXP 42
20354: PUSH
20355: LD_EXP 69
20359: AND
20360: IFFALSE 20506
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20369: LD_ADDR_VAR 0 1
20373: PUSH
20374: LD_INT 22
20376: PUSH
20377: LD_OWVAR 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 30
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 30
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PPUSH
20418: CALL_OW 69
20422: ST_TO_ADDR
// if not depot then
20423: LD_VAR 0 1
20427: NOT
20428: IFFALSE 20432
// exit ;
20430: GO 20506
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: LD_VAR 0 1
20441: PUSH
20442: LD_INT 1
20444: PPUSH
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 12
20454: ARRAY
20455: PPUSH
20456: CALL_OW 274
20460: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20461: LD_VAR 0 2
20465: PPUSH
20466: LD_INT 1
20468: PPUSH
20469: LD_INT 0
20471: PPUSH
20472: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_INT 2
20483: PPUSH
20484: LD_INT 0
20486: PPUSH
20487: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_INT 3
20498: PPUSH
20499: LD_INT 0
20501: PPUSH
20502: CALL_OW 277
// end ;
20506: PPOPN 2
20508: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20509: LD_EXP 42
20513: PUSH
20514: LD_EXP 70
20518: AND
20519: IFFALSE 20616
20521: GO 20523
20523: DISABLE
20524: LD_INT 0
20526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20527: LD_ADDR_VAR 0 1
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_OWVAR 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 21
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 3
20556: PUSH
20557: LD_INT 23
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: PPUSH
20576: CALL_OW 69
20580: ST_TO_ADDR
// if not tmp then
20581: LD_VAR 0 1
20585: NOT
20586: IFFALSE 20590
// exit ;
20588: GO 20616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20590: LD_VAR 0 1
20594: PUSH
20595: LD_INT 1
20597: PPUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: CALL_OW 12
20607: ARRAY
20608: PPUSH
20609: LD_INT 200
20611: PPUSH
20612: CALL_OW 234
// end ;
20616: PPOPN 1
20618: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20619: LD_EXP 42
20623: PUSH
20624: LD_EXP 71
20628: AND
20629: IFFALSE 20708
20631: GO 20633
20633: DISABLE
20634: LD_INT 0
20636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20637: LD_ADDR_VAR 0 1
20641: PUSH
20642: LD_INT 22
20644: PUSH
20645: LD_OWVAR 2
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 21
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PPUSH
20668: CALL_OW 69
20672: ST_TO_ADDR
// if not tmp then
20673: LD_VAR 0 1
20677: NOT
20678: IFFALSE 20682
// exit ;
20680: GO 20708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20682: LD_VAR 0 1
20686: PUSH
20687: LD_INT 1
20689: PPUSH
20690: LD_VAR 0 1
20694: PPUSH
20695: CALL_OW 12
20699: ARRAY
20700: PPUSH
20701: LD_INT 60
20703: PPUSH
20704: CALL_OW 234
// end ;
20708: PPOPN 1
20710: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20711: LD_EXP 42
20715: PUSH
20716: LD_EXP 72
20720: AND
20721: IFFALSE 20820
20723: GO 20725
20725: DISABLE
20726: LD_INT 0
20728: PPUSH
20729: PPUSH
// begin enable ;
20730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20731: LD_ADDR_VAR 0 1
20735: PUSH
20736: LD_INT 22
20738: PUSH
20739: LD_OWVAR 2
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 61
20750: PUSH
20751: EMPTY
20752: LIST
20753: PUSH
20754: LD_INT 33
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 1
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20820
// for i in tmp do
20783: LD_ADDR_VAR 0 2
20787: PUSH
20788: LD_VAR 0 1
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20818
// if IsControledBy ( i ) then
20796: LD_VAR 0 2
20800: PPUSH
20801: CALL_OW 312
20805: IFFALSE 20816
// ComUnlink ( i ) ;
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 136
20816: GO 20793
20818: POP
20819: POP
// end ;
20820: PPOPN 2
20822: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20823: LD_EXP 42
20827: PUSH
20828: LD_EXP 73
20832: AND
20833: IFFALSE 20973
20835: GO 20837
20837: DISABLE
20838: LD_INT 0
20840: PPUSH
20841: PPUSH
// begin ToLua ( displayPowell(); ) ;
20842: LD_STRING displayPowell();
20844: PPUSH
20845: CALL_OW 559
// uc_side := 0 ;
20849: LD_ADDR_OWVAR 20
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// uc_nation := 2 ;
20857: LD_ADDR_OWVAR 21
20861: PUSH
20862: LD_INT 2
20864: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20865: LD_ADDR_OWVAR 37
20869: PUSH
20870: LD_INT 14
20872: ST_TO_ADDR
// vc_engine := engine_siberite ;
20873: LD_ADDR_OWVAR 39
20877: PUSH
20878: LD_INT 3
20880: ST_TO_ADDR
// vc_control := control_apeman ;
20881: LD_ADDR_OWVAR 38
20885: PUSH
20886: LD_INT 5
20888: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20889: LD_ADDR_OWVAR 40
20893: PUSH
20894: LD_INT 29
20896: ST_TO_ADDR
// un := CreateVehicle ;
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: CALL_OW 45
20906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20907: LD_VAR 0 2
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20919: LD_INT 35
20921: PPUSH
20922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_INT 22
20933: PUSH
20934: LD_OWVAR 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: PPUSH
20948: LD_VAR 0 2
20952: PPUSH
20953: CALL_OW 74
20957: PPUSH
20958: CALL_OW 115
// until IsDead ( un ) ;
20962: LD_VAR 0 2
20966: PPUSH
20967: CALL_OW 301
20971: IFFALSE 20919
// end ;
20973: PPOPN 2
20975: END
// every 0 0$1 trigger StreamModeActive and sStu do
20976: LD_EXP 42
20980: PUSH
20981: LD_EXP 81
20985: AND
20986: IFFALSE 21002
20988: GO 20990
20990: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20991: LD_STRING displayStucuk();
20993: PPUSH
20994: CALL_OW 559
// ResetFog ;
20998: CALL_OW 335
// end ;
21002: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21003: LD_EXP 42
21007: PUSH
21008: LD_EXP 74
21012: AND
21013: IFFALSE 21154
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21022: LD_ADDR_VAR 0 2
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_OWVAR 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 21
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL_OW 69
21057: ST_TO_ADDR
// if not tmp then
21058: LD_VAR 0 2
21062: NOT
21063: IFFALSE 21067
// exit ;
21065: GO 21154
// un := tmp [ rand ( 1 , tmp ) ] ;
21067: LD_ADDR_VAR 0 1
21071: PUSH
21072: LD_VAR 0 2
21076: PUSH
21077: LD_INT 1
21079: PPUSH
21080: LD_VAR 0 2
21084: PPUSH
21085: CALL_OW 12
21089: ARRAY
21090: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_INT 0
21098: PPUSH
21099: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21103: LD_VAR 0 1
21107: PPUSH
21108: LD_OWVAR 3
21112: PUSH
21113: LD_VAR 0 1
21117: DIFF
21118: PPUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 74
21128: PPUSH
21129: CALL_OW 115
// wait ( 0 0$20 ) ;
21133: LD_INT 700
21135: PPUSH
21136: CALL_OW 67
// SetSide ( un , your_side ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_OWVAR 2
21149: PPUSH
21150: CALL_OW 235
// end ;
21154: PPOPN 2
21156: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21157: LD_EXP 42
21161: PUSH
21162: LD_EXP 75
21166: AND
21167: IFFALSE 21273
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21175: LD_ADDR_VAR 0 1
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_OWVAR 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 30
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 30
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 69
21228: ST_TO_ADDR
// if not depot then
21229: LD_VAR 0 1
21233: NOT
21234: IFFALSE 21238
// exit ;
21236: GO 21273
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21238: LD_VAR 0 1
21242: PUSH
21243: LD_INT 1
21245: ARRAY
21246: PPUSH
21247: CALL_OW 250
21251: PPUSH
21252: LD_VAR 0 1
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PPUSH
21261: CALL_OW 251
21265: PPUSH
21266: LD_INT 70
21268: PPUSH
21269: CALL_OW 495
// end ;
21273: PPOPN 1
21275: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21276: LD_EXP 42
21280: PUSH
21281: LD_EXP 76
21285: AND
21286: IFFALSE 21497
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21298: LD_ADDR_VAR 0 5
21302: PUSH
21303: LD_INT 22
21305: PUSH
21306: LD_OWVAR 2
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 21
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PPUSH
21329: CALL_OW 69
21333: ST_TO_ADDR
// if not tmp then
21334: LD_VAR 0 5
21338: NOT
21339: IFFALSE 21343
// exit ;
21341: GO 21497
// for i in tmp do
21343: LD_ADDR_VAR 0 1
21347: PUSH
21348: LD_VAR 0 5
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21495
// begin d := rand ( 0 , 5 ) ;
21356: LD_ADDR_VAR 0 4
21360: PUSH
21361: LD_INT 0
21363: PPUSH
21364: LD_INT 5
21366: PPUSH
21367: CALL_OW 12
21371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21372: LD_ADDR_VAR 0 2
21376: PUSH
21377: LD_VAR 0 1
21381: PPUSH
21382: CALL_OW 250
21386: PPUSH
21387: LD_VAR 0 4
21391: PPUSH
21392: LD_INT 3
21394: PPUSH
21395: LD_INT 12
21397: PPUSH
21398: CALL_OW 12
21402: PPUSH
21403: CALL_OW 272
21407: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21408: LD_ADDR_VAR 0 3
21412: PUSH
21413: LD_VAR 0 1
21417: PPUSH
21418: CALL_OW 251
21422: PPUSH
21423: LD_VAR 0 4
21427: PPUSH
21428: LD_INT 3
21430: PPUSH
21431: LD_INT 12
21433: PPUSH
21434: CALL_OW 12
21438: PPUSH
21439: CALL_OW 273
21443: ST_TO_ADDR
// if ValidHex ( x , y ) then
21444: LD_VAR 0 2
21448: PPUSH
21449: LD_VAR 0 3
21453: PPUSH
21454: CALL_OW 488
21458: IFFALSE 21493
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21460: LD_VAR 0 1
21464: PPUSH
21465: LD_VAR 0 2
21469: PPUSH
21470: LD_VAR 0 3
21474: PPUSH
21475: LD_INT 3
21477: PPUSH
21478: LD_INT 6
21480: PPUSH
21481: CALL_OW 12
21485: PPUSH
21486: LD_INT 1
21488: PPUSH
21489: CALL_OW 483
// end ;
21493: GO 21353
21495: POP
21496: POP
// end ;
21497: PPOPN 5
21499: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21500: LD_EXP 42
21504: PUSH
21505: LD_EXP 77
21509: AND
21510: IFFALSE 21604
21512: GO 21514
21514: DISABLE
21515: LD_INT 0
21517: PPUSH
21518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_OWVAR 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 32
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: ST_TO_ADDR
// if not tmp then
21566: LD_VAR 0 2
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21604
// for i in tmp do
21575: LD_ADDR_VAR 0 1
21579: PUSH
21580: LD_VAR 0 2
21584: PUSH
21585: FOR_IN
21586: IFFALSE 21602
// SetFuel ( i , 0 ) ;
21588: LD_VAR 0 1
21592: PPUSH
21593: LD_INT 0
21595: PPUSH
21596: CALL_OW 240
21600: GO 21585
21602: POP
21603: POP
// end ;
21604: PPOPN 2
21606: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21607: LD_EXP 42
21611: PUSH
21612: LD_EXP 78
21616: AND
21617: IFFALSE 21683
21619: GO 21621
21621: DISABLE
21622: LD_INT 0
21624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21625: LD_ADDR_VAR 0 1
21629: PUSH
21630: LD_INT 22
21632: PUSH
21633: LD_OWVAR 2
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 30
21644: PUSH
21645: LD_INT 29
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PPUSH
21656: CALL_OW 69
21660: ST_TO_ADDR
// if not tmp then
21661: LD_VAR 0 1
21665: NOT
21666: IFFALSE 21670
// exit ;
21668: GO 21683
// DestroyUnit ( tmp [ 1 ] ) ;
21670: LD_VAR 0 1
21674: PUSH
21675: LD_INT 1
21677: ARRAY
21678: PPUSH
21679: CALL_OW 65
// end ;
21683: PPOPN 1
21685: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21686: LD_EXP 42
21690: PUSH
21691: LD_EXP 80
21695: AND
21696: IFFALSE 21825
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
// begin uc_side := 0 ;
21704: LD_ADDR_OWVAR 20
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// uc_nation := nation_arabian ;
21712: LD_ADDR_OWVAR 21
21716: PUSH
21717: LD_INT 2
21719: ST_TO_ADDR
// hc_gallery :=  ;
21720: LD_ADDR_OWVAR 33
21724: PUSH
21725: LD_STRING 
21727: ST_TO_ADDR
// hc_name :=  ;
21728: LD_ADDR_OWVAR 26
21732: PUSH
21733: LD_STRING 
21735: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21736: LD_INT 1
21738: PPUSH
21739: LD_INT 11
21741: PPUSH
21742: LD_INT 10
21744: PPUSH
21745: CALL_OW 380
// un := CreateHuman ;
21749: LD_ADDR_VAR 0 1
21753: PUSH
21754: CALL_OW 44
21758: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21759: LD_VAR 0 1
21763: PPUSH
21764: LD_INT 1
21766: PPUSH
21767: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21771: LD_INT 35
21773: PPUSH
21774: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_INT 22
21785: PUSH
21786: LD_OWVAR 2
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: PPUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 74
21809: PPUSH
21810: CALL_OW 115
// until IsDead ( un ) ;
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 301
21823: IFFALSE 21771
// end ;
21825: PPOPN 1
21827: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21828: LD_EXP 42
21832: PUSH
21833: LD_EXP 82
21837: AND
21838: IFFALSE 21850
21840: GO 21842
21842: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21843: LD_STRING earthquake(getX(game), 0, 32)
21845: PPUSH
21846: CALL_OW 559
21850: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21851: LD_EXP 42
21855: PUSH
21856: LD_EXP 83
21860: AND
21861: IFFALSE 21952
21863: GO 21865
21865: DISABLE
21866: LD_INT 0
21868: PPUSH
// begin enable ;
21869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21870: LD_ADDR_VAR 0 1
21874: PUSH
21875: LD_INT 22
21877: PUSH
21878: LD_OWVAR 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 33
21899: PUSH
21900: LD_INT 3
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: PPUSH
21912: CALL_OW 69
21916: ST_TO_ADDR
// if not tmp then
21917: LD_VAR 0 1
21921: NOT
21922: IFFALSE 21926
// exit ;
21924: GO 21952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21926: LD_VAR 0 1
21930: PUSH
21931: LD_INT 1
21933: PPUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL_OW 12
21943: ARRAY
21944: PPUSH
21945: LD_INT 1
21947: PPUSH
21948: CALL_OW 234
// end ;
21952: PPOPN 1
21954: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21955: LD_EXP 42
21959: PUSH
21960: LD_EXP 84
21964: AND
21965: IFFALSE 22106
21967: GO 21969
21969: DISABLE
21970: LD_INT 0
21972: PPUSH
21973: PPUSH
21974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_OWVAR 2
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 25
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 69
22010: ST_TO_ADDR
// if not tmp then
22011: LD_VAR 0 3
22015: NOT
22016: IFFALSE 22020
// exit ;
22018: GO 22106
// un := tmp [ rand ( 1 , tmp ) ] ;
22020: LD_ADDR_VAR 0 2
22024: PUSH
22025: LD_VAR 0 3
22029: PUSH
22030: LD_INT 1
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 12
22042: ARRAY
22043: ST_TO_ADDR
// if Crawls ( un ) then
22044: LD_VAR 0 2
22048: PPUSH
22049: CALL_OW 318
22053: IFFALSE 22064
// ComWalk ( un ) ;
22055: LD_VAR 0 2
22059: PPUSH
22060: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22064: LD_VAR 0 2
22068: PPUSH
22069: LD_INT 9
22071: PPUSH
22072: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22076: LD_INT 28
22078: PPUSH
22079: LD_OWVAR 2
22083: PPUSH
22084: LD_INT 2
22086: PPUSH
22087: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22091: LD_INT 29
22093: PPUSH
22094: LD_OWVAR 2
22098: PPUSH
22099: LD_INT 2
22101: PPUSH
22102: CALL_OW 322
// end ;
22106: PPOPN 3
22108: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22109: LD_EXP 42
22113: PUSH
22114: LD_EXP 85
22118: AND
22119: IFFALSE 22230
22121: GO 22123
22123: DISABLE
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: LD_INT 22
22136: PUSH
22137: LD_OWVAR 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 25
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: ST_TO_ADDR
// if not tmp then
22165: LD_VAR 0 3
22169: NOT
22170: IFFALSE 22174
// exit ;
22172: GO 22230
// un := tmp [ rand ( 1 , tmp ) ] ;
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: LD_VAR 0 3
22183: PUSH
22184: LD_INT 1
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: CALL_OW 12
22196: ARRAY
22197: ST_TO_ADDR
// if Crawls ( un ) then
22198: LD_VAR 0 2
22202: PPUSH
22203: CALL_OW 318
22207: IFFALSE 22218
// ComWalk ( un ) ;
22209: LD_VAR 0 2
22213: PPUSH
22214: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22218: LD_VAR 0 2
22222: PPUSH
22223: LD_INT 8
22225: PPUSH
22226: CALL_OW 336
// end ;
22230: PPOPN 3
22232: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22233: LD_EXP 42
22237: PUSH
22238: LD_EXP 86
22242: AND
22243: IFFALSE 22387
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22252: LD_ADDR_VAR 0 2
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_OWVAR 2
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 21
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 34
22284: PUSH
22285: LD_INT 12
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 34
22294: PUSH
22295: LD_INT 51
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 34
22304: PUSH
22305: LD_INT 32
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 69
22327: ST_TO_ADDR
// if not tmp then
22328: LD_VAR 0 2
22332: NOT
22333: IFFALSE 22337
// exit ;
22335: GO 22387
// for i in tmp do
22337: LD_ADDR_VAR 0 1
22341: PUSH
22342: LD_VAR 0 2
22346: PUSH
22347: FOR_IN
22348: IFFALSE 22385
// if GetCargo ( i , mat_artifact ) = 0 then
22350: LD_VAR 0 1
22354: PPUSH
22355: LD_INT 4
22357: PPUSH
22358: CALL_OW 289
22362: PUSH
22363: LD_INT 0
22365: EQUAL
22366: IFFALSE 22383
// SetCargo ( i , mat_siberit , 100 ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_INT 3
22375: PPUSH
22376: LD_INT 100
22378: PPUSH
22379: CALL_OW 290
22383: GO 22347
22385: POP
22386: POP
// end ;
22387: PPOPN 2
22389: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22390: LD_EXP 42
22394: PUSH
22395: LD_EXP 87
22399: AND
22400: IFFALSE 22583
22402: GO 22404
22404: DISABLE
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22409: LD_ADDR_VAR 0 2
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_OWVAR 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 69
22430: ST_TO_ADDR
// if not tmp then
22431: LD_VAR 0 2
22435: NOT
22436: IFFALSE 22440
// exit ;
22438: GO 22583
// for i := 1 to 2 do
22440: LD_ADDR_VAR 0 1
22444: PUSH
22445: DOUBLE
22446: LD_INT 1
22448: DEC
22449: ST_TO_ADDR
22450: LD_INT 2
22452: PUSH
22453: FOR_TO
22454: IFFALSE 22581
// begin uc_side := your_side ;
22456: LD_ADDR_OWVAR 20
22460: PUSH
22461: LD_OWVAR 2
22465: ST_TO_ADDR
// uc_nation := nation_american ;
22466: LD_ADDR_OWVAR 21
22470: PUSH
22471: LD_INT 1
22473: ST_TO_ADDR
// vc_chassis := us_morphling ;
22474: LD_ADDR_OWVAR 37
22478: PUSH
22479: LD_INT 5
22481: ST_TO_ADDR
// vc_engine := engine_siberite ;
22482: LD_ADDR_OWVAR 39
22486: PUSH
22487: LD_INT 3
22489: ST_TO_ADDR
// vc_control := control_computer ;
22490: LD_ADDR_OWVAR 38
22494: PUSH
22495: LD_INT 3
22497: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22498: LD_ADDR_OWVAR 40
22502: PUSH
22503: LD_INT 10
22505: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22506: LD_VAR 0 2
22510: PUSH
22511: LD_INT 1
22513: ARRAY
22514: PPUSH
22515: CALL_OW 310
22519: NOT
22520: IFFALSE 22567
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22522: CALL_OW 45
22526: PPUSH
22527: LD_VAR 0 2
22531: PUSH
22532: LD_INT 1
22534: ARRAY
22535: PPUSH
22536: CALL_OW 250
22540: PPUSH
22541: LD_VAR 0 2
22545: PUSH
22546: LD_INT 1
22548: ARRAY
22549: PPUSH
22550: CALL_OW 251
22554: PPUSH
22555: LD_INT 12
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: CALL_OW 50
22565: GO 22579
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22567: CALL_OW 45
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: CALL_OW 51
// end ;
22579: GO 22453
22581: POP
22582: POP
// end ;
22583: PPOPN 2
22585: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22586: LD_EXP 42
22590: PUSH
22591: LD_EXP 88
22595: AND
22596: IFFALSE 22818
22598: GO 22600
22600: DISABLE
22601: LD_INT 0
22603: PPUSH
22604: PPUSH
22605: PPUSH
22606: PPUSH
22607: PPUSH
22608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22609: LD_ADDR_VAR 0 6
22613: PUSH
22614: LD_INT 22
22616: PUSH
22617: LD_OWVAR 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: LD_INT 23
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: ST_TO_ADDR
// if not tmp then
22663: LD_VAR 0 6
22667: NOT
22668: IFFALSE 22672
// exit ;
22670: GO 22818
// s1 := rand ( 1 , 4 ) ;
22672: LD_ADDR_VAR 0 2
22676: PUSH
22677: LD_INT 1
22679: PPUSH
22680: LD_INT 4
22682: PPUSH
22683: CALL_OW 12
22687: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22688: LD_ADDR_VAR 0 4
22692: PUSH
22693: LD_VAR 0 6
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_VAR 0 2
22706: PPUSH
22707: CALL_OW 259
22711: ST_TO_ADDR
// if s1 = 1 then
22712: LD_VAR 0 2
22716: PUSH
22717: LD_INT 1
22719: EQUAL
22720: IFFALSE 22740
// s2 := rand ( 2 , 4 ) else
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_INT 2
22729: PPUSH
22730: LD_INT 4
22732: PPUSH
22733: CALL_OW 12
22737: ST_TO_ADDR
22738: GO 22748
// s2 := 1 ;
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22748: LD_ADDR_VAR 0 5
22752: PUSH
22753: LD_VAR 0 6
22757: PUSH
22758: LD_INT 1
22760: ARRAY
22761: PPUSH
22762: LD_VAR 0 3
22766: PPUSH
22767: CALL_OW 259
22771: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22772: LD_VAR 0 6
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: LD_VAR 0 2
22785: PPUSH
22786: LD_VAR 0 5
22790: PPUSH
22791: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22795: LD_VAR 0 6
22799: PUSH
22800: LD_INT 1
22802: ARRAY
22803: PPUSH
22804: LD_VAR 0 3
22808: PPUSH
22809: LD_VAR 0 4
22813: PPUSH
22814: CALL_OW 237
// end ;
22818: PPOPN 6
22820: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22821: LD_EXP 42
22825: PUSH
22826: LD_EXP 89
22830: AND
22831: IFFALSE 22910
22833: GO 22835
22835: DISABLE
22836: LD_INT 0
22838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22839: LD_ADDR_VAR 0 1
22843: PUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 30
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 69
22874: ST_TO_ADDR
// if not tmp then
22875: LD_VAR 0 1
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22884: LD_VAR 0 1
22888: PUSH
22889: LD_INT 1
22891: PPUSH
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 12
22901: ARRAY
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 234
// end ;
22910: PPOPN 1
22912: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22913: LD_EXP 42
22917: PUSH
22918: LD_EXP 90
22922: AND
22923: IFFALSE 23035
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_INT 22
22939: PUSH
22940: LD_OWVAR 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 30
22954: PUSH
22955: LD_INT 27
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 30
22964: PUSH
22965: LD_INT 26
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 30
22974: PUSH
22975: LD_INT 28
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 69
22996: ST_TO_ADDR
// if not tmp then
22997: LD_VAR 0 2
23001: NOT
23002: IFFALSE 23006
// exit ;
23004: GO 23035
// for i in tmp do
23006: LD_ADDR_VAR 0 1
23010: PUSH
23011: LD_VAR 0 2
23015: PUSH
23016: FOR_IN
23017: IFFALSE 23033
// SetLives ( i , 1 ) ;
23019: LD_VAR 0 1
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 234
23031: GO 23016
23033: POP
23034: POP
// end ;
23035: PPOPN 2
23037: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23038: LD_EXP 42
23042: PUSH
23043: LD_EXP 91
23047: AND
23048: IFFALSE 23322
23050: GO 23052
23052: DISABLE
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
23057: PPUSH
// begin i := rand ( 1 , 7 ) ;
23058: LD_ADDR_VAR 0 1
23062: PUSH
23063: LD_INT 1
23065: PPUSH
23066: LD_INT 7
23068: PPUSH
23069: CALL_OW 12
23073: ST_TO_ADDR
// case i of 1 :
23074: LD_VAR 0 1
23078: PUSH
23079: LD_INT 1
23081: DOUBLE
23082: EQUAL
23083: IFTRUE 23087
23085: GO 23097
23087: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23088: LD_STRING earthquake(getX(game), 0, 32)
23090: PPUSH
23091: CALL_OW 559
23095: GO 23322
23097: LD_INT 2
23099: DOUBLE
23100: EQUAL
23101: IFTRUE 23105
23103: GO 23119
23105: POP
// begin ToLua ( displayStucuk(); ) ;
23106: LD_STRING displayStucuk();
23108: PPUSH
23109: CALL_OW 559
// ResetFog ;
23113: CALL_OW 335
// end ; 3 :
23117: GO 23322
23119: LD_INT 3
23121: DOUBLE
23122: EQUAL
23123: IFTRUE 23127
23125: GO 23231
23127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23128: LD_ADDR_VAR 0 2
23132: PUSH
23133: LD_INT 22
23135: PUSH
23136: LD_OWVAR 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 25
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PPUSH
23159: CALL_OW 69
23163: ST_TO_ADDR
// if not tmp then
23164: LD_VAR 0 2
23168: NOT
23169: IFFALSE 23173
// exit ;
23171: GO 23322
// un := tmp [ rand ( 1 , tmp ) ] ;
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: LD_VAR 0 2
23182: PUSH
23183: LD_INT 1
23185: PPUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: CALL_OW 12
23195: ARRAY
23196: ST_TO_ADDR
// if Crawls ( un ) then
23197: LD_VAR 0 3
23201: PPUSH
23202: CALL_OW 318
23206: IFFALSE 23217
// ComWalk ( un ) ;
23208: LD_VAR 0 3
23212: PPUSH
23213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23217: LD_VAR 0 3
23221: PPUSH
23222: LD_INT 8
23224: PPUSH
23225: CALL_OW 336
// end ; 4 :
23229: GO 23322
23231: LD_INT 4
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23300
23239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: LD_INT 22
23247: PUSH
23248: LD_OWVAR 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 29
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 69
23275: ST_TO_ADDR
// if not tmp then
23276: LD_VAR 0 2
23280: NOT
23281: IFFALSE 23285
// exit ;
23283: GO 23322
// DestroyUnit ( tmp [ 1 ] ) ;
23285: LD_VAR 0 2
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: PPUSH
23294: CALL_OW 65
// end ; 5 .. 7 :
23298: GO 23322
23300: LD_INT 5
23302: DOUBLE
23303: GREATEREQUAL
23304: IFFALSE 23312
23306: LD_INT 7
23308: DOUBLE
23309: LESSEQUAL
23310: IFTRUE 23314
23312: GO 23321
23314: POP
// StreamSibBomb ; end ;
23315: CALL 19572 0 0
23319: GO 23322
23321: POP
// end ;
23322: PPOPN 3
23324: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23325: LD_EXP 42
23329: PUSH
23330: LD_EXP 92
23334: AND
23335: IFFALSE 23491
23337: GO 23339
23339: DISABLE
23340: LD_INT 0
23342: PPUSH
23343: PPUSH
23344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23345: LD_ADDR_VAR 0 2
23349: PUSH
23350: LD_INT 81
23352: PUSH
23353: LD_OWVAR 2
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 21
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 69
23398: ST_TO_ADDR
// if not tmp then
23399: LD_VAR 0 2
23403: NOT
23404: IFFALSE 23408
// exit ;
23406: GO 23491
// p := 0 ;
23408: LD_ADDR_VAR 0 3
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23416: LD_INT 35
23418: PPUSH
23419: CALL_OW 67
// p := p + 1 ;
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_VAR 0 3
23432: PUSH
23433: LD_INT 1
23435: PLUS
23436: ST_TO_ADDR
// for i in tmp do
23437: LD_ADDR_VAR 0 1
23441: PUSH
23442: LD_VAR 0 2
23446: PUSH
23447: FOR_IN
23448: IFFALSE 23479
// if GetLives ( i ) < 1000 then
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 256
23459: PUSH
23460: LD_INT 1000
23462: LESS
23463: IFFALSE 23477
// SetLives ( i , 1000 ) ;
23465: LD_VAR 0 1
23469: PPUSH
23470: LD_INT 1000
23472: PPUSH
23473: CALL_OW 234
23477: GO 23447
23479: POP
23480: POP
// until p > 20 ;
23481: LD_VAR 0 3
23485: PUSH
23486: LD_INT 20
23488: GREATER
23489: IFFALSE 23416
// end ;
23491: PPOPN 3
23493: END
// every 0 0$1 trigger StreamModeActive and sTime do
23494: LD_EXP 42
23498: PUSH
23499: LD_EXP 93
23503: AND
23504: IFFALSE 23539
23506: GO 23508
23508: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23509: LD_INT 28
23511: PPUSH
23512: LD_OWVAR 2
23516: PPUSH
23517: LD_INT 2
23519: PPUSH
23520: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23524: LD_INT 30
23526: PPUSH
23527: LD_OWVAR 2
23531: PPUSH
23532: LD_INT 2
23534: PPUSH
23535: CALL_OW 322
// end ;
23539: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23540: LD_EXP 42
23544: PUSH
23545: LD_EXP 94
23549: AND
23550: IFFALSE 23671
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23559: LD_ADDR_VAR 0 2
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_OWVAR 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 21
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 23
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: PPUSH
23608: CALL_OW 69
23612: ST_TO_ADDR
// if not tmp then
23613: LD_VAR 0 2
23617: NOT
23618: IFFALSE 23622
// exit ;
23620: GO 23671
// for i in tmp do
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_VAR 0 2
23631: PUSH
23632: FOR_IN
23633: IFFALSE 23669
// begin if Crawls ( i ) then
23635: LD_VAR 0 1
23639: PPUSH
23640: CALL_OW 318
23644: IFFALSE 23655
// ComWalk ( i ) ;
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 138
// SetClass ( i , 2 ) ;
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_INT 2
23662: PPUSH
23663: CALL_OW 336
// end ;
23667: GO 23632
23669: POP
23670: POP
// end ;
23671: PPOPN 2
23673: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23674: LD_EXP 42
23678: PUSH
23679: LD_EXP 95
23683: AND
23684: IFFALSE 23965
23686: GO 23688
23688: DISABLE
23689: LD_INT 0
23691: PPUSH
23692: PPUSH
23693: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23694: LD_OWVAR 2
23698: PPUSH
23699: LD_INT 9
23701: PPUSH
23702: LD_INT 1
23704: PPUSH
23705: LD_INT 1
23707: PPUSH
23708: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23712: LD_INT 9
23714: PPUSH
23715: LD_OWVAR 2
23719: PPUSH
23720: CALL_OW 343
// uc_side := 9 ;
23724: LD_ADDR_OWVAR 20
23728: PUSH
23729: LD_INT 9
23731: ST_TO_ADDR
// uc_nation := 2 ;
23732: LD_ADDR_OWVAR 21
23736: PUSH
23737: LD_INT 2
23739: ST_TO_ADDR
// hc_name := Dark Warrior ;
23740: LD_ADDR_OWVAR 26
23744: PUSH
23745: LD_STRING Dark Warrior
23747: ST_TO_ADDR
// hc_gallery :=  ;
23748: LD_ADDR_OWVAR 33
23752: PUSH
23753: LD_STRING 
23755: ST_TO_ADDR
// hc_noskilllimit := true ;
23756: LD_ADDR_OWVAR 76
23760: PUSH
23761: LD_INT 1
23763: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23764: LD_ADDR_OWVAR 31
23768: PUSH
23769: LD_INT 30
23771: PUSH
23772: LD_INT 30
23774: PUSH
23775: LD_INT 30
23777: PUSH
23778: LD_INT 30
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: ST_TO_ADDR
// un := CreateHuman ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: CALL_OW 44
23796: ST_TO_ADDR
// hc_noskilllimit := false ;
23797: LD_ADDR_OWVAR 76
23801: PUSH
23802: LD_INT 0
23804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23805: LD_VAR 0 3
23809: PPUSH
23810: LD_INT 1
23812: PPUSH
23813: CALL_OW 51
// p := 0 ;
23817: LD_ADDR_VAR 0 2
23821: PUSH
23822: LD_INT 0
23824: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23825: LD_INT 35
23827: PPUSH
23828: CALL_OW 67
// p := p + 1 ;
23832: LD_ADDR_VAR 0 2
23836: PUSH
23837: LD_VAR 0 2
23841: PUSH
23842: LD_INT 1
23844: PLUS
23845: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23846: LD_VAR 0 3
23850: PPUSH
23851: CALL_OW 256
23855: PUSH
23856: LD_INT 1000
23858: LESS
23859: IFFALSE 23873
// SetLives ( un , 1000 ) ;
23861: LD_VAR 0 3
23865: PPUSH
23866: LD_INT 1000
23868: PPUSH
23869: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23873: LD_VAR 0 3
23877: PPUSH
23878: LD_INT 81
23880: PUSH
23881: LD_OWVAR 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 91
23892: PUSH
23893: LD_VAR 0 3
23897: PUSH
23898: LD_INT 30
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PPUSH
23910: CALL_OW 69
23914: PPUSH
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL_OW 74
23924: PPUSH
23925: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23929: LD_VAR 0 2
23933: PUSH
23934: LD_INT 60
23936: GREATER
23937: PUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: CALL_OW 301
23947: OR
23948: IFFALSE 23825
// if un then
23950: LD_VAR 0 3
23954: IFFALSE 23965
// RemoveUnit ( un ) ;
23956: LD_VAR 0 3
23960: PPUSH
23961: CALL_OW 64
// end ;
23965: PPOPN 3
23967: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23968: LD_INT 0
23970: PPUSH
23971: PPUSH
23972: PPUSH
23973: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23974: LD_ADDR_VAR 0 4
23978: PUSH
23979: LD_INT 22
23981: PUSH
23982: LD_OWVAR 2
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 30
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: ST_TO_ADDR
// if not tmp then
24028: LD_VAR 0 4
24032: NOT
24033: IFFALSE 24037
// exit ;
24035: GO 24096
// for i in tmp do
24037: LD_ADDR_VAR 0 2
24041: PUSH
24042: LD_VAR 0 4
24046: PUSH
24047: FOR_IN
24048: IFFALSE 24094
// for j = 1 to 3 do
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: DOUBLE
24056: LD_INT 1
24058: DEC
24059: ST_TO_ADDR
24060: LD_INT 3
24062: PUSH
24063: FOR_TO
24064: IFFALSE 24090
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24066: LD_VAR 0 2
24070: PPUSH
24071: CALL_OW 274
24075: PPUSH
24076: LD_VAR 0 3
24080: PPUSH
24081: LD_INT 99999
24083: PPUSH
24084: CALL_OW 277
24088: GO 24063
24090: POP
24091: POP
24092: GO 24047
24094: POP
24095: POP
// end ;
24096: LD_VAR 0 1
24100: RET
// export function hHackSetLevel10 ; var i , j ; begin
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: LD_INT 21
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PPUSH
24121: CALL_OW 69
24125: PUSH
24126: FOR_IN
24127: IFFALSE 24179
// if IsSelected ( i ) then
24129: LD_VAR 0 2
24133: PPUSH
24134: CALL_OW 306
24138: IFFALSE 24177
// begin for j := 1 to 4 do
24140: LD_ADDR_VAR 0 3
24144: PUSH
24145: DOUBLE
24146: LD_INT 1
24148: DEC
24149: ST_TO_ADDR
24150: LD_INT 4
24152: PUSH
24153: FOR_TO
24154: IFFALSE 24175
// SetSkill ( i , j , 10 ) ;
24156: LD_VAR 0 2
24160: PPUSH
24161: LD_VAR 0 3
24165: PPUSH
24166: LD_INT 10
24168: PPUSH
24169: CALL_OW 237
24173: GO 24153
24175: POP
24176: POP
// end ;
24177: GO 24126
24179: POP
24180: POP
// end ;
24181: LD_VAR 0 1
24185: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24186: LD_INT 0
24188: PPUSH
24189: PPUSH
24190: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24191: LD_ADDR_VAR 0 2
24195: PUSH
24196: LD_INT 22
24198: PUSH
24199: LD_OWVAR 2
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PPUSH
24222: CALL_OW 69
24226: PUSH
24227: FOR_IN
24228: IFFALSE 24269
// begin for j := 1 to 4 do
24230: LD_ADDR_VAR 0 3
24234: PUSH
24235: DOUBLE
24236: LD_INT 1
24238: DEC
24239: ST_TO_ADDR
24240: LD_INT 4
24242: PUSH
24243: FOR_TO
24244: IFFALSE 24265
// SetSkill ( i , j , 10 ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_VAR 0 3
24255: PPUSH
24256: LD_INT 10
24258: PPUSH
24259: CALL_OW 237
24263: GO 24243
24265: POP
24266: POP
// end ;
24267: GO 24227
24269: POP
24270: POP
// end ;
24271: LD_VAR 0 1
24275: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
24276: LD_INT 0
24278: PPUSH
// uc_side := your_side ;
24279: LD_ADDR_OWVAR 20
24283: PUSH
24284: LD_OWVAR 2
24288: ST_TO_ADDR
// uc_nation := nation ;
24289: LD_ADDR_OWVAR 21
24293: PUSH
24294: LD_VAR 0 1
24298: ST_TO_ADDR
// InitHc ;
24299: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24303: LD_INT 0
24305: PPUSH
24306: LD_VAR 0 2
24310: PPUSH
24311: LD_VAR 0 3
24315: PPUSH
24316: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24320: CALL_OW 44
24324: PPUSH
24325: LD_INT 1
24327: PPUSH
24328: CALL_OW 51
// end ;
24332: LD_VAR 0 4
24336: RET
// export function hHackSpawnVehicle ; begin
24337: LD_INT 0
24339: PPUSH
// uc_side := your_side ;
24340: LD_ADDR_OWVAR 20
24344: PUSH
24345: LD_OWVAR 2
24349: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
24350: LD_ADDR_OWVAR 21
24354: PUSH
24355: LD_INT 1
24357: PPUSH
24358: LD_INT 3
24360: PPUSH
24361: CALL_OW 12
24365: ST_TO_ADDR
// InitVc ;
24366: CALL_OW 20
// case uc_nation of 1 :
24370: LD_OWVAR 21
24374: PUSH
24375: LD_INT 1
24377: DOUBLE
24378: EQUAL
24379: IFTRUE 24383
24381: GO 24527
24383: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
24384: LD_ADDR_OWVAR 37
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: LD_INT 4
24400: PUSH
24401: LD_INT 5
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: PPUSH
24414: LD_INT 5
24416: PPUSH
24417: CALL_OW 12
24421: ARRAY
24422: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24423: LD_ADDR_OWVAR 39
24427: PUSH
24428: LD_INT 1
24430: PPUSH
24431: LD_INT 3
24433: PPUSH
24434: CALL_OW 12
24438: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
24439: LD_ADDR_OWVAR 38
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 2
24449: PUSH
24450: LD_INT 3
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: PPUSH
24461: LD_INT 3
24463: PPUSH
24464: CALL_OW 12
24468: ARRAY
24469: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
24470: LD_ADDR_OWVAR 40
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 4
24480: PUSH
24481: LD_INT 5
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: LD_INT 7
24489: PUSH
24490: LD_INT 8
24492: PUSH
24493: LD_INT 9
24495: PUSH
24496: LD_INT 10
24498: PUSH
24499: LD_INT 6
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: PPUSH
24516: LD_INT 9
24518: PPUSH
24519: CALL_OW 12
24523: ARRAY
24524: ST_TO_ADDR
// end ; 2 :
24525: GO 24792
24527: LD_INT 2
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24659
24535: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
24536: LD_ADDR_OWVAR 37
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 13
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PPUSH
24562: LD_INT 4
24564: PPUSH
24565: CALL_OW 12
24569: ARRAY
24570: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24571: LD_ADDR_OWVAR 39
24575: PUSH
24576: LD_INT 1
24578: PPUSH
24579: LD_INT 3
24581: PPUSH
24582: CALL_OW 12
24586: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
24587: LD_ADDR_OWVAR 38
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 5
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PPUSH
24609: LD_INT 3
24611: PPUSH
24612: CALL_OW 12
24616: ARRAY
24617: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
24618: LD_ADDR_OWVAR 40
24622: PUSH
24623: LD_INT 24
24625: PUSH
24626: LD_INT 26
24628: PUSH
24629: LD_INT 27
24631: PUSH
24632: LD_INT 28
24634: PUSH
24635: LD_INT 29
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PPUSH
24648: LD_INT 5
24650: PPUSH
24651: CALL_OW 12
24655: ARRAY
24656: ST_TO_ADDR
// end ; 3 :
24657: GO 24792
24659: LD_INT 3
24661: DOUBLE
24662: EQUAL
24663: IFTRUE 24667
24665: GO 24791
24667: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
24668: LD_ADDR_OWVAR 37
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 23
24678: PUSH
24679: LD_INT 22
24681: PUSH
24682: LD_INT 24
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: PPUSH
24694: LD_INT 4
24696: PPUSH
24697: CALL_OW 12
24701: ARRAY
24702: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24703: LD_ADDR_OWVAR 39
24707: PUSH
24708: LD_INT 1
24710: PPUSH
24711: LD_INT 3
24713: PPUSH
24714: CALL_OW 12
24718: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
24719: LD_ADDR_OWVAR 38
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: PPUSH
24737: LD_INT 2
24739: PPUSH
24740: CALL_OW 12
24744: ARRAY
24745: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
24746: LD_ADDR_OWVAR 40
24750: PUSH
24751: LD_INT 42
24753: PUSH
24754: LD_INT 43
24756: PUSH
24757: LD_INT 44
24759: PUSH
24760: LD_INT 46
24762: PUSH
24763: LD_INT 48
24765: PUSH
24766: LD_INT 47
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PPUSH
24780: LD_INT 6
24782: PPUSH
24783: CALL_OW 12
24787: ARRAY
24788: ST_TO_ADDR
// end ; end ;
24789: GO 24792
24791: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24792: CALL_OW 45
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 51
// end ;
24804: LD_VAR 0 1
24808: RET
// export hInvincible ; every 1 do
24809: GO 24811
24811: DISABLE
// hInvincible := [ ] ;
24812: LD_ADDR_EXP 96
24816: PUSH
24817: EMPTY
24818: ST_TO_ADDR
24819: END
// every 10 do var i ;
24820: GO 24822
24822: DISABLE
24823: LD_INT 0
24825: PPUSH
// begin enable ;
24826: ENABLE
// if not hInvincible then
24827: LD_EXP 96
24831: NOT
24832: IFFALSE 24836
// exit ;
24834: GO 24880
// for i in hInvincible do
24836: LD_ADDR_VAR 0 1
24840: PUSH
24841: LD_EXP 96
24845: PUSH
24846: FOR_IN
24847: IFFALSE 24878
// if GetLives ( i ) < 1000 then
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 256
24858: PUSH
24859: LD_INT 1000
24861: LESS
24862: IFFALSE 24876
// SetLives ( i , 1000 ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 1000
24871: PPUSH
24872: CALL_OW 234
24876: GO 24846
24878: POP
24879: POP
// end ;
24880: PPOPN 1
24882: END
// export function hHackInvincible ; var i ; begin
24883: LD_INT 0
24885: PPUSH
24886: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24887: LD_ADDR_VAR 0 2
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 21
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 21
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: PUSH
24925: FOR_IN
24926: IFFALSE 24987
// if IsSelected ( i ) then
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 306
24937: IFFALSE 24985
// begin if i in hInvincible then
24939: LD_VAR 0 2
24943: PUSH
24944: LD_EXP 96
24948: IN
24949: IFFALSE 24969
// hInvincible := hInvincible diff i else
24951: LD_ADDR_EXP 96
24955: PUSH
24956: LD_EXP 96
24960: PUSH
24961: LD_VAR 0 2
24965: DIFF
24966: ST_TO_ADDR
24967: GO 24985
// hInvincible := hInvincible union i ;
24969: LD_ADDR_EXP 96
24973: PUSH
24974: LD_EXP 96
24978: PUSH
24979: LD_VAR 0 2
24983: UNION
24984: ST_TO_ADDR
// end ;
24985: GO 24925
24987: POP
24988: POP
// end ;
24989: LD_VAR 0 1
24993: RET
// export function hHackInvisible ; var i , j ; begin
24994: LD_INT 0
24996: PPUSH
24997: PPUSH
24998: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24999: LD_ADDR_VAR 0 2
25003: PUSH
25004: LD_INT 21
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: PUSH
25019: FOR_IN
25020: IFFALSE 25044
// if IsSelected ( i ) then
25022: LD_VAR 0 2
25026: PPUSH
25027: CALL_OW 306
25031: IFFALSE 25042
// ComForceInvisible ( i ) ;
25033: LD_VAR 0 2
25037: PPUSH
25038: CALL_OW 496
25042: GO 25019
25044: POP
25045: POP
// end ;
25046: LD_VAR 0 1
25050: RET
// export function hHackChangeYourSide ; begin
25051: LD_INT 0
25053: PPUSH
// if your_side = 8 then
25054: LD_OWVAR 2
25058: PUSH
25059: LD_INT 8
25061: EQUAL
25062: IFFALSE 25074
// your_side := 0 else
25064: LD_ADDR_OWVAR 2
25068: PUSH
25069: LD_INT 0
25071: ST_TO_ADDR
25072: GO 25088
// your_side := your_side + 1 ;
25074: LD_ADDR_OWVAR 2
25078: PUSH
25079: LD_OWVAR 2
25083: PUSH
25084: LD_INT 1
25086: PLUS
25087: ST_TO_ADDR
// end ;
25088: LD_VAR 0 1
25092: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25093: LD_INT 0
25095: PPUSH
25096: PPUSH
25097: PPUSH
// for i in all_units do
25098: LD_ADDR_VAR 0 2
25102: PUSH
25103: LD_OWVAR 3
25107: PUSH
25108: FOR_IN
25109: IFFALSE 25187
// if IsSelected ( i ) then
25111: LD_VAR 0 2
25115: PPUSH
25116: CALL_OW 306
25120: IFFALSE 25185
// begin j := GetSide ( i ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_VAR 0 2
25131: PPUSH
25132: CALL_OW 255
25136: ST_TO_ADDR
// if j = 8 then
25137: LD_VAR 0 3
25141: PUSH
25142: LD_INT 8
25144: EQUAL
25145: IFFALSE 25157
// j := 0 else
25147: LD_ADDR_VAR 0 3
25151: PUSH
25152: LD_INT 0
25154: ST_TO_ADDR
25155: GO 25171
// j := j + 1 ;
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_VAR 0 3
25166: PUSH
25167: LD_INT 1
25169: PLUS
25170: ST_TO_ADDR
// SetSide ( i , j ) ;
25171: LD_VAR 0 2
25175: PPUSH
25176: LD_VAR 0 3
25180: PPUSH
25181: CALL_OW 235
// end ;
25185: GO 25108
25187: POP
25188: POP
// end ;
25189: LD_VAR 0 1
25193: RET
// export function hHackFog ; begin
25194: LD_INT 0
25196: PPUSH
// FogOff ( true ) ;
25197: LD_INT 1
25199: PPUSH
25200: CALL_OW 344
// end ;
25204: LD_VAR 0 1
25208: RET
// export function hHackApeman ; begin
25209: LD_INT 0
25211: PPUSH
// uc_side := your_side ;
25212: LD_ADDR_OWVAR 20
25216: PUSH
25217: LD_OWVAR 2
25221: ST_TO_ADDR
// uc_nation := 0 ;
25222: LD_ADDR_OWVAR 21
25226: PUSH
25227: LD_INT 0
25229: ST_TO_ADDR
// hc_name :=  ;
25230: LD_ADDR_OWVAR 26
25234: PUSH
25235: LD_STRING 
25237: ST_TO_ADDR
// hc_gallery :=  ;
25238: LD_ADDR_OWVAR 33
25242: PUSH
25243: LD_STRING 
25245: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
25246: LD_ADDR_OWVAR 31
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
// hc_class := class_apeman ;
25269: LD_ADDR_OWVAR 28
25273: PUSH
25274: LD_INT 12
25276: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
25277: CALL_OW 44
25281: PPUSH
25282: LD_INT 1
25284: PPUSH
25285: CALL_OW 51
// end ;
25289: LD_VAR 0 1
25293: RET
// export function hHackBoom ; begin
25294: LD_INT 0
25296: PPUSH
// uc_side := your_side ;
25297: LD_ADDR_OWVAR 20
25301: PUSH
25302: LD_OWVAR 2
25306: ST_TO_ADDR
// uc_nation := 1 ;
25307: LD_ADDR_OWVAR 21
25311: PUSH
25312: LD_INT 1
25314: ST_TO_ADDR
// vc_chassis := us_morphling ;
25315: LD_ADDR_OWVAR 37
25319: PUSH
25320: LD_INT 5
25322: ST_TO_ADDR
// vc_engine := engine_siberite ;
25323: LD_ADDR_OWVAR 39
25327: PUSH
25328: LD_INT 3
25330: ST_TO_ADDR
// vc_control := control_computer ;
25331: LD_ADDR_OWVAR 38
25335: PUSH
25336: LD_INT 3
25338: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
25339: LD_ADDR_OWVAR 40
25343: PUSH
25344: LD_INT 8
25346: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25347: CALL_OW 45
25351: PPUSH
25352: LD_INT 1
25354: PPUSH
25355: CALL_OW 51
// end ; end_of_file end_of_file
25359: LD_VAR 0 1
25363: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
25364: LD_INT 0
25366: PPUSH
// ar_crane := 88 ;
25367: LD_ADDR_EXP 103
25371: PUSH
25372: LD_INT 88
25374: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
25375: LD_ADDR_EXP 98
25379: PUSH
25380: LD_INT 89
25382: ST_TO_ADDR
// us_hack := 99 ;
25383: LD_ADDR_EXP 99
25387: PUSH
25388: LD_INT 99
25390: ST_TO_ADDR
// us_artillery := 97 ;
25391: LD_ADDR_EXP 100
25395: PUSH
25396: LD_INT 97
25398: ST_TO_ADDR
// ar_bio_bomb := 91 ;
25399: LD_ADDR_EXP 101
25403: PUSH
25404: LD_INT 91
25406: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
25407: LD_ADDR_EXP 102
25411: PUSH
25412: LD_INT 92
25414: ST_TO_ADDR
// ru_radar := 98 ;
25415: LD_ADDR_EXP 97
25419: PUSH
25420: LD_INT 98
25422: ST_TO_ADDR
// tech_Artillery := 80 ;
25423: LD_ADDR_EXP 104
25427: PUSH
25428: LD_INT 80
25430: ST_TO_ADDR
// tech_RadMat := 81 ;
25431: LD_ADDR_EXP 105
25435: PUSH
25436: LD_INT 81
25438: ST_TO_ADDR
// tech_BasicTools := 82 ;
25439: LD_ADDR_EXP 106
25443: PUSH
25444: LD_INT 82
25446: ST_TO_ADDR
// tech_Cargo := 83 ;
25447: LD_ADDR_EXP 107
25451: PUSH
25452: LD_INT 83
25454: ST_TO_ADDR
// tech_Track := 84 ;
25455: LD_ADDR_EXP 108
25459: PUSH
25460: LD_INT 84
25462: ST_TO_ADDR
// tech_Crane := 85 ;
25463: LD_ADDR_EXP 109
25467: PUSH
25468: LD_INT 85
25470: ST_TO_ADDR
// tech_Bulldozer := 86 ;
25471: LD_ADDR_EXP 110
25475: PUSH
25476: LD_INT 86
25478: ST_TO_ADDR
// tech_Hovercraft := 87 ;
25479: LD_ADDR_EXP 111
25483: PUSH
25484: LD_INT 87
25486: ST_TO_ADDR
// end ;
25487: LD_VAR 0 1
25491: RET
// every 1 do
25492: GO 25494
25494: DISABLE
// InitGlobalVariables ; end_of_file
25495: CALL 25364 0 0
25499: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25500: LD_INT 0
25502: PPUSH
25503: PPUSH
// if exist_mode then
25504: LD_VAR 0 2
25508: IFFALSE 25533
// unit := CreateCharacter ( prefix & ident ) else
25510: LD_ADDR_VAR 0 5
25514: PUSH
25515: LD_VAR 0 3
25519: PUSH
25520: LD_VAR 0 1
25524: STR
25525: PPUSH
25526: CALL_OW 34
25530: ST_TO_ADDR
25531: GO 25548
// unit := NewCharacter ( ident ) ;
25533: LD_ADDR_VAR 0 5
25537: PUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 25
25547: ST_TO_ADDR
// result := unit ;
25548: LD_ADDR_VAR 0 4
25552: PUSH
25553: LD_VAR 0 5
25557: ST_TO_ADDR
// end ;
25558: LD_VAR 0 4
25562: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25563: LD_INT 0
25565: PPUSH
25566: PPUSH
// if not side or not nation then
25567: LD_VAR 0 1
25571: NOT
25572: PUSH
25573: LD_VAR 0 2
25577: NOT
25578: OR
25579: IFFALSE 25583
// exit ;
25581: GO 26347
// case nation of nation_american :
25583: LD_VAR 0 2
25587: PUSH
25588: LD_INT 1
25590: DOUBLE
25591: EQUAL
25592: IFTRUE 25596
25594: GO 25810
25596: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25597: LD_ADDR_VAR 0 4
25601: PUSH
25602: LD_INT 35
25604: PUSH
25605: LD_INT 45
25607: PUSH
25608: LD_INT 46
25610: PUSH
25611: LD_INT 47
25613: PUSH
25614: LD_INT 82
25616: PUSH
25617: LD_INT 83
25619: PUSH
25620: LD_INT 84
25622: PUSH
25623: LD_INT 85
25625: PUSH
25626: LD_INT 86
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 6
25637: PUSH
25638: LD_INT 15
25640: PUSH
25641: LD_INT 16
25643: PUSH
25644: LD_INT 7
25646: PUSH
25647: LD_INT 12
25649: PUSH
25650: LD_INT 13
25652: PUSH
25653: LD_INT 10
25655: PUSH
25656: LD_INT 14
25658: PUSH
25659: LD_INT 20
25661: PUSH
25662: LD_INT 21
25664: PUSH
25665: LD_INT 22
25667: PUSH
25668: LD_INT 25
25670: PUSH
25671: LD_INT 32
25673: PUSH
25674: LD_INT 27
25676: PUSH
25677: LD_INT 36
25679: PUSH
25680: LD_INT 69
25682: PUSH
25683: LD_INT 39
25685: PUSH
25686: LD_INT 34
25688: PUSH
25689: LD_INT 40
25691: PUSH
25692: LD_INT 48
25694: PUSH
25695: LD_INT 49
25697: PUSH
25698: LD_INT 50
25700: PUSH
25701: LD_INT 51
25703: PUSH
25704: LD_INT 52
25706: PUSH
25707: LD_INT 53
25709: PUSH
25710: LD_INT 54
25712: PUSH
25713: LD_INT 55
25715: PUSH
25716: LD_INT 56
25718: PUSH
25719: LD_INT 57
25721: PUSH
25722: LD_INT 58
25724: PUSH
25725: LD_INT 59
25727: PUSH
25728: LD_INT 60
25730: PUSH
25731: LD_INT 61
25733: PUSH
25734: LD_INT 62
25736: PUSH
25737: LD_INT 80
25739: PUSH
25740: LD_INT 82
25742: PUSH
25743: LD_INT 83
25745: PUSH
25746: LD_INT 84
25748: PUSH
25749: LD_INT 85
25751: PUSH
25752: LD_INT 86
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 26271
25810: LD_INT 2
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 26040
25818: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25819: LD_ADDR_VAR 0 4
25823: PUSH
25824: LD_INT 35
25826: PUSH
25827: LD_INT 45
25829: PUSH
25830: LD_INT 46
25832: PUSH
25833: LD_INT 47
25835: PUSH
25836: LD_INT 82
25838: PUSH
25839: LD_INT 83
25841: PUSH
25842: LD_INT 84
25844: PUSH
25845: LD_INT 85
25847: PUSH
25848: LD_INT 87
25850: PUSH
25851: LD_INT 70
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: LD_INT 11
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 4
25865: PUSH
25866: LD_INT 5
25868: PUSH
25869: LD_INT 6
25871: PUSH
25872: LD_INT 15
25874: PUSH
25875: LD_INT 18
25877: PUSH
25878: LD_INT 7
25880: PUSH
25881: LD_INT 17
25883: PUSH
25884: LD_INT 8
25886: PUSH
25887: LD_INT 20
25889: PUSH
25890: LD_INT 21
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_INT 72
25898: PUSH
25899: LD_INT 26
25901: PUSH
25902: LD_INT 69
25904: PUSH
25905: LD_INT 39
25907: PUSH
25908: LD_INT 40
25910: PUSH
25911: LD_INT 41
25913: PUSH
25914: LD_INT 42
25916: PUSH
25917: LD_INT 43
25919: PUSH
25920: LD_INT 48
25922: PUSH
25923: LD_INT 49
25925: PUSH
25926: LD_INT 50
25928: PUSH
25929: LD_INT 51
25931: PUSH
25932: LD_INT 52
25934: PUSH
25935: LD_INT 53
25937: PUSH
25938: LD_INT 54
25940: PUSH
25941: LD_INT 55
25943: PUSH
25944: LD_INT 56
25946: PUSH
25947: LD_INT 60
25949: PUSH
25950: LD_INT 61
25952: PUSH
25953: LD_INT 62
25955: PUSH
25956: LD_INT 66
25958: PUSH
25959: LD_INT 67
25961: PUSH
25962: LD_INT 68
25964: PUSH
25965: LD_INT 81
25967: PUSH
25968: LD_INT 82
25970: PUSH
25971: LD_INT 83
25973: PUSH
25974: LD_INT 84
25976: PUSH
25977: LD_INT 85
25979: PUSH
25980: LD_INT 87
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: ST_TO_ADDR
26038: GO 26271
26040: LD_INT 3
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26270
26048: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26049: LD_ADDR_VAR 0 4
26053: PUSH
26054: LD_INT 46
26056: PUSH
26057: LD_INT 47
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: LD_INT 82
26068: PUSH
26069: LD_INT 83
26071: PUSH
26072: LD_INT 84
26074: PUSH
26075: LD_INT 85
26077: PUSH
26078: LD_INT 86
26080: PUSH
26081: LD_INT 11
26083: PUSH
26084: LD_INT 9
26086: PUSH
26087: LD_INT 20
26089: PUSH
26090: LD_INT 19
26092: PUSH
26093: LD_INT 21
26095: PUSH
26096: LD_INT 24
26098: PUSH
26099: LD_INT 22
26101: PUSH
26102: LD_INT 25
26104: PUSH
26105: LD_INT 28
26107: PUSH
26108: LD_INT 29
26110: PUSH
26111: LD_INT 30
26113: PUSH
26114: LD_INT 31
26116: PUSH
26117: LD_INT 37
26119: PUSH
26120: LD_INT 38
26122: PUSH
26123: LD_INT 32
26125: PUSH
26126: LD_INT 27
26128: PUSH
26129: LD_INT 33
26131: PUSH
26132: LD_INT 69
26134: PUSH
26135: LD_INT 39
26137: PUSH
26138: LD_INT 34
26140: PUSH
26141: LD_INT 40
26143: PUSH
26144: LD_INT 71
26146: PUSH
26147: LD_INT 23
26149: PUSH
26150: LD_INT 44
26152: PUSH
26153: LD_INT 48
26155: PUSH
26156: LD_INT 49
26158: PUSH
26159: LD_INT 50
26161: PUSH
26162: LD_INT 51
26164: PUSH
26165: LD_INT 52
26167: PUSH
26168: LD_INT 53
26170: PUSH
26171: LD_INT 54
26173: PUSH
26174: LD_INT 55
26176: PUSH
26177: LD_INT 56
26179: PUSH
26180: LD_INT 57
26182: PUSH
26183: LD_INT 58
26185: PUSH
26186: LD_INT 59
26188: PUSH
26189: LD_INT 63
26191: PUSH
26192: LD_INT 64
26194: PUSH
26195: LD_INT 65
26197: PUSH
26198: LD_INT 82
26200: PUSH
26201: LD_INT 83
26203: PUSH
26204: LD_INT 84
26206: PUSH
26207: LD_INT 85
26209: PUSH
26210: LD_INT 86
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: ST_TO_ADDR
26268: GO 26271
26270: POP
// if state > - 1 and state < 3 then
26271: LD_VAR 0 3
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: GREATER
26280: PUSH
26281: LD_VAR 0 3
26285: PUSH
26286: LD_INT 3
26288: LESS
26289: AND
26290: IFFALSE 26347
// for i in result do
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: LD_VAR 0 4
26301: PUSH
26302: FOR_IN
26303: IFFALSE 26345
// if GetTech ( i , side ) <> state then
26305: LD_VAR 0 5
26309: PPUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 321
26319: PUSH
26320: LD_VAR 0 3
26324: NONEQUAL
26325: IFFALSE 26343
// result := result diff i ;
26327: LD_ADDR_VAR 0 4
26331: PUSH
26332: LD_VAR 0 4
26336: PUSH
26337: LD_VAR 0 5
26341: DIFF
26342: ST_TO_ADDR
26343: GO 26302
26345: POP
26346: POP
// end ;
26347: LD_VAR 0 4
26351: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
26356: PPUSH
// result := true ;
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 1
26364: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26365: LD_ADDR_VAR 0 5
26369: PUSH
26370: LD_VAR 0 2
26374: PPUSH
26375: CALL_OW 480
26379: ST_TO_ADDR
// if not tmp then
26380: LD_VAR 0 5
26384: NOT
26385: IFFALSE 26389
// exit ;
26387: GO 26438
// for i in tmp do
26389: LD_ADDR_VAR 0 4
26393: PUSH
26394: LD_VAR 0 5
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26436
// if GetTech ( i , side ) <> state_researched then
26402: LD_VAR 0 4
26406: PPUSH
26407: LD_VAR 0 1
26411: PPUSH
26412: CALL_OW 321
26416: PUSH
26417: LD_INT 2
26419: NONEQUAL
26420: IFFALSE 26434
// begin result := false ;
26422: LD_ADDR_VAR 0 3
26426: PUSH
26427: LD_INT 0
26429: ST_TO_ADDR
// exit ;
26430: POP
26431: POP
26432: GO 26438
// end ;
26434: GO 26399
26436: POP
26437: POP
// end ;
26438: LD_VAR 0 3
26442: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
26455: PPUSH
26456: PPUSH
26457: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26458: LD_VAR 0 1
26462: NOT
26463: PUSH
26464: LD_VAR 0 1
26468: PPUSH
26469: CALL_OW 257
26473: PUSH
26474: LD_INT 9
26476: NONEQUAL
26477: OR
26478: IFFALSE 26482
// exit ;
26480: GO 27055
// side := GetSide ( unit ) ;
26482: LD_ADDR_VAR 0 9
26486: PUSH
26487: LD_VAR 0 1
26491: PPUSH
26492: CALL_OW 255
26496: ST_TO_ADDR
// tech_space := tech_spacanom ;
26497: LD_ADDR_VAR 0 12
26501: PUSH
26502: LD_INT 29
26504: ST_TO_ADDR
// tech_time := tech_taurad ;
26505: LD_ADDR_VAR 0 13
26509: PUSH
26510: LD_INT 28
26512: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26513: LD_ADDR_VAR 0 11
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 310
26527: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26528: LD_VAR 0 11
26532: PPUSH
26533: CALL_OW 247
26537: PUSH
26538: LD_INT 2
26540: EQUAL
26541: IFFALSE 26545
// exit ;
26543: GO 27055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26545: LD_ADDR_VAR 0 8
26549: PUSH
26550: LD_INT 81
26552: PUSH
26553: LD_VAR 0 9
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 3
26564: PUSH
26565: LD_INT 21
26567: PUSH
26568: LD_INT 3
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PPUSH
26583: CALL_OW 69
26587: ST_TO_ADDR
// if not tmp then
26588: LD_VAR 0 8
26592: NOT
26593: IFFALSE 26597
// exit ;
26595: GO 27055
// if in_unit then
26597: LD_VAR 0 11
26601: IFFALSE 26625
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26603: LD_ADDR_VAR 0 10
26607: PUSH
26608: LD_VAR 0 8
26612: PPUSH
26613: LD_VAR 0 11
26617: PPUSH
26618: CALL_OW 74
26622: ST_TO_ADDR
26623: GO 26645
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26625: LD_ADDR_VAR 0 10
26629: PUSH
26630: LD_VAR 0 8
26634: PPUSH
26635: LD_VAR 0 1
26639: PPUSH
26640: CALL_OW 74
26644: ST_TO_ADDR
// if not enemy then
26645: LD_VAR 0 10
26649: NOT
26650: IFFALSE 26654
// exit ;
26652: GO 27055
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26654: LD_VAR 0 11
26658: PUSH
26659: LD_VAR 0 11
26663: PPUSH
26664: LD_VAR 0 10
26668: PPUSH
26669: CALL_OW 296
26673: PUSH
26674: LD_INT 13
26676: GREATER
26677: AND
26678: PUSH
26679: LD_VAR 0 1
26683: PPUSH
26684: LD_VAR 0 10
26688: PPUSH
26689: CALL_OW 296
26693: PUSH
26694: LD_INT 12
26696: GREATER
26697: OR
26698: IFFALSE 26702
// exit ;
26700: GO 27055
// missile := [ 1 ] ;
26702: LD_ADDR_VAR 0 14
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26713: LD_VAR 0 9
26717: PPUSH
26718: LD_VAR 0 12
26722: PPUSH
26723: CALL_OW 325
26727: IFFALSE 26756
// missile := Insert ( missile , missile + 1 , 2 ) ;
26729: LD_ADDR_VAR 0 14
26733: PUSH
26734: LD_VAR 0 14
26738: PPUSH
26739: LD_VAR 0 14
26743: PUSH
26744: LD_INT 1
26746: PLUS
26747: PPUSH
26748: LD_INT 2
26750: PPUSH
26751: CALL_OW 2
26755: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26756: LD_VAR 0 9
26760: PPUSH
26761: LD_VAR 0 13
26765: PPUSH
26766: CALL_OW 325
26770: PUSH
26771: LD_VAR 0 10
26775: PPUSH
26776: CALL_OW 255
26780: PPUSH
26781: LD_VAR 0 13
26785: PPUSH
26786: CALL_OW 325
26790: NOT
26791: AND
26792: IFFALSE 26821
// missile := Insert ( missile , missile + 1 , 3 ) ;
26794: LD_ADDR_VAR 0 14
26798: PUSH
26799: LD_VAR 0 14
26803: PPUSH
26804: LD_VAR 0 14
26808: PUSH
26809: LD_INT 1
26811: PLUS
26812: PPUSH
26813: LD_INT 3
26815: PPUSH
26816: CALL_OW 2
26820: ST_TO_ADDR
// if missile < 2 then
26821: LD_VAR 0 14
26825: PUSH
26826: LD_INT 2
26828: LESS
26829: IFFALSE 26833
// exit ;
26831: GO 27055
// x := GetX ( enemy ) ;
26833: LD_ADDR_VAR 0 4
26837: PUSH
26838: LD_VAR 0 10
26842: PPUSH
26843: CALL_OW 250
26847: ST_TO_ADDR
// y := GetY ( enemy ) ;
26848: LD_ADDR_VAR 0 5
26852: PUSH
26853: LD_VAR 0 10
26857: PPUSH
26858: CALL_OW 251
26862: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26863: LD_ADDR_VAR 0 6
26867: PUSH
26868: LD_VAR 0 4
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PPUSH
26877: LD_INT 1
26879: PPUSH
26880: CALL_OW 12
26884: PLUS
26885: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26886: LD_ADDR_VAR 0 7
26890: PUSH
26891: LD_VAR 0 5
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PPUSH
26900: LD_INT 1
26902: PPUSH
26903: CALL_OW 12
26907: PLUS
26908: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26909: LD_VAR 0 6
26913: PPUSH
26914: LD_VAR 0 7
26918: PPUSH
26919: CALL_OW 488
26923: NOT
26924: IFFALSE 26946
// begin _x := x ;
26926: LD_ADDR_VAR 0 6
26930: PUSH
26931: LD_VAR 0 4
26935: ST_TO_ADDR
// _y := y ;
26936: LD_ADDR_VAR 0 7
26940: PUSH
26941: LD_VAR 0 5
26945: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26946: LD_ADDR_VAR 0 3
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_VAR 0 14
26958: PPUSH
26959: CALL_OW 12
26963: ST_TO_ADDR
// case i of 1 :
26964: LD_VAR 0 3
26968: PUSH
26969: LD_INT 1
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 26994
26977: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26978: LD_VAR 0 1
26982: PPUSH
26983: LD_VAR 0 10
26987: PPUSH
26988: CALL_OW 115
26992: GO 27055
26994: LD_INT 2
26996: DOUBLE
26997: EQUAL
26998: IFTRUE 27002
27000: GO 27024
27002: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27003: LD_VAR 0 1
27007: PPUSH
27008: LD_VAR 0 6
27012: PPUSH
27013: LD_VAR 0 7
27017: PPUSH
27018: CALL_OW 153
27022: GO 27055
27024: LD_INT 3
27026: DOUBLE
27027: EQUAL
27028: IFTRUE 27032
27030: GO 27054
27032: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27033: LD_VAR 0 1
27037: PPUSH
27038: LD_VAR 0 6
27042: PPUSH
27043: LD_VAR 0 7
27047: PPUSH
27048: CALL_OW 154
27052: GO 27055
27054: POP
// end ;
27055: LD_VAR 0 2
27059: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
27066: PPUSH
27067: PPUSH
// if not unit or not building then
27068: LD_VAR 0 1
27072: NOT
27073: PUSH
27074: LD_VAR 0 2
27078: NOT
27079: OR
27080: IFFALSE 27084
// exit ;
27082: GO 27242
// x := GetX ( building ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 250
27098: ST_TO_ADDR
// y := GetY ( building ) ;
27099: LD_ADDR_VAR 0 6
27103: PUSH
27104: LD_VAR 0 2
27108: PPUSH
27109: CALL_OW 251
27113: ST_TO_ADDR
// for i = 0 to 5 do
27114: LD_ADDR_VAR 0 4
27118: PUSH
27119: DOUBLE
27120: LD_INT 0
27122: DEC
27123: ST_TO_ADDR
27124: LD_INT 5
27126: PUSH
27127: FOR_TO
27128: IFFALSE 27240
// begin _x := ShiftX ( x , i , 3 ) ;
27130: LD_ADDR_VAR 0 7
27134: PUSH
27135: LD_VAR 0 5
27139: PPUSH
27140: LD_VAR 0 4
27144: PPUSH
27145: LD_INT 3
27147: PPUSH
27148: CALL_OW 272
27152: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27153: LD_ADDR_VAR 0 8
27157: PUSH
27158: LD_VAR 0 6
27162: PPUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: LD_INT 3
27170: PPUSH
27171: CALL_OW 273
27175: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27176: LD_VAR 0 7
27180: PPUSH
27181: LD_VAR 0 8
27185: PPUSH
27186: CALL_OW 488
27190: NOT
27191: IFFALSE 27195
// continue ;
27193: GO 27127
// if HexInfo ( _x , _y ) = 0 then
27195: LD_VAR 0 7
27199: PPUSH
27200: LD_VAR 0 8
27204: PPUSH
27205: CALL_OW 428
27209: PUSH
27210: LD_INT 0
27212: EQUAL
27213: IFFALSE 27238
// begin ComMoveXY ( unit , _x , _y ) ;
27215: LD_VAR 0 1
27219: PPUSH
27220: LD_VAR 0 7
27224: PPUSH
27225: LD_VAR 0 8
27229: PPUSH
27230: CALL_OW 111
// exit ;
27234: POP
27235: POP
27236: GO 27242
// end ; end ;
27238: GO 27127
27240: POP
27241: POP
// end ;
27242: LD_VAR 0 3
27246: RET
// export function ScanBase ( side , base_area ) ; begin
27247: LD_INT 0
27249: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_VAR 0 2
27259: PPUSH
27260: LD_INT 81
27262: PUSH
27263: LD_VAR 0 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PPUSH
27272: CALL_OW 70
27276: ST_TO_ADDR
// end ;
27277: LD_VAR 0 3
27281: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
// result := false ;
27288: LD_ADDR_VAR 0 2
27292: PUSH
27293: LD_INT 0
27295: ST_TO_ADDR
// side := GetSide ( unit ) ;
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 255
27310: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27311: LD_ADDR_VAR 0 4
27315: PUSH
27316: LD_VAR 0 1
27320: PPUSH
27321: CALL_OW 248
27325: ST_TO_ADDR
// case nat of 1 :
27326: LD_VAR 0 4
27330: PUSH
27331: LD_INT 1
27333: DOUBLE
27334: EQUAL
27335: IFTRUE 27339
27337: GO 27350
27339: POP
// tech := tech_lassight ; 2 :
27340: LD_ADDR_VAR 0 5
27344: PUSH
27345: LD_INT 12
27347: ST_TO_ADDR
27348: GO 27389
27350: LD_INT 2
27352: DOUBLE
27353: EQUAL
27354: IFTRUE 27358
27356: GO 27369
27358: POP
// tech := tech_mortar ; 3 :
27359: LD_ADDR_VAR 0 5
27363: PUSH
27364: LD_INT 41
27366: ST_TO_ADDR
27367: GO 27389
27369: LD_INT 3
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27377
27375: GO 27388
27377: POP
// tech := tech_bazooka ; end ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_INT 44
27385: ST_TO_ADDR
27386: GO 27389
27388: POP
// if Researched ( side , tech ) then
27389: LD_VAR 0 3
27393: PPUSH
27394: LD_VAR 0 5
27398: PPUSH
27399: CALL_OW 325
27403: IFFALSE 27430
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27405: LD_ADDR_VAR 0 2
27409: PUSH
27410: LD_INT 5
27412: PUSH
27413: LD_INT 8
27415: PUSH
27416: LD_INT 9
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: PUSH
27424: LD_VAR 0 4
27428: ARRAY
27429: ST_TO_ADDR
// end ;
27430: LD_VAR 0 2
27434: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27435: LD_INT 0
27437: PPUSH
27438: PPUSH
27439: PPUSH
// if not mines then
27440: LD_VAR 0 2
27444: NOT
27445: IFFALSE 27449
// exit ;
27447: GO 27593
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27449: LD_ADDR_VAR 0 5
27453: PUSH
27454: LD_INT 81
27456: PUSH
27457: LD_VAR 0 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: PUSH
27469: LD_INT 21
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PPUSH
27487: CALL_OW 69
27491: ST_TO_ADDR
// for i in mines do
27492: LD_ADDR_VAR 0 4
27496: PUSH
27497: LD_VAR 0 2
27501: PUSH
27502: FOR_IN
27503: IFFALSE 27591
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27505: LD_VAR 0 4
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: LD_VAR 0 4
27518: PUSH
27519: LD_INT 2
27521: ARRAY
27522: PPUSH
27523: CALL_OW 458
27527: NOT
27528: IFFALSE 27532
// continue ;
27530: GO 27502
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27532: LD_VAR 0 4
27536: PUSH
27537: LD_INT 1
27539: ARRAY
27540: PPUSH
27541: LD_VAR 0 4
27545: PUSH
27546: LD_INT 2
27548: ARRAY
27549: PPUSH
27550: CALL_OW 428
27554: PUSH
27555: LD_VAR 0 5
27559: IN
27560: IFFALSE 27589
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27562: LD_VAR 0 4
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: LD_VAR 0 4
27575: PUSH
27576: LD_INT 2
27578: ARRAY
27579: PPUSH
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 456
// end ;
27589: GO 27502
27591: POP
27592: POP
// end ;
27593: LD_VAR 0 3
27597: RET
// export function Count ( array ) ; var i ; begin
27598: LD_INT 0
27600: PPUSH
27601: PPUSH
// result := 0 ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: LD_INT 0
27609: ST_TO_ADDR
// for i in array do
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_VAR 0 1
27619: PUSH
27620: FOR_IN
27621: IFFALSE 27645
// if i then
27623: LD_VAR 0 3
27627: IFFALSE 27643
// result := result + 1 ;
27629: LD_ADDR_VAR 0 2
27633: PUSH
27634: LD_VAR 0 2
27638: PUSH
27639: LD_INT 1
27641: PLUS
27642: ST_TO_ADDR
27643: GO 27620
27645: POP
27646: POP
// end ;
27647: LD_VAR 0 2
27651: RET
// export function IsEmpty ( building ) ; begin
27652: LD_INT 0
27654: PPUSH
// if not building then
27655: LD_VAR 0 1
27659: NOT
27660: IFFALSE 27664
// exit ;
27662: GO 27707
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27664: LD_ADDR_VAR 0 2
27668: PUSH
27669: LD_VAR 0 1
27673: PUSH
27674: LD_INT 22
27676: PUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 255
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 58
27693: PUSH
27694: EMPTY
27695: LIST
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PPUSH
27701: CALL_OW 69
27705: IN
27706: ST_TO_ADDR
// end ;
27707: LD_VAR 0 2
27711: RET
// export function IsNotFull ( building ) ; begin
27712: LD_INT 0
27714: PPUSH
// if not building then
27715: LD_VAR 0 1
27719: NOT
27720: IFFALSE 27724
// exit ;
27722: GO 27743
// result := UnitsInside ( building ) < 6 ;
27724: LD_ADDR_VAR 0 2
27728: PUSH
27729: LD_VAR 0 1
27733: PPUSH
27734: CALL_OW 313
27738: PUSH
27739: LD_INT 6
27741: LESS
27742: ST_TO_ADDR
// end ;
27743: LD_VAR 0 2
27747: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
// tmp := [ ] ;
27754: LD_ADDR_VAR 0 3
27758: PUSH
27759: EMPTY
27760: ST_TO_ADDR
// list := [ ] ;
27761: LD_ADDR_VAR 0 5
27765: PUSH
27766: EMPTY
27767: ST_TO_ADDR
// for i = 16 to 25 do
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: DOUBLE
27774: LD_INT 16
27776: DEC
27777: ST_TO_ADDR
27778: LD_INT 25
27780: PUSH
27781: FOR_TO
27782: IFFALSE 27855
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27784: LD_ADDR_VAR 0 3
27788: PUSH
27789: LD_VAR 0 3
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_VAR 0 1
27801: PPUSH
27802: CALL_OW 255
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 91
27813: PUSH
27814: LD_VAR 0 1
27818: PUSH
27819: LD_INT 6
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 30
27829: PUSH
27830: LD_VAR 0 4
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: PPUSH
27847: CALL_OW 69
27851: ADD
27852: ST_TO_ADDR
27853: GO 27781
27855: POP
27856: POP
// for i = 1 to tmp do
27857: LD_ADDR_VAR 0 4
27861: PUSH
27862: DOUBLE
27863: LD_INT 1
27865: DEC
27866: ST_TO_ADDR
27867: LD_VAR 0 3
27871: PUSH
27872: FOR_TO
27873: IFFALSE 27961
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27875: LD_ADDR_VAR 0 5
27879: PUSH
27880: LD_VAR 0 5
27884: PUSH
27885: LD_VAR 0 3
27889: PUSH
27890: LD_VAR 0 4
27894: ARRAY
27895: PPUSH
27896: CALL_OW 266
27900: PUSH
27901: LD_VAR 0 3
27905: PUSH
27906: LD_VAR 0 4
27910: ARRAY
27911: PPUSH
27912: CALL_OW 250
27916: PUSH
27917: LD_VAR 0 3
27921: PUSH
27922: LD_VAR 0 4
27926: ARRAY
27927: PPUSH
27928: CALL_OW 251
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_VAR 0 4
27942: ARRAY
27943: PPUSH
27944: CALL_OW 254
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: ADD
27958: ST_TO_ADDR
27959: GO 27872
27961: POP
27962: POP
// result := list ;
27963: LD_ADDR_VAR 0 2
27967: PUSH
27968: LD_VAR 0 5
27972: ST_TO_ADDR
// end ;
27973: LD_VAR 0 2
27977: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27978: LD_INT 0
27980: PPUSH
27981: PPUSH
27982: PPUSH
27983: PPUSH
27984: PPUSH
27985: PPUSH
27986: PPUSH
// if not factory then
27987: LD_VAR 0 1
27991: NOT
27992: IFFALSE 27996
// exit ;
27994: GO 28589
// if control = control_apeman then
27996: LD_VAR 0 4
28000: PUSH
28001: LD_INT 5
28003: EQUAL
28004: IFFALSE 28113
// begin tmp := UnitsInside ( factory ) ;
28006: LD_ADDR_VAR 0 8
28010: PUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 313
28020: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28021: LD_VAR 0 8
28025: PPUSH
28026: LD_INT 25
28028: PUSH
28029: LD_INT 12
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PPUSH
28036: CALL_OW 72
28040: NOT
28041: IFFALSE 28051
// control := control_manual ;
28043: LD_ADDR_VAR 0 4
28047: PUSH
28048: LD_INT 1
28050: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28051: LD_ADDR_VAR 0 8
28055: PUSH
28056: LD_VAR 0 1
28060: PPUSH
28061: CALL 27748 0 1
28065: ST_TO_ADDR
// if tmp then
28066: LD_VAR 0 8
28070: IFFALSE 28113
// begin for i in tmp do
28072: LD_ADDR_VAR 0 7
28076: PUSH
28077: LD_VAR 0 8
28081: PUSH
28082: FOR_IN
28083: IFFALSE 28111
// if i [ 1 ] = b_ext_radio then
28085: LD_VAR 0 7
28089: PUSH
28090: LD_INT 1
28092: ARRAY
28093: PUSH
28094: LD_INT 22
28096: EQUAL
28097: IFFALSE 28109
// begin control := control_remote ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_INT 2
28106: ST_TO_ADDR
// break ;
28107: GO 28111
// end ;
28109: GO 28082
28111: POP
28112: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28113: LD_VAR 0 1
28117: PPUSH
28118: LD_VAR 0 2
28122: PPUSH
28123: LD_VAR 0 3
28127: PPUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: LD_VAR 0 5
28137: PPUSH
28138: CALL_OW 448
28142: IFFALSE 28177
// begin result := [ chassis , engine , control , weapon ] ;
28144: LD_ADDR_VAR 0 6
28148: PUSH
28149: LD_VAR 0 2
28153: PUSH
28154: LD_VAR 0 3
28158: PUSH
28159: LD_VAR 0 4
28163: PUSH
28164: LD_VAR 0 5
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// exit ;
28175: GO 28589
// end ; _chassis := AvailableChassisList ( factory ) ;
28177: LD_ADDR_VAR 0 9
28181: PUSH
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 475
28191: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28192: LD_ADDR_VAR 0 11
28196: PUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 476
28206: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28207: LD_ADDR_VAR 0 12
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 477
28221: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28222: LD_ADDR_VAR 0 10
28226: PUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 478
28236: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28237: LD_VAR 0 9
28241: NOT
28242: PUSH
28243: LD_VAR 0 11
28247: NOT
28248: OR
28249: PUSH
28250: LD_VAR 0 12
28254: NOT
28255: OR
28256: PUSH
28257: LD_VAR 0 10
28261: NOT
28262: OR
28263: IFFALSE 28298
// begin result := [ chassis , engine , control , weapon ] ;
28265: LD_ADDR_VAR 0 6
28269: PUSH
28270: LD_VAR 0 2
28274: PUSH
28275: LD_VAR 0 3
28279: PUSH
28280: LD_VAR 0 4
28284: PUSH
28285: LD_VAR 0 5
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
// exit ;
28296: GO 28589
// end ; if not chassis in _chassis then
28298: LD_VAR 0 2
28302: PUSH
28303: LD_VAR 0 9
28307: IN
28308: NOT
28309: IFFALSE 28335
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28311: LD_ADDR_VAR 0 2
28315: PUSH
28316: LD_VAR 0 9
28320: PUSH
28321: LD_INT 1
28323: PPUSH
28324: LD_VAR 0 9
28328: PPUSH
28329: CALL_OW 12
28333: ARRAY
28334: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28335: LD_VAR 0 2
28339: PPUSH
28340: LD_VAR 0 3
28344: PPUSH
28345: CALL 28594 0 2
28349: NOT
28350: IFFALSE 28409
// repeat engine := _engine [ 1 ] ;
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_VAR 0 11
28361: PUSH
28362: LD_INT 1
28364: ARRAY
28365: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28366: LD_ADDR_VAR 0 11
28370: PUSH
28371: LD_VAR 0 11
28375: PPUSH
28376: LD_INT 1
28378: PPUSH
28379: CALL_OW 3
28383: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL 28594 0 2
28398: PUSH
28399: LD_VAR 0 11
28403: PUSH
28404: EMPTY
28405: EQUAL
28406: OR
28407: IFFALSE 28352
// if not control in _control then
28409: LD_VAR 0 4
28413: PUSH
28414: LD_VAR 0 12
28418: IN
28419: NOT
28420: IFFALSE 28446
// control := _control [ rand ( 1 , _control ) ] ;
28422: LD_ADDR_VAR 0 4
28426: PUSH
28427: LD_VAR 0 12
28431: PUSH
28432: LD_INT 1
28434: PPUSH
28435: LD_VAR 0 12
28439: PPUSH
28440: CALL_OW 12
28444: ARRAY
28445: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: CALL 28814 0 2
28460: NOT
28461: IFFALSE 28520
// repeat weapon := _weapon [ 1 ] ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_VAR 0 10
28472: PUSH
28473: LD_INT 1
28475: ARRAY
28476: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28477: LD_ADDR_VAR 0 10
28481: PUSH
28482: LD_VAR 0 10
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: CALL_OW 3
28494: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28495: LD_VAR 0 2
28499: PPUSH
28500: LD_VAR 0 5
28504: PPUSH
28505: CALL 28814 0 2
28509: PUSH
28510: LD_VAR 0 10
28514: PUSH
28515: EMPTY
28516: EQUAL
28517: OR
28518: IFFALSE 28463
// result := [ ] ;
28520: LD_ADDR_VAR 0 6
28524: PUSH
28525: EMPTY
28526: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28527: LD_VAR 0 1
28531: PPUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: LD_VAR 0 4
28546: PPUSH
28547: LD_VAR 0 5
28551: PPUSH
28552: CALL_OW 448
28556: IFFALSE 28589
// result := [ chassis , engine , control , weapon ] ;
28558: LD_ADDR_VAR 0 6
28562: PUSH
28563: LD_VAR 0 2
28567: PUSH
28568: LD_VAR 0 3
28572: PUSH
28573: LD_VAR 0 4
28577: PUSH
28578: LD_VAR 0 5
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
// end ;
28589: LD_VAR 0 6
28593: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28594: LD_INT 0
28596: PPUSH
// if not chassis or not engine then
28597: LD_VAR 0 1
28601: NOT
28602: PUSH
28603: LD_VAR 0 2
28607: NOT
28608: OR
28609: IFFALSE 28613
// exit ;
28611: GO 28809
// case engine of engine_solar :
28613: LD_VAR 0 2
28617: PUSH
28618: LD_INT 2
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28664
28626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_INT 11
28634: PUSH
28635: LD_INT 12
28637: PUSH
28638: LD_INT 13
28640: PUSH
28641: LD_INT 14
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 3
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: ST_TO_ADDR
28662: GO 28793
28664: LD_INT 1
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28734
28672: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_INT 11
28680: PUSH
28681: LD_INT 12
28683: PUSH
28684: LD_INT 13
28686: PUSH
28687: LD_INT 14
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: LD_INT 3
28698: PUSH
28699: LD_INT 4
28701: PUSH
28702: LD_INT 5
28704: PUSH
28705: LD_INT 21
28707: PUSH
28708: LD_INT 23
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_INT 24
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 28793
28734: LD_INT 3
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28792
28742: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_INT 13
28750: PUSH
28751: LD_INT 14
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: LD_INT 4
28762: PUSH
28763: LD_INT 5
28765: PUSH
28766: LD_INT 21
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_INT 23
28774: PUSH
28775: LD_INT 24
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 28793
28792: POP
// result := ( chassis in result ) ;
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_VAR 0 1
28802: PUSH
28803: LD_VAR 0 3
28807: IN
28808: ST_TO_ADDR
// end ;
28809: LD_VAR 0 3
28813: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28814: LD_INT 0
28816: PPUSH
// if not chassis or not weapon then
28817: LD_VAR 0 1
28821: NOT
28822: PUSH
28823: LD_VAR 0 2
28827: NOT
28828: OR
28829: IFFALSE 28833
// exit ;
28831: GO 29859
// case weapon of us_machine_gun :
28833: LD_VAR 0 2
28837: PUSH
28838: LD_INT 2
28840: DOUBLE
28841: EQUAL
28842: IFTRUE 28846
28844: GO 28876
28846: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: LD_INT 4
28863: PUSH
28864: LD_INT 5
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
28874: GO 29843
28876: LD_INT 3
28878: DOUBLE
28879: EQUAL
28880: IFTRUE 28884
28882: GO 28914
28884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28885: LD_ADDR_VAR 0 3
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: LD_INT 3
28898: PUSH
28899: LD_INT 4
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
28912: GO 29843
28914: LD_INT 11
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28952
28922: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28923: LD_ADDR_VAR 0 3
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: LD_INT 3
28936: PUSH
28937: LD_INT 4
28939: PUSH
28940: LD_INT 5
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 29843
28952: LD_INT 4
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28986
28960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 4
28974: PUSH
28975: LD_INT 5
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
28984: GO 29843
28986: LD_INT 5
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29020
28994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: LD_INT 4
29008: PUSH
29009: LD_INT 5
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
29018: GO 29843
29020: LD_INT 9
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29028
29026: GO 29054
29028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: LD_INT 3
29039: PUSH
29040: LD_INT 4
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
29052: GO 29843
29054: LD_INT 7
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29088
29062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: LD_INT 4
29076: PUSH
29077: LD_INT 5
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: ST_TO_ADDR
29086: GO 29843
29088: LD_INT 12
29090: DOUBLE
29091: EQUAL
29092: IFTRUE 29096
29094: GO 29122
29096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29097: LD_ADDR_VAR 0 3
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: LD_INT 3
29107: PUSH
29108: LD_INT 4
29110: PUSH
29111: LD_INT 5
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: ST_TO_ADDR
29120: GO 29843
29122: LD_INT 13
29124: DOUBLE
29125: EQUAL
29126: IFTRUE 29130
29128: GO 29156
29130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29131: LD_ADDR_VAR 0 3
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: LD_INT 4
29144: PUSH
29145: LD_INT 5
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
29154: GO 29843
29156: LD_INT 14
29158: DOUBLE
29159: EQUAL
29160: IFTRUE 29164
29162: GO 29182
29164: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29165: LD_ADDR_VAR 0 3
29169: PUSH
29170: LD_INT 4
29172: PUSH
29173: LD_INT 5
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: ST_TO_ADDR
29180: GO 29843
29182: LD_INT 6
29184: DOUBLE
29185: EQUAL
29186: IFTRUE 29190
29188: GO 29208
29190: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29191: LD_ADDR_VAR 0 3
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 5
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: ST_TO_ADDR
29206: GO 29843
29208: LD_INT 10
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29234
29216: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_INT 4
29224: PUSH
29225: LD_INT 5
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: ST_TO_ADDR
29232: GO 29843
29234: LD_INT 22
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29268
29242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29243: LD_ADDR_VAR 0 3
29247: PUSH
29248: LD_INT 11
29250: PUSH
29251: LD_INT 12
29253: PUSH
29254: LD_INT 13
29256: PUSH
29257: LD_INT 14
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
29266: GO 29843
29268: LD_INT 23
29270: DOUBLE
29271: EQUAL
29272: IFTRUE 29276
29274: GO 29302
29276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29277: LD_ADDR_VAR 0 3
29281: PUSH
29282: LD_INT 11
29284: PUSH
29285: LD_INT 12
29287: PUSH
29288: LD_INT 13
29290: PUSH
29291: LD_INT 14
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
29300: GO 29843
29302: LD_INT 24
29304: DOUBLE
29305: EQUAL
29306: IFTRUE 29310
29308: GO 29336
29310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29311: LD_ADDR_VAR 0 3
29315: PUSH
29316: LD_INT 11
29318: PUSH
29319: LD_INT 12
29321: PUSH
29322: LD_INT 13
29324: PUSH
29325: LD_INT 14
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: ST_TO_ADDR
29334: GO 29843
29336: LD_INT 30
29338: DOUBLE
29339: EQUAL
29340: IFTRUE 29344
29342: GO 29370
29344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_INT 11
29352: PUSH
29353: LD_INT 12
29355: PUSH
29356: LD_INT 13
29358: PUSH
29359: LD_INT 14
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: ST_TO_ADDR
29368: GO 29843
29370: LD_INT 25
29372: DOUBLE
29373: EQUAL
29374: IFTRUE 29378
29376: GO 29396
29378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 13
29386: PUSH
29387: LD_INT 14
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: ST_TO_ADDR
29394: GO 29843
29396: LD_INT 27
29398: DOUBLE
29399: EQUAL
29400: IFTRUE 29404
29402: GO 29422
29404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_INT 13
29412: PUSH
29413: LD_INT 14
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: ST_TO_ADDR
29420: GO 29843
29422: LD_INT 28
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29430
29428: GO 29448
29430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_INT 13
29438: PUSH
29439: LD_INT 14
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: ST_TO_ADDR
29446: GO 29843
29448: LD_INT 29
29450: DOUBLE
29451: EQUAL
29452: IFTRUE 29456
29454: GO 29474
29456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29457: LD_ADDR_VAR 0 3
29461: PUSH
29462: LD_INT 13
29464: PUSH
29465: LD_INT 14
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 29843
29474: LD_INT 31
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29500
29482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 13
29490: PUSH
29491: LD_INT 14
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: ST_TO_ADDR
29498: GO 29843
29500: LD_INT 26
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29526
29508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29509: LD_ADDR_VAR 0 3
29513: PUSH
29514: LD_INT 13
29516: PUSH
29517: LD_INT 14
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: ST_TO_ADDR
29524: GO 29843
29526: LD_INT 42
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29560
29534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 21
29542: PUSH
29543: LD_INT 22
29545: PUSH
29546: LD_INT 23
29548: PUSH
29549: LD_INT 24
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: ST_TO_ADDR
29558: GO 29843
29560: LD_INT 43
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29594
29568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 22
29579: PUSH
29580: LD_INT 23
29582: PUSH
29583: LD_INT 24
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 29843
29594: LD_INT 44
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29628
29602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 21
29610: PUSH
29611: LD_INT 22
29613: PUSH
29614: LD_INT 23
29616: PUSH
29617: LD_INT 24
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
29626: GO 29843
29628: LD_INT 45
29630: DOUBLE
29631: EQUAL
29632: IFTRUE 29636
29634: GO 29662
29636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: LD_INT 21
29644: PUSH
29645: LD_INT 22
29647: PUSH
29648: LD_INT 23
29650: PUSH
29651: LD_INT 24
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
29660: GO 29843
29662: LD_INT 49
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29670
29668: GO 29696
29670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_INT 21
29678: PUSH
29679: LD_INT 22
29681: PUSH
29682: LD_INT 23
29684: PUSH
29685: LD_INT 24
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
29694: GO 29843
29696: LD_INT 51
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29730
29704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29705: LD_ADDR_VAR 0 3
29709: PUSH
29710: LD_INT 21
29712: PUSH
29713: LD_INT 22
29715: PUSH
29716: LD_INT 23
29718: PUSH
29719: LD_INT 24
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: ST_TO_ADDR
29728: GO 29843
29730: LD_INT 52
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29764
29738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 21
29746: PUSH
29747: LD_INT 22
29749: PUSH
29750: LD_INT 23
29752: PUSH
29753: LD_INT 24
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
29762: GO 29843
29764: LD_INT 53
29766: DOUBLE
29767: EQUAL
29768: IFTRUE 29772
29770: GO 29790
29772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29773: LD_ADDR_VAR 0 3
29777: PUSH
29778: LD_INT 23
29780: PUSH
29781: LD_INT 24
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 29843
29790: LD_INT 46
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29816
29798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 23
29806: PUSH
29807: LD_INT 24
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: ST_TO_ADDR
29814: GO 29843
29816: LD_INT 47
29818: DOUBLE
29819: EQUAL
29820: IFTRUE 29824
29822: GO 29842
29824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29825: LD_ADDR_VAR 0 3
29829: PUSH
29830: LD_INT 23
29832: PUSH
29833: LD_INT 24
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: ST_TO_ADDR
29840: GO 29843
29842: POP
// result := ( chassis in result ) ;
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_VAR 0 1
29852: PUSH
29853: LD_VAR 0 3
29857: IN
29858: ST_TO_ADDR
// end ;
29859: LD_VAR 0 3
29863: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29864: LD_INT 0
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
// result := array ;
29873: LD_ADDR_VAR 0 5
29877: PUSH
29878: LD_VAR 0 1
29882: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29883: LD_VAR 0 1
29887: NOT
29888: PUSH
29889: LD_VAR 0 2
29893: NOT
29894: OR
29895: PUSH
29896: LD_VAR 0 3
29900: NOT
29901: OR
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_VAR 0 1
29912: GREATER
29913: OR
29914: PUSH
29915: LD_VAR 0 3
29919: PUSH
29920: LD_VAR 0 1
29924: GREATER
29925: OR
29926: IFFALSE 29930
// exit ;
29928: GO 30226
// if direction then
29930: LD_VAR 0 4
29934: IFFALSE 29998
// begin d := 1 ;
29936: LD_ADDR_VAR 0 9
29940: PUSH
29941: LD_INT 1
29943: ST_TO_ADDR
// if i_from > i_to then
29944: LD_VAR 0 2
29948: PUSH
29949: LD_VAR 0 3
29953: GREATER
29954: IFFALSE 29980
// length := ( array - i_from ) + i_to else
29956: LD_ADDR_VAR 0 11
29960: PUSH
29961: LD_VAR 0 1
29965: PUSH
29966: LD_VAR 0 2
29970: MINUS
29971: PUSH
29972: LD_VAR 0 3
29976: PLUS
29977: ST_TO_ADDR
29978: GO 29996
// length := i_to - i_from ;
29980: LD_ADDR_VAR 0 11
29984: PUSH
29985: LD_VAR 0 3
29989: PUSH
29990: LD_VAR 0 2
29994: MINUS
29995: ST_TO_ADDR
// end else
29996: GO 30059
// begin d := - 1 ;
29998: LD_ADDR_VAR 0 9
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: ST_TO_ADDR
// if i_from > i_to then
30007: LD_VAR 0 2
30011: PUSH
30012: LD_VAR 0 3
30016: GREATER
30017: IFFALSE 30037
// length := i_from - i_to else
30019: LD_ADDR_VAR 0 11
30023: PUSH
30024: LD_VAR 0 2
30028: PUSH
30029: LD_VAR 0 3
30033: MINUS
30034: ST_TO_ADDR
30035: GO 30059
// length := ( array - i_to ) + i_from ;
30037: LD_ADDR_VAR 0 11
30041: PUSH
30042: LD_VAR 0 1
30046: PUSH
30047: LD_VAR 0 3
30051: MINUS
30052: PUSH
30053: LD_VAR 0 2
30057: PLUS
30058: ST_TO_ADDR
// end ; if not length then
30059: LD_VAR 0 11
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30226
// tmp := array ;
30068: LD_ADDR_VAR 0 10
30072: PUSH
30073: LD_VAR 0 1
30077: ST_TO_ADDR
// for i = 1 to length do
30078: LD_ADDR_VAR 0 6
30082: PUSH
30083: DOUBLE
30084: LD_INT 1
30086: DEC
30087: ST_TO_ADDR
30088: LD_VAR 0 11
30092: PUSH
30093: FOR_TO
30094: IFFALSE 30214
// begin for j = 1 to array do
30096: LD_ADDR_VAR 0 7
30100: PUSH
30101: DOUBLE
30102: LD_INT 1
30104: DEC
30105: ST_TO_ADDR
30106: LD_VAR 0 1
30110: PUSH
30111: FOR_TO
30112: IFFALSE 30200
// begin k := j + d ;
30114: LD_ADDR_VAR 0 8
30118: PUSH
30119: LD_VAR 0 7
30123: PUSH
30124: LD_VAR 0 9
30128: PLUS
30129: ST_TO_ADDR
// if k > array then
30130: LD_VAR 0 8
30134: PUSH
30135: LD_VAR 0 1
30139: GREATER
30140: IFFALSE 30150
// k := 1 ;
30142: LD_ADDR_VAR 0 8
30146: PUSH
30147: LD_INT 1
30149: ST_TO_ADDR
// if not k then
30150: LD_VAR 0 8
30154: NOT
30155: IFFALSE 30167
// k := array ;
30157: LD_ADDR_VAR 0 8
30161: PUSH
30162: LD_VAR 0 1
30166: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30167: LD_ADDR_VAR 0 10
30171: PUSH
30172: LD_VAR 0 10
30176: PPUSH
30177: LD_VAR 0 8
30181: PPUSH
30182: LD_VAR 0 1
30186: PUSH
30187: LD_VAR 0 7
30191: ARRAY
30192: PPUSH
30193: CALL_OW 1
30197: ST_TO_ADDR
// end ;
30198: GO 30111
30200: POP
30201: POP
// array := tmp ;
30202: LD_ADDR_VAR 0 1
30206: PUSH
30207: LD_VAR 0 10
30211: ST_TO_ADDR
// end ;
30212: GO 30093
30214: POP
30215: POP
// result := array ;
30216: LD_ADDR_VAR 0 5
30220: PUSH
30221: LD_VAR 0 1
30225: ST_TO_ADDR
// end ;
30226: LD_VAR 0 5
30230: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
// result := 0 ;
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_INT 0
30242: ST_TO_ADDR
// if not array or not value in array then
30243: LD_VAR 0 1
30247: NOT
30248: PUSH
30249: LD_VAR 0 2
30253: PUSH
30254: LD_VAR 0 1
30258: IN
30259: NOT
30260: OR
30261: IFFALSE 30265
// exit ;
30263: GO 30319
// for i = 1 to array do
30265: LD_ADDR_VAR 0 4
30269: PUSH
30270: DOUBLE
30271: LD_INT 1
30273: DEC
30274: ST_TO_ADDR
30275: LD_VAR 0 1
30279: PUSH
30280: FOR_TO
30281: IFFALSE 30317
// if value = array [ i ] then
30283: LD_VAR 0 2
30287: PUSH
30288: LD_VAR 0 1
30292: PUSH
30293: LD_VAR 0 4
30297: ARRAY
30298: EQUAL
30299: IFFALSE 30315
// begin result := i ;
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_VAR 0 4
30310: ST_TO_ADDR
// exit ;
30311: POP
30312: POP
30313: GO 30319
// end ;
30315: GO 30280
30317: POP
30318: POP
// end ;
30319: LD_VAR 0 3
30323: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30324: LD_INT 0
30326: PPUSH
// vc_chassis := chassis ;
30327: LD_ADDR_OWVAR 37
30331: PUSH
30332: LD_VAR 0 1
30336: ST_TO_ADDR
// vc_engine := engine ;
30337: LD_ADDR_OWVAR 39
30341: PUSH
30342: LD_VAR 0 2
30346: ST_TO_ADDR
// vc_control := control ;
30347: LD_ADDR_OWVAR 38
30351: PUSH
30352: LD_VAR 0 3
30356: ST_TO_ADDR
// vc_weapon := weapon ;
30357: LD_ADDR_OWVAR 40
30361: PUSH
30362: LD_VAR 0 4
30366: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30367: LD_ADDR_OWVAR 41
30371: PUSH
30372: LD_VAR 0 5
30376: ST_TO_ADDR
// end ;
30377: LD_VAR 0 6
30381: RET
// export function WantPlant ( unit ) ; var task ; begin
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
// result := false ;
30386: LD_ADDR_VAR 0 2
30390: PUSH
30391: LD_INT 0
30393: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: LD_VAR 0 1
30403: PPUSH
30404: CALL_OW 437
30408: ST_TO_ADDR
// if task then
30409: LD_VAR 0 3
30413: IFFALSE 30441
// if task [ 1 ] [ 1 ] = p then
30415: LD_VAR 0 3
30419: PUSH
30420: LD_INT 1
30422: ARRAY
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PUSH
30428: LD_STRING p
30430: EQUAL
30431: IFFALSE 30441
// result := true ;
30433: LD_ADDR_VAR 0 2
30437: PUSH
30438: LD_INT 1
30440: ST_TO_ADDR
// end ;
30441: LD_VAR 0 2
30445: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30446: LD_INT 0
30448: PPUSH
30449: PPUSH
30450: PPUSH
30451: PPUSH
// if pos < 1 then
30452: LD_VAR 0 2
30456: PUSH
30457: LD_INT 1
30459: LESS
30460: IFFALSE 30464
// exit ;
30462: GO 30767
// if pos = 1 then
30464: LD_VAR 0 2
30468: PUSH
30469: LD_INT 1
30471: EQUAL
30472: IFFALSE 30505
// result := Replace ( arr , pos [ 1 ] , value ) else
30474: LD_ADDR_VAR 0 4
30478: PUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: LD_VAR 0 2
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: PPUSH
30493: LD_VAR 0 3
30497: PPUSH
30498: CALL_OW 1
30502: ST_TO_ADDR
30503: GO 30767
// begin tmp := arr ;
30505: LD_ADDR_VAR 0 6
30509: PUSH
30510: LD_VAR 0 1
30514: ST_TO_ADDR
// s_arr := [ tmp ] ;
30515: LD_ADDR_VAR 0 7
30519: PUSH
30520: LD_VAR 0 6
30524: PUSH
30525: EMPTY
30526: LIST
30527: ST_TO_ADDR
// for i = 1 to pos - 1 do
30528: LD_ADDR_VAR 0 5
30532: PUSH
30533: DOUBLE
30534: LD_INT 1
30536: DEC
30537: ST_TO_ADDR
30538: LD_VAR 0 2
30542: PUSH
30543: LD_INT 1
30545: MINUS
30546: PUSH
30547: FOR_TO
30548: IFFALSE 30593
// begin tmp := tmp [ pos [ i ] ] ;
30550: LD_ADDR_VAR 0 6
30554: PUSH
30555: LD_VAR 0 6
30559: PUSH
30560: LD_VAR 0 2
30564: PUSH
30565: LD_VAR 0 5
30569: ARRAY
30570: ARRAY
30571: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30572: LD_ADDR_VAR 0 7
30576: PUSH
30577: LD_VAR 0 7
30581: PUSH
30582: LD_VAR 0 6
30586: PUSH
30587: EMPTY
30588: LIST
30589: ADD
30590: ST_TO_ADDR
// end ;
30591: GO 30547
30593: POP
30594: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30595: LD_ADDR_VAR 0 6
30599: PUSH
30600: LD_VAR 0 6
30604: PPUSH
30605: LD_VAR 0 2
30609: PUSH
30610: LD_VAR 0 2
30614: ARRAY
30615: PPUSH
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 1
30625: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30626: LD_ADDR_VAR 0 7
30630: PUSH
30631: LD_VAR 0 7
30635: PPUSH
30636: LD_VAR 0 7
30640: PPUSH
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 1
30650: ST_TO_ADDR
// for i = s_arr downto 2 do
30651: LD_ADDR_VAR 0 5
30655: PUSH
30656: DOUBLE
30657: LD_VAR 0 7
30661: INC
30662: ST_TO_ADDR
30663: LD_INT 2
30665: PUSH
30666: FOR_DOWNTO
30667: IFFALSE 30751
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30669: LD_ADDR_VAR 0 6
30673: PUSH
30674: LD_VAR 0 7
30678: PUSH
30679: LD_VAR 0 5
30683: PUSH
30684: LD_INT 1
30686: MINUS
30687: ARRAY
30688: PPUSH
30689: LD_VAR 0 2
30693: PUSH
30694: LD_VAR 0 5
30698: PUSH
30699: LD_INT 1
30701: MINUS
30702: ARRAY
30703: PPUSH
30704: LD_VAR 0 7
30708: PUSH
30709: LD_VAR 0 5
30713: ARRAY
30714: PPUSH
30715: CALL_OW 1
30719: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30720: LD_ADDR_VAR 0 7
30724: PUSH
30725: LD_VAR 0 7
30729: PPUSH
30730: LD_VAR 0 5
30734: PUSH
30735: LD_INT 1
30737: MINUS
30738: PPUSH
30739: LD_VAR 0 6
30743: PPUSH
30744: CALL_OW 1
30748: ST_TO_ADDR
// end ;
30749: GO 30666
30751: POP
30752: POP
// result := s_arr [ 1 ] ;
30753: LD_ADDR_VAR 0 4
30757: PUSH
30758: LD_VAR 0 7
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: ST_TO_ADDR
// end ; end ;
30767: LD_VAR 0 4
30771: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30772: LD_INT 0
30774: PPUSH
30775: PPUSH
// if not list then
30776: LD_VAR 0 1
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 30876
// i := list [ pos1 ] ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_VAR 0 1
30794: PUSH
30795: LD_VAR 0 2
30799: ARRAY
30800: ST_TO_ADDR
// if not i then
30801: LD_VAR 0 5
30805: NOT
30806: IFFALSE 30810
// exit ;
30808: GO 30876
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30810: LD_ADDR_VAR 0 1
30814: PUSH
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 2
30824: PPUSH
30825: LD_VAR 0 1
30829: PUSH
30830: LD_VAR 0 3
30834: ARRAY
30835: PPUSH
30836: CALL_OW 1
30840: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30841: LD_ADDR_VAR 0 1
30845: PUSH
30846: LD_VAR 0 1
30850: PPUSH
30851: LD_VAR 0 3
30855: PPUSH
30856: LD_VAR 0 5
30860: PPUSH
30861: CALL_OW 1
30865: ST_TO_ADDR
// result := list ;
30866: LD_ADDR_VAR 0 4
30870: PUSH
30871: LD_VAR 0 1
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 4
30880: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30881: LD_INT 0
30883: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30884: LD_ADDR_VAR 0 5
30888: PUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 250
30898: PPUSH
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL_OW 251
30908: PPUSH
30909: LD_VAR 0 2
30913: PPUSH
30914: LD_VAR 0 3
30918: PPUSH
30919: LD_VAR 0 4
30923: PPUSH
30924: CALL 30934 0 5
30928: ST_TO_ADDR
// end ;
30929: LD_VAR 0 5
30933: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
// if not list then
30940: LD_VAR 0 3
30944: NOT
30945: IFFALSE 30949
// exit ;
30947: GO 31337
// result := [ ] ;
30949: LD_ADDR_VAR 0 6
30953: PUSH
30954: EMPTY
30955: ST_TO_ADDR
// for i in list do
30956: LD_ADDR_VAR 0 7
30960: PUSH
30961: LD_VAR 0 3
30965: PUSH
30966: FOR_IN
30967: IFFALSE 31169
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30969: LD_ADDR_VAR 0 9
30973: PUSH
30974: LD_VAR 0 7
30978: PPUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: LD_VAR 0 2
30988: PPUSH
30989: CALL_OW 297
30993: ST_TO_ADDR
// if not result then
30994: LD_VAR 0 6
30998: NOT
30999: IFFALSE 31025
// result := [ [ i , tmp ] ] else
31001: LD_ADDR_VAR 0 6
31005: PUSH
31006: LD_VAR 0 7
31010: PUSH
31011: LD_VAR 0 9
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: ST_TO_ADDR
31023: GO 31167
// begin if result [ result ] [ 2 ] < tmp then
31025: LD_VAR 0 6
31029: PUSH
31030: LD_VAR 0 6
31034: ARRAY
31035: PUSH
31036: LD_INT 2
31038: ARRAY
31039: PUSH
31040: LD_VAR 0 9
31044: LESS
31045: IFFALSE 31087
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31047: LD_ADDR_VAR 0 6
31051: PUSH
31052: LD_VAR 0 6
31056: PPUSH
31057: LD_VAR 0 6
31061: PUSH
31062: LD_INT 1
31064: PLUS
31065: PPUSH
31066: LD_VAR 0 7
31070: PUSH
31071: LD_VAR 0 9
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PPUSH
31080: CALL_OW 2
31084: ST_TO_ADDR
31085: GO 31167
// for j = 1 to result do
31087: LD_ADDR_VAR 0 8
31091: PUSH
31092: DOUBLE
31093: LD_INT 1
31095: DEC
31096: ST_TO_ADDR
31097: LD_VAR 0 6
31101: PUSH
31102: FOR_TO
31103: IFFALSE 31165
// begin if tmp < result [ j ] [ 2 ] then
31105: LD_VAR 0 9
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: LD_VAR 0 8
31119: ARRAY
31120: PUSH
31121: LD_INT 2
31123: ARRAY
31124: LESS
31125: IFFALSE 31163
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31127: LD_ADDR_VAR 0 6
31131: PUSH
31132: LD_VAR 0 6
31136: PPUSH
31137: LD_VAR 0 8
31141: PPUSH
31142: LD_VAR 0 7
31146: PUSH
31147: LD_VAR 0 9
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PPUSH
31156: CALL_OW 2
31160: ST_TO_ADDR
// break ;
31161: GO 31165
// end ; end ;
31163: GO 31102
31165: POP
31166: POP
// end ; end ;
31167: GO 30966
31169: POP
31170: POP
// if result and not asc then
31171: LD_VAR 0 6
31175: PUSH
31176: LD_VAR 0 4
31180: NOT
31181: AND
31182: IFFALSE 31257
// begin tmp := result ;
31184: LD_ADDR_VAR 0 9
31188: PUSH
31189: LD_VAR 0 6
31193: ST_TO_ADDR
// for i = tmp downto 1 do
31194: LD_ADDR_VAR 0 7
31198: PUSH
31199: DOUBLE
31200: LD_VAR 0 9
31204: INC
31205: ST_TO_ADDR
31206: LD_INT 1
31208: PUSH
31209: FOR_DOWNTO
31210: IFFALSE 31255
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31212: LD_ADDR_VAR 0 6
31216: PUSH
31217: LD_VAR 0 6
31221: PPUSH
31222: LD_VAR 0 9
31226: PUSH
31227: LD_VAR 0 7
31231: MINUS
31232: PUSH
31233: LD_INT 1
31235: PLUS
31236: PPUSH
31237: LD_VAR 0 9
31241: PUSH
31242: LD_VAR 0 7
31246: ARRAY
31247: PPUSH
31248: CALL_OW 1
31252: ST_TO_ADDR
31253: GO 31209
31255: POP
31256: POP
// end ; tmp := [ ] ;
31257: LD_ADDR_VAR 0 9
31261: PUSH
31262: EMPTY
31263: ST_TO_ADDR
// if mode then
31264: LD_VAR 0 5
31268: IFFALSE 31337
// begin for i = 1 to result do
31270: LD_ADDR_VAR 0 7
31274: PUSH
31275: DOUBLE
31276: LD_INT 1
31278: DEC
31279: ST_TO_ADDR
31280: LD_VAR 0 6
31284: PUSH
31285: FOR_TO
31286: IFFALSE 31325
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31288: LD_ADDR_VAR 0 9
31292: PUSH
31293: LD_VAR 0 9
31297: PPUSH
31298: LD_VAR 0 7
31302: PPUSH
31303: LD_VAR 0 6
31307: PUSH
31308: LD_VAR 0 7
31312: ARRAY
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PPUSH
31318: CALL_OW 1
31322: ST_TO_ADDR
31323: GO 31285
31325: POP
31326: POP
// result := tmp ;
31327: LD_ADDR_VAR 0 6
31331: PUSH
31332: LD_VAR 0 9
31336: ST_TO_ADDR
// end ; end ;
31337: LD_VAR 0 6
31341: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: EMPTY
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
// if not x or not y then
31372: LD_VAR 0 2
31376: NOT
31377: PUSH
31378: LD_VAR 0 3
31382: NOT
31383: OR
31384: IFFALSE 31388
// exit ;
31386: GO 33034
// if not range then
31388: LD_VAR 0 4
31392: NOT
31393: IFFALSE 31403
// range := 10 ;
31395: LD_ADDR_VAR 0 4
31399: PUSH
31400: LD_INT 10
31402: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31403: LD_ADDR_VAR 0 8
31407: PUSH
31408: LD_INT 81
31410: PUSH
31411: LD_VAR 0 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 92
31422: PUSH
31423: LD_VAR 0 2
31427: PUSH
31428: LD_VAR 0 3
31432: PUSH
31433: LD_VAR 0 4
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 21
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: PPUSH
31466: CALL_OW 69
31470: ST_TO_ADDR
// if not tmp then
31471: LD_VAR 0 8
31475: NOT
31476: IFFALSE 31480
// exit ;
31478: GO 33034
// for i in tmp do
31480: LD_ADDR_VAR 0 6
31484: PUSH
31485: LD_VAR 0 8
31489: PUSH
31490: FOR_IN
31491: IFFALSE 33009
// begin points := [ 0 , 0 , 0 ] ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// bpoints := 1 ;
31512: LD_ADDR_VAR 0 10
31516: PUSH
31517: LD_INT 1
31519: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31520: LD_VAR 0 6
31524: PPUSH
31525: CALL_OW 247
31529: PUSH
31530: LD_INT 1
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 32116
31538: POP
// begin if GetClass ( i ) = 1 then
31539: LD_VAR 0 6
31543: PPUSH
31544: CALL_OW 257
31548: PUSH
31549: LD_INT 1
31551: EQUAL
31552: IFFALSE 31573
// points := [ 10 , 5 , 3 ] ;
31554: LD_ADDR_VAR 0 9
31558: PUSH
31559: LD_INT 10
31561: PUSH
31562: LD_INT 5
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31573: LD_VAR 0 6
31577: PPUSH
31578: CALL_OW 257
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 4
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: IN
31597: IFFALSE 31618
// points := [ 3 , 2 , 1 ] ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_INT 3
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 257
31627: PUSH
31628: LD_INT 5
31630: EQUAL
31631: IFFALSE 31652
// points := [ 130 , 5 , 2 ] ;
31633: LD_ADDR_VAR 0 9
31637: PUSH
31638: LD_INT 130
31640: PUSH
31641: LD_INT 5
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 257
31661: PUSH
31662: LD_INT 8
31664: EQUAL
31665: IFFALSE 31686
// points := [ 35 , 35 , 30 ] ;
31667: LD_ADDR_VAR 0 9
31671: PUSH
31672: LD_INT 35
31674: PUSH
31675: LD_INT 35
31677: PUSH
31678: LD_INT 30
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31686: LD_VAR 0 6
31690: PPUSH
31691: CALL_OW 257
31695: PUSH
31696: LD_INT 9
31698: EQUAL
31699: IFFALSE 31720
// points := [ 20 , 55 , 40 ] ;
31701: LD_ADDR_VAR 0 9
31705: PUSH
31706: LD_INT 20
31708: PUSH
31709: LD_INT 55
31711: PUSH
31712: LD_INT 40
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31720: LD_VAR 0 6
31724: PPUSH
31725: CALL_OW 257
31729: PUSH
31730: LD_INT 12
31732: PUSH
31733: LD_INT 16
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: IN
31740: IFFALSE 31761
// points := [ 5 , 3 , 2 ] ;
31742: LD_ADDR_VAR 0 9
31746: PUSH
31747: LD_INT 5
31749: PUSH
31750: LD_INT 3
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31761: LD_VAR 0 6
31765: PPUSH
31766: CALL_OW 257
31770: PUSH
31771: LD_INT 17
31773: EQUAL
31774: IFFALSE 31795
// points := [ 100 , 50 , 75 ] ;
31776: LD_ADDR_VAR 0 9
31780: PUSH
31781: LD_INT 100
31783: PUSH
31784: LD_INT 50
31786: PUSH
31787: LD_INT 75
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31795: LD_VAR 0 6
31799: PPUSH
31800: CALL_OW 257
31804: PUSH
31805: LD_INT 15
31807: EQUAL
31808: IFFALSE 31829
// points := [ 10 , 5 , 3 ] ;
31810: LD_ADDR_VAR 0 9
31814: PUSH
31815: LD_INT 10
31817: PUSH
31818: LD_INT 5
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31829: LD_VAR 0 6
31833: PPUSH
31834: CALL_OW 257
31838: PUSH
31839: LD_INT 14
31841: EQUAL
31842: IFFALSE 31863
// points := [ 10 , 0 , 0 ] ;
31844: LD_ADDR_VAR 0 9
31848: PUSH
31849: LD_INT 10
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31863: LD_VAR 0 6
31867: PPUSH
31868: CALL_OW 257
31872: PUSH
31873: LD_INT 11
31875: EQUAL
31876: IFFALSE 31897
// points := [ 30 , 10 , 5 ] ;
31878: LD_ADDR_VAR 0 9
31882: PUSH
31883: LD_INT 30
31885: PUSH
31886: LD_INT 10
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31897: LD_VAR 0 1
31901: PPUSH
31902: LD_INT 5
31904: PPUSH
31905: CALL_OW 321
31909: PUSH
31910: LD_INT 2
31912: EQUAL
31913: IFFALSE 31930
// bpoints := bpoints * 1.8 ;
31915: LD_ADDR_VAR 0 10
31919: PUSH
31920: LD_VAR 0 10
31924: PUSH
31925: LD_REAL  1.80000000000000E+0000
31928: MUL
31929: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31930: LD_VAR 0 6
31934: PPUSH
31935: CALL_OW 257
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: IN
31958: PUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_INT 51
31966: PPUSH
31967: CALL_OW 321
31971: PUSH
31972: LD_INT 2
31974: EQUAL
31975: AND
31976: IFFALSE 31993
// bpoints := bpoints * 1.2 ;
31978: LD_ADDR_VAR 0 10
31982: PUSH
31983: LD_VAR 0 10
31987: PUSH
31988: LD_REAL  1.20000000000000E+0000
31991: MUL
31992: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31993: LD_VAR 0 6
31997: PPUSH
31998: CALL_OW 257
32002: PUSH
32003: LD_INT 5
32005: PUSH
32006: LD_INT 7
32008: PUSH
32009: LD_INT 9
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: IN
32017: PUSH
32018: LD_VAR 0 1
32022: PPUSH
32023: LD_INT 52
32025: PPUSH
32026: CALL_OW 321
32030: PUSH
32031: LD_INT 2
32033: EQUAL
32034: AND
32035: IFFALSE 32052
// bpoints := bpoints * 1.5 ;
32037: LD_ADDR_VAR 0 10
32041: PUSH
32042: LD_VAR 0 10
32046: PUSH
32047: LD_REAL  1.50000000000000E+0000
32050: MUL
32051: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32052: LD_VAR 0 1
32056: PPUSH
32057: LD_INT 66
32059: PPUSH
32060: CALL_OW 321
32064: PUSH
32065: LD_INT 2
32067: EQUAL
32068: IFFALSE 32085
// bpoints := bpoints * 1.1 ;
32070: LD_ADDR_VAR 0 10
32074: PUSH
32075: LD_VAR 0 10
32079: PUSH
32080: LD_REAL  1.10000000000000E+0000
32083: MUL
32084: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32085: LD_ADDR_VAR 0 10
32089: PUSH
32090: LD_VAR 0 10
32094: PUSH
32095: LD_VAR 0 6
32099: PPUSH
32100: LD_INT 1
32102: PPUSH
32103: CALL_OW 259
32107: PUSH
32108: LD_REAL  1.15000000000000E+0000
32111: MUL
32112: MUL
32113: ST_TO_ADDR
// end ; unit_vehicle :
32114: GO 32938
32116: LD_INT 2
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32926
32124: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32125: LD_VAR 0 6
32129: PPUSH
32130: CALL_OW 264
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 42
32140: PUSH
32141: LD_INT 24
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: IN
32149: IFFALSE 32170
// points := [ 25 , 5 , 3 ] ;
32151: LD_ADDR_VAR 0 9
32155: PUSH
32156: LD_INT 25
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32170: LD_VAR 0 6
32174: PPUSH
32175: CALL_OW 264
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: LD_INT 43
32185: PUSH
32186: LD_INT 25
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: IN
32194: IFFALSE 32215
// points := [ 40 , 15 , 5 ] ;
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_INT 40
32203: PUSH
32204: LD_INT 15
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32215: LD_VAR 0 6
32219: PPUSH
32220: CALL_OW 264
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 23
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: IN
32235: IFFALSE 32256
// points := [ 7 , 25 , 8 ] ;
32237: LD_ADDR_VAR 0 9
32241: PUSH
32242: LD_INT 7
32244: PUSH
32245: LD_INT 25
32247: PUSH
32248: LD_INT 8
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32256: LD_VAR 0 6
32260: PPUSH
32261: CALL_OW 264
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: LD_INT 27
32271: PUSH
32272: LD_INT 44
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: IN
32280: IFFALSE 32301
// points := [ 14 , 50 , 16 ] ;
32282: LD_ADDR_VAR 0 9
32286: PUSH
32287: LD_INT 14
32289: PUSH
32290: LD_INT 50
32292: PUSH
32293: LD_INT 16
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32301: LD_VAR 0 6
32305: PPUSH
32306: CALL_OW 264
32310: PUSH
32311: LD_INT 6
32313: PUSH
32314: LD_INT 46
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: IN
32321: IFFALSE 32342
// points := [ 32 , 120 , 70 ] ;
32323: LD_ADDR_VAR 0 9
32327: PUSH
32328: LD_INT 32
32330: PUSH
32331: LD_INT 120
32333: PUSH
32334: LD_INT 70
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32342: LD_VAR 0 6
32346: PPUSH
32347: CALL_OW 264
32351: PUSH
32352: LD_INT 7
32354: PUSH
32355: LD_INT 28
32357: PUSH
32358: LD_INT 45
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: IN
32366: IFFALSE 32387
// points := [ 35 , 20 , 45 ] ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_INT 35
32375: PUSH
32376: LD_INT 20
32378: PUSH
32379: LD_INT 45
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32387: LD_VAR 0 6
32391: PPUSH
32392: CALL_OW 264
32396: PUSH
32397: LD_INT 47
32399: PUSH
32400: EMPTY
32401: LIST
32402: IN
32403: IFFALSE 32424
// points := [ 67 , 45 , 75 ] ;
32405: LD_ADDR_VAR 0 9
32409: PUSH
32410: LD_INT 67
32412: PUSH
32413: LD_INT 45
32415: PUSH
32416: LD_INT 75
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32424: LD_VAR 0 6
32428: PPUSH
32429: CALL_OW 264
32433: PUSH
32434: LD_INT 26
32436: PUSH
32437: EMPTY
32438: LIST
32439: IN
32440: IFFALSE 32461
// points := [ 120 , 30 , 80 ] ;
32442: LD_ADDR_VAR 0 9
32446: PUSH
32447: LD_INT 120
32449: PUSH
32450: LD_INT 30
32452: PUSH
32453: LD_INT 80
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32461: LD_VAR 0 6
32465: PPUSH
32466: CALL_OW 264
32470: PUSH
32471: LD_INT 22
32473: PUSH
32474: EMPTY
32475: LIST
32476: IN
32477: IFFALSE 32498
// points := [ 40 , 1 , 1 ] ;
32479: LD_ADDR_VAR 0 9
32483: PUSH
32484: LD_INT 40
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32498: LD_VAR 0 6
32502: PPUSH
32503: CALL_OW 264
32507: PUSH
32508: LD_INT 29
32510: PUSH
32511: EMPTY
32512: LIST
32513: IN
32514: IFFALSE 32535
// points := [ 70 , 200 , 400 ] ;
32516: LD_ADDR_VAR 0 9
32520: PUSH
32521: LD_INT 70
32523: PUSH
32524: LD_INT 200
32526: PUSH
32527: LD_INT 400
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32535: LD_VAR 0 6
32539: PPUSH
32540: CALL_OW 264
32544: PUSH
32545: LD_INT 14
32547: PUSH
32548: LD_INT 53
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: IN
32555: IFFALSE 32576
// points := [ 40 , 10 , 20 ] ;
32557: LD_ADDR_VAR 0 9
32561: PUSH
32562: LD_INT 40
32564: PUSH
32565: LD_INT 10
32567: PUSH
32568: LD_INT 20
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32576: LD_VAR 0 6
32580: PPUSH
32581: CALL_OW 264
32585: PUSH
32586: LD_INT 9
32588: PUSH
32589: EMPTY
32590: LIST
32591: IN
32592: IFFALSE 32613
// points := [ 5 , 70 , 20 ] ;
32594: LD_ADDR_VAR 0 9
32598: PUSH
32599: LD_INT 5
32601: PUSH
32602: LD_INT 70
32604: PUSH
32605: LD_INT 20
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32613: LD_VAR 0 6
32617: PPUSH
32618: CALL_OW 264
32622: PUSH
32623: LD_INT 10
32625: PUSH
32626: EMPTY
32627: LIST
32628: IN
32629: IFFALSE 32650
// points := [ 35 , 110 , 70 ] ;
32631: LD_ADDR_VAR 0 9
32635: PUSH
32636: LD_INT 35
32638: PUSH
32639: LD_INT 110
32641: PUSH
32642: LD_INT 70
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32650: LD_VAR 0 6
32654: PPUSH
32655: CALL_OW 265
32659: PUSH
32660: LD_INT 25
32662: EQUAL
32663: IFFALSE 32684
// points := [ 80 , 65 , 100 ] ;
32665: LD_ADDR_VAR 0 9
32669: PUSH
32670: LD_INT 80
32672: PUSH
32673: LD_INT 65
32675: PUSH
32676: LD_INT 100
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32684: LD_VAR 0 6
32688: PPUSH
32689: CALL_OW 263
32693: PUSH
32694: LD_INT 1
32696: EQUAL
32697: IFFALSE 32732
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32699: LD_ADDR_VAR 0 10
32703: PUSH
32704: LD_VAR 0 10
32708: PUSH
32709: LD_VAR 0 6
32713: PPUSH
32714: CALL_OW 311
32718: PPUSH
32719: LD_INT 3
32721: PPUSH
32722: CALL_OW 259
32726: PUSH
32727: LD_INT 4
32729: MUL
32730: MUL
32731: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32732: LD_VAR 0 6
32736: PPUSH
32737: CALL_OW 263
32741: PUSH
32742: LD_INT 2
32744: EQUAL
32745: IFFALSE 32796
// begin j := IsControledBy ( i ) ;
32747: LD_ADDR_VAR 0 7
32751: PUSH
32752: LD_VAR 0 6
32756: PPUSH
32757: CALL_OW 312
32761: ST_TO_ADDR
// if j then
32762: LD_VAR 0 7
32766: IFFALSE 32796
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32768: LD_ADDR_VAR 0 10
32772: PUSH
32773: LD_VAR 0 10
32777: PUSH
32778: LD_VAR 0 7
32782: PPUSH
32783: LD_INT 3
32785: PPUSH
32786: CALL_OW 259
32790: PUSH
32791: LD_INT 3
32793: MUL
32794: MUL
32795: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32796: LD_VAR 0 6
32800: PPUSH
32801: CALL_OW 264
32805: PUSH
32806: LD_INT 5
32808: PUSH
32809: LD_INT 6
32811: PUSH
32812: LD_INT 46
32814: PUSH
32815: LD_INT 44
32817: PUSH
32818: LD_INT 47
32820: PUSH
32821: LD_INT 45
32823: PUSH
32824: LD_INT 28
32826: PUSH
32827: LD_INT 7
32829: PUSH
32830: LD_INT 27
32832: PUSH
32833: LD_INT 29
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: IN
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: LD_INT 52
32856: PPUSH
32857: CALL_OW 321
32861: PUSH
32862: LD_INT 2
32864: EQUAL
32865: AND
32866: IFFALSE 32883
// bpoints := bpoints * 1.2 ;
32868: LD_ADDR_VAR 0 10
32872: PUSH
32873: LD_VAR 0 10
32877: PUSH
32878: LD_REAL  1.20000000000000E+0000
32881: MUL
32882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32883: LD_VAR 0 6
32887: PPUSH
32888: CALL_OW 264
32892: PUSH
32893: LD_INT 6
32895: PUSH
32896: LD_INT 46
32898: PUSH
32899: LD_INT 47
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: IN
32907: IFFALSE 32924
// bpoints := bpoints * 1.2 ;
32909: LD_ADDR_VAR 0 10
32913: PUSH
32914: LD_VAR 0 10
32918: PUSH
32919: LD_REAL  1.20000000000000E+0000
32922: MUL
32923: ST_TO_ADDR
// end ; unit_building :
32924: GO 32938
32926: LD_INT 3
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32937
32934: POP
// ; end ;
32935: GO 32938
32937: POP
// for j = 1 to 3 do
32938: LD_ADDR_VAR 0 7
32942: PUSH
32943: DOUBLE
32944: LD_INT 1
32946: DEC
32947: ST_TO_ADDR
32948: LD_INT 3
32950: PUSH
32951: FOR_TO
32952: IFFALSE 33005
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32954: LD_ADDR_VAR 0 5
32958: PUSH
32959: LD_VAR 0 5
32963: PPUSH
32964: LD_VAR 0 7
32968: PPUSH
32969: LD_VAR 0 5
32973: PUSH
32974: LD_VAR 0 7
32978: ARRAY
32979: PUSH
32980: LD_VAR 0 9
32984: PUSH
32985: LD_VAR 0 7
32989: ARRAY
32990: PUSH
32991: LD_VAR 0 10
32995: MUL
32996: PLUS
32997: PPUSH
32998: CALL_OW 1
33002: ST_TO_ADDR
33003: GO 32951
33005: POP
33006: POP
// end ;
33007: GO 31490
33009: POP
33010: POP
// result := Replace ( result , 4 , tmp ) ;
33011: LD_ADDR_VAR 0 5
33015: PUSH
33016: LD_VAR 0 5
33020: PPUSH
33021: LD_INT 4
33023: PPUSH
33024: LD_VAR 0 8
33028: PPUSH
33029: CALL_OW 1
33033: ST_TO_ADDR
// end ;
33034: LD_VAR 0 5
33038: RET
// export function DangerAtRange ( unit , range ) ; begin
33039: LD_INT 0
33041: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_VAR 0 1
33051: PPUSH
33052: CALL_OW 255
33056: PPUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 250
33066: PPUSH
33067: LD_VAR 0 1
33071: PPUSH
33072: CALL_OW 251
33076: PPUSH
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL 31342 0 4
33086: ST_TO_ADDR
// end ;
33087: LD_VAR 0 3
33091: RET
// export function DangerInArea ( side , area ) ; begin
33092: LD_INT 0
33094: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_VAR 0 2
33104: PPUSH
33105: LD_INT 81
33107: PUSH
33108: LD_VAR 0 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PPUSH
33117: CALL_OW 70
33121: ST_TO_ADDR
// end ;
33122: LD_VAR 0 3
33126: RET
// export function IsExtension ( b ) ; begin
33127: LD_INT 0
33129: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33130: LD_ADDR_VAR 0 2
33134: PUSH
33135: LD_VAR 0 1
33139: PUSH
33140: LD_INT 23
33142: PUSH
33143: LD_INT 20
33145: PUSH
33146: LD_INT 22
33148: PUSH
33149: LD_INT 17
33151: PUSH
33152: LD_INT 24
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: LD_INT 19
33160: PUSH
33161: LD_INT 16
33163: PUSH
33164: LD_INT 25
33166: PUSH
33167: LD_INT 18
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: IN
33182: ST_TO_ADDR
// end ;
33183: LD_VAR 0 2
33187: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
33188: LD_INT 0
33190: PPUSH
33191: PPUSH
33192: PPUSH
// result := [ ] ;
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: EMPTY
33199: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33200: LD_ADDR_VAR 0 4
33204: PUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_INT 21
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 70
33224: ST_TO_ADDR
// if not tmp then
33225: LD_VAR 0 4
33229: NOT
33230: IFFALSE 33234
// exit ;
33232: GO 33292
// for i in tmp do
33234: LD_ADDR_VAR 0 5
33238: PUSH
33239: LD_VAR 0 4
33243: PUSH
33244: FOR_IN
33245: IFFALSE 33280
// if GetBase ( i ) <> base then
33247: LD_VAR 0 5
33251: PPUSH
33252: CALL_OW 274
33256: PUSH
33257: LD_VAR 0 1
33261: NONEQUAL
33262: IFFALSE 33278
// ComLinkToBase ( base , i ) ;
33264: LD_VAR 0 1
33268: PPUSH
33269: LD_VAR 0 5
33273: PPUSH
33274: CALL_OW 169
33278: GO 33244
33280: POP
33281: POP
// result := tmp ;
33282: LD_ADDR_VAR 0 3
33286: PUSH
33287: LD_VAR 0 4
33291: ST_TO_ADDR
// end ;
33292: LD_VAR 0 3
33296: RET
// export function ComComplete ( unit , b ) ; var i ; begin
33297: LD_INT 0
33299: PPUSH
33300: PPUSH
// if BuildingStatus ( b ) = bs_build then
33301: LD_VAR 0 2
33305: PPUSH
33306: CALL_OW 461
33310: PUSH
33311: LD_INT 1
33313: EQUAL
33314: IFFALSE 33374
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33316: LD_VAR 0 1
33320: PPUSH
33321: LD_STRING h
33323: PUSH
33324: LD_VAR 0 2
33328: PPUSH
33329: CALL_OW 250
33333: PUSH
33334: LD_VAR 0 2
33338: PPUSH
33339: CALL_OW 251
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: PPUSH
33370: CALL_OW 446
// end ;
33374: LD_VAR 0 3
33378: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33387: LD_VAR 0 1
33391: NOT
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 263
33402: PUSH
33403: LD_INT 2
33405: EQUAL
33406: NOT
33407: OR
33408: IFFALSE 33412
// exit ;
33410: GO 33728
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33412: LD_ADDR_VAR 0 6
33416: PUSH
33417: LD_INT 22
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 255
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 30
33439: PUSH
33440: LD_INT 36
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 34
33449: PUSH
33450: LD_INT 31
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PPUSH
33466: CALL_OW 69
33470: ST_TO_ADDR
// if not tmp then
33471: LD_VAR 0 6
33475: NOT
33476: IFFALSE 33480
// exit ;
33478: GO 33728
// result := [ ] ;
33480: LD_ADDR_VAR 0 2
33484: PUSH
33485: EMPTY
33486: ST_TO_ADDR
// for i in tmp do
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: LD_VAR 0 6
33496: PUSH
33497: FOR_IN
33498: IFFALSE 33569
// begin t := UnitsInside ( i ) ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_VAR 0 3
33509: PPUSH
33510: CALL_OW 313
33514: ST_TO_ADDR
// if t then
33515: LD_VAR 0 4
33519: IFFALSE 33567
// for j in t do
33521: LD_ADDR_VAR 0 7
33525: PUSH
33526: LD_VAR 0 4
33530: PUSH
33531: FOR_IN
33532: IFFALSE 33565
// result := Insert ( result , result + 1 , j ) ;
33534: LD_ADDR_VAR 0 2
33538: PUSH
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 2
33548: PUSH
33549: LD_INT 1
33551: PLUS
33552: PPUSH
33553: LD_VAR 0 7
33557: PPUSH
33558: CALL_OW 2
33562: ST_TO_ADDR
33563: GO 33531
33565: POP
33566: POP
// end ;
33567: GO 33497
33569: POP
33570: POP
// if not result then
33571: LD_VAR 0 2
33575: NOT
33576: IFFALSE 33580
// exit ;
33578: GO 33728
// mech := result [ 1 ] ;
33580: LD_ADDR_VAR 0 5
33584: PUSH
33585: LD_VAR 0 2
33589: PUSH
33590: LD_INT 1
33592: ARRAY
33593: ST_TO_ADDR
// if result > 1 then
33594: LD_VAR 0 2
33598: PUSH
33599: LD_INT 1
33601: GREATER
33602: IFFALSE 33714
// for i = 2 to result do
33604: LD_ADDR_VAR 0 3
33608: PUSH
33609: DOUBLE
33610: LD_INT 2
33612: DEC
33613: ST_TO_ADDR
33614: LD_VAR 0 2
33618: PUSH
33619: FOR_TO
33620: IFFALSE 33712
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 3
33636: ARRAY
33637: PPUSH
33638: LD_INT 3
33640: PPUSH
33641: CALL_OW 259
33645: PUSH
33646: LD_VAR 0 2
33650: PUSH
33651: LD_VAR 0 3
33655: ARRAY
33656: PPUSH
33657: CALL_OW 432
33661: MINUS
33662: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33663: LD_VAR 0 4
33667: PUSH
33668: LD_VAR 0 5
33672: PPUSH
33673: LD_INT 3
33675: PPUSH
33676: CALL_OW 259
33680: PUSH
33681: LD_VAR 0 5
33685: PPUSH
33686: CALL_OW 432
33690: MINUS
33691: GREATEREQUAL
33692: IFFALSE 33710
// mech := result [ i ] ;
33694: LD_ADDR_VAR 0 5
33698: PUSH
33699: LD_VAR 0 2
33703: PUSH
33704: LD_VAR 0 3
33708: ARRAY
33709: ST_TO_ADDR
// end ;
33710: GO 33619
33712: POP
33713: POP
// ComLinkTo ( vehicle , mech ) ;
33714: LD_VAR 0 1
33718: PPUSH
33719: LD_VAR 0 5
33723: PPUSH
33724: CALL_OW 135
// end ;
33728: LD_VAR 0 2
33732: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33733: LD_INT 0
33735: PPUSH
33736: PPUSH
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
33747: PPUSH
// result := [ ] ;
33748: LD_ADDR_VAR 0 7
33752: PUSH
33753: EMPTY
33754: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 266
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: IN
33775: NOT
33776: IFFALSE 33780
// exit ;
33778: GO 35411
// if name then
33780: LD_VAR 0 3
33784: IFFALSE 33800
// SetBName ( base_dep , name ) ;
33786: LD_VAR 0 1
33790: PPUSH
33791: LD_VAR 0 3
33795: PPUSH
33796: CALL_OW 500
// base := GetBase ( base_dep ) ;
33800: LD_ADDR_VAR 0 15
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: CALL_OW 274
33814: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33815: LD_ADDR_VAR 0 16
33819: PUSH
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 255
33829: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33830: LD_ADDR_VAR 0 17
33834: PUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 248
33844: ST_TO_ADDR
// if sources then
33845: LD_VAR 0 5
33849: IFFALSE 33896
// for i = 1 to 3 do
33851: LD_ADDR_VAR 0 8
33855: PUSH
33856: DOUBLE
33857: LD_INT 1
33859: DEC
33860: ST_TO_ADDR
33861: LD_INT 3
33863: PUSH
33864: FOR_TO
33865: IFFALSE 33894
// AddResourceType ( base , i , sources [ i ] ) ;
33867: LD_VAR 0 15
33871: PPUSH
33872: LD_VAR 0 8
33876: PPUSH
33877: LD_VAR 0 5
33881: PUSH
33882: LD_VAR 0 8
33886: ARRAY
33887: PPUSH
33888: CALL_OW 276
33892: GO 33864
33894: POP
33895: POP
// buildings := GetBaseBuildings ( base , area ) ;
33896: LD_ADDR_VAR 0 18
33900: PUSH
33901: LD_VAR 0 15
33905: PPUSH
33906: LD_VAR 0 2
33910: PPUSH
33911: CALL 33188 0 2
33915: ST_TO_ADDR
// InitHc ;
33916: CALL_OW 19
// InitUc ;
33920: CALL_OW 18
// uc_side := side ;
33924: LD_ADDR_OWVAR 20
33928: PUSH
33929: LD_VAR 0 16
33933: ST_TO_ADDR
// uc_nation := nation ;
33934: LD_ADDR_OWVAR 21
33938: PUSH
33939: LD_VAR 0 17
33943: ST_TO_ADDR
// if buildings then
33944: LD_VAR 0 18
33948: IFFALSE 35270
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33950: LD_ADDR_VAR 0 19
33954: PUSH
33955: LD_VAR 0 18
33959: PPUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 30
33965: PUSH
33966: LD_INT 29
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 30
33975: PUSH
33976: LD_INT 30
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: PPUSH
33988: CALL_OW 72
33992: ST_TO_ADDR
// if tmp then
33993: LD_VAR 0 19
33997: IFFALSE 34045
// for i in tmp do
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: LD_VAR 0 19
34008: PUSH
34009: FOR_IN
34010: IFFALSE 34043
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34012: LD_VAR 0 8
34016: PPUSH
34017: CALL_OW 250
34021: PPUSH
34022: LD_VAR 0 8
34026: PPUSH
34027: CALL_OW 251
34031: PPUSH
34032: LD_VAR 0 16
34036: PPUSH
34037: CALL_OW 441
34041: GO 34009
34043: POP
34044: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34045: LD_VAR 0 18
34049: PPUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 30
34055: PUSH
34056: LD_INT 32
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 30
34065: PUSH
34066: LD_INT 33
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: PPUSH
34078: CALL_OW 72
34082: IFFALSE 34170
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34084: LD_ADDR_VAR 0 8
34088: PUSH
34089: LD_VAR 0 18
34093: PPUSH
34094: LD_INT 2
34096: PUSH
34097: LD_INT 30
34099: PUSH
34100: LD_INT 32
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 30
34109: PUSH
34110: LD_INT 33
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: PPUSH
34122: CALL_OW 72
34126: PUSH
34127: FOR_IN
34128: IFFALSE 34168
// begin if not GetBWeapon ( i ) then
34130: LD_VAR 0 8
34134: PPUSH
34135: CALL_OW 269
34139: NOT
34140: IFFALSE 34166
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34142: LD_VAR 0 8
34146: PPUSH
34147: LD_VAR 0 8
34151: PPUSH
34152: LD_VAR 0 2
34156: PPUSH
34157: CALL 35416 0 2
34161: PPUSH
34162: CALL_OW 431
// end ;
34166: GO 34127
34168: POP
34169: POP
// end ; for i = 1 to personel do
34170: LD_ADDR_VAR 0 8
34174: PUSH
34175: DOUBLE
34176: LD_INT 1
34178: DEC
34179: ST_TO_ADDR
34180: LD_VAR 0 6
34184: PUSH
34185: FOR_TO
34186: IFFALSE 35250
// begin if i > 4 then
34188: LD_VAR 0 8
34192: PUSH
34193: LD_INT 4
34195: GREATER
34196: IFFALSE 34200
// break ;
34198: GO 35250
// case i of 1 :
34200: LD_VAR 0 8
34204: PUSH
34205: LD_INT 1
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34293
34213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34214: LD_ADDR_VAR 0 12
34218: PUSH
34219: LD_VAR 0 18
34223: PPUSH
34224: LD_INT 22
34226: PUSH
34227: LD_VAR 0 16
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 58
34238: PUSH
34239: EMPTY
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 30
34247: PUSH
34248: LD_INT 32
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 30
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 30
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: PPUSH
34286: CALL_OW 72
34290: ST_TO_ADDR
34291: GO 34515
34293: LD_INT 2
34295: DOUBLE
34296: EQUAL
34297: IFTRUE 34301
34299: GO 34363
34301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34302: LD_ADDR_VAR 0 12
34306: PUSH
34307: LD_VAR 0 18
34311: PPUSH
34312: LD_INT 22
34314: PUSH
34315: LD_VAR 0 16
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 30
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 30
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 72
34360: ST_TO_ADDR
34361: GO 34515
34363: LD_INT 3
34365: DOUBLE
34366: EQUAL
34367: IFTRUE 34371
34369: GO 34433
34371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34372: LD_ADDR_VAR 0 12
34376: PUSH
34377: LD_VAR 0 18
34381: PPUSH
34382: LD_INT 22
34384: PUSH
34385: LD_VAR 0 16
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 30
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 30
34409: PUSH
34410: LD_INT 3
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PPUSH
34426: CALL_OW 72
34430: ST_TO_ADDR
34431: GO 34515
34433: LD_INT 4
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34514
34441: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34442: LD_ADDR_VAR 0 12
34446: PUSH
34447: LD_VAR 0 18
34451: PPUSH
34452: LD_INT 22
34454: PUSH
34455: LD_VAR 0 16
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: LD_INT 30
34469: PUSH
34470: LD_INT 6
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 30
34479: PUSH
34480: LD_INT 7
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 30
34489: PUSH
34490: LD_INT 8
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PPUSH
34507: CALL_OW 72
34511: ST_TO_ADDR
34512: GO 34515
34514: POP
// if i = 1 then
34515: LD_VAR 0 8
34519: PUSH
34520: LD_INT 1
34522: EQUAL
34523: IFFALSE 34634
// begin tmp := [ ] ;
34525: LD_ADDR_VAR 0 19
34529: PUSH
34530: EMPTY
34531: ST_TO_ADDR
// for j in f do
34532: LD_ADDR_VAR 0 9
34536: PUSH
34537: LD_VAR 0 12
34541: PUSH
34542: FOR_IN
34543: IFFALSE 34616
// if GetBType ( j ) = b_bunker then
34545: LD_VAR 0 9
34549: PPUSH
34550: CALL_OW 266
34554: PUSH
34555: LD_INT 32
34557: EQUAL
34558: IFFALSE 34585
// tmp := Insert ( tmp , 1 , j ) else
34560: LD_ADDR_VAR 0 19
34564: PUSH
34565: LD_VAR 0 19
34569: PPUSH
34570: LD_INT 1
34572: PPUSH
34573: LD_VAR 0 9
34577: PPUSH
34578: CALL_OW 2
34582: ST_TO_ADDR
34583: GO 34614
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34585: LD_ADDR_VAR 0 19
34589: PUSH
34590: LD_VAR 0 19
34594: PPUSH
34595: LD_VAR 0 19
34599: PUSH
34600: LD_INT 1
34602: PLUS
34603: PPUSH
34604: LD_VAR 0 9
34608: PPUSH
34609: CALL_OW 2
34613: ST_TO_ADDR
34614: GO 34542
34616: POP
34617: POP
// if tmp then
34618: LD_VAR 0 19
34622: IFFALSE 34634
// f := tmp ;
34624: LD_ADDR_VAR 0 12
34628: PUSH
34629: LD_VAR 0 19
34633: ST_TO_ADDR
// end ; x := personel [ i ] ;
34634: LD_ADDR_VAR 0 13
34638: PUSH
34639: LD_VAR 0 6
34643: PUSH
34644: LD_VAR 0 8
34648: ARRAY
34649: ST_TO_ADDR
// if x = - 1 then
34650: LD_VAR 0 13
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: EQUAL
34659: IFFALSE 34868
// begin for j in f do
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: LD_VAR 0 12
34670: PUSH
34671: FOR_IN
34672: IFFALSE 34864
// repeat InitHc ;
34674: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34678: LD_VAR 0 9
34682: PPUSH
34683: CALL_OW 266
34687: PUSH
34688: LD_INT 5
34690: EQUAL
34691: IFFALSE 34761
// begin if UnitsInside ( j ) < 3 then
34693: LD_VAR 0 9
34697: PPUSH
34698: CALL_OW 313
34702: PUSH
34703: LD_INT 3
34705: LESS
34706: IFFALSE 34742
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34708: LD_INT 0
34710: PPUSH
34711: LD_INT 5
34713: PUSH
34714: LD_INT 8
34716: PUSH
34717: LD_INT 9
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: PUSH
34725: LD_VAR 0 17
34729: ARRAY
34730: PPUSH
34731: LD_VAR 0 4
34735: PPUSH
34736: CALL_OW 380
34740: GO 34759
// PrepareHuman ( false , i , skill ) ;
34742: LD_INT 0
34744: PPUSH
34745: LD_VAR 0 8
34749: PPUSH
34750: LD_VAR 0 4
34754: PPUSH
34755: CALL_OW 380
// end else
34759: GO 34778
// PrepareHuman ( false , i , skill ) ;
34761: LD_INT 0
34763: PPUSH
34764: LD_VAR 0 8
34768: PPUSH
34769: LD_VAR 0 4
34773: PPUSH
34774: CALL_OW 380
// un := CreateHuman ;
34778: LD_ADDR_VAR 0 14
34782: PUSH
34783: CALL_OW 44
34787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_VAR 0 7
34797: PPUSH
34798: LD_INT 1
34800: PPUSH
34801: LD_VAR 0 14
34805: PPUSH
34806: CALL_OW 2
34810: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34811: LD_VAR 0 14
34815: PPUSH
34816: LD_VAR 0 9
34820: PPUSH
34821: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34825: LD_VAR 0 9
34829: PPUSH
34830: CALL_OW 313
34834: PUSH
34835: LD_INT 6
34837: EQUAL
34838: PUSH
34839: LD_VAR 0 9
34843: PPUSH
34844: CALL_OW 266
34848: PUSH
34849: LD_INT 32
34851: PUSH
34852: LD_INT 31
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: IN
34859: OR
34860: IFFALSE 34674
34862: GO 34671
34864: POP
34865: POP
// end else
34866: GO 35248
// for j = 1 to x do
34868: LD_ADDR_VAR 0 9
34872: PUSH
34873: DOUBLE
34874: LD_INT 1
34876: DEC
34877: ST_TO_ADDR
34878: LD_VAR 0 13
34882: PUSH
34883: FOR_TO
34884: IFFALSE 35246
// begin InitHc ;
34886: CALL_OW 19
// if not f then
34890: LD_VAR 0 12
34894: NOT
34895: IFFALSE 34984
// begin PrepareHuman ( false , i , skill ) ;
34897: LD_INT 0
34899: PPUSH
34900: LD_VAR 0 8
34904: PPUSH
34905: LD_VAR 0 4
34909: PPUSH
34910: CALL_OW 380
// un := CreateHuman ;
34914: LD_ADDR_VAR 0 14
34918: PUSH
34919: CALL_OW 44
34923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34924: LD_ADDR_VAR 0 7
34928: PUSH
34929: LD_VAR 0 7
34933: PPUSH
34934: LD_INT 1
34936: PPUSH
34937: LD_VAR 0 14
34941: PPUSH
34942: CALL_OW 2
34946: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34947: LD_VAR 0 14
34951: PPUSH
34952: LD_VAR 0 1
34956: PPUSH
34957: CALL_OW 250
34961: PPUSH
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL_OW 251
34971: PPUSH
34972: LD_INT 10
34974: PPUSH
34975: LD_INT 0
34977: PPUSH
34978: CALL_OW 50
// continue ;
34982: GO 34883
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34984: LD_VAR 0 12
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: CALL_OW 313
34997: PUSH
34998: LD_VAR 0 12
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: CALL_OW 266
35011: PUSH
35012: LD_INT 32
35014: PUSH
35015: LD_INT 31
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: IN
35022: AND
35023: PUSH
35024: LD_VAR 0 12
35028: PUSH
35029: LD_INT 1
35031: ARRAY
35032: PPUSH
35033: CALL_OW 313
35037: PUSH
35038: LD_INT 6
35040: EQUAL
35041: OR
35042: IFFALSE 35062
// f := Delete ( f , 1 ) ;
35044: LD_ADDR_VAR 0 12
35048: PUSH
35049: LD_VAR 0 12
35053: PPUSH
35054: LD_INT 1
35056: PPUSH
35057: CALL_OW 3
35061: ST_TO_ADDR
// if not f then
35062: LD_VAR 0 12
35066: NOT
35067: IFFALSE 35085
// begin x := x + 2 ;
35069: LD_ADDR_VAR 0 13
35073: PUSH
35074: LD_VAR 0 13
35078: PUSH
35079: LD_INT 2
35081: PLUS
35082: ST_TO_ADDR
// continue ;
35083: GO 34883
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35085: LD_VAR 0 12
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: CALL_OW 266
35098: PUSH
35099: LD_INT 5
35101: EQUAL
35102: IFFALSE 35176
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35104: LD_VAR 0 12
35108: PUSH
35109: LD_INT 1
35111: ARRAY
35112: PPUSH
35113: CALL_OW 313
35117: PUSH
35118: LD_INT 3
35120: LESS
35121: IFFALSE 35157
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35123: LD_INT 0
35125: PPUSH
35126: LD_INT 5
35128: PUSH
35129: LD_INT 8
35131: PUSH
35132: LD_INT 9
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_VAR 0 17
35144: ARRAY
35145: PPUSH
35146: LD_VAR 0 4
35150: PPUSH
35151: CALL_OW 380
35155: GO 35174
// PrepareHuman ( false , i , skill ) ;
35157: LD_INT 0
35159: PPUSH
35160: LD_VAR 0 8
35164: PPUSH
35165: LD_VAR 0 4
35169: PPUSH
35170: CALL_OW 380
// end else
35174: GO 35193
// PrepareHuman ( false , i , skill ) ;
35176: LD_INT 0
35178: PPUSH
35179: LD_VAR 0 8
35183: PPUSH
35184: LD_VAR 0 4
35188: PPUSH
35189: CALL_OW 380
// un := CreateHuman ;
35193: LD_ADDR_VAR 0 14
35197: PUSH
35198: CALL_OW 44
35202: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35203: LD_ADDR_VAR 0 7
35207: PUSH
35208: LD_VAR 0 7
35212: PPUSH
35213: LD_INT 1
35215: PPUSH
35216: LD_VAR 0 14
35220: PPUSH
35221: CALL_OW 2
35225: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35226: LD_VAR 0 14
35230: PPUSH
35231: LD_VAR 0 12
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PPUSH
35240: CALL_OW 52
// end ;
35244: GO 34883
35246: POP
35247: POP
// end ;
35248: GO 34185
35250: POP
35251: POP
// result := result ^ buildings ;
35252: LD_ADDR_VAR 0 7
35256: PUSH
35257: LD_VAR 0 7
35261: PUSH
35262: LD_VAR 0 18
35266: ADD
35267: ST_TO_ADDR
// end else
35268: GO 35411
// begin for i = 1 to personel do
35270: LD_ADDR_VAR 0 8
35274: PUSH
35275: DOUBLE
35276: LD_INT 1
35278: DEC
35279: ST_TO_ADDR
35280: LD_VAR 0 6
35284: PUSH
35285: FOR_TO
35286: IFFALSE 35409
// begin if i > 4 then
35288: LD_VAR 0 8
35292: PUSH
35293: LD_INT 4
35295: GREATER
35296: IFFALSE 35300
// break ;
35298: GO 35409
// x := personel [ i ] ;
35300: LD_ADDR_VAR 0 13
35304: PUSH
35305: LD_VAR 0 6
35309: PUSH
35310: LD_VAR 0 8
35314: ARRAY
35315: ST_TO_ADDR
// if x = - 1 then
35316: LD_VAR 0 13
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: EQUAL
35325: IFFALSE 35329
// continue ;
35327: GO 35285
// PrepareHuman ( false , i , skill ) ;
35329: LD_INT 0
35331: PPUSH
35332: LD_VAR 0 8
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: CALL_OW 380
// un := CreateHuman ;
35346: LD_ADDR_VAR 0 14
35350: PUSH
35351: CALL_OW 44
35355: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35356: LD_VAR 0 14
35360: PPUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: CALL_OW 250
35370: PPUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 251
35380: PPUSH
35381: LD_INT 10
35383: PPUSH
35384: LD_INT 0
35386: PPUSH
35387: CALL_OW 50
// result := result ^ un ;
35391: LD_ADDR_VAR 0 7
35395: PUSH
35396: LD_VAR 0 7
35400: PUSH
35401: LD_VAR 0 14
35405: ADD
35406: ST_TO_ADDR
// end ;
35407: GO 35285
35409: POP
35410: POP
// end ; end ;
35411: LD_VAR 0 7
35415: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35416: LD_INT 0
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
// result := false ;
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35442: LD_VAR 0 1
35446: NOT
35447: PUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL_OW 266
35457: PUSH
35458: LD_INT 32
35460: PUSH
35461: LD_INT 33
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: IN
35468: NOT
35469: OR
35470: IFFALSE 35474
// exit ;
35472: GO 36610
// nat := GetNation ( tower ) ;
35474: LD_ADDR_VAR 0 12
35478: PUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 248
35488: ST_TO_ADDR
// side := GetSide ( tower ) ;
35489: LD_ADDR_VAR 0 16
35493: PUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 255
35503: ST_TO_ADDR
// x := GetX ( tower ) ;
35504: LD_ADDR_VAR 0 10
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 250
35518: ST_TO_ADDR
// y := GetY ( tower ) ;
35519: LD_ADDR_VAR 0 11
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 251
35533: ST_TO_ADDR
// if not x or not y then
35534: LD_VAR 0 10
35538: NOT
35539: PUSH
35540: LD_VAR 0 11
35544: NOT
35545: OR
35546: IFFALSE 35550
// exit ;
35548: GO 36610
// weapon := 0 ;
35550: LD_ADDR_VAR 0 18
35554: PUSH
35555: LD_INT 0
35557: ST_TO_ADDR
// fac_list := [ ] ;
35558: LD_ADDR_VAR 0 17
35562: PUSH
35563: EMPTY
35564: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35565: LD_ADDR_VAR 0 6
35569: PUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL_OW 274
35579: PPUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: CALL 33188 0 2
35589: PPUSH
35590: LD_INT 30
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PPUSH
35600: CALL_OW 72
35604: ST_TO_ADDR
// if not factories then
35605: LD_VAR 0 6
35609: NOT
35610: IFFALSE 35614
// exit ;
35612: GO 36610
// for i in factories do
35614: LD_ADDR_VAR 0 8
35618: PUSH
35619: LD_VAR 0 6
35623: PUSH
35624: FOR_IN
35625: IFFALSE 35650
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35627: LD_ADDR_VAR 0 17
35631: PUSH
35632: LD_VAR 0 17
35636: PUSH
35637: LD_VAR 0 8
35641: PPUSH
35642: CALL_OW 478
35646: UNION
35647: ST_TO_ADDR
35648: GO 35624
35650: POP
35651: POP
// if not fac_list then
35652: LD_VAR 0 17
35656: NOT
35657: IFFALSE 35661
// exit ;
35659: GO 36610
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35661: LD_ADDR_VAR 0 5
35665: PUSH
35666: LD_INT 4
35668: PUSH
35669: LD_INT 5
35671: PUSH
35672: LD_INT 9
35674: PUSH
35675: LD_INT 10
35677: PUSH
35678: LD_INT 6
35680: PUSH
35681: LD_INT 7
35683: PUSH
35684: LD_INT 11
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 27
35698: PUSH
35699: LD_INT 28
35701: PUSH
35702: LD_INT 26
35704: PUSH
35705: LD_INT 30
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 43
35716: PUSH
35717: LD_INT 44
35719: PUSH
35720: LD_INT 46
35722: PUSH
35723: LD_INT 45
35725: PUSH
35726: LD_INT 47
35728: PUSH
35729: LD_INT 49
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: PUSH
35745: LD_VAR 0 12
35749: ARRAY
35750: ST_TO_ADDR
// for i in list do
35751: LD_ADDR_VAR 0 8
35755: PUSH
35756: LD_VAR 0 5
35760: PUSH
35761: FOR_IN
35762: IFFALSE 35795
// if not i in fac_list then
35764: LD_VAR 0 8
35768: PUSH
35769: LD_VAR 0 17
35773: IN
35774: NOT
35775: IFFALSE 35793
// list := list diff i ;
35777: LD_ADDR_VAR 0 5
35781: PUSH
35782: LD_VAR 0 5
35786: PUSH
35787: LD_VAR 0 8
35791: DIFF
35792: ST_TO_ADDR
35793: GO 35761
35795: POP
35796: POP
// if not list then
35797: LD_VAR 0 5
35801: NOT
35802: IFFALSE 35806
// exit ;
35804: GO 36610
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35806: LD_VAR 0 12
35810: PUSH
35811: LD_INT 3
35813: EQUAL
35814: PUSH
35815: LD_INT 49
35817: PUSH
35818: LD_VAR 0 5
35822: IN
35823: AND
35824: PUSH
35825: LD_INT 31
35827: PPUSH
35828: LD_VAR 0 16
35832: PPUSH
35833: CALL_OW 321
35837: PUSH
35838: LD_INT 2
35840: EQUAL
35841: AND
35842: IFFALSE 35902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35844: LD_INT 22
35846: PUSH
35847: LD_VAR 0 16
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 35
35858: PUSH
35859: LD_INT 49
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 91
35868: PUSH
35869: LD_VAR 0 1
35873: PUSH
35874: LD_INT 10
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 69
35891: NOT
35892: IFFALSE 35902
// weapon := ru_time_lapser ;
35894: LD_ADDR_VAR 0 18
35898: PUSH
35899: LD_INT 49
35901: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35902: LD_VAR 0 12
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: IN
35917: PUSH
35918: LD_INT 11
35920: PUSH
35921: LD_VAR 0 5
35925: IN
35926: PUSH
35927: LD_INT 30
35929: PUSH
35930: LD_VAR 0 5
35934: IN
35935: OR
35936: AND
35937: PUSH
35938: LD_INT 6
35940: PPUSH
35941: LD_VAR 0 16
35945: PPUSH
35946: CALL_OW 321
35950: PUSH
35951: LD_INT 2
35953: EQUAL
35954: AND
35955: IFFALSE 36120
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35957: LD_INT 22
35959: PUSH
35960: LD_VAR 0 16
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 35
35974: PUSH
35975: LD_INT 11
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 35
35984: PUSH
35985: LD_INT 30
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 91
35999: PUSH
36000: LD_VAR 0 1
36004: PUSH
36005: LD_INT 18
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: PPUSH
36018: CALL_OW 69
36022: NOT
36023: PUSH
36024: LD_INT 22
36026: PUSH
36027: LD_VAR 0 16
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 30
36041: PUSH
36042: LD_INT 32
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 30
36051: PUSH
36052: LD_INT 33
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 91
36066: PUSH
36067: LD_VAR 0 1
36071: PUSH
36072: LD_INT 12
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: PPUSH
36088: CALL_OW 69
36092: PUSH
36093: LD_INT 2
36095: GREATER
36096: AND
36097: IFFALSE 36120
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36099: LD_ADDR_VAR 0 18
36103: PUSH
36104: LD_INT 11
36106: PUSH
36107: LD_INT 30
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_VAR 0 12
36118: ARRAY
36119: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36120: LD_VAR 0 18
36124: NOT
36125: PUSH
36126: LD_INT 40
36128: PPUSH
36129: LD_VAR 0 16
36133: PPUSH
36134: CALL_OW 321
36138: PUSH
36139: LD_INT 2
36141: EQUAL
36142: AND
36143: PUSH
36144: LD_INT 7
36146: PUSH
36147: LD_VAR 0 5
36151: IN
36152: PUSH
36153: LD_INT 28
36155: PUSH
36156: LD_VAR 0 5
36160: IN
36161: OR
36162: PUSH
36163: LD_INT 45
36165: PUSH
36166: LD_VAR 0 5
36170: IN
36171: OR
36172: AND
36173: IFFALSE 36427
// begin hex := GetHexInfo ( x , y ) ;
36175: LD_ADDR_VAR 0 4
36179: PUSH
36180: LD_VAR 0 10
36184: PPUSH
36185: LD_VAR 0 11
36189: PPUSH
36190: CALL_OW 546
36194: ST_TO_ADDR
// if hex [ 1 ] then
36195: LD_VAR 0 4
36199: PUSH
36200: LD_INT 1
36202: ARRAY
36203: IFFALSE 36207
// exit ;
36205: GO 36610
// height := hex [ 2 ] ;
36207: LD_ADDR_VAR 0 15
36211: PUSH
36212: LD_VAR 0 4
36216: PUSH
36217: LD_INT 2
36219: ARRAY
36220: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36221: LD_ADDR_VAR 0 14
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: LD_INT 3
36234: PUSH
36235: LD_INT 5
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: ST_TO_ADDR
// for i in tmp do
36244: LD_ADDR_VAR 0 8
36248: PUSH
36249: LD_VAR 0 14
36253: PUSH
36254: FOR_IN
36255: IFFALSE 36425
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_VAR 0 10
36266: PPUSH
36267: LD_VAR 0 8
36271: PPUSH
36272: LD_INT 5
36274: PPUSH
36275: CALL_OW 272
36279: PUSH
36280: LD_VAR 0 11
36284: PPUSH
36285: LD_VAR 0 8
36289: PPUSH
36290: LD_INT 5
36292: PPUSH
36293: CALL_OW 273
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36302: LD_VAR 0 9
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: PPUSH
36311: LD_VAR 0 9
36315: PUSH
36316: LD_INT 2
36318: ARRAY
36319: PPUSH
36320: CALL_OW 488
36324: IFFALSE 36423
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36326: LD_ADDR_VAR 0 4
36330: PUSH
36331: LD_VAR 0 9
36335: PUSH
36336: LD_INT 1
36338: ARRAY
36339: PPUSH
36340: LD_VAR 0 9
36344: PUSH
36345: LD_INT 2
36347: ARRAY
36348: PPUSH
36349: CALL_OW 546
36353: ST_TO_ADDR
// if hex [ 1 ] then
36354: LD_VAR 0 4
36358: PUSH
36359: LD_INT 1
36361: ARRAY
36362: IFFALSE 36366
// continue ;
36364: GO 36254
// h := hex [ 2 ] ;
36366: LD_ADDR_VAR 0 13
36370: PUSH
36371: LD_VAR 0 4
36375: PUSH
36376: LD_INT 2
36378: ARRAY
36379: ST_TO_ADDR
// if h + 7 < height then
36380: LD_VAR 0 13
36384: PUSH
36385: LD_INT 7
36387: PLUS
36388: PUSH
36389: LD_VAR 0 15
36393: LESS
36394: IFFALSE 36423
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36396: LD_ADDR_VAR 0 18
36400: PUSH
36401: LD_INT 7
36403: PUSH
36404: LD_INT 28
36406: PUSH
36407: LD_INT 45
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: PUSH
36415: LD_VAR 0 12
36419: ARRAY
36420: ST_TO_ADDR
// break ;
36421: GO 36425
// end ; end ; end ;
36423: GO 36254
36425: POP
36426: POP
// end ; if not weapon then
36427: LD_VAR 0 18
36431: NOT
36432: IFFALSE 36492
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36434: LD_ADDR_VAR 0 5
36438: PUSH
36439: LD_VAR 0 5
36443: PUSH
36444: LD_INT 11
36446: PUSH
36447: LD_INT 30
36449: PUSH
36450: LD_INT 49
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: DIFF
36458: ST_TO_ADDR
// if not list then
36459: LD_VAR 0 5
36463: NOT
36464: IFFALSE 36468
// exit ;
36466: GO 36610
// weapon := list [ rand ( 1 , list ) ] ;
36468: LD_ADDR_VAR 0 18
36472: PUSH
36473: LD_VAR 0 5
36477: PUSH
36478: LD_INT 1
36480: PPUSH
36481: LD_VAR 0 5
36485: PPUSH
36486: CALL_OW 12
36490: ARRAY
36491: ST_TO_ADDR
// end ; if weapon then
36492: LD_VAR 0 18
36496: IFFALSE 36610
// begin tmp := CostOfWeapon ( weapon ) ;
36498: LD_ADDR_VAR 0 14
36502: PUSH
36503: LD_VAR 0 18
36507: PPUSH
36508: CALL_OW 451
36512: ST_TO_ADDR
// j := GetBase ( tower ) ;
36513: LD_ADDR_VAR 0 9
36517: PUSH
36518: LD_VAR 0 1
36522: PPUSH
36523: CALL_OW 274
36527: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36528: LD_VAR 0 9
36532: PPUSH
36533: LD_INT 1
36535: PPUSH
36536: CALL_OW 275
36540: PUSH
36541: LD_VAR 0 14
36545: PUSH
36546: LD_INT 1
36548: ARRAY
36549: GREATEREQUAL
36550: PUSH
36551: LD_VAR 0 9
36555: PPUSH
36556: LD_INT 2
36558: PPUSH
36559: CALL_OW 275
36563: PUSH
36564: LD_VAR 0 14
36568: PUSH
36569: LD_INT 2
36571: ARRAY
36572: GREATEREQUAL
36573: AND
36574: PUSH
36575: LD_VAR 0 9
36579: PPUSH
36580: LD_INT 3
36582: PPUSH
36583: CALL_OW 275
36587: PUSH
36588: LD_VAR 0 14
36592: PUSH
36593: LD_INT 3
36595: ARRAY
36596: GREATEREQUAL
36597: AND
36598: IFFALSE 36610
// result := weapon ;
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_VAR 0 18
36609: ST_TO_ADDR
// end ; end ;
36610: LD_VAR 0 3
36614: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36615: LD_INT 0
36617: PPUSH
36618: PPUSH
// result := true ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_INT 1
36626: ST_TO_ADDR
// if array1 = array2 then
36627: LD_VAR 0 1
36631: PUSH
36632: LD_VAR 0 2
36636: EQUAL
36637: IFFALSE 36697
// begin for i = 1 to array1 do
36639: LD_ADDR_VAR 0 4
36643: PUSH
36644: DOUBLE
36645: LD_INT 1
36647: DEC
36648: ST_TO_ADDR
36649: LD_VAR 0 1
36653: PUSH
36654: FOR_TO
36655: IFFALSE 36693
// if array1 [ i ] <> array2 [ i ] then
36657: LD_VAR 0 1
36661: PUSH
36662: LD_VAR 0 4
36666: ARRAY
36667: PUSH
36668: LD_VAR 0 2
36672: PUSH
36673: LD_VAR 0 4
36677: ARRAY
36678: NONEQUAL
36679: IFFALSE 36691
// begin result := false ;
36681: LD_ADDR_VAR 0 3
36685: PUSH
36686: LD_INT 0
36688: ST_TO_ADDR
// break ;
36689: GO 36693
// end ;
36691: GO 36654
36693: POP
36694: POP
// end else
36695: GO 36705
// result := false ;
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_INT 0
36704: ST_TO_ADDR
// end ;
36705: LD_VAR 0 3
36709: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36710: LD_INT 0
36712: PPUSH
36713: PPUSH
36714: PPUSH
// pom := GetBase ( fac ) ;
36715: LD_ADDR_VAR 0 5
36719: PUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 274
36729: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36730: LD_ADDR_VAR 0 4
36734: PUSH
36735: LD_VAR 0 2
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PPUSH
36744: LD_VAR 0 2
36748: PUSH
36749: LD_INT 2
36751: ARRAY
36752: PPUSH
36753: LD_VAR 0 2
36757: PUSH
36758: LD_INT 3
36760: ARRAY
36761: PPUSH
36762: LD_VAR 0 2
36766: PUSH
36767: LD_INT 4
36769: ARRAY
36770: PPUSH
36771: CALL_OW 449
36775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_VAR 0 5
36785: PPUSH
36786: LD_INT 1
36788: PPUSH
36789: CALL_OW 275
36793: PUSH
36794: LD_VAR 0 4
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: GREATEREQUAL
36803: PUSH
36804: LD_VAR 0 5
36808: PPUSH
36809: LD_INT 2
36811: PPUSH
36812: CALL_OW 275
36816: PUSH
36817: LD_VAR 0 4
36821: PUSH
36822: LD_INT 2
36824: ARRAY
36825: GREATEREQUAL
36826: AND
36827: PUSH
36828: LD_VAR 0 5
36832: PPUSH
36833: LD_INT 3
36835: PPUSH
36836: CALL_OW 275
36840: PUSH
36841: LD_VAR 0 4
36845: PUSH
36846: LD_INT 3
36848: ARRAY
36849: GREATEREQUAL
36850: AND
36851: ST_TO_ADDR
// end ;
36852: LD_VAR 0 3
36856: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36857: LD_INT 0
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
// pom := GetBase ( building ) ;
36863: LD_ADDR_VAR 0 3
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 274
36877: ST_TO_ADDR
// if not pom then
36878: LD_VAR 0 3
36882: NOT
36883: IFFALSE 36887
// exit ;
36885: GO 37057
// btype := GetBType ( building ) ;
36887: LD_ADDR_VAR 0 5
36891: PUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: CALL_OW 266
36901: ST_TO_ADDR
// if btype = b_armoury then
36902: LD_VAR 0 5
36906: PUSH
36907: LD_INT 4
36909: EQUAL
36910: IFFALSE 36920
// btype := b_barracks ;
36912: LD_ADDR_VAR 0 5
36916: PUSH
36917: LD_INT 5
36919: ST_TO_ADDR
// if btype = b_depot then
36920: LD_VAR 0 5
36924: PUSH
36925: LD_INT 0
36927: EQUAL
36928: IFFALSE 36938
// btype := b_warehouse ;
36930: LD_ADDR_VAR 0 5
36934: PUSH
36935: LD_INT 1
36937: ST_TO_ADDR
// if btype = b_workshop then
36938: LD_VAR 0 5
36942: PUSH
36943: LD_INT 2
36945: EQUAL
36946: IFFALSE 36956
// btype := b_factory ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_INT 3
36955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 5
36965: PPUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 248
36975: PPUSH
36976: CALL_OW 450
36980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36981: LD_ADDR_VAR 0 2
36985: PUSH
36986: LD_VAR 0 3
36990: PPUSH
36991: LD_INT 1
36993: PPUSH
36994: CALL_OW 275
36998: PUSH
36999: LD_VAR 0 4
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: GREATEREQUAL
37008: PUSH
37009: LD_VAR 0 3
37013: PPUSH
37014: LD_INT 2
37016: PPUSH
37017: CALL_OW 275
37021: PUSH
37022: LD_VAR 0 4
37026: PUSH
37027: LD_INT 2
37029: ARRAY
37030: GREATEREQUAL
37031: AND
37032: PUSH
37033: LD_VAR 0 3
37037: PPUSH
37038: LD_INT 3
37040: PPUSH
37041: CALL_OW 275
37045: PUSH
37046: LD_VAR 0 4
37050: PUSH
37051: LD_INT 3
37053: ARRAY
37054: GREATEREQUAL
37055: AND
37056: ST_TO_ADDR
// end ;
37057: LD_VAR 0 2
37061: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37062: LD_INT 0
37064: PPUSH
37065: PPUSH
37066: PPUSH
// pom := GetBase ( building ) ;
37067: LD_ADDR_VAR 0 4
37071: PUSH
37072: LD_VAR 0 1
37076: PPUSH
37077: CALL_OW 274
37081: ST_TO_ADDR
// if not pom then
37082: LD_VAR 0 4
37086: NOT
37087: IFFALSE 37091
// exit ;
37089: GO 37192
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37091: LD_ADDR_VAR 0 5
37095: PUSH
37096: LD_VAR 0 2
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 248
37110: PPUSH
37111: CALL_OW 450
37115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: LD_VAR 0 4
37125: PPUSH
37126: LD_INT 1
37128: PPUSH
37129: CALL_OW 275
37133: PUSH
37134: LD_VAR 0 5
37138: PUSH
37139: LD_INT 1
37141: ARRAY
37142: GREATEREQUAL
37143: PUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_INT 2
37151: PPUSH
37152: CALL_OW 275
37156: PUSH
37157: LD_VAR 0 5
37161: PUSH
37162: LD_INT 2
37164: ARRAY
37165: GREATEREQUAL
37166: AND
37167: PUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: LD_INT 3
37175: PPUSH
37176: CALL_OW 275
37180: PUSH
37181: LD_VAR 0 5
37185: PUSH
37186: LD_INT 3
37188: ARRAY
37189: GREATEREQUAL
37190: AND
37191: ST_TO_ADDR
// end ;
37192: LD_VAR 0 3
37196: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
// result := false ;
37209: LD_ADDR_VAR 0 6
37213: PUSH
37214: LD_INT 0
37216: ST_TO_ADDR
// if not base or not btype or not x or not y then
37217: LD_VAR 0 1
37221: NOT
37222: PUSH
37223: LD_VAR 0 2
37227: NOT
37228: OR
37229: PUSH
37230: LD_VAR 0 3
37234: NOT
37235: OR
37236: PUSH
37237: LD_VAR 0 4
37241: NOT
37242: OR
37243: IFFALSE 37247
// exit ;
37245: GO 37856
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
37247: LD_ADDR_VAR 0 12
37251: PUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: LD_VAR 0 4
37266: PPUSH
37267: LD_VAR 0 5
37271: PPUSH
37272: LD_VAR 0 1
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PPUSH
37281: CALL_OW 248
37285: PPUSH
37286: LD_INT 0
37288: PPUSH
37289: CALL 38693 0 6
37293: ST_TO_ADDR
// if not hexes then
37294: LD_VAR 0 12
37298: NOT
37299: IFFALSE 37303
// exit ;
37301: GO 37856
// for i = 1 to hexes do
37303: LD_ADDR_VAR 0 7
37307: PUSH
37308: DOUBLE
37309: LD_INT 1
37311: DEC
37312: ST_TO_ADDR
37313: LD_VAR 0 12
37317: PUSH
37318: FOR_TO
37319: IFFALSE 37854
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37321: LD_ADDR_VAR 0 11
37325: PUSH
37326: LD_VAR 0 12
37330: PUSH
37331: LD_VAR 0 7
37335: ARRAY
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 12
37345: PUSH
37346: LD_VAR 0 7
37350: ARRAY
37351: PUSH
37352: LD_INT 2
37354: ARRAY
37355: PPUSH
37356: CALL_OW 428
37360: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37361: LD_VAR 0 12
37365: PUSH
37366: LD_VAR 0 7
37370: ARRAY
37371: PUSH
37372: LD_INT 1
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 12
37380: PUSH
37381: LD_VAR 0 7
37385: ARRAY
37386: PUSH
37387: LD_INT 2
37389: ARRAY
37390: PPUSH
37391: CALL_OW 351
37395: PUSH
37396: LD_VAR 0 12
37400: PUSH
37401: LD_VAR 0 7
37405: ARRAY
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 12
37415: PUSH
37416: LD_VAR 0 7
37420: ARRAY
37421: PUSH
37422: LD_INT 2
37424: ARRAY
37425: PPUSH
37426: CALL_OW 488
37430: NOT
37431: OR
37432: PUSH
37433: LD_VAR 0 11
37437: PPUSH
37438: CALL_OW 247
37442: PUSH
37443: LD_INT 3
37445: EQUAL
37446: OR
37447: IFFALSE 37453
// exit ;
37449: POP
37450: POP
37451: GO 37856
// if not tmp or not tmp in base then
37453: LD_VAR 0 11
37457: NOT
37458: PUSH
37459: LD_VAR 0 11
37463: PUSH
37464: LD_VAR 0 1
37468: IN
37469: NOT
37470: OR
37471: IFFALSE 37475
// continue ;
37473: GO 37318
// result := true ;
37475: LD_ADDR_VAR 0 6
37479: PUSH
37480: LD_INT 1
37482: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37483: LD_ADDR_VAR 0 15
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_INT 22
37495: PUSH
37496: LD_VAR 0 11
37500: PPUSH
37501: CALL_OW 255
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 30
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 30
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PPUSH
37542: CALL_OW 72
37546: ST_TO_ADDR
// if dep then
37547: LD_VAR 0 15
37551: IFFALSE 37687
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37553: LD_ADDR_VAR 0 14
37557: PUSH
37558: LD_VAR 0 15
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PPUSH
37567: CALL_OW 250
37571: PPUSH
37572: LD_VAR 0 15
37576: PUSH
37577: LD_INT 1
37579: ARRAY
37580: PPUSH
37581: CALL_OW 254
37585: PPUSH
37586: LD_INT 5
37588: PPUSH
37589: CALL_OW 272
37593: PUSH
37594: LD_VAR 0 15
37598: PUSH
37599: LD_INT 1
37601: ARRAY
37602: PPUSH
37603: CALL_OW 251
37607: PPUSH
37608: LD_VAR 0 15
37612: PUSH
37613: LD_INT 1
37615: ARRAY
37616: PPUSH
37617: CALL_OW 254
37621: PPUSH
37622: LD_INT 5
37624: PPUSH
37625: CALL_OW 273
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37634: LD_VAR 0 14
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: PPUSH
37643: LD_VAR 0 14
37647: PUSH
37648: LD_INT 2
37650: ARRAY
37651: PPUSH
37652: CALL_OW 488
37656: IFFALSE 37687
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37658: LD_VAR 0 11
37662: PPUSH
37663: LD_VAR 0 14
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PPUSH
37672: LD_VAR 0 14
37676: PUSH
37677: LD_INT 2
37679: ARRAY
37680: PPUSH
37681: CALL_OW 111
// continue ;
37685: GO 37318
// end ; end ; r := GetDir ( tmp ) ;
37687: LD_ADDR_VAR 0 13
37691: PUSH
37692: LD_VAR 0 11
37696: PPUSH
37697: CALL_OW 254
37701: ST_TO_ADDR
// if r = 5 then
37702: LD_VAR 0 13
37706: PUSH
37707: LD_INT 5
37709: EQUAL
37710: IFFALSE 37720
// r := 0 ;
37712: LD_ADDR_VAR 0 13
37716: PUSH
37717: LD_INT 0
37719: ST_TO_ADDR
// for j = r to 5 do
37720: LD_ADDR_VAR 0 8
37724: PUSH
37725: DOUBLE
37726: LD_VAR 0 13
37730: DEC
37731: ST_TO_ADDR
37732: LD_INT 5
37734: PUSH
37735: FOR_TO
37736: IFFALSE 37850
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37738: LD_ADDR_VAR 0 9
37742: PUSH
37743: LD_VAR 0 11
37747: PPUSH
37748: CALL_OW 250
37752: PPUSH
37753: LD_VAR 0 8
37757: PPUSH
37758: LD_INT 2
37760: PPUSH
37761: CALL_OW 272
37765: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37766: LD_ADDR_VAR 0 10
37770: PUSH
37771: LD_VAR 0 11
37775: PPUSH
37776: CALL_OW 251
37780: PPUSH
37781: LD_VAR 0 8
37785: PPUSH
37786: LD_INT 2
37788: PPUSH
37789: CALL_OW 273
37793: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37794: LD_VAR 0 9
37798: PPUSH
37799: LD_VAR 0 10
37803: PPUSH
37804: CALL_OW 488
37808: PUSH
37809: LD_VAR 0 9
37813: PPUSH
37814: LD_VAR 0 10
37818: PPUSH
37819: CALL_OW 428
37823: NOT
37824: AND
37825: IFFALSE 37848
// begin ComMoveXY ( tmp , _x , _y ) ;
37827: LD_VAR 0 11
37831: PPUSH
37832: LD_VAR 0 9
37836: PPUSH
37837: LD_VAR 0 10
37841: PPUSH
37842: CALL_OW 111
// break ;
37846: GO 37850
// end ; end ;
37848: GO 37735
37850: POP
37851: POP
// end ;
37852: GO 37318
37854: POP
37855: POP
// end ;
37856: LD_VAR 0 6
37860: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37861: LD_INT 0
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
// result := false ;
37873: LD_ADDR_VAR 0 6
37877: PUSH
37878: LD_INT 0
37880: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37881: LD_VAR 0 1
37885: NOT
37886: PUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 266
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: IN
37907: NOT
37908: OR
37909: PUSH
37910: LD_VAR 0 2
37914: NOT
37915: OR
37916: PUSH
37917: LD_VAR 0 5
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: LD_INT 4
37936: PUSH
37937: LD_INT 5
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: IN
37948: NOT
37949: OR
37950: PUSH
37951: LD_VAR 0 3
37955: PPUSH
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 488
37965: NOT
37966: OR
37967: IFFALSE 37971
// exit ;
37969: GO 38688
// pom := GetBase ( depot ) ;
37971: LD_ADDR_VAR 0 10
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 274
37985: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37986: LD_ADDR_VAR 0 11
37990: PUSH
37991: LD_VAR 0 2
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 248
38005: PPUSH
38006: CALL_OW 450
38010: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38011: LD_VAR 0 10
38015: PPUSH
38016: LD_INT 1
38018: PPUSH
38019: CALL_OW 275
38023: PUSH
38024: LD_VAR 0 11
38028: PUSH
38029: LD_INT 1
38031: ARRAY
38032: GREATEREQUAL
38033: PUSH
38034: LD_VAR 0 10
38038: PPUSH
38039: LD_INT 2
38041: PPUSH
38042: CALL_OW 275
38046: PUSH
38047: LD_VAR 0 11
38051: PUSH
38052: LD_INT 2
38054: ARRAY
38055: GREATEREQUAL
38056: AND
38057: PUSH
38058: LD_VAR 0 10
38062: PPUSH
38063: LD_INT 3
38065: PPUSH
38066: CALL_OW 275
38070: PUSH
38071: LD_VAR 0 11
38075: PUSH
38076: LD_INT 3
38078: ARRAY
38079: GREATEREQUAL
38080: AND
38081: NOT
38082: IFFALSE 38086
// exit ;
38084: GO 38688
// if GetBType ( depot ) = b_depot then
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 266
38095: PUSH
38096: LD_INT 0
38098: EQUAL
38099: IFFALSE 38111
// dist := 28 else
38101: LD_ADDR_VAR 0 14
38105: PUSH
38106: LD_INT 28
38108: ST_TO_ADDR
38109: GO 38119
// dist := 36 ;
38111: LD_ADDR_VAR 0 14
38115: PUSH
38116: LD_INT 36
38118: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38119: LD_VAR 0 1
38123: PPUSH
38124: LD_VAR 0 3
38128: PPUSH
38129: LD_VAR 0 4
38133: PPUSH
38134: CALL_OW 297
38138: PUSH
38139: LD_VAR 0 14
38143: GREATER
38144: IFFALSE 38148
// exit ;
38146: GO 38688
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38148: LD_ADDR_VAR 0 12
38152: PUSH
38153: LD_VAR 0 2
38157: PPUSH
38158: LD_VAR 0 3
38162: PPUSH
38163: LD_VAR 0 4
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 248
38182: PPUSH
38183: LD_INT 0
38185: PPUSH
38186: CALL 38693 0 6
38190: ST_TO_ADDR
// if not hexes then
38191: LD_VAR 0 12
38195: NOT
38196: IFFALSE 38200
// exit ;
38198: GO 38688
// hex := GetHexInfo ( x , y ) ;
38200: LD_ADDR_VAR 0 15
38204: PUSH
38205: LD_VAR 0 3
38209: PPUSH
38210: LD_VAR 0 4
38214: PPUSH
38215: CALL_OW 546
38219: ST_TO_ADDR
// if hex [ 1 ] then
38220: LD_VAR 0 15
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: IFFALSE 38232
// exit ;
38230: GO 38688
// height := hex [ 2 ] ;
38232: LD_ADDR_VAR 0 13
38236: PUSH
38237: LD_VAR 0 15
38241: PUSH
38242: LD_INT 2
38244: ARRAY
38245: ST_TO_ADDR
// for i = 1 to hexes do
38246: LD_ADDR_VAR 0 7
38250: PUSH
38251: DOUBLE
38252: LD_INT 1
38254: DEC
38255: ST_TO_ADDR
38256: LD_VAR 0 12
38260: PUSH
38261: FOR_TO
38262: IFFALSE 38592
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38264: LD_VAR 0 12
38268: PUSH
38269: LD_VAR 0 7
38273: ARRAY
38274: PUSH
38275: LD_INT 1
38277: ARRAY
38278: PPUSH
38279: LD_VAR 0 12
38283: PUSH
38284: LD_VAR 0 7
38288: ARRAY
38289: PUSH
38290: LD_INT 2
38292: ARRAY
38293: PPUSH
38294: CALL_OW 488
38298: NOT
38299: PUSH
38300: LD_VAR 0 12
38304: PUSH
38305: LD_VAR 0 7
38309: ARRAY
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 12
38319: PUSH
38320: LD_VAR 0 7
38324: ARRAY
38325: PUSH
38326: LD_INT 2
38328: ARRAY
38329: PPUSH
38330: CALL_OW 428
38334: PUSH
38335: LD_INT 0
38337: GREATER
38338: OR
38339: PUSH
38340: LD_VAR 0 12
38344: PUSH
38345: LD_VAR 0 7
38349: ARRAY
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: PPUSH
38355: LD_VAR 0 12
38359: PUSH
38360: LD_VAR 0 7
38364: ARRAY
38365: PUSH
38366: LD_INT 2
38368: ARRAY
38369: PPUSH
38370: CALL_OW 351
38374: OR
38375: IFFALSE 38381
// exit ;
38377: POP
38378: POP
38379: GO 38688
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38381: LD_ADDR_VAR 0 8
38385: PUSH
38386: LD_VAR 0 12
38390: PUSH
38391: LD_VAR 0 7
38395: ARRAY
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: LD_VAR 0 12
38405: PUSH
38406: LD_VAR 0 7
38410: ARRAY
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: PPUSH
38416: CALL_OW 546
38420: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38421: LD_VAR 0 8
38425: PUSH
38426: LD_INT 1
38428: ARRAY
38429: PUSH
38430: LD_VAR 0 8
38434: PUSH
38435: LD_INT 2
38437: ARRAY
38438: PUSH
38439: LD_VAR 0 13
38443: PUSH
38444: LD_INT 2
38446: PLUS
38447: GREATER
38448: OR
38449: PUSH
38450: LD_VAR 0 8
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PUSH
38459: LD_VAR 0 13
38463: PUSH
38464: LD_INT 2
38466: MINUS
38467: LESS
38468: OR
38469: PUSH
38470: LD_VAR 0 8
38474: PUSH
38475: LD_INT 3
38477: ARRAY
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 8
38484: PUSH
38485: LD_INT 9
38487: PUSH
38488: LD_INT 10
38490: PUSH
38491: LD_INT 11
38493: PUSH
38494: LD_INT 12
38496: PUSH
38497: LD_INT 13
38499: PUSH
38500: LD_INT 16
38502: PUSH
38503: LD_INT 17
38505: PUSH
38506: LD_INT 18
38508: PUSH
38509: LD_INT 19
38511: PUSH
38512: LD_INT 20
38514: PUSH
38515: LD_INT 21
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: IN
38533: NOT
38534: OR
38535: PUSH
38536: LD_VAR 0 8
38540: PUSH
38541: LD_INT 5
38543: ARRAY
38544: NOT
38545: OR
38546: PUSH
38547: LD_VAR 0 8
38551: PUSH
38552: LD_INT 6
38554: ARRAY
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: LD_INT 7
38564: PUSH
38565: LD_INT 9
38567: PUSH
38568: LD_INT 10
38570: PUSH
38571: LD_INT 11
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: IN
38582: NOT
38583: OR
38584: IFFALSE 38590
// exit ;
38586: POP
38587: POP
38588: GO 38688
// end ;
38590: GO 38261
38592: POP
38593: POP
// side := GetSide ( depot ) ;
38594: LD_ADDR_VAR 0 9
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 255
38608: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38609: LD_VAR 0 9
38613: PPUSH
38614: LD_VAR 0 3
38618: PPUSH
38619: LD_VAR 0 4
38623: PPUSH
38624: LD_INT 20
38626: PPUSH
38627: CALL 31342 0 4
38631: PUSH
38632: LD_INT 4
38634: ARRAY
38635: IFFALSE 38639
// exit ;
38637: GO 38688
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 29
38646: PUSH
38647: LD_INT 30
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: IN
38654: PUSH
38655: LD_VAR 0 3
38659: PPUSH
38660: LD_VAR 0 4
38664: PPUSH
38665: LD_VAR 0 9
38669: PPUSH
38670: CALL_OW 440
38674: NOT
38675: AND
38676: IFFALSE 38680
// exit ;
38678: GO 38688
// result := true ;
38680: LD_ADDR_VAR 0 6
38684: PUSH
38685: LD_INT 1
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 6
38692: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
38693: LD_INT 0
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
// result = [ ] ;
38753: LD_ADDR_VAR 0 7
38757: PUSH
38758: EMPTY
38759: ST_TO_ADDR
// temp_list = [ ] ;
38760: LD_ADDR_VAR 0 9
38764: PUSH
38765: EMPTY
38766: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38767: LD_VAR 0 4
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: LD_INT 4
38786: PUSH
38787: LD_INT 5
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: IN
38798: NOT
38799: PUSH
38800: LD_VAR 0 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: IN
38815: PUSH
38816: LD_VAR 0 5
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: IN
38835: NOT
38836: AND
38837: OR
38838: IFFALSE 38842
// exit ;
38840: GO 57233
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 6
38849: PUSH
38850: LD_INT 7
38852: PUSH
38853: LD_INT 8
38855: PUSH
38856: LD_INT 13
38858: PUSH
38859: LD_INT 12
38861: PUSH
38862: LD_INT 15
38864: PUSH
38865: LD_INT 11
38867: PUSH
38868: LD_INT 14
38870: PUSH
38871: LD_INT 10
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: IN
38885: IFFALSE 38895
// btype = b_lab ;
38887: LD_ADDR_VAR 0 1
38891: PUSH
38892: LD_INT 6
38894: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38895: LD_VAR 0 6
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: IN
38914: NOT
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 3
38932: PUSH
38933: LD_INT 6
38935: PUSH
38936: LD_INT 36
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: LD_INT 5
38944: PUSH
38945: LD_INT 31
38947: PUSH
38948: LD_INT 32
38950: PUSH
38951: LD_INT 33
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: IN
38967: NOT
38968: PUSH
38969: LD_VAR 0 6
38973: PUSH
38974: LD_INT 1
38976: EQUAL
38977: AND
38978: OR
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: IN
38995: NOT
38996: PUSH
38997: LD_VAR 0 6
39001: PUSH
39002: LD_INT 2
39004: EQUAL
39005: AND
39006: OR
39007: IFFALSE 39017
// mode = 0 ;
39009: LD_ADDR_VAR 0 6
39013: PUSH
39014: LD_INT 0
39016: ST_TO_ADDR
// case mode of 0 :
39017: LD_VAR 0 6
39021: PUSH
39022: LD_INT 0
39024: DOUBLE
39025: EQUAL
39026: IFTRUE 39030
39028: GO 50483
39030: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39031: LD_ADDR_VAR 0 11
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39224: LD_ADDR_VAR 0 12
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39420: LD_ADDR_VAR 0 13
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: LD_INT 3
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: NEG
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: NEG
39592: PUSH
39593: LD_INT 3
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39619: LD_ADDR_VAR 0 14
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 3
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39815: LD_ADDR_VAR 0 15
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40008: LD_ADDR_VAR 0 16
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40201: LD_ADDR_VAR 0 17
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40431: LD_ADDR_VAR 0 18
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40661: LD_ADDR_VAR 0 19
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40891: LD_ADDR_VAR 0 20
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41121: LD_ADDR_VAR 0 21
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41351: LD_ADDR_VAR 0 22
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: NEG
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41581: LD_ADDR_VAR 0 23
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 3
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41861: LD_ADDR_VAR 0 24
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: NEG
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42137: LD_ADDR_VAR 0 25
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 3
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42411: LD_ADDR_VAR 0 26
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: LD_INT 3
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42687: LD_ADDR_VAR 0 27
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42967: LD_ADDR_VAR 0 28
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 3
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: NEG
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43249: LD_ADDR_VAR 0 29
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 3
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 30
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 3
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43806: LD_ADDR_VAR 0 31
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: LD_INT 3
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 3
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44084: LD_ADDR_VAR 0 32
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 3
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44362: LD_ADDR_VAR 0 33
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44641: LD_ADDR_VAR 0 34
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 3
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 3
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44921: LD_ADDR_VAR 0 35
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45033: LD_ADDR_VAR 0 36
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45145: LD_ADDR_VAR 0 37
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45257: LD_ADDR_VAR 0 38
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45369: LD_ADDR_VAR 0 39
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45481: LD_ADDR_VAR 0 40
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45593: LD_ADDR_VAR 0 41
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45943: LD_ADDR_VAR 0 42
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 3
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 3
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46293: LD_ADDR_VAR 0 43
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46641: LD_ADDR_VAR 0 44
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 3
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46991: LD_ADDR_VAR 0 45
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 3
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: LD_INT 3
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47341: LD_ADDR_VAR 0 46
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47689: LD_ADDR_VAR 0 47
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47840: LD_ADDR_VAR 0 48
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47987: LD_ADDR_VAR 0 49
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48131: LD_ADDR_VAR 0 50
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48275: LD_ADDR_VAR 0 51
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48422: LD_ADDR_VAR 0 52
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48573: LD_ADDR_VAR 0 53
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48803: LD_ADDR_VAR 0 54
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49033: LD_ADDR_VAR 0 55
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49263: LD_ADDR_VAR 0 56
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49493: LD_ADDR_VAR 0 57
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49723: LD_ADDR_VAR 0 58
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49953: LD_ADDR_VAR 0 59
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50041: LD_ADDR_VAR 0 60
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50129: LD_ADDR_VAR 0 61
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50217: LD_ADDR_VAR 0 62
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50305: LD_ADDR_VAR 0 63
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50393: LD_ADDR_VAR 0 64
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// end ; 1 :
50481: GO 56378
50483: LD_INT 1
50485: DOUBLE
50486: EQUAL
50487: IFTRUE 50491
50489: GO 53114
50491: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50492: LD_ADDR_VAR 0 11
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50536: LD_ADDR_VAR 0 12
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50577: LD_ADDR_VAR 0 13
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50617: LD_ADDR_VAR 0 14
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50658: LD_ADDR_VAR 0 15
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50702: LD_ADDR_VAR 0 16
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50748: LD_ADDR_VAR 0 17
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50792: LD_ADDR_VAR 0 18
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50833: LD_ADDR_VAR 0 19
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50873: LD_ADDR_VAR 0 20
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50914: LD_ADDR_VAR 0 21
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50958: LD_ADDR_VAR 0 22
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51004: LD_ADDR_VAR 0 23
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 3
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 4
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51048: LD_ADDR_VAR 0 24
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51089: LD_ADDR_VAR 0 25
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 4
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51129: LD_ADDR_VAR 0 26
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 4
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51170: LD_ADDR_VAR 0 27
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51214: LD_ADDR_VAR 0 28
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51260: LD_ADDR_VAR 0 29
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 5
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 5
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 6
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 6
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 5
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51415: LD_ADDR_VAR 0 30
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 4
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 5
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 5
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 5
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 6
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 6
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51558: LD_ADDR_VAR 0 31
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 4
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 5
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 5
51635: PUSH
51636: LD_INT 5
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 4
51645: PUSH
51646: LD_INT 5
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 6
51655: PUSH
51656: LD_INT 5
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 6
51665: PUSH
51666: LD_INT 6
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 5
51675: PUSH
51676: LD_INT 6
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51697: LD_ADDR_VAR 0 32
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 4
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 5
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 5
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 6
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 6
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 5
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51840: LD_ADDR_VAR 0 33
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 4
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 5
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 5
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 5
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 6
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 6
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51995: LD_ADDR_VAR 0 34
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 4
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 4
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 4
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: NEG
52075: PUSH
52076: LD_INT 5
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 5
52086: NEG
52087: PUSH
52088: LD_INT 4
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 5
52098: NEG
52099: PUSH
52100: LD_INT 5
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: NEG
52111: PUSH
52112: LD_INT 6
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 6
52122: NEG
52123: PUSH
52124: LD_INT 5
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 6
52134: NEG
52135: PUSH
52136: LD_INT 6
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52158: LD_ADDR_VAR 0 41
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52202: LD_ADDR_VAR 0 42
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52243: LD_ADDR_VAR 0 43
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52283: LD_ADDR_VAR 0 44
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52324: LD_ADDR_VAR 0 45
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52368: LD_ADDR_VAR 0 46
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52414: LD_ADDR_VAR 0 47
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52447: LD_ADDR_VAR 0 48
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52478: LD_ADDR_VAR 0 49
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 3
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52507: LD_ADDR_VAR 0 50
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52536: LD_ADDR_VAR 0 51
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 52
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52600: LD_ADDR_VAR 0 53
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52644: LD_ADDR_VAR 0 54
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52685: LD_ADDR_VAR 0 55
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52725: LD_ADDR_VAR 0 56
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52766: LD_ADDR_VAR 0 57
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52810: LD_ADDR_VAR 0 58
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52856: LD_ADDR_VAR 0 59
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52900: LD_ADDR_VAR 0 60
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52941: LD_ADDR_VAR 0 61
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52981: LD_ADDR_VAR 0 62
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53022: LD_ADDR_VAR 0 63
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 64
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// end ; 2 :
53112: GO 56378
53114: LD_INT 2
53116: DOUBLE
53117: EQUAL
53118: IFTRUE 53122
53120: GO 56377
53122: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53123: LD_ADDR_VAR 0 29
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 4
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 5
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 5
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 4
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 5
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: LD_INT 4
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 4
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 4
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 5
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 4
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 5
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 4
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 4
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 4
53508: NEG
53509: PUSH
53510: LD_INT 4
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: LD_INT 5
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: LD_INT 4
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 4
53556: NEG
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 5
53568: NEG
53569: PUSH
53570: LD_INT 4
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 5
53580: NEG
53581: PUSH
53582: LD_INT 5
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: LD_INT 5
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 5
53604: NEG
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53661: LD_ADDR_VAR 0 30
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 5
53688: PUSH
53689: LD_INT 4
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 5
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 4
53708: PUSH
53709: LD_INT 5
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 5
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 4
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 4
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 4
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 4
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 4
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 4
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 5
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 5
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 5
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 4
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: NEG
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 4
54025: NEG
54026: PUSH
54027: LD_INT 4
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 4
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 4
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 4
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 5
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 5
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54208: LD_ADDR_VAR 0 31
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 4
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 4
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 5
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 5
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 4
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 4
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 4
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 4
54410: NEG
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 4
54422: NEG
54423: PUSH
54424: LD_INT 5
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 4
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 4
54458: NEG
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 5
54470: NEG
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 5
54482: NEG
54483: PUSH
54484: LD_INT 5
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: LD_INT 5
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 4
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 4
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 4
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 4
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 5
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 5
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 4
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54758: LD_ADDR_VAR 0 32
54762: PUSH
54763: LD_INT 4
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 5
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 5
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 5
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 4
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 4
54927: NEG
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: LD_INT 4
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: NEG
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 4
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 5
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 4
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 4
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 5
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 5
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: PUSH
55191: LD_INT 4
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 5
55200: PUSH
55201: LD_INT 5
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 4
55210: PUSH
55211: LD_INT 5
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 4
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 3
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: LD_INT 5
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55305: LD_ADDR_VAR 0 33
55309: PUSH
55310: LD_INT 4
55312: NEG
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: NEG
55325: PUSH
55326: LD_INT 5
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 4
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 4
55360: NEG
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 5
55372: NEG
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 5
55384: NEG
55385: PUSH
55386: LD_INT 5
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: LD_INT 5
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: NEG
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 4
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 4
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 4
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 5
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 5
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 4
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 4
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: PUSH
55646: LD_INT 4
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: LD_INT 4
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 4
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 5
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55843: LD_ADDR_VAR 0 34
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 4
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 5
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 4
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 5
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 3
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 5
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 4
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: LD_INT 4
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: LD_INT 4
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: LD_INT 5
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: PUSH
56086: LD_INT 5
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 4
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 5
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 4
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 4
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 4
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 5
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 5
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// end ; end ;
56375: GO 56378
56377: POP
// case btype of b_depot , b_warehouse :
56378: LD_VAR 0 1
56382: PUSH
56383: LD_INT 0
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56397
56389: LD_INT 1
56391: DOUBLE
56392: EQUAL
56393: IFTRUE 56397
56395: GO 56598
56397: POP
// case nation of nation_american :
56398: LD_VAR 0 5
56402: PUSH
56403: LD_INT 1
56405: DOUBLE
56406: EQUAL
56407: IFTRUE 56411
56409: GO 56467
56411: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
56412: LD_ADDR_VAR 0 9
56416: PUSH
56417: LD_VAR 0 11
56421: PUSH
56422: LD_VAR 0 12
56426: PUSH
56427: LD_VAR 0 13
56431: PUSH
56432: LD_VAR 0 14
56436: PUSH
56437: LD_VAR 0 15
56441: PUSH
56442: LD_VAR 0 16
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: PUSH
56455: LD_VAR 0 4
56459: PUSH
56460: LD_INT 1
56462: PLUS
56463: ARRAY
56464: ST_TO_ADDR
56465: GO 56596
56467: LD_INT 2
56469: DOUBLE
56470: EQUAL
56471: IFTRUE 56475
56473: GO 56531
56475: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56476: LD_ADDR_VAR 0 9
56480: PUSH
56481: LD_VAR 0 17
56485: PUSH
56486: LD_VAR 0 18
56490: PUSH
56491: LD_VAR 0 19
56495: PUSH
56496: LD_VAR 0 20
56500: PUSH
56501: LD_VAR 0 21
56505: PUSH
56506: LD_VAR 0 22
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: PUSH
56519: LD_VAR 0 4
56523: PUSH
56524: LD_INT 1
56526: PLUS
56527: ARRAY
56528: ST_TO_ADDR
56529: GO 56596
56531: LD_INT 3
56533: DOUBLE
56534: EQUAL
56535: IFTRUE 56539
56537: GO 56595
56539: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56540: LD_ADDR_VAR 0 9
56544: PUSH
56545: LD_VAR 0 23
56549: PUSH
56550: LD_VAR 0 24
56554: PUSH
56555: LD_VAR 0 25
56559: PUSH
56560: LD_VAR 0 26
56564: PUSH
56565: LD_VAR 0 27
56569: PUSH
56570: LD_VAR 0 28
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: PUSH
56583: LD_VAR 0 4
56587: PUSH
56588: LD_INT 1
56590: PLUS
56591: ARRAY
56592: ST_TO_ADDR
56593: GO 56596
56595: POP
56596: GO 57151
56598: LD_INT 2
56600: DOUBLE
56601: EQUAL
56602: IFTRUE 56612
56604: LD_INT 3
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56612
56610: GO 56668
56612: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56613: LD_ADDR_VAR 0 9
56617: PUSH
56618: LD_VAR 0 29
56622: PUSH
56623: LD_VAR 0 30
56627: PUSH
56628: LD_VAR 0 31
56632: PUSH
56633: LD_VAR 0 32
56637: PUSH
56638: LD_VAR 0 33
56642: PUSH
56643: LD_VAR 0 34
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: PUSH
56656: LD_VAR 0 4
56660: PUSH
56661: LD_INT 1
56663: PLUS
56664: ARRAY
56665: ST_TO_ADDR
56666: GO 57151
56668: LD_INT 16
56670: DOUBLE
56671: EQUAL
56672: IFTRUE 56730
56674: LD_INT 17
56676: DOUBLE
56677: EQUAL
56678: IFTRUE 56730
56680: LD_INT 18
56682: DOUBLE
56683: EQUAL
56684: IFTRUE 56730
56686: LD_INT 19
56688: DOUBLE
56689: EQUAL
56690: IFTRUE 56730
56692: LD_INT 22
56694: DOUBLE
56695: EQUAL
56696: IFTRUE 56730
56698: LD_INT 20
56700: DOUBLE
56701: EQUAL
56702: IFTRUE 56730
56704: LD_INT 21
56706: DOUBLE
56707: EQUAL
56708: IFTRUE 56730
56710: LD_INT 23
56712: DOUBLE
56713: EQUAL
56714: IFTRUE 56730
56716: LD_INT 24
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56730
56722: LD_INT 25
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56730
56728: GO 56786
56730: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56731: LD_ADDR_VAR 0 9
56735: PUSH
56736: LD_VAR 0 35
56740: PUSH
56741: LD_VAR 0 36
56745: PUSH
56746: LD_VAR 0 37
56750: PUSH
56751: LD_VAR 0 38
56755: PUSH
56756: LD_VAR 0 39
56760: PUSH
56761: LD_VAR 0 40
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: PUSH
56774: LD_VAR 0 4
56778: PUSH
56779: LD_INT 1
56781: PLUS
56782: ARRAY
56783: ST_TO_ADDR
56784: GO 57151
56786: LD_INT 6
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56842
56792: LD_INT 7
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56842
56798: LD_INT 8
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56842
56804: LD_INT 13
56806: DOUBLE
56807: EQUAL
56808: IFTRUE 56842
56810: LD_INT 12
56812: DOUBLE
56813: EQUAL
56814: IFTRUE 56842
56816: LD_INT 15
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56842
56822: LD_INT 11
56824: DOUBLE
56825: EQUAL
56826: IFTRUE 56842
56828: LD_INT 14
56830: DOUBLE
56831: EQUAL
56832: IFTRUE 56842
56834: LD_INT 10
56836: DOUBLE
56837: EQUAL
56838: IFTRUE 56842
56840: GO 56898
56842: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
56843: LD_ADDR_VAR 0 9
56847: PUSH
56848: LD_VAR 0 41
56852: PUSH
56853: LD_VAR 0 42
56857: PUSH
56858: LD_VAR 0 43
56862: PUSH
56863: LD_VAR 0 44
56867: PUSH
56868: LD_VAR 0 45
56872: PUSH
56873: LD_VAR 0 46
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: PUSH
56886: LD_VAR 0 4
56890: PUSH
56891: LD_INT 1
56893: PLUS
56894: ARRAY
56895: ST_TO_ADDR
56896: GO 57151
56898: LD_INT 36
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56906
56904: GO 56962
56906: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56907: LD_ADDR_VAR 0 9
56911: PUSH
56912: LD_VAR 0 47
56916: PUSH
56917: LD_VAR 0 48
56921: PUSH
56922: LD_VAR 0 49
56926: PUSH
56927: LD_VAR 0 50
56931: PUSH
56932: LD_VAR 0 51
56936: PUSH
56937: LD_VAR 0 52
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: PUSH
56950: LD_VAR 0 4
56954: PUSH
56955: LD_INT 1
56957: PLUS
56958: ARRAY
56959: ST_TO_ADDR
56960: GO 57151
56962: LD_INT 4
56964: DOUBLE
56965: EQUAL
56966: IFTRUE 56988
56968: LD_INT 5
56970: DOUBLE
56971: EQUAL
56972: IFTRUE 56988
56974: LD_INT 34
56976: DOUBLE
56977: EQUAL
56978: IFTRUE 56988
56980: LD_INT 37
56982: DOUBLE
56983: EQUAL
56984: IFTRUE 56988
56986: GO 57044
56988: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56989: LD_ADDR_VAR 0 9
56993: PUSH
56994: LD_VAR 0 53
56998: PUSH
56999: LD_VAR 0 54
57003: PUSH
57004: LD_VAR 0 55
57008: PUSH
57009: LD_VAR 0 56
57013: PUSH
57014: LD_VAR 0 57
57018: PUSH
57019: LD_VAR 0 58
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: PUSH
57032: LD_VAR 0 4
57036: PUSH
57037: LD_INT 1
57039: PLUS
57040: ARRAY
57041: ST_TO_ADDR
57042: GO 57151
57044: LD_INT 31
57046: DOUBLE
57047: EQUAL
57048: IFTRUE 57094
57050: LD_INT 32
57052: DOUBLE
57053: EQUAL
57054: IFTRUE 57094
57056: LD_INT 33
57058: DOUBLE
57059: EQUAL
57060: IFTRUE 57094
57062: LD_INT 27
57064: DOUBLE
57065: EQUAL
57066: IFTRUE 57094
57068: LD_INT 26
57070: DOUBLE
57071: EQUAL
57072: IFTRUE 57094
57074: LD_INT 28
57076: DOUBLE
57077: EQUAL
57078: IFTRUE 57094
57080: LD_INT 29
57082: DOUBLE
57083: EQUAL
57084: IFTRUE 57094
57086: LD_INT 30
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57094
57092: GO 57150
57094: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
57095: LD_ADDR_VAR 0 9
57099: PUSH
57100: LD_VAR 0 59
57104: PUSH
57105: LD_VAR 0 60
57109: PUSH
57110: LD_VAR 0 61
57114: PUSH
57115: LD_VAR 0 62
57119: PUSH
57120: LD_VAR 0 63
57124: PUSH
57125: LD_VAR 0 64
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: PUSH
57138: LD_VAR 0 4
57142: PUSH
57143: LD_INT 1
57145: PLUS
57146: ARRAY
57147: ST_TO_ADDR
57148: GO 57151
57150: POP
// temp_list2 = [ ] ;
57151: LD_ADDR_VAR 0 10
57155: PUSH
57156: EMPTY
57157: ST_TO_ADDR
// for i in temp_list do
57158: LD_ADDR_VAR 0 8
57162: PUSH
57163: LD_VAR 0 9
57167: PUSH
57168: FOR_IN
57169: IFFALSE 57221
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57171: LD_ADDR_VAR 0 10
57175: PUSH
57176: LD_VAR 0 10
57180: PUSH
57181: LD_VAR 0 8
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PUSH
57190: LD_VAR 0 2
57194: PLUS
57195: PUSH
57196: LD_VAR 0 8
57200: PUSH
57201: LD_INT 2
57203: ARRAY
57204: PUSH
57205: LD_VAR 0 3
57209: PLUS
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: ADD
57218: ST_TO_ADDR
57219: GO 57168
57221: POP
57222: POP
// result = temp_list2 ;
57223: LD_ADDR_VAR 0 7
57227: PUSH
57228: LD_VAR 0 10
57232: ST_TO_ADDR
// end ;
57233: LD_VAR 0 7
57237: RET
// export function EnemyInRange ( unit , dist ) ; begin
57238: LD_INT 0
57240: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57241: LD_ADDR_VAR 0 3
57245: PUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 255
57255: PPUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 250
57265: PPUSH
57266: LD_VAR 0 1
57270: PPUSH
57271: CALL_OW 251
57275: PPUSH
57276: LD_VAR 0 2
57280: PPUSH
57281: CALL 31342 0 4
57285: PUSH
57286: LD_INT 4
57288: ARRAY
57289: ST_TO_ADDR
// end ;
57290: LD_VAR 0 3
57294: RET
// export function PlayerSeeMe ( unit ) ; begin
57295: LD_INT 0
57297: PPUSH
// result := See ( your_side , unit ) ;
57298: LD_ADDR_VAR 0 2
57302: PUSH
57303: LD_OWVAR 2
57307: PPUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 292
57317: ST_TO_ADDR
// end ;
57318: LD_VAR 0 2
57322: RET
// export function ReverseDir ( unit ) ; begin
57323: LD_INT 0
57325: PPUSH
// if not unit then
57326: LD_VAR 0 1
57330: NOT
57331: IFFALSE 57335
// exit ;
57333: GO 57358
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 254
57349: PUSH
57350: LD_INT 3
57352: PLUS
57353: PUSH
57354: LD_INT 6
57356: MOD
57357: ST_TO_ADDR
// end ;
57358: LD_VAR 0 2
57362: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57363: LD_INT 0
57365: PPUSH
57366: PPUSH
57367: PPUSH
57368: PPUSH
57369: PPUSH
// if not hexes then
57370: LD_VAR 0 2
57374: NOT
57375: IFFALSE 57379
// exit ;
57377: GO 57527
// dist := 9999 ;
57379: LD_ADDR_VAR 0 5
57383: PUSH
57384: LD_INT 9999
57386: ST_TO_ADDR
// for i = 1 to hexes do
57387: LD_ADDR_VAR 0 4
57391: PUSH
57392: DOUBLE
57393: LD_INT 1
57395: DEC
57396: ST_TO_ADDR
57397: LD_VAR 0 2
57401: PUSH
57402: FOR_TO
57403: IFFALSE 57515
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57405: LD_VAR 0 1
57409: PPUSH
57410: LD_VAR 0 2
57414: PUSH
57415: LD_VAR 0 4
57419: ARRAY
57420: PUSH
57421: LD_INT 1
57423: ARRAY
57424: PPUSH
57425: LD_VAR 0 2
57429: PUSH
57430: LD_VAR 0 4
57434: ARRAY
57435: PUSH
57436: LD_INT 2
57438: ARRAY
57439: PPUSH
57440: CALL_OW 297
57444: PUSH
57445: LD_VAR 0 5
57449: LESS
57450: IFFALSE 57513
// begin hex := hexes [ i ] ;
57452: LD_ADDR_VAR 0 7
57456: PUSH
57457: LD_VAR 0 2
57461: PUSH
57462: LD_VAR 0 4
57466: ARRAY
57467: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57468: LD_ADDR_VAR 0 5
57472: PUSH
57473: LD_VAR 0 1
57477: PPUSH
57478: LD_VAR 0 2
57482: PUSH
57483: LD_VAR 0 4
57487: ARRAY
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PPUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_VAR 0 4
57502: ARRAY
57503: PUSH
57504: LD_INT 2
57506: ARRAY
57507: PPUSH
57508: CALL_OW 297
57512: ST_TO_ADDR
// end ; end ;
57513: GO 57402
57515: POP
57516: POP
// result := hex ;
57517: LD_ADDR_VAR 0 3
57521: PUSH
57522: LD_VAR 0 7
57526: ST_TO_ADDR
// end ;
57527: LD_VAR 0 3
57531: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57532: LD_INT 0
57534: PPUSH
57535: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57536: LD_VAR 0 1
57540: NOT
57541: PUSH
57542: LD_VAR 0 1
57546: PUSH
57547: LD_INT 21
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 23
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PPUSH
57571: CALL_OW 69
57575: IN
57576: NOT
57577: OR
57578: IFFALSE 57582
// exit ;
57580: GO 57629
// for i = 1 to 3 do
57582: LD_ADDR_VAR 0 3
57586: PUSH
57587: DOUBLE
57588: LD_INT 1
57590: DEC
57591: ST_TO_ADDR
57592: LD_INT 3
57594: PUSH
57595: FOR_TO
57596: IFFALSE 57627
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57598: LD_VAR 0 1
57602: PPUSH
57603: CALL_OW 250
57607: PPUSH
57608: LD_VAR 0 1
57612: PPUSH
57613: CALL_OW 251
57617: PPUSH
57618: LD_INT 1
57620: PPUSH
57621: CALL_OW 453
57625: GO 57595
57627: POP
57628: POP
// end ;
57629: LD_VAR 0 2
57633: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57634: LD_INT 0
57636: PPUSH
57637: PPUSH
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57642: LD_VAR 0 1
57646: NOT
57647: PUSH
57648: LD_VAR 0 2
57652: NOT
57653: OR
57654: PUSH
57655: LD_VAR 0 1
57659: PPUSH
57660: CALL_OW 314
57664: OR
57665: IFFALSE 57669
// exit ;
57667: GO 58110
// x := GetX ( enemy_unit ) ;
57669: LD_ADDR_VAR 0 7
57673: PUSH
57674: LD_VAR 0 2
57678: PPUSH
57679: CALL_OW 250
57683: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57684: LD_ADDR_VAR 0 8
57688: PUSH
57689: LD_VAR 0 2
57693: PPUSH
57694: CALL_OW 251
57698: ST_TO_ADDR
// if not x or not y then
57699: LD_VAR 0 7
57703: NOT
57704: PUSH
57705: LD_VAR 0 8
57709: NOT
57710: OR
57711: IFFALSE 57715
// exit ;
57713: GO 58110
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57715: LD_ADDR_VAR 0 6
57719: PUSH
57720: LD_VAR 0 7
57724: PPUSH
57725: LD_INT 0
57727: PPUSH
57728: LD_INT 4
57730: PPUSH
57731: CALL_OW 272
57735: PUSH
57736: LD_VAR 0 8
57740: PPUSH
57741: LD_INT 0
57743: PPUSH
57744: LD_INT 4
57746: PPUSH
57747: CALL_OW 273
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_VAR 0 7
57760: PPUSH
57761: LD_INT 1
57763: PPUSH
57764: LD_INT 4
57766: PPUSH
57767: CALL_OW 272
57771: PUSH
57772: LD_VAR 0 8
57776: PPUSH
57777: LD_INT 1
57779: PPUSH
57780: LD_INT 4
57782: PPUSH
57783: CALL_OW 273
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_VAR 0 7
57796: PPUSH
57797: LD_INT 2
57799: PPUSH
57800: LD_INT 4
57802: PPUSH
57803: CALL_OW 272
57807: PUSH
57808: LD_VAR 0 8
57812: PPUSH
57813: LD_INT 2
57815: PPUSH
57816: LD_INT 4
57818: PPUSH
57819: CALL_OW 273
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_VAR 0 7
57832: PPUSH
57833: LD_INT 3
57835: PPUSH
57836: LD_INT 4
57838: PPUSH
57839: CALL_OW 272
57843: PUSH
57844: LD_VAR 0 8
57848: PPUSH
57849: LD_INT 3
57851: PPUSH
57852: LD_INT 4
57854: PPUSH
57855: CALL_OW 273
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_VAR 0 7
57868: PPUSH
57869: LD_INT 4
57871: PPUSH
57872: LD_INT 4
57874: PPUSH
57875: CALL_OW 272
57879: PUSH
57880: LD_VAR 0 8
57884: PPUSH
57885: LD_INT 4
57887: PPUSH
57888: LD_INT 4
57890: PPUSH
57891: CALL_OW 273
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_VAR 0 7
57904: PPUSH
57905: LD_INT 5
57907: PPUSH
57908: LD_INT 4
57910: PPUSH
57911: CALL_OW 272
57915: PUSH
57916: LD_VAR 0 8
57920: PPUSH
57921: LD_INT 5
57923: PPUSH
57924: LD_INT 4
57926: PPUSH
57927: CALL_OW 273
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// for i = tmp downto 1 do
57944: LD_ADDR_VAR 0 4
57948: PUSH
57949: DOUBLE
57950: LD_VAR 0 6
57954: INC
57955: ST_TO_ADDR
57956: LD_INT 1
57958: PUSH
57959: FOR_DOWNTO
57960: IFFALSE 58061
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57962: LD_VAR 0 6
57966: PUSH
57967: LD_VAR 0 4
57971: ARRAY
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PPUSH
57977: LD_VAR 0 6
57981: PUSH
57982: LD_VAR 0 4
57986: ARRAY
57987: PUSH
57988: LD_INT 2
57990: ARRAY
57991: PPUSH
57992: CALL_OW 488
57996: NOT
57997: PUSH
57998: LD_VAR 0 6
58002: PUSH
58003: LD_VAR 0 4
58007: ARRAY
58008: PUSH
58009: LD_INT 1
58011: ARRAY
58012: PPUSH
58013: LD_VAR 0 6
58017: PUSH
58018: LD_VAR 0 4
58022: ARRAY
58023: PUSH
58024: LD_INT 2
58026: ARRAY
58027: PPUSH
58028: CALL_OW 428
58032: PUSH
58033: LD_INT 0
58035: NONEQUAL
58036: OR
58037: IFFALSE 58059
// tmp := Delete ( tmp , i ) ;
58039: LD_ADDR_VAR 0 6
58043: PUSH
58044: LD_VAR 0 6
58048: PPUSH
58049: LD_VAR 0 4
58053: PPUSH
58054: CALL_OW 3
58058: ST_TO_ADDR
58059: GO 57959
58061: POP
58062: POP
// j := GetClosestHex ( unit , tmp ) ;
58063: LD_ADDR_VAR 0 5
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: LD_VAR 0 6
58077: PPUSH
58078: CALL 57363 0 2
58082: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58083: LD_VAR 0 1
58087: PPUSH
58088: LD_VAR 0 5
58092: PUSH
58093: LD_INT 1
58095: ARRAY
58096: PPUSH
58097: LD_VAR 0 5
58101: PUSH
58102: LD_INT 2
58104: ARRAY
58105: PPUSH
58106: CALL_OW 111
// end ;
58110: LD_VAR 0 3
58114: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58115: LD_INT 0
58117: PPUSH
58118: PPUSH
58119: PPUSH
// uc_side = 0 ;
58120: LD_ADDR_OWVAR 20
58124: PUSH
58125: LD_INT 0
58127: ST_TO_ADDR
// uc_nation = 0 ;
58128: LD_ADDR_OWVAR 21
58132: PUSH
58133: LD_INT 0
58135: ST_TO_ADDR
// InitHc ;
58136: CALL_OW 19
// InitVc ;
58140: CALL_OW 20
// if mastodonts then
58144: LD_VAR 0 6
58148: IFFALSE 58215
// for i = 1 to mastodonts do
58150: LD_ADDR_VAR 0 11
58154: PUSH
58155: DOUBLE
58156: LD_INT 1
58158: DEC
58159: ST_TO_ADDR
58160: LD_VAR 0 6
58164: PUSH
58165: FOR_TO
58166: IFFALSE 58213
// begin vc_chassis := 31 ;
58168: LD_ADDR_OWVAR 37
58172: PUSH
58173: LD_INT 31
58175: ST_TO_ADDR
// vc_control := control_rider ;
58176: LD_ADDR_OWVAR 38
58180: PUSH
58181: LD_INT 4
58183: ST_TO_ADDR
// animal := CreateVehicle ;
58184: LD_ADDR_VAR 0 12
58188: PUSH
58189: CALL_OW 45
58193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58194: LD_VAR 0 12
58198: PPUSH
58199: LD_VAR 0 8
58203: PPUSH
58204: LD_INT 0
58206: PPUSH
58207: CALL 60284 0 3
// end ;
58211: GO 58165
58213: POP
58214: POP
// if horses then
58215: LD_VAR 0 5
58219: IFFALSE 58286
// for i = 1 to horses do
58221: LD_ADDR_VAR 0 11
58225: PUSH
58226: DOUBLE
58227: LD_INT 1
58229: DEC
58230: ST_TO_ADDR
58231: LD_VAR 0 5
58235: PUSH
58236: FOR_TO
58237: IFFALSE 58284
// begin hc_class := 21 ;
58239: LD_ADDR_OWVAR 28
58243: PUSH
58244: LD_INT 21
58246: ST_TO_ADDR
// hc_gallery :=  ;
58247: LD_ADDR_OWVAR 33
58251: PUSH
58252: LD_STRING 
58254: ST_TO_ADDR
// animal := CreateHuman ;
58255: LD_ADDR_VAR 0 12
58259: PUSH
58260: CALL_OW 44
58264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58265: LD_VAR 0 12
58269: PPUSH
58270: LD_VAR 0 8
58274: PPUSH
58275: LD_INT 0
58277: PPUSH
58278: CALL 60284 0 3
// end ;
58282: GO 58236
58284: POP
58285: POP
// if birds then
58286: LD_VAR 0 1
58290: IFFALSE 58357
// for i = 1 to birds do
58292: LD_ADDR_VAR 0 11
58296: PUSH
58297: DOUBLE
58298: LD_INT 1
58300: DEC
58301: ST_TO_ADDR
58302: LD_VAR 0 1
58306: PUSH
58307: FOR_TO
58308: IFFALSE 58355
// begin hc_class = 18 ;
58310: LD_ADDR_OWVAR 28
58314: PUSH
58315: LD_INT 18
58317: ST_TO_ADDR
// hc_gallery =  ;
58318: LD_ADDR_OWVAR 33
58322: PUSH
58323: LD_STRING 
58325: ST_TO_ADDR
// animal := CreateHuman ;
58326: LD_ADDR_VAR 0 12
58330: PUSH
58331: CALL_OW 44
58335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58336: LD_VAR 0 12
58340: PPUSH
58341: LD_VAR 0 8
58345: PPUSH
58346: LD_INT 0
58348: PPUSH
58349: CALL 60284 0 3
// end ;
58353: GO 58307
58355: POP
58356: POP
// if tigers then
58357: LD_VAR 0 2
58361: IFFALSE 58445
// for i = 1 to tigers do
58363: LD_ADDR_VAR 0 11
58367: PUSH
58368: DOUBLE
58369: LD_INT 1
58371: DEC
58372: ST_TO_ADDR
58373: LD_VAR 0 2
58377: PUSH
58378: FOR_TO
58379: IFFALSE 58443
// begin hc_class = class_tiger ;
58381: LD_ADDR_OWVAR 28
58385: PUSH
58386: LD_INT 14
58388: ST_TO_ADDR
// hc_gallery =  ;
58389: LD_ADDR_OWVAR 33
58393: PUSH
58394: LD_STRING 
58396: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58397: LD_ADDR_OWVAR 35
58401: PUSH
58402: LD_INT 7
58404: NEG
58405: PPUSH
58406: LD_INT 7
58408: PPUSH
58409: CALL_OW 12
58413: ST_TO_ADDR
// animal := CreateHuman ;
58414: LD_ADDR_VAR 0 12
58418: PUSH
58419: CALL_OW 44
58423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58424: LD_VAR 0 12
58428: PPUSH
58429: LD_VAR 0 8
58433: PPUSH
58434: LD_INT 0
58436: PPUSH
58437: CALL 60284 0 3
// end ;
58441: GO 58378
58443: POP
58444: POP
// if apemans then
58445: LD_VAR 0 3
58449: IFFALSE 58572
// for i = 1 to apemans do
58451: LD_ADDR_VAR 0 11
58455: PUSH
58456: DOUBLE
58457: LD_INT 1
58459: DEC
58460: ST_TO_ADDR
58461: LD_VAR 0 3
58465: PUSH
58466: FOR_TO
58467: IFFALSE 58570
// begin hc_class = class_apeman ;
58469: LD_ADDR_OWVAR 28
58473: PUSH
58474: LD_INT 12
58476: ST_TO_ADDR
// hc_gallery =  ;
58477: LD_ADDR_OWVAR 33
58481: PUSH
58482: LD_STRING 
58484: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58485: LD_ADDR_OWVAR 35
58489: PUSH
58490: LD_INT 5
58492: NEG
58493: PPUSH
58494: LD_INT 5
58496: PPUSH
58497: CALL_OW 12
58501: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58502: LD_ADDR_OWVAR 31
58506: PUSH
58507: LD_INT 1
58509: PPUSH
58510: LD_INT 3
58512: PPUSH
58513: CALL_OW 12
58517: PUSH
58518: LD_INT 1
58520: PPUSH
58521: LD_INT 3
58523: PPUSH
58524: CALL_OW 12
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// animal := CreateHuman ;
58541: LD_ADDR_VAR 0 12
58545: PUSH
58546: CALL_OW 44
58550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58551: LD_VAR 0 12
58555: PPUSH
58556: LD_VAR 0 8
58560: PPUSH
58561: LD_INT 0
58563: PPUSH
58564: CALL 60284 0 3
// end ;
58568: GO 58466
58570: POP
58571: POP
// if enchidnas then
58572: LD_VAR 0 4
58576: IFFALSE 58643
// for i = 1 to enchidnas do
58578: LD_ADDR_VAR 0 11
58582: PUSH
58583: DOUBLE
58584: LD_INT 1
58586: DEC
58587: ST_TO_ADDR
58588: LD_VAR 0 4
58592: PUSH
58593: FOR_TO
58594: IFFALSE 58641
// begin hc_class = 13 ;
58596: LD_ADDR_OWVAR 28
58600: PUSH
58601: LD_INT 13
58603: ST_TO_ADDR
// hc_gallery =  ;
58604: LD_ADDR_OWVAR 33
58608: PUSH
58609: LD_STRING 
58611: ST_TO_ADDR
// animal := CreateHuman ;
58612: LD_ADDR_VAR 0 12
58616: PUSH
58617: CALL_OW 44
58621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58622: LD_VAR 0 12
58626: PPUSH
58627: LD_VAR 0 8
58631: PPUSH
58632: LD_INT 0
58634: PPUSH
58635: CALL 60284 0 3
// end ;
58639: GO 58593
58641: POP
58642: POP
// if fishes then
58643: LD_VAR 0 7
58647: IFFALSE 58714
// for i = 1 to fishes do
58649: LD_ADDR_VAR 0 11
58653: PUSH
58654: DOUBLE
58655: LD_INT 1
58657: DEC
58658: ST_TO_ADDR
58659: LD_VAR 0 7
58663: PUSH
58664: FOR_TO
58665: IFFALSE 58712
// begin hc_class = 20 ;
58667: LD_ADDR_OWVAR 28
58671: PUSH
58672: LD_INT 20
58674: ST_TO_ADDR
// hc_gallery =  ;
58675: LD_ADDR_OWVAR 33
58679: PUSH
58680: LD_STRING 
58682: ST_TO_ADDR
// animal := CreateHuman ;
58683: LD_ADDR_VAR 0 12
58687: PUSH
58688: CALL_OW 44
58692: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58693: LD_VAR 0 12
58697: PPUSH
58698: LD_VAR 0 9
58702: PPUSH
58703: LD_INT 0
58705: PPUSH
58706: CALL 60284 0 3
// end ;
58710: GO 58664
58712: POP
58713: POP
// end ;
58714: LD_VAR 0 10
58718: RET
// export function WantHeal ( sci , unit ) ; begin
58719: LD_INT 0
58721: PPUSH
// if GetTaskList ( sci ) > 0 then
58722: LD_VAR 0 1
58726: PPUSH
58727: CALL_OW 437
58731: PUSH
58732: LD_INT 0
58734: GREATER
58735: IFFALSE 58805
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58737: LD_VAR 0 1
58741: PPUSH
58742: CALL_OW 437
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PUSH
58751: LD_INT 1
58753: ARRAY
58754: PUSH
58755: LD_STRING l
58757: EQUAL
58758: PUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 437
58768: PUSH
58769: LD_INT 1
58771: ARRAY
58772: PUSH
58773: LD_INT 4
58775: ARRAY
58776: PUSH
58777: LD_VAR 0 2
58781: EQUAL
58782: AND
58783: IFFALSE 58795
// result := true else
58785: LD_ADDR_VAR 0 3
58789: PUSH
58790: LD_INT 1
58792: ST_TO_ADDR
58793: GO 58803
// result := false ;
58795: LD_ADDR_VAR 0 3
58799: PUSH
58800: LD_INT 0
58802: ST_TO_ADDR
// end else
58803: GO 58813
// result := false ;
58805: LD_ADDR_VAR 0 3
58809: PUSH
58810: LD_INT 0
58812: ST_TO_ADDR
// end ;
58813: LD_VAR 0 3
58817: RET
// export function HealTarget ( sci ) ; begin
58818: LD_INT 0
58820: PPUSH
// if not sci then
58821: LD_VAR 0 1
58825: NOT
58826: IFFALSE 58830
// exit ;
58828: GO 58895
// result := 0 ;
58830: LD_ADDR_VAR 0 2
58834: PUSH
58835: LD_INT 0
58837: ST_TO_ADDR
// if GetTaskList ( sci ) then
58838: LD_VAR 0 1
58842: PPUSH
58843: CALL_OW 437
58847: IFFALSE 58895
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58849: LD_VAR 0 1
58853: PPUSH
58854: CALL_OW 437
58858: PUSH
58859: LD_INT 1
58861: ARRAY
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PUSH
58867: LD_STRING l
58869: EQUAL
58870: IFFALSE 58895
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58872: LD_ADDR_VAR 0 2
58876: PUSH
58877: LD_VAR 0 1
58881: PPUSH
58882: CALL_OW 437
58886: PUSH
58887: LD_INT 1
58889: ARRAY
58890: PUSH
58891: LD_INT 4
58893: ARRAY
58894: ST_TO_ADDR
// end ;
58895: LD_VAR 0 2
58899: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58900: LD_INT 0
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
// if not base_units then
58906: LD_VAR 0 1
58910: NOT
58911: IFFALSE 58915
// exit ;
58913: GO 59002
// result := false ;
58915: LD_ADDR_VAR 0 2
58919: PUSH
58920: LD_INT 0
58922: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58923: LD_ADDR_VAR 0 5
58927: PUSH
58928: LD_VAR 0 1
58932: PPUSH
58933: LD_INT 21
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PPUSH
58943: CALL_OW 72
58947: ST_TO_ADDR
// if not tmp then
58948: LD_VAR 0 5
58952: NOT
58953: IFFALSE 58957
// exit ;
58955: GO 59002
// for i in tmp do
58957: LD_ADDR_VAR 0 3
58961: PUSH
58962: LD_VAR 0 5
58966: PUSH
58967: FOR_IN
58968: IFFALSE 59000
// begin result := EnemyInRange ( i , 22 ) ;
58970: LD_ADDR_VAR 0 2
58974: PUSH
58975: LD_VAR 0 3
58979: PPUSH
58980: LD_INT 22
58982: PPUSH
58983: CALL 57238 0 2
58987: ST_TO_ADDR
// if result then
58988: LD_VAR 0 2
58992: IFFALSE 58998
// exit ;
58994: POP
58995: POP
58996: GO 59002
// end ;
58998: GO 58967
59000: POP
59001: POP
// end ;
59002: LD_VAR 0 2
59006: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59007: LD_INT 0
59009: PPUSH
59010: PPUSH
// if not units then
59011: LD_VAR 0 1
59015: NOT
59016: IFFALSE 59020
// exit ;
59018: GO 59090
// result := [ ] ;
59020: LD_ADDR_VAR 0 3
59024: PUSH
59025: EMPTY
59026: ST_TO_ADDR
// for i in units do
59027: LD_ADDR_VAR 0 4
59031: PUSH
59032: LD_VAR 0 1
59036: PUSH
59037: FOR_IN
59038: IFFALSE 59088
// if GetTag ( i ) = tag then
59040: LD_VAR 0 4
59044: PPUSH
59045: CALL_OW 110
59049: PUSH
59050: LD_VAR 0 2
59054: EQUAL
59055: IFFALSE 59086
// result := Insert ( result , result + 1 , i ) ;
59057: LD_ADDR_VAR 0 3
59061: PUSH
59062: LD_VAR 0 3
59066: PPUSH
59067: LD_VAR 0 3
59071: PUSH
59072: LD_INT 1
59074: PLUS
59075: PPUSH
59076: LD_VAR 0 4
59080: PPUSH
59081: CALL_OW 2
59085: ST_TO_ADDR
59086: GO 59037
59088: POP
59089: POP
// end ;
59090: LD_VAR 0 3
59094: RET
// export function IsDriver ( un ) ; begin
59095: LD_INT 0
59097: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: LD_VAR 0 1
59107: PUSH
59108: LD_INT 55
59110: PUSH
59111: EMPTY
59112: LIST
59113: PPUSH
59114: CALL_OW 69
59118: IN
59119: ST_TO_ADDR
// end ;
59120: LD_VAR 0 2
59124: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59125: LD_INT 0
59127: PPUSH
59128: PPUSH
// list := [ ] ;
59129: LD_ADDR_VAR 0 5
59133: PUSH
59134: EMPTY
59135: ST_TO_ADDR
// case d of 0 :
59136: LD_VAR 0 3
59140: PUSH
59141: LD_INT 0
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59149
59147: GO 59282
59149: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59150: LD_ADDR_VAR 0 5
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_INT 4
59162: MINUS
59163: PUSH
59164: LD_VAR 0 2
59168: PUSH
59169: LD_INT 4
59171: MINUS
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: PUSH
59181: LD_VAR 0 1
59185: PUSH
59186: LD_INT 3
59188: MINUS
59189: PUSH
59190: LD_VAR 0 2
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: LD_VAR 0 1
59207: PUSH
59208: LD_INT 4
59210: PLUS
59211: PUSH
59212: LD_VAR 0 2
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: LD_VAR 0 1
59229: PUSH
59230: LD_INT 3
59232: PLUS
59233: PUSH
59234: LD_VAR 0 2
59238: PUSH
59239: LD_INT 3
59241: PLUS
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: PUSH
59251: LD_VAR 0 1
59255: PUSH
59256: LD_VAR 0 2
59260: PUSH
59261: LD_INT 4
59263: PLUS
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: ST_TO_ADDR
// end ; 1 :
59280: GO 59980
59282: LD_INT 1
59284: DOUBLE
59285: EQUAL
59286: IFTRUE 59290
59288: GO 59423
59290: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59291: LD_ADDR_VAR 0 5
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 4
59308: MINUS
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: LD_INT 3
59325: MINUS
59326: PUSH
59327: LD_VAR 0 2
59331: PUSH
59332: LD_INT 3
59334: MINUS
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: LD_VAR 0 1
59348: PUSH
59349: LD_INT 4
59351: MINUS
59352: PUSH
59353: LD_VAR 0 2
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: PUSH
59366: LD_VAR 0 1
59370: PUSH
59371: LD_VAR 0 2
59375: PUSH
59376: LD_INT 3
59378: PLUS
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: PUSH
59388: LD_VAR 0 1
59392: PUSH
59393: LD_INT 4
59395: PLUS
59396: PUSH
59397: LD_VAR 0 2
59401: PUSH
59402: LD_INT 4
59404: PLUS
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: ST_TO_ADDR
// end ; 2 :
59421: GO 59980
59423: LD_INT 2
59425: DOUBLE
59426: EQUAL
59427: IFTRUE 59431
59429: GO 59560
59431: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59432: LD_ADDR_VAR 0 5
59436: PUSH
59437: LD_VAR 0 1
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 3
59449: MINUS
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_INT 4
59466: PLUS
59467: PUSH
59468: LD_VAR 0 2
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: LD_VAR 0 1
59485: PUSH
59486: LD_VAR 0 2
59490: PUSH
59491: LD_INT 4
59493: PLUS
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: PUSH
59503: LD_VAR 0 1
59507: PUSH
59508: LD_INT 3
59510: MINUS
59511: PUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: PUSH
59525: LD_VAR 0 1
59529: PUSH
59530: LD_INT 4
59532: MINUS
59533: PUSH
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 4
59541: MINUS
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// end ; 3 :
59558: GO 59980
59560: LD_INT 3
59562: DOUBLE
59563: EQUAL
59564: IFTRUE 59568
59566: GO 59701
59568: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59569: LD_ADDR_VAR 0 5
59573: PUSH
59574: LD_VAR 0 1
59578: PUSH
59579: LD_INT 3
59581: PLUS
59582: PUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: LD_VAR 0 1
59600: PUSH
59601: LD_INT 4
59603: PLUS
59604: PUSH
59605: LD_VAR 0 2
59609: PUSH
59610: LD_INT 4
59612: PLUS
59613: PUSH
59614: LD_INT 5
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: PUSH
59622: LD_VAR 0 1
59626: PUSH
59627: LD_INT 4
59629: MINUS
59630: PUSH
59631: LD_VAR 0 2
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: PUSH
59644: LD_VAR 0 1
59648: PUSH
59649: LD_VAR 0 2
59653: PUSH
59654: LD_INT 4
59656: MINUS
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: PUSH
59666: LD_VAR 0 1
59670: PUSH
59671: LD_INT 3
59673: MINUS
59674: PUSH
59675: LD_VAR 0 2
59679: PUSH
59680: LD_INT 3
59682: MINUS
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: ST_TO_ADDR
// end ; 4 :
59699: GO 59980
59701: LD_INT 4
59703: DOUBLE
59704: EQUAL
59705: IFTRUE 59709
59707: GO 59842
59709: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59710: LD_ADDR_VAR 0 5
59714: PUSH
59715: LD_VAR 0 1
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: LD_INT 4
59727: PLUS
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: PUSH
59737: LD_VAR 0 1
59741: PUSH
59742: LD_INT 3
59744: PLUS
59745: PUSH
59746: LD_VAR 0 2
59750: PUSH
59751: LD_INT 3
59753: PLUS
59754: PUSH
59755: LD_INT 5
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: PUSH
59763: LD_VAR 0 1
59767: PUSH
59768: LD_INT 4
59770: PLUS
59771: PUSH
59772: LD_VAR 0 2
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: PUSH
59785: LD_VAR 0 1
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: LD_INT 3
59797: MINUS
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 4
59814: MINUS
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_INT 4
59823: MINUS
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// end ; 5 :
59840: GO 59980
59842: LD_INT 5
59844: DOUBLE
59845: EQUAL
59846: IFTRUE 59850
59848: GO 59979
59850: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59851: LD_ADDR_VAR 0 5
59855: PUSH
59856: LD_VAR 0 1
59860: PUSH
59861: LD_INT 4
59863: MINUS
59864: PUSH
59865: LD_VAR 0 2
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: PUSH
59878: LD_VAR 0 1
59882: PUSH
59883: LD_VAR 0 2
59887: PUSH
59888: LD_INT 4
59890: MINUS
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: PUSH
59900: LD_VAR 0 1
59904: PUSH
59905: LD_INT 4
59907: PLUS
59908: PUSH
59909: LD_VAR 0 2
59913: PUSH
59914: LD_INT 4
59916: PLUS
59917: PUSH
59918: LD_INT 5
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: LD_INT 3
59933: PLUS
59934: PUSH
59935: LD_VAR 0 2
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: LD_INT 3
59960: PLUS
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// end ; end ;
59977: GO 59980
59979: POP
// result := list ;
59980: LD_ADDR_VAR 0 4
59984: PUSH
59985: LD_VAR 0 5
59989: ST_TO_ADDR
// end ;
59990: LD_VAR 0 4
59994: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59995: LD_INT 0
59997: PPUSH
59998: PPUSH
59999: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60000: LD_VAR 0 1
60004: NOT
60005: PUSH
60006: LD_VAR 0 2
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: IN
60029: NOT
60030: OR
60031: IFFALSE 60035
// exit ;
60033: GO 60127
// tmp := [ ] ;
60035: LD_ADDR_VAR 0 5
60039: PUSH
60040: EMPTY
60041: ST_TO_ADDR
// for i in units do
60042: LD_ADDR_VAR 0 4
60046: PUSH
60047: LD_VAR 0 1
60051: PUSH
60052: FOR_IN
60053: IFFALSE 60096
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60055: LD_ADDR_VAR 0 5
60059: PUSH
60060: LD_VAR 0 5
60064: PPUSH
60065: LD_VAR 0 5
60069: PUSH
60070: LD_INT 1
60072: PLUS
60073: PPUSH
60074: LD_VAR 0 4
60078: PPUSH
60079: LD_VAR 0 2
60083: PPUSH
60084: CALL_OW 259
60088: PPUSH
60089: CALL_OW 2
60093: ST_TO_ADDR
60094: GO 60052
60096: POP
60097: POP
// if not tmp then
60098: LD_VAR 0 5
60102: NOT
60103: IFFALSE 60107
// exit ;
60105: GO 60127
// result := SortListByListDesc ( units , tmp ) ;
60107: LD_ADDR_VAR 0 3
60111: PUSH
60112: LD_VAR 0 1
60116: PPUSH
60117: LD_VAR 0 5
60121: PPUSH
60122: CALL_OW 77
60126: ST_TO_ADDR
// end ;
60127: LD_VAR 0 3
60131: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60132: LD_INT 0
60134: PPUSH
60135: PPUSH
60136: PPUSH
// x := GetX ( building ) ;
60137: LD_ADDR_VAR 0 4
60141: PUSH
60142: LD_VAR 0 2
60146: PPUSH
60147: CALL_OW 250
60151: ST_TO_ADDR
// y := GetY ( building ) ;
60152: LD_ADDR_VAR 0 5
60156: PUSH
60157: LD_VAR 0 2
60161: PPUSH
60162: CALL_OW 251
60166: ST_TO_ADDR
// if GetTaskList ( unit ) then
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 437
60176: IFFALSE 60271
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60178: LD_STRING e
60180: PUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 437
60190: PUSH
60191: LD_INT 1
60193: ARRAY
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: EQUAL
60199: PUSH
60200: LD_VAR 0 4
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 437
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PUSH
60219: LD_INT 2
60221: ARRAY
60222: EQUAL
60223: AND
60224: PUSH
60225: LD_VAR 0 5
60229: PUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: CALL_OW 437
60239: PUSH
60240: LD_INT 1
60242: ARRAY
60243: PUSH
60244: LD_INT 3
60246: ARRAY
60247: EQUAL
60248: AND
60249: IFFALSE 60261
// result := true else
60251: LD_ADDR_VAR 0 3
60255: PUSH
60256: LD_INT 1
60258: ST_TO_ADDR
60259: GO 60269
// result := false ;
60261: LD_ADDR_VAR 0 3
60265: PUSH
60266: LD_INT 0
60268: ST_TO_ADDR
// end else
60269: GO 60279
// result := false ;
60271: LD_ADDR_VAR 0 3
60275: PUSH
60276: LD_INT 0
60278: ST_TO_ADDR
// end ;
60279: LD_VAR 0 3
60283: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60284: LD_INT 0
60286: PPUSH
60287: PPUSH
60288: PPUSH
60289: PPUSH
// if not unit or not area then
60290: LD_VAR 0 1
60294: NOT
60295: PUSH
60296: LD_VAR 0 2
60300: NOT
60301: OR
60302: IFFALSE 60306
// exit ;
60304: GO 60470
// tmp := AreaToList ( area , i ) ;
60306: LD_ADDR_VAR 0 6
60310: PUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: LD_VAR 0 5
60320: PPUSH
60321: CALL_OW 517
60325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60326: LD_ADDR_VAR 0 5
60330: PUSH
60331: DOUBLE
60332: LD_INT 1
60334: DEC
60335: ST_TO_ADDR
60336: LD_VAR 0 6
60340: PUSH
60341: LD_INT 1
60343: ARRAY
60344: PUSH
60345: FOR_TO
60346: IFFALSE 60468
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60348: LD_ADDR_VAR 0 7
60352: PUSH
60353: LD_VAR 0 6
60357: PUSH
60358: LD_INT 1
60360: ARRAY
60361: PUSH
60362: LD_VAR 0 5
60366: ARRAY
60367: PUSH
60368: LD_VAR 0 6
60372: PUSH
60373: LD_INT 2
60375: ARRAY
60376: PUSH
60377: LD_VAR 0 5
60381: ARRAY
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60387: LD_VAR 0 7
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PPUSH
60396: LD_VAR 0 7
60400: PUSH
60401: LD_INT 2
60403: ARRAY
60404: PPUSH
60405: CALL_OW 428
60409: PUSH
60410: LD_INT 0
60412: EQUAL
60413: IFFALSE 60466
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_VAR 0 7
60424: PUSH
60425: LD_INT 1
60427: ARRAY
60428: PPUSH
60429: LD_VAR 0 7
60433: PUSH
60434: LD_INT 2
60436: ARRAY
60437: PPUSH
60438: LD_VAR 0 3
60442: PPUSH
60443: CALL_OW 48
// result := IsPlaced ( unit ) ;
60447: LD_ADDR_VAR 0 4
60451: PUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 305
60461: ST_TO_ADDR
// exit ;
60462: POP
60463: POP
60464: GO 60470
// end ; end ;
60466: GO 60345
60468: POP
60469: POP
// end ;
60470: LD_VAR 0 4
60474: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60475: LD_INT 0
60477: PPUSH
60478: PPUSH
60479: PPUSH
// if not side or side > 8 then
60480: LD_VAR 0 1
60484: NOT
60485: PUSH
60486: LD_VAR 0 1
60490: PUSH
60491: LD_INT 8
60493: GREATER
60494: OR
60495: IFFALSE 60499
// exit ;
60497: GO 60686
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60499: LD_ADDR_VAR 0 4
60503: PUSH
60504: LD_INT 22
60506: PUSH
60507: LD_VAR 0 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 21
60518: PUSH
60519: LD_INT 3
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PPUSH
60530: CALL_OW 69
60534: ST_TO_ADDR
// if not tmp then
60535: LD_VAR 0 4
60539: NOT
60540: IFFALSE 60544
// exit ;
60542: GO 60686
// enable_addtolog := true ;
60544: LD_ADDR_OWVAR 81
60548: PUSH
60549: LD_INT 1
60551: ST_TO_ADDR
// AddToLog ( [ ) ;
60552: LD_STRING [
60554: PPUSH
60555: CALL_OW 561
// for i in tmp do
60559: LD_ADDR_VAR 0 3
60563: PUSH
60564: LD_VAR 0 4
60568: PUSH
60569: FOR_IN
60570: IFFALSE 60677
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60572: LD_STRING [
60574: PUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: CALL_OW 266
60584: STR
60585: PUSH
60586: LD_STRING , 
60588: STR
60589: PUSH
60590: LD_VAR 0 3
60594: PPUSH
60595: CALL_OW 250
60599: STR
60600: PUSH
60601: LD_STRING , 
60603: STR
60604: PUSH
60605: LD_VAR 0 3
60609: PPUSH
60610: CALL_OW 251
60614: STR
60615: PUSH
60616: LD_STRING , 
60618: STR
60619: PUSH
60620: LD_VAR 0 3
60624: PPUSH
60625: CALL_OW 254
60629: STR
60630: PUSH
60631: LD_STRING , 
60633: STR
60634: PUSH
60635: LD_VAR 0 3
60639: PPUSH
60640: LD_INT 1
60642: PPUSH
60643: CALL_OW 268
60647: STR
60648: PUSH
60649: LD_STRING , 
60651: STR
60652: PUSH
60653: LD_VAR 0 3
60657: PPUSH
60658: LD_INT 2
60660: PPUSH
60661: CALL_OW 268
60665: STR
60666: PUSH
60667: LD_STRING ],
60669: STR
60670: PPUSH
60671: CALL_OW 561
// end ;
60675: GO 60569
60677: POP
60678: POP
// AddToLog ( ]; ) ;
60679: LD_STRING ];
60681: PPUSH
60682: CALL_OW 561
// end ;
60686: LD_VAR 0 2
60690: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60691: LD_INT 0
60693: PPUSH
60694: PPUSH
60695: PPUSH
60696: PPUSH
60697: PPUSH
// if not area or not rate or not max then
60698: LD_VAR 0 1
60702: NOT
60703: PUSH
60704: LD_VAR 0 2
60708: NOT
60709: OR
60710: PUSH
60711: LD_VAR 0 4
60715: NOT
60716: OR
60717: IFFALSE 60721
// exit ;
60719: GO 60913
// while 1 do
60721: LD_INT 1
60723: IFFALSE 60913
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60725: LD_ADDR_VAR 0 9
60729: PUSH
60730: LD_VAR 0 1
60734: PPUSH
60735: LD_INT 1
60737: PPUSH
60738: CALL_OW 287
60742: PUSH
60743: LD_INT 10
60745: MUL
60746: ST_TO_ADDR
// r := rate / 10 ;
60747: LD_ADDR_VAR 0 7
60751: PUSH
60752: LD_VAR 0 2
60756: PUSH
60757: LD_INT 10
60759: DIVREAL
60760: ST_TO_ADDR
// time := 1 1$00 ;
60761: LD_ADDR_VAR 0 8
60765: PUSH
60766: LD_INT 2100
60768: ST_TO_ADDR
// if amount < min then
60769: LD_VAR 0 9
60773: PUSH
60774: LD_VAR 0 3
60778: LESS
60779: IFFALSE 60797
// r := r * 2 else
60781: LD_ADDR_VAR 0 7
60785: PUSH
60786: LD_VAR 0 7
60790: PUSH
60791: LD_INT 2
60793: MUL
60794: ST_TO_ADDR
60795: GO 60823
// if amount > max then
60797: LD_VAR 0 9
60801: PUSH
60802: LD_VAR 0 4
60806: GREATER
60807: IFFALSE 60823
// r := r / 2 ;
60809: LD_ADDR_VAR 0 7
60813: PUSH
60814: LD_VAR 0 7
60818: PUSH
60819: LD_INT 2
60821: DIVREAL
60822: ST_TO_ADDR
// time := time / r ;
60823: LD_ADDR_VAR 0 8
60827: PUSH
60828: LD_VAR 0 8
60832: PUSH
60833: LD_VAR 0 7
60837: DIVREAL
60838: ST_TO_ADDR
// if time < 0 then
60839: LD_VAR 0 8
60843: PUSH
60844: LD_INT 0
60846: LESS
60847: IFFALSE 60864
// time := time * - 1 ;
60849: LD_ADDR_VAR 0 8
60853: PUSH
60854: LD_VAR 0 8
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: MUL
60863: ST_TO_ADDR
// wait ( time ) ;
60864: LD_VAR 0 8
60868: PPUSH
60869: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60873: LD_INT 35
60875: PPUSH
60876: LD_INT 875
60878: PPUSH
60879: CALL_OW 12
60883: PPUSH
60884: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60888: LD_INT 1
60890: PPUSH
60891: LD_INT 5
60893: PPUSH
60894: CALL_OW 12
60898: PPUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_INT 1
60906: PPUSH
60907: CALL_OW 55
// end ;
60911: GO 60721
// end ;
60913: LD_VAR 0 5
60917: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60918: LD_INT 0
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
60924: PPUSH
60925: PPUSH
60926: PPUSH
60927: PPUSH
// if not turrets or not factories then
60928: LD_VAR 0 1
60932: NOT
60933: PUSH
60934: LD_VAR 0 2
60938: NOT
60939: OR
60940: IFFALSE 60944
// exit ;
60942: GO 61251
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60944: LD_ADDR_VAR 0 10
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: LD_INT 6
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 24
60986: PUSH
60987: LD_INT 25
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 23
60996: PUSH
60997: LD_INT 27
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 42
61010: PUSH
61011: LD_INT 43
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 44
61020: PUSH
61021: LD_INT 46
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 45
61030: PUSH
61031: LD_INT 47
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// result := [ ] ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: EMPTY
61054: ST_TO_ADDR
// for i in turrets do
61055: LD_ADDR_VAR 0 4
61059: PUSH
61060: LD_VAR 0 1
61064: PUSH
61065: FOR_IN
61066: IFFALSE 61249
// begin nat := GetNation ( i ) ;
61068: LD_ADDR_VAR 0 7
61072: PUSH
61073: LD_VAR 0 4
61077: PPUSH
61078: CALL_OW 248
61082: ST_TO_ADDR
// weapon := 0 ;
61083: LD_ADDR_VAR 0 8
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// if not nat then
61091: LD_VAR 0 7
61095: NOT
61096: IFFALSE 61100
// continue ;
61098: GO 61065
// for j in list [ nat ] do
61100: LD_ADDR_VAR 0 5
61104: PUSH
61105: LD_VAR 0 10
61109: PUSH
61110: LD_VAR 0 7
61114: ARRAY
61115: PUSH
61116: FOR_IN
61117: IFFALSE 61158
// if GetBWeapon ( i ) = j [ 1 ] then
61119: LD_VAR 0 4
61123: PPUSH
61124: CALL_OW 269
61128: PUSH
61129: LD_VAR 0 5
61133: PUSH
61134: LD_INT 1
61136: ARRAY
61137: EQUAL
61138: IFFALSE 61156
// begin weapon := j [ 2 ] ;
61140: LD_ADDR_VAR 0 8
61144: PUSH
61145: LD_VAR 0 5
61149: PUSH
61150: LD_INT 2
61152: ARRAY
61153: ST_TO_ADDR
// break ;
61154: GO 61158
// end ;
61156: GO 61116
61158: POP
61159: POP
// if not weapon then
61160: LD_VAR 0 8
61164: NOT
61165: IFFALSE 61169
// continue ;
61167: GO 61065
// for k in factories do
61169: LD_ADDR_VAR 0 6
61173: PUSH
61174: LD_VAR 0 2
61178: PUSH
61179: FOR_IN
61180: IFFALSE 61245
// begin weapons := AvailableWeaponList ( k ) ;
61182: LD_ADDR_VAR 0 9
61186: PUSH
61187: LD_VAR 0 6
61191: PPUSH
61192: CALL_OW 478
61196: ST_TO_ADDR
// if not weapons then
61197: LD_VAR 0 9
61201: NOT
61202: IFFALSE 61206
// continue ;
61204: GO 61179
// if weapon in weapons then
61206: LD_VAR 0 8
61210: PUSH
61211: LD_VAR 0 9
61215: IN
61216: IFFALSE 61243
// begin result := [ i , weapon ] ;
61218: LD_ADDR_VAR 0 3
61222: PUSH
61223: LD_VAR 0 4
61227: PUSH
61228: LD_VAR 0 8
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// exit ;
61237: POP
61238: POP
61239: POP
61240: POP
61241: GO 61251
// end ; end ;
61243: GO 61179
61245: POP
61246: POP
// end ;
61247: GO 61065
61249: POP
61250: POP
// end ;
61251: LD_VAR 0 3
61255: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61256: LD_INT 0
61258: PPUSH
// if not side or side > 8 then
61259: LD_VAR 0 3
61263: NOT
61264: PUSH
61265: LD_VAR 0 3
61269: PUSH
61270: LD_INT 8
61272: GREATER
61273: OR
61274: IFFALSE 61278
// exit ;
61276: GO 61337
// if not range then
61278: LD_VAR 0 4
61282: NOT
61283: IFFALSE 61294
// range := - 12 ;
61285: LD_ADDR_VAR 0 4
61289: PUSH
61290: LD_INT 12
61292: NEG
61293: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61294: LD_VAR 0 1
61298: PPUSH
61299: LD_VAR 0 2
61303: PPUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: LD_VAR 0 4
61313: PPUSH
61314: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61318: LD_VAR 0 1
61322: PPUSH
61323: LD_VAR 0 2
61327: PPUSH
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL_OW 331
// end ;
61337: LD_VAR 0 5
61341: RET
// export function Video ( mode ) ; begin
61342: LD_INT 0
61344: PPUSH
// ingame_video = mode ;
61345: LD_ADDR_OWVAR 52
61349: PUSH
61350: LD_VAR 0 1
61354: ST_TO_ADDR
// interface_hidden = mode ;
61355: LD_ADDR_OWVAR 54
61359: PUSH
61360: LD_VAR 0 1
61364: ST_TO_ADDR
// end ;
61365: LD_VAR 0 2
61369: RET
// export function Join ( array , element ) ; begin
61370: LD_INT 0
61372: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61373: LD_ADDR_VAR 0 3
61377: PUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 1
61390: PLUS
61391: PPUSH
61392: LD_VAR 0 2
61396: PPUSH
61397: CALL_OW 1
61401: ST_TO_ADDR
// end ;
61402: LD_VAR 0 3
61406: RET
// export function JoinUnion ( array , element ) ; begin
61407: LD_INT 0
61409: PPUSH
// result := array union element ;
61410: LD_ADDR_VAR 0 3
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_VAR 0 2
61424: UNION
61425: ST_TO_ADDR
// end ;
61426: LD_VAR 0 3
61430: RET
// export function GetBehemoths ( side ) ; begin
61431: LD_INT 0
61433: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61434: LD_ADDR_VAR 0 2
61438: PUSH
61439: LD_INT 22
61441: PUSH
61442: LD_VAR 0 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 31
61453: PUSH
61454: LD_INT 25
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PPUSH
61465: CALL_OW 69
61469: ST_TO_ADDR
// end ;
61470: LD_VAR 0 2
61474: RET
// export function Shuffle ( array ) ; var i , index ; begin
61475: LD_INT 0
61477: PPUSH
61478: PPUSH
61479: PPUSH
// result := [ ] ;
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: EMPTY
61486: ST_TO_ADDR
// if not array then
61487: LD_VAR 0 1
61491: NOT
61492: IFFALSE 61496
// exit ;
61494: GO 61595
// Randomize ;
61496: CALL_OW 10
// for i = array downto 1 do
61500: LD_ADDR_VAR 0 3
61504: PUSH
61505: DOUBLE
61506: LD_VAR 0 1
61510: INC
61511: ST_TO_ADDR
61512: LD_INT 1
61514: PUSH
61515: FOR_DOWNTO
61516: IFFALSE 61593
// begin index := rand ( 1 , array ) ;
61518: LD_ADDR_VAR 0 4
61522: PUSH
61523: LD_INT 1
61525: PPUSH
61526: LD_VAR 0 1
61530: PPUSH
61531: CALL_OW 12
61535: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61536: LD_ADDR_VAR 0 2
61540: PUSH
61541: LD_VAR 0 2
61545: PPUSH
61546: LD_VAR 0 2
61550: PUSH
61551: LD_INT 1
61553: PLUS
61554: PPUSH
61555: LD_VAR 0 1
61559: PUSH
61560: LD_VAR 0 4
61564: ARRAY
61565: PPUSH
61566: CALL_OW 2
61570: ST_TO_ADDR
// array := Delete ( array , index ) ;
61571: LD_ADDR_VAR 0 1
61575: PUSH
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_VAR 0 4
61585: PPUSH
61586: CALL_OW 3
61590: ST_TO_ADDR
// end ;
61591: GO 61515
61593: POP
61594: POP
// end ;
61595: LD_VAR 0 2
61599: RET
// export function GetBaseMaterials ( base ) ; begin
61600: LD_INT 0
61602: PPUSH
// result := [ 0 , 0 , 0 ] ;
61603: LD_ADDR_VAR 0 2
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: ST_TO_ADDR
// if not base then
61622: LD_VAR 0 1
61626: NOT
61627: IFFALSE 61631
// exit ;
61629: GO 61680
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61631: LD_ADDR_VAR 0 2
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_INT 1
61643: PPUSH
61644: CALL_OW 275
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_INT 2
61656: PPUSH
61657: CALL_OW 275
61661: PUSH
61662: LD_VAR 0 1
61666: PPUSH
61667: LD_INT 3
61669: PPUSH
61670: CALL_OW 275
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 2
61684: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
// result := array ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: LD_VAR 0 1
61698: ST_TO_ADDR
// if size > 0 then
61699: LD_VAR 0 2
61703: PUSH
61704: LD_INT 0
61706: GREATER
61707: IFFALSE 61753
// for i := array downto size do
61709: LD_ADDR_VAR 0 4
61713: PUSH
61714: DOUBLE
61715: LD_VAR 0 1
61719: INC
61720: ST_TO_ADDR
61721: LD_VAR 0 2
61725: PUSH
61726: FOR_DOWNTO
61727: IFFALSE 61751
// result := Delete ( result , result ) ;
61729: LD_ADDR_VAR 0 3
61733: PUSH
61734: LD_VAR 0 3
61738: PPUSH
61739: LD_VAR 0 3
61743: PPUSH
61744: CALL_OW 3
61748: ST_TO_ADDR
61749: GO 61726
61751: POP
61752: POP
// end ;
61753: LD_VAR 0 3
61757: RET
// export function ComExit ( unit ) ; var tmp ; begin
61758: LD_INT 0
61760: PPUSH
61761: PPUSH
// if not IsInUnit ( unit ) then
61762: LD_VAR 0 1
61766: PPUSH
61767: CALL_OW 310
61771: NOT
61772: IFFALSE 61776
// exit ;
61774: GO 61836
// tmp := IsInUnit ( unit ) ;
61776: LD_ADDR_VAR 0 3
61780: PUSH
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 310
61790: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61791: LD_VAR 0 3
61795: PPUSH
61796: CALL_OW 247
61800: PUSH
61801: LD_INT 2
61803: EQUAL
61804: IFFALSE 61817
// ComExitVehicle ( unit ) else
61806: LD_VAR 0 1
61810: PPUSH
61811: CALL_OW 121
61815: GO 61826
// ComExitBuilding ( unit ) ;
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 122
// result := tmp ;
61826: LD_ADDR_VAR 0 2
61830: PUSH
61831: LD_VAR 0 3
61835: ST_TO_ADDR
// end ;
61836: LD_VAR 0 2
61840: RET
// export function ResetHc ; begin
61841: LD_INT 0
61843: PPUSH
// InitHc ;
61844: CALL_OW 19
// hc_importance := 0 ;
61848: LD_ADDR_OWVAR 32
61852: PUSH
61853: LD_INT 0
61855: ST_TO_ADDR
// end ;
61856: LD_VAR 0 1
61860: RET
