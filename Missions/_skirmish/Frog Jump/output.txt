// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 62172 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 107
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// if cmd = 121 then
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 121
11042: EQUAL
11043: IFFALSE 11045
// end ;
11045: LD_VAR 0 6
11049: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11050: LD_INT 0
11052: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11053: LD_VAR 0 1
11057: PUSH
11058: LD_INT 250
11060: EQUAL
11061: PUSH
11062: LD_VAR 0 2
11066: PPUSH
11067: CALL_OW 264
11071: PUSH
11072: LD_EXP 110
11076: EQUAL
11077: AND
11078: IFFALSE 11099
// MinerPlaceMine ( unit , x , y ) ;
11080: LD_VAR 0 2
11084: PPUSH
11085: LD_VAR 0 4
11089: PPUSH
11090: LD_VAR 0 5
11094: PPUSH
11095: CALL 13448 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11099: LD_VAR 0 1
11103: PUSH
11104: LD_INT 251
11106: EQUAL
11107: PUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 264
11117: PUSH
11118: LD_EXP 110
11122: EQUAL
11123: AND
11124: IFFALSE 11145
// MinerDetonateMine ( unit , x , y ) ;
11126: LD_VAR 0 2
11130: PPUSH
11131: LD_VAR 0 4
11135: PPUSH
11136: LD_VAR 0 5
11140: PPUSH
11141: CALL 13725 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11145: LD_VAR 0 1
11149: PUSH
11150: LD_INT 252
11152: EQUAL
11153: PUSH
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 264
11163: PUSH
11164: LD_EXP 110
11168: EQUAL
11169: AND
11170: IFFALSE 11191
// MinerCreateMinefield ( unit , x , y ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_VAR 0 4
11181: PPUSH
11182: LD_VAR 0 5
11186: PPUSH
11187: CALL 14142 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11191: LD_VAR 0 1
11195: PUSH
11196: LD_INT 253
11198: EQUAL
11199: PUSH
11200: LD_VAR 0 2
11204: PPUSH
11205: CALL_OW 257
11209: PUSH
11210: LD_INT 5
11212: EQUAL
11213: AND
11214: IFFALSE 11235
// ComBinocular ( unit , x , y ) ;
11216: LD_VAR 0 2
11220: PPUSH
11221: LD_VAR 0 4
11225: PPUSH
11226: LD_VAR 0 5
11230: PPUSH
11231: CALL 14513 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 254
11242: EQUAL
11243: PUSH
11244: LD_VAR 0 2
11248: PPUSH
11249: CALL_OW 264
11253: PUSH
11254: LD_EXP 105
11258: EQUAL
11259: AND
11260: PUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: CALL_OW 263
11270: PUSH
11271: LD_INT 3
11273: EQUAL
11274: AND
11275: IFFALSE 11291
// HackDestroyVehicle ( unit , selectedUnit ) ;
11277: LD_VAR 0 2
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: CALL 12808 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11291: LD_VAR 0 1
11295: PUSH
11296: LD_INT 255
11298: EQUAL
11299: PUSH
11300: LD_VAR 0 2
11304: PPUSH
11305: CALL_OW 264
11309: PUSH
11310: LD_INT 14
11312: PUSH
11313: LD_INT 53
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: IN
11320: AND
11321: PUSH
11322: LD_VAR 0 4
11326: PPUSH
11327: LD_VAR 0 5
11331: PPUSH
11332: CALL_OW 488
11336: AND
11337: IFFALSE 11361
// CutTreeXYR ( unit , x , y , 12 ) ;
11339: LD_VAR 0 2
11343: PPUSH
11344: LD_VAR 0 4
11348: PPUSH
11349: LD_VAR 0 5
11353: PPUSH
11354: LD_INT 12
11356: PPUSH
11357: CALL 11374 0 4
// end ;
11361: LD_VAR 0 6
11365: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
11366: LD_INT 0
11368: PPUSH
// end ;
11369: LD_VAR 0 4
11373: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11374: LD_INT 0
11376: PPUSH
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11385: LD_VAR 0 1
11389: NOT
11390: PUSH
11391: LD_VAR 0 2
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: CALL_OW 488
11405: NOT
11406: OR
11407: PUSH
11408: LD_VAR 0 4
11412: NOT
11413: OR
11414: IFFALSE 11418
// exit ;
11416: GO 11758
// list := [ ] ;
11418: LD_ADDR_VAR 0 13
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// if x - r < 0 then
11425: LD_VAR 0 2
11429: PUSH
11430: LD_VAR 0 4
11434: MINUS
11435: PUSH
11436: LD_INT 0
11438: LESS
11439: IFFALSE 11451
// min_x := 0 else
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
11449: GO 11467
// min_x := x - r ;
11451: LD_ADDR_VAR 0 7
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_VAR 0 4
11465: MINUS
11466: ST_TO_ADDR
// if y - r < 0 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_VAR 0 4
11476: MINUS
11477: PUSH
11478: LD_INT 0
11480: LESS
11481: IFFALSE 11493
// min_y := 0 else
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
11491: GO 11509
// min_y := y - r ;
11493: LD_ADDR_VAR 0 8
11497: PUSH
11498: LD_VAR 0 3
11502: PUSH
11503: LD_VAR 0 4
11507: MINUS
11508: ST_TO_ADDR
// max_x := x + r ;
11509: LD_ADDR_VAR 0 9
11513: PUSH
11514: LD_VAR 0 2
11518: PUSH
11519: LD_VAR 0 4
11523: PLUS
11524: ST_TO_ADDR
// max_y := y + r ;
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 3
11534: PUSH
11535: LD_VAR 0 4
11539: PLUS
11540: ST_TO_ADDR
// for _x = min_x to max_x do
11541: LD_ADDR_VAR 0 11
11545: PUSH
11546: DOUBLE
11547: LD_VAR 0 7
11551: DEC
11552: ST_TO_ADDR
11553: LD_VAR 0 9
11557: PUSH
11558: FOR_TO
11559: IFFALSE 11676
// for _y = min_y to max_y do
11561: LD_ADDR_VAR 0 12
11565: PUSH
11566: DOUBLE
11567: LD_VAR 0 8
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 10
11577: PUSH
11578: FOR_TO
11579: IFFALSE 11672
// begin if not ValidHex ( _x , _y ) then
11581: LD_VAR 0 11
11585: PPUSH
11586: LD_VAR 0 12
11590: PPUSH
11591: CALL_OW 488
11595: NOT
11596: IFFALSE 11600
// continue ;
11598: GO 11578
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11600: LD_VAR 0 11
11604: PPUSH
11605: LD_VAR 0 12
11609: PPUSH
11610: CALL_OW 351
11614: PUSH
11615: LD_VAR 0 11
11619: PPUSH
11620: LD_VAR 0 12
11624: PPUSH
11625: CALL_OW 554
11629: AND
11630: IFFALSE 11670
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11632: LD_ADDR_VAR 0 13
11636: PUSH
11637: LD_VAR 0 13
11641: PPUSH
11642: LD_VAR 0 13
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: PPUSH
11651: LD_VAR 0 11
11655: PUSH
11656: LD_VAR 0 12
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 2
11669: ST_TO_ADDR
// end ;
11670: GO 11578
11672: POP
11673: POP
11674: GO 11558
11676: POP
11677: POP
// if not list then
11678: LD_VAR 0 13
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11758
// for i in list do
11687: LD_ADDR_VAR 0 6
11691: PUSH
11692: LD_VAR 0 13
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11756
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_STRING M
11707: PUSH
11708: LD_VAR 0 6
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PUSH
11717: LD_VAR 0 6
11721: PUSH
11722: LD_INT 2
11724: ARRAY
11725: PUSH
11726: LD_INT 0
11728: PUSH
11729: LD_INT 0
11731: PUSH
11732: LD_INT 0
11734: PUSH
11735: LD_INT 0
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: PPUSH
11750: CALL_OW 447
11754: GO 11697
11756: POP
11757: POP
// end ;
11758: LD_VAR 0 5
11762: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11763: LD_EXP 38
11767: NOT
11768: IFFALSE 11818
11770: GO 11772
11772: DISABLE
// begin initHack := true ;
11773: LD_ADDR_EXP 38
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// hackTanks := [ ] ;
11781: LD_ADDR_EXP 39
11785: PUSH
11786: EMPTY
11787: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11788: LD_ADDR_EXP 40
11792: PUSH
11793: EMPTY
11794: ST_TO_ADDR
// hackLimit := 3 ;
11795: LD_ADDR_EXP 41
11799: PUSH
11800: LD_INT 3
11802: ST_TO_ADDR
// hackDist := 12 ;
11803: LD_ADDR_EXP 42
11807: PUSH
11808: LD_INT 12
11810: ST_TO_ADDR
// hackCounter := [ ] ;
11811: LD_ADDR_EXP 43
11815: PUSH
11816: EMPTY
11817: ST_TO_ADDR
// end ;
11818: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11819: LD_EXP 38
11823: PUSH
11824: LD_INT 34
11826: PUSH
11827: LD_EXP 105
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: AND
11841: IFFALSE 12096
11843: GO 11845
11845: DISABLE
11846: LD_INT 0
11848: PPUSH
11849: PPUSH
// begin enable ;
11850: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_EXP 105
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: PUSH
11873: FOR_IN
11874: IFFALSE 12094
// begin if not i in hackTanks then
11876: LD_VAR 0 1
11880: PUSH
11881: LD_EXP 39
11885: IN
11886: NOT
11887: IFFALSE 11970
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11889: LD_ADDR_EXP 39
11893: PUSH
11894: LD_EXP 39
11898: PPUSH
11899: LD_EXP 39
11903: PUSH
11904: LD_INT 1
11906: PLUS
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 1
11917: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11918: LD_ADDR_EXP 40
11922: PUSH
11923: LD_EXP 40
11927: PPUSH
11928: LD_EXP 40
11932: PUSH
11933: LD_INT 1
11935: PLUS
11936: PPUSH
11937: EMPTY
11938: PPUSH
11939: CALL_OW 1
11943: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11944: LD_ADDR_EXP 43
11948: PUSH
11949: LD_EXP 43
11953: PPUSH
11954: LD_EXP 43
11958: PUSH
11959: LD_INT 1
11961: PLUS
11962: PPUSH
11963: EMPTY
11964: PPUSH
11965: CALL_OW 1
11969: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: CALL_OW 302
11979: NOT
11980: IFFALSE 11993
// begin HackUnlinkAll ( i ) ;
11982: LD_VAR 0 1
11986: PPUSH
11987: CALL 12099 0 1
// continue ;
11991: GO 11873
// end ; HackCheckCapturedStatus ( i ) ;
11993: LD_VAR 0 1
11997: PPUSH
11998: CALL 12542 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12002: LD_ADDR_VAR 0 2
12006: PUSH
12007: LD_INT 81
12009: PUSH
12010: LD_VAR 0 1
12014: PPUSH
12015: CALL_OW 255
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 91
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: LD_EXP 42
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 50
12054: PUSH
12055: EMPTY
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 69
12068: ST_TO_ADDR
// if not tmp then
12069: LD_VAR 0 2
12073: NOT
12074: IFFALSE 12078
// continue ;
12076: GO 11873
// HackLink ( i , tmp ) ;
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_VAR 0 2
12087: PPUSH
12088: CALL 12235 0 2
// end ;
12092: GO 11873
12094: POP
12095: POP
// end ;
12096: PPOPN 2
12098: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
// if not hack in hackTanks then
12104: LD_VAR 0 1
12108: PUSH
12109: LD_EXP 39
12113: IN
12114: NOT
12115: IFFALSE 12119
// exit ;
12117: GO 12230
// index := GetElementIndex ( hackTanks , hack ) ;
12119: LD_ADDR_VAR 0 4
12123: PUSH
12124: LD_EXP 39
12128: PPUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL 32975 0 2
12138: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12139: LD_EXP 40
12143: PUSH
12144: LD_VAR 0 4
12148: ARRAY
12149: IFFALSE 12230
// begin for i in hackTanksCaptured [ index ] do
12151: LD_ADDR_VAR 0 3
12155: PUSH
12156: LD_EXP 40
12160: PUSH
12161: LD_VAR 0 4
12165: ARRAY
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12194
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: PPUSH
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 2
12186: ARRAY
12187: PPUSH
12188: CALL_OW 235
12192: GO 12167
12194: POP
12195: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12196: LD_ADDR_EXP 40
12200: PUSH
12201: LD_EXP 40
12205: PPUSH
12206: LD_VAR 0 4
12210: PPUSH
12211: EMPTY
12212: PPUSH
12213: CALL_OW 1
12217: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12218: LD_VAR 0 1
12222: PPUSH
12223: LD_INT 0
12225: PPUSH
12226: CALL_OW 505
// end ; end ;
12230: LD_VAR 0 2
12234: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
12239: PPUSH
// if not hack in hackTanks or not vehicles then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 39
12249: IN
12250: NOT
12251: PUSH
12252: LD_VAR 0 2
12256: NOT
12257: OR
12258: IFFALSE 12262
// exit ;
12260: GO 12537
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_VAR 0 2
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL 33625 0 4
12287: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12288: LD_ADDR_VAR 0 5
12292: PUSH
12293: LD_EXP 39
12297: PPUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL 32975 0 2
12307: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12308: LD_EXP 40
12312: PUSH
12313: LD_VAR 0 5
12317: ARRAY
12318: PUSH
12319: LD_EXP 41
12323: LESS
12324: IFFALSE 12513
// begin for i := 1 to vehicles do
12326: LD_ADDR_VAR 0 4
12330: PUSH
12331: DOUBLE
12332: LD_INT 1
12334: DEC
12335: ST_TO_ADDR
12336: LD_VAR 0 2
12340: PUSH
12341: FOR_TO
12342: IFFALSE 12511
// begin if hackTanksCaptured [ index ] = hackLimit then
12344: LD_EXP 40
12348: PUSH
12349: LD_VAR 0 5
12353: ARRAY
12354: PUSH
12355: LD_EXP 41
12359: EQUAL
12360: IFFALSE 12364
// break ;
12362: GO 12511
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12364: LD_ADDR_EXP 43
12368: PUSH
12369: LD_EXP 43
12373: PPUSH
12374: LD_VAR 0 5
12378: PPUSH
12379: LD_EXP 43
12383: PUSH
12384: LD_VAR 0 5
12388: ARRAY
12389: PUSH
12390: LD_INT 1
12392: PLUS
12393: PPUSH
12394: CALL_OW 1
12398: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12399: LD_ADDR_EXP 40
12403: PUSH
12404: LD_EXP 40
12408: PPUSH
12409: LD_VAR 0 5
12413: PUSH
12414: LD_EXP 40
12418: PUSH
12419: LD_VAR 0 5
12423: ARRAY
12424: PUSH
12425: LD_INT 1
12427: PLUS
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: LD_VAR 0 2
12437: PUSH
12438: LD_VAR 0 4
12442: ARRAY
12443: PUSH
12444: LD_VAR 0 2
12448: PUSH
12449: LD_VAR 0 4
12453: ARRAY
12454: PPUSH
12455: CALL_OW 255
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL 33190 0 3
12468: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12469: LD_VAR 0 2
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PPUSH
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 255
12489: PPUSH
12490: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12494: LD_VAR 0 2
12498: PUSH
12499: LD_VAR 0 4
12503: ARRAY
12504: PPUSH
12505: CALL_OW 141
// end ;
12509: GO 12341
12511: POP
12512: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12513: LD_VAR 0 1
12517: PPUSH
12518: LD_EXP 40
12522: PUSH
12523: LD_VAR 0 5
12527: ARRAY
12528: PUSH
12529: LD_INT 0
12531: PLUS
12532: PPUSH
12533: CALL_OW 505
// end ;
12537: LD_VAR 0 3
12541: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12542: LD_INT 0
12544: PPUSH
12545: PPUSH
12546: PPUSH
12547: PPUSH
// if not hack in hackTanks then
12548: LD_VAR 0 1
12552: PUSH
12553: LD_EXP 39
12557: IN
12558: NOT
12559: IFFALSE 12563
// exit ;
12561: GO 12803
// index := GetElementIndex ( hackTanks , hack ) ;
12563: LD_ADDR_VAR 0 4
12567: PUSH
12568: LD_EXP 39
12572: PPUSH
12573: LD_VAR 0 1
12577: PPUSH
12578: CALL 32975 0 2
12582: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12583: LD_ADDR_VAR 0 3
12587: PUSH
12588: DOUBLE
12589: LD_EXP 40
12593: PUSH
12594: LD_VAR 0 4
12598: ARRAY
12599: INC
12600: ST_TO_ADDR
12601: LD_INT 1
12603: PUSH
12604: FOR_DOWNTO
12605: IFFALSE 12777
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12607: LD_ADDR_VAR 0 5
12611: PUSH
12612: LD_EXP 40
12616: PUSH
12617: LD_VAR 0 4
12621: ARRAY
12622: PUSH
12623: LD_VAR 0 3
12627: ARRAY
12628: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12629: LD_VAR 0 5
12633: PUSH
12634: LD_INT 1
12636: ARRAY
12637: PPUSH
12638: CALL_OW 302
12642: NOT
12643: PUSH
12644: LD_VAR 0 5
12648: PUSH
12649: LD_INT 1
12651: ARRAY
12652: PPUSH
12653: CALL_OW 255
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 255
12667: NONEQUAL
12668: OR
12669: IFFALSE 12775
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12671: LD_VAR 0 5
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PPUSH
12680: CALL_OW 305
12684: PUSH
12685: LD_VAR 0 5
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 255
12698: PUSH
12699: LD_VAR 0 1
12703: PPUSH
12704: CALL_OW 255
12708: EQUAL
12709: AND
12710: IFFALSE 12734
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12712: LD_VAR 0 5
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 5
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12734: LD_ADDR_EXP 40
12738: PUSH
12739: LD_EXP 40
12743: PPUSH
12744: LD_VAR 0 4
12748: PPUSH
12749: LD_EXP 40
12753: PUSH
12754: LD_VAR 0 4
12758: ARRAY
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: CALL_OW 3
12769: PPUSH
12770: CALL_OW 1
12774: ST_TO_ADDR
// end ; end ;
12775: GO 12604
12777: POP
12778: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12779: LD_VAR 0 1
12783: PPUSH
12784: LD_EXP 40
12788: PUSH
12789: LD_VAR 0 4
12793: ARRAY
12794: PUSH
12795: LD_INT 0
12797: PLUS
12798: PPUSH
12799: CALL_OW 505
// end ;
12803: LD_VAR 0 2
12807: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12808: LD_INT 0
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
// if not hack in hackTanks then
12814: LD_VAR 0 1
12818: PUSH
12819: LD_EXP 39
12823: IN
12824: NOT
12825: IFFALSE 12829
// exit ;
12827: GO 12914
// index := GetElementIndex ( hackTanks , hack ) ;
12829: LD_ADDR_VAR 0 5
12833: PUSH
12834: LD_EXP 39
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL 32975 0 2
12848: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12849: LD_ADDR_VAR 0 4
12853: PUSH
12854: DOUBLE
12855: LD_INT 1
12857: DEC
12858: ST_TO_ADDR
12859: LD_EXP 40
12863: PUSH
12864: LD_VAR 0 5
12868: ARRAY
12869: PUSH
12870: FOR_TO
12871: IFFALSE 12912
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12873: LD_EXP 40
12877: PUSH
12878: LD_VAR 0 5
12882: ARRAY
12883: PUSH
12884: LD_VAR 0 4
12888: ARRAY
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PUSH
12894: LD_VAR 0 2
12898: EQUAL
12899: IFFALSE 12910
// KillUnit ( vehicle ) ;
12901: LD_VAR 0 2
12905: PPUSH
12906: CALL_OW 66
12910: GO 12870
12912: POP
12913: POP
// end ;
12914: LD_VAR 0 3
12918: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12919: LD_EXP 44
12923: NOT
12924: IFFALSE 12959
12926: GO 12928
12928: DISABLE
// begin initMiner := true ;
12929: LD_ADDR_EXP 44
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// minersList := [ ] ;
12937: LD_ADDR_EXP 45
12941: PUSH
12942: EMPTY
12943: ST_TO_ADDR
// minerMinesList := [ ] ;
12944: LD_ADDR_EXP 46
12948: PUSH
12949: EMPTY
12950: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12951: LD_ADDR_EXP 47
12955: PUSH
12956: LD_INT 5
12958: ST_TO_ADDR
// end ;
12959: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12960: LD_EXP 44
12964: PUSH
12965: LD_INT 34
12967: PUSH
12968: LD_EXP 110
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: AND
12982: IFFALSE 13445
12984: GO 12986
12986: DISABLE
12987: LD_INT 0
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
// begin enable ;
12993: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12994: LD_ADDR_VAR 0 1
12998: PUSH
12999: LD_INT 34
13001: PUSH
13002: LD_EXP 110
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: PUSH
13016: FOR_IN
13017: IFFALSE 13089
// begin if not i in minersList then
13019: LD_VAR 0 1
13023: PUSH
13024: LD_EXP 45
13028: IN
13029: NOT
13030: IFFALSE 13087
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13032: LD_ADDR_EXP 45
13036: PUSH
13037: LD_EXP 45
13041: PPUSH
13042: LD_EXP 45
13046: PUSH
13047: LD_INT 1
13049: PLUS
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 1
13060: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13061: LD_ADDR_EXP 46
13065: PUSH
13066: LD_EXP 46
13070: PPUSH
13071: LD_EXP 46
13075: PUSH
13076: LD_INT 1
13078: PLUS
13079: PPUSH
13080: EMPTY
13081: PPUSH
13082: CALL_OW 1
13086: ST_TO_ADDR
// end end ;
13087: GO 13016
13089: POP
13090: POP
// for i := minerMinesList downto 1 do
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: DOUBLE
13097: LD_EXP 46
13101: INC
13102: ST_TO_ADDR
13103: LD_INT 1
13105: PUSH
13106: FOR_DOWNTO
13107: IFFALSE 13443
// begin if IsLive ( minersList [ i ] ) then
13109: LD_EXP 45
13113: PUSH
13114: LD_VAR 0 1
13118: ARRAY
13119: PPUSH
13120: CALL_OW 300
13124: IFFALSE 13152
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13126: LD_EXP 45
13130: PUSH
13131: LD_VAR 0 1
13135: ARRAY
13136: PPUSH
13137: LD_EXP 46
13141: PUSH
13142: LD_VAR 0 1
13146: ARRAY
13147: PPUSH
13148: CALL_OW 505
// if not minerMinesList [ i ] then
13152: LD_EXP 46
13156: PUSH
13157: LD_VAR 0 1
13161: ARRAY
13162: NOT
13163: IFFALSE 13167
// continue ;
13165: GO 13106
// for j := minerMinesList [ i ] downto 1 do
13167: LD_ADDR_VAR 0 2
13171: PUSH
13172: DOUBLE
13173: LD_EXP 46
13177: PUSH
13178: LD_VAR 0 1
13182: ARRAY
13183: INC
13184: ST_TO_ADDR
13185: LD_INT 1
13187: PUSH
13188: FOR_DOWNTO
13189: IFFALSE 13439
// begin side := GetSide ( minersList [ i ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_EXP 45
13200: PUSH
13201: LD_VAR 0 1
13205: ARRAY
13206: PPUSH
13207: CALL_OW 255
13211: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13212: LD_ADDR_VAR 0 4
13216: PUSH
13217: LD_EXP 46
13221: PUSH
13222: LD_VAR 0 1
13226: ARRAY
13227: PUSH
13228: LD_VAR 0 2
13232: ARRAY
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: LD_EXP 46
13242: PUSH
13243: LD_VAR 0 1
13247: ARRAY
13248: PUSH
13249: LD_VAR 0 2
13253: ARRAY
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: PPUSH
13259: CALL_OW 428
13263: ST_TO_ADDR
// if not tmp then
13264: LD_VAR 0 4
13268: NOT
13269: IFFALSE 13273
// continue ;
13271: GO 13188
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13273: LD_VAR 0 4
13277: PUSH
13278: LD_INT 81
13280: PUSH
13281: LD_VAR 0 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: IN
13295: PUSH
13296: LD_EXP 46
13300: PUSH
13301: LD_VAR 0 1
13305: ARRAY
13306: PUSH
13307: LD_VAR 0 2
13311: ARRAY
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: LD_EXP 46
13321: PUSH
13322: LD_VAR 0 1
13326: ARRAY
13327: PUSH
13328: LD_VAR 0 2
13332: ARRAY
13333: PUSH
13334: LD_INT 2
13336: ARRAY
13337: PPUSH
13338: CALL_OW 458
13342: AND
13343: IFFALSE 13437
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13345: LD_EXP 46
13349: PUSH
13350: LD_VAR 0 1
13354: ARRAY
13355: PUSH
13356: LD_VAR 0 2
13360: ARRAY
13361: PUSH
13362: LD_INT 1
13364: ARRAY
13365: PPUSH
13366: LD_EXP 46
13370: PUSH
13371: LD_VAR 0 1
13375: ARRAY
13376: PUSH
13377: LD_VAR 0 2
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13396: LD_ADDR_EXP 46
13400: PUSH
13401: LD_EXP 46
13405: PPUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: LD_EXP 46
13415: PUSH
13416: LD_VAR 0 1
13420: ARRAY
13421: PPUSH
13422: LD_VAR 0 2
13426: PPUSH
13427: CALL_OW 3
13431: PPUSH
13432: CALL_OW 1
13436: ST_TO_ADDR
// end ; end ;
13437: GO 13188
13439: POP
13440: POP
// end ;
13441: GO 13106
13443: POP
13444: POP
// end ;
13445: PPOPN 4
13447: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
// result := false ;
13452: LD_ADDR_VAR 0 4
13456: PUSH
13457: LD_INT 0
13459: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 264
13469: PUSH
13470: LD_EXP 110
13474: EQUAL
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13720
// index := GetElementIndex ( minersList , unit ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_EXP 45
13489: PPUSH
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL 32975 0 2
13499: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13500: LD_EXP 46
13504: PUSH
13505: LD_VAR 0 5
13509: ARRAY
13510: PUSH
13511: LD_EXP 47
13515: GREATEREQUAL
13516: IFFALSE 13520
// exit ;
13518: GO 13720
// ComMoveXY ( unit , x , y ) ;
13520: LD_VAR 0 1
13524: PPUSH
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13539: LD_INT 35
13541: PPUSH
13542: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13546: LD_VAR 0 1
13550: PPUSH
13551: LD_VAR 0 2
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: CALL 63372 0 3
13565: NOT
13566: PUSH
13567: LD_VAR 0 1
13571: PPUSH
13572: CALL_OW 314
13576: AND
13577: IFFALSE 13581
// exit ;
13579: GO 13720
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13581: LD_VAR 0 2
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: CALL_OW 428
13595: PUSH
13596: LD_VAR 0 1
13600: EQUAL
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 314
13611: NOT
13612: AND
13613: IFFALSE 13539
// PlaySoundXY ( x , y , PlantMine ) ;
13615: LD_VAR 0 2
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_STRING PlantMine
13627: PPUSH
13628: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 255
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13659: LD_ADDR_EXP 46
13663: PUSH
13664: LD_EXP 46
13668: PPUSH
13669: LD_VAR 0 5
13673: PUSH
13674: LD_EXP 46
13678: PUSH
13679: LD_VAR 0 5
13683: ARRAY
13684: PUSH
13685: LD_INT 1
13687: PLUS
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PPUSH
13693: LD_VAR 0 2
13697: PUSH
13698: LD_VAR 0 3
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL 33190 0 3
13711: ST_TO_ADDR
// result := true ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// end ;
13720: LD_VAR 0 4
13724: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13725: LD_INT 0
13727: PPUSH
13728: PPUSH
13729: PPUSH
// if not unit in minersList then
13730: LD_VAR 0 1
13734: PUSH
13735: LD_EXP 45
13739: IN
13740: NOT
13741: IFFALSE 13745
// exit ;
13743: GO 14137
// index := GetElementIndex ( minersList , unit ) ;
13745: LD_ADDR_VAR 0 6
13749: PUSH
13750: LD_EXP 45
13754: PPUSH
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL 32975 0 2
13764: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13765: LD_ADDR_VAR 0 5
13769: PUSH
13770: DOUBLE
13771: LD_EXP 46
13775: PUSH
13776: LD_VAR 0 6
13780: ARRAY
13781: INC
13782: ST_TO_ADDR
13783: LD_INT 1
13785: PUSH
13786: FOR_DOWNTO
13787: IFFALSE 13948
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13789: LD_EXP 46
13793: PUSH
13794: LD_VAR 0 6
13798: ARRAY
13799: PUSH
13800: LD_VAR 0 5
13804: ARRAY
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PUSH
13810: LD_VAR 0 2
13814: EQUAL
13815: PUSH
13816: LD_EXP 46
13820: PUSH
13821: LD_VAR 0 6
13825: ARRAY
13826: PUSH
13827: LD_VAR 0 5
13831: ARRAY
13832: PUSH
13833: LD_INT 2
13835: ARRAY
13836: PUSH
13837: LD_VAR 0 3
13841: EQUAL
13842: AND
13843: IFFALSE 13946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13845: LD_EXP 46
13849: PUSH
13850: LD_VAR 0 6
13854: ARRAY
13855: PUSH
13856: LD_VAR 0 5
13860: ARRAY
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: PPUSH
13866: LD_EXP 46
13870: PUSH
13871: LD_VAR 0 6
13875: ARRAY
13876: PUSH
13877: LD_VAR 0 5
13881: ARRAY
13882: PUSH
13883: LD_INT 2
13885: ARRAY
13886: PPUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 255
13896: PPUSH
13897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13901: LD_ADDR_EXP 46
13905: PUSH
13906: LD_EXP 46
13910: PPUSH
13911: LD_VAR 0 6
13915: PPUSH
13916: LD_EXP 46
13920: PUSH
13921: LD_VAR 0 6
13925: ARRAY
13926: PPUSH
13927: LD_VAR 0 5
13931: PPUSH
13932: CALL_OW 3
13936: PPUSH
13937: CALL_OW 1
13941: ST_TO_ADDR
// exit ;
13942: POP
13943: POP
13944: GO 14137
// end ; end ;
13946: GO 13786
13948: POP
13949: POP
// for i := minerMinesList [ index ] downto 1 do
13950: LD_ADDR_VAR 0 5
13954: PUSH
13955: DOUBLE
13956: LD_EXP 46
13960: PUSH
13961: LD_VAR 0 6
13965: ARRAY
13966: INC
13967: ST_TO_ADDR
13968: LD_INT 1
13970: PUSH
13971: FOR_DOWNTO
13972: IFFALSE 14135
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13974: LD_EXP 46
13978: PUSH
13979: LD_VAR 0 6
13983: ARRAY
13984: PUSH
13985: LD_VAR 0 5
13989: ARRAY
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: PPUSH
13995: LD_EXP 46
13999: PUSH
14000: LD_VAR 0 6
14004: ARRAY
14005: PUSH
14006: LD_VAR 0 5
14010: ARRAY
14011: PUSH
14012: LD_INT 2
14014: ARRAY
14015: PPUSH
14016: LD_VAR 0 2
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: CALL_OW 298
14030: PUSH
14031: LD_INT 6
14033: LESS
14034: IFFALSE 14133
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14036: LD_EXP 46
14040: PUSH
14041: LD_VAR 0 6
14045: ARRAY
14046: PUSH
14047: LD_VAR 0 5
14051: ARRAY
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_EXP 46
14061: PUSH
14062: LD_VAR 0 6
14066: ARRAY
14067: PUSH
14068: LD_VAR 0 5
14072: ARRAY
14073: PUSH
14074: LD_INT 2
14076: ARRAY
14077: PPUSH
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 255
14087: PPUSH
14088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14092: LD_ADDR_EXP 46
14096: PUSH
14097: LD_EXP 46
14101: PPUSH
14102: LD_VAR 0 6
14106: PPUSH
14107: LD_EXP 46
14111: PUSH
14112: LD_VAR 0 6
14116: ARRAY
14117: PPUSH
14118: LD_VAR 0 5
14122: PPUSH
14123: CALL_OW 3
14127: PPUSH
14128: CALL_OW 1
14132: ST_TO_ADDR
// end ; end ;
14133: GO 13971
14135: POP
14136: POP
// end ;
14137: LD_VAR 0 4
14141: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14142: LD_INT 0
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
14149: PPUSH
14150: PPUSH
14151: PPUSH
14152: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 264
14162: PUSH
14163: LD_EXP 110
14167: EQUAL
14168: NOT
14169: PUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_EXP 45
14179: IN
14180: NOT
14181: OR
14182: IFFALSE 14186
// exit ;
14184: GO 14508
// index := GetElementIndex ( minersList , unit ) ;
14186: LD_ADDR_VAR 0 6
14190: PUSH
14191: LD_EXP 45
14195: PPUSH
14196: LD_VAR 0 1
14200: PPUSH
14201: CALL 32975 0 2
14205: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14206: LD_ADDR_VAR 0 8
14210: PUSH
14211: LD_EXP 47
14215: PUSH
14216: LD_EXP 46
14220: PUSH
14221: LD_VAR 0 6
14225: ARRAY
14226: MINUS
14227: ST_TO_ADDR
// if not minesFreeAmount then
14228: LD_VAR 0 8
14232: NOT
14233: IFFALSE 14237
// exit ;
14235: GO 14508
// tmp := [ ] ;
14237: LD_ADDR_VAR 0 7
14241: PUSH
14242: EMPTY
14243: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14244: LD_ADDR_VAR 0 5
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 8
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14455
// begin _d := rand ( 0 , 5 ) ;
14262: LD_ADDR_VAR 0 11
14266: PUSH
14267: LD_INT 0
14269: PPUSH
14270: LD_INT 5
14272: PPUSH
14273: CALL_OW 12
14277: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14278: LD_ADDR_VAR 0 12
14282: PUSH
14283: LD_INT 2
14285: PPUSH
14286: LD_INT 6
14288: PPUSH
14289: CALL_OW 12
14293: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14294: LD_ADDR_VAR 0 9
14298: PUSH
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_VAR 0 11
14308: PPUSH
14309: LD_VAR 0 12
14313: PPUSH
14314: CALL_OW 272
14318: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14319: LD_ADDR_VAR 0 10
14323: PUSH
14324: LD_VAR 0 3
14328: PPUSH
14329: LD_VAR 0 11
14333: PPUSH
14334: LD_VAR 0 12
14338: PPUSH
14339: CALL_OW 273
14343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14344: LD_VAR 0 9
14348: PPUSH
14349: LD_VAR 0 10
14353: PPUSH
14354: CALL_OW 488
14358: PUSH
14359: LD_VAR 0 9
14363: PUSH
14364: LD_VAR 0 10
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_VAR 0 7
14377: IN
14378: NOT
14379: AND
14380: PUSH
14381: LD_VAR 0 9
14385: PPUSH
14386: LD_VAR 0 10
14390: PPUSH
14391: CALL_OW 458
14395: NOT
14396: AND
14397: IFFALSE 14439
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14399: LD_ADDR_VAR 0 7
14403: PUSH
14404: LD_VAR 0 7
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_INT 1
14416: PLUS
14417: PPUSH
14418: LD_VAR 0 9
14422: PUSH
14423: LD_VAR 0 10
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 1
14436: ST_TO_ADDR
14437: GO 14453
// i := i - 1 ;
14439: LD_ADDR_VAR 0 5
14443: PUSH
14444: LD_VAR 0 5
14448: PUSH
14449: LD_INT 1
14451: MINUS
14452: ST_TO_ADDR
// end ;
14453: GO 14259
14455: POP
14456: POP
// for i in tmp do
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_VAR 0 7
14466: PUSH
14467: FOR_IN
14468: IFFALSE 14506
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_VAR 0 5
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 5
14488: PUSH
14489: LD_INT 2
14491: ARRAY
14492: PPUSH
14493: CALL 13448 0 3
14497: NOT
14498: IFFALSE 14504
// exit ;
14500: POP
14501: POP
14502: GO 14508
14504: GO 14467
14506: POP
14507: POP
// end ;
14508: LD_VAR 0 4
14512: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14513: LD_INT 0
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
// if not GetClass ( unit ) = class_sniper then
14522: LD_VAR 0 1
14526: PPUSH
14527: CALL_OW 257
14531: PUSH
14532: LD_INT 5
14534: EQUAL
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14928
// dist := 8 ;
14540: LD_ADDR_VAR 0 5
14544: PUSH
14545: LD_INT 8
14547: ST_TO_ADDR
// viewRange := 12 ;
14548: LD_ADDR_VAR 0 7
14552: PUSH
14553: LD_INT 12
14555: ST_TO_ADDR
// side := GetSide ( unit ) ;
14556: LD_ADDR_VAR 0 6
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 255
14570: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14571: LD_INT 61
14573: PPUSH
14574: LD_VAR 0 6
14578: PPUSH
14579: CALL_OW 321
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: IFFALSE 14597
// viewRange := 16 ;
14589: LD_ADDR_VAR 0 7
14593: PUSH
14594: LD_INT 16
14596: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 3
14611: PPUSH
14612: CALL_OW 297
14616: PUSH
14617: LD_VAR 0 5
14621: GREATER
14622: IFFALSE 14701
// begin ComMoveXY ( unit , x , y ) ;
14624: LD_VAR 0 1
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14643: LD_INT 35
14645: PPUSH
14646: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_VAR 0 3
14664: PPUSH
14665: CALL 63372 0 3
14669: NOT
14670: IFFALSE 14674
// exit ;
14672: GO 14928
// until GetDistUnitXY ( unit , x , y ) < dist ;
14674: LD_VAR 0 1
14678: PPUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: LD_VAR 0 3
14688: PPUSH
14689: CALL_OW 297
14693: PUSH
14694: LD_VAR 0 5
14698: LESS
14699: IFFALSE 14643
// end ; ComTurnXY ( unit , x , y ) ;
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_VAR 0 2
14710: PPUSH
14711: LD_VAR 0 3
14715: PPUSH
14716: CALL_OW 118
// wait ( 5 ) ;
14720: LD_INT 5
14722: PPUSH
14723: CALL_OW 67
// _d := GetDir ( unit ) ;
14727: LD_ADDR_VAR 0 10
14731: PUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 254
14741: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14742: LD_ADDR_VAR 0 8
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 250
14756: PPUSH
14757: LD_VAR 0 10
14761: PPUSH
14762: LD_VAR 0 5
14766: PPUSH
14767: CALL_OW 272
14771: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14772: LD_ADDR_VAR 0 9
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 251
14786: PPUSH
14787: LD_VAR 0 10
14791: PPUSH
14792: LD_VAR 0 5
14796: PPUSH
14797: CALL_OW 273
14801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14802: LD_VAR 0 8
14806: PPUSH
14807: LD_VAR 0 9
14811: PPUSH
14812: CALL_OW 488
14816: NOT
14817: IFFALSE 14821
// exit ;
14819: GO 14928
// ComAnimCustom ( unit , 1 ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14833: LD_VAR 0 8
14837: PPUSH
14838: LD_VAR 0 9
14842: PPUSH
14843: LD_VAR 0 6
14847: PPUSH
14848: LD_VAR 0 7
14852: PPUSH
14853: CALL_OW 330
// repeat wait ( 1 ) ;
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 316
14873: PUSH
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 314
14883: OR
14884: PUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 302
14894: NOT
14895: OR
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 301
14906: OR
14907: IFFALSE 14857
// RemoveSeeing ( _x , _y , side ) ;
14909: LD_VAR 0 8
14913: PPUSH
14914: LD_VAR 0 9
14918: PPUSH
14919: LD_VAR 0 6
14923: PPUSH
14924: CALL_OW 331
// end ; end_of_file
14928: LD_VAR 0 4
14932: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14933: LD_VAR 0 2
14937: PUSH
14938: LD_INT 100
14940: EQUAL
14941: IFFALSE 15890
// begin if not StreamModeActive then
14943: LD_EXP 48
14947: NOT
14948: IFFALSE 14958
// StreamModeActive := true ;
14950: LD_ADDR_EXP 48
14954: PUSH
14955: LD_INT 1
14957: ST_TO_ADDR
// if p3 = 0 then
14958: LD_VAR 0 3
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: IFFALSE 14972
// InitStreamMode ;
14968: CALL 16048 0 0
// if p3 = 1 then
14972: LD_VAR 0 3
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: IFFALSE 14990
// sRocket := true ;
14982: LD_ADDR_EXP 53
14986: PUSH
14987: LD_INT 1
14989: ST_TO_ADDR
// if p3 = 2 then
14990: LD_VAR 0 3
14994: PUSH
14995: LD_INT 2
14997: EQUAL
14998: IFFALSE 15008
// sSpeed := true ;
15000: LD_ADDR_EXP 52
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// if p3 = 3 then
15008: LD_VAR 0 3
15012: PUSH
15013: LD_INT 3
15015: EQUAL
15016: IFFALSE 15026
// sEngine := true ;
15018: LD_ADDR_EXP 54
15022: PUSH
15023: LD_INT 1
15025: ST_TO_ADDR
// if p3 = 4 then
15026: LD_VAR 0 3
15030: PUSH
15031: LD_INT 4
15033: EQUAL
15034: IFFALSE 15044
// sSpec := true ;
15036: LD_ADDR_EXP 51
15040: PUSH
15041: LD_INT 1
15043: ST_TO_ADDR
// if p3 = 5 then
15044: LD_VAR 0 3
15048: PUSH
15049: LD_INT 5
15051: EQUAL
15052: IFFALSE 15062
// sLevel := true ;
15054: LD_ADDR_EXP 55
15058: PUSH
15059: LD_INT 1
15061: ST_TO_ADDR
// if p3 = 6 then
15062: LD_VAR 0 3
15066: PUSH
15067: LD_INT 6
15069: EQUAL
15070: IFFALSE 15080
// sArmoury := true ;
15072: LD_ADDR_EXP 56
15076: PUSH
15077: LD_INT 1
15079: ST_TO_ADDR
// if p3 = 7 then
15080: LD_VAR 0 3
15084: PUSH
15085: LD_INT 7
15087: EQUAL
15088: IFFALSE 15098
// sRadar := true ;
15090: LD_ADDR_EXP 57
15094: PUSH
15095: LD_INT 1
15097: ST_TO_ADDR
// if p3 = 8 then
15098: LD_VAR 0 3
15102: PUSH
15103: LD_INT 8
15105: EQUAL
15106: IFFALSE 15116
// sBunker := true ;
15108: LD_ADDR_EXP 58
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// if p3 = 9 then
15116: LD_VAR 0 3
15120: PUSH
15121: LD_INT 9
15123: EQUAL
15124: IFFALSE 15134
// sHack := true ;
15126: LD_ADDR_EXP 59
15130: PUSH
15131: LD_INT 1
15133: ST_TO_ADDR
// if p3 = 10 then
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 10
15141: EQUAL
15142: IFFALSE 15152
// sFire := true ;
15144: LD_ADDR_EXP 60
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if p3 = 11 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 11
15159: EQUAL
15160: IFFALSE 15170
// sRefresh := true ;
15162: LD_ADDR_EXP 61
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 12 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 12
15177: EQUAL
15178: IFFALSE 15188
// sExp := true ;
15180: LD_ADDR_EXP 62
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 13 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 13
15195: EQUAL
15196: IFFALSE 15206
// sDepot := true ;
15198: LD_ADDR_EXP 63
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 14 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 14
15213: EQUAL
15214: IFFALSE 15224
// sFlag := true ;
15216: LD_ADDR_EXP 64
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 15 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 15
15231: EQUAL
15232: IFFALSE 15242
// sKamikadze := true ;
15234: LD_ADDR_EXP 72
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 16 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 16
15249: EQUAL
15250: IFFALSE 15260
// sTroll := true ;
15252: LD_ADDR_EXP 73
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 17 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 17
15267: EQUAL
15268: IFFALSE 15278
// sSlow := true ;
15270: LD_ADDR_EXP 74
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 18 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 18
15285: EQUAL
15286: IFFALSE 15296
// sLack := true ;
15288: LD_ADDR_EXP 75
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 19 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 19
15303: EQUAL
15304: IFFALSE 15314
// sTank := true ;
15306: LD_ADDR_EXP 77
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 20 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 20
15321: EQUAL
15322: IFFALSE 15332
// sRemote := true ;
15324: LD_ADDR_EXP 78
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 21 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 21
15339: EQUAL
15340: IFFALSE 15350
// sPowell := true ;
15342: LD_ADDR_EXP 79
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 22 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 22
15357: EQUAL
15358: IFFALSE 15368
// sTeleport := true ;
15360: LD_ADDR_EXP 82
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 23 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 23
15375: EQUAL
15376: IFFALSE 15386
// sOilTower := true ;
15378: LD_ADDR_EXP 84
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 24 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 24
15393: EQUAL
15394: IFFALSE 15404
// sShovel := true ;
15396: LD_ADDR_EXP 85
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 25 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 25
15411: EQUAL
15412: IFFALSE 15422
// sSheik := true ;
15414: LD_ADDR_EXP 86
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 26 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 26
15429: EQUAL
15430: IFFALSE 15440
// sEarthquake := true ;
15432: LD_ADDR_EXP 88
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 27 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 27
15447: EQUAL
15448: IFFALSE 15458
// sAI := true ;
15450: LD_ADDR_EXP 89
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 28 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 28
15465: EQUAL
15466: IFFALSE 15476
// sCargo := true ;
15468: LD_ADDR_EXP 92
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 29 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 29
15483: EQUAL
15484: IFFALSE 15494
// sDLaser := true ;
15486: LD_ADDR_EXP 93
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 30 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 30
15501: EQUAL
15502: IFFALSE 15512
// sExchange := true ;
15504: LD_ADDR_EXP 94
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 31 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 31
15519: EQUAL
15520: IFFALSE 15530
// sFac := true ;
15522: LD_ADDR_EXP 95
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 32 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 32
15537: EQUAL
15538: IFFALSE 15548
// sPower := true ;
15540: LD_ADDR_EXP 96
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 33 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 33
15555: EQUAL
15556: IFFALSE 15566
// sRandom := true ;
15558: LD_ADDR_EXP 97
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 34 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 34
15573: EQUAL
15574: IFFALSE 15584
// sShield := true ;
15576: LD_ADDR_EXP 98
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 35 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 35
15591: EQUAL
15592: IFFALSE 15602
// sTime := true ;
15594: LD_ADDR_EXP 99
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 36 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 36
15609: EQUAL
15610: IFFALSE 15620
// sTools := true ;
15612: LD_ADDR_EXP 100
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 101 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 101
15627: EQUAL
15628: IFFALSE 15638
// sSold := true ;
15630: LD_ADDR_EXP 65
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 102 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 102
15645: EQUAL
15646: IFFALSE 15656
// sDiff := true ;
15648: LD_ADDR_EXP 66
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 103 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 103
15663: EQUAL
15664: IFFALSE 15674
// sFog := true ;
15666: LD_ADDR_EXP 69
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 104 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 104
15681: EQUAL
15682: IFFALSE 15692
// sReset := true ;
15684: LD_ADDR_EXP 70
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 105 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 105
15699: EQUAL
15700: IFFALSE 15710
// sSun := true ;
15702: LD_ADDR_EXP 71
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 106 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 106
15717: EQUAL
15718: IFFALSE 15728
// sTiger := true ;
15720: LD_ADDR_EXP 67
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 107 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 107
15735: EQUAL
15736: IFFALSE 15746
// sBomb := true ;
15738: LD_ADDR_EXP 68
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 108 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 108
15753: EQUAL
15754: IFFALSE 15764
// sWound := true ;
15756: LD_ADDR_EXP 76
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 109 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 109
15771: EQUAL
15772: IFFALSE 15782
// sBetray := true ;
15774: LD_ADDR_EXP 80
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 110 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 110
15789: EQUAL
15790: IFFALSE 15800
// sContamin := true ;
15792: LD_ADDR_EXP 81
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 111 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 111
15807: EQUAL
15808: IFFALSE 15818
// sOil := true ;
15810: LD_ADDR_EXP 83
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 112 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 112
15825: EQUAL
15826: IFFALSE 15836
// sStu := true ;
15828: LD_ADDR_EXP 87
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 113 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 113
15843: EQUAL
15844: IFFALSE 15854
// sBazooka := true ;
15846: LD_ADDR_EXP 90
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 114 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 114
15861: EQUAL
15862: IFFALSE 15872
// sMortar := true ;
15864: LD_ADDR_EXP 91
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 115 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 115
15879: EQUAL
15880: IFFALSE 15890
// sRanger := true ;
15882: LD_ADDR_EXP 101
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// end ; if p2 = 101 then
15890: LD_VAR 0 2
15894: PUSH
15895: LD_INT 101
15897: EQUAL
15898: IFFALSE 16026
// begin case p3 of 1 :
15900: LD_VAR 0 3
15904: PUSH
15905: LD_INT 1
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15920
15913: POP
// hHackUnlimitedResources ; 2 :
15914: CALL 27061 0 0
15918: GO 16026
15920: LD_INT 2
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15928
15926: GO 15935
15928: POP
// hHackSetLevel10 ; 3 :
15929: CALL 27194 0 0
15933: GO 16026
15935: LD_INT 3
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15950
15943: POP
// hHackSetLevel10YourUnits ; 4 :
15944: CALL 27279 0 0
15948: GO 16026
15950: LD_INT 4
15952: DOUBLE
15953: EQUAL
15954: IFTRUE 15958
15956: GO 15965
15958: POP
// hHackInvincible ; 5 :
15959: CALL 27727 0 0
15963: GO 16026
15965: LD_INT 5
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15973
15971: GO 15980
15973: POP
// hHackInvisible ; 6 :
15974: CALL 27838 0 0
15978: GO 16026
15980: LD_INT 6
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 15995
15988: POP
// hHackChangeYourSide ; 7 :
15989: CALL 27895 0 0
15993: GO 16026
15995: LD_INT 7
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16010
16003: POP
// hHackChangeUnitSide ; 8 :
16004: CALL 27937 0 0
16008: GO 16026
16010: LD_INT 8
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16025
16018: POP
// hHackFog ; end ;
16019: CALL 28038 0 0
16023: GO 16026
16025: POP
// end ; end ;
16026: PPOPN 6
16028: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16029: GO 16031
16031: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16032: LD_STRING initStreamRollete();
16034: PPUSH
16035: CALL_OW 559
// InitStreamMode ;
16039: CALL 16048 0 0
// DefineStreamItems ( ) ;
16043: CALL 16488 0 0
// end ;
16047: END
// function InitStreamMode ; begin
16048: LD_INT 0
16050: PPUSH
// streamModeActive := false ;
16051: LD_ADDR_EXP 48
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// normalCounter := 36 ;
16059: LD_ADDR_EXP 49
16063: PUSH
16064: LD_INT 36
16066: ST_TO_ADDR
// hardcoreCounter := 16 ;
16067: LD_ADDR_EXP 50
16071: PUSH
16072: LD_INT 16
16074: ST_TO_ADDR
// sRocket := false ;
16075: LD_ADDR_EXP 53
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// sSpeed := false ;
16083: LD_ADDR_EXP 52
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// sEngine := false ;
16091: LD_ADDR_EXP 54
16095: PUSH
16096: LD_INT 0
16098: ST_TO_ADDR
// sSpec := false ;
16099: LD_ADDR_EXP 51
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// sLevel := false ;
16107: LD_ADDR_EXP 55
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// sArmoury := false ;
16115: LD_ADDR_EXP 56
16119: PUSH
16120: LD_INT 0
16122: ST_TO_ADDR
// sRadar := false ;
16123: LD_ADDR_EXP 57
16127: PUSH
16128: LD_INT 0
16130: ST_TO_ADDR
// sBunker := false ;
16131: LD_ADDR_EXP 58
16135: PUSH
16136: LD_INT 0
16138: ST_TO_ADDR
// sHack := false ;
16139: LD_ADDR_EXP 59
16143: PUSH
16144: LD_INT 0
16146: ST_TO_ADDR
// sFire := false ;
16147: LD_ADDR_EXP 60
16151: PUSH
16152: LD_INT 0
16154: ST_TO_ADDR
// sRefresh := false ;
16155: LD_ADDR_EXP 61
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// sExp := false ;
16163: LD_ADDR_EXP 62
16167: PUSH
16168: LD_INT 0
16170: ST_TO_ADDR
// sDepot := false ;
16171: LD_ADDR_EXP 63
16175: PUSH
16176: LD_INT 0
16178: ST_TO_ADDR
// sFlag := false ;
16179: LD_ADDR_EXP 64
16183: PUSH
16184: LD_INT 0
16186: ST_TO_ADDR
// sKamikadze := false ;
16187: LD_ADDR_EXP 72
16191: PUSH
16192: LD_INT 0
16194: ST_TO_ADDR
// sTroll := false ;
16195: LD_ADDR_EXP 73
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// sSlow := false ;
16203: LD_ADDR_EXP 74
16207: PUSH
16208: LD_INT 0
16210: ST_TO_ADDR
// sLack := false ;
16211: LD_ADDR_EXP 75
16215: PUSH
16216: LD_INT 0
16218: ST_TO_ADDR
// sTank := false ;
16219: LD_ADDR_EXP 77
16223: PUSH
16224: LD_INT 0
16226: ST_TO_ADDR
// sRemote := false ;
16227: LD_ADDR_EXP 78
16231: PUSH
16232: LD_INT 0
16234: ST_TO_ADDR
// sPowell := false ;
16235: LD_ADDR_EXP 79
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// sTeleport := false ;
16243: LD_ADDR_EXP 82
16247: PUSH
16248: LD_INT 0
16250: ST_TO_ADDR
// sOilTower := false ;
16251: LD_ADDR_EXP 84
16255: PUSH
16256: LD_INT 0
16258: ST_TO_ADDR
// sShovel := false ;
16259: LD_ADDR_EXP 85
16263: PUSH
16264: LD_INT 0
16266: ST_TO_ADDR
// sSheik := false ;
16267: LD_ADDR_EXP 86
16271: PUSH
16272: LD_INT 0
16274: ST_TO_ADDR
// sEarthquake := false ;
16275: LD_ADDR_EXP 88
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// sAI := false ;
16283: LD_ADDR_EXP 89
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// sCargo := false ;
16291: LD_ADDR_EXP 92
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// sDLaser := false ;
16299: LD_ADDR_EXP 93
16303: PUSH
16304: LD_INT 0
16306: ST_TO_ADDR
// sExchange := false ;
16307: LD_ADDR_EXP 94
16311: PUSH
16312: LD_INT 0
16314: ST_TO_ADDR
// sFac := false ;
16315: LD_ADDR_EXP 95
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// sPower := false ;
16323: LD_ADDR_EXP 96
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// sRandom := false ;
16331: LD_ADDR_EXP 97
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// sShield := false ;
16339: LD_ADDR_EXP 98
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// sTime := false ;
16347: LD_ADDR_EXP 99
16351: PUSH
16352: LD_INT 0
16354: ST_TO_ADDR
// sTools := false ;
16355: LD_ADDR_EXP 100
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// sSold := false ;
16363: LD_ADDR_EXP 65
16367: PUSH
16368: LD_INT 0
16370: ST_TO_ADDR
// sDiff := false ;
16371: LD_ADDR_EXP 66
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// sFog := false ;
16379: LD_ADDR_EXP 69
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// sReset := false ;
16387: LD_ADDR_EXP 70
16391: PUSH
16392: LD_INT 0
16394: ST_TO_ADDR
// sSun := false ;
16395: LD_ADDR_EXP 71
16399: PUSH
16400: LD_INT 0
16402: ST_TO_ADDR
// sTiger := false ;
16403: LD_ADDR_EXP 67
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// sBomb := false ;
16411: LD_ADDR_EXP 68
16415: PUSH
16416: LD_INT 0
16418: ST_TO_ADDR
// sWound := false ;
16419: LD_ADDR_EXP 76
16423: PUSH
16424: LD_INT 0
16426: ST_TO_ADDR
// sBetray := false ;
16427: LD_ADDR_EXP 80
16431: PUSH
16432: LD_INT 0
16434: ST_TO_ADDR
// sContamin := false ;
16435: LD_ADDR_EXP 81
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// sOil := false ;
16443: LD_ADDR_EXP 83
16447: PUSH
16448: LD_INT 0
16450: ST_TO_ADDR
// sStu := false ;
16451: LD_ADDR_EXP 87
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// sBazooka := false ;
16459: LD_ADDR_EXP 90
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// sMortar := false ;
16467: LD_ADDR_EXP 91
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// sRanger := false ;
16475: LD_ADDR_EXP 101
16479: PUSH
16480: LD_INT 0
16482: ST_TO_ADDR
// end ;
16483: LD_VAR 0 1
16487: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
// result := [ ] ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: EMPTY
16501: ST_TO_ADDR
// if campaign_id = 1 then
16502: LD_OWVAR 69
16506: PUSH
16507: LD_INT 1
16509: EQUAL
16510: IFFALSE 19448
// begin case mission_number of 1 :
16512: LD_OWVAR 70
16516: PUSH
16517: LD_INT 1
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16589
16525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16526: LD_ADDR_VAR 0 1
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 11
16539: PUSH
16540: LD_INT 12
16542: PUSH
16543: LD_INT 15
16545: PUSH
16546: LD_INT 16
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 23
16554: PUSH
16555: LD_INT 26
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 101
16571: PUSH
16572: LD_INT 102
16574: PUSH
16575: LD_INT 106
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: ST_TO_ADDR
16587: GO 19446
16589: LD_INT 2
16591: DOUBLE
16592: EQUAL
16593: IFTRUE 16597
16595: GO 16669
16597: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_INT 2
16605: PUSH
16606: LD_INT 4
16608: PUSH
16609: LD_INT 11
16611: PUSH
16612: LD_INT 12
16614: PUSH
16615: LD_INT 15
16617: PUSH
16618: LD_INT 16
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_INT 23
16626: PUSH
16627: LD_INT 26
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 101
16643: PUSH
16644: LD_INT 102
16646: PUSH
16647: LD_INT 105
16649: PUSH
16650: LD_INT 106
16652: PUSH
16653: LD_INT 108
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: ST_TO_ADDR
16667: GO 19446
16669: LD_INT 3
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16753
16677: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16678: LD_ADDR_VAR 0 1
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 4
16688: PUSH
16689: LD_INT 5
16691: PUSH
16692: LD_INT 11
16694: PUSH
16695: LD_INT 12
16697: PUSH
16698: LD_INT 15
16700: PUSH
16701: LD_INT 16
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 26
16709: PUSH
16710: LD_INT 36
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 101
16727: PUSH
16728: LD_INT 102
16730: PUSH
16731: LD_INT 105
16733: PUSH
16734: LD_INT 106
16736: PUSH
16737: LD_INT 108
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: ST_TO_ADDR
16751: GO 19446
16753: LD_INT 4
16755: DOUBLE
16756: EQUAL
16757: IFTRUE 16761
16759: GO 16845
16761: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: LD_INT 4
16772: PUSH
16773: LD_INT 5
16775: PUSH
16776: LD_INT 8
16778: PUSH
16779: LD_INT 11
16781: PUSH
16782: LD_INT 12
16784: PUSH
16785: LD_INT 15
16787: PUSH
16788: LD_INT 16
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_INT 23
16796: PUSH
16797: LD_INT 26
16799: PUSH
16800: LD_INT 36
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 101
16819: PUSH
16820: LD_INT 102
16822: PUSH
16823: LD_INT 105
16825: PUSH
16826: LD_INT 106
16828: PUSH
16829: LD_INT 108
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: ST_TO_ADDR
16843: GO 19446
16845: LD_INT 5
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16953
16853: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 4
16864: PUSH
16865: LD_INT 5
16867: PUSH
16868: LD_INT 6
16870: PUSH
16871: LD_INT 8
16873: PUSH
16874: LD_INT 11
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 15
16882: PUSH
16883: LD_INT 16
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_INT 23
16891: PUSH
16892: LD_INT 25
16894: PUSH
16895: LD_INT 26
16897: PUSH
16898: LD_INT 36
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 101
16919: PUSH
16920: LD_INT 102
16922: PUSH
16923: LD_INT 105
16925: PUSH
16926: LD_INT 106
16928: PUSH
16929: LD_INT 108
16931: PUSH
16932: LD_INT 109
16934: PUSH
16935: LD_INT 112
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
16951: GO 19446
16953: LD_INT 6
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17081
16961: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16962: LD_ADDR_VAR 0 1
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 4
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: LD_INT 6
16978: PUSH
16979: LD_INT 8
16981: PUSH
16982: LD_INT 11
16984: PUSH
16985: LD_INT 12
16987: PUSH
16988: LD_INT 15
16990: PUSH
16991: LD_INT 16
16993: PUSH
16994: LD_INT 20
16996: PUSH
16997: LD_INT 21
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_INT 23
17005: PUSH
17006: LD_INT 25
17008: PUSH
17009: LD_INT 26
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 31
17017: PUSH
17018: LD_INT 32
17020: PUSH
17021: LD_INT 36
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 101
17047: PUSH
17048: LD_INT 102
17050: PUSH
17051: LD_INT 105
17053: PUSH
17054: LD_INT 106
17056: PUSH
17057: LD_INT 108
17059: PUSH
17060: LD_INT 109
17062: PUSH
17063: LD_INT 112
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: ST_TO_ADDR
17079: GO 19446
17081: LD_INT 7
17083: DOUBLE
17084: EQUAL
17085: IFTRUE 17089
17087: GO 17189
17089: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17090: LD_ADDR_VAR 0 1
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 4
17100: PUSH
17101: LD_INT 5
17103: PUSH
17104: LD_INT 7
17106: PUSH
17107: LD_INT 11
17109: PUSH
17110: LD_INT 12
17112: PUSH
17113: LD_INT 15
17115: PUSH
17116: LD_INT 16
17118: PUSH
17119: LD_INT 20
17121: PUSH
17122: LD_INT 21
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 23
17130: PUSH
17131: LD_INT 25
17133: PUSH
17134: LD_INT 26
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 101
17155: PUSH
17156: LD_INT 102
17158: PUSH
17159: LD_INT 103
17161: PUSH
17162: LD_INT 105
17164: PUSH
17165: LD_INT 106
17167: PUSH
17168: LD_INT 108
17170: PUSH
17171: LD_INT 112
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: ST_TO_ADDR
17187: GO 19446
17189: LD_INT 8
17191: DOUBLE
17192: EQUAL
17193: IFTRUE 17197
17195: GO 17325
17197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 4
17208: PUSH
17209: LD_INT 5
17211: PUSH
17212: LD_INT 6
17214: PUSH
17215: LD_INT 7
17217: PUSH
17218: LD_INT 8
17220: PUSH
17221: LD_INT 11
17223: PUSH
17224: LD_INT 12
17226: PUSH
17227: LD_INT 15
17229: PUSH
17230: LD_INT 16
17232: PUSH
17233: LD_INT 20
17235: PUSH
17236: LD_INT 21
17238: PUSH
17239: LD_INT 22
17241: PUSH
17242: LD_INT 23
17244: PUSH
17245: LD_INT 25
17247: PUSH
17248: LD_INT 26
17250: PUSH
17251: LD_INT 30
17253: PUSH
17254: LD_INT 31
17256: PUSH
17257: LD_INT 32
17259: PUSH
17260: LD_INT 36
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 101
17287: PUSH
17288: LD_INT 102
17290: PUSH
17291: LD_INT 103
17293: PUSH
17294: LD_INT 105
17296: PUSH
17297: LD_INT 106
17299: PUSH
17300: LD_INT 108
17302: PUSH
17303: LD_INT 109
17305: PUSH
17306: LD_INT 112
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: ST_TO_ADDR
17323: GO 19446
17325: LD_INT 9
17327: DOUBLE
17328: EQUAL
17329: IFTRUE 17333
17331: GO 17469
17333: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17334: LD_ADDR_VAR 0 1
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 4
17344: PUSH
17345: LD_INT 5
17347: PUSH
17348: LD_INT 6
17350: PUSH
17351: LD_INT 7
17353: PUSH
17354: LD_INT 8
17356: PUSH
17357: LD_INT 11
17359: PUSH
17360: LD_INT 12
17362: PUSH
17363: LD_INT 15
17365: PUSH
17366: LD_INT 16
17368: PUSH
17369: LD_INT 20
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 22
17377: PUSH
17378: LD_INT 23
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 26
17386: PUSH
17387: LD_INT 28
17389: PUSH
17390: LD_INT 30
17392: PUSH
17393: LD_INT 31
17395: PUSH
17396: LD_INT 32
17398: PUSH
17399: LD_INT 36
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 101
17427: PUSH
17428: LD_INT 102
17430: PUSH
17431: LD_INT 103
17433: PUSH
17434: LD_INT 105
17436: PUSH
17437: LD_INT 106
17439: PUSH
17440: LD_INT 108
17442: PUSH
17443: LD_INT 109
17445: PUSH
17446: LD_INT 112
17448: PUSH
17449: LD_INT 114
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: ST_TO_ADDR
17467: GO 19446
17469: LD_INT 10
17471: DOUBLE
17472: EQUAL
17473: IFTRUE 17477
17475: GO 17661
17477: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 4
17488: PUSH
17489: LD_INT 5
17491: PUSH
17492: LD_INT 6
17494: PUSH
17495: LD_INT 7
17497: PUSH
17498: LD_INT 8
17500: PUSH
17501: LD_INT 9
17503: PUSH
17504: LD_INT 10
17506: PUSH
17507: LD_INT 11
17509: PUSH
17510: LD_INT 12
17512: PUSH
17513: LD_INT 13
17515: PUSH
17516: LD_INT 14
17518: PUSH
17519: LD_INT 15
17521: PUSH
17522: LD_INT 16
17524: PUSH
17525: LD_INT 17
17527: PUSH
17528: LD_INT 18
17530: PUSH
17531: LD_INT 19
17533: PUSH
17534: LD_INT 20
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 22
17542: PUSH
17543: LD_INT 23
17545: PUSH
17546: LD_INT 24
17548: PUSH
17549: LD_INT 25
17551: PUSH
17552: LD_INT 26
17554: PUSH
17555: LD_INT 28
17557: PUSH
17558: LD_INT 30
17560: PUSH
17561: LD_INT 31
17563: PUSH
17564: LD_INT 32
17566: PUSH
17567: LD_INT 36
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 101
17603: PUSH
17604: LD_INT 102
17606: PUSH
17607: LD_INT 103
17609: PUSH
17610: LD_INT 104
17612: PUSH
17613: LD_INT 105
17615: PUSH
17616: LD_INT 106
17618: PUSH
17619: LD_INT 107
17621: PUSH
17622: LD_INT 108
17624: PUSH
17625: LD_INT 109
17627: PUSH
17628: LD_INT 110
17630: PUSH
17631: LD_INT 111
17633: PUSH
17634: LD_INT 112
17636: PUSH
17637: LD_INT 114
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: ST_TO_ADDR
17659: GO 19446
17661: LD_INT 11
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17861
17669: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 4
17683: PUSH
17684: LD_INT 5
17686: PUSH
17687: LD_INT 6
17689: PUSH
17690: LD_INT 7
17692: PUSH
17693: LD_INT 8
17695: PUSH
17696: LD_INT 9
17698: PUSH
17699: LD_INT 10
17701: PUSH
17702: LD_INT 11
17704: PUSH
17705: LD_INT 12
17707: PUSH
17708: LD_INT 13
17710: PUSH
17711: LD_INT 14
17713: PUSH
17714: LD_INT 15
17716: PUSH
17717: LD_INT 16
17719: PUSH
17720: LD_INT 17
17722: PUSH
17723: LD_INT 18
17725: PUSH
17726: LD_INT 19
17728: PUSH
17729: LD_INT 20
17731: PUSH
17732: LD_INT 21
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_INT 23
17740: PUSH
17741: LD_INT 24
17743: PUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 26
17749: PUSH
17750: LD_INT 28
17752: PUSH
17753: LD_INT 30
17755: PUSH
17756: LD_INT 31
17758: PUSH
17759: LD_INT 32
17761: PUSH
17762: LD_INT 34
17764: PUSH
17765: LD_INT 36
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 101
17803: PUSH
17804: LD_INT 102
17806: PUSH
17807: LD_INT 103
17809: PUSH
17810: LD_INT 104
17812: PUSH
17813: LD_INT 105
17815: PUSH
17816: LD_INT 106
17818: PUSH
17819: LD_INT 107
17821: PUSH
17822: LD_INT 108
17824: PUSH
17825: LD_INT 109
17827: PUSH
17828: LD_INT 110
17830: PUSH
17831: LD_INT 111
17833: PUSH
17834: LD_INT 112
17836: PUSH
17837: LD_INT 114
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: ST_TO_ADDR
17859: GO 19446
17861: LD_INT 12
17863: DOUBLE
17864: EQUAL
17865: IFTRUE 17869
17867: GO 18077
17869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17870: LD_ADDR_VAR 0 1
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 3
17883: PUSH
17884: LD_INT 4
17886: PUSH
17887: LD_INT 5
17889: PUSH
17890: LD_INT 6
17892: PUSH
17893: LD_INT 7
17895: PUSH
17896: LD_INT 8
17898: PUSH
17899: LD_INT 9
17901: PUSH
17902: LD_INT 10
17904: PUSH
17905: LD_INT 11
17907: PUSH
17908: LD_INT 12
17910: PUSH
17911: LD_INT 13
17913: PUSH
17914: LD_INT 14
17916: PUSH
17917: LD_INT 15
17919: PUSH
17920: LD_INT 16
17922: PUSH
17923: LD_INT 17
17925: PUSH
17926: LD_INT 18
17928: PUSH
17929: LD_INT 19
17931: PUSH
17932: LD_INT 20
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 22
17940: PUSH
17941: LD_INT 23
17943: PUSH
17944: LD_INT 24
17946: PUSH
17947: LD_INT 25
17949: PUSH
17950: LD_INT 26
17952: PUSH
17953: LD_INT 27
17955: PUSH
17956: LD_INT 28
17958: PUSH
17959: LD_INT 30
17961: PUSH
17962: LD_INT 31
17964: PUSH
17965: LD_INT 32
17967: PUSH
17968: LD_INT 33
17970: PUSH
17971: LD_INT 34
17973: PUSH
17974: LD_INT 36
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 101
18015: PUSH
18016: LD_INT 102
18018: PUSH
18019: LD_INT 103
18021: PUSH
18022: LD_INT 104
18024: PUSH
18025: LD_INT 105
18027: PUSH
18028: LD_INT 106
18030: PUSH
18031: LD_INT 107
18033: PUSH
18034: LD_INT 108
18036: PUSH
18037: LD_INT 109
18039: PUSH
18040: LD_INT 110
18042: PUSH
18043: LD_INT 111
18045: PUSH
18046: LD_INT 112
18048: PUSH
18049: LD_INT 113
18051: PUSH
18052: LD_INT 114
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: ST_TO_ADDR
18075: GO 19446
18077: LD_INT 13
18079: DOUBLE
18080: EQUAL
18081: IFTRUE 18085
18083: GO 18281
18085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18086: LD_ADDR_VAR 0 1
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: LD_INT 2
18096: PUSH
18097: LD_INT 3
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: LD_INT 5
18105: PUSH
18106: LD_INT 8
18108: PUSH
18109: LD_INT 9
18111: PUSH
18112: LD_INT 10
18114: PUSH
18115: LD_INT 11
18117: PUSH
18118: LD_INT 12
18120: PUSH
18121: LD_INT 14
18123: PUSH
18124: LD_INT 15
18126: PUSH
18127: LD_INT 16
18129: PUSH
18130: LD_INT 17
18132: PUSH
18133: LD_INT 18
18135: PUSH
18136: LD_INT 19
18138: PUSH
18139: LD_INT 20
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_INT 23
18150: PUSH
18151: LD_INT 24
18153: PUSH
18154: LD_INT 25
18156: PUSH
18157: LD_INT 26
18159: PUSH
18160: LD_INT 27
18162: PUSH
18163: LD_INT 28
18165: PUSH
18166: LD_INT 30
18168: PUSH
18169: LD_INT 31
18171: PUSH
18172: LD_INT 32
18174: PUSH
18175: LD_INT 33
18177: PUSH
18178: LD_INT 34
18180: PUSH
18181: LD_INT 36
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 101
18219: PUSH
18220: LD_INT 102
18222: PUSH
18223: LD_INT 103
18225: PUSH
18226: LD_INT 104
18228: PUSH
18229: LD_INT 105
18231: PUSH
18232: LD_INT 106
18234: PUSH
18235: LD_INT 107
18237: PUSH
18238: LD_INT 108
18240: PUSH
18241: LD_INT 109
18243: PUSH
18244: LD_INT 110
18246: PUSH
18247: LD_INT 111
18249: PUSH
18250: LD_INT 112
18252: PUSH
18253: LD_INT 113
18255: PUSH
18256: LD_INT 114
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: ST_TO_ADDR
18279: GO 19446
18281: LD_INT 14
18283: DOUBLE
18284: EQUAL
18285: IFTRUE 18289
18287: GO 18501
18289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18290: LD_ADDR_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: LD_INT 4
18306: PUSH
18307: LD_INT 5
18309: PUSH
18310: LD_INT 6
18312: PUSH
18313: LD_INT 7
18315: PUSH
18316: LD_INT 8
18318: PUSH
18319: LD_INT 9
18321: PUSH
18322: LD_INT 10
18324: PUSH
18325: LD_INT 11
18327: PUSH
18328: LD_INT 12
18330: PUSH
18331: LD_INT 13
18333: PUSH
18334: LD_INT 14
18336: PUSH
18337: LD_INT 15
18339: PUSH
18340: LD_INT 16
18342: PUSH
18343: LD_INT 17
18345: PUSH
18346: LD_INT 18
18348: PUSH
18349: LD_INT 19
18351: PUSH
18352: LD_INT 20
18354: PUSH
18355: LD_INT 21
18357: PUSH
18358: LD_INT 22
18360: PUSH
18361: LD_INT 23
18363: PUSH
18364: LD_INT 24
18366: PUSH
18367: LD_INT 25
18369: PUSH
18370: LD_INT 26
18372: PUSH
18373: LD_INT 27
18375: PUSH
18376: LD_INT 28
18378: PUSH
18379: LD_INT 29
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 31
18387: PUSH
18388: LD_INT 32
18390: PUSH
18391: LD_INT 33
18393: PUSH
18394: LD_INT 34
18396: PUSH
18397: LD_INT 36
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 101
18439: PUSH
18440: LD_INT 102
18442: PUSH
18443: LD_INT 103
18445: PUSH
18446: LD_INT 104
18448: PUSH
18449: LD_INT 105
18451: PUSH
18452: LD_INT 106
18454: PUSH
18455: LD_INT 107
18457: PUSH
18458: LD_INT 108
18460: PUSH
18461: LD_INT 109
18463: PUSH
18464: LD_INT 110
18466: PUSH
18467: LD_INT 111
18469: PUSH
18470: LD_INT 112
18472: PUSH
18473: LD_INT 113
18475: PUSH
18476: LD_INT 114
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: ST_TO_ADDR
18499: GO 19446
18501: LD_INT 15
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18721
18509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18510: LD_ADDR_VAR 0 1
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 2
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: LD_INT 4
18526: PUSH
18527: LD_INT 5
18529: PUSH
18530: LD_INT 6
18532: PUSH
18533: LD_INT 7
18535: PUSH
18536: LD_INT 8
18538: PUSH
18539: LD_INT 9
18541: PUSH
18542: LD_INT 10
18544: PUSH
18545: LD_INT 11
18547: PUSH
18548: LD_INT 12
18550: PUSH
18551: LD_INT 13
18553: PUSH
18554: LD_INT 14
18556: PUSH
18557: LD_INT 15
18559: PUSH
18560: LD_INT 16
18562: PUSH
18563: LD_INT 17
18565: PUSH
18566: LD_INT 18
18568: PUSH
18569: LD_INT 19
18571: PUSH
18572: LD_INT 20
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_INT 23
18583: PUSH
18584: LD_INT 24
18586: PUSH
18587: LD_INT 25
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: LD_INT 27
18595: PUSH
18596: LD_INT 28
18598: PUSH
18599: LD_INT 29
18601: PUSH
18602: LD_INT 30
18604: PUSH
18605: LD_INT 31
18607: PUSH
18608: LD_INT 32
18610: PUSH
18611: LD_INT 33
18613: PUSH
18614: LD_INT 34
18616: PUSH
18617: LD_INT 36
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 102
18662: PUSH
18663: LD_INT 103
18665: PUSH
18666: LD_INT 104
18668: PUSH
18669: LD_INT 105
18671: PUSH
18672: LD_INT 106
18674: PUSH
18675: LD_INT 107
18677: PUSH
18678: LD_INT 108
18680: PUSH
18681: LD_INT 109
18683: PUSH
18684: LD_INT 110
18686: PUSH
18687: LD_INT 111
18689: PUSH
18690: LD_INT 112
18692: PUSH
18693: LD_INT 113
18695: PUSH
18696: LD_INT 114
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: ST_TO_ADDR
18719: GO 19446
18721: LD_INT 16
18723: DOUBLE
18724: EQUAL
18725: IFTRUE 18729
18727: GO 18853
18729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: LD_INT 4
18740: PUSH
18741: LD_INT 5
18743: PUSH
18744: LD_INT 7
18746: PUSH
18747: LD_INT 11
18749: PUSH
18750: LD_INT 12
18752: PUSH
18753: LD_INT 15
18755: PUSH
18756: LD_INT 16
18758: PUSH
18759: LD_INT 20
18761: PUSH
18762: LD_INT 21
18764: PUSH
18765: LD_INT 22
18767: PUSH
18768: LD_INT 23
18770: PUSH
18771: LD_INT 25
18773: PUSH
18774: LD_INT 26
18776: PUSH
18777: LD_INT 30
18779: PUSH
18780: LD_INT 31
18782: PUSH
18783: LD_INT 32
18785: PUSH
18786: LD_INT 33
18788: PUSH
18789: LD_INT 34
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 101
18815: PUSH
18816: LD_INT 102
18818: PUSH
18819: LD_INT 103
18821: PUSH
18822: LD_INT 106
18824: PUSH
18825: LD_INT 108
18827: PUSH
18828: LD_INT 112
18830: PUSH
18831: LD_INT 113
18833: PUSH
18834: LD_INT 114
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: ST_TO_ADDR
18851: GO 19446
18853: LD_INT 17
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 19073
18861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18862: LD_ADDR_VAR 0 1
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 3
18875: PUSH
18876: LD_INT 4
18878: PUSH
18879: LD_INT 5
18881: PUSH
18882: LD_INT 6
18884: PUSH
18885: LD_INT 7
18887: PUSH
18888: LD_INT 8
18890: PUSH
18891: LD_INT 9
18893: PUSH
18894: LD_INT 10
18896: PUSH
18897: LD_INT 11
18899: PUSH
18900: LD_INT 12
18902: PUSH
18903: LD_INT 13
18905: PUSH
18906: LD_INT 14
18908: PUSH
18909: LD_INT 15
18911: PUSH
18912: LD_INT 16
18914: PUSH
18915: LD_INT 17
18917: PUSH
18918: LD_INT 18
18920: PUSH
18921: LD_INT 19
18923: PUSH
18924: LD_INT 20
18926: PUSH
18927: LD_INT 21
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 23
18935: PUSH
18936: LD_INT 24
18938: PUSH
18939: LD_INT 25
18941: PUSH
18942: LD_INT 26
18944: PUSH
18945: LD_INT 27
18947: PUSH
18948: LD_INT 28
18950: PUSH
18951: LD_INT 29
18953: PUSH
18954: LD_INT 30
18956: PUSH
18957: LD_INT 31
18959: PUSH
18960: LD_INT 32
18962: PUSH
18963: LD_INT 33
18965: PUSH
18966: LD_INT 34
18968: PUSH
18969: LD_INT 36
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 101
19011: PUSH
19012: LD_INT 102
19014: PUSH
19015: LD_INT 103
19017: PUSH
19018: LD_INT 104
19020: PUSH
19021: LD_INT 105
19023: PUSH
19024: LD_INT 106
19026: PUSH
19027: LD_INT 107
19029: PUSH
19030: LD_INT 108
19032: PUSH
19033: LD_INT 109
19035: PUSH
19036: LD_INT 110
19038: PUSH
19039: LD_INT 111
19041: PUSH
19042: LD_INT 112
19044: PUSH
19045: LD_INT 113
19047: PUSH
19048: LD_INT 114
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: ST_TO_ADDR
19071: GO 19446
19073: LD_INT 18
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19217
19081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 4
19092: PUSH
19093: LD_INT 5
19095: PUSH
19096: LD_INT 7
19098: PUSH
19099: LD_INT 11
19101: PUSH
19102: LD_INT 12
19104: PUSH
19105: LD_INT 15
19107: PUSH
19108: LD_INT 16
19110: PUSH
19111: LD_INT 20
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 22
19119: PUSH
19120: LD_INT 23
19122: PUSH
19123: LD_INT 25
19125: PUSH
19126: LD_INT 26
19128: PUSH
19129: LD_INT 30
19131: PUSH
19132: LD_INT 31
19134: PUSH
19135: LD_INT 32
19137: PUSH
19138: LD_INT 33
19140: PUSH
19141: LD_INT 34
19143: PUSH
19144: LD_INT 35
19146: PUSH
19147: LD_INT 36
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 101
19175: PUSH
19176: LD_INT 102
19178: PUSH
19179: LD_INT 103
19181: PUSH
19182: LD_INT 106
19184: PUSH
19185: LD_INT 108
19187: PUSH
19188: LD_INT 112
19190: PUSH
19191: LD_INT 113
19193: PUSH
19194: LD_INT 114
19196: PUSH
19197: LD_INT 115
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: ST_TO_ADDR
19215: GO 19446
19217: LD_INT 19
19219: DOUBLE
19220: EQUAL
19221: IFTRUE 19225
19223: GO 19445
19225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19226: LD_ADDR_VAR 0 1
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 4
19242: PUSH
19243: LD_INT 5
19245: PUSH
19246: LD_INT 6
19248: PUSH
19249: LD_INT 7
19251: PUSH
19252: LD_INT 8
19254: PUSH
19255: LD_INT 9
19257: PUSH
19258: LD_INT 10
19260: PUSH
19261: LD_INT 11
19263: PUSH
19264: LD_INT 12
19266: PUSH
19267: LD_INT 13
19269: PUSH
19270: LD_INT 14
19272: PUSH
19273: LD_INT 15
19275: PUSH
19276: LD_INT 16
19278: PUSH
19279: LD_INT 17
19281: PUSH
19282: LD_INT 18
19284: PUSH
19285: LD_INT 19
19287: PUSH
19288: LD_INT 20
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 22
19296: PUSH
19297: LD_INT 23
19299: PUSH
19300: LD_INT 24
19302: PUSH
19303: LD_INT 25
19305: PUSH
19306: LD_INT 26
19308: PUSH
19309: LD_INT 27
19311: PUSH
19312: LD_INT 28
19314: PUSH
19315: LD_INT 29
19317: PUSH
19318: LD_INT 30
19320: PUSH
19321: LD_INT 31
19323: PUSH
19324: LD_INT 32
19326: PUSH
19327: LD_INT 33
19329: PUSH
19330: LD_INT 34
19332: PUSH
19333: LD_INT 35
19335: PUSH
19336: LD_INT 36
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 101
19379: PUSH
19380: LD_INT 102
19382: PUSH
19383: LD_INT 103
19385: PUSH
19386: LD_INT 104
19388: PUSH
19389: LD_INT 105
19391: PUSH
19392: LD_INT 106
19394: PUSH
19395: LD_INT 107
19397: PUSH
19398: LD_INT 108
19400: PUSH
19401: LD_INT 109
19403: PUSH
19404: LD_INT 110
19406: PUSH
19407: LD_INT 111
19409: PUSH
19410: LD_INT 112
19412: PUSH
19413: LD_INT 113
19415: PUSH
19416: LD_INT 114
19418: PUSH
19419: LD_INT 115
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: ST_TO_ADDR
19443: GO 19446
19445: POP
// end else
19446: GO 19665
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: LD_INT 4
19464: PUSH
19465: LD_INT 5
19467: PUSH
19468: LD_INT 6
19470: PUSH
19471: LD_INT 7
19473: PUSH
19474: LD_INT 8
19476: PUSH
19477: LD_INT 9
19479: PUSH
19480: LD_INT 10
19482: PUSH
19483: LD_INT 11
19485: PUSH
19486: LD_INT 12
19488: PUSH
19489: LD_INT 13
19491: PUSH
19492: LD_INT 14
19494: PUSH
19495: LD_INT 15
19497: PUSH
19498: LD_INT 16
19500: PUSH
19501: LD_INT 17
19503: PUSH
19504: LD_INT 18
19506: PUSH
19507: LD_INT 19
19509: PUSH
19510: LD_INT 20
19512: PUSH
19513: LD_INT 21
19515: PUSH
19516: LD_INT 22
19518: PUSH
19519: LD_INT 23
19521: PUSH
19522: LD_INT 24
19524: PUSH
19525: LD_INT 25
19527: PUSH
19528: LD_INT 26
19530: PUSH
19531: LD_INT 27
19533: PUSH
19534: LD_INT 28
19536: PUSH
19537: LD_INT 29
19539: PUSH
19540: LD_INT 30
19542: PUSH
19543: LD_INT 31
19545: PUSH
19546: LD_INT 32
19548: PUSH
19549: LD_INT 33
19551: PUSH
19552: LD_INT 34
19554: PUSH
19555: LD_INT 35
19557: PUSH
19558: LD_INT 36
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 101
19601: PUSH
19602: LD_INT 102
19604: PUSH
19605: LD_INT 103
19607: PUSH
19608: LD_INT 104
19610: PUSH
19611: LD_INT 105
19613: PUSH
19614: LD_INT 106
19616: PUSH
19617: LD_INT 107
19619: PUSH
19620: LD_INT 108
19622: PUSH
19623: LD_INT 109
19625: PUSH
19626: LD_INT 110
19628: PUSH
19629: LD_INT 111
19631: PUSH
19632: LD_INT 112
19634: PUSH
19635: LD_INT 113
19637: PUSH
19638: LD_INT 114
19640: PUSH
19641: LD_INT 115
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: ST_TO_ADDR
// if result then
19665: LD_VAR 0 1
19669: IFFALSE 19958
// begin normal :=  ;
19671: LD_ADDR_VAR 0 3
19675: PUSH
19676: LD_STRING 
19678: ST_TO_ADDR
// hardcore :=  ;
19679: LD_ADDR_VAR 0 4
19683: PUSH
19684: LD_STRING 
19686: ST_TO_ADDR
// for i = 1 to normalCounter do
19687: LD_ADDR_VAR 0 5
19691: PUSH
19692: DOUBLE
19693: LD_INT 1
19695: DEC
19696: ST_TO_ADDR
19697: LD_EXP 49
19701: PUSH
19702: FOR_TO
19703: IFFALSE 19804
// begin tmp := 0 ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_STRING 0
19712: ST_TO_ADDR
// if result [ 1 ] then
19713: LD_VAR 0 1
19717: PUSH
19718: LD_INT 1
19720: ARRAY
19721: IFFALSE 19786
// if result [ 1 ] [ 1 ] = i then
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 1
19730: ARRAY
19731: PUSH
19732: LD_INT 1
19734: ARRAY
19735: PUSH
19736: LD_VAR 0 5
19740: EQUAL
19741: IFFALSE 19786
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19743: LD_ADDR_VAR 0 1
19747: PUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: LD_INT 1
19755: PPUSH
19756: LD_VAR 0 1
19760: PUSH
19761: LD_INT 1
19763: ARRAY
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 3
19772: PPUSH
19773: CALL_OW 1
19777: ST_TO_ADDR
// tmp := 1 ;
19778: LD_ADDR_VAR 0 2
19782: PUSH
19783: LD_STRING 1
19785: ST_TO_ADDR
// end ; normal := normal & tmp ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_VAR 0 3
19795: PUSH
19796: LD_VAR 0 2
19800: STR
19801: ST_TO_ADDR
// end ;
19802: GO 19702
19804: POP
19805: POP
// for i = 1 to hardcoreCounter do
19806: LD_ADDR_VAR 0 5
19810: PUSH
19811: DOUBLE
19812: LD_INT 1
19814: DEC
19815: ST_TO_ADDR
19816: LD_EXP 50
19820: PUSH
19821: FOR_TO
19822: IFFALSE 19927
// begin tmp := 0 ;
19824: LD_ADDR_VAR 0 2
19828: PUSH
19829: LD_STRING 0
19831: ST_TO_ADDR
// if result [ 2 ] then
19832: LD_VAR 0 1
19836: PUSH
19837: LD_INT 2
19839: ARRAY
19840: IFFALSE 19909
// if result [ 2 ] [ 1 ] = 100 + i then
19842: LD_VAR 0 1
19846: PUSH
19847: LD_INT 2
19849: ARRAY
19850: PUSH
19851: LD_INT 1
19853: ARRAY
19854: PUSH
19855: LD_INT 100
19857: PUSH
19858: LD_VAR 0 5
19862: PLUS
19863: EQUAL
19864: IFFALSE 19909
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19866: LD_ADDR_VAR 0 1
19870: PUSH
19871: LD_VAR 0 1
19875: PPUSH
19876: LD_INT 2
19878: PPUSH
19879: LD_VAR 0 1
19883: PUSH
19884: LD_INT 2
19886: ARRAY
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 3
19895: PPUSH
19896: CALL_OW 1
19900: ST_TO_ADDR
// tmp := 1 ;
19901: LD_ADDR_VAR 0 2
19905: PUSH
19906: LD_STRING 1
19908: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19909: LD_ADDR_VAR 0 4
19913: PUSH
19914: LD_VAR 0 4
19918: PUSH
19919: LD_VAR 0 2
19923: STR
19924: ST_TO_ADDR
// end ;
19925: GO 19821
19927: POP
19928: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19929: LD_STRING getStreamItemsFromMission("
19931: PUSH
19932: LD_VAR 0 3
19936: STR
19937: PUSH
19938: LD_STRING ","
19940: STR
19941: PUSH
19942: LD_VAR 0 4
19946: STR
19947: PUSH
19948: LD_STRING ")
19950: STR
19951: PPUSH
19952: CALL_OW 559
// end else
19956: GO 19965
// ToLua ( getStreamItemsFromMission("","") ) ;
19958: LD_STRING getStreamItemsFromMission("","")
19960: PPUSH
19961: CALL_OW 559
// end ;
19965: LD_VAR 0 1
19969: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19970: LD_EXP 48
19974: PUSH
19975: LD_EXP 53
19979: AND
19980: IFFALSE 20104
19982: GO 19984
19984: DISABLE
19985: LD_INT 0
19987: PPUSH
19988: PPUSH
// begin enable ;
19989: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19990: LD_ADDR_VAR 0 2
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_OWVAR 2
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 34
20012: PUSH
20013: LD_INT 7
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 34
20022: PUSH
20023: LD_INT 45
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 34
20032: PUSH
20033: LD_INT 28
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 34
20042: PUSH
20043: LD_INT 47
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: ST_TO_ADDR
// if not tmp then
20066: LD_VAR 0 2
20070: NOT
20071: IFFALSE 20075
// exit ;
20073: GO 20104
// for i in tmp do
20075: LD_ADDR_VAR 0 1
20079: PUSH
20080: LD_VAR 0 2
20084: PUSH
20085: FOR_IN
20086: IFFALSE 20102
// begin SetLives ( i , 0 ) ;
20088: LD_VAR 0 1
20092: PPUSH
20093: LD_INT 0
20095: PPUSH
20096: CALL_OW 234
// end ;
20100: GO 20085
20102: POP
20103: POP
// end ;
20104: PPOPN 2
20106: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20107: LD_EXP 48
20111: PUSH
20112: LD_EXP 54
20116: AND
20117: IFFALSE 20201
20119: GO 20121
20121: DISABLE
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
// begin enable ;
20126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20127: LD_ADDR_VAR 0 2
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_OWVAR 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 32
20146: PUSH
20147: LD_INT 3
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 2
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20201
// for i in tmp do
20172: LD_ADDR_VAR 0 1
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20199
// begin SetLives ( i , 0 ) ;
20185: LD_VAR 0 1
20189: PPUSH
20190: LD_INT 0
20192: PPUSH
20193: CALL_OW 234
// end ;
20197: GO 20182
20199: POP
20200: POP
// end ;
20201: PPOPN 2
20203: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20204: LD_EXP 48
20208: PUSH
20209: LD_EXP 51
20213: AND
20214: IFFALSE 20307
20216: GO 20218
20218: DISABLE
20219: LD_INT 0
20221: PPUSH
// begin enable ;
20222: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20223: LD_ADDR_VAR 0 1
20227: PUSH
20228: LD_INT 22
20230: PUSH
20231: LD_OWVAR 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 25
20245: PUSH
20246: LD_INT 5
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 25
20255: PUSH
20256: LD_INT 9
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 25
20265: PUSH
20266: LD_INT 8
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: PUSH
20288: FOR_IN
20289: IFFALSE 20305
// begin SetClass ( i , 1 ) ;
20291: LD_VAR 0 1
20295: PPUSH
20296: LD_INT 1
20298: PPUSH
20299: CALL_OW 336
// end ;
20303: GO 20288
20305: POP
20306: POP
// end ;
20307: PPOPN 1
20309: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20310: LD_EXP 48
20314: PUSH
20315: LD_EXP 52
20319: AND
20320: PUSH
20321: LD_OWVAR 65
20325: PUSH
20326: LD_INT 7
20328: LESS
20329: AND
20330: IFFALSE 20344
20332: GO 20334
20334: DISABLE
// begin enable ;
20335: ENABLE
// game_speed := 7 ;
20336: LD_ADDR_OWVAR 65
20340: PUSH
20341: LD_INT 7
20343: ST_TO_ADDR
// end ;
20344: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20345: LD_EXP 48
20349: PUSH
20350: LD_EXP 55
20354: AND
20355: IFFALSE 20557
20357: GO 20359
20359: DISABLE
20360: LD_INT 0
20362: PPUSH
20363: PPUSH
20364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_INT 81
20372: PUSH
20373: LD_OWVAR 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 21
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PPUSH
20396: CALL_OW 69
20400: ST_TO_ADDR
// if not tmp then
20401: LD_VAR 0 3
20405: NOT
20406: IFFALSE 20410
// exit ;
20408: GO 20557
// if tmp > 5 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 5
20417: GREATER
20418: IFFALSE 20430
// k := 5 else
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_INT 5
20427: ST_TO_ADDR
20428: GO 20440
// k := tmp ;
20430: LD_ADDR_VAR 0 2
20434: PUSH
20435: LD_VAR 0 3
20439: ST_TO_ADDR
// for i := 1 to k do
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: DOUBLE
20446: LD_INT 1
20448: DEC
20449: ST_TO_ADDR
20450: LD_VAR 0 2
20454: PUSH
20455: FOR_TO
20456: IFFALSE 20555
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_VAR 0 1
20467: ARRAY
20468: PPUSH
20469: LD_VAR 0 1
20473: PUSH
20474: LD_INT 4
20476: MOD
20477: PUSH
20478: LD_INT 1
20480: PLUS
20481: PPUSH
20482: CALL_OW 259
20486: PUSH
20487: LD_INT 10
20489: LESS
20490: IFFALSE 20553
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20492: LD_VAR 0 3
20496: PUSH
20497: LD_VAR 0 1
20501: ARRAY
20502: PPUSH
20503: LD_VAR 0 1
20507: PUSH
20508: LD_INT 4
20510: MOD
20511: PUSH
20512: LD_INT 1
20514: PLUS
20515: PPUSH
20516: LD_VAR 0 3
20520: PUSH
20521: LD_VAR 0 1
20525: ARRAY
20526: PPUSH
20527: LD_VAR 0 1
20531: PUSH
20532: LD_INT 4
20534: MOD
20535: PUSH
20536: LD_INT 1
20538: PLUS
20539: PPUSH
20540: CALL_OW 259
20544: PUSH
20545: LD_INT 1
20547: PLUS
20548: PPUSH
20549: CALL_OW 237
20553: GO 20455
20555: POP
20556: POP
// end ;
20557: PPOPN 3
20559: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20560: LD_EXP 48
20564: PUSH
20565: LD_EXP 56
20569: AND
20570: IFFALSE 20590
20572: GO 20574
20574: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20575: LD_INT 4
20577: PPUSH
20578: LD_OWVAR 2
20582: PPUSH
20583: LD_INT 0
20585: PPUSH
20586: CALL_OW 324
20590: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20591: LD_EXP 48
20595: PUSH
20596: LD_EXP 85
20600: AND
20601: IFFALSE 20621
20603: GO 20605
20605: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20606: LD_INT 19
20608: PPUSH
20609: LD_OWVAR 2
20613: PPUSH
20614: LD_INT 0
20616: PPUSH
20617: CALL_OW 324
20621: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20622: LD_EXP 48
20626: PUSH
20627: LD_EXP 57
20631: AND
20632: IFFALSE 20734
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin enable ;
20641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20642: LD_ADDR_VAR 0 2
20646: PUSH
20647: LD_INT 22
20649: PUSH
20650: LD_OWVAR 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 34
20664: PUSH
20665: LD_INT 11
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 34
20674: PUSH
20675: LD_INT 30
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 69
20695: ST_TO_ADDR
// if not tmp then
20696: LD_VAR 0 2
20700: NOT
20701: IFFALSE 20705
// exit ;
20703: GO 20734
// for i in tmp do
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_VAR 0 2
20714: PUSH
20715: FOR_IN
20716: IFFALSE 20732
// begin SetLives ( i , 0 ) ;
20718: LD_VAR 0 1
20722: PPUSH
20723: LD_INT 0
20725: PPUSH
20726: CALL_OW 234
// end ;
20730: GO 20715
20732: POP
20733: POP
// end ;
20734: PPOPN 2
20736: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20737: LD_EXP 48
20741: PUSH
20742: LD_EXP 58
20746: AND
20747: IFFALSE 20767
20749: GO 20751
20751: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20752: LD_INT 32
20754: PPUSH
20755: LD_OWVAR 2
20759: PPUSH
20760: LD_INT 0
20762: PPUSH
20763: CALL_OW 324
20767: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20768: LD_EXP 48
20772: PUSH
20773: LD_EXP 59
20777: AND
20778: IFFALSE 20959
20780: GO 20782
20782: DISABLE
20783: LD_INT 0
20785: PPUSH
20786: PPUSH
20787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20788: LD_ADDR_VAR 0 2
20792: PUSH
20793: LD_INT 22
20795: PUSH
20796: LD_OWVAR 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 33
20807: PUSH
20808: LD_INT 3
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: ST_TO_ADDR
// if not tmp then
20824: LD_VAR 0 2
20828: NOT
20829: IFFALSE 20833
// exit ;
20831: GO 20959
// side := 0 ;
20833: LD_ADDR_VAR 0 3
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// for i := 1 to 8 do
20841: LD_ADDR_VAR 0 1
20845: PUSH
20846: DOUBLE
20847: LD_INT 1
20849: DEC
20850: ST_TO_ADDR
20851: LD_INT 8
20853: PUSH
20854: FOR_TO
20855: IFFALSE 20903
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20857: LD_OWVAR 2
20861: PUSH
20862: LD_VAR 0 1
20866: NONEQUAL
20867: PUSH
20868: LD_OWVAR 2
20872: PPUSH
20873: LD_VAR 0 1
20877: PPUSH
20878: CALL_OW 81
20882: PUSH
20883: LD_INT 2
20885: EQUAL
20886: AND
20887: IFFALSE 20901
// begin side := i ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_VAR 0 1
20898: ST_TO_ADDR
// break ;
20899: GO 20903
// end ;
20901: GO 20854
20903: POP
20904: POP
// if not side then
20905: LD_VAR 0 3
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 20959
// for i := 1 to tmp do
20914: LD_ADDR_VAR 0 1
20918: PUSH
20919: DOUBLE
20920: LD_INT 1
20922: DEC
20923: ST_TO_ADDR
20924: LD_VAR 0 2
20928: PUSH
20929: FOR_TO
20930: IFFALSE 20957
// if Prob ( 60 ) then
20932: LD_INT 60
20934: PPUSH
20935: CALL_OW 13
20939: IFFALSE 20955
// SetSide ( i , side ) ;
20941: LD_VAR 0 1
20945: PPUSH
20946: LD_VAR 0 3
20950: PPUSH
20951: CALL_OW 235
20955: GO 20929
20957: POP
20958: POP
// end ;
20959: PPOPN 3
20961: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20962: LD_EXP 48
20966: PUSH
20967: LD_EXP 61
20971: AND
20972: IFFALSE 21091
20974: GO 20976
20976: DISABLE
20977: LD_INT 0
20979: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20980: LD_ADDR_VAR 0 1
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_OWVAR 2
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 21
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 3
21009: PUSH
21010: LD_INT 23
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: PPUSH
21029: CALL_OW 69
21033: PUSH
21034: FOR_IN
21035: IFFALSE 21089
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 257
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 3
21055: PUSH
21056: LD_INT 4
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: IN
21065: IFFALSE 21087
// SetClass ( un , rand ( 1 , 4 ) ) ;
21067: LD_VAR 0 1
21071: PPUSH
21072: LD_INT 1
21074: PPUSH
21075: LD_INT 4
21077: PPUSH
21078: CALL_OW 12
21082: PPUSH
21083: CALL_OW 336
21087: GO 21034
21089: POP
21090: POP
// end ;
21091: PPOPN 1
21093: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21094: LD_EXP 48
21098: PUSH
21099: LD_EXP 60
21103: AND
21104: IFFALSE 21183
21106: GO 21108
21108: DISABLE
21109: LD_INT 0
21111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21112: LD_ADDR_VAR 0 1
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_OWVAR 2
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 21
21131: PUSH
21132: LD_INT 3
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PPUSH
21143: CALL_OW 69
21147: ST_TO_ADDR
// if not tmp then
21148: LD_VAR 0 1
21152: NOT
21153: IFFALSE 21157
// exit ;
21155: GO 21183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21157: LD_VAR 0 1
21161: PUSH
21162: LD_INT 1
21164: PPUSH
21165: LD_VAR 0 1
21169: PPUSH
21170: CALL_OW 12
21174: ARRAY
21175: PPUSH
21176: LD_INT 100
21178: PPUSH
21179: CALL_OW 234
// end ;
21183: PPOPN 1
21185: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21186: LD_EXP 48
21190: PUSH
21191: LD_EXP 62
21195: AND
21196: IFFALSE 21294
21198: GO 21200
21200: DISABLE
21201: LD_INT 0
21203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21204: LD_ADDR_VAR 0 1
21208: PUSH
21209: LD_INT 22
21211: PUSH
21212: LD_OWVAR 2
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 21
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: ST_TO_ADDR
// if not tmp then
21240: LD_VAR 0 1
21244: NOT
21245: IFFALSE 21249
// exit ;
21247: GO 21294
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21249: LD_VAR 0 1
21253: PUSH
21254: LD_INT 1
21256: PPUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 12
21266: ARRAY
21267: PPUSH
21268: LD_INT 1
21270: PPUSH
21271: LD_INT 4
21273: PPUSH
21274: CALL_OW 12
21278: PPUSH
21279: LD_INT 3000
21281: PPUSH
21282: LD_INT 9000
21284: PPUSH
21285: CALL_OW 12
21289: PPUSH
21290: CALL_OW 492
// end ;
21294: PPOPN 1
21296: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21297: LD_EXP 48
21301: PUSH
21302: LD_EXP 63
21306: AND
21307: IFFALSE 21327
21309: GO 21311
21311: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21312: LD_INT 1
21314: PPUSH
21315: LD_OWVAR 2
21319: PPUSH
21320: LD_INT 0
21322: PPUSH
21323: CALL_OW 324
21327: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21328: LD_EXP 48
21332: PUSH
21333: LD_EXP 64
21337: AND
21338: IFFALSE 21421
21340: GO 21342
21342: DISABLE
21343: LD_INT 0
21345: PPUSH
21346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21347: LD_ADDR_VAR 0 2
21351: PUSH
21352: LD_INT 22
21354: PUSH
21355: LD_OWVAR 2
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 21
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PPUSH
21378: CALL_OW 69
21382: ST_TO_ADDR
// if not tmp then
21383: LD_VAR 0 2
21387: NOT
21388: IFFALSE 21392
// exit ;
21390: GO 21421
// for i in tmp do
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: LD_VAR 0 2
21401: PUSH
21402: FOR_IN
21403: IFFALSE 21419
// SetBLevel ( i , 10 ) ;
21405: LD_VAR 0 1
21409: PPUSH
21410: LD_INT 10
21412: PPUSH
21413: CALL_OW 241
21417: GO 21402
21419: POP
21420: POP
// end ;
21421: PPOPN 2
21423: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21424: LD_EXP 48
21428: PUSH
21429: LD_EXP 65
21433: AND
21434: IFFALSE 21545
21436: GO 21438
21438: DISABLE
21439: LD_INT 0
21441: PPUSH
21442: PPUSH
21443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_OWVAR 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 25
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 69
21479: ST_TO_ADDR
// if not tmp then
21480: LD_VAR 0 3
21484: NOT
21485: IFFALSE 21489
// exit ;
21487: GO 21545
// un := tmp [ rand ( 1 , tmp ) ] ;
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_VAR 0 3
21498: PUSH
21499: LD_INT 1
21501: PPUSH
21502: LD_VAR 0 3
21506: PPUSH
21507: CALL_OW 12
21511: ARRAY
21512: ST_TO_ADDR
// if Crawls ( un ) then
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 318
21522: IFFALSE 21533
// ComWalk ( un ) ;
21524: LD_VAR 0 2
21528: PPUSH
21529: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21533: LD_VAR 0 2
21537: PPUSH
21538: LD_INT 5
21540: PPUSH
21541: CALL_OW 336
// end ;
21545: PPOPN 3
21547: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21548: LD_EXP 48
21552: PUSH
21553: LD_EXP 66
21557: AND
21558: PUSH
21559: LD_OWVAR 67
21563: PUSH
21564: LD_INT 3
21566: LESS
21567: AND
21568: IFFALSE 21587
21570: GO 21572
21572: DISABLE
// Difficulty := Difficulty + 1 ;
21573: LD_ADDR_OWVAR 67
21577: PUSH
21578: LD_OWVAR 67
21582: PUSH
21583: LD_INT 1
21585: PLUS
21586: ST_TO_ADDR
21587: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21588: LD_EXP 48
21592: PUSH
21593: LD_EXP 67
21597: AND
21598: IFFALSE 21701
21600: GO 21602
21602: DISABLE
21603: LD_INT 0
21605: PPUSH
// begin for i := 1 to 5 do
21606: LD_ADDR_VAR 0 1
21610: PUSH
21611: DOUBLE
21612: LD_INT 1
21614: DEC
21615: ST_TO_ADDR
21616: LD_INT 5
21618: PUSH
21619: FOR_TO
21620: IFFALSE 21699
// begin uc_nation := nation_nature ;
21622: LD_ADDR_OWVAR 21
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// uc_side := 0 ;
21630: LD_ADDR_OWVAR 20
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21638: LD_ADDR_OWVAR 29
21642: PUSH
21643: LD_INT 12
21645: PUSH
21646: LD_INT 12
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: ST_TO_ADDR
// hc_agressivity := 20 ;
21653: LD_ADDR_OWVAR 35
21657: PUSH
21658: LD_INT 20
21660: ST_TO_ADDR
// hc_class := class_tiger ;
21661: LD_ADDR_OWVAR 28
21665: PUSH
21666: LD_INT 14
21668: ST_TO_ADDR
// hc_gallery :=  ;
21669: LD_ADDR_OWVAR 33
21673: PUSH
21674: LD_STRING 
21676: ST_TO_ADDR
// hc_name :=  ;
21677: LD_ADDR_OWVAR 26
21681: PUSH
21682: LD_STRING 
21684: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21685: CALL_OW 44
21689: PPUSH
21690: LD_INT 0
21692: PPUSH
21693: CALL_OW 51
// end ;
21697: GO 21619
21699: POP
21700: POP
// end ;
21701: PPOPN 1
21703: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21704: LD_EXP 48
21708: PUSH
21709: LD_EXP 68
21713: AND
21714: IFFALSE 21723
21716: GO 21718
21718: DISABLE
// StreamSibBomb ;
21719: CALL 21724 0 0
21723: END
// export function StreamSibBomb ; var i , x , y ; begin
21724: LD_INT 0
21726: PPUSH
21727: PPUSH
21728: PPUSH
21729: PPUSH
// result := false ;
21730: LD_ADDR_VAR 0 1
21734: PUSH
21735: LD_INT 0
21737: ST_TO_ADDR
// for i := 1 to 16 do
21738: LD_ADDR_VAR 0 2
21742: PUSH
21743: DOUBLE
21744: LD_INT 1
21746: DEC
21747: ST_TO_ADDR
21748: LD_INT 16
21750: PUSH
21751: FOR_TO
21752: IFFALSE 21951
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21754: LD_ADDR_VAR 0 3
21758: PUSH
21759: LD_INT 10
21761: PUSH
21762: LD_INT 20
21764: PUSH
21765: LD_INT 30
21767: PUSH
21768: LD_INT 40
21770: PUSH
21771: LD_INT 50
21773: PUSH
21774: LD_INT 60
21776: PUSH
21777: LD_INT 70
21779: PUSH
21780: LD_INT 80
21782: PUSH
21783: LD_INT 90
21785: PUSH
21786: LD_INT 100
21788: PUSH
21789: LD_INT 110
21791: PUSH
21792: LD_INT 120
21794: PUSH
21795: LD_INT 130
21797: PUSH
21798: LD_INT 140
21800: PUSH
21801: LD_INT 150
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 1
21823: PPUSH
21824: LD_INT 15
21826: PPUSH
21827: CALL_OW 12
21831: ARRAY
21832: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21833: LD_ADDR_VAR 0 4
21837: PUSH
21838: LD_INT 10
21840: PUSH
21841: LD_INT 20
21843: PUSH
21844: LD_INT 30
21846: PUSH
21847: LD_INT 40
21849: PUSH
21850: LD_INT 50
21852: PUSH
21853: LD_INT 60
21855: PUSH
21856: LD_INT 70
21858: PUSH
21859: LD_INT 80
21861: PUSH
21862: LD_INT 90
21864: PUSH
21865: LD_INT 100
21867: PUSH
21868: LD_INT 110
21870: PUSH
21871: LD_INT 120
21873: PUSH
21874: LD_INT 130
21876: PUSH
21877: LD_INT 140
21879: PUSH
21880: LD_INT 150
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PPUSH
21903: LD_INT 15
21905: PPUSH
21906: CALL_OW 12
21910: ARRAY
21911: ST_TO_ADDR
// if ValidHex ( x , y ) then
21912: LD_VAR 0 3
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: CALL_OW 488
21926: IFFALSE 21949
// begin result := [ x , y ] ;
21928: LD_ADDR_VAR 0 1
21932: PUSH
21933: LD_VAR 0 3
21937: PUSH
21938: LD_VAR 0 4
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: ST_TO_ADDR
// break ;
21947: GO 21951
// end ; end ;
21949: GO 21751
21951: POP
21952: POP
// if result then
21953: LD_VAR 0 1
21957: IFFALSE 22017
// begin ToLua ( playSibBomb() ) ;
21959: LD_STRING playSibBomb()
21961: PPUSH
21962: CALL_OW 559
// wait ( 0 0$14 ) ;
21966: LD_INT 490
21968: PPUSH
21969: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21973: LD_VAR 0 1
21977: PUSH
21978: LD_INT 1
21980: ARRAY
21981: PPUSH
21982: LD_VAR 0 1
21986: PUSH
21987: LD_INT 2
21989: ARRAY
21990: PPUSH
21991: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21995: LD_VAR 0 1
21999: PUSH
22000: LD_INT 1
22002: ARRAY
22003: PPUSH
22004: LD_VAR 0 1
22008: PUSH
22009: LD_INT 2
22011: ARRAY
22012: PPUSH
22013: CALL_OW 429
// end ; end ;
22017: LD_VAR 0 1
22021: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22022: LD_EXP 48
22026: PUSH
22027: LD_EXP 70
22031: AND
22032: IFFALSE 22044
22034: GO 22036
22036: DISABLE
// YouLost (  ) ;
22037: LD_STRING 
22039: PPUSH
22040: CALL_OW 104
22044: END
// every 0 0$1 trigger StreamModeActive and sFog do
22045: LD_EXP 48
22049: PUSH
22050: LD_EXP 69
22054: AND
22055: IFFALSE 22069
22057: GO 22059
22059: DISABLE
// FogOff ( your_side ) ;
22060: LD_OWVAR 2
22064: PPUSH
22065: CALL_OW 344
22069: END
// every 0 0$1 trigger StreamModeActive and sSun do
22070: LD_EXP 48
22074: PUSH
22075: LD_EXP 71
22079: AND
22080: IFFALSE 22108
22082: GO 22084
22084: DISABLE
// begin solar_recharge_percent := 0 ;
22085: LD_ADDR_OWVAR 79
22089: PUSH
22090: LD_INT 0
22092: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22093: LD_INT 10500
22095: PPUSH
22096: CALL_OW 67
// solar_recharge_percent := 100 ;
22100: LD_ADDR_OWVAR 79
22104: PUSH
22105: LD_INT 100
22107: ST_TO_ADDR
// end ;
22108: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22109: LD_EXP 48
22113: PUSH
22114: LD_EXP 72
22118: AND
22119: IFFALSE 22358
22121: GO 22123
22123: DISABLE
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
// begin tmp := [ ] ;
22129: LD_ADDR_VAR 0 3
22133: PUSH
22134: EMPTY
22135: ST_TO_ADDR
// for i := 1 to 6 do
22136: LD_ADDR_VAR 0 1
22140: PUSH
22141: DOUBLE
22142: LD_INT 1
22144: DEC
22145: ST_TO_ADDR
22146: LD_INT 6
22148: PUSH
22149: FOR_TO
22150: IFFALSE 22255
// begin uc_nation := nation_nature ;
22152: LD_ADDR_OWVAR 21
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// uc_side := 0 ;
22160: LD_ADDR_OWVAR 20
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22168: LD_ADDR_OWVAR 29
22172: PUSH
22173: LD_INT 12
22175: PUSH
22176: LD_INT 12
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: ST_TO_ADDR
// hc_agressivity := 20 ;
22183: LD_ADDR_OWVAR 35
22187: PUSH
22188: LD_INT 20
22190: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22191: LD_ADDR_OWVAR 28
22195: PUSH
22196: LD_INT 17
22198: ST_TO_ADDR
// hc_gallery :=  ;
22199: LD_ADDR_OWVAR 33
22203: PUSH
22204: LD_STRING 
22206: ST_TO_ADDR
// hc_name :=  ;
22207: LD_ADDR_OWVAR 26
22211: PUSH
22212: LD_STRING 
22214: ST_TO_ADDR
// un := CreateHuman ;
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: CALL_OW 44
22224: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22225: LD_VAR 0 2
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 51
// tmp := tmp ^ un ;
22237: LD_ADDR_VAR 0 3
22241: PUSH
22242: LD_VAR 0 3
22246: PUSH
22247: LD_VAR 0 2
22251: ADD
22252: ST_TO_ADDR
// end ;
22253: GO 22149
22255: POP
22256: POP
// repeat wait ( 0 0$1 ) ;
22257: LD_INT 35
22259: PPUSH
22260: CALL_OW 67
// for un in tmp do
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_VAR 0 3
22273: PUSH
22274: FOR_IN
22275: IFFALSE 22349
// begin if IsDead ( un ) then
22277: LD_VAR 0 2
22281: PPUSH
22282: CALL_OW 301
22286: IFFALSE 22306
// begin tmp := tmp diff un ;
22288: LD_ADDR_VAR 0 3
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: LD_VAR 0 2
22302: DIFF
22303: ST_TO_ADDR
// continue ;
22304: GO 22274
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22306: LD_VAR 0 2
22310: PPUSH
22311: LD_INT 3
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PPUSH
22328: CALL_OW 69
22332: PPUSH
22333: LD_VAR 0 2
22337: PPUSH
22338: CALL_OW 74
22342: PPUSH
22343: CALL_OW 115
// end ;
22347: GO 22274
22349: POP
22350: POP
// until not tmp ;
22351: LD_VAR 0 3
22355: NOT
22356: IFFALSE 22257
// end ;
22358: PPOPN 3
22360: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22361: LD_EXP 48
22365: PUSH
22366: LD_EXP 73
22370: AND
22371: IFFALSE 22425
22373: GO 22375
22375: DISABLE
// begin ToLua ( displayTroll(); ) ;
22376: LD_STRING displayTroll();
22378: PPUSH
22379: CALL_OW 559
// wait ( 3 3$00 ) ;
22383: LD_INT 6300
22385: PPUSH
22386: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22390: LD_STRING hideTroll();
22392: PPUSH
22393: CALL_OW 559
// wait ( 1 1$00 ) ;
22397: LD_INT 2100
22399: PPUSH
22400: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22404: LD_STRING displayTroll();
22406: PPUSH
22407: CALL_OW 559
// wait ( 1 1$00 ) ;
22411: LD_INT 2100
22413: PPUSH
22414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22418: LD_STRING hideTroll();
22420: PPUSH
22421: CALL_OW 559
// end ;
22425: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22426: LD_EXP 48
22430: PUSH
22431: LD_EXP 74
22435: AND
22436: IFFALSE 22499
22438: GO 22440
22440: DISABLE
22441: LD_INT 0
22443: PPUSH
// begin p := 0 ;
22444: LD_ADDR_VAR 0 1
22448: PUSH
22449: LD_INT 0
22451: ST_TO_ADDR
// repeat game_speed := 1 ;
22452: LD_ADDR_OWVAR 65
22456: PUSH
22457: LD_INT 1
22459: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22460: LD_INT 35
22462: PPUSH
22463: CALL_OW 67
// p := p + 1 ;
22467: LD_ADDR_VAR 0 1
22471: PUSH
22472: LD_VAR 0 1
22476: PUSH
22477: LD_INT 1
22479: PLUS
22480: ST_TO_ADDR
// until p >= 60 ;
22481: LD_VAR 0 1
22485: PUSH
22486: LD_INT 60
22488: GREATEREQUAL
22489: IFFALSE 22452
// game_speed := 4 ;
22491: LD_ADDR_OWVAR 65
22495: PUSH
22496: LD_INT 4
22498: ST_TO_ADDR
// end ;
22499: PPOPN 1
22501: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22502: LD_EXP 48
22506: PUSH
22507: LD_EXP 75
22511: AND
22512: IFFALSE 22658
22514: GO 22516
22516: DISABLE
22517: LD_INT 0
22519: PPUSH
22520: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22521: LD_ADDR_VAR 0 1
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_OWVAR 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 30
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PPUSH
22570: CALL_OW 69
22574: ST_TO_ADDR
// if not depot then
22575: LD_VAR 0 1
22579: NOT
22580: IFFALSE 22584
// exit ;
22582: GO 22658
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_VAR 0 1
22593: PUSH
22594: LD_INT 1
22596: PPUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 12
22606: ARRAY
22607: PPUSH
22608: CALL_OW 274
22612: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22613: LD_VAR 0 2
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: LD_INT 0
22623: PPUSH
22624: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22628: LD_VAR 0 2
22632: PPUSH
22633: LD_INT 2
22635: PPUSH
22636: LD_INT 0
22638: PPUSH
22639: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22643: LD_VAR 0 2
22647: PPUSH
22648: LD_INT 3
22650: PPUSH
22651: LD_INT 0
22653: PPUSH
22654: CALL_OW 277
// end ;
22658: PPOPN 2
22660: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22661: LD_EXP 48
22665: PUSH
22666: LD_EXP 76
22670: AND
22671: IFFALSE 22768
22673: GO 22675
22675: DISABLE
22676: LD_INT 0
22678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22679: LD_ADDR_VAR 0 1
22683: PUSH
22684: LD_INT 22
22686: PUSH
22687: LD_OWVAR 2
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 21
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 23
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 69
22732: ST_TO_ADDR
// if not tmp then
22733: LD_VAR 0 1
22737: NOT
22738: IFFALSE 22742
// exit ;
22740: GO 22768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22742: LD_VAR 0 1
22746: PUSH
22747: LD_INT 1
22749: PPUSH
22750: LD_VAR 0 1
22754: PPUSH
22755: CALL_OW 12
22759: ARRAY
22760: PPUSH
22761: LD_INT 200
22763: PPUSH
22764: CALL_OW 234
// end ;
22768: PPOPN 1
22770: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22771: LD_EXP 48
22775: PUSH
22776: LD_EXP 77
22780: AND
22781: IFFALSE 22860
22783: GO 22785
22785: DISABLE
22786: LD_INT 0
22788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22789: LD_ADDR_VAR 0 1
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_OWVAR 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 21
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PPUSH
22820: CALL_OW 69
22824: ST_TO_ADDR
// if not tmp then
22825: LD_VAR 0 1
22829: NOT
22830: IFFALSE 22834
// exit ;
22832: GO 22860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22834: LD_VAR 0 1
22838: PUSH
22839: LD_INT 1
22841: PPUSH
22842: LD_VAR 0 1
22846: PPUSH
22847: CALL_OW 12
22851: ARRAY
22852: PPUSH
22853: LD_INT 60
22855: PPUSH
22856: CALL_OW 234
// end ;
22860: PPOPN 1
22862: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22863: LD_EXP 48
22867: PUSH
22868: LD_EXP 78
22872: AND
22873: IFFALSE 22972
22875: GO 22877
22877: DISABLE
22878: LD_INT 0
22880: PPUSH
22881: PPUSH
// begin enable ;
22882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22883: LD_ADDR_VAR 0 1
22887: PUSH
22888: LD_INT 22
22890: PUSH
22891: LD_OWVAR 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 61
22902: PUSH
22903: EMPTY
22904: LIST
22905: PUSH
22906: LD_INT 33
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: PPUSH
22921: CALL_OW 69
22925: ST_TO_ADDR
// if not tmp then
22926: LD_VAR 0 1
22930: NOT
22931: IFFALSE 22935
// exit ;
22933: GO 22972
// for i in tmp do
22935: LD_ADDR_VAR 0 2
22939: PUSH
22940: LD_VAR 0 1
22944: PUSH
22945: FOR_IN
22946: IFFALSE 22970
// if IsControledBy ( i ) then
22948: LD_VAR 0 2
22952: PPUSH
22953: CALL_OW 312
22957: IFFALSE 22968
// ComUnlink ( i ) ;
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 136
22968: GO 22945
22970: POP
22971: POP
// end ;
22972: PPOPN 2
22974: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22975: LD_EXP 48
22979: PUSH
22980: LD_EXP 79
22984: AND
22985: IFFALSE 23125
22987: GO 22989
22989: DISABLE
22990: LD_INT 0
22992: PPUSH
22993: PPUSH
// begin ToLua ( displayPowell(); ) ;
22994: LD_STRING displayPowell();
22996: PPUSH
22997: CALL_OW 559
// uc_side := 0 ;
23001: LD_ADDR_OWVAR 20
23005: PUSH
23006: LD_INT 0
23008: ST_TO_ADDR
// uc_nation := 2 ;
23009: LD_ADDR_OWVAR 21
23013: PUSH
23014: LD_INT 2
23016: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23017: LD_ADDR_OWVAR 37
23021: PUSH
23022: LD_INT 14
23024: ST_TO_ADDR
// vc_engine := engine_siberite ;
23025: LD_ADDR_OWVAR 39
23029: PUSH
23030: LD_INT 3
23032: ST_TO_ADDR
// vc_control := control_apeman ;
23033: LD_ADDR_OWVAR 38
23037: PUSH
23038: LD_INT 5
23040: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23041: LD_ADDR_OWVAR 40
23045: PUSH
23046: LD_INT 29
23048: ST_TO_ADDR
// un := CreateVehicle ;
23049: LD_ADDR_VAR 0 2
23053: PUSH
23054: CALL_OW 45
23058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23059: LD_VAR 0 2
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23071: LD_INT 35
23073: PPUSH
23074: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23078: LD_VAR 0 2
23082: PPUSH
23083: LD_INT 22
23085: PUSH
23086: LD_OWVAR 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PPUSH
23095: CALL_OW 69
23099: PPUSH
23100: LD_VAR 0 2
23104: PPUSH
23105: CALL_OW 74
23109: PPUSH
23110: CALL_OW 115
// until IsDead ( un ) ;
23114: LD_VAR 0 2
23118: PPUSH
23119: CALL_OW 301
23123: IFFALSE 23071
// end ;
23125: PPOPN 2
23127: END
// every 0 0$1 trigger StreamModeActive and sStu do
23128: LD_EXP 48
23132: PUSH
23133: LD_EXP 87
23137: AND
23138: IFFALSE 23154
23140: GO 23142
23142: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23143: LD_STRING displayStucuk();
23145: PPUSH
23146: CALL_OW 559
// ResetFog ;
23150: CALL_OW 335
// end ;
23154: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23155: LD_EXP 48
23159: PUSH
23160: LD_EXP 80
23164: AND
23165: IFFALSE 23306
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 69
23209: ST_TO_ADDR
// if not tmp then
23210: LD_VAR 0 2
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23306
// un := tmp [ rand ( 1 , tmp ) ] ;
23219: LD_ADDR_VAR 0 1
23223: PUSH
23224: LD_VAR 0 2
23228: PUSH
23229: LD_INT 1
23231: PPUSH
23232: LD_VAR 0 2
23236: PPUSH
23237: CALL_OW 12
23241: ARRAY
23242: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23243: LD_VAR 0 1
23247: PPUSH
23248: LD_INT 0
23250: PPUSH
23251: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23255: LD_VAR 0 1
23259: PPUSH
23260: LD_OWVAR 3
23264: PUSH
23265: LD_VAR 0 1
23269: DIFF
23270: PPUSH
23271: LD_VAR 0 1
23275: PPUSH
23276: CALL_OW 74
23280: PPUSH
23281: CALL_OW 115
// wait ( 0 0$20 ) ;
23285: LD_INT 700
23287: PPUSH
23288: CALL_OW 67
// SetSide ( un , your_side ) ;
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_OWVAR 2
23301: PPUSH
23302: CALL_OW 235
// end ;
23306: PPOPN 2
23308: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23309: LD_EXP 48
23313: PUSH
23314: LD_EXP 81
23318: AND
23319: IFFALSE 23425
23321: GO 23323
23323: DISABLE
23324: LD_INT 0
23326: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23327: LD_ADDR_VAR 0 1
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_OWVAR 2
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 2
23346: PUSH
23347: LD_INT 30
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 30
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PPUSH
23376: CALL_OW 69
23380: ST_TO_ADDR
// if not depot then
23381: LD_VAR 0 1
23385: NOT
23386: IFFALSE 23390
// exit ;
23388: GO 23425
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23390: LD_VAR 0 1
23394: PUSH
23395: LD_INT 1
23397: ARRAY
23398: PPUSH
23399: CALL_OW 250
23403: PPUSH
23404: LD_VAR 0 1
23408: PUSH
23409: LD_INT 1
23411: ARRAY
23412: PPUSH
23413: CALL_OW 251
23417: PPUSH
23418: LD_INT 70
23420: PPUSH
23421: CALL_OW 495
// end ;
23425: PPOPN 1
23427: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23428: LD_EXP 48
23432: PUSH
23433: LD_EXP 82
23437: AND
23438: IFFALSE 23649
23440: GO 23442
23442: DISABLE
23443: LD_INT 0
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
23449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23450: LD_ADDR_VAR 0 5
23454: PUSH
23455: LD_INT 22
23457: PUSH
23458: LD_OWVAR 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 21
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PPUSH
23481: CALL_OW 69
23485: ST_TO_ADDR
// if not tmp then
23486: LD_VAR 0 5
23490: NOT
23491: IFFALSE 23495
// exit ;
23493: GO 23649
// for i in tmp do
23495: LD_ADDR_VAR 0 1
23499: PUSH
23500: LD_VAR 0 5
23504: PUSH
23505: FOR_IN
23506: IFFALSE 23647
// begin d := rand ( 0 , 5 ) ;
23508: LD_ADDR_VAR 0 4
23512: PUSH
23513: LD_INT 0
23515: PPUSH
23516: LD_INT 5
23518: PPUSH
23519: CALL_OW 12
23523: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23524: LD_ADDR_VAR 0 2
23528: PUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: CALL_OW 250
23538: PPUSH
23539: LD_VAR 0 4
23543: PPUSH
23544: LD_INT 3
23546: PPUSH
23547: LD_INT 12
23549: PPUSH
23550: CALL_OW 12
23554: PPUSH
23555: CALL_OW 272
23559: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_VAR 0 1
23569: PPUSH
23570: CALL_OW 251
23574: PPUSH
23575: LD_VAR 0 4
23579: PPUSH
23580: LD_INT 3
23582: PPUSH
23583: LD_INT 12
23585: PPUSH
23586: CALL_OW 12
23590: PPUSH
23591: CALL_OW 273
23595: ST_TO_ADDR
// if ValidHex ( x , y ) then
23596: LD_VAR 0 2
23600: PPUSH
23601: LD_VAR 0 3
23605: PPUSH
23606: CALL_OW 488
23610: IFFALSE 23645
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: LD_INT 3
23629: PPUSH
23630: LD_INT 6
23632: PPUSH
23633: CALL_OW 12
23637: PPUSH
23638: LD_INT 1
23640: PPUSH
23641: CALL_OW 483
// end ;
23645: GO 23505
23647: POP
23648: POP
// end ;
23649: PPOPN 5
23651: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23652: LD_EXP 48
23656: PUSH
23657: LD_EXP 83
23661: AND
23662: IFFALSE 23756
23664: GO 23666
23666: DISABLE
23667: LD_INT 0
23669: PPUSH
23670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23671: LD_ADDR_VAR 0 2
23675: PUSH
23676: LD_INT 22
23678: PUSH
23679: LD_OWVAR 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 21
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: PPUSH
23713: CALL_OW 69
23717: ST_TO_ADDR
// if not tmp then
23718: LD_VAR 0 2
23722: NOT
23723: IFFALSE 23727
// exit ;
23725: GO 23756
// for i in tmp do
23727: LD_ADDR_VAR 0 1
23731: PUSH
23732: LD_VAR 0 2
23736: PUSH
23737: FOR_IN
23738: IFFALSE 23754
// SetFuel ( i , 0 ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_INT 0
23747: PPUSH
23748: CALL_OW 240
23752: GO 23737
23754: POP
23755: POP
// end ;
23756: PPOPN 2
23758: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23759: LD_EXP 48
23763: PUSH
23764: LD_EXP 84
23768: AND
23769: IFFALSE 23835
23771: GO 23773
23773: DISABLE
23774: LD_INT 0
23776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23777: LD_ADDR_VAR 0 1
23781: PUSH
23782: LD_INT 22
23784: PUSH
23785: LD_OWVAR 2
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 30
23796: PUSH
23797: LD_INT 29
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: CALL_OW 69
23812: ST_TO_ADDR
// if not tmp then
23813: LD_VAR 0 1
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23835
// DestroyUnit ( tmp [ 1 ] ) ;
23822: LD_VAR 0 1
23826: PUSH
23827: LD_INT 1
23829: ARRAY
23830: PPUSH
23831: CALL_OW 65
// end ;
23835: PPOPN 1
23837: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23838: LD_EXP 48
23842: PUSH
23843: LD_EXP 86
23847: AND
23848: IFFALSE 23977
23850: GO 23852
23852: DISABLE
23853: LD_INT 0
23855: PPUSH
// begin uc_side := 0 ;
23856: LD_ADDR_OWVAR 20
23860: PUSH
23861: LD_INT 0
23863: ST_TO_ADDR
// uc_nation := nation_arabian ;
23864: LD_ADDR_OWVAR 21
23868: PUSH
23869: LD_INT 2
23871: ST_TO_ADDR
// hc_gallery :=  ;
23872: LD_ADDR_OWVAR 33
23876: PUSH
23877: LD_STRING 
23879: ST_TO_ADDR
// hc_name :=  ;
23880: LD_ADDR_OWVAR 26
23884: PUSH
23885: LD_STRING 
23887: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23888: LD_INT 1
23890: PPUSH
23891: LD_INT 11
23893: PPUSH
23894: LD_INT 10
23896: PPUSH
23897: CALL_OW 380
// un := CreateHuman ;
23901: LD_ADDR_VAR 0 1
23905: PUSH
23906: CALL_OW 44
23910: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23911: LD_VAR 0 1
23915: PPUSH
23916: LD_INT 1
23918: PPUSH
23919: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23923: LD_INT 35
23925: PPUSH
23926: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23930: LD_VAR 0 1
23934: PPUSH
23935: LD_INT 22
23937: PUSH
23938: LD_OWVAR 2
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 69
23951: PPUSH
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL_OW 74
23961: PPUSH
23962: CALL_OW 115
// until IsDead ( un ) ;
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 301
23975: IFFALSE 23923
// end ;
23977: PPOPN 1
23979: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23980: LD_EXP 48
23984: PUSH
23985: LD_EXP 88
23989: AND
23990: IFFALSE 24002
23992: GO 23994
23994: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23995: LD_STRING earthquake(getX(game), 0, 32)
23997: PPUSH
23998: CALL_OW 559
24002: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24003: LD_EXP 48
24007: PUSH
24008: LD_EXP 89
24012: AND
24013: IFFALSE 24104
24015: GO 24017
24017: DISABLE
24018: LD_INT 0
24020: PPUSH
// begin enable ;
24021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24022: LD_ADDR_VAR 0 1
24026: PUSH
24027: LD_INT 22
24029: PUSH
24030: LD_OWVAR 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 21
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 33
24051: PUSH
24052: LD_INT 3
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 69
24068: ST_TO_ADDR
// if not tmp then
24069: LD_VAR 0 1
24073: NOT
24074: IFFALSE 24078
// exit ;
24076: GO 24104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24078: LD_VAR 0 1
24082: PUSH
24083: LD_INT 1
24085: PPUSH
24086: LD_VAR 0 1
24090: PPUSH
24091: CALL_OW 12
24095: ARRAY
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: CALL_OW 234
// end ;
24104: PPOPN 1
24106: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24107: LD_EXP 48
24111: PUSH
24112: LD_EXP 90
24116: AND
24117: IFFALSE 24258
24119: GO 24121
24121: DISABLE
24122: LD_INT 0
24124: PPUSH
24125: PPUSH
24126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24127: LD_ADDR_VAR 0 3
24131: PUSH
24132: LD_INT 22
24134: PUSH
24135: LD_OWVAR 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 69
24162: ST_TO_ADDR
// if not tmp then
24163: LD_VAR 0 3
24167: NOT
24168: IFFALSE 24172
// exit ;
24170: GO 24258
// un := tmp [ rand ( 1 , tmp ) ] ;
24172: LD_ADDR_VAR 0 2
24176: PUSH
24177: LD_VAR 0 3
24181: PUSH
24182: LD_INT 1
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: CALL_OW 12
24194: ARRAY
24195: ST_TO_ADDR
// if Crawls ( un ) then
24196: LD_VAR 0 2
24200: PPUSH
24201: CALL_OW 318
24205: IFFALSE 24216
// ComWalk ( un ) ;
24207: LD_VAR 0 2
24211: PPUSH
24212: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_INT 9
24223: PPUSH
24224: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24228: LD_INT 28
24230: PPUSH
24231: LD_OWVAR 2
24235: PPUSH
24236: LD_INT 2
24238: PPUSH
24239: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24243: LD_INT 29
24245: PPUSH
24246: LD_OWVAR 2
24250: PPUSH
24251: LD_INT 2
24253: PPUSH
24254: CALL_OW 322
// end ;
24258: PPOPN 3
24260: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24261: LD_EXP 48
24265: PUSH
24266: LD_EXP 91
24270: AND
24271: IFFALSE 24382
24273: GO 24275
24275: DISABLE
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
24280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_INT 22
24288: PUSH
24289: LD_OWVAR 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 25
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PPUSH
24312: CALL_OW 69
24316: ST_TO_ADDR
// if not tmp then
24317: LD_VAR 0 3
24321: NOT
24322: IFFALSE 24326
// exit ;
24324: GO 24382
// un := tmp [ rand ( 1 , tmp ) ] ;
24326: LD_ADDR_VAR 0 2
24330: PUSH
24331: LD_VAR 0 3
24335: PUSH
24336: LD_INT 1
24338: PPUSH
24339: LD_VAR 0 3
24343: PPUSH
24344: CALL_OW 12
24348: ARRAY
24349: ST_TO_ADDR
// if Crawls ( un ) then
24350: LD_VAR 0 2
24354: PPUSH
24355: CALL_OW 318
24359: IFFALSE 24370
// ComWalk ( un ) ;
24361: LD_VAR 0 2
24365: PPUSH
24366: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24370: LD_VAR 0 2
24374: PPUSH
24375: LD_INT 8
24377: PPUSH
24378: CALL_OW 336
// end ;
24382: PPOPN 3
24384: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24385: LD_EXP 48
24389: PUSH
24390: LD_EXP 92
24394: AND
24395: IFFALSE 24539
24397: GO 24399
24399: DISABLE
24400: LD_INT 0
24402: PPUSH
24403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_INT 22
24411: PUSH
24412: LD_OWVAR 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 34
24436: PUSH
24437: LD_INT 12
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 34
24446: PUSH
24447: LD_INT 51
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: LD_INT 32
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: ST_TO_ADDR
// if not tmp then
24480: LD_VAR 0 2
24484: NOT
24485: IFFALSE 24489
// exit ;
24487: GO 24539
// for i in tmp do
24489: LD_ADDR_VAR 0 1
24493: PUSH
24494: LD_VAR 0 2
24498: PUSH
24499: FOR_IN
24500: IFFALSE 24537
// if GetCargo ( i , mat_artifact ) = 0 then
24502: LD_VAR 0 1
24506: PPUSH
24507: LD_INT 4
24509: PPUSH
24510: CALL_OW 289
24514: PUSH
24515: LD_INT 0
24517: EQUAL
24518: IFFALSE 24535
// SetCargo ( i , mat_siberit , 100 ) ;
24520: LD_VAR 0 1
24524: PPUSH
24525: LD_INT 3
24527: PPUSH
24528: LD_INT 100
24530: PPUSH
24531: CALL_OW 290
24535: GO 24499
24537: POP
24538: POP
// end ;
24539: PPOPN 2
24541: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24542: LD_EXP 48
24546: PUSH
24547: LD_EXP 93
24551: AND
24552: IFFALSE 24735
24554: GO 24556
24556: DISABLE
24557: LD_INT 0
24559: PPUSH
24560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24561: LD_ADDR_VAR 0 2
24565: PUSH
24566: LD_INT 22
24568: PUSH
24569: LD_OWVAR 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PPUSH
24578: CALL_OW 69
24582: ST_TO_ADDR
// if not tmp then
24583: LD_VAR 0 2
24587: NOT
24588: IFFALSE 24592
// exit ;
24590: GO 24735
// for i := 1 to 2 do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: DOUBLE
24598: LD_INT 1
24600: DEC
24601: ST_TO_ADDR
24602: LD_INT 2
24604: PUSH
24605: FOR_TO
24606: IFFALSE 24733
// begin uc_side := your_side ;
24608: LD_ADDR_OWVAR 20
24612: PUSH
24613: LD_OWVAR 2
24617: ST_TO_ADDR
// uc_nation := nation_american ;
24618: LD_ADDR_OWVAR 21
24622: PUSH
24623: LD_INT 1
24625: ST_TO_ADDR
// vc_chassis := us_morphling ;
24626: LD_ADDR_OWVAR 37
24630: PUSH
24631: LD_INT 5
24633: ST_TO_ADDR
// vc_engine := engine_siberite ;
24634: LD_ADDR_OWVAR 39
24638: PUSH
24639: LD_INT 3
24641: ST_TO_ADDR
// vc_control := control_computer ;
24642: LD_ADDR_OWVAR 38
24646: PUSH
24647: LD_INT 3
24649: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24650: LD_ADDR_OWVAR 40
24654: PUSH
24655: LD_INT 10
24657: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24658: LD_VAR 0 2
24662: PUSH
24663: LD_INT 1
24665: ARRAY
24666: PPUSH
24667: CALL_OW 310
24671: NOT
24672: IFFALSE 24719
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24674: CALL_OW 45
24678: PPUSH
24679: LD_VAR 0 2
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: PPUSH
24688: CALL_OW 250
24692: PPUSH
24693: LD_VAR 0 2
24697: PUSH
24698: LD_INT 1
24700: ARRAY
24701: PPUSH
24702: CALL_OW 251
24706: PPUSH
24707: LD_INT 12
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 50
24717: GO 24731
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24719: CALL_OW 45
24723: PPUSH
24724: LD_INT 1
24726: PPUSH
24727: CALL_OW 51
// end ;
24731: GO 24605
24733: POP
24734: POP
// end ;
24735: PPOPN 2
24737: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24738: LD_EXP 48
24742: PUSH
24743: LD_EXP 94
24747: AND
24748: IFFALSE 24970
24750: GO 24752
24752: DISABLE
24753: LD_INT 0
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24761: LD_ADDR_VAR 0 6
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_OWVAR 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 3
24790: PUSH
24791: LD_INT 23
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: ST_TO_ADDR
// if not tmp then
24815: LD_VAR 0 6
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24970
// s1 := rand ( 1 , 4 ) ;
24824: LD_ADDR_VAR 0 2
24828: PUSH
24829: LD_INT 1
24831: PPUSH
24832: LD_INT 4
24834: PPUSH
24835: CALL_OW 12
24839: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24840: LD_ADDR_VAR 0 4
24844: PUSH
24845: LD_VAR 0 6
24849: PUSH
24850: LD_INT 1
24852: ARRAY
24853: PPUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: CALL_OW 259
24863: ST_TO_ADDR
// if s1 = 1 then
24864: LD_VAR 0 2
24868: PUSH
24869: LD_INT 1
24871: EQUAL
24872: IFFALSE 24892
// s2 := rand ( 2 , 4 ) else
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_INT 2
24881: PPUSH
24882: LD_INT 4
24884: PPUSH
24885: CALL_OW 12
24889: ST_TO_ADDR
24890: GO 24900
// s2 := 1 ;
24892: LD_ADDR_VAR 0 3
24896: PUSH
24897: LD_INT 1
24899: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24900: LD_ADDR_VAR 0 5
24904: PUSH
24905: LD_VAR 0 6
24909: PUSH
24910: LD_INT 1
24912: ARRAY
24913: PPUSH
24914: LD_VAR 0 3
24918: PPUSH
24919: CALL_OW 259
24923: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24924: LD_VAR 0 6
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PPUSH
24933: LD_VAR 0 2
24937: PPUSH
24938: LD_VAR 0 5
24942: PPUSH
24943: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24947: LD_VAR 0 6
24951: PUSH
24952: LD_INT 1
24954: ARRAY
24955: PPUSH
24956: LD_VAR 0 3
24960: PPUSH
24961: LD_VAR 0 4
24965: PPUSH
24966: CALL_OW 237
// end ;
24970: PPOPN 6
24972: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24973: LD_EXP 48
24977: PUSH
24978: LD_EXP 95
24982: AND
24983: IFFALSE 25062
24985: GO 24987
24987: DISABLE
24988: LD_INT 0
24990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24991: LD_ADDR_VAR 0 1
24995: PUSH
24996: LD_INT 22
24998: PUSH
24999: LD_OWVAR 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 30
25010: PUSH
25011: LD_INT 3
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PPUSH
25022: CALL_OW 69
25026: ST_TO_ADDR
// if not tmp then
25027: LD_VAR 0 1
25031: NOT
25032: IFFALSE 25036
// exit ;
25034: GO 25062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25036: LD_VAR 0 1
25040: PUSH
25041: LD_INT 1
25043: PPUSH
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 12
25053: ARRAY
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 234
// end ;
25062: PPOPN 1
25064: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25065: LD_EXP 48
25069: PUSH
25070: LD_EXP 96
25074: AND
25075: IFFALSE 25187
25077: GO 25079
25079: DISABLE
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25084: LD_ADDR_VAR 0 2
25088: PUSH
25089: LD_INT 22
25091: PUSH
25092: LD_OWVAR 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 2
25103: PUSH
25104: LD_INT 30
25106: PUSH
25107: LD_INT 27
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 30
25116: PUSH
25117: LD_INT 26
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 30
25126: PUSH
25127: LD_INT 28
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PPUSH
25144: CALL_OW 69
25148: ST_TO_ADDR
// if not tmp then
25149: LD_VAR 0 2
25153: NOT
25154: IFFALSE 25158
// exit ;
25156: GO 25187
// for i in tmp do
25158: LD_ADDR_VAR 0 1
25162: PUSH
25163: LD_VAR 0 2
25167: PUSH
25168: FOR_IN
25169: IFFALSE 25185
// SetLives ( i , 1 ) ;
25171: LD_VAR 0 1
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: CALL_OW 234
25183: GO 25168
25185: POP
25186: POP
// end ;
25187: PPOPN 2
25189: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25190: LD_EXP 48
25194: PUSH
25195: LD_EXP 97
25199: AND
25200: IFFALSE 25474
25202: GO 25204
25204: DISABLE
25205: LD_INT 0
25207: PPUSH
25208: PPUSH
25209: PPUSH
// begin i := rand ( 1 , 7 ) ;
25210: LD_ADDR_VAR 0 1
25214: PUSH
25215: LD_INT 1
25217: PPUSH
25218: LD_INT 7
25220: PPUSH
25221: CALL_OW 12
25225: ST_TO_ADDR
// case i of 1 :
25226: LD_VAR 0 1
25230: PUSH
25231: LD_INT 1
25233: DOUBLE
25234: EQUAL
25235: IFTRUE 25239
25237: GO 25249
25239: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25240: LD_STRING earthquake(getX(game), 0, 32)
25242: PPUSH
25243: CALL_OW 559
25247: GO 25474
25249: LD_INT 2
25251: DOUBLE
25252: EQUAL
25253: IFTRUE 25257
25255: GO 25271
25257: POP
// begin ToLua ( displayStucuk(); ) ;
25258: LD_STRING displayStucuk();
25260: PPUSH
25261: CALL_OW 559
// ResetFog ;
25265: CALL_OW 335
// end ; 3 :
25269: GO 25474
25271: LD_INT 3
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25383
25279: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: LD_INT 22
25287: PUSH
25288: LD_OWVAR 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 25
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PPUSH
25311: CALL_OW 69
25315: ST_TO_ADDR
// if not tmp then
25316: LD_VAR 0 2
25320: NOT
25321: IFFALSE 25325
// exit ;
25323: GO 25474
// un := tmp [ rand ( 1 , tmp ) ] ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: LD_INT 1
25337: PPUSH
25338: LD_VAR 0 2
25342: PPUSH
25343: CALL_OW 12
25347: ARRAY
25348: ST_TO_ADDR
// if Crawls ( un ) then
25349: LD_VAR 0 3
25353: PPUSH
25354: CALL_OW 318
25358: IFFALSE 25369
// ComWalk ( un ) ;
25360: LD_VAR 0 3
25364: PPUSH
25365: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25369: LD_VAR 0 3
25373: PPUSH
25374: LD_INT 8
25376: PPUSH
25377: CALL_OW 336
// end ; 4 :
25381: GO 25474
25383: LD_INT 4
25385: DOUBLE
25386: EQUAL
25387: IFTRUE 25391
25389: GO 25452
25391: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25392: LD_ADDR_VAR 0 2
25396: PUSH
25397: LD_INT 22
25399: PUSH
25400: LD_OWVAR 2
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 30
25411: PUSH
25412: LD_INT 29
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PPUSH
25423: CALL_OW 69
25427: ST_TO_ADDR
// if not tmp then
25428: LD_VAR 0 2
25432: NOT
25433: IFFALSE 25437
// exit ;
25435: GO 25474
// DestroyUnit ( tmp [ 1 ] ) ;
25437: LD_VAR 0 2
25441: PUSH
25442: LD_INT 1
25444: ARRAY
25445: PPUSH
25446: CALL_OW 65
// end ; 5 .. 7 :
25450: GO 25474
25452: LD_INT 5
25454: DOUBLE
25455: GREATEREQUAL
25456: IFFALSE 25464
25458: LD_INT 7
25460: DOUBLE
25461: LESSEQUAL
25462: IFTRUE 25466
25464: GO 25473
25466: POP
// StreamSibBomb ; end ;
25467: CALL 21724 0 0
25471: GO 25474
25473: POP
// end ;
25474: PPOPN 3
25476: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25477: LD_EXP 48
25481: PUSH
25482: LD_EXP 98
25486: AND
25487: IFFALSE 25643
25489: GO 25491
25491: DISABLE
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
25496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25497: LD_ADDR_VAR 0 2
25501: PUSH
25502: LD_INT 81
25504: PUSH
25505: LD_OWVAR 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 21
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 21
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: ST_TO_ADDR
// if not tmp then
25551: LD_VAR 0 2
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 25643
// p := 0 ;
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25568: LD_INT 35
25570: PPUSH
25571: CALL_OW 67
// p := p + 1 ;
25575: LD_ADDR_VAR 0 3
25579: PUSH
25580: LD_VAR 0 3
25584: PUSH
25585: LD_INT 1
25587: PLUS
25588: ST_TO_ADDR
// for i in tmp do
25589: LD_ADDR_VAR 0 1
25593: PUSH
25594: LD_VAR 0 2
25598: PUSH
25599: FOR_IN
25600: IFFALSE 25631
// if GetLives ( i ) < 1000 then
25602: LD_VAR 0 1
25606: PPUSH
25607: CALL_OW 256
25611: PUSH
25612: LD_INT 1000
25614: LESS
25615: IFFALSE 25629
// SetLives ( i , 1000 ) ;
25617: LD_VAR 0 1
25621: PPUSH
25622: LD_INT 1000
25624: PPUSH
25625: CALL_OW 234
25629: GO 25599
25631: POP
25632: POP
// until p > 20 ;
25633: LD_VAR 0 3
25637: PUSH
25638: LD_INT 20
25640: GREATER
25641: IFFALSE 25568
// end ;
25643: PPOPN 3
25645: END
// every 0 0$1 trigger StreamModeActive and sTime do
25646: LD_EXP 48
25650: PUSH
25651: LD_EXP 99
25655: AND
25656: IFFALSE 25691
25658: GO 25660
25660: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25661: LD_INT 28
25663: PPUSH
25664: LD_OWVAR 2
25668: PPUSH
25669: LD_INT 2
25671: PPUSH
25672: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25676: LD_INT 30
25678: PPUSH
25679: LD_OWVAR 2
25683: PPUSH
25684: LD_INT 2
25686: PPUSH
25687: CALL_OW 322
// end ;
25691: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25692: LD_EXP 48
25696: PUSH
25697: LD_EXP 100
25701: AND
25702: IFFALSE 25823
25704: GO 25706
25706: DISABLE
25707: LD_INT 0
25709: PPUSH
25710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_OWVAR 2
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 21
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: LD_INT 23
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 69
25764: ST_TO_ADDR
// if not tmp then
25765: LD_VAR 0 2
25769: NOT
25770: IFFALSE 25774
// exit ;
25772: GO 25823
// for i in tmp do
25774: LD_ADDR_VAR 0 1
25778: PUSH
25779: LD_VAR 0 2
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25821
// begin if Crawls ( i ) then
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 318
25796: IFFALSE 25807
// ComWalk ( i ) ;
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 138
// SetClass ( i , 2 ) ;
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_INT 2
25814: PPUSH
25815: CALL_OW 336
// end ;
25819: GO 25784
25821: POP
25822: POP
// end ;
25823: PPOPN 2
25825: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25826: LD_EXP 48
25830: PUSH
25831: LD_EXP 101
25835: AND
25836: IFFALSE 26117
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
25845: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25846: LD_OWVAR 2
25850: PPUSH
25851: LD_INT 9
25853: PPUSH
25854: LD_INT 1
25856: PPUSH
25857: LD_INT 1
25859: PPUSH
25860: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25864: LD_INT 9
25866: PPUSH
25867: LD_OWVAR 2
25871: PPUSH
25872: CALL_OW 343
// uc_side := 9 ;
25876: LD_ADDR_OWVAR 20
25880: PUSH
25881: LD_INT 9
25883: ST_TO_ADDR
// uc_nation := 2 ;
25884: LD_ADDR_OWVAR 21
25888: PUSH
25889: LD_INT 2
25891: ST_TO_ADDR
// hc_name := Dark Warrior ;
25892: LD_ADDR_OWVAR 26
25896: PUSH
25897: LD_STRING Dark Warrior
25899: ST_TO_ADDR
// hc_gallery :=  ;
25900: LD_ADDR_OWVAR 33
25904: PUSH
25905: LD_STRING 
25907: ST_TO_ADDR
// hc_noskilllimit := true ;
25908: LD_ADDR_OWVAR 76
25912: PUSH
25913: LD_INT 1
25915: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25916: LD_ADDR_OWVAR 31
25920: PUSH
25921: LD_INT 30
25923: PUSH
25924: LD_INT 30
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: LD_INT 30
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// un := CreateHuman ;
25939: LD_ADDR_VAR 0 3
25943: PUSH
25944: CALL_OW 44
25948: ST_TO_ADDR
// hc_noskilllimit := false ;
25949: LD_ADDR_OWVAR 76
25953: PUSH
25954: LD_INT 0
25956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25957: LD_VAR 0 3
25961: PPUSH
25962: LD_INT 1
25964: PPUSH
25965: CALL_OW 51
// p := 0 ;
25969: LD_ADDR_VAR 0 2
25973: PUSH
25974: LD_INT 0
25976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25977: LD_INT 35
25979: PPUSH
25980: CALL_OW 67
// p := p + 1 ;
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_VAR 0 2
25993: PUSH
25994: LD_INT 1
25996: PLUS
25997: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25998: LD_VAR 0 3
26002: PPUSH
26003: CALL_OW 256
26007: PUSH
26008: LD_INT 1000
26010: LESS
26011: IFFALSE 26025
// SetLives ( un , 1000 ) ;
26013: LD_VAR 0 3
26017: PPUSH
26018: LD_INT 1000
26020: PPUSH
26021: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26025: LD_VAR 0 3
26029: PPUSH
26030: LD_INT 81
26032: PUSH
26033: LD_OWVAR 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 91
26044: PUSH
26045: LD_VAR 0 3
26049: PUSH
26050: LD_INT 30
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PPUSH
26062: CALL_OW 69
26066: PPUSH
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 74
26076: PPUSH
26077: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26081: LD_VAR 0 2
26085: PUSH
26086: LD_INT 60
26088: GREATER
26089: PUSH
26090: LD_VAR 0 3
26094: PPUSH
26095: CALL_OW 301
26099: OR
26100: IFFALSE 25977
// if un then
26102: LD_VAR 0 3
26106: IFFALSE 26117
// RemoveUnit ( un ) ;
26108: LD_VAR 0 3
26112: PPUSH
26113: CALL_OW 64
// end ;
26117: PPOPN 3
26119: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26120: LD_INT 0
26122: PPUSH
// case cmd of 301 :
26123: LD_VAR 0 1
26127: PUSH
26128: LD_INT 301
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26168
26136: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26137: LD_VAR 0 6
26141: PPUSH
26142: LD_VAR 0 7
26146: PPUSH
26147: LD_VAR 0 8
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: CALL 27369 0 5
26166: GO 26289
26168: LD_INT 302
26170: DOUBLE
26171: EQUAL
26172: IFTRUE 26176
26174: GO 26213
26176: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26177: LD_VAR 0 6
26181: PPUSH
26182: LD_VAR 0 7
26186: PPUSH
26187: LD_VAR 0 8
26191: PPUSH
26192: LD_VAR 0 9
26196: PPUSH
26197: LD_VAR 0 4
26201: PPUSH
26202: LD_VAR 0 5
26206: PPUSH
26207: CALL 27460 0 6
26211: GO 26289
26213: LD_INT 303
26215: DOUBLE
26216: EQUAL
26217: IFTRUE 26221
26219: GO 26258
26221: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_VAR 0 7
26231: PPUSH
26232: LD_VAR 0 8
26236: PPUSH
26237: LD_VAR 0 9
26241: PPUSH
26242: LD_VAR 0 4
26246: PPUSH
26247: LD_VAR 0 5
26251: PPUSH
26252: CALL 26294 0 6
26256: GO 26289
26258: LD_INT 304
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26266
26264: GO 26288
26266: POP
// hHackTeleport ( unit , x , y ) ; end ;
26267: LD_VAR 0 2
26271: PPUSH
26272: LD_VAR 0 4
26276: PPUSH
26277: LD_VAR 0 5
26281: PPUSH
26282: CALL 28053 0 3
26286: GO 26289
26288: POP
// end ;
26289: LD_VAR 0 12
26293: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26294: LD_INT 0
26296: PPUSH
26297: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 1
26305: LESS
26306: PUSH
26307: LD_VAR 0 1
26311: PUSH
26312: LD_INT 3
26314: GREATER
26315: OR
26316: PUSH
26317: LD_VAR 0 5
26321: PPUSH
26322: LD_VAR 0 6
26326: PPUSH
26327: CALL_OW 428
26331: OR
26332: IFFALSE 26336
// exit ;
26334: GO 27056
// uc_side := your_side ;
26336: LD_ADDR_OWVAR 20
26340: PUSH
26341: LD_OWVAR 2
26345: ST_TO_ADDR
// uc_nation := nation ;
26346: LD_ADDR_OWVAR 21
26350: PUSH
26351: LD_VAR 0 1
26355: ST_TO_ADDR
// bc_level = 1 ;
26356: LD_ADDR_OWVAR 43
26360: PUSH
26361: LD_INT 1
26363: ST_TO_ADDR
// case btype of 1 :
26364: LD_VAR 0 2
26368: PUSH
26369: LD_INT 1
26371: DOUBLE
26372: EQUAL
26373: IFTRUE 26377
26375: GO 26388
26377: POP
// bc_type := b_depot ; 2 :
26378: LD_ADDR_OWVAR 42
26382: PUSH
26383: LD_INT 0
26385: ST_TO_ADDR
26386: GO 27000
26388: LD_INT 2
26390: DOUBLE
26391: EQUAL
26392: IFTRUE 26396
26394: GO 26407
26396: POP
// bc_type := b_warehouse ; 3 :
26397: LD_ADDR_OWVAR 42
26401: PUSH
26402: LD_INT 1
26404: ST_TO_ADDR
26405: GO 27000
26407: LD_INT 3
26409: DOUBLE
26410: EQUAL
26411: IFTRUE 26415
26413: GO 26426
26415: POP
// bc_type := b_lab ; 4 .. 9 :
26416: LD_ADDR_OWVAR 42
26420: PUSH
26421: LD_INT 6
26423: ST_TO_ADDR
26424: GO 27000
26426: LD_INT 4
26428: DOUBLE
26429: GREATEREQUAL
26430: IFFALSE 26438
26432: LD_INT 9
26434: DOUBLE
26435: LESSEQUAL
26436: IFTRUE 26440
26438: GO 26492
26440: POP
// begin bc_type := b_lab_half ;
26441: LD_ADDR_OWVAR 42
26445: PUSH
26446: LD_INT 7
26448: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26449: LD_ADDR_OWVAR 44
26453: PUSH
26454: LD_INT 10
26456: PUSH
26457: LD_INT 11
26459: PUSH
26460: LD_INT 12
26462: PUSH
26463: LD_INT 15
26465: PUSH
26466: LD_INT 14
26468: PUSH
26469: LD_INT 13
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: PUSH
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 3
26487: MINUS
26488: ARRAY
26489: ST_TO_ADDR
// end ; 10 .. 13 :
26490: GO 27000
26492: LD_INT 10
26494: DOUBLE
26495: GREATEREQUAL
26496: IFFALSE 26504
26498: LD_INT 13
26500: DOUBLE
26501: LESSEQUAL
26502: IFTRUE 26506
26504: GO 26583
26506: POP
// begin bc_type := b_lab_full ;
26507: LD_ADDR_OWVAR 42
26511: PUSH
26512: LD_INT 8
26514: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26515: LD_ADDR_OWVAR 44
26519: PUSH
26520: LD_INT 10
26522: PUSH
26523: LD_INT 12
26525: PUSH
26526: LD_INT 14
26528: PUSH
26529: LD_INT 13
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: PUSH
26538: LD_VAR 0 2
26542: PUSH
26543: LD_INT 9
26545: MINUS
26546: ARRAY
26547: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26548: LD_ADDR_OWVAR 45
26552: PUSH
26553: LD_INT 11
26555: PUSH
26556: LD_INT 15
26558: PUSH
26559: LD_INT 12
26561: PUSH
26562: LD_INT 15
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: LD_INT 9
26578: MINUS
26579: ARRAY
26580: ST_TO_ADDR
// end ; 14 :
26581: GO 27000
26583: LD_INT 14
26585: DOUBLE
26586: EQUAL
26587: IFTRUE 26591
26589: GO 26602
26591: POP
// bc_type := b_workshop ; 15 :
26592: LD_ADDR_OWVAR 42
26596: PUSH
26597: LD_INT 2
26599: ST_TO_ADDR
26600: GO 27000
26602: LD_INT 15
26604: DOUBLE
26605: EQUAL
26606: IFTRUE 26610
26608: GO 26621
26610: POP
// bc_type := b_factory ; 16 :
26611: LD_ADDR_OWVAR 42
26615: PUSH
26616: LD_INT 3
26618: ST_TO_ADDR
26619: GO 27000
26621: LD_INT 16
26623: DOUBLE
26624: EQUAL
26625: IFTRUE 26629
26627: GO 26640
26629: POP
// bc_type := b_ext_gun ; 17 :
26630: LD_ADDR_OWVAR 42
26634: PUSH
26635: LD_INT 17
26637: ST_TO_ADDR
26638: GO 27000
26640: LD_INT 17
26642: DOUBLE
26643: EQUAL
26644: IFTRUE 26648
26646: GO 26676
26648: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26649: LD_ADDR_OWVAR 42
26653: PUSH
26654: LD_INT 19
26656: PUSH
26657: LD_INT 23
26659: PUSH
26660: LD_INT 19
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: PUSH
26668: LD_VAR 0 1
26672: ARRAY
26673: ST_TO_ADDR
26674: GO 27000
26676: LD_INT 18
26678: DOUBLE
26679: EQUAL
26680: IFTRUE 26684
26682: GO 26695
26684: POP
// bc_type := b_ext_radar ; 19 :
26685: LD_ADDR_OWVAR 42
26689: PUSH
26690: LD_INT 20
26692: ST_TO_ADDR
26693: GO 27000
26695: LD_INT 19
26697: DOUBLE
26698: EQUAL
26699: IFTRUE 26703
26701: GO 26714
26703: POP
// bc_type := b_ext_radio ; 20 :
26704: LD_ADDR_OWVAR 42
26708: PUSH
26709: LD_INT 22
26711: ST_TO_ADDR
26712: GO 27000
26714: LD_INT 20
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26733
26722: POP
// bc_type := b_ext_siberium ; 21 :
26723: LD_ADDR_OWVAR 42
26727: PUSH
26728: LD_INT 21
26730: ST_TO_ADDR
26731: GO 27000
26733: LD_INT 21
26735: DOUBLE
26736: EQUAL
26737: IFTRUE 26741
26739: GO 26752
26741: POP
// bc_type := b_ext_computer ; 22 :
26742: LD_ADDR_OWVAR 42
26746: PUSH
26747: LD_INT 24
26749: ST_TO_ADDR
26750: GO 27000
26752: LD_INT 22
26754: DOUBLE
26755: EQUAL
26756: IFTRUE 26760
26758: GO 26771
26760: POP
// bc_type := b_ext_track ; 23 :
26761: LD_ADDR_OWVAR 42
26765: PUSH
26766: LD_INT 16
26768: ST_TO_ADDR
26769: GO 27000
26771: LD_INT 23
26773: DOUBLE
26774: EQUAL
26775: IFTRUE 26779
26777: GO 26790
26779: POP
// bc_type := b_ext_laser ; 24 :
26780: LD_ADDR_OWVAR 42
26784: PUSH
26785: LD_INT 25
26787: ST_TO_ADDR
26788: GO 27000
26790: LD_INT 24
26792: DOUBLE
26793: EQUAL
26794: IFTRUE 26798
26796: GO 26809
26798: POP
// bc_type := b_control_tower ; 25 :
26799: LD_ADDR_OWVAR 42
26803: PUSH
26804: LD_INT 36
26806: ST_TO_ADDR
26807: GO 27000
26809: LD_INT 25
26811: DOUBLE
26812: EQUAL
26813: IFTRUE 26817
26815: GO 26828
26817: POP
// bc_type := b_breastwork ; 26 :
26818: LD_ADDR_OWVAR 42
26822: PUSH
26823: LD_INT 31
26825: ST_TO_ADDR
26826: GO 27000
26828: LD_INT 26
26830: DOUBLE
26831: EQUAL
26832: IFTRUE 26836
26834: GO 26847
26836: POP
// bc_type := b_bunker ; 27 :
26837: LD_ADDR_OWVAR 42
26841: PUSH
26842: LD_INT 32
26844: ST_TO_ADDR
26845: GO 27000
26847: LD_INT 27
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26866
26855: POP
// bc_type := b_turret ; 28 :
26856: LD_ADDR_OWVAR 42
26860: PUSH
26861: LD_INT 33
26863: ST_TO_ADDR
26864: GO 27000
26866: LD_INT 28
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26885
26874: POP
// bc_type := b_armoury ; 29 :
26875: LD_ADDR_OWVAR 42
26879: PUSH
26880: LD_INT 4
26882: ST_TO_ADDR
26883: GO 27000
26885: LD_INT 29
26887: DOUBLE
26888: EQUAL
26889: IFTRUE 26893
26891: GO 26904
26893: POP
// bc_type := b_barracks ; 30 :
26894: LD_ADDR_OWVAR 42
26898: PUSH
26899: LD_INT 5
26901: ST_TO_ADDR
26902: GO 27000
26904: LD_INT 30
26906: DOUBLE
26907: EQUAL
26908: IFTRUE 26912
26910: GO 26923
26912: POP
// bc_type := b_solar_power ; 31 :
26913: LD_ADDR_OWVAR 42
26917: PUSH
26918: LD_INT 27
26920: ST_TO_ADDR
26921: GO 27000
26923: LD_INT 31
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26931
26929: GO 26942
26931: POP
// bc_type := b_oil_power ; 32 :
26932: LD_ADDR_OWVAR 42
26936: PUSH
26937: LD_INT 26
26939: ST_TO_ADDR
26940: GO 27000
26942: LD_INT 32
26944: DOUBLE
26945: EQUAL
26946: IFTRUE 26950
26948: GO 26961
26950: POP
// bc_type := b_siberite_power ; 33 :
26951: LD_ADDR_OWVAR 42
26955: PUSH
26956: LD_INT 28
26958: ST_TO_ADDR
26959: GO 27000
26961: LD_INT 33
26963: DOUBLE
26964: EQUAL
26965: IFTRUE 26969
26967: GO 26980
26969: POP
// bc_type := b_oil_mine ; 34 :
26970: LD_ADDR_OWVAR 42
26974: PUSH
26975: LD_INT 29
26977: ST_TO_ADDR
26978: GO 27000
26980: LD_INT 34
26982: DOUBLE
26983: EQUAL
26984: IFTRUE 26988
26986: GO 26999
26988: POP
// bc_type := b_siberite_mine ; end ;
26989: LD_ADDR_OWVAR 42
26993: PUSH
26994: LD_INT 30
26996: ST_TO_ADDR
26997: GO 27000
26999: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27000: LD_ADDR_VAR 0 8
27004: PUSH
27005: LD_VAR 0 5
27009: PPUSH
27010: LD_VAR 0 6
27014: PPUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: CALL_OW 47
27024: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27025: LD_OWVAR 42
27029: PUSH
27030: LD_INT 32
27032: PUSH
27033: LD_INT 33
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: IN
27040: IFFALSE 27056
// PlaceWeaponTurret ( b , weapon ) ;
27042: LD_VAR 0 8
27046: PPUSH
27047: LD_VAR 0 4
27051: PPUSH
27052: CALL_OW 431
// end ;
27056: LD_VAR 0 7
27060: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
27065: PPUSH
27066: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27067: LD_ADDR_VAR 0 4
27071: PUSH
27072: LD_INT 22
27074: PUSH
27075: LD_OWVAR 2
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 30
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 30
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 69
27120: ST_TO_ADDR
// if not tmp then
27121: LD_VAR 0 4
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 27189
// for i in tmp do
27130: LD_ADDR_VAR 0 2
27134: PUSH
27135: LD_VAR 0 4
27139: PUSH
27140: FOR_IN
27141: IFFALSE 27187
// for j = 1 to 3 do
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: DOUBLE
27149: LD_INT 1
27151: DEC
27152: ST_TO_ADDR
27153: LD_INT 3
27155: PUSH
27156: FOR_TO
27157: IFFALSE 27183
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27159: LD_VAR 0 2
27163: PPUSH
27164: CALL_OW 274
27168: PPUSH
27169: LD_VAR 0 3
27173: PPUSH
27174: LD_INT 99999
27176: PPUSH
27177: CALL_OW 277
27181: GO 27156
27183: POP
27184: POP
27185: GO 27140
27187: POP
27188: POP
// end ;
27189: LD_VAR 0 1
27193: RET
// export function hHackSetLevel10 ; var i , j ; begin
27194: LD_INT 0
27196: PPUSH
27197: PPUSH
27198: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27199: LD_ADDR_VAR 0 2
27203: PUSH
27204: LD_INT 21
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PPUSH
27214: CALL_OW 69
27218: PUSH
27219: FOR_IN
27220: IFFALSE 27272
// if IsSelected ( i ) then
27222: LD_VAR 0 2
27226: PPUSH
27227: CALL_OW 306
27231: IFFALSE 27270
// begin for j := 1 to 4 do
27233: LD_ADDR_VAR 0 3
27237: PUSH
27238: DOUBLE
27239: LD_INT 1
27241: DEC
27242: ST_TO_ADDR
27243: LD_INT 4
27245: PUSH
27246: FOR_TO
27247: IFFALSE 27268
// SetSkill ( i , j , 10 ) ;
27249: LD_VAR 0 2
27253: PPUSH
27254: LD_VAR 0 3
27258: PPUSH
27259: LD_INT 10
27261: PPUSH
27262: CALL_OW 237
27266: GO 27246
27268: POP
27269: POP
// end ;
27270: GO 27219
27272: POP
27273: POP
// end ;
27274: LD_VAR 0 1
27278: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27279: LD_INT 0
27281: PPUSH
27282: PPUSH
27283: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27284: LD_ADDR_VAR 0 2
27288: PUSH
27289: LD_INT 22
27291: PUSH
27292: LD_OWVAR 2
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 21
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PPUSH
27315: CALL_OW 69
27319: PUSH
27320: FOR_IN
27321: IFFALSE 27362
// begin for j := 1 to 4 do
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: DOUBLE
27329: LD_INT 1
27331: DEC
27332: ST_TO_ADDR
27333: LD_INT 4
27335: PUSH
27336: FOR_TO
27337: IFFALSE 27358
// SetSkill ( i , j , 10 ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: LD_VAR 0 3
27348: PPUSH
27349: LD_INT 10
27351: PPUSH
27352: CALL_OW 237
27356: GO 27336
27358: POP
27359: POP
// end ;
27360: GO 27320
27362: POP
27363: POP
// end ;
27364: LD_VAR 0 1
27368: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27369: LD_INT 0
27371: PPUSH
// uc_side := your_side ;
27372: LD_ADDR_OWVAR 20
27376: PUSH
27377: LD_OWVAR 2
27381: ST_TO_ADDR
// uc_nation := nation ;
27382: LD_ADDR_OWVAR 21
27386: PUSH
27387: LD_VAR 0 1
27391: ST_TO_ADDR
// InitHc ;
27392: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27396: LD_INT 0
27398: PPUSH
27399: LD_VAR 0 2
27403: PPUSH
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27413: LD_VAR 0 4
27417: PPUSH
27418: LD_VAR 0 5
27422: PPUSH
27423: CALL_OW 428
27427: PUSH
27428: LD_INT 0
27430: EQUAL
27431: IFFALSE 27455
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27433: CALL_OW 44
27437: PPUSH
27438: LD_VAR 0 4
27442: PPUSH
27443: LD_VAR 0 5
27447: PPUSH
27448: LD_INT 1
27450: PPUSH
27451: CALL_OW 48
// end ;
27455: LD_VAR 0 6
27459: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27460: LD_INT 0
27462: PPUSH
27463: PPUSH
// uc_side := your_side ;
27464: LD_ADDR_OWVAR 20
27468: PUSH
27469: LD_OWVAR 2
27473: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: LD_INT 3
27487: PUSH
27488: LD_INT 4
27490: PUSH
27491: LD_INT 5
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: IN
27501: IFFALSE 27513
// uc_nation := nation_american else
27503: LD_ADDR_OWVAR 21
27507: PUSH
27508: LD_INT 1
27510: ST_TO_ADDR
27511: GO 27556
// if chassis in [ 11 , 12 , 13 , 14 ] then
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 11
27520: PUSH
27521: LD_INT 12
27523: PUSH
27524: LD_INT 13
27526: PUSH
27527: LD_INT 14
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: IN
27536: IFFALSE 27548
// uc_nation := nation_arabian else
27538: LD_ADDR_OWVAR 21
27542: PUSH
27543: LD_INT 2
27545: ST_TO_ADDR
27546: GO 27556
// uc_nation := nation_russian ;
27548: LD_ADDR_OWVAR 21
27552: PUSH
27553: LD_INT 3
27555: ST_TO_ADDR
// vc_chassis := chassis ;
27556: LD_ADDR_OWVAR 37
27560: PUSH
27561: LD_VAR 0 1
27565: ST_TO_ADDR
// vc_engine := engine ;
27566: LD_ADDR_OWVAR 39
27570: PUSH
27571: LD_VAR 0 2
27575: ST_TO_ADDR
// vc_control := control ;
27576: LD_ADDR_OWVAR 38
27580: PUSH
27581: LD_VAR 0 3
27585: ST_TO_ADDR
// vc_weapon := weapon ;
27586: LD_ADDR_OWVAR 40
27590: PUSH
27591: LD_VAR 0 4
27595: ST_TO_ADDR
// un := CreateVehicle ;
27596: LD_ADDR_VAR 0 8
27600: PUSH
27601: CALL_OW 45
27605: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27606: LD_VAR 0 8
27610: PPUSH
27611: LD_INT 0
27613: PPUSH
27614: LD_INT 5
27616: PPUSH
27617: CALL_OW 12
27621: PPUSH
27622: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27626: LD_VAR 0 8
27630: PPUSH
27631: LD_VAR 0 5
27635: PPUSH
27636: LD_VAR 0 6
27640: PPUSH
27641: LD_INT 1
27643: PPUSH
27644: CALL_OW 48
// end ;
27648: LD_VAR 0 7
27652: RET
// export hInvincible ; every 1 do
27653: GO 27655
27655: DISABLE
// hInvincible := [ ] ;
27656: LD_ADDR_EXP 102
27660: PUSH
27661: EMPTY
27662: ST_TO_ADDR
27663: END
// every 10 do var i ;
27664: GO 27666
27666: DISABLE
27667: LD_INT 0
27669: PPUSH
// begin enable ;
27670: ENABLE
// if not hInvincible then
27671: LD_EXP 102
27675: NOT
27676: IFFALSE 27680
// exit ;
27678: GO 27724
// for i in hInvincible do
27680: LD_ADDR_VAR 0 1
27684: PUSH
27685: LD_EXP 102
27689: PUSH
27690: FOR_IN
27691: IFFALSE 27722
// if GetLives ( i ) < 1000 then
27693: LD_VAR 0 1
27697: PPUSH
27698: CALL_OW 256
27702: PUSH
27703: LD_INT 1000
27705: LESS
27706: IFFALSE 27720
// SetLives ( i , 1000 ) ;
27708: LD_VAR 0 1
27712: PPUSH
27713: LD_INT 1000
27715: PPUSH
27716: CALL_OW 234
27720: GO 27690
27722: POP
27723: POP
// end ;
27724: PPOPN 1
27726: END
// export function hHackInvincible ; var i ; begin
27727: LD_INT 0
27729: PPUSH
27730: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27731: LD_ADDR_VAR 0 2
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: LD_INT 21
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 21
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: PPUSH
27764: CALL_OW 69
27768: PUSH
27769: FOR_IN
27770: IFFALSE 27831
// if IsSelected ( i ) then
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL_OW 306
27781: IFFALSE 27829
// begin if i in hInvincible then
27783: LD_VAR 0 2
27787: PUSH
27788: LD_EXP 102
27792: IN
27793: IFFALSE 27813
// hInvincible := hInvincible diff i else
27795: LD_ADDR_EXP 102
27799: PUSH
27800: LD_EXP 102
27804: PUSH
27805: LD_VAR 0 2
27809: DIFF
27810: ST_TO_ADDR
27811: GO 27829
// hInvincible := hInvincible union i ;
27813: LD_ADDR_EXP 102
27817: PUSH
27818: LD_EXP 102
27822: PUSH
27823: LD_VAR 0 2
27827: UNION
27828: ST_TO_ADDR
// end ;
27829: GO 27769
27831: POP
27832: POP
// end ;
27833: LD_VAR 0 1
27837: RET
// export function hHackInvisible ; var i , j ; begin
27838: LD_INT 0
27840: PPUSH
27841: PPUSH
27842: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27843: LD_ADDR_VAR 0 2
27847: PUSH
27848: LD_INT 21
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: PUSH
27863: FOR_IN
27864: IFFALSE 27888
// if IsSelected ( i ) then
27866: LD_VAR 0 2
27870: PPUSH
27871: CALL_OW 306
27875: IFFALSE 27886
// ComForceInvisible ( i ) ;
27877: LD_VAR 0 2
27881: PPUSH
27882: CALL_OW 496
27886: GO 27863
27888: POP
27889: POP
// end ;
27890: LD_VAR 0 1
27894: RET
// export function hHackChangeYourSide ; begin
27895: LD_INT 0
27897: PPUSH
// if your_side = 8 then
27898: LD_OWVAR 2
27902: PUSH
27903: LD_INT 8
27905: EQUAL
27906: IFFALSE 27918
// your_side := 0 else
27908: LD_ADDR_OWVAR 2
27912: PUSH
27913: LD_INT 0
27915: ST_TO_ADDR
27916: GO 27932
// your_side := your_side + 1 ;
27918: LD_ADDR_OWVAR 2
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: LD_INT 1
27930: PLUS
27931: ST_TO_ADDR
// end ;
27932: LD_VAR 0 1
27936: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27937: LD_INT 0
27939: PPUSH
27940: PPUSH
27941: PPUSH
// for i in all_units do
27942: LD_ADDR_VAR 0 2
27946: PUSH
27947: LD_OWVAR 3
27951: PUSH
27952: FOR_IN
27953: IFFALSE 28031
// if IsSelected ( i ) then
27955: LD_VAR 0 2
27959: PPUSH
27960: CALL_OW 306
27964: IFFALSE 28029
// begin j := GetSide ( i ) ;
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 255
27980: ST_TO_ADDR
// if j = 8 then
27981: LD_VAR 0 3
27985: PUSH
27986: LD_INT 8
27988: EQUAL
27989: IFFALSE 28001
// j := 0 else
27991: LD_ADDR_VAR 0 3
27995: PUSH
27996: LD_INT 0
27998: ST_TO_ADDR
27999: GO 28015
// j := j + 1 ;
28001: LD_ADDR_VAR 0 3
28005: PUSH
28006: LD_VAR 0 3
28010: PUSH
28011: LD_INT 1
28013: PLUS
28014: ST_TO_ADDR
// SetSide ( i , j ) ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_VAR 0 3
28024: PPUSH
28025: CALL_OW 235
// end ;
28029: GO 27952
28031: POP
28032: POP
// end ;
28033: LD_VAR 0 1
28037: RET
// export function hHackFog ; begin
28038: LD_INT 0
28040: PPUSH
// FogOff ( true ) ;
28041: LD_INT 1
28043: PPUSH
28044: CALL_OW 344
// end ;
28048: LD_VAR 0 1
28052: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28053: LD_INT 0
28055: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28056: LD_VAR 0 1
28060: PPUSH
28061: LD_VAR 0 2
28065: PPUSH
28066: LD_VAR 0 3
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: LD_INT 1
28076: PPUSH
28077: CALL_OW 483
// CenterOnXY ( x , y ) ;
28081: LD_VAR 0 2
28085: PPUSH
28086: LD_VAR 0 3
28090: PPUSH
28091: CALL_OW 84
// end ; end_of_file end_of_file
28095: LD_VAR 0 4
28099: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
28100: LD_INT 0
28102: PPUSH
// ar_miner := 81 ;
28103: LD_ADDR_EXP 110
28107: PUSH
28108: LD_INT 81
28110: ST_TO_ADDR
// ar_crane := 88 ;
28111: LD_ADDR_EXP 109
28115: PUSH
28116: LD_INT 88
28118: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28119: LD_ADDR_EXP 104
28123: PUSH
28124: LD_INT 89
28126: ST_TO_ADDR
// us_hack := 99 ;
28127: LD_ADDR_EXP 105
28131: PUSH
28132: LD_INT 99
28134: ST_TO_ADDR
// us_artillery := 97 ;
28135: LD_ADDR_EXP 106
28139: PUSH
28140: LD_INT 97
28142: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28143: LD_ADDR_EXP 107
28147: PUSH
28148: LD_INT 91
28150: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28151: LD_ADDR_EXP 108
28155: PUSH
28156: LD_INT 92
28158: ST_TO_ADDR
// ru_radar := 98 ;
28159: LD_ADDR_EXP 103
28163: PUSH
28164: LD_INT 98
28166: ST_TO_ADDR
// tech_Artillery := 80 ;
28167: LD_ADDR_EXP 111
28171: PUSH
28172: LD_INT 80
28174: ST_TO_ADDR
// tech_RadMat := 81 ;
28175: LD_ADDR_EXP 112
28179: PUSH
28180: LD_INT 81
28182: ST_TO_ADDR
// tech_BasicTools := 82 ;
28183: LD_ADDR_EXP 113
28187: PUSH
28188: LD_INT 82
28190: ST_TO_ADDR
// tech_Cargo := 83 ;
28191: LD_ADDR_EXP 114
28195: PUSH
28196: LD_INT 83
28198: ST_TO_ADDR
// tech_Track := 84 ;
28199: LD_ADDR_EXP 115
28203: PUSH
28204: LD_INT 84
28206: ST_TO_ADDR
// tech_Crane := 85 ;
28207: LD_ADDR_EXP 116
28211: PUSH
28212: LD_INT 85
28214: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28215: LD_ADDR_EXP 117
28219: PUSH
28220: LD_INT 86
28222: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28223: LD_ADDR_EXP 118
28227: PUSH
28228: LD_INT 87
28230: ST_TO_ADDR
// end ;
28231: LD_VAR 0 1
28235: RET
// every 1 do
28236: GO 28238
28238: DISABLE
// InitGlobalVariables ; end_of_file
28239: CALL 28100 0 0
28243: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28244: LD_INT 0
28246: PPUSH
28247: PPUSH
// if exist_mode then
28248: LD_VAR 0 2
28252: IFFALSE 28277
// unit := CreateCharacter ( prefix & ident ) else
28254: LD_ADDR_VAR 0 5
28258: PUSH
28259: LD_VAR 0 3
28263: PUSH
28264: LD_VAR 0 1
28268: STR
28269: PPUSH
28270: CALL_OW 34
28274: ST_TO_ADDR
28275: GO 28292
// unit := NewCharacter ( ident ) ;
28277: LD_ADDR_VAR 0 5
28281: PUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 25
28291: ST_TO_ADDR
// result := unit ;
28292: LD_ADDR_VAR 0 4
28296: PUSH
28297: LD_VAR 0 5
28301: ST_TO_ADDR
// end ;
28302: LD_VAR 0 4
28306: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
// if not side or not nation then
28311: LD_VAR 0 1
28315: NOT
28316: PUSH
28317: LD_VAR 0 2
28321: NOT
28322: OR
28323: IFFALSE 28327
// exit ;
28325: GO 29091
// case nation of nation_american :
28327: LD_VAR 0 2
28331: PUSH
28332: LD_INT 1
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28554
28340: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 35
28348: PUSH
28349: LD_INT 45
28351: PUSH
28352: LD_INT 46
28354: PUSH
28355: LD_INT 47
28357: PUSH
28358: LD_INT 82
28360: PUSH
28361: LD_INT 83
28363: PUSH
28364: LD_INT 84
28366: PUSH
28367: LD_INT 85
28369: PUSH
28370: LD_INT 86
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 6
28381: PUSH
28382: LD_INT 15
28384: PUSH
28385: LD_INT 16
28387: PUSH
28388: LD_INT 7
28390: PUSH
28391: LD_INT 12
28393: PUSH
28394: LD_INT 13
28396: PUSH
28397: LD_INT 10
28399: PUSH
28400: LD_INT 14
28402: PUSH
28403: LD_INT 20
28405: PUSH
28406: LD_INT 21
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_INT 25
28414: PUSH
28415: LD_INT 32
28417: PUSH
28418: LD_INT 27
28420: PUSH
28421: LD_INT 36
28423: PUSH
28424: LD_INT 69
28426: PUSH
28427: LD_INT 39
28429: PUSH
28430: LD_INT 34
28432: PUSH
28433: LD_INT 40
28435: PUSH
28436: LD_INT 48
28438: PUSH
28439: LD_INT 49
28441: PUSH
28442: LD_INT 50
28444: PUSH
28445: LD_INT 51
28447: PUSH
28448: LD_INT 52
28450: PUSH
28451: LD_INT 53
28453: PUSH
28454: LD_INT 54
28456: PUSH
28457: LD_INT 55
28459: PUSH
28460: LD_INT 56
28462: PUSH
28463: LD_INT 57
28465: PUSH
28466: LD_INT 58
28468: PUSH
28469: LD_INT 59
28471: PUSH
28472: LD_INT 60
28474: PUSH
28475: LD_INT 61
28477: PUSH
28478: LD_INT 62
28480: PUSH
28481: LD_INT 80
28483: PUSH
28484: LD_INT 82
28486: PUSH
28487: LD_INT 83
28489: PUSH
28490: LD_INT 84
28492: PUSH
28493: LD_INT 85
28495: PUSH
28496: LD_INT 86
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
28552: GO 29015
28554: LD_INT 2
28556: DOUBLE
28557: EQUAL
28558: IFTRUE 28562
28560: GO 28784
28562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28563: LD_ADDR_VAR 0 4
28567: PUSH
28568: LD_INT 35
28570: PUSH
28571: LD_INT 45
28573: PUSH
28574: LD_INT 46
28576: PUSH
28577: LD_INT 47
28579: PUSH
28580: LD_INT 82
28582: PUSH
28583: LD_INT 83
28585: PUSH
28586: LD_INT 84
28588: PUSH
28589: LD_INT 85
28591: PUSH
28592: LD_INT 87
28594: PUSH
28595: LD_INT 70
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 11
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: LD_INT 4
28609: PUSH
28610: LD_INT 5
28612: PUSH
28613: LD_INT 6
28615: PUSH
28616: LD_INT 15
28618: PUSH
28619: LD_INT 18
28621: PUSH
28622: LD_INT 7
28624: PUSH
28625: LD_INT 17
28627: PUSH
28628: LD_INT 8
28630: PUSH
28631: LD_INT 20
28633: PUSH
28634: LD_INT 21
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 72
28642: PUSH
28643: LD_INT 26
28645: PUSH
28646: LD_INT 69
28648: PUSH
28649: LD_INT 39
28651: PUSH
28652: LD_INT 40
28654: PUSH
28655: LD_INT 41
28657: PUSH
28658: LD_INT 42
28660: PUSH
28661: LD_INT 43
28663: PUSH
28664: LD_INT 48
28666: PUSH
28667: LD_INT 49
28669: PUSH
28670: LD_INT 50
28672: PUSH
28673: LD_INT 51
28675: PUSH
28676: LD_INT 52
28678: PUSH
28679: LD_INT 53
28681: PUSH
28682: LD_INT 54
28684: PUSH
28685: LD_INT 55
28687: PUSH
28688: LD_INT 56
28690: PUSH
28691: LD_INT 60
28693: PUSH
28694: LD_INT 61
28696: PUSH
28697: LD_INT 62
28699: PUSH
28700: LD_INT 66
28702: PUSH
28703: LD_INT 67
28705: PUSH
28706: LD_INT 68
28708: PUSH
28709: LD_INT 81
28711: PUSH
28712: LD_INT 82
28714: PUSH
28715: LD_INT 83
28717: PUSH
28718: LD_INT 84
28720: PUSH
28721: LD_INT 85
28723: PUSH
28724: LD_INT 87
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
28782: GO 29015
28784: LD_INT 3
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 29014
28792: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28793: LD_ADDR_VAR 0 4
28797: PUSH
28798: LD_INT 46
28800: PUSH
28801: LD_INT 47
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 82
28812: PUSH
28813: LD_INT 83
28815: PUSH
28816: LD_INT 84
28818: PUSH
28819: LD_INT 85
28821: PUSH
28822: LD_INT 86
28824: PUSH
28825: LD_INT 11
28827: PUSH
28828: LD_INT 9
28830: PUSH
28831: LD_INT 20
28833: PUSH
28834: LD_INT 19
28836: PUSH
28837: LD_INT 21
28839: PUSH
28840: LD_INT 24
28842: PUSH
28843: LD_INT 22
28845: PUSH
28846: LD_INT 25
28848: PUSH
28849: LD_INT 28
28851: PUSH
28852: LD_INT 29
28854: PUSH
28855: LD_INT 30
28857: PUSH
28858: LD_INT 31
28860: PUSH
28861: LD_INT 37
28863: PUSH
28864: LD_INT 38
28866: PUSH
28867: LD_INT 32
28869: PUSH
28870: LD_INT 27
28872: PUSH
28873: LD_INT 33
28875: PUSH
28876: LD_INT 69
28878: PUSH
28879: LD_INT 39
28881: PUSH
28882: LD_INT 34
28884: PUSH
28885: LD_INT 40
28887: PUSH
28888: LD_INT 71
28890: PUSH
28891: LD_INT 23
28893: PUSH
28894: LD_INT 44
28896: PUSH
28897: LD_INT 48
28899: PUSH
28900: LD_INT 49
28902: PUSH
28903: LD_INT 50
28905: PUSH
28906: LD_INT 51
28908: PUSH
28909: LD_INT 52
28911: PUSH
28912: LD_INT 53
28914: PUSH
28915: LD_INT 54
28917: PUSH
28918: LD_INT 55
28920: PUSH
28921: LD_INT 56
28923: PUSH
28924: LD_INT 57
28926: PUSH
28927: LD_INT 58
28929: PUSH
28930: LD_INT 59
28932: PUSH
28933: LD_INT 63
28935: PUSH
28936: LD_INT 64
28938: PUSH
28939: LD_INT 65
28941: PUSH
28942: LD_INT 82
28944: PUSH
28945: LD_INT 83
28947: PUSH
28948: LD_INT 84
28950: PUSH
28951: LD_INT 85
28953: PUSH
28954: LD_INT 86
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
29012: GO 29015
29014: POP
// if state > - 1 and state < 3 then
29015: LD_VAR 0 3
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: GREATER
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_INT 3
29032: LESS
29033: AND
29034: IFFALSE 29091
// for i in result do
29036: LD_ADDR_VAR 0 5
29040: PUSH
29041: LD_VAR 0 4
29045: PUSH
29046: FOR_IN
29047: IFFALSE 29089
// if GetTech ( i , side ) <> state then
29049: LD_VAR 0 5
29053: PPUSH
29054: LD_VAR 0 1
29058: PPUSH
29059: CALL_OW 321
29063: PUSH
29064: LD_VAR 0 3
29068: NONEQUAL
29069: IFFALSE 29087
// result := result diff i ;
29071: LD_ADDR_VAR 0 4
29075: PUSH
29076: LD_VAR 0 4
29080: PUSH
29081: LD_VAR 0 5
29085: DIFF
29086: ST_TO_ADDR
29087: GO 29046
29089: POP
29090: POP
// end ;
29091: LD_VAR 0 4
29095: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29096: LD_INT 0
29098: PPUSH
29099: PPUSH
29100: PPUSH
// result := true ;
29101: LD_ADDR_VAR 0 3
29105: PUSH
29106: LD_INT 1
29108: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29109: LD_ADDR_VAR 0 5
29113: PUSH
29114: LD_VAR 0 2
29118: PPUSH
29119: CALL_OW 480
29123: ST_TO_ADDR
// if not tmp then
29124: LD_VAR 0 5
29128: NOT
29129: IFFALSE 29133
// exit ;
29131: GO 29182
// for i in tmp do
29133: LD_ADDR_VAR 0 4
29137: PUSH
29138: LD_VAR 0 5
29142: PUSH
29143: FOR_IN
29144: IFFALSE 29180
// if GetTech ( i , side ) <> state_researched then
29146: LD_VAR 0 4
29150: PPUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: CALL_OW 321
29160: PUSH
29161: LD_INT 2
29163: NONEQUAL
29164: IFFALSE 29178
// begin result := false ;
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 0
29173: ST_TO_ADDR
// exit ;
29174: POP
29175: POP
29176: GO 29182
// end ;
29178: GO 29143
29180: POP
29181: POP
// end ;
29182: LD_VAR 0 3
29186: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29187: LD_INT 0
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
29199: PPUSH
29200: PPUSH
29201: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29202: LD_VAR 0 1
29206: NOT
29207: PUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 257
29217: PUSH
29218: LD_INT 9
29220: NONEQUAL
29221: OR
29222: IFFALSE 29226
// exit ;
29224: GO 29799
// side := GetSide ( unit ) ;
29226: LD_ADDR_VAR 0 9
29230: PUSH
29231: LD_VAR 0 1
29235: PPUSH
29236: CALL_OW 255
29240: ST_TO_ADDR
// tech_space := tech_spacanom ;
29241: LD_ADDR_VAR 0 12
29245: PUSH
29246: LD_INT 29
29248: ST_TO_ADDR
// tech_time := tech_taurad ;
29249: LD_ADDR_VAR 0 13
29253: PUSH
29254: LD_INT 28
29256: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29257: LD_ADDR_VAR 0 11
29261: PUSH
29262: LD_VAR 0 1
29266: PPUSH
29267: CALL_OW 310
29271: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29272: LD_VAR 0 11
29276: PPUSH
29277: CALL_OW 247
29281: PUSH
29282: LD_INT 2
29284: EQUAL
29285: IFFALSE 29289
// exit ;
29287: GO 29799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29289: LD_ADDR_VAR 0 8
29293: PUSH
29294: LD_INT 81
29296: PUSH
29297: LD_VAR 0 9
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: ST_TO_ADDR
// if not tmp then
29332: LD_VAR 0 8
29336: NOT
29337: IFFALSE 29341
// exit ;
29339: GO 29799
// if in_unit then
29341: LD_VAR 0 11
29345: IFFALSE 29369
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29347: LD_ADDR_VAR 0 10
29351: PUSH
29352: LD_VAR 0 8
29356: PPUSH
29357: LD_VAR 0 11
29361: PPUSH
29362: CALL_OW 74
29366: ST_TO_ADDR
29367: GO 29389
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29369: LD_ADDR_VAR 0 10
29373: PUSH
29374: LD_VAR 0 8
29378: PPUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 74
29388: ST_TO_ADDR
// if not enemy then
29389: LD_VAR 0 10
29393: NOT
29394: IFFALSE 29398
// exit ;
29396: GO 29799
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29398: LD_VAR 0 11
29402: PUSH
29403: LD_VAR 0 11
29407: PPUSH
29408: LD_VAR 0 10
29412: PPUSH
29413: CALL_OW 296
29417: PUSH
29418: LD_INT 13
29420: GREATER
29421: AND
29422: PUSH
29423: LD_VAR 0 1
29427: PPUSH
29428: LD_VAR 0 10
29432: PPUSH
29433: CALL_OW 296
29437: PUSH
29438: LD_INT 12
29440: GREATER
29441: OR
29442: IFFALSE 29446
// exit ;
29444: GO 29799
// missile := [ 1 ] ;
29446: LD_ADDR_VAR 0 14
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29457: LD_VAR 0 9
29461: PPUSH
29462: LD_VAR 0 12
29466: PPUSH
29467: CALL_OW 325
29471: IFFALSE 29500
// missile := Insert ( missile , missile + 1 , 2 ) ;
29473: LD_ADDR_VAR 0 14
29477: PUSH
29478: LD_VAR 0 14
29482: PPUSH
29483: LD_VAR 0 14
29487: PUSH
29488: LD_INT 1
29490: PLUS
29491: PPUSH
29492: LD_INT 2
29494: PPUSH
29495: CALL_OW 2
29499: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29500: LD_VAR 0 9
29504: PPUSH
29505: LD_VAR 0 13
29509: PPUSH
29510: CALL_OW 325
29514: PUSH
29515: LD_VAR 0 10
29519: PPUSH
29520: CALL_OW 255
29524: PPUSH
29525: LD_VAR 0 13
29529: PPUSH
29530: CALL_OW 325
29534: NOT
29535: AND
29536: IFFALSE 29565
// missile := Insert ( missile , missile + 1 , 3 ) ;
29538: LD_ADDR_VAR 0 14
29542: PUSH
29543: LD_VAR 0 14
29547: PPUSH
29548: LD_VAR 0 14
29552: PUSH
29553: LD_INT 1
29555: PLUS
29556: PPUSH
29557: LD_INT 3
29559: PPUSH
29560: CALL_OW 2
29564: ST_TO_ADDR
// if missile < 2 then
29565: LD_VAR 0 14
29569: PUSH
29570: LD_INT 2
29572: LESS
29573: IFFALSE 29577
// exit ;
29575: GO 29799
// x := GetX ( enemy ) ;
29577: LD_ADDR_VAR 0 4
29581: PUSH
29582: LD_VAR 0 10
29586: PPUSH
29587: CALL_OW 250
29591: ST_TO_ADDR
// y := GetY ( enemy ) ;
29592: LD_ADDR_VAR 0 5
29596: PUSH
29597: LD_VAR 0 10
29601: PPUSH
29602: CALL_OW 251
29606: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29607: LD_ADDR_VAR 0 6
29611: PUSH
29612: LD_VAR 0 4
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PPUSH
29621: LD_INT 1
29623: PPUSH
29624: CALL_OW 12
29628: PLUS
29629: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29630: LD_ADDR_VAR 0 7
29634: PUSH
29635: LD_VAR 0 5
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PPUSH
29644: LD_INT 1
29646: PPUSH
29647: CALL_OW 12
29651: PLUS
29652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29653: LD_VAR 0 6
29657: PPUSH
29658: LD_VAR 0 7
29662: PPUSH
29663: CALL_OW 488
29667: NOT
29668: IFFALSE 29690
// begin _x := x ;
29670: LD_ADDR_VAR 0 6
29674: PUSH
29675: LD_VAR 0 4
29679: ST_TO_ADDR
// _y := y ;
29680: LD_ADDR_VAR 0 7
29684: PUSH
29685: LD_VAR 0 5
29689: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29690: LD_ADDR_VAR 0 3
29694: PUSH
29695: LD_INT 1
29697: PPUSH
29698: LD_VAR 0 14
29702: PPUSH
29703: CALL_OW 12
29707: ST_TO_ADDR
// case i of 1 :
29708: LD_VAR 0 3
29712: PUSH
29713: LD_INT 1
29715: DOUBLE
29716: EQUAL
29717: IFTRUE 29721
29719: GO 29738
29721: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 10
29731: PPUSH
29732: CALL_OW 115
29736: GO 29799
29738: LD_INT 2
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29768
29746: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29747: LD_VAR 0 1
29751: PPUSH
29752: LD_VAR 0 6
29756: PPUSH
29757: LD_VAR 0 7
29761: PPUSH
29762: CALL_OW 153
29766: GO 29799
29768: LD_INT 3
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29798
29776: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29777: LD_VAR 0 1
29781: PPUSH
29782: LD_VAR 0 6
29786: PPUSH
29787: LD_VAR 0 7
29791: PPUSH
29792: CALL_OW 154
29796: GO 29799
29798: POP
// end ;
29799: LD_VAR 0 2
29803: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29804: LD_INT 0
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
// if not unit or not building then
29812: LD_VAR 0 1
29816: NOT
29817: PUSH
29818: LD_VAR 0 2
29822: NOT
29823: OR
29824: IFFALSE 29828
// exit ;
29826: GO 29986
// x := GetX ( building ) ;
29828: LD_ADDR_VAR 0 5
29832: PUSH
29833: LD_VAR 0 2
29837: PPUSH
29838: CALL_OW 250
29842: ST_TO_ADDR
// y := GetY ( building ) ;
29843: LD_ADDR_VAR 0 6
29847: PUSH
29848: LD_VAR 0 2
29852: PPUSH
29853: CALL_OW 251
29857: ST_TO_ADDR
// for i = 0 to 5 do
29858: LD_ADDR_VAR 0 4
29862: PUSH
29863: DOUBLE
29864: LD_INT 0
29866: DEC
29867: ST_TO_ADDR
29868: LD_INT 5
29870: PUSH
29871: FOR_TO
29872: IFFALSE 29984
// begin _x := ShiftX ( x , i , 3 ) ;
29874: LD_ADDR_VAR 0 7
29878: PUSH
29879: LD_VAR 0 5
29883: PPUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: LD_INT 3
29891: PPUSH
29892: CALL_OW 272
29896: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29897: LD_ADDR_VAR 0 8
29901: PUSH
29902: LD_VAR 0 6
29906: PPUSH
29907: LD_VAR 0 4
29911: PPUSH
29912: LD_INT 3
29914: PPUSH
29915: CALL_OW 273
29919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29920: LD_VAR 0 7
29924: PPUSH
29925: LD_VAR 0 8
29929: PPUSH
29930: CALL_OW 488
29934: NOT
29935: IFFALSE 29939
// continue ;
29937: GO 29871
// if HexInfo ( _x , _y ) = 0 then
29939: LD_VAR 0 7
29943: PPUSH
29944: LD_VAR 0 8
29948: PPUSH
29949: CALL_OW 428
29953: PUSH
29954: LD_INT 0
29956: EQUAL
29957: IFFALSE 29982
// begin ComMoveXY ( unit , _x , _y ) ;
29959: LD_VAR 0 1
29963: PPUSH
29964: LD_VAR 0 7
29968: PPUSH
29969: LD_VAR 0 8
29973: PPUSH
29974: CALL_OW 111
// exit ;
29978: POP
29979: POP
29980: GO 29986
// end ; end ;
29982: GO 29871
29984: POP
29985: POP
// end ;
29986: LD_VAR 0 3
29990: RET
// export function ScanBase ( side , base_area ) ; begin
29991: LD_INT 0
29993: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29994: LD_ADDR_VAR 0 3
29998: PUSH
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_INT 81
30006: PUSH
30007: LD_VAR 0 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PPUSH
30016: CALL_OW 70
30020: ST_TO_ADDR
// end ;
30021: LD_VAR 0 3
30025: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30026: LD_INT 0
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
// result := false ;
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 0
30039: ST_TO_ADDR
// side := GetSide ( unit ) ;
30040: LD_ADDR_VAR 0 3
30044: PUSH
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 255
30054: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30055: LD_ADDR_VAR 0 4
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 248
30069: ST_TO_ADDR
// case nat of 1 :
30070: LD_VAR 0 4
30074: PUSH
30075: LD_INT 1
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30094
30083: POP
// tech := tech_lassight ; 2 :
30084: LD_ADDR_VAR 0 5
30088: PUSH
30089: LD_INT 12
30091: ST_TO_ADDR
30092: GO 30133
30094: LD_INT 2
30096: DOUBLE
30097: EQUAL
30098: IFTRUE 30102
30100: GO 30113
30102: POP
// tech := tech_mortar ; 3 :
30103: LD_ADDR_VAR 0 5
30107: PUSH
30108: LD_INT 41
30110: ST_TO_ADDR
30111: GO 30133
30113: LD_INT 3
30115: DOUBLE
30116: EQUAL
30117: IFTRUE 30121
30119: GO 30132
30121: POP
// tech := tech_bazooka ; end ;
30122: LD_ADDR_VAR 0 5
30126: PUSH
30127: LD_INT 44
30129: ST_TO_ADDR
30130: GO 30133
30132: POP
// if Researched ( side , tech ) then
30133: LD_VAR 0 3
30137: PPUSH
30138: LD_VAR 0 5
30142: PPUSH
30143: CALL_OW 325
30147: IFFALSE 30174
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: LD_INT 5
30156: PUSH
30157: LD_INT 8
30159: PUSH
30160: LD_INT 9
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: PUSH
30168: LD_VAR 0 4
30172: ARRAY
30173: ST_TO_ADDR
// end ;
30174: LD_VAR 0 2
30178: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30179: LD_INT 0
30181: PPUSH
30182: PPUSH
30183: PPUSH
// if not mines then
30184: LD_VAR 0 2
30188: NOT
30189: IFFALSE 30193
// exit ;
30191: GO 30337
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: LD_INT 81
30200: PUSH
30201: LD_VAR 0 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 21
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: ST_TO_ADDR
// for i in mines do
30236: LD_ADDR_VAR 0 4
30240: PUSH
30241: LD_VAR 0 2
30245: PUSH
30246: FOR_IN
30247: IFFALSE 30335
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30249: LD_VAR 0 4
30253: PUSH
30254: LD_INT 1
30256: ARRAY
30257: PPUSH
30258: LD_VAR 0 4
30262: PUSH
30263: LD_INT 2
30265: ARRAY
30266: PPUSH
30267: CALL_OW 458
30271: NOT
30272: IFFALSE 30276
// continue ;
30274: GO 30246
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30276: LD_VAR 0 4
30280: PUSH
30281: LD_INT 1
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 4
30289: PUSH
30290: LD_INT 2
30292: ARRAY
30293: PPUSH
30294: CALL_OW 428
30298: PUSH
30299: LD_VAR 0 5
30303: IN
30304: IFFALSE 30333
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30306: LD_VAR 0 4
30310: PUSH
30311: LD_INT 1
30313: ARRAY
30314: PPUSH
30315: LD_VAR 0 4
30319: PUSH
30320: LD_INT 2
30322: ARRAY
30323: PPUSH
30324: LD_VAR 0 1
30328: PPUSH
30329: CALL_OW 456
// end ;
30333: GO 30246
30335: POP
30336: POP
// end ;
30337: LD_VAR 0 3
30341: RET
// export function Count ( array ) ; var i ; begin
30342: LD_INT 0
30344: PPUSH
30345: PPUSH
// result := 0 ;
30346: LD_ADDR_VAR 0 2
30350: PUSH
30351: LD_INT 0
30353: ST_TO_ADDR
// for i in array do
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_VAR 0 1
30363: PUSH
30364: FOR_IN
30365: IFFALSE 30389
// if i then
30367: LD_VAR 0 3
30371: IFFALSE 30387
// result := result + 1 ;
30373: LD_ADDR_VAR 0 2
30377: PUSH
30378: LD_VAR 0 2
30382: PUSH
30383: LD_INT 1
30385: PLUS
30386: ST_TO_ADDR
30387: GO 30364
30389: POP
30390: POP
// end ;
30391: LD_VAR 0 2
30395: RET
// export function IsEmpty ( building ) ; begin
30396: LD_INT 0
30398: PPUSH
// if not building then
30399: LD_VAR 0 1
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30451
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30408: LD_ADDR_VAR 0 2
30412: PUSH
30413: LD_VAR 0 1
30417: PUSH
30418: LD_INT 22
30420: PUSH
30421: LD_VAR 0 1
30425: PPUSH
30426: CALL_OW 255
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 58
30437: PUSH
30438: EMPTY
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PPUSH
30445: CALL_OW 69
30449: IN
30450: ST_TO_ADDR
// end ;
30451: LD_VAR 0 2
30455: RET
// export function IsNotFull ( building ) ; begin
30456: LD_INT 0
30458: PPUSH
// if not building then
30459: LD_VAR 0 1
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30487
// result := UnitsInside ( building ) < 6 ;
30468: LD_ADDR_VAR 0 2
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 313
30482: PUSH
30483: LD_INT 6
30485: LESS
30486: ST_TO_ADDR
// end ;
30487: LD_VAR 0 2
30491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
// tmp := [ ] ;
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: EMPTY
30504: ST_TO_ADDR
// list := [ ] ;
30505: LD_ADDR_VAR 0 5
30509: PUSH
30510: EMPTY
30511: ST_TO_ADDR
// for i = 16 to 25 do
30512: LD_ADDR_VAR 0 4
30516: PUSH
30517: DOUBLE
30518: LD_INT 16
30520: DEC
30521: ST_TO_ADDR
30522: LD_INT 25
30524: PUSH
30525: FOR_TO
30526: IFFALSE 30599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_VAR 0 3
30537: PUSH
30538: LD_INT 22
30540: PUSH
30541: LD_VAR 0 1
30545: PPUSH
30546: CALL_OW 255
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 91
30557: PUSH
30558: LD_VAR 0 1
30562: PUSH
30563: LD_INT 6
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: LD_VAR 0 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: PPUSH
30591: CALL_OW 69
30595: ADD
30596: ST_TO_ADDR
30597: GO 30525
30599: POP
30600: POP
// for i = 1 to tmp do
30601: LD_ADDR_VAR 0 4
30605: PUSH
30606: DOUBLE
30607: LD_INT 1
30609: DEC
30610: ST_TO_ADDR
30611: LD_VAR 0 3
30615: PUSH
30616: FOR_TO
30617: IFFALSE 30705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30619: LD_ADDR_VAR 0 5
30623: PUSH
30624: LD_VAR 0 5
30628: PUSH
30629: LD_VAR 0 3
30633: PUSH
30634: LD_VAR 0 4
30638: ARRAY
30639: PPUSH
30640: CALL_OW 266
30644: PUSH
30645: LD_VAR 0 3
30649: PUSH
30650: LD_VAR 0 4
30654: ARRAY
30655: PPUSH
30656: CALL_OW 250
30660: PUSH
30661: LD_VAR 0 3
30665: PUSH
30666: LD_VAR 0 4
30670: ARRAY
30671: PPUSH
30672: CALL_OW 251
30676: PUSH
30677: LD_VAR 0 3
30681: PUSH
30682: LD_VAR 0 4
30686: ARRAY
30687: PPUSH
30688: CALL_OW 254
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: ADD
30702: ST_TO_ADDR
30703: GO 30616
30705: POP
30706: POP
// result := list ;
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: LD_VAR 0 5
30716: ST_TO_ADDR
// end ;
30717: LD_VAR 0 2
30721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30722: LD_INT 0
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
// if not factory then
30731: LD_VAR 0 1
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 31333
// if control = control_apeman then
30740: LD_VAR 0 4
30744: PUSH
30745: LD_INT 5
30747: EQUAL
30748: IFFALSE 30857
// begin tmp := UnitsInside ( factory ) ;
30750: LD_ADDR_VAR 0 8
30754: PUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 313
30764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30765: LD_VAR 0 8
30769: PPUSH
30770: LD_INT 25
30772: PUSH
30773: LD_INT 12
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PPUSH
30780: CALL_OW 72
30784: NOT
30785: IFFALSE 30795
// control := control_manual ;
30787: LD_ADDR_VAR 0 4
30791: PUSH
30792: LD_INT 1
30794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30795: LD_ADDR_VAR 0 8
30799: PUSH
30800: LD_VAR 0 1
30804: PPUSH
30805: CALL 30492 0 1
30809: ST_TO_ADDR
// if tmp then
30810: LD_VAR 0 8
30814: IFFALSE 30857
// begin for i in tmp do
30816: LD_ADDR_VAR 0 7
30820: PUSH
30821: LD_VAR 0 8
30825: PUSH
30826: FOR_IN
30827: IFFALSE 30855
// if i [ 1 ] = b_ext_radio then
30829: LD_VAR 0 7
30833: PUSH
30834: LD_INT 1
30836: ARRAY
30837: PUSH
30838: LD_INT 22
30840: EQUAL
30841: IFFALSE 30853
// begin control := control_remote ;
30843: LD_ADDR_VAR 0 4
30847: PUSH
30848: LD_INT 2
30850: ST_TO_ADDR
// break ;
30851: GO 30855
// end ;
30853: GO 30826
30855: POP
30856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30857: LD_VAR 0 1
30861: PPUSH
30862: LD_VAR 0 2
30866: PPUSH
30867: LD_VAR 0 3
30871: PPUSH
30872: LD_VAR 0 4
30876: PPUSH
30877: LD_VAR 0 5
30881: PPUSH
30882: CALL_OW 448
30886: IFFALSE 30921
// begin result := [ chassis , engine , control , weapon ] ;
30888: LD_ADDR_VAR 0 6
30892: PUSH
30893: LD_VAR 0 2
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_VAR 0 4
30907: PUSH
30908: LD_VAR 0 5
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// exit ;
30919: GO 31333
// end ; _chassis := AvailableChassisList ( factory ) ;
30921: LD_ADDR_VAR 0 9
30925: PUSH
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 475
30935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30936: LD_ADDR_VAR 0 11
30940: PUSH
30941: LD_VAR 0 1
30945: PPUSH
30946: CALL_OW 476
30950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30951: LD_ADDR_VAR 0 12
30955: PUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 477
30965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30966: LD_ADDR_VAR 0 10
30970: PUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 478
30980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30981: LD_VAR 0 9
30985: NOT
30986: PUSH
30987: LD_VAR 0 11
30991: NOT
30992: OR
30993: PUSH
30994: LD_VAR 0 12
30998: NOT
30999: OR
31000: PUSH
31001: LD_VAR 0 10
31005: NOT
31006: OR
31007: IFFALSE 31042
// begin result := [ chassis , engine , control , weapon ] ;
31009: LD_ADDR_VAR 0 6
31013: PUSH
31014: LD_VAR 0 2
31018: PUSH
31019: LD_VAR 0 3
31023: PUSH
31024: LD_VAR 0 4
31028: PUSH
31029: LD_VAR 0 5
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// exit ;
31040: GO 31333
// end ; if not chassis in _chassis then
31042: LD_VAR 0 2
31046: PUSH
31047: LD_VAR 0 9
31051: IN
31052: NOT
31053: IFFALSE 31079
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31055: LD_ADDR_VAR 0 2
31059: PUSH
31060: LD_VAR 0 9
31064: PUSH
31065: LD_INT 1
31067: PPUSH
31068: LD_VAR 0 9
31072: PPUSH
31073: CALL_OW 12
31077: ARRAY
31078: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31079: LD_VAR 0 2
31083: PPUSH
31084: LD_VAR 0 3
31088: PPUSH
31089: CALL 31338 0 2
31093: NOT
31094: IFFALSE 31153
// repeat engine := _engine [ 1 ] ;
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_VAR 0 11
31105: PUSH
31106: LD_INT 1
31108: ARRAY
31109: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31110: LD_ADDR_VAR 0 11
31114: PUSH
31115: LD_VAR 0 11
31119: PPUSH
31120: LD_INT 1
31122: PPUSH
31123: CALL_OW 3
31127: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31128: LD_VAR 0 2
31132: PPUSH
31133: LD_VAR 0 3
31137: PPUSH
31138: CALL 31338 0 2
31142: PUSH
31143: LD_VAR 0 11
31147: PUSH
31148: EMPTY
31149: EQUAL
31150: OR
31151: IFFALSE 31096
// if not control in _control then
31153: LD_VAR 0 4
31157: PUSH
31158: LD_VAR 0 12
31162: IN
31163: NOT
31164: IFFALSE 31190
// control := _control [ rand ( 1 , _control ) ] ;
31166: LD_ADDR_VAR 0 4
31170: PUSH
31171: LD_VAR 0 12
31175: PUSH
31176: LD_INT 1
31178: PPUSH
31179: LD_VAR 0 12
31183: PPUSH
31184: CALL_OW 12
31188: ARRAY
31189: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31190: LD_VAR 0 2
31194: PPUSH
31195: LD_VAR 0 5
31199: PPUSH
31200: CALL 31558 0 2
31204: NOT
31205: IFFALSE 31264
// repeat weapon := _weapon [ 1 ] ;
31207: LD_ADDR_VAR 0 5
31211: PUSH
31212: LD_VAR 0 10
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31221: LD_ADDR_VAR 0 10
31225: PUSH
31226: LD_VAR 0 10
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: CALL_OW 3
31238: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31239: LD_VAR 0 2
31243: PPUSH
31244: LD_VAR 0 5
31248: PPUSH
31249: CALL 31558 0 2
31253: PUSH
31254: LD_VAR 0 10
31258: PUSH
31259: EMPTY
31260: EQUAL
31261: OR
31262: IFFALSE 31207
// result := [ ] ;
31264: LD_ADDR_VAR 0 6
31268: PUSH
31269: EMPTY
31270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: LD_VAR 0 3
31285: PPUSH
31286: LD_VAR 0 4
31290: PPUSH
31291: LD_VAR 0 5
31295: PPUSH
31296: CALL_OW 448
31300: IFFALSE 31333
// result := [ chassis , engine , control , weapon ] ;
31302: LD_ADDR_VAR 0 6
31306: PUSH
31307: LD_VAR 0 2
31311: PUSH
31312: LD_VAR 0 3
31316: PUSH
31317: LD_VAR 0 4
31321: PUSH
31322: LD_VAR 0 5
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
// end ;
31333: LD_VAR 0 6
31337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31338: LD_INT 0
31340: PPUSH
// if not chassis or not engine then
31341: LD_VAR 0 1
31345: NOT
31346: PUSH
31347: LD_VAR 0 2
31351: NOT
31352: OR
31353: IFFALSE 31357
// exit ;
31355: GO 31553
// case engine of engine_solar :
31357: LD_VAR 0 2
31361: PUSH
31362: LD_INT 2
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31408
31370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31371: LD_ADDR_VAR 0 3
31375: PUSH
31376: LD_INT 11
31378: PUSH
31379: LD_INT 12
31381: PUSH
31382: LD_INT 13
31384: PUSH
31385: LD_INT 14
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
31406: GO 31537
31408: LD_INT 1
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31478
31416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_INT 11
31424: PUSH
31425: LD_INT 12
31427: PUSH
31428: LD_INT 13
31430: PUSH
31431: LD_INT 14
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 4
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: LD_INT 21
31451: PUSH
31452: LD_INT 23
31454: PUSH
31455: LD_INT 22
31457: PUSH
31458: LD_INT 24
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
31476: GO 31537
31478: LD_INT 3
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31536
31486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_INT 13
31494: PUSH
31495: LD_INT 14
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: LD_INT 4
31506: PUSH
31507: LD_INT 5
31509: PUSH
31510: LD_INT 21
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_INT 23
31518: PUSH
31519: LD_INT 24
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
31534: GO 31537
31536: POP
// result := ( chassis in result ) ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_VAR 0 1
31546: PUSH
31547: LD_VAR 0 3
31551: IN
31552: ST_TO_ADDR
// end ;
31553: LD_VAR 0 3
31557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31558: LD_INT 0
31560: PPUSH
// if not chassis or not weapon then
31561: LD_VAR 0 1
31565: NOT
31566: PUSH
31567: LD_VAR 0 2
31571: NOT
31572: OR
31573: IFFALSE 31577
// exit ;
31575: GO 32603
// case weapon of us_machine_gun :
31577: LD_VAR 0 2
31581: PUSH
31582: LD_INT 2
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31620
31590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 4
31607: PUSH
31608: LD_INT 5
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
31618: GO 32587
31620: LD_INT 3
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31658
31628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 4
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
31656: GO 32587
31658: LD_INT 11
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 31696
31666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31667: LD_ADDR_VAR 0 3
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 4
31683: PUSH
31684: LD_INT 5
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
31694: GO 32587
31696: LD_INT 4
31698: DOUBLE
31699: EQUAL
31700: IFTRUE 31704
31702: GO 31730
31704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 5
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
31728: GO 32587
31730: LD_INT 5
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31764
31738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: LD_INT 5
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: ST_TO_ADDR
31762: GO 32587
31764: LD_INT 9
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31798
31772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 4
31786: PUSH
31787: LD_INT 5
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: ST_TO_ADDR
31796: GO 32587
31798: LD_INT 7
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31806
31804: GO 31832
31806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31807: LD_ADDR_VAR 0 3
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
31830: GO 32587
31832: LD_INT 12
31834: DOUBLE
31835: EQUAL
31836: IFTRUE 31840
31838: GO 31866
31840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: LD_INT 4
31854: PUSH
31855: LD_INT 5
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 32587
31866: LD_INT 13
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31900
31874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: LD_INT 4
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
31898: GO 32587
31900: LD_INT 14
31902: DOUBLE
31903: EQUAL
31904: IFTRUE 31908
31906: GO 31926
31908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 4
31916: PUSH
31917: LD_INT 5
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: ST_TO_ADDR
31924: GO 32587
31926: LD_INT 6
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31952
31934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 4
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32587
31952: LD_INT 10
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31978
31960: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32587
31978: LD_INT 22
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32012
31986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 11
31994: PUSH
31995: LD_INT 12
31997: PUSH
31998: LD_INT 13
32000: PUSH
32001: LD_INT 14
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: ST_TO_ADDR
32010: GO 32587
32012: LD_INT 23
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32046
32020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: LD_INT 11
32028: PUSH
32029: LD_INT 12
32031: PUSH
32032: LD_INT 13
32034: PUSH
32035: LD_INT 14
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: ST_TO_ADDR
32044: GO 32587
32046: LD_INT 24
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32080
32054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_INT 11
32062: PUSH
32063: LD_INT 12
32065: PUSH
32066: LD_INT 13
32068: PUSH
32069: LD_INT 14
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
32078: GO 32587
32080: LD_INT 30
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32114
32088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: LD_INT 11
32096: PUSH
32097: LD_INT 12
32099: PUSH
32100: LD_INT 13
32102: PUSH
32103: LD_INT 14
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 32587
32114: LD_INT 25
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32140
32122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_INT 13
32130: PUSH
32131: LD_INT 14
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: ST_TO_ADDR
32138: GO 32587
32140: LD_INT 27
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32166
32148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 13
32156: PUSH
32157: LD_INT 14
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32587
32166: LD_INT 28
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32192
32174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 14
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32587
32192: LD_INT 29
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32218
32200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 13
32208: PUSH
32209: LD_INT 14
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 32587
32218: LD_INT 31
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32244
32226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 13
32234: PUSH
32235: LD_INT 14
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32587
32244: LD_INT 26
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32270
32252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 13
32260: PUSH
32261: LD_INT 14
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: ST_TO_ADDR
32268: GO 32587
32270: LD_INT 42
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32304
32278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 21
32286: PUSH
32287: LD_INT 22
32289: PUSH
32290: LD_INT 23
32292: PUSH
32293: LD_INT 24
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
32302: GO 32587
32304: LD_INT 43
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32312
32310: GO 32338
32312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: LD_INT 21
32320: PUSH
32321: LD_INT 22
32323: PUSH
32324: LD_INT 23
32326: PUSH
32327: LD_INT 24
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
32336: GO 32587
32338: LD_INT 44
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32372
32346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 21
32354: PUSH
32355: LD_INT 22
32357: PUSH
32358: LD_INT 23
32360: PUSH
32361: LD_INT 24
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: ST_TO_ADDR
32370: GO 32587
32372: LD_INT 45
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32380
32378: GO 32406
32380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32381: LD_ADDR_VAR 0 3
32385: PUSH
32386: LD_INT 21
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_INT 23
32394: PUSH
32395: LD_INT 24
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
32404: GO 32587
32406: LD_INT 49
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32414
32412: GO 32440
32414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32415: LD_ADDR_VAR 0 3
32419: PUSH
32420: LD_INT 21
32422: PUSH
32423: LD_INT 22
32425: PUSH
32426: LD_INT 23
32428: PUSH
32429: LD_INT 24
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 32587
32440: LD_INT 51
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32474
32448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 21
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_INT 23
32462: PUSH
32463: LD_INT 24
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 32587
32474: LD_INT 52
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32508
32482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 21
32490: PUSH
32491: LD_INT 22
32493: PUSH
32494: LD_INT 23
32496: PUSH
32497: LD_INT 24
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
32506: GO 32587
32508: LD_INT 53
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32534
32516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 23
32524: PUSH
32525: LD_INT 24
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 32587
32534: LD_INT 46
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32560
32542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 23
32550: PUSH
32551: LD_INT 24
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 32587
32560: LD_INT 47
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32586
32568: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 23
32576: PUSH
32577: LD_INT 24
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: ST_TO_ADDR
32584: GO 32587
32586: POP
// result := ( chassis in result ) ;
32587: LD_ADDR_VAR 0 3
32591: PUSH
32592: LD_VAR 0 1
32596: PUSH
32597: LD_VAR 0 3
32601: IN
32602: ST_TO_ADDR
// end ;
32603: LD_VAR 0 3
32607: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32608: LD_INT 0
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
// result := array ;
32617: LD_ADDR_VAR 0 5
32621: PUSH
32622: LD_VAR 0 1
32626: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32627: LD_VAR 0 1
32631: NOT
32632: PUSH
32633: LD_VAR 0 2
32637: NOT
32638: OR
32639: PUSH
32640: LD_VAR 0 3
32644: NOT
32645: OR
32646: PUSH
32647: LD_VAR 0 2
32651: PUSH
32652: LD_VAR 0 1
32656: GREATER
32657: OR
32658: PUSH
32659: LD_VAR 0 3
32663: PUSH
32664: LD_VAR 0 1
32668: GREATER
32669: OR
32670: IFFALSE 32674
// exit ;
32672: GO 32970
// if direction then
32674: LD_VAR 0 4
32678: IFFALSE 32742
// begin d := 1 ;
32680: LD_ADDR_VAR 0 9
32684: PUSH
32685: LD_INT 1
32687: ST_TO_ADDR
// if i_from > i_to then
32688: LD_VAR 0 2
32692: PUSH
32693: LD_VAR 0 3
32697: GREATER
32698: IFFALSE 32724
// length := ( array - i_from ) + i_to else
32700: LD_ADDR_VAR 0 11
32704: PUSH
32705: LD_VAR 0 1
32709: PUSH
32710: LD_VAR 0 2
32714: MINUS
32715: PUSH
32716: LD_VAR 0 3
32720: PLUS
32721: ST_TO_ADDR
32722: GO 32740
// length := i_to - i_from ;
32724: LD_ADDR_VAR 0 11
32728: PUSH
32729: LD_VAR 0 3
32733: PUSH
32734: LD_VAR 0 2
32738: MINUS
32739: ST_TO_ADDR
// end else
32740: GO 32803
// begin d := - 1 ;
32742: LD_ADDR_VAR 0 9
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: ST_TO_ADDR
// if i_from > i_to then
32751: LD_VAR 0 2
32755: PUSH
32756: LD_VAR 0 3
32760: GREATER
32761: IFFALSE 32781
// length := i_from - i_to else
32763: LD_ADDR_VAR 0 11
32767: PUSH
32768: LD_VAR 0 2
32772: PUSH
32773: LD_VAR 0 3
32777: MINUS
32778: ST_TO_ADDR
32779: GO 32803
// length := ( array - i_to ) + i_from ;
32781: LD_ADDR_VAR 0 11
32785: PUSH
32786: LD_VAR 0 1
32790: PUSH
32791: LD_VAR 0 3
32795: MINUS
32796: PUSH
32797: LD_VAR 0 2
32801: PLUS
32802: ST_TO_ADDR
// end ; if not length then
32803: LD_VAR 0 11
32807: NOT
32808: IFFALSE 32812
// exit ;
32810: GO 32970
// tmp := array ;
32812: LD_ADDR_VAR 0 10
32816: PUSH
32817: LD_VAR 0 1
32821: ST_TO_ADDR
// for i = 1 to length do
32822: LD_ADDR_VAR 0 6
32826: PUSH
32827: DOUBLE
32828: LD_INT 1
32830: DEC
32831: ST_TO_ADDR
32832: LD_VAR 0 11
32836: PUSH
32837: FOR_TO
32838: IFFALSE 32958
// begin for j = 1 to array do
32840: LD_ADDR_VAR 0 7
32844: PUSH
32845: DOUBLE
32846: LD_INT 1
32848: DEC
32849: ST_TO_ADDR
32850: LD_VAR 0 1
32854: PUSH
32855: FOR_TO
32856: IFFALSE 32944
// begin k := j + d ;
32858: LD_ADDR_VAR 0 8
32862: PUSH
32863: LD_VAR 0 7
32867: PUSH
32868: LD_VAR 0 9
32872: PLUS
32873: ST_TO_ADDR
// if k > array then
32874: LD_VAR 0 8
32878: PUSH
32879: LD_VAR 0 1
32883: GREATER
32884: IFFALSE 32894
// k := 1 ;
32886: LD_ADDR_VAR 0 8
32890: PUSH
32891: LD_INT 1
32893: ST_TO_ADDR
// if not k then
32894: LD_VAR 0 8
32898: NOT
32899: IFFALSE 32911
// k := array ;
32901: LD_ADDR_VAR 0 8
32905: PUSH
32906: LD_VAR 0 1
32910: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32911: LD_ADDR_VAR 0 10
32915: PUSH
32916: LD_VAR 0 10
32920: PPUSH
32921: LD_VAR 0 8
32925: PPUSH
32926: LD_VAR 0 1
32930: PUSH
32931: LD_VAR 0 7
32935: ARRAY
32936: PPUSH
32937: CALL_OW 1
32941: ST_TO_ADDR
// end ;
32942: GO 32855
32944: POP
32945: POP
// array := tmp ;
32946: LD_ADDR_VAR 0 1
32950: PUSH
32951: LD_VAR 0 10
32955: ST_TO_ADDR
// end ;
32956: GO 32837
32958: POP
32959: POP
// result := array ;
32960: LD_ADDR_VAR 0 5
32964: PUSH
32965: LD_VAR 0 1
32969: ST_TO_ADDR
// end ;
32970: LD_VAR 0 5
32974: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
// result := 0 ;
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_INT 0
32986: ST_TO_ADDR
// if not array or not value in array then
32987: LD_VAR 0 1
32991: NOT
32992: PUSH
32993: LD_VAR 0 2
32997: PUSH
32998: LD_VAR 0 1
33002: IN
33003: NOT
33004: OR
33005: IFFALSE 33009
// exit ;
33007: GO 33063
// for i = 1 to array do
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: DOUBLE
33015: LD_INT 1
33017: DEC
33018: ST_TO_ADDR
33019: LD_VAR 0 1
33023: PUSH
33024: FOR_TO
33025: IFFALSE 33061
// if value = array [ i ] then
33027: LD_VAR 0 2
33031: PUSH
33032: LD_VAR 0 1
33036: PUSH
33037: LD_VAR 0 4
33041: ARRAY
33042: EQUAL
33043: IFFALSE 33059
// begin result := i ;
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_VAR 0 4
33054: ST_TO_ADDR
// exit ;
33055: POP
33056: POP
33057: GO 33063
// end ;
33059: GO 33024
33061: POP
33062: POP
// end ;
33063: LD_VAR 0 3
33067: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33068: LD_INT 0
33070: PPUSH
// vc_chassis := chassis ;
33071: LD_ADDR_OWVAR 37
33075: PUSH
33076: LD_VAR 0 1
33080: ST_TO_ADDR
// vc_engine := engine ;
33081: LD_ADDR_OWVAR 39
33085: PUSH
33086: LD_VAR 0 2
33090: ST_TO_ADDR
// vc_control := control ;
33091: LD_ADDR_OWVAR 38
33095: PUSH
33096: LD_VAR 0 3
33100: ST_TO_ADDR
// vc_weapon := weapon ;
33101: LD_ADDR_OWVAR 40
33105: PUSH
33106: LD_VAR 0 4
33110: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33111: LD_ADDR_OWVAR 41
33115: PUSH
33116: LD_VAR 0 5
33120: ST_TO_ADDR
// end ;
33121: LD_VAR 0 6
33125: RET
// export function WantPlant ( unit ) ; var task ; begin
33126: LD_INT 0
33128: PPUSH
33129: PPUSH
// result := false ;
33130: LD_ADDR_VAR 0 2
33134: PUSH
33135: LD_INT 0
33137: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 437
33152: ST_TO_ADDR
// if task then
33153: LD_VAR 0 3
33157: IFFALSE 33185
// if task [ 1 ] [ 1 ] = p then
33159: LD_VAR 0 3
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PUSH
33172: LD_STRING p
33174: EQUAL
33175: IFFALSE 33185
// result := true ;
33177: LD_ADDR_VAR 0 2
33181: PUSH
33182: LD_INT 1
33184: ST_TO_ADDR
// end ;
33185: LD_VAR 0 2
33189: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33190: LD_INT 0
33192: PPUSH
33193: PPUSH
33194: PPUSH
33195: PPUSH
// if pos < 1 then
33196: LD_VAR 0 2
33200: PUSH
33201: LD_INT 1
33203: LESS
33204: IFFALSE 33208
// exit ;
33206: GO 33511
// if pos = 1 then
33208: LD_VAR 0 2
33212: PUSH
33213: LD_INT 1
33215: EQUAL
33216: IFFALSE 33249
// result := Replace ( arr , pos [ 1 ] , value ) else
33218: LD_ADDR_VAR 0 4
33222: PUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 1
33235: ARRAY
33236: PPUSH
33237: LD_VAR 0 3
33241: PPUSH
33242: CALL_OW 1
33246: ST_TO_ADDR
33247: GO 33511
// begin tmp := arr ;
33249: LD_ADDR_VAR 0 6
33253: PUSH
33254: LD_VAR 0 1
33258: ST_TO_ADDR
// s_arr := [ tmp ] ;
33259: LD_ADDR_VAR 0 7
33263: PUSH
33264: LD_VAR 0 6
33268: PUSH
33269: EMPTY
33270: LIST
33271: ST_TO_ADDR
// for i = 1 to pos - 1 do
33272: LD_ADDR_VAR 0 5
33276: PUSH
33277: DOUBLE
33278: LD_INT 1
33280: DEC
33281: ST_TO_ADDR
33282: LD_VAR 0 2
33286: PUSH
33287: LD_INT 1
33289: MINUS
33290: PUSH
33291: FOR_TO
33292: IFFALSE 33337
// begin tmp := tmp [ pos [ i ] ] ;
33294: LD_ADDR_VAR 0 6
33298: PUSH
33299: LD_VAR 0 6
33303: PUSH
33304: LD_VAR 0 2
33308: PUSH
33309: LD_VAR 0 5
33313: ARRAY
33314: ARRAY
33315: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33316: LD_ADDR_VAR 0 7
33320: PUSH
33321: LD_VAR 0 7
33325: PUSH
33326: LD_VAR 0 6
33330: PUSH
33331: EMPTY
33332: LIST
33333: ADD
33334: ST_TO_ADDR
// end ;
33335: GO 33291
33337: POP
33338: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33339: LD_ADDR_VAR 0 6
33343: PUSH
33344: LD_VAR 0 6
33348: PPUSH
33349: LD_VAR 0 2
33353: PUSH
33354: LD_VAR 0 2
33358: ARRAY
33359: PPUSH
33360: LD_VAR 0 3
33364: PPUSH
33365: CALL_OW 1
33369: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33370: LD_ADDR_VAR 0 7
33374: PUSH
33375: LD_VAR 0 7
33379: PPUSH
33380: LD_VAR 0 7
33384: PPUSH
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 1
33394: ST_TO_ADDR
// for i = s_arr downto 2 do
33395: LD_ADDR_VAR 0 5
33399: PUSH
33400: DOUBLE
33401: LD_VAR 0 7
33405: INC
33406: ST_TO_ADDR
33407: LD_INT 2
33409: PUSH
33410: FOR_DOWNTO
33411: IFFALSE 33495
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33413: LD_ADDR_VAR 0 6
33417: PUSH
33418: LD_VAR 0 7
33422: PUSH
33423: LD_VAR 0 5
33427: PUSH
33428: LD_INT 1
33430: MINUS
33431: ARRAY
33432: PPUSH
33433: LD_VAR 0 2
33437: PUSH
33438: LD_VAR 0 5
33442: PUSH
33443: LD_INT 1
33445: MINUS
33446: ARRAY
33447: PPUSH
33448: LD_VAR 0 7
33452: PUSH
33453: LD_VAR 0 5
33457: ARRAY
33458: PPUSH
33459: CALL_OW 1
33463: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33464: LD_ADDR_VAR 0 7
33468: PUSH
33469: LD_VAR 0 7
33473: PPUSH
33474: LD_VAR 0 5
33478: PUSH
33479: LD_INT 1
33481: MINUS
33482: PPUSH
33483: LD_VAR 0 6
33487: PPUSH
33488: CALL_OW 1
33492: ST_TO_ADDR
// end ;
33493: GO 33410
33495: POP
33496: POP
// result := s_arr [ 1 ] ;
33497: LD_ADDR_VAR 0 4
33501: PUSH
33502: LD_VAR 0 7
33506: PUSH
33507: LD_INT 1
33509: ARRAY
33510: ST_TO_ADDR
// end ; end ;
33511: LD_VAR 0 4
33515: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
// if not list then
33520: LD_VAR 0 1
33524: NOT
33525: IFFALSE 33529
// exit ;
33527: GO 33620
// i := list [ pos1 ] ;
33529: LD_ADDR_VAR 0 5
33533: PUSH
33534: LD_VAR 0 1
33538: PUSH
33539: LD_VAR 0 2
33543: ARRAY
33544: ST_TO_ADDR
// if not i then
33545: LD_VAR 0 5
33549: NOT
33550: IFFALSE 33554
// exit ;
33552: GO 33620
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33554: LD_ADDR_VAR 0 1
33558: PUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: LD_VAR 0 2
33568: PPUSH
33569: LD_VAR 0 1
33573: PUSH
33574: LD_VAR 0 3
33578: ARRAY
33579: PPUSH
33580: CALL_OW 1
33584: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33585: LD_ADDR_VAR 0 1
33589: PUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: LD_VAR 0 3
33599: PPUSH
33600: LD_VAR 0 5
33604: PPUSH
33605: CALL_OW 1
33609: ST_TO_ADDR
// result := list ;
33610: LD_ADDR_VAR 0 4
33614: PUSH
33615: LD_VAR 0 1
33619: ST_TO_ADDR
// end ;
33620: LD_VAR 0 4
33624: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33625: LD_INT 0
33627: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33628: LD_ADDR_VAR 0 5
33632: PUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 250
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 251
33652: PPUSH
33653: LD_VAR 0 2
33657: PPUSH
33658: LD_VAR 0 3
33662: PPUSH
33663: LD_VAR 0 4
33667: PPUSH
33668: CALL 33678 0 5
33672: ST_TO_ADDR
// end ;
33673: LD_VAR 0 5
33677: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33678: LD_INT 0
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
// if not list then
33684: LD_VAR 0 3
33688: NOT
33689: IFFALSE 33693
// exit ;
33691: GO 34081
// result := [ ] ;
33693: LD_ADDR_VAR 0 6
33697: PUSH
33698: EMPTY
33699: ST_TO_ADDR
// for i in list do
33700: LD_ADDR_VAR 0 7
33704: PUSH
33705: LD_VAR 0 3
33709: PUSH
33710: FOR_IN
33711: IFFALSE 33913
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33713: LD_ADDR_VAR 0 9
33717: PUSH
33718: LD_VAR 0 7
33722: PPUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_VAR 0 2
33732: PPUSH
33733: CALL_OW 297
33737: ST_TO_ADDR
// if not result then
33738: LD_VAR 0 6
33742: NOT
33743: IFFALSE 33769
// result := [ [ i , tmp ] ] else
33745: LD_ADDR_VAR 0 6
33749: PUSH
33750: LD_VAR 0 7
33754: PUSH
33755: LD_VAR 0 9
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: EMPTY
33765: LIST
33766: ST_TO_ADDR
33767: GO 33911
// begin if result [ result ] [ 2 ] < tmp then
33769: LD_VAR 0 6
33773: PUSH
33774: LD_VAR 0 6
33778: ARRAY
33779: PUSH
33780: LD_INT 2
33782: ARRAY
33783: PUSH
33784: LD_VAR 0 9
33788: LESS
33789: IFFALSE 33831
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33791: LD_ADDR_VAR 0 6
33795: PUSH
33796: LD_VAR 0 6
33800: PPUSH
33801: LD_VAR 0 6
33805: PUSH
33806: LD_INT 1
33808: PLUS
33809: PPUSH
33810: LD_VAR 0 7
33814: PUSH
33815: LD_VAR 0 9
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PPUSH
33824: CALL_OW 2
33828: ST_TO_ADDR
33829: GO 33911
// for j = 1 to result do
33831: LD_ADDR_VAR 0 8
33835: PUSH
33836: DOUBLE
33837: LD_INT 1
33839: DEC
33840: ST_TO_ADDR
33841: LD_VAR 0 6
33845: PUSH
33846: FOR_TO
33847: IFFALSE 33909
// begin if tmp < result [ j ] [ 2 ] then
33849: LD_VAR 0 9
33853: PUSH
33854: LD_VAR 0 6
33858: PUSH
33859: LD_VAR 0 8
33863: ARRAY
33864: PUSH
33865: LD_INT 2
33867: ARRAY
33868: LESS
33869: IFFALSE 33907
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: LD_VAR 0 6
33880: PPUSH
33881: LD_VAR 0 8
33885: PPUSH
33886: LD_VAR 0 7
33890: PUSH
33891: LD_VAR 0 9
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PPUSH
33900: CALL_OW 2
33904: ST_TO_ADDR
// break ;
33905: GO 33909
// end ; end ;
33907: GO 33846
33909: POP
33910: POP
// end ; end ;
33911: GO 33710
33913: POP
33914: POP
// if result and not asc then
33915: LD_VAR 0 6
33919: PUSH
33920: LD_VAR 0 4
33924: NOT
33925: AND
33926: IFFALSE 34001
// begin tmp := result ;
33928: LD_ADDR_VAR 0 9
33932: PUSH
33933: LD_VAR 0 6
33937: ST_TO_ADDR
// for i = tmp downto 1 do
33938: LD_ADDR_VAR 0 7
33942: PUSH
33943: DOUBLE
33944: LD_VAR 0 9
33948: INC
33949: ST_TO_ADDR
33950: LD_INT 1
33952: PUSH
33953: FOR_DOWNTO
33954: IFFALSE 33999
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33956: LD_ADDR_VAR 0 6
33960: PUSH
33961: LD_VAR 0 6
33965: PPUSH
33966: LD_VAR 0 9
33970: PUSH
33971: LD_VAR 0 7
33975: MINUS
33976: PUSH
33977: LD_INT 1
33979: PLUS
33980: PPUSH
33981: LD_VAR 0 9
33985: PUSH
33986: LD_VAR 0 7
33990: ARRAY
33991: PPUSH
33992: CALL_OW 1
33996: ST_TO_ADDR
33997: GO 33953
33999: POP
34000: POP
// end ; tmp := [ ] ;
34001: LD_ADDR_VAR 0 9
34005: PUSH
34006: EMPTY
34007: ST_TO_ADDR
// if mode then
34008: LD_VAR 0 5
34012: IFFALSE 34081
// begin for i = 1 to result do
34014: LD_ADDR_VAR 0 7
34018: PUSH
34019: DOUBLE
34020: LD_INT 1
34022: DEC
34023: ST_TO_ADDR
34024: LD_VAR 0 6
34028: PUSH
34029: FOR_TO
34030: IFFALSE 34069
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34032: LD_ADDR_VAR 0 9
34036: PUSH
34037: LD_VAR 0 9
34041: PPUSH
34042: LD_VAR 0 7
34046: PPUSH
34047: LD_VAR 0 6
34051: PUSH
34052: LD_VAR 0 7
34056: ARRAY
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: PPUSH
34062: CALL_OW 1
34066: ST_TO_ADDR
34067: GO 34029
34069: POP
34070: POP
// result := tmp ;
34071: LD_ADDR_VAR 0 6
34075: PUSH
34076: LD_VAR 0 9
34080: ST_TO_ADDR
// end ; end ;
34081: LD_VAR 0 6
34085: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34094: LD_ADDR_VAR 0 5
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: EMPTY
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: ST_TO_ADDR
// if not x or not y then
34116: LD_VAR 0 2
34120: NOT
34121: PUSH
34122: LD_VAR 0 3
34126: NOT
34127: OR
34128: IFFALSE 34132
// exit ;
34130: GO 35778
// if not range then
34132: LD_VAR 0 4
34136: NOT
34137: IFFALSE 34147
// range := 10 ;
34139: LD_ADDR_VAR 0 4
34143: PUSH
34144: LD_INT 10
34146: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34147: LD_ADDR_VAR 0 8
34151: PUSH
34152: LD_INT 81
34154: PUSH
34155: LD_VAR 0 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 92
34166: PUSH
34167: LD_VAR 0 2
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 4
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: LD_INT 21
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL_OW 69
34214: ST_TO_ADDR
// if not tmp then
34215: LD_VAR 0 8
34219: NOT
34220: IFFALSE 34224
// exit ;
34222: GO 35778
// for i in tmp do
34224: LD_ADDR_VAR 0 6
34228: PUSH
34229: LD_VAR 0 8
34233: PUSH
34234: FOR_IN
34235: IFFALSE 35753
// begin points := [ 0 , 0 , 0 ] ;
34237: LD_ADDR_VAR 0 9
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: ST_TO_ADDR
// bpoints := 1 ;
34256: LD_ADDR_VAR 0 10
34260: PUSH
34261: LD_INT 1
34263: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34264: LD_VAR 0 6
34268: PPUSH
34269: CALL_OW 247
34273: PUSH
34274: LD_INT 1
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 34860
34282: POP
// begin if GetClass ( i ) = 1 then
34283: LD_VAR 0 6
34287: PPUSH
34288: CALL_OW 257
34292: PUSH
34293: LD_INT 1
34295: EQUAL
34296: IFFALSE 34317
// points := [ 10 , 5 , 3 ] ;
34298: LD_ADDR_VAR 0 9
34302: PUSH
34303: LD_INT 10
34305: PUSH
34306: LD_INT 5
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34317: LD_VAR 0 6
34321: PPUSH
34322: CALL_OW 257
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 4
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: IN
34341: IFFALSE 34362
// points := [ 3 , 2 , 1 ] ;
34343: LD_ADDR_VAR 0 9
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34362: LD_VAR 0 6
34366: PPUSH
34367: CALL_OW 257
34371: PUSH
34372: LD_INT 5
34374: EQUAL
34375: IFFALSE 34396
// points := [ 130 , 5 , 2 ] ;
34377: LD_ADDR_VAR 0 9
34381: PUSH
34382: LD_INT 130
34384: PUSH
34385: LD_INT 5
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34396: LD_VAR 0 6
34400: PPUSH
34401: CALL_OW 257
34405: PUSH
34406: LD_INT 8
34408: EQUAL
34409: IFFALSE 34430
// points := [ 35 , 35 , 30 ] ;
34411: LD_ADDR_VAR 0 9
34415: PUSH
34416: LD_INT 35
34418: PUSH
34419: LD_INT 35
34421: PUSH
34422: LD_INT 30
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34430: LD_VAR 0 6
34434: PPUSH
34435: CALL_OW 257
34439: PUSH
34440: LD_INT 9
34442: EQUAL
34443: IFFALSE 34464
// points := [ 20 , 55 , 40 ] ;
34445: LD_ADDR_VAR 0 9
34449: PUSH
34450: LD_INT 20
34452: PUSH
34453: LD_INT 55
34455: PUSH
34456: LD_INT 40
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34464: LD_VAR 0 6
34468: PPUSH
34469: CALL_OW 257
34473: PUSH
34474: LD_INT 12
34476: PUSH
34477: LD_INT 16
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: IN
34484: IFFALSE 34505
// points := [ 5 , 3 , 2 ] ;
34486: LD_ADDR_VAR 0 9
34490: PUSH
34491: LD_INT 5
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34505: LD_VAR 0 6
34509: PPUSH
34510: CALL_OW 257
34514: PUSH
34515: LD_INT 17
34517: EQUAL
34518: IFFALSE 34539
// points := [ 100 , 50 , 75 ] ;
34520: LD_ADDR_VAR 0 9
34524: PUSH
34525: LD_INT 100
34527: PUSH
34528: LD_INT 50
34530: PUSH
34531: LD_INT 75
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34539: LD_VAR 0 6
34543: PPUSH
34544: CALL_OW 257
34548: PUSH
34549: LD_INT 15
34551: EQUAL
34552: IFFALSE 34573
// points := [ 10 , 5 , 3 ] ;
34554: LD_ADDR_VAR 0 9
34558: PUSH
34559: LD_INT 10
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34573: LD_VAR 0 6
34577: PPUSH
34578: CALL_OW 257
34582: PUSH
34583: LD_INT 14
34585: EQUAL
34586: IFFALSE 34607
// points := [ 10 , 0 , 0 ] ;
34588: LD_ADDR_VAR 0 9
34592: PUSH
34593: LD_INT 10
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34607: LD_VAR 0 6
34611: PPUSH
34612: CALL_OW 257
34616: PUSH
34617: LD_INT 11
34619: EQUAL
34620: IFFALSE 34641
// points := [ 30 , 10 , 5 ] ;
34622: LD_ADDR_VAR 0 9
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: LD_INT 10
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34641: LD_VAR 0 1
34645: PPUSH
34646: LD_INT 5
34648: PPUSH
34649: CALL_OW 321
34653: PUSH
34654: LD_INT 2
34656: EQUAL
34657: IFFALSE 34674
// bpoints := bpoints * 1.8 ;
34659: LD_ADDR_VAR 0 10
34663: PUSH
34664: LD_VAR 0 10
34668: PUSH
34669: LD_REAL  1.80000000000000E+0000
34672: MUL
34673: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34674: LD_VAR 0 6
34678: PPUSH
34679: CALL_OW 257
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: LD_INT 4
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: IN
34702: PUSH
34703: LD_VAR 0 1
34707: PPUSH
34708: LD_INT 51
34710: PPUSH
34711: CALL_OW 321
34715: PUSH
34716: LD_INT 2
34718: EQUAL
34719: AND
34720: IFFALSE 34737
// bpoints := bpoints * 1.2 ;
34722: LD_ADDR_VAR 0 10
34726: PUSH
34727: LD_VAR 0 10
34731: PUSH
34732: LD_REAL  1.20000000000000E+0000
34735: MUL
34736: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34737: LD_VAR 0 6
34741: PPUSH
34742: CALL_OW 257
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: LD_INT 7
34752: PUSH
34753: LD_INT 9
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: IN
34761: PUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: LD_INT 52
34769: PPUSH
34770: CALL_OW 321
34774: PUSH
34775: LD_INT 2
34777: EQUAL
34778: AND
34779: IFFALSE 34796
// bpoints := bpoints * 1.5 ;
34781: LD_ADDR_VAR 0 10
34785: PUSH
34786: LD_VAR 0 10
34790: PUSH
34791: LD_REAL  1.50000000000000E+0000
34794: MUL
34795: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34796: LD_VAR 0 1
34800: PPUSH
34801: LD_INT 66
34803: PPUSH
34804: CALL_OW 321
34808: PUSH
34809: LD_INT 2
34811: EQUAL
34812: IFFALSE 34829
// bpoints := bpoints * 1.1 ;
34814: LD_ADDR_VAR 0 10
34818: PUSH
34819: LD_VAR 0 10
34823: PUSH
34824: LD_REAL  1.10000000000000E+0000
34827: MUL
34828: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34829: LD_ADDR_VAR 0 10
34833: PUSH
34834: LD_VAR 0 10
34838: PUSH
34839: LD_VAR 0 6
34843: PPUSH
34844: LD_INT 1
34846: PPUSH
34847: CALL_OW 259
34851: PUSH
34852: LD_REAL  1.15000000000000E+0000
34855: MUL
34856: MUL
34857: ST_TO_ADDR
// end ; unit_vehicle :
34858: GO 35682
34860: LD_INT 2
34862: DOUBLE
34863: EQUAL
34864: IFTRUE 34868
34866: GO 35670
34868: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34869: LD_VAR 0 6
34873: PPUSH
34874: CALL_OW 264
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 42
34884: PUSH
34885: LD_INT 24
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: IN
34893: IFFALSE 34914
// points := [ 25 , 5 , 3 ] ;
34895: LD_ADDR_VAR 0 9
34899: PUSH
34900: LD_INT 25
34902: PUSH
34903: LD_INT 5
34905: PUSH
34906: LD_INT 3
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34914: LD_VAR 0 6
34918: PPUSH
34919: CALL_OW 264
34923: PUSH
34924: LD_INT 4
34926: PUSH
34927: LD_INT 43
34929: PUSH
34930: LD_INT 25
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: IN
34938: IFFALSE 34959
// points := [ 40 , 15 , 5 ] ;
34940: LD_ADDR_VAR 0 9
34944: PUSH
34945: LD_INT 40
34947: PUSH
34948: LD_INT 15
34950: PUSH
34951: LD_INT 5
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34959: LD_VAR 0 6
34963: PPUSH
34964: CALL_OW 264
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: LD_INT 23
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: IN
34979: IFFALSE 35000
// points := [ 7 , 25 , 8 ] ;
34981: LD_ADDR_VAR 0 9
34985: PUSH
34986: LD_INT 7
34988: PUSH
34989: LD_INT 25
34991: PUSH
34992: LD_INT 8
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35000: LD_VAR 0 6
35004: PPUSH
35005: CALL_OW 264
35009: PUSH
35010: LD_INT 5
35012: PUSH
35013: LD_INT 27
35015: PUSH
35016: LD_INT 44
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: IN
35024: IFFALSE 35045
// points := [ 14 , 50 , 16 ] ;
35026: LD_ADDR_VAR 0 9
35030: PUSH
35031: LD_INT 14
35033: PUSH
35034: LD_INT 50
35036: PUSH
35037: LD_INT 16
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 264
35054: PUSH
35055: LD_INT 6
35057: PUSH
35058: LD_INT 46
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: IN
35065: IFFALSE 35086
// points := [ 32 , 120 , 70 ] ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_INT 32
35074: PUSH
35075: LD_INT 120
35077: PUSH
35078: LD_INT 70
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35086: LD_VAR 0 6
35090: PPUSH
35091: CALL_OW 264
35095: PUSH
35096: LD_INT 7
35098: PUSH
35099: LD_INT 28
35101: PUSH
35102: LD_INT 45
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: IN
35110: IFFALSE 35131
// points := [ 35 , 20 , 45 ] ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_INT 35
35119: PUSH
35120: LD_INT 20
35122: PUSH
35123: LD_INT 45
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35131: LD_VAR 0 6
35135: PPUSH
35136: CALL_OW 264
35140: PUSH
35141: LD_INT 47
35143: PUSH
35144: EMPTY
35145: LIST
35146: IN
35147: IFFALSE 35168
// points := [ 67 , 45 , 75 ] ;
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_INT 67
35156: PUSH
35157: LD_INT 45
35159: PUSH
35160: LD_INT 75
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35168: LD_VAR 0 6
35172: PPUSH
35173: CALL_OW 264
35177: PUSH
35178: LD_INT 26
35180: PUSH
35181: EMPTY
35182: LIST
35183: IN
35184: IFFALSE 35205
// points := [ 120 , 30 , 80 ] ;
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_INT 120
35193: PUSH
35194: LD_INT 30
35196: PUSH
35197: LD_INT 80
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 264
35214: PUSH
35215: LD_INT 22
35217: PUSH
35218: EMPTY
35219: LIST
35220: IN
35221: IFFALSE 35242
// points := [ 40 , 1 , 1 ] ;
35223: LD_ADDR_VAR 0 9
35227: PUSH
35228: LD_INT 40
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35242: LD_VAR 0 6
35246: PPUSH
35247: CALL_OW 264
35251: PUSH
35252: LD_INT 29
35254: PUSH
35255: EMPTY
35256: LIST
35257: IN
35258: IFFALSE 35279
// points := [ 70 , 200 , 400 ] ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_INT 70
35267: PUSH
35268: LD_INT 200
35270: PUSH
35271: LD_INT 400
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL_OW 264
35288: PUSH
35289: LD_INT 14
35291: PUSH
35292: LD_INT 53
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: IN
35299: IFFALSE 35320
// points := [ 40 , 10 , 20 ] ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_INT 40
35308: PUSH
35309: LD_INT 10
35311: PUSH
35312: LD_INT 20
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 264
35329: PUSH
35330: LD_INT 9
35332: PUSH
35333: EMPTY
35334: LIST
35335: IN
35336: IFFALSE 35357
// points := [ 5 , 70 , 20 ] ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: LD_INT 70
35348: PUSH
35349: LD_INT 20
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 264
35366: PUSH
35367: LD_INT 10
35369: PUSH
35370: EMPTY
35371: LIST
35372: IN
35373: IFFALSE 35394
// points := [ 35 , 110 , 70 ] ;
35375: LD_ADDR_VAR 0 9
35379: PUSH
35380: LD_INT 35
35382: PUSH
35383: LD_INT 110
35385: PUSH
35386: LD_INT 70
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35394: LD_VAR 0 6
35398: PPUSH
35399: CALL_OW 265
35403: PUSH
35404: LD_INT 25
35406: EQUAL
35407: IFFALSE 35428
// points := [ 80 , 65 , 100 ] ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_INT 80
35416: PUSH
35417: LD_INT 65
35419: PUSH
35420: LD_INT 100
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35428: LD_VAR 0 6
35432: PPUSH
35433: CALL_OW 263
35437: PUSH
35438: LD_INT 1
35440: EQUAL
35441: IFFALSE 35476
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35443: LD_ADDR_VAR 0 10
35447: PUSH
35448: LD_VAR 0 10
35452: PUSH
35453: LD_VAR 0 6
35457: PPUSH
35458: CALL_OW 311
35462: PPUSH
35463: LD_INT 3
35465: PPUSH
35466: CALL_OW 259
35470: PUSH
35471: LD_INT 4
35473: MUL
35474: MUL
35475: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35476: LD_VAR 0 6
35480: PPUSH
35481: CALL_OW 263
35485: PUSH
35486: LD_INT 2
35488: EQUAL
35489: IFFALSE 35540
// begin j := IsControledBy ( i ) ;
35491: LD_ADDR_VAR 0 7
35495: PUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: CALL_OW 312
35505: ST_TO_ADDR
// if j then
35506: LD_VAR 0 7
35510: IFFALSE 35540
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35512: LD_ADDR_VAR 0 10
35516: PUSH
35517: LD_VAR 0 10
35521: PUSH
35522: LD_VAR 0 7
35526: PPUSH
35527: LD_INT 3
35529: PPUSH
35530: CALL_OW 259
35534: PUSH
35535: LD_INT 3
35537: MUL
35538: MUL
35539: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35540: LD_VAR 0 6
35544: PPUSH
35545: CALL_OW 264
35549: PUSH
35550: LD_INT 5
35552: PUSH
35553: LD_INT 6
35555: PUSH
35556: LD_INT 46
35558: PUSH
35559: LD_INT 44
35561: PUSH
35562: LD_INT 47
35564: PUSH
35565: LD_INT 45
35567: PUSH
35568: LD_INT 28
35570: PUSH
35571: LD_INT 7
35573: PUSH
35574: LD_INT 27
35576: PUSH
35577: LD_INT 29
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: IN
35592: PUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: LD_INT 52
35600: PPUSH
35601: CALL_OW 321
35605: PUSH
35606: LD_INT 2
35608: EQUAL
35609: AND
35610: IFFALSE 35627
// bpoints := bpoints * 1.2 ;
35612: LD_ADDR_VAR 0 10
35616: PUSH
35617: LD_VAR 0 10
35621: PUSH
35622: LD_REAL  1.20000000000000E+0000
35625: MUL
35626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35627: LD_VAR 0 6
35631: PPUSH
35632: CALL_OW 264
35636: PUSH
35637: LD_INT 6
35639: PUSH
35640: LD_INT 46
35642: PUSH
35643: LD_INT 47
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: IN
35651: IFFALSE 35668
// bpoints := bpoints * 1.2 ;
35653: LD_ADDR_VAR 0 10
35657: PUSH
35658: LD_VAR 0 10
35662: PUSH
35663: LD_REAL  1.20000000000000E+0000
35666: MUL
35667: ST_TO_ADDR
// end ; unit_building :
35668: GO 35682
35670: LD_INT 3
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35681
35678: POP
// ; end ;
35679: GO 35682
35681: POP
// for j = 1 to 3 do
35682: LD_ADDR_VAR 0 7
35686: PUSH
35687: DOUBLE
35688: LD_INT 1
35690: DEC
35691: ST_TO_ADDR
35692: LD_INT 3
35694: PUSH
35695: FOR_TO
35696: IFFALSE 35749
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35698: LD_ADDR_VAR 0 5
35702: PUSH
35703: LD_VAR 0 5
35707: PPUSH
35708: LD_VAR 0 7
35712: PPUSH
35713: LD_VAR 0 5
35717: PUSH
35718: LD_VAR 0 7
35722: ARRAY
35723: PUSH
35724: LD_VAR 0 9
35728: PUSH
35729: LD_VAR 0 7
35733: ARRAY
35734: PUSH
35735: LD_VAR 0 10
35739: MUL
35740: PLUS
35741: PPUSH
35742: CALL_OW 1
35746: ST_TO_ADDR
35747: GO 35695
35749: POP
35750: POP
// end ;
35751: GO 34234
35753: POP
35754: POP
// result := Replace ( result , 4 , tmp ) ;
35755: LD_ADDR_VAR 0 5
35759: PUSH
35760: LD_VAR 0 5
35764: PPUSH
35765: LD_INT 4
35767: PPUSH
35768: LD_VAR 0 8
35772: PPUSH
35773: CALL_OW 1
35777: ST_TO_ADDR
// end ;
35778: LD_VAR 0 5
35782: RET
// export function DangerAtRange ( unit , range ) ; begin
35783: LD_INT 0
35785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_VAR 0 1
35795: PPUSH
35796: CALL_OW 255
35800: PPUSH
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 250
35810: PPUSH
35811: LD_VAR 0 1
35815: PPUSH
35816: CALL_OW 251
35820: PPUSH
35821: LD_VAR 0 2
35825: PPUSH
35826: CALL 34086 0 4
35830: ST_TO_ADDR
// end ;
35831: LD_VAR 0 3
35835: RET
// export function DangerInArea ( side , area ) ; begin
35836: LD_INT 0
35838: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35839: LD_ADDR_VAR 0 3
35843: PUSH
35844: LD_VAR 0 2
35848: PPUSH
35849: LD_INT 81
35851: PUSH
35852: LD_VAR 0 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PPUSH
35861: CALL_OW 70
35865: ST_TO_ADDR
// end ;
35866: LD_VAR 0 3
35870: RET
// export function IsExtension ( b ) ; begin
35871: LD_INT 0
35873: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35874: LD_ADDR_VAR 0 2
35878: PUSH
35879: LD_VAR 0 1
35883: PUSH
35884: LD_INT 23
35886: PUSH
35887: LD_INT 20
35889: PUSH
35890: LD_INT 22
35892: PUSH
35893: LD_INT 17
35895: PUSH
35896: LD_INT 24
35898: PUSH
35899: LD_INT 21
35901: PUSH
35902: LD_INT 19
35904: PUSH
35905: LD_INT 16
35907: PUSH
35908: LD_INT 25
35910: PUSH
35911: LD_INT 18
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: IN
35926: ST_TO_ADDR
// end ;
35927: LD_VAR 0 2
35931: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
35936: PPUSH
// result := [ ] ;
35937: LD_ADDR_VAR 0 4
35941: PUSH
35942: EMPTY
35943: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_INT 21
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL_OW 70
35968: ST_TO_ADDR
// if not tmp then
35969: LD_VAR 0 5
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36042
// if checkLink then
35978: LD_VAR 0 3
35982: IFFALSE 36032
// begin for i in tmp do
35984: LD_ADDR_VAR 0 6
35988: PUSH
35989: LD_VAR 0 5
35993: PUSH
35994: FOR_IN
35995: IFFALSE 36030
// if GetBase ( i ) <> base then
35997: LD_VAR 0 6
36001: PPUSH
36002: CALL_OW 274
36006: PUSH
36007: LD_VAR 0 1
36011: NONEQUAL
36012: IFFALSE 36028
// ComLinkToBase ( base , i ) ;
36014: LD_VAR 0 1
36018: PPUSH
36019: LD_VAR 0 6
36023: PPUSH
36024: CALL_OW 169
36028: GO 35994
36030: POP
36031: POP
// end ; result := tmp ;
36032: LD_ADDR_VAR 0 4
36036: PUSH
36037: LD_VAR 0 5
36041: ST_TO_ADDR
// end ;
36042: LD_VAR 0 4
36046: RET
// export function ComComplete ( units , b ) ; var i ; begin
36047: LD_INT 0
36049: PPUSH
36050: PPUSH
// if not units then
36051: LD_VAR 0 1
36055: NOT
36056: IFFALSE 36060
// exit ;
36058: GO 36150
// for i in units do
36060: LD_ADDR_VAR 0 4
36064: PUSH
36065: LD_VAR 0 1
36069: PUSH
36070: FOR_IN
36071: IFFALSE 36148
// if BuildingStatus ( b ) = bs_build then
36073: LD_VAR 0 2
36077: PPUSH
36078: CALL_OW 461
36082: PUSH
36083: LD_INT 1
36085: EQUAL
36086: IFFALSE 36146
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36088: LD_VAR 0 4
36092: PPUSH
36093: LD_STRING h
36095: PUSH
36096: LD_VAR 0 2
36100: PPUSH
36101: CALL_OW 250
36105: PUSH
36106: LD_VAR 0 2
36110: PPUSH
36111: CALL_OW 251
36115: PUSH
36116: LD_VAR 0 2
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: PPUSH
36142: CALL_OW 446
36146: GO 36070
36148: POP
36149: POP
// end ;
36150: LD_VAR 0 3
36154: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36155: LD_INT 0
36157: PPUSH
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36163: LD_VAR 0 1
36167: NOT
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 263
36178: PUSH
36179: LD_INT 2
36181: EQUAL
36182: NOT
36183: OR
36184: IFFALSE 36188
// exit ;
36186: GO 36504
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36188: LD_ADDR_VAR 0 6
36192: PUSH
36193: LD_INT 22
36195: PUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 255
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 30
36215: PUSH
36216: LD_INT 36
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 34
36225: PUSH
36226: LD_INT 31
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PPUSH
36242: CALL_OW 69
36246: ST_TO_ADDR
// if not tmp then
36247: LD_VAR 0 6
36251: NOT
36252: IFFALSE 36256
// exit ;
36254: GO 36504
// result := [ ] ;
36256: LD_ADDR_VAR 0 2
36260: PUSH
36261: EMPTY
36262: ST_TO_ADDR
// for i in tmp do
36263: LD_ADDR_VAR 0 3
36267: PUSH
36268: LD_VAR 0 6
36272: PUSH
36273: FOR_IN
36274: IFFALSE 36345
// begin t := UnitsInside ( i ) ;
36276: LD_ADDR_VAR 0 4
36280: PUSH
36281: LD_VAR 0 3
36285: PPUSH
36286: CALL_OW 313
36290: ST_TO_ADDR
// if t then
36291: LD_VAR 0 4
36295: IFFALSE 36343
// for j in t do
36297: LD_ADDR_VAR 0 7
36301: PUSH
36302: LD_VAR 0 4
36306: PUSH
36307: FOR_IN
36308: IFFALSE 36341
// result := Insert ( result , result + 1 , j ) ;
36310: LD_ADDR_VAR 0 2
36314: PUSH
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 2
36324: PUSH
36325: LD_INT 1
36327: PLUS
36328: PPUSH
36329: LD_VAR 0 7
36333: PPUSH
36334: CALL_OW 2
36338: ST_TO_ADDR
36339: GO 36307
36341: POP
36342: POP
// end ;
36343: GO 36273
36345: POP
36346: POP
// if not result then
36347: LD_VAR 0 2
36351: NOT
36352: IFFALSE 36356
// exit ;
36354: GO 36504
// mech := result [ 1 ] ;
36356: LD_ADDR_VAR 0 5
36360: PUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: ST_TO_ADDR
// if result > 1 then
36370: LD_VAR 0 2
36374: PUSH
36375: LD_INT 1
36377: GREATER
36378: IFFALSE 36490
// for i = 2 to result do
36380: LD_ADDR_VAR 0 3
36384: PUSH
36385: DOUBLE
36386: LD_INT 2
36388: DEC
36389: ST_TO_ADDR
36390: LD_VAR 0 2
36394: PUSH
36395: FOR_TO
36396: IFFALSE 36488
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36398: LD_ADDR_VAR 0 4
36402: PUSH
36403: LD_VAR 0 2
36407: PUSH
36408: LD_VAR 0 3
36412: ARRAY
36413: PPUSH
36414: LD_INT 3
36416: PPUSH
36417: CALL_OW 259
36421: PUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_VAR 0 3
36431: ARRAY
36432: PPUSH
36433: CALL_OW 432
36437: MINUS
36438: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36439: LD_VAR 0 4
36443: PUSH
36444: LD_VAR 0 5
36448: PPUSH
36449: LD_INT 3
36451: PPUSH
36452: CALL_OW 259
36456: PUSH
36457: LD_VAR 0 5
36461: PPUSH
36462: CALL_OW 432
36466: MINUS
36467: GREATEREQUAL
36468: IFFALSE 36486
// mech := result [ i ] ;
36470: LD_ADDR_VAR 0 5
36474: PUSH
36475: LD_VAR 0 2
36479: PUSH
36480: LD_VAR 0 3
36484: ARRAY
36485: ST_TO_ADDR
// end ;
36486: GO 36395
36488: POP
36489: POP
// ComLinkTo ( vehicle , mech ) ;
36490: LD_VAR 0 1
36494: PPUSH
36495: LD_VAR 0 5
36499: PPUSH
36500: CALL_OW 135
// end ;
36504: LD_VAR 0 2
36508: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36509: LD_INT 0
36511: PPUSH
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
36523: PPUSH
// result := [ ] ;
36524: LD_ADDR_VAR 0 7
36528: PUSH
36529: EMPTY
36530: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 266
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: IN
36551: NOT
36552: IFFALSE 36556
// exit ;
36554: GO 38190
// if name then
36556: LD_VAR 0 3
36560: IFFALSE 36576
// SetBName ( base_dep , name ) ;
36562: LD_VAR 0 1
36566: PPUSH
36567: LD_VAR 0 3
36571: PPUSH
36572: CALL_OW 500
// base := GetBase ( base_dep ) ;
36576: LD_ADDR_VAR 0 15
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 274
36590: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36591: LD_ADDR_VAR 0 16
36595: PUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 255
36605: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36606: LD_ADDR_VAR 0 17
36610: PUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 248
36620: ST_TO_ADDR
// if sources then
36621: LD_VAR 0 5
36625: IFFALSE 36672
// for i = 1 to 3 do
36627: LD_ADDR_VAR 0 8
36631: PUSH
36632: DOUBLE
36633: LD_INT 1
36635: DEC
36636: ST_TO_ADDR
36637: LD_INT 3
36639: PUSH
36640: FOR_TO
36641: IFFALSE 36670
// AddResourceType ( base , i , sources [ i ] ) ;
36643: LD_VAR 0 15
36647: PPUSH
36648: LD_VAR 0 8
36652: PPUSH
36653: LD_VAR 0 5
36657: PUSH
36658: LD_VAR 0 8
36662: ARRAY
36663: PPUSH
36664: CALL_OW 276
36668: GO 36640
36670: POP
36671: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36672: LD_ADDR_VAR 0 18
36676: PUSH
36677: LD_VAR 0 15
36681: PPUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: LD_INT 1
36689: PPUSH
36690: CALL 35932 0 3
36694: ST_TO_ADDR
// InitHc ;
36695: CALL_OW 19
// InitUc ;
36699: CALL_OW 18
// uc_side := side ;
36703: LD_ADDR_OWVAR 20
36707: PUSH
36708: LD_VAR 0 16
36712: ST_TO_ADDR
// uc_nation := nation ;
36713: LD_ADDR_OWVAR 21
36717: PUSH
36718: LD_VAR 0 17
36722: ST_TO_ADDR
// if buildings then
36723: LD_VAR 0 18
36727: IFFALSE 38049
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36729: LD_ADDR_VAR 0 19
36733: PUSH
36734: LD_VAR 0 18
36738: PPUSH
36739: LD_INT 2
36741: PUSH
36742: LD_INT 30
36744: PUSH
36745: LD_INT 29
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 30
36754: PUSH
36755: LD_INT 30
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PPUSH
36767: CALL_OW 72
36771: ST_TO_ADDR
// if tmp then
36772: LD_VAR 0 19
36776: IFFALSE 36824
// for i in tmp do
36778: LD_ADDR_VAR 0 8
36782: PUSH
36783: LD_VAR 0 19
36787: PUSH
36788: FOR_IN
36789: IFFALSE 36822
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36791: LD_VAR 0 8
36795: PPUSH
36796: CALL_OW 250
36800: PPUSH
36801: LD_VAR 0 8
36805: PPUSH
36806: CALL_OW 251
36810: PPUSH
36811: LD_VAR 0 16
36815: PPUSH
36816: CALL_OW 441
36820: GO 36788
36822: POP
36823: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36824: LD_VAR 0 18
36828: PPUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 30
36834: PUSH
36835: LD_INT 32
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 30
36844: PUSH
36845: LD_INT 33
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: PPUSH
36857: CALL_OW 72
36861: IFFALSE 36949
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36863: LD_ADDR_VAR 0 8
36867: PUSH
36868: LD_VAR 0 18
36872: PPUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 30
36878: PUSH
36879: LD_INT 32
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 30
36888: PUSH
36889: LD_INT 33
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: PPUSH
36901: CALL_OW 72
36905: PUSH
36906: FOR_IN
36907: IFFALSE 36947
// begin if not GetBWeapon ( i ) then
36909: LD_VAR 0 8
36913: PPUSH
36914: CALL_OW 269
36918: NOT
36919: IFFALSE 36945
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36921: LD_VAR 0 8
36925: PPUSH
36926: LD_VAR 0 8
36930: PPUSH
36931: LD_VAR 0 2
36935: PPUSH
36936: CALL 38195 0 2
36940: PPUSH
36941: CALL_OW 431
// end ;
36945: GO 36906
36947: POP
36948: POP
// end ; for i = 1 to personel do
36949: LD_ADDR_VAR 0 8
36953: PUSH
36954: DOUBLE
36955: LD_INT 1
36957: DEC
36958: ST_TO_ADDR
36959: LD_VAR 0 6
36963: PUSH
36964: FOR_TO
36965: IFFALSE 38029
// begin if i > 4 then
36967: LD_VAR 0 8
36971: PUSH
36972: LD_INT 4
36974: GREATER
36975: IFFALSE 36979
// break ;
36977: GO 38029
// case i of 1 :
36979: LD_VAR 0 8
36983: PUSH
36984: LD_INT 1
36986: DOUBLE
36987: EQUAL
36988: IFTRUE 36992
36990: GO 37072
36992: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36993: LD_ADDR_VAR 0 12
36997: PUSH
36998: LD_VAR 0 18
37002: PPUSH
37003: LD_INT 22
37005: PUSH
37006: LD_VAR 0 16
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 58
37017: PUSH
37018: EMPTY
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 30
37026: PUSH
37027: LD_INT 32
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 30
37036: PUSH
37037: LD_INT 4
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: PPUSH
37065: CALL_OW 72
37069: ST_TO_ADDR
37070: GO 37294
37072: LD_INT 2
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37080
37078: GO 37142
37080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37081: LD_ADDR_VAR 0 12
37085: PUSH
37086: LD_VAR 0 18
37090: PPUSH
37091: LD_INT 22
37093: PUSH
37094: LD_VAR 0 16
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 30
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 30
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PPUSH
37135: CALL_OW 72
37139: ST_TO_ADDR
37140: GO 37294
37142: LD_INT 3
37144: DOUBLE
37145: EQUAL
37146: IFTRUE 37150
37148: GO 37212
37150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37151: LD_ADDR_VAR 0 12
37155: PUSH
37156: LD_VAR 0 18
37160: PPUSH
37161: LD_INT 22
37163: PUSH
37164: LD_VAR 0 16
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 30
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 72
37209: ST_TO_ADDR
37210: GO 37294
37212: LD_INT 4
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37293
37220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37221: LD_ADDR_VAR 0 12
37225: PUSH
37226: LD_VAR 0 18
37230: PPUSH
37231: LD_INT 22
37233: PUSH
37234: LD_VAR 0 16
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: LD_INT 6
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 30
37258: PUSH
37259: LD_INT 7
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 30
37268: PUSH
37269: LD_INT 8
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 72
37290: ST_TO_ADDR
37291: GO 37294
37293: POP
// if i = 1 then
37294: LD_VAR 0 8
37298: PUSH
37299: LD_INT 1
37301: EQUAL
37302: IFFALSE 37413
// begin tmp := [ ] ;
37304: LD_ADDR_VAR 0 19
37308: PUSH
37309: EMPTY
37310: ST_TO_ADDR
// for j in f do
37311: LD_ADDR_VAR 0 9
37315: PUSH
37316: LD_VAR 0 12
37320: PUSH
37321: FOR_IN
37322: IFFALSE 37395
// if GetBType ( j ) = b_bunker then
37324: LD_VAR 0 9
37328: PPUSH
37329: CALL_OW 266
37333: PUSH
37334: LD_INT 32
37336: EQUAL
37337: IFFALSE 37364
// tmp := Insert ( tmp , 1 , j ) else
37339: LD_ADDR_VAR 0 19
37343: PUSH
37344: LD_VAR 0 19
37348: PPUSH
37349: LD_INT 1
37351: PPUSH
37352: LD_VAR 0 9
37356: PPUSH
37357: CALL_OW 2
37361: ST_TO_ADDR
37362: GO 37393
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37364: LD_ADDR_VAR 0 19
37368: PUSH
37369: LD_VAR 0 19
37373: PPUSH
37374: LD_VAR 0 19
37378: PUSH
37379: LD_INT 1
37381: PLUS
37382: PPUSH
37383: LD_VAR 0 9
37387: PPUSH
37388: CALL_OW 2
37392: ST_TO_ADDR
37393: GO 37321
37395: POP
37396: POP
// if tmp then
37397: LD_VAR 0 19
37401: IFFALSE 37413
// f := tmp ;
37403: LD_ADDR_VAR 0 12
37407: PUSH
37408: LD_VAR 0 19
37412: ST_TO_ADDR
// end ; x := personel [ i ] ;
37413: LD_ADDR_VAR 0 13
37417: PUSH
37418: LD_VAR 0 6
37422: PUSH
37423: LD_VAR 0 8
37427: ARRAY
37428: ST_TO_ADDR
// if x = - 1 then
37429: LD_VAR 0 13
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: EQUAL
37438: IFFALSE 37647
// begin for j in f do
37440: LD_ADDR_VAR 0 9
37444: PUSH
37445: LD_VAR 0 12
37449: PUSH
37450: FOR_IN
37451: IFFALSE 37643
// repeat InitHc ;
37453: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37457: LD_VAR 0 9
37461: PPUSH
37462: CALL_OW 266
37466: PUSH
37467: LD_INT 5
37469: EQUAL
37470: IFFALSE 37540
// begin if UnitsInside ( j ) < 3 then
37472: LD_VAR 0 9
37476: PPUSH
37477: CALL_OW 313
37481: PUSH
37482: LD_INT 3
37484: LESS
37485: IFFALSE 37521
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37487: LD_INT 0
37489: PPUSH
37490: LD_INT 5
37492: PUSH
37493: LD_INT 8
37495: PUSH
37496: LD_INT 9
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: PUSH
37504: LD_VAR 0 17
37508: ARRAY
37509: PPUSH
37510: LD_VAR 0 4
37514: PPUSH
37515: CALL_OW 380
37519: GO 37538
// PrepareHuman ( false , i , skill ) ;
37521: LD_INT 0
37523: PPUSH
37524: LD_VAR 0 8
37528: PPUSH
37529: LD_VAR 0 4
37533: PPUSH
37534: CALL_OW 380
// end else
37538: GO 37557
// PrepareHuman ( false , i , skill ) ;
37540: LD_INT 0
37542: PPUSH
37543: LD_VAR 0 8
37547: PPUSH
37548: LD_VAR 0 4
37552: PPUSH
37553: CALL_OW 380
// un := CreateHuman ;
37557: LD_ADDR_VAR 0 14
37561: PUSH
37562: CALL_OW 44
37566: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: LD_VAR 0 7
37576: PPUSH
37577: LD_INT 1
37579: PPUSH
37580: LD_VAR 0 14
37584: PPUSH
37585: CALL_OW 2
37589: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37590: LD_VAR 0 14
37594: PPUSH
37595: LD_VAR 0 9
37599: PPUSH
37600: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37604: LD_VAR 0 9
37608: PPUSH
37609: CALL_OW 313
37613: PUSH
37614: LD_INT 6
37616: EQUAL
37617: PUSH
37618: LD_VAR 0 9
37622: PPUSH
37623: CALL_OW 266
37627: PUSH
37628: LD_INT 32
37630: PUSH
37631: LD_INT 31
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: IN
37638: OR
37639: IFFALSE 37453
37641: GO 37450
37643: POP
37644: POP
// end else
37645: GO 38027
// for j = 1 to x do
37647: LD_ADDR_VAR 0 9
37651: PUSH
37652: DOUBLE
37653: LD_INT 1
37655: DEC
37656: ST_TO_ADDR
37657: LD_VAR 0 13
37661: PUSH
37662: FOR_TO
37663: IFFALSE 38025
// begin InitHc ;
37665: CALL_OW 19
// if not f then
37669: LD_VAR 0 12
37673: NOT
37674: IFFALSE 37763
// begin PrepareHuman ( false , i , skill ) ;
37676: LD_INT 0
37678: PPUSH
37679: LD_VAR 0 8
37683: PPUSH
37684: LD_VAR 0 4
37688: PPUSH
37689: CALL_OW 380
// un := CreateHuman ;
37693: LD_ADDR_VAR 0 14
37697: PUSH
37698: CALL_OW 44
37702: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37703: LD_ADDR_VAR 0 7
37707: PUSH
37708: LD_VAR 0 7
37712: PPUSH
37713: LD_INT 1
37715: PPUSH
37716: LD_VAR 0 14
37720: PPUSH
37721: CALL_OW 2
37725: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37726: LD_VAR 0 14
37730: PPUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 250
37740: PPUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: CALL_OW 251
37750: PPUSH
37751: LD_INT 10
37753: PPUSH
37754: LD_INT 0
37756: PPUSH
37757: CALL_OW 50
// continue ;
37761: GO 37662
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37763: LD_VAR 0 12
37767: PUSH
37768: LD_INT 1
37770: ARRAY
37771: PPUSH
37772: CALL_OW 313
37776: PUSH
37777: LD_VAR 0 12
37781: PUSH
37782: LD_INT 1
37784: ARRAY
37785: PPUSH
37786: CALL_OW 266
37790: PUSH
37791: LD_INT 32
37793: PUSH
37794: LD_INT 31
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: IN
37801: AND
37802: PUSH
37803: LD_VAR 0 12
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: PPUSH
37812: CALL_OW 313
37816: PUSH
37817: LD_INT 6
37819: EQUAL
37820: OR
37821: IFFALSE 37841
// f := Delete ( f , 1 ) ;
37823: LD_ADDR_VAR 0 12
37827: PUSH
37828: LD_VAR 0 12
37832: PPUSH
37833: LD_INT 1
37835: PPUSH
37836: CALL_OW 3
37840: ST_TO_ADDR
// if not f then
37841: LD_VAR 0 12
37845: NOT
37846: IFFALSE 37864
// begin x := x + 2 ;
37848: LD_ADDR_VAR 0 13
37852: PUSH
37853: LD_VAR 0 13
37857: PUSH
37858: LD_INT 2
37860: PLUS
37861: ST_TO_ADDR
// continue ;
37862: GO 37662
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37864: LD_VAR 0 12
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: PPUSH
37873: CALL_OW 266
37877: PUSH
37878: LD_INT 5
37880: EQUAL
37881: IFFALSE 37955
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37883: LD_VAR 0 12
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PPUSH
37892: CALL_OW 313
37896: PUSH
37897: LD_INT 3
37899: LESS
37900: IFFALSE 37936
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37902: LD_INT 0
37904: PPUSH
37905: LD_INT 5
37907: PUSH
37908: LD_INT 8
37910: PUSH
37911: LD_INT 9
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: PUSH
37919: LD_VAR 0 17
37923: ARRAY
37924: PPUSH
37925: LD_VAR 0 4
37929: PPUSH
37930: CALL_OW 380
37934: GO 37953
// PrepareHuman ( false , i , skill ) ;
37936: LD_INT 0
37938: PPUSH
37939: LD_VAR 0 8
37943: PPUSH
37944: LD_VAR 0 4
37948: PPUSH
37949: CALL_OW 380
// end else
37953: GO 37972
// PrepareHuman ( false , i , skill ) ;
37955: LD_INT 0
37957: PPUSH
37958: LD_VAR 0 8
37962: PPUSH
37963: LD_VAR 0 4
37967: PPUSH
37968: CALL_OW 380
// un := CreateHuman ;
37972: LD_ADDR_VAR 0 14
37976: PUSH
37977: CALL_OW 44
37981: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37982: LD_ADDR_VAR 0 7
37986: PUSH
37987: LD_VAR 0 7
37991: PPUSH
37992: LD_INT 1
37994: PPUSH
37995: LD_VAR 0 14
37999: PPUSH
38000: CALL_OW 2
38004: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38005: LD_VAR 0 14
38009: PPUSH
38010: LD_VAR 0 12
38014: PUSH
38015: LD_INT 1
38017: ARRAY
38018: PPUSH
38019: CALL_OW 52
// end ;
38023: GO 37662
38025: POP
38026: POP
// end ;
38027: GO 36964
38029: POP
38030: POP
// result := result ^ buildings ;
38031: LD_ADDR_VAR 0 7
38035: PUSH
38036: LD_VAR 0 7
38040: PUSH
38041: LD_VAR 0 18
38045: ADD
38046: ST_TO_ADDR
// end else
38047: GO 38190
// begin for i = 1 to personel do
38049: LD_ADDR_VAR 0 8
38053: PUSH
38054: DOUBLE
38055: LD_INT 1
38057: DEC
38058: ST_TO_ADDR
38059: LD_VAR 0 6
38063: PUSH
38064: FOR_TO
38065: IFFALSE 38188
// begin if i > 4 then
38067: LD_VAR 0 8
38071: PUSH
38072: LD_INT 4
38074: GREATER
38075: IFFALSE 38079
// break ;
38077: GO 38188
// x := personel [ i ] ;
38079: LD_ADDR_VAR 0 13
38083: PUSH
38084: LD_VAR 0 6
38088: PUSH
38089: LD_VAR 0 8
38093: ARRAY
38094: ST_TO_ADDR
// if x = - 1 then
38095: LD_VAR 0 13
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: EQUAL
38104: IFFALSE 38108
// continue ;
38106: GO 38064
// PrepareHuman ( false , i , skill ) ;
38108: LD_INT 0
38110: PPUSH
38111: LD_VAR 0 8
38115: PPUSH
38116: LD_VAR 0 4
38120: PPUSH
38121: CALL_OW 380
// un := CreateHuman ;
38125: LD_ADDR_VAR 0 14
38129: PUSH
38130: CALL_OW 44
38134: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38135: LD_VAR 0 14
38139: PPUSH
38140: LD_VAR 0 1
38144: PPUSH
38145: CALL_OW 250
38149: PPUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 251
38159: PPUSH
38160: LD_INT 10
38162: PPUSH
38163: LD_INT 0
38165: PPUSH
38166: CALL_OW 50
// result := result ^ un ;
38170: LD_ADDR_VAR 0 7
38174: PUSH
38175: LD_VAR 0 7
38179: PUSH
38180: LD_VAR 0 14
38184: ADD
38185: ST_TO_ADDR
// end ;
38186: GO 38064
38188: POP
38189: POP
// end ; end ;
38190: LD_VAR 0 7
38194: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38195: LD_INT 0
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
// result := false ;
38213: LD_ADDR_VAR 0 3
38217: PUSH
38218: LD_INT 0
38220: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38221: LD_VAR 0 1
38225: NOT
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 266
38236: PUSH
38237: LD_INT 32
38239: PUSH
38240: LD_INT 33
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: IN
38247: NOT
38248: OR
38249: IFFALSE 38253
// exit ;
38251: GO 39392
// nat := GetNation ( tower ) ;
38253: LD_ADDR_VAR 0 12
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 248
38267: ST_TO_ADDR
// side := GetSide ( tower ) ;
38268: LD_ADDR_VAR 0 16
38272: PUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 255
38282: ST_TO_ADDR
// x := GetX ( tower ) ;
38283: LD_ADDR_VAR 0 10
38287: PUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 250
38297: ST_TO_ADDR
// y := GetY ( tower ) ;
38298: LD_ADDR_VAR 0 11
38302: PUSH
38303: LD_VAR 0 1
38307: PPUSH
38308: CALL_OW 251
38312: ST_TO_ADDR
// if not x or not y then
38313: LD_VAR 0 10
38317: NOT
38318: PUSH
38319: LD_VAR 0 11
38323: NOT
38324: OR
38325: IFFALSE 38329
// exit ;
38327: GO 39392
// weapon := 0 ;
38329: LD_ADDR_VAR 0 18
38333: PUSH
38334: LD_INT 0
38336: ST_TO_ADDR
// fac_list := [ ] ;
38337: LD_ADDR_VAR 0 17
38341: PUSH
38342: EMPTY
38343: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38344: LD_ADDR_VAR 0 6
38348: PUSH
38349: LD_VAR 0 1
38353: PPUSH
38354: CALL_OW 274
38358: PPUSH
38359: LD_VAR 0 2
38363: PPUSH
38364: LD_INT 0
38366: PPUSH
38367: CALL 35932 0 3
38371: PPUSH
38372: LD_INT 30
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 72
38386: ST_TO_ADDR
// if not factories then
38387: LD_VAR 0 6
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 39392
// for i in factories do
38396: LD_ADDR_VAR 0 8
38400: PUSH
38401: LD_VAR 0 6
38405: PUSH
38406: FOR_IN
38407: IFFALSE 38432
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38409: LD_ADDR_VAR 0 17
38413: PUSH
38414: LD_VAR 0 17
38418: PUSH
38419: LD_VAR 0 8
38423: PPUSH
38424: CALL_OW 478
38428: UNION
38429: ST_TO_ADDR
38430: GO 38406
38432: POP
38433: POP
// if not fac_list then
38434: LD_VAR 0 17
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 39392
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38443: LD_ADDR_VAR 0 5
38447: PUSH
38448: LD_INT 4
38450: PUSH
38451: LD_INT 5
38453: PUSH
38454: LD_INT 9
38456: PUSH
38457: LD_INT 10
38459: PUSH
38460: LD_INT 6
38462: PUSH
38463: LD_INT 7
38465: PUSH
38466: LD_INT 11
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 27
38480: PUSH
38481: LD_INT 28
38483: PUSH
38484: LD_INT 26
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 43
38498: PUSH
38499: LD_INT 44
38501: PUSH
38502: LD_INT 46
38504: PUSH
38505: LD_INT 45
38507: PUSH
38508: LD_INT 47
38510: PUSH
38511: LD_INT 49
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: PUSH
38527: LD_VAR 0 12
38531: ARRAY
38532: ST_TO_ADDR
// for i in list do
38533: LD_ADDR_VAR 0 8
38537: PUSH
38538: LD_VAR 0 5
38542: PUSH
38543: FOR_IN
38544: IFFALSE 38577
// if not i in fac_list then
38546: LD_VAR 0 8
38550: PUSH
38551: LD_VAR 0 17
38555: IN
38556: NOT
38557: IFFALSE 38575
// list := list diff i ;
38559: LD_ADDR_VAR 0 5
38563: PUSH
38564: LD_VAR 0 5
38568: PUSH
38569: LD_VAR 0 8
38573: DIFF
38574: ST_TO_ADDR
38575: GO 38543
38577: POP
38578: POP
// if not list then
38579: LD_VAR 0 5
38583: NOT
38584: IFFALSE 38588
// exit ;
38586: GO 39392
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38588: LD_VAR 0 12
38592: PUSH
38593: LD_INT 3
38595: EQUAL
38596: PUSH
38597: LD_INT 49
38599: PUSH
38600: LD_VAR 0 5
38604: IN
38605: AND
38606: PUSH
38607: LD_INT 31
38609: PPUSH
38610: LD_VAR 0 16
38614: PPUSH
38615: CALL_OW 321
38619: PUSH
38620: LD_INT 2
38622: EQUAL
38623: AND
38624: IFFALSE 38684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38626: LD_INT 22
38628: PUSH
38629: LD_VAR 0 16
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 35
38640: PUSH
38641: LD_INT 49
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 91
38650: PUSH
38651: LD_VAR 0 1
38655: PUSH
38656: LD_INT 10
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PPUSH
38669: CALL_OW 69
38673: NOT
38674: IFFALSE 38684
// weapon := ru_time_lapser ;
38676: LD_ADDR_VAR 0 18
38680: PUSH
38681: LD_INT 49
38683: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38684: LD_VAR 0 12
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: IN
38699: PUSH
38700: LD_INT 11
38702: PUSH
38703: LD_VAR 0 5
38707: IN
38708: PUSH
38709: LD_INT 30
38711: PUSH
38712: LD_VAR 0 5
38716: IN
38717: OR
38718: AND
38719: PUSH
38720: LD_INT 6
38722: PPUSH
38723: LD_VAR 0 16
38727: PPUSH
38728: CALL_OW 321
38732: PUSH
38733: LD_INT 2
38735: EQUAL
38736: AND
38737: IFFALSE 38902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38739: LD_INT 22
38741: PUSH
38742: LD_VAR 0 16
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 35
38756: PUSH
38757: LD_INT 11
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 35
38766: PUSH
38767: LD_INT 30
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 91
38781: PUSH
38782: LD_VAR 0 1
38786: PUSH
38787: LD_INT 18
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: PPUSH
38800: CALL_OW 69
38804: NOT
38805: PUSH
38806: LD_INT 22
38808: PUSH
38809: LD_VAR 0 16
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: LD_INT 30
38823: PUSH
38824: LD_INT 32
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 30
38833: PUSH
38834: LD_INT 33
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 91
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 12
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: PPUSH
38870: CALL_OW 69
38874: PUSH
38875: LD_INT 2
38877: GREATER
38878: AND
38879: IFFALSE 38902
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38881: LD_ADDR_VAR 0 18
38885: PUSH
38886: LD_INT 11
38888: PUSH
38889: LD_INT 30
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_VAR 0 12
38900: ARRAY
38901: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38902: LD_VAR 0 18
38906: NOT
38907: PUSH
38908: LD_INT 40
38910: PPUSH
38911: LD_VAR 0 16
38915: PPUSH
38916: CALL_OW 321
38920: PUSH
38921: LD_INT 2
38923: EQUAL
38924: AND
38925: PUSH
38926: LD_INT 7
38928: PUSH
38929: LD_VAR 0 5
38933: IN
38934: PUSH
38935: LD_INT 28
38937: PUSH
38938: LD_VAR 0 5
38942: IN
38943: OR
38944: PUSH
38945: LD_INT 45
38947: PUSH
38948: LD_VAR 0 5
38952: IN
38953: OR
38954: AND
38955: IFFALSE 39209
// begin hex := GetHexInfo ( x , y ) ;
38957: LD_ADDR_VAR 0 4
38961: PUSH
38962: LD_VAR 0 10
38966: PPUSH
38967: LD_VAR 0 11
38971: PPUSH
38972: CALL_OW 546
38976: ST_TO_ADDR
// if hex [ 1 ] then
38977: LD_VAR 0 4
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: IFFALSE 38989
// exit ;
38987: GO 39392
// height := hex [ 2 ] ;
38989: LD_ADDR_VAR 0 15
38993: PUSH
38994: LD_VAR 0 4
38998: PUSH
38999: LD_INT 2
39001: ARRAY
39002: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39003: LD_ADDR_VAR 0 14
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: ST_TO_ADDR
// for i in tmp do
39026: LD_ADDR_VAR 0 8
39030: PUSH
39031: LD_VAR 0 14
39035: PUSH
39036: FOR_IN
39037: IFFALSE 39207
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39039: LD_ADDR_VAR 0 9
39043: PUSH
39044: LD_VAR 0 10
39048: PPUSH
39049: LD_VAR 0 8
39053: PPUSH
39054: LD_INT 5
39056: PPUSH
39057: CALL_OW 272
39061: PUSH
39062: LD_VAR 0 11
39066: PPUSH
39067: LD_VAR 0 8
39071: PPUSH
39072: LD_INT 5
39074: PPUSH
39075: CALL_OW 273
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39084: LD_VAR 0 9
39088: PUSH
39089: LD_INT 1
39091: ARRAY
39092: PPUSH
39093: LD_VAR 0 9
39097: PUSH
39098: LD_INT 2
39100: ARRAY
39101: PPUSH
39102: CALL_OW 488
39106: IFFALSE 39205
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39108: LD_ADDR_VAR 0 4
39112: PUSH
39113: LD_VAR 0 9
39117: PUSH
39118: LD_INT 1
39120: ARRAY
39121: PPUSH
39122: LD_VAR 0 9
39126: PUSH
39127: LD_INT 2
39129: ARRAY
39130: PPUSH
39131: CALL_OW 546
39135: ST_TO_ADDR
// if hex [ 1 ] then
39136: LD_VAR 0 4
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: IFFALSE 39148
// continue ;
39146: GO 39036
// h := hex [ 2 ] ;
39148: LD_ADDR_VAR 0 13
39152: PUSH
39153: LD_VAR 0 4
39157: PUSH
39158: LD_INT 2
39160: ARRAY
39161: ST_TO_ADDR
// if h + 7 < height then
39162: LD_VAR 0 13
39166: PUSH
39167: LD_INT 7
39169: PLUS
39170: PUSH
39171: LD_VAR 0 15
39175: LESS
39176: IFFALSE 39205
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39178: LD_ADDR_VAR 0 18
39182: PUSH
39183: LD_INT 7
39185: PUSH
39186: LD_INT 28
39188: PUSH
39189: LD_INT 45
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PUSH
39197: LD_VAR 0 12
39201: ARRAY
39202: ST_TO_ADDR
// break ;
39203: GO 39207
// end ; end ; end ;
39205: GO 39036
39207: POP
39208: POP
// end ; if not weapon then
39209: LD_VAR 0 18
39213: NOT
39214: IFFALSE 39274
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39216: LD_ADDR_VAR 0 5
39220: PUSH
39221: LD_VAR 0 5
39225: PUSH
39226: LD_INT 11
39228: PUSH
39229: LD_INT 30
39231: PUSH
39232: LD_INT 49
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: DIFF
39240: ST_TO_ADDR
// if not list then
39241: LD_VAR 0 5
39245: NOT
39246: IFFALSE 39250
// exit ;
39248: GO 39392
// weapon := list [ rand ( 1 , list ) ] ;
39250: LD_ADDR_VAR 0 18
39254: PUSH
39255: LD_VAR 0 5
39259: PUSH
39260: LD_INT 1
39262: PPUSH
39263: LD_VAR 0 5
39267: PPUSH
39268: CALL_OW 12
39272: ARRAY
39273: ST_TO_ADDR
// end ; if weapon then
39274: LD_VAR 0 18
39278: IFFALSE 39392
// begin tmp := CostOfWeapon ( weapon ) ;
39280: LD_ADDR_VAR 0 14
39284: PUSH
39285: LD_VAR 0 18
39289: PPUSH
39290: CALL_OW 451
39294: ST_TO_ADDR
// j := GetBase ( tower ) ;
39295: LD_ADDR_VAR 0 9
39299: PUSH
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 274
39309: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39310: LD_VAR 0 9
39314: PPUSH
39315: LD_INT 1
39317: PPUSH
39318: CALL_OW 275
39322: PUSH
39323: LD_VAR 0 14
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: GREATEREQUAL
39332: PUSH
39333: LD_VAR 0 9
39337: PPUSH
39338: LD_INT 2
39340: PPUSH
39341: CALL_OW 275
39345: PUSH
39346: LD_VAR 0 14
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: GREATEREQUAL
39355: AND
39356: PUSH
39357: LD_VAR 0 9
39361: PPUSH
39362: LD_INT 3
39364: PPUSH
39365: CALL_OW 275
39369: PUSH
39370: LD_VAR 0 14
39374: PUSH
39375: LD_INT 3
39377: ARRAY
39378: GREATEREQUAL
39379: AND
39380: IFFALSE 39392
// result := weapon ;
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_VAR 0 18
39391: ST_TO_ADDR
// end ; end ;
39392: LD_VAR 0 3
39396: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39397: LD_INT 0
39399: PPUSH
39400: PPUSH
// result := true ;
39401: LD_ADDR_VAR 0 3
39405: PUSH
39406: LD_INT 1
39408: ST_TO_ADDR
// if array1 = array2 then
39409: LD_VAR 0 1
39413: PUSH
39414: LD_VAR 0 2
39418: EQUAL
39419: IFFALSE 39479
// begin for i = 1 to array1 do
39421: LD_ADDR_VAR 0 4
39425: PUSH
39426: DOUBLE
39427: LD_INT 1
39429: DEC
39430: ST_TO_ADDR
39431: LD_VAR 0 1
39435: PUSH
39436: FOR_TO
39437: IFFALSE 39475
// if array1 [ i ] <> array2 [ i ] then
39439: LD_VAR 0 1
39443: PUSH
39444: LD_VAR 0 4
39448: ARRAY
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: LD_VAR 0 4
39459: ARRAY
39460: NONEQUAL
39461: IFFALSE 39473
// begin result := false ;
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: LD_INT 0
39470: ST_TO_ADDR
// break ;
39471: GO 39475
// end ;
39473: GO 39436
39475: POP
39476: POP
// end else
39477: GO 39487
// result := false ;
39479: LD_ADDR_VAR 0 3
39483: PUSH
39484: LD_INT 0
39486: ST_TO_ADDR
// end ;
39487: LD_VAR 0 3
39491: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39492: LD_INT 0
39494: PPUSH
39495: PPUSH
// if not array1 or not array2 then
39496: LD_VAR 0 1
39500: NOT
39501: PUSH
39502: LD_VAR 0 2
39506: NOT
39507: OR
39508: IFFALSE 39512
// exit ;
39510: GO 39576
// result := true ;
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 1
39519: ST_TO_ADDR
// for i = 1 to array1 do
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: DOUBLE
39526: LD_INT 1
39528: DEC
39529: ST_TO_ADDR
39530: LD_VAR 0 1
39534: PUSH
39535: FOR_TO
39536: IFFALSE 39574
// if array1 [ i ] <> array2 [ i ] then
39538: LD_VAR 0 1
39542: PUSH
39543: LD_VAR 0 4
39547: ARRAY
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_VAR 0 4
39558: ARRAY
39559: NONEQUAL
39560: IFFALSE 39572
// begin result := false ;
39562: LD_ADDR_VAR 0 3
39566: PUSH
39567: LD_INT 0
39569: ST_TO_ADDR
// break ;
39570: GO 39574
// end ;
39572: GO 39535
39574: POP
39575: POP
// end ;
39576: LD_VAR 0 3
39580: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39581: LD_INT 0
39583: PPUSH
39584: PPUSH
39585: PPUSH
// pom := GetBase ( fac ) ;
39586: LD_ADDR_VAR 0 5
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 274
39600: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39601: LD_ADDR_VAR 0 4
39605: PUSH
39606: LD_VAR 0 2
39610: PUSH
39611: LD_INT 1
39613: ARRAY
39614: PPUSH
39615: LD_VAR 0 2
39619: PUSH
39620: LD_INT 2
39622: ARRAY
39623: PPUSH
39624: LD_VAR 0 2
39628: PUSH
39629: LD_INT 3
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 2
39637: PUSH
39638: LD_INT 4
39640: ARRAY
39641: PPUSH
39642: CALL_OW 449
39646: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_VAR 0 5
39656: PPUSH
39657: LD_INT 1
39659: PPUSH
39660: CALL_OW 275
39664: PUSH
39665: LD_VAR 0 4
39669: PUSH
39670: LD_INT 1
39672: ARRAY
39673: GREATEREQUAL
39674: PUSH
39675: LD_VAR 0 5
39679: PPUSH
39680: LD_INT 2
39682: PPUSH
39683: CALL_OW 275
39687: PUSH
39688: LD_VAR 0 4
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: GREATEREQUAL
39697: AND
39698: PUSH
39699: LD_VAR 0 5
39703: PPUSH
39704: LD_INT 3
39706: PPUSH
39707: CALL_OW 275
39711: PUSH
39712: LD_VAR 0 4
39716: PUSH
39717: LD_INT 3
39719: ARRAY
39720: GREATEREQUAL
39721: AND
39722: ST_TO_ADDR
// end ;
39723: LD_VAR 0 3
39727: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39728: LD_INT 0
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
// pom := GetBase ( building ) ;
39734: LD_ADDR_VAR 0 3
39738: PUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 274
39748: ST_TO_ADDR
// if not pom then
39749: LD_VAR 0 3
39753: NOT
39754: IFFALSE 39758
// exit ;
39756: GO 39928
// btype := GetBType ( building ) ;
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 266
39772: ST_TO_ADDR
// if btype = b_armoury then
39773: LD_VAR 0 5
39777: PUSH
39778: LD_INT 4
39780: EQUAL
39781: IFFALSE 39791
// btype := b_barracks ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_INT 5
39790: ST_TO_ADDR
// if btype = b_depot then
39791: LD_VAR 0 5
39795: PUSH
39796: LD_INT 0
39798: EQUAL
39799: IFFALSE 39809
// btype := b_warehouse ;
39801: LD_ADDR_VAR 0 5
39805: PUSH
39806: LD_INT 1
39808: ST_TO_ADDR
// if btype = b_workshop then
39809: LD_VAR 0 5
39813: PUSH
39814: LD_INT 2
39816: EQUAL
39817: IFFALSE 39827
// btype := b_factory ;
39819: LD_ADDR_VAR 0 5
39823: PUSH
39824: LD_INT 3
39826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39827: LD_ADDR_VAR 0 4
39831: PUSH
39832: LD_VAR 0 5
39836: PPUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 248
39846: PPUSH
39847: CALL_OW 450
39851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39852: LD_ADDR_VAR 0 2
39856: PUSH
39857: LD_VAR 0 3
39861: PPUSH
39862: LD_INT 1
39864: PPUSH
39865: CALL_OW 275
39869: PUSH
39870: LD_VAR 0 4
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: GREATEREQUAL
39879: PUSH
39880: LD_VAR 0 3
39884: PPUSH
39885: LD_INT 2
39887: PPUSH
39888: CALL_OW 275
39892: PUSH
39893: LD_VAR 0 4
39897: PUSH
39898: LD_INT 2
39900: ARRAY
39901: GREATEREQUAL
39902: AND
39903: PUSH
39904: LD_VAR 0 3
39908: PPUSH
39909: LD_INT 3
39911: PPUSH
39912: CALL_OW 275
39916: PUSH
39917: LD_VAR 0 4
39921: PUSH
39922: LD_INT 3
39924: ARRAY
39925: GREATEREQUAL
39926: AND
39927: ST_TO_ADDR
// end ;
39928: LD_VAR 0 2
39932: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39933: LD_INT 0
39935: PPUSH
39936: PPUSH
39937: PPUSH
// pom := GetBase ( building ) ;
39938: LD_ADDR_VAR 0 4
39942: PUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 274
39952: ST_TO_ADDR
// if not pom then
39953: LD_VAR 0 4
39957: NOT
39958: IFFALSE 39962
// exit ;
39960: GO 40063
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39962: LD_ADDR_VAR 0 5
39966: PUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: LD_VAR 0 1
39976: PPUSH
39977: CALL_OW 248
39981: PPUSH
39982: CALL_OW 450
39986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 4
39996: PPUSH
39997: LD_INT 1
39999: PPUSH
40000: CALL_OW 275
40004: PUSH
40005: LD_VAR 0 5
40009: PUSH
40010: LD_INT 1
40012: ARRAY
40013: GREATEREQUAL
40014: PUSH
40015: LD_VAR 0 4
40019: PPUSH
40020: LD_INT 2
40022: PPUSH
40023: CALL_OW 275
40027: PUSH
40028: LD_VAR 0 5
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: GREATEREQUAL
40037: AND
40038: PUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: LD_INT 3
40046: PPUSH
40047: CALL_OW 275
40051: PUSH
40052: LD_VAR 0 5
40056: PUSH
40057: LD_INT 3
40059: ARRAY
40060: GREATEREQUAL
40061: AND
40062: ST_TO_ADDR
// end ;
40063: LD_VAR 0 3
40067: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40068: LD_INT 0
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
// result := false ;
40081: LD_ADDR_VAR 0 8
40085: PUSH
40086: LD_INT 0
40088: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40089: LD_VAR 0 5
40093: NOT
40094: PUSH
40095: LD_VAR 0 1
40099: NOT
40100: OR
40101: PUSH
40102: LD_VAR 0 2
40106: NOT
40107: OR
40108: PUSH
40109: LD_VAR 0 3
40113: NOT
40114: OR
40115: IFFALSE 40119
// exit ;
40117: GO 40933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40119: LD_ADDR_VAR 0 14
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: LD_VAR 0 2
40133: PPUSH
40134: LD_VAR 0 3
40138: PPUSH
40139: LD_VAR 0 4
40143: PPUSH
40144: LD_VAR 0 5
40148: PUSH
40149: LD_INT 1
40151: ARRAY
40152: PPUSH
40153: CALL_OW 248
40157: PPUSH
40158: LD_INT 0
40160: PPUSH
40161: CALL 41770 0 6
40165: ST_TO_ADDR
// if not hexes then
40166: LD_VAR 0 14
40170: NOT
40171: IFFALSE 40175
// exit ;
40173: GO 40933
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40175: LD_ADDR_VAR 0 17
40179: PUSH
40180: LD_VAR 0 5
40184: PPUSH
40185: LD_INT 22
40187: PUSH
40188: LD_VAR 0 13
40192: PPUSH
40193: CALL_OW 255
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 30
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 30
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PPUSH
40234: CALL_OW 72
40238: ST_TO_ADDR
// for i = 1 to hexes do
40239: LD_ADDR_VAR 0 9
40243: PUSH
40244: DOUBLE
40245: LD_INT 1
40247: DEC
40248: ST_TO_ADDR
40249: LD_VAR 0 14
40253: PUSH
40254: FOR_TO
40255: IFFALSE 40931
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40257: LD_ADDR_VAR 0 13
40261: PUSH
40262: LD_VAR 0 14
40266: PUSH
40267: LD_VAR 0 9
40271: ARRAY
40272: PUSH
40273: LD_INT 1
40275: ARRAY
40276: PPUSH
40277: LD_VAR 0 14
40281: PUSH
40282: LD_VAR 0 9
40286: ARRAY
40287: PUSH
40288: LD_INT 2
40290: ARRAY
40291: PPUSH
40292: CALL_OW 428
40296: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40297: LD_VAR 0 14
40301: PUSH
40302: LD_VAR 0 9
40306: ARRAY
40307: PUSH
40308: LD_INT 1
40310: ARRAY
40311: PPUSH
40312: LD_VAR 0 14
40316: PUSH
40317: LD_VAR 0 9
40321: ARRAY
40322: PUSH
40323: LD_INT 2
40325: ARRAY
40326: PPUSH
40327: CALL_OW 351
40331: PUSH
40332: LD_VAR 0 14
40336: PUSH
40337: LD_VAR 0 9
40341: ARRAY
40342: PUSH
40343: LD_INT 1
40345: ARRAY
40346: PPUSH
40347: LD_VAR 0 14
40351: PUSH
40352: LD_VAR 0 9
40356: ARRAY
40357: PUSH
40358: LD_INT 2
40360: ARRAY
40361: PPUSH
40362: CALL_OW 488
40366: NOT
40367: OR
40368: PUSH
40369: LD_VAR 0 13
40373: PPUSH
40374: CALL_OW 247
40378: PUSH
40379: LD_INT 3
40381: EQUAL
40382: OR
40383: IFFALSE 40389
// exit ;
40385: POP
40386: POP
40387: GO 40933
// if not tmp then
40389: LD_VAR 0 13
40393: NOT
40394: IFFALSE 40398
// continue ;
40396: GO 40254
// result := true ;
40398: LD_ADDR_VAR 0 8
40402: PUSH
40403: LD_INT 1
40405: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40406: LD_VAR 0 6
40410: PUSH
40411: LD_VAR 0 13
40415: PPUSH
40416: CALL_OW 247
40420: PUSH
40421: LD_INT 2
40423: EQUAL
40424: AND
40425: PUSH
40426: LD_VAR 0 13
40430: PPUSH
40431: CALL_OW 263
40435: PUSH
40436: LD_INT 1
40438: EQUAL
40439: AND
40440: IFFALSE 40604
// begin if IsDrivenBy ( tmp ) then
40442: LD_VAR 0 13
40446: PPUSH
40447: CALL_OW 311
40451: IFFALSE 40455
// continue ;
40453: GO 40254
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40455: LD_VAR 0 6
40459: PPUSH
40460: LD_INT 3
40462: PUSH
40463: LD_INT 60
40465: PUSH
40466: EMPTY
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 3
40475: PUSH
40476: LD_INT 55
40478: PUSH
40479: EMPTY
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PPUSH
40490: CALL_OW 72
40494: IFFALSE 40602
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40496: LD_ADDR_VAR 0 18
40500: PUSH
40501: LD_VAR 0 6
40505: PPUSH
40506: LD_INT 3
40508: PUSH
40509: LD_INT 60
40511: PUSH
40512: EMPTY
40513: LIST
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: LD_INT 55
40524: PUSH
40525: EMPTY
40526: LIST
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PPUSH
40536: CALL_OW 72
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: ST_TO_ADDR
// if IsInUnit ( driver ) then
40545: LD_VAR 0 18
40549: PPUSH
40550: CALL_OW 310
40554: IFFALSE 40565
// ComExit ( driver ) ;
40556: LD_VAR 0 18
40560: PPUSH
40561: CALL 64954 0 1
// AddComEnterUnit ( driver , tmp ) ;
40565: LD_VAR 0 18
40569: PPUSH
40570: LD_VAR 0 13
40574: PPUSH
40575: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40579: LD_VAR 0 18
40583: PPUSH
40584: LD_VAR 0 7
40588: PPUSH
40589: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40593: LD_VAR 0 18
40597: PPUSH
40598: CALL_OW 181
// end ; continue ;
40602: GO 40254
// end ; if not cleaners or not tmp in cleaners then
40604: LD_VAR 0 6
40608: NOT
40609: PUSH
40610: LD_VAR 0 13
40614: PUSH
40615: LD_VAR 0 6
40619: IN
40620: NOT
40621: OR
40622: IFFALSE 40929
// begin if dep then
40624: LD_VAR 0 17
40628: IFFALSE 40764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40630: LD_ADDR_VAR 0 16
40634: PUSH
40635: LD_VAR 0 17
40639: PUSH
40640: LD_INT 1
40642: ARRAY
40643: PPUSH
40644: CALL_OW 250
40648: PPUSH
40649: LD_VAR 0 17
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PPUSH
40658: CALL_OW 254
40662: PPUSH
40663: LD_INT 5
40665: PPUSH
40666: CALL_OW 272
40670: PUSH
40671: LD_VAR 0 17
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: PPUSH
40680: CALL_OW 251
40684: PPUSH
40685: LD_VAR 0 17
40689: PUSH
40690: LD_INT 1
40692: ARRAY
40693: PPUSH
40694: CALL_OW 254
40698: PPUSH
40699: LD_INT 5
40701: PPUSH
40702: CALL_OW 273
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40711: LD_VAR 0 16
40715: PUSH
40716: LD_INT 1
40718: ARRAY
40719: PPUSH
40720: LD_VAR 0 16
40724: PUSH
40725: LD_INT 2
40727: ARRAY
40728: PPUSH
40729: CALL_OW 488
40733: IFFALSE 40764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40735: LD_VAR 0 13
40739: PPUSH
40740: LD_VAR 0 16
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: PPUSH
40749: LD_VAR 0 16
40753: PUSH
40754: LD_INT 2
40756: ARRAY
40757: PPUSH
40758: CALL_OW 111
// continue ;
40762: GO 40254
// end ; end ; r := GetDir ( tmp ) ;
40764: LD_ADDR_VAR 0 15
40768: PUSH
40769: LD_VAR 0 13
40773: PPUSH
40774: CALL_OW 254
40778: ST_TO_ADDR
// if r = 5 then
40779: LD_VAR 0 15
40783: PUSH
40784: LD_INT 5
40786: EQUAL
40787: IFFALSE 40797
// r := 0 ;
40789: LD_ADDR_VAR 0 15
40793: PUSH
40794: LD_INT 0
40796: ST_TO_ADDR
// for j = r to 5 do
40797: LD_ADDR_VAR 0 10
40801: PUSH
40802: DOUBLE
40803: LD_VAR 0 15
40807: DEC
40808: ST_TO_ADDR
40809: LD_INT 5
40811: PUSH
40812: FOR_TO
40813: IFFALSE 40927
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40815: LD_ADDR_VAR 0 11
40819: PUSH
40820: LD_VAR 0 13
40824: PPUSH
40825: CALL_OW 250
40829: PPUSH
40830: LD_VAR 0 10
40834: PPUSH
40835: LD_INT 2
40837: PPUSH
40838: CALL_OW 272
40842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40843: LD_ADDR_VAR 0 12
40847: PUSH
40848: LD_VAR 0 13
40852: PPUSH
40853: CALL_OW 251
40857: PPUSH
40858: LD_VAR 0 10
40862: PPUSH
40863: LD_INT 2
40865: PPUSH
40866: CALL_OW 273
40870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40871: LD_VAR 0 11
40875: PPUSH
40876: LD_VAR 0 12
40880: PPUSH
40881: CALL_OW 488
40885: PUSH
40886: LD_VAR 0 11
40890: PPUSH
40891: LD_VAR 0 12
40895: PPUSH
40896: CALL_OW 428
40900: NOT
40901: AND
40902: IFFALSE 40925
// begin ComMoveXY ( tmp , _x , _y ) ;
40904: LD_VAR 0 13
40908: PPUSH
40909: LD_VAR 0 11
40913: PPUSH
40914: LD_VAR 0 12
40918: PPUSH
40919: CALL_OW 111
// break ;
40923: GO 40927
// end ; end ;
40925: GO 40812
40927: POP
40928: POP
// end ; end ;
40929: GO 40254
40931: POP
40932: POP
// end ;
40933: LD_VAR 0 8
40937: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
// result := false ;
40950: LD_ADDR_VAR 0 6
40954: PUSH
40955: LD_INT 0
40957: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40958: LD_VAR 0 1
40962: NOT
40963: PUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 266
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: IN
40984: NOT
40985: OR
40986: PUSH
40987: LD_VAR 0 2
40991: NOT
40992: OR
40993: PUSH
40994: LD_VAR 0 5
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: LD_INT 4
41013: PUSH
41014: LD_INT 5
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: IN
41025: NOT
41026: OR
41027: PUSH
41028: LD_VAR 0 3
41032: PPUSH
41033: LD_VAR 0 4
41037: PPUSH
41038: CALL_OW 488
41042: NOT
41043: OR
41044: IFFALSE 41048
// exit ;
41046: GO 41765
// pom := GetBase ( depot ) ;
41048: LD_ADDR_VAR 0 10
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 274
41062: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41063: LD_ADDR_VAR 0 11
41067: PUSH
41068: LD_VAR 0 2
41072: PPUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: CALL_OW 248
41082: PPUSH
41083: CALL_OW 450
41087: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41088: LD_VAR 0 10
41092: PPUSH
41093: LD_INT 1
41095: PPUSH
41096: CALL_OW 275
41100: PUSH
41101: LD_VAR 0 11
41105: PUSH
41106: LD_INT 1
41108: ARRAY
41109: GREATEREQUAL
41110: PUSH
41111: LD_VAR 0 10
41115: PPUSH
41116: LD_INT 2
41118: PPUSH
41119: CALL_OW 275
41123: PUSH
41124: LD_VAR 0 11
41128: PUSH
41129: LD_INT 2
41131: ARRAY
41132: GREATEREQUAL
41133: AND
41134: PUSH
41135: LD_VAR 0 10
41139: PPUSH
41140: LD_INT 3
41142: PPUSH
41143: CALL_OW 275
41147: PUSH
41148: LD_VAR 0 11
41152: PUSH
41153: LD_INT 3
41155: ARRAY
41156: GREATEREQUAL
41157: AND
41158: NOT
41159: IFFALSE 41163
// exit ;
41161: GO 41765
// if GetBType ( depot ) = b_depot then
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 266
41172: PUSH
41173: LD_INT 0
41175: EQUAL
41176: IFFALSE 41188
// dist := 28 else
41178: LD_ADDR_VAR 0 14
41182: PUSH
41183: LD_INT 28
41185: ST_TO_ADDR
41186: GO 41196
// dist := 36 ;
41188: LD_ADDR_VAR 0 14
41192: PUSH
41193: LD_INT 36
41195: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41196: LD_VAR 0 1
41200: PPUSH
41201: LD_VAR 0 3
41205: PPUSH
41206: LD_VAR 0 4
41210: PPUSH
41211: CALL_OW 297
41215: PUSH
41216: LD_VAR 0 14
41220: GREATER
41221: IFFALSE 41225
// exit ;
41223: GO 41765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41225: LD_ADDR_VAR 0 12
41229: PUSH
41230: LD_VAR 0 2
41234: PPUSH
41235: LD_VAR 0 3
41239: PPUSH
41240: LD_VAR 0 4
41244: PPUSH
41245: LD_VAR 0 5
41249: PPUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 248
41259: PPUSH
41260: LD_INT 0
41262: PPUSH
41263: CALL 41770 0 6
41267: ST_TO_ADDR
// if not hexes then
41268: LD_VAR 0 12
41272: NOT
41273: IFFALSE 41277
// exit ;
41275: GO 41765
// hex := GetHexInfo ( x , y ) ;
41277: LD_ADDR_VAR 0 15
41281: PUSH
41282: LD_VAR 0 3
41286: PPUSH
41287: LD_VAR 0 4
41291: PPUSH
41292: CALL_OW 546
41296: ST_TO_ADDR
// if hex [ 1 ] then
41297: LD_VAR 0 15
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: IFFALSE 41309
// exit ;
41307: GO 41765
// height := hex [ 2 ] ;
41309: LD_ADDR_VAR 0 13
41313: PUSH
41314: LD_VAR 0 15
41318: PUSH
41319: LD_INT 2
41321: ARRAY
41322: ST_TO_ADDR
// for i = 1 to hexes do
41323: LD_ADDR_VAR 0 7
41327: PUSH
41328: DOUBLE
41329: LD_INT 1
41331: DEC
41332: ST_TO_ADDR
41333: LD_VAR 0 12
41337: PUSH
41338: FOR_TO
41339: IFFALSE 41669
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41341: LD_VAR 0 12
41345: PUSH
41346: LD_VAR 0 7
41350: ARRAY
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: LD_VAR 0 12
41360: PUSH
41361: LD_VAR 0 7
41365: ARRAY
41366: PUSH
41367: LD_INT 2
41369: ARRAY
41370: PPUSH
41371: CALL_OW 488
41375: NOT
41376: PUSH
41377: LD_VAR 0 12
41381: PUSH
41382: LD_VAR 0 7
41386: ARRAY
41387: PUSH
41388: LD_INT 1
41390: ARRAY
41391: PPUSH
41392: LD_VAR 0 12
41396: PUSH
41397: LD_VAR 0 7
41401: ARRAY
41402: PUSH
41403: LD_INT 2
41405: ARRAY
41406: PPUSH
41407: CALL_OW 428
41411: PUSH
41412: LD_INT 0
41414: GREATER
41415: OR
41416: PUSH
41417: LD_VAR 0 12
41421: PUSH
41422: LD_VAR 0 7
41426: ARRAY
41427: PUSH
41428: LD_INT 1
41430: ARRAY
41431: PPUSH
41432: LD_VAR 0 12
41436: PUSH
41437: LD_VAR 0 7
41441: ARRAY
41442: PUSH
41443: LD_INT 2
41445: ARRAY
41446: PPUSH
41447: CALL_OW 351
41451: OR
41452: IFFALSE 41458
// exit ;
41454: POP
41455: POP
41456: GO 41765
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41458: LD_ADDR_VAR 0 8
41462: PUSH
41463: LD_VAR 0 12
41467: PUSH
41468: LD_VAR 0 7
41472: ARRAY
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: PPUSH
41478: LD_VAR 0 12
41482: PUSH
41483: LD_VAR 0 7
41487: ARRAY
41488: PUSH
41489: LD_INT 2
41491: ARRAY
41492: PPUSH
41493: CALL_OW 546
41497: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41498: LD_VAR 0 8
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: PUSH
41507: LD_VAR 0 8
41511: PUSH
41512: LD_INT 2
41514: ARRAY
41515: PUSH
41516: LD_VAR 0 13
41520: PUSH
41521: LD_INT 2
41523: PLUS
41524: GREATER
41525: OR
41526: PUSH
41527: LD_VAR 0 8
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: PUSH
41536: LD_VAR 0 13
41540: PUSH
41541: LD_INT 2
41543: MINUS
41544: LESS
41545: OR
41546: PUSH
41547: LD_VAR 0 8
41551: PUSH
41552: LD_INT 3
41554: ARRAY
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 8
41561: PUSH
41562: LD_INT 9
41564: PUSH
41565: LD_INT 10
41567: PUSH
41568: LD_INT 11
41570: PUSH
41571: LD_INT 12
41573: PUSH
41574: LD_INT 13
41576: PUSH
41577: LD_INT 16
41579: PUSH
41580: LD_INT 17
41582: PUSH
41583: LD_INT 18
41585: PUSH
41586: LD_INT 19
41588: PUSH
41589: LD_INT 20
41591: PUSH
41592: LD_INT 21
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: IN
41610: NOT
41611: OR
41612: PUSH
41613: LD_VAR 0 8
41617: PUSH
41618: LD_INT 5
41620: ARRAY
41621: NOT
41622: OR
41623: PUSH
41624: LD_VAR 0 8
41628: PUSH
41629: LD_INT 6
41631: ARRAY
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 7
41641: PUSH
41642: LD_INT 9
41644: PUSH
41645: LD_INT 10
41647: PUSH
41648: LD_INT 11
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: IN
41659: NOT
41660: OR
41661: IFFALSE 41667
// exit ;
41663: POP
41664: POP
41665: GO 41765
// end ;
41667: GO 41338
41669: POP
41670: POP
// side := GetSide ( depot ) ;
41671: LD_ADDR_VAR 0 9
41675: PUSH
41676: LD_VAR 0 1
41680: PPUSH
41681: CALL_OW 255
41685: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41686: LD_VAR 0 9
41690: PPUSH
41691: LD_VAR 0 3
41695: PPUSH
41696: LD_VAR 0 4
41700: PPUSH
41701: LD_INT 20
41703: PPUSH
41704: CALL 34086 0 4
41708: PUSH
41709: LD_INT 4
41711: ARRAY
41712: IFFALSE 41716
// exit ;
41714: GO 41765
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41716: LD_VAR 0 2
41720: PUSH
41721: LD_INT 29
41723: PUSH
41724: LD_INT 30
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: IN
41731: PUSH
41732: LD_VAR 0 3
41736: PPUSH
41737: LD_VAR 0 4
41741: PPUSH
41742: LD_VAR 0 9
41746: PPUSH
41747: CALL_OW 440
41751: NOT
41752: AND
41753: IFFALSE 41757
// exit ;
41755: GO 41765
// result := true ;
41757: LD_ADDR_VAR 0 6
41761: PUSH
41762: LD_INT 1
41764: ST_TO_ADDR
// end ;
41765: LD_VAR 0 6
41769: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
41788: PPUSH
41789: PPUSH
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
41813: PPUSH
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
// result = [ ] ;
41830: LD_ADDR_VAR 0 7
41834: PUSH
41835: EMPTY
41836: ST_TO_ADDR
// temp_list = [ ] ;
41837: LD_ADDR_VAR 0 9
41841: PUSH
41842: EMPTY
41843: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41844: LD_VAR 0 4
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 3
41860: PUSH
41861: LD_INT 4
41863: PUSH
41864: LD_INT 5
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: IN
41875: NOT
41876: PUSH
41877: LD_VAR 0 1
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: IN
41892: PUSH
41893: LD_VAR 0 5
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: IN
41912: NOT
41913: AND
41914: OR
41915: IFFALSE 41919
// exit ;
41917: GO 60310
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41919: LD_VAR 0 1
41923: PUSH
41924: LD_INT 6
41926: PUSH
41927: LD_INT 7
41929: PUSH
41930: LD_INT 8
41932: PUSH
41933: LD_INT 13
41935: PUSH
41936: LD_INT 12
41938: PUSH
41939: LD_INT 15
41941: PUSH
41942: LD_INT 11
41944: PUSH
41945: LD_INT 14
41947: PUSH
41948: LD_INT 10
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: IN
41962: IFFALSE 41972
// btype = b_lab ;
41964: LD_ADDR_VAR 0 1
41968: PUSH
41969: LD_INT 6
41971: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41972: LD_VAR 0 6
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: IN
41991: NOT
41992: PUSH
41993: LD_VAR 0 1
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 6
42012: PUSH
42013: LD_INT 36
42015: PUSH
42016: LD_INT 4
42018: PUSH
42019: LD_INT 5
42021: PUSH
42022: LD_INT 31
42024: PUSH
42025: LD_INT 32
42027: PUSH
42028: LD_INT 33
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: IN
42044: NOT
42045: PUSH
42046: LD_VAR 0 6
42050: PUSH
42051: LD_INT 1
42053: EQUAL
42054: AND
42055: OR
42056: PUSH
42057: LD_VAR 0 1
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: IN
42072: NOT
42073: PUSH
42074: LD_VAR 0 6
42078: PUSH
42079: LD_INT 2
42081: EQUAL
42082: AND
42083: OR
42084: IFFALSE 42094
// mode = 0 ;
42086: LD_ADDR_VAR 0 6
42090: PUSH
42091: LD_INT 0
42093: ST_TO_ADDR
// case mode of 0 :
42094: LD_VAR 0 6
42098: PUSH
42099: LD_INT 0
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42107
42105: GO 53560
42107: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42108: LD_ADDR_VAR 0 11
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42301: LD_ADDR_VAR 0 12
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42497: LD_ADDR_VAR 0 13
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: LD_INT 3
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42696: LD_ADDR_VAR 0 14
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42892: LD_ADDR_VAR 0 15
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43085: LD_ADDR_VAR 0 16
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43278: LD_ADDR_VAR 0 17
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43508: LD_ADDR_VAR 0 18
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43738: LD_ADDR_VAR 0 19
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43968: LD_ADDR_VAR 0 20
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44198: LD_ADDR_VAR 0 21
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44428: LD_ADDR_VAR 0 22
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44658: LD_ADDR_VAR 0 23
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 3
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44938: LD_ADDR_VAR 0 24
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45214: LD_ADDR_VAR 0 25
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45488: LD_ADDR_VAR 0 26
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 3
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 27
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: NEG
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46044: LD_ADDR_VAR 0 28
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46326: LD_ADDR_VAR 0 29
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46605: LD_ADDR_VAR 0 30
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 3
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46883: LD_ADDR_VAR 0 31
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47161: LD_ADDR_VAR 0 32
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47439: LD_ADDR_VAR 0 33
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 3
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47718: LD_ADDR_VAR 0 34
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47998: LD_ADDR_VAR 0 35
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48110: LD_ADDR_VAR 0 36
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48222: LD_ADDR_VAR 0 37
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48334: LD_ADDR_VAR 0 38
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48446: LD_ADDR_VAR 0 39
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48558: LD_ADDR_VAR 0 40
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48670: LD_ADDR_VAR 0 41
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 3
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49020: LD_ADDR_VAR 0 42
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49370: LD_ADDR_VAR 0 43
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49718: LD_ADDR_VAR 0 44
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: NEG
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50068: LD_ADDR_VAR 0 45
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: NEG
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50418: LD_ADDR_VAR 0 46
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50766: LD_ADDR_VAR 0 47
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50917: LD_ADDR_VAR 0 48
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51064: LD_ADDR_VAR 0 49
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51208: LD_ADDR_VAR 0 50
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51352: LD_ADDR_VAR 0 51
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51499: LD_ADDR_VAR 0 52
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51650: LD_ADDR_VAR 0 53
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51880: LD_ADDR_VAR 0 54
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52110: LD_ADDR_VAR 0 55
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52340: LD_ADDR_VAR 0 56
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52570: LD_ADDR_VAR 0 57
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52800: LD_ADDR_VAR 0 58
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53030: LD_ADDR_VAR 0 59
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53118: LD_ADDR_VAR 0 60
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53206: LD_ADDR_VAR 0 61
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53294: LD_ADDR_VAR 0 62
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53382: LD_ADDR_VAR 0 63
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53470: LD_ADDR_VAR 0 64
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: ST_TO_ADDR
// end ; 1 :
53558: GO 59455
53560: LD_INT 1
53562: DOUBLE
53563: EQUAL
53564: IFTRUE 53568
53566: GO 56191
53568: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53569: LD_ADDR_VAR 0 11
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53613: LD_ADDR_VAR 0 12
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53654: LD_ADDR_VAR 0 13
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53694: LD_ADDR_VAR 0 14
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53735: LD_ADDR_VAR 0 15
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53779: LD_ADDR_VAR 0 16
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53825: LD_ADDR_VAR 0 17
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53869: LD_ADDR_VAR 0 18
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53910: LD_ADDR_VAR 0 19
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53950: LD_ADDR_VAR 0 20
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53991: LD_ADDR_VAR 0 21
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54035: LD_ADDR_VAR 0 22
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54081: LD_ADDR_VAR 0 23
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 4
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54125: LD_ADDR_VAR 0 24
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 4
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54166: LD_ADDR_VAR 0 25
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 3
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 4
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 4
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54206: LD_ADDR_VAR 0 26
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54247: LD_ADDR_VAR 0 27
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54291: LD_ADDR_VAR 0 28
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 4
54322: NEG
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54337: LD_ADDR_VAR 0 29
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 4
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 5
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 5
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 4
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 6
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 6
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 5
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54492: LD_ADDR_VAR 0 30
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 5
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 6
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 6
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54635: LD_ADDR_VAR 0 31
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: LD_INT 4
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 5
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: LD_INT 5
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 6
54732: PUSH
54733: LD_INT 5
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 6
54742: PUSH
54743: LD_INT 6
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 5
54752: PUSH
54753: LD_INT 6
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54774: LD_ADDR_VAR 0 32
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 3
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 4
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 5
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 6
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 6
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54917: LD_ADDR_VAR 0 33
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 4
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 5
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 5
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 6
55037: NEG
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 6
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55072: LD_ADDR_VAR 0 34
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 3
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 4
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 4
55151: NEG
55152: PUSH
55153: LD_INT 5
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 5
55163: NEG
55164: PUSH
55165: LD_INT 4
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 5
55175: NEG
55176: PUSH
55177: LD_INT 5
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 5
55187: NEG
55188: PUSH
55189: LD_INT 6
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 6
55199: NEG
55200: PUSH
55201: LD_INT 5
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 6
55211: NEG
55212: PUSH
55213: LD_INT 6
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55235: LD_ADDR_VAR 0 41
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55279: LD_ADDR_VAR 0 42
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55320: LD_ADDR_VAR 0 43
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55360: LD_ADDR_VAR 0 44
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: LIST
55400: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55401: LD_ADDR_VAR 0 45
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55445: LD_ADDR_VAR 0 46
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55491: LD_ADDR_VAR 0 47
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55524: LD_ADDR_VAR 0 48
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55555: LD_ADDR_VAR 0 49
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55584: LD_ADDR_VAR 0 50
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55613: LD_ADDR_VAR 0 51
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55644: LD_ADDR_VAR 0 52
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55677: LD_ADDR_VAR 0 53
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55721: LD_ADDR_VAR 0 54
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55762: LD_ADDR_VAR 0 55
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55802: LD_ADDR_VAR 0 56
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55843: LD_ADDR_VAR 0 57
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55887: LD_ADDR_VAR 0 58
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55933: LD_ADDR_VAR 0 59
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55977: LD_ADDR_VAR 0 60
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56018: LD_ADDR_VAR 0 61
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56058: LD_ADDR_VAR 0 62
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56099: LD_ADDR_VAR 0 63
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56143: LD_ADDR_VAR 0 64
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: ST_TO_ADDR
// end ; 2 :
56189: GO 59455
56191: LD_INT 2
56193: DOUBLE
56194: EQUAL
56195: IFTRUE 56199
56197: GO 59454
56199: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56200: LD_ADDR_VAR 0 29
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 4
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 5
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 5
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 5
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 4
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: LD_INT 4
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 4
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 5
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 4
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 5
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 4
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 4
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: NEG
56598: PUSH
56599: LD_INT 5
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: NEG
56610: PUSH
56611: LD_INT 4
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 4
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 5
56645: NEG
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 5
56657: NEG
56658: PUSH
56659: LD_INT 5
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 5
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 5
56681: NEG
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56738: LD_ADDR_VAR 0 30
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: LD_INT 4
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 5
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: LD_INT 5
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: PUSH
56786: LD_INT 5
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 4
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 4
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 4
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 4
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 5
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: NEG
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: LD_INT 4
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 4
57090: NEG
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: LD_INT 4
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: LD_INT 4
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 5
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 4
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 5
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 5
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57285: LD_ADDR_VAR 0 31
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 5
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 4
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 4
57487: NEG
57488: PUSH
57489: LD_INT 4
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 4
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 5
57547: NEG
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 5
57559: NEG
57560: PUSH
57561: LD_INT 5
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: LD_INT 5
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 5
57583: NEG
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 4
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 4
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 5
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 5
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57835: LD_ADDR_VAR 0 32
57839: PUSH
57840: LD_INT 4
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 5
57921: NEG
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: NEG
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 4
58016: NEG
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 5
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 5
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 4
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 4
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 5
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 5
58277: PUSH
58278: LD_INT 5
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: PUSH
58288: LD_INT 5
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: LD_INT 5
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58382: LD_ADDR_VAR 0 33
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: LD_INT 4
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: NEG
58402: PUSH
58403: LD_INT 5
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: LD_INT 4
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: NEG
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 5
58449: NEG
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: NEG
58462: PUSH
58463: LD_INT 5
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 5
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 4
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 4
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: LD_INT 4
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 5
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 4
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 5
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 5
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 5
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 4
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 5
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58920: LD_ADDR_VAR 0 34
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 4
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 5
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 4
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 5
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 5
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 4
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 4
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 4
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 4
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 5
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 5
59152: PUSH
59153: LD_INT 5
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 4
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 5
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 5
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 4
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 5
59361: NEG
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: ST_TO_ADDR
// end ; end ;
59452: GO 59455
59454: POP
// case btype of b_depot , b_warehouse :
59455: LD_VAR 0 1
59459: PUSH
59460: LD_INT 0
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59474
59466: LD_INT 1
59468: DOUBLE
59469: EQUAL
59470: IFTRUE 59474
59472: GO 59675
59474: POP
// case nation of nation_american :
59475: LD_VAR 0 5
59479: PUSH
59480: LD_INT 1
59482: DOUBLE
59483: EQUAL
59484: IFTRUE 59488
59486: GO 59544
59488: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59489: LD_ADDR_VAR 0 9
59493: PUSH
59494: LD_VAR 0 11
59498: PUSH
59499: LD_VAR 0 12
59503: PUSH
59504: LD_VAR 0 13
59508: PUSH
59509: LD_VAR 0 14
59513: PUSH
59514: LD_VAR 0 15
59518: PUSH
59519: LD_VAR 0 16
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: PUSH
59532: LD_VAR 0 4
59536: PUSH
59537: LD_INT 1
59539: PLUS
59540: ARRAY
59541: ST_TO_ADDR
59542: GO 59673
59544: LD_INT 2
59546: DOUBLE
59547: EQUAL
59548: IFTRUE 59552
59550: GO 59608
59552: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59553: LD_ADDR_VAR 0 9
59557: PUSH
59558: LD_VAR 0 17
59562: PUSH
59563: LD_VAR 0 18
59567: PUSH
59568: LD_VAR 0 19
59572: PUSH
59573: LD_VAR 0 20
59577: PUSH
59578: LD_VAR 0 21
59582: PUSH
59583: LD_VAR 0 22
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: LD_VAR 0 4
59600: PUSH
59601: LD_INT 1
59603: PLUS
59604: ARRAY
59605: ST_TO_ADDR
59606: GO 59673
59608: LD_INT 3
59610: DOUBLE
59611: EQUAL
59612: IFTRUE 59616
59614: GO 59672
59616: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59617: LD_ADDR_VAR 0 9
59621: PUSH
59622: LD_VAR 0 23
59626: PUSH
59627: LD_VAR 0 24
59631: PUSH
59632: LD_VAR 0 25
59636: PUSH
59637: LD_VAR 0 26
59641: PUSH
59642: LD_VAR 0 27
59646: PUSH
59647: LD_VAR 0 28
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: PUSH
59660: LD_VAR 0 4
59664: PUSH
59665: LD_INT 1
59667: PLUS
59668: ARRAY
59669: ST_TO_ADDR
59670: GO 59673
59672: POP
59673: GO 60228
59675: LD_INT 2
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59689
59681: LD_INT 3
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59689
59687: GO 59745
59689: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59690: LD_ADDR_VAR 0 9
59694: PUSH
59695: LD_VAR 0 29
59699: PUSH
59700: LD_VAR 0 30
59704: PUSH
59705: LD_VAR 0 31
59709: PUSH
59710: LD_VAR 0 32
59714: PUSH
59715: LD_VAR 0 33
59719: PUSH
59720: LD_VAR 0 34
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 4
59737: PUSH
59738: LD_INT 1
59740: PLUS
59741: ARRAY
59742: ST_TO_ADDR
59743: GO 60228
59745: LD_INT 16
59747: DOUBLE
59748: EQUAL
59749: IFTRUE 59807
59751: LD_INT 17
59753: DOUBLE
59754: EQUAL
59755: IFTRUE 59807
59757: LD_INT 18
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59807
59763: LD_INT 19
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59807
59769: LD_INT 22
59771: DOUBLE
59772: EQUAL
59773: IFTRUE 59807
59775: LD_INT 20
59777: DOUBLE
59778: EQUAL
59779: IFTRUE 59807
59781: LD_INT 21
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59807
59787: LD_INT 23
59789: DOUBLE
59790: EQUAL
59791: IFTRUE 59807
59793: LD_INT 24
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59807
59799: LD_INT 25
59801: DOUBLE
59802: EQUAL
59803: IFTRUE 59807
59805: GO 59863
59807: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59808: LD_ADDR_VAR 0 9
59812: PUSH
59813: LD_VAR 0 35
59817: PUSH
59818: LD_VAR 0 36
59822: PUSH
59823: LD_VAR 0 37
59827: PUSH
59828: LD_VAR 0 38
59832: PUSH
59833: LD_VAR 0 39
59837: PUSH
59838: LD_VAR 0 40
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: PUSH
59851: LD_VAR 0 4
59855: PUSH
59856: LD_INT 1
59858: PLUS
59859: ARRAY
59860: ST_TO_ADDR
59861: GO 60228
59863: LD_INT 6
59865: DOUBLE
59866: EQUAL
59867: IFTRUE 59919
59869: LD_INT 7
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59919
59875: LD_INT 8
59877: DOUBLE
59878: EQUAL
59879: IFTRUE 59919
59881: LD_INT 13
59883: DOUBLE
59884: EQUAL
59885: IFTRUE 59919
59887: LD_INT 12
59889: DOUBLE
59890: EQUAL
59891: IFTRUE 59919
59893: LD_INT 15
59895: DOUBLE
59896: EQUAL
59897: IFTRUE 59919
59899: LD_INT 11
59901: DOUBLE
59902: EQUAL
59903: IFTRUE 59919
59905: LD_INT 14
59907: DOUBLE
59908: EQUAL
59909: IFTRUE 59919
59911: LD_INT 10
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59919
59917: GO 59975
59919: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59920: LD_ADDR_VAR 0 9
59924: PUSH
59925: LD_VAR 0 41
59929: PUSH
59930: LD_VAR 0 42
59934: PUSH
59935: LD_VAR 0 43
59939: PUSH
59940: LD_VAR 0 44
59944: PUSH
59945: LD_VAR 0 45
59949: PUSH
59950: LD_VAR 0 46
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 4
59967: PUSH
59968: LD_INT 1
59970: PLUS
59971: ARRAY
59972: ST_TO_ADDR
59973: GO 60228
59975: LD_INT 36
59977: DOUBLE
59978: EQUAL
59979: IFTRUE 59983
59981: GO 60039
59983: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59984: LD_ADDR_VAR 0 9
59988: PUSH
59989: LD_VAR 0 47
59993: PUSH
59994: LD_VAR 0 48
59998: PUSH
59999: LD_VAR 0 49
60003: PUSH
60004: LD_VAR 0 50
60008: PUSH
60009: LD_VAR 0 51
60013: PUSH
60014: LD_VAR 0 52
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: LD_VAR 0 4
60031: PUSH
60032: LD_INT 1
60034: PLUS
60035: ARRAY
60036: ST_TO_ADDR
60037: GO 60228
60039: LD_INT 4
60041: DOUBLE
60042: EQUAL
60043: IFTRUE 60065
60045: LD_INT 5
60047: DOUBLE
60048: EQUAL
60049: IFTRUE 60065
60051: LD_INT 34
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60065
60057: LD_INT 37
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60065
60063: GO 60121
60065: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60066: LD_ADDR_VAR 0 9
60070: PUSH
60071: LD_VAR 0 53
60075: PUSH
60076: LD_VAR 0 54
60080: PUSH
60081: LD_VAR 0 55
60085: PUSH
60086: LD_VAR 0 56
60090: PUSH
60091: LD_VAR 0 57
60095: PUSH
60096: LD_VAR 0 58
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 4
60113: PUSH
60114: LD_INT 1
60116: PLUS
60117: ARRAY
60118: ST_TO_ADDR
60119: GO 60228
60121: LD_INT 31
60123: DOUBLE
60124: EQUAL
60125: IFTRUE 60171
60127: LD_INT 32
60129: DOUBLE
60130: EQUAL
60131: IFTRUE 60171
60133: LD_INT 33
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60171
60139: LD_INT 27
60141: DOUBLE
60142: EQUAL
60143: IFTRUE 60171
60145: LD_INT 26
60147: DOUBLE
60148: EQUAL
60149: IFTRUE 60171
60151: LD_INT 28
60153: DOUBLE
60154: EQUAL
60155: IFTRUE 60171
60157: LD_INT 29
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60171
60163: LD_INT 30
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60171
60169: GO 60227
60171: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60172: LD_ADDR_VAR 0 9
60176: PUSH
60177: LD_VAR 0 59
60181: PUSH
60182: LD_VAR 0 60
60186: PUSH
60187: LD_VAR 0 61
60191: PUSH
60192: LD_VAR 0 62
60196: PUSH
60197: LD_VAR 0 63
60201: PUSH
60202: LD_VAR 0 64
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: PUSH
60215: LD_VAR 0 4
60219: PUSH
60220: LD_INT 1
60222: PLUS
60223: ARRAY
60224: ST_TO_ADDR
60225: GO 60228
60227: POP
// temp_list2 = [ ] ;
60228: LD_ADDR_VAR 0 10
60232: PUSH
60233: EMPTY
60234: ST_TO_ADDR
// for i in temp_list do
60235: LD_ADDR_VAR 0 8
60239: PUSH
60240: LD_VAR 0 9
60244: PUSH
60245: FOR_IN
60246: IFFALSE 60298
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60248: LD_ADDR_VAR 0 10
60252: PUSH
60253: LD_VAR 0 10
60257: PUSH
60258: LD_VAR 0 8
60262: PUSH
60263: LD_INT 1
60265: ARRAY
60266: PUSH
60267: LD_VAR 0 2
60271: PLUS
60272: PUSH
60273: LD_VAR 0 8
60277: PUSH
60278: LD_INT 2
60280: ARRAY
60281: PUSH
60282: LD_VAR 0 3
60286: PLUS
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: ADD
60295: ST_TO_ADDR
60296: GO 60245
60298: POP
60299: POP
// result = temp_list2 ;
60300: LD_ADDR_VAR 0 7
60304: PUSH
60305: LD_VAR 0 10
60309: ST_TO_ADDR
// end ;
60310: LD_VAR 0 7
60314: RET
// export function EnemyInRange ( unit , dist ) ; begin
60315: LD_INT 0
60317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60318: LD_ADDR_VAR 0 3
60322: PUSH
60323: LD_VAR 0 1
60327: PPUSH
60328: CALL_OW 255
60332: PPUSH
60333: LD_VAR 0 1
60337: PPUSH
60338: CALL_OW 250
60342: PPUSH
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 251
60352: PPUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: CALL 34086 0 4
60362: PUSH
60363: LD_INT 4
60365: ARRAY
60366: ST_TO_ADDR
// end ;
60367: LD_VAR 0 3
60371: RET
// export function PlayerSeeMe ( unit ) ; begin
60372: LD_INT 0
60374: PPUSH
// result := See ( your_side , unit ) ;
60375: LD_ADDR_VAR 0 2
60379: PUSH
60380: LD_OWVAR 2
60384: PPUSH
60385: LD_VAR 0 1
60389: PPUSH
60390: CALL_OW 292
60394: ST_TO_ADDR
// end ;
60395: LD_VAR 0 2
60399: RET
// export function ReverseDir ( unit ) ; begin
60400: LD_INT 0
60402: PPUSH
// if not unit then
60403: LD_VAR 0 1
60407: NOT
60408: IFFALSE 60412
// exit ;
60410: GO 60435
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60412: LD_ADDR_VAR 0 2
60416: PUSH
60417: LD_VAR 0 1
60421: PPUSH
60422: CALL_OW 254
60426: PUSH
60427: LD_INT 3
60429: PLUS
60430: PUSH
60431: LD_INT 6
60433: MOD
60434: ST_TO_ADDR
// end ;
60435: LD_VAR 0 2
60439: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60440: LD_INT 0
60442: PPUSH
60443: PPUSH
60444: PPUSH
60445: PPUSH
60446: PPUSH
// if not hexes then
60447: LD_VAR 0 2
60451: NOT
60452: IFFALSE 60456
// exit ;
60454: GO 60604
// dist := 9999 ;
60456: LD_ADDR_VAR 0 5
60460: PUSH
60461: LD_INT 9999
60463: ST_TO_ADDR
// for i = 1 to hexes do
60464: LD_ADDR_VAR 0 4
60468: PUSH
60469: DOUBLE
60470: LD_INT 1
60472: DEC
60473: ST_TO_ADDR
60474: LD_VAR 0 2
60478: PUSH
60479: FOR_TO
60480: IFFALSE 60592
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60482: LD_VAR 0 1
60486: PPUSH
60487: LD_VAR 0 2
60491: PUSH
60492: LD_VAR 0 4
60496: ARRAY
60497: PUSH
60498: LD_INT 1
60500: ARRAY
60501: PPUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_VAR 0 4
60511: ARRAY
60512: PUSH
60513: LD_INT 2
60515: ARRAY
60516: PPUSH
60517: CALL_OW 297
60521: PUSH
60522: LD_VAR 0 5
60526: LESS
60527: IFFALSE 60590
// begin hex := hexes [ i ] ;
60529: LD_ADDR_VAR 0 7
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_VAR 0 4
60543: ARRAY
60544: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60545: LD_ADDR_VAR 0 5
60549: PUSH
60550: LD_VAR 0 1
60554: PPUSH
60555: LD_VAR 0 2
60559: PUSH
60560: LD_VAR 0 4
60564: ARRAY
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: PPUSH
60570: LD_VAR 0 2
60574: PUSH
60575: LD_VAR 0 4
60579: ARRAY
60580: PUSH
60581: LD_INT 2
60583: ARRAY
60584: PPUSH
60585: CALL_OW 297
60589: ST_TO_ADDR
// end ; end ;
60590: GO 60479
60592: POP
60593: POP
// result := hex ;
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: LD_VAR 0 7
60603: ST_TO_ADDR
// end ;
60604: LD_VAR 0 3
60608: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60609: LD_INT 0
60611: PPUSH
60612: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60613: LD_VAR 0 1
60617: NOT
60618: PUSH
60619: LD_VAR 0 1
60623: PUSH
60624: LD_INT 21
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 23
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PPUSH
60648: CALL_OW 69
60652: IN
60653: NOT
60654: OR
60655: IFFALSE 60659
// exit ;
60657: GO 60706
// for i = 1 to 3 do
60659: LD_ADDR_VAR 0 3
60663: PUSH
60664: DOUBLE
60665: LD_INT 1
60667: DEC
60668: ST_TO_ADDR
60669: LD_INT 3
60671: PUSH
60672: FOR_TO
60673: IFFALSE 60704
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 250
60684: PPUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 251
60694: PPUSH
60695: LD_INT 1
60697: PPUSH
60698: CALL_OW 453
60702: GO 60672
60704: POP
60705: POP
// end ;
60706: LD_VAR 0 2
60710: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60711: LD_INT 0
60713: PPUSH
60714: PPUSH
60715: PPUSH
60716: PPUSH
60717: PPUSH
60718: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60719: LD_VAR 0 1
60723: NOT
60724: PUSH
60725: LD_VAR 0 2
60729: NOT
60730: OR
60731: PUSH
60732: LD_VAR 0 1
60736: PPUSH
60737: CALL_OW 314
60741: OR
60742: IFFALSE 60746
// exit ;
60744: GO 61187
// x := GetX ( enemy_unit ) ;
60746: LD_ADDR_VAR 0 7
60750: PUSH
60751: LD_VAR 0 2
60755: PPUSH
60756: CALL_OW 250
60760: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60761: LD_ADDR_VAR 0 8
60765: PUSH
60766: LD_VAR 0 2
60770: PPUSH
60771: CALL_OW 251
60775: ST_TO_ADDR
// if not x or not y then
60776: LD_VAR 0 7
60780: NOT
60781: PUSH
60782: LD_VAR 0 8
60786: NOT
60787: OR
60788: IFFALSE 60792
// exit ;
60790: GO 61187
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60792: LD_ADDR_VAR 0 6
60796: PUSH
60797: LD_VAR 0 7
60801: PPUSH
60802: LD_INT 0
60804: PPUSH
60805: LD_INT 4
60807: PPUSH
60808: CALL_OW 272
60812: PUSH
60813: LD_VAR 0 8
60817: PPUSH
60818: LD_INT 0
60820: PPUSH
60821: LD_INT 4
60823: PPUSH
60824: CALL_OW 273
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_VAR 0 7
60837: PPUSH
60838: LD_INT 1
60840: PPUSH
60841: LD_INT 4
60843: PPUSH
60844: CALL_OW 272
60848: PUSH
60849: LD_VAR 0 8
60853: PPUSH
60854: LD_INT 1
60856: PPUSH
60857: LD_INT 4
60859: PPUSH
60860: CALL_OW 273
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_VAR 0 7
60873: PPUSH
60874: LD_INT 2
60876: PPUSH
60877: LD_INT 4
60879: PPUSH
60880: CALL_OW 272
60884: PUSH
60885: LD_VAR 0 8
60889: PPUSH
60890: LD_INT 2
60892: PPUSH
60893: LD_INT 4
60895: PPUSH
60896: CALL_OW 273
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_VAR 0 7
60909: PPUSH
60910: LD_INT 3
60912: PPUSH
60913: LD_INT 4
60915: PPUSH
60916: CALL_OW 272
60920: PUSH
60921: LD_VAR 0 8
60925: PPUSH
60926: LD_INT 3
60928: PPUSH
60929: LD_INT 4
60931: PPUSH
60932: CALL_OW 273
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_VAR 0 7
60945: PPUSH
60946: LD_INT 4
60948: PPUSH
60949: LD_INT 4
60951: PPUSH
60952: CALL_OW 272
60956: PUSH
60957: LD_VAR 0 8
60961: PPUSH
60962: LD_INT 4
60964: PPUSH
60965: LD_INT 4
60967: PPUSH
60968: CALL_OW 273
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_VAR 0 7
60981: PPUSH
60982: LD_INT 5
60984: PPUSH
60985: LD_INT 4
60987: PPUSH
60988: CALL_OW 272
60992: PUSH
60993: LD_VAR 0 8
60997: PPUSH
60998: LD_INT 5
61000: PPUSH
61001: LD_INT 4
61003: PPUSH
61004: CALL_OW 273
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// for i = tmp downto 1 do
61021: LD_ADDR_VAR 0 4
61025: PUSH
61026: DOUBLE
61027: LD_VAR 0 6
61031: INC
61032: ST_TO_ADDR
61033: LD_INT 1
61035: PUSH
61036: FOR_DOWNTO
61037: IFFALSE 61138
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61039: LD_VAR 0 6
61043: PUSH
61044: LD_VAR 0 4
61048: ARRAY
61049: PUSH
61050: LD_INT 1
61052: ARRAY
61053: PPUSH
61054: LD_VAR 0 6
61058: PUSH
61059: LD_VAR 0 4
61063: ARRAY
61064: PUSH
61065: LD_INT 2
61067: ARRAY
61068: PPUSH
61069: CALL_OW 488
61073: NOT
61074: PUSH
61075: LD_VAR 0 6
61079: PUSH
61080: LD_VAR 0 4
61084: ARRAY
61085: PUSH
61086: LD_INT 1
61088: ARRAY
61089: PPUSH
61090: LD_VAR 0 6
61094: PUSH
61095: LD_VAR 0 4
61099: ARRAY
61100: PUSH
61101: LD_INT 2
61103: ARRAY
61104: PPUSH
61105: CALL_OW 428
61109: PUSH
61110: LD_INT 0
61112: NONEQUAL
61113: OR
61114: IFFALSE 61136
// tmp := Delete ( tmp , i ) ;
61116: LD_ADDR_VAR 0 6
61120: PUSH
61121: LD_VAR 0 6
61125: PPUSH
61126: LD_VAR 0 4
61130: PPUSH
61131: CALL_OW 3
61135: ST_TO_ADDR
61136: GO 61036
61138: POP
61139: POP
// j := GetClosestHex ( unit , tmp ) ;
61140: LD_ADDR_VAR 0 5
61144: PUSH
61145: LD_VAR 0 1
61149: PPUSH
61150: LD_VAR 0 6
61154: PPUSH
61155: CALL 60440 0 2
61159: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_VAR 0 5
61169: PUSH
61170: LD_INT 1
61172: ARRAY
61173: PPUSH
61174: LD_VAR 0 5
61178: PUSH
61179: LD_INT 2
61181: ARRAY
61182: PPUSH
61183: CALL_OW 111
// end ;
61187: LD_VAR 0 3
61191: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61192: LD_INT 0
61194: PPUSH
61195: PPUSH
61196: PPUSH
// uc_side = 0 ;
61197: LD_ADDR_OWVAR 20
61201: PUSH
61202: LD_INT 0
61204: ST_TO_ADDR
// uc_nation = 0 ;
61205: LD_ADDR_OWVAR 21
61209: PUSH
61210: LD_INT 0
61212: ST_TO_ADDR
// InitHc_All ( ) ;
61213: CALL_OW 584
// InitVc ;
61217: CALL_OW 20
// if mastodonts then
61221: LD_VAR 0 6
61225: IFFALSE 61292
// for i = 1 to mastodonts do
61227: LD_ADDR_VAR 0 11
61231: PUSH
61232: DOUBLE
61233: LD_INT 1
61235: DEC
61236: ST_TO_ADDR
61237: LD_VAR 0 6
61241: PUSH
61242: FOR_TO
61243: IFFALSE 61290
// begin vc_chassis := 31 ;
61245: LD_ADDR_OWVAR 37
61249: PUSH
61250: LD_INT 31
61252: ST_TO_ADDR
// vc_control := control_rider ;
61253: LD_ADDR_OWVAR 38
61257: PUSH
61258: LD_INT 4
61260: ST_TO_ADDR
// animal := CreateVehicle ;
61261: LD_ADDR_VAR 0 12
61265: PUSH
61266: CALL_OW 45
61270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61271: LD_VAR 0 12
61275: PPUSH
61276: LD_VAR 0 8
61280: PPUSH
61281: LD_INT 0
61283: PPUSH
61284: CALL 63480 0 3
// end ;
61288: GO 61242
61290: POP
61291: POP
// if horses then
61292: LD_VAR 0 5
61296: IFFALSE 61363
// for i = 1 to horses do
61298: LD_ADDR_VAR 0 11
61302: PUSH
61303: DOUBLE
61304: LD_INT 1
61306: DEC
61307: ST_TO_ADDR
61308: LD_VAR 0 5
61312: PUSH
61313: FOR_TO
61314: IFFALSE 61361
// begin hc_class := 21 ;
61316: LD_ADDR_OWVAR 28
61320: PUSH
61321: LD_INT 21
61323: ST_TO_ADDR
// hc_gallery :=  ;
61324: LD_ADDR_OWVAR 33
61328: PUSH
61329: LD_STRING 
61331: ST_TO_ADDR
// animal := CreateHuman ;
61332: LD_ADDR_VAR 0 12
61336: PUSH
61337: CALL_OW 44
61341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61342: LD_VAR 0 12
61346: PPUSH
61347: LD_VAR 0 8
61351: PPUSH
61352: LD_INT 0
61354: PPUSH
61355: CALL 63480 0 3
// end ;
61359: GO 61313
61361: POP
61362: POP
// if birds then
61363: LD_VAR 0 1
61367: IFFALSE 61434
// for i = 1 to birds do
61369: LD_ADDR_VAR 0 11
61373: PUSH
61374: DOUBLE
61375: LD_INT 1
61377: DEC
61378: ST_TO_ADDR
61379: LD_VAR 0 1
61383: PUSH
61384: FOR_TO
61385: IFFALSE 61432
// begin hc_class = 18 ;
61387: LD_ADDR_OWVAR 28
61391: PUSH
61392: LD_INT 18
61394: ST_TO_ADDR
// hc_gallery =  ;
61395: LD_ADDR_OWVAR 33
61399: PUSH
61400: LD_STRING 
61402: ST_TO_ADDR
// animal := CreateHuman ;
61403: LD_ADDR_VAR 0 12
61407: PUSH
61408: CALL_OW 44
61412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61413: LD_VAR 0 12
61417: PPUSH
61418: LD_VAR 0 8
61422: PPUSH
61423: LD_INT 0
61425: PPUSH
61426: CALL 63480 0 3
// end ;
61430: GO 61384
61432: POP
61433: POP
// if tigers then
61434: LD_VAR 0 2
61438: IFFALSE 61522
// for i = 1 to tigers do
61440: LD_ADDR_VAR 0 11
61444: PUSH
61445: DOUBLE
61446: LD_INT 1
61448: DEC
61449: ST_TO_ADDR
61450: LD_VAR 0 2
61454: PUSH
61455: FOR_TO
61456: IFFALSE 61520
// begin hc_class = class_tiger ;
61458: LD_ADDR_OWVAR 28
61462: PUSH
61463: LD_INT 14
61465: ST_TO_ADDR
// hc_gallery =  ;
61466: LD_ADDR_OWVAR 33
61470: PUSH
61471: LD_STRING 
61473: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61474: LD_ADDR_OWVAR 35
61478: PUSH
61479: LD_INT 7
61481: NEG
61482: PPUSH
61483: LD_INT 7
61485: PPUSH
61486: CALL_OW 12
61490: ST_TO_ADDR
// animal := CreateHuman ;
61491: LD_ADDR_VAR 0 12
61495: PUSH
61496: CALL_OW 44
61500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61501: LD_VAR 0 12
61505: PPUSH
61506: LD_VAR 0 8
61510: PPUSH
61511: LD_INT 0
61513: PPUSH
61514: CALL 63480 0 3
// end ;
61518: GO 61455
61520: POP
61521: POP
// if apemans then
61522: LD_VAR 0 3
61526: IFFALSE 61649
// for i = 1 to apemans do
61528: LD_ADDR_VAR 0 11
61532: PUSH
61533: DOUBLE
61534: LD_INT 1
61536: DEC
61537: ST_TO_ADDR
61538: LD_VAR 0 3
61542: PUSH
61543: FOR_TO
61544: IFFALSE 61647
// begin hc_class = class_apeman ;
61546: LD_ADDR_OWVAR 28
61550: PUSH
61551: LD_INT 12
61553: ST_TO_ADDR
// hc_gallery =  ;
61554: LD_ADDR_OWVAR 33
61558: PUSH
61559: LD_STRING 
61561: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61562: LD_ADDR_OWVAR 35
61566: PUSH
61567: LD_INT 5
61569: NEG
61570: PPUSH
61571: LD_INT 5
61573: PPUSH
61574: CALL_OW 12
61578: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61579: LD_ADDR_OWVAR 31
61583: PUSH
61584: LD_INT 1
61586: PPUSH
61587: LD_INT 3
61589: PPUSH
61590: CALL_OW 12
61594: PUSH
61595: LD_INT 1
61597: PPUSH
61598: LD_INT 3
61600: PPUSH
61601: CALL_OW 12
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: ST_TO_ADDR
// animal := CreateHuman ;
61618: LD_ADDR_VAR 0 12
61622: PUSH
61623: CALL_OW 44
61627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61628: LD_VAR 0 12
61632: PPUSH
61633: LD_VAR 0 8
61637: PPUSH
61638: LD_INT 0
61640: PPUSH
61641: CALL 63480 0 3
// end ;
61645: GO 61543
61647: POP
61648: POP
// if enchidnas then
61649: LD_VAR 0 4
61653: IFFALSE 61720
// for i = 1 to enchidnas do
61655: LD_ADDR_VAR 0 11
61659: PUSH
61660: DOUBLE
61661: LD_INT 1
61663: DEC
61664: ST_TO_ADDR
61665: LD_VAR 0 4
61669: PUSH
61670: FOR_TO
61671: IFFALSE 61718
// begin hc_class = 13 ;
61673: LD_ADDR_OWVAR 28
61677: PUSH
61678: LD_INT 13
61680: ST_TO_ADDR
// hc_gallery =  ;
61681: LD_ADDR_OWVAR 33
61685: PUSH
61686: LD_STRING 
61688: ST_TO_ADDR
// animal := CreateHuman ;
61689: LD_ADDR_VAR 0 12
61693: PUSH
61694: CALL_OW 44
61698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61699: LD_VAR 0 12
61703: PPUSH
61704: LD_VAR 0 8
61708: PPUSH
61709: LD_INT 0
61711: PPUSH
61712: CALL 63480 0 3
// end ;
61716: GO 61670
61718: POP
61719: POP
// if fishes then
61720: LD_VAR 0 7
61724: IFFALSE 61791
// for i = 1 to fishes do
61726: LD_ADDR_VAR 0 11
61730: PUSH
61731: DOUBLE
61732: LD_INT 1
61734: DEC
61735: ST_TO_ADDR
61736: LD_VAR 0 7
61740: PUSH
61741: FOR_TO
61742: IFFALSE 61789
// begin hc_class = 20 ;
61744: LD_ADDR_OWVAR 28
61748: PUSH
61749: LD_INT 20
61751: ST_TO_ADDR
// hc_gallery =  ;
61752: LD_ADDR_OWVAR 33
61756: PUSH
61757: LD_STRING 
61759: ST_TO_ADDR
// animal := CreateHuman ;
61760: LD_ADDR_VAR 0 12
61764: PUSH
61765: CALL_OW 44
61769: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61770: LD_VAR 0 12
61774: PPUSH
61775: LD_VAR 0 9
61779: PPUSH
61780: LD_INT 0
61782: PPUSH
61783: CALL 63480 0 3
// end ;
61787: GO 61741
61789: POP
61790: POP
// end ;
61791: LD_VAR 0 10
61795: RET
// export function WantHeal ( sci , unit ) ; begin
61796: LD_INT 0
61798: PPUSH
// if GetTaskList ( sci ) > 0 then
61799: LD_VAR 0 1
61803: PPUSH
61804: CALL_OW 437
61808: PUSH
61809: LD_INT 0
61811: GREATER
61812: IFFALSE 61882
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61814: LD_VAR 0 1
61818: PPUSH
61819: CALL_OW 437
61823: PUSH
61824: LD_INT 1
61826: ARRAY
61827: PUSH
61828: LD_INT 1
61830: ARRAY
61831: PUSH
61832: LD_STRING l
61834: EQUAL
61835: PUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 437
61845: PUSH
61846: LD_INT 1
61848: ARRAY
61849: PUSH
61850: LD_INT 4
61852: ARRAY
61853: PUSH
61854: LD_VAR 0 2
61858: EQUAL
61859: AND
61860: IFFALSE 61872
// result := true else
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_INT 1
61869: ST_TO_ADDR
61870: GO 61880
// result := false ;
61872: LD_ADDR_VAR 0 3
61876: PUSH
61877: LD_INT 0
61879: ST_TO_ADDR
// end else
61880: GO 61890
// result := false ;
61882: LD_ADDR_VAR 0 3
61886: PUSH
61887: LD_INT 0
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 3
61894: RET
// export function HealTarget ( sci ) ; begin
61895: LD_INT 0
61897: PPUSH
// if not sci then
61898: LD_VAR 0 1
61902: NOT
61903: IFFALSE 61907
// exit ;
61905: GO 61972
// result := 0 ;
61907: LD_ADDR_VAR 0 2
61911: PUSH
61912: LD_INT 0
61914: ST_TO_ADDR
// if GetTaskList ( sci ) then
61915: LD_VAR 0 1
61919: PPUSH
61920: CALL_OW 437
61924: IFFALSE 61972
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61926: LD_VAR 0 1
61930: PPUSH
61931: CALL_OW 437
61935: PUSH
61936: LD_INT 1
61938: ARRAY
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: PUSH
61944: LD_STRING l
61946: EQUAL
61947: IFFALSE 61972
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61949: LD_ADDR_VAR 0 2
61953: PUSH
61954: LD_VAR 0 1
61958: PPUSH
61959: CALL_OW 437
61963: PUSH
61964: LD_INT 1
61966: ARRAY
61967: PUSH
61968: LD_INT 4
61970: ARRAY
61971: ST_TO_ADDR
// end ;
61972: LD_VAR 0 2
61976: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61977: LD_INT 0
61979: PPUSH
61980: PPUSH
61981: PPUSH
61982: PPUSH
// if not base_units then
61983: LD_VAR 0 1
61987: NOT
61988: IFFALSE 61992
// exit ;
61990: GO 62079
// result := false ;
61992: LD_ADDR_VAR 0 2
61996: PUSH
61997: LD_INT 0
61999: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62000: LD_ADDR_VAR 0 5
62004: PUSH
62005: LD_VAR 0 1
62009: PPUSH
62010: LD_INT 21
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PPUSH
62020: CALL_OW 72
62024: ST_TO_ADDR
// if not tmp then
62025: LD_VAR 0 5
62029: NOT
62030: IFFALSE 62034
// exit ;
62032: GO 62079
// for i in tmp do
62034: LD_ADDR_VAR 0 3
62038: PUSH
62039: LD_VAR 0 5
62043: PUSH
62044: FOR_IN
62045: IFFALSE 62077
// begin result := EnemyInRange ( i , 22 ) ;
62047: LD_ADDR_VAR 0 2
62051: PUSH
62052: LD_VAR 0 3
62056: PPUSH
62057: LD_INT 22
62059: PPUSH
62060: CALL 60315 0 2
62064: ST_TO_ADDR
// if result then
62065: LD_VAR 0 2
62069: IFFALSE 62075
// exit ;
62071: POP
62072: POP
62073: GO 62079
// end ;
62075: GO 62044
62077: POP
62078: POP
// end ;
62079: LD_VAR 0 2
62083: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62084: LD_INT 0
62086: PPUSH
62087: PPUSH
// if not units then
62088: LD_VAR 0 1
62092: NOT
62093: IFFALSE 62097
// exit ;
62095: GO 62167
// result := [ ] ;
62097: LD_ADDR_VAR 0 3
62101: PUSH
62102: EMPTY
62103: ST_TO_ADDR
// for i in units do
62104: LD_ADDR_VAR 0 4
62108: PUSH
62109: LD_VAR 0 1
62113: PUSH
62114: FOR_IN
62115: IFFALSE 62165
// if GetTag ( i ) = tag then
62117: LD_VAR 0 4
62121: PPUSH
62122: CALL_OW 110
62126: PUSH
62127: LD_VAR 0 2
62131: EQUAL
62132: IFFALSE 62163
// result := Insert ( result , result + 1 , i ) ;
62134: LD_ADDR_VAR 0 3
62138: PUSH
62139: LD_VAR 0 3
62143: PPUSH
62144: LD_VAR 0 3
62148: PUSH
62149: LD_INT 1
62151: PLUS
62152: PPUSH
62153: LD_VAR 0 4
62157: PPUSH
62158: CALL_OW 2
62162: ST_TO_ADDR
62163: GO 62114
62165: POP
62166: POP
// end ;
62167: LD_VAR 0 3
62171: RET
// export function IsDriver ( un ) ; begin
62172: LD_INT 0
62174: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62175: LD_ADDR_VAR 0 2
62179: PUSH
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 55
62187: PUSH
62188: EMPTY
62189: LIST
62190: PPUSH
62191: CALL_OW 69
62195: IN
62196: ST_TO_ADDR
// end ;
62197: LD_VAR 0 2
62201: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62202: LD_INT 0
62204: PPUSH
62205: PPUSH
// list := [ ] ;
62206: LD_ADDR_VAR 0 5
62210: PUSH
62211: EMPTY
62212: ST_TO_ADDR
// case d of 0 :
62213: LD_VAR 0 3
62217: PUSH
62218: LD_INT 0
62220: DOUBLE
62221: EQUAL
62222: IFTRUE 62226
62224: GO 62359
62226: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62227: LD_ADDR_VAR 0 5
62231: PUSH
62232: LD_VAR 0 1
62236: PUSH
62237: LD_INT 4
62239: MINUS
62240: PUSH
62241: LD_VAR 0 2
62245: PUSH
62246: LD_INT 4
62248: MINUS
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: PUSH
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 3
62265: MINUS
62266: PUSH
62267: LD_VAR 0 2
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: PUSH
62280: LD_VAR 0 1
62284: PUSH
62285: LD_INT 4
62287: PLUS
62288: PUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 3
62309: PLUS
62310: PUSH
62311: LD_VAR 0 2
62315: PUSH
62316: LD_INT 3
62318: PLUS
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: LD_VAR 0 1
62332: PUSH
62333: LD_VAR 0 2
62337: PUSH
62338: LD_INT 4
62340: PLUS
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// end ; 1 :
62357: GO 63057
62359: LD_INT 1
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62367
62365: GO 62500
62367: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62368: LD_ADDR_VAR 0 5
62372: PUSH
62373: LD_VAR 0 1
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_INT 4
62385: MINUS
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: PUSH
62395: LD_VAR 0 1
62399: PUSH
62400: LD_INT 3
62402: MINUS
62403: PUSH
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 3
62411: MINUS
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: LD_INT 4
62428: MINUS
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 1
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_INT 3
62455: PLUS
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: PUSH
62465: LD_VAR 0 1
62469: PUSH
62470: LD_INT 4
62472: PLUS
62473: PUSH
62474: LD_VAR 0 2
62478: PUSH
62479: LD_INT 4
62481: PLUS
62482: PUSH
62483: LD_INT 5
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// end ; 2 :
62498: GO 63057
62500: LD_INT 2
62502: DOUBLE
62503: EQUAL
62504: IFTRUE 62508
62506: GO 62637
62508: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62509: LD_ADDR_VAR 0 5
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: LD_INT 3
62526: MINUS
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 4
62543: PLUS
62544: PUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_INT 4
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 4
62570: PLUS
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_INT 3
62587: MINUS
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: PUSH
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 4
62609: MINUS
62610: PUSH
62611: LD_VAR 0 2
62615: PUSH
62616: LD_INT 4
62618: MINUS
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: ST_TO_ADDR
// end ; 3 :
62635: GO 63057
62637: LD_INT 3
62639: DOUBLE
62640: EQUAL
62641: IFTRUE 62645
62643: GO 62778
62645: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62646: LD_ADDR_VAR 0 5
62650: PUSH
62651: LD_VAR 0 1
62655: PUSH
62656: LD_INT 3
62658: PLUS
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: PUSH
62673: LD_VAR 0 1
62677: PUSH
62678: LD_INT 4
62680: PLUS
62681: PUSH
62682: LD_VAR 0 2
62686: PUSH
62687: LD_INT 4
62689: PLUS
62690: PUSH
62691: LD_INT 5
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: PUSH
62699: LD_VAR 0 1
62703: PUSH
62704: LD_INT 4
62706: MINUS
62707: PUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: LD_VAR 0 2
62730: PUSH
62731: LD_INT 4
62733: MINUS
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: PUSH
62743: LD_VAR 0 1
62747: PUSH
62748: LD_INT 3
62750: MINUS
62751: PUSH
62752: LD_VAR 0 2
62756: PUSH
62757: LD_INT 3
62759: MINUS
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: ST_TO_ADDR
// end ; 4 :
62776: GO 63057
62778: LD_INT 4
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62786
62784: GO 62919
62786: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62787: LD_ADDR_VAR 0 5
62791: PUSH
62792: LD_VAR 0 1
62796: PUSH
62797: LD_VAR 0 2
62801: PUSH
62802: LD_INT 4
62804: PLUS
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: LD_VAR 0 1
62818: PUSH
62819: LD_INT 3
62821: PLUS
62822: PUSH
62823: LD_VAR 0 2
62827: PUSH
62828: LD_INT 3
62830: PLUS
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 4
62847: PLUS
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_INT 3
62874: MINUS
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_VAR 0 1
62888: PUSH
62889: LD_INT 4
62891: MINUS
62892: PUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 4
62900: MINUS
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: ST_TO_ADDR
// end ; 5 :
62917: GO 63057
62919: LD_INT 5
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 63056
62927: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62928: LD_ADDR_VAR 0 5
62932: PUSH
62933: LD_VAR 0 1
62937: PUSH
62938: LD_INT 4
62940: MINUS
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 1
62959: PUSH
62960: LD_VAR 0 2
62964: PUSH
62965: LD_INT 4
62967: MINUS
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: PUSH
62977: LD_VAR 0 1
62981: PUSH
62982: LD_INT 4
62984: PLUS
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 4
62993: PLUS
62994: PUSH
62995: LD_INT 5
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: LD_VAR 0 1
63007: PUSH
63008: LD_INT 3
63010: PLUS
63011: PUSH
63012: LD_VAR 0 2
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: LD_VAR 0 1
63029: PUSH
63030: LD_VAR 0 2
63034: PUSH
63035: LD_INT 3
63037: PLUS
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// end ; end ;
63054: GO 63057
63056: POP
// result := list ;
63057: LD_ADDR_VAR 0 4
63061: PUSH
63062: LD_VAR 0 5
63066: ST_TO_ADDR
// end ;
63067: LD_VAR 0 4
63071: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63072: LD_INT 0
63074: PPUSH
63075: PPUSH
63076: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63077: LD_VAR 0 1
63081: NOT
63082: PUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 4
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: IN
63106: NOT
63107: OR
63108: IFFALSE 63112
// exit ;
63110: GO 63204
// tmp := [ ] ;
63112: LD_ADDR_VAR 0 5
63116: PUSH
63117: EMPTY
63118: ST_TO_ADDR
// for i in units do
63119: LD_ADDR_VAR 0 4
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: FOR_IN
63130: IFFALSE 63173
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63132: LD_ADDR_VAR 0 5
63136: PUSH
63137: LD_VAR 0 5
63141: PPUSH
63142: LD_VAR 0 5
63146: PUSH
63147: LD_INT 1
63149: PLUS
63150: PPUSH
63151: LD_VAR 0 4
63155: PPUSH
63156: LD_VAR 0 2
63160: PPUSH
63161: CALL_OW 259
63165: PPUSH
63166: CALL_OW 2
63170: ST_TO_ADDR
63171: GO 63129
63173: POP
63174: POP
// if not tmp then
63175: LD_VAR 0 5
63179: NOT
63180: IFFALSE 63184
// exit ;
63182: GO 63204
// result := SortListByListDesc ( units , tmp ) ;
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: LD_VAR 0 5
63198: PPUSH
63199: CALL_OW 77
63203: ST_TO_ADDR
// end ;
63204: LD_VAR 0 3
63208: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63209: LD_INT 0
63211: PPUSH
63212: PPUSH
63213: PPUSH
// result := false ;
63214: LD_ADDR_VAR 0 3
63218: PUSH
63219: LD_INT 0
63221: ST_TO_ADDR
// x := GetX ( building ) ;
63222: LD_ADDR_VAR 0 4
63226: PUSH
63227: LD_VAR 0 2
63231: PPUSH
63232: CALL_OW 250
63236: ST_TO_ADDR
// y := GetY ( building ) ;
63237: LD_ADDR_VAR 0 5
63241: PUSH
63242: LD_VAR 0 2
63246: PPUSH
63247: CALL_OW 251
63251: ST_TO_ADDR
// if not building or not x or not y then
63252: LD_VAR 0 2
63256: NOT
63257: PUSH
63258: LD_VAR 0 4
63262: NOT
63263: OR
63264: PUSH
63265: LD_VAR 0 5
63269: NOT
63270: OR
63271: IFFALSE 63275
// exit ;
63273: GO 63367
// if GetTaskList ( unit ) then
63275: LD_VAR 0 1
63279: PPUSH
63280: CALL_OW 437
63284: IFFALSE 63367
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63286: LD_STRING e
63288: PUSH
63289: LD_VAR 0 1
63293: PPUSH
63294: CALL_OW 437
63298: PUSH
63299: LD_INT 1
63301: ARRAY
63302: PUSH
63303: LD_INT 1
63305: ARRAY
63306: EQUAL
63307: PUSH
63308: LD_VAR 0 4
63312: PUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL_OW 437
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PUSH
63327: LD_INT 2
63329: ARRAY
63330: EQUAL
63331: AND
63332: PUSH
63333: LD_VAR 0 5
63337: PUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: CALL_OW 437
63347: PUSH
63348: LD_INT 1
63350: ARRAY
63351: PUSH
63352: LD_INT 3
63354: ARRAY
63355: EQUAL
63356: AND
63357: IFFALSE 63367
// result := true end ;
63359: LD_ADDR_VAR 0 3
63363: PUSH
63364: LD_INT 1
63366: ST_TO_ADDR
// end ;
63367: LD_VAR 0 3
63371: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63372: LD_INT 0
63374: PPUSH
// result := false ;
63375: LD_ADDR_VAR 0 4
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// if GetTaskList ( unit ) then
63383: LD_VAR 0 1
63387: PPUSH
63388: CALL_OW 437
63392: IFFALSE 63475
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63394: LD_STRING M
63396: PUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL_OW 437
63406: PUSH
63407: LD_INT 1
63409: ARRAY
63410: PUSH
63411: LD_INT 1
63413: ARRAY
63414: EQUAL
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_VAR 0 1
63425: PPUSH
63426: CALL_OW 437
63430: PUSH
63431: LD_INT 1
63433: ARRAY
63434: PUSH
63435: LD_INT 2
63437: ARRAY
63438: EQUAL
63439: AND
63440: PUSH
63441: LD_VAR 0 3
63445: PUSH
63446: LD_VAR 0 1
63450: PPUSH
63451: CALL_OW 437
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PUSH
63460: LD_INT 3
63462: ARRAY
63463: EQUAL
63464: AND
63465: IFFALSE 63475
// result := true ;
63467: LD_ADDR_VAR 0 4
63471: PUSH
63472: LD_INT 1
63474: ST_TO_ADDR
// end ; end ;
63475: LD_VAR 0 4
63479: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63480: LD_INT 0
63482: PPUSH
63483: PPUSH
63484: PPUSH
63485: PPUSH
// if not unit or not area then
63486: LD_VAR 0 1
63490: NOT
63491: PUSH
63492: LD_VAR 0 2
63496: NOT
63497: OR
63498: IFFALSE 63502
// exit ;
63500: GO 63666
// tmp := AreaToList ( area , i ) ;
63502: LD_ADDR_VAR 0 6
63506: PUSH
63507: LD_VAR 0 2
63511: PPUSH
63512: LD_VAR 0 5
63516: PPUSH
63517: CALL_OW 517
63521: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63522: LD_ADDR_VAR 0 5
63526: PUSH
63527: DOUBLE
63528: LD_INT 1
63530: DEC
63531: ST_TO_ADDR
63532: LD_VAR 0 6
63536: PUSH
63537: LD_INT 1
63539: ARRAY
63540: PUSH
63541: FOR_TO
63542: IFFALSE 63664
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63544: LD_ADDR_VAR 0 7
63548: PUSH
63549: LD_VAR 0 6
63553: PUSH
63554: LD_INT 1
63556: ARRAY
63557: PUSH
63558: LD_VAR 0 5
63562: ARRAY
63563: PUSH
63564: LD_VAR 0 6
63568: PUSH
63569: LD_INT 2
63571: ARRAY
63572: PUSH
63573: LD_VAR 0 5
63577: ARRAY
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63583: LD_VAR 0 7
63587: PUSH
63588: LD_INT 1
63590: ARRAY
63591: PPUSH
63592: LD_VAR 0 7
63596: PUSH
63597: LD_INT 2
63599: ARRAY
63600: PPUSH
63601: CALL_OW 428
63605: PUSH
63606: LD_INT 0
63608: EQUAL
63609: IFFALSE 63662
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63611: LD_VAR 0 1
63615: PPUSH
63616: LD_VAR 0 7
63620: PUSH
63621: LD_INT 1
63623: ARRAY
63624: PPUSH
63625: LD_VAR 0 7
63629: PUSH
63630: LD_INT 2
63632: ARRAY
63633: PPUSH
63634: LD_VAR 0 3
63638: PPUSH
63639: CALL_OW 48
// result := IsPlaced ( unit ) ;
63643: LD_ADDR_VAR 0 4
63647: PUSH
63648: LD_VAR 0 1
63652: PPUSH
63653: CALL_OW 305
63657: ST_TO_ADDR
// exit ;
63658: POP
63659: POP
63660: GO 63666
// end ; end ;
63662: GO 63541
63664: POP
63665: POP
// end ;
63666: LD_VAR 0 4
63670: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
63675: PPUSH
// if not side or side > 8 then
63676: LD_VAR 0 1
63680: NOT
63681: PUSH
63682: LD_VAR 0 1
63686: PUSH
63687: LD_INT 8
63689: GREATER
63690: OR
63691: IFFALSE 63695
// exit ;
63693: GO 63882
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63695: LD_ADDR_VAR 0 4
63699: PUSH
63700: LD_INT 22
63702: PUSH
63703: LD_VAR 0 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 21
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: CALL_OW 69
63730: ST_TO_ADDR
// if not tmp then
63731: LD_VAR 0 4
63735: NOT
63736: IFFALSE 63740
// exit ;
63738: GO 63882
// enable_addtolog := true ;
63740: LD_ADDR_OWVAR 81
63744: PUSH
63745: LD_INT 1
63747: ST_TO_ADDR
// AddToLog ( [ ) ;
63748: LD_STRING [
63750: PPUSH
63751: CALL_OW 561
// for i in tmp do
63755: LD_ADDR_VAR 0 3
63759: PUSH
63760: LD_VAR 0 4
63764: PUSH
63765: FOR_IN
63766: IFFALSE 63873
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63768: LD_STRING [
63770: PUSH
63771: LD_VAR 0 3
63775: PPUSH
63776: CALL_OW 266
63780: STR
63781: PUSH
63782: LD_STRING , 
63784: STR
63785: PUSH
63786: LD_VAR 0 3
63790: PPUSH
63791: CALL_OW 250
63795: STR
63796: PUSH
63797: LD_STRING , 
63799: STR
63800: PUSH
63801: LD_VAR 0 3
63805: PPUSH
63806: CALL_OW 251
63810: STR
63811: PUSH
63812: LD_STRING , 
63814: STR
63815: PUSH
63816: LD_VAR 0 3
63820: PPUSH
63821: CALL_OW 254
63825: STR
63826: PUSH
63827: LD_STRING , 
63829: STR
63830: PUSH
63831: LD_VAR 0 3
63835: PPUSH
63836: LD_INT 1
63838: PPUSH
63839: CALL_OW 268
63843: STR
63844: PUSH
63845: LD_STRING , 
63847: STR
63848: PUSH
63849: LD_VAR 0 3
63853: PPUSH
63854: LD_INT 2
63856: PPUSH
63857: CALL_OW 268
63861: STR
63862: PUSH
63863: LD_STRING ],
63865: STR
63866: PPUSH
63867: CALL_OW 561
// end ;
63871: GO 63765
63873: POP
63874: POP
// AddToLog ( ]; ) ;
63875: LD_STRING ];
63877: PPUSH
63878: CALL_OW 561
// end ;
63882: LD_VAR 0 2
63886: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63887: LD_INT 0
63889: PPUSH
63890: PPUSH
63891: PPUSH
63892: PPUSH
63893: PPUSH
// if not area or not rate or not max then
63894: LD_VAR 0 1
63898: NOT
63899: PUSH
63900: LD_VAR 0 2
63904: NOT
63905: OR
63906: PUSH
63907: LD_VAR 0 4
63911: NOT
63912: OR
63913: IFFALSE 63917
// exit ;
63915: GO 64109
// while 1 do
63917: LD_INT 1
63919: IFFALSE 64109
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63921: LD_ADDR_VAR 0 9
63925: PUSH
63926: LD_VAR 0 1
63930: PPUSH
63931: LD_INT 1
63933: PPUSH
63934: CALL_OW 287
63938: PUSH
63939: LD_INT 10
63941: MUL
63942: ST_TO_ADDR
// r := rate / 10 ;
63943: LD_ADDR_VAR 0 7
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 10
63955: DIVREAL
63956: ST_TO_ADDR
// time := 1 1$00 ;
63957: LD_ADDR_VAR 0 8
63961: PUSH
63962: LD_INT 2100
63964: ST_TO_ADDR
// if amount < min then
63965: LD_VAR 0 9
63969: PUSH
63970: LD_VAR 0 3
63974: LESS
63975: IFFALSE 63993
// r := r * 2 else
63977: LD_ADDR_VAR 0 7
63981: PUSH
63982: LD_VAR 0 7
63986: PUSH
63987: LD_INT 2
63989: MUL
63990: ST_TO_ADDR
63991: GO 64019
// if amount > max then
63993: LD_VAR 0 9
63997: PUSH
63998: LD_VAR 0 4
64002: GREATER
64003: IFFALSE 64019
// r := r / 2 ;
64005: LD_ADDR_VAR 0 7
64009: PUSH
64010: LD_VAR 0 7
64014: PUSH
64015: LD_INT 2
64017: DIVREAL
64018: ST_TO_ADDR
// time := time / r ;
64019: LD_ADDR_VAR 0 8
64023: PUSH
64024: LD_VAR 0 8
64028: PUSH
64029: LD_VAR 0 7
64033: DIVREAL
64034: ST_TO_ADDR
// if time < 0 then
64035: LD_VAR 0 8
64039: PUSH
64040: LD_INT 0
64042: LESS
64043: IFFALSE 64060
// time := time * - 1 ;
64045: LD_ADDR_VAR 0 8
64049: PUSH
64050: LD_VAR 0 8
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: MUL
64059: ST_TO_ADDR
// wait ( time ) ;
64060: LD_VAR 0 8
64064: PPUSH
64065: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64069: LD_INT 35
64071: PPUSH
64072: LD_INT 875
64074: PPUSH
64075: CALL_OW 12
64079: PPUSH
64080: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64084: LD_INT 1
64086: PPUSH
64087: LD_INT 5
64089: PPUSH
64090: CALL_OW 12
64094: PPUSH
64095: LD_VAR 0 1
64099: PPUSH
64100: LD_INT 1
64102: PPUSH
64103: CALL_OW 55
// end ;
64107: GO 63917
// end ;
64109: LD_VAR 0 5
64113: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64114: LD_INT 0
64116: PPUSH
64117: PPUSH
64118: PPUSH
64119: PPUSH
64120: PPUSH
64121: PPUSH
64122: PPUSH
64123: PPUSH
// if not turrets or not factories then
64124: LD_VAR 0 1
64128: NOT
64129: PUSH
64130: LD_VAR 0 2
64134: NOT
64135: OR
64136: IFFALSE 64140
// exit ;
64138: GO 64447
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64140: LD_ADDR_VAR 0 10
64144: PUSH
64145: LD_INT 5
64147: PUSH
64148: LD_INT 6
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: LD_INT 4
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: PUSH
64168: LD_INT 5
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 24
64182: PUSH
64183: LD_INT 25
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 23
64192: PUSH
64193: LD_INT 27
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 42
64206: PUSH
64207: LD_INT 43
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 44
64216: PUSH
64217: LD_INT 46
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 45
64226: PUSH
64227: LD_INT 47
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: ST_TO_ADDR
// result := [ ] ;
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: EMPTY
64250: ST_TO_ADDR
// for i in turrets do
64251: LD_ADDR_VAR 0 4
64255: PUSH
64256: LD_VAR 0 1
64260: PUSH
64261: FOR_IN
64262: IFFALSE 64445
// begin nat := GetNation ( i ) ;
64264: LD_ADDR_VAR 0 7
64268: PUSH
64269: LD_VAR 0 4
64273: PPUSH
64274: CALL_OW 248
64278: ST_TO_ADDR
// weapon := 0 ;
64279: LD_ADDR_VAR 0 8
64283: PUSH
64284: LD_INT 0
64286: ST_TO_ADDR
// if not nat then
64287: LD_VAR 0 7
64291: NOT
64292: IFFALSE 64296
// continue ;
64294: GO 64261
// for j in list [ nat ] do
64296: LD_ADDR_VAR 0 5
64300: PUSH
64301: LD_VAR 0 10
64305: PUSH
64306: LD_VAR 0 7
64310: ARRAY
64311: PUSH
64312: FOR_IN
64313: IFFALSE 64354
// if GetBWeapon ( i ) = j [ 1 ] then
64315: LD_VAR 0 4
64319: PPUSH
64320: CALL_OW 269
64324: PUSH
64325: LD_VAR 0 5
64329: PUSH
64330: LD_INT 1
64332: ARRAY
64333: EQUAL
64334: IFFALSE 64352
// begin weapon := j [ 2 ] ;
64336: LD_ADDR_VAR 0 8
64340: PUSH
64341: LD_VAR 0 5
64345: PUSH
64346: LD_INT 2
64348: ARRAY
64349: ST_TO_ADDR
// break ;
64350: GO 64354
// end ;
64352: GO 64312
64354: POP
64355: POP
// if not weapon then
64356: LD_VAR 0 8
64360: NOT
64361: IFFALSE 64365
// continue ;
64363: GO 64261
// for k in factories do
64365: LD_ADDR_VAR 0 6
64369: PUSH
64370: LD_VAR 0 2
64374: PUSH
64375: FOR_IN
64376: IFFALSE 64441
// begin weapons := AvailableWeaponList ( k ) ;
64378: LD_ADDR_VAR 0 9
64382: PUSH
64383: LD_VAR 0 6
64387: PPUSH
64388: CALL_OW 478
64392: ST_TO_ADDR
// if not weapons then
64393: LD_VAR 0 9
64397: NOT
64398: IFFALSE 64402
// continue ;
64400: GO 64375
// if weapon in weapons then
64402: LD_VAR 0 8
64406: PUSH
64407: LD_VAR 0 9
64411: IN
64412: IFFALSE 64439
// begin result := [ i , weapon ] ;
64414: LD_ADDR_VAR 0 3
64418: PUSH
64419: LD_VAR 0 4
64423: PUSH
64424: LD_VAR 0 8
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// exit ;
64433: POP
64434: POP
64435: POP
64436: POP
64437: GO 64447
// end ; end ;
64439: GO 64375
64441: POP
64442: POP
// end ;
64443: GO 64261
64445: POP
64446: POP
// end ;
64447: LD_VAR 0 3
64451: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64452: LD_INT 0
64454: PPUSH
// if not side or side > 8 then
64455: LD_VAR 0 3
64459: NOT
64460: PUSH
64461: LD_VAR 0 3
64465: PUSH
64466: LD_INT 8
64468: GREATER
64469: OR
64470: IFFALSE 64474
// exit ;
64472: GO 64533
// if not range then
64474: LD_VAR 0 4
64478: NOT
64479: IFFALSE 64490
// range := - 12 ;
64481: LD_ADDR_VAR 0 4
64485: PUSH
64486: LD_INT 12
64488: NEG
64489: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64490: LD_VAR 0 1
64494: PPUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: LD_VAR 0 3
64504: PPUSH
64505: LD_VAR 0 4
64509: PPUSH
64510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64514: LD_VAR 0 1
64518: PPUSH
64519: LD_VAR 0 2
64523: PPUSH
64524: LD_VAR 0 3
64528: PPUSH
64529: CALL_OW 331
// end ;
64533: LD_VAR 0 5
64537: RET
// export function Video ( mode ) ; begin
64538: LD_INT 0
64540: PPUSH
// ingame_video = mode ;
64541: LD_ADDR_OWVAR 52
64545: PUSH
64546: LD_VAR 0 1
64550: ST_TO_ADDR
// interface_hidden = mode ;
64551: LD_ADDR_OWVAR 54
64555: PUSH
64556: LD_VAR 0 1
64560: ST_TO_ADDR
// end ;
64561: LD_VAR 0 2
64565: RET
// export function Join ( array , element ) ; begin
64566: LD_INT 0
64568: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64569: LD_ADDR_VAR 0 3
64573: PUSH
64574: LD_VAR 0 1
64578: PPUSH
64579: LD_VAR 0 1
64583: PUSH
64584: LD_INT 1
64586: PLUS
64587: PPUSH
64588: LD_VAR 0 2
64592: PPUSH
64593: CALL_OW 1
64597: ST_TO_ADDR
// end ;
64598: LD_VAR 0 3
64602: RET
// export function JoinUnion ( array , element ) ; begin
64603: LD_INT 0
64605: PPUSH
// result := array union element ;
64606: LD_ADDR_VAR 0 3
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_VAR 0 2
64620: UNION
64621: ST_TO_ADDR
// end ;
64622: LD_VAR 0 3
64626: RET
// export function GetBehemoths ( side ) ; begin
64627: LD_INT 0
64629: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64630: LD_ADDR_VAR 0 2
64634: PUSH
64635: LD_INT 22
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 31
64649: PUSH
64650: LD_INT 25
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PPUSH
64661: CALL_OW 69
64665: ST_TO_ADDR
// end ;
64666: LD_VAR 0 2
64670: RET
// export function Shuffle ( array ) ; var i , index ; begin
64671: LD_INT 0
64673: PPUSH
64674: PPUSH
64675: PPUSH
// result := [ ] ;
64676: LD_ADDR_VAR 0 2
64680: PUSH
64681: EMPTY
64682: ST_TO_ADDR
// if not array then
64683: LD_VAR 0 1
64687: NOT
64688: IFFALSE 64692
// exit ;
64690: GO 64791
// Randomize ;
64692: CALL_OW 10
// for i = array downto 1 do
64696: LD_ADDR_VAR 0 3
64700: PUSH
64701: DOUBLE
64702: LD_VAR 0 1
64706: INC
64707: ST_TO_ADDR
64708: LD_INT 1
64710: PUSH
64711: FOR_DOWNTO
64712: IFFALSE 64789
// begin index := rand ( 1 , array ) ;
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: LD_INT 1
64721: PPUSH
64722: LD_VAR 0 1
64726: PPUSH
64727: CALL_OW 12
64731: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64732: LD_ADDR_VAR 0 2
64736: PUSH
64737: LD_VAR 0 2
64741: PPUSH
64742: LD_VAR 0 2
64746: PUSH
64747: LD_INT 1
64749: PLUS
64750: PPUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_VAR 0 4
64760: ARRAY
64761: PPUSH
64762: CALL_OW 2
64766: ST_TO_ADDR
// array := Delete ( array , index ) ;
64767: LD_ADDR_VAR 0 1
64771: PUSH
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 4
64781: PPUSH
64782: CALL_OW 3
64786: ST_TO_ADDR
// end ;
64787: GO 64711
64789: POP
64790: POP
// end ;
64791: LD_VAR 0 2
64795: RET
// export function GetBaseMaterials ( base ) ; begin
64796: LD_INT 0
64798: PPUSH
// result := [ 0 , 0 , 0 ] ;
64799: LD_ADDR_VAR 0 2
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// if not base then
64818: LD_VAR 0 1
64822: NOT
64823: IFFALSE 64827
// exit ;
64825: GO 64876
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64827: LD_ADDR_VAR 0 2
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: LD_INT 1
64839: PPUSH
64840: CALL_OW 275
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_INT 2
64852: PPUSH
64853: CALL_OW 275
64857: PUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: LD_INT 3
64865: PPUSH
64866: CALL_OW 275
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: ST_TO_ADDR
// end ;
64876: LD_VAR 0 2
64880: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64881: LD_INT 0
64883: PPUSH
64884: PPUSH
// result := array ;
64885: LD_ADDR_VAR 0 3
64889: PUSH
64890: LD_VAR 0 1
64894: ST_TO_ADDR
// if size > 0 then
64895: LD_VAR 0 2
64899: PUSH
64900: LD_INT 0
64902: GREATER
64903: IFFALSE 64949
// for i := array downto size do
64905: LD_ADDR_VAR 0 4
64909: PUSH
64910: DOUBLE
64911: LD_VAR 0 1
64915: INC
64916: ST_TO_ADDR
64917: LD_VAR 0 2
64921: PUSH
64922: FOR_DOWNTO
64923: IFFALSE 64947
// result := Delete ( result , result ) ;
64925: LD_ADDR_VAR 0 3
64929: PUSH
64930: LD_VAR 0 3
64934: PPUSH
64935: LD_VAR 0 3
64939: PPUSH
64940: CALL_OW 3
64944: ST_TO_ADDR
64945: GO 64922
64947: POP
64948: POP
// end ;
64949: LD_VAR 0 3
64953: RET
// export function ComExit ( unit ) ; var tmp ; begin
64954: LD_INT 0
64956: PPUSH
64957: PPUSH
// if not IsInUnit ( unit ) then
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 310
64967: NOT
64968: IFFALSE 64972
// exit ;
64970: GO 65032
// tmp := IsInUnit ( unit ) ;
64972: LD_ADDR_VAR 0 3
64976: PUSH
64977: LD_VAR 0 1
64981: PPUSH
64982: CALL_OW 310
64986: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64987: LD_VAR 0 3
64991: PPUSH
64992: CALL_OW 247
64996: PUSH
64997: LD_INT 2
64999: EQUAL
65000: IFFALSE 65013
// ComExitVehicle ( unit ) else
65002: LD_VAR 0 1
65006: PPUSH
65007: CALL_OW 121
65011: GO 65022
// ComExitBuilding ( unit ) ;
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 122
// result := tmp ;
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_VAR 0 3
65031: ST_TO_ADDR
// end ;
65032: LD_VAR 0 2
65036: RET
// export function ComExitAll ( units ) ; var i ; begin
65037: LD_INT 0
65039: PPUSH
65040: PPUSH
// if not units then
65041: LD_VAR 0 1
65045: NOT
65046: IFFALSE 65050
// exit ;
65048: GO 65076
// for i in units do
65050: LD_ADDR_VAR 0 3
65054: PUSH
65055: LD_VAR 0 1
65059: PUSH
65060: FOR_IN
65061: IFFALSE 65074
// ComExit ( i ) ;
65063: LD_VAR 0 3
65067: PPUSH
65068: CALL 64954 0 1
65072: GO 65060
65074: POP
65075: POP
// end ;
65076: LD_VAR 0 2
65080: RET
// export function ResetHc ; begin
65081: LD_INT 0
65083: PPUSH
// InitHc ;
65084: CALL_OW 19
// hc_importance := 0 ;
65088: LD_ADDR_OWVAR 32
65092: PUSH
65093: LD_INT 0
65095: ST_TO_ADDR
// end ;
65096: LD_VAR 0 1
65100: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65101: LD_INT 0
65103: PPUSH
65104: PPUSH
65105: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65106: LD_ADDR_VAR 0 6
65110: PUSH
65111: LD_VAR 0 1
65115: PUSH
65116: LD_VAR 0 3
65120: PLUS
65121: PUSH
65122: LD_INT 2
65124: DIV
65125: ST_TO_ADDR
// if _x < 0 then
65126: LD_VAR 0 6
65130: PUSH
65131: LD_INT 0
65133: LESS
65134: IFFALSE 65151
// _x := _x * - 1 ;
65136: LD_ADDR_VAR 0 6
65140: PUSH
65141: LD_VAR 0 6
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: MUL
65150: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65151: LD_ADDR_VAR 0 7
65155: PUSH
65156: LD_VAR 0 2
65160: PUSH
65161: LD_VAR 0 4
65165: PLUS
65166: PUSH
65167: LD_INT 2
65169: DIV
65170: ST_TO_ADDR
// if _y < 0 then
65171: LD_VAR 0 7
65175: PUSH
65176: LD_INT 0
65178: LESS
65179: IFFALSE 65196
// _y := _y * - 1 ;
65181: LD_ADDR_VAR 0 7
65185: PUSH
65186: LD_VAR 0 7
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: MUL
65195: ST_TO_ADDR
// result := [ _x , _y ] ;
65196: LD_ADDR_VAR 0 5
65200: PUSH
65201: LD_VAR 0 6
65205: PUSH
65206: LD_VAR 0 7
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: ST_TO_ADDR
// end ;
65215: LD_VAR 0 5
65219: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65220: LD_INT 0
65222: PPUSH
65223: PPUSH
65224: PPUSH
65225: PPUSH
// task := GetTaskList ( unit ) ;
65226: LD_ADDR_VAR 0 7
65230: PUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: CALL_OW 437
65240: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65241: LD_VAR 0 7
65245: NOT
65246: PUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: LD_VAR 0 2
65256: PPUSH
65257: CALL_OW 308
65261: NOT
65262: AND
65263: IFFALSE 65267
// exit ;
65265: GO 65385
// if IsInArea ( unit , area ) then
65267: LD_VAR 0 1
65271: PPUSH
65272: LD_VAR 0 2
65276: PPUSH
65277: CALL_OW 308
65281: IFFALSE 65299
// begin ComMoveToArea ( unit , goAway ) ;
65283: LD_VAR 0 1
65287: PPUSH
65288: LD_VAR 0 3
65292: PPUSH
65293: CALL_OW 113
// exit ;
65297: GO 65385
// end ; if task [ 1 ] [ 1 ] <> M then
65299: LD_VAR 0 7
65303: PUSH
65304: LD_INT 1
65306: ARRAY
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: PUSH
65312: LD_STRING M
65314: NONEQUAL
65315: IFFALSE 65319
// exit ;
65317: GO 65385
// x := task [ 1 ] [ 2 ] ;
65319: LD_ADDR_VAR 0 5
65323: PUSH
65324: LD_VAR 0 7
65328: PUSH
65329: LD_INT 1
65331: ARRAY
65332: PUSH
65333: LD_INT 2
65335: ARRAY
65336: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65337: LD_ADDR_VAR 0 6
65341: PUSH
65342: LD_VAR 0 7
65346: PUSH
65347: LD_INT 1
65349: ARRAY
65350: PUSH
65351: LD_INT 3
65353: ARRAY
65354: ST_TO_ADDR
// if InArea ( x , y , area ) then
65355: LD_VAR 0 5
65359: PPUSH
65360: LD_VAR 0 6
65364: PPUSH
65365: LD_VAR 0 2
65369: PPUSH
65370: CALL_OW 309
65374: IFFALSE 65385
// ComStop ( unit ) ;
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 141
// end ;
65385: LD_VAR 0 4
65389: RET
// export function Abs ( value ) ; begin
65390: LD_INT 0
65392: PPUSH
// result := value ;
65393: LD_ADDR_VAR 0 2
65397: PUSH
65398: LD_VAR 0 1
65402: ST_TO_ADDR
// if value < 0 then
65403: LD_VAR 0 1
65407: PUSH
65408: LD_INT 0
65410: LESS
65411: IFFALSE 65428
// result := value * - 1 ;
65413: LD_ADDR_VAR 0 2
65417: PUSH
65418: LD_VAR 0 1
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: MUL
65427: ST_TO_ADDR
// end ;
65428: LD_VAR 0 2
65432: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65433: LD_INT 0
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
// if not unit or not building then
65443: LD_VAR 0 1
65447: NOT
65448: PUSH
65449: LD_VAR 0 2
65453: NOT
65454: OR
65455: IFFALSE 65459
// exit ;
65457: GO 65685
// x := GetX ( building ) ;
65459: LD_ADDR_VAR 0 4
65463: PUSH
65464: LD_VAR 0 2
65468: PPUSH
65469: CALL_OW 250
65473: ST_TO_ADDR
// y := GetY ( building ) ;
65474: LD_ADDR_VAR 0 6
65478: PUSH
65479: LD_VAR 0 2
65483: PPUSH
65484: CALL_OW 251
65488: ST_TO_ADDR
// d := GetDir ( building ) ;
65489: LD_ADDR_VAR 0 8
65493: PUSH
65494: LD_VAR 0 2
65498: PPUSH
65499: CALL_OW 254
65503: ST_TO_ADDR
// r := 4 ;
65504: LD_ADDR_VAR 0 9
65508: PUSH
65509: LD_INT 4
65511: ST_TO_ADDR
// for i := 1 to 5 do
65512: LD_ADDR_VAR 0 10
65516: PUSH
65517: DOUBLE
65518: LD_INT 1
65520: DEC
65521: ST_TO_ADDR
65522: LD_INT 5
65524: PUSH
65525: FOR_TO
65526: IFFALSE 65683
// begin _x := ShiftX ( x , d , r + i ) ;
65528: LD_ADDR_VAR 0 5
65532: PUSH
65533: LD_VAR 0 4
65537: PPUSH
65538: LD_VAR 0 8
65542: PPUSH
65543: LD_VAR 0 9
65547: PUSH
65548: LD_VAR 0 10
65552: PLUS
65553: PPUSH
65554: CALL_OW 272
65558: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65559: LD_ADDR_VAR 0 7
65563: PUSH
65564: LD_VAR 0 6
65568: PPUSH
65569: LD_VAR 0 8
65573: PPUSH
65574: LD_VAR 0 9
65578: PUSH
65579: LD_VAR 0 10
65583: PLUS
65584: PPUSH
65585: CALL_OW 273
65589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65590: LD_VAR 0 5
65594: PPUSH
65595: LD_VAR 0 7
65599: PPUSH
65600: CALL_OW 488
65604: PUSH
65605: LD_VAR 0 5
65609: PPUSH
65610: LD_VAR 0 7
65614: PPUSH
65615: CALL_OW 428
65619: PPUSH
65620: CALL_OW 247
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: IN
65635: NOT
65636: AND
65637: IFFALSE 65681
// begin ComMoveXY ( unit , _x , _y ) ;
65639: LD_VAR 0 1
65643: PPUSH
65644: LD_VAR 0 5
65648: PPUSH
65649: LD_VAR 0 7
65653: PPUSH
65654: CALL_OW 111
// result := [ _x , _y ] ;
65658: LD_ADDR_VAR 0 3
65662: PUSH
65663: LD_VAR 0 5
65667: PUSH
65668: LD_VAR 0 7
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// exit ;
65677: POP
65678: POP
65679: GO 65685
// end ; end ;
65681: GO 65525
65683: POP
65684: POP
// end ;
65685: LD_VAR 0 3
65689: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
// result := 0 ;
65695: LD_ADDR_VAR 0 3
65699: PUSH
65700: LD_INT 0
65702: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65703: LD_VAR 0 1
65707: PUSH
65708: LD_INT 0
65710: LESS
65711: PUSH
65712: LD_VAR 0 1
65716: PUSH
65717: LD_INT 8
65719: GREATER
65720: OR
65721: PUSH
65722: LD_VAR 0 2
65726: PUSH
65727: LD_INT 0
65729: LESS
65730: OR
65731: PUSH
65732: LD_VAR 0 2
65736: PUSH
65737: LD_INT 8
65739: GREATER
65740: OR
65741: IFFALSE 65745
// exit ;
65743: GO 65820
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65745: LD_ADDR_VAR 0 4
65749: PUSH
65750: LD_INT 22
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PPUSH
65762: CALL_OW 69
65766: PUSH
65767: FOR_IN
65768: IFFALSE 65818
// begin un := UnitShoot ( i ) ;
65770: LD_ADDR_VAR 0 5
65774: PUSH
65775: LD_VAR 0 4
65779: PPUSH
65780: CALL_OW 504
65784: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65785: LD_VAR 0 5
65789: PPUSH
65790: CALL_OW 255
65794: PUSH
65795: LD_VAR 0 1
65799: EQUAL
65800: IFFALSE 65816
// begin result := un ;
65802: LD_ADDR_VAR 0 3
65806: PUSH
65807: LD_VAR 0 5
65811: ST_TO_ADDR
// exit ;
65812: POP
65813: POP
65814: GO 65820
// end ; end ;
65816: GO 65767
65818: POP
65819: POP
// end ;
65820: LD_VAR 0 3
65824: RET
// export function GetCargoBay ( units ) ; begin
65825: LD_INT 0
65827: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65828: LD_ADDR_VAR 0 2
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: LD_INT 2
65840: PUSH
65841: LD_INT 34
65843: PUSH
65844: LD_INT 12
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 34
65853: PUSH
65854: LD_INT 51
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 34
65863: PUSH
65864: LD_INT 32
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 34
65873: PUSH
65874: LD_EXP 104
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: PPUSH
65890: CALL_OW 72
65894: ST_TO_ADDR
// end ;
65895: LD_VAR 0 2
65899: RET
