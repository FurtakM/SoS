// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 61813 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 105
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 250
11042: EQUAL
11043: PUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: CALL_OW 264
11053: PUSH
11054: LD_EXP 108
11058: EQUAL
11059: AND
11060: IFFALSE 11081
// MinerPlaceMine ( unit , x , y ) ;
11062: LD_VAR 0 2
11066: PPUSH
11067: LD_VAR 0 4
11071: PPUSH
11072: LD_VAR 0 5
11076: PPUSH
11077: CALL 13422 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11081: LD_VAR 0 1
11085: PUSH
11086: LD_INT 251
11088: EQUAL
11089: PUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 264
11099: PUSH
11100: LD_EXP 108
11104: EQUAL
11105: AND
11106: IFFALSE 11127
// MinerDetonateMine ( unit , x , y ) ;
11108: LD_VAR 0 2
11112: PPUSH
11113: LD_VAR 0 4
11117: PPUSH
11118: LD_VAR 0 5
11122: PPUSH
11123: CALL 13699 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11127: LD_VAR 0 1
11131: PUSH
11132: LD_INT 252
11134: EQUAL
11135: PUSH
11136: LD_VAR 0 2
11140: PPUSH
11141: CALL_OW 264
11145: PUSH
11146: LD_EXP 108
11150: EQUAL
11151: AND
11152: IFFALSE 11173
// MinerCreateMinefield ( unit , x , y ) ;
11154: LD_VAR 0 2
11158: PPUSH
11159: LD_VAR 0 4
11163: PPUSH
11164: LD_VAR 0 5
11168: PPUSH
11169: CALL 14116 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11173: LD_VAR 0 1
11177: PUSH
11178: LD_INT 253
11180: EQUAL
11181: PUSH
11182: LD_VAR 0 2
11186: PPUSH
11187: CALL_OW 257
11191: PUSH
11192: LD_INT 5
11194: EQUAL
11195: AND
11196: IFFALSE 11217
// ComBinocular ( unit , x , y ) ;
11198: LD_VAR 0 2
11202: PPUSH
11203: LD_VAR 0 4
11207: PPUSH
11208: LD_VAR 0 5
11212: PPUSH
11213: CALL 14487 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11217: LD_VAR 0 1
11221: PUSH
11222: LD_INT 254
11224: EQUAL
11225: PUSH
11226: LD_VAR 0 2
11230: PPUSH
11231: CALL_OW 264
11235: PUSH
11236: LD_EXP 103
11240: EQUAL
11241: AND
11242: PUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: CALL_OW 263
11252: PUSH
11253: LD_INT 3
11255: EQUAL
11256: AND
11257: IFFALSE 11273
// HackDestroyVehicle ( unit , selectedUnit ) ;
11259: LD_VAR 0 2
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: CALL 12782 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11273: LD_VAR 0 1
11277: PUSH
11278: LD_INT 255
11280: EQUAL
11281: PUSH
11282: LD_VAR 0 2
11286: PPUSH
11287: CALL_OW 264
11291: PUSH
11292: LD_INT 14
11294: PUSH
11295: LD_INT 53
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: IN
11302: AND
11303: PUSH
11304: LD_VAR 0 4
11308: PPUSH
11309: LD_VAR 0 5
11313: PPUSH
11314: CALL_OW 488
11318: AND
11319: IFFALSE 11343
// CutTreeXYR ( unit , x , y , 12 ) ;
11321: LD_VAR 0 2
11325: PPUSH
11326: LD_VAR 0 4
11330: PPUSH
11331: LD_VAR 0 5
11335: PPUSH
11336: LD_INT 12
11338: PPUSH
11339: CALL 11348 0 4
// end ;
11343: LD_VAR 0 6
11347: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11348: LD_INT 0
11350: PPUSH
11351: PPUSH
11352: PPUSH
11353: PPUSH
11354: PPUSH
11355: PPUSH
11356: PPUSH
11357: PPUSH
11358: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11359: LD_VAR 0 1
11363: NOT
11364: PUSH
11365: LD_VAR 0 2
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: CALL_OW 488
11379: NOT
11380: OR
11381: PUSH
11382: LD_VAR 0 4
11386: NOT
11387: OR
11388: IFFALSE 11392
// exit ;
11390: GO 11732
// list := [ ] ;
11392: LD_ADDR_VAR 0 13
11396: PUSH
11397: EMPTY
11398: ST_TO_ADDR
// if x - r < 0 then
11399: LD_VAR 0 2
11403: PUSH
11404: LD_VAR 0 4
11408: MINUS
11409: PUSH
11410: LD_INT 0
11412: LESS
11413: IFFALSE 11425
// min_x := 0 else
11415: LD_ADDR_VAR 0 7
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
11423: GO 11441
// min_x := x - r ;
11425: LD_ADDR_VAR 0 7
11429: PUSH
11430: LD_VAR 0 2
11434: PUSH
11435: LD_VAR 0 4
11439: MINUS
11440: ST_TO_ADDR
// if y - r < 0 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_VAR 0 4
11450: MINUS
11451: PUSH
11452: LD_INT 0
11454: LESS
11455: IFFALSE 11467
// min_y := 0 else
11457: LD_ADDR_VAR 0 8
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
11465: GO 11483
// min_y := y - r ;
11467: LD_ADDR_VAR 0 8
11471: PUSH
11472: LD_VAR 0 3
11476: PUSH
11477: LD_VAR 0 4
11481: MINUS
11482: ST_TO_ADDR
// max_x := x + r ;
11483: LD_ADDR_VAR 0 9
11487: PUSH
11488: LD_VAR 0 2
11492: PUSH
11493: LD_VAR 0 4
11497: PLUS
11498: ST_TO_ADDR
// max_y := y + r ;
11499: LD_ADDR_VAR 0 10
11503: PUSH
11504: LD_VAR 0 3
11508: PUSH
11509: LD_VAR 0 4
11513: PLUS
11514: ST_TO_ADDR
// for _x = min_x to max_x do
11515: LD_ADDR_VAR 0 11
11519: PUSH
11520: DOUBLE
11521: LD_VAR 0 7
11525: DEC
11526: ST_TO_ADDR
11527: LD_VAR 0 9
11531: PUSH
11532: FOR_TO
11533: IFFALSE 11650
// for _y = min_y to max_y do
11535: LD_ADDR_VAR 0 12
11539: PUSH
11540: DOUBLE
11541: LD_VAR 0 8
11545: DEC
11546: ST_TO_ADDR
11547: LD_VAR 0 10
11551: PUSH
11552: FOR_TO
11553: IFFALSE 11646
// begin if not ValidHex ( _x , _y ) then
11555: LD_VAR 0 11
11559: PPUSH
11560: LD_VAR 0 12
11564: PPUSH
11565: CALL_OW 488
11569: NOT
11570: IFFALSE 11574
// continue ;
11572: GO 11552
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11574: LD_VAR 0 11
11578: PPUSH
11579: LD_VAR 0 12
11583: PPUSH
11584: CALL_OW 351
11588: PUSH
11589: LD_VAR 0 11
11593: PPUSH
11594: LD_VAR 0 12
11598: PPUSH
11599: CALL_OW 554
11603: AND
11604: IFFALSE 11644
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11606: LD_ADDR_VAR 0 13
11610: PUSH
11611: LD_VAR 0 13
11615: PPUSH
11616: LD_VAR 0 13
11620: PUSH
11621: LD_INT 1
11623: PLUS
11624: PPUSH
11625: LD_VAR 0 11
11629: PUSH
11630: LD_VAR 0 12
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL_OW 2
11643: ST_TO_ADDR
// end ;
11644: GO 11552
11646: POP
11647: POP
11648: GO 11532
11650: POP
11651: POP
// if not list then
11652: LD_VAR 0 13
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11732
// for i in list do
11661: LD_ADDR_VAR 0 6
11665: PUSH
11666: LD_VAR 0 13
11670: PUSH
11671: FOR_IN
11672: IFFALSE 11730
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_STRING M
11681: PUSH
11682: LD_VAR 0 6
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PUSH
11691: LD_VAR 0 6
11695: PUSH
11696: LD_INT 2
11698: ARRAY
11699: PUSH
11700: LD_INT 0
11702: PUSH
11703: LD_INT 0
11705: PUSH
11706: LD_INT 0
11708: PUSH
11709: LD_INT 0
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: PPUSH
11724: CALL_OW 447
11728: GO 11671
11730: POP
11731: POP
// end ;
11732: LD_VAR 0 5
11736: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11737: LD_EXP 36
11741: NOT
11742: IFFALSE 11792
11744: GO 11746
11746: DISABLE
// begin initHack := true ;
11747: LD_ADDR_EXP 36
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// hackTanks := [ ] ;
11755: LD_ADDR_EXP 37
11759: PUSH
11760: EMPTY
11761: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11762: LD_ADDR_EXP 38
11766: PUSH
11767: EMPTY
11768: ST_TO_ADDR
// hackLimit := 3 ;
11769: LD_ADDR_EXP 39
11773: PUSH
11774: LD_INT 3
11776: ST_TO_ADDR
// hackDist := 12 ;
11777: LD_ADDR_EXP 40
11781: PUSH
11782: LD_INT 12
11784: ST_TO_ADDR
// hackCounter := [ ] ;
11785: LD_ADDR_EXP 41
11789: PUSH
11790: EMPTY
11791: ST_TO_ADDR
// end ;
11792: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11793: LD_EXP 36
11797: PUSH
11798: LD_INT 34
11800: PUSH
11801: LD_EXP 103
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: AND
11815: IFFALSE 12070
11817: GO 11819
11819: DISABLE
11820: LD_INT 0
11822: PPUSH
11823: PPUSH
// begin enable ;
11824: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11825: LD_ADDR_VAR 0 1
11829: PUSH
11830: LD_INT 34
11832: PUSH
11833: LD_EXP 103
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 69
11846: PUSH
11847: FOR_IN
11848: IFFALSE 12068
// begin if not i in hackTanks then
11850: LD_VAR 0 1
11854: PUSH
11855: LD_EXP 37
11859: IN
11860: NOT
11861: IFFALSE 11944
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11863: LD_ADDR_EXP 37
11867: PUSH
11868: LD_EXP 37
11872: PPUSH
11873: LD_EXP 37
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: PPUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 1
11891: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11892: LD_ADDR_EXP 38
11896: PUSH
11897: LD_EXP 38
11901: PPUSH
11902: LD_EXP 38
11906: PUSH
11907: LD_INT 1
11909: PLUS
11910: PPUSH
11911: EMPTY
11912: PPUSH
11913: CALL_OW 1
11917: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11918: LD_ADDR_EXP 41
11922: PUSH
11923: LD_EXP 41
11927: PPUSH
11928: LD_EXP 41
11932: PUSH
11933: LD_INT 1
11935: PLUS
11936: PPUSH
11937: EMPTY
11938: PPUSH
11939: CALL_OW 1
11943: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11944: LD_VAR 0 1
11948: PPUSH
11949: CALL_OW 302
11953: NOT
11954: IFFALSE 11967
// begin HackUnlinkAll ( i ) ;
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL 12073 0 1
// continue ;
11965: GO 11847
// end ; HackCheckCapturedStatus ( i ) ;
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL 12516 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11976: LD_ADDR_VAR 0 2
11980: PUSH
11981: LD_INT 81
11983: PUSH
11984: LD_VAR 0 1
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 33
12000: PUSH
12001: LD_INT 3
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 91
12010: PUSH
12011: LD_VAR 0 1
12015: PUSH
12016: LD_EXP 40
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 50
12028: PUSH
12029: EMPTY
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 2
12047: NOT
12048: IFFALSE 12052
// continue ;
12050: GO 11847
// HackLink ( i , tmp ) ;
12052: LD_VAR 0 1
12056: PPUSH
12057: LD_VAR 0 2
12061: PPUSH
12062: CALL 12209 0 2
// end ;
12066: GO 11847
12068: POP
12069: POP
// end ;
12070: PPOPN 2
12072: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12073: LD_INT 0
12075: PPUSH
12076: PPUSH
12077: PPUSH
// if not hack in hackTanks then
12078: LD_VAR 0 1
12082: PUSH
12083: LD_EXP 37
12087: IN
12088: NOT
12089: IFFALSE 12093
// exit ;
12091: GO 12204
// index := GetElementIndex ( hackTanks , hack ) ;
12093: LD_ADDR_VAR 0 4
12097: PUSH
12098: LD_EXP 37
12102: PPUSH
12103: LD_VAR 0 1
12107: PPUSH
12108: CALL 32949 0 2
12112: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12113: LD_EXP 38
12117: PUSH
12118: LD_VAR 0 4
12122: ARRAY
12123: IFFALSE 12204
// begin for i in hackTanksCaptured [ index ] do
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_EXP 38
12134: PUSH
12135: LD_VAR 0 4
12139: ARRAY
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12168
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 1
12151: ARRAY
12152: PPUSH
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 2
12160: ARRAY
12161: PPUSH
12162: CALL_OW 235
12166: GO 12141
12168: POP
12169: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12170: LD_ADDR_EXP 38
12174: PUSH
12175: LD_EXP 38
12179: PPUSH
12180: LD_VAR 0 4
12184: PPUSH
12185: EMPTY
12186: PPUSH
12187: CALL_OW 1
12191: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12192: LD_VAR 0 1
12196: PPUSH
12197: LD_INT 0
12199: PPUSH
12200: CALL_OW 505
// end ; end ;
12204: LD_VAR 0 2
12208: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12209: LD_INT 0
12211: PPUSH
12212: PPUSH
12213: PPUSH
// if not hack in hackTanks or not vehicles then
12214: LD_VAR 0 1
12218: PUSH
12219: LD_EXP 37
12223: IN
12224: NOT
12225: PUSH
12226: LD_VAR 0 2
12230: NOT
12231: OR
12232: IFFALSE 12236
// exit ;
12234: GO 12511
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12236: LD_ADDR_VAR 0 2
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: LD_VAR 0 2
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL 33599 0 4
12261: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12262: LD_ADDR_VAR 0 5
12266: PUSH
12267: LD_EXP 37
12271: PPUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL 32949 0 2
12281: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12282: LD_EXP 38
12286: PUSH
12287: LD_VAR 0 5
12291: ARRAY
12292: PUSH
12293: LD_EXP 39
12297: LESS
12298: IFFALSE 12487
// begin for i := 1 to vehicles do
12300: LD_ADDR_VAR 0 4
12304: PUSH
12305: DOUBLE
12306: LD_INT 1
12308: DEC
12309: ST_TO_ADDR
12310: LD_VAR 0 2
12314: PUSH
12315: FOR_TO
12316: IFFALSE 12485
// begin if hackTanksCaptured [ index ] = hackLimit then
12318: LD_EXP 38
12322: PUSH
12323: LD_VAR 0 5
12327: ARRAY
12328: PUSH
12329: LD_EXP 39
12333: EQUAL
12334: IFFALSE 12338
// break ;
12336: GO 12485
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12338: LD_ADDR_EXP 41
12342: PUSH
12343: LD_EXP 41
12347: PPUSH
12348: LD_VAR 0 5
12352: PPUSH
12353: LD_EXP 41
12357: PUSH
12358: LD_VAR 0 5
12362: ARRAY
12363: PUSH
12364: LD_INT 1
12366: PLUS
12367: PPUSH
12368: CALL_OW 1
12372: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12373: LD_ADDR_EXP 38
12377: PUSH
12378: LD_EXP 38
12382: PPUSH
12383: LD_VAR 0 5
12387: PUSH
12388: LD_EXP 38
12392: PUSH
12393: LD_VAR 0 5
12397: ARRAY
12398: PUSH
12399: LD_INT 1
12401: PLUS
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: LD_VAR 0 2
12411: PUSH
12412: LD_VAR 0 4
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 2
12422: PUSH
12423: LD_VAR 0 4
12427: ARRAY
12428: PPUSH
12429: CALL_OW 255
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL 33164 0 3
12442: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12443: LD_VAR 0 2
12447: PUSH
12448: LD_VAR 0 4
12452: ARRAY
12453: PPUSH
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 255
12463: PPUSH
12464: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12468: LD_VAR 0 2
12472: PUSH
12473: LD_VAR 0 4
12477: ARRAY
12478: PPUSH
12479: CALL_OW 141
// end ;
12483: GO 12315
12485: POP
12486: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12487: LD_VAR 0 1
12491: PPUSH
12492: LD_EXP 38
12496: PUSH
12497: LD_VAR 0 5
12501: ARRAY
12502: PUSH
12503: LD_INT 0
12505: PLUS
12506: PPUSH
12507: CALL_OW 505
// end ;
12511: LD_VAR 0 3
12515: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12516: LD_INT 0
12518: PPUSH
12519: PPUSH
12520: PPUSH
12521: PPUSH
// if not hack in hackTanks then
12522: LD_VAR 0 1
12526: PUSH
12527: LD_EXP 37
12531: IN
12532: NOT
12533: IFFALSE 12537
// exit ;
12535: GO 12777
// index := GetElementIndex ( hackTanks , hack ) ;
12537: LD_ADDR_VAR 0 4
12541: PUSH
12542: LD_EXP 37
12546: PPUSH
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL 32949 0 2
12556: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12557: LD_ADDR_VAR 0 3
12561: PUSH
12562: DOUBLE
12563: LD_EXP 38
12567: PUSH
12568: LD_VAR 0 4
12572: ARRAY
12573: INC
12574: ST_TO_ADDR
12575: LD_INT 1
12577: PUSH
12578: FOR_DOWNTO
12579: IFFALSE 12751
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12581: LD_ADDR_VAR 0 5
12585: PUSH
12586: LD_EXP 38
12590: PUSH
12591: LD_VAR 0 4
12595: ARRAY
12596: PUSH
12597: LD_VAR 0 3
12601: ARRAY
12602: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12603: LD_VAR 0 5
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 302
12616: NOT
12617: PUSH
12618: LD_VAR 0 5
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: CALL_OW 255
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 255
12641: NONEQUAL
12642: OR
12643: IFFALSE 12749
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12645: LD_VAR 0 5
12649: PUSH
12650: LD_INT 1
12652: ARRAY
12653: PPUSH
12654: CALL_OW 305
12658: PUSH
12659: LD_VAR 0 5
12663: PUSH
12664: LD_INT 1
12666: ARRAY
12667: PPUSH
12668: CALL_OW 255
12672: PUSH
12673: LD_VAR 0 1
12677: PPUSH
12678: CALL_OW 255
12682: EQUAL
12683: AND
12684: IFFALSE 12708
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12686: LD_VAR 0 5
12690: PUSH
12691: LD_INT 1
12693: ARRAY
12694: PPUSH
12695: LD_VAR 0 5
12699: PUSH
12700: LD_INT 2
12702: ARRAY
12703: PPUSH
12704: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12708: LD_ADDR_EXP 38
12712: PUSH
12713: LD_EXP 38
12717: PPUSH
12718: LD_VAR 0 4
12722: PPUSH
12723: LD_EXP 38
12727: PUSH
12728: LD_VAR 0 4
12732: ARRAY
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: CALL_OW 3
12743: PPUSH
12744: CALL_OW 1
12748: ST_TO_ADDR
// end ; end ;
12749: GO 12578
12751: POP
12752: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12753: LD_VAR 0 1
12757: PPUSH
12758: LD_EXP 38
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: PUSH
12769: LD_INT 0
12771: PLUS
12772: PPUSH
12773: CALL_OW 505
// end ;
12777: LD_VAR 0 2
12781: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// if not hack in hackTanks then
12788: LD_VAR 0 1
12792: PUSH
12793: LD_EXP 37
12797: IN
12798: NOT
12799: IFFALSE 12803
// exit ;
12801: GO 12888
// index := GetElementIndex ( hackTanks , hack ) ;
12803: LD_ADDR_VAR 0 5
12807: PUSH
12808: LD_EXP 37
12812: PPUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL 32949 0 2
12822: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12823: LD_ADDR_VAR 0 4
12827: PUSH
12828: DOUBLE
12829: LD_INT 1
12831: DEC
12832: ST_TO_ADDR
12833: LD_EXP 38
12837: PUSH
12838: LD_VAR 0 5
12842: ARRAY
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12886
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12847: LD_EXP 38
12851: PUSH
12852: LD_VAR 0 5
12856: ARRAY
12857: PUSH
12858: LD_VAR 0 4
12862: ARRAY
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: PUSH
12868: LD_VAR 0 2
12872: EQUAL
12873: IFFALSE 12884
// KillUnit ( vehicle ) ;
12875: LD_VAR 0 2
12879: PPUSH
12880: CALL_OW 66
12884: GO 12844
12886: POP
12887: POP
// end ;
12888: LD_VAR 0 3
12892: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12893: LD_EXP 42
12897: NOT
12898: IFFALSE 12933
12900: GO 12902
12902: DISABLE
// begin initMiner := true ;
12903: LD_ADDR_EXP 42
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// minersList := [ ] ;
12911: LD_ADDR_EXP 43
12915: PUSH
12916: EMPTY
12917: ST_TO_ADDR
// minerMinesList := [ ] ;
12918: LD_ADDR_EXP 44
12922: PUSH
12923: EMPTY
12924: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12925: LD_ADDR_EXP 45
12929: PUSH
12930: LD_INT 5
12932: ST_TO_ADDR
// end ;
12933: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12934: LD_EXP 42
12938: PUSH
12939: LD_INT 34
12941: PUSH
12942: LD_EXP 108
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: AND
12956: IFFALSE 13419
12958: GO 12960
12960: DISABLE
12961: LD_INT 0
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
// begin enable ;
12967: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12968: LD_ADDR_VAR 0 1
12972: PUSH
12973: LD_INT 34
12975: PUSH
12976: LD_EXP 108
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: PUSH
12990: FOR_IN
12991: IFFALSE 13063
// begin if not i in minersList then
12993: LD_VAR 0 1
12997: PUSH
12998: LD_EXP 43
13002: IN
13003: NOT
13004: IFFALSE 13061
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13006: LD_ADDR_EXP 43
13010: PUSH
13011: LD_EXP 43
13015: PPUSH
13016: LD_EXP 43
13020: PUSH
13021: LD_INT 1
13023: PLUS
13024: PPUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 1
13034: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13035: LD_ADDR_EXP 44
13039: PUSH
13040: LD_EXP 44
13044: PPUSH
13045: LD_EXP 44
13049: PUSH
13050: LD_INT 1
13052: PLUS
13053: PPUSH
13054: EMPTY
13055: PPUSH
13056: CALL_OW 1
13060: ST_TO_ADDR
// end end ;
13061: GO 12990
13063: POP
13064: POP
// for i := minerMinesList downto 1 do
13065: LD_ADDR_VAR 0 1
13069: PUSH
13070: DOUBLE
13071: LD_EXP 44
13075: INC
13076: ST_TO_ADDR
13077: LD_INT 1
13079: PUSH
13080: FOR_DOWNTO
13081: IFFALSE 13417
// begin if IsLive ( minersList [ i ] ) then
13083: LD_EXP 43
13087: PUSH
13088: LD_VAR 0 1
13092: ARRAY
13093: PPUSH
13094: CALL_OW 300
13098: IFFALSE 13126
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13100: LD_EXP 43
13104: PUSH
13105: LD_VAR 0 1
13109: ARRAY
13110: PPUSH
13111: LD_EXP 44
13115: PUSH
13116: LD_VAR 0 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 505
// if not minerMinesList [ i ] then
13126: LD_EXP 44
13130: PUSH
13131: LD_VAR 0 1
13135: ARRAY
13136: NOT
13137: IFFALSE 13141
// continue ;
13139: GO 13080
// for j := minerMinesList [ i ] downto 1 do
13141: LD_ADDR_VAR 0 2
13145: PUSH
13146: DOUBLE
13147: LD_EXP 44
13151: PUSH
13152: LD_VAR 0 1
13156: ARRAY
13157: INC
13158: ST_TO_ADDR
13159: LD_INT 1
13161: PUSH
13162: FOR_DOWNTO
13163: IFFALSE 13413
// begin side := GetSide ( minersList [ i ] ) ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: LD_EXP 43
13174: PUSH
13175: LD_VAR 0 1
13179: ARRAY
13180: PPUSH
13181: CALL_OW 255
13185: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13186: LD_ADDR_VAR 0 4
13190: PUSH
13191: LD_EXP 44
13195: PUSH
13196: LD_VAR 0 1
13200: ARRAY
13201: PUSH
13202: LD_VAR 0 2
13206: ARRAY
13207: PUSH
13208: LD_INT 1
13210: ARRAY
13211: PPUSH
13212: LD_EXP 44
13216: PUSH
13217: LD_VAR 0 1
13221: ARRAY
13222: PUSH
13223: LD_VAR 0 2
13227: ARRAY
13228: PUSH
13229: LD_INT 2
13231: ARRAY
13232: PPUSH
13233: CALL_OW 428
13237: ST_TO_ADDR
// if not tmp then
13238: LD_VAR 0 4
13242: NOT
13243: IFFALSE 13247
// continue ;
13245: GO 13162
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13247: LD_VAR 0 4
13251: PUSH
13252: LD_INT 81
13254: PUSH
13255: LD_VAR 0 3
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: IN
13269: PUSH
13270: LD_EXP 44
13274: PUSH
13275: LD_VAR 0 1
13279: ARRAY
13280: PUSH
13281: LD_VAR 0 2
13285: ARRAY
13286: PUSH
13287: LD_INT 1
13289: ARRAY
13290: PPUSH
13291: LD_EXP 44
13295: PUSH
13296: LD_VAR 0 1
13300: ARRAY
13301: PUSH
13302: LD_VAR 0 2
13306: ARRAY
13307: PUSH
13308: LD_INT 2
13310: ARRAY
13311: PPUSH
13312: CALL_OW 458
13316: AND
13317: IFFALSE 13411
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13319: LD_EXP 44
13323: PUSH
13324: LD_VAR 0 1
13328: ARRAY
13329: PUSH
13330: LD_VAR 0 2
13334: ARRAY
13335: PUSH
13336: LD_INT 1
13338: ARRAY
13339: PPUSH
13340: LD_EXP 44
13344: PUSH
13345: LD_VAR 0 1
13349: ARRAY
13350: PUSH
13351: LD_VAR 0 2
13355: ARRAY
13356: PUSH
13357: LD_INT 2
13359: ARRAY
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13370: LD_ADDR_EXP 44
13374: PUSH
13375: LD_EXP 44
13379: PPUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: LD_EXP 44
13389: PUSH
13390: LD_VAR 0 1
13394: ARRAY
13395: PPUSH
13396: LD_VAR 0 2
13400: PPUSH
13401: CALL_OW 3
13405: PPUSH
13406: CALL_OW 1
13410: ST_TO_ADDR
// end ; end ;
13411: GO 13162
13413: POP
13414: POP
// end ;
13415: GO 13080
13417: POP
13418: POP
// end ;
13419: PPOPN 4
13421: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
// result := false ;
13426: LD_ADDR_VAR 0 4
13430: PUSH
13431: LD_INT 0
13433: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 264
13443: PUSH
13444: LD_EXP 108
13448: EQUAL
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13694
// index := GetElementIndex ( minersList , unit ) ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: LD_EXP 43
13463: PPUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL 32949 0 2
13473: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13474: LD_EXP 44
13478: PUSH
13479: LD_VAR 0 5
13483: ARRAY
13484: PUSH
13485: LD_EXP 45
13489: GREATEREQUAL
13490: IFFALSE 13494
// exit ;
13492: GO 13694
// ComMoveXY ( unit , x , y ) ;
13494: LD_VAR 0 1
13498: PPUSH
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_VAR 0 3
13508: PPUSH
13509: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13513: LD_INT 35
13515: PPUSH
13516: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13520: LD_VAR 0 1
13524: PPUSH
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: CALL 63013 0 3
13539: NOT
13540: PUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 314
13550: AND
13551: IFFALSE 13555
// exit ;
13553: GO 13694
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13555: LD_VAR 0 2
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: CALL_OW 428
13569: PUSH
13570: LD_VAR 0 1
13574: EQUAL
13575: PUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 314
13585: NOT
13586: AND
13587: IFFALSE 13513
// PlaySoundXY ( x , y , PlantMine ) ;
13589: LD_VAR 0 2
13593: PPUSH
13594: LD_VAR 0 3
13598: PPUSH
13599: LD_STRING PlantMine
13601: PPUSH
13602: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13606: LD_VAR 0 2
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 255
13625: PPUSH
13626: LD_INT 0
13628: PPUSH
13629: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13633: LD_ADDR_EXP 44
13637: PUSH
13638: LD_EXP 44
13642: PPUSH
13643: LD_VAR 0 5
13647: PUSH
13648: LD_EXP 44
13652: PUSH
13653: LD_VAR 0 5
13657: ARRAY
13658: PUSH
13659: LD_INT 1
13661: PLUS
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: LD_VAR 0 2
13671: PUSH
13672: LD_VAR 0 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL 33164 0 3
13685: ST_TO_ADDR
// result := true ;
13686: LD_ADDR_VAR 0 4
13690: PUSH
13691: LD_INT 1
13693: ST_TO_ADDR
// end ;
13694: LD_VAR 0 4
13698: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13699: LD_INT 0
13701: PPUSH
13702: PPUSH
13703: PPUSH
// if not unit in minersList then
13704: LD_VAR 0 1
13708: PUSH
13709: LD_EXP 43
13713: IN
13714: NOT
13715: IFFALSE 13719
// exit ;
13717: GO 14111
// index := GetElementIndex ( minersList , unit ) ;
13719: LD_ADDR_VAR 0 6
13723: PUSH
13724: LD_EXP 43
13728: PPUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL 32949 0 2
13738: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13739: LD_ADDR_VAR 0 5
13743: PUSH
13744: DOUBLE
13745: LD_EXP 44
13749: PUSH
13750: LD_VAR 0 6
13754: ARRAY
13755: INC
13756: ST_TO_ADDR
13757: LD_INT 1
13759: PUSH
13760: FOR_DOWNTO
13761: IFFALSE 13922
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13763: LD_EXP 44
13767: PUSH
13768: LD_VAR 0 6
13772: ARRAY
13773: PUSH
13774: LD_VAR 0 5
13778: ARRAY
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PUSH
13784: LD_VAR 0 2
13788: EQUAL
13789: PUSH
13790: LD_EXP 44
13794: PUSH
13795: LD_VAR 0 6
13799: ARRAY
13800: PUSH
13801: LD_VAR 0 5
13805: ARRAY
13806: PUSH
13807: LD_INT 2
13809: ARRAY
13810: PUSH
13811: LD_VAR 0 3
13815: EQUAL
13816: AND
13817: IFFALSE 13920
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13819: LD_EXP 44
13823: PUSH
13824: LD_VAR 0 6
13828: ARRAY
13829: PUSH
13830: LD_VAR 0 5
13834: ARRAY
13835: PUSH
13836: LD_INT 1
13838: ARRAY
13839: PPUSH
13840: LD_EXP 44
13844: PUSH
13845: LD_VAR 0 6
13849: ARRAY
13850: PUSH
13851: LD_VAR 0 5
13855: ARRAY
13856: PUSH
13857: LD_INT 2
13859: ARRAY
13860: PPUSH
13861: LD_VAR 0 1
13865: PPUSH
13866: CALL_OW 255
13870: PPUSH
13871: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13875: LD_ADDR_EXP 44
13879: PUSH
13880: LD_EXP 44
13884: PPUSH
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_EXP 44
13894: PUSH
13895: LD_VAR 0 6
13899: ARRAY
13900: PPUSH
13901: LD_VAR 0 5
13905: PPUSH
13906: CALL_OW 3
13910: PPUSH
13911: CALL_OW 1
13915: ST_TO_ADDR
// exit ;
13916: POP
13917: POP
13918: GO 14111
// end ; end ;
13920: GO 13760
13922: POP
13923: POP
// for i := minerMinesList [ index ] downto 1 do
13924: LD_ADDR_VAR 0 5
13928: PUSH
13929: DOUBLE
13930: LD_EXP 44
13934: PUSH
13935: LD_VAR 0 6
13939: ARRAY
13940: INC
13941: ST_TO_ADDR
13942: LD_INT 1
13944: PUSH
13945: FOR_DOWNTO
13946: IFFALSE 14109
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13948: LD_EXP 44
13952: PUSH
13953: LD_VAR 0 6
13957: ARRAY
13958: PUSH
13959: LD_VAR 0 5
13963: ARRAY
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: LD_EXP 44
13973: PUSH
13974: LD_VAR 0 6
13978: ARRAY
13979: PUSH
13980: LD_VAR 0 5
13984: ARRAY
13985: PUSH
13986: LD_INT 2
13988: ARRAY
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: CALL_OW 298
14004: PUSH
14005: LD_INT 6
14007: LESS
14008: IFFALSE 14107
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14010: LD_EXP 44
14014: PUSH
14015: LD_VAR 0 6
14019: ARRAY
14020: PUSH
14021: LD_VAR 0 5
14025: ARRAY
14026: PUSH
14027: LD_INT 1
14029: ARRAY
14030: PPUSH
14031: LD_EXP 44
14035: PUSH
14036: LD_VAR 0 6
14040: ARRAY
14041: PUSH
14042: LD_VAR 0 5
14046: ARRAY
14047: PUSH
14048: LD_INT 2
14050: ARRAY
14051: PPUSH
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 255
14061: PPUSH
14062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14066: LD_ADDR_EXP 44
14070: PUSH
14071: LD_EXP 44
14075: PPUSH
14076: LD_VAR 0 6
14080: PPUSH
14081: LD_EXP 44
14085: PUSH
14086: LD_VAR 0 6
14090: ARRAY
14091: PPUSH
14092: LD_VAR 0 5
14096: PPUSH
14097: CALL_OW 3
14101: PPUSH
14102: CALL_OW 1
14106: ST_TO_ADDR
// end ; end ;
14107: GO 13945
14109: POP
14110: POP
// end ;
14111: LD_VAR 0 4
14115: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
14124: PPUSH
14125: PPUSH
14126: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14127: LD_VAR 0 1
14131: PPUSH
14132: CALL_OW 264
14136: PUSH
14137: LD_EXP 108
14141: EQUAL
14142: NOT
14143: PUSH
14144: LD_VAR 0 1
14148: PUSH
14149: LD_EXP 43
14153: IN
14154: NOT
14155: OR
14156: IFFALSE 14160
// exit ;
14158: GO 14482
// index := GetElementIndex ( minersList , unit ) ;
14160: LD_ADDR_VAR 0 6
14164: PUSH
14165: LD_EXP 43
14169: PPUSH
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL 32949 0 2
14179: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14180: LD_ADDR_VAR 0 8
14184: PUSH
14185: LD_EXP 45
14189: PUSH
14190: LD_EXP 44
14194: PUSH
14195: LD_VAR 0 6
14199: ARRAY
14200: MINUS
14201: ST_TO_ADDR
// if not minesFreeAmount then
14202: LD_VAR 0 8
14206: NOT
14207: IFFALSE 14211
// exit ;
14209: GO 14482
// tmp := [ ] ;
14211: LD_ADDR_VAR 0 7
14215: PUSH
14216: EMPTY
14217: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 8
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14429
// begin _d := rand ( 0 , 5 ) ;
14236: LD_ADDR_VAR 0 11
14240: PUSH
14241: LD_INT 0
14243: PPUSH
14244: LD_INT 5
14246: PPUSH
14247: CALL_OW 12
14251: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14252: LD_ADDR_VAR 0 12
14256: PUSH
14257: LD_INT 2
14259: PPUSH
14260: LD_INT 6
14262: PPUSH
14263: CALL_OW 12
14267: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14268: LD_ADDR_VAR 0 9
14272: PUSH
14273: LD_VAR 0 2
14277: PPUSH
14278: LD_VAR 0 11
14282: PPUSH
14283: LD_VAR 0 12
14287: PPUSH
14288: CALL_OW 272
14292: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14293: LD_ADDR_VAR 0 10
14297: PUSH
14298: LD_VAR 0 3
14302: PPUSH
14303: LD_VAR 0 11
14307: PPUSH
14308: LD_VAR 0 12
14312: PPUSH
14313: CALL_OW 273
14317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14318: LD_VAR 0 9
14322: PPUSH
14323: LD_VAR 0 10
14327: PPUSH
14328: CALL_OW 488
14332: PUSH
14333: LD_VAR 0 9
14337: PUSH
14338: LD_VAR 0 10
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_VAR 0 7
14351: IN
14352: NOT
14353: AND
14354: PUSH
14355: LD_VAR 0 9
14359: PPUSH
14360: LD_VAR 0 10
14364: PPUSH
14365: CALL_OW 458
14369: NOT
14370: AND
14371: IFFALSE 14413
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14373: LD_ADDR_VAR 0 7
14377: PUSH
14378: LD_VAR 0 7
14382: PPUSH
14383: LD_VAR 0 7
14387: PUSH
14388: LD_INT 1
14390: PLUS
14391: PPUSH
14392: LD_VAR 0 9
14396: PUSH
14397: LD_VAR 0 10
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 1
14410: ST_TO_ADDR
14411: GO 14427
// i := i - 1 ;
14413: LD_ADDR_VAR 0 5
14417: PUSH
14418: LD_VAR 0 5
14422: PUSH
14423: LD_INT 1
14425: MINUS
14426: ST_TO_ADDR
// end ;
14427: GO 14233
14429: POP
14430: POP
// for i in tmp do
14431: LD_ADDR_VAR 0 5
14435: PUSH
14436: LD_VAR 0 7
14440: PUSH
14441: FOR_IN
14442: IFFALSE 14480
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14444: LD_VAR 0 1
14448: PPUSH
14449: LD_VAR 0 5
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PPUSH
14458: LD_VAR 0 5
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: CALL 13422 0 3
14471: NOT
14472: IFFALSE 14478
// exit ;
14474: POP
14475: POP
14476: GO 14482
14478: GO 14441
14480: POP
14481: POP
// end ;
14482: LD_VAR 0 4
14486: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
// if not GetClass ( unit ) = class_sniper then
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 257
14505: PUSH
14506: LD_INT 5
14508: EQUAL
14509: NOT
14510: IFFALSE 14514
// exit ;
14512: GO 14902
// dist := 8 ;
14514: LD_ADDR_VAR 0 5
14518: PUSH
14519: LD_INT 8
14521: ST_TO_ADDR
// viewRange := 12 ;
14522: LD_ADDR_VAR 0 7
14526: PUSH
14527: LD_INT 12
14529: ST_TO_ADDR
// side := GetSide ( unit ) ;
14530: LD_ADDR_VAR 0 6
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 255
14544: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14545: LD_INT 61
14547: PPUSH
14548: LD_VAR 0 6
14552: PPUSH
14553: CALL_OW 321
14557: PUSH
14558: LD_INT 2
14560: EQUAL
14561: IFFALSE 14571
// viewRange := 16 ;
14563: LD_ADDR_VAR 0 7
14567: PUSH
14568: LD_INT 16
14570: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14571: LD_VAR 0 1
14575: PPUSH
14576: LD_VAR 0 2
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: CALL_OW 297
14590: PUSH
14591: LD_VAR 0 5
14595: GREATER
14596: IFFALSE 14675
// begin ComMoveXY ( unit , x , y ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_VAR 0 2
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14617: LD_INT 35
14619: PPUSH
14620: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14624: LD_VAR 0 1
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL 63013 0 3
14643: NOT
14644: IFFALSE 14648
// exit ;
14646: GO 14902
// until GetDistUnitXY ( unit , x , y ) < dist ;
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: CALL_OW 297
14667: PUSH
14668: LD_VAR 0 5
14672: LESS
14673: IFFALSE 14617
// end ; ComTurnXY ( unit , x , y ) ;
14675: LD_VAR 0 1
14679: PPUSH
14680: LD_VAR 0 2
14684: PPUSH
14685: LD_VAR 0 3
14689: PPUSH
14690: CALL_OW 118
// wait ( 5 ) ;
14694: LD_INT 5
14696: PPUSH
14697: CALL_OW 67
// _d := GetDir ( unit ) ;
14701: LD_ADDR_VAR 0 10
14705: PUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 254
14715: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14716: LD_ADDR_VAR 0 8
14720: PUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 250
14730: PPUSH
14731: LD_VAR 0 10
14735: PPUSH
14736: LD_VAR 0 5
14740: PPUSH
14741: CALL_OW 272
14745: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14746: LD_ADDR_VAR 0 9
14750: PUSH
14751: LD_VAR 0 1
14755: PPUSH
14756: CALL_OW 251
14760: PPUSH
14761: LD_VAR 0 10
14765: PPUSH
14766: LD_VAR 0 5
14770: PPUSH
14771: CALL_OW 273
14775: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14776: LD_VAR 0 8
14780: PPUSH
14781: LD_VAR 0 9
14785: PPUSH
14786: CALL_OW 488
14790: NOT
14791: IFFALSE 14795
// exit ;
14793: GO 14902
// ComAnimCustom ( unit , 1 ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14807: LD_VAR 0 8
14811: PPUSH
14812: LD_VAR 0 9
14816: PPUSH
14817: LD_VAR 0 6
14821: PPUSH
14822: LD_VAR 0 7
14826: PPUSH
14827: CALL_OW 330
// repeat wait ( 1 ) ;
14831: LD_INT 1
14833: PPUSH
14834: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 316
14847: PUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 314
14857: OR
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 302
14868: NOT
14869: OR
14870: PUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 301
14880: OR
14881: IFFALSE 14831
// RemoveSeeing ( _x , _y , side ) ;
14883: LD_VAR 0 8
14887: PPUSH
14888: LD_VAR 0 9
14892: PPUSH
14893: LD_VAR 0 6
14897: PPUSH
14898: CALL_OW 331
// end ; end_of_file
14902: LD_VAR 0 4
14906: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14907: LD_VAR 0 2
14911: PUSH
14912: LD_INT 100
14914: EQUAL
14915: IFFALSE 15864
// begin if not StreamModeActive then
14917: LD_EXP 46
14921: NOT
14922: IFFALSE 14932
// StreamModeActive := true ;
14924: LD_ADDR_EXP 46
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// if p3 = 0 then
14932: LD_VAR 0 3
14936: PUSH
14937: LD_INT 0
14939: EQUAL
14940: IFFALSE 14946
// InitStreamMode ;
14942: CALL 16022 0 0
// if p3 = 1 then
14946: LD_VAR 0 3
14950: PUSH
14951: LD_INT 1
14953: EQUAL
14954: IFFALSE 14964
// sRocket := true ;
14956: LD_ADDR_EXP 51
14960: PUSH
14961: LD_INT 1
14963: ST_TO_ADDR
// if p3 = 2 then
14964: LD_VAR 0 3
14968: PUSH
14969: LD_INT 2
14971: EQUAL
14972: IFFALSE 14982
// sSpeed := true ;
14974: LD_ADDR_EXP 50
14978: PUSH
14979: LD_INT 1
14981: ST_TO_ADDR
// if p3 = 3 then
14982: LD_VAR 0 3
14986: PUSH
14987: LD_INT 3
14989: EQUAL
14990: IFFALSE 15000
// sEngine := true ;
14992: LD_ADDR_EXP 52
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
// if p3 = 4 then
15000: LD_VAR 0 3
15004: PUSH
15005: LD_INT 4
15007: EQUAL
15008: IFFALSE 15018
// sSpec := true ;
15010: LD_ADDR_EXP 49
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// if p3 = 5 then
15018: LD_VAR 0 3
15022: PUSH
15023: LD_INT 5
15025: EQUAL
15026: IFFALSE 15036
// sLevel := true ;
15028: LD_ADDR_EXP 53
15032: PUSH
15033: LD_INT 1
15035: ST_TO_ADDR
// if p3 = 6 then
15036: LD_VAR 0 3
15040: PUSH
15041: LD_INT 6
15043: EQUAL
15044: IFFALSE 15054
// sArmoury := true ;
15046: LD_ADDR_EXP 54
15050: PUSH
15051: LD_INT 1
15053: ST_TO_ADDR
// if p3 = 7 then
15054: LD_VAR 0 3
15058: PUSH
15059: LD_INT 7
15061: EQUAL
15062: IFFALSE 15072
// sRadar := true ;
15064: LD_ADDR_EXP 55
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// if p3 = 8 then
15072: LD_VAR 0 3
15076: PUSH
15077: LD_INT 8
15079: EQUAL
15080: IFFALSE 15090
// sBunker := true ;
15082: LD_ADDR_EXP 56
15086: PUSH
15087: LD_INT 1
15089: ST_TO_ADDR
// if p3 = 9 then
15090: LD_VAR 0 3
15094: PUSH
15095: LD_INT 9
15097: EQUAL
15098: IFFALSE 15108
// sHack := true ;
15100: LD_ADDR_EXP 57
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if p3 = 10 then
15108: LD_VAR 0 3
15112: PUSH
15113: LD_INT 10
15115: EQUAL
15116: IFFALSE 15126
// sFire := true ;
15118: LD_ADDR_EXP 58
15122: PUSH
15123: LD_INT 1
15125: ST_TO_ADDR
// if p3 = 11 then
15126: LD_VAR 0 3
15130: PUSH
15131: LD_INT 11
15133: EQUAL
15134: IFFALSE 15144
// sRefresh := true ;
15136: LD_ADDR_EXP 59
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// if p3 = 12 then
15144: LD_VAR 0 3
15148: PUSH
15149: LD_INT 12
15151: EQUAL
15152: IFFALSE 15162
// sExp := true ;
15154: LD_ADDR_EXP 60
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// if p3 = 13 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_INT 13
15169: EQUAL
15170: IFFALSE 15180
// sDepot := true ;
15172: LD_ADDR_EXP 61
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// if p3 = 14 then
15180: LD_VAR 0 3
15184: PUSH
15185: LD_INT 14
15187: EQUAL
15188: IFFALSE 15198
// sFlag := true ;
15190: LD_ADDR_EXP 62
15194: PUSH
15195: LD_INT 1
15197: ST_TO_ADDR
// if p3 = 15 then
15198: LD_VAR 0 3
15202: PUSH
15203: LD_INT 15
15205: EQUAL
15206: IFFALSE 15216
// sKamikadze := true ;
15208: LD_ADDR_EXP 70
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if p3 = 16 then
15216: LD_VAR 0 3
15220: PUSH
15221: LD_INT 16
15223: EQUAL
15224: IFFALSE 15234
// sTroll := true ;
15226: LD_ADDR_EXP 71
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if p3 = 17 then
15234: LD_VAR 0 3
15238: PUSH
15239: LD_INT 17
15241: EQUAL
15242: IFFALSE 15252
// sSlow := true ;
15244: LD_ADDR_EXP 72
15248: PUSH
15249: LD_INT 1
15251: ST_TO_ADDR
// if p3 = 18 then
15252: LD_VAR 0 3
15256: PUSH
15257: LD_INT 18
15259: EQUAL
15260: IFFALSE 15270
// sLack := true ;
15262: LD_ADDR_EXP 73
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// if p3 = 19 then
15270: LD_VAR 0 3
15274: PUSH
15275: LD_INT 19
15277: EQUAL
15278: IFFALSE 15288
// sTank := true ;
15280: LD_ADDR_EXP 75
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// if p3 = 20 then
15288: LD_VAR 0 3
15292: PUSH
15293: LD_INT 20
15295: EQUAL
15296: IFFALSE 15306
// sRemote := true ;
15298: LD_ADDR_EXP 76
15302: PUSH
15303: LD_INT 1
15305: ST_TO_ADDR
// if p3 = 21 then
15306: LD_VAR 0 3
15310: PUSH
15311: LD_INT 21
15313: EQUAL
15314: IFFALSE 15324
// sPowell := true ;
15316: LD_ADDR_EXP 77
15320: PUSH
15321: LD_INT 1
15323: ST_TO_ADDR
// if p3 = 22 then
15324: LD_VAR 0 3
15328: PUSH
15329: LD_INT 22
15331: EQUAL
15332: IFFALSE 15342
// sTeleport := true ;
15334: LD_ADDR_EXP 80
15338: PUSH
15339: LD_INT 1
15341: ST_TO_ADDR
// if p3 = 23 then
15342: LD_VAR 0 3
15346: PUSH
15347: LD_INT 23
15349: EQUAL
15350: IFFALSE 15360
// sOilTower := true ;
15352: LD_ADDR_EXP 82
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// if p3 = 24 then
15360: LD_VAR 0 3
15364: PUSH
15365: LD_INT 24
15367: EQUAL
15368: IFFALSE 15378
// sShovel := true ;
15370: LD_ADDR_EXP 83
15374: PUSH
15375: LD_INT 1
15377: ST_TO_ADDR
// if p3 = 25 then
15378: LD_VAR 0 3
15382: PUSH
15383: LD_INT 25
15385: EQUAL
15386: IFFALSE 15396
// sSheik := true ;
15388: LD_ADDR_EXP 84
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// if p3 = 26 then
15396: LD_VAR 0 3
15400: PUSH
15401: LD_INT 26
15403: EQUAL
15404: IFFALSE 15414
// sEarthquake := true ;
15406: LD_ADDR_EXP 86
15410: PUSH
15411: LD_INT 1
15413: ST_TO_ADDR
// if p3 = 27 then
15414: LD_VAR 0 3
15418: PUSH
15419: LD_INT 27
15421: EQUAL
15422: IFFALSE 15432
// sAI := true ;
15424: LD_ADDR_EXP 87
15428: PUSH
15429: LD_INT 1
15431: ST_TO_ADDR
// if p3 = 28 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_INT 28
15439: EQUAL
15440: IFFALSE 15450
// sCargo := true ;
15442: LD_ADDR_EXP 90
15446: PUSH
15447: LD_INT 1
15449: ST_TO_ADDR
// if p3 = 29 then
15450: LD_VAR 0 3
15454: PUSH
15455: LD_INT 29
15457: EQUAL
15458: IFFALSE 15468
// sDLaser := true ;
15460: LD_ADDR_EXP 91
15464: PUSH
15465: LD_INT 1
15467: ST_TO_ADDR
// if p3 = 30 then
15468: LD_VAR 0 3
15472: PUSH
15473: LD_INT 30
15475: EQUAL
15476: IFFALSE 15486
// sExchange := true ;
15478: LD_ADDR_EXP 92
15482: PUSH
15483: LD_INT 1
15485: ST_TO_ADDR
// if p3 = 31 then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_INT 31
15493: EQUAL
15494: IFFALSE 15504
// sFac := true ;
15496: LD_ADDR_EXP 93
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// if p3 = 32 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 32
15511: EQUAL
15512: IFFALSE 15522
// sPower := true ;
15514: LD_ADDR_EXP 94
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// if p3 = 33 then
15522: LD_VAR 0 3
15526: PUSH
15527: LD_INT 33
15529: EQUAL
15530: IFFALSE 15540
// sRandom := true ;
15532: LD_ADDR_EXP 95
15536: PUSH
15537: LD_INT 1
15539: ST_TO_ADDR
// if p3 = 34 then
15540: LD_VAR 0 3
15544: PUSH
15545: LD_INT 34
15547: EQUAL
15548: IFFALSE 15558
// sShield := true ;
15550: LD_ADDR_EXP 96
15554: PUSH
15555: LD_INT 1
15557: ST_TO_ADDR
// if p3 = 35 then
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 35
15565: EQUAL
15566: IFFALSE 15576
// sTime := true ;
15568: LD_ADDR_EXP 97
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// if p3 = 36 then
15576: LD_VAR 0 3
15580: PUSH
15581: LD_INT 36
15583: EQUAL
15584: IFFALSE 15594
// sTools := true ;
15586: LD_ADDR_EXP 98
15590: PUSH
15591: LD_INT 1
15593: ST_TO_ADDR
// if p3 = 101 then
15594: LD_VAR 0 3
15598: PUSH
15599: LD_INT 101
15601: EQUAL
15602: IFFALSE 15612
// sSold := true ;
15604: LD_ADDR_EXP 63
15608: PUSH
15609: LD_INT 1
15611: ST_TO_ADDR
// if p3 = 102 then
15612: LD_VAR 0 3
15616: PUSH
15617: LD_INT 102
15619: EQUAL
15620: IFFALSE 15630
// sDiff := true ;
15622: LD_ADDR_EXP 64
15626: PUSH
15627: LD_INT 1
15629: ST_TO_ADDR
// if p3 = 103 then
15630: LD_VAR 0 3
15634: PUSH
15635: LD_INT 103
15637: EQUAL
15638: IFFALSE 15648
// sFog := true ;
15640: LD_ADDR_EXP 67
15644: PUSH
15645: LD_INT 1
15647: ST_TO_ADDR
// if p3 = 104 then
15648: LD_VAR 0 3
15652: PUSH
15653: LD_INT 104
15655: EQUAL
15656: IFFALSE 15666
// sReset := true ;
15658: LD_ADDR_EXP 68
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// if p3 = 105 then
15666: LD_VAR 0 3
15670: PUSH
15671: LD_INT 105
15673: EQUAL
15674: IFFALSE 15684
// sSun := true ;
15676: LD_ADDR_EXP 69
15680: PUSH
15681: LD_INT 1
15683: ST_TO_ADDR
// if p3 = 106 then
15684: LD_VAR 0 3
15688: PUSH
15689: LD_INT 106
15691: EQUAL
15692: IFFALSE 15702
// sTiger := true ;
15694: LD_ADDR_EXP 65
15698: PUSH
15699: LD_INT 1
15701: ST_TO_ADDR
// if p3 = 107 then
15702: LD_VAR 0 3
15706: PUSH
15707: LD_INT 107
15709: EQUAL
15710: IFFALSE 15720
// sBomb := true ;
15712: LD_ADDR_EXP 66
15716: PUSH
15717: LD_INT 1
15719: ST_TO_ADDR
// if p3 = 108 then
15720: LD_VAR 0 3
15724: PUSH
15725: LD_INT 108
15727: EQUAL
15728: IFFALSE 15738
// sWound := true ;
15730: LD_ADDR_EXP 74
15734: PUSH
15735: LD_INT 1
15737: ST_TO_ADDR
// if p3 = 109 then
15738: LD_VAR 0 3
15742: PUSH
15743: LD_INT 109
15745: EQUAL
15746: IFFALSE 15756
// sBetray := true ;
15748: LD_ADDR_EXP 78
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// if p3 = 110 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 110
15763: EQUAL
15764: IFFALSE 15774
// sContamin := true ;
15766: LD_ADDR_EXP 79
15770: PUSH
15771: LD_INT 1
15773: ST_TO_ADDR
// if p3 = 111 then
15774: LD_VAR 0 3
15778: PUSH
15779: LD_INT 111
15781: EQUAL
15782: IFFALSE 15792
// sOil := true ;
15784: LD_ADDR_EXP 81
15788: PUSH
15789: LD_INT 1
15791: ST_TO_ADDR
// if p3 = 112 then
15792: LD_VAR 0 3
15796: PUSH
15797: LD_INT 112
15799: EQUAL
15800: IFFALSE 15810
// sStu := true ;
15802: LD_ADDR_EXP 85
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if p3 = 113 then
15810: LD_VAR 0 3
15814: PUSH
15815: LD_INT 113
15817: EQUAL
15818: IFFALSE 15828
// sBazooka := true ;
15820: LD_ADDR_EXP 88
15824: PUSH
15825: LD_INT 1
15827: ST_TO_ADDR
// if p3 = 114 then
15828: LD_VAR 0 3
15832: PUSH
15833: LD_INT 114
15835: EQUAL
15836: IFFALSE 15846
// sMortar := true ;
15838: LD_ADDR_EXP 89
15842: PUSH
15843: LD_INT 1
15845: ST_TO_ADDR
// if p3 = 115 then
15846: LD_VAR 0 3
15850: PUSH
15851: LD_INT 115
15853: EQUAL
15854: IFFALSE 15864
// sRanger := true ;
15856: LD_ADDR_EXP 99
15860: PUSH
15861: LD_INT 1
15863: ST_TO_ADDR
// end ; if p2 = 101 then
15864: LD_VAR 0 2
15868: PUSH
15869: LD_INT 101
15871: EQUAL
15872: IFFALSE 16000
// begin case p3 of 1 :
15874: LD_VAR 0 3
15878: PUSH
15879: LD_INT 1
15881: DOUBLE
15882: EQUAL
15883: IFTRUE 15887
15885: GO 15894
15887: POP
// hHackUnlimitedResources ; 2 :
15888: CALL 27035 0 0
15892: GO 16000
15894: LD_INT 2
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 15909
15902: POP
// hHackSetLevel10 ; 3 :
15903: CALL 27168 0 0
15907: GO 16000
15909: LD_INT 3
15911: DOUBLE
15912: EQUAL
15913: IFTRUE 15917
15915: GO 15924
15917: POP
// hHackSetLevel10YourUnits ; 4 :
15918: CALL 27253 0 0
15922: GO 16000
15924: LD_INT 4
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15939
15932: POP
// hHackInvincible ; 5 :
15933: CALL 27701 0 0
15937: GO 16000
15939: LD_INT 5
15941: DOUBLE
15942: EQUAL
15943: IFTRUE 15947
15945: GO 15954
15947: POP
// hHackInvisible ; 6 :
15948: CALL 27812 0 0
15952: GO 16000
15954: LD_INT 6
15956: DOUBLE
15957: EQUAL
15958: IFTRUE 15962
15960: GO 15969
15962: POP
// hHackChangeYourSide ; 7 :
15963: CALL 27869 0 0
15967: GO 16000
15969: LD_INT 7
15971: DOUBLE
15972: EQUAL
15973: IFTRUE 15977
15975: GO 15984
15977: POP
// hHackChangeUnitSide ; 8 :
15978: CALL 27911 0 0
15982: GO 16000
15984: LD_INT 8
15986: DOUBLE
15987: EQUAL
15988: IFTRUE 15992
15990: GO 15999
15992: POP
// hHackFog ; end ;
15993: CALL 28012 0 0
15997: GO 16000
15999: POP
// end ; end ;
16000: PPOPN 6
16002: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16003: GO 16005
16005: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16006: LD_STRING initStreamRollete();
16008: PPUSH
16009: CALL_OW 559
// InitStreamMode ;
16013: CALL 16022 0 0
// DefineStreamItems ( ) ;
16017: CALL 16462 0 0
// end ;
16021: END
// function InitStreamMode ; begin
16022: LD_INT 0
16024: PPUSH
// streamModeActive := false ;
16025: LD_ADDR_EXP 46
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// normalCounter := 36 ;
16033: LD_ADDR_EXP 47
16037: PUSH
16038: LD_INT 36
16040: ST_TO_ADDR
// hardcoreCounter := 16 ;
16041: LD_ADDR_EXP 48
16045: PUSH
16046: LD_INT 16
16048: ST_TO_ADDR
// sRocket := false ;
16049: LD_ADDR_EXP 51
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// sSpeed := false ;
16057: LD_ADDR_EXP 50
16061: PUSH
16062: LD_INT 0
16064: ST_TO_ADDR
// sEngine := false ;
16065: LD_ADDR_EXP 52
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// sSpec := false ;
16073: LD_ADDR_EXP 49
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// sLevel := false ;
16081: LD_ADDR_EXP 53
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// sArmoury := false ;
16089: LD_ADDR_EXP 54
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// sRadar := false ;
16097: LD_ADDR_EXP 55
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// sBunker := false ;
16105: LD_ADDR_EXP 56
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// sHack := false ;
16113: LD_ADDR_EXP 57
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// sFire := false ;
16121: LD_ADDR_EXP 58
16125: PUSH
16126: LD_INT 0
16128: ST_TO_ADDR
// sRefresh := false ;
16129: LD_ADDR_EXP 59
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// sExp := false ;
16137: LD_ADDR_EXP 60
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// sDepot := false ;
16145: LD_ADDR_EXP 61
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// sFlag := false ;
16153: LD_ADDR_EXP 62
16157: PUSH
16158: LD_INT 0
16160: ST_TO_ADDR
// sKamikadze := false ;
16161: LD_ADDR_EXP 70
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// sTroll := false ;
16169: LD_ADDR_EXP 71
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// sSlow := false ;
16177: LD_ADDR_EXP 72
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// sLack := false ;
16185: LD_ADDR_EXP 73
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// sTank := false ;
16193: LD_ADDR_EXP 75
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// sRemote := false ;
16201: LD_ADDR_EXP 76
16205: PUSH
16206: LD_INT 0
16208: ST_TO_ADDR
// sPowell := false ;
16209: LD_ADDR_EXP 77
16213: PUSH
16214: LD_INT 0
16216: ST_TO_ADDR
// sTeleport := false ;
16217: LD_ADDR_EXP 80
16221: PUSH
16222: LD_INT 0
16224: ST_TO_ADDR
// sOilTower := false ;
16225: LD_ADDR_EXP 82
16229: PUSH
16230: LD_INT 0
16232: ST_TO_ADDR
// sShovel := false ;
16233: LD_ADDR_EXP 83
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// sSheik := false ;
16241: LD_ADDR_EXP 84
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// sEarthquake := false ;
16249: LD_ADDR_EXP 86
16253: PUSH
16254: LD_INT 0
16256: ST_TO_ADDR
// sAI := false ;
16257: LD_ADDR_EXP 87
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// sCargo := false ;
16265: LD_ADDR_EXP 90
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// sDLaser := false ;
16273: LD_ADDR_EXP 91
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// sExchange := false ;
16281: LD_ADDR_EXP 92
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// sFac := false ;
16289: LD_ADDR_EXP 93
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// sPower := false ;
16297: LD_ADDR_EXP 94
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// sRandom := false ;
16305: LD_ADDR_EXP 95
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// sShield := false ;
16313: LD_ADDR_EXP 96
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// sTime := false ;
16321: LD_ADDR_EXP 97
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// sTools := false ;
16329: LD_ADDR_EXP 98
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// sSold := false ;
16337: LD_ADDR_EXP 63
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// sDiff := false ;
16345: LD_ADDR_EXP 64
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// sFog := false ;
16353: LD_ADDR_EXP 67
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// sReset := false ;
16361: LD_ADDR_EXP 68
16365: PUSH
16366: LD_INT 0
16368: ST_TO_ADDR
// sSun := false ;
16369: LD_ADDR_EXP 69
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// sTiger := false ;
16377: LD_ADDR_EXP 65
16381: PUSH
16382: LD_INT 0
16384: ST_TO_ADDR
// sBomb := false ;
16385: LD_ADDR_EXP 66
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// sWound := false ;
16393: LD_ADDR_EXP 74
16397: PUSH
16398: LD_INT 0
16400: ST_TO_ADDR
// sBetray := false ;
16401: LD_ADDR_EXP 78
16405: PUSH
16406: LD_INT 0
16408: ST_TO_ADDR
// sContamin := false ;
16409: LD_ADDR_EXP 79
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// sOil := false ;
16417: LD_ADDR_EXP 81
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// sStu := false ;
16425: LD_ADDR_EXP 85
16429: PUSH
16430: LD_INT 0
16432: ST_TO_ADDR
// sBazooka := false ;
16433: LD_ADDR_EXP 88
16437: PUSH
16438: LD_INT 0
16440: ST_TO_ADDR
// sMortar := false ;
16441: LD_ADDR_EXP 89
16445: PUSH
16446: LD_INT 0
16448: ST_TO_ADDR
// sRanger := false ;
16449: LD_ADDR_EXP 99
16453: PUSH
16454: LD_INT 0
16456: ST_TO_ADDR
// end ;
16457: LD_VAR 0 1
16461: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
// result := [ ] ;
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: EMPTY
16475: ST_TO_ADDR
// if campaign_id = 1 then
16476: LD_OWVAR 69
16480: PUSH
16481: LD_INT 1
16483: EQUAL
16484: IFFALSE 19422
// begin case mission_number of 1 :
16486: LD_OWVAR 70
16490: PUSH
16491: LD_INT 1
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16563
16499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: LD_INT 4
16510: PUSH
16511: LD_INT 11
16513: PUSH
16514: LD_INT 12
16516: PUSH
16517: LD_INT 15
16519: PUSH
16520: LD_INT 16
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_INT 23
16528: PUSH
16529: LD_INT 26
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 101
16545: PUSH
16546: LD_INT 102
16548: PUSH
16549: LD_INT 106
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: ST_TO_ADDR
16561: GO 19420
16563: LD_INT 2
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16571
16569: GO 16643
16571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 4
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 12
16588: PUSH
16589: LD_INT 15
16591: PUSH
16592: LD_INT 16
16594: PUSH
16595: LD_INT 22
16597: PUSH
16598: LD_INT 23
16600: PUSH
16601: LD_INT 26
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 101
16617: PUSH
16618: LD_INT 102
16620: PUSH
16621: LD_INT 105
16623: PUSH
16624: LD_INT 106
16626: PUSH
16627: LD_INT 108
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: ST_TO_ADDR
16641: GO 19420
16643: LD_INT 3
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16727
16651: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 4
16662: PUSH
16663: LD_INT 5
16665: PUSH
16666: LD_INT 11
16668: PUSH
16669: LD_INT 12
16671: PUSH
16672: LD_INT 15
16674: PUSH
16675: LD_INT 16
16677: PUSH
16678: LD_INT 22
16680: PUSH
16681: LD_INT 26
16683: PUSH
16684: LD_INT 36
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 101
16701: PUSH
16702: LD_INT 102
16704: PUSH
16705: LD_INT 105
16707: PUSH
16708: LD_INT 106
16710: PUSH
16711: LD_INT 108
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: ST_TO_ADDR
16725: GO 19420
16727: LD_INT 4
16729: DOUBLE
16730: EQUAL
16731: IFTRUE 16735
16733: GO 16819
16735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16736: LD_ADDR_VAR 0 1
16740: PUSH
16741: LD_INT 2
16743: PUSH
16744: LD_INT 4
16746: PUSH
16747: LD_INT 5
16749: PUSH
16750: LD_INT 8
16752: PUSH
16753: LD_INT 11
16755: PUSH
16756: LD_INT 12
16758: PUSH
16759: LD_INT 15
16761: PUSH
16762: LD_INT 16
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: LD_INT 36
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 101
16793: PUSH
16794: LD_INT 102
16796: PUSH
16797: LD_INT 105
16799: PUSH
16800: LD_INT 106
16802: PUSH
16803: LD_INT 108
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: ST_TO_ADDR
16817: GO 19420
16819: LD_INT 5
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16927
16827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16828: LD_ADDR_VAR 0 1
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: LD_INT 4
16838: PUSH
16839: LD_INT 5
16841: PUSH
16842: LD_INT 6
16844: PUSH
16845: LD_INT 8
16847: PUSH
16848: LD_INT 11
16850: PUSH
16851: LD_INT 12
16853: PUSH
16854: LD_INT 15
16856: PUSH
16857: LD_INT 16
16859: PUSH
16860: LD_INT 22
16862: PUSH
16863: LD_INT 23
16865: PUSH
16866: LD_INT 25
16868: PUSH
16869: LD_INT 26
16871: PUSH
16872: LD_INT 36
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 101
16893: PUSH
16894: LD_INT 102
16896: PUSH
16897: LD_INT 105
16899: PUSH
16900: LD_INT 106
16902: PUSH
16903: LD_INT 108
16905: PUSH
16906: LD_INT 109
16908: PUSH
16909: LD_INT 112
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: ST_TO_ADDR
16925: GO 19420
16927: LD_INT 6
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 17055
16935: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16936: LD_ADDR_VAR 0 1
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 4
16946: PUSH
16947: LD_INT 5
16949: PUSH
16950: LD_INT 6
16952: PUSH
16953: LD_INT 8
16955: PUSH
16956: LD_INT 11
16958: PUSH
16959: LD_INT 12
16961: PUSH
16962: LD_INT 15
16964: PUSH
16965: LD_INT 16
16967: PUSH
16968: LD_INT 20
16970: PUSH
16971: LD_INT 21
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_INT 23
16979: PUSH
16980: LD_INT 25
16982: PUSH
16983: LD_INT 26
16985: PUSH
16986: LD_INT 30
16988: PUSH
16989: LD_INT 31
16991: PUSH
16992: LD_INT 32
16994: PUSH
16995: LD_INT 36
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 101
17021: PUSH
17022: LD_INT 102
17024: PUSH
17025: LD_INT 105
17027: PUSH
17028: LD_INT 106
17030: PUSH
17031: LD_INT 108
17033: PUSH
17034: LD_INT 109
17036: PUSH
17037: LD_INT 112
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: ST_TO_ADDR
17053: GO 19420
17055: LD_INT 7
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17163
17063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 4
17074: PUSH
17075: LD_INT 5
17077: PUSH
17078: LD_INT 7
17080: PUSH
17081: LD_INT 11
17083: PUSH
17084: LD_INT 12
17086: PUSH
17087: LD_INT 15
17089: PUSH
17090: LD_INT 16
17092: PUSH
17093: LD_INT 20
17095: PUSH
17096: LD_INT 21
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_INT 23
17104: PUSH
17105: LD_INT 25
17107: PUSH
17108: LD_INT 26
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 101
17129: PUSH
17130: LD_INT 102
17132: PUSH
17133: LD_INT 103
17135: PUSH
17136: LD_INT 105
17138: PUSH
17139: LD_INT 106
17141: PUSH
17142: LD_INT 108
17144: PUSH
17145: LD_INT 112
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: ST_TO_ADDR
17161: GO 19420
17163: LD_INT 8
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17299
17171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17172: LD_ADDR_VAR 0 1
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 4
17182: PUSH
17183: LD_INT 5
17185: PUSH
17186: LD_INT 6
17188: PUSH
17189: LD_INT 7
17191: PUSH
17192: LD_INT 8
17194: PUSH
17195: LD_INT 11
17197: PUSH
17198: LD_INT 12
17200: PUSH
17201: LD_INT 15
17203: PUSH
17204: LD_INT 16
17206: PUSH
17207: LD_INT 20
17209: PUSH
17210: LD_INT 21
17212: PUSH
17213: LD_INT 22
17215: PUSH
17216: LD_INT 23
17218: PUSH
17219: LD_INT 25
17221: PUSH
17222: LD_INT 26
17224: PUSH
17225: LD_INT 30
17227: PUSH
17228: LD_INT 31
17230: PUSH
17231: LD_INT 32
17233: PUSH
17234: LD_INT 36
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 101
17261: PUSH
17262: LD_INT 102
17264: PUSH
17265: LD_INT 103
17267: PUSH
17268: LD_INT 105
17270: PUSH
17271: LD_INT 106
17273: PUSH
17274: LD_INT 108
17276: PUSH
17277: LD_INT 109
17279: PUSH
17280: LD_INT 112
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: ST_TO_ADDR
17297: GO 19420
17299: LD_INT 9
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17443
17307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 2
17315: PUSH
17316: LD_INT 4
17318: PUSH
17319: LD_INT 5
17321: PUSH
17322: LD_INT 6
17324: PUSH
17325: LD_INT 7
17327: PUSH
17328: LD_INT 8
17330: PUSH
17331: LD_INT 11
17333: PUSH
17334: LD_INT 12
17336: PUSH
17337: LD_INT 15
17339: PUSH
17340: LD_INT 16
17342: PUSH
17343: LD_INT 20
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 23
17354: PUSH
17355: LD_INT 25
17357: PUSH
17358: LD_INT 26
17360: PUSH
17361: LD_INT 28
17363: PUSH
17364: LD_INT 30
17366: PUSH
17367: LD_INT 31
17369: PUSH
17370: LD_INT 32
17372: PUSH
17373: LD_INT 36
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 101
17401: PUSH
17402: LD_INT 102
17404: PUSH
17405: LD_INT 103
17407: PUSH
17408: LD_INT 105
17410: PUSH
17411: LD_INT 106
17413: PUSH
17414: LD_INT 108
17416: PUSH
17417: LD_INT 109
17419: PUSH
17420: LD_INT 112
17422: PUSH
17423: LD_INT 114
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: ST_TO_ADDR
17441: GO 19420
17443: LD_INT 10
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17635
17451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 4
17462: PUSH
17463: LD_INT 5
17465: PUSH
17466: LD_INT 6
17468: PUSH
17469: LD_INT 7
17471: PUSH
17472: LD_INT 8
17474: PUSH
17475: LD_INT 9
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: LD_INT 11
17483: PUSH
17484: LD_INT 12
17486: PUSH
17487: LD_INT 13
17489: PUSH
17490: LD_INT 14
17492: PUSH
17493: LD_INT 15
17495: PUSH
17496: LD_INT 16
17498: PUSH
17499: LD_INT 17
17501: PUSH
17502: LD_INT 18
17504: PUSH
17505: LD_INT 19
17507: PUSH
17508: LD_INT 20
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 23
17519: PUSH
17520: LD_INT 24
17522: PUSH
17523: LD_INT 25
17525: PUSH
17526: LD_INT 26
17528: PUSH
17529: LD_INT 28
17531: PUSH
17532: LD_INT 30
17534: PUSH
17535: LD_INT 31
17537: PUSH
17538: LD_INT 32
17540: PUSH
17541: LD_INT 36
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 101
17577: PUSH
17578: LD_INT 102
17580: PUSH
17581: LD_INT 103
17583: PUSH
17584: LD_INT 104
17586: PUSH
17587: LD_INT 105
17589: PUSH
17590: LD_INT 106
17592: PUSH
17593: LD_INT 107
17595: PUSH
17596: LD_INT 108
17598: PUSH
17599: LD_INT 109
17601: PUSH
17602: LD_INT 110
17604: PUSH
17605: LD_INT 111
17607: PUSH
17608: LD_INT 112
17610: PUSH
17611: LD_INT 114
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: ST_TO_ADDR
17633: GO 19420
17635: LD_INT 11
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17835
17643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17644: LD_ADDR_VAR 0 1
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: LD_INT 4
17657: PUSH
17658: LD_INT 5
17660: PUSH
17661: LD_INT 6
17663: PUSH
17664: LD_INT 7
17666: PUSH
17667: LD_INT 8
17669: PUSH
17670: LD_INT 9
17672: PUSH
17673: LD_INT 10
17675: PUSH
17676: LD_INT 11
17678: PUSH
17679: LD_INT 12
17681: PUSH
17682: LD_INT 13
17684: PUSH
17685: LD_INT 14
17687: PUSH
17688: LD_INT 15
17690: PUSH
17691: LD_INT 16
17693: PUSH
17694: LD_INT 17
17696: PUSH
17697: LD_INT 18
17699: PUSH
17700: LD_INT 19
17702: PUSH
17703: LD_INT 20
17705: PUSH
17706: LD_INT 21
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_INT 23
17714: PUSH
17715: LD_INT 24
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 26
17723: PUSH
17724: LD_INT 28
17726: PUSH
17727: LD_INT 30
17729: PUSH
17730: LD_INT 31
17732: PUSH
17733: LD_INT 32
17735: PUSH
17736: LD_INT 34
17738: PUSH
17739: LD_INT 36
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 101
17777: PUSH
17778: LD_INT 102
17780: PUSH
17781: LD_INT 103
17783: PUSH
17784: LD_INT 104
17786: PUSH
17787: LD_INT 105
17789: PUSH
17790: LD_INT 106
17792: PUSH
17793: LD_INT 107
17795: PUSH
17796: LD_INT 108
17798: PUSH
17799: LD_INT 109
17801: PUSH
17802: LD_INT 110
17804: PUSH
17805: LD_INT 111
17807: PUSH
17808: LD_INT 112
17810: PUSH
17811: LD_INT 114
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: ST_TO_ADDR
17833: GO 19420
17835: LD_INT 12
17837: DOUBLE
17838: EQUAL
17839: IFTRUE 17843
17841: GO 18051
17843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17844: LD_ADDR_VAR 0 1
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 2
17854: PUSH
17855: LD_INT 3
17857: PUSH
17858: LD_INT 4
17860: PUSH
17861: LD_INT 5
17863: PUSH
17864: LD_INT 6
17866: PUSH
17867: LD_INT 7
17869: PUSH
17870: LD_INT 8
17872: PUSH
17873: LD_INT 9
17875: PUSH
17876: LD_INT 10
17878: PUSH
17879: LD_INT 11
17881: PUSH
17882: LD_INT 12
17884: PUSH
17885: LD_INT 13
17887: PUSH
17888: LD_INT 14
17890: PUSH
17891: LD_INT 15
17893: PUSH
17894: LD_INT 16
17896: PUSH
17897: LD_INT 17
17899: PUSH
17900: LD_INT 18
17902: PUSH
17903: LD_INT 19
17905: PUSH
17906: LD_INT 20
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_INT 23
17917: PUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 25
17923: PUSH
17924: LD_INT 26
17926: PUSH
17927: LD_INT 27
17929: PUSH
17930: LD_INT 28
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 31
17938: PUSH
17939: LD_INT 32
17941: PUSH
17942: LD_INT 33
17944: PUSH
17945: LD_INT 34
17947: PUSH
17948: LD_INT 36
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 101
17989: PUSH
17990: LD_INT 102
17992: PUSH
17993: LD_INT 103
17995: PUSH
17996: LD_INT 104
17998: PUSH
17999: LD_INT 105
18001: PUSH
18002: LD_INT 106
18004: PUSH
18005: LD_INT 107
18007: PUSH
18008: LD_INT 108
18010: PUSH
18011: LD_INT 109
18013: PUSH
18014: LD_INT 110
18016: PUSH
18017: LD_INT 111
18019: PUSH
18020: LD_INT 112
18022: PUSH
18023: LD_INT 113
18025: PUSH
18026: LD_INT 114
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: ST_TO_ADDR
18049: GO 19420
18051: LD_INT 13
18053: DOUBLE
18054: EQUAL
18055: IFTRUE 18059
18057: GO 18255
18059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18060: LD_ADDR_VAR 0 1
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: LD_INT 4
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: LD_INT 8
18082: PUSH
18083: LD_INT 9
18085: PUSH
18086: LD_INT 10
18088: PUSH
18089: LD_INT 11
18091: PUSH
18092: LD_INT 12
18094: PUSH
18095: LD_INT 14
18097: PUSH
18098: LD_INT 15
18100: PUSH
18101: LD_INT 16
18103: PUSH
18104: LD_INT 17
18106: PUSH
18107: LD_INT 18
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: LD_INT 20
18115: PUSH
18116: LD_INT 21
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 23
18124: PUSH
18125: LD_INT 24
18127: PUSH
18128: LD_INT 25
18130: PUSH
18131: LD_INT 26
18133: PUSH
18134: LD_INT 27
18136: PUSH
18137: LD_INT 28
18139: PUSH
18140: LD_INT 30
18142: PUSH
18143: LD_INT 31
18145: PUSH
18146: LD_INT 32
18148: PUSH
18149: LD_INT 33
18151: PUSH
18152: LD_INT 34
18154: PUSH
18155: LD_INT 36
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 101
18193: PUSH
18194: LD_INT 102
18196: PUSH
18197: LD_INT 103
18199: PUSH
18200: LD_INT 104
18202: PUSH
18203: LD_INT 105
18205: PUSH
18206: LD_INT 106
18208: PUSH
18209: LD_INT 107
18211: PUSH
18212: LD_INT 108
18214: PUSH
18215: LD_INT 109
18217: PUSH
18218: LD_INT 110
18220: PUSH
18221: LD_INT 111
18223: PUSH
18224: LD_INT 112
18226: PUSH
18227: LD_INT 113
18229: PUSH
18230: LD_INT 114
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: ST_TO_ADDR
18253: GO 19420
18255: LD_INT 14
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18475
18263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 4
18280: PUSH
18281: LD_INT 5
18283: PUSH
18284: LD_INT 6
18286: PUSH
18287: LD_INT 7
18289: PUSH
18290: LD_INT 8
18292: PUSH
18293: LD_INT 9
18295: PUSH
18296: LD_INT 10
18298: PUSH
18299: LD_INT 11
18301: PUSH
18302: LD_INT 12
18304: PUSH
18305: LD_INT 13
18307: PUSH
18308: LD_INT 14
18310: PUSH
18311: LD_INT 15
18313: PUSH
18314: LD_INT 16
18316: PUSH
18317: LD_INT 17
18319: PUSH
18320: LD_INT 18
18322: PUSH
18323: LD_INT 19
18325: PUSH
18326: LD_INT 20
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 22
18334: PUSH
18335: LD_INT 23
18337: PUSH
18338: LD_INT 24
18340: PUSH
18341: LD_INT 25
18343: PUSH
18344: LD_INT 26
18346: PUSH
18347: LD_INT 27
18349: PUSH
18350: LD_INT 28
18352: PUSH
18353: LD_INT 29
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 31
18361: PUSH
18362: LD_INT 32
18364: PUSH
18365: LD_INT 33
18367: PUSH
18368: LD_INT 34
18370: PUSH
18371: LD_INT 36
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 101
18413: PUSH
18414: LD_INT 102
18416: PUSH
18417: LD_INT 103
18419: PUSH
18420: LD_INT 104
18422: PUSH
18423: LD_INT 105
18425: PUSH
18426: LD_INT 106
18428: PUSH
18429: LD_INT 107
18431: PUSH
18432: LD_INT 108
18434: PUSH
18435: LD_INT 109
18437: PUSH
18438: LD_INT 110
18440: PUSH
18441: LD_INT 111
18443: PUSH
18444: LD_INT 112
18446: PUSH
18447: LD_INT 113
18449: PUSH
18450: LD_INT 114
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: ST_TO_ADDR
18473: GO 19420
18475: LD_INT 15
18477: DOUBLE
18478: EQUAL
18479: IFTRUE 18483
18481: GO 18695
18483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 3
18497: PUSH
18498: LD_INT 4
18500: PUSH
18501: LD_INT 5
18503: PUSH
18504: LD_INT 6
18506: PUSH
18507: LD_INT 7
18509: PUSH
18510: LD_INT 8
18512: PUSH
18513: LD_INT 9
18515: PUSH
18516: LD_INT 10
18518: PUSH
18519: LD_INT 11
18521: PUSH
18522: LD_INT 12
18524: PUSH
18525: LD_INT 13
18527: PUSH
18528: LD_INT 14
18530: PUSH
18531: LD_INT 15
18533: PUSH
18534: LD_INT 16
18536: PUSH
18537: LD_INT 17
18539: PUSH
18540: LD_INT 18
18542: PUSH
18543: LD_INT 19
18545: PUSH
18546: LD_INT 20
18548: PUSH
18549: LD_INT 21
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_INT 23
18557: PUSH
18558: LD_INT 24
18560: PUSH
18561: LD_INT 25
18563: PUSH
18564: LD_INT 26
18566: PUSH
18567: LD_INT 27
18569: PUSH
18570: LD_INT 28
18572: PUSH
18573: LD_INT 29
18575: PUSH
18576: LD_INT 30
18578: PUSH
18579: LD_INT 31
18581: PUSH
18582: LD_INT 32
18584: PUSH
18585: LD_INT 33
18587: PUSH
18588: LD_INT 34
18590: PUSH
18591: LD_INT 36
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 101
18633: PUSH
18634: LD_INT 102
18636: PUSH
18637: LD_INT 103
18639: PUSH
18640: LD_INT 104
18642: PUSH
18643: LD_INT 105
18645: PUSH
18646: LD_INT 106
18648: PUSH
18649: LD_INT 107
18651: PUSH
18652: LD_INT 108
18654: PUSH
18655: LD_INT 109
18657: PUSH
18658: LD_INT 110
18660: PUSH
18661: LD_INT 111
18663: PUSH
18664: LD_INT 112
18666: PUSH
18667: LD_INT 113
18669: PUSH
18670: LD_INT 114
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: ST_TO_ADDR
18693: GO 19420
18695: LD_INT 16
18697: DOUBLE
18698: EQUAL
18699: IFTRUE 18703
18701: GO 18827
18703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18704: LD_ADDR_VAR 0 1
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: LD_INT 4
18714: PUSH
18715: LD_INT 5
18717: PUSH
18718: LD_INT 7
18720: PUSH
18721: LD_INT 11
18723: PUSH
18724: LD_INT 12
18726: PUSH
18727: LD_INT 15
18729: PUSH
18730: LD_INT 16
18732: PUSH
18733: LD_INT 20
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 23
18744: PUSH
18745: LD_INT 25
18747: PUSH
18748: LD_INT 26
18750: PUSH
18751: LD_INT 30
18753: PUSH
18754: LD_INT 31
18756: PUSH
18757: LD_INT 32
18759: PUSH
18760: LD_INT 33
18762: PUSH
18763: LD_INT 34
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 101
18789: PUSH
18790: LD_INT 102
18792: PUSH
18793: LD_INT 103
18795: PUSH
18796: LD_INT 106
18798: PUSH
18799: LD_INT 108
18801: PUSH
18802: LD_INT 112
18804: PUSH
18805: LD_INT 113
18807: PUSH
18808: LD_INT 114
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: ST_TO_ADDR
18825: GO 19420
18827: LD_INT 17
18829: DOUBLE
18830: EQUAL
18831: IFTRUE 18835
18833: GO 19047
18835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18836: LD_ADDR_VAR 0 1
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: LD_INT 4
18852: PUSH
18853: LD_INT 5
18855: PUSH
18856: LD_INT 6
18858: PUSH
18859: LD_INT 7
18861: PUSH
18862: LD_INT 8
18864: PUSH
18865: LD_INT 9
18867: PUSH
18868: LD_INT 10
18870: PUSH
18871: LD_INT 11
18873: PUSH
18874: LD_INT 12
18876: PUSH
18877: LD_INT 13
18879: PUSH
18880: LD_INT 14
18882: PUSH
18883: LD_INT 15
18885: PUSH
18886: LD_INT 16
18888: PUSH
18889: LD_INT 17
18891: PUSH
18892: LD_INT 18
18894: PUSH
18895: LD_INT 19
18897: PUSH
18898: LD_INT 20
18900: PUSH
18901: LD_INT 21
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_INT 23
18909: PUSH
18910: LD_INT 24
18912: PUSH
18913: LD_INT 25
18915: PUSH
18916: LD_INT 26
18918: PUSH
18919: LD_INT 27
18921: PUSH
18922: LD_INT 28
18924: PUSH
18925: LD_INT 29
18927: PUSH
18928: LD_INT 30
18930: PUSH
18931: LD_INT 31
18933: PUSH
18934: LD_INT 32
18936: PUSH
18937: LD_INT 33
18939: PUSH
18940: LD_INT 34
18942: PUSH
18943: LD_INT 36
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 101
18985: PUSH
18986: LD_INT 102
18988: PUSH
18989: LD_INT 103
18991: PUSH
18992: LD_INT 104
18994: PUSH
18995: LD_INT 105
18997: PUSH
18998: LD_INT 106
19000: PUSH
19001: LD_INT 107
19003: PUSH
19004: LD_INT 108
19006: PUSH
19007: LD_INT 109
19009: PUSH
19010: LD_INT 110
19012: PUSH
19013: LD_INT 111
19015: PUSH
19016: LD_INT 112
19018: PUSH
19019: LD_INT 113
19021: PUSH
19022: LD_INT 114
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: ST_TO_ADDR
19045: GO 19420
19047: LD_INT 18
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19191
19055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19056: LD_ADDR_VAR 0 1
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 4
19066: PUSH
19067: LD_INT 5
19069: PUSH
19070: LD_INT 7
19072: PUSH
19073: LD_INT 11
19075: PUSH
19076: LD_INT 12
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: LD_INT 16
19084: PUSH
19085: LD_INT 20
19087: PUSH
19088: LD_INT 21
19090: PUSH
19091: LD_INT 22
19093: PUSH
19094: LD_INT 23
19096: PUSH
19097: LD_INT 25
19099: PUSH
19100: LD_INT 26
19102: PUSH
19103: LD_INT 30
19105: PUSH
19106: LD_INT 31
19108: PUSH
19109: LD_INT 32
19111: PUSH
19112: LD_INT 33
19114: PUSH
19115: LD_INT 34
19117: PUSH
19118: LD_INT 35
19120: PUSH
19121: LD_INT 36
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 101
19149: PUSH
19150: LD_INT 102
19152: PUSH
19153: LD_INT 103
19155: PUSH
19156: LD_INT 106
19158: PUSH
19159: LD_INT 108
19161: PUSH
19162: LD_INT 112
19164: PUSH
19165: LD_INT 113
19167: PUSH
19168: LD_INT 114
19170: PUSH
19171: LD_INT 115
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: ST_TO_ADDR
19189: GO 19420
19191: LD_INT 19
19193: DOUBLE
19194: EQUAL
19195: IFTRUE 19199
19197: GO 19419
19199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19200: LD_ADDR_VAR 0 1
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: LD_INT 3
19213: PUSH
19214: LD_INT 4
19216: PUSH
19217: LD_INT 5
19219: PUSH
19220: LD_INT 6
19222: PUSH
19223: LD_INT 7
19225: PUSH
19226: LD_INT 8
19228: PUSH
19229: LD_INT 9
19231: PUSH
19232: LD_INT 10
19234: PUSH
19235: LD_INT 11
19237: PUSH
19238: LD_INT 12
19240: PUSH
19241: LD_INT 13
19243: PUSH
19244: LD_INT 14
19246: PUSH
19247: LD_INT 15
19249: PUSH
19250: LD_INT 16
19252: PUSH
19253: LD_INT 17
19255: PUSH
19256: LD_INT 18
19258: PUSH
19259: LD_INT 19
19261: PUSH
19262: LD_INT 20
19264: PUSH
19265: LD_INT 21
19267: PUSH
19268: LD_INT 22
19270: PUSH
19271: LD_INT 23
19273: PUSH
19274: LD_INT 24
19276: PUSH
19277: LD_INT 25
19279: PUSH
19280: LD_INT 26
19282: PUSH
19283: LD_INT 27
19285: PUSH
19286: LD_INT 28
19288: PUSH
19289: LD_INT 29
19291: PUSH
19292: LD_INT 30
19294: PUSH
19295: LD_INT 31
19297: PUSH
19298: LD_INT 32
19300: PUSH
19301: LD_INT 33
19303: PUSH
19304: LD_INT 34
19306: PUSH
19307: LD_INT 35
19309: PUSH
19310: LD_INT 36
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 101
19353: PUSH
19354: LD_INT 102
19356: PUSH
19357: LD_INT 103
19359: PUSH
19360: LD_INT 104
19362: PUSH
19363: LD_INT 105
19365: PUSH
19366: LD_INT 106
19368: PUSH
19369: LD_INT 107
19371: PUSH
19372: LD_INT 108
19374: PUSH
19375: LD_INT 109
19377: PUSH
19378: LD_INT 110
19380: PUSH
19381: LD_INT 111
19383: PUSH
19384: LD_INT 112
19386: PUSH
19387: LD_INT 113
19389: PUSH
19390: LD_INT 114
19392: PUSH
19393: LD_INT 115
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: ST_TO_ADDR
19417: GO 19420
19419: POP
// end else
19420: GO 19639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19422: LD_ADDR_VAR 0 1
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: LD_INT 4
19438: PUSH
19439: LD_INT 5
19441: PUSH
19442: LD_INT 6
19444: PUSH
19445: LD_INT 7
19447: PUSH
19448: LD_INT 8
19450: PUSH
19451: LD_INT 9
19453: PUSH
19454: LD_INT 10
19456: PUSH
19457: LD_INT 11
19459: PUSH
19460: LD_INT 12
19462: PUSH
19463: LD_INT 13
19465: PUSH
19466: LD_INT 14
19468: PUSH
19469: LD_INT 15
19471: PUSH
19472: LD_INT 16
19474: PUSH
19475: LD_INT 17
19477: PUSH
19478: LD_INT 18
19480: PUSH
19481: LD_INT 19
19483: PUSH
19484: LD_INT 20
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 22
19492: PUSH
19493: LD_INT 23
19495: PUSH
19496: LD_INT 24
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 26
19504: PUSH
19505: LD_INT 27
19507: PUSH
19508: LD_INT 28
19510: PUSH
19511: LD_INT 29
19513: PUSH
19514: LD_INT 30
19516: PUSH
19517: LD_INT 31
19519: PUSH
19520: LD_INT 32
19522: PUSH
19523: LD_INT 33
19525: PUSH
19526: LD_INT 34
19528: PUSH
19529: LD_INT 35
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 101
19575: PUSH
19576: LD_INT 102
19578: PUSH
19579: LD_INT 103
19581: PUSH
19582: LD_INT 104
19584: PUSH
19585: LD_INT 105
19587: PUSH
19588: LD_INT 106
19590: PUSH
19591: LD_INT 107
19593: PUSH
19594: LD_INT 108
19596: PUSH
19597: LD_INT 109
19599: PUSH
19600: LD_INT 110
19602: PUSH
19603: LD_INT 111
19605: PUSH
19606: LD_INT 112
19608: PUSH
19609: LD_INT 113
19611: PUSH
19612: LD_INT 114
19614: PUSH
19615: LD_INT 115
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// if result then
19639: LD_VAR 0 1
19643: IFFALSE 19932
// begin normal :=  ;
19645: LD_ADDR_VAR 0 3
19649: PUSH
19650: LD_STRING 
19652: ST_TO_ADDR
// hardcore :=  ;
19653: LD_ADDR_VAR 0 4
19657: PUSH
19658: LD_STRING 
19660: ST_TO_ADDR
// for i = 1 to normalCounter do
19661: LD_ADDR_VAR 0 5
19665: PUSH
19666: DOUBLE
19667: LD_INT 1
19669: DEC
19670: ST_TO_ADDR
19671: LD_EXP 47
19675: PUSH
19676: FOR_TO
19677: IFFALSE 19778
// begin tmp := 0 ;
19679: LD_ADDR_VAR 0 2
19683: PUSH
19684: LD_STRING 0
19686: ST_TO_ADDR
// if result [ 1 ] then
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: IFFALSE 19760
// if result [ 1 ] [ 1 ] = i then
19697: LD_VAR 0 1
19701: PUSH
19702: LD_INT 1
19704: ARRAY
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PUSH
19710: LD_VAR 0 5
19714: EQUAL
19715: IFFALSE 19760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19717: LD_ADDR_VAR 0 1
19721: PUSH
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_INT 1
19729: PPUSH
19730: LD_VAR 0 1
19734: PUSH
19735: LD_INT 1
19737: ARRAY
19738: PPUSH
19739: LD_INT 1
19741: PPUSH
19742: CALL_OW 3
19746: PPUSH
19747: CALL_OW 1
19751: ST_TO_ADDR
// tmp := 1 ;
19752: LD_ADDR_VAR 0 2
19756: PUSH
19757: LD_STRING 1
19759: ST_TO_ADDR
// end ; normal := normal & tmp ;
19760: LD_ADDR_VAR 0 3
19764: PUSH
19765: LD_VAR 0 3
19769: PUSH
19770: LD_VAR 0 2
19774: STR
19775: ST_TO_ADDR
// end ;
19776: GO 19676
19778: POP
19779: POP
// for i = 1 to hardcoreCounter do
19780: LD_ADDR_VAR 0 5
19784: PUSH
19785: DOUBLE
19786: LD_INT 1
19788: DEC
19789: ST_TO_ADDR
19790: LD_EXP 48
19794: PUSH
19795: FOR_TO
19796: IFFALSE 19901
// begin tmp := 0 ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_STRING 0
19805: ST_TO_ADDR
// if result [ 2 ] then
19806: LD_VAR 0 1
19810: PUSH
19811: LD_INT 2
19813: ARRAY
19814: IFFALSE 19883
// if result [ 2 ] [ 1 ] = 100 + i then
19816: LD_VAR 0 1
19820: PUSH
19821: LD_INT 2
19823: ARRAY
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: PUSH
19829: LD_INT 100
19831: PUSH
19832: LD_VAR 0 5
19836: PLUS
19837: EQUAL
19838: IFFALSE 19883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_VAR 0 1
19849: PPUSH
19850: LD_INT 2
19852: PPUSH
19853: LD_VAR 0 1
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: PPUSH
19862: LD_INT 1
19864: PPUSH
19865: CALL_OW 3
19869: PPUSH
19870: CALL_OW 1
19874: ST_TO_ADDR
// tmp := 1 ;
19875: LD_ADDR_VAR 0 2
19879: PUSH
19880: LD_STRING 1
19882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19883: LD_ADDR_VAR 0 4
19887: PUSH
19888: LD_VAR 0 4
19892: PUSH
19893: LD_VAR 0 2
19897: STR
19898: ST_TO_ADDR
// end ;
19899: GO 19795
19901: POP
19902: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19903: LD_STRING getStreamItemsFromMission("
19905: PUSH
19906: LD_VAR 0 3
19910: STR
19911: PUSH
19912: LD_STRING ","
19914: STR
19915: PUSH
19916: LD_VAR 0 4
19920: STR
19921: PUSH
19922: LD_STRING ")
19924: STR
19925: PPUSH
19926: CALL_OW 559
// end else
19930: GO 19939
// ToLua ( getStreamItemsFromMission("","") ) ;
19932: LD_STRING getStreamItemsFromMission("","")
19934: PPUSH
19935: CALL_OW 559
// end ;
19939: LD_VAR 0 1
19943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19944: LD_EXP 46
19948: PUSH
19949: LD_EXP 51
19953: AND
19954: IFFALSE 20078
19956: GO 19958
19958: DISABLE
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
// begin enable ;
19963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_OWVAR 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 34
19986: PUSH
19987: LD_INT 7
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 34
19996: PUSH
19997: LD_INT 45
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 34
20006: PUSH
20007: LD_INT 28
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 34
20016: PUSH
20017: LD_INT 47
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 2
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20078
// for i in tmp do
20049: LD_ADDR_VAR 0 1
20053: PUSH
20054: LD_VAR 0 2
20058: PUSH
20059: FOR_IN
20060: IFFALSE 20076
// begin SetLives ( i , 0 ) ;
20062: LD_VAR 0 1
20066: PPUSH
20067: LD_INT 0
20069: PPUSH
20070: CALL_OW 234
// end ;
20074: GO 20059
20076: POP
20077: POP
// end ;
20078: PPOPN 2
20080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20081: LD_EXP 46
20085: PUSH
20086: LD_EXP 52
20090: AND
20091: IFFALSE 20175
20093: GO 20095
20095: DISABLE
20096: LD_INT 0
20098: PPUSH
20099: PPUSH
// begin enable ;
20100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20101: LD_ADDR_VAR 0 2
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_OWVAR 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 32
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: ST_TO_ADDR
// if not tmp then
20137: LD_VAR 0 2
20141: NOT
20142: IFFALSE 20146
// exit ;
20144: GO 20175
// for i in tmp do
20146: LD_ADDR_VAR 0 1
20150: PUSH
20151: LD_VAR 0 2
20155: PUSH
20156: FOR_IN
20157: IFFALSE 20173
// begin SetLives ( i , 0 ) ;
20159: LD_VAR 0 1
20163: PPUSH
20164: LD_INT 0
20166: PPUSH
20167: CALL_OW 234
// end ;
20171: GO 20156
20173: POP
20174: POP
// end ;
20175: PPOPN 2
20177: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20178: LD_EXP 46
20182: PUSH
20183: LD_EXP 49
20187: AND
20188: IFFALSE 20281
20190: GO 20192
20192: DISABLE
20193: LD_INT 0
20195: PPUSH
// begin enable ;
20196: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20197: LD_ADDR_VAR 0 1
20201: PUSH
20202: LD_INT 22
20204: PUSH
20205: LD_OWVAR 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: LD_INT 25
20219: PUSH
20220: LD_INT 5
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 25
20229: PUSH
20230: LD_INT 9
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 25
20239: PUSH
20240: LD_INT 8
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PPUSH
20257: CALL_OW 69
20261: PUSH
20262: FOR_IN
20263: IFFALSE 20279
// begin SetClass ( i , 1 ) ;
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 336
// end ;
20277: GO 20262
20279: POP
20280: POP
// end ;
20281: PPOPN 1
20283: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20284: LD_EXP 46
20288: PUSH
20289: LD_EXP 50
20293: AND
20294: PUSH
20295: LD_OWVAR 65
20299: PUSH
20300: LD_INT 7
20302: LESS
20303: AND
20304: IFFALSE 20318
20306: GO 20308
20308: DISABLE
// begin enable ;
20309: ENABLE
// game_speed := 7 ;
20310: LD_ADDR_OWVAR 65
20314: PUSH
20315: LD_INT 7
20317: ST_TO_ADDR
// end ;
20318: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20319: LD_EXP 46
20323: PUSH
20324: LD_EXP 53
20328: AND
20329: IFFALSE 20531
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20339: LD_ADDR_VAR 0 3
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 21
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: ST_TO_ADDR
// if not tmp then
20375: LD_VAR 0 3
20379: NOT
20380: IFFALSE 20384
// exit ;
20382: GO 20531
// if tmp > 5 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 5
20391: GREATER
20392: IFFALSE 20404
// k := 5 else
20394: LD_ADDR_VAR 0 2
20398: PUSH
20399: LD_INT 5
20401: ST_TO_ADDR
20402: GO 20414
// k := tmp ;
20404: LD_ADDR_VAR 0 2
20408: PUSH
20409: LD_VAR 0 3
20413: ST_TO_ADDR
// for i := 1 to k do
20414: LD_ADDR_VAR 0 1
20418: PUSH
20419: DOUBLE
20420: LD_INT 1
20422: DEC
20423: ST_TO_ADDR
20424: LD_VAR 0 2
20428: PUSH
20429: FOR_TO
20430: IFFALSE 20529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_VAR 0 1
20441: ARRAY
20442: PPUSH
20443: LD_VAR 0 1
20447: PUSH
20448: LD_INT 4
20450: MOD
20451: PUSH
20452: LD_INT 1
20454: PLUS
20455: PPUSH
20456: CALL_OW 259
20460: PUSH
20461: LD_INT 10
20463: LESS
20464: IFFALSE 20527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20466: LD_VAR 0 3
20470: PUSH
20471: LD_VAR 0 1
20475: ARRAY
20476: PPUSH
20477: LD_VAR 0 1
20481: PUSH
20482: LD_INT 4
20484: MOD
20485: PUSH
20486: LD_INT 1
20488: PLUS
20489: PPUSH
20490: LD_VAR 0 3
20494: PUSH
20495: LD_VAR 0 1
20499: ARRAY
20500: PPUSH
20501: LD_VAR 0 1
20505: PUSH
20506: LD_INT 4
20508: MOD
20509: PUSH
20510: LD_INT 1
20512: PLUS
20513: PPUSH
20514: CALL_OW 259
20518: PUSH
20519: LD_INT 1
20521: PLUS
20522: PPUSH
20523: CALL_OW 237
20527: GO 20429
20529: POP
20530: POP
// end ;
20531: PPOPN 3
20533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20534: LD_EXP 46
20538: PUSH
20539: LD_EXP 54
20543: AND
20544: IFFALSE 20564
20546: GO 20548
20548: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20549: LD_INT 4
20551: PPUSH
20552: LD_OWVAR 2
20556: PPUSH
20557: LD_INT 0
20559: PPUSH
20560: CALL_OW 324
20564: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20565: LD_EXP 46
20569: PUSH
20570: LD_EXP 83
20574: AND
20575: IFFALSE 20595
20577: GO 20579
20579: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20580: LD_INT 19
20582: PPUSH
20583: LD_OWVAR 2
20587: PPUSH
20588: LD_INT 0
20590: PPUSH
20591: CALL_OW 324
20595: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20596: LD_EXP 46
20600: PUSH
20601: LD_EXP 55
20605: AND
20606: IFFALSE 20708
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
// begin enable ;
20615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20616: LD_ADDR_VAR 0 2
20620: PUSH
20621: LD_INT 22
20623: PUSH
20624: LD_OWVAR 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 34
20638: PUSH
20639: LD_INT 11
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 34
20648: PUSH
20649: LD_INT 30
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PPUSH
20665: CALL_OW 69
20669: ST_TO_ADDR
// if not tmp then
20670: LD_VAR 0 2
20674: NOT
20675: IFFALSE 20679
// exit ;
20677: GO 20708
// for i in tmp do
20679: LD_ADDR_VAR 0 1
20683: PUSH
20684: LD_VAR 0 2
20688: PUSH
20689: FOR_IN
20690: IFFALSE 20706
// begin SetLives ( i , 0 ) ;
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_INT 0
20699: PPUSH
20700: CALL_OW 234
// end ;
20704: GO 20689
20706: POP
20707: POP
// end ;
20708: PPOPN 2
20710: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20711: LD_EXP 46
20715: PUSH
20716: LD_EXP 56
20720: AND
20721: IFFALSE 20741
20723: GO 20725
20725: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20726: LD_INT 32
20728: PPUSH
20729: LD_OWVAR 2
20733: PPUSH
20734: LD_INT 0
20736: PPUSH
20737: CALL_OW 324
20741: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20742: LD_EXP 46
20746: PUSH
20747: LD_EXP 57
20751: AND
20752: IFFALSE 20933
20754: GO 20756
20756: DISABLE
20757: LD_INT 0
20759: PPUSH
20760: PPUSH
20761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20762: LD_ADDR_VAR 0 2
20766: PUSH
20767: LD_INT 22
20769: PUSH
20770: LD_OWVAR 2
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 33
20781: PUSH
20782: LD_INT 3
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PPUSH
20793: CALL_OW 69
20797: ST_TO_ADDR
// if not tmp then
20798: LD_VAR 0 2
20802: NOT
20803: IFFALSE 20807
// exit ;
20805: GO 20933
// side := 0 ;
20807: LD_ADDR_VAR 0 3
20811: PUSH
20812: LD_INT 0
20814: ST_TO_ADDR
// for i := 1 to 8 do
20815: LD_ADDR_VAR 0 1
20819: PUSH
20820: DOUBLE
20821: LD_INT 1
20823: DEC
20824: ST_TO_ADDR
20825: LD_INT 8
20827: PUSH
20828: FOR_TO
20829: IFFALSE 20877
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20831: LD_OWVAR 2
20835: PUSH
20836: LD_VAR 0 1
20840: NONEQUAL
20841: PUSH
20842: LD_OWVAR 2
20846: PPUSH
20847: LD_VAR 0 1
20851: PPUSH
20852: CALL_OW 81
20856: PUSH
20857: LD_INT 2
20859: EQUAL
20860: AND
20861: IFFALSE 20875
// begin side := i ;
20863: LD_ADDR_VAR 0 3
20867: PUSH
20868: LD_VAR 0 1
20872: ST_TO_ADDR
// break ;
20873: GO 20877
// end ;
20875: GO 20828
20877: POP
20878: POP
// if not side then
20879: LD_VAR 0 3
20883: NOT
20884: IFFALSE 20888
// exit ;
20886: GO 20933
// for i := 1 to tmp do
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: DOUBLE
20894: LD_INT 1
20896: DEC
20897: ST_TO_ADDR
20898: LD_VAR 0 2
20902: PUSH
20903: FOR_TO
20904: IFFALSE 20931
// if Prob ( 60 ) then
20906: LD_INT 60
20908: PPUSH
20909: CALL_OW 13
20913: IFFALSE 20929
// SetSide ( i , side ) ;
20915: LD_VAR 0 1
20919: PPUSH
20920: LD_VAR 0 3
20924: PPUSH
20925: CALL_OW 235
20929: GO 20903
20931: POP
20932: POP
// end ;
20933: PPOPN 3
20935: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20936: LD_EXP 46
20940: PUSH
20941: LD_EXP 59
20945: AND
20946: IFFALSE 21065
20948: GO 20950
20950: DISABLE
20951: LD_INT 0
20953: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 21
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: LD_INT 23
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: PUSH
21008: FOR_IN
21009: IFFALSE 21063
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 257
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 4
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: IN
21039: IFFALSE 21061
// SetClass ( un , rand ( 1 , 4 ) ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: LD_INT 4
21051: PPUSH
21052: CALL_OW 12
21056: PPUSH
21057: CALL_OW 336
21061: GO 21008
21063: POP
21064: POP
// end ;
21065: PPOPN 1
21067: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21068: LD_EXP 46
21072: PUSH
21073: LD_EXP 58
21077: AND
21078: IFFALSE 21157
21080: GO 21082
21082: DISABLE
21083: LD_INT 0
21085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21086: LD_ADDR_VAR 0 1
21090: PUSH
21091: LD_INT 22
21093: PUSH
21094: LD_OWVAR 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 21
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: ST_TO_ADDR
// if not tmp then
21122: LD_VAR 0 1
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21131: LD_VAR 0 1
21135: PUSH
21136: LD_INT 1
21138: PPUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 12
21148: ARRAY
21149: PPUSH
21150: LD_INT 100
21152: PPUSH
21153: CALL_OW 234
// end ;
21157: PPOPN 1
21159: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21160: LD_EXP 46
21164: PUSH
21165: LD_EXP 60
21169: AND
21170: IFFALSE 21268
21172: GO 21174
21174: DISABLE
21175: LD_INT 0
21177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21178: LD_ADDR_VAR 0 1
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: ST_TO_ADDR
// if not tmp then
21214: LD_VAR 0 1
21218: NOT
21219: IFFALSE 21223
// exit ;
21221: GO 21268
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21223: LD_VAR 0 1
21227: PUSH
21228: LD_INT 1
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 12
21240: ARRAY
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: LD_INT 4
21247: PPUSH
21248: CALL_OW 12
21252: PPUSH
21253: LD_INT 3000
21255: PPUSH
21256: LD_INT 9000
21258: PPUSH
21259: CALL_OW 12
21263: PPUSH
21264: CALL_OW 492
// end ;
21268: PPOPN 1
21270: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21271: LD_EXP 46
21275: PUSH
21276: LD_EXP 61
21280: AND
21281: IFFALSE 21301
21283: GO 21285
21285: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21286: LD_INT 1
21288: PPUSH
21289: LD_OWVAR 2
21293: PPUSH
21294: LD_INT 0
21296: PPUSH
21297: CALL_OW 324
21301: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21302: LD_EXP 46
21306: PUSH
21307: LD_EXP 62
21311: AND
21312: IFFALSE 21395
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 22
21328: PUSH
21329: LD_OWVAR 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 21
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: ST_TO_ADDR
// if not tmp then
21357: LD_VAR 0 2
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21395
// for i in tmp do
21366: LD_ADDR_VAR 0 1
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: FOR_IN
21377: IFFALSE 21393
// SetBLevel ( i , 10 ) ;
21379: LD_VAR 0 1
21383: PPUSH
21384: LD_INT 10
21386: PPUSH
21387: CALL_OW 241
21391: GO 21376
21393: POP
21394: POP
// end ;
21395: PPOPN 2
21397: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21398: LD_EXP 46
21402: PUSH
21403: LD_EXP 63
21407: AND
21408: IFFALSE 21519
21410: GO 21412
21412: DISABLE
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21418: LD_ADDR_VAR 0 3
21422: PUSH
21423: LD_INT 22
21425: PUSH
21426: LD_OWVAR 2
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 25
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 69
21453: ST_TO_ADDR
// if not tmp then
21454: LD_VAR 0 3
21458: NOT
21459: IFFALSE 21463
// exit ;
21461: GO 21519
// un := tmp [ rand ( 1 , tmp ) ] ;
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: LD_VAR 0 3
21472: PUSH
21473: LD_INT 1
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: CALL_OW 12
21485: ARRAY
21486: ST_TO_ADDR
// if Crawls ( un ) then
21487: LD_VAR 0 2
21491: PPUSH
21492: CALL_OW 318
21496: IFFALSE 21507
// ComWalk ( un ) ;
21498: LD_VAR 0 2
21502: PPUSH
21503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21507: LD_VAR 0 2
21511: PPUSH
21512: LD_INT 5
21514: PPUSH
21515: CALL_OW 336
// end ;
21519: PPOPN 3
21521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21522: LD_EXP 46
21526: PUSH
21527: LD_EXP 64
21531: AND
21532: PUSH
21533: LD_OWVAR 67
21537: PUSH
21538: LD_INT 3
21540: LESS
21541: AND
21542: IFFALSE 21561
21544: GO 21546
21546: DISABLE
// Difficulty := Difficulty + 1 ;
21547: LD_ADDR_OWVAR 67
21551: PUSH
21552: LD_OWVAR 67
21556: PUSH
21557: LD_INT 1
21559: PLUS
21560: ST_TO_ADDR
21561: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21562: LD_EXP 46
21566: PUSH
21567: LD_EXP 65
21571: AND
21572: IFFALSE 21675
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
// begin for i := 1 to 5 do
21580: LD_ADDR_VAR 0 1
21584: PUSH
21585: DOUBLE
21586: LD_INT 1
21588: DEC
21589: ST_TO_ADDR
21590: LD_INT 5
21592: PUSH
21593: FOR_TO
21594: IFFALSE 21673
// begin uc_nation := nation_nature ;
21596: LD_ADDR_OWVAR 21
21600: PUSH
21601: LD_INT 0
21603: ST_TO_ADDR
// uc_side := 0 ;
21604: LD_ADDR_OWVAR 20
21608: PUSH
21609: LD_INT 0
21611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21612: LD_ADDR_OWVAR 29
21616: PUSH
21617: LD_INT 12
21619: PUSH
21620: LD_INT 12
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: ST_TO_ADDR
// hc_agressivity := 20 ;
21627: LD_ADDR_OWVAR 35
21631: PUSH
21632: LD_INT 20
21634: ST_TO_ADDR
// hc_class := class_tiger ;
21635: LD_ADDR_OWVAR 28
21639: PUSH
21640: LD_INT 14
21642: ST_TO_ADDR
// hc_gallery :=  ;
21643: LD_ADDR_OWVAR 33
21647: PUSH
21648: LD_STRING 
21650: ST_TO_ADDR
// hc_name :=  ;
21651: LD_ADDR_OWVAR 26
21655: PUSH
21656: LD_STRING 
21658: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21659: CALL_OW 44
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: CALL_OW 51
// end ;
21671: GO 21593
21673: POP
21674: POP
// end ;
21675: PPOPN 1
21677: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21678: LD_EXP 46
21682: PUSH
21683: LD_EXP 66
21687: AND
21688: IFFALSE 21697
21690: GO 21692
21692: DISABLE
// StreamSibBomb ;
21693: CALL 21698 0 0
21697: END
// export function StreamSibBomb ; var i , x , y ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
// result := false ;
21704: LD_ADDR_VAR 0 1
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// for i := 1 to 16 do
21712: LD_ADDR_VAR 0 2
21716: PUSH
21717: DOUBLE
21718: LD_INT 1
21720: DEC
21721: ST_TO_ADDR
21722: LD_INT 16
21724: PUSH
21725: FOR_TO
21726: IFFALSE 21925
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21728: LD_ADDR_VAR 0 3
21732: PUSH
21733: LD_INT 10
21735: PUSH
21736: LD_INT 20
21738: PUSH
21739: LD_INT 30
21741: PUSH
21742: LD_INT 40
21744: PUSH
21745: LD_INT 50
21747: PUSH
21748: LD_INT 60
21750: PUSH
21751: LD_INT 70
21753: PUSH
21754: LD_INT 80
21756: PUSH
21757: LD_INT 90
21759: PUSH
21760: LD_INT 100
21762: PUSH
21763: LD_INT 110
21765: PUSH
21766: LD_INT 120
21768: PUSH
21769: LD_INT 130
21771: PUSH
21772: LD_INT 140
21774: PUSH
21775: LD_INT 150
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 15
21800: PPUSH
21801: CALL_OW 12
21805: ARRAY
21806: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21807: LD_ADDR_VAR 0 4
21811: PUSH
21812: LD_INT 10
21814: PUSH
21815: LD_INT 20
21817: PUSH
21818: LD_INT 30
21820: PUSH
21821: LD_INT 40
21823: PUSH
21824: LD_INT 50
21826: PUSH
21827: LD_INT 60
21829: PUSH
21830: LD_INT 70
21832: PUSH
21833: LD_INT 80
21835: PUSH
21836: LD_INT 90
21838: PUSH
21839: LD_INT 100
21841: PUSH
21842: LD_INT 110
21844: PUSH
21845: LD_INT 120
21847: PUSH
21848: LD_INT 130
21850: PUSH
21851: LD_INT 140
21853: PUSH
21854: LD_INT 150
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: PPUSH
21877: LD_INT 15
21879: PPUSH
21880: CALL_OW 12
21884: ARRAY
21885: ST_TO_ADDR
// if ValidHex ( x , y ) then
21886: LD_VAR 0 3
21890: PPUSH
21891: LD_VAR 0 4
21895: PPUSH
21896: CALL_OW 488
21900: IFFALSE 21923
// begin result := [ x , y ] ;
21902: LD_ADDR_VAR 0 1
21906: PUSH
21907: LD_VAR 0 3
21911: PUSH
21912: LD_VAR 0 4
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: ST_TO_ADDR
// break ;
21921: GO 21925
// end ; end ;
21923: GO 21725
21925: POP
21926: POP
// if result then
21927: LD_VAR 0 1
21931: IFFALSE 21991
// begin ToLua ( playSibBomb() ) ;
21933: LD_STRING playSibBomb()
21935: PPUSH
21936: CALL_OW 559
// wait ( 0 0$14 ) ;
21940: LD_INT 490
21942: PPUSH
21943: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21947: LD_VAR 0 1
21951: PUSH
21952: LD_INT 1
21954: ARRAY
21955: PPUSH
21956: LD_VAR 0 1
21960: PUSH
21961: LD_INT 2
21963: ARRAY
21964: PPUSH
21965: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21969: LD_VAR 0 1
21973: PUSH
21974: LD_INT 1
21976: ARRAY
21977: PPUSH
21978: LD_VAR 0 1
21982: PUSH
21983: LD_INT 2
21985: ARRAY
21986: PPUSH
21987: CALL_OW 429
// end ; end ;
21991: LD_VAR 0 1
21995: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21996: LD_EXP 46
22000: PUSH
22001: LD_EXP 68
22005: AND
22006: IFFALSE 22018
22008: GO 22010
22010: DISABLE
// YouLost (  ) ;
22011: LD_STRING 
22013: PPUSH
22014: CALL_OW 104
22018: END
// every 0 0$1 trigger StreamModeActive and sFog do
22019: LD_EXP 46
22023: PUSH
22024: LD_EXP 67
22028: AND
22029: IFFALSE 22043
22031: GO 22033
22033: DISABLE
// FogOff ( your_side ) ;
22034: LD_OWVAR 2
22038: PPUSH
22039: CALL_OW 344
22043: END
// every 0 0$1 trigger StreamModeActive and sSun do
22044: LD_EXP 46
22048: PUSH
22049: LD_EXP 69
22053: AND
22054: IFFALSE 22082
22056: GO 22058
22058: DISABLE
// begin solar_recharge_percent := 0 ;
22059: LD_ADDR_OWVAR 79
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22067: LD_INT 10500
22069: PPUSH
22070: CALL_OW 67
// solar_recharge_percent := 100 ;
22074: LD_ADDR_OWVAR 79
22078: PUSH
22079: LD_INT 100
22081: ST_TO_ADDR
// end ;
22082: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22083: LD_EXP 46
22087: PUSH
22088: LD_EXP 70
22092: AND
22093: IFFALSE 22332
22095: GO 22097
22097: DISABLE
22098: LD_INT 0
22100: PPUSH
22101: PPUSH
22102: PPUSH
// begin tmp := [ ] ;
22103: LD_ADDR_VAR 0 3
22107: PUSH
22108: EMPTY
22109: ST_TO_ADDR
// for i := 1 to 6 do
22110: LD_ADDR_VAR 0 1
22114: PUSH
22115: DOUBLE
22116: LD_INT 1
22118: DEC
22119: ST_TO_ADDR
22120: LD_INT 6
22122: PUSH
22123: FOR_TO
22124: IFFALSE 22229
// begin uc_nation := nation_nature ;
22126: LD_ADDR_OWVAR 21
22130: PUSH
22131: LD_INT 0
22133: ST_TO_ADDR
// uc_side := 0 ;
22134: LD_ADDR_OWVAR 20
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22142: LD_ADDR_OWVAR 29
22146: PUSH
22147: LD_INT 12
22149: PUSH
22150: LD_INT 12
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// hc_agressivity := 20 ;
22157: LD_ADDR_OWVAR 35
22161: PUSH
22162: LD_INT 20
22164: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22165: LD_ADDR_OWVAR 28
22169: PUSH
22170: LD_INT 17
22172: ST_TO_ADDR
// hc_gallery :=  ;
22173: LD_ADDR_OWVAR 33
22177: PUSH
22178: LD_STRING 
22180: ST_TO_ADDR
// hc_name :=  ;
22181: LD_ADDR_OWVAR 26
22185: PUSH
22186: LD_STRING 
22188: ST_TO_ADDR
// un := CreateHuman ;
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: CALL_OW 44
22198: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22199: LD_VAR 0 2
22203: PPUSH
22204: LD_INT 1
22206: PPUSH
22207: CALL_OW 51
// tmp := tmp ^ un ;
22211: LD_ADDR_VAR 0 3
22215: PUSH
22216: LD_VAR 0 3
22220: PUSH
22221: LD_VAR 0 2
22225: ADD
22226: ST_TO_ADDR
// end ;
22227: GO 22123
22229: POP
22230: POP
// repeat wait ( 0 0$1 ) ;
22231: LD_INT 35
22233: PPUSH
22234: CALL_OW 67
// for un in tmp do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_VAR 0 3
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22323
// begin if IsDead ( un ) then
22251: LD_VAR 0 2
22255: PPUSH
22256: CALL_OW 301
22260: IFFALSE 22280
// begin tmp := tmp diff un ;
22262: LD_ADDR_VAR 0 3
22266: PUSH
22267: LD_VAR 0 3
22271: PUSH
22272: LD_VAR 0 2
22276: DIFF
22277: ST_TO_ADDR
// continue ;
22278: GO 22248
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22280: LD_VAR 0 2
22284: PPUSH
22285: LD_INT 3
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: PPUSH
22307: LD_VAR 0 2
22311: PPUSH
22312: CALL_OW 74
22316: PPUSH
22317: CALL_OW 115
// end ;
22321: GO 22248
22323: POP
22324: POP
// until not tmp ;
22325: LD_VAR 0 3
22329: NOT
22330: IFFALSE 22231
// end ;
22332: PPOPN 3
22334: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22335: LD_EXP 46
22339: PUSH
22340: LD_EXP 71
22344: AND
22345: IFFALSE 22399
22347: GO 22349
22349: DISABLE
// begin ToLua ( displayTroll(); ) ;
22350: LD_STRING displayTroll();
22352: PPUSH
22353: CALL_OW 559
// wait ( 3 3$00 ) ;
22357: LD_INT 6300
22359: PPUSH
22360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22364: LD_STRING hideTroll();
22366: PPUSH
22367: CALL_OW 559
// wait ( 1 1$00 ) ;
22371: LD_INT 2100
22373: PPUSH
22374: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22378: LD_STRING displayTroll();
22380: PPUSH
22381: CALL_OW 559
// wait ( 1 1$00 ) ;
22385: LD_INT 2100
22387: PPUSH
22388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22392: LD_STRING hideTroll();
22394: PPUSH
22395: CALL_OW 559
// end ;
22399: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22400: LD_EXP 46
22404: PUSH
22405: LD_EXP 72
22409: AND
22410: IFFALSE 22473
22412: GO 22414
22414: DISABLE
22415: LD_INT 0
22417: PPUSH
// begin p := 0 ;
22418: LD_ADDR_VAR 0 1
22422: PUSH
22423: LD_INT 0
22425: ST_TO_ADDR
// repeat game_speed := 1 ;
22426: LD_ADDR_OWVAR 65
22430: PUSH
22431: LD_INT 1
22433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22434: LD_INT 35
22436: PPUSH
22437: CALL_OW 67
// p := p + 1 ;
22441: LD_ADDR_VAR 0 1
22445: PUSH
22446: LD_VAR 0 1
22450: PUSH
22451: LD_INT 1
22453: PLUS
22454: ST_TO_ADDR
// until p >= 60 ;
22455: LD_VAR 0 1
22459: PUSH
22460: LD_INT 60
22462: GREATEREQUAL
22463: IFFALSE 22426
// game_speed := 4 ;
22465: LD_ADDR_OWVAR 65
22469: PUSH
22470: LD_INT 4
22472: ST_TO_ADDR
// end ;
22473: PPOPN 1
22475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22476: LD_EXP 46
22480: PUSH
22481: LD_EXP 73
22485: AND
22486: IFFALSE 22632
22488: GO 22490
22490: DISABLE
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22495: LD_ADDR_VAR 0 1
22499: PUSH
22500: LD_INT 22
22502: PUSH
22503: LD_OWVAR 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 30
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 69
22548: ST_TO_ADDR
// if not depot then
22549: LD_VAR 0 1
22553: NOT
22554: IFFALSE 22558
// exit ;
22556: GO 22632
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22558: LD_ADDR_VAR 0 2
22562: PUSH
22563: LD_VAR 0 1
22567: PUSH
22568: LD_INT 1
22570: PPUSH
22571: LD_VAR 0 1
22575: PPUSH
22576: CALL_OW 12
22580: ARRAY
22581: PPUSH
22582: CALL_OW 274
22586: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22587: LD_VAR 0 2
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: LD_INT 0
22597: PPUSH
22598: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 2
22609: PPUSH
22610: LD_INT 0
22612: PPUSH
22613: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_INT 3
22624: PPUSH
22625: LD_INT 0
22627: PPUSH
22628: CALL_OW 277
// end ;
22632: PPOPN 2
22634: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22635: LD_EXP 46
22639: PUSH
22640: LD_EXP 74
22644: AND
22645: IFFALSE 22742
22647: GO 22649
22649: DISABLE
22650: LD_INT 0
22652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22653: LD_ADDR_VAR 0 1
22657: PUSH
22658: LD_INT 22
22660: PUSH
22661: LD_OWVAR 2
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 21
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 23
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: PPUSH
22702: CALL_OW 69
22706: ST_TO_ADDR
// if not tmp then
22707: LD_VAR 0 1
22711: NOT
22712: IFFALSE 22716
// exit ;
22714: GO 22742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22716: LD_VAR 0 1
22720: PUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_VAR 0 1
22728: PPUSH
22729: CALL_OW 12
22733: ARRAY
22734: PPUSH
22735: LD_INT 200
22737: PPUSH
22738: CALL_OW 234
// end ;
22742: PPOPN 1
22744: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22745: LD_EXP 46
22749: PUSH
22750: LD_EXP 75
22754: AND
22755: IFFALSE 22834
22757: GO 22759
22759: DISABLE
22760: LD_INT 0
22762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22763: LD_ADDR_VAR 0 1
22767: PUSH
22768: LD_INT 22
22770: PUSH
22771: LD_OWVAR 2
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 21
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PPUSH
22794: CALL_OW 69
22798: ST_TO_ADDR
// if not tmp then
22799: LD_VAR 0 1
22803: NOT
22804: IFFALSE 22808
// exit ;
22806: GO 22834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22808: LD_VAR 0 1
22812: PUSH
22813: LD_INT 1
22815: PPUSH
22816: LD_VAR 0 1
22820: PPUSH
22821: CALL_OW 12
22825: ARRAY
22826: PPUSH
22827: LD_INT 60
22829: PPUSH
22830: CALL_OW 234
// end ;
22834: PPOPN 1
22836: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22837: LD_EXP 46
22841: PUSH
22842: LD_EXP 76
22846: AND
22847: IFFALSE 22946
22849: GO 22851
22851: DISABLE
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
// begin enable ;
22856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22857: LD_ADDR_VAR 0 1
22861: PUSH
22862: LD_INT 22
22864: PUSH
22865: LD_OWVAR 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 61
22876: PUSH
22877: EMPTY
22878: LIST
22879: PUSH
22880: LD_INT 33
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 69
22899: ST_TO_ADDR
// if not tmp then
22900: LD_VAR 0 1
22904: NOT
22905: IFFALSE 22909
// exit ;
22907: GO 22946
// for i in tmp do
22909: LD_ADDR_VAR 0 2
22913: PUSH
22914: LD_VAR 0 1
22918: PUSH
22919: FOR_IN
22920: IFFALSE 22944
// if IsControledBy ( i ) then
22922: LD_VAR 0 2
22926: PPUSH
22927: CALL_OW 312
22931: IFFALSE 22942
// ComUnlink ( i ) ;
22933: LD_VAR 0 2
22937: PPUSH
22938: CALL_OW 136
22942: GO 22919
22944: POP
22945: POP
// end ;
22946: PPOPN 2
22948: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22949: LD_EXP 46
22953: PUSH
22954: LD_EXP 77
22958: AND
22959: IFFALSE 23099
22961: GO 22963
22963: DISABLE
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
// begin ToLua ( displayPowell(); ) ;
22968: LD_STRING displayPowell();
22970: PPUSH
22971: CALL_OW 559
// uc_side := 0 ;
22975: LD_ADDR_OWVAR 20
22979: PUSH
22980: LD_INT 0
22982: ST_TO_ADDR
// uc_nation := 2 ;
22983: LD_ADDR_OWVAR 21
22987: PUSH
22988: LD_INT 2
22990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22991: LD_ADDR_OWVAR 37
22995: PUSH
22996: LD_INT 14
22998: ST_TO_ADDR
// vc_engine := engine_siberite ;
22999: LD_ADDR_OWVAR 39
23003: PUSH
23004: LD_INT 3
23006: ST_TO_ADDR
// vc_control := control_apeman ;
23007: LD_ADDR_OWVAR 38
23011: PUSH
23012: LD_INT 5
23014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23015: LD_ADDR_OWVAR 40
23019: PUSH
23020: LD_INT 29
23022: ST_TO_ADDR
// un := CreateVehicle ;
23023: LD_ADDR_VAR 0 2
23027: PUSH
23028: CALL_OW 45
23032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23033: LD_VAR 0 2
23037: PPUSH
23038: LD_INT 1
23040: PPUSH
23041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23045: LD_INT 35
23047: PPUSH
23048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23052: LD_VAR 0 2
23056: PPUSH
23057: LD_INT 22
23059: PUSH
23060: LD_OWVAR 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PPUSH
23069: CALL_OW 69
23073: PPUSH
23074: LD_VAR 0 2
23078: PPUSH
23079: CALL_OW 74
23083: PPUSH
23084: CALL_OW 115
// until IsDead ( un ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: CALL_OW 301
23097: IFFALSE 23045
// end ;
23099: PPOPN 2
23101: END
// every 0 0$1 trigger StreamModeActive and sStu do
23102: LD_EXP 46
23106: PUSH
23107: LD_EXP 85
23111: AND
23112: IFFALSE 23128
23114: GO 23116
23116: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23117: LD_STRING displayStucuk();
23119: PPUSH
23120: CALL_OW 559
// ResetFog ;
23124: CALL_OW 335
// end ;
23128: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23129: LD_EXP 46
23133: PUSH
23134: LD_EXP 78
23138: AND
23139: IFFALSE 23280
23141: GO 23143
23143: DISABLE
23144: LD_INT 0
23146: PPUSH
23147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23148: LD_ADDR_VAR 0 2
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_OWVAR 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PPUSH
23179: CALL_OW 69
23183: ST_TO_ADDR
// if not tmp then
23184: LD_VAR 0 2
23188: NOT
23189: IFFALSE 23193
// exit ;
23191: GO 23280
// un := tmp [ rand ( 1 , tmp ) ] ;
23193: LD_ADDR_VAR 0 1
23197: PUSH
23198: LD_VAR 0 2
23202: PUSH
23203: LD_INT 1
23205: PPUSH
23206: LD_VAR 0 2
23210: PPUSH
23211: CALL_OW 12
23215: ARRAY
23216: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_INT 0
23224: PPUSH
23225: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23229: LD_VAR 0 1
23233: PPUSH
23234: LD_OWVAR 3
23238: PUSH
23239: LD_VAR 0 1
23243: DIFF
23244: PPUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 74
23254: PPUSH
23255: CALL_OW 115
// wait ( 0 0$20 ) ;
23259: LD_INT 700
23261: PPUSH
23262: CALL_OW 67
// SetSide ( un , your_side ) ;
23266: LD_VAR 0 1
23270: PPUSH
23271: LD_OWVAR 2
23275: PPUSH
23276: CALL_OW 235
// end ;
23280: PPOPN 2
23282: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23283: LD_EXP 46
23287: PUSH
23288: LD_EXP 79
23292: AND
23293: IFFALSE 23399
23295: GO 23297
23297: DISABLE
23298: LD_INT 0
23300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23301: LD_ADDR_VAR 0 1
23305: PUSH
23306: LD_INT 22
23308: PUSH
23309: LD_OWVAR 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 30
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 30
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not depot then
23355: LD_VAR 0 1
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23364: LD_VAR 0 1
23368: PUSH
23369: LD_INT 1
23371: ARRAY
23372: PPUSH
23373: CALL_OW 250
23377: PPUSH
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 1
23385: ARRAY
23386: PPUSH
23387: CALL_OW 251
23391: PPUSH
23392: LD_INT 70
23394: PPUSH
23395: CALL_OW 495
// end ;
23399: PPOPN 1
23401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23402: LD_EXP 46
23406: PUSH
23407: LD_EXP 80
23411: AND
23412: IFFALSE 23623
23414: GO 23416
23416: DISABLE
23417: LD_INT 0
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23424: LD_ADDR_VAR 0 5
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_OWVAR 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PPUSH
23455: CALL_OW 69
23459: ST_TO_ADDR
// if not tmp then
23460: LD_VAR 0 5
23464: NOT
23465: IFFALSE 23469
// exit ;
23467: GO 23623
// for i in tmp do
23469: LD_ADDR_VAR 0 1
23473: PUSH
23474: LD_VAR 0 5
23478: PUSH
23479: FOR_IN
23480: IFFALSE 23621
// begin d := rand ( 0 , 5 ) ;
23482: LD_ADDR_VAR 0 4
23486: PUSH
23487: LD_INT 0
23489: PPUSH
23490: LD_INT 5
23492: PPUSH
23493: CALL_OW 12
23497: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 250
23512: PPUSH
23513: LD_VAR 0 4
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: LD_INT 12
23523: PPUSH
23524: CALL_OW 12
23528: PPUSH
23529: CALL_OW 272
23533: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 251
23548: PPUSH
23549: LD_VAR 0 4
23553: PPUSH
23554: LD_INT 3
23556: PPUSH
23557: LD_INT 12
23559: PPUSH
23560: CALL_OW 12
23564: PPUSH
23565: CALL_OW 273
23569: ST_TO_ADDR
// if ValidHex ( x , y ) then
23570: LD_VAR 0 2
23574: PPUSH
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 488
23584: IFFALSE 23619
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23586: LD_VAR 0 1
23590: PPUSH
23591: LD_VAR 0 2
23595: PPUSH
23596: LD_VAR 0 3
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: LD_INT 6
23606: PPUSH
23607: CALL_OW 12
23611: PPUSH
23612: LD_INT 1
23614: PPUSH
23615: CALL_OW 483
// end ;
23619: GO 23479
23621: POP
23622: POP
// end ;
23623: PPOPN 5
23625: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23626: LD_EXP 46
23630: PUSH
23631: LD_EXP 81
23635: AND
23636: IFFALSE 23730
23638: GO 23640
23640: DISABLE
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_OWVAR 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 32
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 21
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PPUSH
23687: CALL_OW 69
23691: ST_TO_ADDR
// if not tmp then
23692: LD_VAR 0 2
23696: NOT
23697: IFFALSE 23701
// exit ;
23699: GO 23730
// for i in tmp do
23701: LD_ADDR_VAR 0 1
23705: PUSH
23706: LD_VAR 0 2
23710: PUSH
23711: FOR_IN
23712: IFFALSE 23728
// SetFuel ( i , 0 ) ;
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: CALL_OW 240
23726: GO 23711
23728: POP
23729: POP
// end ;
23730: PPOPN 2
23732: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23733: LD_EXP 46
23737: PUSH
23738: LD_EXP 82
23742: AND
23743: IFFALSE 23809
23745: GO 23747
23747: DISABLE
23748: LD_INT 0
23750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23751: LD_ADDR_VAR 0 1
23755: PUSH
23756: LD_INT 22
23758: PUSH
23759: LD_OWVAR 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 29
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PPUSH
23782: CALL_OW 69
23786: ST_TO_ADDR
// if not tmp then
23787: LD_VAR 0 1
23791: NOT
23792: IFFALSE 23796
// exit ;
23794: GO 23809
// DestroyUnit ( tmp [ 1 ] ) ;
23796: LD_VAR 0 1
23800: PUSH
23801: LD_INT 1
23803: ARRAY
23804: PPUSH
23805: CALL_OW 65
// end ;
23809: PPOPN 1
23811: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23812: LD_EXP 46
23816: PUSH
23817: LD_EXP 84
23821: AND
23822: IFFALSE 23951
23824: GO 23826
23826: DISABLE
23827: LD_INT 0
23829: PPUSH
// begin uc_side := 0 ;
23830: LD_ADDR_OWVAR 20
23834: PUSH
23835: LD_INT 0
23837: ST_TO_ADDR
// uc_nation := nation_arabian ;
23838: LD_ADDR_OWVAR 21
23842: PUSH
23843: LD_INT 2
23845: ST_TO_ADDR
// hc_gallery :=  ;
23846: LD_ADDR_OWVAR 33
23850: PUSH
23851: LD_STRING 
23853: ST_TO_ADDR
// hc_name :=  ;
23854: LD_ADDR_OWVAR 26
23858: PUSH
23859: LD_STRING 
23861: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23862: LD_INT 1
23864: PPUSH
23865: LD_INT 11
23867: PPUSH
23868: LD_INT 10
23870: PPUSH
23871: CALL_OW 380
// un := CreateHuman ;
23875: LD_ADDR_VAR 0 1
23879: PUSH
23880: CALL_OW 44
23884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23885: LD_VAR 0 1
23889: PPUSH
23890: LD_INT 1
23892: PPUSH
23893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23897: LD_INT 35
23899: PPUSH
23900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23904: LD_VAR 0 1
23908: PPUSH
23909: LD_INT 22
23911: PUSH
23912: LD_OWVAR 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 69
23925: PPUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 74
23935: PPUSH
23936: CALL_OW 115
// until IsDead ( un ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: CALL_OW 301
23949: IFFALSE 23897
// end ;
23951: PPOPN 1
23953: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23954: LD_EXP 46
23958: PUSH
23959: LD_EXP 86
23963: AND
23964: IFFALSE 23976
23966: GO 23968
23968: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23969: LD_STRING earthquake(getX(game), 0, 32)
23971: PPUSH
23972: CALL_OW 559
23976: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23977: LD_EXP 46
23981: PUSH
23982: LD_EXP 87
23986: AND
23987: IFFALSE 24078
23989: GO 23991
23991: DISABLE
23992: LD_INT 0
23994: PPUSH
// begin enable ;
23995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23996: LD_ADDR_VAR 0 1
24000: PUSH
24001: LD_INT 22
24003: PUSH
24004: LD_OWVAR 2
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 21
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 33
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: ST_TO_ADDR
// if not tmp then
24043: LD_VAR 0 1
24047: NOT
24048: IFFALSE 24052
// exit ;
24050: GO 24078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24052: LD_VAR 0 1
24056: PUSH
24057: LD_INT 1
24059: PPUSH
24060: LD_VAR 0 1
24064: PPUSH
24065: CALL_OW 12
24069: ARRAY
24070: PPUSH
24071: LD_INT 1
24073: PPUSH
24074: CALL_OW 234
// end ;
24078: PPOPN 1
24080: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24081: LD_EXP 46
24085: PUSH
24086: LD_EXP 88
24090: AND
24091: IFFALSE 24232
24093: GO 24095
24095: DISABLE
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
24100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24101: LD_ADDR_VAR 0 3
24105: PUSH
24106: LD_INT 22
24108: PUSH
24109: LD_OWVAR 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 25
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// if not tmp then
24137: LD_VAR 0 3
24141: NOT
24142: IFFALSE 24146
// exit ;
24144: GO 24232
// un := tmp [ rand ( 1 , tmp ) ] ;
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_VAR 0 3
24155: PUSH
24156: LD_INT 1
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: CALL_OW 12
24168: ARRAY
24169: ST_TO_ADDR
// if Crawls ( un ) then
24170: LD_VAR 0 2
24174: PPUSH
24175: CALL_OW 318
24179: IFFALSE 24190
// ComWalk ( un ) ;
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 9
24197: PPUSH
24198: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24202: LD_INT 28
24204: PPUSH
24205: LD_OWVAR 2
24209: PPUSH
24210: LD_INT 2
24212: PPUSH
24213: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24217: LD_INT 29
24219: PPUSH
24220: LD_OWVAR 2
24224: PPUSH
24225: LD_INT 2
24227: PPUSH
24228: CALL_OW 322
// end ;
24232: PPOPN 3
24234: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24235: LD_EXP 46
24239: PUSH
24240: LD_EXP 89
24244: AND
24245: IFFALSE 24356
24247: GO 24249
24249: DISABLE
24250: LD_INT 0
24252: PPUSH
24253: PPUSH
24254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 22
24262: PUSH
24263: LD_OWVAR 2
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 25
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 69
24290: ST_TO_ADDR
// if not tmp then
24291: LD_VAR 0 3
24295: NOT
24296: IFFALSE 24300
// exit ;
24298: GO 24356
// un := tmp [ rand ( 1 , tmp ) ] ;
24300: LD_ADDR_VAR 0 2
24304: PUSH
24305: LD_VAR 0 3
24309: PUSH
24310: LD_INT 1
24312: PPUSH
24313: LD_VAR 0 3
24317: PPUSH
24318: CALL_OW 12
24322: ARRAY
24323: ST_TO_ADDR
// if Crawls ( un ) then
24324: LD_VAR 0 2
24328: PPUSH
24329: CALL_OW 318
24333: IFFALSE 24344
// ComWalk ( un ) ;
24335: LD_VAR 0 2
24339: PPUSH
24340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24344: LD_VAR 0 2
24348: PPUSH
24349: LD_INT 8
24351: PPUSH
24352: CALL_OW 336
// end ;
24356: PPOPN 3
24358: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24359: LD_EXP 46
24363: PUSH
24364: LD_EXP 90
24368: AND
24369: IFFALSE 24513
24371: GO 24373
24373: DISABLE
24374: LD_INT 0
24376: PPUSH
24377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 22
24385: PUSH
24386: LD_OWVAR 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 21
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 34
24410: PUSH
24411: LD_INT 12
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 34
24420: PUSH
24421: LD_INT 51
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 32
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: LIST
24448: PPUSH
24449: CALL_OW 69
24453: ST_TO_ADDR
// if not tmp then
24454: LD_VAR 0 2
24458: NOT
24459: IFFALSE 24463
// exit ;
24461: GO 24513
// for i in tmp do
24463: LD_ADDR_VAR 0 1
24467: PUSH
24468: LD_VAR 0 2
24472: PUSH
24473: FOR_IN
24474: IFFALSE 24511
// if GetCargo ( i , mat_artifact ) = 0 then
24476: LD_VAR 0 1
24480: PPUSH
24481: LD_INT 4
24483: PPUSH
24484: CALL_OW 289
24488: PUSH
24489: LD_INT 0
24491: EQUAL
24492: IFFALSE 24509
// SetCargo ( i , mat_siberit , 100 ) ;
24494: LD_VAR 0 1
24498: PPUSH
24499: LD_INT 3
24501: PPUSH
24502: LD_INT 100
24504: PPUSH
24505: CALL_OW 290
24509: GO 24473
24511: POP
24512: POP
// end ;
24513: PPOPN 2
24515: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24516: LD_EXP 46
24520: PUSH
24521: LD_EXP 91
24525: AND
24526: IFFALSE 24709
24528: GO 24530
24530: DISABLE
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24535: LD_ADDR_VAR 0 2
24539: PUSH
24540: LD_INT 22
24542: PUSH
24543: LD_OWVAR 2
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL_OW 69
24556: ST_TO_ADDR
// if not tmp then
24557: LD_VAR 0 2
24561: NOT
24562: IFFALSE 24566
// exit ;
24564: GO 24709
// for i := 1 to 2 do
24566: LD_ADDR_VAR 0 1
24570: PUSH
24571: DOUBLE
24572: LD_INT 1
24574: DEC
24575: ST_TO_ADDR
24576: LD_INT 2
24578: PUSH
24579: FOR_TO
24580: IFFALSE 24707
// begin uc_side := your_side ;
24582: LD_ADDR_OWVAR 20
24586: PUSH
24587: LD_OWVAR 2
24591: ST_TO_ADDR
// uc_nation := nation_american ;
24592: LD_ADDR_OWVAR 21
24596: PUSH
24597: LD_INT 1
24599: ST_TO_ADDR
// vc_chassis := us_morphling ;
24600: LD_ADDR_OWVAR 37
24604: PUSH
24605: LD_INT 5
24607: ST_TO_ADDR
// vc_engine := engine_siberite ;
24608: LD_ADDR_OWVAR 39
24612: PUSH
24613: LD_INT 3
24615: ST_TO_ADDR
// vc_control := control_computer ;
24616: LD_ADDR_OWVAR 38
24620: PUSH
24621: LD_INT 3
24623: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24624: LD_ADDR_OWVAR 40
24628: PUSH
24629: LD_INT 10
24631: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24632: LD_VAR 0 2
24636: PUSH
24637: LD_INT 1
24639: ARRAY
24640: PPUSH
24641: CALL_OW 310
24645: NOT
24646: IFFALSE 24693
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24648: CALL_OW 45
24652: PPUSH
24653: LD_VAR 0 2
24657: PUSH
24658: LD_INT 1
24660: ARRAY
24661: PPUSH
24662: CALL_OW 250
24666: PPUSH
24667: LD_VAR 0 2
24671: PUSH
24672: LD_INT 1
24674: ARRAY
24675: PPUSH
24676: CALL_OW 251
24680: PPUSH
24681: LD_INT 12
24683: PPUSH
24684: LD_INT 1
24686: PPUSH
24687: CALL_OW 50
24691: GO 24705
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24693: CALL_OW 45
24697: PPUSH
24698: LD_INT 1
24700: PPUSH
24701: CALL_OW 51
// end ;
24705: GO 24579
24707: POP
24708: POP
// end ;
24709: PPOPN 2
24711: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24712: LD_EXP 46
24716: PUSH
24717: LD_EXP 92
24721: AND
24722: IFFALSE 24944
24724: GO 24726
24726: DISABLE
24727: LD_INT 0
24729: PPUSH
24730: PPUSH
24731: PPUSH
24732: PPUSH
24733: PPUSH
24734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24735: LD_ADDR_VAR 0 6
24739: PUSH
24740: LD_INT 22
24742: PUSH
24743: LD_OWVAR 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 21
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 3
24764: PUSH
24765: LD_INT 23
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: PPUSH
24784: CALL_OW 69
24788: ST_TO_ADDR
// if not tmp then
24789: LD_VAR 0 6
24793: NOT
24794: IFFALSE 24798
// exit ;
24796: GO 24944
// s1 := rand ( 1 , 4 ) ;
24798: LD_ADDR_VAR 0 2
24802: PUSH
24803: LD_INT 1
24805: PPUSH
24806: LD_INT 4
24808: PPUSH
24809: CALL_OW 12
24813: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24814: LD_ADDR_VAR 0 4
24818: PUSH
24819: LD_VAR 0 6
24823: PUSH
24824: LD_INT 1
24826: ARRAY
24827: PPUSH
24828: LD_VAR 0 2
24832: PPUSH
24833: CALL_OW 259
24837: ST_TO_ADDR
// if s1 = 1 then
24838: LD_VAR 0 2
24842: PUSH
24843: LD_INT 1
24845: EQUAL
24846: IFFALSE 24866
// s2 := rand ( 2 , 4 ) else
24848: LD_ADDR_VAR 0 3
24852: PUSH
24853: LD_INT 2
24855: PPUSH
24856: LD_INT 4
24858: PPUSH
24859: CALL_OW 12
24863: ST_TO_ADDR
24864: GO 24874
// s2 := 1 ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 1
24873: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24874: LD_ADDR_VAR 0 5
24878: PUSH
24879: LD_VAR 0 6
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: PPUSH
24888: LD_VAR 0 3
24892: PPUSH
24893: CALL_OW 259
24897: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24898: LD_VAR 0 6
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: PPUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 5
24916: PPUSH
24917: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24921: LD_VAR 0 6
24925: PUSH
24926: LD_INT 1
24928: ARRAY
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_VAR 0 4
24939: PPUSH
24940: CALL_OW 237
// end ;
24944: PPOPN 6
24946: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24947: LD_EXP 46
24951: PUSH
24952: LD_EXP 93
24956: AND
24957: IFFALSE 25036
24959: GO 24961
24961: DISABLE
24962: LD_INT 0
24964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24965: LD_ADDR_VAR 0 1
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 30
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 1
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 1
25017: PPUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 12
25027: ARRAY
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: CALL_OW 234
// end ;
25036: PPOPN 1
25038: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25039: LD_EXP 46
25043: PUSH
25044: LD_EXP 94
25048: AND
25049: IFFALSE 25161
25051: GO 25053
25053: DISABLE
25054: LD_INT 0
25056: PPUSH
25057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25058: LD_ADDR_VAR 0 2
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: LD_OWVAR 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 30
25080: PUSH
25081: LD_INT 27
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 30
25090: PUSH
25091: LD_INT 26
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 30
25100: PUSH
25101: LD_INT 28
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PPUSH
25118: CALL_OW 69
25122: ST_TO_ADDR
// if not tmp then
25123: LD_VAR 0 2
25127: NOT
25128: IFFALSE 25132
// exit ;
25130: GO 25161
// for i in tmp do
25132: LD_ADDR_VAR 0 1
25136: PUSH
25137: LD_VAR 0 2
25141: PUSH
25142: FOR_IN
25143: IFFALSE 25159
// SetLives ( i , 1 ) ;
25145: LD_VAR 0 1
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: CALL_OW 234
25157: GO 25142
25159: POP
25160: POP
// end ;
25161: PPOPN 2
25163: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25164: LD_EXP 46
25168: PUSH
25169: LD_EXP 95
25173: AND
25174: IFFALSE 25448
25176: GO 25178
25178: DISABLE
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
25183: PPUSH
// begin i := rand ( 1 , 7 ) ;
25184: LD_ADDR_VAR 0 1
25188: PUSH
25189: LD_INT 1
25191: PPUSH
25192: LD_INT 7
25194: PPUSH
25195: CALL_OW 12
25199: ST_TO_ADDR
// case i of 1 :
25200: LD_VAR 0 1
25204: PUSH
25205: LD_INT 1
25207: DOUBLE
25208: EQUAL
25209: IFTRUE 25213
25211: GO 25223
25213: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25214: LD_STRING earthquake(getX(game), 0, 32)
25216: PPUSH
25217: CALL_OW 559
25221: GO 25448
25223: LD_INT 2
25225: DOUBLE
25226: EQUAL
25227: IFTRUE 25231
25229: GO 25245
25231: POP
// begin ToLua ( displayStucuk(); ) ;
25232: LD_STRING displayStucuk();
25234: PPUSH
25235: CALL_OW 559
// ResetFog ;
25239: CALL_OW 335
// end ; 3 :
25243: GO 25448
25245: LD_INT 3
25247: DOUBLE
25248: EQUAL
25249: IFTRUE 25253
25251: GO 25357
25253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: LD_INT 22
25261: PUSH
25262: LD_OWVAR 2
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 25
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: ST_TO_ADDR
// if not tmp then
25290: LD_VAR 0 2
25294: NOT
25295: IFFALSE 25299
// exit ;
25297: GO 25448
// un := tmp [ rand ( 1 , tmp ) ] ;
25299: LD_ADDR_VAR 0 3
25303: PUSH
25304: LD_VAR 0 2
25308: PUSH
25309: LD_INT 1
25311: PPUSH
25312: LD_VAR 0 2
25316: PPUSH
25317: CALL_OW 12
25321: ARRAY
25322: ST_TO_ADDR
// if Crawls ( un ) then
25323: LD_VAR 0 3
25327: PPUSH
25328: CALL_OW 318
25332: IFFALSE 25343
// ComWalk ( un ) ;
25334: LD_VAR 0 3
25338: PPUSH
25339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25343: LD_VAR 0 3
25347: PPUSH
25348: LD_INT 8
25350: PPUSH
25351: CALL_OW 336
// end ; 4 :
25355: GO 25448
25357: LD_INT 4
25359: DOUBLE
25360: EQUAL
25361: IFTRUE 25365
25363: GO 25426
25365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_OWVAR 2
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 30
25385: PUSH
25386: LD_INT 29
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: ST_TO_ADDR
// if not tmp then
25402: LD_VAR 0 2
25406: NOT
25407: IFFALSE 25411
// exit ;
25409: GO 25448
// DestroyUnit ( tmp [ 1 ] ) ;
25411: LD_VAR 0 2
25415: PUSH
25416: LD_INT 1
25418: ARRAY
25419: PPUSH
25420: CALL_OW 65
// end ; 5 .. 7 :
25424: GO 25448
25426: LD_INT 5
25428: DOUBLE
25429: GREATEREQUAL
25430: IFFALSE 25438
25432: LD_INT 7
25434: DOUBLE
25435: LESSEQUAL
25436: IFTRUE 25440
25438: GO 25447
25440: POP
// StreamSibBomb ; end ;
25441: CALL 21698 0 0
25445: GO 25448
25447: POP
// end ;
25448: PPOPN 3
25450: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25451: LD_EXP 46
25455: PUSH
25456: LD_EXP 96
25460: AND
25461: IFFALSE 25617
25463: GO 25465
25465: DISABLE
25466: LD_INT 0
25468: PPUSH
25469: PPUSH
25470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_INT 81
25478: PUSH
25479: LD_OWVAR 2
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 21
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: ST_TO_ADDR
// if not tmp then
25525: LD_VAR 0 2
25529: NOT
25530: IFFALSE 25534
// exit ;
25532: GO 25617
// p := 0 ;
25534: LD_ADDR_VAR 0 3
25538: PUSH
25539: LD_INT 0
25541: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25542: LD_INT 35
25544: PPUSH
25545: CALL_OW 67
// p := p + 1 ;
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 1
25561: PLUS
25562: ST_TO_ADDR
// for i in tmp do
25563: LD_ADDR_VAR 0 1
25567: PUSH
25568: LD_VAR 0 2
25572: PUSH
25573: FOR_IN
25574: IFFALSE 25605
// if GetLives ( i ) < 1000 then
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 256
25585: PUSH
25586: LD_INT 1000
25588: LESS
25589: IFFALSE 25603
// SetLives ( i , 1000 ) ;
25591: LD_VAR 0 1
25595: PPUSH
25596: LD_INT 1000
25598: PPUSH
25599: CALL_OW 234
25603: GO 25573
25605: POP
25606: POP
// until p > 20 ;
25607: LD_VAR 0 3
25611: PUSH
25612: LD_INT 20
25614: GREATER
25615: IFFALSE 25542
// end ;
25617: PPOPN 3
25619: END
// every 0 0$1 trigger StreamModeActive and sTime do
25620: LD_EXP 46
25624: PUSH
25625: LD_EXP 97
25629: AND
25630: IFFALSE 25665
25632: GO 25634
25634: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25635: LD_INT 28
25637: PPUSH
25638: LD_OWVAR 2
25642: PPUSH
25643: LD_INT 2
25645: PPUSH
25646: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25650: LD_INT 30
25652: PPUSH
25653: LD_OWVAR 2
25657: PPUSH
25658: LD_INT 2
25660: PPUSH
25661: CALL_OW 322
// end ;
25665: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25666: LD_EXP 46
25670: PUSH
25671: LD_EXP 98
25675: AND
25676: IFFALSE 25797
25678: GO 25680
25680: DISABLE
25681: LD_INT 0
25683: PPUSH
25684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25685: LD_ADDR_VAR 0 2
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_OWVAR 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 21
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: LD_INT 23
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: PPUSH
25734: CALL_OW 69
25738: ST_TO_ADDR
// if not tmp then
25739: LD_VAR 0 2
25743: NOT
25744: IFFALSE 25748
// exit ;
25746: GO 25797
// for i in tmp do
25748: LD_ADDR_VAR 0 1
25752: PUSH
25753: LD_VAR 0 2
25757: PUSH
25758: FOR_IN
25759: IFFALSE 25795
// begin if Crawls ( i ) then
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 318
25770: IFFALSE 25781
// ComWalk ( i ) ;
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 138
// SetClass ( i , 2 ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: LD_INT 2
25788: PPUSH
25789: CALL_OW 336
// end ;
25793: GO 25758
25795: POP
25796: POP
// end ;
25797: PPOPN 2
25799: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25800: LD_EXP 46
25804: PUSH
25805: LD_EXP 99
25809: AND
25810: IFFALSE 26091
25812: GO 25814
25814: DISABLE
25815: LD_INT 0
25817: PPUSH
25818: PPUSH
25819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25820: LD_OWVAR 2
25824: PPUSH
25825: LD_INT 9
25827: PPUSH
25828: LD_INT 1
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25838: LD_INT 9
25840: PPUSH
25841: LD_OWVAR 2
25845: PPUSH
25846: CALL_OW 343
// uc_side := 9 ;
25850: LD_ADDR_OWVAR 20
25854: PUSH
25855: LD_INT 9
25857: ST_TO_ADDR
// uc_nation := 2 ;
25858: LD_ADDR_OWVAR 21
25862: PUSH
25863: LD_INT 2
25865: ST_TO_ADDR
// hc_name := Dark Warrior ;
25866: LD_ADDR_OWVAR 26
25870: PUSH
25871: LD_STRING Dark Warrior
25873: ST_TO_ADDR
// hc_gallery :=  ;
25874: LD_ADDR_OWVAR 33
25878: PUSH
25879: LD_STRING 
25881: ST_TO_ADDR
// hc_noskilllimit := true ;
25882: LD_ADDR_OWVAR 76
25886: PUSH
25887: LD_INT 1
25889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25890: LD_ADDR_OWVAR 31
25894: PUSH
25895: LD_INT 30
25897: PUSH
25898: LD_INT 30
25900: PUSH
25901: LD_INT 30
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: ST_TO_ADDR
// un := CreateHuman ;
25913: LD_ADDR_VAR 0 3
25917: PUSH
25918: CALL_OW 44
25922: ST_TO_ADDR
// hc_noskilllimit := false ;
25923: LD_ADDR_OWVAR 76
25927: PUSH
25928: LD_INT 0
25930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25931: LD_VAR 0 3
25935: PPUSH
25936: LD_INT 1
25938: PPUSH
25939: CALL_OW 51
// p := 0 ;
25943: LD_ADDR_VAR 0 2
25947: PUSH
25948: LD_INT 0
25950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25951: LD_INT 35
25953: PPUSH
25954: CALL_OW 67
// p := p + 1 ;
25958: LD_ADDR_VAR 0 2
25962: PUSH
25963: LD_VAR 0 2
25967: PUSH
25968: LD_INT 1
25970: PLUS
25971: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25972: LD_VAR 0 3
25976: PPUSH
25977: CALL_OW 256
25981: PUSH
25982: LD_INT 1000
25984: LESS
25985: IFFALSE 25999
// SetLives ( un , 1000 ) ;
25987: LD_VAR 0 3
25991: PPUSH
25992: LD_INT 1000
25994: PPUSH
25995: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25999: LD_VAR 0 3
26003: PPUSH
26004: LD_INT 81
26006: PUSH
26007: LD_OWVAR 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 91
26018: PUSH
26019: LD_VAR 0 3
26023: PUSH
26024: LD_INT 30
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PPUSH
26036: CALL_OW 69
26040: PPUSH
26041: LD_VAR 0 3
26045: PPUSH
26046: CALL_OW 74
26050: PPUSH
26051: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26055: LD_VAR 0 2
26059: PUSH
26060: LD_INT 60
26062: GREATER
26063: PUSH
26064: LD_VAR 0 3
26068: PPUSH
26069: CALL_OW 301
26073: OR
26074: IFFALSE 25951
// if un then
26076: LD_VAR 0 3
26080: IFFALSE 26091
// RemoveUnit ( un ) ;
26082: LD_VAR 0 3
26086: PPUSH
26087: CALL_OW 64
// end ;
26091: PPOPN 3
26093: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26094: LD_INT 0
26096: PPUSH
// case cmd of 301 :
26097: LD_VAR 0 1
26101: PUSH
26102: LD_INT 301
26104: DOUBLE
26105: EQUAL
26106: IFTRUE 26110
26108: GO 26142
26110: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26111: LD_VAR 0 6
26115: PPUSH
26116: LD_VAR 0 7
26120: PPUSH
26121: LD_VAR 0 8
26125: PPUSH
26126: LD_VAR 0 4
26130: PPUSH
26131: LD_VAR 0 5
26135: PPUSH
26136: CALL 27343 0 5
26140: GO 26263
26142: LD_INT 302
26144: DOUBLE
26145: EQUAL
26146: IFTRUE 26150
26148: GO 26187
26150: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26151: LD_VAR 0 6
26155: PPUSH
26156: LD_VAR 0 7
26160: PPUSH
26161: LD_VAR 0 8
26165: PPUSH
26166: LD_VAR 0 9
26170: PPUSH
26171: LD_VAR 0 4
26175: PPUSH
26176: LD_VAR 0 5
26180: PPUSH
26181: CALL 27434 0 6
26185: GO 26263
26187: LD_INT 303
26189: DOUBLE
26190: EQUAL
26191: IFTRUE 26195
26193: GO 26232
26195: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26196: LD_VAR 0 6
26200: PPUSH
26201: LD_VAR 0 7
26205: PPUSH
26206: LD_VAR 0 8
26210: PPUSH
26211: LD_VAR 0 9
26215: PPUSH
26216: LD_VAR 0 4
26220: PPUSH
26221: LD_VAR 0 5
26225: PPUSH
26226: CALL 26268 0 6
26230: GO 26263
26232: LD_INT 304
26234: DOUBLE
26235: EQUAL
26236: IFTRUE 26240
26238: GO 26262
26240: POP
// hHackTeleport ( unit , x , y ) ; end ;
26241: LD_VAR 0 2
26245: PPUSH
26246: LD_VAR 0 4
26250: PPUSH
26251: LD_VAR 0 5
26255: PPUSH
26256: CALL 28027 0 3
26260: GO 26263
26262: POP
// end ;
26263: LD_VAR 0 12
26267: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26268: LD_INT 0
26270: PPUSH
26271: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26272: LD_VAR 0 1
26276: PUSH
26277: LD_INT 1
26279: LESS
26280: PUSH
26281: LD_VAR 0 1
26285: PUSH
26286: LD_INT 3
26288: GREATER
26289: OR
26290: PUSH
26291: LD_VAR 0 5
26295: PPUSH
26296: LD_VAR 0 6
26300: PPUSH
26301: CALL_OW 428
26305: OR
26306: IFFALSE 26310
// exit ;
26308: GO 27030
// uc_side := your_side ;
26310: LD_ADDR_OWVAR 20
26314: PUSH
26315: LD_OWVAR 2
26319: ST_TO_ADDR
// uc_nation := nation ;
26320: LD_ADDR_OWVAR 21
26324: PUSH
26325: LD_VAR 0 1
26329: ST_TO_ADDR
// bc_level = 1 ;
26330: LD_ADDR_OWVAR 43
26334: PUSH
26335: LD_INT 1
26337: ST_TO_ADDR
// case btype of 1 :
26338: LD_VAR 0 2
26342: PUSH
26343: LD_INT 1
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26351
26349: GO 26362
26351: POP
// bc_type := b_depot ; 2 :
26352: LD_ADDR_OWVAR 42
26356: PUSH
26357: LD_INT 0
26359: ST_TO_ADDR
26360: GO 26974
26362: LD_INT 2
26364: DOUBLE
26365: EQUAL
26366: IFTRUE 26370
26368: GO 26381
26370: POP
// bc_type := b_warehouse ; 3 :
26371: LD_ADDR_OWVAR 42
26375: PUSH
26376: LD_INT 1
26378: ST_TO_ADDR
26379: GO 26974
26381: LD_INT 3
26383: DOUBLE
26384: EQUAL
26385: IFTRUE 26389
26387: GO 26400
26389: POP
// bc_type := b_lab ; 4 .. 9 :
26390: LD_ADDR_OWVAR 42
26394: PUSH
26395: LD_INT 6
26397: ST_TO_ADDR
26398: GO 26974
26400: LD_INT 4
26402: DOUBLE
26403: GREATEREQUAL
26404: IFFALSE 26412
26406: LD_INT 9
26408: DOUBLE
26409: LESSEQUAL
26410: IFTRUE 26414
26412: GO 26466
26414: POP
// begin bc_type := b_lab_half ;
26415: LD_ADDR_OWVAR 42
26419: PUSH
26420: LD_INT 7
26422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26423: LD_ADDR_OWVAR 44
26427: PUSH
26428: LD_INT 10
26430: PUSH
26431: LD_INT 11
26433: PUSH
26434: LD_INT 12
26436: PUSH
26437: LD_INT 15
26439: PUSH
26440: LD_INT 14
26442: PUSH
26443: LD_INT 13
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_INT 3
26461: MINUS
26462: ARRAY
26463: ST_TO_ADDR
// end ; 10 .. 13 :
26464: GO 26974
26466: LD_INT 10
26468: DOUBLE
26469: GREATEREQUAL
26470: IFFALSE 26478
26472: LD_INT 13
26474: DOUBLE
26475: LESSEQUAL
26476: IFTRUE 26480
26478: GO 26557
26480: POP
// begin bc_type := b_lab_full ;
26481: LD_ADDR_OWVAR 42
26485: PUSH
26486: LD_INT 8
26488: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26489: LD_ADDR_OWVAR 44
26493: PUSH
26494: LD_INT 10
26496: PUSH
26497: LD_INT 12
26499: PUSH
26500: LD_INT 14
26502: PUSH
26503: LD_INT 13
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_INT 9
26519: MINUS
26520: ARRAY
26521: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26522: LD_ADDR_OWVAR 45
26526: PUSH
26527: LD_INT 11
26529: PUSH
26530: LD_INT 15
26532: PUSH
26533: LD_INT 12
26535: PUSH
26536: LD_INT 15
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: PUSH
26545: LD_VAR 0 2
26549: PUSH
26550: LD_INT 9
26552: MINUS
26553: ARRAY
26554: ST_TO_ADDR
// end ; 14 :
26555: GO 26974
26557: LD_INT 14
26559: DOUBLE
26560: EQUAL
26561: IFTRUE 26565
26563: GO 26576
26565: POP
// bc_type := b_workshop ; 15 :
26566: LD_ADDR_OWVAR 42
26570: PUSH
26571: LD_INT 2
26573: ST_TO_ADDR
26574: GO 26974
26576: LD_INT 15
26578: DOUBLE
26579: EQUAL
26580: IFTRUE 26584
26582: GO 26595
26584: POP
// bc_type := b_factory ; 16 :
26585: LD_ADDR_OWVAR 42
26589: PUSH
26590: LD_INT 3
26592: ST_TO_ADDR
26593: GO 26974
26595: LD_INT 16
26597: DOUBLE
26598: EQUAL
26599: IFTRUE 26603
26601: GO 26614
26603: POP
// bc_type := b_ext_gun ; 17 :
26604: LD_ADDR_OWVAR 42
26608: PUSH
26609: LD_INT 17
26611: ST_TO_ADDR
26612: GO 26974
26614: LD_INT 17
26616: DOUBLE
26617: EQUAL
26618: IFTRUE 26622
26620: GO 26650
26622: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26623: LD_ADDR_OWVAR 42
26627: PUSH
26628: LD_INT 19
26630: PUSH
26631: LD_INT 23
26633: PUSH
26634: LD_INT 19
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: PUSH
26642: LD_VAR 0 1
26646: ARRAY
26647: ST_TO_ADDR
26648: GO 26974
26650: LD_INT 18
26652: DOUBLE
26653: EQUAL
26654: IFTRUE 26658
26656: GO 26669
26658: POP
// bc_type := b_ext_radar ; 19 :
26659: LD_ADDR_OWVAR 42
26663: PUSH
26664: LD_INT 20
26666: ST_TO_ADDR
26667: GO 26974
26669: LD_INT 19
26671: DOUBLE
26672: EQUAL
26673: IFTRUE 26677
26675: GO 26688
26677: POP
// bc_type := b_ext_radio ; 20 :
26678: LD_ADDR_OWVAR 42
26682: PUSH
26683: LD_INT 22
26685: ST_TO_ADDR
26686: GO 26974
26688: LD_INT 20
26690: DOUBLE
26691: EQUAL
26692: IFTRUE 26696
26694: GO 26707
26696: POP
// bc_type := b_ext_siberium ; 21 :
26697: LD_ADDR_OWVAR 42
26701: PUSH
26702: LD_INT 21
26704: ST_TO_ADDR
26705: GO 26974
26707: LD_INT 21
26709: DOUBLE
26710: EQUAL
26711: IFTRUE 26715
26713: GO 26726
26715: POP
// bc_type := b_ext_computer ; 22 :
26716: LD_ADDR_OWVAR 42
26720: PUSH
26721: LD_INT 24
26723: ST_TO_ADDR
26724: GO 26974
26726: LD_INT 22
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26745
26734: POP
// bc_type := b_ext_track ; 23 :
26735: LD_ADDR_OWVAR 42
26739: PUSH
26740: LD_INT 16
26742: ST_TO_ADDR
26743: GO 26974
26745: LD_INT 23
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26764
26753: POP
// bc_type := b_ext_laser ; 24 :
26754: LD_ADDR_OWVAR 42
26758: PUSH
26759: LD_INT 25
26761: ST_TO_ADDR
26762: GO 26974
26764: LD_INT 24
26766: DOUBLE
26767: EQUAL
26768: IFTRUE 26772
26770: GO 26783
26772: POP
// bc_type := b_control_tower ; 25 :
26773: LD_ADDR_OWVAR 42
26777: PUSH
26778: LD_INT 36
26780: ST_TO_ADDR
26781: GO 26974
26783: LD_INT 25
26785: DOUBLE
26786: EQUAL
26787: IFTRUE 26791
26789: GO 26802
26791: POP
// bc_type := b_breastwork ; 26 :
26792: LD_ADDR_OWVAR 42
26796: PUSH
26797: LD_INT 31
26799: ST_TO_ADDR
26800: GO 26974
26802: LD_INT 26
26804: DOUBLE
26805: EQUAL
26806: IFTRUE 26810
26808: GO 26821
26810: POP
// bc_type := b_bunker ; 27 :
26811: LD_ADDR_OWVAR 42
26815: PUSH
26816: LD_INT 32
26818: ST_TO_ADDR
26819: GO 26974
26821: LD_INT 27
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26829
26827: GO 26840
26829: POP
// bc_type := b_turret ; 28 :
26830: LD_ADDR_OWVAR 42
26834: PUSH
26835: LD_INT 33
26837: ST_TO_ADDR
26838: GO 26974
26840: LD_INT 28
26842: DOUBLE
26843: EQUAL
26844: IFTRUE 26848
26846: GO 26859
26848: POP
// bc_type := b_armoury ; 29 :
26849: LD_ADDR_OWVAR 42
26853: PUSH
26854: LD_INT 4
26856: ST_TO_ADDR
26857: GO 26974
26859: LD_INT 29
26861: DOUBLE
26862: EQUAL
26863: IFTRUE 26867
26865: GO 26878
26867: POP
// bc_type := b_barracks ; 30 :
26868: LD_ADDR_OWVAR 42
26872: PUSH
26873: LD_INT 5
26875: ST_TO_ADDR
26876: GO 26974
26878: LD_INT 30
26880: DOUBLE
26881: EQUAL
26882: IFTRUE 26886
26884: GO 26897
26886: POP
// bc_type := b_solar_power ; 31 :
26887: LD_ADDR_OWVAR 42
26891: PUSH
26892: LD_INT 27
26894: ST_TO_ADDR
26895: GO 26974
26897: LD_INT 31
26899: DOUBLE
26900: EQUAL
26901: IFTRUE 26905
26903: GO 26916
26905: POP
// bc_type := b_oil_power ; 32 :
26906: LD_ADDR_OWVAR 42
26910: PUSH
26911: LD_INT 26
26913: ST_TO_ADDR
26914: GO 26974
26916: LD_INT 32
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26924
26922: GO 26935
26924: POP
// bc_type := b_siberite_power ; 33 :
26925: LD_ADDR_OWVAR 42
26929: PUSH
26930: LD_INT 28
26932: ST_TO_ADDR
26933: GO 26974
26935: LD_INT 33
26937: DOUBLE
26938: EQUAL
26939: IFTRUE 26943
26941: GO 26954
26943: POP
// bc_type := b_oil_mine ; 34 :
26944: LD_ADDR_OWVAR 42
26948: PUSH
26949: LD_INT 29
26951: ST_TO_ADDR
26952: GO 26974
26954: LD_INT 34
26956: DOUBLE
26957: EQUAL
26958: IFTRUE 26962
26960: GO 26973
26962: POP
// bc_type := b_siberite_mine ; end ;
26963: LD_ADDR_OWVAR 42
26967: PUSH
26968: LD_INT 30
26970: ST_TO_ADDR
26971: GO 26974
26973: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26974: LD_ADDR_VAR 0 8
26978: PUSH
26979: LD_VAR 0 5
26983: PPUSH
26984: LD_VAR 0 6
26988: PPUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: CALL_OW 47
26998: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26999: LD_OWVAR 42
27003: PUSH
27004: LD_INT 32
27006: PUSH
27007: LD_INT 33
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: IN
27014: IFFALSE 27030
// PlaceWeaponTurret ( b , weapon ) ;
27016: LD_VAR 0 8
27020: PPUSH
27021: LD_VAR 0 4
27025: PPUSH
27026: CALL_OW 431
// end ;
27030: LD_VAR 0 7
27034: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27035: LD_INT 0
27037: PPUSH
27038: PPUSH
27039: PPUSH
27040: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27041: LD_ADDR_VAR 0 4
27045: PUSH
27046: LD_INT 22
27048: PUSH
27049: LD_OWVAR 2
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 30
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 30
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 4
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27163
// for i in tmp do
27104: LD_ADDR_VAR 0 2
27108: PUSH
27109: LD_VAR 0 4
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27161
// for j = 1 to 3 do
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: DOUBLE
27123: LD_INT 1
27125: DEC
27126: ST_TO_ADDR
27127: LD_INT 3
27129: PUSH
27130: FOR_TO
27131: IFFALSE 27157
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 274
27142: PPUSH
27143: LD_VAR 0 3
27147: PPUSH
27148: LD_INT 99999
27150: PPUSH
27151: CALL_OW 277
27155: GO 27130
27157: POP
27158: POP
27159: GO 27114
27161: POP
27162: POP
// end ;
27163: LD_VAR 0 1
27167: RET
// export function hHackSetLevel10 ; var i , j ; begin
27168: LD_INT 0
27170: PPUSH
27171: PPUSH
27172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_INT 21
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 69
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27246
// if IsSelected ( i ) then
27196: LD_VAR 0 2
27200: PPUSH
27201: CALL_OW 306
27205: IFFALSE 27244
// begin for j := 1 to 4 do
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: DOUBLE
27213: LD_INT 1
27215: DEC
27216: ST_TO_ADDR
27217: LD_INT 4
27219: PUSH
27220: FOR_TO
27221: IFFALSE 27242
// SetSkill ( i , j , 10 ) ;
27223: LD_VAR 0 2
27227: PPUSH
27228: LD_VAR 0 3
27232: PPUSH
27233: LD_INT 10
27235: PPUSH
27236: CALL_OW 237
27240: GO 27220
27242: POP
27243: POP
// end ;
27244: GO 27193
27246: POP
27247: POP
// end ;
27248: LD_VAR 0 1
27252: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27253: LD_INT 0
27255: PPUSH
27256: PPUSH
27257: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: LD_INT 22
27265: PUSH
27266: LD_OWVAR 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 21
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PPUSH
27289: CALL_OW 69
27293: PUSH
27294: FOR_IN
27295: IFFALSE 27336
// begin for j := 1 to 4 do
27297: LD_ADDR_VAR 0 3
27301: PUSH
27302: DOUBLE
27303: LD_INT 1
27305: DEC
27306: ST_TO_ADDR
27307: LD_INT 4
27309: PUSH
27310: FOR_TO
27311: IFFALSE 27332
// SetSkill ( i , j , 10 ) ;
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_VAR 0 3
27322: PPUSH
27323: LD_INT 10
27325: PPUSH
27326: CALL_OW 237
27330: GO 27310
27332: POP
27333: POP
// end ;
27334: GO 27294
27336: POP
27337: POP
// end ;
27338: LD_VAR 0 1
27342: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27343: LD_INT 0
27345: PPUSH
// uc_side := your_side ;
27346: LD_ADDR_OWVAR 20
27350: PUSH
27351: LD_OWVAR 2
27355: ST_TO_ADDR
// uc_nation := nation ;
27356: LD_ADDR_OWVAR 21
27360: PUSH
27361: LD_VAR 0 1
27365: ST_TO_ADDR
// InitHc ;
27366: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27370: LD_INT 0
27372: PPUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27387: LD_VAR 0 4
27391: PPUSH
27392: LD_VAR 0 5
27396: PPUSH
27397: CALL_OW 428
27401: PUSH
27402: LD_INT 0
27404: EQUAL
27405: IFFALSE 27429
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27407: CALL_OW 44
27411: PPUSH
27412: LD_VAR 0 4
27416: PPUSH
27417: LD_VAR 0 5
27421: PPUSH
27422: LD_INT 1
27424: PPUSH
27425: CALL_OW 48
// end ;
27429: LD_VAR 0 6
27433: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27434: LD_INT 0
27436: PPUSH
27437: PPUSH
// uc_side := your_side ;
27438: LD_ADDR_OWVAR 20
27442: PUSH
27443: LD_OWVAR 2
27447: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27448: LD_VAR 0 1
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: LD_INT 3
27461: PUSH
27462: LD_INT 4
27464: PUSH
27465: LD_INT 5
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: IN
27475: IFFALSE 27487
// uc_nation := nation_american else
27477: LD_ADDR_OWVAR 21
27481: PUSH
27482: LD_INT 1
27484: ST_TO_ADDR
27485: GO 27530
// if chassis in [ 11 , 12 , 13 , 14 ] then
27487: LD_VAR 0 1
27491: PUSH
27492: LD_INT 11
27494: PUSH
27495: LD_INT 12
27497: PUSH
27498: LD_INT 13
27500: PUSH
27501: LD_INT 14
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: IN
27510: IFFALSE 27522
// uc_nation := nation_arabian else
27512: LD_ADDR_OWVAR 21
27516: PUSH
27517: LD_INT 2
27519: ST_TO_ADDR
27520: GO 27530
// uc_nation := nation_russian ;
27522: LD_ADDR_OWVAR 21
27526: PUSH
27527: LD_INT 3
27529: ST_TO_ADDR
// vc_chassis := chassis ;
27530: LD_ADDR_OWVAR 37
27534: PUSH
27535: LD_VAR 0 1
27539: ST_TO_ADDR
// vc_engine := engine ;
27540: LD_ADDR_OWVAR 39
27544: PUSH
27545: LD_VAR 0 2
27549: ST_TO_ADDR
// vc_control := control ;
27550: LD_ADDR_OWVAR 38
27554: PUSH
27555: LD_VAR 0 3
27559: ST_TO_ADDR
// vc_weapon := weapon ;
27560: LD_ADDR_OWVAR 40
27564: PUSH
27565: LD_VAR 0 4
27569: ST_TO_ADDR
// un := CreateVehicle ;
27570: LD_ADDR_VAR 0 8
27574: PUSH
27575: CALL_OW 45
27579: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27580: LD_VAR 0 8
27584: PPUSH
27585: LD_INT 0
27587: PPUSH
27588: LD_INT 5
27590: PPUSH
27591: CALL_OW 12
27595: PPUSH
27596: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27600: LD_VAR 0 8
27604: PPUSH
27605: LD_VAR 0 5
27609: PPUSH
27610: LD_VAR 0 6
27614: PPUSH
27615: LD_INT 1
27617: PPUSH
27618: CALL_OW 48
// end ;
27622: LD_VAR 0 7
27626: RET
// export hInvincible ; every 1 do
27627: GO 27629
27629: DISABLE
// hInvincible := [ ] ;
27630: LD_ADDR_EXP 100
27634: PUSH
27635: EMPTY
27636: ST_TO_ADDR
27637: END
// every 10 do var i ;
27638: GO 27640
27640: DISABLE
27641: LD_INT 0
27643: PPUSH
// begin enable ;
27644: ENABLE
// if not hInvincible then
27645: LD_EXP 100
27649: NOT
27650: IFFALSE 27654
// exit ;
27652: GO 27698
// for i in hInvincible do
27654: LD_ADDR_VAR 0 1
27658: PUSH
27659: LD_EXP 100
27663: PUSH
27664: FOR_IN
27665: IFFALSE 27696
// if GetLives ( i ) < 1000 then
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 256
27676: PUSH
27677: LD_INT 1000
27679: LESS
27680: IFFALSE 27694
// SetLives ( i , 1000 ) ;
27682: LD_VAR 0 1
27686: PPUSH
27687: LD_INT 1000
27689: PPUSH
27690: CALL_OW 234
27694: GO 27664
27696: POP
27697: POP
// end ;
27698: PPOPN 1
27700: END
// export function hHackInvincible ; var i ; begin
27701: LD_INT 0
27703: PPUSH
27704: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27705: LD_ADDR_VAR 0 2
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 21
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 21
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: PPUSH
27738: CALL_OW 69
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27805
// if IsSelected ( i ) then
27746: LD_VAR 0 2
27750: PPUSH
27751: CALL_OW 306
27755: IFFALSE 27803
// begin if i in hInvincible then
27757: LD_VAR 0 2
27761: PUSH
27762: LD_EXP 100
27766: IN
27767: IFFALSE 27787
// hInvincible := hInvincible diff i else
27769: LD_ADDR_EXP 100
27773: PUSH
27774: LD_EXP 100
27778: PUSH
27779: LD_VAR 0 2
27783: DIFF
27784: ST_TO_ADDR
27785: GO 27803
// hInvincible := hInvincible union i ;
27787: LD_ADDR_EXP 100
27791: PUSH
27792: LD_EXP 100
27796: PUSH
27797: LD_VAR 0 2
27801: UNION
27802: ST_TO_ADDR
// end ;
27803: GO 27743
27805: POP
27806: POP
// end ;
27807: LD_VAR 0 1
27811: RET
// export function hHackInvisible ; var i , j ; begin
27812: LD_INT 0
27814: PPUSH
27815: PPUSH
27816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: PUSH
27837: FOR_IN
27838: IFFALSE 27862
// if IsSelected ( i ) then
27840: LD_VAR 0 2
27844: PPUSH
27845: CALL_OW 306
27849: IFFALSE 27860
// ComForceInvisible ( i ) ;
27851: LD_VAR 0 2
27855: PPUSH
27856: CALL_OW 496
27860: GO 27837
27862: POP
27863: POP
// end ;
27864: LD_VAR 0 1
27868: RET
// export function hHackChangeYourSide ; begin
27869: LD_INT 0
27871: PPUSH
// if your_side = 8 then
27872: LD_OWVAR 2
27876: PUSH
27877: LD_INT 8
27879: EQUAL
27880: IFFALSE 27892
// your_side := 0 else
27882: LD_ADDR_OWVAR 2
27886: PUSH
27887: LD_INT 0
27889: ST_TO_ADDR
27890: GO 27906
// your_side := your_side + 1 ;
27892: LD_ADDR_OWVAR 2
27896: PUSH
27897: LD_OWVAR 2
27901: PUSH
27902: LD_INT 1
27904: PLUS
27905: ST_TO_ADDR
// end ;
27906: LD_VAR 0 1
27910: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27911: LD_INT 0
27913: PPUSH
27914: PPUSH
27915: PPUSH
// for i in all_units do
27916: LD_ADDR_VAR 0 2
27920: PUSH
27921: LD_OWVAR 3
27925: PUSH
27926: FOR_IN
27927: IFFALSE 28005
// if IsSelected ( i ) then
27929: LD_VAR 0 2
27933: PPUSH
27934: CALL_OW 306
27938: IFFALSE 28003
// begin j := GetSide ( i ) ;
27940: LD_ADDR_VAR 0 3
27944: PUSH
27945: LD_VAR 0 2
27949: PPUSH
27950: CALL_OW 255
27954: ST_TO_ADDR
// if j = 8 then
27955: LD_VAR 0 3
27959: PUSH
27960: LD_INT 8
27962: EQUAL
27963: IFFALSE 27975
// j := 0 else
27965: LD_ADDR_VAR 0 3
27969: PUSH
27970: LD_INT 0
27972: ST_TO_ADDR
27973: GO 27989
// j := j + 1 ;
27975: LD_ADDR_VAR 0 3
27979: PUSH
27980: LD_VAR 0 3
27984: PUSH
27985: LD_INT 1
27987: PLUS
27988: ST_TO_ADDR
// SetSide ( i , j ) ;
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 235
// end ;
28003: GO 27926
28005: POP
28006: POP
// end ;
28007: LD_VAR 0 1
28011: RET
// export function hHackFog ; begin
28012: LD_INT 0
28014: PPUSH
// FogOff ( true ) ;
28015: LD_INT 1
28017: PPUSH
28018: CALL_OW 344
// end ;
28022: LD_VAR 0 1
28026: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28027: LD_INT 0
28029: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_VAR 0 2
28039: PPUSH
28040: LD_VAR 0 3
28044: PPUSH
28045: LD_INT 1
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 483
// CenterOnXY ( x , y ) ;
28055: LD_VAR 0 2
28059: PPUSH
28060: LD_VAR 0 3
28064: PPUSH
28065: CALL_OW 84
// end ; end_of_file end_of_file
28069: LD_VAR 0 4
28073: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
28074: LD_INT 0
28076: PPUSH
// ar_miner := 81 ;
28077: LD_ADDR_EXP 108
28081: PUSH
28082: LD_INT 81
28084: ST_TO_ADDR
// ar_crane := 88 ;
28085: LD_ADDR_EXP 107
28089: PUSH
28090: LD_INT 88
28092: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28093: LD_ADDR_EXP 102
28097: PUSH
28098: LD_INT 89
28100: ST_TO_ADDR
// us_hack := 99 ;
28101: LD_ADDR_EXP 103
28105: PUSH
28106: LD_INT 99
28108: ST_TO_ADDR
// us_artillery := 97 ;
28109: LD_ADDR_EXP 104
28113: PUSH
28114: LD_INT 97
28116: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28117: LD_ADDR_EXP 105
28121: PUSH
28122: LD_INT 91
28124: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28125: LD_ADDR_EXP 106
28129: PUSH
28130: LD_INT 92
28132: ST_TO_ADDR
// ru_radar := 98 ;
28133: LD_ADDR_EXP 101
28137: PUSH
28138: LD_INT 98
28140: ST_TO_ADDR
// tech_Artillery := 80 ;
28141: LD_ADDR_EXP 109
28145: PUSH
28146: LD_INT 80
28148: ST_TO_ADDR
// tech_RadMat := 81 ;
28149: LD_ADDR_EXP 110
28153: PUSH
28154: LD_INT 81
28156: ST_TO_ADDR
// tech_BasicTools := 82 ;
28157: LD_ADDR_EXP 111
28161: PUSH
28162: LD_INT 82
28164: ST_TO_ADDR
// tech_Cargo := 83 ;
28165: LD_ADDR_EXP 112
28169: PUSH
28170: LD_INT 83
28172: ST_TO_ADDR
// tech_Track := 84 ;
28173: LD_ADDR_EXP 113
28177: PUSH
28178: LD_INT 84
28180: ST_TO_ADDR
// tech_Crane := 85 ;
28181: LD_ADDR_EXP 114
28185: PUSH
28186: LD_INT 85
28188: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28189: LD_ADDR_EXP 115
28193: PUSH
28194: LD_INT 86
28196: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28197: LD_ADDR_EXP 116
28201: PUSH
28202: LD_INT 87
28204: ST_TO_ADDR
// end ;
28205: LD_VAR 0 1
28209: RET
// every 1 do
28210: GO 28212
28212: DISABLE
// InitGlobalVariables ; end_of_file
28213: CALL 28074 0 0
28217: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28218: LD_INT 0
28220: PPUSH
28221: PPUSH
// if exist_mode then
28222: LD_VAR 0 2
28226: IFFALSE 28251
// unit := CreateCharacter ( prefix & ident ) else
28228: LD_ADDR_VAR 0 5
28232: PUSH
28233: LD_VAR 0 3
28237: PUSH
28238: LD_VAR 0 1
28242: STR
28243: PPUSH
28244: CALL_OW 34
28248: ST_TO_ADDR
28249: GO 28266
// unit := NewCharacter ( ident ) ;
28251: LD_ADDR_VAR 0 5
28255: PUSH
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 25
28265: ST_TO_ADDR
// result := unit ;
28266: LD_ADDR_VAR 0 4
28270: PUSH
28271: LD_VAR 0 5
28275: ST_TO_ADDR
// end ;
28276: LD_VAR 0 4
28280: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28281: LD_INT 0
28283: PPUSH
28284: PPUSH
// if not side or not nation then
28285: LD_VAR 0 1
28289: NOT
28290: PUSH
28291: LD_VAR 0 2
28295: NOT
28296: OR
28297: IFFALSE 28301
// exit ;
28299: GO 29065
// case nation of nation_american :
28301: LD_VAR 0 2
28305: PUSH
28306: LD_INT 1
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28528
28314: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_INT 35
28322: PUSH
28323: LD_INT 45
28325: PUSH
28326: LD_INT 46
28328: PUSH
28329: LD_INT 47
28331: PUSH
28332: LD_INT 82
28334: PUSH
28335: LD_INT 83
28337: PUSH
28338: LD_INT 84
28340: PUSH
28341: LD_INT 85
28343: PUSH
28344: LD_INT 86
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: LD_INT 6
28355: PUSH
28356: LD_INT 15
28358: PUSH
28359: LD_INT 16
28361: PUSH
28362: LD_INT 7
28364: PUSH
28365: LD_INT 12
28367: PUSH
28368: LD_INT 13
28370: PUSH
28371: LD_INT 10
28373: PUSH
28374: LD_INT 14
28376: PUSH
28377: LD_INT 20
28379: PUSH
28380: LD_INT 21
28382: PUSH
28383: LD_INT 22
28385: PUSH
28386: LD_INT 25
28388: PUSH
28389: LD_INT 32
28391: PUSH
28392: LD_INT 27
28394: PUSH
28395: LD_INT 36
28397: PUSH
28398: LD_INT 69
28400: PUSH
28401: LD_INT 39
28403: PUSH
28404: LD_INT 34
28406: PUSH
28407: LD_INT 40
28409: PUSH
28410: LD_INT 48
28412: PUSH
28413: LD_INT 49
28415: PUSH
28416: LD_INT 50
28418: PUSH
28419: LD_INT 51
28421: PUSH
28422: LD_INT 52
28424: PUSH
28425: LD_INT 53
28427: PUSH
28428: LD_INT 54
28430: PUSH
28431: LD_INT 55
28433: PUSH
28434: LD_INT 56
28436: PUSH
28437: LD_INT 57
28439: PUSH
28440: LD_INT 58
28442: PUSH
28443: LD_INT 59
28445: PUSH
28446: LD_INT 60
28448: PUSH
28449: LD_INT 61
28451: PUSH
28452: LD_INT 62
28454: PUSH
28455: LD_INT 80
28457: PUSH
28458: LD_INT 82
28460: PUSH
28461: LD_INT 83
28463: PUSH
28464: LD_INT 84
28466: PUSH
28467: LD_INT 85
28469: PUSH
28470: LD_INT 86
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 28989
28528: LD_INT 2
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28758
28536: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28537: LD_ADDR_VAR 0 4
28541: PUSH
28542: LD_INT 35
28544: PUSH
28545: LD_INT 45
28547: PUSH
28548: LD_INT 46
28550: PUSH
28551: LD_INT 47
28553: PUSH
28554: LD_INT 82
28556: PUSH
28557: LD_INT 83
28559: PUSH
28560: LD_INT 84
28562: PUSH
28563: LD_INT 85
28565: PUSH
28566: LD_INT 87
28568: PUSH
28569: LD_INT 70
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 11
28577: PUSH
28578: LD_INT 3
28580: PUSH
28581: LD_INT 4
28583: PUSH
28584: LD_INT 5
28586: PUSH
28587: LD_INT 6
28589: PUSH
28590: LD_INT 15
28592: PUSH
28593: LD_INT 18
28595: PUSH
28596: LD_INT 7
28598: PUSH
28599: LD_INT 17
28601: PUSH
28602: LD_INT 8
28604: PUSH
28605: LD_INT 20
28607: PUSH
28608: LD_INT 21
28610: PUSH
28611: LD_INT 22
28613: PUSH
28614: LD_INT 72
28616: PUSH
28617: LD_INT 26
28619: PUSH
28620: LD_INT 69
28622: PUSH
28623: LD_INT 39
28625: PUSH
28626: LD_INT 40
28628: PUSH
28629: LD_INT 41
28631: PUSH
28632: LD_INT 42
28634: PUSH
28635: LD_INT 43
28637: PUSH
28638: LD_INT 48
28640: PUSH
28641: LD_INT 49
28643: PUSH
28644: LD_INT 50
28646: PUSH
28647: LD_INT 51
28649: PUSH
28650: LD_INT 52
28652: PUSH
28653: LD_INT 53
28655: PUSH
28656: LD_INT 54
28658: PUSH
28659: LD_INT 55
28661: PUSH
28662: LD_INT 56
28664: PUSH
28665: LD_INT 60
28667: PUSH
28668: LD_INT 61
28670: PUSH
28671: LD_INT 62
28673: PUSH
28674: LD_INT 66
28676: PUSH
28677: LD_INT 67
28679: PUSH
28680: LD_INT 68
28682: PUSH
28683: LD_INT 81
28685: PUSH
28686: LD_INT 82
28688: PUSH
28689: LD_INT 83
28691: PUSH
28692: LD_INT 84
28694: PUSH
28695: LD_INT 85
28697: PUSH
28698: LD_INT 87
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: ST_TO_ADDR
28756: GO 28989
28758: LD_INT 3
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28988
28766: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28767: LD_ADDR_VAR 0 4
28771: PUSH
28772: LD_INT 46
28774: PUSH
28775: LD_INT 47
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 82
28786: PUSH
28787: LD_INT 83
28789: PUSH
28790: LD_INT 84
28792: PUSH
28793: LD_INT 85
28795: PUSH
28796: LD_INT 86
28798: PUSH
28799: LD_INT 11
28801: PUSH
28802: LD_INT 9
28804: PUSH
28805: LD_INT 20
28807: PUSH
28808: LD_INT 19
28810: PUSH
28811: LD_INT 21
28813: PUSH
28814: LD_INT 24
28816: PUSH
28817: LD_INT 22
28819: PUSH
28820: LD_INT 25
28822: PUSH
28823: LD_INT 28
28825: PUSH
28826: LD_INT 29
28828: PUSH
28829: LD_INT 30
28831: PUSH
28832: LD_INT 31
28834: PUSH
28835: LD_INT 37
28837: PUSH
28838: LD_INT 38
28840: PUSH
28841: LD_INT 32
28843: PUSH
28844: LD_INT 27
28846: PUSH
28847: LD_INT 33
28849: PUSH
28850: LD_INT 69
28852: PUSH
28853: LD_INT 39
28855: PUSH
28856: LD_INT 34
28858: PUSH
28859: LD_INT 40
28861: PUSH
28862: LD_INT 71
28864: PUSH
28865: LD_INT 23
28867: PUSH
28868: LD_INT 44
28870: PUSH
28871: LD_INT 48
28873: PUSH
28874: LD_INT 49
28876: PUSH
28877: LD_INT 50
28879: PUSH
28880: LD_INT 51
28882: PUSH
28883: LD_INT 52
28885: PUSH
28886: LD_INT 53
28888: PUSH
28889: LD_INT 54
28891: PUSH
28892: LD_INT 55
28894: PUSH
28895: LD_INT 56
28897: PUSH
28898: LD_INT 57
28900: PUSH
28901: LD_INT 58
28903: PUSH
28904: LD_INT 59
28906: PUSH
28907: LD_INT 63
28909: PUSH
28910: LD_INT 64
28912: PUSH
28913: LD_INT 65
28915: PUSH
28916: LD_INT 82
28918: PUSH
28919: LD_INT 83
28921: PUSH
28922: LD_INT 84
28924: PUSH
28925: LD_INT 85
28927: PUSH
28928: LD_INT 86
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: ST_TO_ADDR
28986: GO 28989
28988: POP
// if state > - 1 and state < 3 then
28989: LD_VAR 0 3
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: GREATER
28998: PUSH
28999: LD_VAR 0 3
29003: PUSH
29004: LD_INT 3
29006: LESS
29007: AND
29008: IFFALSE 29065
// for i in result do
29010: LD_ADDR_VAR 0 5
29014: PUSH
29015: LD_VAR 0 4
29019: PUSH
29020: FOR_IN
29021: IFFALSE 29063
// if GetTech ( i , side ) <> state then
29023: LD_VAR 0 5
29027: PPUSH
29028: LD_VAR 0 1
29032: PPUSH
29033: CALL_OW 321
29037: PUSH
29038: LD_VAR 0 3
29042: NONEQUAL
29043: IFFALSE 29061
// result := result diff i ;
29045: LD_ADDR_VAR 0 4
29049: PUSH
29050: LD_VAR 0 4
29054: PUSH
29055: LD_VAR 0 5
29059: DIFF
29060: ST_TO_ADDR
29061: GO 29020
29063: POP
29064: POP
// end ;
29065: LD_VAR 0 4
29069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29070: LD_INT 0
29072: PPUSH
29073: PPUSH
29074: PPUSH
// result := true ;
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_INT 1
29082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: CALL_OW 480
29097: ST_TO_ADDR
// if not tmp then
29098: LD_VAR 0 5
29102: NOT
29103: IFFALSE 29107
// exit ;
29105: GO 29156
// for i in tmp do
29107: LD_ADDR_VAR 0 4
29111: PUSH
29112: LD_VAR 0 5
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29154
// if GetTech ( i , side ) <> state_researched then
29120: LD_VAR 0 4
29124: PPUSH
29125: LD_VAR 0 1
29129: PPUSH
29130: CALL_OW 321
29134: PUSH
29135: LD_INT 2
29137: NONEQUAL
29138: IFFALSE 29152
// begin result := false ;
29140: LD_ADDR_VAR 0 3
29144: PUSH
29145: LD_INT 0
29147: ST_TO_ADDR
// exit ;
29148: POP
29149: POP
29150: GO 29156
// end ;
29152: GO 29117
29154: POP
29155: POP
// end ;
29156: LD_VAR 0 3
29160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29161: LD_INT 0
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29176: LD_VAR 0 1
29180: NOT
29181: PUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 257
29191: PUSH
29192: LD_INT 9
29194: NONEQUAL
29195: OR
29196: IFFALSE 29200
// exit ;
29198: GO 29773
// side := GetSide ( unit ) ;
29200: LD_ADDR_VAR 0 9
29204: PUSH
29205: LD_VAR 0 1
29209: PPUSH
29210: CALL_OW 255
29214: ST_TO_ADDR
// tech_space := tech_spacanom ;
29215: LD_ADDR_VAR 0 12
29219: PUSH
29220: LD_INT 29
29222: ST_TO_ADDR
// tech_time := tech_taurad ;
29223: LD_ADDR_VAR 0 13
29227: PUSH
29228: LD_INT 28
29230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29231: LD_ADDR_VAR 0 11
29235: PUSH
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 310
29245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29246: LD_VAR 0 11
29250: PPUSH
29251: CALL_OW 247
29255: PUSH
29256: LD_INT 2
29258: EQUAL
29259: IFFALSE 29263
// exit ;
29261: GO 29773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29263: LD_ADDR_VAR 0 8
29267: PUSH
29268: LD_INT 81
29270: PUSH
29271: LD_VAR 0 9
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 3
29282: PUSH
29283: LD_INT 21
29285: PUSH
29286: LD_INT 3
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PPUSH
29301: CALL_OW 69
29305: ST_TO_ADDR
// if not tmp then
29306: LD_VAR 0 8
29310: NOT
29311: IFFALSE 29315
// exit ;
29313: GO 29773
// if in_unit then
29315: LD_VAR 0 11
29319: IFFALSE 29343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29321: LD_ADDR_VAR 0 10
29325: PUSH
29326: LD_VAR 0 8
29330: PPUSH
29331: LD_VAR 0 11
29335: PPUSH
29336: CALL_OW 74
29340: ST_TO_ADDR
29341: GO 29363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29343: LD_ADDR_VAR 0 10
29347: PUSH
29348: LD_VAR 0 8
29352: PPUSH
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 74
29362: ST_TO_ADDR
// if not enemy then
29363: LD_VAR 0 10
29367: NOT
29368: IFFALSE 29372
// exit ;
29370: GO 29773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29372: LD_VAR 0 11
29376: PUSH
29377: LD_VAR 0 11
29381: PPUSH
29382: LD_VAR 0 10
29386: PPUSH
29387: CALL_OW 296
29391: PUSH
29392: LD_INT 13
29394: GREATER
29395: AND
29396: PUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: LD_VAR 0 10
29406: PPUSH
29407: CALL_OW 296
29411: PUSH
29412: LD_INT 12
29414: GREATER
29415: OR
29416: IFFALSE 29420
// exit ;
29418: GO 29773
// missile := [ 1 ] ;
29420: LD_ADDR_VAR 0 14
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: EMPTY
29429: LIST
29430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29431: LD_VAR 0 9
29435: PPUSH
29436: LD_VAR 0 12
29440: PPUSH
29441: CALL_OW 325
29445: IFFALSE 29474
// missile := Insert ( missile , missile + 1 , 2 ) ;
29447: LD_ADDR_VAR 0 14
29451: PUSH
29452: LD_VAR 0 14
29456: PPUSH
29457: LD_VAR 0 14
29461: PUSH
29462: LD_INT 1
29464: PLUS
29465: PPUSH
29466: LD_INT 2
29468: PPUSH
29469: CALL_OW 2
29473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29474: LD_VAR 0 9
29478: PPUSH
29479: LD_VAR 0 13
29483: PPUSH
29484: CALL_OW 325
29488: PUSH
29489: LD_VAR 0 10
29493: PPUSH
29494: CALL_OW 255
29498: PPUSH
29499: LD_VAR 0 13
29503: PPUSH
29504: CALL_OW 325
29508: NOT
29509: AND
29510: IFFALSE 29539
// missile := Insert ( missile , missile + 1 , 3 ) ;
29512: LD_ADDR_VAR 0 14
29516: PUSH
29517: LD_VAR 0 14
29521: PPUSH
29522: LD_VAR 0 14
29526: PUSH
29527: LD_INT 1
29529: PLUS
29530: PPUSH
29531: LD_INT 3
29533: PPUSH
29534: CALL_OW 2
29538: ST_TO_ADDR
// if missile < 2 then
29539: LD_VAR 0 14
29543: PUSH
29544: LD_INT 2
29546: LESS
29547: IFFALSE 29551
// exit ;
29549: GO 29773
// x := GetX ( enemy ) ;
29551: LD_ADDR_VAR 0 4
29555: PUSH
29556: LD_VAR 0 10
29560: PPUSH
29561: CALL_OW 250
29565: ST_TO_ADDR
// y := GetY ( enemy ) ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_VAR 0 10
29575: PPUSH
29576: CALL_OW 251
29580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29581: LD_ADDR_VAR 0 6
29585: PUSH
29586: LD_VAR 0 4
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PPUSH
29595: LD_INT 1
29597: PPUSH
29598: CALL_OW 12
29602: PLUS
29603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29604: LD_ADDR_VAR 0 7
29608: PUSH
29609: LD_VAR 0 5
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PPUSH
29618: LD_INT 1
29620: PPUSH
29621: CALL_OW 12
29625: PLUS
29626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29627: LD_VAR 0 6
29631: PPUSH
29632: LD_VAR 0 7
29636: PPUSH
29637: CALL_OW 488
29641: NOT
29642: IFFALSE 29664
// begin _x := x ;
29644: LD_ADDR_VAR 0 6
29648: PUSH
29649: LD_VAR 0 4
29653: ST_TO_ADDR
// _y := y ;
29654: LD_ADDR_VAR 0 7
29658: PUSH
29659: LD_VAR 0 5
29663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29664: LD_ADDR_VAR 0 3
29668: PUSH
29669: LD_INT 1
29671: PPUSH
29672: LD_VAR 0 14
29676: PPUSH
29677: CALL_OW 12
29681: ST_TO_ADDR
// case i of 1 :
29682: LD_VAR 0 3
29686: PUSH
29687: LD_INT 1
29689: DOUBLE
29690: EQUAL
29691: IFTRUE 29695
29693: GO 29712
29695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29696: LD_VAR 0 1
29700: PPUSH
29701: LD_VAR 0 10
29705: PPUSH
29706: CALL_OW 115
29710: GO 29773
29712: LD_INT 2
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29720
29718: GO 29742
29720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 6
29730: PPUSH
29731: LD_VAR 0 7
29735: PPUSH
29736: CALL_OW 153
29740: GO 29773
29742: LD_INT 3
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29772
29750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29751: LD_VAR 0 1
29755: PPUSH
29756: LD_VAR 0 6
29760: PPUSH
29761: LD_VAR 0 7
29765: PPUSH
29766: CALL_OW 154
29770: GO 29773
29772: POP
// end ;
29773: LD_VAR 0 2
29777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
// if not unit or not building then
29786: LD_VAR 0 1
29790: NOT
29791: PUSH
29792: LD_VAR 0 2
29796: NOT
29797: OR
29798: IFFALSE 29802
// exit ;
29800: GO 29960
// x := GetX ( building ) ;
29802: LD_ADDR_VAR 0 5
29806: PUSH
29807: LD_VAR 0 2
29811: PPUSH
29812: CALL_OW 250
29816: ST_TO_ADDR
// y := GetY ( building ) ;
29817: LD_ADDR_VAR 0 6
29821: PUSH
29822: LD_VAR 0 2
29826: PPUSH
29827: CALL_OW 251
29831: ST_TO_ADDR
// for i = 0 to 5 do
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: DOUBLE
29838: LD_INT 0
29840: DEC
29841: ST_TO_ADDR
29842: LD_INT 5
29844: PUSH
29845: FOR_TO
29846: IFFALSE 29958
// begin _x := ShiftX ( x , i , 3 ) ;
29848: LD_ADDR_VAR 0 7
29852: PUSH
29853: LD_VAR 0 5
29857: PPUSH
29858: LD_VAR 0 4
29862: PPUSH
29863: LD_INT 3
29865: PPUSH
29866: CALL_OW 272
29870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29871: LD_ADDR_VAR 0 8
29875: PUSH
29876: LD_VAR 0 6
29880: PPUSH
29881: LD_VAR 0 4
29885: PPUSH
29886: LD_INT 3
29888: PPUSH
29889: CALL_OW 273
29893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29894: LD_VAR 0 7
29898: PPUSH
29899: LD_VAR 0 8
29903: PPUSH
29904: CALL_OW 488
29908: NOT
29909: IFFALSE 29913
// continue ;
29911: GO 29845
// if HexInfo ( _x , _y ) = 0 then
29913: LD_VAR 0 7
29917: PPUSH
29918: LD_VAR 0 8
29922: PPUSH
29923: CALL_OW 428
29927: PUSH
29928: LD_INT 0
29930: EQUAL
29931: IFFALSE 29956
// begin ComMoveXY ( unit , _x , _y ) ;
29933: LD_VAR 0 1
29937: PPUSH
29938: LD_VAR 0 7
29942: PPUSH
29943: LD_VAR 0 8
29947: PPUSH
29948: CALL_OW 111
// exit ;
29952: POP
29953: POP
29954: GO 29960
// end ; end ;
29956: GO 29845
29958: POP
29959: POP
// end ;
29960: LD_VAR 0 3
29964: RET
// export function ScanBase ( side , base_area ) ; begin
29965: LD_INT 0
29967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_VAR 0 2
29977: PPUSH
29978: LD_INT 81
29980: PUSH
29981: LD_VAR 0 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PPUSH
29990: CALL_OW 70
29994: ST_TO_ADDR
// end ;
29995: LD_VAR 0 3
29999: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
// result := false ;
30006: LD_ADDR_VAR 0 2
30010: PUSH
30011: LD_INT 0
30013: ST_TO_ADDR
// side := GetSide ( unit ) ;
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 255
30028: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30029: LD_ADDR_VAR 0 4
30033: PUSH
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 248
30043: ST_TO_ADDR
// case nat of 1 :
30044: LD_VAR 0 4
30048: PUSH
30049: LD_INT 1
30051: DOUBLE
30052: EQUAL
30053: IFTRUE 30057
30055: GO 30068
30057: POP
// tech := tech_lassight ; 2 :
30058: LD_ADDR_VAR 0 5
30062: PUSH
30063: LD_INT 12
30065: ST_TO_ADDR
30066: GO 30107
30068: LD_INT 2
30070: DOUBLE
30071: EQUAL
30072: IFTRUE 30076
30074: GO 30087
30076: POP
// tech := tech_mortar ; 3 :
30077: LD_ADDR_VAR 0 5
30081: PUSH
30082: LD_INT 41
30084: ST_TO_ADDR
30085: GO 30107
30087: LD_INT 3
30089: DOUBLE
30090: EQUAL
30091: IFTRUE 30095
30093: GO 30106
30095: POP
// tech := tech_bazooka ; end ;
30096: LD_ADDR_VAR 0 5
30100: PUSH
30101: LD_INT 44
30103: ST_TO_ADDR
30104: GO 30107
30106: POP
// if Researched ( side , tech ) then
30107: LD_VAR 0 3
30111: PPUSH
30112: LD_VAR 0 5
30116: PPUSH
30117: CALL_OW 325
30121: IFFALSE 30148
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: LD_INT 5
30130: PUSH
30131: LD_INT 8
30133: PUSH
30134: LD_INT 9
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: PUSH
30142: LD_VAR 0 4
30146: ARRAY
30147: ST_TO_ADDR
// end ;
30148: LD_VAR 0 2
30152: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30153: LD_INT 0
30155: PPUSH
30156: PPUSH
30157: PPUSH
// if not mines then
30158: LD_VAR 0 2
30162: NOT
30163: IFFALSE 30167
// exit ;
30165: GO 30311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30167: LD_ADDR_VAR 0 5
30171: PUSH
30172: LD_INT 81
30174: PUSH
30175: LD_VAR 0 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: LD_INT 21
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 69
30209: ST_TO_ADDR
// for i in mines do
30210: LD_ADDR_VAR 0 4
30214: PUSH
30215: LD_VAR 0 2
30219: PUSH
30220: FOR_IN
30221: IFFALSE 30309
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30223: LD_VAR 0 4
30227: PUSH
30228: LD_INT 1
30230: ARRAY
30231: PPUSH
30232: LD_VAR 0 4
30236: PUSH
30237: LD_INT 2
30239: ARRAY
30240: PPUSH
30241: CALL_OW 458
30245: NOT
30246: IFFALSE 30250
// continue ;
30248: GO 30220
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30250: LD_VAR 0 4
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: LD_VAR 0 4
30263: PUSH
30264: LD_INT 2
30266: ARRAY
30267: PPUSH
30268: CALL_OW 428
30272: PUSH
30273: LD_VAR 0 5
30277: IN
30278: IFFALSE 30307
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30280: LD_VAR 0 4
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: LD_VAR 0 4
30293: PUSH
30294: LD_INT 2
30296: ARRAY
30297: PPUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL_OW 456
// end ;
30307: GO 30220
30309: POP
30310: POP
// end ;
30311: LD_VAR 0 3
30315: RET
// export function Count ( array ) ; var i ; begin
30316: LD_INT 0
30318: PPUSH
30319: PPUSH
// result := 0 ;
30320: LD_ADDR_VAR 0 2
30324: PUSH
30325: LD_INT 0
30327: ST_TO_ADDR
// for i in array do
30328: LD_ADDR_VAR 0 3
30332: PUSH
30333: LD_VAR 0 1
30337: PUSH
30338: FOR_IN
30339: IFFALSE 30363
// if i then
30341: LD_VAR 0 3
30345: IFFALSE 30361
// result := result + 1 ;
30347: LD_ADDR_VAR 0 2
30351: PUSH
30352: LD_VAR 0 2
30356: PUSH
30357: LD_INT 1
30359: PLUS
30360: ST_TO_ADDR
30361: GO 30338
30363: POP
30364: POP
// end ;
30365: LD_VAR 0 2
30369: RET
// export function IsEmpty ( building ) ; begin
30370: LD_INT 0
30372: PPUSH
// if not building then
30373: LD_VAR 0 1
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 30425
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30382: LD_ADDR_VAR 0 2
30386: PUSH
30387: LD_VAR 0 1
30391: PUSH
30392: LD_INT 22
30394: PUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 255
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 58
30411: PUSH
30412: EMPTY
30413: LIST
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: IN
30424: ST_TO_ADDR
// end ;
30425: LD_VAR 0 2
30429: RET
// export function IsNotFull ( building ) ; begin
30430: LD_INT 0
30432: PPUSH
// if not building then
30433: LD_VAR 0 1
30437: NOT
30438: IFFALSE 30442
// exit ;
30440: GO 30461
// result := UnitsInside ( building ) < 6 ;
30442: LD_ADDR_VAR 0 2
30446: PUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 313
30456: PUSH
30457: LD_INT 6
30459: LESS
30460: ST_TO_ADDR
// end ;
30461: LD_VAR 0 2
30465: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30466: LD_INT 0
30468: PPUSH
30469: PPUSH
30470: PPUSH
30471: PPUSH
// tmp := [ ] ;
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: EMPTY
30478: ST_TO_ADDR
// list := [ ] ;
30479: LD_ADDR_VAR 0 5
30483: PUSH
30484: EMPTY
30485: ST_TO_ADDR
// for i = 16 to 25 do
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: DOUBLE
30492: LD_INT 16
30494: DEC
30495: ST_TO_ADDR
30496: LD_INT 25
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30573
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_VAR 0 3
30511: PUSH
30512: LD_INT 22
30514: PUSH
30515: LD_VAR 0 1
30519: PPUSH
30520: CALL_OW 255
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 91
30531: PUSH
30532: LD_VAR 0 1
30536: PUSH
30537: LD_INT 6
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 30
30547: PUSH
30548: LD_VAR 0 4
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: PPUSH
30565: CALL_OW 69
30569: ADD
30570: ST_TO_ADDR
30571: GO 30499
30573: POP
30574: POP
// for i = 1 to tmp do
30575: LD_ADDR_VAR 0 4
30579: PUSH
30580: DOUBLE
30581: LD_INT 1
30583: DEC
30584: ST_TO_ADDR
30585: LD_VAR 0 3
30589: PUSH
30590: FOR_TO
30591: IFFALSE 30679
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: LD_VAR 0 5
30602: PUSH
30603: LD_VAR 0 3
30607: PUSH
30608: LD_VAR 0 4
30612: ARRAY
30613: PPUSH
30614: CALL_OW 266
30618: PUSH
30619: LD_VAR 0 3
30623: PUSH
30624: LD_VAR 0 4
30628: ARRAY
30629: PPUSH
30630: CALL_OW 250
30634: PUSH
30635: LD_VAR 0 3
30639: PUSH
30640: LD_VAR 0 4
30644: ARRAY
30645: PPUSH
30646: CALL_OW 251
30650: PUSH
30651: LD_VAR 0 3
30655: PUSH
30656: LD_VAR 0 4
30660: ARRAY
30661: PPUSH
30662: CALL_OW 254
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: ADD
30676: ST_TO_ADDR
30677: GO 30590
30679: POP
30680: POP
// result := list ;
30681: LD_ADDR_VAR 0 2
30685: PUSH
30686: LD_VAR 0 5
30690: ST_TO_ADDR
// end ;
30691: LD_VAR 0 2
30695: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
// if not factory then
30705: LD_VAR 0 1
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 31307
// if control = control_apeman then
30714: LD_VAR 0 4
30718: PUSH
30719: LD_INT 5
30721: EQUAL
30722: IFFALSE 30831
// begin tmp := UnitsInside ( factory ) ;
30724: LD_ADDR_VAR 0 8
30728: PUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 313
30738: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30739: LD_VAR 0 8
30743: PPUSH
30744: LD_INT 25
30746: PUSH
30747: LD_INT 12
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PPUSH
30754: CALL_OW 72
30758: NOT
30759: IFFALSE 30769
// control := control_manual ;
30761: LD_ADDR_VAR 0 4
30765: PUSH
30766: LD_INT 1
30768: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30769: LD_ADDR_VAR 0 8
30773: PUSH
30774: LD_VAR 0 1
30778: PPUSH
30779: CALL 30466 0 1
30783: ST_TO_ADDR
// if tmp then
30784: LD_VAR 0 8
30788: IFFALSE 30831
// begin for i in tmp do
30790: LD_ADDR_VAR 0 7
30794: PUSH
30795: LD_VAR 0 8
30799: PUSH
30800: FOR_IN
30801: IFFALSE 30829
// if i [ 1 ] = b_ext_radio then
30803: LD_VAR 0 7
30807: PUSH
30808: LD_INT 1
30810: ARRAY
30811: PUSH
30812: LD_INT 22
30814: EQUAL
30815: IFFALSE 30827
// begin control := control_remote ;
30817: LD_ADDR_VAR 0 4
30821: PUSH
30822: LD_INT 2
30824: ST_TO_ADDR
// break ;
30825: GO 30829
// end ;
30827: GO 30800
30829: POP
30830: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30831: LD_VAR 0 1
30835: PPUSH
30836: LD_VAR 0 2
30840: PPUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: LD_VAR 0 4
30850: PPUSH
30851: LD_VAR 0 5
30855: PPUSH
30856: CALL_OW 448
30860: IFFALSE 30895
// begin result := [ chassis , engine , control , weapon ] ;
30862: LD_ADDR_VAR 0 6
30866: PUSH
30867: LD_VAR 0 2
30871: PUSH
30872: LD_VAR 0 3
30876: PUSH
30877: LD_VAR 0 4
30881: PUSH
30882: LD_VAR 0 5
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// exit ;
30893: GO 31307
// end ; _chassis := AvailableChassisList ( factory ) ;
30895: LD_ADDR_VAR 0 9
30899: PUSH
30900: LD_VAR 0 1
30904: PPUSH
30905: CALL_OW 475
30909: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30910: LD_ADDR_VAR 0 11
30914: PUSH
30915: LD_VAR 0 1
30919: PPUSH
30920: CALL_OW 476
30924: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30925: LD_ADDR_VAR 0 12
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 477
30939: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30940: LD_ADDR_VAR 0 10
30944: PUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 478
30954: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30955: LD_VAR 0 9
30959: NOT
30960: PUSH
30961: LD_VAR 0 11
30965: NOT
30966: OR
30967: PUSH
30968: LD_VAR 0 12
30972: NOT
30973: OR
30974: PUSH
30975: LD_VAR 0 10
30979: NOT
30980: OR
30981: IFFALSE 31016
// begin result := [ chassis , engine , control , weapon ] ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_VAR 0 2
30992: PUSH
30993: LD_VAR 0 3
30997: PUSH
30998: LD_VAR 0 4
31002: PUSH
31003: LD_VAR 0 5
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: ST_TO_ADDR
// exit ;
31014: GO 31307
// end ; if not chassis in _chassis then
31016: LD_VAR 0 2
31020: PUSH
31021: LD_VAR 0 9
31025: IN
31026: NOT
31027: IFFALSE 31053
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_VAR 0 9
31038: PUSH
31039: LD_INT 1
31041: PPUSH
31042: LD_VAR 0 9
31046: PPUSH
31047: CALL_OW 12
31051: ARRAY
31052: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31053: LD_VAR 0 2
31057: PPUSH
31058: LD_VAR 0 3
31062: PPUSH
31063: CALL 31312 0 2
31067: NOT
31068: IFFALSE 31127
// repeat engine := _engine [ 1 ] ;
31070: LD_ADDR_VAR 0 3
31074: PUSH
31075: LD_VAR 0 11
31079: PUSH
31080: LD_INT 1
31082: ARRAY
31083: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31084: LD_ADDR_VAR 0 11
31088: PUSH
31089: LD_VAR 0 11
31093: PPUSH
31094: LD_INT 1
31096: PPUSH
31097: CALL_OW 3
31101: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31102: LD_VAR 0 2
31106: PPUSH
31107: LD_VAR 0 3
31111: PPUSH
31112: CALL 31312 0 2
31116: PUSH
31117: LD_VAR 0 11
31121: PUSH
31122: EMPTY
31123: EQUAL
31124: OR
31125: IFFALSE 31070
// if not control in _control then
31127: LD_VAR 0 4
31131: PUSH
31132: LD_VAR 0 12
31136: IN
31137: NOT
31138: IFFALSE 31164
// control := _control [ rand ( 1 , _control ) ] ;
31140: LD_ADDR_VAR 0 4
31144: PUSH
31145: LD_VAR 0 12
31149: PUSH
31150: LD_INT 1
31152: PPUSH
31153: LD_VAR 0 12
31157: PPUSH
31158: CALL_OW 12
31162: ARRAY
31163: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31164: LD_VAR 0 2
31168: PPUSH
31169: LD_VAR 0 5
31173: PPUSH
31174: CALL 31532 0 2
31178: NOT
31179: IFFALSE 31238
// repeat weapon := _weapon [ 1 ] ;
31181: LD_ADDR_VAR 0 5
31185: PUSH
31186: LD_VAR 0 10
31190: PUSH
31191: LD_INT 1
31193: ARRAY
31194: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31195: LD_ADDR_VAR 0 10
31199: PUSH
31200: LD_VAR 0 10
31204: PPUSH
31205: LD_INT 1
31207: PPUSH
31208: CALL_OW 3
31212: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31213: LD_VAR 0 2
31217: PPUSH
31218: LD_VAR 0 5
31222: PPUSH
31223: CALL 31532 0 2
31227: PUSH
31228: LD_VAR 0 10
31232: PUSH
31233: EMPTY
31234: EQUAL
31235: OR
31236: IFFALSE 31181
// result := [ ] ;
31238: LD_ADDR_VAR 0 6
31242: PUSH
31243: EMPTY
31244: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31245: LD_VAR 0 1
31249: PPUSH
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 3
31259: PPUSH
31260: LD_VAR 0 4
31264: PPUSH
31265: LD_VAR 0 5
31269: PPUSH
31270: CALL_OW 448
31274: IFFALSE 31307
// result := [ chassis , engine , control , weapon ] ;
31276: LD_ADDR_VAR 0 6
31280: PUSH
31281: LD_VAR 0 2
31285: PUSH
31286: LD_VAR 0 3
31290: PUSH
31291: LD_VAR 0 4
31295: PUSH
31296: LD_VAR 0 5
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// end ;
31307: LD_VAR 0 6
31311: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31312: LD_INT 0
31314: PPUSH
// if not chassis or not engine then
31315: LD_VAR 0 1
31319: NOT
31320: PUSH
31321: LD_VAR 0 2
31325: NOT
31326: OR
31327: IFFALSE 31331
// exit ;
31329: GO 31527
// case engine of engine_solar :
31331: LD_VAR 0 2
31335: PUSH
31336: LD_INT 2
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31382
31344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: LD_INT 11
31352: PUSH
31353: LD_INT 12
31355: PUSH
31356: LD_INT 13
31358: PUSH
31359: LD_INT 14
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
31380: GO 31511
31382: LD_INT 1
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31452
31390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_INT 11
31398: PUSH
31399: LD_INT 12
31401: PUSH
31402: LD_INT 13
31404: PUSH
31405: LD_INT 14
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: LD_INT 5
31422: PUSH
31423: LD_INT 21
31425: PUSH
31426: LD_INT 23
31428: PUSH
31429: LD_INT 22
31431: PUSH
31432: LD_INT 24
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 31511
31452: LD_INT 3
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31510
31460: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 13
31468: PUSH
31469: LD_INT 14
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 4
31480: PUSH
31481: LD_INT 5
31483: PUSH
31484: LD_INT 21
31486: PUSH
31487: LD_INT 22
31489: PUSH
31490: LD_INT 23
31492: PUSH
31493: LD_INT 24
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
31508: GO 31511
31510: POP
// result := ( chassis in result ) ;
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_VAR 0 1
31520: PUSH
31521: LD_VAR 0 3
31525: IN
31526: ST_TO_ADDR
// end ;
31527: LD_VAR 0 3
31531: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31532: LD_INT 0
31534: PPUSH
// if not chassis or not weapon then
31535: LD_VAR 0 1
31539: NOT
31540: PUSH
31541: LD_VAR 0 2
31545: NOT
31546: OR
31547: IFFALSE 31551
// exit ;
31549: GO 32577
// case weapon of us_machine_gun :
31551: LD_VAR 0 2
31555: PUSH
31556: LD_INT 2
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31594
31564: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31565: LD_ADDR_VAR 0 3
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: LD_INT 4
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
31592: GO 32561
31594: LD_INT 3
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31632
31602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: LD_INT 5
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
31630: GO 32561
31632: LD_INT 11
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31670
31640: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31641: LD_ADDR_VAR 0 3
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: LD_INT 5
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
31668: GO 32561
31670: LD_INT 4
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31704
31678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 3
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: LD_INT 5
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
31702: GO 32561
31704: LD_INT 5
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31738
31712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: LD_INT 5
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
31736: GO 32561
31738: LD_INT 9
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31772
31746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: LD_INT 4
31760: PUSH
31761: LD_INT 5
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
31770: GO 32561
31772: LD_INT 7
31774: DOUBLE
31775: EQUAL
31776: IFTRUE 31780
31778: GO 31806
31780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31781: LD_ADDR_VAR 0 3
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 5
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: ST_TO_ADDR
31804: GO 32561
31806: LD_INT 12
31808: DOUBLE
31809: EQUAL
31810: IFTRUE 31814
31812: GO 31840
31814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
31838: GO 32561
31840: LD_INT 13
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31874
31848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31849: LD_ADDR_VAR 0 3
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 4
31862: PUSH
31863: LD_INT 5
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
31872: GO 32561
31874: LD_INT 14
31876: DOUBLE
31877: EQUAL
31878: IFTRUE 31882
31880: GO 31900
31882: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: LD_INT 5
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: ST_TO_ADDR
31898: GO 32561
31900: LD_INT 6
31902: DOUBLE
31903: EQUAL
31904: IFTRUE 31908
31906: GO 31926
31908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 4
31916: PUSH
31917: LD_INT 5
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: ST_TO_ADDR
31924: GO 32561
31926: LD_INT 10
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31952
31934: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 4
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32561
31952: LD_INT 22
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31986
31960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 11
31968: PUSH
31969: LD_INT 12
31971: PUSH
31972: LD_INT 13
31974: PUSH
31975: LD_INT 14
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
31984: GO 32561
31986: LD_INT 23
31988: DOUBLE
31989: EQUAL
31990: IFTRUE 31994
31992: GO 32020
31994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_INT 11
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 13
32008: PUSH
32009: LD_INT 14
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
32018: GO 32561
32020: LD_INT 24
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32054
32028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 11
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 13
32042: PUSH
32043: LD_INT 14
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
32052: GO 32561
32054: LD_INT 30
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32088
32062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_INT 11
32070: PUSH
32071: LD_INT 12
32073: PUSH
32074: LD_INT 13
32076: PUSH
32077: LD_INT 14
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
32086: GO 32561
32088: LD_INT 25
32090: DOUBLE
32091: EQUAL
32092: IFTRUE 32096
32094: GO 32114
32096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32097: LD_ADDR_VAR 0 3
32101: PUSH
32102: LD_INT 13
32104: PUSH
32105: LD_INT 14
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 32561
32114: LD_INT 27
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32140
32122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_INT 13
32130: PUSH
32131: LD_INT 14
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: ST_TO_ADDR
32138: GO 32561
32140: LD_INT 28
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32166
32148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 13
32156: PUSH
32157: LD_INT 14
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32561
32166: LD_INT 29
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32192
32174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 14
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32561
32192: LD_INT 31
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32218
32200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 13
32208: PUSH
32209: LD_INT 14
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 32561
32218: LD_INT 26
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32244
32226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 13
32234: PUSH
32235: LD_INT 14
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32561
32244: LD_INT 42
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32278
32252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 21
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_INT 23
32266: PUSH
32267: LD_INT 24
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
32276: GO 32561
32278: LD_INT 43
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32312
32286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32287: LD_ADDR_VAR 0 3
32291: PUSH
32292: LD_INT 21
32294: PUSH
32295: LD_INT 22
32297: PUSH
32298: LD_INT 23
32300: PUSH
32301: LD_INT 24
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: ST_TO_ADDR
32310: GO 32561
32312: LD_INT 44
32314: DOUBLE
32315: EQUAL
32316: IFTRUE 32320
32318: GO 32346
32320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32321: LD_ADDR_VAR 0 3
32325: PUSH
32326: LD_INT 21
32328: PUSH
32329: LD_INT 22
32331: PUSH
32332: LD_INT 23
32334: PUSH
32335: LD_INT 24
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
32344: GO 32561
32346: LD_INT 45
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32380
32354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32355: LD_ADDR_VAR 0 3
32359: PUSH
32360: LD_INT 21
32362: PUSH
32363: LD_INT 22
32365: PUSH
32366: LD_INT 23
32368: PUSH
32369: LD_INT 24
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: ST_TO_ADDR
32378: GO 32561
32380: LD_INT 49
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32388
32386: GO 32414
32388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32389: LD_ADDR_VAR 0 3
32393: PUSH
32394: LD_INT 21
32396: PUSH
32397: LD_INT 22
32399: PUSH
32400: LD_INT 23
32402: PUSH
32403: LD_INT 24
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
32412: GO 32561
32414: LD_INT 51
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32448
32422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 21
32430: PUSH
32431: LD_INT 22
32433: PUSH
32434: LD_INT 23
32436: PUSH
32437: LD_INT 24
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: ST_TO_ADDR
32446: GO 32561
32448: LD_INT 52
32450: DOUBLE
32451: EQUAL
32452: IFTRUE 32456
32454: GO 32482
32456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32457: LD_ADDR_VAR 0 3
32461: PUSH
32462: LD_INT 21
32464: PUSH
32465: LD_INT 22
32467: PUSH
32468: LD_INT 23
32470: PUSH
32471: LD_INT 24
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
32480: GO 32561
32482: LD_INT 53
32484: DOUBLE
32485: EQUAL
32486: IFTRUE 32490
32488: GO 32508
32490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32491: LD_ADDR_VAR 0 3
32495: PUSH
32496: LD_INT 23
32498: PUSH
32499: LD_INT 24
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: ST_TO_ADDR
32506: GO 32561
32508: LD_INT 46
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32534
32516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 23
32524: PUSH
32525: LD_INT 24
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 32561
32534: LD_INT 47
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32560
32542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 23
32550: PUSH
32551: LD_INT 24
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 32561
32560: POP
// result := ( chassis in result ) ;
32561: LD_ADDR_VAR 0 3
32565: PUSH
32566: LD_VAR 0 1
32570: PUSH
32571: LD_VAR 0 3
32575: IN
32576: ST_TO_ADDR
// end ;
32577: LD_VAR 0 3
32581: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
// result := array ;
32591: LD_ADDR_VAR 0 5
32595: PUSH
32596: LD_VAR 0 1
32600: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32601: LD_VAR 0 1
32605: NOT
32606: PUSH
32607: LD_VAR 0 2
32611: NOT
32612: OR
32613: PUSH
32614: LD_VAR 0 3
32618: NOT
32619: OR
32620: PUSH
32621: LD_VAR 0 2
32625: PUSH
32626: LD_VAR 0 1
32630: GREATER
32631: OR
32632: PUSH
32633: LD_VAR 0 3
32637: PUSH
32638: LD_VAR 0 1
32642: GREATER
32643: OR
32644: IFFALSE 32648
// exit ;
32646: GO 32944
// if direction then
32648: LD_VAR 0 4
32652: IFFALSE 32716
// begin d := 1 ;
32654: LD_ADDR_VAR 0 9
32658: PUSH
32659: LD_INT 1
32661: ST_TO_ADDR
// if i_from > i_to then
32662: LD_VAR 0 2
32666: PUSH
32667: LD_VAR 0 3
32671: GREATER
32672: IFFALSE 32698
// length := ( array - i_from ) + i_to else
32674: LD_ADDR_VAR 0 11
32678: PUSH
32679: LD_VAR 0 1
32683: PUSH
32684: LD_VAR 0 2
32688: MINUS
32689: PUSH
32690: LD_VAR 0 3
32694: PLUS
32695: ST_TO_ADDR
32696: GO 32714
// length := i_to - i_from ;
32698: LD_ADDR_VAR 0 11
32702: PUSH
32703: LD_VAR 0 3
32707: PUSH
32708: LD_VAR 0 2
32712: MINUS
32713: ST_TO_ADDR
// end else
32714: GO 32777
// begin d := - 1 ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: ST_TO_ADDR
// if i_from > i_to then
32725: LD_VAR 0 2
32729: PUSH
32730: LD_VAR 0 3
32734: GREATER
32735: IFFALSE 32755
// length := i_from - i_to else
32737: LD_ADDR_VAR 0 11
32741: PUSH
32742: LD_VAR 0 2
32746: PUSH
32747: LD_VAR 0 3
32751: MINUS
32752: ST_TO_ADDR
32753: GO 32777
// length := ( array - i_to ) + i_from ;
32755: LD_ADDR_VAR 0 11
32759: PUSH
32760: LD_VAR 0 1
32764: PUSH
32765: LD_VAR 0 3
32769: MINUS
32770: PUSH
32771: LD_VAR 0 2
32775: PLUS
32776: ST_TO_ADDR
// end ; if not length then
32777: LD_VAR 0 11
32781: NOT
32782: IFFALSE 32786
// exit ;
32784: GO 32944
// tmp := array ;
32786: LD_ADDR_VAR 0 10
32790: PUSH
32791: LD_VAR 0 1
32795: ST_TO_ADDR
// for i = 1 to length do
32796: LD_ADDR_VAR 0 6
32800: PUSH
32801: DOUBLE
32802: LD_INT 1
32804: DEC
32805: ST_TO_ADDR
32806: LD_VAR 0 11
32810: PUSH
32811: FOR_TO
32812: IFFALSE 32932
// begin for j = 1 to array do
32814: LD_ADDR_VAR 0 7
32818: PUSH
32819: DOUBLE
32820: LD_INT 1
32822: DEC
32823: ST_TO_ADDR
32824: LD_VAR 0 1
32828: PUSH
32829: FOR_TO
32830: IFFALSE 32918
// begin k := j + d ;
32832: LD_ADDR_VAR 0 8
32836: PUSH
32837: LD_VAR 0 7
32841: PUSH
32842: LD_VAR 0 9
32846: PLUS
32847: ST_TO_ADDR
// if k > array then
32848: LD_VAR 0 8
32852: PUSH
32853: LD_VAR 0 1
32857: GREATER
32858: IFFALSE 32868
// k := 1 ;
32860: LD_ADDR_VAR 0 8
32864: PUSH
32865: LD_INT 1
32867: ST_TO_ADDR
// if not k then
32868: LD_VAR 0 8
32872: NOT
32873: IFFALSE 32885
// k := array ;
32875: LD_ADDR_VAR 0 8
32879: PUSH
32880: LD_VAR 0 1
32884: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32885: LD_ADDR_VAR 0 10
32889: PUSH
32890: LD_VAR 0 10
32894: PPUSH
32895: LD_VAR 0 8
32899: PPUSH
32900: LD_VAR 0 1
32904: PUSH
32905: LD_VAR 0 7
32909: ARRAY
32910: PPUSH
32911: CALL_OW 1
32915: ST_TO_ADDR
// end ;
32916: GO 32829
32918: POP
32919: POP
// array := tmp ;
32920: LD_ADDR_VAR 0 1
32924: PUSH
32925: LD_VAR 0 10
32929: ST_TO_ADDR
// end ;
32930: GO 32811
32932: POP
32933: POP
// result := array ;
32934: LD_ADDR_VAR 0 5
32938: PUSH
32939: LD_VAR 0 1
32943: ST_TO_ADDR
// end ;
32944: LD_VAR 0 5
32948: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32949: LD_INT 0
32951: PPUSH
32952: PPUSH
// result := 0 ;
32953: LD_ADDR_VAR 0 3
32957: PUSH
32958: LD_INT 0
32960: ST_TO_ADDR
// if not array or not value in array then
32961: LD_VAR 0 1
32965: NOT
32966: PUSH
32967: LD_VAR 0 2
32971: PUSH
32972: LD_VAR 0 1
32976: IN
32977: NOT
32978: OR
32979: IFFALSE 32983
// exit ;
32981: GO 33037
// for i = 1 to array do
32983: LD_ADDR_VAR 0 4
32987: PUSH
32988: DOUBLE
32989: LD_INT 1
32991: DEC
32992: ST_TO_ADDR
32993: LD_VAR 0 1
32997: PUSH
32998: FOR_TO
32999: IFFALSE 33035
// if value = array [ i ] then
33001: LD_VAR 0 2
33005: PUSH
33006: LD_VAR 0 1
33010: PUSH
33011: LD_VAR 0 4
33015: ARRAY
33016: EQUAL
33017: IFFALSE 33033
// begin result := i ;
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_VAR 0 4
33028: ST_TO_ADDR
// exit ;
33029: POP
33030: POP
33031: GO 33037
// end ;
33033: GO 32998
33035: POP
33036: POP
// end ;
33037: LD_VAR 0 3
33041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33042: LD_INT 0
33044: PPUSH
// vc_chassis := chassis ;
33045: LD_ADDR_OWVAR 37
33049: PUSH
33050: LD_VAR 0 1
33054: ST_TO_ADDR
// vc_engine := engine ;
33055: LD_ADDR_OWVAR 39
33059: PUSH
33060: LD_VAR 0 2
33064: ST_TO_ADDR
// vc_control := control ;
33065: LD_ADDR_OWVAR 38
33069: PUSH
33070: LD_VAR 0 3
33074: ST_TO_ADDR
// vc_weapon := weapon ;
33075: LD_ADDR_OWVAR 40
33079: PUSH
33080: LD_VAR 0 4
33084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33085: LD_ADDR_OWVAR 41
33089: PUSH
33090: LD_VAR 0 5
33094: ST_TO_ADDR
// end ;
33095: LD_VAR 0 6
33099: RET
// export function WantPlant ( unit ) ; var task ; begin
33100: LD_INT 0
33102: PPUSH
33103: PPUSH
// result := false ;
33104: LD_ADDR_VAR 0 2
33108: PUSH
33109: LD_INT 0
33111: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: CALL_OW 437
33126: ST_TO_ADDR
// if task then
33127: LD_VAR 0 3
33131: IFFALSE 33159
// if task [ 1 ] [ 1 ] = p then
33133: LD_VAR 0 3
33137: PUSH
33138: LD_INT 1
33140: ARRAY
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: PUSH
33146: LD_STRING p
33148: EQUAL
33149: IFFALSE 33159
// result := true ;
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_INT 1
33158: ST_TO_ADDR
// end ;
33159: LD_VAR 0 2
33163: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
33169: PPUSH
// if pos < 1 then
33170: LD_VAR 0 2
33174: PUSH
33175: LD_INT 1
33177: LESS
33178: IFFALSE 33182
// exit ;
33180: GO 33485
// if pos = 1 then
33182: LD_VAR 0 2
33186: PUSH
33187: LD_INT 1
33189: EQUAL
33190: IFFALSE 33223
// result := Replace ( arr , pos [ 1 ] , value ) else
33192: LD_ADDR_VAR 0 4
33196: PUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: LD_VAR 0 2
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: CALL_OW 1
33220: ST_TO_ADDR
33221: GO 33485
// begin tmp := arr ;
33223: LD_ADDR_VAR 0 6
33227: PUSH
33228: LD_VAR 0 1
33232: ST_TO_ADDR
// s_arr := [ tmp ] ;
33233: LD_ADDR_VAR 0 7
33237: PUSH
33238: LD_VAR 0 6
33242: PUSH
33243: EMPTY
33244: LIST
33245: ST_TO_ADDR
// for i = 1 to pos - 1 do
33246: LD_ADDR_VAR 0 5
33250: PUSH
33251: DOUBLE
33252: LD_INT 1
33254: DEC
33255: ST_TO_ADDR
33256: LD_VAR 0 2
33260: PUSH
33261: LD_INT 1
33263: MINUS
33264: PUSH
33265: FOR_TO
33266: IFFALSE 33311
// begin tmp := tmp [ pos [ i ] ] ;
33268: LD_ADDR_VAR 0 6
33272: PUSH
33273: LD_VAR 0 6
33277: PUSH
33278: LD_VAR 0 2
33282: PUSH
33283: LD_VAR 0 5
33287: ARRAY
33288: ARRAY
33289: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33290: LD_ADDR_VAR 0 7
33294: PUSH
33295: LD_VAR 0 7
33299: PUSH
33300: LD_VAR 0 6
33304: PUSH
33305: EMPTY
33306: LIST
33307: ADD
33308: ST_TO_ADDR
// end ;
33309: GO 33265
33311: POP
33312: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33313: LD_ADDR_VAR 0 6
33317: PUSH
33318: LD_VAR 0 6
33322: PPUSH
33323: LD_VAR 0 2
33327: PUSH
33328: LD_VAR 0 2
33332: ARRAY
33333: PPUSH
33334: LD_VAR 0 3
33338: PPUSH
33339: CALL_OW 1
33343: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33344: LD_ADDR_VAR 0 7
33348: PUSH
33349: LD_VAR 0 7
33353: PPUSH
33354: LD_VAR 0 7
33358: PPUSH
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 1
33368: ST_TO_ADDR
// for i = s_arr downto 2 do
33369: LD_ADDR_VAR 0 5
33373: PUSH
33374: DOUBLE
33375: LD_VAR 0 7
33379: INC
33380: ST_TO_ADDR
33381: LD_INT 2
33383: PUSH
33384: FOR_DOWNTO
33385: IFFALSE 33469
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33387: LD_ADDR_VAR 0 6
33391: PUSH
33392: LD_VAR 0 7
33396: PUSH
33397: LD_VAR 0 5
33401: PUSH
33402: LD_INT 1
33404: MINUS
33405: ARRAY
33406: PPUSH
33407: LD_VAR 0 2
33411: PUSH
33412: LD_VAR 0 5
33416: PUSH
33417: LD_INT 1
33419: MINUS
33420: ARRAY
33421: PPUSH
33422: LD_VAR 0 7
33426: PUSH
33427: LD_VAR 0 5
33431: ARRAY
33432: PPUSH
33433: CALL_OW 1
33437: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33438: LD_ADDR_VAR 0 7
33442: PUSH
33443: LD_VAR 0 7
33447: PPUSH
33448: LD_VAR 0 5
33452: PUSH
33453: LD_INT 1
33455: MINUS
33456: PPUSH
33457: LD_VAR 0 6
33461: PPUSH
33462: CALL_OW 1
33466: ST_TO_ADDR
// end ;
33467: GO 33384
33469: POP
33470: POP
// result := s_arr [ 1 ] ;
33471: LD_ADDR_VAR 0 4
33475: PUSH
33476: LD_VAR 0 7
33480: PUSH
33481: LD_INT 1
33483: ARRAY
33484: ST_TO_ADDR
// end ; end ;
33485: LD_VAR 0 4
33489: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33490: LD_INT 0
33492: PPUSH
33493: PPUSH
// if not list then
33494: LD_VAR 0 1
33498: NOT
33499: IFFALSE 33503
// exit ;
33501: GO 33594
// i := list [ pos1 ] ;
33503: LD_ADDR_VAR 0 5
33507: PUSH
33508: LD_VAR 0 1
33512: PUSH
33513: LD_VAR 0 2
33517: ARRAY
33518: ST_TO_ADDR
// if not i then
33519: LD_VAR 0 5
33523: NOT
33524: IFFALSE 33528
// exit ;
33526: GO 33594
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33528: LD_ADDR_VAR 0 1
33532: PUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: LD_VAR 0 2
33542: PPUSH
33543: LD_VAR 0 1
33547: PUSH
33548: LD_VAR 0 3
33552: ARRAY
33553: PPUSH
33554: CALL_OW 1
33558: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33559: LD_ADDR_VAR 0 1
33563: PUSH
33564: LD_VAR 0 1
33568: PPUSH
33569: LD_VAR 0 3
33573: PPUSH
33574: LD_VAR 0 5
33578: PPUSH
33579: CALL_OW 1
33583: ST_TO_ADDR
// result := list ;
33584: LD_ADDR_VAR 0 4
33588: PUSH
33589: LD_VAR 0 1
33593: ST_TO_ADDR
// end ;
33594: LD_VAR 0 4
33598: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33599: LD_INT 0
33601: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33602: LD_ADDR_VAR 0 5
33606: PUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 250
33616: PPUSH
33617: LD_VAR 0 1
33621: PPUSH
33622: CALL_OW 251
33626: PPUSH
33627: LD_VAR 0 2
33631: PPUSH
33632: LD_VAR 0 3
33636: PPUSH
33637: LD_VAR 0 4
33641: PPUSH
33642: CALL 33652 0 5
33646: ST_TO_ADDR
// end ;
33647: LD_VAR 0 5
33651: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
// if not list then
33658: LD_VAR 0 3
33662: NOT
33663: IFFALSE 33667
// exit ;
33665: GO 34055
// result := [ ] ;
33667: LD_ADDR_VAR 0 6
33671: PUSH
33672: EMPTY
33673: ST_TO_ADDR
// for i in list do
33674: LD_ADDR_VAR 0 7
33678: PUSH
33679: LD_VAR 0 3
33683: PUSH
33684: FOR_IN
33685: IFFALSE 33887
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33687: LD_ADDR_VAR 0 9
33691: PUSH
33692: LD_VAR 0 7
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_VAR 0 2
33706: PPUSH
33707: CALL_OW 297
33711: ST_TO_ADDR
// if not result then
33712: LD_VAR 0 6
33716: NOT
33717: IFFALSE 33743
// result := [ [ i , tmp ] ] else
33719: LD_ADDR_VAR 0 6
33723: PUSH
33724: LD_VAR 0 7
33728: PUSH
33729: LD_VAR 0 9
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: EMPTY
33739: LIST
33740: ST_TO_ADDR
33741: GO 33885
// begin if result [ result ] [ 2 ] < tmp then
33743: LD_VAR 0 6
33747: PUSH
33748: LD_VAR 0 6
33752: ARRAY
33753: PUSH
33754: LD_INT 2
33756: ARRAY
33757: PUSH
33758: LD_VAR 0 9
33762: LESS
33763: IFFALSE 33805
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33765: LD_ADDR_VAR 0 6
33769: PUSH
33770: LD_VAR 0 6
33774: PPUSH
33775: LD_VAR 0 6
33779: PUSH
33780: LD_INT 1
33782: PLUS
33783: PPUSH
33784: LD_VAR 0 7
33788: PUSH
33789: LD_VAR 0 9
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PPUSH
33798: CALL_OW 2
33802: ST_TO_ADDR
33803: GO 33885
// for j = 1 to result do
33805: LD_ADDR_VAR 0 8
33809: PUSH
33810: DOUBLE
33811: LD_INT 1
33813: DEC
33814: ST_TO_ADDR
33815: LD_VAR 0 6
33819: PUSH
33820: FOR_TO
33821: IFFALSE 33883
// begin if tmp < result [ j ] [ 2 ] then
33823: LD_VAR 0 9
33827: PUSH
33828: LD_VAR 0 6
33832: PUSH
33833: LD_VAR 0 8
33837: ARRAY
33838: PUSH
33839: LD_INT 2
33841: ARRAY
33842: LESS
33843: IFFALSE 33881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33845: LD_ADDR_VAR 0 6
33849: PUSH
33850: LD_VAR 0 6
33854: PPUSH
33855: LD_VAR 0 8
33859: PPUSH
33860: LD_VAR 0 7
33864: PUSH
33865: LD_VAR 0 9
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PPUSH
33874: CALL_OW 2
33878: ST_TO_ADDR
// break ;
33879: GO 33883
// end ; end ;
33881: GO 33820
33883: POP
33884: POP
// end ; end ;
33885: GO 33684
33887: POP
33888: POP
// if result and not asc then
33889: LD_VAR 0 6
33893: PUSH
33894: LD_VAR 0 4
33898: NOT
33899: AND
33900: IFFALSE 33975
// begin tmp := result ;
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: LD_VAR 0 6
33911: ST_TO_ADDR
// for i = tmp downto 1 do
33912: LD_ADDR_VAR 0 7
33916: PUSH
33917: DOUBLE
33918: LD_VAR 0 9
33922: INC
33923: ST_TO_ADDR
33924: LD_INT 1
33926: PUSH
33927: FOR_DOWNTO
33928: IFFALSE 33973
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33930: LD_ADDR_VAR 0 6
33934: PUSH
33935: LD_VAR 0 6
33939: PPUSH
33940: LD_VAR 0 9
33944: PUSH
33945: LD_VAR 0 7
33949: MINUS
33950: PUSH
33951: LD_INT 1
33953: PLUS
33954: PPUSH
33955: LD_VAR 0 9
33959: PUSH
33960: LD_VAR 0 7
33964: ARRAY
33965: PPUSH
33966: CALL_OW 1
33970: ST_TO_ADDR
33971: GO 33927
33973: POP
33974: POP
// end ; tmp := [ ] ;
33975: LD_ADDR_VAR 0 9
33979: PUSH
33980: EMPTY
33981: ST_TO_ADDR
// if mode then
33982: LD_VAR 0 5
33986: IFFALSE 34055
// begin for i = 1 to result do
33988: LD_ADDR_VAR 0 7
33992: PUSH
33993: DOUBLE
33994: LD_INT 1
33996: DEC
33997: ST_TO_ADDR
33998: LD_VAR 0 6
34002: PUSH
34003: FOR_TO
34004: IFFALSE 34043
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34006: LD_ADDR_VAR 0 9
34010: PUSH
34011: LD_VAR 0 9
34015: PPUSH
34016: LD_VAR 0 7
34020: PPUSH
34021: LD_VAR 0 6
34025: PUSH
34026: LD_VAR 0 7
34030: ARRAY
34031: PUSH
34032: LD_INT 1
34034: ARRAY
34035: PPUSH
34036: CALL_OW 1
34040: ST_TO_ADDR
34041: GO 34003
34043: POP
34044: POP
// result := tmp ;
34045: LD_ADDR_VAR 0 6
34049: PUSH
34050: LD_VAR 0 9
34054: ST_TO_ADDR
// end ; end ;
34055: LD_VAR 0 6
34059: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34060: LD_INT 0
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
34066: PPUSH
34067: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34068: LD_ADDR_VAR 0 5
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if not x or not y then
34090: LD_VAR 0 2
34094: NOT
34095: PUSH
34096: LD_VAR 0 3
34100: NOT
34101: OR
34102: IFFALSE 34106
// exit ;
34104: GO 35752
// if not range then
34106: LD_VAR 0 4
34110: NOT
34111: IFFALSE 34121
// range := 10 ;
34113: LD_ADDR_VAR 0 4
34117: PUSH
34118: LD_INT 10
34120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34121: LD_ADDR_VAR 0 8
34125: PUSH
34126: LD_INT 81
34128: PUSH
34129: LD_VAR 0 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 92
34140: PUSH
34141: LD_VAR 0 2
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_VAR 0 4
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 21
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: PPUSH
34184: CALL_OW 69
34188: ST_TO_ADDR
// if not tmp then
34189: LD_VAR 0 8
34193: NOT
34194: IFFALSE 34198
// exit ;
34196: GO 35752
// for i in tmp do
34198: LD_ADDR_VAR 0 6
34202: PUSH
34203: LD_VAR 0 8
34207: PUSH
34208: FOR_IN
34209: IFFALSE 35727
// begin points := [ 0 , 0 , 0 ] ;
34211: LD_ADDR_VAR 0 9
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: ST_TO_ADDR
// bpoints := 1 ;
34230: LD_ADDR_VAR 0 10
34234: PUSH
34235: LD_INT 1
34237: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34238: LD_VAR 0 6
34242: PPUSH
34243: CALL_OW 247
34247: PUSH
34248: LD_INT 1
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34834
34256: POP
// begin if GetClass ( i ) = 1 then
34257: LD_VAR 0 6
34261: PPUSH
34262: CALL_OW 257
34266: PUSH
34267: LD_INT 1
34269: EQUAL
34270: IFFALSE 34291
// points := [ 10 , 5 , 3 ] ;
34272: LD_ADDR_VAR 0 9
34276: PUSH
34277: LD_INT 10
34279: PUSH
34280: LD_INT 5
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34291: LD_VAR 0 6
34295: PPUSH
34296: CALL_OW 257
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: LD_INT 4
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: LIST
34314: IN
34315: IFFALSE 34336
// points := [ 3 , 2 , 1 ] ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 257
34345: PUSH
34346: LD_INT 5
34348: EQUAL
34349: IFFALSE 34370
// points := [ 130 , 5 , 2 ] ;
34351: LD_ADDR_VAR 0 9
34355: PUSH
34356: LD_INT 130
34358: PUSH
34359: LD_INT 5
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34370: LD_VAR 0 6
34374: PPUSH
34375: CALL_OW 257
34379: PUSH
34380: LD_INT 8
34382: EQUAL
34383: IFFALSE 34404
// points := [ 35 , 35 , 30 ] ;
34385: LD_ADDR_VAR 0 9
34389: PUSH
34390: LD_INT 35
34392: PUSH
34393: LD_INT 35
34395: PUSH
34396: LD_INT 30
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34404: LD_VAR 0 6
34408: PPUSH
34409: CALL_OW 257
34413: PUSH
34414: LD_INT 9
34416: EQUAL
34417: IFFALSE 34438
// points := [ 20 , 55 , 40 ] ;
34419: LD_ADDR_VAR 0 9
34423: PUSH
34424: LD_INT 20
34426: PUSH
34427: LD_INT 55
34429: PUSH
34430: LD_INT 40
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34438: LD_VAR 0 6
34442: PPUSH
34443: CALL_OW 257
34447: PUSH
34448: LD_INT 12
34450: PUSH
34451: LD_INT 16
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: IN
34458: IFFALSE 34479
// points := [ 5 , 3 , 2 ] ;
34460: LD_ADDR_VAR 0 9
34464: PUSH
34465: LD_INT 5
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34479: LD_VAR 0 6
34483: PPUSH
34484: CALL_OW 257
34488: PUSH
34489: LD_INT 17
34491: EQUAL
34492: IFFALSE 34513
// points := [ 100 , 50 , 75 ] ;
34494: LD_ADDR_VAR 0 9
34498: PUSH
34499: LD_INT 100
34501: PUSH
34502: LD_INT 50
34504: PUSH
34505: LD_INT 75
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34513: LD_VAR 0 6
34517: PPUSH
34518: CALL_OW 257
34522: PUSH
34523: LD_INT 15
34525: EQUAL
34526: IFFALSE 34547
// points := [ 10 , 5 , 3 ] ;
34528: LD_ADDR_VAR 0 9
34532: PUSH
34533: LD_INT 10
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 257
34556: PUSH
34557: LD_INT 14
34559: EQUAL
34560: IFFALSE 34581
// points := [ 10 , 0 , 0 ] ;
34562: LD_ADDR_VAR 0 9
34566: PUSH
34567: LD_INT 10
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34581: LD_VAR 0 6
34585: PPUSH
34586: CALL_OW 257
34590: PUSH
34591: LD_INT 11
34593: EQUAL
34594: IFFALSE 34615
// points := [ 30 , 10 , 5 ] ;
34596: LD_ADDR_VAR 0 9
34600: PUSH
34601: LD_INT 30
34603: PUSH
34604: LD_INT 10
34606: PUSH
34607: LD_INT 5
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34615: LD_VAR 0 1
34619: PPUSH
34620: LD_INT 5
34622: PPUSH
34623: CALL_OW 321
34627: PUSH
34628: LD_INT 2
34630: EQUAL
34631: IFFALSE 34648
// bpoints := bpoints * 1.8 ;
34633: LD_ADDR_VAR 0 10
34637: PUSH
34638: LD_VAR 0 10
34642: PUSH
34643: LD_REAL  1.80000000000000E+0000
34646: MUL
34647: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34648: LD_VAR 0 6
34652: PPUSH
34653: CALL_OW 257
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: IN
34676: PUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: LD_INT 51
34684: PPUSH
34685: CALL_OW 321
34689: PUSH
34690: LD_INT 2
34692: EQUAL
34693: AND
34694: IFFALSE 34711
// bpoints := bpoints * 1.2 ;
34696: LD_ADDR_VAR 0 10
34700: PUSH
34701: LD_VAR 0 10
34705: PUSH
34706: LD_REAL  1.20000000000000E+0000
34709: MUL
34710: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34711: LD_VAR 0 6
34715: PPUSH
34716: CALL_OW 257
34720: PUSH
34721: LD_INT 5
34723: PUSH
34724: LD_INT 7
34726: PUSH
34727: LD_INT 9
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: IN
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: LD_INT 52
34743: PPUSH
34744: CALL_OW 321
34748: PUSH
34749: LD_INT 2
34751: EQUAL
34752: AND
34753: IFFALSE 34770
// bpoints := bpoints * 1.5 ;
34755: LD_ADDR_VAR 0 10
34759: PUSH
34760: LD_VAR 0 10
34764: PUSH
34765: LD_REAL  1.50000000000000E+0000
34768: MUL
34769: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34770: LD_VAR 0 1
34774: PPUSH
34775: LD_INT 66
34777: PPUSH
34778: CALL_OW 321
34782: PUSH
34783: LD_INT 2
34785: EQUAL
34786: IFFALSE 34803
// bpoints := bpoints * 1.1 ;
34788: LD_ADDR_VAR 0 10
34792: PUSH
34793: LD_VAR 0 10
34797: PUSH
34798: LD_REAL  1.10000000000000E+0000
34801: MUL
34802: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34803: LD_ADDR_VAR 0 10
34807: PUSH
34808: LD_VAR 0 10
34812: PUSH
34813: LD_VAR 0 6
34817: PPUSH
34818: LD_INT 1
34820: PPUSH
34821: CALL_OW 259
34825: PUSH
34826: LD_REAL  1.15000000000000E+0000
34829: MUL
34830: MUL
34831: ST_TO_ADDR
// end ; unit_vehicle :
34832: GO 35656
34834: LD_INT 2
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34842
34840: GO 35644
34842: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34843: LD_VAR 0 6
34847: PPUSH
34848: CALL_OW 264
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 42
34858: PUSH
34859: LD_INT 24
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: IN
34867: IFFALSE 34888
// points := [ 25 , 5 , 3 ] ;
34869: LD_ADDR_VAR 0 9
34873: PUSH
34874: LD_INT 25
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34888: LD_VAR 0 6
34892: PPUSH
34893: CALL_OW 264
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: LD_INT 43
34903: PUSH
34904: LD_INT 25
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: IN
34912: IFFALSE 34933
// points := [ 40 , 15 , 5 ] ;
34914: LD_ADDR_VAR 0 9
34918: PUSH
34919: LD_INT 40
34921: PUSH
34922: LD_INT 15
34924: PUSH
34925: LD_INT 5
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34933: LD_VAR 0 6
34937: PPUSH
34938: CALL_OW 264
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 23
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: IN
34953: IFFALSE 34974
// points := [ 7 , 25 , 8 ] ;
34955: LD_ADDR_VAR 0 9
34959: PUSH
34960: LD_INT 7
34962: PUSH
34963: LD_INT 25
34965: PUSH
34966: LD_INT 8
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34974: LD_VAR 0 6
34978: PPUSH
34979: CALL_OW 264
34983: PUSH
34984: LD_INT 5
34986: PUSH
34987: LD_INT 27
34989: PUSH
34990: LD_INT 44
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: IN
34998: IFFALSE 35019
// points := [ 14 , 50 , 16 ] ;
35000: LD_ADDR_VAR 0 9
35004: PUSH
35005: LD_INT 14
35007: PUSH
35008: LD_INT 50
35010: PUSH
35011: LD_INT 16
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35019: LD_VAR 0 6
35023: PPUSH
35024: CALL_OW 264
35028: PUSH
35029: LD_INT 6
35031: PUSH
35032: LD_INT 46
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: IN
35039: IFFALSE 35060
// points := [ 32 , 120 , 70 ] ;
35041: LD_ADDR_VAR 0 9
35045: PUSH
35046: LD_INT 32
35048: PUSH
35049: LD_INT 120
35051: PUSH
35052: LD_INT 70
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35060: LD_VAR 0 6
35064: PPUSH
35065: CALL_OW 264
35069: PUSH
35070: LD_INT 7
35072: PUSH
35073: LD_INT 28
35075: PUSH
35076: LD_INT 45
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: IN
35084: IFFALSE 35105
// points := [ 35 , 20 , 45 ] ;
35086: LD_ADDR_VAR 0 9
35090: PUSH
35091: LD_INT 35
35093: PUSH
35094: LD_INT 20
35096: PUSH
35097: LD_INT 45
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35105: LD_VAR 0 6
35109: PPUSH
35110: CALL_OW 264
35114: PUSH
35115: LD_INT 47
35117: PUSH
35118: EMPTY
35119: LIST
35120: IN
35121: IFFALSE 35142
// points := [ 67 , 45 , 75 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 67
35130: PUSH
35131: LD_INT 45
35133: PUSH
35134: LD_INT 75
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 264
35151: PUSH
35152: LD_INT 26
35154: PUSH
35155: EMPTY
35156: LIST
35157: IN
35158: IFFALSE 35179
// points := [ 120 , 30 , 80 ] ;
35160: LD_ADDR_VAR 0 9
35164: PUSH
35165: LD_INT 120
35167: PUSH
35168: LD_INT 30
35170: PUSH
35171: LD_INT 80
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35179: LD_VAR 0 6
35183: PPUSH
35184: CALL_OW 264
35188: PUSH
35189: LD_INT 22
35191: PUSH
35192: EMPTY
35193: LIST
35194: IN
35195: IFFALSE 35216
// points := [ 40 , 1 , 1 ] ;
35197: LD_ADDR_VAR 0 9
35201: PUSH
35202: LD_INT 40
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: LIST
35215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35216: LD_VAR 0 6
35220: PPUSH
35221: CALL_OW 264
35225: PUSH
35226: LD_INT 29
35228: PUSH
35229: EMPTY
35230: LIST
35231: IN
35232: IFFALSE 35253
// points := [ 70 , 200 , 400 ] ;
35234: LD_ADDR_VAR 0 9
35238: PUSH
35239: LD_INT 70
35241: PUSH
35242: LD_INT 200
35244: PUSH
35245: LD_INT 400
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35253: LD_VAR 0 6
35257: PPUSH
35258: CALL_OW 264
35262: PUSH
35263: LD_INT 14
35265: PUSH
35266: LD_INT 53
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: IN
35273: IFFALSE 35294
// points := [ 40 , 10 , 20 ] ;
35275: LD_ADDR_VAR 0 9
35279: PUSH
35280: LD_INT 40
35282: PUSH
35283: LD_INT 10
35285: PUSH
35286: LD_INT 20
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35294: LD_VAR 0 6
35298: PPUSH
35299: CALL_OW 264
35303: PUSH
35304: LD_INT 9
35306: PUSH
35307: EMPTY
35308: LIST
35309: IN
35310: IFFALSE 35331
// points := [ 5 , 70 , 20 ] ;
35312: LD_ADDR_VAR 0 9
35316: PUSH
35317: LD_INT 5
35319: PUSH
35320: LD_INT 70
35322: PUSH
35323: LD_INT 20
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35331: LD_VAR 0 6
35335: PPUSH
35336: CALL_OW 264
35340: PUSH
35341: LD_INT 10
35343: PUSH
35344: EMPTY
35345: LIST
35346: IN
35347: IFFALSE 35368
// points := [ 35 , 110 , 70 ] ;
35349: LD_ADDR_VAR 0 9
35353: PUSH
35354: LD_INT 35
35356: PUSH
35357: LD_INT 110
35359: PUSH
35360: LD_INT 70
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35368: LD_VAR 0 6
35372: PPUSH
35373: CALL_OW 265
35377: PUSH
35378: LD_INT 25
35380: EQUAL
35381: IFFALSE 35402
// points := [ 80 , 65 , 100 ] ;
35383: LD_ADDR_VAR 0 9
35387: PUSH
35388: LD_INT 80
35390: PUSH
35391: LD_INT 65
35393: PUSH
35394: LD_INT 100
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35402: LD_VAR 0 6
35406: PPUSH
35407: CALL_OW 263
35411: PUSH
35412: LD_INT 1
35414: EQUAL
35415: IFFALSE 35450
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35417: LD_ADDR_VAR 0 10
35421: PUSH
35422: LD_VAR 0 10
35426: PUSH
35427: LD_VAR 0 6
35431: PPUSH
35432: CALL_OW 311
35436: PPUSH
35437: LD_INT 3
35439: PPUSH
35440: CALL_OW 259
35444: PUSH
35445: LD_INT 4
35447: MUL
35448: MUL
35449: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35450: LD_VAR 0 6
35454: PPUSH
35455: CALL_OW 263
35459: PUSH
35460: LD_INT 2
35462: EQUAL
35463: IFFALSE 35514
// begin j := IsControledBy ( i ) ;
35465: LD_ADDR_VAR 0 7
35469: PUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: CALL_OW 312
35479: ST_TO_ADDR
// if j then
35480: LD_VAR 0 7
35484: IFFALSE 35514
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35486: LD_ADDR_VAR 0 10
35490: PUSH
35491: LD_VAR 0 10
35495: PUSH
35496: LD_VAR 0 7
35500: PPUSH
35501: LD_INT 3
35503: PPUSH
35504: CALL_OW 259
35508: PUSH
35509: LD_INT 3
35511: MUL
35512: MUL
35513: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35514: LD_VAR 0 6
35518: PPUSH
35519: CALL_OW 264
35523: PUSH
35524: LD_INT 5
35526: PUSH
35527: LD_INT 6
35529: PUSH
35530: LD_INT 46
35532: PUSH
35533: LD_INT 44
35535: PUSH
35536: LD_INT 47
35538: PUSH
35539: LD_INT 45
35541: PUSH
35542: LD_INT 28
35544: PUSH
35545: LD_INT 7
35547: PUSH
35548: LD_INT 27
35550: PUSH
35551: LD_INT 29
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: IN
35566: PUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_INT 52
35574: PPUSH
35575: CALL_OW 321
35579: PUSH
35580: LD_INT 2
35582: EQUAL
35583: AND
35584: IFFALSE 35601
// bpoints := bpoints * 1.2 ;
35586: LD_ADDR_VAR 0 10
35590: PUSH
35591: LD_VAR 0 10
35595: PUSH
35596: LD_REAL  1.20000000000000E+0000
35599: MUL
35600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35601: LD_VAR 0 6
35605: PPUSH
35606: CALL_OW 264
35610: PUSH
35611: LD_INT 6
35613: PUSH
35614: LD_INT 46
35616: PUSH
35617: LD_INT 47
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: IN
35625: IFFALSE 35642
// bpoints := bpoints * 1.2 ;
35627: LD_ADDR_VAR 0 10
35631: PUSH
35632: LD_VAR 0 10
35636: PUSH
35637: LD_REAL  1.20000000000000E+0000
35640: MUL
35641: ST_TO_ADDR
// end ; unit_building :
35642: GO 35656
35644: LD_INT 3
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35652
35650: GO 35655
35652: POP
// ; end ;
35653: GO 35656
35655: POP
// for j = 1 to 3 do
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: DOUBLE
35662: LD_INT 1
35664: DEC
35665: ST_TO_ADDR
35666: LD_INT 3
35668: PUSH
35669: FOR_TO
35670: IFFALSE 35723
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35672: LD_ADDR_VAR 0 5
35676: PUSH
35677: LD_VAR 0 5
35681: PPUSH
35682: LD_VAR 0 7
35686: PPUSH
35687: LD_VAR 0 5
35691: PUSH
35692: LD_VAR 0 7
35696: ARRAY
35697: PUSH
35698: LD_VAR 0 9
35702: PUSH
35703: LD_VAR 0 7
35707: ARRAY
35708: PUSH
35709: LD_VAR 0 10
35713: MUL
35714: PLUS
35715: PPUSH
35716: CALL_OW 1
35720: ST_TO_ADDR
35721: GO 35669
35723: POP
35724: POP
// end ;
35725: GO 34208
35727: POP
35728: POP
// result := Replace ( result , 4 , tmp ) ;
35729: LD_ADDR_VAR 0 5
35733: PUSH
35734: LD_VAR 0 5
35738: PPUSH
35739: LD_INT 4
35741: PPUSH
35742: LD_VAR 0 8
35746: PPUSH
35747: CALL_OW 1
35751: ST_TO_ADDR
// end ;
35752: LD_VAR 0 5
35756: RET
// export function DangerAtRange ( unit , range ) ; begin
35757: LD_INT 0
35759: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 255
35774: PPUSH
35775: LD_VAR 0 1
35779: PPUSH
35780: CALL_OW 250
35784: PPUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 251
35794: PPUSH
35795: LD_VAR 0 2
35799: PPUSH
35800: CALL 34060 0 4
35804: ST_TO_ADDR
// end ;
35805: LD_VAR 0 3
35809: RET
// export function DangerInArea ( side , area ) ; begin
35810: LD_INT 0
35812: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35813: LD_ADDR_VAR 0 3
35817: PUSH
35818: LD_VAR 0 2
35822: PPUSH
35823: LD_INT 81
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PPUSH
35835: CALL_OW 70
35839: ST_TO_ADDR
// end ;
35840: LD_VAR 0 3
35844: RET
// export function IsExtension ( b ) ; begin
35845: LD_INT 0
35847: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35848: LD_ADDR_VAR 0 2
35852: PUSH
35853: LD_VAR 0 1
35857: PUSH
35858: LD_INT 23
35860: PUSH
35861: LD_INT 20
35863: PUSH
35864: LD_INT 22
35866: PUSH
35867: LD_INT 17
35869: PUSH
35870: LD_INT 24
35872: PUSH
35873: LD_INT 21
35875: PUSH
35876: LD_INT 19
35878: PUSH
35879: LD_INT 16
35881: PUSH
35882: LD_INT 25
35884: PUSH
35885: LD_INT 18
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: IN
35900: ST_TO_ADDR
// end ;
35901: LD_VAR 0 2
35905: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35906: LD_INT 0
35908: PPUSH
35909: PPUSH
35910: PPUSH
// result := [ ] ;
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: EMPTY
35917: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35918: LD_ADDR_VAR 0 4
35922: PUSH
35923: LD_VAR 0 2
35927: PPUSH
35928: LD_INT 21
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PPUSH
35938: CALL_OW 70
35942: ST_TO_ADDR
// if not tmp then
35943: LD_VAR 0 4
35947: NOT
35948: IFFALSE 35952
// exit ;
35950: GO 36010
// for i in tmp do
35952: LD_ADDR_VAR 0 5
35956: PUSH
35957: LD_VAR 0 4
35961: PUSH
35962: FOR_IN
35963: IFFALSE 35998
// if GetBase ( i ) <> base then
35965: LD_VAR 0 5
35969: PPUSH
35970: CALL_OW 274
35974: PUSH
35975: LD_VAR 0 1
35979: NONEQUAL
35980: IFFALSE 35996
// ComLinkToBase ( base , i ) ;
35982: LD_VAR 0 1
35986: PPUSH
35987: LD_VAR 0 5
35991: PPUSH
35992: CALL_OW 169
35996: GO 35962
35998: POP
35999: POP
// result := tmp ;
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_VAR 0 4
36009: ST_TO_ADDR
// end ;
36010: LD_VAR 0 3
36014: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36015: LD_INT 0
36017: PPUSH
36018: PPUSH
// if BuildingStatus ( b ) = bs_build then
36019: LD_VAR 0 2
36023: PPUSH
36024: CALL_OW 461
36028: PUSH
36029: LD_INT 1
36031: EQUAL
36032: IFFALSE 36092
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36034: LD_VAR 0 1
36038: PPUSH
36039: LD_STRING h
36041: PUSH
36042: LD_VAR 0 2
36046: PPUSH
36047: CALL_OW 250
36051: PUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: CALL_OW 251
36061: PUSH
36062: LD_VAR 0 2
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: PPUSH
36088: CALL_OW 446
// end ;
36092: LD_VAR 0 3
36096: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36097: LD_INT 0
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36105: LD_VAR 0 1
36109: NOT
36110: PUSH
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 263
36120: PUSH
36121: LD_INT 2
36123: EQUAL
36124: NOT
36125: OR
36126: IFFALSE 36130
// exit ;
36128: GO 36446
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36130: LD_ADDR_VAR 0 6
36134: PUSH
36135: LD_INT 22
36137: PUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 255
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 30
36157: PUSH
36158: LD_INT 36
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 34
36167: PUSH
36168: LD_INT 31
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PPUSH
36184: CALL_OW 69
36188: ST_TO_ADDR
// if not tmp then
36189: LD_VAR 0 6
36193: NOT
36194: IFFALSE 36198
// exit ;
36196: GO 36446
// result := [ ] ;
36198: LD_ADDR_VAR 0 2
36202: PUSH
36203: EMPTY
36204: ST_TO_ADDR
// for i in tmp do
36205: LD_ADDR_VAR 0 3
36209: PUSH
36210: LD_VAR 0 6
36214: PUSH
36215: FOR_IN
36216: IFFALSE 36287
// begin t := UnitsInside ( i ) ;
36218: LD_ADDR_VAR 0 4
36222: PUSH
36223: LD_VAR 0 3
36227: PPUSH
36228: CALL_OW 313
36232: ST_TO_ADDR
// if t then
36233: LD_VAR 0 4
36237: IFFALSE 36285
// for j in t do
36239: LD_ADDR_VAR 0 7
36243: PUSH
36244: LD_VAR 0 4
36248: PUSH
36249: FOR_IN
36250: IFFALSE 36283
// result := Insert ( result , result + 1 , j ) ;
36252: LD_ADDR_VAR 0 2
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: LD_VAR 0 2
36266: PUSH
36267: LD_INT 1
36269: PLUS
36270: PPUSH
36271: LD_VAR 0 7
36275: PPUSH
36276: CALL_OW 2
36280: ST_TO_ADDR
36281: GO 36249
36283: POP
36284: POP
// end ;
36285: GO 36215
36287: POP
36288: POP
// if not result then
36289: LD_VAR 0 2
36293: NOT
36294: IFFALSE 36298
// exit ;
36296: GO 36446
// mech := result [ 1 ] ;
36298: LD_ADDR_VAR 0 5
36302: PUSH
36303: LD_VAR 0 2
36307: PUSH
36308: LD_INT 1
36310: ARRAY
36311: ST_TO_ADDR
// if result > 1 then
36312: LD_VAR 0 2
36316: PUSH
36317: LD_INT 1
36319: GREATER
36320: IFFALSE 36432
// for i = 2 to result do
36322: LD_ADDR_VAR 0 3
36326: PUSH
36327: DOUBLE
36328: LD_INT 2
36330: DEC
36331: ST_TO_ADDR
36332: LD_VAR 0 2
36336: PUSH
36337: FOR_TO
36338: IFFALSE 36430
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_VAR 0 2
36349: PUSH
36350: LD_VAR 0 3
36354: ARRAY
36355: PPUSH
36356: LD_INT 3
36358: PPUSH
36359: CALL_OW 259
36363: PUSH
36364: LD_VAR 0 2
36368: PUSH
36369: LD_VAR 0 3
36373: ARRAY
36374: PPUSH
36375: CALL_OW 432
36379: MINUS
36380: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36381: LD_VAR 0 4
36385: PUSH
36386: LD_VAR 0 5
36390: PPUSH
36391: LD_INT 3
36393: PPUSH
36394: CALL_OW 259
36398: PUSH
36399: LD_VAR 0 5
36403: PPUSH
36404: CALL_OW 432
36408: MINUS
36409: GREATEREQUAL
36410: IFFALSE 36428
// mech := result [ i ] ;
36412: LD_ADDR_VAR 0 5
36416: PUSH
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 3
36426: ARRAY
36427: ST_TO_ADDR
// end ;
36428: GO 36337
36430: POP
36431: POP
// ComLinkTo ( vehicle , mech ) ;
36432: LD_VAR 0 1
36436: PPUSH
36437: LD_VAR 0 5
36441: PPUSH
36442: CALL_OW 135
// end ;
36446: LD_VAR 0 2
36450: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36451: LD_INT 0
36453: PPUSH
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
// result := [ ] ;
36466: LD_ADDR_VAR 0 7
36470: PUSH
36471: EMPTY
36472: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 266
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: IN
36493: NOT
36494: IFFALSE 36498
// exit ;
36496: GO 38129
// if name then
36498: LD_VAR 0 3
36502: IFFALSE 36518
// SetBName ( base_dep , name ) ;
36504: LD_VAR 0 1
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: CALL_OW 500
// base := GetBase ( base_dep ) ;
36518: LD_ADDR_VAR 0 15
36522: PUSH
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 274
36532: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36533: LD_ADDR_VAR 0 16
36537: PUSH
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 255
36547: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36548: LD_ADDR_VAR 0 17
36552: PUSH
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 248
36562: ST_TO_ADDR
// if sources then
36563: LD_VAR 0 5
36567: IFFALSE 36614
// for i = 1 to 3 do
36569: LD_ADDR_VAR 0 8
36573: PUSH
36574: DOUBLE
36575: LD_INT 1
36577: DEC
36578: ST_TO_ADDR
36579: LD_INT 3
36581: PUSH
36582: FOR_TO
36583: IFFALSE 36612
// AddResourceType ( base , i , sources [ i ] ) ;
36585: LD_VAR 0 15
36589: PPUSH
36590: LD_VAR 0 8
36594: PPUSH
36595: LD_VAR 0 5
36599: PUSH
36600: LD_VAR 0 8
36604: ARRAY
36605: PPUSH
36606: CALL_OW 276
36610: GO 36582
36612: POP
36613: POP
// buildings := GetBaseBuildings ( base , area ) ;
36614: LD_ADDR_VAR 0 18
36618: PUSH
36619: LD_VAR 0 15
36623: PPUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL 35906 0 2
36633: ST_TO_ADDR
// InitHc ;
36634: CALL_OW 19
// InitUc ;
36638: CALL_OW 18
// uc_side := side ;
36642: LD_ADDR_OWVAR 20
36646: PUSH
36647: LD_VAR 0 16
36651: ST_TO_ADDR
// uc_nation := nation ;
36652: LD_ADDR_OWVAR 21
36656: PUSH
36657: LD_VAR 0 17
36661: ST_TO_ADDR
// if buildings then
36662: LD_VAR 0 18
36666: IFFALSE 37988
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36668: LD_ADDR_VAR 0 19
36672: PUSH
36673: LD_VAR 0 18
36677: PPUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 30
36683: PUSH
36684: LD_INT 29
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 30
36693: PUSH
36694: LD_INT 30
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: PPUSH
36706: CALL_OW 72
36710: ST_TO_ADDR
// if tmp then
36711: LD_VAR 0 19
36715: IFFALSE 36763
// for i in tmp do
36717: LD_ADDR_VAR 0 8
36721: PUSH
36722: LD_VAR 0 19
36726: PUSH
36727: FOR_IN
36728: IFFALSE 36761
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36730: LD_VAR 0 8
36734: PPUSH
36735: CALL_OW 250
36739: PPUSH
36740: LD_VAR 0 8
36744: PPUSH
36745: CALL_OW 251
36749: PPUSH
36750: LD_VAR 0 16
36754: PPUSH
36755: CALL_OW 441
36759: GO 36727
36761: POP
36762: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36763: LD_VAR 0 18
36767: PPUSH
36768: LD_INT 2
36770: PUSH
36771: LD_INT 30
36773: PUSH
36774: LD_INT 32
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 30
36783: PUSH
36784: LD_INT 33
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: PPUSH
36796: CALL_OW 72
36800: IFFALSE 36888
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36802: LD_ADDR_VAR 0 8
36806: PUSH
36807: LD_VAR 0 18
36811: PPUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 30
36817: PUSH
36818: LD_INT 32
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 30
36827: PUSH
36828: LD_INT 33
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: PPUSH
36840: CALL_OW 72
36844: PUSH
36845: FOR_IN
36846: IFFALSE 36886
// begin if not GetBWeapon ( i ) then
36848: LD_VAR 0 8
36852: PPUSH
36853: CALL_OW 269
36857: NOT
36858: IFFALSE 36884
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36860: LD_VAR 0 8
36864: PPUSH
36865: LD_VAR 0 8
36869: PPUSH
36870: LD_VAR 0 2
36874: PPUSH
36875: CALL 38134 0 2
36879: PPUSH
36880: CALL_OW 431
// end ;
36884: GO 36845
36886: POP
36887: POP
// end ; for i = 1 to personel do
36888: LD_ADDR_VAR 0 8
36892: PUSH
36893: DOUBLE
36894: LD_INT 1
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 6
36902: PUSH
36903: FOR_TO
36904: IFFALSE 37968
// begin if i > 4 then
36906: LD_VAR 0 8
36910: PUSH
36911: LD_INT 4
36913: GREATER
36914: IFFALSE 36918
// break ;
36916: GO 37968
// case i of 1 :
36918: LD_VAR 0 8
36922: PUSH
36923: LD_INT 1
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 37011
36931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36932: LD_ADDR_VAR 0 12
36936: PUSH
36937: LD_VAR 0 18
36941: PPUSH
36942: LD_INT 22
36944: PUSH
36945: LD_VAR 0 16
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 58
36956: PUSH
36957: EMPTY
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 30
36965: PUSH
36966: LD_INT 32
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 30
36975: PUSH
36976: LD_INT 4
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 30
36985: PUSH
36986: LD_INT 5
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: PPUSH
37004: CALL_OW 72
37008: ST_TO_ADDR
37009: GO 37233
37011: LD_INT 2
37013: DOUBLE
37014: EQUAL
37015: IFTRUE 37019
37017: GO 37081
37019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37020: LD_ADDR_VAR 0 12
37024: PUSH
37025: LD_VAR 0 18
37029: PPUSH
37030: LD_INT 22
37032: PUSH
37033: LD_VAR 0 16
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 30
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PPUSH
37074: CALL_OW 72
37078: ST_TO_ADDR
37079: GO 37233
37081: LD_INT 3
37083: DOUBLE
37084: EQUAL
37085: IFTRUE 37089
37087: GO 37151
37089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37090: LD_ADDR_VAR 0 12
37094: PUSH
37095: LD_VAR 0 18
37099: PPUSH
37100: LD_INT 22
37102: PUSH
37103: LD_VAR 0 16
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 30
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 30
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PPUSH
37144: CALL_OW 72
37148: ST_TO_ADDR
37149: GO 37233
37151: LD_INT 4
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37159
37157: GO 37232
37159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37160: LD_ADDR_VAR 0 12
37164: PUSH
37165: LD_VAR 0 18
37169: PPUSH
37170: LD_INT 22
37172: PUSH
37173: LD_VAR 0 16
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: LD_INT 30
37187: PUSH
37188: LD_INT 6
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 30
37197: PUSH
37198: LD_INT 7
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 30
37207: PUSH
37208: LD_INT 8
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PPUSH
37225: CALL_OW 72
37229: ST_TO_ADDR
37230: GO 37233
37232: POP
// if i = 1 then
37233: LD_VAR 0 8
37237: PUSH
37238: LD_INT 1
37240: EQUAL
37241: IFFALSE 37352
// begin tmp := [ ] ;
37243: LD_ADDR_VAR 0 19
37247: PUSH
37248: EMPTY
37249: ST_TO_ADDR
// for j in f do
37250: LD_ADDR_VAR 0 9
37254: PUSH
37255: LD_VAR 0 12
37259: PUSH
37260: FOR_IN
37261: IFFALSE 37334
// if GetBType ( j ) = b_bunker then
37263: LD_VAR 0 9
37267: PPUSH
37268: CALL_OW 266
37272: PUSH
37273: LD_INT 32
37275: EQUAL
37276: IFFALSE 37303
// tmp := Insert ( tmp , 1 , j ) else
37278: LD_ADDR_VAR 0 19
37282: PUSH
37283: LD_VAR 0 19
37287: PPUSH
37288: LD_INT 1
37290: PPUSH
37291: LD_VAR 0 9
37295: PPUSH
37296: CALL_OW 2
37300: ST_TO_ADDR
37301: GO 37332
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37303: LD_ADDR_VAR 0 19
37307: PUSH
37308: LD_VAR 0 19
37312: PPUSH
37313: LD_VAR 0 19
37317: PUSH
37318: LD_INT 1
37320: PLUS
37321: PPUSH
37322: LD_VAR 0 9
37326: PPUSH
37327: CALL_OW 2
37331: ST_TO_ADDR
37332: GO 37260
37334: POP
37335: POP
// if tmp then
37336: LD_VAR 0 19
37340: IFFALSE 37352
// f := tmp ;
37342: LD_ADDR_VAR 0 12
37346: PUSH
37347: LD_VAR 0 19
37351: ST_TO_ADDR
// end ; x := personel [ i ] ;
37352: LD_ADDR_VAR 0 13
37356: PUSH
37357: LD_VAR 0 6
37361: PUSH
37362: LD_VAR 0 8
37366: ARRAY
37367: ST_TO_ADDR
// if x = - 1 then
37368: LD_VAR 0 13
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: EQUAL
37377: IFFALSE 37586
// begin for j in f do
37379: LD_ADDR_VAR 0 9
37383: PUSH
37384: LD_VAR 0 12
37388: PUSH
37389: FOR_IN
37390: IFFALSE 37582
// repeat InitHc ;
37392: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37396: LD_VAR 0 9
37400: PPUSH
37401: CALL_OW 266
37405: PUSH
37406: LD_INT 5
37408: EQUAL
37409: IFFALSE 37479
// begin if UnitsInside ( j ) < 3 then
37411: LD_VAR 0 9
37415: PPUSH
37416: CALL_OW 313
37420: PUSH
37421: LD_INT 3
37423: LESS
37424: IFFALSE 37460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37426: LD_INT 0
37428: PPUSH
37429: LD_INT 5
37431: PUSH
37432: LD_INT 8
37434: PUSH
37435: LD_INT 9
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 17
37447: ARRAY
37448: PPUSH
37449: LD_VAR 0 4
37453: PPUSH
37454: CALL_OW 380
37458: GO 37477
// PrepareHuman ( false , i , skill ) ;
37460: LD_INT 0
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_VAR 0 4
37472: PPUSH
37473: CALL_OW 380
// end else
37477: GO 37496
// PrepareHuman ( false , i , skill ) ;
37479: LD_INT 0
37481: PPUSH
37482: LD_VAR 0 8
37486: PPUSH
37487: LD_VAR 0 4
37491: PPUSH
37492: CALL_OW 380
// un := CreateHuman ;
37496: LD_ADDR_VAR 0 14
37500: PUSH
37501: CALL_OW 44
37505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 7
37515: PPUSH
37516: LD_INT 1
37518: PPUSH
37519: LD_VAR 0 14
37523: PPUSH
37524: CALL_OW 2
37528: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37529: LD_VAR 0 14
37533: PPUSH
37534: LD_VAR 0 9
37538: PPUSH
37539: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37543: LD_VAR 0 9
37547: PPUSH
37548: CALL_OW 313
37552: PUSH
37553: LD_INT 6
37555: EQUAL
37556: PUSH
37557: LD_VAR 0 9
37561: PPUSH
37562: CALL_OW 266
37566: PUSH
37567: LD_INT 32
37569: PUSH
37570: LD_INT 31
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: IN
37577: OR
37578: IFFALSE 37392
37580: GO 37389
37582: POP
37583: POP
// end else
37584: GO 37966
// for j = 1 to x do
37586: LD_ADDR_VAR 0 9
37590: PUSH
37591: DOUBLE
37592: LD_INT 1
37594: DEC
37595: ST_TO_ADDR
37596: LD_VAR 0 13
37600: PUSH
37601: FOR_TO
37602: IFFALSE 37964
// begin InitHc ;
37604: CALL_OW 19
// if not f then
37608: LD_VAR 0 12
37612: NOT
37613: IFFALSE 37702
// begin PrepareHuman ( false , i , skill ) ;
37615: LD_INT 0
37617: PPUSH
37618: LD_VAR 0 8
37622: PPUSH
37623: LD_VAR 0 4
37627: PPUSH
37628: CALL_OW 380
// un := CreateHuman ;
37632: LD_ADDR_VAR 0 14
37636: PUSH
37637: CALL_OW 44
37641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37642: LD_ADDR_VAR 0 7
37646: PUSH
37647: LD_VAR 0 7
37651: PPUSH
37652: LD_INT 1
37654: PPUSH
37655: LD_VAR 0 14
37659: PPUSH
37660: CALL_OW 2
37664: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37665: LD_VAR 0 14
37669: PPUSH
37670: LD_VAR 0 1
37674: PPUSH
37675: CALL_OW 250
37679: PPUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: CALL_OW 251
37689: PPUSH
37690: LD_INT 10
37692: PPUSH
37693: LD_INT 0
37695: PPUSH
37696: CALL_OW 50
// continue ;
37700: GO 37601
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37702: LD_VAR 0 12
37706: PUSH
37707: LD_INT 1
37709: ARRAY
37710: PPUSH
37711: CALL_OW 313
37715: PUSH
37716: LD_VAR 0 12
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: CALL_OW 266
37729: PUSH
37730: LD_INT 32
37732: PUSH
37733: LD_INT 31
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: IN
37740: AND
37741: PUSH
37742: LD_VAR 0 12
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PPUSH
37751: CALL_OW 313
37755: PUSH
37756: LD_INT 6
37758: EQUAL
37759: OR
37760: IFFALSE 37780
// f := Delete ( f , 1 ) ;
37762: LD_ADDR_VAR 0 12
37766: PUSH
37767: LD_VAR 0 12
37771: PPUSH
37772: LD_INT 1
37774: PPUSH
37775: CALL_OW 3
37779: ST_TO_ADDR
// if not f then
37780: LD_VAR 0 12
37784: NOT
37785: IFFALSE 37803
// begin x := x + 2 ;
37787: LD_ADDR_VAR 0 13
37791: PUSH
37792: LD_VAR 0 13
37796: PUSH
37797: LD_INT 2
37799: PLUS
37800: ST_TO_ADDR
// continue ;
37801: GO 37601
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37803: LD_VAR 0 12
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: PPUSH
37812: CALL_OW 266
37816: PUSH
37817: LD_INT 5
37819: EQUAL
37820: IFFALSE 37894
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37822: LD_VAR 0 12
37826: PUSH
37827: LD_INT 1
37829: ARRAY
37830: PPUSH
37831: CALL_OW 313
37835: PUSH
37836: LD_INT 3
37838: LESS
37839: IFFALSE 37875
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37841: LD_INT 0
37843: PPUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 8
37849: PUSH
37850: LD_INT 9
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: LD_VAR 0 17
37862: ARRAY
37863: PPUSH
37864: LD_VAR 0 4
37868: PPUSH
37869: CALL_OW 380
37873: GO 37892
// PrepareHuman ( false , i , skill ) ;
37875: LD_INT 0
37877: PPUSH
37878: LD_VAR 0 8
37882: PPUSH
37883: LD_VAR 0 4
37887: PPUSH
37888: CALL_OW 380
// end else
37892: GO 37911
// PrepareHuman ( false , i , skill ) ;
37894: LD_INT 0
37896: PPUSH
37897: LD_VAR 0 8
37901: PPUSH
37902: LD_VAR 0 4
37906: PPUSH
37907: CALL_OW 380
// un := CreateHuman ;
37911: LD_ADDR_VAR 0 14
37915: PUSH
37916: CALL_OW 44
37920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37921: LD_ADDR_VAR 0 7
37925: PUSH
37926: LD_VAR 0 7
37930: PPUSH
37931: LD_INT 1
37933: PPUSH
37934: LD_VAR 0 14
37938: PPUSH
37939: CALL_OW 2
37943: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37944: LD_VAR 0 14
37948: PPUSH
37949: LD_VAR 0 12
37953: PUSH
37954: LD_INT 1
37956: ARRAY
37957: PPUSH
37958: CALL_OW 52
// end ;
37962: GO 37601
37964: POP
37965: POP
// end ;
37966: GO 36903
37968: POP
37969: POP
// result := result ^ buildings ;
37970: LD_ADDR_VAR 0 7
37974: PUSH
37975: LD_VAR 0 7
37979: PUSH
37980: LD_VAR 0 18
37984: ADD
37985: ST_TO_ADDR
// end else
37986: GO 38129
// begin for i = 1 to personel do
37988: LD_ADDR_VAR 0 8
37992: PUSH
37993: DOUBLE
37994: LD_INT 1
37996: DEC
37997: ST_TO_ADDR
37998: LD_VAR 0 6
38002: PUSH
38003: FOR_TO
38004: IFFALSE 38127
// begin if i > 4 then
38006: LD_VAR 0 8
38010: PUSH
38011: LD_INT 4
38013: GREATER
38014: IFFALSE 38018
// break ;
38016: GO 38127
// x := personel [ i ] ;
38018: LD_ADDR_VAR 0 13
38022: PUSH
38023: LD_VAR 0 6
38027: PUSH
38028: LD_VAR 0 8
38032: ARRAY
38033: ST_TO_ADDR
// if x = - 1 then
38034: LD_VAR 0 13
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: EQUAL
38043: IFFALSE 38047
// continue ;
38045: GO 38003
// PrepareHuman ( false , i , skill ) ;
38047: LD_INT 0
38049: PPUSH
38050: LD_VAR 0 8
38054: PPUSH
38055: LD_VAR 0 4
38059: PPUSH
38060: CALL_OW 380
// un := CreateHuman ;
38064: LD_ADDR_VAR 0 14
38068: PUSH
38069: CALL_OW 44
38073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38074: LD_VAR 0 14
38078: PPUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 250
38088: PPUSH
38089: LD_VAR 0 1
38093: PPUSH
38094: CALL_OW 251
38098: PPUSH
38099: LD_INT 10
38101: PPUSH
38102: LD_INT 0
38104: PPUSH
38105: CALL_OW 50
// result := result ^ un ;
38109: LD_ADDR_VAR 0 7
38113: PUSH
38114: LD_VAR 0 7
38118: PUSH
38119: LD_VAR 0 14
38123: ADD
38124: ST_TO_ADDR
// end ;
38125: GO 38003
38127: POP
38128: POP
// end ; end ;
38129: LD_VAR 0 7
38133: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38134: LD_INT 0
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
// result := false ;
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_INT 0
38159: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38160: LD_VAR 0 1
38164: NOT
38165: PUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 266
38175: PUSH
38176: LD_INT 32
38178: PUSH
38179: LD_INT 33
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: IN
38186: NOT
38187: OR
38188: IFFALSE 38192
// exit ;
38190: GO 39328
// nat := GetNation ( tower ) ;
38192: LD_ADDR_VAR 0 12
38196: PUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 248
38206: ST_TO_ADDR
// side := GetSide ( tower ) ;
38207: LD_ADDR_VAR 0 16
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 255
38221: ST_TO_ADDR
// x := GetX ( tower ) ;
38222: LD_ADDR_VAR 0 10
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 250
38236: ST_TO_ADDR
// y := GetY ( tower ) ;
38237: LD_ADDR_VAR 0 11
38241: PUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 251
38251: ST_TO_ADDR
// if not x or not y then
38252: LD_VAR 0 10
38256: NOT
38257: PUSH
38258: LD_VAR 0 11
38262: NOT
38263: OR
38264: IFFALSE 38268
// exit ;
38266: GO 39328
// weapon := 0 ;
38268: LD_ADDR_VAR 0 18
38272: PUSH
38273: LD_INT 0
38275: ST_TO_ADDR
// fac_list := [ ] ;
38276: LD_ADDR_VAR 0 17
38280: PUSH
38281: EMPTY
38282: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38283: LD_ADDR_VAR 0 6
38287: PUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 274
38297: PPUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: CALL 35906 0 2
38307: PPUSH
38308: LD_INT 30
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PPUSH
38318: CALL_OW 72
38322: ST_TO_ADDR
// if not factories then
38323: LD_VAR 0 6
38327: NOT
38328: IFFALSE 38332
// exit ;
38330: GO 39328
// for i in factories do
38332: LD_ADDR_VAR 0 8
38336: PUSH
38337: LD_VAR 0 6
38341: PUSH
38342: FOR_IN
38343: IFFALSE 38368
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38345: LD_ADDR_VAR 0 17
38349: PUSH
38350: LD_VAR 0 17
38354: PUSH
38355: LD_VAR 0 8
38359: PPUSH
38360: CALL_OW 478
38364: UNION
38365: ST_TO_ADDR
38366: GO 38342
38368: POP
38369: POP
// if not fac_list then
38370: LD_VAR 0 17
38374: NOT
38375: IFFALSE 38379
// exit ;
38377: GO 39328
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38379: LD_ADDR_VAR 0 5
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: LD_INT 5
38389: PUSH
38390: LD_INT 9
38392: PUSH
38393: LD_INT 10
38395: PUSH
38396: LD_INT 6
38398: PUSH
38399: LD_INT 7
38401: PUSH
38402: LD_INT 11
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 27
38416: PUSH
38417: LD_INT 28
38419: PUSH
38420: LD_INT 26
38422: PUSH
38423: LD_INT 30
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 43
38434: PUSH
38435: LD_INT 44
38437: PUSH
38438: LD_INT 46
38440: PUSH
38441: LD_INT 45
38443: PUSH
38444: LD_INT 47
38446: PUSH
38447: LD_INT 49
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: PUSH
38463: LD_VAR 0 12
38467: ARRAY
38468: ST_TO_ADDR
// for i in list do
38469: LD_ADDR_VAR 0 8
38473: PUSH
38474: LD_VAR 0 5
38478: PUSH
38479: FOR_IN
38480: IFFALSE 38513
// if not i in fac_list then
38482: LD_VAR 0 8
38486: PUSH
38487: LD_VAR 0 17
38491: IN
38492: NOT
38493: IFFALSE 38511
// list := list diff i ;
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: LD_VAR 0 5
38504: PUSH
38505: LD_VAR 0 8
38509: DIFF
38510: ST_TO_ADDR
38511: GO 38479
38513: POP
38514: POP
// if not list then
38515: LD_VAR 0 5
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 39328
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38524: LD_VAR 0 12
38528: PUSH
38529: LD_INT 3
38531: EQUAL
38532: PUSH
38533: LD_INT 49
38535: PUSH
38536: LD_VAR 0 5
38540: IN
38541: AND
38542: PUSH
38543: LD_INT 31
38545: PPUSH
38546: LD_VAR 0 16
38550: PPUSH
38551: CALL_OW 321
38555: PUSH
38556: LD_INT 2
38558: EQUAL
38559: AND
38560: IFFALSE 38620
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38562: LD_INT 22
38564: PUSH
38565: LD_VAR 0 16
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 35
38576: PUSH
38577: LD_INT 49
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 91
38586: PUSH
38587: LD_VAR 0 1
38591: PUSH
38592: LD_INT 10
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: PPUSH
38605: CALL_OW 69
38609: NOT
38610: IFFALSE 38620
// weapon := ru_time_lapser ;
38612: LD_ADDR_VAR 0 18
38616: PUSH
38617: LD_INT 49
38619: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38620: LD_VAR 0 12
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: IN
38635: PUSH
38636: LD_INT 11
38638: PUSH
38639: LD_VAR 0 5
38643: IN
38644: PUSH
38645: LD_INT 30
38647: PUSH
38648: LD_VAR 0 5
38652: IN
38653: OR
38654: AND
38655: PUSH
38656: LD_INT 6
38658: PPUSH
38659: LD_VAR 0 16
38663: PPUSH
38664: CALL_OW 321
38668: PUSH
38669: LD_INT 2
38671: EQUAL
38672: AND
38673: IFFALSE 38838
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38675: LD_INT 22
38677: PUSH
38678: LD_VAR 0 16
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 35
38692: PUSH
38693: LD_INT 11
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 35
38702: PUSH
38703: LD_INT 30
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 91
38717: PUSH
38718: LD_VAR 0 1
38722: PUSH
38723: LD_INT 18
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: PPUSH
38736: CALL_OW 69
38740: NOT
38741: PUSH
38742: LD_INT 22
38744: PUSH
38745: LD_VAR 0 16
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 30
38759: PUSH
38760: LD_INT 32
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 30
38769: PUSH
38770: LD_INT 33
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 91
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_INT 12
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: PPUSH
38806: CALL_OW 69
38810: PUSH
38811: LD_INT 2
38813: GREATER
38814: AND
38815: IFFALSE 38838
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38817: LD_ADDR_VAR 0 18
38821: PUSH
38822: LD_INT 11
38824: PUSH
38825: LD_INT 30
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_VAR 0 12
38836: ARRAY
38837: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38838: LD_VAR 0 18
38842: NOT
38843: PUSH
38844: LD_INT 40
38846: PPUSH
38847: LD_VAR 0 16
38851: PPUSH
38852: CALL_OW 321
38856: PUSH
38857: LD_INT 2
38859: EQUAL
38860: AND
38861: PUSH
38862: LD_INT 7
38864: PUSH
38865: LD_VAR 0 5
38869: IN
38870: PUSH
38871: LD_INT 28
38873: PUSH
38874: LD_VAR 0 5
38878: IN
38879: OR
38880: PUSH
38881: LD_INT 45
38883: PUSH
38884: LD_VAR 0 5
38888: IN
38889: OR
38890: AND
38891: IFFALSE 39145
// begin hex := GetHexInfo ( x , y ) ;
38893: LD_ADDR_VAR 0 4
38897: PUSH
38898: LD_VAR 0 10
38902: PPUSH
38903: LD_VAR 0 11
38907: PPUSH
38908: CALL_OW 546
38912: ST_TO_ADDR
// if hex [ 1 ] then
38913: LD_VAR 0 4
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: IFFALSE 38925
// exit ;
38923: GO 39328
// height := hex [ 2 ] ;
38925: LD_ADDR_VAR 0 15
38929: PUSH
38930: LD_VAR 0 4
38934: PUSH
38935: LD_INT 2
38937: ARRAY
38938: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38939: LD_ADDR_VAR 0 14
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: LD_INT 5
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// for i in tmp do
38962: LD_ADDR_VAR 0 8
38966: PUSH
38967: LD_VAR 0 14
38971: PUSH
38972: FOR_IN
38973: IFFALSE 39143
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38975: LD_ADDR_VAR 0 9
38979: PUSH
38980: LD_VAR 0 10
38984: PPUSH
38985: LD_VAR 0 8
38989: PPUSH
38990: LD_INT 5
38992: PPUSH
38993: CALL_OW 272
38997: PUSH
38998: LD_VAR 0 11
39002: PPUSH
39003: LD_VAR 0 8
39007: PPUSH
39008: LD_INT 5
39010: PPUSH
39011: CALL_OW 273
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39020: LD_VAR 0 9
39024: PUSH
39025: LD_INT 1
39027: ARRAY
39028: PPUSH
39029: LD_VAR 0 9
39033: PUSH
39034: LD_INT 2
39036: ARRAY
39037: PPUSH
39038: CALL_OW 488
39042: IFFALSE 39141
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39044: LD_ADDR_VAR 0 4
39048: PUSH
39049: LD_VAR 0 9
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: LD_VAR 0 9
39062: PUSH
39063: LD_INT 2
39065: ARRAY
39066: PPUSH
39067: CALL_OW 546
39071: ST_TO_ADDR
// if hex [ 1 ] then
39072: LD_VAR 0 4
39076: PUSH
39077: LD_INT 1
39079: ARRAY
39080: IFFALSE 39084
// continue ;
39082: GO 38972
// h := hex [ 2 ] ;
39084: LD_ADDR_VAR 0 13
39088: PUSH
39089: LD_VAR 0 4
39093: PUSH
39094: LD_INT 2
39096: ARRAY
39097: ST_TO_ADDR
// if h + 7 < height then
39098: LD_VAR 0 13
39102: PUSH
39103: LD_INT 7
39105: PLUS
39106: PUSH
39107: LD_VAR 0 15
39111: LESS
39112: IFFALSE 39141
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39114: LD_ADDR_VAR 0 18
39118: PUSH
39119: LD_INT 7
39121: PUSH
39122: LD_INT 28
39124: PUSH
39125: LD_INT 45
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: PUSH
39133: LD_VAR 0 12
39137: ARRAY
39138: ST_TO_ADDR
// break ;
39139: GO 39143
// end ; end ; end ;
39141: GO 38972
39143: POP
39144: POP
// end ; if not weapon then
39145: LD_VAR 0 18
39149: NOT
39150: IFFALSE 39210
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: LD_VAR 0 5
39161: PUSH
39162: LD_INT 11
39164: PUSH
39165: LD_INT 30
39167: PUSH
39168: LD_INT 49
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: DIFF
39176: ST_TO_ADDR
// if not list then
39177: LD_VAR 0 5
39181: NOT
39182: IFFALSE 39186
// exit ;
39184: GO 39328
// weapon := list [ rand ( 1 , list ) ] ;
39186: LD_ADDR_VAR 0 18
39190: PUSH
39191: LD_VAR 0 5
39195: PUSH
39196: LD_INT 1
39198: PPUSH
39199: LD_VAR 0 5
39203: PPUSH
39204: CALL_OW 12
39208: ARRAY
39209: ST_TO_ADDR
// end ; if weapon then
39210: LD_VAR 0 18
39214: IFFALSE 39328
// begin tmp := CostOfWeapon ( weapon ) ;
39216: LD_ADDR_VAR 0 14
39220: PUSH
39221: LD_VAR 0 18
39225: PPUSH
39226: CALL_OW 451
39230: ST_TO_ADDR
// j := GetBase ( tower ) ;
39231: LD_ADDR_VAR 0 9
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 274
39245: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39246: LD_VAR 0 9
39250: PPUSH
39251: LD_INT 1
39253: PPUSH
39254: CALL_OW 275
39258: PUSH
39259: LD_VAR 0 14
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: GREATEREQUAL
39268: PUSH
39269: LD_VAR 0 9
39273: PPUSH
39274: LD_INT 2
39276: PPUSH
39277: CALL_OW 275
39281: PUSH
39282: LD_VAR 0 14
39286: PUSH
39287: LD_INT 2
39289: ARRAY
39290: GREATEREQUAL
39291: AND
39292: PUSH
39293: LD_VAR 0 9
39297: PPUSH
39298: LD_INT 3
39300: PPUSH
39301: CALL_OW 275
39305: PUSH
39306: LD_VAR 0 14
39310: PUSH
39311: LD_INT 3
39313: ARRAY
39314: GREATEREQUAL
39315: AND
39316: IFFALSE 39328
// result := weapon ;
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_VAR 0 18
39327: ST_TO_ADDR
// end ; end ;
39328: LD_VAR 0 3
39332: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39333: LD_INT 0
39335: PPUSH
39336: PPUSH
// result := true ;
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 1
39344: ST_TO_ADDR
// if array1 = array2 then
39345: LD_VAR 0 1
39349: PUSH
39350: LD_VAR 0 2
39354: EQUAL
39355: IFFALSE 39415
// begin for i = 1 to array1 do
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: DOUBLE
39363: LD_INT 1
39365: DEC
39366: ST_TO_ADDR
39367: LD_VAR 0 1
39371: PUSH
39372: FOR_TO
39373: IFFALSE 39411
// if array1 [ i ] <> array2 [ i ] then
39375: LD_VAR 0 1
39379: PUSH
39380: LD_VAR 0 4
39384: ARRAY
39385: PUSH
39386: LD_VAR 0 2
39390: PUSH
39391: LD_VAR 0 4
39395: ARRAY
39396: NONEQUAL
39397: IFFALSE 39409
// begin result := false ;
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_INT 0
39406: ST_TO_ADDR
// break ;
39407: GO 39411
// end ;
39409: GO 39372
39411: POP
39412: POP
// end else
39413: GO 39423
// result := false ;
39415: LD_ADDR_VAR 0 3
39419: PUSH
39420: LD_INT 0
39422: ST_TO_ADDR
// end ;
39423: LD_VAR 0 3
39427: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39428: LD_INT 0
39430: PPUSH
39431: PPUSH
39432: PPUSH
// pom := GetBase ( fac ) ;
39433: LD_ADDR_VAR 0 5
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 274
39447: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39448: LD_ADDR_VAR 0 4
39452: PUSH
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: LD_VAR 0 2
39466: PUSH
39467: LD_INT 2
39469: ARRAY
39470: PPUSH
39471: LD_VAR 0 2
39475: PUSH
39476: LD_INT 3
39478: ARRAY
39479: PPUSH
39480: LD_VAR 0 2
39484: PUSH
39485: LD_INT 4
39487: ARRAY
39488: PPUSH
39489: CALL_OW 449
39493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_VAR 0 5
39503: PPUSH
39504: LD_INT 1
39506: PPUSH
39507: CALL_OW 275
39511: PUSH
39512: LD_VAR 0 4
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: GREATEREQUAL
39521: PUSH
39522: LD_VAR 0 5
39526: PPUSH
39527: LD_INT 2
39529: PPUSH
39530: CALL_OW 275
39534: PUSH
39535: LD_VAR 0 4
39539: PUSH
39540: LD_INT 2
39542: ARRAY
39543: GREATEREQUAL
39544: AND
39545: PUSH
39546: LD_VAR 0 5
39550: PPUSH
39551: LD_INT 3
39553: PPUSH
39554: CALL_OW 275
39558: PUSH
39559: LD_VAR 0 4
39563: PUSH
39564: LD_INT 3
39566: ARRAY
39567: GREATEREQUAL
39568: AND
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 3
39574: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39575: LD_INT 0
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
// pom := GetBase ( building ) ;
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 274
39595: ST_TO_ADDR
// if not pom then
39596: LD_VAR 0 3
39600: NOT
39601: IFFALSE 39605
// exit ;
39603: GO 39775
// btype := GetBType ( building ) ;
39605: LD_ADDR_VAR 0 5
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 266
39619: ST_TO_ADDR
// if btype = b_armoury then
39620: LD_VAR 0 5
39624: PUSH
39625: LD_INT 4
39627: EQUAL
39628: IFFALSE 39638
// btype := b_barracks ;
39630: LD_ADDR_VAR 0 5
39634: PUSH
39635: LD_INT 5
39637: ST_TO_ADDR
// if btype = b_depot then
39638: LD_VAR 0 5
39642: PUSH
39643: LD_INT 0
39645: EQUAL
39646: IFFALSE 39656
// btype := b_warehouse ;
39648: LD_ADDR_VAR 0 5
39652: PUSH
39653: LD_INT 1
39655: ST_TO_ADDR
// if btype = b_workshop then
39656: LD_VAR 0 5
39660: PUSH
39661: LD_INT 2
39663: EQUAL
39664: IFFALSE 39674
// btype := b_factory ;
39666: LD_ADDR_VAR 0 5
39670: PUSH
39671: LD_INT 3
39673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: LD_VAR 0 5
39683: PPUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 248
39693: PPUSH
39694: CALL_OW 450
39698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39699: LD_ADDR_VAR 0 2
39703: PUSH
39704: LD_VAR 0 3
39708: PPUSH
39709: LD_INT 1
39711: PPUSH
39712: CALL_OW 275
39716: PUSH
39717: LD_VAR 0 4
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: GREATEREQUAL
39726: PUSH
39727: LD_VAR 0 3
39731: PPUSH
39732: LD_INT 2
39734: PPUSH
39735: CALL_OW 275
39739: PUSH
39740: LD_VAR 0 4
39744: PUSH
39745: LD_INT 2
39747: ARRAY
39748: GREATEREQUAL
39749: AND
39750: PUSH
39751: LD_VAR 0 3
39755: PPUSH
39756: LD_INT 3
39758: PPUSH
39759: CALL_OW 275
39763: PUSH
39764: LD_VAR 0 4
39768: PUSH
39769: LD_INT 3
39771: ARRAY
39772: GREATEREQUAL
39773: AND
39774: ST_TO_ADDR
// end ;
39775: LD_VAR 0 2
39779: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39780: LD_INT 0
39782: PPUSH
39783: PPUSH
39784: PPUSH
// pom := GetBase ( building ) ;
39785: LD_ADDR_VAR 0 4
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 274
39799: ST_TO_ADDR
// if not pom then
39800: LD_VAR 0 4
39804: NOT
39805: IFFALSE 39809
// exit ;
39807: GO 39910
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39809: LD_ADDR_VAR 0 5
39813: PUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 248
39828: PPUSH
39829: CALL_OW 450
39833: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39834: LD_ADDR_VAR 0 3
39838: PUSH
39839: LD_VAR 0 4
39843: PPUSH
39844: LD_INT 1
39846: PPUSH
39847: CALL_OW 275
39851: PUSH
39852: LD_VAR 0 5
39856: PUSH
39857: LD_INT 1
39859: ARRAY
39860: GREATEREQUAL
39861: PUSH
39862: LD_VAR 0 4
39866: PPUSH
39867: LD_INT 2
39869: PPUSH
39870: CALL_OW 275
39874: PUSH
39875: LD_VAR 0 5
39879: PUSH
39880: LD_INT 2
39882: ARRAY
39883: GREATEREQUAL
39884: AND
39885: PUSH
39886: LD_VAR 0 4
39890: PPUSH
39891: LD_INT 3
39893: PPUSH
39894: CALL_OW 275
39898: PUSH
39899: LD_VAR 0 5
39903: PUSH
39904: LD_INT 3
39906: ARRAY
39907: GREATEREQUAL
39908: AND
39909: ST_TO_ADDR
// end ;
39910: LD_VAR 0 3
39914: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39915: LD_INT 0
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
// result := false ;
39927: LD_ADDR_VAR 0 6
39931: PUSH
39932: LD_INT 0
39934: ST_TO_ADDR
// if not base or not btype or not x or not y then
39935: LD_VAR 0 1
39939: NOT
39940: PUSH
39941: LD_VAR 0 2
39945: NOT
39946: OR
39947: PUSH
39948: LD_VAR 0 3
39952: NOT
39953: OR
39954: PUSH
39955: LD_VAR 0 4
39959: NOT
39960: OR
39961: IFFALSE 39965
// exit ;
39963: GO 40574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39965: LD_ADDR_VAR 0 12
39969: PUSH
39970: LD_VAR 0 2
39974: PPUSH
39975: LD_VAR 0 3
39979: PPUSH
39980: LD_VAR 0 4
39984: PPUSH
39985: LD_VAR 0 5
39989: PPUSH
39990: LD_VAR 0 1
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: PPUSH
39999: CALL_OW 248
40003: PPUSH
40004: LD_INT 0
40006: PPUSH
40007: CALL 41411 0 6
40011: ST_TO_ADDR
// if not hexes then
40012: LD_VAR 0 12
40016: NOT
40017: IFFALSE 40021
// exit ;
40019: GO 40574
// for i = 1 to hexes do
40021: LD_ADDR_VAR 0 7
40025: PUSH
40026: DOUBLE
40027: LD_INT 1
40029: DEC
40030: ST_TO_ADDR
40031: LD_VAR 0 12
40035: PUSH
40036: FOR_TO
40037: IFFALSE 40572
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40039: LD_ADDR_VAR 0 11
40043: PUSH
40044: LD_VAR 0 12
40048: PUSH
40049: LD_VAR 0 7
40053: ARRAY
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: PPUSH
40059: LD_VAR 0 12
40063: PUSH
40064: LD_VAR 0 7
40068: ARRAY
40069: PUSH
40070: LD_INT 2
40072: ARRAY
40073: PPUSH
40074: CALL_OW 428
40078: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40079: LD_VAR 0 12
40083: PUSH
40084: LD_VAR 0 7
40088: ARRAY
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PPUSH
40094: LD_VAR 0 12
40098: PUSH
40099: LD_VAR 0 7
40103: ARRAY
40104: PUSH
40105: LD_INT 2
40107: ARRAY
40108: PPUSH
40109: CALL_OW 351
40113: PUSH
40114: LD_VAR 0 12
40118: PUSH
40119: LD_VAR 0 7
40123: ARRAY
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 12
40133: PUSH
40134: LD_VAR 0 7
40138: ARRAY
40139: PUSH
40140: LD_INT 2
40142: ARRAY
40143: PPUSH
40144: CALL_OW 488
40148: NOT
40149: OR
40150: PUSH
40151: LD_VAR 0 11
40155: PPUSH
40156: CALL_OW 247
40160: PUSH
40161: LD_INT 3
40163: EQUAL
40164: OR
40165: IFFALSE 40171
// exit ;
40167: POP
40168: POP
40169: GO 40574
// if not tmp or not tmp in base then
40171: LD_VAR 0 11
40175: NOT
40176: PUSH
40177: LD_VAR 0 11
40181: PUSH
40182: LD_VAR 0 1
40186: IN
40187: NOT
40188: OR
40189: IFFALSE 40193
// continue ;
40191: GO 40036
// result := true ;
40193: LD_ADDR_VAR 0 6
40197: PUSH
40198: LD_INT 1
40200: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40201: LD_ADDR_VAR 0 15
40205: PUSH
40206: LD_VAR 0 1
40210: PPUSH
40211: LD_INT 22
40213: PUSH
40214: LD_VAR 0 11
40218: PPUSH
40219: CALL_OW 255
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 30
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 30
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 72
40264: ST_TO_ADDR
// if dep then
40265: LD_VAR 0 15
40269: IFFALSE 40405
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40271: LD_ADDR_VAR 0 14
40275: PUSH
40276: LD_VAR 0 15
40280: PUSH
40281: LD_INT 1
40283: ARRAY
40284: PPUSH
40285: CALL_OW 250
40289: PPUSH
40290: LD_VAR 0 15
40294: PUSH
40295: LD_INT 1
40297: ARRAY
40298: PPUSH
40299: CALL_OW 254
40303: PPUSH
40304: LD_INT 5
40306: PPUSH
40307: CALL_OW 272
40311: PUSH
40312: LD_VAR 0 15
40316: PUSH
40317: LD_INT 1
40319: ARRAY
40320: PPUSH
40321: CALL_OW 251
40325: PPUSH
40326: LD_VAR 0 15
40330: PUSH
40331: LD_INT 1
40333: ARRAY
40334: PPUSH
40335: CALL_OW 254
40339: PPUSH
40340: LD_INT 5
40342: PPUSH
40343: CALL_OW 273
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40352: LD_VAR 0 14
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: PPUSH
40361: LD_VAR 0 14
40365: PUSH
40366: LD_INT 2
40368: ARRAY
40369: PPUSH
40370: CALL_OW 488
40374: IFFALSE 40405
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40376: LD_VAR 0 11
40380: PPUSH
40381: LD_VAR 0 14
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 14
40394: PUSH
40395: LD_INT 2
40397: ARRAY
40398: PPUSH
40399: CALL_OW 111
// continue ;
40403: GO 40036
// end ; end ; r := GetDir ( tmp ) ;
40405: LD_ADDR_VAR 0 13
40409: PUSH
40410: LD_VAR 0 11
40414: PPUSH
40415: CALL_OW 254
40419: ST_TO_ADDR
// if r = 5 then
40420: LD_VAR 0 13
40424: PUSH
40425: LD_INT 5
40427: EQUAL
40428: IFFALSE 40438
// r := 0 ;
40430: LD_ADDR_VAR 0 13
40434: PUSH
40435: LD_INT 0
40437: ST_TO_ADDR
// for j = r to 5 do
40438: LD_ADDR_VAR 0 8
40442: PUSH
40443: DOUBLE
40444: LD_VAR 0 13
40448: DEC
40449: ST_TO_ADDR
40450: LD_INT 5
40452: PUSH
40453: FOR_TO
40454: IFFALSE 40568
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40456: LD_ADDR_VAR 0 9
40460: PUSH
40461: LD_VAR 0 11
40465: PPUSH
40466: CALL_OW 250
40470: PPUSH
40471: LD_VAR 0 8
40475: PPUSH
40476: LD_INT 2
40478: PPUSH
40479: CALL_OW 272
40483: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40484: LD_ADDR_VAR 0 10
40488: PUSH
40489: LD_VAR 0 11
40493: PPUSH
40494: CALL_OW 251
40498: PPUSH
40499: LD_VAR 0 8
40503: PPUSH
40504: LD_INT 2
40506: PPUSH
40507: CALL_OW 273
40511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40512: LD_VAR 0 9
40516: PPUSH
40517: LD_VAR 0 10
40521: PPUSH
40522: CALL_OW 488
40526: PUSH
40527: LD_VAR 0 9
40531: PPUSH
40532: LD_VAR 0 10
40536: PPUSH
40537: CALL_OW 428
40541: NOT
40542: AND
40543: IFFALSE 40566
// begin ComMoveXY ( tmp , _x , _y ) ;
40545: LD_VAR 0 11
40549: PPUSH
40550: LD_VAR 0 9
40554: PPUSH
40555: LD_VAR 0 10
40559: PPUSH
40560: CALL_OW 111
// break ;
40564: GO 40568
// end ; end ;
40566: GO 40453
40568: POP
40569: POP
// end ;
40570: GO 40036
40572: POP
40573: POP
// end ;
40574: LD_VAR 0 6
40578: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40579: LD_INT 0
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
// result := false ;
40591: LD_ADDR_VAR 0 6
40595: PUSH
40596: LD_INT 0
40598: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40599: LD_VAR 0 1
40603: NOT
40604: PUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 266
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: IN
40625: NOT
40626: OR
40627: PUSH
40628: LD_VAR 0 2
40632: NOT
40633: OR
40634: PUSH
40635: LD_VAR 0 5
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 4
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: IN
40666: NOT
40667: OR
40668: PUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: LD_VAR 0 4
40678: PPUSH
40679: CALL_OW 488
40683: NOT
40684: OR
40685: IFFALSE 40689
// exit ;
40687: GO 41406
// pom := GetBase ( depot ) ;
40689: LD_ADDR_VAR 0 10
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 274
40703: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40704: LD_ADDR_VAR 0 11
40708: PUSH
40709: LD_VAR 0 2
40713: PPUSH
40714: LD_VAR 0 1
40718: PPUSH
40719: CALL_OW 248
40723: PPUSH
40724: CALL_OW 450
40728: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40729: LD_VAR 0 10
40733: PPUSH
40734: LD_INT 1
40736: PPUSH
40737: CALL_OW 275
40741: PUSH
40742: LD_VAR 0 11
40746: PUSH
40747: LD_INT 1
40749: ARRAY
40750: GREATEREQUAL
40751: PUSH
40752: LD_VAR 0 10
40756: PPUSH
40757: LD_INT 2
40759: PPUSH
40760: CALL_OW 275
40764: PUSH
40765: LD_VAR 0 11
40769: PUSH
40770: LD_INT 2
40772: ARRAY
40773: GREATEREQUAL
40774: AND
40775: PUSH
40776: LD_VAR 0 10
40780: PPUSH
40781: LD_INT 3
40783: PPUSH
40784: CALL_OW 275
40788: PUSH
40789: LD_VAR 0 11
40793: PUSH
40794: LD_INT 3
40796: ARRAY
40797: GREATEREQUAL
40798: AND
40799: NOT
40800: IFFALSE 40804
// exit ;
40802: GO 41406
// if GetBType ( depot ) = b_depot then
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 266
40813: PUSH
40814: LD_INT 0
40816: EQUAL
40817: IFFALSE 40829
// dist := 28 else
40819: LD_ADDR_VAR 0 14
40823: PUSH
40824: LD_INT 28
40826: ST_TO_ADDR
40827: GO 40837
// dist := 36 ;
40829: LD_ADDR_VAR 0 14
40833: PUSH
40834: LD_INT 36
40836: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40837: LD_VAR 0 1
40841: PPUSH
40842: LD_VAR 0 3
40846: PPUSH
40847: LD_VAR 0 4
40851: PPUSH
40852: CALL_OW 297
40856: PUSH
40857: LD_VAR 0 14
40861: GREATER
40862: IFFALSE 40866
// exit ;
40864: GO 41406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40866: LD_ADDR_VAR 0 12
40870: PUSH
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_VAR 0 3
40880: PPUSH
40881: LD_VAR 0 4
40885: PPUSH
40886: LD_VAR 0 5
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 248
40900: PPUSH
40901: LD_INT 0
40903: PPUSH
40904: CALL 41411 0 6
40908: ST_TO_ADDR
// if not hexes then
40909: LD_VAR 0 12
40913: NOT
40914: IFFALSE 40918
// exit ;
40916: GO 41406
// hex := GetHexInfo ( x , y ) ;
40918: LD_ADDR_VAR 0 15
40922: PUSH
40923: LD_VAR 0 3
40927: PPUSH
40928: LD_VAR 0 4
40932: PPUSH
40933: CALL_OW 546
40937: ST_TO_ADDR
// if hex [ 1 ] then
40938: LD_VAR 0 15
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: IFFALSE 40950
// exit ;
40948: GO 41406
// height := hex [ 2 ] ;
40950: LD_ADDR_VAR 0 13
40954: PUSH
40955: LD_VAR 0 15
40959: PUSH
40960: LD_INT 2
40962: ARRAY
40963: ST_TO_ADDR
// for i = 1 to hexes do
40964: LD_ADDR_VAR 0 7
40968: PUSH
40969: DOUBLE
40970: LD_INT 1
40972: DEC
40973: ST_TO_ADDR
40974: LD_VAR 0 12
40978: PUSH
40979: FOR_TO
40980: IFFALSE 41310
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40982: LD_VAR 0 12
40986: PUSH
40987: LD_VAR 0 7
40991: ARRAY
40992: PUSH
40993: LD_INT 1
40995: ARRAY
40996: PPUSH
40997: LD_VAR 0 12
41001: PUSH
41002: LD_VAR 0 7
41006: ARRAY
41007: PUSH
41008: LD_INT 2
41010: ARRAY
41011: PPUSH
41012: CALL_OW 488
41016: NOT
41017: PUSH
41018: LD_VAR 0 12
41022: PUSH
41023: LD_VAR 0 7
41027: ARRAY
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PPUSH
41033: LD_VAR 0 12
41037: PUSH
41038: LD_VAR 0 7
41042: ARRAY
41043: PUSH
41044: LD_INT 2
41046: ARRAY
41047: PPUSH
41048: CALL_OW 428
41052: PUSH
41053: LD_INT 0
41055: GREATER
41056: OR
41057: PUSH
41058: LD_VAR 0 12
41062: PUSH
41063: LD_VAR 0 7
41067: ARRAY
41068: PUSH
41069: LD_INT 1
41071: ARRAY
41072: PPUSH
41073: LD_VAR 0 12
41077: PUSH
41078: LD_VAR 0 7
41082: ARRAY
41083: PUSH
41084: LD_INT 2
41086: ARRAY
41087: PPUSH
41088: CALL_OW 351
41092: OR
41093: IFFALSE 41099
// exit ;
41095: POP
41096: POP
41097: GO 41406
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41099: LD_ADDR_VAR 0 8
41103: PUSH
41104: LD_VAR 0 12
41108: PUSH
41109: LD_VAR 0 7
41113: ARRAY
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: LD_VAR 0 12
41123: PUSH
41124: LD_VAR 0 7
41128: ARRAY
41129: PUSH
41130: LD_INT 2
41132: ARRAY
41133: PPUSH
41134: CALL_OW 546
41138: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41139: LD_VAR 0 8
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: PUSH
41148: LD_VAR 0 8
41152: PUSH
41153: LD_INT 2
41155: ARRAY
41156: PUSH
41157: LD_VAR 0 13
41161: PUSH
41162: LD_INT 2
41164: PLUS
41165: GREATER
41166: OR
41167: PUSH
41168: LD_VAR 0 8
41172: PUSH
41173: LD_INT 2
41175: ARRAY
41176: PUSH
41177: LD_VAR 0 13
41181: PUSH
41182: LD_INT 2
41184: MINUS
41185: LESS
41186: OR
41187: PUSH
41188: LD_VAR 0 8
41192: PUSH
41193: LD_INT 3
41195: ARRAY
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 8
41202: PUSH
41203: LD_INT 9
41205: PUSH
41206: LD_INT 10
41208: PUSH
41209: LD_INT 11
41211: PUSH
41212: LD_INT 12
41214: PUSH
41215: LD_INT 13
41217: PUSH
41218: LD_INT 16
41220: PUSH
41221: LD_INT 17
41223: PUSH
41224: LD_INT 18
41226: PUSH
41227: LD_INT 19
41229: PUSH
41230: LD_INT 20
41232: PUSH
41233: LD_INT 21
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: IN
41251: NOT
41252: OR
41253: PUSH
41254: LD_VAR 0 8
41258: PUSH
41259: LD_INT 5
41261: ARRAY
41262: NOT
41263: OR
41264: PUSH
41265: LD_VAR 0 8
41269: PUSH
41270: LD_INT 6
41272: ARRAY
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 7
41282: PUSH
41283: LD_INT 9
41285: PUSH
41286: LD_INT 10
41288: PUSH
41289: LD_INT 11
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: IN
41300: NOT
41301: OR
41302: IFFALSE 41308
// exit ;
41304: POP
41305: POP
41306: GO 41406
// end ;
41308: GO 40979
41310: POP
41311: POP
// side := GetSide ( depot ) ;
41312: LD_ADDR_VAR 0 9
41316: PUSH
41317: LD_VAR 0 1
41321: PPUSH
41322: CALL_OW 255
41326: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41327: LD_VAR 0 9
41331: PPUSH
41332: LD_VAR 0 3
41336: PPUSH
41337: LD_VAR 0 4
41341: PPUSH
41342: LD_INT 20
41344: PPUSH
41345: CALL 34060 0 4
41349: PUSH
41350: LD_INT 4
41352: ARRAY
41353: IFFALSE 41357
// exit ;
41355: GO 41406
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41357: LD_VAR 0 2
41361: PUSH
41362: LD_INT 29
41364: PUSH
41365: LD_INT 30
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: IN
41372: PUSH
41373: LD_VAR 0 3
41377: PPUSH
41378: LD_VAR 0 4
41382: PPUSH
41383: LD_VAR 0 9
41387: PPUSH
41388: CALL_OW 440
41392: NOT
41393: AND
41394: IFFALSE 41398
// exit ;
41396: GO 41406
// result := true ;
41398: LD_ADDR_VAR 0 6
41402: PUSH
41403: LD_INT 1
41405: ST_TO_ADDR
// end ;
41406: LD_VAR 0 6
41410: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41411: LD_INT 0
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
// result = [ ] ;
41471: LD_ADDR_VAR 0 7
41475: PUSH
41476: EMPTY
41477: ST_TO_ADDR
// temp_list = [ ] ;
41478: LD_ADDR_VAR 0 9
41482: PUSH
41483: EMPTY
41484: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41485: LD_VAR 0 4
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: LD_INT 4
41504: PUSH
41505: LD_INT 5
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: IN
41516: NOT
41517: PUSH
41518: LD_VAR 0 1
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: IN
41533: PUSH
41534: LD_VAR 0 5
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: IN
41553: NOT
41554: AND
41555: OR
41556: IFFALSE 41560
// exit ;
41558: GO 59951
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41560: LD_VAR 0 1
41564: PUSH
41565: LD_INT 6
41567: PUSH
41568: LD_INT 7
41570: PUSH
41571: LD_INT 8
41573: PUSH
41574: LD_INT 13
41576: PUSH
41577: LD_INT 12
41579: PUSH
41580: LD_INT 15
41582: PUSH
41583: LD_INT 11
41585: PUSH
41586: LD_INT 14
41588: PUSH
41589: LD_INT 10
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: IN
41603: IFFALSE 41613
// btype = b_lab ;
41605: LD_ADDR_VAR 0 1
41609: PUSH
41610: LD_INT 6
41612: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41613: LD_VAR 0 6
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: IN
41632: NOT
41633: PUSH
41634: LD_VAR 0 1
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: LD_INT 6
41653: PUSH
41654: LD_INT 36
41656: PUSH
41657: LD_INT 4
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: LD_INT 31
41665: PUSH
41666: LD_INT 32
41668: PUSH
41669: LD_INT 33
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: IN
41685: NOT
41686: PUSH
41687: LD_VAR 0 6
41691: PUSH
41692: LD_INT 1
41694: EQUAL
41695: AND
41696: OR
41697: PUSH
41698: LD_VAR 0 1
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: IN
41713: NOT
41714: PUSH
41715: LD_VAR 0 6
41719: PUSH
41720: LD_INT 2
41722: EQUAL
41723: AND
41724: OR
41725: IFFALSE 41735
// mode = 0 ;
41727: LD_ADDR_VAR 0 6
41731: PUSH
41732: LD_INT 0
41734: ST_TO_ADDR
// case mode of 0 :
41735: LD_VAR 0 6
41739: PUSH
41740: LD_INT 0
41742: DOUBLE
41743: EQUAL
41744: IFTRUE 41748
41746: GO 53201
41748: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41749: LD_ADDR_VAR 0 11
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41942: LD_ADDR_VAR 0 12
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: NEG
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42138: LD_ADDR_VAR 0 13
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 3
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 14
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 3
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42533: LD_ADDR_VAR 0 15
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42726: LD_ADDR_VAR 0 16
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42919: LD_ADDR_VAR 0 17
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43149: LD_ADDR_VAR 0 18
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43379: LD_ADDR_VAR 0 19
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43609: LD_ADDR_VAR 0 20
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43839: LD_ADDR_VAR 0 21
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44069: LD_ADDR_VAR 0 22
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44299: LD_ADDR_VAR 0 23
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 3
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44579: LD_ADDR_VAR 0 24
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44855: LD_ADDR_VAR 0 25
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45129: LD_ADDR_VAR 0 26
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45405: LD_ADDR_VAR 0 27
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45685: LD_ADDR_VAR 0 28
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45967: LD_ADDR_VAR 0 29
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: NEG
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46246: LD_ADDR_VAR 0 30
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46524: LD_ADDR_VAR 0 31
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 3
46767: NEG
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46802: LD_ADDR_VAR 0 32
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47080: LD_ADDR_VAR 0 33
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 3
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47359: LD_ADDR_VAR 0 34
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47639: LD_ADDR_VAR 0 35
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47751: LD_ADDR_VAR 0 36
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47863: LD_ADDR_VAR 0 37
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47975: LD_ADDR_VAR 0 38
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48087: LD_ADDR_VAR 0 39
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48199: LD_ADDR_VAR 0 40
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48311: LD_ADDR_VAR 0 41
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: NEG
48621: PUSH
48622: LD_INT 3
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48661: LD_ADDR_VAR 0 42
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 3
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 3
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49011: LD_ADDR_VAR 0 43
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49359: LD_ADDR_VAR 0 44
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49709: LD_ADDR_VAR 0 45
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50059: LD_ADDR_VAR 0 46
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50407: LD_ADDR_VAR 0 47
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50558: LD_ADDR_VAR 0 48
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50705: LD_ADDR_VAR 0 49
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50849: LD_ADDR_VAR 0 50
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50993: LD_ADDR_VAR 0 51
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51140: LD_ADDR_VAR 0 52
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51291: LD_ADDR_VAR 0 53
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51521: LD_ADDR_VAR 0 54
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51751: LD_ADDR_VAR 0 55
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51981: LD_ADDR_VAR 0 56
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52211: LD_ADDR_VAR 0 57
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52441: LD_ADDR_VAR 0 58
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52671: LD_ADDR_VAR 0 59
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52759: LD_ADDR_VAR 0 60
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52847: LD_ADDR_VAR 0 61
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52935: LD_ADDR_VAR 0 62
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53023: LD_ADDR_VAR 0 63
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53111: LD_ADDR_VAR 0 64
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// end ; 1 :
53199: GO 59096
53201: LD_INT 1
53203: DOUBLE
53204: EQUAL
53205: IFTRUE 53209
53207: GO 55832
53209: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53210: LD_ADDR_VAR 0 11
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 3
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53254: LD_ADDR_VAR 0 12
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53295: LD_ADDR_VAR 0 13
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53335: LD_ADDR_VAR 0 14
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53376: LD_ADDR_VAR 0 15
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53420: LD_ADDR_VAR 0 16
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53466: LD_ADDR_VAR 0 17
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53510: LD_ADDR_VAR 0 18
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53551: LD_ADDR_VAR 0 19
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53591: LD_ADDR_VAR 0 20
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53632: LD_ADDR_VAR 0 21
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53676: LD_ADDR_VAR 0 22
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53722: LD_ADDR_VAR 0 23
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53766: LD_ADDR_VAR 0 24
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 4
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53807: LD_ADDR_VAR 0 25
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 4
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 4
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53847: LD_ADDR_VAR 0 26
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53888: LD_ADDR_VAR 0 27
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 4
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53932: LD_ADDR_VAR 0 28
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: LD_INT 4
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: NEG
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53978: LD_ADDR_VAR 0 29
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 4
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 3
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 5
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 5
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 4
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: LD_INT 6
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 6
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54133: LD_ADDR_VAR 0 30
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 5
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 6
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 6
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54276: LD_ADDR_VAR 0 31
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 4
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: LD_INT 4
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 4
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 5
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: LD_INT 5
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: LD_INT 5
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 6
54373: PUSH
54374: LD_INT 5
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 6
54383: PUSH
54384: LD_INT 6
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: LD_INT 6
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54415: LD_ADDR_VAR 0 32
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 4
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 4
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 5
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 5
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 6
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 6
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54558: LD_ADDR_VAR 0 33
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 4
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 5
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 5
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 5
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 6
54678: NEG
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 6
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54713: LD_ADDR_VAR 0 34
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 3
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: LD_INT 4
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 4
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 4
54780: NEG
54781: PUSH
54782: LD_INT 4
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 4
54792: NEG
54793: PUSH
54794: LD_INT 5
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 5
54804: NEG
54805: PUSH
54806: LD_INT 4
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 5
54816: NEG
54817: PUSH
54818: LD_INT 5
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 5
54828: NEG
54829: PUSH
54830: LD_INT 6
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 6
54840: NEG
54841: PUSH
54842: LD_INT 5
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 6
54852: NEG
54853: PUSH
54854: LD_INT 6
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54876: LD_ADDR_VAR 0 41
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54920: LD_ADDR_VAR 0 42
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54961: LD_ADDR_VAR 0 43
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55001: LD_ADDR_VAR 0 44
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55042: LD_ADDR_VAR 0 45
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55086: LD_ADDR_VAR 0 46
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55132: LD_ADDR_VAR 0 47
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55165: LD_ADDR_VAR 0 48
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55196: LD_ADDR_VAR 0 49
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55225: LD_ADDR_VAR 0 50
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55254: LD_ADDR_VAR 0 51
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55285: LD_ADDR_VAR 0 52
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55318: LD_ADDR_VAR 0 53
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55362: LD_ADDR_VAR 0 54
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55403: LD_ADDR_VAR 0 55
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55443: LD_ADDR_VAR 0 56
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55484: LD_ADDR_VAR 0 57
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55528: LD_ADDR_VAR 0 58
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55574: LD_ADDR_VAR 0 59
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55618: LD_ADDR_VAR 0 60
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55659: LD_ADDR_VAR 0 61
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55699: LD_ADDR_VAR 0 62
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55740: LD_ADDR_VAR 0 63
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55784: LD_ADDR_VAR 0 64
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// end ; 2 :
55830: GO 59096
55832: LD_INT 2
55834: DOUBLE
55835: EQUAL
55836: IFTRUE 55840
55838: GO 59095
55840: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55841: LD_ADDR_VAR 0 29
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 5
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 5
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 5
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 4
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 4
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 4
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 5
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 5
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 4
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 5
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: NEG
56227: PUSH
56228: LD_INT 4
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: LD_INT 5
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: LD_INT 4
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 5
56286: NEG
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 5
56298: NEG
56299: PUSH
56300: LD_INT 5
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: LD_INT 5
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 5
56322: NEG
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56379: LD_ADDR_VAR 0 30
56383: PUSH
56384: LD_INT 4
56386: PUSH
56387: LD_INT 4
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 5
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: LD_INT 5
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 5
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: LD_INT 5
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 4
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 5
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 5
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 4
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: NEG
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 4
56743: NEG
56744: PUSH
56745: LD_INT 4
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: LD_INT 4
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 4
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 5
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 4
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 5
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 5
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56926: LD_ADDR_VAR 0 31
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 4
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 4
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 5
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 5
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 5
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 4
57082: NEG
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 4
57105: NEG
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: NEG
57141: PUSH
57142: LD_INT 5
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: LD_INT 4
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: LD_INT 3
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 5
57188: NEG
57189: PUSH
57190: LD_INT 4
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 5
57200: NEG
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 5
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 5
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 4
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: LD_INT 4
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 4
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57476: LD_ADDR_VAR 0 32
57480: PUSH
57481: LD_INT 4
57483: NEG
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 5
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 5
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 5
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 4
57645: NEG
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 4
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 4
57681: NEG
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 5
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: LD_INT 5
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: LD_INT 3
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: PUSH
57909: LD_INT 4
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 5
57918: PUSH
57919: LD_INT 5
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: LD_INT 5
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 5
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 5
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58023: LD_ADDR_VAR 0 33
58027: PUSH
58028: LD_INT 4
58030: NEG
58031: PUSH
58032: LD_INT 4
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 4
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 5
58090: NEG
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 5
58102: NEG
58103: PUSH
58104: LD_INT 5
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 5
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: LD_INT 4
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 5
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58561: LD_ADDR_VAR 0 34
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 4
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 4
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 4
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 5
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 5
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 4
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 4
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: LD_INT 5
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: LD_INT 5
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 4
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 5
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 5
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: LD_INT 4
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 4
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 5
59002: NEG
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 5
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 5
59025: NEG
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// end ; end ;
59093: GO 59096
59095: POP
// case btype of b_depot , b_warehouse :
59096: LD_VAR 0 1
59100: PUSH
59101: LD_INT 0
59103: DOUBLE
59104: EQUAL
59105: IFTRUE 59115
59107: LD_INT 1
59109: DOUBLE
59110: EQUAL
59111: IFTRUE 59115
59113: GO 59316
59115: POP
// case nation of nation_american :
59116: LD_VAR 0 5
59120: PUSH
59121: LD_INT 1
59123: DOUBLE
59124: EQUAL
59125: IFTRUE 59129
59127: GO 59185
59129: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59130: LD_ADDR_VAR 0 9
59134: PUSH
59135: LD_VAR 0 11
59139: PUSH
59140: LD_VAR 0 12
59144: PUSH
59145: LD_VAR 0 13
59149: PUSH
59150: LD_VAR 0 14
59154: PUSH
59155: LD_VAR 0 15
59159: PUSH
59160: LD_VAR 0 16
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: PUSH
59173: LD_VAR 0 4
59177: PUSH
59178: LD_INT 1
59180: PLUS
59181: ARRAY
59182: ST_TO_ADDR
59183: GO 59314
59185: LD_INT 2
59187: DOUBLE
59188: EQUAL
59189: IFTRUE 59193
59191: GO 59249
59193: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59194: LD_ADDR_VAR 0 9
59198: PUSH
59199: LD_VAR 0 17
59203: PUSH
59204: LD_VAR 0 18
59208: PUSH
59209: LD_VAR 0 19
59213: PUSH
59214: LD_VAR 0 20
59218: PUSH
59219: LD_VAR 0 21
59223: PUSH
59224: LD_VAR 0 22
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: PUSH
59237: LD_VAR 0 4
59241: PUSH
59242: LD_INT 1
59244: PLUS
59245: ARRAY
59246: ST_TO_ADDR
59247: GO 59314
59249: LD_INT 3
59251: DOUBLE
59252: EQUAL
59253: IFTRUE 59257
59255: GO 59313
59257: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59258: LD_ADDR_VAR 0 9
59262: PUSH
59263: LD_VAR 0 23
59267: PUSH
59268: LD_VAR 0 24
59272: PUSH
59273: LD_VAR 0 25
59277: PUSH
59278: LD_VAR 0 26
59282: PUSH
59283: LD_VAR 0 27
59287: PUSH
59288: LD_VAR 0 28
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: PUSH
59301: LD_VAR 0 4
59305: PUSH
59306: LD_INT 1
59308: PLUS
59309: ARRAY
59310: ST_TO_ADDR
59311: GO 59314
59313: POP
59314: GO 59869
59316: LD_INT 2
59318: DOUBLE
59319: EQUAL
59320: IFTRUE 59330
59322: LD_INT 3
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59330
59328: GO 59386
59330: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59331: LD_ADDR_VAR 0 9
59335: PUSH
59336: LD_VAR 0 29
59340: PUSH
59341: LD_VAR 0 30
59345: PUSH
59346: LD_VAR 0 31
59350: PUSH
59351: LD_VAR 0 32
59355: PUSH
59356: LD_VAR 0 33
59360: PUSH
59361: LD_VAR 0 34
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: PUSH
59374: LD_VAR 0 4
59378: PUSH
59379: LD_INT 1
59381: PLUS
59382: ARRAY
59383: ST_TO_ADDR
59384: GO 59869
59386: LD_INT 16
59388: DOUBLE
59389: EQUAL
59390: IFTRUE 59448
59392: LD_INT 17
59394: DOUBLE
59395: EQUAL
59396: IFTRUE 59448
59398: LD_INT 18
59400: DOUBLE
59401: EQUAL
59402: IFTRUE 59448
59404: LD_INT 19
59406: DOUBLE
59407: EQUAL
59408: IFTRUE 59448
59410: LD_INT 22
59412: DOUBLE
59413: EQUAL
59414: IFTRUE 59448
59416: LD_INT 20
59418: DOUBLE
59419: EQUAL
59420: IFTRUE 59448
59422: LD_INT 21
59424: DOUBLE
59425: EQUAL
59426: IFTRUE 59448
59428: LD_INT 23
59430: DOUBLE
59431: EQUAL
59432: IFTRUE 59448
59434: LD_INT 24
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59448
59440: LD_INT 25
59442: DOUBLE
59443: EQUAL
59444: IFTRUE 59448
59446: GO 59504
59448: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59449: LD_ADDR_VAR 0 9
59453: PUSH
59454: LD_VAR 0 35
59458: PUSH
59459: LD_VAR 0 36
59463: PUSH
59464: LD_VAR 0 37
59468: PUSH
59469: LD_VAR 0 38
59473: PUSH
59474: LD_VAR 0 39
59478: PUSH
59479: LD_VAR 0 40
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 4
59496: PUSH
59497: LD_INT 1
59499: PLUS
59500: ARRAY
59501: ST_TO_ADDR
59502: GO 59869
59504: LD_INT 6
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59560
59510: LD_INT 7
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59560
59516: LD_INT 8
59518: DOUBLE
59519: EQUAL
59520: IFTRUE 59560
59522: LD_INT 13
59524: DOUBLE
59525: EQUAL
59526: IFTRUE 59560
59528: LD_INT 12
59530: DOUBLE
59531: EQUAL
59532: IFTRUE 59560
59534: LD_INT 15
59536: DOUBLE
59537: EQUAL
59538: IFTRUE 59560
59540: LD_INT 11
59542: DOUBLE
59543: EQUAL
59544: IFTRUE 59560
59546: LD_INT 14
59548: DOUBLE
59549: EQUAL
59550: IFTRUE 59560
59552: LD_INT 10
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59560
59558: GO 59616
59560: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59561: LD_ADDR_VAR 0 9
59565: PUSH
59566: LD_VAR 0 41
59570: PUSH
59571: LD_VAR 0 42
59575: PUSH
59576: LD_VAR 0 43
59580: PUSH
59581: LD_VAR 0 44
59585: PUSH
59586: LD_VAR 0 45
59590: PUSH
59591: LD_VAR 0 46
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: PUSH
59604: LD_VAR 0 4
59608: PUSH
59609: LD_INT 1
59611: PLUS
59612: ARRAY
59613: ST_TO_ADDR
59614: GO 59869
59616: LD_INT 36
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59624
59622: GO 59680
59624: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59625: LD_ADDR_VAR 0 9
59629: PUSH
59630: LD_VAR 0 47
59634: PUSH
59635: LD_VAR 0 48
59639: PUSH
59640: LD_VAR 0 49
59644: PUSH
59645: LD_VAR 0 50
59649: PUSH
59650: LD_VAR 0 51
59654: PUSH
59655: LD_VAR 0 52
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: LD_VAR 0 4
59672: PUSH
59673: LD_INT 1
59675: PLUS
59676: ARRAY
59677: ST_TO_ADDR
59678: GO 59869
59680: LD_INT 4
59682: DOUBLE
59683: EQUAL
59684: IFTRUE 59706
59686: LD_INT 5
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59706
59692: LD_INT 34
59694: DOUBLE
59695: EQUAL
59696: IFTRUE 59706
59698: LD_INT 37
59700: DOUBLE
59701: EQUAL
59702: IFTRUE 59706
59704: GO 59762
59706: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59707: LD_ADDR_VAR 0 9
59711: PUSH
59712: LD_VAR 0 53
59716: PUSH
59717: LD_VAR 0 54
59721: PUSH
59722: LD_VAR 0 55
59726: PUSH
59727: LD_VAR 0 56
59731: PUSH
59732: LD_VAR 0 57
59736: PUSH
59737: LD_VAR 0 58
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: PUSH
59750: LD_VAR 0 4
59754: PUSH
59755: LD_INT 1
59757: PLUS
59758: ARRAY
59759: ST_TO_ADDR
59760: GO 59869
59762: LD_INT 31
59764: DOUBLE
59765: EQUAL
59766: IFTRUE 59812
59768: LD_INT 32
59770: DOUBLE
59771: EQUAL
59772: IFTRUE 59812
59774: LD_INT 33
59776: DOUBLE
59777: EQUAL
59778: IFTRUE 59812
59780: LD_INT 27
59782: DOUBLE
59783: EQUAL
59784: IFTRUE 59812
59786: LD_INT 26
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59812
59792: LD_INT 28
59794: DOUBLE
59795: EQUAL
59796: IFTRUE 59812
59798: LD_INT 29
59800: DOUBLE
59801: EQUAL
59802: IFTRUE 59812
59804: LD_INT 30
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59868
59812: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59813: LD_ADDR_VAR 0 9
59817: PUSH
59818: LD_VAR 0 59
59822: PUSH
59823: LD_VAR 0 60
59827: PUSH
59828: LD_VAR 0 61
59832: PUSH
59833: LD_VAR 0 62
59837: PUSH
59838: LD_VAR 0 63
59842: PUSH
59843: LD_VAR 0 64
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: PUSH
59856: LD_VAR 0 4
59860: PUSH
59861: LD_INT 1
59863: PLUS
59864: ARRAY
59865: ST_TO_ADDR
59866: GO 59869
59868: POP
// temp_list2 = [ ] ;
59869: LD_ADDR_VAR 0 10
59873: PUSH
59874: EMPTY
59875: ST_TO_ADDR
// for i in temp_list do
59876: LD_ADDR_VAR 0 8
59880: PUSH
59881: LD_VAR 0 9
59885: PUSH
59886: FOR_IN
59887: IFFALSE 59939
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59889: LD_ADDR_VAR 0 10
59893: PUSH
59894: LD_VAR 0 10
59898: PUSH
59899: LD_VAR 0 8
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PUSH
59908: LD_VAR 0 2
59912: PLUS
59913: PUSH
59914: LD_VAR 0 8
59918: PUSH
59919: LD_INT 2
59921: ARRAY
59922: PUSH
59923: LD_VAR 0 3
59927: PLUS
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: ADD
59936: ST_TO_ADDR
59937: GO 59886
59939: POP
59940: POP
// result = temp_list2 ;
59941: LD_ADDR_VAR 0 7
59945: PUSH
59946: LD_VAR 0 10
59950: ST_TO_ADDR
// end ;
59951: LD_VAR 0 7
59955: RET
// export function EnemyInRange ( unit , dist ) ; begin
59956: LD_INT 0
59958: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59959: LD_ADDR_VAR 0 3
59963: PUSH
59964: LD_VAR 0 1
59968: PPUSH
59969: CALL_OW 255
59973: PPUSH
59974: LD_VAR 0 1
59978: PPUSH
59979: CALL_OW 250
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 251
59993: PPUSH
59994: LD_VAR 0 2
59998: PPUSH
59999: CALL 34060 0 4
60003: PUSH
60004: LD_INT 4
60006: ARRAY
60007: ST_TO_ADDR
// end ;
60008: LD_VAR 0 3
60012: RET
// export function PlayerSeeMe ( unit ) ; begin
60013: LD_INT 0
60015: PPUSH
// result := See ( your_side , unit ) ;
60016: LD_ADDR_VAR 0 2
60020: PUSH
60021: LD_OWVAR 2
60025: PPUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: CALL_OW 292
60035: ST_TO_ADDR
// end ;
60036: LD_VAR 0 2
60040: RET
// export function ReverseDir ( unit ) ; begin
60041: LD_INT 0
60043: PPUSH
// if not unit then
60044: LD_VAR 0 1
60048: NOT
60049: IFFALSE 60053
// exit ;
60051: GO 60076
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60053: LD_ADDR_VAR 0 2
60057: PUSH
60058: LD_VAR 0 1
60062: PPUSH
60063: CALL_OW 254
60067: PUSH
60068: LD_INT 3
60070: PLUS
60071: PUSH
60072: LD_INT 6
60074: MOD
60075: ST_TO_ADDR
// end ;
60076: LD_VAR 0 2
60080: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60081: LD_INT 0
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
// if not hexes then
60088: LD_VAR 0 2
60092: NOT
60093: IFFALSE 60097
// exit ;
60095: GO 60245
// dist := 9999 ;
60097: LD_ADDR_VAR 0 5
60101: PUSH
60102: LD_INT 9999
60104: ST_TO_ADDR
// for i = 1 to hexes do
60105: LD_ADDR_VAR 0 4
60109: PUSH
60110: DOUBLE
60111: LD_INT 1
60113: DEC
60114: ST_TO_ADDR
60115: LD_VAR 0 2
60119: PUSH
60120: FOR_TO
60121: IFFALSE 60233
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60123: LD_VAR 0 1
60127: PPUSH
60128: LD_VAR 0 2
60132: PUSH
60133: LD_VAR 0 4
60137: ARRAY
60138: PUSH
60139: LD_INT 1
60141: ARRAY
60142: PPUSH
60143: LD_VAR 0 2
60147: PUSH
60148: LD_VAR 0 4
60152: ARRAY
60153: PUSH
60154: LD_INT 2
60156: ARRAY
60157: PPUSH
60158: CALL_OW 297
60162: PUSH
60163: LD_VAR 0 5
60167: LESS
60168: IFFALSE 60231
// begin hex := hexes [ i ] ;
60170: LD_ADDR_VAR 0 7
60174: PUSH
60175: LD_VAR 0 2
60179: PUSH
60180: LD_VAR 0 4
60184: ARRAY
60185: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60186: LD_ADDR_VAR 0 5
60190: PUSH
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_VAR 0 2
60200: PUSH
60201: LD_VAR 0 4
60205: ARRAY
60206: PUSH
60207: LD_INT 1
60209: ARRAY
60210: PPUSH
60211: LD_VAR 0 2
60215: PUSH
60216: LD_VAR 0 4
60220: ARRAY
60221: PUSH
60222: LD_INT 2
60224: ARRAY
60225: PPUSH
60226: CALL_OW 297
60230: ST_TO_ADDR
// end ; end ;
60231: GO 60120
60233: POP
60234: POP
// result := hex ;
60235: LD_ADDR_VAR 0 3
60239: PUSH
60240: LD_VAR 0 7
60244: ST_TO_ADDR
// end ;
60245: LD_VAR 0 3
60249: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60250: LD_INT 0
60252: PPUSH
60253: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60254: LD_VAR 0 1
60258: NOT
60259: PUSH
60260: LD_VAR 0 1
60264: PUSH
60265: LD_INT 21
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 23
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PPUSH
60289: CALL_OW 69
60293: IN
60294: NOT
60295: OR
60296: IFFALSE 60300
// exit ;
60298: GO 60347
// for i = 1 to 3 do
60300: LD_ADDR_VAR 0 3
60304: PUSH
60305: DOUBLE
60306: LD_INT 1
60308: DEC
60309: ST_TO_ADDR
60310: LD_INT 3
60312: PUSH
60313: FOR_TO
60314: IFFALSE 60345
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60316: LD_VAR 0 1
60320: PPUSH
60321: CALL_OW 250
60325: PPUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL_OW 251
60335: PPUSH
60336: LD_INT 1
60338: PPUSH
60339: CALL_OW 453
60343: GO 60313
60345: POP
60346: POP
// end ;
60347: LD_VAR 0 2
60351: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60352: LD_INT 0
60354: PPUSH
60355: PPUSH
60356: PPUSH
60357: PPUSH
60358: PPUSH
60359: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60360: LD_VAR 0 1
60364: NOT
60365: PUSH
60366: LD_VAR 0 2
60370: NOT
60371: OR
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 314
60382: OR
60383: IFFALSE 60387
// exit ;
60385: GO 60828
// x := GetX ( enemy_unit ) ;
60387: LD_ADDR_VAR 0 7
60391: PUSH
60392: LD_VAR 0 2
60396: PPUSH
60397: CALL_OW 250
60401: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60402: LD_ADDR_VAR 0 8
60406: PUSH
60407: LD_VAR 0 2
60411: PPUSH
60412: CALL_OW 251
60416: ST_TO_ADDR
// if not x or not y then
60417: LD_VAR 0 7
60421: NOT
60422: PUSH
60423: LD_VAR 0 8
60427: NOT
60428: OR
60429: IFFALSE 60433
// exit ;
60431: GO 60828
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60433: LD_ADDR_VAR 0 6
60437: PUSH
60438: LD_VAR 0 7
60442: PPUSH
60443: LD_INT 0
60445: PPUSH
60446: LD_INT 4
60448: PPUSH
60449: CALL_OW 272
60453: PUSH
60454: LD_VAR 0 8
60458: PPUSH
60459: LD_INT 0
60461: PPUSH
60462: LD_INT 4
60464: PPUSH
60465: CALL_OW 273
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_VAR 0 7
60478: PPUSH
60479: LD_INT 1
60481: PPUSH
60482: LD_INT 4
60484: PPUSH
60485: CALL_OW 272
60489: PUSH
60490: LD_VAR 0 8
60494: PPUSH
60495: LD_INT 1
60497: PPUSH
60498: LD_INT 4
60500: PPUSH
60501: CALL_OW 273
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_VAR 0 7
60514: PPUSH
60515: LD_INT 2
60517: PPUSH
60518: LD_INT 4
60520: PPUSH
60521: CALL_OW 272
60525: PUSH
60526: LD_VAR 0 8
60530: PPUSH
60531: LD_INT 2
60533: PPUSH
60534: LD_INT 4
60536: PPUSH
60537: CALL_OW 273
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_VAR 0 7
60550: PPUSH
60551: LD_INT 3
60553: PPUSH
60554: LD_INT 4
60556: PPUSH
60557: CALL_OW 272
60561: PUSH
60562: LD_VAR 0 8
60566: PPUSH
60567: LD_INT 3
60569: PPUSH
60570: LD_INT 4
60572: PPUSH
60573: CALL_OW 273
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_VAR 0 7
60586: PPUSH
60587: LD_INT 4
60589: PPUSH
60590: LD_INT 4
60592: PPUSH
60593: CALL_OW 272
60597: PUSH
60598: LD_VAR 0 8
60602: PPUSH
60603: LD_INT 4
60605: PPUSH
60606: LD_INT 4
60608: PPUSH
60609: CALL_OW 273
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_VAR 0 7
60622: PPUSH
60623: LD_INT 5
60625: PPUSH
60626: LD_INT 4
60628: PPUSH
60629: CALL_OW 272
60633: PUSH
60634: LD_VAR 0 8
60638: PPUSH
60639: LD_INT 5
60641: PPUSH
60642: LD_INT 4
60644: PPUSH
60645: CALL_OW 273
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// for i = tmp downto 1 do
60662: LD_ADDR_VAR 0 4
60666: PUSH
60667: DOUBLE
60668: LD_VAR 0 6
60672: INC
60673: ST_TO_ADDR
60674: LD_INT 1
60676: PUSH
60677: FOR_DOWNTO
60678: IFFALSE 60779
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60680: LD_VAR 0 6
60684: PUSH
60685: LD_VAR 0 4
60689: ARRAY
60690: PUSH
60691: LD_INT 1
60693: ARRAY
60694: PPUSH
60695: LD_VAR 0 6
60699: PUSH
60700: LD_VAR 0 4
60704: ARRAY
60705: PUSH
60706: LD_INT 2
60708: ARRAY
60709: PPUSH
60710: CALL_OW 488
60714: NOT
60715: PUSH
60716: LD_VAR 0 6
60720: PUSH
60721: LD_VAR 0 4
60725: ARRAY
60726: PUSH
60727: LD_INT 1
60729: ARRAY
60730: PPUSH
60731: LD_VAR 0 6
60735: PUSH
60736: LD_VAR 0 4
60740: ARRAY
60741: PUSH
60742: LD_INT 2
60744: ARRAY
60745: PPUSH
60746: CALL_OW 428
60750: PUSH
60751: LD_INT 0
60753: NONEQUAL
60754: OR
60755: IFFALSE 60777
// tmp := Delete ( tmp , i ) ;
60757: LD_ADDR_VAR 0 6
60761: PUSH
60762: LD_VAR 0 6
60766: PPUSH
60767: LD_VAR 0 4
60771: PPUSH
60772: CALL_OW 3
60776: ST_TO_ADDR
60777: GO 60677
60779: POP
60780: POP
// j := GetClosestHex ( unit , tmp ) ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: LD_VAR 0 6
60795: PPUSH
60796: CALL 60081 0 2
60800: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60801: LD_VAR 0 1
60805: PPUSH
60806: LD_VAR 0 5
60810: PUSH
60811: LD_INT 1
60813: ARRAY
60814: PPUSH
60815: LD_VAR 0 5
60819: PUSH
60820: LD_INT 2
60822: ARRAY
60823: PPUSH
60824: CALL_OW 111
// end ;
60828: LD_VAR 0 3
60832: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60833: LD_INT 0
60835: PPUSH
60836: PPUSH
60837: PPUSH
// uc_side = 0 ;
60838: LD_ADDR_OWVAR 20
60842: PUSH
60843: LD_INT 0
60845: ST_TO_ADDR
// uc_nation = 0 ;
60846: LD_ADDR_OWVAR 21
60850: PUSH
60851: LD_INT 0
60853: ST_TO_ADDR
// InitHc_All ( ) ;
60854: CALL_OW 584
// InitVc ;
60858: CALL_OW 20
// if mastodonts then
60862: LD_VAR 0 6
60866: IFFALSE 60933
// for i = 1 to mastodonts do
60868: LD_ADDR_VAR 0 11
60872: PUSH
60873: DOUBLE
60874: LD_INT 1
60876: DEC
60877: ST_TO_ADDR
60878: LD_VAR 0 6
60882: PUSH
60883: FOR_TO
60884: IFFALSE 60931
// begin vc_chassis := 31 ;
60886: LD_ADDR_OWVAR 37
60890: PUSH
60891: LD_INT 31
60893: ST_TO_ADDR
// vc_control := control_rider ;
60894: LD_ADDR_OWVAR 38
60898: PUSH
60899: LD_INT 4
60901: ST_TO_ADDR
// animal := CreateVehicle ;
60902: LD_ADDR_VAR 0 12
60906: PUSH
60907: CALL_OW 45
60911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60912: LD_VAR 0 12
60916: PPUSH
60917: LD_VAR 0 8
60921: PPUSH
60922: LD_INT 0
60924: PPUSH
60925: CALL 63121 0 3
// end ;
60929: GO 60883
60931: POP
60932: POP
// if horses then
60933: LD_VAR 0 5
60937: IFFALSE 61004
// for i = 1 to horses do
60939: LD_ADDR_VAR 0 11
60943: PUSH
60944: DOUBLE
60945: LD_INT 1
60947: DEC
60948: ST_TO_ADDR
60949: LD_VAR 0 5
60953: PUSH
60954: FOR_TO
60955: IFFALSE 61002
// begin hc_class := 21 ;
60957: LD_ADDR_OWVAR 28
60961: PUSH
60962: LD_INT 21
60964: ST_TO_ADDR
// hc_gallery :=  ;
60965: LD_ADDR_OWVAR 33
60969: PUSH
60970: LD_STRING 
60972: ST_TO_ADDR
// animal := CreateHuman ;
60973: LD_ADDR_VAR 0 12
60977: PUSH
60978: CALL_OW 44
60982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60983: LD_VAR 0 12
60987: PPUSH
60988: LD_VAR 0 8
60992: PPUSH
60993: LD_INT 0
60995: PPUSH
60996: CALL 63121 0 3
// end ;
61000: GO 60954
61002: POP
61003: POP
// if birds then
61004: LD_VAR 0 1
61008: IFFALSE 61075
// for i = 1 to birds do
61010: LD_ADDR_VAR 0 11
61014: PUSH
61015: DOUBLE
61016: LD_INT 1
61018: DEC
61019: ST_TO_ADDR
61020: LD_VAR 0 1
61024: PUSH
61025: FOR_TO
61026: IFFALSE 61073
// begin hc_class = 18 ;
61028: LD_ADDR_OWVAR 28
61032: PUSH
61033: LD_INT 18
61035: ST_TO_ADDR
// hc_gallery =  ;
61036: LD_ADDR_OWVAR 33
61040: PUSH
61041: LD_STRING 
61043: ST_TO_ADDR
// animal := CreateHuman ;
61044: LD_ADDR_VAR 0 12
61048: PUSH
61049: CALL_OW 44
61053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61054: LD_VAR 0 12
61058: PPUSH
61059: LD_VAR 0 8
61063: PPUSH
61064: LD_INT 0
61066: PPUSH
61067: CALL 63121 0 3
// end ;
61071: GO 61025
61073: POP
61074: POP
// if tigers then
61075: LD_VAR 0 2
61079: IFFALSE 61163
// for i = 1 to tigers do
61081: LD_ADDR_VAR 0 11
61085: PUSH
61086: DOUBLE
61087: LD_INT 1
61089: DEC
61090: ST_TO_ADDR
61091: LD_VAR 0 2
61095: PUSH
61096: FOR_TO
61097: IFFALSE 61161
// begin hc_class = class_tiger ;
61099: LD_ADDR_OWVAR 28
61103: PUSH
61104: LD_INT 14
61106: ST_TO_ADDR
// hc_gallery =  ;
61107: LD_ADDR_OWVAR 33
61111: PUSH
61112: LD_STRING 
61114: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61115: LD_ADDR_OWVAR 35
61119: PUSH
61120: LD_INT 7
61122: NEG
61123: PPUSH
61124: LD_INT 7
61126: PPUSH
61127: CALL_OW 12
61131: ST_TO_ADDR
// animal := CreateHuman ;
61132: LD_ADDR_VAR 0 12
61136: PUSH
61137: CALL_OW 44
61141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61142: LD_VAR 0 12
61146: PPUSH
61147: LD_VAR 0 8
61151: PPUSH
61152: LD_INT 0
61154: PPUSH
61155: CALL 63121 0 3
// end ;
61159: GO 61096
61161: POP
61162: POP
// if apemans then
61163: LD_VAR 0 3
61167: IFFALSE 61290
// for i = 1 to apemans do
61169: LD_ADDR_VAR 0 11
61173: PUSH
61174: DOUBLE
61175: LD_INT 1
61177: DEC
61178: ST_TO_ADDR
61179: LD_VAR 0 3
61183: PUSH
61184: FOR_TO
61185: IFFALSE 61288
// begin hc_class = class_apeman ;
61187: LD_ADDR_OWVAR 28
61191: PUSH
61192: LD_INT 12
61194: ST_TO_ADDR
// hc_gallery =  ;
61195: LD_ADDR_OWVAR 33
61199: PUSH
61200: LD_STRING 
61202: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61203: LD_ADDR_OWVAR 35
61207: PUSH
61208: LD_INT 5
61210: NEG
61211: PPUSH
61212: LD_INT 5
61214: PPUSH
61215: CALL_OW 12
61219: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61220: LD_ADDR_OWVAR 31
61224: PUSH
61225: LD_INT 1
61227: PPUSH
61228: LD_INT 3
61230: PPUSH
61231: CALL_OW 12
61235: PUSH
61236: LD_INT 1
61238: PPUSH
61239: LD_INT 3
61241: PPUSH
61242: CALL_OW 12
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// animal := CreateHuman ;
61259: LD_ADDR_VAR 0 12
61263: PUSH
61264: CALL_OW 44
61268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61269: LD_VAR 0 12
61273: PPUSH
61274: LD_VAR 0 8
61278: PPUSH
61279: LD_INT 0
61281: PPUSH
61282: CALL 63121 0 3
// end ;
61286: GO 61184
61288: POP
61289: POP
// if enchidnas then
61290: LD_VAR 0 4
61294: IFFALSE 61361
// for i = 1 to enchidnas do
61296: LD_ADDR_VAR 0 11
61300: PUSH
61301: DOUBLE
61302: LD_INT 1
61304: DEC
61305: ST_TO_ADDR
61306: LD_VAR 0 4
61310: PUSH
61311: FOR_TO
61312: IFFALSE 61359
// begin hc_class = 13 ;
61314: LD_ADDR_OWVAR 28
61318: PUSH
61319: LD_INT 13
61321: ST_TO_ADDR
// hc_gallery =  ;
61322: LD_ADDR_OWVAR 33
61326: PUSH
61327: LD_STRING 
61329: ST_TO_ADDR
// animal := CreateHuman ;
61330: LD_ADDR_VAR 0 12
61334: PUSH
61335: CALL_OW 44
61339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61340: LD_VAR 0 12
61344: PPUSH
61345: LD_VAR 0 8
61349: PPUSH
61350: LD_INT 0
61352: PPUSH
61353: CALL 63121 0 3
// end ;
61357: GO 61311
61359: POP
61360: POP
// if fishes then
61361: LD_VAR 0 7
61365: IFFALSE 61432
// for i = 1 to fishes do
61367: LD_ADDR_VAR 0 11
61371: PUSH
61372: DOUBLE
61373: LD_INT 1
61375: DEC
61376: ST_TO_ADDR
61377: LD_VAR 0 7
61381: PUSH
61382: FOR_TO
61383: IFFALSE 61430
// begin hc_class = 20 ;
61385: LD_ADDR_OWVAR 28
61389: PUSH
61390: LD_INT 20
61392: ST_TO_ADDR
// hc_gallery =  ;
61393: LD_ADDR_OWVAR 33
61397: PUSH
61398: LD_STRING 
61400: ST_TO_ADDR
// animal := CreateHuman ;
61401: LD_ADDR_VAR 0 12
61405: PUSH
61406: CALL_OW 44
61410: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61411: LD_VAR 0 12
61415: PPUSH
61416: LD_VAR 0 9
61420: PPUSH
61421: LD_INT 0
61423: PPUSH
61424: CALL 63121 0 3
// end ;
61428: GO 61382
61430: POP
61431: POP
// end ;
61432: LD_VAR 0 10
61436: RET
// export function WantHeal ( sci , unit ) ; begin
61437: LD_INT 0
61439: PPUSH
// if GetTaskList ( sci ) > 0 then
61440: LD_VAR 0 1
61444: PPUSH
61445: CALL_OW 437
61449: PUSH
61450: LD_INT 0
61452: GREATER
61453: IFFALSE 61523
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 437
61464: PUSH
61465: LD_INT 1
61467: ARRAY
61468: PUSH
61469: LD_INT 1
61471: ARRAY
61472: PUSH
61473: LD_STRING l
61475: EQUAL
61476: PUSH
61477: LD_VAR 0 1
61481: PPUSH
61482: CALL_OW 437
61486: PUSH
61487: LD_INT 1
61489: ARRAY
61490: PUSH
61491: LD_INT 4
61493: ARRAY
61494: PUSH
61495: LD_VAR 0 2
61499: EQUAL
61500: AND
61501: IFFALSE 61513
// result := true else
61503: LD_ADDR_VAR 0 3
61507: PUSH
61508: LD_INT 1
61510: ST_TO_ADDR
61511: GO 61521
// result := false ;
61513: LD_ADDR_VAR 0 3
61517: PUSH
61518: LD_INT 0
61520: ST_TO_ADDR
// end else
61521: GO 61531
// result := false ;
61523: LD_ADDR_VAR 0 3
61527: PUSH
61528: LD_INT 0
61530: ST_TO_ADDR
// end ;
61531: LD_VAR 0 3
61535: RET
// export function HealTarget ( sci ) ; begin
61536: LD_INT 0
61538: PPUSH
// if not sci then
61539: LD_VAR 0 1
61543: NOT
61544: IFFALSE 61548
// exit ;
61546: GO 61613
// result := 0 ;
61548: LD_ADDR_VAR 0 2
61552: PUSH
61553: LD_INT 0
61555: ST_TO_ADDR
// if GetTaskList ( sci ) then
61556: LD_VAR 0 1
61560: PPUSH
61561: CALL_OW 437
61565: IFFALSE 61613
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61567: LD_VAR 0 1
61571: PPUSH
61572: CALL_OW 437
61576: PUSH
61577: LD_INT 1
61579: ARRAY
61580: PUSH
61581: LD_INT 1
61583: ARRAY
61584: PUSH
61585: LD_STRING l
61587: EQUAL
61588: IFFALSE 61613
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_VAR 0 1
61599: PPUSH
61600: CALL_OW 437
61604: PUSH
61605: LD_INT 1
61607: ARRAY
61608: PUSH
61609: LD_INT 4
61611: ARRAY
61612: ST_TO_ADDR
// end ;
61613: LD_VAR 0 2
61617: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61618: LD_INT 0
61620: PPUSH
61621: PPUSH
61622: PPUSH
61623: PPUSH
// if not base_units then
61624: LD_VAR 0 1
61628: NOT
61629: IFFALSE 61633
// exit ;
61631: GO 61720
// result := false ;
61633: LD_ADDR_VAR 0 2
61637: PUSH
61638: LD_INT 0
61640: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61641: LD_ADDR_VAR 0 5
61645: PUSH
61646: LD_VAR 0 1
61650: PPUSH
61651: LD_INT 21
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PPUSH
61661: CALL_OW 72
61665: ST_TO_ADDR
// if not tmp then
61666: LD_VAR 0 5
61670: NOT
61671: IFFALSE 61675
// exit ;
61673: GO 61720
// for i in tmp do
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 5
61684: PUSH
61685: FOR_IN
61686: IFFALSE 61718
// begin result := EnemyInRange ( i , 22 ) ;
61688: LD_ADDR_VAR 0 2
61692: PUSH
61693: LD_VAR 0 3
61697: PPUSH
61698: LD_INT 22
61700: PPUSH
61701: CALL 59956 0 2
61705: ST_TO_ADDR
// if result then
61706: LD_VAR 0 2
61710: IFFALSE 61716
// exit ;
61712: POP
61713: POP
61714: GO 61720
// end ;
61716: GO 61685
61718: POP
61719: POP
// end ;
61720: LD_VAR 0 2
61724: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61725: LD_INT 0
61727: PPUSH
61728: PPUSH
// if not units then
61729: LD_VAR 0 1
61733: NOT
61734: IFFALSE 61738
// exit ;
61736: GO 61808
// result := [ ] ;
61738: LD_ADDR_VAR 0 3
61742: PUSH
61743: EMPTY
61744: ST_TO_ADDR
// for i in units do
61745: LD_ADDR_VAR 0 4
61749: PUSH
61750: LD_VAR 0 1
61754: PUSH
61755: FOR_IN
61756: IFFALSE 61806
// if GetTag ( i ) = tag then
61758: LD_VAR 0 4
61762: PPUSH
61763: CALL_OW 110
61767: PUSH
61768: LD_VAR 0 2
61772: EQUAL
61773: IFFALSE 61804
// result := Insert ( result , result + 1 , i ) ;
61775: LD_ADDR_VAR 0 3
61779: PUSH
61780: LD_VAR 0 3
61784: PPUSH
61785: LD_VAR 0 3
61789: PUSH
61790: LD_INT 1
61792: PLUS
61793: PPUSH
61794: LD_VAR 0 4
61798: PPUSH
61799: CALL_OW 2
61803: ST_TO_ADDR
61804: GO 61755
61806: POP
61807: POP
// end ;
61808: LD_VAR 0 3
61812: RET
// export function IsDriver ( un ) ; begin
61813: LD_INT 0
61815: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61816: LD_ADDR_VAR 0 2
61820: PUSH
61821: LD_VAR 0 1
61825: PUSH
61826: LD_INT 55
61828: PUSH
61829: EMPTY
61830: LIST
61831: PPUSH
61832: CALL_OW 69
61836: IN
61837: ST_TO_ADDR
// end ;
61838: LD_VAR 0 2
61842: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
// list := [ ] ;
61847: LD_ADDR_VAR 0 5
61851: PUSH
61852: EMPTY
61853: ST_TO_ADDR
// case d of 0 :
61854: LD_VAR 0 3
61858: PUSH
61859: LD_INT 0
61861: DOUBLE
61862: EQUAL
61863: IFTRUE 61867
61865: GO 62000
61867: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61868: LD_ADDR_VAR 0 5
61872: PUSH
61873: LD_VAR 0 1
61877: PUSH
61878: LD_INT 4
61880: MINUS
61881: PUSH
61882: LD_VAR 0 2
61886: PUSH
61887: LD_INT 4
61889: MINUS
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_VAR 0 1
61903: PUSH
61904: LD_INT 3
61906: MINUS
61907: PUSH
61908: LD_VAR 0 2
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: LIST
61920: PUSH
61921: LD_VAR 0 1
61925: PUSH
61926: LD_INT 4
61928: PLUS
61929: PUSH
61930: LD_VAR 0 2
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: PUSH
61943: LD_VAR 0 1
61947: PUSH
61948: LD_INT 3
61950: PLUS
61951: PUSH
61952: LD_VAR 0 2
61956: PUSH
61957: LD_INT 3
61959: PLUS
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: PUSH
61969: LD_VAR 0 1
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: LD_INT 4
61981: PLUS
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// end ; 1 :
61998: GO 62698
62000: LD_INT 1
62002: DOUBLE
62003: EQUAL
62004: IFTRUE 62008
62006: GO 62141
62008: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62009: LD_ADDR_VAR 0 5
62013: PUSH
62014: LD_VAR 0 1
62018: PUSH
62019: LD_VAR 0 2
62023: PUSH
62024: LD_INT 4
62026: MINUS
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: PUSH
62036: LD_VAR 0 1
62040: PUSH
62041: LD_INT 3
62043: MINUS
62044: PUSH
62045: LD_VAR 0 2
62049: PUSH
62050: LD_INT 3
62052: MINUS
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: PUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_INT 4
62069: MINUS
62070: PUSH
62071: LD_VAR 0 2
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: PUSH
62084: LD_VAR 0 1
62088: PUSH
62089: LD_VAR 0 2
62093: PUSH
62094: LD_INT 3
62096: PLUS
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: LD_INT 4
62113: PLUS
62114: PUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_INT 4
62122: PLUS
62123: PUSH
62124: LD_INT 5
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: ST_TO_ADDR
// end ; 2 :
62139: GO 62698
62141: LD_INT 2
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62149
62147: GO 62278
62149: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62150: LD_ADDR_VAR 0 5
62154: PUSH
62155: LD_VAR 0 1
62159: PUSH
62160: LD_VAR 0 2
62164: PUSH
62165: LD_INT 3
62167: MINUS
62168: PUSH
62169: LD_INT 3
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: PUSH
62177: LD_VAR 0 1
62181: PUSH
62182: LD_INT 4
62184: PLUS
62185: PUSH
62186: LD_VAR 0 2
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: LIST
62198: PUSH
62199: LD_VAR 0 1
62203: PUSH
62204: LD_VAR 0 2
62208: PUSH
62209: LD_INT 4
62211: PLUS
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: LIST
62220: PUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_INT 3
62228: MINUS
62229: PUSH
62230: LD_VAR 0 2
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: PUSH
62243: LD_VAR 0 1
62247: PUSH
62248: LD_INT 4
62250: MINUS
62251: PUSH
62252: LD_VAR 0 2
62256: PUSH
62257: LD_INT 4
62259: MINUS
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: ST_TO_ADDR
// end ; 3 :
62276: GO 62698
62278: LD_INT 3
62280: DOUBLE
62281: EQUAL
62282: IFTRUE 62286
62284: GO 62419
62286: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62287: LD_ADDR_VAR 0 5
62291: PUSH
62292: LD_VAR 0 1
62296: PUSH
62297: LD_INT 3
62299: PLUS
62300: PUSH
62301: LD_VAR 0 2
62305: PUSH
62306: LD_INT 4
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: LIST
62313: PUSH
62314: LD_VAR 0 1
62318: PUSH
62319: LD_INT 4
62321: PLUS
62322: PUSH
62323: LD_VAR 0 2
62327: PUSH
62328: LD_INT 4
62330: PLUS
62331: PUSH
62332: LD_INT 5
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: PUSH
62340: LD_VAR 0 1
62344: PUSH
62345: LD_INT 4
62347: MINUS
62348: PUSH
62349: LD_VAR 0 2
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: PUSH
62362: LD_VAR 0 1
62366: PUSH
62367: LD_VAR 0 2
62371: PUSH
62372: LD_INT 4
62374: MINUS
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_INT 3
62391: MINUS
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 3
62400: MINUS
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: ST_TO_ADDR
// end ; 4 :
62417: GO 62698
62419: LD_INT 4
62421: DOUBLE
62422: EQUAL
62423: IFTRUE 62427
62425: GO 62560
62427: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62428: LD_ADDR_VAR 0 5
62432: PUSH
62433: LD_VAR 0 1
62437: PUSH
62438: LD_VAR 0 2
62442: PUSH
62443: LD_INT 4
62445: PLUS
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: PUSH
62455: LD_VAR 0 1
62459: PUSH
62460: LD_INT 3
62462: PLUS
62463: PUSH
62464: LD_VAR 0 2
62468: PUSH
62469: LD_INT 3
62471: PLUS
62472: PUSH
62473: LD_INT 5
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_VAR 0 1
62485: PUSH
62486: LD_INT 4
62488: PLUS
62489: PUSH
62490: LD_VAR 0 2
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_VAR 0 2
62512: PUSH
62513: LD_INT 3
62515: MINUS
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 4
62532: MINUS
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 4
62541: MINUS
62542: PUSH
62543: LD_INT 2
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// end ; 5 :
62558: GO 62698
62560: LD_INT 5
62562: DOUBLE
62563: EQUAL
62564: IFTRUE 62568
62566: GO 62697
62568: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62569: LD_ADDR_VAR 0 5
62573: PUSH
62574: LD_VAR 0 1
62578: PUSH
62579: LD_INT 4
62581: MINUS
62582: PUSH
62583: LD_VAR 0 2
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: LD_VAR 0 1
62600: PUSH
62601: LD_VAR 0 2
62605: PUSH
62606: LD_INT 4
62608: MINUS
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: LD_INT 4
62625: PLUS
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_INT 4
62634: PLUS
62635: PUSH
62636: LD_INT 5
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: PUSH
62644: LD_VAR 0 1
62648: PUSH
62649: LD_INT 3
62651: PLUS
62652: PUSH
62653: LD_VAR 0 2
62657: PUSH
62658: LD_INT 4
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: PUSH
62666: LD_VAR 0 1
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 3
62678: PLUS
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: ST_TO_ADDR
// end ; end ;
62695: GO 62698
62697: POP
// result := list ;
62698: LD_ADDR_VAR 0 4
62702: PUSH
62703: LD_VAR 0 5
62707: ST_TO_ADDR
// end ;
62708: LD_VAR 0 4
62712: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62713: LD_INT 0
62715: PPUSH
62716: PPUSH
62717: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62718: LD_VAR 0 1
62722: NOT
62723: PUSH
62724: LD_VAR 0 2
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 4
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: IN
62747: NOT
62748: OR
62749: IFFALSE 62753
// exit ;
62751: GO 62845
// tmp := [ ] ;
62753: LD_ADDR_VAR 0 5
62757: PUSH
62758: EMPTY
62759: ST_TO_ADDR
// for i in units do
62760: LD_ADDR_VAR 0 4
62764: PUSH
62765: LD_VAR 0 1
62769: PUSH
62770: FOR_IN
62771: IFFALSE 62814
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62773: LD_ADDR_VAR 0 5
62777: PUSH
62778: LD_VAR 0 5
62782: PPUSH
62783: LD_VAR 0 5
62787: PUSH
62788: LD_INT 1
62790: PLUS
62791: PPUSH
62792: LD_VAR 0 4
62796: PPUSH
62797: LD_VAR 0 2
62801: PPUSH
62802: CALL_OW 259
62806: PPUSH
62807: CALL_OW 2
62811: ST_TO_ADDR
62812: GO 62770
62814: POP
62815: POP
// if not tmp then
62816: LD_VAR 0 5
62820: NOT
62821: IFFALSE 62825
// exit ;
62823: GO 62845
// result := SortListByListDesc ( units , tmp ) ;
62825: LD_ADDR_VAR 0 3
62829: PUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: LD_VAR 0 5
62839: PPUSH
62840: CALL_OW 77
62844: ST_TO_ADDR
// end ;
62845: LD_VAR 0 3
62849: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62850: LD_INT 0
62852: PPUSH
62853: PPUSH
62854: PPUSH
// result := false ;
62855: LD_ADDR_VAR 0 3
62859: PUSH
62860: LD_INT 0
62862: ST_TO_ADDR
// x := GetX ( building ) ;
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 2
62872: PPUSH
62873: CALL_OW 250
62877: ST_TO_ADDR
// y := GetY ( building ) ;
62878: LD_ADDR_VAR 0 5
62882: PUSH
62883: LD_VAR 0 2
62887: PPUSH
62888: CALL_OW 251
62892: ST_TO_ADDR
// if not building or not x or not y then
62893: LD_VAR 0 2
62897: NOT
62898: PUSH
62899: LD_VAR 0 4
62903: NOT
62904: OR
62905: PUSH
62906: LD_VAR 0 5
62910: NOT
62911: OR
62912: IFFALSE 62916
// exit ;
62914: GO 63008
// if GetTaskList ( unit ) then
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL_OW 437
62925: IFFALSE 63008
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62927: LD_STRING e
62929: PUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: CALL_OW 437
62939: PUSH
62940: LD_INT 1
62942: ARRAY
62943: PUSH
62944: LD_INT 1
62946: ARRAY
62947: EQUAL
62948: PUSH
62949: LD_VAR 0 4
62953: PUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: CALL_OW 437
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: PUSH
62968: LD_INT 2
62970: ARRAY
62971: EQUAL
62972: AND
62973: PUSH
62974: LD_VAR 0 5
62978: PUSH
62979: LD_VAR 0 1
62983: PPUSH
62984: CALL_OW 437
62988: PUSH
62989: LD_INT 1
62991: ARRAY
62992: PUSH
62993: LD_INT 3
62995: ARRAY
62996: EQUAL
62997: AND
62998: IFFALSE 63008
// result := true end ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_INT 1
63007: ST_TO_ADDR
// end ;
63008: LD_VAR 0 3
63012: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63013: LD_INT 0
63015: PPUSH
// result := false ;
63016: LD_ADDR_VAR 0 4
63020: PUSH
63021: LD_INT 0
63023: ST_TO_ADDR
// if GetTaskList ( unit ) then
63024: LD_VAR 0 1
63028: PPUSH
63029: CALL_OW 437
63033: IFFALSE 63116
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63035: LD_STRING M
63037: PUSH
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 437
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_INT 1
63054: ARRAY
63055: EQUAL
63056: PUSH
63057: LD_VAR 0 2
63061: PUSH
63062: LD_VAR 0 1
63066: PPUSH
63067: CALL_OW 437
63071: PUSH
63072: LD_INT 1
63074: ARRAY
63075: PUSH
63076: LD_INT 2
63078: ARRAY
63079: EQUAL
63080: AND
63081: PUSH
63082: LD_VAR 0 3
63086: PUSH
63087: LD_VAR 0 1
63091: PPUSH
63092: CALL_OW 437
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PUSH
63101: LD_INT 3
63103: ARRAY
63104: EQUAL
63105: AND
63106: IFFALSE 63116
// result := true ;
63108: LD_ADDR_VAR 0 4
63112: PUSH
63113: LD_INT 1
63115: ST_TO_ADDR
// end ; end ;
63116: LD_VAR 0 4
63120: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63121: LD_INT 0
63123: PPUSH
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not unit or not area then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 2
63137: NOT
63138: OR
63139: IFFALSE 63143
// exit ;
63141: GO 63307
// tmp := AreaToList ( area , i ) ;
63143: LD_ADDR_VAR 0 6
63147: PUSH
63148: LD_VAR 0 2
63152: PPUSH
63153: LD_VAR 0 5
63157: PPUSH
63158: CALL_OW 517
63162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63163: LD_ADDR_VAR 0 5
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_VAR 0 6
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PUSH
63182: FOR_TO
63183: IFFALSE 63305
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63185: LD_ADDR_VAR 0 7
63189: PUSH
63190: LD_VAR 0 6
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PUSH
63199: LD_VAR 0 5
63203: ARRAY
63204: PUSH
63205: LD_VAR 0 6
63209: PUSH
63210: LD_INT 2
63212: ARRAY
63213: PUSH
63214: LD_VAR 0 5
63218: ARRAY
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63224: LD_VAR 0 7
63228: PUSH
63229: LD_INT 1
63231: ARRAY
63232: PPUSH
63233: LD_VAR 0 7
63237: PUSH
63238: LD_INT 2
63240: ARRAY
63241: PPUSH
63242: CALL_OW 428
63246: PUSH
63247: LD_INT 0
63249: EQUAL
63250: IFFALSE 63303
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63252: LD_VAR 0 1
63256: PPUSH
63257: LD_VAR 0 7
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PPUSH
63266: LD_VAR 0 7
63270: PUSH
63271: LD_INT 2
63273: ARRAY
63274: PPUSH
63275: LD_VAR 0 3
63279: PPUSH
63280: CALL_OW 48
// result := IsPlaced ( unit ) ;
63284: LD_ADDR_VAR 0 4
63288: PUSH
63289: LD_VAR 0 1
63293: PPUSH
63294: CALL_OW 305
63298: ST_TO_ADDR
// exit ;
63299: POP
63300: POP
63301: GO 63307
// end ; end ;
63303: GO 63182
63305: POP
63306: POP
// end ;
63307: LD_VAR 0 4
63311: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63312: LD_INT 0
63314: PPUSH
63315: PPUSH
63316: PPUSH
// if not side or side > 8 then
63317: LD_VAR 0 1
63321: NOT
63322: PUSH
63323: LD_VAR 0 1
63327: PUSH
63328: LD_INT 8
63330: GREATER
63331: OR
63332: IFFALSE 63336
// exit ;
63334: GO 63523
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63336: LD_ADDR_VAR 0 4
63340: PUSH
63341: LD_INT 22
63343: PUSH
63344: LD_VAR 0 1
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 21
63355: PUSH
63356: LD_INT 3
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PPUSH
63367: CALL_OW 69
63371: ST_TO_ADDR
// if not tmp then
63372: LD_VAR 0 4
63376: NOT
63377: IFFALSE 63381
// exit ;
63379: GO 63523
// enable_addtolog := true ;
63381: LD_ADDR_OWVAR 81
63385: PUSH
63386: LD_INT 1
63388: ST_TO_ADDR
// AddToLog ( [ ) ;
63389: LD_STRING [
63391: PPUSH
63392: CALL_OW 561
// for i in tmp do
63396: LD_ADDR_VAR 0 3
63400: PUSH
63401: LD_VAR 0 4
63405: PUSH
63406: FOR_IN
63407: IFFALSE 63514
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63409: LD_STRING [
63411: PUSH
63412: LD_VAR 0 3
63416: PPUSH
63417: CALL_OW 266
63421: STR
63422: PUSH
63423: LD_STRING , 
63425: STR
63426: PUSH
63427: LD_VAR 0 3
63431: PPUSH
63432: CALL_OW 250
63436: STR
63437: PUSH
63438: LD_STRING , 
63440: STR
63441: PUSH
63442: LD_VAR 0 3
63446: PPUSH
63447: CALL_OW 251
63451: STR
63452: PUSH
63453: LD_STRING , 
63455: STR
63456: PUSH
63457: LD_VAR 0 3
63461: PPUSH
63462: CALL_OW 254
63466: STR
63467: PUSH
63468: LD_STRING , 
63470: STR
63471: PUSH
63472: LD_VAR 0 3
63476: PPUSH
63477: LD_INT 1
63479: PPUSH
63480: CALL_OW 268
63484: STR
63485: PUSH
63486: LD_STRING , 
63488: STR
63489: PUSH
63490: LD_VAR 0 3
63494: PPUSH
63495: LD_INT 2
63497: PPUSH
63498: CALL_OW 268
63502: STR
63503: PUSH
63504: LD_STRING ],
63506: STR
63507: PPUSH
63508: CALL_OW 561
// end ;
63512: GO 63406
63514: POP
63515: POP
// AddToLog ( ]; ) ;
63516: LD_STRING ];
63518: PPUSH
63519: CALL_OW 561
// end ;
63523: LD_VAR 0 2
63527: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63528: LD_INT 0
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
// if not area or not rate or not max then
63535: LD_VAR 0 1
63539: NOT
63540: PUSH
63541: LD_VAR 0 2
63545: NOT
63546: OR
63547: PUSH
63548: LD_VAR 0 4
63552: NOT
63553: OR
63554: IFFALSE 63558
// exit ;
63556: GO 63750
// while 1 do
63558: LD_INT 1
63560: IFFALSE 63750
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63562: LD_ADDR_VAR 0 9
63566: PUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: LD_INT 1
63574: PPUSH
63575: CALL_OW 287
63579: PUSH
63580: LD_INT 10
63582: MUL
63583: ST_TO_ADDR
// r := rate / 10 ;
63584: LD_ADDR_VAR 0 7
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 10
63596: DIVREAL
63597: ST_TO_ADDR
// time := 1 1$00 ;
63598: LD_ADDR_VAR 0 8
63602: PUSH
63603: LD_INT 2100
63605: ST_TO_ADDR
// if amount < min then
63606: LD_VAR 0 9
63610: PUSH
63611: LD_VAR 0 3
63615: LESS
63616: IFFALSE 63634
// r := r * 2 else
63618: LD_ADDR_VAR 0 7
63622: PUSH
63623: LD_VAR 0 7
63627: PUSH
63628: LD_INT 2
63630: MUL
63631: ST_TO_ADDR
63632: GO 63660
// if amount > max then
63634: LD_VAR 0 9
63638: PUSH
63639: LD_VAR 0 4
63643: GREATER
63644: IFFALSE 63660
// r := r / 2 ;
63646: LD_ADDR_VAR 0 7
63650: PUSH
63651: LD_VAR 0 7
63655: PUSH
63656: LD_INT 2
63658: DIVREAL
63659: ST_TO_ADDR
// time := time / r ;
63660: LD_ADDR_VAR 0 8
63664: PUSH
63665: LD_VAR 0 8
63669: PUSH
63670: LD_VAR 0 7
63674: DIVREAL
63675: ST_TO_ADDR
// if time < 0 then
63676: LD_VAR 0 8
63680: PUSH
63681: LD_INT 0
63683: LESS
63684: IFFALSE 63701
// time := time * - 1 ;
63686: LD_ADDR_VAR 0 8
63690: PUSH
63691: LD_VAR 0 8
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: MUL
63700: ST_TO_ADDR
// wait ( time ) ;
63701: LD_VAR 0 8
63705: PPUSH
63706: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63710: LD_INT 35
63712: PPUSH
63713: LD_INT 875
63715: PPUSH
63716: CALL_OW 12
63720: PPUSH
63721: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63725: LD_INT 1
63727: PPUSH
63728: LD_INT 5
63730: PPUSH
63731: CALL_OW 12
63735: PPUSH
63736: LD_VAR 0 1
63740: PPUSH
63741: LD_INT 1
63743: PPUSH
63744: CALL_OW 55
// end ;
63748: GO 63558
// end ;
63750: LD_VAR 0 5
63754: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63755: LD_INT 0
63757: PPUSH
63758: PPUSH
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
63763: PPUSH
63764: PPUSH
// if not turrets or not factories then
63765: LD_VAR 0 1
63769: NOT
63770: PUSH
63771: LD_VAR 0 2
63775: NOT
63776: OR
63777: IFFALSE 63781
// exit ;
63779: GO 64088
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63781: LD_ADDR_VAR 0 10
63785: PUSH
63786: LD_INT 5
63788: PUSH
63789: LD_INT 6
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 4
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: LD_INT 5
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 24
63823: PUSH
63824: LD_INT 25
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 23
63833: PUSH
63834: LD_INT 27
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 42
63847: PUSH
63848: LD_INT 43
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 44
63857: PUSH
63858: LD_INT 46
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 45
63867: PUSH
63868: LD_INT 47
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// result := [ ] ;
63885: LD_ADDR_VAR 0 3
63889: PUSH
63890: EMPTY
63891: ST_TO_ADDR
// for i in turrets do
63892: LD_ADDR_VAR 0 4
63896: PUSH
63897: LD_VAR 0 1
63901: PUSH
63902: FOR_IN
63903: IFFALSE 64086
// begin nat := GetNation ( i ) ;
63905: LD_ADDR_VAR 0 7
63909: PUSH
63910: LD_VAR 0 4
63914: PPUSH
63915: CALL_OW 248
63919: ST_TO_ADDR
// weapon := 0 ;
63920: LD_ADDR_VAR 0 8
63924: PUSH
63925: LD_INT 0
63927: ST_TO_ADDR
// if not nat then
63928: LD_VAR 0 7
63932: NOT
63933: IFFALSE 63937
// continue ;
63935: GO 63902
// for j in list [ nat ] do
63937: LD_ADDR_VAR 0 5
63941: PUSH
63942: LD_VAR 0 10
63946: PUSH
63947: LD_VAR 0 7
63951: ARRAY
63952: PUSH
63953: FOR_IN
63954: IFFALSE 63995
// if GetBWeapon ( i ) = j [ 1 ] then
63956: LD_VAR 0 4
63960: PPUSH
63961: CALL_OW 269
63965: PUSH
63966: LD_VAR 0 5
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: EQUAL
63975: IFFALSE 63993
// begin weapon := j [ 2 ] ;
63977: LD_ADDR_VAR 0 8
63981: PUSH
63982: LD_VAR 0 5
63986: PUSH
63987: LD_INT 2
63989: ARRAY
63990: ST_TO_ADDR
// break ;
63991: GO 63995
// end ;
63993: GO 63953
63995: POP
63996: POP
// if not weapon then
63997: LD_VAR 0 8
64001: NOT
64002: IFFALSE 64006
// continue ;
64004: GO 63902
// for k in factories do
64006: LD_ADDR_VAR 0 6
64010: PUSH
64011: LD_VAR 0 2
64015: PUSH
64016: FOR_IN
64017: IFFALSE 64082
// begin weapons := AvailableWeaponList ( k ) ;
64019: LD_ADDR_VAR 0 9
64023: PUSH
64024: LD_VAR 0 6
64028: PPUSH
64029: CALL_OW 478
64033: ST_TO_ADDR
// if not weapons then
64034: LD_VAR 0 9
64038: NOT
64039: IFFALSE 64043
// continue ;
64041: GO 64016
// if weapon in weapons then
64043: LD_VAR 0 8
64047: PUSH
64048: LD_VAR 0 9
64052: IN
64053: IFFALSE 64080
// begin result := [ i , weapon ] ;
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: LD_VAR 0 4
64064: PUSH
64065: LD_VAR 0 8
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// exit ;
64074: POP
64075: POP
64076: POP
64077: POP
64078: GO 64088
// end ; end ;
64080: GO 64016
64082: POP
64083: POP
// end ;
64084: GO 63902
64086: POP
64087: POP
// end ;
64088: LD_VAR 0 3
64092: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64093: LD_INT 0
64095: PPUSH
// if not side or side > 8 then
64096: LD_VAR 0 3
64100: NOT
64101: PUSH
64102: LD_VAR 0 3
64106: PUSH
64107: LD_INT 8
64109: GREATER
64110: OR
64111: IFFALSE 64115
// exit ;
64113: GO 64174
// if not range then
64115: LD_VAR 0 4
64119: NOT
64120: IFFALSE 64131
// range := - 12 ;
64122: LD_ADDR_VAR 0 4
64126: PUSH
64127: LD_INT 12
64129: NEG
64130: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 2
64140: PPUSH
64141: LD_VAR 0 3
64145: PPUSH
64146: LD_VAR 0 4
64150: PPUSH
64151: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64155: LD_VAR 0 1
64159: PPUSH
64160: LD_VAR 0 2
64164: PPUSH
64165: LD_VAR 0 3
64169: PPUSH
64170: CALL_OW 331
// end ;
64174: LD_VAR 0 5
64178: RET
// export function Video ( mode ) ; begin
64179: LD_INT 0
64181: PPUSH
// ingame_video = mode ;
64182: LD_ADDR_OWVAR 52
64186: PUSH
64187: LD_VAR 0 1
64191: ST_TO_ADDR
// interface_hidden = mode ;
64192: LD_ADDR_OWVAR 54
64196: PUSH
64197: LD_VAR 0 1
64201: ST_TO_ADDR
// end ;
64202: LD_VAR 0 2
64206: RET
// export function Join ( array , element ) ; begin
64207: LD_INT 0
64209: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64210: LD_ADDR_VAR 0 3
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: LD_VAR 0 1
64224: PUSH
64225: LD_INT 1
64227: PLUS
64228: PPUSH
64229: LD_VAR 0 2
64233: PPUSH
64234: CALL_OW 1
64238: ST_TO_ADDR
// end ;
64239: LD_VAR 0 3
64243: RET
// export function JoinUnion ( array , element ) ; begin
64244: LD_INT 0
64246: PPUSH
// result := array union element ;
64247: LD_ADDR_VAR 0 3
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: LD_VAR 0 2
64261: UNION
64262: ST_TO_ADDR
// end ;
64263: LD_VAR 0 3
64267: RET
// export function GetBehemoths ( side ) ; begin
64268: LD_INT 0
64270: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64271: LD_ADDR_VAR 0 2
64275: PUSH
64276: LD_INT 22
64278: PUSH
64279: LD_VAR 0 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 31
64290: PUSH
64291: LD_INT 25
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PPUSH
64302: CALL_OW 69
64306: ST_TO_ADDR
// end ;
64307: LD_VAR 0 2
64311: RET
// export function Shuffle ( array ) ; var i , index ; begin
64312: LD_INT 0
64314: PPUSH
64315: PPUSH
64316: PPUSH
// result := [ ] ;
64317: LD_ADDR_VAR 0 2
64321: PUSH
64322: EMPTY
64323: ST_TO_ADDR
// if not array then
64324: LD_VAR 0 1
64328: NOT
64329: IFFALSE 64333
// exit ;
64331: GO 64432
// Randomize ;
64333: CALL_OW 10
// for i = array downto 1 do
64337: LD_ADDR_VAR 0 3
64341: PUSH
64342: DOUBLE
64343: LD_VAR 0 1
64347: INC
64348: ST_TO_ADDR
64349: LD_INT 1
64351: PUSH
64352: FOR_DOWNTO
64353: IFFALSE 64430
// begin index := rand ( 1 , array ) ;
64355: LD_ADDR_VAR 0 4
64359: PUSH
64360: LD_INT 1
64362: PPUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 12
64372: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64373: LD_ADDR_VAR 0 2
64377: PUSH
64378: LD_VAR 0 2
64382: PPUSH
64383: LD_VAR 0 2
64387: PUSH
64388: LD_INT 1
64390: PLUS
64391: PPUSH
64392: LD_VAR 0 1
64396: PUSH
64397: LD_VAR 0 4
64401: ARRAY
64402: PPUSH
64403: CALL_OW 2
64407: ST_TO_ADDR
// array := Delete ( array , index ) ;
64408: LD_ADDR_VAR 0 1
64412: PUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: LD_VAR 0 4
64422: PPUSH
64423: CALL_OW 3
64427: ST_TO_ADDR
// end ;
64428: GO 64352
64430: POP
64431: POP
// end ;
64432: LD_VAR 0 2
64436: RET
// export function GetBaseMaterials ( base ) ; begin
64437: LD_INT 0
64439: PPUSH
// result := [ 0 , 0 , 0 ] ;
64440: LD_ADDR_VAR 0 2
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// if not base then
64459: LD_VAR 0 1
64463: NOT
64464: IFFALSE 64468
// exit ;
64466: GO 64517
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64468: LD_ADDR_VAR 0 2
64472: PUSH
64473: LD_VAR 0 1
64477: PPUSH
64478: LD_INT 1
64480: PPUSH
64481: CALL_OW 275
64485: PUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: LD_INT 2
64493: PPUSH
64494: CALL_OW 275
64498: PUSH
64499: LD_VAR 0 1
64503: PPUSH
64504: LD_INT 3
64506: PPUSH
64507: CALL_OW 275
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// end ;
64517: LD_VAR 0 2
64521: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64522: LD_INT 0
64524: PPUSH
64525: PPUSH
// result := array ;
64526: LD_ADDR_VAR 0 3
64530: PUSH
64531: LD_VAR 0 1
64535: ST_TO_ADDR
// if size > 0 then
64536: LD_VAR 0 2
64540: PUSH
64541: LD_INT 0
64543: GREATER
64544: IFFALSE 64590
// for i := array downto size do
64546: LD_ADDR_VAR 0 4
64550: PUSH
64551: DOUBLE
64552: LD_VAR 0 1
64556: INC
64557: ST_TO_ADDR
64558: LD_VAR 0 2
64562: PUSH
64563: FOR_DOWNTO
64564: IFFALSE 64588
// result := Delete ( result , result ) ;
64566: LD_ADDR_VAR 0 3
64570: PUSH
64571: LD_VAR 0 3
64575: PPUSH
64576: LD_VAR 0 3
64580: PPUSH
64581: CALL_OW 3
64585: ST_TO_ADDR
64586: GO 64563
64588: POP
64589: POP
// end ;
64590: LD_VAR 0 3
64594: RET
// export function ComExit ( unit ) ; var tmp ; begin
64595: LD_INT 0
64597: PPUSH
64598: PPUSH
// if not IsInUnit ( unit ) then
64599: LD_VAR 0 1
64603: PPUSH
64604: CALL_OW 310
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 64673
// tmp := IsInUnit ( unit ) ;
64613: LD_ADDR_VAR 0 3
64617: PUSH
64618: LD_VAR 0 1
64622: PPUSH
64623: CALL_OW 310
64627: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64628: LD_VAR 0 3
64632: PPUSH
64633: CALL_OW 247
64637: PUSH
64638: LD_INT 2
64640: EQUAL
64641: IFFALSE 64654
// ComExitVehicle ( unit ) else
64643: LD_VAR 0 1
64647: PPUSH
64648: CALL_OW 121
64652: GO 64663
// ComExitBuilding ( unit ) ;
64654: LD_VAR 0 1
64658: PPUSH
64659: CALL_OW 122
// result := tmp ;
64663: LD_ADDR_VAR 0 2
64667: PUSH
64668: LD_VAR 0 3
64672: ST_TO_ADDR
// end ;
64673: LD_VAR 0 2
64677: RET
// export function ResetHc ; begin
64678: LD_INT 0
64680: PPUSH
// InitHc ;
64681: CALL_OW 19
// hc_importance := 0 ;
64685: LD_ADDR_OWVAR 32
64689: PUSH
64690: LD_INT 0
64692: ST_TO_ADDR
// end ;
64693: LD_VAR 0 1
64697: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64698: LD_INT 0
64700: PPUSH
64701: PPUSH
64702: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64703: LD_ADDR_VAR 0 6
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_VAR 0 3
64717: PLUS
64718: PUSH
64719: LD_INT 2
64721: DIV
64722: ST_TO_ADDR
// if _x < 0 then
64723: LD_VAR 0 6
64727: PUSH
64728: LD_INT 0
64730: LESS
64731: IFFALSE 64748
// _x := _x * - 1 ;
64733: LD_ADDR_VAR 0 6
64737: PUSH
64738: LD_VAR 0 6
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: MUL
64747: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64748: LD_ADDR_VAR 0 7
64752: PUSH
64753: LD_VAR 0 2
64757: PUSH
64758: LD_VAR 0 4
64762: PLUS
64763: PUSH
64764: LD_INT 2
64766: DIV
64767: ST_TO_ADDR
// if _y < 0 then
64768: LD_VAR 0 7
64772: PUSH
64773: LD_INT 0
64775: LESS
64776: IFFALSE 64793
// _y := _y * - 1 ;
64778: LD_ADDR_VAR 0 7
64782: PUSH
64783: LD_VAR 0 7
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: MUL
64792: ST_TO_ADDR
// result := [ _x , _y ] ;
64793: LD_ADDR_VAR 0 5
64797: PUSH
64798: LD_VAR 0 6
64802: PUSH
64803: LD_VAR 0 7
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: ST_TO_ADDR
// end ;
64812: LD_VAR 0 5
64816: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64817: LD_INT 0
64819: PPUSH
64820: PPUSH
64821: PPUSH
64822: PPUSH
// task := GetTaskList ( unit ) ;
64823: LD_ADDR_VAR 0 7
64827: PUSH
64828: LD_VAR 0 1
64832: PPUSH
64833: CALL_OW 437
64837: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64838: LD_VAR 0 7
64842: NOT
64843: PUSH
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_VAR 0 2
64853: PPUSH
64854: CALL_OW 308
64858: NOT
64859: AND
64860: IFFALSE 64864
// exit ;
64862: GO 64982
// if IsInArea ( unit , area ) then
64864: LD_VAR 0 1
64868: PPUSH
64869: LD_VAR 0 2
64873: PPUSH
64874: CALL_OW 308
64878: IFFALSE 64896
// begin ComMoveToArea ( unit , goAway ) ;
64880: LD_VAR 0 1
64884: PPUSH
64885: LD_VAR 0 3
64889: PPUSH
64890: CALL_OW 113
// exit ;
64894: GO 64982
// end ; if task [ 1 ] [ 1 ] <> M then
64896: LD_VAR 0 7
64900: PUSH
64901: LD_INT 1
64903: ARRAY
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_STRING M
64911: NONEQUAL
64912: IFFALSE 64916
// exit ;
64914: GO 64982
// x := task [ 1 ] [ 2 ] ;
64916: LD_ADDR_VAR 0 5
64920: PUSH
64921: LD_VAR 0 7
64925: PUSH
64926: LD_INT 1
64928: ARRAY
64929: PUSH
64930: LD_INT 2
64932: ARRAY
64933: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64934: LD_ADDR_VAR 0 6
64938: PUSH
64939: LD_VAR 0 7
64943: PUSH
64944: LD_INT 1
64946: ARRAY
64947: PUSH
64948: LD_INT 3
64950: ARRAY
64951: ST_TO_ADDR
// if InArea ( x , y , area ) then
64952: LD_VAR 0 5
64956: PPUSH
64957: LD_VAR 0 6
64961: PPUSH
64962: LD_VAR 0 2
64966: PPUSH
64967: CALL_OW 309
64971: IFFALSE 64982
// ComStop ( unit ) ;
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 141
// end ;
64982: LD_VAR 0 4
64986: RET
// export function Abs ( value ) ; begin
64987: LD_INT 0
64989: PPUSH
// result := value ;
64990: LD_ADDR_VAR 0 2
64994: PUSH
64995: LD_VAR 0 1
64999: ST_TO_ADDR
// if value < 0 then
65000: LD_VAR 0 1
65004: PUSH
65005: LD_INT 0
65007: LESS
65008: IFFALSE 65025
// result := value * - 1 ;
65010: LD_ADDR_VAR 0 2
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: MUL
65024: ST_TO_ADDR
// end ;
65025: LD_VAR 0 2
65029: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65030: LD_INT 0
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
// if not unit or not building then
65040: LD_VAR 0 1
65044: NOT
65045: PUSH
65046: LD_VAR 0 2
65050: NOT
65051: OR
65052: IFFALSE 65056
// exit ;
65054: GO 65282
// x := GetX ( building ) ;
65056: LD_ADDR_VAR 0 4
65060: PUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: CALL_OW 250
65070: ST_TO_ADDR
// y := GetY ( building ) ;
65071: LD_ADDR_VAR 0 6
65075: PUSH
65076: LD_VAR 0 2
65080: PPUSH
65081: CALL_OW 251
65085: ST_TO_ADDR
// d := GetDir ( building ) ;
65086: LD_ADDR_VAR 0 8
65090: PUSH
65091: LD_VAR 0 2
65095: PPUSH
65096: CALL_OW 254
65100: ST_TO_ADDR
// r := 4 ;
65101: LD_ADDR_VAR 0 9
65105: PUSH
65106: LD_INT 4
65108: ST_TO_ADDR
// for i := 1 to 5 do
65109: LD_ADDR_VAR 0 10
65113: PUSH
65114: DOUBLE
65115: LD_INT 1
65117: DEC
65118: ST_TO_ADDR
65119: LD_INT 5
65121: PUSH
65122: FOR_TO
65123: IFFALSE 65280
// begin _x := ShiftX ( x , d , r + i ) ;
65125: LD_ADDR_VAR 0 5
65129: PUSH
65130: LD_VAR 0 4
65134: PPUSH
65135: LD_VAR 0 8
65139: PPUSH
65140: LD_VAR 0 9
65144: PUSH
65145: LD_VAR 0 10
65149: PLUS
65150: PPUSH
65151: CALL_OW 272
65155: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65156: LD_ADDR_VAR 0 7
65160: PUSH
65161: LD_VAR 0 6
65165: PPUSH
65166: LD_VAR 0 8
65170: PPUSH
65171: LD_VAR 0 9
65175: PUSH
65176: LD_VAR 0 10
65180: PLUS
65181: PPUSH
65182: CALL_OW 273
65186: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65187: LD_VAR 0 5
65191: PPUSH
65192: LD_VAR 0 7
65196: PPUSH
65197: CALL_OW 488
65201: PUSH
65202: LD_VAR 0 5
65206: PPUSH
65207: LD_VAR 0 7
65211: PPUSH
65212: CALL_OW 428
65216: PPUSH
65217: CALL_OW 247
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 2
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: IN
65232: NOT
65233: AND
65234: IFFALSE 65278
// begin ComMoveXY ( unit , _x , _y ) ;
65236: LD_VAR 0 1
65240: PPUSH
65241: LD_VAR 0 5
65245: PPUSH
65246: LD_VAR 0 7
65250: PPUSH
65251: CALL_OW 111
// result := [ _x , _y ] ;
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: LD_VAR 0 5
65264: PUSH
65265: LD_VAR 0 7
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: ST_TO_ADDR
// exit ;
65274: POP
65275: POP
65276: GO 65282
// end ; end ;
65278: GO 65122
65280: POP
65281: POP
// end ;
65282: LD_VAR 0 3
65286: RET
