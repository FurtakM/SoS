// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9941 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9316 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9761 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38419 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 70316 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10309 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10187 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63242 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10285 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10293 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 65319 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9231
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9221
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: IFFALSE 8969
// exit ;
8967: GO 9231
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_EXP 30
8978: PPUSH
8979: CALL_OW 250
8983: PPUSH
8984: LD_EXP 30
8988: PPUSH
8989: CALL_OW 251
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_VAR 0 4
9003: PPUSH
9004: CALL_OW 298
9008: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9009: LD_ADDR_VAR 0 10
9013: PUSH
9014: LD_VAR 0 9
9018: PPUSH
9019: CALL 8039 0 1
9023: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9024: LD_VAR 0 10
9028: PUSH
9029: LD_OWVAR 2
9033: PPUSH
9034: CALL 5639 0 1
9038: GREATER
9039: IFFALSE 9053
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9041: LD_STRING ArtFrogJumpCost
9043: PPUSH
9044: LD_INT 2
9046: PPUSH
9047: CALL_OW 338
// exit ;
9051: GO 9231
// end ; SetSibResources ( your_side , cost ) ;
9053: LD_OWVAR 2
9057: PPUSH
9058: LD_VAR 0 10
9062: PPUSH
9063: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_VAR 0 4
9076: PPUSH
9077: LD_INT 6
9079: PPUSH
9080: LD_INT 5
9082: NEG
9083: PPUSH
9084: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9088: LD_VAR 0 3
9092: PPUSH
9093: LD_VAR 0 4
9097: PPUSH
9098: LD_INT 6
9100: PPUSH
9101: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9105: LD_EXP 30
9109: PPUSH
9110: LD_VAR 0 3
9114: PPUSH
9115: LD_VAR 0 4
9119: PPUSH
9120: LD_INT 0
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9130: LD_VAR 0 3
9134: PPUSH
9135: LD_VAR 0 4
9139: PPUSH
9140: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9144: LD_ADDR_EXP 30
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// player_artifact_researched := false ;
9152: LD_ADDR_EXP 22
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9160: LD_OWVAR 2
9164: PPUSH
9165: LD_EXP 20
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_VAR 0 7
9177: PPUSH
9178: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9182: LD_OWVAR 2
9186: PPUSH
9187: LD_EXP 21
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: LD_VAR 0 7
9199: PPUSH
9200: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9204: LD_EXP 26
9208: PPUSH
9209: CALL_OW 67
// player_artifact_researched := true ;
9213: LD_ADDR_EXP 22
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// end ; if debug then
9221: LD_EXP 6
9225: IFFALSE 9231
// DebugArtifact ;
9227: CALL 7803 0 0
// end ;
9231: PPOPN 10
9233: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 255
9243: PUSH
9244: LD_OWVAR 2
9248: EQUAL
9249: IFFALSE 9288
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9251: LD_OWVAR 2
9255: PPUSH
9256: LD_EXP 25
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 468
// player_artifact_ready := true ;
9273: LD_ADDR_EXP 29
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9281: LD_STRING ArtFrogJump
9283: PPUSH
9284: CALL_OW 339
// end ; end ;
9288: PPOPN 1
9290: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9291: LD_OWVAR 2
9295: PPUSH
9296: LD_EXP 25
9300: PPUSH
9301: LD_INT 2
9303: PPUSH
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 468
// end ;
9313: PPOPN 2
9315: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
9320: PPUSH
9321: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9322: LD_ADDR_VAR 0 3
9326: PUSH
9327: LD_INT 81
9329: PUSH
9330: LD_INT 7
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 48
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: PUSH
9356: LD_INT 81
9358: PUSH
9359: LD_INT 7
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 30
9368: PUSH
9369: LD_INT 28
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: ADD
9385: PUSH
9386: LD_INT 81
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 30
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PPUSH
9410: CALL_OW 69
9414: ADD
9415: PUSH
9416: LD_INT 81
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 30
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 69
9444: ADD
9445: PUSH
9446: LD_INT 81
9448: PUSH
9449: LD_INT 7
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 30
9458: PUSH
9459: LD_INT 34
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: ADD
9475: PUSH
9476: LD_INT 81
9478: PUSH
9479: LD_INT 7
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 35
9488: PUSH
9489: LD_INT 49
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ADD
9505: PUSH
9506: LD_INT 81
9508: PUSH
9509: LD_INT 7
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 35
9518: PUSH
9519: LD_INT 47
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ADD
9535: PUSH
9536: LD_INT 81
9538: PUSH
9539: LD_INT 7
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 47
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 69
9564: ADD
9565: PUSH
9566: LD_INT 81
9568: PUSH
9569: LD_INT 7
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 69
9594: ADD
9595: PUSH
9596: LD_INT 81
9598: PUSH
9599: LD_INT 7
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: LD_INT 3
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: ADD
9625: ST_TO_ADDR
// if not tmp then
9626: LD_VAR 0 3
9630: NOT
9631: IFFALSE 9635
// exit ;
9633: GO 9756
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 48
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 72
9654: IFFALSE 9687
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9656: LD_ADDR_VAR 0 4
9660: PUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 48
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 72
9680: PUSH
9681: LD_INT 1
9683: ARRAY
9684: ST_TO_ADDR
9685: GO 9711
// un := tmp [ rand ( 1 , tmp ) ] ;
9687: LD_ADDR_VAR 0 4
9691: PUSH
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: PPUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: CALL_OW 12
9709: ARRAY
9710: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9711: LD_EXP 10
9715: NOT
9716: IFFALSE 9747
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9718: LD_ADDR_EXP 10
9722: PUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL_OW 250
9732: PUSH
9733: LD_VAR 0 4
9737: PPUSH
9738: CALL_OW 251
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: ST_TO_ADDR
// KillUnit ( un ) ;
9747: LD_VAR 0 4
9751: PPUSH
9752: CALL_OW 66
// end ;
9756: LD_VAR 0 1
9760: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9767: LD_ADDR_VAR 0 4
9771: PUSH
9772: LD_INT 22
9774: PUSH
9775: LD_INT 6
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 33
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: ST_TO_ADDR
// if not tmp then
9801: LD_VAR 0 4
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 9936
// un := tmp [ rand ( 1 , tmp ) ] ;
9810: LD_ADDR_VAR 0 3
9814: PUSH
9815: LD_VAR 0 4
9819: PUSH
9820: LD_INT 1
9822: PPUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: CALL_OW 12
9832: ARRAY
9833: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9834: LD_VAR 0 3
9838: PPUSH
9839: CALL_OW 264
9843: PUSH
9844: LD_INT 48
9846: EQUAL
9847: IFFALSE 9866
// ComAttackPlace ( un , 194 , 19 ) else
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 194
9856: PPUSH
9857: LD_INT 19
9859: PPUSH
9860: CALL_OW 116
9864: GO 9900
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 81
9873: PUSH
9874: LD_INT 7
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_VAR 0 3
9890: PPUSH
9891: CALL_OW 74
9895: PPUSH
9896: CALL_OW 115
// if not alliance_used_artifact_2 then
9900: LD_EXP 11
9904: NOT
9905: IFFALSE 9936
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9907: LD_ADDR_EXP 11
9911: PUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: CALL_OW 250
9921: PUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: CALL_OW 251
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// end ; end_of_file
9936: LD_VAR 0 1
9940: RET
// export function DebugMode ; var i , j , b ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
// enable_addtolog = true ;
9947: LD_ADDR_OWVAR 81
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// FogOff ( 6 ) ;
9955: LD_INT 6
9957: PPUSH
9958: CALL_OW 344
// uc_side = 6 ;
9962: LD_ADDR_OWVAR 20
9966: PUSH
9967: LD_INT 6
9969: ST_TO_ADDR
// uc_nation = 3 ;
9970: LD_ADDR_OWVAR 21
9974: PUSH
9975: LD_INT 3
9977: ST_TO_ADDR
// bc_level = 10 ;
9978: LD_ADDR_OWVAR 43
9982: PUSH
9983: LD_INT 10
9985: ST_TO_ADDR
// bc_type := b_lab_full ;
9986: LD_ADDR_OWVAR 42
9990: PUSH
9991: LD_INT 8
9993: ST_TO_ADDR
// bc_kind1 := 11 ;
9994: LD_ADDR_OWVAR 44
9998: PUSH
9999: LD_INT 11
10001: ST_TO_ADDR
// bc_kind2 := 12 ;
10002: LD_ADDR_OWVAR 45
10006: PUSH
10007: LD_INT 12
10009: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10010: LD_INT 189
10012: PPUSH
10013: LD_INT 20
10015: PPUSH
10016: LD_INT 1
10018: PPUSH
10019: CALL_OW 47
// bc_type := b_warehouse ;
10023: LD_ADDR_OWVAR 42
10027: PUSH
10028: LD_INT 1
10030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10031: LD_ADDR_VAR 0 4
10035: PUSH
10036: LD_INT 201
10038: PPUSH
10039: LD_INT 22
10041: PPUSH
10042: LD_INT 4
10044: PPUSH
10045: CALL_OW 47
10049: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10050: LD_VAR 0 4
10054: PPUSH
10055: CALL_OW 274
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: LD_INT 10000
10065: PPUSH
10066: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10070: LD_VAR 0 4
10074: PPUSH
10075: CALL_OW 274
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: LD_INT 10000
10085: PPUSH
10086: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: CALL_OW 274
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: LD_INT 10000
10105: PPUSH
10106: CALL_OW 277
// bc_type := b_siberite_power ;
10110: LD_ADDR_OWVAR 42
10114: PUSH
10115: LD_INT 28
10117: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10118: LD_ADDR_VAR 0 4
10122: PUSH
10123: LD_INT 216
10125: PPUSH
10126: LD_INT 16
10128: PPUSH
10129: LD_INT 4
10131: PPUSH
10132: CALL_OW 47
10136: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10137: LD_ADDR_VAR 0 4
10141: PUSH
10142: LD_INT 219
10144: PPUSH
10145: LD_INT 16
10147: PPUSH
10148: LD_INT 4
10150: PPUSH
10151: CALL_OW 47
10155: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10156: LD_INT 55
10158: PPUSH
10159: LD_INT 6
10161: PPUSH
10162: LD_INT 2
10164: PPUSH
10165: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10169: LD_INT 56
10171: PPUSH
10172: LD_INT 6
10174: PPUSH
10175: LD_INT 2
10177: PPUSH
10178: CALL_OW 322
// end ; end_of_file
10182: LD_VAR 0 1
10186: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10187: LD_INT 0
10189: PPUSH
10190: PPUSH
10191: PPUSH
10192: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_EXP 111
10207: EQUAL
10208: IFFALSE 10280
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10210: LD_INT 68
10212: PPUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 255
10222: PPUSH
10223: CALL_OW 321
10227: PUSH
10228: LD_INT 2
10230: EQUAL
10231: IFFALSE 10243
// eff := 70 else
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_INT 70
10240: ST_TO_ADDR
10241: GO 10251
// eff := 30 ;
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: LD_INT 30
10250: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 250
10260: PPUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: CALL_OW 251
10270: PPUSH
10271: LD_VAR 0 4
10275: PPUSH
10276: CALL_OW 495
// end ; end ;
10280: LD_VAR 0 2
10284: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10285: LD_INT 0
10287: PPUSH
// end ;
10288: LD_VAR 0 4
10292: RET
// export function SOS_Command ( cmd ) ; begin
10293: LD_INT 0
10295: PPUSH
// end ;
10296: LD_VAR 0 2
10300: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10301: LD_INT 0
10303: PPUSH
// end ;
10304: LD_VAR 0 6
10308: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10309: LD_INT 0
10311: PPUSH
10312: PPUSH
// if not vehicle or not factory then
10313: LD_VAR 0 1
10317: NOT
10318: PUSH
10319: LD_VAR 0 2
10323: NOT
10324: OR
10325: IFFALSE 10329
// exit ;
10327: GO 10560
// if factoryWaypoints >= factory then
10329: LD_EXP 104
10333: PUSH
10334: LD_VAR 0 2
10338: GREATEREQUAL
10339: IFFALSE 10560
// if factoryWaypoints [ factory ] then
10341: LD_EXP 104
10345: PUSH
10346: LD_VAR 0 2
10350: ARRAY
10351: IFFALSE 10560
// begin if GetControl ( vehicle ) = control_manual then
10353: LD_VAR 0 1
10357: PPUSH
10358: CALL_OW 263
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10447
// begin driver := IsDrivenBy ( vehicle ) ;
10368: LD_ADDR_VAR 0 4
10372: PUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: CALL_OW 311
10382: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10383: LD_VAR 0 4
10387: PPUSH
10388: LD_EXP 104
10392: PUSH
10393: LD_VAR 0 2
10397: ARRAY
10398: PUSH
10399: LD_INT 3
10401: ARRAY
10402: PPUSH
10403: LD_EXP 104
10407: PUSH
10408: LD_VAR 0 2
10412: ARRAY
10413: PUSH
10414: LD_INT 4
10416: ARRAY
10417: PPUSH
10418: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10422: LD_VAR 0 4
10426: PPUSH
10427: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10431: LD_VAR 0 4
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 180
// end else
10445: GO 10560
// if GetControl ( vehicle ) = control_remote then
10447: LD_VAR 0 1
10451: PPUSH
10452: CALL_OW 263
10456: PUSH
10457: LD_INT 2
10459: EQUAL
10460: IFFALSE 10521
// begin wait ( 0 0$2 ) ;
10462: LD_INT 70
10464: PPUSH
10465: CALL_OW 67
// if Connect ( vehicle ) then
10469: LD_VAR 0 1
10473: PPUSH
10474: CALL 38419 0 1
10478: IFFALSE 10519
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_EXP 104
10489: PUSH
10490: LD_VAR 0 2
10494: ARRAY
10495: PUSH
10496: LD_INT 3
10498: ARRAY
10499: PPUSH
10500: LD_EXP 104
10504: PUSH
10505: LD_VAR 0 2
10509: ARRAY
10510: PUSH
10511: LD_INT 4
10513: ARRAY
10514: PPUSH
10515: CALL_OW 171
// end else
10519: GO 10560
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10521: LD_VAR 0 1
10525: PPUSH
10526: LD_EXP 104
10530: PUSH
10531: LD_VAR 0 2
10535: ARRAY
10536: PUSH
10537: LD_INT 3
10539: ARRAY
10540: PPUSH
10541: LD_EXP 104
10545: PUSH
10546: LD_VAR 0 2
10550: ARRAY
10551: PUSH
10552: LD_INT 4
10554: ARRAY
10555: PPUSH
10556: CALL_OW 171
// end ; end ;
10560: LD_VAR 0 3
10564: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10565: LD_INT 0
10567: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10568: LD_VAR 0 1
10572: PUSH
10573: LD_INT 250
10575: EQUAL
10576: PUSH
10577: LD_VAR 0 2
10581: PPUSH
10582: CALL_OW 264
10586: PUSH
10587: LD_EXP 114
10591: EQUAL
10592: AND
10593: IFFALSE 10614
// MinerPlaceMine ( unit , x , y ) ;
10595: LD_VAR 0 2
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: LD_VAR 0 5
10609: PPUSH
10610: CALL 13013 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10614: LD_VAR 0 1
10618: PUSH
10619: LD_INT 251
10621: EQUAL
10622: PUSH
10623: LD_VAR 0 2
10627: PPUSH
10628: CALL_OW 264
10632: PUSH
10633: LD_EXP 114
10637: EQUAL
10638: AND
10639: IFFALSE 10660
// MinerDetonateMine ( unit , x , y ) ;
10641: LD_VAR 0 2
10645: PPUSH
10646: LD_VAR 0 4
10650: PPUSH
10651: LD_VAR 0 5
10655: PPUSH
10656: CALL 13290 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10660: LD_VAR 0 1
10664: PUSH
10665: LD_INT 252
10667: EQUAL
10668: PUSH
10669: LD_VAR 0 2
10673: PPUSH
10674: CALL_OW 264
10678: PUSH
10679: LD_EXP 114
10683: EQUAL
10684: AND
10685: IFFALSE 10706
// MinerCreateMinefield ( unit , x , y ) ;
10687: LD_VAR 0 2
10691: PPUSH
10692: LD_VAR 0 4
10696: PPUSH
10697: LD_VAR 0 5
10701: PPUSH
10702: CALL 13707 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_INT 253
10713: EQUAL
10714: PUSH
10715: LD_VAR 0 2
10719: PPUSH
10720: CALL_OW 257
10724: PUSH
10725: LD_INT 5
10727: EQUAL
10728: AND
10729: IFFALSE 10750
// ComBinocular ( unit , x , y ) ;
10731: LD_VAR 0 2
10735: PPUSH
10736: LD_VAR 0 4
10740: PPUSH
10741: LD_VAR 0 5
10745: PPUSH
10746: CALL 14078 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 254
10757: EQUAL
10758: PUSH
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 264
10768: PUSH
10769: LD_EXP 109
10773: EQUAL
10774: AND
10775: PUSH
10776: LD_VAR 0 3
10780: PPUSH
10781: CALL_OW 263
10785: PUSH
10786: LD_INT 3
10788: EQUAL
10789: AND
10790: IFFALSE 10806
// HackDestroyVehicle ( unit , selectedUnit ) ;
10792: LD_VAR 0 2
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: CALL 12373 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10806: LD_VAR 0 1
10810: PUSH
10811: LD_INT 255
10813: EQUAL
10814: PUSH
10815: LD_VAR 0 2
10819: PPUSH
10820: CALL_OW 264
10824: PUSH
10825: LD_INT 14
10827: PUSH
10828: LD_INT 53
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: IN
10835: AND
10836: PUSH
10837: LD_VAR 0 4
10841: PPUSH
10842: LD_VAR 0 5
10846: PPUSH
10847: CALL_OW 488
10851: AND
10852: IFFALSE 10876
// CutTreeXYR ( unit , x , y , 12 ) ;
10854: LD_VAR 0 2
10858: PPUSH
10859: LD_VAR 0 4
10863: PPUSH
10864: LD_VAR 0 5
10868: PPUSH
10869: LD_INT 12
10871: PPUSH
10872: CALL 10939 0 4
// if cmd = 256 then
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 256
10883: EQUAL
10884: IFFALSE 10905
// SetFactoryWaypoint ( unit , x , y ) ;
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: LD_VAR 0 5
10900: PPUSH
10901: CALL 28836 0 3
// if cmd = 257 then
10905: LD_VAR 0 1
10909: PUSH
10910: LD_INT 257
10912: EQUAL
10913: IFFALSE 10934
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10915: LD_VAR 0 2
10919: PPUSH
10920: LD_VAR 0 4
10924: PPUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: CALL 29198 0 3
// end ;
10934: LD_VAR 0 6
10938: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
10943: PPUSH
10944: PPUSH
10945: PPUSH
10946: PPUSH
10947: PPUSH
10948: PPUSH
10949: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10950: LD_VAR 0 1
10954: NOT
10955: PUSH
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 488
10970: NOT
10971: OR
10972: PUSH
10973: LD_VAR 0 4
10977: NOT
10978: OR
10979: IFFALSE 10983
// exit ;
10981: GO 11323
// list := [ ] ;
10983: LD_ADDR_VAR 0 13
10987: PUSH
10988: EMPTY
10989: ST_TO_ADDR
// if x - r < 0 then
10990: LD_VAR 0 2
10994: PUSH
10995: LD_VAR 0 4
10999: MINUS
11000: PUSH
11001: LD_INT 0
11003: LESS
11004: IFFALSE 11016
// min_x := 0 else
11006: LD_ADDR_VAR 0 7
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
11014: GO 11032
// min_x := x - r ;
11016: LD_ADDR_VAR 0 7
11020: PUSH
11021: LD_VAR 0 2
11025: PUSH
11026: LD_VAR 0 4
11030: MINUS
11031: ST_TO_ADDR
// if y - r < 0 then
11032: LD_VAR 0 3
11036: PUSH
11037: LD_VAR 0 4
11041: MINUS
11042: PUSH
11043: LD_INT 0
11045: LESS
11046: IFFALSE 11058
// min_y := 0 else
11048: LD_ADDR_VAR 0 8
11052: PUSH
11053: LD_INT 0
11055: ST_TO_ADDR
11056: GO 11074
// min_y := y - r ;
11058: LD_ADDR_VAR 0 8
11062: PUSH
11063: LD_VAR 0 3
11067: PUSH
11068: LD_VAR 0 4
11072: MINUS
11073: ST_TO_ADDR
// max_x := x + r ;
11074: LD_ADDR_VAR 0 9
11078: PUSH
11079: LD_VAR 0 2
11083: PUSH
11084: LD_VAR 0 4
11088: PLUS
11089: ST_TO_ADDR
// max_y := y + r ;
11090: LD_ADDR_VAR 0 10
11094: PUSH
11095: LD_VAR 0 3
11099: PUSH
11100: LD_VAR 0 4
11104: PLUS
11105: ST_TO_ADDR
// for _x = min_x to max_x do
11106: LD_ADDR_VAR 0 11
11110: PUSH
11111: DOUBLE
11112: LD_VAR 0 7
11116: DEC
11117: ST_TO_ADDR
11118: LD_VAR 0 9
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11241
// for _y = min_y to max_y do
11126: LD_ADDR_VAR 0 12
11130: PUSH
11131: DOUBLE
11132: LD_VAR 0 8
11136: DEC
11137: ST_TO_ADDR
11138: LD_VAR 0 10
11142: PUSH
11143: FOR_TO
11144: IFFALSE 11237
// begin if not ValidHex ( _x , _y ) then
11146: LD_VAR 0 11
11150: PPUSH
11151: LD_VAR 0 12
11155: PPUSH
11156: CALL_OW 488
11160: NOT
11161: IFFALSE 11165
// continue ;
11163: GO 11143
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11165: LD_VAR 0 11
11169: PPUSH
11170: LD_VAR 0 12
11174: PPUSH
11175: CALL_OW 351
11179: PUSH
11180: LD_VAR 0 11
11184: PPUSH
11185: LD_VAR 0 12
11189: PPUSH
11190: CALL_OW 554
11194: AND
11195: IFFALSE 11235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11197: LD_ADDR_VAR 0 13
11201: PUSH
11202: LD_VAR 0 13
11206: PPUSH
11207: LD_VAR 0 13
11211: PUSH
11212: LD_INT 1
11214: PLUS
11215: PPUSH
11216: LD_VAR 0 11
11220: PUSH
11221: LD_VAR 0 12
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 2
11234: ST_TO_ADDR
// end ;
11235: GO 11143
11237: POP
11238: POP
11239: GO 11123
11241: POP
11242: POP
// if not list then
11243: LD_VAR 0 13
11247: NOT
11248: IFFALSE 11252
// exit ;
11250: GO 11323
// for i in list do
11252: LD_ADDR_VAR 0 6
11256: PUSH
11257: LD_VAR 0 13
11261: PUSH
11262: FOR_IN
11263: IFFALSE 11321
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11265: LD_VAR 0 1
11269: PPUSH
11270: LD_STRING M
11272: PUSH
11273: LD_VAR 0 6
11277: PUSH
11278: LD_INT 1
11280: ARRAY
11281: PUSH
11282: LD_VAR 0 6
11286: PUSH
11287: LD_INT 2
11289: ARRAY
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: LD_INT 0
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: EMPTY
11313: LIST
11314: PPUSH
11315: CALL_OW 447
11319: GO 11262
11321: POP
11322: POP
// end ;
11323: LD_VAR 0 5
11327: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11328: LD_EXP 36
11332: NOT
11333: IFFALSE 11383
11335: GO 11337
11337: DISABLE
// begin initHack := true ;
11338: LD_ADDR_EXP 36
11342: PUSH
11343: LD_INT 1
11345: ST_TO_ADDR
// hackTanks := [ ] ;
11346: LD_ADDR_EXP 37
11350: PUSH
11351: EMPTY
11352: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11353: LD_ADDR_EXP 38
11357: PUSH
11358: EMPTY
11359: ST_TO_ADDR
// hackLimit := 3 ;
11360: LD_ADDR_EXP 39
11364: PUSH
11365: LD_INT 3
11367: ST_TO_ADDR
// hackDist := 12 ;
11368: LD_ADDR_EXP 40
11372: PUSH
11373: LD_INT 12
11375: ST_TO_ADDR
// hackCounter := [ ] ;
11376: LD_ADDR_EXP 41
11380: PUSH
11381: EMPTY
11382: ST_TO_ADDR
// end ;
11383: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11384: LD_EXP 36
11388: PUSH
11389: LD_INT 34
11391: PUSH
11392: LD_EXP 109
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 69
11405: AND
11406: IFFALSE 11661
11408: GO 11410
11410: DISABLE
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
// begin enable ;
11415: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11416: LD_ADDR_VAR 0 1
11420: PUSH
11421: LD_INT 34
11423: PUSH
11424: LD_EXP 109
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PPUSH
11433: CALL_OW 69
11437: PUSH
11438: FOR_IN
11439: IFFALSE 11659
// begin if not i in hackTanks then
11441: LD_VAR 0 1
11445: PUSH
11446: LD_EXP 37
11450: IN
11451: NOT
11452: IFFALSE 11535
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11454: LD_ADDR_EXP 37
11458: PUSH
11459: LD_EXP 37
11463: PPUSH
11464: LD_EXP 37
11468: PUSH
11469: LD_INT 1
11471: PLUS
11472: PPUSH
11473: LD_VAR 0 1
11477: PPUSH
11478: CALL_OW 1
11482: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11483: LD_ADDR_EXP 38
11487: PUSH
11488: LD_EXP 38
11492: PPUSH
11493: LD_EXP 38
11497: PUSH
11498: LD_INT 1
11500: PLUS
11501: PPUSH
11502: EMPTY
11503: PPUSH
11504: CALL_OW 1
11508: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11509: LD_ADDR_EXP 41
11513: PUSH
11514: LD_EXP 41
11518: PPUSH
11519: LD_EXP 41
11523: PUSH
11524: LD_INT 1
11526: PLUS
11527: PPUSH
11528: EMPTY
11529: PPUSH
11530: CALL_OW 1
11534: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 302
11544: NOT
11545: IFFALSE 11558
// begin HackUnlinkAll ( i ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL 11664 0 1
// continue ;
11556: GO 11438
// end ; HackCheckCapturedStatus ( i ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL 12107 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11567: LD_ADDR_VAR 0 2
11571: PUSH
11572: LD_INT 81
11574: PUSH
11575: LD_VAR 0 1
11579: PPUSH
11580: CALL_OW 255
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 33
11591: PUSH
11592: LD_INT 3
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 91
11601: PUSH
11602: LD_VAR 0 1
11606: PUSH
11607: LD_EXP 40
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 50
11619: PUSH
11620: EMPTY
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 69
11633: ST_TO_ADDR
// if not tmp then
11634: LD_VAR 0 2
11638: NOT
11639: IFFALSE 11643
// continue ;
11641: GO 11438
// HackLink ( i , tmp ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL 11800 0 2
// end ;
11657: GO 11438
11659: POP
11660: POP
// end ;
11661: PPOPN 2
11663: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11664: LD_INT 0
11666: PPUSH
11667: PPUSH
11668: PPUSH
// if not hack in hackTanks then
11669: LD_VAR 0 1
11673: PUSH
11674: LD_EXP 37
11678: IN
11679: NOT
11680: IFFALSE 11684
// exit ;
11682: GO 11795
// index := GetElementIndex ( hackTanks , hack ) ;
11684: LD_ADDR_VAR 0 4
11688: PUSH
11689: LD_EXP 37
11693: PPUSH
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL 35233 0 2
11703: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11704: LD_EXP 38
11708: PUSH
11709: LD_VAR 0 4
11713: ARRAY
11714: IFFALSE 11795
// begin for i in hackTanksCaptured [ index ] do
11716: LD_ADDR_VAR 0 3
11720: PUSH
11721: LD_EXP 38
11725: PUSH
11726: LD_VAR 0 4
11730: ARRAY
11731: PUSH
11732: FOR_IN
11733: IFFALSE 11759
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11735: LD_VAR 0 3
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: PPUSH
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 2
11751: ARRAY
11752: PPUSH
11753: CALL_OW 235
11757: GO 11732
11759: POP
11760: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11761: LD_ADDR_EXP 38
11765: PUSH
11766: LD_EXP 38
11770: PPUSH
11771: LD_VAR 0 4
11775: PPUSH
11776: EMPTY
11777: PPUSH
11778: CALL_OW 1
11782: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 505
// end ; end ;
11795: LD_VAR 0 2
11799: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11800: LD_INT 0
11802: PPUSH
11803: PPUSH
11804: PPUSH
// if not hack in hackTanks or not vehicles then
11805: LD_VAR 0 1
11809: PUSH
11810: LD_EXP 37
11814: IN
11815: NOT
11816: PUSH
11817: LD_VAR 0 2
11821: NOT
11822: OR
11823: IFFALSE 11827
// exit ;
11825: GO 12102
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: LD_VAR 0 2
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL 35883 0 4
11852: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_EXP 37
11862: PPUSH
11863: LD_VAR 0 1
11867: PPUSH
11868: CALL 35233 0 2
11872: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11873: LD_EXP 38
11877: PUSH
11878: LD_VAR 0 5
11882: ARRAY
11883: PUSH
11884: LD_EXP 39
11888: LESS
11889: IFFALSE 12078
// begin for i := 1 to vehicles do
11891: LD_ADDR_VAR 0 4
11895: PUSH
11896: DOUBLE
11897: LD_INT 1
11899: DEC
11900: ST_TO_ADDR
11901: LD_VAR 0 2
11905: PUSH
11906: FOR_TO
11907: IFFALSE 12076
// begin if hackTanksCaptured [ index ] = hackLimit then
11909: LD_EXP 38
11913: PUSH
11914: LD_VAR 0 5
11918: ARRAY
11919: PUSH
11920: LD_EXP 39
11924: EQUAL
11925: IFFALSE 11929
// break ;
11927: GO 12076
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11929: LD_ADDR_EXP 41
11933: PUSH
11934: LD_EXP 41
11938: PPUSH
11939: LD_VAR 0 5
11943: PPUSH
11944: LD_EXP 41
11948: PUSH
11949: LD_VAR 0 5
11953: ARRAY
11954: PUSH
11955: LD_INT 1
11957: PLUS
11958: PPUSH
11959: CALL_OW 1
11963: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11964: LD_ADDR_EXP 38
11968: PUSH
11969: LD_EXP 38
11973: PPUSH
11974: LD_VAR 0 5
11978: PUSH
11979: LD_EXP 38
11983: PUSH
11984: LD_VAR 0 5
11988: ARRAY
11989: PUSH
11990: LD_INT 1
11992: PLUS
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: LD_VAR 0 2
12002: PUSH
12003: LD_VAR 0 4
12007: ARRAY
12008: PUSH
12009: LD_VAR 0 2
12013: PUSH
12014: LD_VAR 0 4
12018: ARRAY
12019: PPUSH
12020: CALL_OW 255
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL 35448 0 3
12033: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: PPUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 255
12054: PPUSH
12055: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12059: LD_VAR 0 2
12063: PUSH
12064: LD_VAR 0 4
12068: ARRAY
12069: PPUSH
12070: CALL_OW 141
// end ;
12074: GO 11906
12076: POP
12077: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_EXP 38
12087: PUSH
12088: LD_VAR 0 5
12092: ARRAY
12093: PUSH
12094: LD_INT 0
12096: PLUS
12097: PPUSH
12098: CALL_OW 505
// end ;
12102: LD_VAR 0 3
12106: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
// if not hack in hackTanks then
12113: LD_VAR 0 1
12117: PUSH
12118: LD_EXP 37
12122: IN
12123: NOT
12124: IFFALSE 12128
// exit ;
12126: GO 12368
// index := GetElementIndex ( hackTanks , hack ) ;
12128: LD_ADDR_VAR 0 4
12132: PUSH
12133: LD_EXP 37
12137: PPUSH
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL 35233 0 2
12147: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: DOUBLE
12154: LD_EXP 38
12158: PUSH
12159: LD_VAR 0 4
12163: ARRAY
12164: INC
12165: ST_TO_ADDR
12166: LD_INT 1
12168: PUSH
12169: FOR_DOWNTO
12170: IFFALSE 12342
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_EXP 38
12181: PUSH
12182: LD_VAR 0 4
12186: ARRAY
12187: PUSH
12188: LD_VAR 0 3
12192: ARRAY
12193: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12194: LD_VAR 0 5
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: CALL_OW 302
12207: NOT
12208: PUSH
12209: LD_VAR 0 5
12213: PUSH
12214: LD_INT 1
12216: ARRAY
12217: PPUSH
12218: CALL_OW 255
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 255
12232: NONEQUAL
12233: OR
12234: IFFALSE 12340
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12236: LD_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: CALL_OW 305
12249: PUSH
12250: LD_VAR 0 5
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PPUSH
12259: CALL_OW 255
12263: PUSH
12264: LD_VAR 0 1
12268: PPUSH
12269: CALL_OW 255
12273: EQUAL
12274: AND
12275: IFFALSE 12299
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12277: LD_VAR 0 5
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: LD_VAR 0 5
12290: PUSH
12291: LD_INT 2
12293: ARRAY
12294: PPUSH
12295: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12299: LD_ADDR_EXP 38
12303: PUSH
12304: LD_EXP 38
12308: PPUSH
12309: LD_VAR 0 4
12313: PPUSH
12314: LD_EXP 38
12318: PUSH
12319: LD_VAR 0 4
12323: ARRAY
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: CALL_OW 3
12334: PPUSH
12335: CALL_OW 1
12339: ST_TO_ADDR
// end ; end ;
12340: GO 12169
12342: POP
12343: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12344: LD_VAR 0 1
12348: PPUSH
12349: LD_EXP 38
12353: PUSH
12354: LD_VAR 0 4
12358: ARRAY
12359: PUSH
12360: LD_INT 0
12362: PLUS
12363: PPUSH
12364: CALL_OW 505
// end ;
12368: LD_VAR 0 2
12372: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
// if not hack in hackTanks then
12379: LD_VAR 0 1
12383: PUSH
12384: LD_EXP 37
12388: IN
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12479
// index := GetElementIndex ( hackTanks , hack ) ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_EXP 37
12403: PPUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL 35233 0 2
12413: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12414: LD_ADDR_VAR 0 4
12418: PUSH
12419: DOUBLE
12420: LD_INT 1
12422: DEC
12423: ST_TO_ADDR
12424: LD_EXP 38
12428: PUSH
12429: LD_VAR 0 5
12433: ARRAY
12434: PUSH
12435: FOR_TO
12436: IFFALSE 12477
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12438: LD_EXP 38
12442: PUSH
12443: LD_VAR 0 5
12447: ARRAY
12448: PUSH
12449: LD_VAR 0 4
12453: ARRAY
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PUSH
12459: LD_VAR 0 2
12463: EQUAL
12464: IFFALSE 12475
// KillUnit ( vehicle ) ;
12466: LD_VAR 0 2
12470: PPUSH
12471: CALL_OW 66
12475: GO 12435
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 3
12483: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12484: LD_EXP 42
12488: NOT
12489: IFFALSE 12524
12491: GO 12493
12493: DISABLE
// begin initMiner := true ;
12494: LD_ADDR_EXP 42
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// minersList := [ ] ;
12502: LD_ADDR_EXP 43
12506: PUSH
12507: EMPTY
12508: ST_TO_ADDR
// minerMinesList := [ ] ;
12509: LD_ADDR_EXP 44
12513: PUSH
12514: EMPTY
12515: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12516: LD_ADDR_EXP 45
12520: PUSH
12521: LD_INT 5
12523: ST_TO_ADDR
// end ;
12524: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12525: LD_EXP 42
12529: PUSH
12530: LD_INT 34
12532: PUSH
12533: LD_EXP 114
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 69
12546: AND
12547: IFFALSE 13010
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
// begin enable ;
12558: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12559: LD_ADDR_VAR 0 1
12563: PUSH
12564: LD_INT 34
12566: PUSH
12567: LD_EXP 114
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PUSH
12581: FOR_IN
12582: IFFALSE 12654
// begin if not i in minersList then
12584: LD_VAR 0 1
12588: PUSH
12589: LD_EXP 43
12593: IN
12594: NOT
12595: IFFALSE 12652
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12597: LD_ADDR_EXP 43
12601: PUSH
12602: LD_EXP 43
12606: PPUSH
12607: LD_EXP 43
12611: PUSH
12612: LD_INT 1
12614: PLUS
12615: PPUSH
12616: LD_VAR 0 1
12620: PPUSH
12621: CALL_OW 1
12625: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12626: LD_ADDR_EXP 44
12630: PUSH
12631: LD_EXP 44
12635: PPUSH
12636: LD_EXP 44
12640: PUSH
12641: LD_INT 1
12643: PLUS
12644: PPUSH
12645: EMPTY
12646: PPUSH
12647: CALL_OW 1
12651: ST_TO_ADDR
// end end ;
12652: GO 12581
12654: POP
12655: POP
// for i := minerMinesList downto 1 do
12656: LD_ADDR_VAR 0 1
12660: PUSH
12661: DOUBLE
12662: LD_EXP 44
12666: INC
12667: ST_TO_ADDR
12668: LD_INT 1
12670: PUSH
12671: FOR_DOWNTO
12672: IFFALSE 13008
// begin if IsLive ( minersList [ i ] ) then
12674: LD_EXP 43
12678: PUSH
12679: LD_VAR 0 1
12683: ARRAY
12684: PPUSH
12685: CALL_OW 300
12689: IFFALSE 12717
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12691: LD_EXP 43
12695: PUSH
12696: LD_VAR 0 1
12700: ARRAY
12701: PPUSH
12702: LD_EXP 44
12706: PUSH
12707: LD_VAR 0 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 505
// if not minerMinesList [ i ] then
12717: LD_EXP 44
12721: PUSH
12722: LD_VAR 0 1
12726: ARRAY
12727: NOT
12728: IFFALSE 12732
// continue ;
12730: GO 12671
// for j := minerMinesList [ i ] downto 1 do
12732: LD_ADDR_VAR 0 2
12736: PUSH
12737: DOUBLE
12738: LD_EXP 44
12742: PUSH
12743: LD_VAR 0 1
12747: ARRAY
12748: INC
12749: ST_TO_ADDR
12750: LD_INT 1
12752: PUSH
12753: FOR_DOWNTO
12754: IFFALSE 13004
// begin side := GetSide ( minersList [ i ] ) ;
12756: LD_ADDR_VAR 0 3
12760: PUSH
12761: LD_EXP 43
12765: PUSH
12766: LD_VAR 0 1
12770: ARRAY
12771: PPUSH
12772: CALL_OW 255
12776: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12777: LD_ADDR_VAR 0 4
12781: PUSH
12782: LD_EXP 44
12786: PUSH
12787: LD_VAR 0 1
12791: ARRAY
12792: PUSH
12793: LD_VAR 0 2
12797: ARRAY
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: LD_EXP 44
12807: PUSH
12808: LD_VAR 0 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 2
12818: ARRAY
12819: PUSH
12820: LD_INT 2
12822: ARRAY
12823: PPUSH
12824: CALL_OW 428
12828: ST_TO_ADDR
// if not tmp then
12829: LD_VAR 0 4
12833: NOT
12834: IFFALSE 12838
// continue ;
12836: GO 12753
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12838: LD_VAR 0 4
12842: PUSH
12843: LD_INT 81
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: IN
12860: PUSH
12861: LD_EXP 44
12865: PUSH
12866: LD_VAR 0 1
12870: ARRAY
12871: PUSH
12872: LD_VAR 0 2
12876: ARRAY
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PPUSH
12882: LD_EXP 44
12886: PUSH
12887: LD_VAR 0 1
12891: ARRAY
12892: PUSH
12893: LD_VAR 0 2
12897: ARRAY
12898: PUSH
12899: LD_INT 2
12901: ARRAY
12902: PPUSH
12903: CALL_OW 458
12907: AND
12908: IFFALSE 13002
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12910: LD_EXP 44
12914: PUSH
12915: LD_VAR 0 1
12919: ARRAY
12920: PUSH
12921: LD_VAR 0 2
12925: ARRAY
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PPUSH
12931: LD_EXP 44
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 2
12946: ARRAY
12947: PUSH
12948: LD_INT 2
12950: ARRAY
12951: PPUSH
12952: LD_VAR 0 3
12956: PPUSH
12957: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12961: LD_ADDR_EXP 44
12965: PUSH
12966: LD_EXP 44
12970: PPUSH
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_EXP 44
12980: PUSH
12981: LD_VAR 0 1
12985: ARRAY
12986: PPUSH
12987: LD_VAR 0 2
12991: PPUSH
12992: CALL_OW 3
12996: PPUSH
12997: CALL_OW 1
13001: ST_TO_ADDR
// end ; end ;
13002: GO 12753
13004: POP
13005: POP
// end ;
13006: GO 12671
13008: POP
13009: POP
// end ;
13010: PPOPN 4
13012: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13013: LD_INT 0
13015: PPUSH
13016: PPUSH
// result := false ;
13017: LD_ADDR_VAR 0 4
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 264
13034: PUSH
13035: LD_EXP 114
13039: EQUAL
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13285
// index := GetElementIndex ( minersList , unit ) ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_EXP 43
13054: PPUSH
13055: LD_VAR 0 1
13059: PPUSH
13060: CALL 35233 0 2
13064: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13065: LD_EXP 44
13069: PUSH
13070: LD_VAR 0 5
13074: ARRAY
13075: PUSH
13076: LD_EXP 45
13080: GREATEREQUAL
13081: IFFALSE 13085
// exit ;
13083: GO 13285
// ComMoveXY ( unit , x , y ) ;
13085: LD_VAR 0 1
13089: PPUSH
13090: LD_VAR 0 2
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13104: LD_INT 35
13106: PPUSH
13107: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13111: LD_VAR 0 1
13115: PPUSH
13116: LD_VAR 0 2
13120: PPUSH
13121: LD_VAR 0 3
13125: PPUSH
13126: CALL 66519 0 3
13130: NOT
13131: PUSH
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL_OW 314
13141: AND
13142: IFFALSE 13146
// exit ;
13144: GO 13285
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13146: LD_VAR 0 2
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: CALL_OW 428
13160: PUSH
13161: LD_VAR 0 1
13165: EQUAL
13166: PUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 314
13176: NOT
13177: AND
13178: IFFALSE 13104
// PlaySoundXY ( x , y , PlantMine ) ;
13180: LD_VAR 0 2
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_STRING PlantMine
13192: PPUSH
13193: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13197: LD_VAR 0 2
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_VAR 0 1
13211: PPUSH
13212: CALL_OW 255
13216: PPUSH
13217: LD_INT 0
13219: PPUSH
13220: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13224: LD_ADDR_EXP 44
13228: PUSH
13229: LD_EXP 44
13233: PPUSH
13234: LD_VAR 0 5
13238: PUSH
13239: LD_EXP 44
13243: PUSH
13244: LD_VAR 0 5
13248: ARRAY
13249: PUSH
13250: LD_INT 1
13252: PLUS
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: LD_VAR 0 2
13262: PUSH
13263: LD_VAR 0 3
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL 35448 0 3
13276: ST_TO_ADDR
// result := true ;
13277: LD_ADDR_VAR 0 4
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// end ;
13285: LD_VAR 0 4
13289: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13290: LD_INT 0
13292: PPUSH
13293: PPUSH
13294: PPUSH
// if not unit in minersList then
13295: LD_VAR 0 1
13299: PUSH
13300: LD_EXP 43
13304: IN
13305: NOT
13306: IFFALSE 13310
// exit ;
13308: GO 13702
// index := GetElementIndex ( minersList , unit ) ;
13310: LD_ADDR_VAR 0 6
13314: PUSH
13315: LD_EXP 43
13319: PPUSH
13320: LD_VAR 0 1
13324: PPUSH
13325: CALL 35233 0 2
13329: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: DOUBLE
13336: LD_EXP 44
13340: PUSH
13341: LD_VAR 0 6
13345: ARRAY
13346: INC
13347: ST_TO_ADDR
13348: LD_INT 1
13350: PUSH
13351: FOR_DOWNTO
13352: IFFALSE 13513
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13354: LD_EXP 44
13358: PUSH
13359: LD_VAR 0 6
13363: ARRAY
13364: PUSH
13365: LD_VAR 0 5
13369: ARRAY
13370: PUSH
13371: LD_INT 1
13373: ARRAY
13374: PUSH
13375: LD_VAR 0 2
13379: EQUAL
13380: PUSH
13381: LD_EXP 44
13385: PUSH
13386: LD_VAR 0 6
13390: ARRAY
13391: PUSH
13392: LD_VAR 0 5
13396: ARRAY
13397: PUSH
13398: LD_INT 2
13400: ARRAY
13401: PUSH
13402: LD_VAR 0 3
13406: EQUAL
13407: AND
13408: IFFALSE 13511
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13410: LD_EXP 44
13414: PUSH
13415: LD_VAR 0 6
13419: ARRAY
13420: PUSH
13421: LD_VAR 0 5
13425: ARRAY
13426: PUSH
13427: LD_INT 1
13429: ARRAY
13430: PPUSH
13431: LD_EXP 44
13435: PUSH
13436: LD_VAR 0 6
13440: ARRAY
13441: PUSH
13442: LD_VAR 0 5
13446: ARRAY
13447: PUSH
13448: LD_INT 2
13450: ARRAY
13451: PPUSH
13452: LD_VAR 0 1
13456: PPUSH
13457: CALL_OW 255
13461: PPUSH
13462: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13466: LD_ADDR_EXP 44
13470: PUSH
13471: LD_EXP 44
13475: PPUSH
13476: LD_VAR 0 6
13480: PPUSH
13481: LD_EXP 44
13485: PUSH
13486: LD_VAR 0 6
13490: ARRAY
13491: PPUSH
13492: LD_VAR 0 5
13496: PPUSH
13497: CALL_OW 3
13501: PPUSH
13502: CALL_OW 1
13506: ST_TO_ADDR
// exit ;
13507: POP
13508: POP
13509: GO 13702
// end ; end ;
13511: GO 13351
13513: POP
13514: POP
// for i := minerMinesList [ index ] downto 1 do
13515: LD_ADDR_VAR 0 5
13519: PUSH
13520: DOUBLE
13521: LD_EXP 44
13525: PUSH
13526: LD_VAR 0 6
13530: ARRAY
13531: INC
13532: ST_TO_ADDR
13533: LD_INT 1
13535: PUSH
13536: FOR_DOWNTO
13537: IFFALSE 13700
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13539: LD_EXP 44
13543: PUSH
13544: LD_VAR 0 6
13548: ARRAY
13549: PUSH
13550: LD_VAR 0 5
13554: ARRAY
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_EXP 44
13564: PUSH
13565: LD_VAR 0 6
13569: ARRAY
13570: PUSH
13571: LD_VAR 0 5
13575: ARRAY
13576: PUSH
13577: LD_INT 2
13579: ARRAY
13580: PPUSH
13581: LD_VAR 0 2
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: CALL_OW 298
13595: PUSH
13596: LD_INT 6
13598: LESS
13599: IFFALSE 13698
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13601: LD_EXP 44
13605: PUSH
13606: LD_VAR 0 6
13610: ARRAY
13611: PUSH
13612: LD_VAR 0 5
13616: ARRAY
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: LD_EXP 44
13626: PUSH
13627: LD_VAR 0 6
13631: ARRAY
13632: PUSH
13633: LD_VAR 0 5
13637: ARRAY
13638: PUSH
13639: LD_INT 2
13641: ARRAY
13642: PPUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 255
13652: PPUSH
13653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13657: LD_ADDR_EXP 44
13661: PUSH
13662: LD_EXP 44
13666: PPUSH
13667: LD_VAR 0 6
13671: PPUSH
13672: LD_EXP 44
13676: PUSH
13677: LD_VAR 0 6
13681: ARRAY
13682: PPUSH
13683: LD_VAR 0 5
13687: PPUSH
13688: CALL_OW 3
13692: PPUSH
13693: CALL_OW 1
13697: ST_TO_ADDR
// end ; end ;
13698: GO 13536
13700: POP
13701: POP
// end ;
13702: LD_VAR 0 4
13706: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13707: LD_INT 0
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
13713: PPUSH
13714: PPUSH
13715: PPUSH
13716: PPUSH
13717: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 264
13727: PUSH
13728: LD_EXP 114
13732: EQUAL
13733: NOT
13734: PUSH
13735: LD_VAR 0 1
13739: PUSH
13740: LD_EXP 43
13744: IN
13745: NOT
13746: OR
13747: IFFALSE 13751
// exit ;
13749: GO 14073
// index := GetElementIndex ( minersList , unit ) ;
13751: LD_ADDR_VAR 0 6
13755: PUSH
13756: LD_EXP 43
13760: PPUSH
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL 35233 0 2
13770: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13771: LD_ADDR_VAR 0 8
13775: PUSH
13776: LD_EXP 45
13780: PUSH
13781: LD_EXP 44
13785: PUSH
13786: LD_VAR 0 6
13790: ARRAY
13791: MINUS
13792: ST_TO_ADDR
// if not minesFreeAmount then
13793: LD_VAR 0 8
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 14073
// tmp := [ ] ;
13802: LD_ADDR_VAR 0 7
13806: PUSH
13807: EMPTY
13808: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13809: LD_ADDR_VAR 0 5
13813: PUSH
13814: DOUBLE
13815: LD_INT 1
13817: DEC
13818: ST_TO_ADDR
13819: LD_VAR 0 8
13823: PUSH
13824: FOR_TO
13825: IFFALSE 14020
// begin _d := rand ( 0 , 5 ) ;
13827: LD_ADDR_VAR 0 11
13831: PUSH
13832: LD_INT 0
13834: PPUSH
13835: LD_INT 5
13837: PPUSH
13838: CALL_OW 12
13842: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13843: LD_ADDR_VAR 0 12
13847: PUSH
13848: LD_INT 2
13850: PPUSH
13851: LD_INT 6
13853: PPUSH
13854: CALL_OW 12
13858: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13859: LD_ADDR_VAR 0 9
13863: PUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: LD_VAR 0 11
13873: PPUSH
13874: LD_VAR 0 12
13878: PPUSH
13879: CALL_OW 272
13883: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13884: LD_ADDR_VAR 0 10
13888: PUSH
13889: LD_VAR 0 3
13893: PPUSH
13894: LD_VAR 0 11
13898: PPUSH
13899: LD_VAR 0 12
13903: PPUSH
13904: CALL_OW 273
13908: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13909: LD_VAR 0 9
13913: PPUSH
13914: LD_VAR 0 10
13918: PPUSH
13919: CALL_OW 488
13923: PUSH
13924: LD_VAR 0 9
13928: PUSH
13929: LD_VAR 0 10
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_VAR 0 7
13942: IN
13943: NOT
13944: AND
13945: PUSH
13946: LD_VAR 0 9
13950: PPUSH
13951: LD_VAR 0 10
13955: PPUSH
13956: CALL_OW 458
13960: NOT
13961: AND
13962: IFFALSE 14004
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13964: LD_ADDR_VAR 0 7
13968: PUSH
13969: LD_VAR 0 7
13973: PPUSH
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: PLUS
13982: PPUSH
13983: LD_VAR 0 9
13987: PUSH
13988: LD_VAR 0 10
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 1
14001: ST_TO_ADDR
14002: GO 14018
// i := i - 1 ;
14004: LD_ADDR_VAR 0 5
14008: PUSH
14009: LD_VAR 0 5
14013: PUSH
14014: LD_INT 1
14016: MINUS
14017: ST_TO_ADDR
// end ;
14018: GO 13824
14020: POP
14021: POP
// for i in tmp do
14022: LD_ADDR_VAR 0 5
14026: PUSH
14027: LD_VAR 0 7
14031: PUSH
14032: FOR_IN
14033: IFFALSE 14071
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14035: LD_VAR 0 1
14039: PPUSH
14040: LD_VAR 0 5
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: LD_VAR 0 5
14053: PUSH
14054: LD_INT 2
14056: ARRAY
14057: PPUSH
14058: CALL 13013 0 3
14062: NOT
14063: IFFALSE 14069
// exit ;
14065: POP
14066: POP
14067: GO 14073
14069: GO 14032
14071: POP
14072: POP
// end ;
14073: LD_VAR 0 4
14077: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14078: LD_INT 0
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
// if not GetClass ( unit ) = class_sniper then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 257
14096: PUSH
14097: LD_INT 5
14099: EQUAL
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14493
// dist := 8 ;
14105: LD_ADDR_VAR 0 5
14109: PUSH
14110: LD_INT 8
14112: ST_TO_ADDR
// viewRange := 12 ;
14113: LD_ADDR_VAR 0 7
14117: PUSH
14118: LD_INT 12
14120: ST_TO_ADDR
// side := GetSide ( unit ) ;
14121: LD_ADDR_VAR 0 6
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 255
14135: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14136: LD_INT 61
14138: PPUSH
14139: LD_VAR 0 6
14143: PPUSH
14144: CALL_OW 321
14148: PUSH
14149: LD_INT 2
14151: EQUAL
14152: IFFALSE 14162
// viewRange := 16 ;
14154: LD_ADDR_VAR 0 7
14158: PUSH
14159: LD_INT 16
14161: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14162: LD_VAR 0 1
14166: PPUSH
14167: LD_VAR 0 2
14171: PPUSH
14172: LD_VAR 0 3
14176: PPUSH
14177: CALL_OW 297
14181: PUSH
14182: LD_VAR 0 5
14186: GREATER
14187: IFFALSE 14266
// begin ComMoveXY ( unit , x , y ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14208: LD_INT 35
14210: PPUSH
14211: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14215: LD_VAR 0 1
14219: PPUSH
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: CALL 66519 0 3
14234: NOT
14235: IFFALSE 14239
// exit ;
14237: GO 14493
// until GetDistUnitXY ( unit , x , y ) < dist ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_VAR 0 2
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: CALL_OW 297
14258: PUSH
14259: LD_VAR 0 5
14263: LESS
14264: IFFALSE 14208
// end ; ComTurnXY ( unit , x , y ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_VAR 0 2
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: CALL_OW 118
// wait ( 5 ) ;
14285: LD_INT 5
14287: PPUSH
14288: CALL_OW 67
// _d := GetDir ( unit ) ;
14292: LD_ADDR_VAR 0 10
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 254
14306: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 1
14316: PPUSH
14317: CALL_OW 250
14321: PPUSH
14322: LD_VAR 0 10
14326: PPUSH
14327: LD_VAR 0 5
14331: PPUSH
14332: CALL_OW 272
14336: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14337: LD_ADDR_VAR 0 9
14341: PUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: CALL_OW 251
14351: PPUSH
14352: LD_VAR 0 10
14356: PPUSH
14357: LD_VAR 0 5
14361: PPUSH
14362: CALL_OW 273
14366: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14367: LD_VAR 0 8
14371: PPUSH
14372: LD_VAR 0 9
14376: PPUSH
14377: CALL_OW 488
14381: NOT
14382: IFFALSE 14386
// exit ;
14384: GO 14493
// ComAnimCustom ( unit , 1 ) ;
14386: LD_VAR 0 1
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14398: LD_VAR 0 8
14402: PPUSH
14403: LD_VAR 0 9
14407: PPUSH
14408: LD_VAR 0 6
14412: PPUSH
14413: LD_VAR 0 7
14417: PPUSH
14418: CALL_OW 330
// repeat wait ( 1 ) ;
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 316
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 314
14448: OR
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 302
14459: NOT
14460: OR
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 301
14471: OR
14472: IFFALSE 14422
// RemoveSeeing ( _x , _y , side ) ;
14474: LD_VAR 0 8
14478: PPUSH
14479: LD_VAR 0 9
14483: PPUSH
14484: LD_VAR 0 6
14488: PPUSH
14489: CALL_OW 331
// end ; end_of_file
14493: LD_VAR 0 4
14497: RET
// every 0 0$1 do
14498: GO 14500
14500: DISABLE
// begin enable ;
14501: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14502: LD_STRING updateTimer(
14504: PUSH
14505: LD_OWVAR 1
14509: STR
14510: PUSH
14511: LD_STRING );
14513: STR
14514: PPUSH
14515: CALL_OW 559
// end ;
14519: END
// export function SOS_MapStart ( ) ; begin
14520: LD_INT 0
14522: PPUSH
// if streamModeActive then
14523: LD_EXP 46
14527: IFFALSE 14536
// DefineStreamItems ( true ) ;
14529: LD_INT 1
14531: PPUSH
14532: CALL 16190 0 1
// UpdateFactoryWaypoints ( ) ;
14536: CALL 29051 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14540: CALL 29308 0 0
// end ;
14544: LD_VAR 0 1
14548: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14549: LD_INT 0
14551: PPUSH
// if p2 = 100 then
14552: LD_VAR 0 2
14556: PUSH
14557: LD_INT 100
14559: EQUAL
14560: IFFALSE 15563
// begin if not StreamModeActive then
14562: LD_EXP 46
14566: NOT
14567: IFFALSE 14577
// StreamModeActive := true ;
14569: LD_ADDR_EXP 46
14573: PUSH
14574: LD_INT 1
14576: ST_TO_ADDR
// if p3 = 0 then
14577: LD_VAR 0 3
14581: PUSH
14582: LD_INT 0
14584: EQUAL
14585: IFFALSE 14591
// InitStreamMode ;
14587: CALL 15726 0 0
// if p3 = 1 then
14591: LD_VAR 0 3
14595: PUSH
14596: LD_INT 1
14598: EQUAL
14599: IFFALSE 14609
// sRocket := true ;
14601: LD_ADDR_EXP 51
14605: PUSH
14606: LD_INT 1
14608: ST_TO_ADDR
// if p3 = 2 then
14609: LD_VAR 0 3
14613: PUSH
14614: LD_INT 2
14616: EQUAL
14617: IFFALSE 14627
// sSpeed := true ;
14619: LD_ADDR_EXP 50
14623: PUSH
14624: LD_INT 1
14626: ST_TO_ADDR
// if p3 = 3 then
14627: LD_VAR 0 3
14631: PUSH
14632: LD_INT 3
14634: EQUAL
14635: IFFALSE 14645
// sEngine := true ;
14637: LD_ADDR_EXP 52
14641: PUSH
14642: LD_INT 1
14644: ST_TO_ADDR
// if p3 = 4 then
14645: LD_VAR 0 3
14649: PUSH
14650: LD_INT 4
14652: EQUAL
14653: IFFALSE 14663
// sSpec := true ;
14655: LD_ADDR_EXP 49
14659: PUSH
14660: LD_INT 1
14662: ST_TO_ADDR
// if p3 = 5 then
14663: LD_VAR 0 3
14667: PUSH
14668: LD_INT 5
14670: EQUAL
14671: IFFALSE 14681
// sLevel := true ;
14673: LD_ADDR_EXP 53
14677: PUSH
14678: LD_INT 1
14680: ST_TO_ADDR
// if p3 = 6 then
14681: LD_VAR 0 3
14685: PUSH
14686: LD_INT 6
14688: EQUAL
14689: IFFALSE 14699
// sArmoury := true ;
14691: LD_ADDR_EXP 54
14695: PUSH
14696: LD_INT 1
14698: ST_TO_ADDR
// if p3 = 7 then
14699: LD_VAR 0 3
14703: PUSH
14704: LD_INT 7
14706: EQUAL
14707: IFFALSE 14717
// sRadar := true ;
14709: LD_ADDR_EXP 55
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// if p3 = 8 then
14717: LD_VAR 0 3
14721: PUSH
14722: LD_INT 8
14724: EQUAL
14725: IFFALSE 14735
// sBunker := true ;
14727: LD_ADDR_EXP 56
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// if p3 = 9 then
14735: LD_VAR 0 3
14739: PUSH
14740: LD_INT 9
14742: EQUAL
14743: IFFALSE 14753
// sHack := true ;
14745: LD_ADDR_EXP 57
14749: PUSH
14750: LD_INT 1
14752: ST_TO_ADDR
// if p3 = 10 then
14753: LD_VAR 0 3
14757: PUSH
14758: LD_INT 10
14760: EQUAL
14761: IFFALSE 14771
// sFire := true ;
14763: LD_ADDR_EXP 58
14767: PUSH
14768: LD_INT 1
14770: ST_TO_ADDR
// if p3 = 11 then
14771: LD_VAR 0 3
14775: PUSH
14776: LD_INT 11
14778: EQUAL
14779: IFFALSE 14789
// sRefresh := true ;
14781: LD_ADDR_EXP 59
14785: PUSH
14786: LD_INT 1
14788: ST_TO_ADDR
// if p3 = 12 then
14789: LD_VAR 0 3
14793: PUSH
14794: LD_INT 12
14796: EQUAL
14797: IFFALSE 14807
// sExp := true ;
14799: LD_ADDR_EXP 60
14803: PUSH
14804: LD_INT 1
14806: ST_TO_ADDR
// if p3 = 13 then
14807: LD_VAR 0 3
14811: PUSH
14812: LD_INT 13
14814: EQUAL
14815: IFFALSE 14825
// sDepot := true ;
14817: LD_ADDR_EXP 61
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// if p3 = 14 then
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 14
14832: EQUAL
14833: IFFALSE 14843
// sFlag := true ;
14835: LD_ADDR_EXP 62
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// if p3 = 15 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 15
14850: EQUAL
14851: IFFALSE 14861
// sKamikadze := true ;
14853: LD_ADDR_EXP 70
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// if p3 = 16 then
14861: LD_VAR 0 3
14865: PUSH
14866: LD_INT 16
14868: EQUAL
14869: IFFALSE 14879
// sTroll := true ;
14871: LD_ADDR_EXP 71
14875: PUSH
14876: LD_INT 1
14878: ST_TO_ADDR
// if p3 = 17 then
14879: LD_VAR 0 3
14883: PUSH
14884: LD_INT 17
14886: EQUAL
14887: IFFALSE 14897
// sSlow := true ;
14889: LD_ADDR_EXP 72
14893: PUSH
14894: LD_INT 1
14896: ST_TO_ADDR
// if p3 = 18 then
14897: LD_VAR 0 3
14901: PUSH
14902: LD_INT 18
14904: EQUAL
14905: IFFALSE 14915
// sLack := true ;
14907: LD_ADDR_EXP 73
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// if p3 = 19 then
14915: LD_VAR 0 3
14919: PUSH
14920: LD_INT 19
14922: EQUAL
14923: IFFALSE 14933
// sTank := true ;
14925: LD_ADDR_EXP 75
14929: PUSH
14930: LD_INT 1
14932: ST_TO_ADDR
// if p3 = 20 then
14933: LD_VAR 0 3
14937: PUSH
14938: LD_INT 20
14940: EQUAL
14941: IFFALSE 14951
// sRemote := true ;
14943: LD_ADDR_EXP 76
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// if p3 = 21 then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 21
14958: EQUAL
14959: IFFALSE 14969
// sPowell := true ;
14961: LD_ADDR_EXP 77
14965: PUSH
14966: LD_INT 1
14968: ST_TO_ADDR
// if p3 = 22 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 22
14976: EQUAL
14977: IFFALSE 14987
// sTeleport := true ;
14979: LD_ADDR_EXP 80
14983: PUSH
14984: LD_INT 1
14986: ST_TO_ADDR
// if p3 = 23 then
14987: LD_VAR 0 3
14991: PUSH
14992: LD_INT 23
14994: EQUAL
14995: IFFALSE 15005
// sOilTower := true ;
14997: LD_ADDR_EXP 82
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// if p3 = 24 then
15005: LD_VAR 0 3
15009: PUSH
15010: LD_INT 24
15012: EQUAL
15013: IFFALSE 15023
// sShovel := true ;
15015: LD_ADDR_EXP 83
15019: PUSH
15020: LD_INT 1
15022: ST_TO_ADDR
// if p3 = 25 then
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 25
15030: EQUAL
15031: IFFALSE 15041
// sSheik := true ;
15033: LD_ADDR_EXP 84
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// if p3 = 26 then
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 26
15048: EQUAL
15049: IFFALSE 15059
// sEarthquake := true ;
15051: LD_ADDR_EXP 86
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if p3 = 27 then
15059: LD_VAR 0 3
15063: PUSH
15064: LD_INT 27
15066: EQUAL
15067: IFFALSE 15077
// sAI := true ;
15069: LD_ADDR_EXP 87
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// if p3 = 28 then
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 28
15084: EQUAL
15085: IFFALSE 15095
// sCargo := true ;
15087: LD_ADDR_EXP 90
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// if p3 = 29 then
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 29
15102: EQUAL
15103: IFFALSE 15113
// sDLaser := true ;
15105: LD_ADDR_EXP 91
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// if p3 = 30 then
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 30
15120: EQUAL
15121: IFFALSE 15131
// sExchange := true ;
15123: LD_ADDR_EXP 92
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// if p3 = 31 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 31
15138: EQUAL
15139: IFFALSE 15149
// sFac := true ;
15141: LD_ADDR_EXP 93
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// if p3 = 32 then
15149: LD_VAR 0 3
15153: PUSH
15154: LD_INT 32
15156: EQUAL
15157: IFFALSE 15167
// sPower := true ;
15159: LD_ADDR_EXP 94
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// if p3 = 33 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_INT 33
15174: EQUAL
15175: IFFALSE 15185
// sRandom := true ;
15177: LD_ADDR_EXP 95
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 34 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 34
15192: EQUAL
15193: IFFALSE 15203
// sShield := true ;
15195: LD_ADDR_EXP 96
15199: PUSH
15200: LD_INT 1
15202: ST_TO_ADDR
// if p3 = 35 then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_INT 35
15210: EQUAL
15211: IFFALSE 15221
// sTime := true ;
15213: LD_ADDR_EXP 97
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// if p3 = 36 then
15221: LD_VAR 0 3
15225: PUSH
15226: LD_INT 36
15228: EQUAL
15229: IFFALSE 15239
// sTools := true ;
15231: LD_ADDR_EXP 98
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// if p3 = 101 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 101
15246: EQUAL
15247: IFFALSE 15257
// sSold := true ;
15249: LD_ADDR_EXP 63
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// if p3 = 102 then
15257: LD_VAR 0 3
15261: PUSH
15262: LD_INT 102
15264: EQUAL
15265: IFFALSE 15275
// sDiff := true ;
15267: LD_ADDR_EXP 64
15271: PUSH
15272: LD_INT 1
15274: ST_TO_ADDR
// if p3 = 103 then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 103
15282: EQUAL
15283: IFFALSE 15293
// sFog := true ;
15285: LD_ADDR_EXP 67
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// if p3 = 104 then
15293: LD_VAR 0 3
15297: PUSH
15298: LD_INT 104
15300: EQUAL
15301: IFFALSE 15311
// sReset := true ;
15303: LD_ADDR_EXP 68
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// if p3 = 105 then
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 105
15318: EQUAL
15319: IFFALSE 15329
// sSun := true ;
15321: LD_ADDR_EXP 69
15325: PUSH
15326: LD_INT 1
15328: ST_TO_ADDR
// if p3 = 106 then
15329: LD_VAR 0 3
15333: PUSH
15334: LD_INT 106
15336: EQUAL
15337: IFFALSE 15347
// sTiger := true ;
15339: LD_ADDR_EXP 65
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if p3 = 107 then
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 107
15354: EQUAL
15355: IFFALSE 15365
// sBomb := true ;
15357: LD_ADDR_EXP 66
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// if p3 = 108 then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_INT 108
15372: EQUAL
15373: IFFALSE 15383
// sWound := true ;
15375: LD_ADDR_EXP 74
15379: PUSH
15380: LD_INT 1
15382: ST_TO_ADDR
// if p3 = 109 then
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 109
15390: EQUAL
15391: IFFALSE 15401
// sBetray := true ;
15393: LD_ADDR_EXP 78
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// if p3 = 110 then
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 110
15408: EQUAL
15409: IFFALSE 15419
// sContamin := true ;
15411: LD_ADDR_EXP 79
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// if p3 = 111 then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_INT 111
15426: EQUAL
15427: IFFALSE 15437
// sOil := true ;
15429: LD_ADDR_EXP 81
15433: PUSH
15434: LD_INT 1
15436: ST_TO_ADDR
// if p3 = 112 then
15437: LD_VAR 0 3
15441: PUSH
15442: LD_INT 112
15444: EQUAL
15445: IFFALSE 15455
// sStu := true ;
15447: LD_ADDR_EXP 85
15451: PUSH
15452: LD_INT 1
15454: ST_TO_ADDR
// if p3 = 113 then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_INT 113
15462: EQUAL
15463: IFFALSE 15473
// sBazooka := true ;
15465: LD_ADDR_EXP 88
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// if p3 = 114 then
15473: LD_VAR 0 3
15477: PUSH
15478: LD_INT 114
15480: EQUAL
15481: IFFALSE 15491
// sMortar := true ;
15483: LD_ADDR_EXP 89
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// if p3 = 115 then
15491: LD_VAR 0 3
15495: PUSH
15496: LD_INT 115
15498: EQUAL
15499: IFFALSE 15509
// sRanger := true ;
15501: LD_ADDR_EXP 99
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// if p3 = 116 then
15509: LD_VAR 0 3
15513: PUSH
15514: LD_INT 116
15516: EQUAL
15517: IFFALSE 15527
// sComputer := true ;
15519: LD_ADDR_EXP 100
15523: PUSH
15524: LD_INT 1
15526: ST_TO_ADDR
// if p3 = 117 then
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 117
15534: EQUAL
15535: IFFALSE 15545
// s30 := true ;
15537: LD_ADDR_EXP 101
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// if p3 = 118 then
15545: LD_VAR 0 3
15549: PUSH
15550: LD_INT 118
15552: EQUAL
15553: IFFALSE 15563
// s60 := true ;
15555: LD_ADDR_EXP 102
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// end ; if p2 = 101 then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_INT 101
15570: EQUAL
15571: IFFALSE 15699
// begin case p3 of 1 :
15573: LD_VAR 0 3
15577: PUSH
15578: LD_INT 1
15580: DOUBLE
15581: EQUAL
15582: IFTRUE 15586
15584: GO 15593
15586: POP
// hHackUnlimitedResources ; 2 :
15587: CALL 27797 0 0
15591: GO 15699
15593: LD_INT 2
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15608
15601: POP
// hHackSetLevel10 ; 3 :
15602: CALL 27930 0 0
15606: GO 15699
15608: LD_INT 3
15610: DOUBLE
15611: EQUAL
15612: IFTRUE 15616
15614: GO 15623
15616: POP
// hHackSetLevel10YourUnits ; 4 :
15617: CALL 28015 0 0
15621: GO 15699
15623: LD_INT 4
15625: DOUBLE
15626: EQUAL
15627: IFTRUE 15631
15629: GO 15638
15631: POP
// hHackInvincible ; 5 :
15632: CALL 28463 0 0
15636: GO 15699
15638: LD_INT 5
15640: DOUBLE
15641: EQUAL
15642: IFTRUE 15646
15644: GO 15653
15646: POP
// hHackInvisible ; 6 :
15647: CALL 28574 0 0
15651: GO 15699
15653: LD_INT 6
15655: DOUBLE
15656: EQUAL
15657: IFTRUE 15661
15659: GO 15668
15661: POP
// hHackChangeYourSide ; 7 :
15662: CALL 28631 0 0
15666: GO 15699
15668: LD_INT 7
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15683
15676: POP
// hHackChangeUnitSide ; 8 :
15677: CALL 28673 0 0
15681: GO 15699
15683: LD_INT 8
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15698
15691: POP
// hHackFog ; end ;
15692: CALL 28774 0 0
15696: GO 15699
15698: POP
// end ; end ;
15699: LD_VAR 0 7
15703: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15704: GO 15706
15706: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15707: LD_STRING initStreamRollete();
15709: PPUSH
15710: CALL_OW 559
// InitStreamMode ;
15714: CALL 15726 0 0
// DefineStreamItems ( false ) ;
15718: LD_INT 0
15720: PPUSH
15721: CALL 16190 0 1
// end ;
15725: END
// function InitStreamMode ; begin
15726: LD_INT 0
15728: PPUSH
// streamModeActive := false ;
15729: LD_ADDR_EXP 46
15733: PUSH
15734: LD_INT 0
15736: ST_TO_ADDR
// normalCounter := 36 ;
15737: LD_ADDR_EXP 47
15741: PUSH
15742: LD_INT 36
15744: ST_TO_ADDR
// hardcoreCounter := 18 ;
15745: LD_ADDR_EXP 48
15749: PUSH
15750: LD_INT 18
15752: ST_TO_ADDR
// sRocket := false ;
15753: LD_ADDR_EXP 51
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
// sSpeed := false ;
15761: LD_ADDR_EXP 50
15765: PUSH
15766: LD_INT 0
15768: ST_TO_ADDR
// sEngine := false ;
15769: LD_ADDR_EXP 52
15773: PUSH
15774: LD_INT 0
15776: ST_TO_ADDR
// sSpec := false ;
15777: LD_ADDR_EXP 49
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// sLevel := false ;
15785: LD_ADDR_EXP 53
15789: PUSH
15790: LD_INT 0
15792: ST_TO_ADDR
// sArmoury := false ;
15793: LD_ADDR_EXP 54
15797: PUSH
15798: LD_INT 0
15800: ST_TO_ADDR
// sRadar := false ;
15801: LD_ADDR_EXP 55
15805: PUSH
15806: LD_INT 0
15808: ST_TO_ADDR
// sBunker := false ;
15809: LD_ADDR_EXP 56
15813: PUSH
15814: LD_INT 0
15816: ST_TO_ADDR
// sHack := false ;
15817: LD_ADDR_EXP 57
15821: PUSH
15822: LD_INT 0
15824: ST_TO_ADDR
// sFire := false ;
15825: LD_ADDR_EXP 58
15829: PUSH
15830: LD_INT 0
15832: ST_TO_ADDR
// sRefresh := false ;
15833: LD_ADDR_EXP 59
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// sExp := false ;
15841: LD_ADDR_EXP 60
15845: PUSH
15846: LD_INT 0
15848: ST_TO_ADDR
// sDepot := false ;
15849: LD_ADDR_EXP 61
15853: PUSH
15854: LD_INT 0
15856: ST_TO_ADDR
// sFlag := false ;
15857: LD_ADDR_EXP 62
15861: PUSH
15862: LD_INT 0
15864: ST_TO_ADDR
// sKamikadze := false ;
15865: LD_ADDR_EXP 70
15869: PUSH
15870: LD_INT 0
15872: ST_TO_ADDR
// sTroll := false ;
15873: LD_ADDR_EXP 71
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// sSlow := false ;
15881: LD_ADDR_EXP 72
15885: PUSH
15886: LD_INT 0
15888: ST_TO_ADDR
// sLack := false ;
15889: LD_ADDR_EXP 73
15893: PUSH
15894: LD_INT 0
15896: ST_TO_ADDR
// sTank := false ;
15897: LD_ADDR_EXP 75
15901: PUSH
15902: LD_INT 0
15904: ST_TO_ADDR
// sRemote := false ;
15905: LD_ADDR_EXP 76
15909: PUSH
15910: LD_INT 0
15912: ST_TO_ADDR
// sPowell := false ;
15913: LD_ADDR_EXP 77
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// sTeleport := false ;
15921: LD_ADDR_EXP 80
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// sOilTower := false ;
15929: LD_ADDR_EXP 82
15933: PUSH
15934: LD_INT 0
15936: ST_TO_ADDR
// sShovel := false ;
15937: LD_ADDR_EXP 83
15941: PUSH
15942: LD_INT 0
15944: ST_TO_ADDR
// sSheik := false ;
15945: LD_ADDR_EXP 84
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// sEarthquake := false ;
15953: LD_ADDR_EXP 86
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// sAI := false ;
15961: LD_ADDR_EXP 87
15965: PUSH
15966: LD_INT 0
15968: ST_TO_ADDR
// sCargo := false ;
15969: LD_ADDR_EXP 90
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// sDLaser := false ;
15977: LD_ADDR_EXP 91
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// sExchange := false ;
15985: LD_ADDR_EXP 92
15989: PUSH
15990: LD_INT 0
15992: ST_TO_ADDR
// sFac := false ;
15993: LD_ADDR_EXP 93
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// sPower := false ;
16001: LD_ADDR_EXP 94
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
// sRandom := false ;
16009: LD_ADDR_EXP 95
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// sShield := false ;
16017: LD_ADDR_EXP 96
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// sTime := false ;
16025: LD_ADDR_EXP 97
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// sTools := false ;
16033: LD_ADDR_EXP 98
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// sSold := false ;
16041: LD_ADDR_EXP 63
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// sDiff := false ;
16049: LD_ADDR_EXP 64
16053: PUSH
16054: LD_INT 0
16056: ST_TO_ADDR
// sFog := false ;
16057: LD_ADDR_EXP 67
16061: PUSH
16062: LD_INT 0
16064: ST_TO_ADDR
// sReset := false ;
16065: LD_ADDR_EXP 68
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// sSun := false ;
16073: LD_ADDR_EXP 69
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// sTiger := false ;
16081: LD_ADDR_EXP 65
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// sBomb := false ;
16089: LD_ADDR_EXP 66
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// sWound := false ;
16097: LD_ADDR_EXP 74
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// sBetray := false ;
16105: LD_ADDR_EXP 78
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// sContamin := false ;
16113: LD_ADDR_EXP 79
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// sOil := false ;
16121: LD_ADDR_EXP 81
16125: PUSH
16126: LD_INT 0
16128: ST_TO_ADDR
// sStu := false ;
16129: LD_ADDR_EXP 85
16133: PUSH
16134: LD_INT 0
16136: ST_TO_ADDR
// sBazooka := false ;
16137: LD_ADDR_EXP 88
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// sMortar := false ;
16145: LD_ADDR_EXP 89
16149: PUSH
16150: LD_INT 0
16152: ST_TO_ADDR
// sRanger := false ;
16153: LD_ADDR_EXP 99
16157: PUSH
16158: LD_INT 0
16160: ST_TO_ADDR
// sComputer := false ;
16161: LD_ADDR_EXP 100
16165: PUSH
16166: LD_INT 0
16168: ST_TO_ADDR
// s30 := false ;
16169: LD_ADDR_EXP 101
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// s60 := false ;
16177: LD_ADDR_EXP 102
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// end ;
16185: LD_VAR 0 1
16189: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16190: LD_INT 0
16192: PPUSH
16193: PPUSH
16194: PPUSH
16195: PPUSH
16196: PPUSH
16197: PPUSH
16198: PPUSH
// result := [ ] ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: EMPTY
16205: ST_TO_ADDR
// if campaign_id = 1 then
16206: LD_OWVAR 69
16210: PUSH
16211: LD_INT 1
16213: EQUAL
16214: IFFALSE 19380
// begin case mission_number of 1 :
16216: LD_OWVAR 70
16220: PUSH
16221: LD_INT 1
16223: DOUBLE
16224: EQUAL
16225: IFTRUE 16229
16227: GO 16305
16229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: LD_INT 11
16243: PUSH
16244: LD_INT 12
16246: PUSH
16247: LD_INT 15
16249: PUSH
16250: LD_INT 16
16252: PUSH
16253: LD_INT 22
16255: PUSH
16256: LD_INT 23
16258: PUSH
16259: LD_INT 26
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 101
16275: PUSH
16276: LD_INT 102
16278: PUSH
16279: LD_INT 106
16281: PUSH
16282: LD_INT 116
16284: PUSH
16285: LD_INT 117
16287: PUSH
16288: LD_INT 118
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: ST_TO_ADDR
16303: GO 19378
16305: LD_INT 2
16307: DOUBLE
16308: EQUAL
16309: IFTRUE 16313
16311: GO 16397
16313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16314: LD_ADDR_VAR 0 2
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: LD_INT 4
16324: PUSH
16325: LD_INT 11
16327: PUSH
16328: LD_INT 12
16330: PUSH
16331: LD_INT 15
16333: PUSH
16334: LD_INT 16
16336: PUSH
16337: LD_INT 22
16339: PUSH
16340: LD_INT 23
16342: PUSH
16343: LD_INT 26
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 101
16359: PUSH
16360: LD_INT 102
16362: PUSH
16363: LD_INT 105
16365: PUSH
16366: LD_INT 106
16368: PUSH
16369: LD_INT 108
16371: PUSH
16372: LD_INT 116
16374: PUSH
16375: LD_INT 117
16377: PUSH
16378: LD_INT 118
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: ST_TO_ADDR
16395: GO 19378
16397: LD_INT 3
16399: DOUBLE
16400: EQUAL
16401: IFTRUE 16405
16403: GO 16493
16405: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16406: LD_ADDR_VAR 0 2
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: LD_INT 4
16416: PUSH
16417: LD_INT 5
16419: PUSH
16420: LD_INT 11
16422: PUSH
16423: LD_INT 12
16425: PUSH
16426: LD_INT 15
16428: PUSH
16429: LD_INT 16
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 26
16437: PUSH
16438: LD_INT 36
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 101
16455: PUSH
16456: LD_INT 102
16458: PUSH
16459: LD_INT 105
16461: PUSH
16462: LD_INT 106
16464: PUSH
16465: LD_INT 108
16467: PUSH
16468: LD_INT 116
16470: PUSH
16471: LD_INT 117
16473: PUSH
16474: LD_INT 118
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 19378
16493: LD_INT 4
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16597
16501: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 4
16512: PUSH
16513: LD_INT 5
16515: PUSH
16516: LD_INT 8
16518: PUSH
16519: LD_INT 11
16521: PUSH
16522: LD_INT 12
16524: PUSH
16525: LD_INT 15
16527: PUSH
16528: LD_INT 16
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_INT 23
16536: PUSH
16537: LD_INT 26
16539: PUSH
16540: LD_INT 36
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 101
16559: PUSH
16560: LD_INT 102
16562: PUSH
16563: LD_INT 105
16565: PUSH
16566: LD_INT 106
16568: PUSH
16569: LD_INT 108
16571: PUSH
16572: LD_INT 116
16574: PUSH
16575: LD_INT 117
16577: PUSH
16578: LD_INT 118
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 19378
16597: LD_INT 5
16599: DOUBLE
16600: EQUAL
16601: IFTRUE 16605
16603: GO 16717
16605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16606: LD_ADDR_VAR 0 2
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 4
16616: PUSH
16617: LD_INT 5
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 8
16625: PUSH
16626: LD_INT 11
16628: PUSH
16629: LD_INT 12
16631: PUSH
16632: LD_INT 15
16634: PUSH
16635: LD_INT 16
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_INT 23
16643: PUSH
16644: LD_INT 25
16646: PUSH
16647: LD_INT 26
16649: PUSH
16650: LD_INT 36
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 101
16671: PUSH
16672: LD_INT 102
16674: PUSH
16675: LD_INT 105
16677: PUSH
16678: LD_INT 106
16680: PUSH
16681: LD_INT 108
16683: PUSH
16684: LD_INT 109
16686: PUSH
16687: LD_INT 112
16689: PUSH
16690: LD_INT 116
16692: PUSH
16693: LD_INT 117
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: ST_TO_ADDR
16715: GO 19378
16717: LD_INT 6
16719: DOUBLE
16720: EQUAL
16721: IFTRUE 16725
16723: GO 16857
16725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16726: LD_ADDR_VAR 0 2
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 4
16736: PUSH
16737: LD_INT 5
16739: PUSH
16740: LD_INT 6
16742: PUSH
16743: LD_INT 8
16745: PUSH
16746: LD_INT 11
16748: PUSH
16749: LD_INT 12
16751: PUSH
16752: LD_INT 15
16754: PUSH
16755: LD_INT 16
16757: PUSH
16758: LD_INT 20
16760: PUSH
16761: LD_INT 21
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 23
16769: PUSH
16770: LD_INT 25
16772: PUSH
16773: LD_INT 26
16775: PUSH
16776: LD_INT 30
16778: PUSH
16779: LD_INT 31
16781: PUSH
16782: LD_INT 32
16784: PUSH
16785: LD_INT 36
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 101
16811: PUSH
16812: LD_INT 102
16814: PUSH
16815: LD_INT 105
16817: PUSH
16818: LD_INT 106
16820: PUSH
16821: LD_INT 108
16823: PUSH
16824: LD_INT 109
16826: PUSH
16827: LD_INT 112
16829: PUSH
16830: LD_INT 116
16832: PUSH
16833: LD_INT 117
16835: PUSH
16836: LD_INT 118
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: ST_TO_ADDR
16855: GO 19378
16857: LD_INT 7
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16977
16865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 4
16876: PUSH
16877: LD_INT 5
16879: PUSH
16880: LD_INT 7
16882: PUSH
16883: LD_INT 11
16885: PUSH
16886: LD_INT 12
16888: PUSH
16889: LD_INT 15
16891: PUSH
16892: LD_INT 16
16894: PUSH
16895: LD_INT 20
16897: PUSH
16898: LD_INT 21
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_INT 23
16906: PUSH
16907: LD_INT 25
16909: PUSH
16910: LD_INT 26
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 101
16931: PUSH
16932: LD_INT 102
16934: PUSH
16935: LD_INT 103
16937: PUSH
16938: LD_INT 105
16940: PUSH
16941: LD_INT 106
16943: PUSH
16944: LD_INT 108
16946: PUSH
16947: LD_INT 112
16949: PUSH
16950: LD_INT 116
16952: PUSH
16953: LD_INT 117
16955: PUSH
16956: LD_INT 118
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: ST_TO_ADDR
16975: GO 19378
16977: LD_INT 8
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 17125
16985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16986: LD_ADDR_VAR 0 2
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 4
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: LD_INT 6
17002: PUSH
17003: LD_INT 7
17005: PUSH
17006: LD_INT 8
17008: PUSH
17009: LD_INT 11
17011: PUSH
17012: LD_INT 12
17014: PUSH
17015: LD_INT 15
17017: PUSH
17018: LD_INT 16
17020: PUSH
17021: LD_INT 20
17023: PUSH
17024: LD_INT 21
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_INT 23
17032: PUSH
17033: LD_INT 25
17035: PUSH
17036: LD_INT 26
17038: PUSH
17039: LD_INT 30
17041: PUSH
17042: LD_INT 31
17044: PUSH
17045: LD_INT 32
17047: PUSH
17048: LD_INT 36
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 101
17075: PUSH
17076: LD_INT 102
17078: PUSH
17079: LD_INT 103
17081: PUSH
17082: LD_INT 105
17084: PUSH
17085: LD_INT 106
17087: PUSH
17088: LD_INT 108
17090: PUSH
17091: LD_INT 109
17093: PUSH
17094: LD_INT 112
17096: PUSH
17097: LD_INT 116
17099: PUSH
17100: LD_INT 117
17102: PUSH
17103: LD_INT 118
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: ST_TO_ADDR
17123: GO 19378
17125: LD_INT 9
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17281
17133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17134: LD_ADDR_VAR 0 2
17138: PUSH
17139: LD_INT 2
17141: PUSH
17142: LD_INT 4
17144: PUSH
17145: LD_INT 5
17147: PUSH
17148: LD_INT 6
17150: PUSH
17151: LD_INT 7
17153: PUSH
17154: LD_INT 8
17156: PUSH
17157: LD_INT 11
17159: PUSH
17160: LD_INT 12
17162: PUSH
17163: LD_INT 15
17165: PUSH
17166: LD_INT 16
17168: PUSH
17169: LD_INT 20
17171: PUSH
17172: LD_INT 21
17174: PUSH
17175: LD_INT 22
17177: PUSH
17178: LD_INT 23
17180: PUSH
17181: LD_INT 25
17183: PUSH
17184: LD_INT 26
17186: PUSH
17187: LD_INT 28
17189: PUSH
17190: LD_INT 30
17192: PUSH
17193: LD_INT 31
17195: PUSH
17196: LD_INT 32
17198: PUSH
17199: LD_INT 36
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 101
17227: PUSH
17228: LD_INT 102
17230: PUSH
17231: LD_INT 103
17233: PUSH
17234: LD_INT 105
17236: PUSH
17237: LD_INT 106
17239: PUSH
17240: LD_INT 108
17242: PUSH
17243: LD_INT 109
17245: PUSH
17246: LD_INT 112
17248: PUSH
17249: LD_INT 114
17251: PUSH
17252: LD_INT 116
17254: PUSH
17255: LD_INT 117
17257: PUSH
17258: LD_INT 118
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: ST_TO_ADDR
17279: GO 19378
17281: LD_INT 10
17283: DOUBLE
17284: EQUAL
17285: IFTRUE 17289
17287: GO 17485
17289: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: LD_INT 4
17300: PUSH
17301: LD_INT 5
17303: PUSH
17304: LD_INT 6
17306: PUSH
17307: LD_INT 7
17309: PUSH
17310: LD_INT 8
17312: PUSH
17313: LD_INT 9
17315: PUSH
17316: LD_INT 10
17318: PUSH
17319: LD_INT 11
17321: PUSH
17322: LD_INT 12
17324: PUSH
17325: LD_INT 13
17327: PUSH
17328: LD_INT 14
17330: PUSH
17331: LD_INT 15
17333: PUSH
17334: LD_INT 16
17336: PUSH
17337: LD_INT 17
17339: PUSH
17340: LD_INT 18
17342: PUSH
17343: LD_INT 19
17345: PUSH
17346: LD_INT 20
17348: PUSH
17349: LD_INT 21
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 23
17357: PUSH
17358: LD_INT 24
17360: PUSH
17361: LD_INT 25
17363: PUSH
17364: LD_INT 26
17366: PUSH
17367: LD_INT 28
17369: PUSH
17370: LD_INT 30
17372: PUSH
17373: LD_INT 31
17375: PUSH
17376: LD_INT 32
17378: PUSH
17379: LD_INT 36
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 101
17415: PUSH
17416: LD_INT 102
17418: PUSH
17419: LD_INT 103
17421: PUSH
17422: LD_INT 104
17424: PUSH
17425: LD_INT 105
17427: PUSH
17428: LD_INT 106
17430: PUSH
17431: LD_INT 107
17433: PUSH
17434: LD_INT 108
17436: PUSH
17437: LD_INT 109
17439: PUSH
17440: LD_INT 110
17442: PUSH
17443: LD_INT 111
17445: PUSH
17446: LD_INT 112
17448: PUSH
17449: LD_INT 114
17451: PUSH
17452: LD_INT 116
17454: PUSH
17455: LD_INT 117
17457: PUSH
17458: LD_INT 118
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: ST_TO_ADDR
17483: GO 19378
17485: LD_INT 11
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17697
17493: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17494: LD_ADDR_VAR 0 2
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 3
17504: PUSH
17505: LD_INT 4
17507: PUSH
17508: LD_INT 5
17510: PUSH
17511: LD_INT 6
17513: PUSH
17514: LD_INT 7
17516: PUSH
17517: LD_INT 8
17519: PUSH
17520: LD_INT 9
17522: PUSH
17523: LD_INT 10
17525: PUSH
17526: LD_INT 11
17528: PUSH
17529: LD_INT 12
17531: PUSH
17532: LD_INT 13
17534: PUSH
17535: LD_INT 14
17537: PUSH
17538: LD_INT 15
17540: PUSH
17541: LD_INT 16
17543: PUSH
17544: LD_INT 17
17546: PUSH
17547: LD_INT 18
17549: PUSH
17550: LD_INT 19
17552: PUSH
17553: LD_INT 20
17555: PUSH
17556: LD_INT 21
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_INT 23
17564: PUSH
17565: LD_INT 24
17567: PUSH
17568: LD_INT 25
17570: PUSH
17571: LD_INT 26
17573: PUSH
17574: LD_INT 28
17576: PUSH
17577: LD_INT 30
17579: PUSH
17580: LD_INT 31
17582: PUSH
17583: LD_INT 32
17585: PUSH
17586: LD_INT 34
17588: PUSH
17589: LD_INT 36
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 101
17627: PUSH
17628: LD_INT 102
17630: PUSH
17631: LD_INT 103
17633: PUSH
17634: LD_INT 104
17636: PUSH
17637: LD_INT 105
17639: PUSH
17640: LD_INT 106
17642: PUSH
17643: LD_INT 107
17645: PUSH
17646: LD_INT 108
17648: PUSH
17649: LD_INT 109
17651: PUSH
17652: LD_INT 110
17654: PUSH
17655: LD_INT 111
17657: PUSH
17658: LD_INT 112
17660: PUSH
17661: LD_INT 114
17663: PUSH
17664: LD_INT 116
17666: PUSH
17667: LD_INT 117
17669: PUSH
17670: LD_INT 118
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: ST_TO_ADDR
17695: GO 19378
17697: LD_INT 12
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17925
17705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: LD_INT 4
17722: PUSH
17723: LD_INT 5
17725: PUSH
17726: LD_INT 6
17728: PUSH
17729: LD_INT 7
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: LD_INT 9
17737: PUSH
17738: LD_INT 10
17740: PUSH
17741: LD_INT 11
17743: PUSH
17744: LD_INT 12
17746: PUSH
17747: LD_INT 13
17749: PUSH
17750: LD_INT 14
17752: PUSH
17753: LD_INT 15
17755: PUSH
17756: LD_INT 16
17758: PUSH
17759: LD_INT 17
17761: PUSH
17762: LD_INT 18
17764: PUSH
17765: LD_INT 19
17767: PUSH
17768: LD_INT 20
17770: PUSH
17771: LD_INT 21
17773: PUSH
17774: LD_INT 22
17776: PUSH
17777: LD_INT 23
17779: PUSH
17780: LD_INT 24
17782: PUSH
17783: LD_INT 25
17785: PUSH
17786: LD_INT 26
17788: PUSH
17789: LD_INT 27
17791: PUSH
17792: LD_INT 28
17794: PUSH
17795: LD_INT 30
17797: PUSH
17798: LD_INT 31
17800: PUSH
17801: LD_INT 32
17803: PUSH
17804: LD_INT 33
17806: PUSH
17807: LD_INT 34
17809: PUSH
17810: LD_INT 36
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 101
17851: PUSH
17852: LD_INT 102
17854: PUSH
17855: LD_INT 103
17857: PUSH
17858: LD_INT 104
17860: PUSH
17861: LD_INT 105
17863: PUSH
17864: LD_INT 106
17866: PUSH
17867: LD_INT 107
17869: PUSH
17870: LD_INT 108
17872: PUSH
17873: LD_INT 109
17875: PUSH
17876: LD_INT 110
17878: PUSH
17879: LD_INT 111
17881: PUSH
17882: LD_INT 112
17884: PUSH
17885: LD_INT 113
17887: PUSH
17888: LD_INT 114
17890: PUSH
17891: LD_INT 116
17893: PUSH
17894: LD_INT 117
17896: PUSH
17897: LD_INT 118
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: ST_TO_ADDR
17923: GO 19378
17925: LD_INT 13
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 18141
17933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_INT 1
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 3
17947: PUSH
17948: LD_INT 4
17950: PUSH
17951: LD_INT 5
17953: PUSH
17954: LD_INT 8
17956: PUSH
17957: LD_INT 9
17959: PUSH
17960: LD_INT 10
17962: PUSH
17963: LD_INT 11
17965: PUSH
17966: LD_INT 12
17968: PUSH
17969: LD_INT 14
17971: PUSH
17972: LD_INT 15
17974: PUSH
17975: LD_INT 16
17977: PUSH
17978: LD_INT 17
17980: PUSH
17981: LD_INT 18
17983: PUSH
17984: LD_INT 19
17986: PUSH
17987: LD_INT 20
17989: PUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 22
17995: PUSH
17996: LD_INT 23
17998: PUSH
17999: LD_INT 24
18001: PUSH
18002: LD_INT 25
18004: PUSH
18005: LD_INT 26
18007: PUSH
18008: LD_INT 27
18010: PUSH
18011: LD_INT 28
18013: PUSH
18014: LD_INT 30
18016: PUSH
18017: LD_INT 31
18019: PUSH
18020: LD_INT 32
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: LD_INT 34
18028: PUSH
18029: LD_INT 36
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 101
18067: PUSH
18068: LD_INT 102
18070: PUSH
18071: LD_INT 103
18073: PUSH
18074: LD_INT 104
18076: PUSH
18077: LD_INT 105
18079: PUSH
18080: LD_INT 106
18082: PUSH
18083: LD_INT 107
18085: PUSH
18086: LD_INT 108
18088: PUSH
18089: LD_INT 109
18091: PUSH
18092: LD_INT 110
18094: PUSH
18095: LD_INT 111
18097: PUSH
18098: LD_INT 112
18100: PUSH
18101: LD_INT 113
18103: PUSH
18104: LD_INT 114
18106: PUSH
18107: LD_INT 116
18109: PUSH
18110: LD_INT 117
18112: PUSH
18113: LD_INT 118
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: ST_TO_ADDR
18139: GO 19378
18141: LD_INT 14
18143: DOUBLE
18144: EQUAL
18145: IFTRUE 18149
18147: GO 18373
18149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 3
18163: PUSH
18164: LD_INT 4
18166: PUSH
18167: LD_INT 5
18169: PUSH
18170: LD_INT 6
18172: PUSH
18173: LD_INT 7
18175: PUSH
18176: LD_INT 8
18178: PUSH
18179: LD_INT 9
18181: PUSH
18182: LD_INT 10
18184: PUSH
18185: LD_INT 11
18187: PUSH
18188: LD_INT 12
18190: PUSH
18191: LD_INT 13
18193: PUSH
18194: LD_INT 14
18196: PUSH
18197: LD_INT 15
18199: PUSH
18200: LD_INT 16
18202: PUSH
18203: LD_INT 17
18205: PUSH
18206: LD_INT 18
18208: PUSH
18209: LD_INT 19
18211: PUSH
18212: LD_INT 20
18214: PUSH
18215: LD_INT 21
18217: PUSH
18218: LD_INT 22
18220: PUSH
18221: LD_INT 23
18223: PUSH
18224: LD_INT 24
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 27
18235: PUSH
18236: LD_INT 28
18238: PUSH
18239: LD_INT 29
18241: PUSH
18242: LD_INT 30
18244: PUSH
18245: LD_INT 31
18247: PUSH
18248: LD_INT 32
18250: PUSH
18251: LD_INT 33
18253: PUSH
18254: LD_INT 34
18256: PUSH
18257: LD_INT 36
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 101
18299: PUSH
18300: LD_INT 102
18302: PUSH
18303: LD_INT 103
18305: PUSH
18306: LD_INT 104
18308: PUSH
18309: LD_INT 105
18311: PUSH
18312: LD_INT 106
18314: PUSH
18315: LD_INT 107
18317: PUSH
18318: LD_INT 108
18320: PUSH
18321: LD_INT 109
18323: PUSH
18324: LD_INT 110
18326: PUSH
18327: LD_INT 111
18329: PUSH
18330: LD_INT 112
18332: PUSH
18333: LD_INT 113
18335: PUSH
18336: LD_INT 114
18338: PUSH
18339: LD_INT 116
18341: PUSH
18342: LD_INT 117
18344: PUSH
18345: LD_INT 118
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: ST_TO_ADDR
18371: GO 19378
18373: LD_INT 15
18375: DOUBLE
18376: EQUAL
18377: IFTRUE 18381
18379: GO 18605
18381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18382: LD_ADDR_VAR 0 2
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: LD_INT 3
18395: PUSH
18396: LD_INT 4
18398: PUSH
18399: LD_INT 5
18401: PUSH
18402: LD_INT 6
18404: PUSH
18405: LD_INT 7
18407: PUSH
18408: LD_INT 8
18410: PUSH
18411: LD_INT 9
18413: PUSH
18414: LD_INT 10
18416: PUSH
18417: LD_INT 11
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: LD_INT 13
18425: PUSH
18426: LD_INT 14
18428: PUSH
18429: LD_INT 15
18431: PUSH
18432: LD_INT 16
18434: PUSH
18435: LD_INT 17
18437: PUSH
18438: LD_INT 18
18440: PUSH
18441: LD_INT 19
18443: PUSH
18444: LD_INT 20
18446: PUSH
18447: LD_INT 21
18449: PUSH
18450: LD_INT 22
18452: PUSH
18453: LD_INT 23
18455: PUSH
18456: LD_INT 24
18458: PUSH
18459: LD_INT 25
18461: PUSH
18462: LD_INT 26
18464: PUSH
18465: LD_INT 27
18467: PUSH
18468: LD_INT 28
18470: PUSH
18471: LD_INT 29
18473: PUSH
18474: LD_INT 30
18476: PUSH
18477: LD_INT 31
18479: PUSH
18480: LD_INT 32
18482: PUSH
18483: LD_INT 33
18485: PUSH
18486: LD_INT 34
18488: PUSH
18489: LD_INT 36
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 101
18531: PUSH
18532: LD_INT 102
18534: PUSH
18535: LD_INT 103
18537: PUSH
18538: LD_INT 104
18540: PUSH
18541: LD_INT 105
18543: PUSH
18544: LD_INT 106
18546: PUSH
18547: LD_INT 107
18549: PUSH
18550: LD_INT 108
18552: PUSH
18553: LD_INT 109
18555: PUSH
18556: LD_INT 110
18558: PUSH
18559: LD_INT 111
18561: PUSH
18562: LD_INT 112
18564: PUSH
18565: LD_INT 113
18567: PUSH
18568: LD_INT 114
18570: PUSH
18571: LD_INT 116
18573: PUSH
18574: LD_INT 117
18576: PUSH
18577: LD_INT 118
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: ST_TO_ADDR
18603: GO 19378
18605: LD_INT 16
18607: DOUBLE
18608: EQUAL
18609: IFTRUE 18613
18611: GO 18749
18613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 4
18624: PUSH
18625: LD_INT 5
18627: PUSH
18628: LD_INT 7
18630: PUSH
18631: LD_INT 11
18633: PUSH
18634: LD_INT 12
18636: PUSH
18637: LD_INT 15
18639: PUSH
18640: LD_INT 16
18642: PUSH
18643: LD_INT 20
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 23
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 26
18660: PUSH
18661: LD_INT 30
18663: PUSH
18664: LD_INT 31
18666: PUSH
18667: LD_INT 32
18669: PUSH
18670: LD_INT 33
18672: PUSH
18673: LD_INT 34
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 101
18699: PUSH
18700: LD_INT 102
18702: PUSH
18703: LD_INT 103
18705: PUSH
18706: LD_INT 106
18708: PUSH
18709: LD_INT 108
18711: PUSH
18712: LD_INT 112
18714: PUSH
18715: LD_INT 113
18717: PUSH
18718: LD_INT 114
18720: PUSH
18721: LD_INT 116
18723: PUSH
18724: LD_INT 117
18726: PUSH
18727: LD_INT 118
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: ST_TO_ADDR
18747: GO 19378
18749: LD_INT 17
18751: DOUBLE
18752: EQUAL
18753: IFTRUE 18757
18755: GO 18981
18757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18758: LD_ADDR_VAR 0 2
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 3
18771: PUSH
18772: LD_INT 4
18774: PUSH
18775: LD_INT 5
18777: PUSH
18778: LD_INT 6
18780: PUSH
18781: LD_INT 7
18783: PUSH
18784: LD_INT 8
18786: PUSH
18787: LD_INT 9
18789: PUSH
18790: LD_INT 10
18792: PUSH
18793: LD_INT 11
18795: PUSH
18796: LD_INT 12
18798: PUSH
18799: LD_INT 13
18801: PUSH
18802: LD_INT 14
18804: PUSH
18805: LD_INT 15
18807: PUSH
18808: LD_INT 16
18810: PUSH
18811: LD_INT 17
18813: PUSH
18814: LD_INT 18
18816: PUSH
18817: LD_INT 19
18819: PUSH
18820: LD_INT 20
18822: PUSH
18823: LD_INT 21
18825: PUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 23
18831: PUSH
18832: LD_INT 24
18834: PUSH
18835: LD_INT 25
18837: PUSH
18838: LD_INT 26
18840: PUSH
18841: LD_INT 27
18843: PUSH
18844: LD_INT 28
18846: PUSH
18847: LD_INT 29
18849: PUSH
18850: LD_INT 30
18852: PUSH
18853: LD_INT 31
18855: PUSH
18856: LD_INT 32
18858: PUSH
18859: LD_INT 33
18861: PUSH
18862: LD_INT 34
18864: PUSH
18865: LD_INT 36
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 101
18907: PUSH
18908: LD_INT 102
18910: PUSH
18911: LD_INT 103
18913: PUSH
18914: LD_INT 104
18916: PUSH
18917: LD_INT 105
18919: PUSH
18920: LD_INT 106
18922: PUSH
18923: LD_INT 107
18925: PUSH
18926: LD_INT 108
18928: PUSH
18929: LD_INT 109
18931: PUSH
18932: LD_INT 110
18934: PUSH
18935: LD_INT 111
18937: PUSH
18938: LD_INT 112
18940: PUSH
18941: LD_INT 113
18943: PUSH
18944: LD_INT 114
18946: PUSH
18947: LD_INT 116
18949: PUSH
18950: LD_INT 117
18952: PUSH
18953: LD_INT 118
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: ST_TO_ADDR
18979: GO 19378
18981: LD_INT 18
18983: DOUBLE
18984: EQUAL
18985: IFTRUE 18989
18987: GO 19137
18989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18990: LD_ADDR_VAR 0 2
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 4
19000: PUSH
19001: LD_INT 5
19003: PUSH
19004: LD_INT 7
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: LD_INT 15
19015: PUSH
19016: LD_INT 16
19018: PUSH
19019: LD_INT 20
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_INT 23
19030: PUSH
19031: LD_INT 25
19033: PUSH
19034: LD_INT 26
19036: PUSH
19037: LD_INT 30
19039: PUSH
19040: LD_INT 31
19042: PUSH
19043: LD_INT 32
19045: PUSH
19046: LD_INT 33
19048: PUSH
19049: LD_INT 34
19051: PUSH
19052: LD_INT 35
19054: PUSH
19055: LD_INT 36
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 101
19083: PUSH
19084: LD_INT 102
19086: PUSH
19087: LD_INT 103
19089: PUSH
19090: LD_INT 106
19092: PUSH
19093: LD_INT 108
19095: PUSH
19096: LD_INT 112
19098: PUSH
19099: LD_INT 113
19101: PUSH
19102: LD_INT 114
19104: PUSH
19105: LD_INT 115
19107: PUSH
19108: LD_INT 116
19110: PUSH
19111: LD_INT 117
19113: PUSH
19114: LD_INT 118
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: ST_TO_ADDR
19135: GO 19378
19137: LD_INT 19
19139: DOUBLE
19140: EQUAL
19141: IFTRUE 19145
19143: GO 19377
19145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 4
19162: PUSH
19163: LD_INT 5
19165: PUSH
19166: LD_INT 6
19168: PUSH
19169: LD_INT 7
19171: PUSH
19172: LD_INT 8
19174: PUSH
19175: LD_INT 9
19177: PUSH
19178: LD_INT 10
19180: PUSH
19181: LD_INT 11
19183: PUSH
19184: LD_INT 12
19186: PUSH
19187: LD_INT 13
19189: PUSH
19190: LD_INT 14
19192: PUSH
19193: LD_INT 15
19195: PUSH
19196: LD_INT 16
19198: PUSH
19199: LD_INT 17
19201: PUSH
19202: LD_INT 18
19204: PUSH
19205: LD_INT 19
19207: PUSH
19208: LD_INT 20
19210: PUSH
19211: LD_INT 21
19213: PUSH
19214: LD_INT 22
19216: PUSH
19217: LD_INT 23
19219: PUSH
19220: LD_INT 24
19222: PUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 26
19228: PUSH
19229: LD_INT 27
19231: PUSH
19232: LD_INT 28
19234: PUSH
19235: LD_INT 29
19237: PUSH
19238: LD_INT 30
19240: PUSH
19241: LD_INT 31
19243: PUSH
19244: LD_INT 32
19246: PUSH
19247: LD_INT 33
19249: PUSH
19250: LD_INT 34
19252: PUSH
19253: LD_INT 35
19255: PUSH
19256: LD_INT 36
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 101
19299: PUSH
19300: LD_INT 102
19302: PUSH
19303: LD_INT 103
19305: PUSH
19306: LD_INT 104
19308: PUSH
19309: LD_INT 105
19311: PUSH
19312: LD_INT 106
19314: PUSH
19315: LD_INT 107
19317: PUSH
19318: LD_INT 108
19320: PUSH
19321: LD_INT 109
19323: PUSH
19324: LD_INT 110
19326: PUSH
19327: LD_INT 111
19329: PUSH
19330: LD_INT 112
19332: PUSH
19333: LD_INT 113
19335: PUSH
19336: LD_INT 114
19338: PUSH
19339: LD_INT 115
19341: PUSH
19342: LD_INT 116
19344: PUSH
19345: LD_INT 117
19347: PUSH
19348: LD_INT 118
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: ST_TO_ADDR
19375: GO 19378
19377: POP
// end else
19378: GO 19609
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: LD_INT 4
19396: PUSH
19397: LD_INT 5
19399: PUSH
19400: LD_INT 6
19402: PUSH
19403: LD_INT 7
19405: PUSH
19406: LD_INT 8
19408: PUSH
19409: LD_INT 9
19411: PUSH
19412: LD_INT 10
19414: PUSH
19415: LD_INT 11
19417: PUSH
19418: LD_INT 12
19420: PUSH
19421: LD_INT 13
19423: PUSH
19424: LD_INT 14
19426: PUSH
19427: LD_INT 15
19429: PUSH
19430: LD_INT 16
19432: PUSH
19433: LD_INT 17
19435: PUSH
19436: LD_INT 18
19438: PUSH
19439: LD_INT 19
19441: PUSH
19442: LD_INT 20
19444: PUSH
19445: LD_INT 21
19447: PUSH
19448: LD_INT 22
19450: PUSH
19451: LD_INT 23
19453: PUSH
19454: LD_INT 24
19456: PUSH
19457: LD_INT 25
19459: PUSH
19460: LD_INT 26
19462: PUSH
19463: LD_INT 27
19465: PUSH
19466: LD_INT 28
19468: PUSH
19469: LD_INT 29
19471: PUSH
19472: LD_INT 30
19474: PUSH
19475: LD_INT 31
19477: PUSH
19478: LD_INT 32
19480: PUSH
19481: LD_INT 33
19483: PUSH
19484: LD_INT 34
19486: PUSH
19487: LD_INT 35
19489: PUSH
19490: LD_INT 36
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 101
19533: PUSH
19534: LD_INT 102
19536: PUSH
19537: LD_INT 103
19539: PUSH
19540: LD_INT 104
19542: PUSH
19543: LD_INT 105
19545: PUSH
19546: LD_INT 106
19548: PUSH
19549: LD_INT 107
19551: PUSH
19552: LD_INT 108
19554: PUSH
19555: LD_INT 109
19557: PUSH
19558: LD_INT 110
19560: PUSH
19561: LD_INT 111
19563: PUSH
19564: LD_INT 112
19566: PUSH
19567: LD_INT 113
19569: PUSH
19570: LD_INT 114
19572: PUSH
19573: LD_INT 115
19575: PUSH
19576: LD_INT 116
19578: PUSH
19579: LD_INT 117
19581: PUSH
19582: LD_INT 118
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: ST_TO_ADDR
// if result then
19609: LD_VAR 0 2
19613: IFFALSE 20399
// begin normal :=  ;
19615: LD_ADDR_VAR 0 5
19619: PUSH
19620: LD_STRING 
19622: ST_TO_ADDR
// hardcore :=  ;
19623: LD_ADDR_VAR 0 6
19627: PUSH
19628: LD_STRING 
19630: ST_TO_ADDR
// active :=  ;
19631: LD_ADDR_VAR 0 7
19635: PUSH
19636: LD_STRING 
19638: ST_TO_ADDR
// for i = 1 to normalCounter do
19639: LD_ADDR_VAR 0 8
19643: PUSH
19644: DOUBLE
19645: LD_INT 1
19647: DEC
19648: ST_TO_ADDR
19649: LD_EXP 47
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19756
// begin tmp := 0 ;
19657: LD_ADDR_VAR 0 3
19661: PUSH
19662: LD_STRING 0
19664: ST_TO_ADDR
// if result [ 1 ] then
19665: LD_VAR 0 2
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: IFFALSE 19738
// if result [ 1 ] [ 1 ] = i then
19675: LD_VAR 0 2
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PUSH
19684: LD_INT 1
19686: ARRAY
19687: PUSH
19688: LD_VAR 0 8
19692: EQUAL
19693: IFFALSE 19738
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: LD_VAR 0 2
19712: PUSH
19713: LD_INT 1
19715: ARRAY
19716: PPUSH
19717: LD_INT 1
19719: PPUSH
19720: CALL_OW 3
19724: PPUSH
19725: CALL_OW 1
19729: ST_TO_ADDR
// tmp := 1 ;
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_STRING 1
19737: ST_TO_ADDR
// end ; normal := normal & tmp ;
19738: LD_ADDR_VAR 0 5
19742: PUSH
19743: LD_VAR 0 5
19747: PUSH
19748: LD_VAR 0 3
19752: STR
19753: ST_TO_ADDR
// end ;
19754: GO 19654
19756: POP
19757: POP
// for i = 1 to hardcoreCounter do
19758: LD_ADDR_VAR 0 8
19762: PUSH
19763: DOUBLE
19764: LD_INT 1
19766: DEC
19767: ST_TO_ADDR
19768: LD_EXP 48
19772: PUSH
19773: FOR_TO
19774: IFFALSE 19879
// begin tmp := 0 ;
19776: LD_ADDR_VAR 0 3
19780: PUSH
19781: LD_STRING 0
19783: ST_TO_ADDR
// if result [ 2 ] then
19784: LD_VAR 0 2
19788: PUSH
19789: LD_INT 2
19791: ARRAY
19792: IFFALSE 19861
// if result [ 2 ] [ 1 ] = 100 + i then
19794: LD_VAR 0 2
19798: PUSH
19799: LD_INT 2
19801: ARRAY
19802: PUSH
19803: LD_INT 1
19805: ARRAY
19806: PUSH
19807: LD_INT 100
19809: PUSH
19810: LD_VAR 0 8
19814: PLUS
19815: EQUAL
19816: IFFALSE 19861
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19818: LD_ADDR_VAR 0 2
19822: PUSH
19823: LD_VAR 0 2
19827: PPUSH
19828: LD_INT 2
19830: PPUSH
19831: LD_VAR 0 2
19835: PUSH
19836: LD_INT 2
19838: ARRAY
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL_OW 3
19847: PPUSH
19848: CALL_OW 1
19852: ST_TO_ADDR
// tmp := 1 ;
19853: LD_ADDR_VAR 0 3
19857: PUSH
19858: LD_STRING 1
19860: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19861: LD_ADDR_VAR 0 6
19865: PUSH
19866: LD_VAR 0 6
19870: PUSH
19871: LD_VAR 0 3
19875: STR
19876: ST_TO_ADDR
// end ;
19877: GO 19773
19879: POP
19880: POP
// if isGameLoad then
19881: LD_VAR 0 1
19885: IFFALSE 20360
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19887: LD_ADDR_VAR 0 4
19891: PUSH
19892: LD_EXP 51
19896: PUSH
19897: LD_EXP 50
19901: PUSH
19902: LD_EXP 52
19906: PUSH
19907: LD_EXP 49
19911: PUSH
19912: LD_EXP 53
19916: PUSH
19917: LD_EXP 54
19921: PUSH
19922: LD_EXP 55
19926: PUSH
19927: LD_EXP 56
19931: PUSH
19932: LD_EXP 57
19936: PUSH
19937: LD_EXP 58
19941: PUSH
19942: LD_EXP 59
19946: PUSH
19947: LD_EXP 60
19951: PUSH
19952: LD_EXP 61
19956: PUSH
19957: LD_EXP 62
19961: PUSH
19962: LD_EXP 70
19966: PUSH
19967: LD_EXP 71
19971: PUSH
19972: LD_EXP 72
19976: PUSH
19977: LD_EXP 73
19981: PUSH
19982: LD_EXP 75
19986: PUSH
19987: LD_EXP 76
19991: PUSH
19992: LD_EXP 77
19996: PUSH
19997: LD_EXP 80
20001: PUSH
20002: LD_EXP 82
20006: PUSH
20007: LD_EXP 83
20011: PUSH
20012: LD_EXP 84
20016: PUSH
20017: LD_EXP 86
20021: PUSH
20022: LD_EXP 87
20026: PUSH
20027: LD_EXP 90
20031: PUSH
20032: LD_EXP 91
20036: PUSH
20037: LD_EXP 92
20041: PUSH
20042: LD_EXP 93
20046: PUSH
20047: LD_EXP 94
20051: PUSH
20052: LD_EXP 95
20056: PUSH
20057: LD_EXP 96
20061: PUSH
20062: LD_EXP 97
20066: PUSH
20067: LD_EXP 98
20071: PUSH
20072: LD_EXP 63
20076: PUSH
20077: LD_EXP 64
20081: PUSH
20082: LD_EXP 67
20086: PUSH
20087: LD_EXP 68
20091: PUSH
20092: LD_EXP 69
20096: PUSH
20097: LD_EXP 65
20101: PUSH
20102: LD_EXP 66
20106: PUSH
20107: LD_EXP 74
20111: PUSH
20112: LD_EXP 78
20116: PUSH
20117: LD_EXP 79
20121: PUSH
20122: LD_EXP 81
20126: PUSH
20127: LD_EXP 85
20131: PUSH
20132: LD_EXP 88
20136: PUSH
20137: LD_EXP 89
20141: PUSH
20142: LD_EXP 99
20146: PUSH
20147: LD_EXP 100
20151: PUSH
20152: LD_EXP 101
20156: PUSH
20157: LD_EXP 102
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: ST_TO_ADDR
// tmp :=  ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_STRING 
20225: ST_TO_ADDR
// for i = 1 to normalCounter do
20226: LD_ADDR_VAR 0 8
20230: PUSH
20231: DOUBLE
20232: LD_INT 1
20234: DEC
20235: ST_TO_ADDR
20236: LD_EXP 47
20240: PUSH
20241: FOR_TO
20242: IFFALSE 20278
// begin if flags [ i ] then
20244: LD_VAR 0 4
20248: PUSH
20249: LD_VAR 0 8
20253: ARRAY
20254: IFFALSE 20276
// tmp := tmp & i & ; ;
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_VAR 0 3
20265: PUSH
20266: LD_VAR 0 8
20270: STR
20271: PUSH
20272: LD_STRING ;
20274: STR
20275: ST_TO_ADDR
// end ;
20276: GO 20241
20278: POP
20279: POP
// for i = 1 to hardcoreCounter do
20280: LD_ADDR_VAR 0 8
20284: PUSH
20285: DOUBLE
20286: LD_INT 1
20288: DEC
20289: ST_TO_ADDR
20290: LD_EXP 48
20294: PUSH
20295: FOR_TO
20296: IFFALSE 20342
// begin if flags [ normalCounter + i ] then
20298: LD_VAR 0 4
20302: PUSH
20303: LD_EXP 47
20307: PUSH
20308: LD_VAR 0 8
20312: PLUS
20313: ARRAY
20314: IFFALSE 20340
// tmp := tmp & ( 100 + i ) & ; ;
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 100
20328: PUSH
20329: LD_VAR 0 8
20333: PLUS
20334: STR
20335: PUSH
20336: LD_STRING ;
20338: STR
20339: ST_TO_ADDR
// end ;
20340: GO 20295
20342: POP
20343: POP
// if tmp then
20344: LD_VAR 0 3
20348: IFFALSE 20360
// active := tmp ;
20350: LD_ADDR_VAR 0 7
20354: PUSH
20355: LD_VAR 0 3
20359: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20360: LD_STRING getStreamItemsFromMission("
20362: PUSH
20363: LD_VAR 0 5
20367: STR
20368: PUSH
20369: LD_STRING ","
20371: STR
20372: PUSH
20373: LD_VAR 0 6
20377: STR
20378: PUSH
20379: LD_STRING ","
20381: STR
20382: PUSH
20383: LD_VAR 0 7
20387: STR
20388: PUSH
20389: LD_STRING ")
20391: STR
20392: PPUSH
20393: CALL_OW 559
// end else
20397: GO 20406
// ToLua ( getStreamItemsFromMission("","","") ) ;
20399: LD_STRING getStreamItemsFromMission("","","")
20401: PPUSH
20402: CALL_OW 559
// end ;
20406: LD_VAR 0 2
20410: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20411: LD_EXP 46
20415: PUSH
20416: LD_EXP 51
20420: AND
20421: IFFALSE 20545
20423: GO 20425
20425: DISABLE
20426: LD_INT 0
20428: PPUSH
20429: PPUSH
// begin enable ;
20430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20431: LD_ADDR_VAR 0 2
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_OWVAR 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 34
20453: PUSH
20454: LD_INT 7
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 34
20463: PUSH
20464: LD_INT 45
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 34
20473: PUSH
20474: LD_INT 28
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 34
20483: PUSH
20484: LD_INT 47
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PPUSH
20502: CALL_OW 69
20506: ST_TO_ADDR
// if not tmp then
20507: LD_VAR 0 2
20511: NOT
20512: IFFALSE 20516
// exit ;
20514: GO 20545
// for i in tmp do
20516: LD_ADDR_VAR 0 1
20520: PUSH
20521: LD_VAR 0 2
20525: PUSH
20526: FOR_IN
20527: IFFALSE 20543
// begin SetLives ( i , 0 ) ;
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_INT 0
20536: PPUSH
20537: CALL_OW 234
// end ;
20541: GO 20526
20543: POP
20544: POP
// end ;
20545: PPOPN 2
20547: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20548: LD_EXP 46
20552: PUSH
20553: LD_EXP 52
20557: AND
20558: IFFALSE 20642
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
// begin enable ;
20567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20568: LD_ADDR_VAR 0 2
20572: PUSH
20573: LD_INT 22
20575: PUSH
20576: LD_OWVAR 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 32
20587: PUSH
20588: LD_INT 3
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PPUSH
20599: CALL_OW 69
20603: ST_TO_ADDR
// if not tmp then
20604: LD_VAR 0 2
20608: NOT
20609: IFFALSE 20613
// exit ;
20611: GO 20642
// for i in tmp do
20613: LD_ADDR_VAR 0 1
20617: PUSH
20618: LD_VAR 0 2
20622: PUSH
20623: FOR_IN
20624: IFFALSE 20640
// begin SetLives ( i , 0 ) ;
20626: LD_VAR 0 1
20630: PPUSH
20631: LD_INT 0
20633: PPUSH
20634: CALL_OW 234
// end ;
20638: GO 20623
20640: POP
20641: POP
// end ;
20642: PPOPN 2
20644: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20645: LD_EXP 46
20649: PUSH
20650: LD_EXP 49
20654: AND
20655: IFFALSE 20748
20657: GO 20659
20659: DISABLE
20660: LD_INT 0
20662: PPUSH
// begin enable ;
20663: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20664: LD_ADDR_VAR 0 1
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_OWVAR 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: LD_INT 25
20686: PUSH
20687: LD_INT 5
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 25
20696: PUSH
20697: LD_INT 9
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 25
20706: PUSH
20707: LD_INT 8
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL_OW 69
20728: PUSH
20729: FOR_IN
20730: IFFALSE 20746
// begin SetClass ( i , 1 ) ;
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 336
// end ;
20744: GO 20729
20746: POP
20747: POP
// end ;
20748: PPOPN 1
20750: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20751: LD_EXP 46
20755: PUSH
20756: LD_EXP 50
20760: AND
20761: PUSH
20762: LD_OWVAR 65
20766: PUSH
20767: LD_INT 7
20769: LESS
20770: AND
20771: IFFALSE 20785
20773: GO 20775
20775: DISABLE
// begin enable ;
20776: ENABLE
// game_speed := 7 ;
20777: LD_ADDR_OWVAR 65
20781: PUSH
20782: LD_INT 7
20784: ST_TO_ADDR
// end ;
20785: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20786: LD_EXP 46
20790: PUSH
20791: LD_EXP 53
20795: AND
20796: IFFALSE 20998
20798: GO 20800
20800: DISABLE
20801: LD_INT 0
20803: PPUSH
20804: PPUSH
20805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 81
20813: PUSH
20814: LD_OWVAR 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 21
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PPUSH
20837: CALL_OW 69
20841: ST_TO_ADDR
// if not tmp then
20842: LD_VAR 0 3
20846: NOT
20847: IFFALSE 20851
// exit ;
20849: GO 20998
// if tmp > 5 then
20851: LD_VAR 0 3
20855: PUSH
20856: LD_INT 5
20858: GREATER
20859: IFFALSE 20871
// k := 5 else
20861: LD_ADDR_VAR 0 2
20865: PUSH
20866: LD_INT 5
20868: ST_TO_ADDR
20869: GO 20881
// k := tmp ;
20871: LD_ADDR_VAR 0 2
20875: PUSH
20876: LD_VAR 0 3
20880: ST_TO_ADDR
// for i := 1 to k do
20881: LD_ADDR_VAR 0 1
20885: PUSH
20886: DOUBLE
20887: LD_INT 1
20889: DEC
20890: ST_TO_ADDR
20891: LD_VAR 0 2
20895: PUSH
20896: FOR_TO
20897: IFFALSE 20996
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20899: LD_VAR 0 3
20903: PUSH
20904: LD_VAR 0 1
20908: ARRAY
20909: PPUSH
20910: LD_VAR 0 1
20914: PUSH
20915: LD_INT 4
20917: MOD
20918: PUSH
20919: LD_INT 1
20921: PLUS
20922: PPUSH
20923: CALL_OW 259
20927: PUSH
20928: LD_INT 10
20930: LESS
20931: IFFALSE 20994
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20933: LD_VAR 0 3
20937: PUSH
20938: LD_VAR 0 1
20942: ARRAY
20943: PPUSH
20944: LD_VAR 0 1
20948: PUSH
20949: LD_INT 4
20951: MOD
20952: PUSH
20953: LD_INT 1
20955: PLUS
20956: PPUSH
20957: LD_VAR 0 3
20961: PUSH
20962: LD_VAR 0 1
20966: ARRAY
20967: PPUSH
20968: LD_VAR 0 1
20972: PUSH
20973: LD_INT 4
20975: MOD
20976: PUSH
20977: LD_INT 1
20979: PLUS
20980: PPUSH
20981: CALL_OW 259
20985: PUSH
20986: LD_INT 1
20988: PLUS
20989: PPUSH
20990: CALL_OW 237
20994: GO 20896
20996: POP
20997: POP
// end ;
20998: PPOPN 3
21000: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21001: LD_EXP 46
21005: PUSH
21006: LD_EXP 54
21010: AND
21011: IFFALSE 21031
21013: GO 21015
21015: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21016: LD_INT 4
21018: PPUSH
21019: LD_OWVAR 2
21023: PPUSH
21024: LD_INT 0
21026: PPUSH
21027: CALL_OW 324
21031: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21032: LD_EXP 46
21036: PUSH
21037: LD_EXP 83
21041: AND
21042: IFFALSE 21062
21044: GO 21046
21046: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21047: LD_INT 19
21049: PPUSH
21050: LD_OWVAR 2
21054: PPUSH
21055: LD_INT 0
21057: PPUSH
21058: CALL_OW 324
21062: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21063: LD_EXP 46
21067: PUSH
21068: LD_EXP 55
21072: AND
21073: IFFALSE 21175
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
21081: PPUSH
// begin enable ;
21082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21083: LD_ADDR_VAR 0 2
21087: PUSH
21088: LD_INT 22
21090: PUSH
21091: LD_OWVAR 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: LD_INT 34
21105: PUSH
21106: LD_INT 11
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 34
21115: PUSH
21116: LD_INT 30
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 69
21136: ST_TO_ADDR
// if not tmp then
21137: LD_VAR 0 2
21141: NOT
21142: IFFALSE 21146
// exit ;
21144: GO 21175
// for i in tmp do
21146: LD_ADDR_VAR 0 1
21150: PUSH
21151: LD_VAR 0 2
21155: PUSH
21156: FOR_IN
21157: IFFALSE 21173
// begin SetLives ( i , 0 ) ;
21159: LD_VAR 0 1
21163: PPUSH
21164: LD_INT 0
21166: PPUSH
21167: CALL_OW 234
// end ;
21171: GO 21156
21173: POP
21174: POP
// end ;
21175: PPOPN 2
21177: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21178: LD_EXP 46
21182: PUSH
21183: LD_EXP 56
21187: AND
21188: IFFALSE 21208
21190: GO 21192
21192: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21193: LD_INT 32
21195: PPUSH
21196: LD_OWVAR 2
21200: PPUSH
21201: LD_INT 0
21203: PPUSH
21204: CALL_OW 324
21208: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21209: LD_EXP 46
21213: PUSH
21214: LD_EXP 57
21218: AND
21219: IFFALSE 21400
21221: GO 21223
21223: DISABLE
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21229: LD_ADDR_VAR 0 2
21233: PUSH
21234: LD_INT 22
21236: PUSH
21237: LD_OWVAR 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 33
21248: PUSH
21249: LD_INT 3
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PPUSH
21260: CALL_OW 69
21264: ST_TO_ADDR
// if not tmp then
21265: LD_VAR 0 2
21269: NOT
21270: IFFALSE 21274
// exit ;
21272: GO 21400
// side := 0 ;
21274: LD_ADDR_VAR 0 3
21278: PUSH
21279: LD_INT 0
21281: ST_TO_ADDR
// for i := 1 to 8 do
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: DOUBLE
21288: LD_INT 1
21290: DEC
21291: ST_TO_ADDR
21292: LD_INT 8
21294: PUSH
21295: FOR_TO
21296: IFFALSE 21344
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21298: LD_OWVAR 2
21302: PUSH
21303: LD_VAR 0 1
21307: NONEQUAL
21308: PUSH
21309: LD_OWVAR 2
21313: PPUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 81
21323: PUSH
21324: LD_INT 2
21326: EQUAL
21327: AND
21328: IFFALSE 21342
// begin side := i ;
21330: LD_ADDR_VAR 0 3
21334: PUSH
21335: LD_VAR 0 1
21339: ST_TO_ADDR
// break ;
21340: GO 21344
// end ;
21342: GO 21295
21344: POP
21345: POP
// if not side then
21346: LD_VAR 0 3
21350: NOT
21351: IFFALSE 21355
// exit ;
21353: GO 21400
// for i := 1 to tmp do
21355: LD_ADDR_VAR 0 1
21359: PUSH
21360: DOUBLE
21361: LD_INT 1
21363: DEC
21364: ST_TO_ADDR
21365: LD_VAR 0 2
21369: PUSH
21370: FOR_TO
21371: IFFALSE 21398
// if Prob ( 60 ) then
21373: LD_INT 60
21375: PPUSH
21376: CALL_OW 13
21380: IFFALSE 21396
// SetSide ( i , side ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_VAR 0 3
21391: PPUSH
21392: CALL_OW 235
21396: GO 21370
21398: POP
21399: POP
// end ;
21400: PPOPN 3
21402: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21403: LD_EXP 46
21407: PUSH
21408: LD_EXP 59
21412: AND
21413: IFFALSE 21532
21415: GO 21417
21417: DISABLE
21418: LD_INT 0
21420: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21421: LD_ADDR_VAR 0 1
21425: PUSH
21426: LD_INT 22
21428: PUSH
21429: LD_OWVAR 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 21
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: LD_INT 23
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PPUSH
21470: CALL_OW 69
21474: PUSH
21475: FOR_IN
21476: IFFALSE 21530
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL_OW 257
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: LD_INT 3
21496: PUSH
21497: LD_INT 4
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: IN
21506: IFFALSE 21528
// SetClass ( un , rand ( 1 , 4 ) ) ;
21508: LD_VAR 0 1
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: LD_INT 4
21518: PPUSH
21519: CALL_OW 12
21523: PPUSH
21524: CALL_OW 336
21528: GO 21475
21530: POP
21531: POP
// end ;
21532: PPOPN 1
21534: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21535: LD_EXP 46
21539: PUSH
21540: LD_EXP 58
21544: AND
21545: IFFALSE 21624
21547: GO 21549
21549: DISABLE
21550: LD_INT 0
21552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21553: LD_ADDR_VAR 0 1
21557: PUSH
21558: LD_INT 22
21560: PUSH
21561: LD_OWVAR 2
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 21
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PPUSH
21584: CALL_OW 69
21588: ST_TO_ADDR
// if not tmp then
21589: LD_VAR 0 1
21593: NOT
21594: IFFALSE 21598
// exit ;
21596: GO 21624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21598: LD_VAR 0 1
21602: PUSH
21603: LD_INT 1
21605: PPUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 12
21615: ARRAY
21616: PPUSH
21617: LD_INT 100
21619: PPUSH
21620: CALL_OW 234
// end ;
21624: PPOPN 1
21626: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21627: LD_EXP 46
21631: PUSH
21632: LD_EXP 60
21636: AND
21637: IFFALSE 21735
21639: GO 21641
21641: DISABLE
21642: LD_INT 0
21644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21645: LD_ADDR_VAR 0 1
21649: PUSH
21650: LD_INT 22
21652: PUSH
21653: LD_OWVAR 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PPUSH
21676: CALL_OW 69
21680: ST_TO_ADDR
// if not tmp then
21681: LD_VAR 0 1
21685: NOT
21686: IFFALSE 21690
// exit ;
21688: GO 21735
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21690: LD_VAR 0 1
21694: PUSH
21695: LD_INT 1
21697: PPUSH
21698: LD_VAR 0 1
21702: PPUSH
21703: CALL_OW 12
21707: ARRAY
21708: PPUSH
21709: LD_INT 1
21711: PPUSH
21712: LD_INT 4
21714: PPUSH
21715: CALL_OW 12
21719: PPUSH
21720: LD_INT 3000
21722: PPUSH
21723: LD_INT 9000
21725: PPUSH
21726: CALL_OW 12
21730: PPUSH
21731: CALL_OW 492
// end ;
21735: PPOPN 1
21737: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21738: LD_EXP 46
21742: PUSH
21743: LD_EXP 61
21747: AND
21748: IFFALSE 21768
21750: GO 21752
21752: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21753: LD_INT 1
21755: PPUSH
21756: LD_OWVAR 2
21760: PPUSH
21761: LD_INT 0
21763: PPUSH
21764: CALL_OW 324
21768: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21769: LD_EXP 46
21773: PUSH
21774: LD_EXP 62
21778: AND
21779: IFFALSE 21862
21781: GO 21783
21783: DISABLE
21784: LD_INT 0
21786: PPUSH
21787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21788: LD_ADDR_VAR 0 2
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 3
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: ST_TO_ADDR
// if not tmp then
21824: LD_VAR 0 2
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 21862
// for i in tmp do
21833: LD_ADDR_VAR 0 1
21837: PUSH
21838: LD_VAR 0 2
21842: PUSH
21843: FOR_IN
21844: IFFALSE 21860
// SetBLevel ( i , 10 ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_INT 10
21853: PPUSH
21854: CALL_OW 241
21858: GO 21843
21860: POP
21861: POP
// end ;
21862: PPOPN 2
21864: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21865: LD_EXP 46
21869: PUSH
21870: LD_EXP 63
21874: AND
21875: IFFALSE 21986
21877: GO 21879
21879: DISABLE
21880: LD_INT 0
21882: PPUSH
21883: PPUSH
21884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21885: LD_ADDR_VAR 0 3
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_OWVAR 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 25
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: ST_TO_ADDR
// if not tmp then
21921: LD_VAR 0 3
21925: NOT
21926: IFFALSE 21930
// exit ;
21928: GO 21986
// un := tmp [ rand ( 1 , tmp ) ] ;
21930: LD_ADDR_VAR 0 2
21934: PUSH
21935: LD_VAR 0 3
21939: PUSH
21940: LD_INT 1
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 12
21952: ARRAY
21953: ST_TO_ADDR
// if Crawls ( un ) then
21954: LD_VAR 0 2
21958: PPUSH
21959: CALL_OW 318
21963: IFFALSE 21974
// ComWalk ( un ) ;
21965: LD_VAR 0 2
21969: PPUSH
21970: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_INT 5
21981: PPUSH
21982: CALL_OW 336
// end ;
21986: PPOPN 3
21988: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21989: LD_EXP 46
21993: PUSH
21994: LD_EXP 64
21998: AND
21999: PUSH
22000: LD_OWVAR 67
22004: PUSH
22005: LD_INT 4
22007: LESS
22008: AND
22009: IFFALSE 22028
22011: GO 22013
22013: DISABLE
// begin Difficulty := Difficulty + 1 ;
22014: LD_ADDR_OWVAR 67
22018: PUSH
22019: LD_OWVAR 67
22023: PUSH
22024: LD_INT 1
22026: PLUS
22027: ST_TO_ADDR
// end ;
22028: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22029: LD_EXP 46
22033: PUSH
22034: LD_EXP 65
22038: AND
22039: IFFALSE 22142
22041: GO 22043
22043: DISABLE
22044: LD_INT 0
22046: PPUSH
// begin for i := 1 to 5 do
22047: LD_ADDR_VAR 0 1
22051: PUSH
22052: DOUBLE
22053: LD_INT 1
22055: DEC
22056: ST_TO_ADDR
22057: LD_INT 5
22059: PUSH
22060: FOR_TO
22061: IFFALSE 22140
// begin uc_nation := nation_nature ;
22063: LD_ADDR_OWVAR 21
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// uc_side := 0 ;
22071: LD_ADDR_OWVAR 20
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22079: LD_ADDR_OWVAR 29
22083: PUSH
22084: LD_INT 12
22086: PUSH
22087: LD_INT 12
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: ST_TO_ADDR
// hc_agressivity := 20 ;
22094: LD_ADDR_OWVAR 35
22098: PUSH
22099: LD_INT 20
22101: ST_TO_ADDR
// hc_class := class_tiger ;
22102: LD_ADDR_OWVAR 28
22106: PUSH
22107: LD_INT 14
22109: ST_TO_ADDR
// hc_gallery :=  ;
22110: LD_ADDR_OWVAR 33
22114: PUSH
22115: LD_STRING 
22117: ST_TO_ADDR
// hc_name :=  ;
22118: LD_ADDR_OWVAR 26
22122: PUSH
22123: LD_STRING 
22125: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22126: CALL_OW 44
22130: PPUSH
22131: LD_INT 0
22133: PPUSH
22134: CALL_OW 51
// end ;
22138: GO 22060
22140: POP
22141: POP
// end ;
22142: PPOPN 1
22144: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22145: LD_EXP 46
22149: PUSH
22150: LD_EXP 66
22154: AND
22155: IFFALSE 22164
22157: GO 22159
22159: DISABLE
// StreamSibBomb ;
22160: CALL 22165 0 0
22164: END
// export function StreamSibBomb ; var i , x , y ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
// result := false ;
22171: LD_ADDR_VAR 0 1
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// for i := 1 to 16 do
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: DOUBLE
22185: LD_INT 1
22187: DEC
22188: ST_TO_ADDR
22189: LD_INT 16
22191: PUSH
22192: FOR_TO
22193: IFFALSE 22392
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22195: LD_ADDR_VAR 0 3
22199: PUSH
22200: LD_INT 10
22202: PUSH
22203: LD_INT 20
22205: PUSH
22206: LD_INT 30
22208: PUSH
22209: LD_INT 40
22211: PUSH
22212: LD_INT 50
22214: PUSH
22215: LD_INT 60
22217: PUSH
22218: LD_INT 70
22220: PUSH
22221: LD_INT 80
22223: PUSH
22224: LD_INT 90
22226: PUSH
22227: LD_INT 100
22229: PUSH
22230: LD_INT 110
22232: PUSH
22233: LD_INT 120
22235: PUSH
22236: LD_INT 130
22238: PUSH
22239: LD_INT 140
22241: PUSH
22242: LD_INT 150
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PPUSH
22265: LD_INT 15
22267: PPUSH
22268: CALL_OW 12
22272: ARRAY
22273: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22274: LD_ADDR_VAR 0 4
22278: PUSH
22279: LD_INT 10
22281: PUSH
22282: LD_INT 20
22284: PUSH
22285: LD_INT 30
22287: PUSH
22288: LD_INT 40
22290: PUSH
22291: LD_INT 50
22293: PUSH
22294: LD_INT 60
22296: PUSH
22297: LD_INT 70
22299: PUSH
22300: LD_INT 80
22302: PUSH
22303: LD_INT 90
22305: PUSH
22306: LD_INT 100
22308: PUSH
22309: LD_INT 110
22311: PUSH
22312: LD_INT 120
22314: PUSH
22315: LD_INT 130
22317: PUSH
22318: LD_INT 140
22320: PUSH
22321: LD_INT 150
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: PPUSH
22344: LD_INT 15
22346: PPUSH
22347: CALL_OW 12
22351: ARRAY
22352: ST_TO_ADDR
// if ValidHex ( x , y ) then
22353: LD_VAR 0 3
22357: PPUSH
22358: LD_VAR 0 4
22362: PPUSH
22363: CALL_OW 488
22367: IFFALSE 22390
// begin result := [ x , y ] ;
22369: LD_ADDR_VAR 0 1
22373: PUSH
22374: LD_VAR 0 3
22378: PUSH
22379: LD_VAR 0 4
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// break ;
22388: GO 22392
// end ; end ;
22390: GO 22192
22392: POP
22393: POP
// if result then
22394: LD_VAR 0 1
22398: IFFALSE 22458
// begin ToLua ( playSibBomb() ) ;
22400: LD_STRING playSibBomb()
22402: PPUSH
22403: CALL_OW 559
// wait ( 0 0$14 ) ;
22407: LD_INT 490
22409: PPUSH
22410: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22414: LD_VAR 0 1
22418: PUSH
22419: LD_INT 1
22421: ARRAY
22422: PPUSH
22423: LD_VAR 0 1
22427: PUSH
22428: LD_INT 2
22430: ARRAY
22431: PPUSH
22432: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22436: LD_VAR 0 1
22440: PUSH
22441: LD_INT 1
22443: ARRAY
22444: PPUSH
22445: LD_VAR 0 1
22449: PUSH
22450: LD_INT 2
22452: ARRAY
22453: PPUSH
22454: CALL_OW 429
// end ; end ;
22458: LD_VAR 0 1
22462: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22463: LD_EXP 46
22467: PUSH
22468: LD_EXP 68
22472: AND
22473: IFFALSE 22485
22475: GO 22477
22477: DISABLE
// YouLost (  ) ;
22478: LD_STRING 
22480: PPUSH
22481: CALL_OW 104
22485: END
// every 0 0$1 trigger StreamModeActive and sFog do
22486: LD_EXP 46
22490: PUSH
22491: LD_EXP 67
22495: AND
22496: IFFALSE 22510
22498: GO 22500
22500: DISABLE
// FogOff ( your_side ) ;
22501: LD_OWVAR 2
22505: PPUSH
22506: CALL_OW 344
22510: END
// every 0 0$1 trigger StreamModeActive and sSun do
22511: LD_EXP 46
22515: PUSH
22516: LD_EXP 69
22520: AND
22521: IFFALSE 22549
22523: GO 22525
22525: DISABLE
// begin solar_recharge_percent := 0 ;
22526: LD_ADDR_OWVAR 79
22530: PUSH
22531: LD_INT 0
22533: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22534: LD_INT 10500
22536: PPUSH
22537: CALL_OW 67
// solar_recharge_percent := 100 ;
22541: LD_ADDR_OWVAR 79
22545: PUSH
22546: LD_INT 100
22548: ST_TO_ADDR
// end ;
22549: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22550: LD_EXP 46
22554: PUSH
22555: LD_EXP 70
22559: AND
22560: IFFALSE 22799
22562: GO 22564
22564: DISABLE
22565: LD_INT 0
22567: PPUSH
22568: PPUSH
22569: PPUSH
// begin tmp := [ ] ;
22570: LD_ADDR_VAR 0 3
22574: PUSH
22575: EMPTY
22576: ST_TO_ADDR
// for i := 1 to 6 do
22577: LD_ADDR_VAR 0 1
22581: PUSH
22582: DOUBLE
22583: LD_INT 1
22585: DEC
22586: ST_TO_ADDR
22587: LD_INT 6
22589: PUSH
22590: FOR_TO
22591: IFFALSE 22696
// begin uc_nation := nation_nature ;
22593: LD_ADDR_OWVAR 21
22597: PUSH
22598: LD_INT 0
22600: ST_TO_ADDR
// uc_side := 0 ;
22601: LD_ADDR_OWVAR 20
22605: PUSH
22606: LD_INT 0
22608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22609: LD_ADDR_OWVAR 29
22613: PUSH
22614: LD_INT 12
22616: PUSH
22617: LD_INT 12
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: ST_TO_ADDR
// hc_agressivity := 20 ;
22624: LD_ADDR_OWVAR 35
22628: PUSH
22629: LD_INT 20
22631: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22632: LD_ADDR_OWVAR 28
22636: PUSH
22637: LD_INT 17
22639: ST_TO_ADDR
// hc_gallery :=  ;
22640: LD_ADDR_OWVAR 33
22644: PUSH
22645: LD_STRING 
22647: ST_TO_ADDR
// hc_name :=  ;
22648: LD_ADDR_OWVAR 26
22652: PUSH
22653: LD_STRING 
22655: ST_TO_ADDR
// un := CreateHuman ;
22656: LD_ADDR_VAR 0 2
22660: PUSH
22661: CALL_OW 44
22665: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22666: LD_VAR 0 2
22670: PPUSH
22671: LD_INT 1
22673: PPUSH
22674: CALL_OW 51
// tmp := tmp ^ un ;
22678: LD_ADDR_VAR 0 3
22682: PUSH
22683: LD_VAR 0 3
22687: PUSH
22688: LD_VAR 0 2
22692: ADD
22693: ST_TO_ADDR
// end ;
22694: GO 22590
22696: POP
22697: POP
// repeat wait ( 0 0$1 ) ;
22698: LD_INT 35
22700: PPUSH
22701: CALL_OW 67
// for un in tmp do
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: FOR_IN
22716: IFFALSE 22790
// begin if IsDead ( un ) then
22718: LD_VAR 0 2
22722: PPUSH
22723: CALL_OW 301
22727: IFFALSE 22747
// begin tmp := tmp diff un ;
22729: LD_ADDR_VAR 0 3
22733: PUSH
22734: LD_VAR 0 3
22738: PUSH
22739: LD_VAR 0 2
22743: DIFF
22744: ST_TO_ADDR
// continue ;
22745: GO 22715
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_INT 3
22754: PUSH
22755: LD_INT 22
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PPUSH
22769: CALL_OW 69
22773: PPUSH
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 74
22783: PPUSH
22784: CALL_OW 115
// end ;
22788: GO 22715
22790: POP
22791: POP
// until not tmp ;
22792: LD_VAR 0 3
22796: NOT
22797: IFFALSE 22698
// end ;
22799: PPOPN 3
22801: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22802: LD_EXP 46
22806: PUSH
22807: LD_EXP 71
22811: AND
22812: IFFALSE 22866
22814: GO 22816
22816: DISABLE
// begin ToLua ( displayTroll(); ) ;
22817: LD_STRING displayTroll();
22819: PPUSH
22820: CALL_OW 559
// wait ( 3 3$00 ) ;
22824: LD_INT 6300
22826: PPUSH
22827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22831: LD_STRING hideTroll();
22833: PPUSH
22834: CALL_OW 559
// wait ( 1 1$00 ) ;
22838: LD_INT 2100
22840: PPUSH
22841: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22845: LD_STRING displayTroll();
22847: PPUSH
22848: CALL_OW 559
// wait ( 1 1$00 ) ;
22852: LD_INT 2100
22854: PPUSH
22855: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22859: LD_STRING hideTroll();
22861: PPUSH
22862: CALL_OW 559
// end ;
22866: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22867: LD_EXP 46
22871: PUSH
22872: LD_EXP 72
22876: AND
22877: IFFALSE 22940
22879: GO 22881
22881: DISABLE
22882: LD_INT 0
22884: PPUSH
// begin p := 0 ;
22885: LD_ADDR_VAR 0 1
22889: PUSH
22890: LD_INT 0
22892: ST_TO_ADDR
// repeat game_speed := 1 ;
22893: LD_ADDR_OWVAR 65
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22901: LD_INT 35
22903: PPUSH
22904: CALL_OW 67
// p := p + 1 ;
22908: LD_ADDR_VAR 0 1
22912: PUSH
22913: LD_VAR 0 1
22917: PUSH
22918: LD_INT 1
22920: PLUS
22921: ST_TO_ADDR
// until p >= 60 ;
22922: LD_VAR 0 1
22926: PUSH
22927: LD_INT 60
22929: GREATEREQUAL
22930: IFFALSE 22893
// game_speed := 4 ;
22932: LD_ADDR_OWVAR 65
22936: PUSH
22937: LD_INT 4
22939: ST_TO_ADDR
// end ;
22940: PPOPN 1
22942: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22943: LD_EXP 46
22947: PUSH
22948: LD_EXP 73
22952: AND
22953: IFFALSE 23099
22955: GO 22957
22957: DISABLE
22958: LD_INT 0
22960: PPUSH
22961: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22962: LD_ADDR_VAR 0 1
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: LD_OWVAR 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 30
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 30
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 69
23015: ST_TO_ADDR
// if not depot then
23016: LD_VAR 0 1
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23099
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23025: LD_ADDR_VAR 0 2
23029: PUSH
23030: LD_VAR 0 1
23034: PUSH
23035: LD_INT 1
23037: PPUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 12
23047: ARRAY
23048: PPUSH
23049: CALL_OW 274
23053: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23054: LD_VAR 0 2
23058: PPUSH
23059: LD_INT 1
23061: PPUSH
23062: LD_INT 0
23064: PPUSH
23065: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23069: LD_VAR 0 2
23073: PPUSH
23074: LD_INT 2
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23084: LD_VAR 0 2
23088: PPUSH
23089: LD_INT 3
23091: PPUSH
23092: LD_INT 0
23094: PPUSH
23095: CALL_OW 277
// end ;
23099: PPOPN 2
23101: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23102: LD_EXP 46
23106: PUSH
23107: LD_EXP 74
23111: AND
23112: IFFALSE 23209
23114: GO 23116
23116: DISABLE
23117: LD_INT 0
23119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23120: LD_ADDR_VAR 0 1
23124: PUSH
23125: LD_INT 22
23127: PUSH
23128: LD_OWVAR 2
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 21
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: LD_INT 23
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: ST_TO_ADDR
// if not tmp then
23174: LD_VAR 0 1
23178: NOT
23179: IFFALSE 23183
// exit ;
23181: GO 23209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23183: LD_VAR 0 1
23187: PUSH
23188: LD_INT 1
23190: PPUSH
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 12
23200: ARRAY
23201: PPUSH
23202: LD_INT 200
23204: PPUSH
23205: CALL_OW 234
// end ;
23209: PPOPN 1
23211: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23212: LD_EXP 46
23216: PUSH
23217: LD_EXP 75
23221: AND
23222: IFFALSE 23301
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23230: LD_ADDR_VAR 0 1
23234: PUSH
23235: LD_INT 22
23237: PUSH
23238: LD_OWVAR 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 21
23249: PUSH
23250: LD_INT 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PPUSH
23261: CALL_OW 69
23265: ST_TO_ADDR
// if not tmp then
23266: LD_VAR 0 1
23270: NOT
23271: IFFALSE 23275
// exit ;
23273: GO 23301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 1
23282: PPUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: CALL_OW 12
23292: ARRAY
23293: PPUSH
23294: LD_INT 60
23296: PPUSH
23297: CALL_OW 234
// end ;
23301: PPOPN 1
23303: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23304: LD_EXP 46
23308: PUSH
23309: LD_EXP 76
23313: AND
23314: IFFALSE 23413
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
// begin enable ;
23323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23324: LD_ADDR_VAR 0 1
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_OWVAR 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 61
23343: PUSH
23344: EMPTY
23345: LIST
23346: PUSH
23347: LD_INT 33
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: PPUSH
23362: CALL_OW 69
23366: ST_TO_ADDR
// if not tmp then
23367: LD_VAR 0 1
23371: NOT
23372: IFFALSE 23376
// exit ;
23374: GO 23413
// for i in tmp do
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_VAR 0 1
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23411
// if IsControledBy ( i ) then
23389: LD_VAR 0 2
23393: PPUSH
23394: CALL_OW 312
23398: IFFALSE 23409
// ComUnlink ( i ) ;
23400: LD_VAR 0 2
23404: PPUSH
23405: CALL_OW 136
23409: GO 23386
23411: POP
23412: POP
// end ;
23413: PPOPN 2
23415: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23416: LD_EXP 46
23420: PUSH
23421: LD_EXP 77
23425: AND
23426: IFFALSE 23566
23428: GO 23430
23430: DISABLE
23431: LD_INT 0
23433: PPUSH
23434: PPUSH
// begin ToLua ( displayPowell(); ) ;
23435: LD_STRING displayPowell();
23437: PPUSH
23438: CALL_OW 559
// uc_side := 0 ;
23442: LD_ADDR_OWVAR 20
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// uc_nation := 2 ;
23450: LD_ADDR_OWVAR 21
23454: PUSH
23455: LD_INT 2
23457: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23458: LD_ADDR_OWVAR 37
23462: PUSH
23463: LD_INT 14
23465: ST_TO_ADDR
// vc_engine := engine_siberite ;
23466: LD_ADDR_OWVAR 39
23470: PUSH
23471: LD_INT 3
23473: ST_TO_ADDR
// vc_control := control_apeman ;
23474: LD_ADDR_OWVAR 38
23478: PUSH
23479: LD_INT 5
23481: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23482: LD_ADDR_OWVAR 40
23486: PUSH
23487: LD_INT 29
23489: ST_TO_ADDR
// un := CreateVehicle ;
23490: LD_ADDR_VAR 0 2
23494: PUSH
23495: CALL_OW 45
23499: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23500: LD_VAR 0 2
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23512: LD_INT 35
23514: PPUSH
23515: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23519: LD_VAR 0 2
23523: PPUSH
23524: LD_INT 22
23526: PUSH
23527: LD_OWVAR 2
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PPUSH
23536: CALL_OW 69
23540: PPUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: CALL_OW 74
23550: PPUSH
23551: CALL_OW 115
// until IsDead ( un ) ;
23555: LD_VAR 0 2
23559: PPUSH
23560: CALL_OW 301
23564: IFFALSE 23512
// end ;
23566: PPOPN 2
23568: END
// every 0 0$1 trigger StreamModeActive and sStu do
23569: LD_EXP 46
23573: PUSH
23574: LD_EXP 85
23578: AND
23579: IFFALSE 23595
23581: GO 23583
23583: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23584: LD_STRING displayStucuk();
23586: PPUSH
23587: CALL_OW 559
// ResetFog ;
23591: CALL_OW 335
// end ;
23595: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23596: LD_EXP 46
23600: PUSH
23601: LD_EXP 78
23605: AND
23606: IFFALSE 23747
23608: GO 23610
23610: DISABLE
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_OWVAR 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 21
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PPUSH
23646: CALL_OW 69
23650: ST_TO_ADDR
// if not tmp then
23651: LD_VAR 0 2
23655: NOT
23656: IFFALSE 23660
// exit ;
23658: GO 23747
// un := tmp [ rand ( 1 , tmp ) ] ;
23660: LD_ADDR_VAR 0 1
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_INT 1
23672: PPUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: CALL_OW 12
23682: ARRAY
23683: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23684: LD_VAR 0 1
23688: PPUSH
23689: LD_INT 0
23691: PPUSH
23692: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23696: LD_VAR 0 1
23700: PPUSH
23701: LD_OWVAR 3
23705: PUSH
23706: LD_VAR 0 1
23710: DIFF
23711: PPUSH
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 74
23721: PPUSH
23722: CALL_OW 115
// wait ( 0 0$20 ) ;
23726: LD_INT 700
23728: PPUSH
23729: CALL_OW 67
// SetSide ( un , your_side ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: LD_OWVAR 2
23742: PPUSH
23743: CALL_OW 235
// end ;
23747: PPOPN 2
23749: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23750: LD_EXP 46
23754: PUSH
23755: LD_EXP 79
23759: AND
23760: IFFALSE 23866
23762: GO 23764
23764: DISABLE
23765: LD_INT 0
23767: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23768: LD_ADDR_VAR 0 1
23772: PUSH
23773: LD_INT 22
23775: PUSH
23776: LD_OWVAR 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 30
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 30
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not depot then
23822: LD_VAR 0 1
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23866
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23831: LD_VAR 0 1
23835: PUSH
23836: LD_INT 1
23838: ARRAY
23839: PPUSH
23840: CALL_OW 250
23844: PPUSH
23845: LD_VAR 0 1
23849: PUSH
23850: LD_INT 1
23852: ARRAY
23853: PPUSH
23854: CALL_OW 251
23858: PPUSH
23859: LD_INT 70
23861: PPUSH
23862: CALL_OW 495
// end ;
23866: PPOPN 1
23868: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23869: LD_EXP 46
23873: PUSH
23874: LD_EXP 80
23878: AND
23879: IFFALSE 24090
23881: GO 23883
23883: DISABLE
23884: LD_INT 0
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23891: LD_ADDR_VAR 0 5
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 21
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PPUSH
23922: CALL_OW 69
23926: ST_TO_ADDR
// if not tmp then
23927: LD_VAR 0 5
23931: NOT
23932: IFFALSE 23936
// exit ;
23934: GO 24090
// for i in tmp do
23936: LD_ADDR_VAR 0 1
23940: PUSH
23941: LD_VAR 0 5
23945: PUSH
23946: FOR_IN
23947: IFFALSE 24088
// begin d := rand ( 0 , 5 ) ;
23949: LD_ADDR_VAR 0 4
23953: PUSH
23954: LD_INT 0
23956: PPUSH
23957: LD_INT 5
23959: PPUSH
23960: CALL_OW 12
23964: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23965: LD_ADDR_VAR 0 2
23969: PUSH
23970: LD_VAR 0 1
23974: PPUSH
23975: CALL_OW 250
23979: PPUSH
23980: LD_VAR 0 4
23984: PPUSH
23985: LD_INT 3
23987: PPUSH
23988: LD_INT 12
23990: PPUSH
23991: CALL_OW 12
23995: PPUSH
23996: CALL_OW 272
24000: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 251
24015: PPUSH
24016: LD_VAR 0 4
24020: PPUSH
24021: LD_INT 3
24023: PPUSH
24024: LD_INT 12
24026: PPUSH
24027: CALL_OW 12
24031: PPUSH
24032: CALL_OW 273
24036: ST_TO_ADDR
// if ValidHex ( x , y ) then
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_VAR 0 3
24046: PPUSH
24047: CALL_OW 488
24051: IFFALSE 24086
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: LD_INT 3
24070: PPUSH
24071: LD_INT 6
24073: PPUSH
24074: CALL_OW 12
24078: PPUSH
24079: LD_INT 1
24081: PPUSH
24082: CALL_OW 483
// end ;
24086: GO 23946
24088: POP
24089: POP
// end ;
24090: PPOPN 5
24092: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24093: LD_EXP 46
24097: PUSH
24098: LD_EXP 81
24102: AND
24103: IFFALSE 24197
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
24111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24112: LD_ADDR_VAR 0 2
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 32
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 21
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: ST_TO_ADDR
// if not tmp then
24159: LD_VAR 0 2
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 24197
// for i in tmp do
24168: LD_ADDR_VAR 0 1
24172: PUSH
24173: LD_VAR 0 2
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24195
// SetFuel ( i , 0 ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: CALL_OW 240
24193: GO 24178
24195: POP
24196: POP
// end ;
24197: PPOPN 2
24199: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24200: LD_EXP 46
24204: PUSH
24205: LD_EXP 82
24209: AND
24210: IFFALSE 24276
24212: GO 24214
24214: DISABLE
24215: LD_INT 0
24217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24218: LD_ADDR_VAR 0 1
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_OWVAR 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 30
24237: PUSH
24238: LD_INT 29
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: ST_TO_ADDR
// if not tmp then
24254: LD_VAR 0 1
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24276
// DestroyUnit ( tmp [ 1 ] ) ;
24263: LD_VAR 0 1
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PPUSH
24272: CALL_OW 65
// end ;
24276: PPOPN 1
24278: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24279: LD_EXP 46
24283: PUSH
24284: LD_EXP 84
24288: AND
24289: IFFALSE 24418
24291: GO 24293
24293: DISABLE
24294: LD_INT 0
24296: PPUSH
// begin uc_side := 0 ;
24297: LD_ADDR_OWVAR 20
24301: PUSH
24302: LD_INT 0
24304: ST_TO_ADDR
// uc_nation := nation_arabian ;
24305: LD_ADDR_OWVAR 21
24309: PUSH
24310: LD_INT 2
24312: ST_TO_ADDR
// hc_gallery :=  ;
24313: LD_ADDR_OWVAR 33
24317: PUSH
24318: LD_STRING 
24320: ST_TO_ADDR
// hc_name :=  ;
24321: LD_ADDR_OWVAR 26
24325: PUSH
24326: LD_STRING 
24328: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24329: LD_INT 1
24331: PPUSH
24332: LD_INT 11
24334: PPUSH
24335: LD_INT 10
24337: PPUSH
24338: CALL_OW 380
// un := CreateHuman ;
24342: LD_ADDR_VAR 0 1
24346: PUSH
24347: CALL_OW 44
24351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24364: LD_INT 35
24366: PPUSH
24367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24371: LD_VAR 0 1
24375: PPUSH
24376: LD_INT 22
24378: PUSH
24379: LD_OWVAR 2
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 69
24392: PPUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 74
24402: PPUSH
24403: CALL_OW 115
// until IsDead ( un ) ;
24407: LD_VAR 0 1
24411: PPUSH
24412: CALL_OW 301
24416: IFFALSE 24364
// end ;
24418: PPOPN 1
24420: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24421: LD_EXP 46
24425: PUSH
24426: LD_EXP 86
24430: AND
24431: IFFALSE 24443
24433: GO 24435
24435: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24436: LD_STRING earthquake(getX(game), 0, 32)
24438: PPUSH
24439: CALL_OW 559
24443: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24444: LD_EXP 46
24448: PUSH
24449: LD_EXP 87
24453: AND
24454: IFFALSE 24545
24456: GO 24458
24458: DISABLE
24459: LD_INT 0
24461: PPUSH
// begin enable ;
24462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24463: LD_ADDR_VAR 0 1
24467: PUSH
24468: LD_INT 22
24470: PUSH
24471: LD_OWVAR 2
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 21
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 33
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: PPUSH
24505: CALL_OW 69
24509: ST_TO_ADDR
// if not tmp then
24510: LD_VAR 0 1
24514: NOT
24515: IFFALSE 24519
// exit ;
24517: GO 24545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24519: LD_VAR 0 1
24523: PUSH
24524: LD_INT 1
24526: PPUSH
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 12
24536: ARRAY
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: CALL_OW 234
// end ;
24545: PPOPN 1
24547: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24548: LD_EXP 46
24552: PUSH
24553: LD_EXP 88
24557: AND
24558: IFFALSE 24699
24560: GO 24562
24562: DISABLE
24563: LD_INT 0
24565: PPUSH
24566: PPUSH
24567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_INT 22
24575: PUSH
24576: LD_OWVAR 2
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 25
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PPUSH
24599: CALL_OW 69
24603: ST_TO_ADDR
// if not tmp then
24604: LD_VAR 0 3
24608: NOT
24609: IFFALSE 24613
// exit ;
24611: GO 24699
// un := tmp [ rand ( 1 , tmp ) ] ;
24613: LD_ADDR_VAR 0 2
24617: PUSH
24618: LD_VAR 0 3
24622: PUSH
24623: LD_INT 1
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: CALL_OW 12
24635: ARRAY
24636: ST_TO_ADDR
// if Crawls ( un ) then
24637: LD_VAR 0 2
24641: PPUSH
24642: CALL_OW 318
24646: IFFALSE 24657
// ComWalk ( un ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24657: LD_VAR 0 2
24661: PPUSH
24662: LD_INT 9
24664: PPUSH
24665: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24669: LD_INT 28
24671: PPUSH
24672: LD_OWVAR 2
24676: PPUSH
24677: LD_INT 2
24679: PPUSH
24680: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24684: LD_INT 29
24686: PPUSH
24687: LD_OWVAR 2
24691: PPUSH
24692: LD_INT 2
24694: PPUSH
24695: CALL_OW 322
// end ;
24699: PPOPN 3
24701: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24702: LD_EXP 46
24706: PUSH
24707: LD_EXP 89
24711: AND
24712: IFFALSE 24823
24714: GO 24716
24716: DISABLE
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24722: LD_ADDR_VAR 0 3
24726: PUSH
24727: LD_INT 22
24729: PUSH
24730: LD_OWVAR 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 25
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 69
24757: ST_TO_ADDR
// if not tmp then
24758: LD_VAR 0 3
24762: NOT
24763: IFFALSE 24767
// exit ;
24765: GO 24823
// un := tmp [ rand ( 1 , tmp ) ] ;
24767: LD_ADDR_VAR 0 2
24771: PUSH
24772: LD_VAR 0 3
24776: PUSH
24777: LD_INT 1
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 12
24789: ARRAY
24790: ST_TO_ADDR
// if Crawls ( un ) then
24791: LD_VAR 0 2
24795: PPUSH
24796: CALL_OW 318
24800: IFFALSE 24811
// ComWalk ( un ) ;
24802: LD_VAR 0 2
24806: PPUSH
24807: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24811: LD_VAR 0 2
24815: PPUSH
24816: LD_INT 8
24818: PPUSH
24819: CALL_OW 336
// end ;
24823: PPOPN 3
24825: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24826: LD_EXP 46
24830: PUSH
24831: LD_EXP 90
24835: AND
24836: IFFALSE 24980
24838: GO 24840
24840: DISABLE
24841: LD_INT 0
24843: PPUSH
24844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_OWVAR 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 21
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 34
24877: PUSH
24878: LD_INT 12
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 34
24887: PUSH
24888: LD_INT 51
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 34
24897: PUSH
24898: LD_INT 32
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: PPUSH
24916: CALL_OW 69
24920: ST_TO_ADDR
// if not tmp then
24921: LD_VAR 0 2
24925: NOT
24926: IFFALSE 24930
// exit ;
24928: GO 24980
// for i in tmp do
24930: LD_ADDR_VAR 0 1
24934: PUSH
24935: LD_VAR 0 2
24939: PUSH
24940: FOR_IN
24941: IFFALSE 24978
// if GetCargo ( i , mat_artifact ) = 0 then
24943: LD_VAR 0 1
24947: PPUSH
24948: LD_INT 4
24950: PPUSH
24951: CALL_OW 289
24955: PUSH
24956: LD_INT 0
24958: EQUAL
24959: IFFALSE 24976
// SetCargo ( i , mat_siberit , 100 ) ;
24961: LD_VAR 0 1
24965: PPUSH
24966: LD_INT 3
24968: PPUSH
24969: LD_INT 100
24971: PPUSH
24972: CALL_OW 290
24976: GO 24940
24978: POP
24979: POP
// end ;
24980: PPOPN 2
24982: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24983: LD_EXP 46
24987: PUSH
24988: LD_EXP 91
24992: AND
24993: IFFALSE 25176
24995: GO 24997
24997: DISABLE
24998: LD_INT 0
25000: PPUSH
25001: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_INT 22
25009: PUSH
25010: LD_OWVAR 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PPUSH
25019: CALL_OW 69
25023: ST_TO_ADDR
// if not tmp then
25024: LD_VAR 0 2
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 25176
// for i := 1 to 2 do
25033: LD_ADDR_VAR 0 1
25037: PUSH
25038: DOUBLE
25039: LD_INT 1
25041: DEC
25042: ST_TO_ADDR
25043: LD_INT 2
25045: PUSH
25046: FOR_TO
25047: IFFALSE 25174
// begin uc_side := your_side ;
25049: LD_ADDR_OWVAR 20
25053: PUSH
25054: LD_OWVAR 2
25058: ST_TO_ADDR
// uc_nation := nation_american ;
25059: LD_ADDR_OWVAR 21
25063: PUSH
25064: LD_INT 1
25066: ST_TO_ADDR
// vc_chassis := us_morphling ;
25067: LD_ADDR_OWVAR 37
25071: PUSH
25072: LD_INT 5
25074: ST_TO_ADDR
// vc_engine := engine_siberite ;
25075: LD_ADDR_OWVAR 39
25079: PUSH
25080: LD_INT 3
25082: ST_TO_ADDR
// vc_control := control_computer ;
25083: LD_ADDR_OWVAR 38
25087: PUSH
25088: LD_INT 3
25090: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25091: LD_ADDR_OWVAR 40
25095: PUSH
25096: LD_INT 10
25098: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25099: LD_VAR 0 2
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PPUSH
25108: CALL_OW 310
25112: NOT
25113: IFFALSE 25160
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25115: CALL_OW 45
25119: PPUSH
25120: LD_VAR 0 2
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PPUSH
25129: CALL_OW 250
25133: PPUSH
25134: LD_VAR 0 2
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: PPUSH
25143: CALL_OW 251
25147: PPUSH
25148: LD_INT 12
25150: PPUSH
25151: LD_INT 1
25153: PPUSH
25154: CALL_OW 50
25158: GO 25172
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25160: CALL_OW 45
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: CALL_OW 51
// end ;
25172: GO 25046
25174: POP
25175: POP
// end ;
25176: PPOPN 2
25178: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25179: LD_EXP 46
25183: PUSH
25184: LD_EXP 92
25188: AND
25189: IFFALSE 25411
25191: GO 25193
25193: DISABLE
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25202: LD_ADDR_VAR 0 6
25206: PUSH
25207: LD_INT 22
25209: PUSH
25210: LD_OWVAR 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 21
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 3
25231: PUSH
25232: LD_INT 23
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: LIST
25250: PPUSH
25251: CALL_OW 69
25255: ST_TO_ADDR
// if not tmp then
25256: LD_VAR 0 6
25260: NOT
25261: IFFALSE 25265
// exit ;
25263: GO 25411
// s1 := rand ( 1 , 4 ) ;
25265: LD_ADDR_VAR 0 2
25269: PUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_INT 4
25275: PPUSH
25276: CALL_OW 12
25280: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25281: LD_ADDR_VAR 0 4
25285: PUSH
25286: LD_VAR 0 6
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: PPUSH
25295: LD_VAR 0 2
25299: PPUSH
25300: CALL_OW 259
25304: ST_TO_ADDR
// if s1 = 1 then
25305: LD_VAR 0 2
25309: PUSH
25310: LD_INT 1
25312: EQUAL
25313: IFFALSE 25333
// s2 := rand ( 2 , 4 ) else
25315: LD_ADDR_VAR 0 3
25319: PUSH
25320: LD_INT 2
25322: PPUSH
25323: LD_INT 4
25325: PPUSH
25326: CALL_OW 12
25330: ST_TO_ADDR
25331: GO 25341
// s2 := 1 ;
25333: LD_ADDR_VAR 0 3
25337: PUSH
25338: LD_INT 1
25340: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_VAR 0 6
25350: PUSH
25351: LD_INT 1
25353: ARRAY
25354: PPUSH
25355: LD_VAR 0 3
25359: PPUSH
25360: CALL_OW 259
25364: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25365: LD_VAR 0 6
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 2
25378: PPUSH
25379: LD_VAR 0 5
25383: PPUSH
25384: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25388: LD_VAR 0 6
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: PPUSH
25397: LD_VAR 0 3
25401: PPUSH
25402: LD_VAR 0 4
25406: PPUSH
25407: CALL_OW 237
// end ;
25411: PPOPN 6
25413: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25414: LD_EXP 46
25418: PUSH
25419: LD_EXP 93
25423: AND
25424: IFFALSE 25503
25426: GO 25428
25428: DISABLE
25429: LD_INT 0
25431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25432: LD_ADDR_VAR 0 1
25436: PUSH
25437: LD_INT 22
25439: PUSH
25440: LD_OWVAR 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 30
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PPUSH
25463: CALL_OW 69
25467: ST_TO_ADDR
// if not tmp then
25468: LD_VAR 0 1
25472: NOT
25473: IFFALSE 25477
// exit ;
25475: GO 25503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25477: LD_VAR 0 1
25481: PUSH
25482: LD_INT 1
25484: PPUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 12
25494: ARRAY
25495: PPUSH
25496: LD_INT 1
25498: PPUSH
25499: CALL_OW 234
// end ;
25503: PPOPN 1
25505: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25506: LD_EXP 46
25510: PUSH
25511: LD_EXP 94
25515: AND
25516: IFFALSE 25628
25518: GO 25520
25520: DISABLE
25521: LD_INT 0
25523: PPUSH
25524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_INT 22
25532: PUSH
25533: LD_OWVAR 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: LD_INT 30
25547: PUSH
25548: LD_INT 27
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 30
25557: PUSH
25558: LD_INT 26
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 30
25567: PUSH
25568: LD_INT 28
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PPUSH
25585: CALL_OW 69
25589: ST_TO_ADDR
// if not tmp then
25590: LD_VAR 0 2
25594: NOT
25595: IFFALSE 25599
// exit ;
25597: GO 25628
// for i in tmp do
25599: LD_ADDR_VAR 0 1
25603: PUSH
25604: LD_VAR 0 2
25608: PUSH
25609: FOR_IN
25610: IFFALSE 25626
// SetLives ( i , 1 ) ;
25612: LD_VAR 0 1
25616: PPUSH
25617: LD_INT 1
25619: PPUSH
25620: CALL_OW 234
25624: GO 25609
25626: POP
25627: POP
// end ;
25628: PPOPN 2
25630: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25631: LD_EXP 46
25635: PUSH
25636: LD_EXP 95
25640: AND
25641: IFFALSE 25928
25643: GO 25645
25645: DISABLE
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
// begin i := rand ( 1 , 7 ) ;
25651: LD_ADDR_VAR 0 1
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_INT 7
25661: PPUSH
25662: CALL_OW 12
25666: ST_TO_ADDR
// case i of 1 :
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 1
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25690
25680: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25681: LD_STRING earthquake(getX(game), 0, 32)
25683: PPUSH
25684: CALL_OW 559
25688: GO 25928
25690: LD_INT 2
25692: DOUBLE
25693: EQUAL
25694: IFTRUE 25698
25696: GO 25712
25698: POP
// begin ToLua ( displayStucuk(); ) ;
25699: LD_STRING displayStucuk();
25701: PPUSH
25702: CALL_OW 559
// ResetFog ;
25706: CALL_OW 335
// end ; 3 :
25710: GO 25928
25712: LD_INT 3
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25824
25720: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25721: LD_ADDR_VAR 0 2
25725: PUSH
25726: LD_INT 22
25728: PUSH
25729: LD_OWVAR 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 25
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL_OW 69
25756: ST_TO_ADDR
// if not tmp then
25757: LD_VAR 0 2
25761: NOT
25762: IFFALSE 25766
// exit ;
25764: GO 25928
// un := tmp [ rand ( 1 , tmp ) ] ;
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_VAR 0 2
25775: PUSH
25776: LD_INT 1
25778: PPUSH
25779: LD_VAR 0 2
25783: PPUSH
25784: CALL_OW 12
25788: ARRAY
25789: ST_TO_ADDR
// if Crawls ( un ) then
25790: LD_VAR 0 3
25794: PPUSH
25795: CALL_OW 318
25799: IFFALSE 25810
// ComWalk ( un ) ;
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25810: LD_VAR 0 3
25814: PPUSH
25815: LD_INT 8
25817: PPUSH
25818: CALL_OW 336
// end ; 4 :
25822: GO 25928
25824: LD_INT 4
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25832
25830: GO 25906
25832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25833: LD_ADDR_VAR 0 2
25837: PUSH
25838: LD_INT 22
25840: PUSH
25841: LD_OWVAR 2
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 30
25852: PUSH
25853: LD_INT 29
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PPUSH
25864: CALL_OW 69
25868: ST_TO_ADDR
// if not tmp then
25869: LD_VAR 0 2
25873: NOT
25874: IFFALSE 25878
// exit ;
25876: GO 25928
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25878: LD_VAR 0 2
25882: PUSH
25883: LD_INT 1
25885: ARRAY
25886: PPUSH
25887: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25891: LD_VAR 0 2
25895: PUSH
25896: LD_INT 1
25898: ARRAY
25899: PPUSH
25900: CALL_OW 65
// end ; 5 .. 7 :
25904: GO 25928
25906: LD_INT 5
25908: DOUBLE
25909: GREATEREQUAL
25910: IFFALSE 25918
25912: LD_INT 7
25914: DOUBLE
25915: LESSEQUAL
25916: IFTRUE 25920
25918: GO 25927
25920: POP
// StreamSibBomb ; end ;
25921: CALL 22165 0 0
25925: GO 25928
25927: POP
// end ;
25928: PPOPN 3
25930: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25931: LD_EXP 46
25935: PUSH
25936: LD_EXP 96
25940: AND
25941: IFFALSE 26097
25943: GO 25945
25945: DISABLE
25946: LD_INT 0
25948: PPUSH
25949: PPUSH
25950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_INT 81
25958: PUSH
25959: LD_OWVAR 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 21
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 21
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PPUSH
26000: CALL_OW 69
26004: ST_TO_ADDR
// if not tmp then
26005: LD_VAR 0 2
26009: NOT
26010: IFFALSE 26014
// exit ;
26012: GO 26097
// p := 0 ;
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 0
26021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26022: LD_INT 35
26024: PPUSH
26025: CALL_OW 67
// p := p + 1 ;
26029: LD_ADDR_VAR 0 3
26033: PUSH
26034: LD_VAR 0 3
26038: PUSH
26039: LD_INT 1
26041: PLUS
26042: ST_TO_ADDR
// for i in tmp do
26043: LD_ADDR_VAR 0 1
26047: PUSH
26048: LD_VAR 0 2
26052: PUSH
26053: FOR_IN
26054: IFFALSE 26085
// if GetLives ( i ) < 1000 then
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 256
26065: PUSH
26066: LD_INT 1000
26068: LESS
26069: IFFALSE 26083
// SetLives ( i , 1000 ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 1000
26078: PPUSH
26079: CALL_OW 234
26083: GO 26053
26085: POP
26086: POP
// until p > 20 ;
26087: LD_VAR 0 3
26091: PUSH
26092: LD_INT 20
26094: GREATER
26095: IFFALSE 26022
// end ;
26097: PPOPN 3
26099: END
// every 0 0$1 trigger StreamModeActive and sTime do
26100: LD_EXP 46
26104: PUSH
26105: LD_EXP 97
26109: AND
26110: IFFALSE 26145
26112: GO 26114
26114: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26115: LD_INT 28
26117: PPUSH
26118: LD_OWVAR 2
26122: PPUSH
26123: LD_INT 2
26125: PPUSH
26126: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26130: LD_INT 30
26132: PPUSH
26133: LD_OWVAR 2
26137: PPUSH
26138: LD_INT 2
26140: PPUSH
26141: CALL_OW 322
// end ;
26145: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26146: LD_EXP 46
26150: PUSH
26151: LD_EXP 98
26155: AND
26156: IFFALSE 26277
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26165: LD_ADDR_VAR 0 2
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 21
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: PUSH
26195: LD_INT 23
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL_OW 69
26218: ST_TO_ADDR
// if not tmp then
26219: LD_VAR 0 2
26223: NOT
26224: IFFALSE 26228
// exit ;
26226: GO 26277
// for i in tmp do
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_VAR 0 2
26237: PUSH
26238: FOR_IN
26239: IFFALSE 26275
// begin if Crawls ( i ) then
26241: LD_VAR 0 1
26245: PPUSH
26246: CALL_OW 318
26250: IFFALSE 26261
// ComWalk ( i ) ;
26252: LD_VAR 0 1
26256: PPUSH
26257: CALL_OW 138
// SetClass ( i , 2 ) ;
26261: LD_VAR 0 1
26265: PPUSH
26266: LD_INT 2
26268: PPUSH
26269: CALL_OW 336
// end ;
26273: GO 26238
26275: POP
26276: POP
// end ;
26277: PPOPN 2
26279: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26280: LD_EXP 46
26284: PUSH
26285: LD_EXP 99
26289: AND
26290: IFFALSE 26578
26292: GO 26294
26294: DISABLE
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26300: LD_OWVAR 2
26304: PPUSH
26305: LD_INT 9
26307: PPUSH
26308: LD_INT 1
26310: PPUSH
26311: LD_INT 1
26313: PPUSH
26314: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26318: LD_INT 9
26320: PPUSH
26321: LD_OWVAR 2
26325: PPUSH
26326: CALL_OW 343
// uc_side := 9 ;
26330: LD_ADDR_OWVAR 20
26334: PUSH
26335: LD_INT 9
26337: ST_TO_ADDR
// uc_nation := 2 ;
26338: LD_ADDR_OWVAR 21
26342: PUSH
26343: LD_INT 2
26345: ST_TO_ADDR
// hc_name := Dark Warrior ;
26346: LD_ADDR_OWVAR 26
26350: PUSH
26351: LD_STRING Dark Warrior
26353: ST_TO_ADDR
// hc_gallery :=  ;
26354: LD_ADDR_OWVAR 33
26358: PUSH
26359: LD_STRING 
26361: ST_TO_ADDR
// hc_noskilllimit := true ;
26362: LD_ADDR_OWVAR 76
26366: PUSH
26367: LD_INT 1
26369: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26370: LD_ADDR_OWVAR 31
26374: PUSH
26375: LD_INT 30
26377: PUSH
26378: LD_INT 30
26380: PUSH
26381: LD_INT 30
26383: PUSH
26384: LD_INT 30
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: ST_TO_ADDR
// un := CreateHuman ;
26393: LD_ADDR_VAR 0 3
26397: PUSH
26398: CALL_OW 44
26402: ST_TO_ADDR
// hc_noskilllimit := false ;
26403: LD_ADDR_OWVAR 76
26407: PUSH
26408: LD_INT 0
26410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26411: LD_VAR 0 3
26415: PPUSH
26416: LD_INT 1
26418: PPUSH
26419: CALL_OW 51
// ToLua ( playRanger() ) ;
26423: LD_STRING playRanger()
26425: PPUSH
26426: CALL_OW 559
// p := 0 ;
26430: LD_ADDR_VAR 0 2
26434: PUSH
26435: LD_INT 0
26437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26438: LD_INT 35
26440: PPUSH
26441: CALL_OW 67
// p := p + 1 ;
26445: LD_ADDR_VAR 0 2
26449: PUSH
26450: LD_VAR 0 2
26454: PUSH
26455: LD_INT 1
26457: PLUS
26458: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26459: LD_VAR 0 3
26463: PPUSH
26464: CALL_OW 256
26468: PUSH
26469: LD_INT 1000
26471: LESS
26472: IFFALSE 26486
// SetLives ( un , 1000 ) ;
26474: LD_VAR 0 3
26478: PPUSH
26479: LD_INT 1000
26481: PPUSH
26482: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26486: LD_VAR 0 3
26490: PPUSH
26491: LD_INT 81
26493: PUSH
26494: LD_OWVAR 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 91
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: LD_INT 30
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PPUSH
26523: CALL_OW 69
26527: PPUSH
26528: LD_VAR 0 3
26532: PPUSH
26533: CALL_OW 74
26537: PPUSH
26538: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26542: LD_VAR 0 2
26546: PUSH
26547: LD_INT 80
26549: GREATER
26550: PUSH
26551: LD_VAR 0 3
26555: PPUSH
26556: CALL_OW 301
26560: OR
26561: IFFALSE 26438
// if un then
26563: LD_VAR 0 3
26567: IFFALSE 26578
// RemoveUnit ( un ) ;
26569: LD_VAR 0 3
26573: PPUSH
26574: CALL_OW 64
// end ;
26578: PPOPN 3
26580: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26581: LD_EXP 100
26585: IFFALSE 26701
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26595: LD_ADDR_VAR 0 2
26599: PUSH
26600: LD_INT 81
26602: PUSH
26603: LD_OWVAR 2
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 21
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26631: LD_STRING playComputer()
26633: PPUSH
26634: CALL_OW 559
// if not tmp then
26638: LD_VAR 0 2
26642: NOT
26643: IFFALSE 26647
// exit ;
26645: GO 26701
// for i in tmp do
26647: LD_ADDR_VAR 0 1
26651: PUSH
26652: LD_VAR 0 2
26656: PUSH
26657: FOR_IN
26658: IFFALSE 26699
// for j := 1 to 4 do
26660: LD_ADDR_VAR 0 3
26664: PUSH
26665: DOUBLE
26666: LD_INT 1
26668: DEC
26669: ST_TO_ADDR
26670: LD_INT 4
26672: PUSH
26673: FOR_TO
26674: IFFALSE 26695
// SetSkill ( i , j , 10 ) ;
26676: LD_VAR 0 1
26680: PPUSH
26681: LD_VAR 0 3
26685: PPUSH
26686: LD_INT 10
26688: PPUSH
26689: CALL_OW 237
26693: GO 26673
26695: POP
26696: POP
26697: GO 26657
26699: POP
26700: POP
// end ;
26701: PPOPN 3
26703: END
// every 0 0$1 trigger s30 do var i , tmp ;
26704: LD_EXP 101
26708: IFFALSE 26777
26710: GO 26712
26712: DISABLE
26713: LD_INT 0
26715: PPUSH
26716: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26717: LD_ADDR_VAR 0 2
26721: PUSH
26722: LD_INT 22
26724: PUSH
26725: LD_OWVAR 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PPUSH
26734: CALL_OW 69
26738: ST_TO_ADDR
// if not tmp then
26739: LD_VAR 0 2
26743: NOT
26744: IFFALSE 26748
// exit ;
26746: GO 26777
// for i in tmp do
26748: LD_ADDR_VAR 0 1
26752: PUSH
26753: LD_VAR 0 2
26757: PUSH
26758: FOR_IN
26759: IFFALSE 26775
// SetLives ( i , 300 ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_INT 300
26768: PPUSH
26769: CALL_OW 234
26773: GO 26758
26775: POP
26776: POP
// end ;
26777: PPOPN 2
26779: END
// every 0 0$1 trigger s60 do var i , tmp ;
26780: LD_EXP 102
26784: IFFALSE 26853
26786: GO 26788
26788: DISABLE
26789: LD_INT 0
26791: PPUSH
26792: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26793: LD_ADDR_VAR 0 2
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: ST_TO_ADDR
// if not tmp then
26815: LD_VAR 0 2
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26853
// for i in tmp do
26824: LD_ADDR_VAR 0 1
26828: PUSH
26829: LD_VAR 0 2
26833: PUSH
26834: FOR_IN
26835: IFFALSE 26851
// SetLives ( i , 600 ) ;
26837: LD_VAR 0 1
26841: PPUSH
26842: LD_INT 600
26844: PPUSH
26845: CALL_OW 234
26849: GO 26834
26851: POP
26852: POP
// end ;
26853: PPOPN 2
26855: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26856: LD_INT 0
26858: PPUSH
// case cmd of 301 :
26859: LD_VAR 0 1
26863: PUSH
26864: LD_INT 301
26866: DOUBLE
26867: EQUAL
26868: IFTRUE 26872
26870: GO 26904
26872: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26873: LD_VAR 0 6
26877: PPUSH
26878: LD_VAR 0 7
26882: PPUSH
26883: LD_VAR 0 8
26887: PPUSH
26888: LD_VAR 0 4
26892: PPUSH
26893: LD_VAR 0 5
26897: PPUSH
26898: CALL 28105 0 5
26902: GO 27025
26904: LD_INT 302
26906: DOUBLE
26907: EQUAL
26908: IFTRUE 26912
26910: GO 26949
26912: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26913: LD_VAR 0 6
26917: PPUSH
26918: LD_VAR 0 7
26922: PPUSH
26923: LD_VAR 0 8
26927: PPUSH
26928: LD_VAR 0 9
26932: PPUSH
26933: LD_VAR 0 4
26937: PPUSH
26938: LD_VAR 0 5
26942: PPUSH
26943: CALL 28196 0 6
26947: GO 27025
26949: LD_INT 303
26951: DOUBLE
26952: EQUAL
26953: IFTRUE 26957
26955: GO 26994
26957: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26958: LD_VAR 0 6
26962: PPUSH
26963: LD_VAR 0 7
26967: PPUSH
26968: LD_VAR 0 8
26972: PPUSH
26973: LD_VAR 0 9
26977: PPUSH
26978: LD_VAR 0 4
26982: PPUSH
26983: LD_VAR 0 5
26987: PPUSH
26988: CALL 27030 0 6
26992: GO 27025
26994: LD_INT 304
26996: DOUBLE
26997: EQUAL
26998: IFTRUE 27002
27000: GO 27024
27002: POP
// hHackTeleport ( unit , x , y ) ; end ;
27003: LD_VAR 0 2
27007: PPUSH
27008: LD_VAR 0 4
27012: PPUSH
27013: LD_VAR 0 5
27017: PPUSH
27018: CALL 28789 0 3
27022: GO 27025
27024: POP
// end ;
27025: LD_VAR 0 12
27029: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27030: LD_INT 0
27032: PPUSH
27033: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27034: LD_VAR 0 1
27038: PUSH
27039: LD_INT 1
27041: LESS
27042: PUSH
27043: LD_VAR 0 1
27047: PUSH
27048: LD_INT 3
27050: GREATER
27051: OR
27052: PUSH
27053: LD_VAR 0 5
27057: PPUSH
27058: LD_VAR 0 6
27062: PPUSH
27063: CALL_OW 428
27067: OR
27068: IFFALSE 27072
// exit ;
27070: GO 27792
// uc_side := your_side ;
27072: LD_ADDR_OWVAR 20
27076: PUSH
27077: LD_OWVAR 2
27081: ST_TO_ADDR
// uc_nation := nation ;
27082: LD_ADDR_OWVAR 21
27086: PUSH
27087: LD_VAR 0 1
27091: ST_TO_ADDR
// bc_level = 1 ;
27092: LD_ADDR_OWVAR 43
27096: PUSH
27097: LD_INT 1
27099: ST_TO_ADDR
// case btype of 1 :
27100: LD_VAR 0 2
27104: PUSH
27105: LD_INT 1
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27113
27111: GO 27124
27113: POP
// bc_type := b_depot ; 2 :
27114: LD_ADDR_OWVAR 42
27118: PUSH
27119: LD_INT 0
27121: ST_TO_ADDR
27122: GO 27736
27124: LD_INT 2
27126: DOUBLE
27127: EQUAL
27128: IFTRUE 27132
27130: GO 27143
27132: POP
// bc_type := b_warehouse ; 3 :
27133: LD_ADDR_OWVAR 42
27137: PUSH
27138: LD_INT 1
27140: ST_TO_ADDR
27141: GO 27736
27143: LD_INT 3
27145: DOUBLE
27146: EQUAL
27147: IFTRUE 27151
27149: GO 27162
27151: POP
// bc_type := b_lab ; 4 .. 9 :
27152: LD_ADDR_OWVAR 42
27156: PUSH
27157: LD_INT 6
27159: ST_TO_ADDR
27160: GO 27736
27162: LD_INT 4
27164: DOUBLE
27165: GREATEREQUAL
27166: IFFALSE 27174
27168: LD_INT 9
27170: DOUBLE
27171: LESSEQUAL
27172: IFTRUE 27176
27174: GO 27228
27176: POP
// begin bc_type := b_lab_half ;
27177: LD_ADDR_OWVAR 42
27181: PUSH
27182: LD_INT 7
27184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27185: LD_ADDR_OWVAR 44
27189: PUSH
27190: LD_INT 10
27192: PUSH
27193: LD_INT 11
27195: PUSH
27196: LD_INT 12
27198: PUSH
27199: LD_INT 15
27201: PUSH
27202: LD_INT 14
27204: PUSH
27205: LD_INT 13
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: PUSH
27216: LD_VAR 0 2
27220: PUSH
27221: LD_INT 3
27223: MINUS
27224: ARRAY
27225: ST_TO_ADDR
// end ; 10 .. 13 :
27226: GO 27736
27228: LD_INT 10
27230: DOUBLE
27231: GREATEREQUAL
27232: IFFALSE 27240
27234: LD_INT 13
27236: DOUBLE
27237: LESSEQUAL
27238: IFTRUE 27242
27240: GO 27319
27242: POP
// begin bc_type := b_lab_full ;
27243: LD_ADDR_OWVAR 42
27247: PUSH
27248: LD_INT 8
27250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27251: LD_ADDR_OWVAR 44
27255: PUSH
27256: LD_INT 10
27258: PUSH
27259: LD_INT 12
27261: PUSH
27262: LD_INT 14
27264: PUSH
27265: LD_INT 13
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: PUSH
27274: LD_VAR 0 2
27278: PUSH
27279: LD_INT 9
27281: MINUS
27282: ARRAY
27283: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27284: LD_ADDR_OWVAR 45
27288: PUSH
27289: LD_INT 11
27291: PUSH
27292: LD_INT 15
27294: PUSH
27295: LD_INT 12
27297: PUSH
27298: LD_INT 15
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: LD_VAR 0 2
27311: PUSH
27312: LD_INT 9
27314: MINUS
27315: ARRAY
27316: ST_TO_ADDR
// end ; 14 :
27317: GO 27736
27319: LD_INT 14
27321: DOUBLE
27322: EQUAL
27323: IFTRUE 27327
27325: GO 27338
27327: POP
// bc_type := b_workshop ; 15 :
27328: LD_ADDR_OWVAR 42
27332: PUSH
27333: LD_INT 2
27335: ST_TO_ADDR
27336: GO 27736
27338: LD_INT 15
27340: DOUBLE
27341: EQUAL
27342: IFTRUE 27346
27344: GO 27357
27346: POP
// bc_type := b_factory ; 16 :
27347: LD_ADDR_OWVAR 42
27351: PUSH
27352: LD_INT 3
27354: ST_TO_ADDR
27355: GO 27736
27357: LD_INT 16
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 27376
27365: POP
// bc_type := b_ext_gun ; 17 :
27366: LD_ADDR_OWVAR 42
27370: PUSH
27371: LD_INT 17
27373: ST_TO_ADDR
27374: GO 27736
27376: LD_INT 17
27378: DOUBLE
27379: EQUAL
27380: IFTRUE 27384
27382: GO 27412
27384: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27385: LD_ADDR_OWVAR 42
27389: PUSH
27390: LD_INT 19
27392: PUSH
27393: LD_INT 23
27395: PUSH
27396: LD_INT 19
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PUSH
27404: LD_VAR 0 1
27408: ARRAY
27409: ST_TO_ADDR
27410: GO 27736
27412: LD_INT 18
27414: DOUBLE
27415: EQUAL
27416: IFTRUE 27420
27418: GO 27431
27420: POP
// bc_type := b_ext_radar ; 19 :
27421: LD_ADDR_OWVAR 42
27425: PUSH
27426: LD_INT 20
27428: ST_TO_ADDR
27429: GO 27736
27431: LD_INT 19
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27450
27439: POP
// bc_type := b_ext_radio ; 20 :
27440: LD_ADDR_OWVAR 42
27444: PUSH
27445: LD_INT 22
27447: ST_TO_ADDR
27448: GO 27736
27450: LD_INT 20
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27458
27456: GO 27469
27458: POP
// bc_type := b_ext_siberium ; 21 :
27459: LD_ADDR_OWVAR 42
27463: PUSH
27464: LD_INT 21
27466: ST_TO_ADDR
27467: GO 27736
27469: LD_INT 21
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 27488
27477: POP
// bc_type := b_ext_computer ; 22 :
27478: LD_ADDR_OWVAR 42
27482: PUSH
27483: LD_INT 24
27485: ST_TO_ADDR
27486: GO 27736
27488: LD_INT 22
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27496
27494: GO 27507
27496: POP
// bc_type := b_ext_track ; 23 :
27497: LD_ADDR_OWVAR 42
27501: PUSH
27502: LD_INT 16
27504: ST_TO_ADDR
27505: GO 27736
27507: LD_INT 23
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27515
27513: GO 27526
27515: POP
// bc_type := b_ext_laser ; 24 :
27516: LD_ADDR_OWVAR 42
27520: PUSH
27521: LD_INT 25
27523: ST_TO_ADDR
27524: GO 27736
27526: LD_INT 24
27528: DOUBLE
27529: EQUAL
27530: IFTRUE 27534
27532: GO 27545
27534: POP
// bc_type := b_control_tower ; 25 :
27535: LD_ADDR_OWVAR 42
27539: PUSH
27540: LD_INT 36
27542: ST_TO_ADDR
27543: GO 27736
27545: LD_INT 25
27547: DOUBLE
27548: EQUAL
27549: IFTRUE 27553
27551: GO 27564
27553: POP
// bc_type := b_breastwork ; 26 :
27554: LD_ADDR_OWVAR 42
27558: PUSH
27559: LD_INT 31
27561: ST_TO_ADDR
27562: GO 27736
27564: LD_INT 26
27566: DOUBLE
27567: EQUAL
27568: IFTRUE 27572
27570: GO 27583
27572: POP
// bc_type := b_bunker ; 27 :
27573: LD_ADDR_OWVAR 42
27577: PUSH
27578: LD_INT 32
27580: ST_TO_ADDR
27581: GO 27736
27583: LD_INT 27
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27602
27591: POP
// bc_type := b_turret ; 28 :
27592: LD_ADDR_OWVAR 42
27596: PUSH
27597: LD_INT 33
27599: ST_TO_ADDR
27600: GO 27736
27602: LD_INT 28
27604: DOUBLE
27605: EQUAL
27606: IFTRUE 27610
27608: GO 27621
27610: POP
// bc_type := b_armoury ; 29 :
27611: LD_ADDR_OWVAR 42
27615: PUSH
27616: LD_INT 4
27618: ST_TO_ADDR
27619: GO 27736
27621: LD_INT 29
27623: DOUBLE
27624: EQUAL
27625: IFTRUE 27629
27627: GO 27640
27629: POP
// bc_type := b_barracks ; 30 :
27630: LD_ADDR_OWVAR 42
27634: PUSH
27635: LD_INT 5
27637: ST_TO_ADDR
27638: GO 27736
27640: LD_INT 30
27642: DOUBLE
27643: EQUAL
27644: IFTRUE 27648
27646: GO 27659
27648: POP
// bc_type := b_solar_power ; 31 :
27649: LD_ADDR_OWVAR 42
27653: PUSH
27654: LD_INT 27
27656: ST_TO_ADDR
27657: GO 27736
27659: LD_INT 31
27661: DOUBLE
27662: EQUAL
27663: IFTRUE 27667
27665: GO 27678
27667: POP
// bc_type := b_oil_power ; 32 :
27668: LD_ADDR_OWVAR 42
27672: PUSH
27673: LD_INT 26
27675: ST_TO_ADDR
27676: GO 27736
27678: LD_INT 32
27680: DOUBLE
27681: EQUAL
27682: IFTRUE 27686
27684: GO 27697
27686: POP
// bc_type := b_siberite_power ; 33 :
27687: LD_ADDR_OWVAR 42
27691: PUSH
27692: LD_INT 28
27694: ST_TO_ADDR
27695: GO 27736
27697: LD_INT 33
27699: DOUBLE
27700: EQUAL
27701: IFTRUE 27705
27703: GO 27716
27705: POP
// bc_type := b_oil_mine ; 34 :
27706: LD_ADDR_OWVAR 42
27710: PUSH
27711: LD_INT 29
27713: ST_TO_ADDR
27714: GO 27736
27716: LD_INT 34
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27724
27722: GO 27735
27724: POP
// bc_type := b_siberite_mine ; end ;
27725: LD_ADDR_OWVAR 42
27729: PUSH
27730: LD_INT 30
27732: ST_TO_ADDR
27733: GO 27736
27735: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27736: LD_ADDR_VAR 0 8
27740: PUSH
27741: LD_VAR 0 5
27745: PPUSH
27746: LD_VAR 0 6
27750: PPUSH
27751: LD_VAR 0 3
27755: PPUSH
27756: CALL_OW 47
27760: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27761: LD_OWVAR 42
27765: PUSH
27766: LD_INT 32
27768: PUSH
27769: LD_INT 33
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: IN
27776: IFFALSE 27792
// PlaceWeaponTurret ( b , weapon ) ;
27778: LD_VAR 0 8
27782: PPUSH
27783: LD_VAR 0 4
27787: PPUSH
27788: CALL_OW 431
// end ;
27792: LD_VAR 0 7
27796: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27797: LD_INT 0
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27803: LD_ADDR_VAR 0 4
27807: PUSH
27808: LD_INT 22
27810: PUSH
27811: LD_OWVAR 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 30
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 30
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: ST_TO_ADDR
// if not tmp then
27857: LD_VAR 0 4
27861: NOT
27862: IFFALSE 27866
// exit ;
27864: GO 27925
// for i in tmp do
27866: LD_ADDR_VAR 0 2
27870: PUSH
27871: LD_VAR 0 4
27875: PUSH
27876: FOR_IN
27877: IFFALSE 27923
// for j = 1 to 3 do
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: DOUBLE
27885: LD_INT 1
27887: DEC
27888: ST_TO_ADDR
27889: LD_INT 3
27891: PUSH
27892: FOR_TO
27893: IFFALSE 27919
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27895: LD_VAR 0 2
27899: PPUSH
27900: CALL_OW 274
27904: PPUSH
27905: LD_VAR 0 3
27909: PPUSH
27910: LD_INT 99999
27912: PPUSH
27913: CALL_OW 277
27917: GO 27892
27919: POP
27920: POP
27921: GO 27876
27923: POP
27924: POP
// end ;
27925: LD_VAR 0 1
27929: RET
// export function hHackSetLevel10 ; var i , j ; begin
27930: LD_INT 0
27932: PPUSH
27933: PPUSH
27934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27935: LD_ADDR_VAR 0 2
27939: PUSH
27940: LD_INT 21
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PPUSH
27950: CALL_OW 69
27954: PUSH
27955: FOR_IN
27956: IFFALSE 28008
// if IsSelected ( i ) then
27958: LD_VAR 0 2
27962: PPUSH
27963: CALL_OW 306
27967: IFFALSE 28006
// begin for j := 1 to 4 do
27969: LD_ADDR_VAR 0 3
27973: PUSH
27974: DOUBLE
27975: LD_INT 1
27977: DEC
27978: ST_TO_ADDR
27979: LD_INT 4
27981: PUSH
27982: FOR_TO
27983: IFFALSE 28004
// SetSkill ( i , j , 10 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_VAR 0 3
27994: PPUSH
27995: LD_INT 10
27997: PPUSH
27998: CALL_OW 237
28002: GO 27982
28004: POP
28005: POP
// end ;
28006: GO 27955
28008: POP
28009: POP
// end ;
28010: LD_VAR 0 1
28014: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
28019: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28020: LD_ADDR_VAR 0 2
28024: PUSH
28025: LD_INT 22
28027: PUSH
28028: LD_OWVAR 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 21
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: PUSH
28056: FOR_IN
28057: IFFALSE 28098
// begin for j := 1 to 4 do
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: DOUBLE
28065: LD_INT 1
28067: DEC
28068: ST_TO_ADDR
28069: LD_INT 4
28071: PUSH
28072: FOR_TO
28073: IFFALSE 28094
// SetSkill ( i , j , 10 ) ;
28075: LD_VAR 0 2
28079: PPUSH
28080: LD_VAR 0 3
28084: PPUSH
28085: LD_INT 10
28087: PPUSH
28088: CALL_OW 237
28092: GO 28072
28094: POP
28095: POP
// end ;
28096: GO 28056
28098: POP
28099: POP
// end ;
28100: LD_VAR 0 1
28104: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28105: LD_INT 0
28107: PPUSH
// uc_side := your_side ;
28108: LD_ADDR_OWVAR 20
28112: PUSH
28113: LD_OWVAR 2
28117: ST_TO_ADDR
// uc_nation := nation ;
28118: LD_ADDR_OWVAR 21
28122: PUSH
28123: LD_VAR 0 1
28127: ST_TO_ADDR
// InitHc ;
28128: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28132: LD_INT 0
28134: PPUSH
28135: LD_VAR 0 2
28139: PPUSH
28140: LD_VAR 0 3
28144: PPUSH
28145: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28149: LD_VAR 0 4
28153: PPUSH
28154: LD_VAR 0 5
28158: PPUSH
28159: CALL_OW 428
28163: PUSH
28164: LD_INT 0
28166: EQUAL
28167: IFFALSE 28191
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28169: CALL_OW 44
28173: PPUSH
28174: LD_VAR 0 4
28178: PPUSH
28179: LD_VAR 0 5
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 48
// end ;
28191: LD_VAR 0 6
28195: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28196: LD_INT 0
28198: PPUSH
28199: PPUSH
// uc_side := your_side ;
28200: LD_ADDR_OWVAR 20
28204: PUSH
28205: LD_OWVAR 2
28209: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28210: LD_VAR 0 1
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: LD_INT 4
28226: PUSH
28227: LD_INT 5
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: IN
28237: IFFALSE 28249
// uc_nation := nation_american else
28239: LD_ADDR_OWVAR 21
28243: PUSH
28244: LD_INT 1
28246: ST_TO_ADDR
28247: GO 28292
// if chassis in [ 11 , 12 , 13 , 14 ] then
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 11
28256: PUSH
28257: LD_INT 12
28259: PUSH
28260: LD_INT 13
28262: PUSH
28263: LD_INT 14
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: IN
28272: IFFALSE 28284
// uc_nation := nation_arabian else
28274: LD_ADDR_OWVAR 21
28278: PUSH
28279: LD_INT 2
28281: ST_TO_ADDR
28282: GO 28292
// uc_nation := nation_russian ;
28284: LD_ADDR_OWVAR 21
28288: PUSH
28289: LD_INT 3
28291: ST_TO_ADDR
// vc_chassis := chassis ;
28292: LD_ADDR_OWVAR 37
28296: PUSH
28297: LD_VAR 0 1
28301: ST_TO_ADDR
// vc_engine := engine ;
28302: LD_ADDR_OWVAR 39
28306: PUSH
28307: LD_VAR 0 2
28311: ST_TO_ADDR
// vc_control := control ;
28312: LD_ADDR_OWVAR 38
28316: PUSH
28317: LD_VAR 0 3
28321: ST_TO_ADDR
// vc_weapon := weapon ;
28322: LD_ADDR_OWVAR 40
28326: PUSH
28327: LD_VAR 0 4
28331: ST_TO_ADDR
// un := CreateVehicle ;
28332: LD_ADDR_VAR 0 8
28336: PUSH
28337: CALL_OW 45
28341: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28342: LD_VAR 0 8
28346: PPUSH
28347: LD_INT 0
28349: PPUSH
28350: LD_INT 5
28352: PPUSH
28353: CALL_OW 12
28357: PPUSH
28358: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28362: LD_VAR 0 8
28366: PPUSH
28367: LD_VAR 0 5
28371: PPUSH
28372: LD_VAR 0 6
28376: PPUSH
28377: LD_INT 1
28379: PPUSH
28380: CALL_OW 48
// end ;
28384: LD_VAR 0 7
28388: RET
// export hInvincible ; every 1 do
28389: GO 28391
28391: DISABLE
// hInvincible := [ ] ;
28392: LD_ADDR_EXP 103
28396: PUSH
28397: EMPTY
28398: ST_TO_ADDR
28399: END
// every 10 do var i ;
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
// begin enable ;
28406: ENABLE
// if not hInvincible then
28407: LD_EXP 103
28411: NOT
28412: IFFALSE 28416
// exit ;
28414: GO 28460
// for i in hInvincible do
28416: LD_ADDR_VAR 0 1
28420: PUSH
28421: LD_EXP 103
28425: PUSH
28426: FOR_IN
28427: IFFALSE 28458
// if GetLives ( i ) < 1000 then
28429: LD_VAR 0 1
28433: PPUSH
28434: CALL_OW 256
28438: PUSH
28439: LD_INT 1000
28441: LESS
28442: IFFALSE 28456
// SetLives ( i , 1000 ) ;
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_INT 1000
28451: PPUSH
28452: CALL_OW 234
28456: GO 28426
28458: POP
28459: POP
// end ;
28460: PPOPN 1
28462: END
// export function hHackInvincible ; var i ; begin
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28467: LD_ADDR_VAR 0 2
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: LD_INT 21
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 21
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PUSH
28505: FOR_IN
28506: IFFALSE 28567
// if IsSelected ( i ) then
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 306
28517: IFFALSE 28565
// begin if i in hInvincible then
28519: LD_VAR 0 2
28523: PUSH
28524: LD_EXP 103
28528: IN
28529: IFFALSE 28549
// hInvincible := hInvincible diff i else
28531: LD_ADDR_EXP 103
28535: PUSH
28536: LD_EXP 103
28540: PUSH
28541: LD_VAR 0 2
28545: DIFF
28546: ST_TO_ADDR
28547: GO 28565
// hInvincible := hInvincible union i ;
28549: LD_ADDR_EXP 103
28553: PUSH
28554: LD_EXP 103
28558: PUSH
28559: LD_VAR 0 2
28563: UNION
28564: ST_TO_ADDR
// end ;
28565: GO 28505
28567: POP
28568: POP
// end ;
28569: LD_VAR 0 1
28573: RET
// export function hHackInvisible ; var i , j ; begin
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
28578: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28579: LD_ADDR_VAR 0 2
28583: PUSH
28584: LD_INT 21
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PPUSH
28594: CALL_OW 69
28598: PUSH
28599: FOR_IN
28600: IFFALSE 28624
// if IsSelected ( i ) then
28602: LD_VAR 0 2
28606: PPUSH
28607: CALL_OW 306
28611: IFFALSE 28622
// ComForceInvisible ( i ) ;
28613: LD_VAR 0 2
28617: PPUSH
28618: CALL_OW 496
28622: GO 28599
28624: POP
28625: POP
// end ;
28626: LD_VAR 0 1
28630: RET
// export function hHackChangeYourSide ; begin
28631: LD_INT 0
28633: PPUSH
// if your_side = 8 then
28634: LD_OWVAR 2
28638: PUSH
28639: LD_INT 8
28641: EQUAL
28642: IFFALSE 28654
// your_side := 0 else
28644: LD_ADDR_OWVAR 2
28648: PUSH
28649: LD_INT 0
28651: ST_TO_ADDR
28652: GO 28668
// your_side := your_side + 1 ;
28654: LD_ADDR_OWVAR 2
28658: PUSH
28659: LD_OWVAR 2
28663: PUSH
28664: LD_INT 1
28666: PLUS
28667: ST_TO_ADDR
// end ;
28668: LD_VAR 0 1
28672: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28673: LD_INT 0
28675: PPUSH
28676: PPUSH
28677: PPUSH
// for i in all_units do
28678: LD_ADDR_VAR 0 2
28682: PUSH
28683: LD_OWVAR 3
28687: PUSH
28688: FOR_IN
28689: IFFALSE 28767
// if IsSelected ( i ) then
28691: LD_VAR 0 2
28695: PPUSH
28696: CALL_OW 306
28700: IFFALSE 28765
// begin j := GetSide ( i ) ;
28702: LD_ADDR_VAR 0 3
28706: PUSH
28707: LD_VAR 0 2
28711: PPUSH
28712: CALL_OW 255
28716: ST_TO_ADDR
// if j = 8 then
28717: LD_VAR 0 3
28721: PUSH
28722: LD_INT 8
28724: EQUAL
28725: IFFALSE 28737
// j := 0 else
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_INT 0
28734: ST_TO_ADDR
28735: GO 28751
// j := j + 1 ;
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: LD_VAR 0 3
28746: PUSH
28747: LD_INT 1
28749: PLUS
28750: ST_TO_ADDR
// SetSide ( i , j ) ;
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_VAR 0 3
28760: PPUSH
28761: CALL_OW 235
// end ;
28765: GO 28688
28767: POP
28768: POP
// end ;
28769: LD_VAR 0 1
28773: RET
// export function hHackFog ; begin
28774: LD_INT 0
28776: PPUSH
// FogOff ( true ) ;
28777: LD_INT 1
28779: PPUSH
28780: CALL_OW 344
// end ;
28784: LD_VAR 0 1
28788: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28789: LD_INT 0
28791: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28792: LD_VAR 0 1
28796: PPUSH
28797: LD_VAR 0 2
28801: PPUSH
28802: LD_VAR 0 3
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: LD_INT 1
28812: PPUSH
28813: CALL_OW 483
// CenterOnXY ( x , y ) ;
28817: LD_VAR 0 2
28821: PPUSH
28822: LD_VAR 0 3
28826: PPUSH
28827: CALL_OW 84
// end ;
28831: LD_VAR 0 4
28835: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28840: LD_VAR 0 1
28844: NOT
28845: PUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_VAR 0 3
28855: PPUSH
28856: CALL_OW 488
28860: NOT
28861: OR
28862: PUSH
28863: LD_VAR 0 1
28867: PPUSH
28868: CALL_OW 266
28872: PUSH
28873: LD_INT 3
28875: NONEQUAL
28876: PUSH
28877: LD_VAR 0 1
28881: PPUSH
28882: CALL_OW 247
28886: PUSH
28887: LD_INT 1
28889: EQUAL
28890: NOT
28891: AND
28892: OR
28893: IFFALSE 28897
// exit ;
28895: GO 29046
// if GetType ( factory ) = unit_human then
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 247
28906: PUSH
28907: LD_INT 1
28909: EQUAL
28910: IFFALSE 28927
// factory := IsInUnit ( factory ) ;
28912: LD_ADDR_VAR 0 1
28916: PUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 310
28926: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 266
28936: PUSH
28937: LD_INT 3
28939: NONEQUAL
28940: IFFALSE 28944
// exit ;
28942: GO 29046
// if HexInfo ( x , y ) = factory then
28944: LD_VAR 0 2
28948: PPUSH
28949: LD_VAR 0 3
28953: PPUSH
28954: CALL_OW 428
28958: PUSH
28959: LD_VAR 0 1
28963: EQUAL
28964: IFFALSE 28991
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28966: LD_ADDR_EXP 104
28970: PUSH
28971: LD_EXP 104
28975: PPUSH
28976: LD_VAR 0 1
28980: PPUSH
28981: LD_INT 0
28983: PPUSH
28984: CALL_OW 1
28988: ST_TO_ADDR
28989: GO 29042
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28991: LD_ADDR_EXP 104
28995: PUSH
28996: LD_EXP 104
29000: PPUSH
29001: LD_VAR 0 1
29005: PPUSH
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL_OW 255
29015: PUSH
29016: LD_VAR 0 1
29020: PUSH
29021: LD_VAR 0 2
29025: PUSH
29026: LD_VAR 0 3
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: PPUSH
29037: CALL_OW 1
29041: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29042: CALL 29051 0 0
// end ;
29046: LD_VAR 0 4
29050: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29051: LD_INT 0
29053: PPUSH
29054: PPUSH
29055: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29056: LD_STRING resetFactoryWaypoint();
29058: PPUSH
29059: CALL_OW 559
// if factoryWaypoints then
29063: LD_EXP 104
29067: IFFALSE 29193
// begin list := PrepareArray ( factoryWaypoints ) ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_EXP 104
29078: PPUSH
29079: CALL 71474 0 1
29083: ST_TO_ADDR
// for i := 1 to list do
29084: LD_ADDR_VAR 0 2
29088: PUSH
29089: DOUBLE
29090: LD_INT 1
29092: DEC
29093: ST_TO_ADDR
29094: LD_VAR 0 3
29098: PUSH
29099: FOR_TO
29100: IFFALSE 29191
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29102: LD_STRING setFactoryWaypointXY(
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_VAR 0 2
29114: ARRAY
29115: PUSH
29116: LD_INT 1
29118: ARRAY
29119: STR
29120: PUSH
29121: LD_STRING ,
29123: STR
29124: PUSH
29125: LD_VAR 0 3
29129: PUSH
29130: LD_VAR 0 2
29134: ARRAY
29135: PUSH
29136: LD_INT 2
29138: ARRAY
29139: STR
29140: PUSH
29141: LD_STRING ,
29143: STR
29144: PUSH
29145: LD_VAR 0 3
29149: PUSH
29150: LD_VAR 0 2
29154: ARRAY
29155: PUSH
29156: LD_INT 3
29158: ARRAY
29159: STR
29160: PUSH
29161: LD_STRING ,
29163: STR
29164: PUSH
29165: LD_VAR 0 3
29169: PUSH
29170: LD_VAR 0 2
29174: ARRAY
29175: PUSH
29176: LD_INT 4
29178: ARRAY
29179: STR
29180: PUSH
29181: LD_STRING )
29183: STR
29184: PPUSH
29185: CALL_OW 559
29189: GO 29099
29191: POP
29192: POP
// end ; end ;
29193: LD_VAR 0 1
29197: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29198: LD_INT 0
29200: PPUSH
// if HexInfo ( x , y ) = warehouse then
29201: LD_VAR 0 2
29205: PPUSH
29206: LD_VAR 0 3
29210: PPUSH
29211: CALL_OW 428
29215: PUSH
29216: LD_VAR 0 1
29220: EQUAL
29221: IFFALSE 29248
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29223: LD_ADDR_EXP 105
29227: PUSH
29228: LD_EXP 105
29232: PPUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: LD_INT 0
29240: PPUSH
29241: CALL_OW 1
29245: ST_TO_ADDR
29246: GO 29299
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29248: LD_ADDR_EXP 105
29252: PUSH
29253: LD_EXP 105
29257: PPUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 255
29272: PUSH
29273: LD_VAR 0 1
29277: PUSH
29278: LD_VAR 0 2
29282: PUSH
29283: LD_VAR 0 3
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 1
29298: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29299: CALL 29308 0 0
// end ;
29303: LD_VAR 0 4
29307: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29313: LD_STRING resetWarehouseGatheringPoints();
29315: PPUSH
29316: CALL_OW 559
// if warehouseGatheringPoints then
29320: LD_EXP 105
29324: IFFALSE 29450
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: LD_EXP 105
29335: PPUSH
29336: CALL 71474 0 1
29340: ST_TO_ADDR
// for i := 1 to list do
29341: LD_ADDR_VAR 0 2
29345: PUSH
29346: DOUBLE
29347: LD_INT 1
29349: DEC
29350: ST_TO_ADDR
29351: LD_VAR 0 3
29355: PUSH
29356: FOR_TO
29357: IFFALSE 29448
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29359: LD_STRING setWarehouseGatheringPointXY(
29361: PUSH
29362: LD_VAR 0 3
29366: PUSH
29367: LD_VAR 0 2
29371: ARRAY
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: STR
29377: PUSH
29378: LD_STRING ,
29380: STR
29381: PUSH
29382: LD_VAR 0 3
29386: PUSH
29387: LD_VAR 0 2
29391: ARRAY
29392: PUSH
29393: LD_INT 2
29395: ARRAY
29396: STR
29397: PUSH
29398: LD_STRING ,
29400: STR
29401: PUSH
29402: LD_VAR 0 3
29406: PUSH
29407: LD_VAR 0 2
29411: ARRAY
29412: PUSH
29413: LD_INT 3
29415: ARRAY
29416: STR
29417: PUSH
29418: LD_STRING ,
29420: STR
29421: PUSH
29422: LD_VAR 0 3
29426: PUSH
29427: LD_VAR 0 2
29431: ARRAY
29432: PUSH
29433: LD_INT 4
29435: ARRAY
29436: STR
29437: PUSH
29438: LD_STRING )
29440: STR
29441: PPUSH
29442: CALL_OW 559
29446: GO 29356
29448: POP
29449: POP
// end ; end ;
29450: LD_VAR 0 1
29454: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29455: LD_EXP 105
29459: IFFALSE 30146
29461: GO 29463
29463: DISABLE
29464: LD_INT 0
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
// begin enable ;
29475: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_EXP 105
29485: PPUSH
29486: CALL 71474 0 1
29490: ST_TO_ADDR
// if not list then
29491: LD_VAR 0 3
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 30146
// for i := 1 to list do
29500: LD_ADDR_VAR 0 1
29504: PUSH
29505: DOUBLE
29506: LD_INT 1
29508: DEC
29509: ST_TO_ADDR
29510: LD_VAR 0 3
29514: PUSH
29515: FOR_TO
29516: IFFALSE 30144
// begin depot := list [ i ] [ 2 ] ;
29518: LD_ADDR_VAR 0 8
29522: PUSH
29523: LD_VAR 0 3
29527: PUSH
29528: LD_VAR 0 1
29532: ARRAY
29533: PUSH
29534: LD_INT 2
29536: ARRAY
29537: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29538: LD_ADDR_VAR 0 5
29542: PUSH
29543: LD_VAR 0 3
29547: PUSH
29548: LD_VAR 0 1
29552: ARRAY
29553: PUSH
29554: LD_INT 1
29556: ARRAY
29557: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29558: LD_VAR 0 8
29562: PPUSH
29563: CALL_OW 301
29567: PUSH
29568: LD_VAR 0 5
29572: PUSH
29573: LD_VAR 0 8
29577: PPUSH
29578: CALL_OW 255
29582: NONEQUAL
29583: OR
29584: IFFALSE 29613
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29586: LD_ADDR_EXP 105
29590: PUSH
29591: LD_EXP 105
29595: PPUSH
29596: LD_VAR 0 8
29600: PPUSH
29601: LD_INT 0
29603: PPUSH
29604: CALL_OW 1
29608: ST_TO_ADDR
// exit ;
29609: POP
29610: POP
29611: GO 30146
// end ; x := list [ i ] [ 3 ] ;
29613: LD_ADDR_VAR 0 6
29617: PUSH
29618: LD_VAR 0 3
29622: PUSH
29623: LD_VAR 0 1
29627: ARRAY
29628: PUSH
29629: LD_INT 3
29631: ARRAY
29632: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29633: LD_ADDR_VAR 0 7
29637: PUSH
29638: LD_VAR 0 3
29642: PUSH
29643: LD_VAR 0 1
29647: ARRAY
29648: PUSH
29649: LD_INT 4
29651: ARRAY
29652: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29653: LD_ADDR_VAR 0 9
29657: PUSH
29658: LD_VAR 0 6
29662: PPUSH
29663: LD_VAR 0 7
29667: PPUSH
29668: LD_INT 16
29670: PPUSH
29671: CALL 70058 0 3
29675: ST_TO_ADDR
// if not cratesNearbyPoint then
29676: LD_VAR 0 9
29680: NOT
29681: IFFALSE 29687
// exit ;
29683: POP
29684: POP
29685: GO 30146
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29687: LD_ADDR_VAR 0 4
29691: PUSH
29692: LD_INT 22
29694: PUSH
29695: LD_VAR 0 5
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 3
29706: PUSH
29707: LD_INT 60
29709: PUSH
29710: EMPTY
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 91
29719: PUSH
29720: LD_VAR 0 8
29724: PUSH
29725: LD_INT 6
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 25
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 25
29748: PUSH
29749: LD_INT 16
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: PPUSH
29767: CALL_OW 69
29771: PUSH
29772: LD_VAR 0 8
29776: PPUSH
29777: CALL_OW 313
29781: PPUSH
29782: LD_INT 3
29784: PUSH
29785: LD_INT 60
29787: PUSH
29788: EMPTY
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 25
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 25
29810: PUSH
29811: LD_INT 16
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PPUSH
29827: CALL_OW 72
29831: UNION
29832: ST_TO_ADDR
// if tmp then
29833: LD_VAR 0 4
29837: IFFALSE 29917
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29839: LD_ADDR_VAR 0 4
29843: PUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: LD_INT 3
29851: PPUSH
29852: CALL 68025 0 2
29856: ST_TO_ADDR
// for j in tmp do
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_VAR 0 4
29866: PUSH
29867: FOR_IN
29868: IFFALSE 29911
// begin if IsInUnit ( j ) then
29870: LD_VAR 0 2
29874: PPUSH
29875: CALL_OW 310
29879: IFFALSE 29890
// ComExit ( j ) ;
29881: LD_VAR 0 2
29885: PPUSH
29886: CALL 68108 0 1
// AddComCollect ( j , x , y ) ;
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_VAR 0 6
29899: PPUSH
29900: LD_VAR 0 7
29904: PPUSH
29905: CALL_OW 177
// end ;
29909: GO 29867
29911: POP
29912: POP
// exit ;
29913: POP
29914: POP
29915: GO 30146
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29917: LD_ADDR_VAR 0 4
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_VAR 0 5
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 91
29936: PUSH
29937: LD_VAR 0 8
29941: PUSH
29942: LD_INT 8
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 34
29955: PUSH
29956: LD_INT 12
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 34
29965: PUSH
29966: LD_INT 51
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 34
29975: PUSH
29976: LD_INT 32
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 34
29985: PUSH
29986: LD_EXP 108
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: PPUSH
30007: CALL_OW 69
30011: ST_TO_ADDR
// if tmp then
30012: LD_VAR 0 4
30016: IFFALSE 30142
// begin for j in tmp do
30018: LD_ADDR_VAR 0 2
30022: PUSH
30023: LD_VAR 0 4
30027: PUSH
30028: FOR_IN
30029: IFFALSE 30140
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30031: LD_VAR 0 2
30035: PPUSH
30036: CALL_OW 262
30040: PUSH
30041: LD_INT 3
30043: EQUAL
30044: PUSH
30045: LD_VAR 0 2
30049: PPUSH
30050: CALL_OW 261
30054: PUSH
30055: LD_INT 20
30057: GREATER
30058: OR
30059: PUSH
30060: LD_VAR 0 2
30064: PPUSH
30065: CALL_OW 314
30069: NOT
30070: AND
30071: PUSH
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 263
30081: PUSH
30082: LD_INT 1
30084: NONEQUAL
30085: PUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: CALL_OW 311
30095: OR
30096: AND
30097: IFFALSE 30138
// begin ComCollect ( j , x , y ) ;
30099: LD_VAR 0 2
30103: PPUSH
30104: LD_VAR 0 6
30108: PPUSH
30109: LD_VAR 0 7
30113: PPUSH
30114: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30118: LD_VAR 0 2
30122: PPUSH
30123: LD_VAR 0 8
30127: PPUSH
30128: CALL_OW 172
// exit ;
30132: POP
30133: POP
30134: POP
30135: POP
30136: GO 30146
// end ;
30138: GO 30028
30140: POP
30141: POP
// end ; end ;
30142: GO 29515
30144: POP
30145: POP
// end ; end_of_file end_of_file
30146: PPOPN 9
30148: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
30149: LD_INT 0
30151: PPUSH
// ar_miner := 81 ;
30152: LD_ADDR_EXP 114
30156: PUSH
30157: LD_INT 81
30159: ST_TO_ADDR
// ar_crane := 88 ;
30160: LD_ADDR_EXP 113
30164: PUSH
30165: LD_INT 88
30167: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30168: LD_ADDR_EXP 108
30172: PUSH
30173: LD_INT 89
30175: ST_TO_ADDR
// us_hack := 99 ;
30176: LD_ADDR_EXP 109
30180: PUSH
30181: LD_INT 99
30183: ST_TO_ADDR
// us_artillery := 97 ;
30184: LD_ADDR_EXP 110
30188: PUSH
30189: LD_INT 97
30191: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30192: LD_ADDR_EXP 111
30196: PUSH
30197: LD_INT 91
30199: ST_TO_ADDR
// ar_mortar := 92 ;
30200: LD_ADDR_EXP 112
30204: PUSH
30205: LD_INT 92
30207: ST_TO_ADDR
// ru_flamethrower := 93 ;
30208: LD_ADDR_EXP 115
30212: PUSH
30213: LD_INT 93
30215: ST_TO_ADDR
// ru_radar := 98 ;
30216: LD_ADDR_EXP 107
30220: PUSH
30221: LD_INT 98
30223: ST_TO_ADDR
// tech_Artillery := 80 ;
30224: LD_ADDR_EXP 116
30228: PUSH
30229: LD_INT 80
30231: ST_TO_ADDR
// tech_RadMat := 81 ;
30232: LD_ADDR_EXP 117
30236: PUSH
30237: LD_INT 81
30239: ST_TO_ADDR
// tech_BasicTools := 82 ;
30240: LD_ADDR_EXP 118
30244: PUSH
30245: LD_INT 82
30247: ST_TO_ADDR
// tech_Cargo := 83 ;
30248: LD_ADDR_EXP 119
30252: PUSH
30253: LD_INT 83
30255: ST_TO_ADDR
// tech_Track := 84 ;
30256: LD_ADDR_EXP 120
30260: PUSH
30261: LD_INT 84
30263: ST_TO_ADDR
// tech_Crane := 85 ;
30264: LD_ADDR_EXP 121
30268: PUSH
30269: LD_INT 85
30271: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30272: LD_ADDR_EXP 122
30276: PUSH
30277: LD_INT 86
30279: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30280: LD_ADDR_EXP 123
30284: PUSH
30285: LD_INT 87
30287: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30288: LD_ADDR_EXP 124
30292: PUSH
30293: LD_INT 88
30295: ST_TO_ADDR
// end ;
30296: LD_VAR 0 1
30300: RET
// every 1 do
30301: GO 30303
30303: DISABLE
// InitGlobalVariables ; end_of_file
30304: CALL 30149 0 0
30308: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
// if exist_mode then
30313: LD_VAR 0 2
30317: IFFALSE 30342
// unit := CreateCharacter ( prefix & ident ) else
30319: LD_ADDR_VAR 0 5
30323: PUSH
30324: LD_VAR 0 3
30328: PUSH
30329: LD_VAR 0 1
30333: STR
30334: PPUSH
30335: CALL_OW 34
30339: ST_TO_ADDR
30340: GO 30357
// unit := NewCharacter ( ident ) ;
30342: LD_ADDR_VAR 0 5
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 25
30356: ST_TO_ADDR
// result := unit ;
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: LD_VAR 0 5
30366: ST_TO_ADDR
// end ;
30367: LD_VAR 0 4
30371: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30372: LD_INT 0
30374: PPUSH
30375: PPUSH
// if not side or not nation then
30376: LD_VAR 0 1
30380: NOT
30381: PUSH
30382: LD_VAR 0 2
30386: NOT
30387: OR
30388: IFFALSE 30392
// exit ;
30390: GO 31160
// case nation of nation_american :
30392: LD_VAR 0 2
30396: PUSH
30397: LD_INT 1
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30619
30405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30406: LD_ADDR_VAR 0 4
30410: PUSH
30411: LD_INT 35
30413: PUSH
30414: LD_INT 45
30416: PUSH
30417: LD_INT 46
30419: PUSH
30420: LD_INT 47
30422: PUSH
30423: LD_INT 82
30425: PUSH
30426: LD_INT 83
30428: PUSH
30429: LD_INT 84
30431: PUSH
30432: LD_INT 85
30434: PUSH
30435: LD_INT 86
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 6
30446: PUSH
30447: LD_INT 15
30449: PUSH
30450: LD_INT 16
30452: PUSH
30453: LD_INT 7
30455: PUSH
30456: LD_INT 12
30458: PUSH
30459: LD_INT 13
30461: PUSH
30462: LD_INT 10
30464: PUSH
30465: LD_INT 14
30467: PUSH
30468: LD_INT 20
30470: PUSH
30471: LD_INT 21
30473: PUSH
30474: LD_INT 22
30476: PUSH
30477: LD_INT 25
30479: PUSH
30480: LD_INT 32
30482: PUSH
30483: LD_INT 27
30485: PUSH
30486: LD_INT 36
30488: PUSH
30489: LD_INT 69
30491: PUSH
30492: LD_INT 39
30494: PUSH
30495: LD_INT 34
30497: PUSH
30498: LD_INT 40
30500: PUSH
30501: LD_INT 48
30503: PUSH
30504: LD_INT 49
30506: PUSH
30507: LD_INT 50
30509: PUSH
30510: LD_INT 51
30512: PUSH
30513: LD_INT 52
30515: PUSH
30516: LD_INT 53
30518: PUSH
30519: LD_INT 54
30521: PUSH
30522: LD_INT 55
30524: PUSH
30525: LD_INT 56
30527: PUSH
30528: LD_INT 57
30530: PUSH
30531: LD_INT 58
30533: PUSH
30534: LD_INT 59
30536: PUSH
30537: LD_INT 60
30539: PUSH
30540: LD_INT 61
30542: PUSH
30543: LD_INT 62
30545: PUSH
30546: LD_INT 80
30548: PUSH
30549: LD_INT 82
30551: PUSH
30552: LD_INT 83
30554: PUSH
30555: LD_INT 84
30557: PUSH
30558: LD_INT 85
30560: PUSH
30561: LD_INT 86
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
30617: GO 31084
30619: LD_INT 2
30621: DOUBLE
30622: EQUAL
30623: IFTRUE 30627
30625: GO 30853
30627: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30628: LD_ADDR_VAR 0 4
30632: PUSH
30633: LD_INT 35
30635: PUSH
30636: LD_INT 45
30638: PUSH
30639: LD_INT 46
30641: PUSH
30642: LD_INT 47
30644: PUSH
30645: LD_INT 82
30647: PUSH
30648: LD_INT 83
30650: PUSH
30651: LD_INT 84
30653: PUSH
30654: LD_INT 85
30656: PUSH
30657: LD_INT 87
30659: PUSH
30660: LD_INT 70
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 11
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: LD_INT 6
30680: PUSH
30681: LD_INT 15
30683: PUSH
30684: LD_INT 18
30686: PUSH
30687: LD_INT 7
30689: PUSH
30690: LD_INT 17
30692: PUSH
30693: LD_INT 8
30695: PUSH
30696: LD_INT 20
30698: PUSH
30699: LD_INT 21
30701: PUSH
30702: LD_INT 22
30704: PUSH
30705: LD_INT 72
30707: PUSH
30708: LD_INT 26
30710: PUSH
30711: LD_INT 69
30713: PUSH
30714: LD_INT 39
30716: PUSH
30717: LD_INT 40
30719: PUSH
30720: LD_INT 41
30722: PUSH
30723: LD_INT 42
30725: PUSH
30726: LD_INT 43
30728: PUSH
30729: LD_INT 48
30731: PUSH
30732: LD_INT 49
30734: PUSH
30735: LD_INT 50
30737: PUSH
30738: LD_INT 51
30740: PUSH
30741: LD_INT 52
30743: PUSH
30744: LD_INT 53
30746: PUSH
30747: LD_INT 54
30749: PUSH
30750: LD_INT 55
30752: PUSH
30753: LD_INT 56
30755: PUSH
30756: LD_INT 60
30758: PUSH
30759: LD_INT 61
30761: PUSH
30762: LD_INT 62
30764: PUSH
30765: LD_INT 66
30767: PUSH
30768: LD_INT 67
30770: PUSH
30771: LD_INT 68
30773: PUSH
30774: LD_INT 81
30776: PUSH
30777: LD_INT 82
30779: PUSH
30780: LD_INT 83
30782: PUSH
30783: LD_INT 84
30785: PUSH
30786: LD_INT 85
30788: PUSH
30789: LD_INT 87
30791: PUSH
30792: LD_INT 88
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31084
30853: LD_INT 3
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 31083
30861: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_INT 46
30869: PUSH
30870: LD_INT 47
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 82
30881: PUSH
30882: LD_INT 83
30884: PUSH
30885: LD_INT 84
30887: PUSH
30888: LD_INT 85
30890: PUSH
30891: LD_INT 86
30893: PUSH
30894: LD_INT 11
30896: PUSH
30897: LD_INT 9
30899: PUSH
30900: LD_INT 20
30902: PUSH
30903: LD_INT 19
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 24
30911: PUSH
30912: LD_INT 22
30914: PUSH
30915: LD_INT 25
30917: PUSH
30918: LD_INT 28
30920: PUSH
30921: LD_INT 29
30923: PUSH
30924: LD_INT 30
30926: PUSH
30927: LD_INT 31
30929: PUSH
30930: LD_INT 37
30932: PUSH
30933: LD_INT 38
30935: PUSH
30936: LD_INT 32
30938: PUSH
30939: LD_INT 27
30941: PUSH
30942: LD_INT 33
30944: PUSH
30945: LD_INT 69
30947: PUSH
30948: LD_INT 39
30950: PUSH
30951: LD_INT 34
30953: PUSH
30954: LD_INT 40
30956: PUSH
30957: LD_INT 71
30959: PUSH
30960: LD_INT 23
30962: PUSH
30963: LD_INT 44
30965: PUSH
30966: LD_INT 48
30968: PUSH
30969: LD_INT 49
30971: PUSH
30972: LD_INT 50
30974: PUSH
30975: LD_INT 51
30977: PUSH
30978: LD_INT 52
30980: PUSH
30981: LD_INT 53
30983: PUSH
30984: LD_INT 54
30986: PUSH
30987: LD_INT 55
30989: PUSH
30990: LD_INT 56
30992: PUSH
30993: LD_INT 57
30995: PUSH
30996: LD_INT 58
30998: PUSH
30999: LD_INT 59
31001: PUSH
31002: LD_INT 63
31004: PUSH
31005: LD_INT 64
31007: PUSH
31008: LD_INT 65
31010: PUSH
31011: LD_INT 82
31013: PUSH
31014: LD_INT 83
31016: PUSH
31017: LD_INT 84
31019: PUSH
31020: LD_INT 85
31022: PUSH
31023: LD_INT 86
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
31081: GO 31084
31083: POP
// if state > - 1 and state < 3 then
31084: LD_VAR 0 3
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: GREATER
31093: PUSH
31094: LD_VAR 0 3
31098: PUSH
31099: LD_INT 3
31101: LESS
31102: AND
31103: IFFALSE 31160
// for i in result do
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 4
31114: PUSH
31115: FOR_IN
31116: IFFALSE 31158
// if GetTech ( i , side ) <> state then
31118: LD_VAR 0 5
31122: PPUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 321
31132: PUSH
31133: LD_VAR 0 3
31137: NONEQUAL
31138: IFFALSE 31156
// result := result diff i ;
31140: LD_ADDR_VAR 0 4
31144: PUSH
31145: LD_VAR 0 4
31149: PUSH
31150: LD_VAR 0 5
31154: DIFF
31155: ST_TO_ADDR
31156: GO 31115
31158: POP
31159: POP
// end ;
31160: LD_VAR 0 4
31164: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
// result := true ;
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_INT 1
31177: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL_OW 480
31192: ST_TO_ADDR
// if not tmp then
31193: LD_VAR 0 5
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31251
// for i in tmp do
31202: LD_ADDR_VAR 0 4
31206: PUSH
31207: LD_VAR 0 5
31211: PUSH
31212: FOR_IN
31213: IFFALSE 31249
// if GetTech ( i , side ) <> state_researched then
31215: LD_VAR 0 4
31219: PPUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL_OW 321
31229: PUSH
31230: LD_INT 2
31232: NONEQUAL
31233: IFFALSE 31247
// begin result := false ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: LD_INT 0
31242: ST_TO_ADDR
// exit ;
31243: POP
31244: POP
31245: GO 31251
// end ;
31247: GO 31212
31249: POP
31250: POP
// end ;
31251: LD_VAR 0 3
31255: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31256: LD_INT 0
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31271: LD_VAR 0 1
31275: NOT
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: CALL_OW 257
31286: PUSH
31287: LD_INT 9
31289: NONEQUAL
31290: OR
31291: IFFALSE 31295
// exit ;
31293: GO 31868
// side := GetSide ( unit ) ;
31295: LD_ADDR_VAR 0 9
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 255
31309: ST_TO_ADDR
// tech_space := tech_spacanom ;
31310: LD_ADDR_VAR 0 12
31314: PUSH
31315: LD_INT 29
31317: ST_TO_ADDR
// tech_time := tech_taurad ;
31318: LD_ADDR_VAR 0 13
31322: PUSH
31323: LD_INT 28
31325: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31326: LD_ADDR_VAR 0 11
31330: PUSH
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 310
31340: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31341: LD_VAR 0 11
31345: PPUSH
31346: CALL_OW 247
31350: PUSH
31351: LD_INT 2
31353: EQUAL
31354: IFFALSE 31358
// exit ;
31356: GO 31868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31358: LD_ADDR_VAR 0 8
31362: PUSH
31363: LD_INT 81
31365: PUSH
31366: LD_VAR 0 9
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 21
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PPUSH
31396: CALL_OW 69
31400: ST_TO_ADDR
// if not tmp then
31401: LD_VAR 0 8
31405: NOT
31406: IFFALSE 31410
// exit ;
31408: GO 31868
// if in_unit then
31410: LD_VAR 0 11
31414: IFFALSE 31438
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31416: LD_ADDR_VAR 0 10
31420: PUSH
31421: LD_VAR 0 8
31425: PPUSH
31426: LD_VAR 0 11
31430: PPUSH
31431: CALL_OW 74
31435: ST_TO_ADDR
31436: GO 31458
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31438: LD_ADDR_VAR 0 10
31442: PUSH
31443: LD_VAR 0 8
31447: PPUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 74
31457: ST_TO_ADDR
// if not enemy then
31458: LD_VAR 0 10
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 31868
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31467: LD_VAR 0 11
31471: PUSH
31472: LD_VAR 0 11
31476: PPUSH
31477: LD_VAR 0 10
31481: PPUSH
31482: CALL_OW 296
31486: PUSH
31487: LD_INT 13
31489: GREATER
31490: AND
31491: PUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: LD_VAR 0 10
31501: PPUSH
31502: CALL_OW 296
31506: PUSH
31507: LD_INT 12
31509: GREATER
31510: OR
31511: IFFALSE 31515
// exit ;
31513: GO 31868
// missile := [ 1 ] ;
31515: LD_ADDR_VAR 0 14
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31526: LD_VAR 0 9
31530: PPUSH
31531: LD_VAR 0 12
31535: PPUSH
31536: CALL_OW 325
31540: IFFALSE 31569
// missile := Replace ( missile , missile + 1 , 2 ) ;
31542: LD_ADDR_VAR 0 14
31546: PUSH
31547: LD_VAR 0 14
31551: PPUSH
31552: LD_VAR 0 14
31556: PUSH
31557: LD_INT 1
31559: PLUS
31560: PPUSH
31561: LD_INT 2
31563: PPUSH
31564: CALL_OW 1
31568: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31569: LD_VAR 0 9
31573: PPUSH
31574: LD_VAR 0 13
31578: PPUSH
31579: CALL_OW 325
31583: PUSH
31584: LD_VAR 0 10
31588: PPUSH
31589: CALL_OW 255
31593: PPUSH
31594: LD_VAR 0 13
31598: PPUSH
31599: CALL_OW 325
31603: NOT
31604: AND
31605: IFFALSE 31634
// missile := Replace ( missile , missile + 1 , 3 ) ;
31607: LD_ADDR_VAR 0 14
31611: PUSH
31612: LD_VAR 0 14
31616: PPUSH
31617: LD_VAR 0 14
31621: PUSH
31622: LD_INT 1
31624: PLUS
31625: PPUSH
31626: LD_INT 3
31628: PPUSH
31629: CALL_OW 1
31633: ST_TO_ADDR
// if missile < 2 then
31634: LD_VAR 0 14
31638: PUSH
31639: LD_INT 2
31641: LESS
31642: IFFALSE 31646
// exit ;
31644: GO 31868
// x := GetX ( enemy ) ;
31646: LD_ADDR_VAR 0 4
31650: PUSH
31651: LD_VAR 0 10
31655: PPUSH
31656: CALL_OW 250
31660: ST_TO_ADDR
// y := GetY ( enemy ) ;
31661: LD_ADDR_VAR 0 5
31665: PUSH
31666: LD_VAR 0 10
31670: PPUSH
31671: CALL_OW 251
31675: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31676: LD_ADDR_VAR 0 6
31680: PUSH
31681: LD_VAR 0 4
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 12
31697: PLUS
31698: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31699: LD_ADDR_VAR 0 7
31703: PUSH
31704: LD_VAR 0 5
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PPUSH
31713: LD_INT 1
31715: PPUSH
31716: CALL_OW 12
31720: PLUS
31721: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31722: LD_VAR 0 6
31726: PPUSH
31727: LD_VAR 0 7
31731: PPUSH
31732: CALL_OW 488
31736: NOT
31737: IFFALSE 31759
// begin _x := x ;
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: LD_VAR 0 4
31748: ST_TO_ADDR
// _y := y ;
31749: LD_ADDR_VAR 0 7
31753: PUSH
31754: LD_VAR 0 5
31758: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_INT 1
31766: PPUSH
31767: LD_VAR 0 14
31771: PPUSH
31772: CALL_OW 12
31776: ST_TO_ADDR
// case i of 1 :
31777: LD_VAR 0 3
31781: PUSH
31782: LD_INT 1
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31807
31790: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31791: LD_VAR 0 1
31795: PPUSH
31796: LD_VAR 0 10
31800: PPUSH
31801: CALL_OW 115
31805: GO 31868
31807: LD_INT 2
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31837
31815: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31816: LD_VAR 0 1
31820: PPUSH
31821: LD_VAR 0 6
31825: PPUSH
31826: LD_VAR 0 7
31830: PPUSH
31831: CALL_OW 153
31835: GO 31868
31837: LD_INT 3
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31867
31845: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31846: LD_VAR 0 1
31850: PPUSH
31851: LD_VAR 0 6
31855: PPUSH
31856: LD_VAR 0 7
31860: PPUSH
31861: CALL_OW 154
31865: GO 31868
31867: POP
// end ;
31868: LD_VAR 0 2
31872: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31873: LD_INT 0
31875: PPUSH
31876: PPUSH
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
// if not unit or not building then
31881: LD_VAR 0 1
31885: NOT
31886: PUSH
31887: LD_VAR 0 2
31891: NOT
31892: OR
31893: IFFALSE 31897
// exit ;
31895: GO 32055
// x := GetX ( building ) ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_VAR 0 2
31906: PPUSH
31907: CALL_OW 250
31911: ST_TO_ADDR
// y := GetY ( building ) ;
31912: LD_ADDR_VAR 0 6
31916: PUSH
31917: LD_VAR 0 2
31921: PPUSH
31922: CALL_OW 251
31926: ST_TO_ADDR
// for i = 0 to 5 do
31927: LD_ADDR_VAR 0 4
31931: PUSH
31932: DOUBLE
31933: LD_INT 0
31935: DEC
31936: ST_TO_ADDR
31937: LD_INT 5
31939: PUSH
31940: FOR_TO
31941: IFFALSE 32053
// begin _x := ShiftX ( x , i , 3 ) ;
31943: LD_ADDR_VAR 0 7
31947: PUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: LD_VAR 0 4
31957: PPUSH
31958: LD_INT 3
31960: PPUSH
31961: CALL_OW 272
31965: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31966: LD_ADDR_VAR 0 8
31970: PUSH
31971: LD_VAR 0 6
31975: PPUSH
31976: LD_VAR 0 4
31980: PPUSH
31981: LD_INT 3
31983: PPUSH
31984: CALL_OW 273
31988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31989: LD_VAR 0 7
31993: PPUSH
31994: LD_VAR 0 8
31998: PPUSH
31999: CALL_OW 488
32003: NOT
32004: IFFALSE 32008
// continue ;
32006: GO 31940
// if HexInfo ( _x , _y ) = 0 then
32008: LD_VAR 0 7
32012: PPUSH
32013: LD_VAR 0 8
32017: PPUSH
32018: CALL_OW 428
32022: PUSH
32023: LD_INT 0
32025: EQUAL
32026: IFFALSE 32051
// begin ComMoveXY ( unit , _x , _y ) ;
32028: LD_VAR 0 1
32032: PPUSH
32033: LD_VAR 0 7
32037: PPUSH
32038: LD_VAR 0 8
32042: PPUSH
32043: CALL_OW 111
// exit ;
32047: POP
32048: POP
32049: GO 32055
// end ; end ;
32051: GO 31940
32053: POP
32054: POP
// end ;
32055: LD_VAR 0 3
32059: RET
// export function ScanBase ( side , base_area ) ; begin
32060: LD_INT 0
32062: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_INT 81
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 70
32089: ST_TO_ADDR
// end ;
32090: LD_VAR 0 3
32094: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32095: LD_INT 0
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
// result := false ;
32101: LD_ADDR_VAR 0 2
32105: PUSH
32106: LD_INT 0
32108: ST_TO_ADDR
// side := GetSide ( unit ) ;
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 255
32123: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32124: LD_ADDR_VAR 0 4
32128: PUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL_OW 248
32138: ST_TO_ADDR
// case nat of 1 :
32139: LD_VAR 0 4
32143: PUSH
32144: LD_INT 1
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32163
32152: POP
// tech := tech_lassight ; 2 :
32153: LD_ADDR_VAR 0 5
32157: PUSH
32158: LD_INT 12
32160: ST_TO_ADDR
32161: GO 32202
32163: LD_INT 2
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// tech := tech_mortar ; 3 :
32172: LD_ADDR_VAR 0 5
32176: PUSH
32177: LD_INT 41
32179: ST_TO_ADDR
32180: GO 32202
32182: LD_INT 3
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32201
32190: POP
// tech := tech_bazooka ; end ;
32191: LD_ADDR_VAR 0 5
32195: PUSH
32196: LD_INT 44
32198: ST_TO_ADDR
32199: GO 32202
32201: POP
// if Researched ( side , tech ) then
32202: LD_VAR 0 3
32206: PPUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: CALL_OW 325
32216: IFFALSE 32243
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32218: LD_ADDR_VAR 0 2
32222: PUSH
32223: LD_INT 5
32225: PUSH
32226: LD_INT 8
32228: PUSH
32229: LD_INT 9
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: PUSH
32237: LD_VAR 0 4
32241: ARRAY
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 2
32247: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
32252: PPUSH
// if not mines then
32253: LD_VAR 0 2
32257: NOT
32258: IFFALSE 32262
// exit ;
32260: GO 32406
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32262: LD_ADDR_VAR 0 5
32266: PUSH
32267: LD_INT 81
32269: PUSH
32270: LD_VAR 0 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: LD_INT 21
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PPUSH
32300: CALL_OW 69
32304: ST_TO_ADDR
// for i in mines do
32305: LD_ADDR_VAR 0 4
32309: PUSH
32310: LD_VAR 0 2
32314: PUSH
32315: FOR_IN
32316: IFFALSE 32404
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32318: LD_VAR 0 4
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 4
32331: PUSH
32332: LD_INT 2
32334: ARRAY
32335: PPUSH
32336: CALL_OW 458
32340: NOT
32341: IFFALSE 32345
// continue ;
32343: GO 32315
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32345: LD_VAR 0 4
32349: PUSH
32350: LD_INT 1
32352: ARRAY
32353: PPUSH
32354: LD_VAR 0 4
32358: PUSH
32359: LD_INT 2
32361: ARRAY
32362: PPUSH
32363: CALL_OW 428
32367: PUSH
32368: LD_VAR 0 5
32372: IN
32373: IFFALSE 32402
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32375: LD_VAR 0 4
32379: PUSH
32380: LD_INT 1
32382: ARRAY
32383: PPUSH
32384: LD_VAR 0 4
32388: PUSH
32389: LD_INT 2
32391: ARRAY
32392: PPUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: CALL_OW 456
// end ;
32402: GO 32315
32404: POP
32405: POP
// end ;
32406: LD_VAR 0 3
32410: RET
// export function Count ( array ) ; var i ; begin
32411: LD_INT 0
32413: PPUSH
32414: PPUSH
// result := 0 ;
32415: LD_ADDR_VAR 0 2
32419: PUSH
32420: LD_INT 0
32422: ST_TO_ADDR
// for i in array do
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_VAR 0 1
32432: PUSH
32433: FOR_IN
32434: IFFALSE 32458
// if i then
32436: LD_VAR 0 3
32440: IFFALSE 32456
// result := result + 1 ;
32442: LD_ADDR_VAR 0 2
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 1
32454: PLUS
32455: ST_TO_ADDR
32456: GO 32433
32458: POP
32459: POP
// end ;
32460: LD_VAR 0 2
32464: RET
// export function IsEmpty ( building ) ; begin
32465: LD_INT 0
32467: PPUSH
// if not building then
32468: LD_VAR 0 1
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32520
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32477: LD_ADDR_VAR 0 2
32481: PUSH
32482: LD_VAR 0 1
32486: PUSH
32487: LD_INT 22
32489: PUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 255
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 58
32506: PUSH
32507: EMPTY
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 69
32518: IN
32519: ST_TO_ADDR
// end ;
32520: LD_VAR 0 2
32524: RET
// export function IsNotFull ( building ) ; var places ; begin
32525: LD_INT 0
32527: PPUSH
32528: PPUSH
// if not building then
32529: LD_VAR 0 1
32533: NOT
32534: IFFALSE 32538
// exit ;
32536: GO 32709
// result := false ;
32538: LD_ADDR_VAR 0 2
32542: PUSH
32543: LD_INT 0
32545: ST_TO_ADDR
// places := 0 ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_INT 0
32553: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 266
32563: PUSH
32564: LD_INT 0
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32626
32570: LD_INT 1
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32626
32576: LD_INT 6
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32626
32582: LD_INT 7
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32626
32588: LD_INT 8
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32626
32594: LD_INT 4
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32626
32600: LD_INT 5
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32626
32606: LD_INT 2
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32626
32612: LD_INT 3
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32626
32618: LD_INT 35
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32637
32626: POP
// places := 6 ; b_bunker , b_breastwork :
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 6
32634: ST_TO_ADDR
32635: GO 32682
32637: LD_INT 32
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32651
32643: LD_INT 31
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// places := 1 ; b_control_tower :
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 1
32659: ST_TO_ADDR
32660: GO 32682
32662: LD_INT 36
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// places := 3 ; end ;
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 3
32678: ST_TO_ADDR
32679: GO 32682
32681: POP
// if places then
32682: LD_VAR 0 3
32686: IFFALSE 32709
// result := UnitsInside ( building ) < places ;
32688: LD_ADDR_VAR 0 2
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: CALL_OW 313
32702: PUSH
32703: LD_VAR 0 3
32707: LESS
32708: ST_TO_ADDR
// end ;
32709: LD_VAR 0 2
32713: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32714: LD_INT 0
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
// tmp := [ ] ;
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: EMPTY
32726: ST_TO_ADDR
// list := [ ] ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: EMPTY
32733: ST_TO_ADDR
// for i = 16 to 25 do
32734: LD_ADDR_VAR 0 4
32738: PUSH
32739: DOUBLE
32740: LD_INT 16
32742: DEC
32743: ST_TO_ADDR
32744: LD_INT 25
32746: PUSH
32747: FOR_TO
32748: IFFALSE 32821
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_VAR 0 3
32759: PUSH
32760: LD_INT 22
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 255
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 91
32779: PUSH
32780: LD_VAR 0 1
32784: PUSH
32785: LD_INT 6
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: LD_VAR 0 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: PPUSH
32813: CALL_OW 69
32817: ADD
32818: ST_TO_ADDR
32819: GO 32747
32821: POP
32822: POP
// for i = 1 to tmp do
32823: LD_ADDR_VAR 0 4
32827: PUSH
32828: DOUBLE
32829: LD_INT 1
32831: DEC
32832: ST_TO_ADDR
32833: LD_VAR 0 3
32837: PUSH
32838: FOR_TO
32839: IFFALSE 32927
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32841: LD_ADDR_VAR 0 5
32845: PUSH
32846: LD_VAR 0 5
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 4
32860: ARRAY
32861: PPUSH
32862: CALL_OW 266
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_VAR 0 4
32876: ARRAY
32877: PPUSH
32878: CALL_OW 250
32882: PUSH
32883: LD_VAR 0 3
32887: PUSH
32888: LD_VAR 0 4
32892: ARRAY
32893: PPUSH
32894: CALL_OW 251
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_VAR 0 4
32908: ARRAY
32909: PPUSH
32910: CALL_OW 254
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: PUSH
32921: EMPTY
32922: LIST
32923: ADD
32924: ST_TO_ADDR
32925: GO 32838
32927: POP
32928: POP
// result := list ;
32929: LD_ADDR_VAR 0 2
32933: PUSH
32934: LD_VAR 0 5
32938: ST_TO_ADDR
// end ;
32939: LD_VAR 0 2
32943: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32944: LD_INT 0
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
// if not factory then
32953: LD_VAR 0 1
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33555
// if control = control_apeman then
32962: LD_VAR 0 4
32966: PUSH
32967: LD_INT 5
32969: EQUAL
32970: IFFALSE 33079
// begin tmp := UnitsInside ( factory ) ;
32972: LD_ADDR_VAR 0 8
32976: PUSH
32977: LD_VAR 0 1
32981: PPUSH
32982: CALL_OW 313
32986: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_INT 25
32994: PUSH
32995: LD_INT 12
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PPUSH
33002: CALL_OW 72
33006: NOT
33007: IFFALSE 33017
// control := control_manual ;
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: LD_INT 1
33016: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33017: LD_ADDR_VAR 0 8
33021: PUSH
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL 32714 0 1
33031: ST_TO_ADDR
// if tmp then
33032: LD_VAR 0 8
33036: IFFALSE 33079
// begin for i in tmp do
33038: LD_ADDR_VAR 0 7
33042: PUSH
33043: LD_VAR 0 8
33047: PUSH
33048: FOR_IN
33049: IFFALSE 33077
// if i [ 1 ] = b_ext_radio then
33051: LD_VAR 0 7
33055: PUSH
33056: LD_INT 1
33058: ARRAY
33059: PUSH
33060: LD_INT 22
33062: EQUAL
33063: IFFALSE 33075
// begin control := control_remote ;
33065: LD_ADDR_VAR 0 4
33069: PUSH
33070: LD_INT 2
33072: ST_TO_ADDR
// break ;
33073: GO 33077
// end ;
33075: GO 33048
33077: POP
33078: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33079: LD_VAR 0 1
33083: PPUSH
33084: LD_VAR 0 2
33088: PPUSH
33089: LD_VAR 0 3
33093: PPUSH
33094: LD_VAR 0 4
33098: PPUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: CALL_OW 448
33108: IFFALSE 33143
// begin result := [ chassis , engine , control , weapon ] ;
33110: LD_ADDR_VAR 0 6
33114: PUSH
33115: LD_VAR 0 2
33119: PUSH
33120: LD_VAR 0 3
33124: PUSH
33125: LD_VAR 0 4
33129: PUSH
33130: LD_VAR 0 5
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
// exit ;
33141: GO 33555
// end ; _chassis := AvailableChassisList ( factory ) ;
33143: LD_ADDR_VAR 0 9
33147: PUSH
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL_OW 475
33157: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33158: LD_ADDR_VAR 0 11
33162: PUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 476
33172: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33173: LD_ADDR_VAR 0 12
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 477
33187: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33188: LD_ADDR_VAR 0 10
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 478
33202: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33203: LD_VAR 0 9
33207: NOT
33208: PUSH
33209: LD_VAR 0 11
33213: NOT
33214: OR
33215: PUSH
33216: LD_VAR 0 12
33220: NOT
33221: OR
33222: PUSH
33223: LD_VAR 0 10
33227: NOT
33228: OR
33229: IFFALSE 33264
// begin result := [ chassis , engine , control , weapon ] ;
33231: LD_ADDR_VAR 0 6
33235: PUSH
33236: LD_VAR 0 2
33240: PUSH
33241: LD_VAR 0 3
33245: PUSH
33246: LD_VAR 0 4
33250: PUSH
33251: LD_VAR 0 5
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// exit ;
33262: GO 33555
// end ; if not chassis in _chassis then
33264: LD_VAR 0 2
33268: PUSH
33269: LD_VAR 0 9
33273: IN
33274: NOT
33275: IFFALSE 33301
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 9
33286: PUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 9
33294: PPUSH
33295: CALL_OW 12
33299: ARRAY
33300: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33301: LD_VAR 0 2
33305: PPUSH
33306: LD_VAR 0 3
33310: PPUSH
33311: CALL 33560 0 2
33315: NOT
33316: IFFALSE 33375
// repeat engine := _engine [ 1 ] ;
33318: LD_ADDR_VAR 0 3
33322: PUSH
33323: LD_VAR 0 11
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33332: LD_ADDR_VAR 0 11
33336: PUSH
33337: LD_VAR 0 11
33341: PPUSH
33342: LD_INT 1
33344: PPUSH
33345: CALL_OW 3
33349: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 3
33359: PPUSH
33360: CALL 33560 0 2
33364: PUSH
33365: LD_VAR 0 11
33369: PUSH
33370: EMPTY
33371: EQUAL
33372: OR
33373: IFFALSE 33318
// if not control in _control then
33375: LD_VAR 0 4
33379: PUSH
33380: LD_VAR 0 12
33384: IN
33385: NOT
33386: IFFALSE 33412
// control := _control [ rand ( 1 , _control ) ] ;
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_VAR 0 12
33397: PUSH
33398: LD_INT 1
33400: PPUSH
33401: LD_VAR 0 12
33405: PPUSH
33406: CALL_OW 12
33410: ARRAY
33411: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33412: LD_VAR 0 2
33416: PPUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: CALL 33780 0 2
33426: NOT
33427: IFFALSE 33486
// repeat weapon := _weapon [ 1 ] ;
33429: LD_ADDR_VAR 0 5
33433: PUSH
33434: LD_VAR 0 10
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33443: LD_ADDR_VAR 0 10
33447: PUSH
33448: LD_VAR 0 10
33452: PPUSH
33453: LD_INT 1
33455: PPUSH
33456: CALL_OW 3
33460: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33461: LD_VAR 0 2
33465: PPUSH
33466: LD_VAR 0 5
33470: PPUSH
33471: CALL 33780 0 2
33475: PUSH
33476: LD_VAR 0 10
33480: PUSH
33481: EMPTY
33482: EQUAL
33483: OR
33484: IFFALSE 33429
// result := [ ] ;
33486: LD_ADDR_VAR 0 6
33490: PUSH
33491: EMPTY
33492: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 3
33507: PPUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: CALL_OW 448
33522: IFFALSE 33555
// result := [ chassis , engine , control , weapon ] ;
33524: LD_ADDR_VAR 0 6
33528: PUSH
33529: LD_VAR 0 2
33533: PUSH
33534: LD_VAR 0 3
33538: PUSH
33539: LD_VAR 0 4
33543: PUSH
33544: LD_VAR 0 5
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 6
33559: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33560: LD_INT 0
33562: PPUSH
// if not chassis or not engine then
33563: LD_VAR 0 1
33567: NOT
33568: PUSH
33569: LD_VAR 0 2
33573: NOT
33574: OR
33575: IFFALSE 33579
// exit ;
33577: GO 33775
// case engine of engine_solar :
33579: LD_VAR 0 2
33583: PUSH
33584: LD_INT 2
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33630
33592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 11
33600: PUSH
33601: LD_INT 12
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: ST_TO_ADDR
33628: GO 33759
33630: LD_INT 1
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33700
33638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_INT 11
33646: PUSH
33647: LD_INT 12
33649: PUSH
33650: LD_INT 13
33652: PUSH
33653: LD_INT 14
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: LD_INT 21
33673: PUSH
33674: LD_INT 23
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: LD_INT 24
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
33698: GO 33759
33700: LD_INT 3
33702: DOUBLE
33703: EQUAL
33704: IFTRUE 33708
33706: GO 33758
33708: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: LD_INT 13
33716: PUSH
33717: LD_INT 14
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: LD_INT 4
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: LD_INT 21
33734: PUSH
33735: LD_INT 22
33737: PUSH
33738: LD_INT 23
33740: PUSH
33741: LD_INT 24
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
33756: GO 33759
33758: POP
// result := ( chassis in result ) ;
33759: LD_ADDR_VAR 0 3
33763: PUSH
33764: LD_VAR 0 1
33768: PUSH
33769: LD_VAR 0 3
33773: IN
33774: ST_TO_ADDR
// end ;
33775: LD_VAR 0 3
33779: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33780: LD_INT 0
33782: PPUSH
// if not chassis or not weapon then
33783: LD_VAR 0 1
33787: NOT
33788: PUSH
33789: LD_VAR 0 2
33793: NOT
33794: OR
33795: IFFALSE 33799
// exit ;
33797: GO 34861
// case weapon of us_machine_gun :
33799: LD_VAR 0 2
33803: PUSH
33804: LD_INT 2
33806: DOUBLE
33807: EQUAL
33808: IFTRUE 33812
33810: GO 33842
33812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33813: LD_ADDR_VAR 0 3
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
33840: GO 34845
33842: LD_INT 3
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33880
33850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
33878: GO 34845
33880: LD_INT 11
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33918
33888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 4
33905: PUSH
33906: LD_INT 5
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
33916: GO 34845
33918: LD_INT 4
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 33952
33926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33927: LD_ADDR_VAR 0 3
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
33950: GO 34845
33952: LD_INT 5
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 33960
33958: GO 33986
33960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33961: LD_ADDR_VAR 0 3
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: LD_INT 5
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
33984: GO 34845
33986: LD_INT 9
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34020
33994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: LD_INT 4
34008: PUSH
34009: LD_INT 5
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
34018: GO 34845
34020: LD_INT 7
34022: DOUBLE
34023: EQUAL
34024: IFTRUE 34028
34026: GO 34054
34028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34029: LD_ADDR_VAR 0 3
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: ST_TO_ADDR
34052: GO 34845
34054: LD_INT 12
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34062
34060: GO 34088
34062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34063: LD_ADDR_VAR 0 3
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: ST_TO_ADDR
34086: GO 34845
34088: LD_INT 13
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34096
34094: GO 34122
34096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34097: LD_ADDR_VAR 0 3
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 5
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
34120: GO 34845
34122: LD_INT 14
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34130
34128: GO 34148
34130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34131: LD_ADDR_VAR 0 3
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: LD_INT 5
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: ST_TO_ADDR
34146: GO 34845
34148: LD_INT 6
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34174
34156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34157: LD_ADDR_VAR 0 3
34161: PUSH
34162: LD_INT 4
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: ST_TO_ADDR
34172: GO 34845
34174: LD_INT 10
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34200
34182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_INT 4
34190: PUSH
34191: LD_INT 5
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: ST_TO_ADDR
34198: GO 34845
34200: LD_INT 22
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34234
34208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 11
34216: PUSH
34217: LD_INT 12
34219: PUSH
34220: LD_INT 13
34222: PUSH
34223: LD_INT 14
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
34232: GO 34845
34234: LD_INT 23
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34268
34242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 11
34250: PUSH
34251: LD_INT 12
34253: PUSH
34254: LD_INT 13
34256: PUSH
34257: LD_INT 14
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
34266: GO 34845
34268: LD_INT 24
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34276
34274: GO 34302
34276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_INT 11
34284: PUSH
34285: LD_INT 12
34287: PUSH
34288: LD_INT 13
34290: PUSH
34291: LD_INT 14
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: ST_TO_ADDR
34300: GO 34845
34302: LD_INT 30
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34310
34308: GO 34336
34310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_INT 11
34318: PUSH
34319: LD_INT 12
34321: PUSH
34322: LD_INT 13
34324: PUSH
34325: LD_INT 14
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: ST_TO_ADDR
34334: GO 34845
34336: LD_INT 25
34338: DOUBLE
34339: EQUAL
34340: IFTRUE 34344
34342: GO 34362
34344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: LD_INT 13
34352: PUSH
34353: LD_INT 14
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: ST_TO_ADDR
34360: GO 34845
34362: LD_INT 27
34364: DOUBLE
34365: EQUAL
34366: IFTRUE 34370
34368: GO 34388
34370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_INT 13
34378: PUSH
34379: LD_INT 14
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: ST_TO_ADDR
34386: GO 34845
34388: LD_EXP 112
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34398
34396: GO 34424
34398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_INT 11
34406: PUSH
34407: LD_INT 12
34409: PUSH
34410: LD_INT 13
34412: PUSH
34413: LD_INT 14
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
34422: GO 34845
34424: LD_INT 28
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34450
34432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_INT 13
34440: PUSH
34441: LD_INT 14
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: ST_TO_ADDR
34448: GO 34845
34450: LD_INT 29
34452: DOUBLE
34453: EQUAL
34454: IFTRUE 34458
34456: GO 34476
34458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34459: LD_ADDR_VAR 0 3
34463: PUSH
34464: LD_INT 13
34466: PUSH
34467: LD_INT 14
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: ST_TO_ADDR
34474: GO 34845
34476: LD_INT 31
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34484
34482: GO 34502
34484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34485: LD_ADDR_VAR 0 3
34489: PUSH
34490: LD_INT 13
34492: PUSH
34493: LD_INT 14
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: ST_TO_ADDR
34500: GO 34845
34502: LD_INT 26
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34528
34510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_INT 13
34518: PUSH
34519: LD_INT 14
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: ST_TO_ADDR
34526: GO 34845
34528: LD_INT 42
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34536
34534: GO 34562
34536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34537: LD_ADDR_VAR 0 3
34541: PUSH
34542: LD_INT 21
34544: PUSH
34545: LD_INT 22
34547: PUSH
34548: LD_INT 23
34550: PUSH
34551: LD_INT 24
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: ST_TO_ADDR
34560: GO 34845
34562: LD_INT 43
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34596
34570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34571: LD_ADDR_VAR 0 3
34575: PUSH
34576: LD_INT 21
34578: PUSH
34579: LD_INT 22
34581: PUSH
34582: LD_INT 23
34584: PUSH
34585: LD_INT 24
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
34594: GO 34845
34596: LD_INT 44
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 34630
34604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34605: LD_ADDR_VAR 0 3
34609: PUSH
34610: LD_INT 21
34612: PUSH
34613: LD_INT 22
34615: PUSH
34616: LD_INT 23
34618: PUSH
34619: LD_INT 24
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
34628: GO 34845
34630: LD_INT 45
34632: DOUBLE
34633: EQUAL
34634: IFTRUE 34638
34636: GO 34664
34638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34639: LD_ADDR_VAR 0 3
34643: PUSH
34644: LD_INT 21
34646: PUSH
34647: LD_INT 22
34649: PUSH
34650: LD_INT 23
34652: PUSH
34653: LD_INT 24
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: ST_TO_ADDR
34662: GO 34845
34664: LD_INT 49
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34698
34672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34673: LD_ADDR_VAR 0 3
34677: PUSH
34678: LD_INT 21
34680: PUSH
34681: LD_INT 22
34683: PUSH
34684: LD_INT 23
34686: PUSH
34687: LD_INT 24
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 34845
34698: LD_INT 51
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34732
34706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 21
34714: PUSH
34715: LD_INT 22
34717: PUSH
34718: LD_INT 23
34720: PUSH
34721: LD_INT 24
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
34730: GO 34845
34732: LD_INT 52
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34766
34740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34741: LD_ADDR_VAR 0 3
34745: PUSH
34746: LD_INT 21
34748: PUSH
34749: LD_INT 22
34751: PUSH
34752: LD_INT 23
34754: PUSH
34755: LD_INT 24
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
34764: GO 34845
34766: LD_INT 53
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34792
34774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 23
34782: PUSH
34783: LD_INT 24
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: ST_TO_ADDR
34790: GO 34845
34792: LD_INT 46
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34818
34800: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 23
34808: PUSH
34809: LD_INT 24
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: ST_TO_ADDR
34816: GO 34845
34818: LD_INT 47
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34844
34826: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 23
34834: PUSH
34835: LD_INT 24
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: ST_TO_ADDR
34842: GO 34845
34844: POP
// result := ( chassis in result ) ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_VAR 0 1
34854: PUSH
34855: LD_VAR 0 3
34859: IN
34860: ST_TO_ADDR
// end ;
34861: LD_VAR 0 3
34865: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34866: LD_INT 0
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
// result := array ;
34875: LD_ADDR_VAR 0 5
34879: PUSH
34880: LD_VAR 0 1
34884: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34885: LD_VAR 0 1
34889: NOT
34890: PUSH
34891: LD_VAR 0 2
34895: NOT
34896: OR
34897: PUSH
34898: LD_VAR 0 3
34902: NOT
34903: OR
34904: PUSH
34905: LD_VAR 0 2
34909: PUSH
34910: LD_VAR 0 1
34914: GREATER
34915: OR
34916: PUSH
34917: LD_VAR 0 3
34921: PUSH
34922: LD_VAR 0 1
34926: GREATER
34927: OR
34928: IFFALSE 34932
// exit ;
34930: GO 35228
// if direction then
34932: LD_VAR 0 4
34936: IFFALSE 35000
// begin d := 1 ;
34938: LD_ADDR_VAR 0 9
34942: PUSH
34943: LD_INT 1
34945: ST_TO_ADDR
// if i_from > i_to then
34946: LD_VAR 0 2
34950: PUSH
34951: LD_VAR 0 3
34955: GREATER
34956: IFFALSE 34982
// length := ( array - i_from ) + i_to else
34958: LD_ADDR_VAR 0 11
34962: PUSH
34963: LD_VAR 0 1
34967: PUSH
34968: LD_VAR 0 2
34972: MINUS
34973: PUSH
34974: LD_VAR 0 3
34978: PLUS
34979: ST_TO_ADDR
34980: GO 34998
// length := i_to - i_from ;
34982: LD_ADDR_VAR 0 11
34986: PUSH
34987: LD_VAR 0 3
34991: PUSH
34992: LD_VAR 0 2
34996: MINUS
34997: ST_TO_ADDR
// end else
34998: GO 35061
// begin d := - 1 ;
35000: LD_ADDR_VAR 0 9
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: ST_TO_ADDR
// if i_from > i_to then
35009: LD_VAR 0 2
35013: PUSH
35014: LD_VAR 0 3
35018: GREATER
35019: IFFALSE 35039
// length := i_from - i_to else
35021: LD_ADDR_VAR 0 11
35025: PUSH
35026: LD_VAR 0 2
35030: PUSH
35031: LD_VAR 0 3
35035: MINUS
35036: ST_TO_ADDR
35037: GO 35061
// length := ( array - i_to ) + i_from ;
35039: LD_ADDR_VAR 0 11
35043: PUSH
35044: LD_VAR 0 1
35048: PUSH
35049: LD_VAR 0 3
35053: MINUS
35054: PUSH
35055: LD_VAR 0 2
35059: PLUS
35060: ST_TO_ADDR
// end ; if not length then
35061: LD_VAR 0 11
35065: NOT
35066: IFFALSE 35070
// exit ;
35068: GO 35228
// tmp := array ;
35070: LD_ADDR_VAR 0 10
35074: PUSH
35075: LD_VAR 0 1
35079: ST_TO_ADDR
// for i = 1 to length do
35080: LD_ADDR_VAR 0 6
35084: PUSH
35085: DOUBLE
35086: LD_INT 1
35088: DEC
35089: ST_TO_ADDR
35090: LD_VAR 0 11
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35216
// begin for j = 1 to array do
35098: LD_ADDR_VAR 0 7
35102: PUSH
35103: DOUBLE
35104: LD_INT 1
35106: DEC
35107: ST_TO_ADDR
35108: LD_VAR 0 1
35112: PUSH
35113: FOR_TO
35114: IFFALSE 35202
// begin k := j + d ;
35116: LD_ADDR_VAR 0 8
35120: PUSH
35121: LD_VAR 0 7
35125: PUSH
35126: LD_VAR 0 9
35130: PLUS
35131: ST_TO_ADDR
// if k > array then
35132: LD_VAR 0 8
35136: PUSH
35137: LD_VAR 0 1
35141: GREATER
35142: IFFALSE 35152
// k := 1 ;
35144: LD_ADDR_VAR 0 8
35148: PUSH
35149: LD_INT 1
35151: ST_TO_ADDR
// if not k then
35152: LD_VAR 0 8
35156: NOT
35157: IFFALSE 35169
// k := array ;
35159: LD_ADDR_VAR 0 8
35163: PUSH
35164: LD_VAR 0 1
35168: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35169: LD_ADDR_VAR 0 10
35173: PUSH
35174: LD_VAR 0 10
35178: PPUSH
35179: LD_VAR 0 8
35183: PPUSH
35184: LD_VAR 0 1
35188: PUSH
35189: LD_VAR 0 7
35193: ARRAY
35194: PPUSH
35195: CALL_OW 1
35199: ST_TO_ADDR
// end ;
35200: GO 35113
35202: POP
35203: POP
// array := tmp ;
35204: LD_ADDR_VAR 0 1
35208: PUSH
35209: LD_VAR 0 10
35213: ST_TO_ADDR
// end ;
35214: GO 35095
35216: POP
35217: POP
// result := array ;
35218: LD_ADDR_VAR 0 5
35222: PUSH
35223: LD_VAR 0 1
35227: ST_TO_ADDR
// end ;
35228: LD_VAR 0 5
35232: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35233: LD_INT 0
35235: PPUSH
35236: PPUSH
// result := 0 ;
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_INT 0
35244: ST_TO_ADDR
// if not array or not value in array then
35245: LD_VAR 0 1
35249: NOT
35250: PUSH
35251: LD_VAR 0 2
35255: PUSH
35256: LD_VAR 0 1
35260: IN
35261: NOT
35262: OR
35263: IFFALSE 35267
// exit ;
35265: GO 35321
// for i = 1 to array do
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: DOUBLE
35273: LD_INT 1
35275: DEC
35276: ST_TO_ADDR
35277: LD_VAR 0 1
35281: PUSH
35282: FOR_TO
35283: IFFALSE 35319
// if value = array [ i ] then
35285: LD_VAR 0 2
35289: PUSH
35290: LD_VAR 0 1
35294: PUSH
35295: LD_VAR 0 4
35299: ARRAY
35300: EQUAL
35301: IFFALSE 35317
// begin result := i ;
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: LD_VAR 0 4
35312: ST_TO_ADDR
// exit ;
35313: POP
35314: POP
35315: GO 35321
// end ;
35317: GO 35282
35319: POP
35320: POP
// end ;
35321: LD_VAR 0 3
35325: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35326: LD_INT 0
35328: PPUSH
// vc_chassis := chassis ;
35329: LD_ADDR_OWVAR 37
35333: PUSH
35334: LD_VAR 0 1
35338: ST_TO_ADDR
// vc_engine := engine ;
35339: LD_ADDR_OWVAR 39
35343: PUSH
35344: LD_VAR 0 2
35348: ST_TO_ADDR
// vc_control := control ;
35349: LD_ADDR_OWVAR 38
35353: PUSH
35354: LD_VAR 0 3
35358: ST_TO_ADDR
// vc_weapon := weapon ;
35359: LD_ADDR_OWVAR 40
35363: PUSH
35364: LD_VAR 0 4
35368: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35369: LD_ADDR_OWVAR 41
35373: PUSH
35374: LD_VAR 0 5
35378: ST_TO_ADDR
// end ;
35379: LD_VAR 0 6
35383: RET
// export function WantPlant ( unit ) ; var task ; begin
35384: LD_INT 0
35386: PPUSH
35387: PPUSH
// result := false ;
35388: LD_ADDR_VAR 0 2
35392: PUSH
35393: LD_INT 0
35395: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 437
35410: ST_TO_ADDR
// if task then
35411: LD_VAR 0 3
35415: IFFALSE 35443
// if task [ 1 ] [ 1 ] = p then
35417: LD_VAR 0 3
35421: PUSH
35422: LD_INT 1
35424: ARRAY
35425: PUSH
35426: LD_INT 1
35428: ARRAY
35429: PUSH
35430: LD_STRING p
35432: EQUAL
35433: IFFALSE 35443
// result := true ;
35435: LD_ADDR_VAR 0 2
35439: PUSH
35440: LD_INT 1
35442: ST_TO_ADDR
// end ;
35443: LD_VAR 0 2
35447: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35448: LD_INT 0
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
// if pos < 1 then
35454: LD_VAR 0 2
35458: PUSH
35459: LD_INT 1
35461: LESS
35462: IFFALSE 35466
// exit ;
35464: GO 35769
// if pos = 1 then
35466: LD_VAR 0 2
35470: PUSH
35471: LD_INT 1
35473: EQUAL
35474: IFFALSE 35507
// result := Replace ( arr , pos [ 1 ] , value ) else
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_VAR 0 1
35485: PPUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: PPUSH
35495: LD_VAR 0 3
35499: PPUSH
35500: CALL_OW 1
35504: ST_TO_ADDR
35505: GO 35769
// begin tmp := arr ;
35507: LD_ADDR_VAR 0 6
35511: PUSH
35512: LD_VAR 0 1
35516: ST_TO_ADDR
// s_arr := [ tmp ] ;
35517: LD_ADDR_VAR 0 7
35521: PUSH
35522: LD_VAR 0 6
35526: PUSH
35527: EMPTY
35528: LIST
35529: ST_TO_ADDR
// for i = 1 to pos - 1 do
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: DOUBLE
35536: LD_INT 1
35538: DEC
35539: ST_TO_ADDR
35540: LD_VAR 0 2
35544: PUSH
35545: LD_INT 1
35547: MINUS
35548: PUSH
35549: FOR_TO
35550: IFFALSE 35595
// begin tmp := tmp [ pos [ i ] ] ;
35552: LD_ADDR_VAR 0 6
35556: PUSH
35557: LD_VAR 0 6
35561: PUSH
35562: LD_VAR 0 2
35566: PUSH
35567: LD_VAR 0 5
35571: ARRAY
35572: ARRAY
35573: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35574: LD_ADDR_VAR 0 7
35578: PUSH
35579: LD_VAR 0 7
35583: PUSH
35584: LD_VAR 0 6
35588: PUSH
35589: EMPTY
35590: LIST
35591: ADD
35592: ST_TO_ADDR
// end ;
35593: GO 35549
35595: POP
35596: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35597: LD_ADDR_VAR 0 6
35601: PUSH
35602: LD_VAR 0 6
35606: PPUSH
35607: LD_VAR 0 2
35611: PUSH
35612: LD_VAR 0 2
35616: ARRAY
35617: PPUSH
35618: LD_VAR 0 3
35622: PPUSH
35623: CALL_OW 1
35627: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35628: LD_ADDR_VAR 0 7
35632: PUSH
35633: LD_VAR 0 7
35637: PPUSH
35638: LD_VAR 0 7
35642: PPUSH
35643: LD_VAR 0 6
35647: PPUSH
35648: CALL_OW 1
35652: ST_TO_ADDR
// for i = s_arr downto 2 do
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: DOUBLE
35659: LD_VAR 0 7
35663: INC
35664: ST_TO_ADDR
35665: LD_INT 2
35667: PUSH
35668: FOR_DOWNTO
35669: IFFALSE 35753
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35671: LD_ADDR_VAR 0 6
35675: PUSH
35676: LD_VAR 0 7
35680: PUSH
35681: LD_VAR 0 5
35685: PUSH
35686: LD_INT 1
35688: MINUS
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 2
35695: PUSH
35696: LD_VAR 0 5
35700: PUSH
35701: LD_INT 1
35703: MINUS
35704: ARRAY
35705: PPUSH
35706: LD_VAR 0 7
35710: PUSH
35711: LD_VAR 0 5
35715: ARRAY
35716: PPUSH
35717: CALL_OW 1
35721: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35722: LD_ADDR_VAR 0 7
35726: PUSH
35727: LD_VAR 0 7
35731: PPUSH
35732: LD_VAR 0 5
35736: PUSH
35737: LD_INT 1
35739: MINUS
35740: PPUSH
35741: LD_VAR 0 6
35745: PPUSH
35746: CALL_OW 1
35750: ST_TO_ADDR
// end ;
35751: GO 35668
35753: POP
35754: POP
// result := s_arr [ 1 ] ;
35755: LD_ADDR_VAR 0 4
35759: PUSH
35760: LD_VAR 0 7
35764: PUSH
35765: LD_INT 1
35767: ARRAY
35768: ST_TO_ADDR
// end ; end ;
35769: LD_VAR 0 4
35773: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35774: LD_INT 0
35776: PPUSH
35777: PPUSH
// if not list then
35778: LD_VAR 0 1
35782: NOT
35783: IFFALSE 35787
// exit ;
35785: GO 35878
// i := list [ pos1 ] ;
35787: LD_ADDR_VAR 0 5
35791: PUSH
35792: LD_VAR 0 1
35796: PUSH
35797: LD_VAR 0 2
35801: ARRAY
35802: ST_TO_ADDR
// if not i then
35803: LD_VAR 0 5
35807: NOT
35808: IFFALSE 35812
// exit ;
35810: GO 35878
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35812: LD_ADDR_VAR 0 1
35816: PUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: LD_VAR 0 1
35831: PUSH
35832: LD_VAR 0 3
35836: ARRAY
35837: PPUSH
35838: CALL_OW 1
35842: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35843: LD_ADDR_VAR 0 1
35847: PUSH
35848: LD_VAR 0 1
35852: PPUSH
35853: LD_VAR 0 3
35857: PPUSH
35858: LD_VAR 0 5
35862: PPUSH
35863: CALL_OW 1
35867: ST_TO_ADDR
// result := list ;
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: LD_VAR 0 1
35877: ST_TO_ADDR
// end ;
35878: LD_VAR 0 4
35882: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35883: LD_INT 0
35885: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35886: LD_ADDR_VAR 0 5
35890: PUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL_OW 250
35900: PPUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL_OW 251
35910: PPUSH
35911: LD_VAR 0 2
35915: PPUSH
35916: LD_VAR 0 3
35920: PPUSH
35921: LD_VAR 0 4
35925: PPUSH
35926: CALL 35936 0 5
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 5
35935: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35936: LD_INT 0
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
// if not list then
35942: LD_VAR 0 3
35946: NOT
35947: IFFALSE 35951
// exit ;
35949: GO 36339
// result := [ ] ;
35951: LD_ADDR_VAR 0 6
35955: PUSH
35956: EMPTY
35957: ST_TO_ADDR
// for i in list do
35958: LD_ADDR_VAR 0 7
35962: PUSH
35963: LD_VAR 0 3
35967: PUSH
35968: FOR_IN
35969: IFFALSE 36171
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35971: LD_ADDR_VAR 0 9
35975: PUSH
35976: LD_VAR 0 7
35980: PPUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: LD_VAR 0 2
35990: PPUSH
35991: CALL_OW 297
35995: ST_TO_ADDR
// if not result then
35996: LD_VAR 0 6
36000: NOT
36001: IFFALSE 36027
// result := [ [ i , tmp ] ] else
36003: LD_ADDR_VAR 0 6
36007: PUSH
36008: LD_VAR 0 7
36012: PUSH
36013: LD_VAR 0 9
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: ST_TO_ADDR
36025: GO 36169
// begin if result [ result ] [ 2 ] < tmp then
36027: LD_VAR 0 6
36031: PUSH
36032: LD_VAR 0 6
36036: ARRAY
36037: PUSH
36038: LD_INT 2
36040: ARRAY
36041: PUSH
36042: LD_VAR 0 9
36046: LESS
36047: IFFALSE 36089
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36049: LD_ADDR_VAR 0 6
36053: PUSH
36054: LD_VAR 0 6
36058: PPUSH
36059: LD_VAR 0 6
36063: PUSH
36064: LD_INT 1
36066: PLUS
36067: PPUSH
36068: LD_VAR 0 7
36072: PUSH
36073: LD_VAR 0 9
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PPUSH
36082: CALL_OW 2
36086: ST_TO_ADDR
36087: GO 36169
// for j = 1 to result do
36089: LD_ADDR_VAR 0 8
36093: PUSH
36094: DOUBLE
36095: LD_INT 1
36097: DEC
36098: ST_TO_ADDR
36099: LD_VAR 0 6
36103: PUSH
36104: FOR_TO
36105: IFFALSE 36167
// begin if tmp < result [ j ] [ 2 ] then
36107: LD_VAR 0 9
36111: PUSH
36112: LD_VAR 0 6
36116: PUSH
36117: LD_VAR 0 8
36121: ARRAY
36122: PUSH
36123: LD_INT 2
36125: ARRAY
36126: LESS
36127: IFFALSE 36165
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36129: LD_ADDR_VAR 0 6
36133: PUSH
36134: LD_VAR 0 6
36138: PPUSH
36139: LD_VAR 0 8
36143: PPUSH
36144: LD_VAR 0 7
36148: PUSH
36149: LD_VAR 0 9
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PPUSH
36158: CALL_OW 2
36162: ST_TO_ADDR
// break ;
36163: GO 36167
// end ; end ;
36165: GO 36104
36167: POP
36168: POP
// end ; end ;
36169: GO 35968
36171: POP
36172: POP
// if result and not asc then
36173: LD_VAR 0 6
36177: PUSH
36178: LD_VAR 0 4
36182: NOT
36183: AND
36184: IFFALSE 36259
// begin tmp := result ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_VAR 0 6
36195: ST_TO_ADDR
// for i = tmp downto 1 do
36196: LD_ADDR_VAR 0 7
36200: PUSH
36201: DOUBLE
36202: LD_VAR 0 9
36206: INC
36207: ST_TO_ADDR
36208: LD_INT 1
36210: PUSH
36211: FOR_DOWNTO
36212: IFFALSE 36257
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36214: LD_ADDR_VAR 0 6
36218: PUSH
36219: LD_VAR 0 6
36223: PPUSH
36224: LD_VAR 0 9
36228: PUSH
36229: LD_VAR 0 7
36233: MINUS
36234: PUSH
36235: LD_INT 1
36237: PLUS
36238: PPUSH
36239: LD_VAR 0 9
36243: PUSH
36244: LD_VAR 0 7
36248: ARRAY
36249: PPUSH
36250: CALL_OW 1
36254: ST_TO_ADDR
36255: GO 36211
36257: POP
36258: POP
// end ; tmp := [ ] ;
36259: LD_ADDR_VAR 0 9
36263: PUSH
36264: EMPTY
36265: ST_TO_ADDR
// if mode then
36266: LD_VAR 0 5
36270: IFFALSE 36339
// begin for i = 1 to result do
36272: LD_ADDR_VAR 0 7
36276: PUSH
36277: DOUBLE
36278: LD_INT 1
36280: DEC
36281: ST_TO_ADDR
36282: LD_VAR 0 6
36286: PUSH
36287: FOR_TO
36288: IFFALSE 36327
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: LD_VAR 0 9
36299: PPUSH
36300: LD_VAR 0 7
36304: PPUSH
36305: LD_VAR 0 6
36309: PUSH
36310: LD_VAR 0 7
36314: ARRAY
36315: PUSH
36316: LD_INT 1
36318: ARRAY
36319: PPUSH
36320: CALL_OW 1
36324: ST_TO_ADDR
36325: GO 36287
36327: POP
36328: POP
// result := tmp ;
36329: LD_ADDR_VAR 0 6
36333: PUSH
36334: LD_VAR 0 9
36338: ST_TO_ADDR
// end ; end ;
36339: LD_VAR 0 6
36343: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// if not x or not y then
36374: LD_VAR 0 2
36378: NOT
36379: PUSH
36380: LD_VAR 0 3
36384: NOT
36385: OR
36386: IFFALSE 36390
// exit ;
36388: GO 38042
// if not range then
36390: LD_VAR 0 4
36394: NOT
36395: IFFALSE 36405
// range := 10 ;
36397: LD_ADDR_VAR 0 4
36401: PUSH
36402: LD_INT 10
36404: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36405: LD_ADDR_VAR 0 8
36409: PUSH
36410: LD_INT 81
36412: PUSH
36413: LD_VAR 0 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 92
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_VAR 0 3
36434: PUSH
36435: LD_VAR 0 4
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 21
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: PPUSH
36468: CALL_OW 69
36472: ST_TO_ADDR
// if not tmp then
36473: LD_VAR 0 8
36477: NOT
36478: IFFALSE 36482
// exit ;
36480: GO 38042
// for i in tmp do
36482: LD_ADDR_VAR 0 6
36486: PUSH
36487: LD_VAR 0 8
36491: PUSH
36492: FOR_IN
36493: IFFALSE 38017
// begin points := [ 0 , 0 , 0 ] ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// bpoints := 1 ;
36514: LD_ADDR_VAR 0 10
36518: PUSH
36519: LD_INT 1
36521: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36522: LD_VAR 0 6
36526: PPUSH
36527: CALL_OW 247
36531: PUSH
36532: LD_INT 1
36534: DOUBLE
36535: EQUAL
36536: IFTRUE 36540
36538: GO 37118
36540: POP
// begin if GetClass ( i ) = 1 then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 257
36550: PUSH
36551: LD_INT 1
36553: EQUAL
36554: IFFALSE 36575
// points := [ 10 , 5 , 3 ] ;
36556: LD_ADDR_VAR 0 9
36560: PUSH
36561: LD_INT 10
36563: PUSH
36564: LD_INT 5
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36575: LD_VAR 0 6
36579: PPUSH
36580: CALL_OW 257
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: LD_INT 4
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 3 , 2 , 1 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 257
36629: PUSH
36630: LD_INT 5
36632: EQUAL
36633: IFFALSE 36654
// points := [ 130 , 5 , 2 ] ;
36635: LD_ADDR_VAR 0 9
36639: PUSH
36640: LD_INT 130
36642: PUSH
36643: LD_INT 5
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36654: LD_VAR 0 6
36658: PPUSH
36659: CALL_OW 257
36663: PUSH
36664: LD_INT 8
36666: EQUAL
36667: IFFALSE 36688
// points := [ 35 , 35 , 30 ] ;
36669: LD_ADDR_VAR 0 9
36673: PUSH
36674: LD_INT 35
36676: PUSH
36677: LD_INT 35
36679: PUSH
36680: LD_INT 30
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36688: LD_VAR 0 6
36692: PPUSH
36693: CALL_OW 257
36697: PUSH
36698: LD_INT 9
36700: EQUAL
36701: IFFALSE 36722
// points := [ 20 , 55 , 40 ] ;
36703: LD_ADDR_VAR 0 9
36707: PUSH
36708: LD_INT 20
36710: PUSH
36711: LD_INT 55
36713: PUSH
36714: LD_INT 40
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL_OW 257
36731: PUSH
36732: LD_INT 12
36734: PUSH
36735: LD_INT 16
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: IN
36742: IFFALSE 36763
// points := [ 5 , 3 , 2 ] ;
36744: LD_ADDR_VAR 0 9
36748: PUSH
36749: LD_INT 5
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36763: LD_VAR 0 6
36767: PPUSH
36768: CALL_OW 257
36772: PUSH
36773: LD_INT 17
36775: EQUAL
36776: IFFALSE 36797
// points := [ 100 , 50 , 75 ] ;
36778: LD_ADDR_VAR 0 9
36782: PUSH
36783: LD_INT 100
36785: PUSH
36786: LD_INT 50
36788: PUSH
36789: LD_INT 75
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36797: LD_VAR 0 6
36801: PPUSH
36802: CALL_OW 257
36806: PUSH
36807: LD_INT 15
36809: EQUAL
36810: IFFALSE 36831
// points := [ 10 , 5 , 3 ] ;
36812: LD_ADDR_VAR 0 9
36816: PUSH
36817: LD_INT 10
36819: PUSH
36820: LD_INT 5
36822: PUSH
36823: LD_INT 3
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36831: LD_VAR 0 6
36835: PPUSH
36836: CALL_OW 257
36840: PUSH
36841: LD_INT 14
36843: EQUAL
36844: IFFALSE 36865
// points := [ 10 , 0 , 0 ] ;
36846: LD_ADDR_VAR 0 9
36850: PUSH
36851: LD_INT 10
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 257
36874: PUSH
36875: LD_INT 11
36877: EQUAL
36878: IFFALSE 36899
// points := [ 30 , 10 , 5 ] ;
36880: LD_ADDR_VAR 0 9
36884: PUSH
36885: LD_INT 30
36887: PUSH
36888: LD_INT 10
36890: PUSH
36891: LD_INT 5
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: LIST
36898: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36899: LD_VAR 0 1
36903: PPUSH
36904: LD_INT 5
36906: PPUSH
36907: CALL_OW 321
36911: PUSH
36912: LD_INT 2
36914: EQUAL
36915: IFFALSE 36932
// bpoints := bpoints * 1.8 ;
36917: LD_ADDR_VAR 0 10
36921: PUSH
36922: LD_VAR 0 10
36926: PUSH
36927: LD_REAL  1.80000000000000E+0000
36930: MUL
36931: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36932: LD_VAR 0 6
36936: PPUSH
36937: CALL_OW 257
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 3
36950: PUSH
36951: LD_INT 4
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: IN
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: LD_INT 51
36968: PPUSH
36969: CALL_OW 321
36973: PUSH
36974: LD_INT 2
36976: EQUAL
36977: AND
36978: IFFALSE 36995
// bpoints := bpoints * 1.2 ;
36980: LD_ADDR_VAR 0 10
36984: PUSH
36985: LD_VAR 0 10
36989: PUSH
36990: LD_REAL  1.20000000000000E+0000
36993: MUL
36994: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36995: LD_VAR 0 6
36999: PPUSH
37000: CALL_OW 257
37004: PUSH
37005: LD_INT 5
37007: PUSH
37008: LD_INT 7
37010: PUSH
37011: LD_INT 9
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: IN
37019: PUSH
37020: LD_VAR 0 1
37024: PPUSH
37025: LD_INT 52
37027: PPUSH
37028: CALL_OW 321
37032: PUSH
37033: LD_INT 2
37035: EQUAL
37036: AND
37037: IFFALSE 37054
// bpoints := bpoints * 1.5 ;
37039: LD_ADDR_VAR 0 10
37043: PUSH
37044: LD_VAR 0 10
37048: PUSH
37049: LD_REAL  1.50000000000000E+0000
37052: MUL
37053: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37054: LD_VAR 0 1
37058: PPUSH
37059: LD_INT 66
37061: PPUSH
37062: CALL_OW 321
37066: PUSH
37067: LD_INT 2
37069: EQUAL
37070: IFFALSE 37087
// bpoints := bpoints * 1.1 ;
37072: LD_ADDR_VAR 0 10
37076: PUSH
37077: LD_VAR 0 10
37081: PUSH
37082: LD_REAL  1.10000000000000E+0000
37085: MUL
37086: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37087: LD_ADDR_VAR 0 10
37091: PUSH
37092: LD_VAR 0 10
37096: PUSH
37097: LD_VAR 0 6
37101: PPUSH
37102: LD_INT 1
37104: PPUSH
37105: CALL_OW 259
37109: PUSH
37110: LD_REAL  1.15000000000000E+0000
37113: MUL
37114: MUL
37115: ST_TO_ADDR
// end ; unit_vehicle :
37116: GO 37946
37118: LD_INT 2
37120: DOUBLE
37121: EQUAL
37122: IFTRUE 37126
37124: GO 37934
37126: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37127: LD_VAR 0 6
37131: PPUSH
37132: CALL_OW 264
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: LD_INT 42
37142: PUSH
37143: LD_INT 24
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: IN
37151: IFFALSE 37172
// points := [ 25 , 5 , 3 ] ;
37153: LD_ADDR_VAR 0 9
37157: PUSH
37158: LD_INT 25
37160: PUSH
37161: LD_INT 5
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37172: LD_VAR 0 6
37176: PPUSH
37177: CALL_OW 264
37181: PUSH
37182: LD_INT 4
37184: PUSH
37185: LD_INT 43
37187: PUSH
37188: LD_INT 25
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: IN
37196: IFFALSE 37217
// points := [ 40 , 15 , 5 ] ;
37198: LD_ADDR_VAR 0 9
37202: PUSH
37203: LD_INT 40
37205: PUSH
37206: LD_INT 15
37208: PUSH
37209: LD_INT 5
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37217: LD_VAR 0 6
37221: PPUSH
37222: CALL_OW 264
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 23
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: IN
37237: IFFALSE 37258
// points := [ 7 , 25 , 8 ] ;
37239: LD_ADDR_VAR 0 9
37243: PUSH
37244: LD_INT 7
37246: PUSH
37247: LD_INT 25
37249: PUSH
37250: LD_INT 8
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37258: LD_VAR 0 6
37262: PPUSH
37263: CALL_OW 264
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: LD_INT 27
37273: PUSH
37274: LD_INT 44
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: IN
37282: IFFALSE 37303
// points := [ 14 , 50 , 16 ] ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_INT 14
37291: PUSH
37292: LD_INT 50
37294: PUSH
37295: LD_INT 16
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37303: LD_VAR 0 6
37307: PPUSH
37308: CALL_OW 264
37312: PUSH
37313: LD_INT 6
37315: PUSH
37316: LD_INT 46
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: IN
37323: IFFALSE 37344
// points := [ 32 , 120 , 70 ] ;
37325: LD_ADDR_VAR 0 9
37329: PUSH
37330: LD_INT 32
37332: PUSH
37333: LD_INT 120
37335: PUSH
37336: LD_INT 70
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37344: LD_VAR 0 6
37348: PPUSH
37349: CALL_OW 264
37353: PUSH
37354: LD_INT 7
37356: PUSH
37357: LD_INT 28
37359: PUSH
37360: LD_INT 45
37362: PUSH
37363: LD_EXP 112
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: IN
37374: IFFALSE 37395
// points := [ 35 , 20 , 45 ] ;
37376: LD_ADDR_VAR 0 9
37380: PUSH
37381: LD_INT 35
37383: PUSH
37384: LD_INT 20
37386: PUSH
37387: LD_INT 45
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37395: LD_VAR 0 6
37399: PPUSH
37400: CALL_OW 264
37404: PUSH
37405: LD_INT 47
37407: PUSH
37408: EMPTY
37409: LIST
37410: IN
37411: IFFALSE 37432
// points := [ 67 , 45 , 75 ] ;
37413: LD_ADDR_VAR 0 9
37417: PUSH
37418: LD_INT 67
37420: PUSH
37421: LD_INT 45
37423: PUSH
37424: LD_INT 75
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37432: LD_VAR 0 6
37436: PPUSH
37437: CALL_OW 264
37441: PUSH
37442: LD_INT 26
37444: PUSH
37445: EMPTY
37446: LIST
37447: IN
37448: IFFALSE 37469
// points := [ 120 , 30 , 80 ] ;
37450: LD_ADDR_VAR 0 9
37454: PUSH
37455: LD_INT 120
37457: PUSH
37458: LD_INT 30
37460: PUSH
37461: LD_INT 80
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37469: LD_VAR 0 6
37473: PPUSH
37474: CALL_OW 264
37478: PUSH
37479: LD_INT 22
37481: PUSH
37482: EMPTY
37483: LIST
37484: IN
37485: IFFALSE 37506
// points := [ 40 , 1 , 1 ] ;
37487: LD_ADDR_VAR 0 9
37491: PUSH
37492: LD_INT 40
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37506: LD_VAR 0 6
37510: PPUSH
37511: CALL_OW 264
37515: PUSH
37516: LD_INT 29
37518: PUSH
37519: EMPTY
37520: LIST
37521: IN
37522: IFFALSE 37543
// points := [ 70 , 200 , 400 ] ;
37524: LD_ADDR_VAR 0 9
37528: PUSH
37529: LD_INT 70
37531: PUSH
37532: LD_INT 200
37534: PUSH
37535: LD_INT 400
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37543: LD_VAR 0 6
37547: PPUSH
37548: CALL_OW 264
37552: PUSH
37553: LD_INT 14
37555: PUSH
37556: LD_INT 53
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: IN
37563: IFFALSE 37584
// points := [ 40 , 10 , 20 ] ;
37565: LD_ADDR_VAR 0 9
37569: PUSH
37570: LD_INT 40
37572: PUSH
37573: LD_INT 10
37575: PUSH
37576: LD_INT 20
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37584: LD_VAR 0 6
37588: PPUSH
37589: CALL_OW 264
37593: PUSH
37594: LD_INT 9
37596: PUSH
37597: EMPTY
37598: LIST
37599: IN
37600: IFFALSE 37621
// points := [ 5 , 70 , 20 ] ;
37602: LD_ADDR_VAR 0 9
37606: PUSH
37607: LD_INT 5
37609: PUSH
37610: LD_INT 70
37612: PUSH
37613: LD_INT 20
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37621: LD_VAR 0 6
37625: PPUSH
37626: CALL_OW 264
37630: PUSH
37631: LD_INT 10
37633: PUSH
37634: EMPTY
37635: LIST
37636: IN
37637: IFFALSE 37658
// points := [ 35 , 110 , 70 ] ;
37639: LD_ADDR_VAR 0 9
37643: PUSH
37644: LD_INT 35
37646: PUSH
37647: LD_INT 110
37649: PUSH
37650: LD_INT 70
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37658: LD_VAR 0 6
37662: PPUSH
37663: CALL_OW 265
37667: PUSH
37668: LD_INT 25
37670: EQUAL
37671: IFFALSE 37692
// points := [ 80 , 65 , 100 ] ;
37673: LD_ADDR_VAR 0 9
37677: PUSH
37678: LD_INT 80
37680: PUSH
37681: LD_INT 65
37683: PUSH
37684: LD_INT 100
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37692: LD_VAR 0 6
37696: PPUSH
37697: CALL_OW 263
37701: PUSH
37702: LD_INT 1
37704: EQUAL
37705: IFFALSE 37740
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37707: LD_ADDR_VAR 0 10
37711: PUSH
37712: LD_VAR 0 10
37716: PUSH
37717: LD_VAR 0 6
37721: PPUSH
37722: CALL_OW 311
37726: PPUSH
37727: LD_INT 3
37729: PPUSH
37730: CALL_OW 259
37734: PUSH
37735: LD_INT 4
37737: MUL
37738: MUL
37739: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37740: LD_VAR 0 6
37744: PPUSH
37745: CALL_OW 263
37749: PUSH
37750: LD_INT 2
37752: EQUAL
37753: IFFALSE 37804
// begin j := IsControledBy ( i ) ;
37755: LD_ADDR_VAR 0 7
37759: PUSH
37760: LD_VAR 0 6
37764: PPUSH
37765: CALL_OW 312
37769: ST_TO_ADDR
// if j then
37770: LD_VAR 0 7
37774: IFFALSE 37804
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37776: LD_ADDR_VAR 0 10
37780: PUSH
37781: LD_VAR 0 10
37785: PUSH
37786: LD_VAR 0 7
37790: PPUSH
37791: LD_INT 3
37793: PPUSH
37794: CALL_OW 259
37798: PUSH
37799: LD_INT 3
37801: MUL
37802: MUL
37803: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37804: LD_VAR 0 6
37808: PPUSH
37809: CALL_OW 264
37813: PUSH
37814: LD_INT 5
37816: PUSH
37817: LD_INT 6
37819: PUSH
37820: LD_INT 46
37822: PUSH
37823: LD_INT 44
37825: PUSH
37826: LD_INT 47
37828: PUSH
37829: LD_INT 45
37831: PUSH
37832: LD_INT 28
37834: PUSH
37835: LD_INT 7
37837: PUSH
37838: LD_INT 27
37840: PUSH
37841: LD_INT 29
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: IN
37856: PUSH
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_INT 52
37864: PPUSH
37865: CALL_OW 321
37869: PUSH
37870: LD_INT 2
37872: EQUAL
37873: AND
37874: IFFALSE 37891
// bpoints := bpoints * 1.2 ;
37876: LD_ADDR_VAR 0 10
37880: PUSH
37881: LD_VAR 0 10
37885: PUSH
37886: LD_REAL  1.20000000000000E+0000
37889: MUL
37890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37891: LD_VAR 0 6
37895: PPUSH
37896: CALL_OW 264
37900: PUSH
37901: LD_INT 6
37903: PUSH
37904: LD_INT 46
37906: PUSH
37907: LD_INT 47
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: IN
37915: IFFALSE 37932
// bpoints := bpoints * 1.2 ;
37917: LD_ADDR_VAR 0 10
37921: PUSH
37922: LD_VAR 0 10
37926: PUSH
37927: LD_REAL  1.20000000000000E+0000
37930: MUL
37931: ST_TO_ADDR
// end ; unit_building :
37932: GO 37946
37934: LD_INT 3
37936: DOUBLE
37937: EQUAL
37938: IFTRUE 37942
37940: GO 37945
37942: POP
// ; end ;
37943: GO 37946
37945: POP
// for j = 1 to 3 do
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: DOUBLE
37952: LD_INT 1
37954: DEC
37955: ST_TO_ADDR
37956: LD_INT 3
37958: PUSH
37959: FOR_TO
37960: IFFALSE 38013
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37962: LD_ADDR_VAR 0 5
37966: PUSH
37967: LD_VAR 0 5
37971: PPUSH
37972: LD_VAR 0 7
37976: PPUSH
37977: LD_VAR 0 5
37981: PUSH
37982: LD_VAR 0 7
37986: ARRAY
37987: PUSH
37988: LD_VAR 0 9
37992: PUSH
37993: LD_VAR 0 7
37997: ARRAY
37998: PUSH
37999: LD_VAR 0 10
38003: MUL
38004: PLUS
38005: PPUSH
38006: CALL_OW 1
38010: ST_TO_ADDR
38011: GO 37959
38013: POP
38014: POP
// end ;
38015: GO 36492
38017: POP
38018: POP
// result := Replace ( result , 4 , tmp ) ;
38019: LD_ADDR_VAR 0 5
38023: PUSH
38024: LD_VAR 0 5
38028: PPUSH
38029: LD_INT 4
38031: PPUSH
38032: LD_VAR 0 8
38036: PPUSH
38037: CALL_OW 1
38041: ST_TO_ADDR
// end ;
38042: LD_VAR 0 5
38046: RET
// export function DangerAtRange ( unit , range ) ; begin
38047: LD_INT 0
38049: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38050: LD_ADDR_VAR 0 3
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 255
38064: PPUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 250
38074: PPUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL_OW 251
38084: PPUSH
38085: LD_VAR 0 2
38089: PPUSH
38090: CALL 36344 0 4
38094: ST_TO_ADDR
// end ;
38095: LD_VAR 0 3
38099: RET
// export function DangerInArea ( side , area ) ; begin
38100: LD_INT 0
38102: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38103: LD_ADDR_VAR 0 3
38107: PUSH
38108: LD_VAR 0 2
38112: PPUSH
38113: LD_INT 81
38115: PUSH
38116: LD_VAR 0 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL_OW 70
38129: ST_TO_ADDR
// end ;
38130: LD_VAR 0 3
38134: RET
// export function IsExtension ( b ) ; begin
38135: LD_INT 0
38137: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38138: LD_ADDR_VAR 0 2
38142: PUSH
38143: LD_VAR 0 1
38147: PUSH
38148: LD_INT 23
38150: PUSH
38151: LD_INT 20
38153: PUSH
38154: LD_INT 22
38156: PUSH
38157: LD_INT 17
38159: PUSH
38160: LD_INT 24
38162: PUSH
38163: LD_INT 21
38165: PUSH
38166: LD_INT 19
38168: PUSH
38169: LD_INT 16
38171: PUSH
38172: LD_INT 25
38174: PUSH
38175: LD_INT 18
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: IN
38190: ST_TO_ADDR
// end ;
38191: LD_VAR 0 2
38195: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38196: LD_INT 0
38198: PPUSH
38199: PPUSH
38200: PPUSH
// result := [ ] ;
38201: LD_ADDR_VAR 0 4
38205: PUSH
38206: EMPTY
38207: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38208: LD_ADDR_VAR 0 5
38212: PUSH
38213: LD_VAR 0 2
38217: PPUSH
38218: LD_INT 21
38220: PUSH
38221: LD_INT 3
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PPUSH
38228: CALL_OW 70
38232: ST_TO_ADDR
// if not tmp then
38233: LD_VAR 0 5
38237: NOT
38238: IFFALSE 38242
// exit ;
38240: GO 38306
// if checkLink then
38242: LD_VAR 0 3
38246: IFFALSE 38296
// begin for i in tmp do
38248: LD_ADDR_VAR 0 6
38252: PUSH
38253: LD_VAR 0 5
38257: PUSH
38258: FOR_IN
38259: IFFALSE 38294
// if GetBase ( i ) <> base then
38261: LD_VAR 0 6
38265: PPUSH
38266: CALL_OW 274
38270: PUSH
38271: LD_VAR 0 1
38275: NONEQUAL
38276: IFFALSE 38292
// ComLinkToBase ( base , i ) ;
38278: LD_VAR 0 1
38282: PPUSH
38283: LD_VAR 0 6
38287: PPUSH
38288: CALL_OW 169
38292: GO 38258
38294: POP
38295: POP
// end ; result := tmp ;
38296: LD_ADDR_VAR 0 4
38300: PUSH
38301: LD_VAR 0 5
38305: ST_TO_ADDR
// end ;
38306: LD_VAR 0 4
38310: RET
// export function ComComplete ( units , b ) ; var i ; begin
38311: LD_INT 0
38313: PPUSH
38314: PPUSH
// if not units then
38315: LD_VAR 0 1
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38414
// for i in units do
38324: LD_ADDR_VAR 0 4
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: FOR_IN
38335: IFFALSE 38412
// if BuildingStatus ( b ) = bs_build then
38337: LD_VAR 0 2
38341: PPUSH
38342: CALL_OW 461
38346: PUSH
38347: LD_INT 1
38349: EQUAL
38350: IFFALSE 38410
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38352: LD_VAR 0 4
38356: PPUSH
38357: LD_STRING h
38359: PUSH
38360: LD_VAR 0 2
38364: PPUSH
38365: CALL_OW 250
38369: PUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: CALL_OW 251
38379: PUSH
38380: LD_VAR 0 2
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: PPUSH
38406: CALL_OW 446
38410: GO 38334
38412: POP
38413: POP
// end ;
38414: LD_VAR 0 3
38418: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38419: LD_INT 0
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38427: LD_VAR 0 1
38431: NOT
38432: PUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 263
38442: PUSH
38443: LD_INT 2
38445: NONEQUAL
38446: OR
38447: IFFALSE 38451
// exit ;
38449: GO 38767
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38451: LD_ADDR_VAR 0 6
38455: PUSH
38456: LD_INT 22
38458: PUSH
38459: LD_VAR 0 1
38463: PPUSH
38464: CALL_OW 255
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 36
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 34
38488: PUSH
38489: LD_INT 31
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PPUSH
38505: CALL_OW 69
38509: ST_TO_ADDR
// if not tmp then
38510: LD_VAR 0 6
38514: NOT
38515: IFFALSE 38519
// exit ;
38517: GO 38767
// result := [ ] ;
38519: LD_ADDR_VAR 0 2
38523: PUSH
38524: EMPTY
38525: ST_TO_ADDR
// for i in tmp do
38526: LD_ADDR_VAR 0 3
38530: PUSH
38531: LD_VAR 0 6
38535: PUSH
38536: FOR_IN
38537: IFFALSE 38608
// begin t := UnitsInside ( i ) ;
38539: LD_ADDR_VAR 0 4
38543: PUSH
38544: LD_VAR 0 3
38548: PPUSH
38549: CALL_OW 313
38553: ST_TO_ADDR
// if t then
38554: LD_VAR 0 4
38558: IFFALSE 38606
// for j in t do
38560: LD_ADDR_VAR 0 7
38564: PUSH
38565: LD_VAR 0 4
38569: PUSH
38570: FOR_IN
38571: IFFALSE 38604
// result := Replace ( result , result + 1 , j ) ;
38573: LD_ADDR_VAR 0 2
38577: PUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_INT 1
38590: PLUS
38591: PPUSH
38592: LD_VAR 0 7
38596: PPUSH
38597: CALL_OW 1
38601: ST_TO_ADDR
38602: GO 38570
38604: POP
38605: POP
// end ;
38606: GO 38536
38608: POP
38609: POP
// if not result then
38610: LD_VAR 0 2
38614: NOT
38615: IFFALSE 38619
// exit ;
38617: GO 38767
// mech := result [ 1 ] ;
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: ST_TO_ADDR
// if result > 1 then
38633: LD_VAR 0 2
38637: PUSH
38638: LD_INT 1
38640: GREATER
38641: IFFALSE 38753
// begin for i = 2 to result do
38643: LD_ADDR_VAR 0 3
38647: PUSH
38648: DOUBLE
38649: LD_INT 2
38651: DEC
38652: ST_TO_ADDR
38653: LD_VAR 0 2
38657: PUSH
38658: FOR_TO
38659: IFFALSE 38751
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38661: LD_ADDR_VAR 0 4
38665: PUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_VAR 0 3
38675: ARRAY
38676: PPUSH
38677: LD_INT 3
38679: PPUSH
38680: CALL_OW 259
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_VAR 0 3
38694: ARRAY
38695: PPUSH
38696: CALL_OW 432
38700: MINUS
38701: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38702: LD_VAR 0 4
38706: PUSH
38707: LD_VAR 0 5
38711: PPUSH
38712: LD_INT 3
38714: PPUSH
38715: CALL_OW 259
38719: PUSH
38720: LD_VAR 0 5
38724: PPUSH
38725: CALL_OW 432
38729: MINUS
38730: GREATEREQUAL
38731: IFFALSE 38749
// mech := result [ i ] ;
38733: LD_ADDR_VAR 0 5
38737: PUSH
38738: LD_VAR 0 2
38742: PUSH
38743: LD_VAR 0 3
38747: ARRAY
38748: ST_TO_ADDR
// end ;
38749: GO 38658
38751: POP
38752: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38753: LD_VAR 0 1
38757: PPUSH
38758: LD_VAR 0 5
38762: PPUSH
38763: CALL_OW 135
// end ;
38767: LD_VAR 0 2
38771: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38772: LD_INT 0
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
// result := [ ] ;
38787: LD_ADDR_VAR 0 7
38791: PUSH
38792: EMPTY
38793: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 266
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: IN
38814: NOT
38815: IFFALSE 38819
// exit ;
38817: GO 40453
// if name then
38819: LD_VAR 0 3
38823: IFFALSE 38839
// SetBName ( base_dep , name ) ;
38825: LD_VAR 0 1
38829: PPUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: CALL_OW 500
// base := GetBase ( base_dep ) ;
38839: LD_ADDR_VAR 0 15
38843: PUSH
38844: LD_VAR 0 1
38848: PPUSH
38849: CALL_OW 274
38853: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38854: LD_ADDR_VAR 0 16
38858: PUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 255
38868: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38869: LD_ADDR_VAR 0 17
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 248
38883: ST_TO_ADDR
// if sources then
38884: LD_VAR 0 5
38888: IFFALSE 38935
// for i = 1 to 3 do
38890: LD_ADDR_VAR 0 8
38894: PUSH
38895: DOUBLE
38896: LD_INT 1
38898: DEC
38899: ST_TO_ADDR
38900: LD_INT 3
38902: PUSH
38903: FOR_TO
38904: IFFALSE 38933
// AddResourceType ( base , i , sources [ i ] ) ;
38906: LD_VAR 0 15
38910: PPUSH
38911: LD_VAR 0 8
38915: PPUSH
38916: LD_VAR 0 5
38920: PUSH
38921: LD_VAR 0 8
38925: ARRAY
38926: PPUSH
38927: CALL_OW 276
38931: GO 38903
38933: POP
38934: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38935: LD_ADDR_VAR 0 18
38939: PUSH
38940: LD_VAR 0 15
38944: PPUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_INT 1
38952: PPUSH
38953: CALL 38196 0 3
38957: ST_TO_ADDR
// InitHc ;
38958: CALL_OW 19
// InitUc ;
38962: CALL_OW 18
// uc_side := side ;
38966: LD_ADDR_OWVAR 20
38970: PUSH
38971: LD_VAR 0 16
38975: ST_TO_ADDR
// uc_nation := nation ;
38976: LD_ADDR_OWVAR 21
38980: PUSH
38981: LD_VAR 0 17
38985: ST_TO_ADDR
// if buildings then
38986: LD_VAR 0 18
38990: IFFALSE 40312
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38992: LD_ADDR_VAR 0 19
38996: PUSH
38997: LD_VAR 0 18
39001: PPUSH
39002: LD_INT 2
39004: PUSH
39005: LD_INT 30
39007: PUSH
39008: LD_INT 29
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 30
39017: PUSH
39018: LD_INT 30
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PPUSH
39030: CALL_OW 72
39034: ST_TO_ADDR
// if tmp then
39035: LD_VAR 0 19
39039: IFFALSE 39087
// for i in tmp do
39041: LD_ADDR_VAR 0 8
39045: PUSH
39046: LD_VAR 0 19
39050: PUSH
39051: FOR_IN
39052: IFFALSE 39085
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39054: LD_VAR 0 8
39058: PPUSH
39059: CALL_OW 250
39063: PPUSH
39064: LD_VAR 0 8
39068: PPUSH
39069: CALL_OW 251
39073: PPUSH
39074: LD_VAR 0 16
39078: PPUSH
39079: CALL_OW 441
39083: GO 39051
39085: POP
39086: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39087: LD_VAR 0 18
39091: PPUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 30
39097: PUSH
39098: LD_INT 32
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 30
39107: PUSH
39108: LD_INT 33
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PPUSH
39120: CALL_OW 72
39124: IFFALSE 39212
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39126: LD_ADDR_VAR 0 8
39130: PUSH
39131: LD_VAR 0 18
39135: PPUSH
39136: LD_INT 2
39138: PUSH
39139: LD_INT 30
39141: PUSH
39142: LD_INT 32
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 30
39151: PUSH
39152: LD_INT 33
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: PPUSH
39164: CALL_OW 72
39168: PUSH
39169: FOR_IN
39170: IFFALSE 39210
// begin if not GetBWeapon ( i ) then
39172: LD_VAR 0 8
39176: PPUSH
39177: CALL_OW 269
39181: NOT
39182: IFFALSE 39208
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39184: LD_VAR 0 8
39188: PPUSH
39189: LD_VAR 0 8
39193: PPUSH
39194: LD_VAR 0 2
39198: PPUSH
39199: CALL 40458 0 2
39203: PPUSH
39204: CALL_OW 431
// end ;
39208: GO 39169
39210: POP
39211: POP
// end ; for i = 1 to personel do
39212: LD_ADDR_VAR 0 8
39216: PUSH
39217: DOUBLE
39218: LD_INT 1
39220: DEC
39221: ST_TO_ADDR
39222: LD_VAR 0 6
39226: PUSH
39227: FOR_TO
39228: IFFALSE 40292
// begin if i > 4 then
39230: LD_VAR 0 8
39234: PUSH
39235: LD_INT 4
39237: GREATER
39238: IFFALSE 39242
// break ;
39240: GO 40292
// case i of 1 :
39242: LD_VAR 0 8
39246: PUSH
39247: LD_INT 1
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39335
39255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39256: LD_ADDR_VAR 0 12
39260: PUSH
39261: LD_VAR 0 18
39265: PPUSH
39266: LD_INT 22
39268: PUSH
39269: LD_VAR 0 16
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 58
39280: PUSH
39281: EMPTY
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 30
39289: PUSH
39290: LD_INT 32
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 30
39299: PUSH
39300: LD_INT 4
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 30
39309: PUSH
39310: LD_INT 5
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PPUSH
39328: CALL_OW 72
39332: ST_TO_ADDR
39333: GO 39557
39335: LD_INT 2
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39405
39343: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39344: LD_ADDR_VAR 0 12
39348: PUSH
39349: LD_VAR 0 18
39353: PPUSH
39354: LD_INT 22
39356: PUSH
39357: LD_VAR 0 16
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 30
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 30
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PPUSH
39398: CALL_OW 72
39402: ST_TO_ADDR
39403: GO 39557
39405: LD_INT 3
39407: DOUBLE
39408: EQUAL
39409: IFTRUE 39413
39411: GO 39475
39413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39414: LD_ADDR_VAR 0 12
39418: PUSH
39419: LD_VAR 0 18
39423: PPUSH
39424: LD_INT 22
39426: PUSH
39427: LD_VAR 0 16
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 30
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 30
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PPUSH
39468: CALL_OW 72
39472: ST_TO_ADDR
39473: GO 39557
39475: LD_INT 4
39477: DOUBLE
39478: EQUAL
39479: IFTRUE 39483
39481: GO 39556
39483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39484: LD_ADDR_VAR 0 12
39488: PUSH
39489: LD_VAR 0 18
39493: PPUSH
39494: LD_INT 22
39496: PUSH
39497: LD_VAR 0 16
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 30
39511: PUSH
39512: LD_INT 6
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 30
39521: PUSH
39522: LD_INT 7
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 30
39531: PUSH
39532: LD_INT 8
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PPUSH
39549: CALL_OW 72
39553: ST_TO_ADDR
39554: GO 39557
39556: POP
// if i = 1 then
39557: LD_VAR 0 8
39561: PUSH
39562: LD_INT 1
39564: EQUAL
39565: IFFALSE 39676
// begin tmp := [ ] ;
39567: LD_ADDR_VAR 0 19
39571: PUSH
39572: EMPTY
39573: ST_TO_ADDR
// for j in f do
39574: LD_ADDR_VAR 0 9
39578: PUSH
39579: LD_VAR 0 12
39583: PUSH
39584: FOR_IN
39585: IFFALSE 39658
// if GetBType ( j ) = b_bunker then
39587: LD_VAR 0 9
39591: PPUSH
39592: CALL_OW 266
39596: PUSH
39597: LD_INT 32
39599: EQUAL
39600: IFFALSE 39627
// tmp := Insert ( tmp , 1 , j ) else
39602: LD_ADDR_VAR 0 19
39606: PUSH
39607: LD_VAR 0 19
39611: PPUSH
39612: LD_INT 1
39614: PPUSH
39615: LD_VAR 0 9
39619: PPUSH
39620: CALL_OW 2
39624: ST_TO_ADDR
39625: GO 39656
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39627: LD_ADDR_VAR 0 19
39631: PUSH
39632: LD_VAR 0 19
39636: PPUSH
39637: LD_VAR 0 19
39641: PUSH
39642: LD_INT 1
39644: PLUS
39645: PPUSH
39646: LD_VAR 0 9
39650: PPUSH
39651: CALL_OW 2
39655: ST_TO_ADDR
39656: GO 39584
39658: POP
39659: POP
// if tmp then
39660: LD_VAR 0 19
39664: IFFALSE 39676
// f := tmp ;
39666: LD_ADDR_VAR 0 12
39670: PUSH
39671: LD_VAR 0 19
39675: ST_TO_ADDR
// end ; x := personel [ i ] ;
39676: LD_ADDR_VAR 0 13
39680: PUSH
39681: LD_VAR 0 6
39685: PUSH
39686: LD_VAR 0 8
39690: ARRAY
39691: ST_TO_ADDR
// if x = - 1 then
39692: LD_VAR 0 13
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: EQUAL
39701: IFFALSE 39910
// begin for j in f do
39703: LD_ADDR_VAR 0 9
39707: PUSH
39708: LD_VAR 0 12
39712: PUSH
39713: FOR_IN
39714: IFFALSE 39906
// repeat InitHc ;
39716: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39720: LD_VAR 0 9
39724: PPUSH
39725: CALL_OW 266
39729: PUSH
39730: LD_INT 5
39732: EQUAL
39733: IFFALSE 39803
// begin if UnitsInside ( j ) < 3 then
39735: LD_VAR 0 9
39739: PPUSH
39740: CALL_OW 313
39744: PUSH
39745: LD_INT 3
39747: LESS
39748: IFFALSE 39784
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39750: LD_INT 0
39752: PPUSH
39753: LD_INT 5
39755: PUSH
39756: LD_INT 8
39758: PUSH
39759: LD_INT 9
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: LIST
39766: PUSH
39767: LD_VAR 0 17
39771: ARRAY
39772: PPUSH
39773: LD_VAR 0 4
39777: PPUSH
39778: CALL_OW 380
39782: GO 39801
// PrepareHuman ( false , i , skill ) ;
39784: LD_INT 0
39786: PPUSH
39787: LD_VAR 0 8
39791: PPUSH
39792: LD_VAR 0 4
39796: PPUSH
39797: CALL_OW 380
// end else
39801: GO 39820
// PrepareHuman ( false , i , skill ) ;
39803: LD_INT 0
39805: PPUSH
39806: LD_VAR 0 8
39810: PPUSH
39811: LD_VAR 0 4
39815: PPUSH
39816: CALL_OW 380
// un := CreateHuman ;
39820: LD_ADDR_VAR 0 14
39824: PUSH
39825: CALL_OW 44
39829: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39830: LD_ADDR_VAR 0 7
39834: PUSH
39835: LD_VAR 0 7
39839: PPUSH
39840: LD_INT 1
39842: PPUSH
39843: LD_VAR 0 14
39847: PPUSH
39848: CALL_OW 2
39852: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39853: LD_VAR 0 14
39857: PPUSH
39858: LD_VAR 0 9
39862: PPUSH
39863: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39867: LD_VAR 0 9
39871: PPUSH
39872: CALL_OW 313
39876: PUSH
39877: LD_INT 6
39879: EQUAL
39880: PUSH
39881: LD_VAR 0 9
39885: PPUSH
39886: CALL_OW 266
39890: PUSH
39891: LD_INT 32
39893: PUSH
39894: LD_INT 31
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: IN
39901: OR
39902: IFFALSE 39716
39904: GO 39713
39906: POP
39907: POP
// end else
39908: GO 40290
// for j = 1 to x do
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: DOUBLE
39916: LD_INT 1
39918: DEC
39919: ST_TO_ADDR
39920: LD_VAR 0 13
39924: PUSH
39925: FOR_TO
39926: IFFALSE 40288
// begin InitHc ;
39928: CALL_OW 19
// if not f then
39932: LD_VAR 0 12
39936: NOT
39937: IFFALSE 40026
// begin PrepareHuman ( false , i , skill ) ;
39939: LD_INT 0
39941: PPUSH
39942: LD_VAR 0 8
39946: PPUSH
39947: LD_VAR 0 4
39951: PPUSH
39952: CALL_OW 380
// un := CreateHuman ;
39956: LD_ADDR_VAR 0 14
39960: PUSH
39961: CALL_OW 44
39965: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39966: LD_ADDR_VAR 0 7
39970: PUSH
39971: LD_VAR 0 7
39975: PPUSH
39976: LD_INT 1
39978: PPUSH
39979: LD_VAR 0 14
39983: PPUSH
39984: CALL_OW 2
39988: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39989: LD_VAR 0 14
39993: PPUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: CALL_OW 250
40003: PPUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 251
40013: PPUSH
40014: LD_INT 10
40016: PPUSH
40017: LD_INT 0
40019: PPUSH
40020: CALL_OW 50
// continue ;
40024: GO 39925
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40026: LD_VAR 0 12
40030: PUSH
40031: LD_INT 1
40033: ARRAY
40034: PPUSH
40035: CALL_OW 313
40039: PUSH
40040: LD_VAR 0 12
40044: PUSH
40045: LD_INT 1
40047: ARRAY
40048: PPUSH
40049: CALL_OW 266
40053: PUSH
40054: LD_INT 32
40056: PUSH
40057: LD_INT 31
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: IN
40064: AND
40065: PUSH
40066: LD_VAR 0 12
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PPUSH
40075: CALL_OW 313
40079: PUSH
40080: LD_INT 6
40082: EQUAL
40083: OR
40084: IFFALSE 40104
// f := Delete ( f , 1 ) ;
40086: LD_ADDR_VAR 0 12
40090: PUSH
40091: LD_VAR 0 12
40095: PPUSH
40096: LD_INT 1
40098: PPUSH
40099: CALL_OW 3
40103: ST_TO_ADDR
// if not f then
40104: LD_VAR 0 12
40108: NOT
40109: IFFALSE 40127
// begin x := x + 2 ;
40111: LD_ADDR_VAR 0 13
40115: PUSH
40116: LD_VAR 0 13
40120: PUSH
40121: LD_INT 2
40123: PLUS
40124: ST_TO_ADDR
// continue ;
40125: GO 39925
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40127: LD_VAR 0 12
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: PPUSH
40136: CALL_OW 266
40140: PUSH
40141: LD_INT 5
40143: EQUAL
40144: IFFALSE 40218
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40146: LD_VAR 0 12
40150: PUSH
40151: LD_INT 1
40153: ARRAY
40154: PPUSH
40155: CALL_OW 313
40159: PUSH
40160: LD_INT 3
40162: LESS
40163: IFFALSE 40199
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40165: LD_INT 0
40167: PPUSH
40168: LD_INT 5
40170: PUSH
40171: LD_INT 8
40173: PUSH
40174: LD_INT 9
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: LD_VAR 0 17
40186: ARRAY
40187: PPUSH
40188: LD_VAR 0 4
40192: PPUSH
40193: CALL_OW 380
40197: GO 40216
// PrepareHuman ( false , i , skill ) ;
40199: LD_INT 0
40201: PPUSH
40202: LD_VAR 0 8
40206: PPUSH
40207: LD_VAR 0 4
40211: PPUSH
40212: CALL_OW 380
// end else
40216: GO 40235
// PrepareHuman ( false , i , skill ) ;
40218: LD_INT 0
40220: PPUSH
40221: LD_VAR 0 8
40225: PPUSH
40226: LD_VAR 0 4
40230: PPUSH
40231: CALL_OW 380
// un := CreateHuman ;
40235: LD_ADDR_VAR 0 14
40239: PUSH
40240: CALL_OW 44
40244: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40245: LD_ADDR_VAR 0 7
40249: PUSH
40250: LD_VAR 0 7
40254: PPUSH
40255: LD_INT 1
40257: PPUSH
40258: LD_VAR 0 14
40262: PPUSH
40263: CALL_OW 2
40267: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40268: LD_VAR 0 14
40272: PPUSH
40273: LD_VAR 0 12
40277: PUSH
40278: LD_INT 1
40280: ARRAY
40281: PPUSH
40282: CALL_OW 52
// end ;
40286: GO 39925
40288: POP
40289: POP
// end ;
40290: GO 39227
40292: POP
40293: POP
// result := result ^ buildings ;
40294: LD_ADDR_VAR 0 7
40298: PUSH
40299: LD_VAR 0 7
40303: PUSH
40304: LD_VAR 0 18
40308: ADD
40309: ST_TO_ADDR
// end else
40310: GO 40453
// begin for i = 1 to personel do
40312: LD_ADDR_VAR 0 8
40316: PUSH
40317: DOUBLE
40318: LD_INT 1
40320: DEC
40321: ST_TO_ADDR
40322: LD_VAR 0 6
40326: PUSH
40327: FOR_TO
40328: IFFALSE 40451
// begin if i > 4 then
40330: LD_VAR 0 8
40334: PUSH
40335: LD_INT 4
40337: GREATER
40338: IFFALSE 40342
// break ;
40340: GO 40451
// x := personel [ i ] ;
40342: LD_ADDR_VAR 0 13
40346: PUSH
40347: LD_VAR 0 6
40351: PUSH
40352: LD_VAR 0 8
40356: ARRAY
40357: ST_TO_ADDR
// if x = - 1 then
40358: LD_VAR 0 13
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: EQUAL
40367: IFFALSE 40371
// continue ;
40369: GO 40327
// PrepareHuman ( false , i , skill ) ;
40371: LD_INT 0
40373: PPUSH
40374: LD_VAR 0 8
40378: PPUSH
40379: LD_VAR 0 4
40383: PPUSH
40384: CALL_OW 380
// un := CreateHuman ;
40388: LD_ADDR_VAR 0 14
40392: PUSH
40393: CALL_OW 44
40397: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40398: LD_VAR 0 14
40402: PPUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: CALL_OW 250
40412: PPUSH
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 251
40422: PPUSH
40423: LD_INT 10
40425: PPUSH
40426: LD_INT 0
40428: PPUSH
40429: CALL_OW 50
// result := result ^ un ;
40433: LD_ADDR_VAR 0 7
40437: PUSH
40438: LD_VAR 0 7
40442: PUSH
40443: LD_VAR 0 14
40447: ADD
40448: ST_TO_ADDR
// end ;
40449: GO 40327
40451: POP
40452: POP
// end ; end ;
40453: LD_VAR 0 7
40457: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40458: LD_INT 0
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
// result := false ;
40476: LD_ADDR_VAR 0 3
40480: PUSH
40481: LD_INT 0
40483: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40484: LD_VAR 0 1
40488: NOT
40489: PUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 266
40499: PUSH
40500: LD_INT 32
40502: PUSH
40503: LD_INT 33
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: IN
40510: NOT
40511: OR
40512: IFFALSE 40516
// exit ;
40514: GO 41625
// nat := GetNation ( tower ) ;
40516: LD_ADDR_VAR 0 12
40520: PUSH
40521: LD_VAR 0 1
40525: PPUSH
40526: CALL_OW 248
40530: ST_TO_ADDR
// side := GetSide ( tower ) ;
40531: LD_ADDR_VAR 0 16
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 255
40545: ST_TO_ADDR
// x := GetX ( tower ) ;
40546: LD_ADDR_VAR 0 10
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 250
40560: ST_TO_ADDR
// y := GetY ( tower ) ;
40561: LD_ADDR_VAR 0 11
40565: PUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: CALL_OW 251
40575: ST_TO_ADDR
// if not x or not y then
40576: LD_VAR 0 10
40580: NOT
40581: PUSH
40582: LD_VAR 0 11
40586: NOT
40587: OR
40588: IFFALSE 40592
// exit ;
40590: GO 41625
// weapon := 0 ;
40592: LD_ADDR_VAR 0 18
40596: PUSH
40597: LD_INT 0
40599: ST_TO_ADDR
// fac_list := [ ] ;
40600: LD_ADDR_VAR 0 17
40604: PUSH
40605: EMPTY
40606: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40607: LD_ADDR_VAR 0 6
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: CALL_OW 274
40621: PPUSH
40622: LD_VAR 0 2
40626: PPUSH
40627: LD_INT 0
40629: PPUSH
40630: CALL 38196 0 3
40634: PPUSH
40635: LD_INT 30
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PPUSH
40645: CALL_OW 72
40649: ST_TO_ADDR
// if not factories then
40650: LD_VAR 0 6
40654: NOT
40655: IFFALSE 40659
// exit ;
40657: GO 41625
// for i in factories do
40659: LD_ADDR_VAR 0 8
40663: PUSH
40664: LD_VAR 0 6
40668: PUSH
40669: FOR_IN
40670: IFFALSE 40695
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40672: LD_ADDR_VAR 0 17
40676: PUSH
40677: LD_VAR 0 17
40681: PUSH
40682: LD_VAR 0 8
40686: PPUSH
40687: CALL_OW 478
40691: UNION
40692: ST_TO_ADDR
40693: GO 40669
40695: POP
40696: POP
// if not fac_list then
40697: LD_VAR 0 17
40701: NOT
40702: IFFALSE 40706
// exit ;
40704: GO 41625
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40706: LD_ADDR_VAR 0 5
40710: PUSH
40711: LD_INT 4
40713: PUSH
40714: LD_INT 5
40716: PUSH
40717: LD_INT 9
40719: PUSH
40720: LD_INT 10
40722: PUSH
40723: LD_INT 6
40725: PUSH
40726: LD_INT 7
40728: PUSH
40729: LD_INT 11
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 27
40743: PUSH
40744: LD_INT 28
40746: PUSH
40747: LD_INT 26
40749: PUSH
40750: LD_INT 30
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 43
40761: PUSH
40762: LD_INT 44
40764: PUSH
40765: LD_INT 46
40767: PUSH
40768: LD_INT 45
40770: PUSH
40771: LD_INT 47
40773: PUSH
40774: LD_INT 49
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: PUSH
40790: LD_VAR 0 12
40794: ARRAY
40795: ST_TO_ADDR
// list := list isect fac_list ;
40796: LD_ADDR_VAR 0 5
40800: PUSH
40801: LD_VAR 0 5
40805: PUSH
40806: LD_VAR 0 17
40810: ISECT
40811: ST_TO_ADDR
// if not list then
40812: LD_VAR 0 5
40816: NOT
40817: IFFALSE 40821
// exit ;
40819: GO 41625
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40821: LD_VAR 0 12
40825: PUSH
40826: LD_INT 3
40828: EQUAL
40829: PUSH
40830: LD_INT 49
40832: PUSH
40833: LD_VAR 0 5
40837: IN
40838: AND
40839: PUSH
40840: LD_INT 31
40842: PPUSH
40843: LD_VAR 0 16
40847: PPUSH
40848: CALL_OW 321
40852: PUSH
40853: LD_INT 2
40855: EQUAL
40856: AND
40857: IFFALSE 40917
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40859: LD_INT 22
40861: PUSH
40862: LD_VAR 0 16
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 35
40873: PUSH
40874: LD_INT 49
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 91
40883: PUSH
40884: LD_VAR 0 1
40888: PUSH
40889: LD_INT 10
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: PPUSH
40902: CALL_OW 69
40906: NOT
40907: IFFALSE 40917
// weapon := ru_time_lapser ;
40909: LD_ADDR_VAR 0 18
40913: PUSH
40914: LD_INT 49
40916: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40917: LD_VAR 0 12
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: IN
40932: PUSH
40933: LD_INT 11
40935: PUSH
40936: LD_VAR 0 5
40940: IN
40941: PUSH
40942: LD_INT 30
40944: PUSH
40945: LD_VAR 0 5
40949: IN
40950: OR
40951: AND
40952: PUSH
40953: LD_INT 6
40955: PPUSH
40956: LD_VAR 0 16
40960: PPUSH
40961: CALL_OW 321
40965: PUSH
40966: LD_INT 2
40968: EQUAL
40969: AND
40970: IFFALSE 41135
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40972: LD_INT 22
40974: PUSH
40975: LD_VAR 0 16
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 35
40989: PUSH
40990: LD_INT 11
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 35
40999: PUSH
41000: LD_INT 30
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 91
41014: PUSH
41015: LD_VAR 0 1
41019: PUSH
41020: LD_INT 18
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 69
41037: NOT
41038: PUSH
41039: LD_INT 22
41041: PUSH
41042: LD_VAR 0 16
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 30
41056: PUSH
41057: LD_INT 32
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 30
41066: PUSH
41067: LD_INT 33
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 91
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: LD_INT 12
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: PPUSH
41103: CALL_OW 69
41107: PUSH
41108: LD_INT 2
41110: GREATER
41111: AND
41112: IFFALSE 41135
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41114: LD_ADDR_VAR 0 18
41118: PUSH
41119: LD_INT 11
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_VAR 0 12
41133: ARRAY
41134: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41135: LD_VAR 0 18
41139: NOT
41140: PUSH
41141: LD_INT 40
41143: PPUSH
41144: LD_VAR 0 16
41148: PPUSH
41149: CALL_OW 321
41153: PUSH
41154: LD_INT 2
41156: EQUAL
41157: AND
41158: PUSH
41159: LD_INT 7
41161: PUSH
41162: LD_VAR 0 5
41166: IN
41167: PUSH
41168: LD_INT 28
41170: PUSH
41171: LD_VAR 0 5
41175: IN
41176: OR
41177: PUSH
41178: LD_INT 45
41180: PUSH
41181: LD_VAR 0 5
41185: IN
41186: OR
41187: AND
41188: IFFALSE 41442
// begin hex := GetHexInfo ( x , y ) ;
41190: LD_ADDR_VAR 0 4
41194: PUSH
41195: LD_VAR 0 10
41199: PPUSH
41200: LD_VAR 0 11
41204: PPUSH
41205: CALL_OW 546
41209: ST_TO_ADDR
// if hex [ 1 ] then
41210: LD_VAR 0 4
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: IFFALSE 41222
// exit ;
41220: GO 41625
// height := hex [ 2 ] ;
41222: LD_ADDR_VAR 0 15
41226: PUSH
41227: LD_VAR 0 4
41231: PUSH
41232: LD_INT 2
41234: ARRAY
41235: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41236: LD_ADDR_VAR 0 14
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// for i in tmp do
41259: LD_ADDR_VAR 0 8
41263: PUSH
41264: LD_VAR 0 14
41268: PUSH
41269: FOR_IN
41270: IFFALSE 41440
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41272: LD_ADDR_VAR 0 9
41276: PUSH
41277: LD_VAR 0 10
41281: PPUSH
41282: LD_VAR 0 8
41286: PPUSH
41287: LD_INT 5
41289: PPUSH
41290: CALL_OW 272
41294: PUSH
41295: LD_VAR 0 11
41299: PPUSH
41300: LD_VAR 0 8
41304: PPUSH
41305: LD_INT 5
41307: PPUSH
41308: CALL_OW 273
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41317: LD_VAR 0 9
41321: PUSH
41322: LD_INT 1
41324: ARRAY
41325: PPUSH
41326: LD_VAR 0 9
41330: PUSH
41331: LD_INT 2
41333: ARRAY
41334: PPUSH
41335: CALL_OW 488
41339: IFFALSE 41438
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41341: LD_ADDR_VAR 0 4
41345: PUSH
41346: LD_VAR 0 9
41350: PUSH
41351: LD_INT 1
41353: ARRAY
41354: PPUSH
41355: LD_VAR 0 9
41359: PUSH
41360: LD_INT 2
41362: ARRAY
41363: PPUSH
41364: CALL_OW 546
41368: ST_TO_ADDR
// if hex [ 1 ] then
41369: LD_VAR 0 4
41373: PUSH
41374: LD_INT 1
41376: ARRAY
41377: IFFALSE 41381
// continue ;
41379: GO 41269
// h := hex [ 2 ] ;
41381: LD_ADDR_VAR 0 13
41385: PUSH
41386: LD_VAR 0 4
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: ST_TO_ADDR
// if h + 7 < height then
41395: LD_VAR 0 13
41399: PUSH
41400: LD_INT 7
41402: PLUS
41403: PUSH
41404: LD_VAR 0 15
41408: LESS
41409: IFFALSE 41438
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41411: LD_ADDR_VAR 0 18
41415: PUSH
41416: LD_INT 7
41418: PUSH
41419: LD_INT 28
41421: PUSH
41422: LD_INT 45
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: PUSH
41430: LD_VAR 0 12
41434: ARRAY
41435: ST_TO_ADDR
// break ;
41436: GO 41440
// end ; end ; end ;
41438: GO 41269
41440: POP
41441: POP
// end ; if not weapon then
41442: LD_VAR 0 18
41446: NOT
41447: IFFALSE 41507
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41449: LD_ADDR_VAR 0 5
41453: PUSH
41454: LD_VAR 0 5
41458: PUSH
41459: LD_INT 11
41461: PUSH
41462: LD_INT 30
41464: PUSH
41465: LD_INT 49
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: DIFF
41473: ST_TO_ADDR
// if not list then
41474: LD_VAR 0 5
41478: NOT
41479: IFFALSE 41483
// exit ;
41481: GO 41625
// weapon := list [ rand ( 1 , list ) ] ;
41483: LD_ADDR_VAR 0 18
41487: PUSH
41488: LD_VAR 0 5
41492: PUSH
41493: LD_INT 1
41495: PPUSH
41496: LD_VAR 0 5
41500: PPUSH
41501: CALL_OW 12
41505: ARRAY
41506: ST_TO_ADDR
// end ; if weapon then
41507: LD_VAR 0 18
41511: IFFALSE 41625
// begin tmp := CostOfWeapon ( weapon ) ;
41513: LD_ADDR_VAR 0 14
41517: PUSH
41518: LD_VAR 0 18
41522: PPUSH
41523: CALL_OW 451
41527: ST_TO_ADDR
// j := GetBase ( tower ) ;
41528: LD_ADDR_VAR 0 9
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 274
41542: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41543: LD_VAR 0 9
41547: PPUSH
41548: LD_INT 1
41550: PPUSH
41551: CALL_OW 275
41555: PUSH
41556: LD_VAR 0 14
41560: PUSH
41561: LD_INT 1
41563: ARRAY
41564: GREATEREQUAL
41565: PUSH
41566: LD_VAR 0 9
41570: PPUSH
41571: LD_INT 2
41573: PPUSH
41574: CALL_OW 275
41578: PUSH
41579: LD_VAR 0 14
41583: PUSH
41584: LD_INT 2
41586: ARRAY
41587: GREATEREQUAL
41588: AND
41589: PUSH
41590: LD_VAR 0 9
41594: PPUSH
41595: LD_INT 3
41597: PPUSH
41598: CALL_OW 275
41602: PUSH
41603: LD_VAR 0 14
41607: PUSH
41608: LD_INT 3
41610: ARRAY
41611: GREATEREQUAL
41612: AND
41613: IFFALSE 41625
// result := weapon ;
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_VAR 0 18
41624: ST_TO_ADDR
// end ; end ;
41625: LD_VAR 0 3
41629: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41630: LD_INT 0
41632: PPUSH
41633: PPUSH
// result := true ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 1
41641: ST_TO_ADDR
// if array1 = array2 then
41642: LD_VAR 0 1
41646: PUSH
41647: LD_VAR 0 2
41651: EQUAL
41652: IFFALSE 41712
// begin for i = 1 to array1 do
41654: LD_ADDR_VAR 0 4
41658: PUSH
41659: DOUBLE
41660: LD_INT 1
41662: DEC
41663: ST_TO_ADDR
41664: LD_VAR 0 1
41668: PUSH
41669: FOR_TO
41670: IFFALSE 41708
// if array1 [ i ] <> array2 [ i ] then
41672: LD_VAR 0 1
41676: PUSH
41677: LD_VAR 0 4
41681: ARRAY
41682: PUSH
41683: LD_VAR 0 2
41687: PUSH
41688: LD_VAR 0 4
41692: ARRAY
41693: NONEQUAL
41694: IFFALSE 41706
// begin result := false ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
// break ;
41704: GO 41708
// end ;
41706: GO 41669
41708: POP
41709: POP
// end else
41710: GO 41720
// result := false ;
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 0
41719: ST_TO_ADDR
// end ;
41720: LD_VAR 0 3
41724: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41725: LD_INT 0
41727: PPUSH
41728: PPUSH
// if not array1 or not array2 then
41729: LD_VAR 0 1
41733: NOT
41734: PUSH
41735: LD_VAR 0 2
41739: NOT
41740: OR
41741: IFFALSE 41745
// exit ;
41743: GO 41809
// result := true ;
41745: LD_ADDR_VAR 0 3
41749: PUSH
41750: LD_INT 1
41752: ST_TO_ADDR
// for i = 1 to array1 do
41753: LD_ADDR_VAR 0 4
41757: PUSH
41758: DOUBLE
41759: LD_INT 1
41761: DEC
41762: ST_TO_ADDR
41763: LD_VAR 0 1
41767: PUSH
41768: FOR_TO
41769: IFFALSE 41807
// if array1 [ i ] <> array2 [ i ] then
41771: LD_VAR 0 1
41775: PUSH
41776: LD_VAR 0 4
41780: ARRAY
41781: PUSH
41782: LD_VAR 0 2
41786: PUSH
41787: LD_VAR 0 4
41791: ARRAY
41792: NONEQUAL
41793: IFFALSE 41805
// begin result := false ;
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_INT 0
41802: ST_TO_ADDR
// break ;
41803: GO 41807
// end ;
41805: GO 41768
41807: POP
41808: POP
// end ;
41809: LD_VAR 0 3
41813: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41814: LD_INT 0
41816: PPUSH
41817: PPUSH
41818: PPUSH
// pom := GetBase ( fac ) ;
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 274
41833: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41834: LD_ADDR_VAR 0 4
41838: PUSH
41839: LD_VAR 0 2
41843: PUSH
41844: LD_INT 1
41846: ARRAY
41847: PPUSH
41848: LD_VAR 0 2
41852: PUSH
41853: LD_INT 2
41855: ARRAY
41856: PPUSH
41857: LD_VAR 0 2
41861: PUSH
41862: LD_INT 3
41864: ARRAY
41865: PPUSH
41866: LD_VAR 0 2
41870: PUSH
41871: LD_INT 4
41873: ARRAY
41874: PPUSH
41875: CALL_OW 449
41879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41880: LD_ADDR_VAR 0 3
41884: PUSH
41885: LD_VAR 0 5
41889: PPUSH
41890: LD_INT 1
41892: PPUSH
41893: CALL_OW 275
41897: PUSH
41898: LD_VAR 0 4
41902: PUSH
41903: LD_INT 1
41905: ARRAY
41906: GREATEREQUAL
41907: PUSH
41908: LD_VAR 0 5
41912: PPUSH
41913: LD_INT 2
41915: PPUSH
41916: CALL_OW 275
41920: PUSH
41921: LD_VAR 0 4
41925: PUSH
41926: LD_INT 2
41928: ARRAY
41929: GREATEREQUAL
41930: AND
41931: PUSH
41932: LD_VAR 0 5
41936: PPUSH
41937: LD_INT 3
41939: PPUSH
41940: CALL_OW 275
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: LD_INT 3
41952: ARRAY
41953: GREATEREQUAL
41954: AND
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 3
41960: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
// pom := GetBase ( building ) ;
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_VAR 0 1
41976: PPUSH
41977: CALL_OW 274
41981: ST_TO_ADDR
// if not pom then
41982: LD_VAR 0 3
41986: NOT
41987: IFFALSE 41991
// exit ;
41989: GO 42161
// btype := GetBType ( building ) ;
41991: LD_ADDR_VAR 0 5
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 266
42005: ST_TO_ADDR
// if btype = b_armoury then
42006: LD_VAR 0 5
42010: PUSH
42011: LD_INT 4
42013: EQUAL
42014: IFFALSE 42024
// btype := b_barracks ;
42016: LD_ADDR_VAR 0 5
42020: PUSH
42021: LD_INT 5
42023: ST_TO_ADDR
// if btype = b_depot then
42024: LD_VAR 0 5
42028: PUSH
42029: LD_INT 0
42031: EQUAL
42032: IFFALSE 42042
// btype := b_warehouse ;
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: LD_INT 1
42041: ST_TO_ADDR
// if btype = b_workshop then
42042: LD_VAR 0 5
42046: PUSH
42047: LD_INT 2
42049: EQUAL
42050: IFFALSE 42060
// btype := b_factory ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_INT 3
42059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42060: LD_ADDR_VAR 0 4
42064: PUSH
42065: LD_VAR 0 5
42069: PPUSH
42070: LD_VAR 0 1
42074: PPUSH
42075: CALL_OW 248
42079: PPUSH
42080: CALL_OW 450
42084: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42085: LD_ADDR_VAR 0 2
42089: PUSH
42090: LD_VAR 0 3
42094: PPUSH
42095: LD_INT 1
42097: PPUSH
42098: CALL_OW 275
42102: PUSH
42103: LD_VAR 0 4
42107: PUSH
42108: LD_INT 1
42110: ARRAY
42111: GREATEREQUAL
42112: PUSH
42113: LD_VAR 0 3
42117: PPUSH
42118: LD_INT 2
42120: PPUSH
42121: CALL_OW 275
42125: PUSH
42126: LD_VAR 0 4
42130: PUSH
42131: LD_INT 2
42133: ARRAY
42134: GREATEREQUAL
42135: AND
42136: PUSH
42137: LD_VAR 0 3
42141: PPUSH
42142: LD_INT 3
42144: PPUSH
42145: CALL_OW 275
42149: PUSH
42150: LD_VAR 0 4
42154: PUSH
42155: LD_INT 3
42157: ARRAY
42158: GREATEREQUAL
42159: AND
42160: ST_TO_ADDR
// end ;
42161: LD_VAR 0 2
42165: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42166: LD_INT 0
42168: PPUSH
42169: PPUSH
42170: PPUSH
// pom := GetBase ( building ) ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_VAR 0 1
42180: PPUSH
42181: CALL_OW 274
42185: ST_TO_ADDR
// if not pom then
42186: LD_VAR 0 4
42190: NOT
42191: IFFALSE 42195
// exit ;
42193: GO 42296
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42195: LD_ADDR_VAR 0 5
42199: PUSH
42200: LD_VAR 0 2
42204: PPUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 248
42214: PPUSH
42215: CALL_OW 450
42219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42220: LD_ADDR_VAR 0 3
42224: PUSH
42225: LD_VAR 0 4
42229: PPUSH
42230: LD_INT 1
42232: PPUSH
42233: CALL_OW 275
42237: PUSH
42238: LD_VAR 0 5
42242: PUSH
42243: LD_INT 1
42245: ARRAY
42246: GREATEREQUAL
42247: PUSH
42248: LD_VAR 0 4
42252: PPUSH
42253: LD_INT 2
42255: PPUSH
42256: CALL_OW 275
42260: PUSH
42261: LD_VAR 0 5
42265: PUSH
42266: LD_INT 2
42268: ARRAY
42269: GREATEREQUAL
42270: AND
42271: PUSH
42272: LD_VAR 0 4
42276: PPUSH
42277: LD_INT 3
42279: PPUSH
42280: CALL_OW 275
42284: PUSH
42285: LD_VAR 0 5
42289: PUSH
42290: LD_INT 3
42292: ARRAY
42293: GREATEREQUAL
42294: AND
42295: ST_TO_ADDR
// end ;
42296: LD_VAR 0 3
42300: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42301: LD_INT 0
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
// result := false ;
42314: LD_ADDR_VAR 0 8
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42322: LD_VAR 0 5
42326: NOT
42327: PUSH
42328: LD_VAR 0 1
42332: NOT
42333: OR
42334: PUSH
42335: LD_VAR 0 2
42339: NOT
42340: OR
42341: PUSH
42342: LD_VAR 0 3
42346: NOT
42347: OR
42348: IFFALSE 42352
// exit ;
42350: GO 43166
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42352: LD_ADDR_VAR 0 14
42356: PUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_VAR 0 2
42366: PPUSH
42367: LD_VAR 0 3
42371: PPUSH
42372: LD_VAR 0 4
42376: PPUSH
42377: LD_VAR 0 5
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: CALL_OW 248
42390: PPUSH
42391: LD_INT 0
42393: PPUSH
42394: CALL 44403 0 6
42398: ST_TO_ADDR
// if not hexes then
42399: LD_VAR 0 14
42403: NOT
42404: IFFALSE 42408
// exit ;
42406: GO 43166
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42408: LD_ADDR_VAR 0 17
42412: PUSH
42413: LD_VAR 0 5
42417: PPUSH
42418: LD_INT 22
42420: PUSH
42421: LD_VAR 0 13
42425: PPUSH
42426: CALL_OW 255
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 30
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 30
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PPUSH
42467: CALL_OW 72
42471: ST_TO_ADDR
// for i = 1 to hexes do
42472: LD_ADDR_VAR 0 9
42476: PUSH
42477: DOUBLE
42478: LD_INT 1
42480: DEC
42481: ST_TO_ADDR
42482: LD_VAR 0 14
42486: PUSH
42487: FOR_TO
42488: IFFALSE 43164
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42490: LD_ADDR_VAR 0 13
42494: PUSH
42495: LD_VAR 0 14
42499: PUSH
42500: LD_VAR 0 9
42504: ARRAY
42505: PUSH
42506: LD_INT 1
42508: ARRAY
42509: PPUSH
42510: LD_VAR 0 14
42514: PUSH
42515: LD_VAR 0 9
42519: ARRAY
42520: PUSH
42521: LD_INT 2
42523: ARRAY
42524: PPUSH
42525: CALL_OW 428
42529: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42530: LD_VAR 0 14
42534: PUSH
42535: LD_VAR 0 9
42539: ARRAY
42540: PUSH
42541: LD_INT 1
42543: ARRAY
42544: PPUSH
42545: LD_VAR 0 14
42549: PUSH
42550: LD_VAR 0 9
42554: ARRAY
42555: PUSH
42556: LD_INT 2
42558: ARRAY
42559: PPUSH
42560: CALL_OW 351
42564: PUSH
42565: LD_VAR 0 14
42569: PUSH
42570: LD_VAR 0 9
42574: ARRAY
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: PPUSH
42580: LD_VAR 0 14
42584: PUSH
42585: LD_VAR 0 9
42589: ARRAY
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: PPUSH
42595: CALL_OW 488
42599: NOT
42600: OR
42601: PUSH
42602: LD_VAR 0 13
42606: PPUSH
42607: CALL_OW 247
42611: PUSH
42612: LD_INT 3
42614: EQUAL
42615: OR
42616: IFFALSE 42622
// exit ;
42618: POP
42619: POP
42620: GO 43166
// if not tmp then
42622: LD_VAR 0 13
42626: NOT
42627: IFFALSE 42631
// continue ;
42629: GO 42487
// result := true ;
42631: LD_ADDR_VAR 0 8
42635: PUSH
42636: LD_INT 1
42638: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42639: LD_VAR 0 6
42643: PUSH
42644: LD_VAR 0 13
42648: PPUSH
42649: CALL_OW 247
42653: PUSH
42654: LD_INT 2
42656: EQUAL
42657: AND
42658: PUSH
42659: LD_VAR 0 13
42663: PPUSH
42664: CALL_OW 263
42668: PUSH
42669: LD_INT 1
42671: EQUAL
42672: AND
42673: IFFALSE 42837
// begin if IsDrivenBy ( tmp ) then
42675: LD_VAR 0 13
42679: PPUSH
42680: CALL_OW 311
42684: IFFALSE 42688
// continue ;
42686: GO 42487
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42688: LD_VAR 0 6
42692: PPUSH
42693: LD_INT 3
42695: PUSH
42696: LD_INT 60
42698: PUSH
42699: EMPTY
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 55
42711: PUSH
42712: EMPTY
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PPUSH
42723: CALL_OW 72
42727: IFFALSE 42835
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42729: LD_ADDR_VAR 0 18
42733: PUSH
42734: LD_VAR 0 6
42738: PPUSH
42739: LD_INT 3
42741: PUSH
42742: LD_INT 60
42744: PUSH
42745: EMPTY
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: LD_INT 55
42757: PUSH
42758: EMPTY
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PPUSH
42769: CALL_OW 72
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: ST_TO_ADDR
// if IsInUnit ( driver ) then
42778: LD_VAR 0 18
42782: PPUSH
42783: CALL_OW 310
42787: IFFALSE 42798
// ComExit ( driver ) ;
42789: LD_VAR 0 18
42793: PPUSH
42794: CALL 68108 0 1
// AddComEnterUnit ( driver , tmp ) ;
42798: LD_VAR 0 18
42802: PPUSH
42803: LD_VAR 0 13
42807: PPUSH
42808: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42812: LD_VAR 0 18
42816: PPUSH
42817: LD_VAR 0 7
42821: PPUSH
42822: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42826: LD_VAR 0 18
42830: PPUSH
42831: CALL_OW 181
// end ; continue ;
42835: GO 42487
// end ; if not cleaners or not tmp in cleaners then
42837: LD_VAR 0 6
42841: NOT
42842: PUSH
42843: LD_VAR 0 13
42847: PUSH
42848: LD_VAR 0 6
42852: IN
42853: NOT
42854: OR
42855: IFFALSE 43162
// begin if dep then
42857: LD_VAR 0 17
42861: IFFALSE 42997
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42863: LD_ADDR_VAR 0 16
42867: PUSH
42868: LD_VAR 0 17
42872: PUSH
42873: LD_INT 1
42875: ARRAY
42876: PPUSH
42877: CALL_OW 250
42881: PPUSH
42882: LD_VAR 0 17
42886: PUSH
42887: LD_INT 1
42889: ARRAY
42890: PPUSH
42891: CALL_OW 254
42895: PPUSH
42896: LD_INT 5
42898: PPUSH
42899: CALL_OW 272
42903: PUSH
42904: LD_VAR 0 17
42908: PUSH
42909: LD_INT 1
42911: ARRAY
42912: PPUSH
42913: CALL_OW 251
42917: PPUSH
42918: LD_VAR 0 17
42922: PUSH
42923: LD_INT 1
42925: ARRAY
42926: PPUSH
42927: CALL_OW 254
42931: PPUSH
42932: LD_INT 5
42934: PPUSH
42935: CALL_OW 273
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42944: LD_VAR 0 16
42948: PUSH
42949: LD_INT 1
42951: ARRAY
42952: PPUSH
42953: LD_VAR 0 16
42957: PUSH
42958: LD_INT 2
42960: ARRAY
42961: PPUSH
42962: CALL_OW 488
42966: IFFALSE 42997
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42968: LD_VAR 0 13
42972: PPUSH
42973: LD_VAR 0 16
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PPUSH
42982: LD_VAR 0 16
42986: PUSH
42987: LD_INT 2
42989: ARRAY
42990: PPUSH
42991: CALL_OW 111
// continue ;
42995: GO 42487
// end ; end ; r := GetDir ( tmp ) ;
42997: LD_ADDR_VAR 0 15
43001: PUSH
43002: LD_VAR 0 13
43006: PPUSH
43007: CALL_OW 254
43011: ST_TO_ADDR
// if r = 5 then
43012: LD_VAR 0 15
43016: PUSH
43017: LD_INT 5
43019: EQUAL
43020: IFFALSE 43030
// r := 0 ;
43022: LD_ADDR_VAR 0 15
43026: PUSH
43027: LD_INT 0
43029: ST_TO_ADDR
// for j = r to 5 do
43030: LD_ADDR_VAR 0 10
43034: PUSH
43035: DOUBLE
43036: LD_VAR 0 15
43040: DEC
43041: ST_TO_ADDR
43042: LD_INT 5
43044: PUSH
43045: FOR_TO
43046: IFFALSE 43160
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43048: LD_ADDR_VAR 0 11
43052: PUSH
43053: LD_VAR 0 13
43057: PPUSH
43058: CALL_OW 250
43062: PPUSH
43063: LD_VAR 0 10
43067: PPUSH
43068: LD_INT 2
43070: PPUSH
43071: CALL_OW 272
43075: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43076: LD_ADDR_VAR 0 12
43080: PUSH
43081: LD_VAR 0 13
43085: PPUSH
43086: CALL_OW 251
43090: PPUSH
43091: LD_VAR 0 10
43095: PPUSH
43096: LD_INT 2
43098: PPUSH
43099: CALL_OW 273
43103: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43104: LD_VAR 0 11
43108: PPUSH
43109: LD_VAR 0 12
43113: PPUSH
43114: CALL_OW 488
43118: PUSH
43119: LD_VAR 0 11
43123: PPUSH
43124: LD_VAR 0 12
43128: PPUSH
43129: CALL_OW 428
43133: NOT
43134: AND
43135: IFFALSE 43158
// begin ComMoveXY ( tmp , _x , _y ) ;
43137: LD_VAR 0 13
43141: PPUSH
43142: LD_VAR 0 11
43146: PPUSH
43147: LD_VAR 0 12
43151: PPUSH
43152: CALL_OW 111
// break ;
43156: GO 43160
// end ; end ;
43158: GO 43045
43160: POP
43161: POP
// end ; end ;
43162: GO 42487
43164: POP
43165: POP
// end ;
43166: LD_VAR 0 8
43170: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43171: LD_INT 0
43173: PPUSH
// result := true ;
43174: LD_ADDR_VAR 0 3
43178: PUSH
43179: LD_INT 1
43181: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43182: LD_VAR 0 2
43186: PUSH
43187: LD_INT 24
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43201
43193: LD_INT 33
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43201
43199: GO 43226
43201: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_INT 32
43209: PPUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 321
43219: PUSH
43220: LD_INT 2
43222: EQUAL
43223: ST_TO_ADDR
43224: GO 43546
43226: LD_INT 20
43228: DOUBLE
43229: EQUAL
43230: IFTRUE 43234
43232: GO 43259
43234: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_INT 6
43242: PPUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 321
43252: PUSH
43253: LD_INT 2
43255: EQUAL
43256: ST_TO_ADDR
43257: GO 43546
43259: LD_INT 22
43261: DOUBLE
43262: EQUAL
43263: IFTRUE 43273
43265: LD_INT 36
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43273
43271: GO 43298
43273: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_INT 15
43281: PPUSH
43282: LD_VAR 0 1
43286: PPUSH
43287: CALL_OW 321
43291: PUSH
43292: LD_INT 2
43294: EQUAL
43295: ST_TO_ADDR
43296: GO 43546
43298: LD_INT 30
43300: DOUBLE
43301: EQUAL
43302: IFTRUE 43306
43304: GO 43331
43306: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43307: LD_ADDR_VAR 0 3
43311: PUSH
43312: LD_INT 20
43314: PPUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 321
43324: PUSH
43325: LD_INT 2
43327: EQUAL
43328: ST_TO_ADDR
43329: GO 43546
43331: LD_INT 28
43333: DOUBLE
43334: EQUAL
43335: IFTRUE 43345
43337: LD_INT 21
43339: DOUBLE
43340: EQUAL
43341: IFTRUE 43345
43343: GO 43370
43345: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 21
43353: PPUSH
43354: LD_VAR 0 1
43358: PPUSH
43359: CALL_OW 321
43363: PUSH
43364: LD_INT 2
43366: EQUAL
43367: ST_TO_ADDR
43368: GO 43546
43370: LD_INT 16
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43405
43378: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_EXP 120
43388: PPUSH
43389: LD_VAR 0 1
43393: PPUSH
43394: CALL_OW 321
43398: PUSH
43399: LD_INT 2
43401: EQUAL
43402: ST_TO_ADDR
43403: GO 43546
43405: LD_INT 19
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43419
43411: LD_INT 23
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43419
43417: GO 43446
43419: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43420: LD_ADDR_VAR 0 3
43424: PUSH
43425: LD_EXP 119
43429: PPUSH
43430: LD_VAR 0 1
43434: PPUSH
43435: CALL_OW 321
43439: PUSH
43440: LD_INT 2
43442: EQUAL
43443: ST_TO_ADDR
43444: GO 43546
43446: LD_INT 17
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43479
43454: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_INT 39
43462: PPUSH
43463: LD_VAR 0 1
43467: PPUSH
43468: CALL_OW 321
43472: PUSH
43473: LD_INT 2
43475: EQUAL
43476: ST_TO_ADDR
43477: GO 43546
43479: LD_INT 18
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43512
43487: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 40
43495: PPUSH
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 321
43505: PUSH
43506: LD_INT 2
43508: EQUAL
43509: ST_TO_ADDR
43510: GO 43546
43512: LD_INT 27
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43545
43520: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 35
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 321
43538: PUSH
43539: LD_INT 2
43541: EQUAL
43542: ST_TO_ADDR
43543: GO 43546
43545: POP
// end ;
43546: LD_VAR 0 3
43550: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43551: LD_INT 0
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
// result := false ;
43564: LD_ADDR_VAR 0 6
43568: PUSH
43569: LD_INT 0
43571: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43572: LD_VAR 0 1
43576: NOT
43577: PUSH
43578: LD_VAR 0 1
43582: PPUSH
43583: CALL_OW 266
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: IN
43598: NOT
43599: OR
43600: PUSH
43601: LD_VAR 0 2
43605: NOT
43606: OR
43607: PUSH
43608: LD_VAR 0 5
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: LD_INT 4
43627: PUSH
43628: LD_INT 5
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: IN
43639: NOT
43640: OR
43641: PUSH
43642: LD_VAR 0 3
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: CALL_OW 488
43656: NOT
43657: OR
43658: IFFALSE 43662
// exit ;
43660: GO 44398
// side := GetSide ( depot ) ;
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_VAR 0 1
43671: PPUSH
43672: CALL_OW 255
43676: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43677: LD_VAR 0 9
43681: PPUSH
43682: LD_VAR 0 2
43686: PPUSH
43687: CALL 43171 0 2
43691: NOT
43692: IFFALSE 43696
// exit ;
43694: GO 44398
// pom := GetBase ( depot ) ;
43696: LD_ADDR_VAR 0 10
43700: PUSH
43701: LD_VAR 0 1
43705: PPUSH
43706: CALL_OW 274
43710: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43711: LD_ADDR_VAR 0 11
43715: PUSH
43716: LD_VAR 0 2
43720: PPUSH
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL_OW 248
43730: PPUSH
43731: CALL_OW 450
43735: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43736: LD_VAR 0 10
43740: PPUSH
43741: LD_INT 1
43743: PPUSH
43744: CALL_OW 275
43748: PUSH
43749: LD_VAR 0 11
43753: PUSH
43754: LD_INT 1
43756: ARRAY
43757: GREATEREQUAL
43758: PUSH
43759: LD_VAR 0 10
43763: PPUSH
43764: LD_INT 2
43766: PPUSH
43767: CALL_OW 275
43771: PUSH
43772: LD_VAR 0 11
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: GREATEREQUAL
43781: AND
43782: PUSH
43783: LD_VAR 0 10
43787: PPUSH
43788: LD_INT 3
43790: PPUSH
43791: CALL_OW 275
43795: PUSH
43796: LD_VAR 0 11
43800: PUSH
43801: LD_INT 3
43803: ARRAY
43804: GREATEREQUAL
43805: AND
43806: NOT
43807: IFFALSE 43811
// exit ;
43809: GO 44398
// if GetBType ( depot ) = b_depot then
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 266
43820: PUSH
43821: LD_INT 0
43823: EQUAL
43824: IFFALSE 43836
// dist := 28 else
43826: LD_ADDR_VAR 0 14
43830: PUSH
43831: LD_INT 28
43833: ST_TO_ADDR
43834: GO 43844
// dist := 36 ;
43836: LD_ADDR_VAR 0 14
43840: PUSH
43841: LD_INT 36
43843: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43844: LD_VAR 0 1
43848: PPUSH
43849: LD_VAR 0 3
43853: PPUSH
43854: LD_VAR 0 4
43858: PPUSH
43859: CALL_OW 297
43863: PUSH
43864: LD_VAR 0 14
43868: GREATER
43869: IFFALSE 43873
// exit ;
43871: GO 44398
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43873: LD_ADDR_VAR 0 12
43877: PUSH
43878: LD_VAR 0 2
43882: PPUSH
43883: LD_VAR 0 3
43887: PPUSH
43888: LD_VAR 0 4
43892: PPUSH
43893: LD_VAR 0 5
43897: PPUSH
43898: LD_VAR 0 1
43902: PPUSH
43903: CALL_OW 248
43907: PPUSH
43908: LD_INT 0
43910: PPUSH
43911: CALL 44403 0 6
43915: ST_TO_ADDR
// if not hexes then
43916: LD_VAR 0 12
43920: NOT
43921: IFFALSE 43925
// exit ;
43923: GO 44398
// hex := GetHexInfo ( x , y ) ;
43925: LD_ADDR_VAR 0 15
43929: PUSH
43930: LD_VAR 0 3
43934: PPUSH
43935: LD_VAR 0 4
43939: PPUSH
43940: CALL_OW 546
43944: ST_TO_ADDR
// if hex [ 1 ] then
43945: LD_VAR 0 15
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: IFFALSE 43957
// exit ;
43955: GO 44398
// height := hex [ 2 ] ;
43957: LD_ADDR_VAR 0 13
43961: PUSH
43962: LD_VAR 0 15
43966: PUSH
43967: LD_INT 2
43969: ARRAY
43970: ST_TO_ADDR
// for i = 1 to hexes do
43971: LD_ADDR_VAR 0 7
43975: PUSH
43976: DOUBLE
43977: LD_INT 1
43979: DEC
43980: ST_TO_ADDR
43981: LD_VAR 0 12
43985: PUSH
43986: FOR_TO
43987: IFFALSE 44317
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43989: LD_VAR 0 12
43993: PUSH
43994: LD_VAR 0 7
43998: ARRAY
43999: PUSH
44000: LD_INT 1
44002: ARRAY
44003: PPUSH
44004: LD_VAR 0 12
44008: PUSH
44009: LD_VAR 0 7
44013: ARRAY
44014: PUSH
44015: LD_INT 2
44017: ARRAY
44018: PPUSH
44019: CALL_OW 488
44023: NOT
44024: PUSH
44025: LD_VAR 0 12
44029: PUSH
44030: LD_VAR 0 7
44034: ARRAY
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: PPUSH
44040: LD_VAR 0 12
44044: PUSH
44045: LD_VAR 0 7
44049: ARRAY
44050: PUSH
44051: LD_INT 2
44053: ARRAY
44054: PPUSH
44055: CALL_OW 428
44059: PUSH
44060: LD_INT 0
44062: GREATER
44063: OR
44064: PUSH
44065: LD_VAR 0 12
44069: PUSH
44070: LD_VAR 0 7
44074: ARRAY
44075: PUSH
44076: LD_INT 1
44078: ARRAY
44079: PPUSH
44080: LD_VAR 0 12
44084: PUSH
44085: LD_VAR 0 7
44089: ARRAY
44090: PUSH
44091: LD_INT 2
44093: ARRAY
44094: PPUSH
44095: CALL_OW 351
44099: OR
44100: IFFALSE 44106
// exit ;
44102: POP
44103: POP
44104: GO 44398
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44106: LD_ADDR_VAR 0 8
44110: PUSH
44111: LD_VAR 0 12
44115: PUSH
44116: LD_VAR 0 7
44120: ARRAY
44121: PUSH
44122: LD_INT 1
44124: ARRAY
44125: PPUSH
44126: LD_VAR 0 12
44130: PUSH
44131: LD_VAR 0 7
44135: ARRAY
44136: PUSH
44137: LD_INT 2
44139: ARRAY
44140: PPUSH
44141: CALL_OW 546
44145: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44146: LD_VAR 0 8
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: PUSH
44155: LD_VAR 0 8
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: PUSH
44164: LD_VAR 0 13
44168: PUSH
44169: LD_INT 2
44171: PLUS
44172: GREATER
44173: OR
44174: PUSH
44175: LD_VAR 0 8
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: PUSH
44184: LD_VAR 0 13
44188: PUSH
44189: LD_INT 2
44191: MINUS
44192: LESS
44193: OR
44194: PUSH
44195: LD_VAR 0 8
44199: PUSH
44200: LD_INT 3
44202: ARRAY
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 8
44209: PUSH
44210: LD_INT 9
44212: PUSH
44213: LD_INT 10
44215: PUSH
44216: LD_INT 11
44218: PUSH
44219: LD_INT 12
44221: PUSH
44222: LD_INT 13
44224: PUSH
44225: LD_INT 16
44227: PUSH
44228: LD_INT 17
44230: PUSH
44231: LD_INT 18
44233: PUSH
44234: LD_INT 19
44236: PUSH
44237: LD_INT 20
44239: PUSH
44240: LD_INT 21
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: IN
44258: NOT
44259: OR
44260: PUSH
44261: LD_VAR 0 8
44265: PUSH
44266: LD_INT 5
44268: ARRAY
44269: NOT
44270: OR
44271: PUSH
44272: LD_VAR 0 8
44276: PUSH
44277: LD_INT 6
44279: ARRAY
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 7
44289: PUSH
44290: LD_INT 9
44292: PUSH
44293: LD_INT 10
44295: PUSH
44296: LD_INT 11
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: IN
44307: NOT
44308: OR
44309: IFFALSE 44315
// exit ;
44311: POP
44312: POP
44313: GO 44398
// end ;
44315: GO 43986
44317: POP
44318: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44319: LD_VAR 0 9
44323: PPUSH
44324: LD_VAR 0 3
44328: PPUSH
44329: LD_VAR 0 4
44333: PPUSH
44334: LD_INT 20
44336: PPUSH
44337: CALL 36344 0 4
44341: PUSH
44342: LD_INT 4
44344: ARRAY
44345: IFFALSE 44349
// exit ;
44347: GO 44398
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44349: LD_VAR 0 2
44353: PUSH
44354: LD_INT 29
44356: PUSH
44357: LD_INT 30
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: IN
44364: PUSH
44365: LD_VAR 0 3
44369: PPUSH
44370: LD_VAR 0 4
44374: PPUSH
44375: LD_VAR 0 9
44379: PPUSH
44380: CALL_OW 440
44384: NOT
44385: AND
44386: IFFALSE 44390
// exit ;
44388: GO 44398
// result := true ;
44390: LD_ADDR_VAR 0 6
44394: PUSH
44395: LD_INT 1
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 6
44402: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44403: LD_INT 0
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
44459: PPUSH
44460: PPUSH
44461: PPUSH
44462: PPUSH
// result = [ ] ;
44463: LD_ADDR_VAR 0 7
44467: PUSH
44468: EMPTY
44469: ST_TO_ADDR
// temp_list = [ ] ;
44470: LD_ADDR_VAR 0 9
44474: PUSH
44475: EMPTY
44476: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44477: LD_VAR 0 4
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: LD_INT 4
44496: PUSH
44497: LD_INT 5
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: IN
44508: NOT
44509: PUSH
44510: LD_VAR 0 1
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: IN
44525: PUSH
44526: LD_VAR 0 5
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: IN
44545: NOT
44546: AND
44547: OR
44548: IFFALSE 44552
// exit ;
44550: GO 62943
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44552: LD_VAR 0 1
44556: PUSH
44557: LD_INT 6
44559: PUSH
44560: LD_INT 7
44562: PUSH
44563: LD_INT 8
44565: PUSH
44566: LD_INT 13
44568: PUSH
44569: LD_INT 12
44571: PUSH
44572: LD_INT 15
44574: PUSH
44575: LD_INT 11
44577: PUSH
44578: LD_INT 14
44580: PUSH
44581: LD_INT 10
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: IN
44595: IFFALSE 44605
// btype = b_lab ;
44597: LD_ADDR_VAR 0 1
44601: PUSH
44602: LD_INT 6
44604: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44605: LD_VAR 0 6
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: IN
44624: NOT
44625: PUSH
44626: LD_VAR 0 1
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 3
44642: PUSH
44643: LD_INT 6
44645: PUSH
44646: LD_INT 36
44648: PUSH
44649: LD_INT 4
44651: PUSH
44652: LD_INT 5
44654: PUSH
44655: LD_INT 31
44657: PUSH
44658: LD_INT 32
44660: PUSH
44661: LD_INT 33
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: IN
44677: NOT
44678: PUSH
44679: LD_VAR 0 6
44683: PUSH
44684: LD_INT 1
44686: EQUAL
44687: AND
44688: OR
44689: PUSH
44690: LD_VAR 0 1
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: IN
44705: NOT
44706: PUSH
44707: LD_VAR 0 6
44711: PUSH
44712: LD_INT 2
44714: EQUAL
44715: AND
44716: OR
44717: IFFALSE 44727
// mode = 0 ;
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_INT 0
44726: ST_TO_ADDR
// case mode of 0 :
44727: LD_VAR 0 6
44731: PUSH
44732: LD_INT 0
44734: DOUBLE
44735: EQUAL
44736: IFTRUE 44740
44738: GO 56193
44740: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44741: LD_ADDR_VAR 0 11
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44934: LD_ADDR_VAR 0 12
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45130: LD_ADDR_VAR 0 13
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 3
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45329: LD_ADDR_VAR 0 14
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45525: LD_ADDR_VAR 0 15
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45718: LD_ADDR_VAR 0 16
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45911: LD_ADDR_VAR 0 17
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46141: LD_ADDR_VAR 0 18
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46371: LD_ADDR_VAR 0 19
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46601: LD_ADDR_VAR 0 20
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46831: LD_ADDR_VAR 0 21
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47061: LD_ADDR_VAR 0 22
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47291: LD_ADDR_VAR 0 23
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47571: LD_ADDR_VAR 0 24
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47847: LD_ADDR_VAR 0 25
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 3
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48121: LD_ADDR_VAR 0 26
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48397: LD_ADDR_VAR 0 27
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48677: LD_ADDR_VAR 0 28
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48959: LD_ADDR_VAR 0 29
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49238: LD_ADDR_VAR 0 30
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49516: LD_ADDR_VAR 0 31
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49794: LD_ADDR_VAR 0 32
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50072: LD_ADDR_VAR 0 33
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 3
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50351: LD_ADDR_VAR 0 34
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50631: LD_ADDR_VAR 0 35
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50743: LD_ADDR_VAR 0 36
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50855: LD_ADDR_VAR 0 37
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50967: LD_ADDR_VAR 0 38
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51079: LD_ADDR_VAR 0 39
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51191: LD_ADDR_VAR 0 40
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51303: LD_ADDR_VAR 0 41
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51653: LD_ADDR_VAR 0 42
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52003: LD_ADDR_VAR 0 43
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52351: LD_ADDR_VAR 0 44
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 3
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52701: LD_ADDR_VAR 0 45
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 3
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53051: LD_ADDR_VAR 0 46
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53399: LD_ADDR_VAR 0 47
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53550: LD_ADDR_VAR 0 48
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53697: LD_ADDR_VAR 0 49
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53841: LD_ADDR_VAR 0 50
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53985: LD_ADDR_VAR 0 51
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54132: LD_ADDR_VAR 0 52
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54283: LD_ADDR_VAR 0 53
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54513: LD_ADDR_VAR 0 54
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54743: LD_ADDR_VAR 0 55
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54973: LD_ADDR_VAR 0 56
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55203: LD_ADDR_VAR 0 57
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55433: LD_ADDR_VAR 0 58
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55663: LD_ADDR_VAR 0 59
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55751: LD_ADDR_VAR 0 60
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55839: LD_ADDR_VAR 0 61
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55927: LD_ADDR_VAR 0 62
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56015: LD_ADDR_VAR 0 63
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56103: LD_ADDR_VAR 0 64
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// end ; 1 :
56191: GO 62088
56193: LD_INT 1
56195: DOUBLE
56196: EQUAL
56197: IFTRUE 56201
56199: GO 58824
56201: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56202: LD_ADDR_VAR 0 11
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56246: LD_ADDR_VAR 0 12
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56287: LD_ADDR_VAR 0 13
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56327: LD_ADDR_VAR 0 14
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56368: LD_ADDR_VAR 0 15
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56412: LD_ADDR_VAR 0 16
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56458: LD_ADDR_VAR 0 17
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56502: LD_ADDR_VAR 0 18
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56543: LD_ADDR_VAR 0 19
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56583: LD_ADDR_VAR 0 20
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56624: LD_ADDR_VAR 0 21
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56668: LD_ADDR_VAR 0 22
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56714: LD_ADDR_VAR 0 23
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56758: LD_ADDR_VAR 0 24
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56799: LD_ADDR_VAR 0 25
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 4
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56839: LD_ADDR_VAR 0 26
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56880: LD_ADDR_VAR 0 27
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56924: LD_ADDR_VAR 0 28
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: LD_INT 4
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56970: LD_ADDR_VAR 0 29
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 4
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 5
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 4
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 6
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 6
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 5
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57125: LD_ADDR_VAR 0 30
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 4
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 6
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 6
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57268: LD_ADDR_VAR 0 31
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: LD_INT 4
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: LD_INT 4
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 5
57345: PUSH
57346: LD_INT 5
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: LD_INT 5
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 6
57365: PUSH
57366: LD_INT 5
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 6
57375: PUSH
57376: LD_INT 6
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: LD_INT 6
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57407: LD_ADDR_VAR 0 32
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 4
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 5
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 5
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 4
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 6
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 6
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 5
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57550: LD_ADDR_VAR 0 33
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 4
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 4
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 5
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 6
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 6
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57705: LD_ADDR_VAR 0 34
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 4
57772: NEG
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: NEG
57785: PUSH
57786: LD_INT 5
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 5
57796: NEG
57797: PUSH
57798: LD_INT 4
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 5
57808: NEG
57809: PUSH
57810: LD_INT 5
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 5
57820: NEG
57821: PUSH
57822: LD_INT 6
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 6
57832: NEG
57833: PUSH
57834: LD_INT 5
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 6
57844: NEG
57845: PUSH
57846: LD_INT 6
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57868: LD_ADDR_VAR 0 41
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57912: LD_ADDR_VAR 0 42
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57953: LD_ADDR_VAR 0 43
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57993: LD_ADDR_VAR 0 44
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58034: LD_ADDR_VAR 0 45
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58078: LD_ADDR_VAR 0 46
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58124: LD_ADDR_VAR 0 47
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58157: LD_ADDR_VAR 0 48
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58188: LD_ADDR_VAR 0 49
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58217: LD_ADDR_VAR 0 50
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58246: LD_ADDR_VAR 0 51
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58277: LD_ADDR_VAR 0 52
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: NEG
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58310: LD_ADDR_VAR 0 53
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58354: LD_ADDR_VAR 0 54
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58395: LD_ADDR_VAR 0 55
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58435: LD_ADDR_VAR 0 56
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58476: LD_ADDR_VAR 0 57
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58520: LD_ADDR_VAR 0 58
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: NEG
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58566: LD_ADDR_VAR 0 59
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58610: LD_ADDR_VAR 0 60
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58651: LD_ADDR_VAR 0 61
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58691: LD_ADDR_VAR 0 62
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58732: LD_ADDR_VAR 0 63
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58776: LD_ADDR_VAR 0 64
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: ST_TO_ADDR
// end ; 2 :
58822: GO 62088
58824: LD_INT 2
58826: DOUBLE
58827: EQUAL
58828: IFTRUE 58832
58830: GO 62087
58832: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58833: LD_ADDR_VAR 0 29
58837: PUSH
58838: LD_INT 4
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 5
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: LD_INT 4
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: LD_INT 4
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 5
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 4
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 5
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 3
59161: NEG
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 4
59195: NEG
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: NEG
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 4
59230: NEG
59231: PUSH
59232: LD_INT 5
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: LD_INT 4
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 5
59278: NEG
59279: PUSH
59280: LD_INT 4
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 5
59290: NEG
59291: PUSH
59292: LD_INT 5
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: LD_INT 5
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 5
59314: NEG
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59371: LD_ADDR_VAR 0 30
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: LD_INT 5
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: LD_INT 5
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 4
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 4
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 4
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 4
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 4
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 5
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 5
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: NEG
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 4
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 4
59723: NEG
59724: PUSH
59725: LD_INT 3
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 4
59735: NEG
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 4
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 4
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 5
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 4
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 5
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: LD_INT 3
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 5
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59918: LD_ADDR_VAR 0 31
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 5
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 4
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 4
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 5
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: LD_INT 4
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: LD_INT 3
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 4
60168: NEG
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 5
60180: NEG
60181: PUSH
60182: LD_INT 4
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 5
60192: NEG
60193: PUSH
60194: LD_INT 5
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: LD_INT 5
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 5
60216: NEG
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 5
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 5
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60468: LD_ADDR_VAR 0 32
60472: PUSH
60473: LD_INT 4
60475: NEG
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 5
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 5
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: LD_INT 4
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: NEG
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: NEG
60650: PUSH
60651: LD_INT 4
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 4
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 4
60673: NEG
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 4
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 5
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 4
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 5
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 5
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 4
60880: PUSH
60881: LD_INT 4
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 5
60900: PUSH
60901: LD_INT 4
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 5
60910: PUSH
60911: LD_INT 5
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 4
60920: PUSH
60921: LD_INT 5
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 5
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61015: LD_ADDR_VAR 0 33
61019: PUSH
61020: LD_INT 4
61022: NEG
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: LD_INT 5
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: LD_INT 4
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 4
61070: NEG
61071: PUSH
61072: LD_INT 3
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 5
61082: NEG
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 5
61094: NEG
61095: PUSH
61096: LD_INT 5
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: LD_INT 5
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 5
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 2
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 4
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 4
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 4
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 4
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 5
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 5
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 5
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: LD_INT 3
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 4
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: LD_INT 4
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: LD_INT 4
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 4
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 5
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 5
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61553: LD_ADDR_VAR 0 34
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 4
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 5
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 3
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 5
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: LD_INT 5
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 4
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 4
61755: PUSH
61756: LD_INT 4
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 5
61775: PUSH
61776: LD_INT 4
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 5
61785: PUSH
61786: LD_INT 5
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: LD_INT 5
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: PUSH
61826: LD_INT 3
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 5
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 4
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 4
61938: NEG
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 4
61949: NEG
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 4
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 5
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 5
62017: NEG
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: ST_TO_ADDR
// end ; end ;
62085: GO 62088
62087: POP
// case btype of b_depot , b_warehouse :
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 0
62095: DOUBLE
62096: EQUAL
62097: IFTRUE 62107
62099: LD_INT 1
62101: DOUBLE
62102: EQUAL
62103: IFTRUE 62107
62105: GO 62308
62107: POP
// case nation of nation_american :
62108: LD_VAR 0 5
62112: PUSH
62113: LD_INT 1
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62121
62119: GO 62177
62121: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62122: LD_ADDR_VAR 0 9
62126: PUSH
62127: LD_VAR 0 11
62131: PUSH
62132: LD_VAR 0 12
62136: PUSH
62137: LD_VAR 0 13
62141: PUSH
62142: LD_VAR 0 14
62146: PUSH
62147: LD_VAR 0 15
62151: PUSH
62152: LD_VAR 0 16
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_VAR 0 4
62169: PUSH
62170: LD_INT 1
62172: PLUS
62173: ARRAY
62174: ST_TO_ADDR
62175: GO 62306
62177: LD_INT 2
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62185
62183: GO 62241
62185: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62186: LD_ADDR_VAR 0 9
62190: PUSH
62191: LD_VAR 0 17
62195: PUSH
62196: LD_VAR 0 18
62200: PUSH
62201: LD_VAR 0 19
62205: PUSH
62206: LD_VAR 0 20
62210: PUSH
62211: LD_VAR 0 21
62215: PUSH
62216: LD_VAR 0 22
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: PUSH
62229: LD_VAR 0 4
62233: PUSH
62234: LD_INT 1
62236: PLUS
62237: ARRAY
62238: ST_TO_ADDR
62239: GO 62306
62241: LD_INT 3
62243: DOUBLE
62244: EQUAL
62245: IFTRUE 62249
62247: GO 62305
62249: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62250: LD_ADDR_VAR 0 9
62254: PUSH
62255: LD_VAR 0 23
62259: PUSH
62260: LD_VAR 0 24
62264: PUSH
62265: LD_VAR 0 25
62269: PUSH
62270: LD_VAR 0 26
62274: PUSH
62275: LD_VAR 0 27
62279: PUSH
62280: LD_VAR 0 28
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: PUSH
62293: LD_VAR 0 4
62297: PUSH
62298: LD_INT 1
62300: PLUS
62301: ARRAY
62302: ST_TO_ADDR
62303: GO 62306
62305: POP
62306: GO 62861
62308: LD_INT 2
62310: DOUBLE
62311: EQUAL
62312: IFTRUE 62322
62314: LD_INT 3
62316: DOUBLE
62317: EQUAL
62318: IFTRUE 62322
62320: GO 62378
62322: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62323: LD_ADDR_VAR 0 9
62327: PUSH
62328: LD_VAR 0 29
62332: PUSH
62333: LD_VAR 0 30
62337: PUSH
62338: LD_VAR 0 31
62342: PUSH
62343: LD_VAR 0 32
62347: PUSH
62348: LD_VAR 0 33
62352: PUSH
62353: LD_VAR 0 34
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: PUSH
62366: LD_VAR 0 4
62370: PUSH
62371: LD_INT 1
62373: PLUS
62374: ARRAY
62375: ST_TO_ADDR
62376: GO 62861
62378: LD_INT 16
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62440
62384: LD_INT 17
62386: DOUBLE
62387: EQUAL
62388: IFTRUE 62440
62390: LD_INT 18
62392: DOUBLE
62393: EQUAL
62394: IFTRUE 62440
62396: LD_INT 19
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62440
62402: LD_INT 22
62404: DOUBLE
62405: EQUAL
62406: IFTRUE 62440
62408: LD_INT 20
62410: DOUBLE
62411: EQUAL
62412: IFTRUE 62440
62414: LD_INT 21
62416: DOUBLE
62417: EQUAL
62418: IFTRUE 62440
62420: LD_INT 23
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62440
62426: LD_INT 24
62428: DOUBLE
62429: EQUAL
62430: IFTRUE 62440
62432: LD_INT 25
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 62496
62440: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62441: LD_ADDR_VAR 0 9
62445: PUSH
62446: LD_VAR 0 35
62450: PUSH
62451: LD_VAR 0 36
62455: PUSH
62456: LD_VAR 0 37
62460: PUSH
62461: LD_VAR 0 38
62465: PUSH
62466: LD_VAR 0 39
62470: PUSH
62471: LD_VAR 0 40
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: PUSH
62484: LD_VAR 0 4
62488: PUSH
62489: LD_INT 1
62491: PLUS
62492: ARRAY
62493: ST_TO_ADDR
62494: GO 62861
62496: LD_INT 6
62498: DOUBLE
62499: EQUAL
62500: IFTRUE 62552
62502: LD_INT 7
62504: DOUBLE
62505: EQUAL
62506: IFTRUE 62552
62508: LD_INT 8
62510: DOUBLE
62511: EQUAL
62512: IFTRUE 62552
62514: LD_INT 13
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62552
62520: LD_INT 12
62522: DOUBLE
62523: EQUAL
62524: IFTRUE 62552
62526: LD_INT 15
62528: DOUBLE
62529: EQUAL
62530: IFTRUE 62552
62532: LD_INT 11
62534: DOUBLE
62535: EQUAL
62536: IFTRUE 62552
62538: LD_INT 14
62540: DOUBLE
62541: EQUAL
62542: IFTRUE 62552
62544: LD_INT 10
62546: DOUBLE
62547: EQUAL
62548: IFTRUE 62552
62550: GO 62608
62552: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62553: LD_ADDR_VAR 0 9
62557: PUSH
62558: LD_VAR 0 41
62562: PUSH
62563: LD_VAR 0 42
62567: PUSH
62568: LD_VAR 0 43
62572: PUSH
62573: LD_VAR 0 44
62577: PUSH
62578: LD_VAR 0 45
62582: PUSH
62583: LD_VAR 0 46
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: LD_VAR 0 4
62600: PUSH
62601: LD_INT 1
62603: PLUS
62604: ARRAY
62605: ST_TO_ADDR
62606: GO 62861
62608: LD_INT 36
62610: DOUBLE
62611: EQUAL
62612: IFTRUE 62616
62614: GO 62672
62616: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62617: LD_ADDR_VAR 0 9
62621: PUSH
62622: LD_VAR 0 47
62626: PUSH
62627: LD_VAR 0 48
62631: PUSH
62632: LD_VAR 0 49
62636: PUSH
62637: LD_VAR 0 50
62641: PUSH
62642: LD_VAR 0 51
62646: PUSH
62647: LD_VAR 0 52
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: PUSH
62660: LD_VAR 0 4
62664: PUSH
62665: LD_INT 1
62667: PLUS
62668: ARRAY
62669: ST_TO_ADDR
62670: GO 62861
62672: LD_INT 4
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62698
62678: LD_INT 5
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62698
62684: LD_INT 34
62686: DOUBLE
62687: EQUAL
62688: IFTRUE 62698
62690: LD_INT 37
62692: DOUBLE
62693: EQUAL
62694: IFTRUE 62698
62696: GO 62754
62698: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62699: LD_ADDR_VAR 0 9
62703: PUSH
62704: LD_VAR 0 53
62708: PUSH
62709: LD_VAR 0 54
62713: PUSH
62714: LD_VAR 0 55
62718: PUSH
62719: LD_VAR 0 56
62723: PUSH
62724: LD_VAR 0 57
62728: PUSH
62729: LD_VAR 0 58
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 4
62746: PUSH
62747: LD_INT 1
62749: PLUS
62750: ARRAY
62751: ST_TO_ADDR
62752: GO 62861
62754: LD_INT 31
62756: DOUBLE
62757: EQUAL
62758: IFTRUE 62804
62760: LD_INT 32
62762: DOUBLE
62763: EQUAL
62764: IFTRUE 62804
62766: LD_INT 33
62768: DOUBLE
62769: EQUAL
62770: IFTRUE 62804
62772: LD_INT 27
62774: DOUBLE
62775: EQUAL
62776: IFTRUE 62804
62778: LD_INT 26
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62804
62784: LD_INT 28
62786: DOUBLE
62787: EQUAL
62788: IFTRUE 62804
62790: LD_INT 29
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62804
62796: LD_INT 30
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62804
62802: GO 62860
62804: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62805: LD_ADDR_VAR 0 9
62809: PUSH
62810: LD_VAR 0 59
62814: PUSH
62815: LD_VAR 0 60
62819: PUSH
62820: LD_VAR 0 61
62824: PUSH
62825: LD_VAR 0 62
62829: PUSH
62830: LD_VAR 0 63
62834: PUSH
62835: LD_VAR 0 64
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: PUSH
62848: LD_VAR 0 4
62852: PUSH
62853: LD_INT 1
62855: PLUS
62856: ARRAY
62857: ST_TO_ADDR
62858: GO 62861
62860: POP
// temp_list2 = [ ] ;
62861: LD_ADDR_VAR 0 10
62865: PUSH
62866: EMPTY
62867: ST_TO_ADDR
// for i in temp_list do
62868: LD_ADDR_VAR 0 8
62872: PUSH
62873: LD_VAR 0 9
62877: PUSH
62878: FOR_IN
62879: IFFALSE 62931
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62881: LD_ADDR_VAR 0 10
62885: PUSH
62886: LD_VAR 0 10
62890: PUSH
62891: LD_VAR 0 8
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_VAR 0 2
62904: PLUS
62905: PUSH
62906: LD_VAR 0 8
62910: PUSH
62911: LD_INT 2
62913: ARRAY
62914: PUSH
62915: LD_VAR 0 3
62919: PLUS
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: ADD
62928: ST_TO_ADDR
62929: GO 62878
62931: POP
62932: POP
// result = temp_list2 ;
62933: LD_ADDR_VAR 0 7
62937: PUSH
62938: LD_VAR 0 10
62942: ST_TO_ADDR
// end ;
62943: LD_VAR 0 7
62947: RET
// export function EnemyInRange ( unit , dist ) ; begin
62948: LD_INT 0
62950: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: CALL_OW 255
62965: PPUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 250
62975: PPUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: CALL_OW 251
62985: PPUSH
62986: LD_VAR 0 2
62990: PPUSH
62991: CALL 36344 0 4
62995: PUSH
62996: LD_INT 4
62998: ARRAY
62999: ST_TO_ADDR
// end ;
63000: LD_VAR 0 3
63004: RET
// export function PlayerSeeMe ( unit ) ; begin
63005: LD_INT 0
63007: PPUSH
// result := See ( your_side , unit ) ;
63008: LD_ADDR_VAR 0 2
63012: PUSH
63013: LD_OWVAR 2
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: CALL_OW 292
63027: ST_TO_ADDR
// end ;
63028: LD_VAR 0 2
63032: RET
// export function ReverseDir ( unit ) ; begin
63033: LD_INT 0
63035: PPUSH
// if not unit then
63036: LD_VAR 0 1
63040: NOT
63041: IFFALSE 63045
// exit ;
63043: GO 63068
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63045: LD_ADDR_VAR 0 2
63049: PUSH
63050: LD_VAR 0 1
63054: PPUSH
63055: CALL_OW 254
63059: PUSH
63060: LD_INT 3
63062: PLUS
63063: PUSH
63064: LD_INT 6
63066: MOD
63067: ST_TO_ADDR
// end ;
63068: LD_VAR 0 2
63072: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63073: LD_INT 0
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
// if not hexes then
63080: LD_VAR 0 2
63084: NOT
63085: IFFALSE 63089
// exit ;
63087: GO 63237
// dist := 9999 ;
63089: LD_ADDR_VAR 0 5
63093: PUSH
63094: LD_INT 9999
63096: ST_TO_ADDR
// for i = 1 to hexes do
63097: LD_ADDR_VAR 0 4
63101: PUSH
63102: DOUBLE
63103: LD_INT 1
63105: DEC
63106: ST_TO_ADDR
63107: LD_VAR 0 2
63111: PUSH
63112: FOR_TO
63113: IFFALSE 63225
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63115: LD_VAR 0 1
63119: PPUSH
63120: LD_VAR 0 2
63124: PUSH
63125: LD_VAR 0 4
63129: ARRAY
63130: PUSH
63131: LD_INT 1
63133: ARRAY
63134: PPUSH
63135: LD_VAR 0 2
63139: PUSH
63140: LD_VAR 0 4
63144: ARRAY
63145: PUSH
63146: LD_INT 2
63148: ARRAY
63149: PPUSH
63150: CALL_OW 297
63154: PUSH
63155: LD_VAR 0 5
63159: LESS
63160: IFFALSE 63223
// begin hex := hexes [ i ] ;
63162: LD_ADDR_VAR 0 7
63166: PUSH
63167: LD_VAR 0 2
63171: PUSH
63172: LD_VAR 0 4
63176: ARRAY
63177: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63178: LD_ADDR_VAR 0 5
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_VAR 0 2
63192: PUSH
63193: LD_VAR 0 4
63197: ARRAY
63198: PUSH
63199: LD_INT 1
63201: ARRAY
63202: PPUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_VAR 0 4
63212: ARRAY
63213: PUSH
63214: LD_INT 2
63216: ARRAY
63217: PPUSH
63218: CALL_OW 297
63222: ST_TO_ADDR
// end ; end ;
63223: GO 63112
63225: POP
63226: POP
// result := hex ;
63227: LD_ADDR_VAR 0 3
63231: PUSH
63232: LD_VAR 0 7
63236: ST_TO_ADDR
// end ;
63237: LD_VAR 0 3
63241: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63242: LD_INT 0
63244: PPUSH
63245: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63246: LD_VAR 0 1
63250: NOT
63251: PUSH
63252: LD_VAR 0 1
63256: PUSH
63257: LD_INT 21
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 23
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PPUSH
63281: CALL_OW 69
63285: IN
63286: NOT
63287: OR
63288: IFFALSE 63292
// exit ;
63290: GO 63339
// for i = 1 to 3 do
63292: LD_ADDR_VAR 0 3
63296: PUSH
63297: DOUBLE
63298: LD_INT 1
63300: DEC
63301: ST_TO_ADDR
63302: LD_INT 3
63304: PUSH
63305: FOR_TO
63306: IFFALSE 63337
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 250
63317: PPUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 251
63327: PPUSH
63328: LD_INT 1
63330: PPUSH
63331: CALL_OW 453
63335: GO 63305
63337: POP
63338: POP
// end ;
63339: LD_VAR 0 2
63343: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63344: LD_INT 0
63346: PPUSH
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63352: LD_VAR 0 1
63356: NOT
63357: PUSH
63358: LD_VAR 0 2
63362: NOT
63363: OR
63364: PUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 314
63374: OR
63375: IFFALSE 63379
// exit ;
63377: GO 63820
// x := GetX ( enemy_unit ) ;
63379: LD_ADDR_VAR 0 7
63383: PUSH
63384: LD_VAR 0 2
63388: PPUSH
63389: CALL_OW 250
63393: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63394: LD_ADDR_VAR 0 8
63398: PUSH
63399: LD_VAR 0 2
63403: PPUSH
63404: CALL_OW 251
63408: ST_TO_ADDR
// if not x or not y then
63409: LD_VAR 0 7
63413: NOT
63414: PUSH
63415: LD_VAR 0 8
63419: NOT
63420: OR
63421: IFFALSE 63425
// exit ;
63423: GO 63820
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63425: LD_ADDR_VAR 0 6
63429: PUSH
63430: LD_VAR 0 7
63434: PPUSH
63435: LD_INT 0
63437: PPUSH
63438: LD_INT 4
63440: PPUSH
63441: CALL_OW 272
63445: PUSH
63446: LD_VAR 0 8
63450: PPUSH
63451: LD_INT 0
63453: PPUSH
63454: LD_INT 4
63456: PPUSH
63457: CALL_OW 273
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_VAR 0 7
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: LD_INT 4
63476: PPUSH
63477: CALL_OW 272
63481: PUSH
63482: LD_VAR 0 8
63486: PPUSH
63487: LD_INT 1
63489: PPUSH
63490: LD_INT 4
63492: PPUSH
63493: CALL_OW 273
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_VAR 0 7
63506: PPUSH
63507: LD_INT 2
63509: PPUSH
63510: LD_INT 4
63512: PPUSH
63513: CALL_OW 272
63517: PUSH
63518: LD_VAR 0 8
63522: PPUSH
63523: LD_INT 2
63525: PPUSH
63526: LD_INT 4
63528: PPUSH
63529: CALL_OW 273
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_VAR 0 7
63542: PPUSH
63543: LD_INT 3
63545: PPUSH
63546: LD_INT 4
63548: PPUSH
63549: CALL_OW 272
63553: PUSH
63554: LD_VAR 0 8
63558: PPUSH
63559: LD_INT 3
63561: PPUSH
63562: LD_INT 4
63564: PPUSH
63565: CALL_OW 273
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_VAR 0 7
63578: PPUSH
63579: LD_INT 4
63581: PPUSH
63582: LD_INT 4
63584: PPUSH
63585: CALL_OW 272
63589: PUSH
63590: LD_VAR 0 8
63594: PPUSH
63595: LD_INT 4
63597: PPUSH
63598: LD_INT 4
63600: PPUSH
63601: CALL_OW 273
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_VAR 0 7
63614: PPUSH
63615: LD_INT 5
63617: PPUSH
63618: LD_INT 4
63620: PPUSH
63621: CALL_OW 272
63625: PUSH
63626: LD_VAR 0 8
63630: PPUSH
63631: LD_INT 5
63633: PPUSH
63634: LD_INT 4
63636: PPUSH
63637: CALL_OW 273
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: ST_TO_ADDR
// for i = tmp downto 1 do
63654: LD_ADDR_VAR 0 4
63658: PUSH
63659: DOUBLE
63660: LD_VAR 0 6
63664: INC
63665: ST_TO_ADDR
63666: LD_INT 1
63668: PUSH
63669: FOR_DOWNTO
63670: IFFALSE 63771
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63672: LD_VAR 0 6
63676: PUSH
63677: LD_VAR 0 4
63681: ARRAY
63682: PUSH
63683: LD_INT 1
63685: ARRAY
63686: PPUSH
63687: LD_VAR 0 6
63691: PUSH
63692: LD_VAR 0 4
63696: ARRAY
63697: PUSH
63698: LD_INT 2
63700: ARRAY
63701: PPUSH
63702: CALL_OW 488
63706: NOT
63707: PUSH
63708: LD_VAR 0 6
63712: PUSH
63713: LD_VAR 0 4
63717: ARRAY
63718: PUSH
63719: LD_INT 1
63721: ARRAY
63722: PPUSH
63723: LD_VAR 0 6
63727: PUSH
63728: LD_VAR 0 4
63732: ARRAY
63733: PUSH
63734: LD_INT 2
63736: ARRAY
63737: PPUSH
63738: CALL_OW 428
63742: PUSH
63743: LD_INT 0
63745: NONEQUAL
63746: OR
63747: IFFALSE 63769
// tmp := Delete ( tmp , i ) ;
63749: LD_ADDR_VAR 0 6
63753: PUSH
63754: LD_VAR 0 6
63758: PPUSH
63759: LD_VAR 0 4
63763: PPUSH
63764: CALL_OW 3
63768: ST_TO_ADDR
63769: GO 63669
63771: POP
63772: POP
// j := GetClosestHex ( unit , tmp ) ;
63773: LD_ADDR_VAR 0 5
63777: PUSH
63778: LD_VAR 0 1
63782: PPUSH
63783: LD_VAR 0 6
63787: PPUSH
63788: CALL 63073 0 2
63792: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63793: LD_VAR 0 1
63797: PPUSH
63798: LD_VAR 0 5
63802: PUSH
63803: LD_INT 1
63805: ARRAY
63806: PPUSH
63807: LD_VAR 0 5
63811: PUSH
63812: LD_INT 2
63814: ARRAY
63815: PPUSH
63816: CALL_OW 111
// end ;
63820: LD_VAR 0 3
63824: RET
// export function PrepareApemanSoldier ( ) ; begin
63825: LD_INT 0
63827: PPUSH
// uc_nation := 0 ;
63828: LD_ADDR_OWVAR 21
63832: PUSH
63833: LD_INT 0
63835: ST_TO_ADDR
// hc_sex := sex_male ;
63836: LD_ADDR_OWVAR 27
63840: PUSH
63841: LD_INT 1
63843: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63844: LD_ADDR_OWVAR 28
63848: PUSH
63849: LD_INT 15
63851: ST_TO_ADDR
// hc_gallery :=  ;
63852: LD_ADDR_OWVAR 33
63856: PUSH
63857: LD_STRING 
63859: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63860: LD_ADDR_OWVAR 31
63864: PUSH
63865: LD_INT 0
63867: PPUSH
63868: LD_INT 3
63870: PPUSH
63871: CALL_OW 12
63875: PUSH
63876: LD_INT 0
63878: PPUSH
63879: LD_INT 3
63881: PPUSH
63882: CALL_OW 12
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// end ;
63899: LD_VAR 0 1
63903: RET
// export function PrepareApemanEngineer ( ) ; begin
63904: LD_INT 0
63906: PPUSH
// uc_nation := 0 ;
63907: LD_ADDR_OWVAR 21
63911: PUSH
63912: LD_INT 0
63914: ST_TO_ADDR
// hc_sex := sex_male ;
63915: LD_ADDR_OWVAR 27
63919: PUSH
63920: LD_INT 1
63922: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63923: LD_ADDR_OWVAR 28
63927: PUSH
63928: LD_INT 16
63930: ST_TO_ADDR
// hc_gallery :=  ;
63931: LD_ADDR_OWVAR 33
63935: PUSH
63936: LD_STRING 
63938: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63939: LD_ADDR_OWVAR 31
63943: PUSH
63944: LD_INT 0
63946: PPUSH
63947: LD_INT 3
63949: PPUSH
63950: CALL_OW 12
63954: PUSH
63955: LD_INT 0
63957: PPUSH
63958: LD_INT 3
63960: PPUSH
63961: CALL_OW 12
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: ST_TO_ADDR
// end ;
63978: LD_VAR 0 1
63982: RET
// export function PrepareApeman ( agressivity ) ; begin
63983: LD_INT 0
63985: PPUSH
// uc_side := 0 ;
63986: LD_ADDR_OWVAR 20
63990: PUSH
63991: LD_INT 0
63993: ST_TO_ADDR
// uc_nation := 0 ;
63994: LD_ADDR_OWVAR 21
63998: PUSH
63999: LD_INT 0
64001: ST_TO_ADDR
// hc_sex := sex_male ;
64002: LD_ADDR_OWVAR 27
64006: PUSH
64007: LD_INT 1
64009: ST_TO_ADDR
// hc_class := class_apeman ;
64010: LD_ADDR_OWVAR 28
64014: PUSH
64015: LD_INT 12
64017: ST_TO_ADDR
// hc_gallery :=  ;
64018: LD_ADDR_OWVAR 33
64022: PUSH
64023: LD_STRING 
64025: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64026: LD_ADDR_OWVAR 35
64030: PUSH
64031: LD_VAR 0 1
64035: NEG
64036: PPUSH
64037: LD_VAR 0 1
64041: PPUSH
64042: CALL_OW 12
64046: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64047: LD_ADDR_OWVAR 31
64051: PUSH
64052: LD_INT 0
64054: PPUSH
64055: LD_INT 3
64057: PPUSH
64058: CALL_OW 12
64062: PUSH
64063: LD_INT 0
64065: PPUSH
64066: LD_INT 3
64068: PPUSH
64069: CALL_OW 12
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: ST_TO_ADDR
// end ;
64086: LD_VAR 0 2
64090: RET
// export function PrepareTiger ( agressivity ) ; begin
64091: LD_INT 0
64093: PPUSH
// uc_side := 0 ;
64094: LD_ADDR_OWVAR 20
64098: PUSH
64099: LD_INT 0
64101: ST_TO_ADDR
// uc_nation := 0 ;
64102: LD_ADDR_OWVAR 21
64106: PUSH
64107: LD_INT 0
64109: ST_TO_ADDR
// hc_class := class_tiger ;
64110: LD_ADDR_OWVAR 28
64114: PUSH
64115: LD_INT 14
64117: ST_TO_ADDR
// hc_gallery :=  ;
64118: LD_ADDR_OWVAR 33
64122: PUSH
64123: LD_STRING 
64125: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64126: LD_ADDR_OWVAR 35
64130: PUSH
64131: LD_VAR 0 1
64135: NEG
64136: PPUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: CALL_OW 12
64146: ST_TO_ADDR
// end ;
64147: LD_VAR 0 2
64151: RET
// export function PrepareEnchidna ( ) ; begin
64152: LD_INT 0
64154: PPUSH
// uc_side := 0 ;
64155: LD_ADDR_OWVAR 20
64159: PUSH
64160: LD_INT 0
64162: ST_TO_ADDR
// uc_nation := 0 ;
64163: LD_ADDR_OWVAR 21
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// hc_class := class_baggie ;
64171: LD_ADDR_OWVAR 28
64175: PUSH
64176: LD_INT 13
64178: ST_TO_ADDR
// hc_gallery :=  ;
64179: LD_ADDR_OWVAR 33
64183: PUSH
64184: LD_STRING 
64186: ST_TO_ADDR
// end ;
64187: LD_VAR 0 1
64191: RET
// export function PrepareFrog ( ) ; begin
64192: LD_INT 0
64194: PPUSH
// uc_side := 0 ;
64195: LD_ADDR_OWVAR 20
64199: PUSH
64200: LD_INT 0
64202: ST_TO_ADDR
// uc_nation := 0 ;
64203: LD_ADDR_OWVAR 21
64207: PUSH
64208: LD_INT 0
64210: ST_TO_ADDR
// hc_class := class_frog ;
64211: LD_ADDR_OWVAR 28
64215: PUSH
64216: LD_INT 19
64218: ST_TO_ADDR
// hc_gallery :=  ;
64219: LD_ADDR_OWVAR 33
64223: PUSH
64224: LD_STRING 
64226: ST_TO_ADDR
// end ;
64227: LD_VAR 0 1
64231: RET
// export function PrepareFish ( ) ; begin
64232: LD_INT 0
64234: PPUSH
// uc_side := 0 ;
64235: LD_ADDR_OWVAR 20
64239: PUSH
64240: LD_INT 0
64242: ST_TO_ADDR
// uc_nation := 0 ;
64243: LD_ADDR_OWVAR 21
64247: PUSH
64248: LD_INT 0
64250: ST_TO_ADDR
// hc_class := class_fish ;
64251: LD_ADDR_OWVAR 28
64255: PUSH
64256: LD_INT 20
64258: ST_TO_ADDR
// hc_gallery :=  ;
64259: LD_ADDR_OWVAR 33
64263: PUSH
64264: LD_STRING 
64266: ST_TO_ADDR
// end ;
64267: LD_VAR 0 1
64271: RET
// export function PrepareBird ( ) ; begin
64272: LD_INT 0
64274: PPUSH
// uc_side := 0 ;
64275: LD_ADDR_OWVAR 20
64279: PUSH
64280: LD_INT 0
64282: ST_TO_ADDR
// uc_nation := 0 ;
64283: LD_ADDR_OWVAR 21
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// hc_class := class_phororhacos ;
64291: LD_ADDR_OWVAR 28
64295: PUSH
64296: LD_INT 18
64298: ST_TO_ADDR
// hc_gallery :=  ;
64299: LD_ADDR_OWVAR 33
64303: PUSH
64304: LD_STRING 
64306: ST_TO_ADDR
// end ;
64307: LD_VAR 0 1
64311: RET
// export function PrepareHorse ( ) ; begin
64312: LD_INT 0
64314: PPUSH
// uc_side := 0 ;
64315: LD_ADDR_OWVAR 20
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// uc_nation := 0 ;
64323: LD_ADDR_OWVAR 21
64327: PUSH
64328: LD_INT 0
64330: ST_TO_ADDR
// hc_class := class_horse ;
64331: LD_ADDR_OWVAR 28
64335: PUSH
64336: LD_INT 21
64338: ST_TO_ADDR
// hc_gallery :=  ;
64339: LD_ADDR_OWVAR 33
64343: PUSH
64344: LD_STRING 
64346: ST_TO_ADDR
// end ;
64347: LD_VAR 0 1
64351: RET
// export function PrepareMastodont ( ) ; begin
64352: LD_INT 0
64354: PPUSH
// uc_side := 0 ;
64355: LD_ADDR_OWVAR 20
64359: PUSH
64360: LD_INT 0
64362: ST_TO_ADDR
// uc_nation := 0 ;
64363: LD_ADDR_OWVAR 21
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64371: LD_ADDR_OWVAR 37
64375: PUSH
64376: LD_INT 31
64378: ST_TO_ADDR
// vc_control := control_rider ;
64379: LD_ADDR_OWVAR 38
64383: PUSH
64384: LD_INT 4
64386: ST_TO_ADDR
// end ;
64387: LD_VAR 0 1
64391: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64392: LD_INT 0
64394: PPUSH
64395: PPUSH
64396: PPUSH
// uc_side = 0 ;
64397: LD_ADDR_OWVAR 20
64401: PUSH
64402: LD_INT 0
64404: ST_TO_ADDR
// uc_nation = 0 ;
64405: LD_ADDR_OWVAR 21
64409: PUSH
64410: LD_INT 0
64412: ST_TO_ADDR
// InitHc_All ( ) ;
64413: CALL_OW 584
// InitVc ;
64417: CALL_OW 20
// if mastodonts then
64421: LD_VAR 0 6
64425: IFFALSE 64492
// for i = 1 to mastodonts do
64427: LD_ADDR_VAR 0 11
64431: PUSH
64432: DOUBLE
64433: LD_INT 1
64435: DEC
64436: ST_TO_ADDR
64437: LD_VAR 0 6
64441: PUSH
64442: FOR_TO
64443: IFFALSE 64490
// begin vc_chassis := 31 ;
64445: LD_ADDR_OWVAR 37
64449: PUSH
64450: LD_INT 31
64452: ST_TO_ADDR
// vc_control := control_rider ;
64453: LD_ADDR_OWVAR 38
64457: PUSH
64458: LD_INT 4
64460: ST_TO_ADDR
// animal := CreateVehicle ;
64461: LD_ADDR_VAR 0 12
64465: PUSH
64466: CALL_OW 45
64470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64471: LD_VAR 0 12
64475: PPUSH
64476: LD_VAR 0 8
64480: PPUSH
64481: LD_INT 0
64483: PPUSH
64484: CALL 66627 0 3
// end ;
64488: GO 64442
64490: POP
64491: POP
// if horses then
64492: LD_VAR 0 5
64496: IFFALSE 64563
// for i = 1 to horses do
64498: LD_ADDR_VAR 0 11
64502: PUSH
64503: DOUBLE
64504: LD_INT 1
64506: DEC
64507: ST_TO_ADDR
64508: LD_VAR 0 5
64512: PUSH
64513: FOR_TO
64514: IFFALSE 64561
// begin hc_class := 21 ;
64516: LD_ADDR_OWVAR 28
64520: PUSH
64521: LD_INT 21
64523: ST_TO_ADDR
// hc_gallery :=  ;
64524: LD_ADDR_OWVAR 33
64528: PUSH
64529: LD_STRING 
64531: ST_TO_ADDR
// animal := CreateHuman ;
64532: LD_ADDR_VAR 0 12
64536: PUSH
64537: CALL_OW 44
64541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64542: LD_VAR 0 12
64546: PPUSH
64547: LD_VAR 0 8
64551: PPUSH
64552: LD_INT 0
64554: PPUSH
64555: CALL 66627 0 3
// end ;
64559: GO 64513
64561: POP
64562: POP
// if birds then
64563: LD_VAR 0 1
64567: IFFALSE 64634
// for i = 1 to birds do
64569: LD_ADDR_VAR 0 11
64573: PUSH
64574: DOUBLE
64575: LD_INT 1
64577: DEC
64578: ST_TO_ADDR
64579: LD_VAR 0 1
64583: PUSH
64584: FOR_TO
64585: IFFALSE 64632
// begin hc_class = 18 ;
64587: LD_ADDR_OWVAR 28
64591: PUSH
64592: LD_INT 18
64594: ST_TO_ADDR
// hc_gallery =  ;
64595: LD_ADDR_OWVAR 33
64599: PUSH
64600: LD_STRING 
64602: ST_TO_ADDR
// animal := CreateHuman ;
64603: LD_ADDR_VAR 0 12
64607: PUSH
64608: CALL_OW 44
64612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64613: LD_VAR 0 12
64617: PPUSH
64618: LD_VAR 0 8
64622: PPUSH
64623: LD_INT 0
64625: PPUSH
64626: CALL 66627 0 3
// end ;
64630: GO 64584
64632: POP
64633: POP
// if tigers then
64634: LD_VAR 0 2
64638: IFFALSE 64722
// for i = 1 to tigers do
64640: LD_ADDR_VAR 0 11
64644: PUSH
64645: DOUBLE
64646: LD_INT 1
64648: DEC
64649: ST_TO_ADDR
64650: LD_VAR 0 2
64654: PUSH
64655: FOR_TO
64656: IFFALSE 64720
// begin hc_class = class_tiger ;
64658: LD_ADDR_OWVAR 28
64662: PUSH
64663: LD_INT 14
64665: ST_TO_ADDR
// hc_gallery =  ;
64666: LD_ADDR_OWVAR 33
64670: PUSH
64671: LD_STRING 
64673: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64674: LD_ADDR_OWVAR 35
64678: PUSH
64679: LD_INT 7
64681: NEG
64682: PPUSH
64683: LD_INT 7
64685: PPUSH
64686: CALL_OW 12
64690: ST_TO_ADDR
// animal := CreateHuman ;
64691: LD_ADDR_VAR 0 12
64695: PUSH
64696: CALL_OW 44
64700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64701: LD_VAR 0 12
64705: PPUSH
64706: LD_VAR 0 8
64710: PPUSH
64711: LD_INT 0
64713: PPUSH
64714: CALL 66627 0 3
// end ;
64718: GO 64655
64720: POP
64721: POP
// if apemans then
64722: LD_VAR 0 3
64726: IFFALSE 64849
// for i = 1 to apemans do
64728: LD_ADDR_VAR 0 11
64732: PUSH
64733: DOUBLE
64734: LD_INT 1
64736: DEC
64737: ST_TO_ADDR
64738: LD_VAR 0 3
64742: PUSH
64743: FOR_TO
64744: IFFALSE 64847
// begin hc_class = class_apeman ;
64746: LD_ADDR_OWVAR 28
64750: PUSH
64751: LD_INT 12
64753: ST_TO_ADDR
// hc_gallery =  ;
64754: LD_ADDR_OWVAR 33
64758: PUSH
64759: LD_STRING 
64761: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64762: LD_ADDR_OWVAR 35
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PPUSH
64771: LD_INT 2
64773: PPUSH
64774: CALL_OW 12
64778: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64779: LD_ADDR_OWVAR 31
64783: PUSH
64784: LD_INT 1
64786: PPUSH
64787: LD_INT 3
64789: PPUSH
64790: CALL_OW 12
64794: PUSH
64795: LD_INT 1
64797: PPUSH
64798: LD_INT 3
64800: PPUSH
64801: CALL_OW 12
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// animal := CreateHuman ;
64818: LD_ADDR_VAR 0 12
64822: PUSH
64823: CALL_OW 44
64827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64828: LD_VAR 0 12
64832: PPUSH
64833: LD_VAR 0 8
64837: PPUSH
64838: LD_INT 0
64840: PPUSH
64841: CALL 66627 0 3
// end ;
64845: GO 64743
64847: POP
64848: POP
// if enchidnas then
64849: LD_VAR 0 4
64853: IFFALSE 64920
// for i = 1 to enchidnas do
64855: LD_ADDR_VAR 0 11
64859: PUSH
64860: DOUBLE
64861: LD_INT 1
64863: DEC
64864: ST_TO_ADDR
64865: LD_VAR 0 4
64869: PUSH
64870: FOR_TO
64871: IFFALSE 64918
// begin hc_class = 13 ;
64873: LD_ADDR_OWVAR 28
64877: PUSH
64878: LD_INT 13
64880: ST_TO_ADDR
// hc_gallery =  ;
64881: LD_ADDR_OWVAR 33
64885: PUSH
64886: LD_STRING 
64888: ST_TO_ADDR
// animal := CreateHuman ;
64889: LD_ADDR_VAR 0 12
64893: PUSH
64894: CALL_OW 44
64898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64899: LD_VAR 0 12
64903: PPUSH
64904: LD_VAR 0 8
64908: PPUSH
64909: LD_INT 0
64911: PPUSH
64912: CALL 66627 0 3
// end ;
64916: GO 64870
64918: POP
64919: POP
// if fishes then
64920: LD_VAR 0 7
64924: IFFALSE 64991
// for i = 1 to fishes do
64926: LD_ADDR_VAR 0 11
64930: PUSH
64931: DOUBLE
64932: LD_INT 1
64934: DEC
64935: ST_TO_ADDR
64936: LD_VAR 0 7
64940: PUSH
64941: FOR_TO
64942: IFFALSE 64989
// begin hc_class = 20 ;
64944: LD_ADDR_OWVAR 28
64948: PUSH
64949: LD_INT 20
64951: ST_TO_ADDR
// hc_gallery =  ;
64952: LD_ADDR_OWVAR 33
64956: PUSH
64957: LD_STRING 
64959: ST_TO_ADDR
// animal := CreateHuman ;
64960: LD_ADDR_VAR 0 12
64964: PUSH
64965: CALL_OW 44
64969: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64970: LD_VAR 0 12
64974: PPUSH
64975: LD_VAR 0 9
64979: PPUSH
64980: LD_INT 0
64982: PPUSH
64983: CALL 66627 0 3
// end ;
64987: GO 64941
64989: POP
64990: POP
// end ;
64991: LD_VAR 0 10
64995: RET
// export function WantHeal ( sci , unit ) ; begin
64996: LD_INT 0
64998: PPUSH
// if GetTaskList ( sci ) > 0 then
64999: LD_VAR 0 1
65003: PPUSH
65004: CALL_OW 437
65008: PUSH
65009: LD_INT 0
65011: GREATER
65012: IFFALSE 65082
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65014: LD_VAR 0 1
65018: PPUSH
65019: CALL_OW 437
65023: PUSH
65024: LD_INT 1
65026: ARRAY
65027: PUSH
65028: LD_INT 1
65030: ARRAY
65031: PUSH
65032: LD_STRING l
65034: EQUAL
65035: PUSH
65036: LD_VAR 0 1
65040: PPUSH
65041: CALL_OW 437
65045: PUSH
65046: LD_INT 1
65048: ARRAY
65049: PUSH
65050: LD_INT 4
65052: ARRAY
65053: PUSH
65054: LD_VAR 0 2
65058: EQUAL
65059: AND
65060: IFFALSE 65072
// result := true else
65062: LD_ADDR_VAR 0 3
65066: PUSH
65067: LD_INT 1
65069: ST_TO_ADDR
65070: GO 65080
// result := false ;
65072: LD_ADDR_VAR 0 3
65076: PUSH
65077: LD_INT 0
65079: ST_TO_ADDR
// end else
65080: GO 65090
// result := false ;
65082: LD_ADDR_VAR 0 3
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// end ;
65090: LD_VAR 0 3
65094: RET
// export function HealTarget ( sci ) ; begin
65095: LD_INT 0
65097: PPUSH
// if not sci then
65098: LD_VAR 0 1
65102: NOT
65103: IFFALSE 65107
// exit ;
65105: GO 65172
// result := 0 ;
65107: LD_ADDR_VAR 0 2
65111: PUSH
65112: LD_INT 0
65114: ST_TO_ADDR
// if GetTaskList ( sci ) then
65115: LD_VAR 0 1
65119: PPUSH
65120: CALL_OW 437
65124: IFFALSE 65172
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65126: LD_VAR 0 1
65130: PPUSH
65131: CALL_OW 437
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_INT 1
65142: ARRAY
65143: PUSH
65144: LD_STRING l
65146: EQUAL
65147: IFFALSE 65172
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65149: LD_ADDR_VAR 0 2
65153: PUSH
65154: LD_VAR 0 1
65158: PPUSH
65159: CALL_OW 437
65163: PUSH
65164: LD_INT 1
65166: ARRAY
65167: PUSH
65168: LD_INT 4
65170: ARRAY
65171: ST_TO_ADDR
// end ;
65172: LD_VAR 0 2
65176: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65177: LD_INT 0
65179: PPUSH
65180: PPUSH
65181: PPUSH
65182: PPUSH
// if not base_units then
65183: LD_VAR 0 1
65187: NOT
65188: IFFALSE 65192
// exit ;
65190: GO 65279
// result := false ;
65192: LD_ADDR_VAR 0 2
65196: PUSH
65197: LD_INT 0
65199: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65200: LD_ADDR_VAR 0 5
65204: PUSH
65205: LD_VAR 0 1
65209: PPUSH
65210: LD_INT 21
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PPUSH
65220: CALL_OW 72
65224: ST_TO_ADDR
// if not tmp then
65225: LD_VAR 0 5
65229: NOT
65230: IFFALSE 65234
// exit ;
65232: GO 65279
// for i in tmp do
65234: LD_ADDR_VAR 0 3
65238: PUSH
65239: LD_VAR 0 5
65243: PUSH
65244: FOR_IN
65245: IFFALSE 65277
// begin result := EnemyInRange ( i , 22 ) ;
65247: LD_ADDR_VAR 0 2
65251: PUSH
65252: LD_VAR 0 3
65256: PPUSH
65257: LD_INT 22
65259: PPUSH
65260: CALL 62948 0 2
65264: ST_TO_ADDR
// if result then
65265: LD_VAR 0 2
65269: IFFALSE 65275
// exit ;
65271: POP
65272: POP
65273: GO 65279
// end ;
65275: GO 65244
65277: POP
65278: POP
// end ;
65279: LD_VAR 0 2
65283: RET
// export function FilterByTag ( units , tag ) ; begin
65284: LD_INT 0
65286: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65287: LD_ADDR_VAR 0 3
65291: PUSH
65292: LD_VAR 0 1
65296: PPUSH
65297: LD_INT 120
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PPUSH
65309: CALL_OW 72
65313: ST_TO_ADDR
// end ;
65314: LD_VAR 0 3
65318: RET
// export function IsDriver ( un ) ; begin
65319: LD_INT 0
65321: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65322: LD_ADDR_VAR 0 2
65326: PUSH
65327: LD_VAR 0 1
65331: PUSH
65332: LD_INT 55
65334: PUSH
65335: EMPTY
65336: LIST
65337: PPUSH
65338: CALL_OW 69
65342: IN
65343: ST_TO_ADDR
// end ;
65344: LD_VAR 0 2
65348: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65349: LD_INT 0
65351: PPUSH
65352: PPUSH
// list := [ ] ;
65353: LD_ADDR_VAR 0 5
65357: PUSH
65358: EMPTY
65359: ST_TO_ADDR
// case d of 0 :
65360: LD_VAR 0 3
65364: PUSH
65365: LD_INT 0
65367: DOUBLE
65368: EQUAL
65369: IFTRUE 65373
65371: GO 65506
65373: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65374: LD_ADDR_VAR 0 5
65378: PUSH
65379: LD_VAR 0 1
65383: PUSH
65384: LD_INT 4
65386: MINUS
65387: PUSH
65388: LD_VAR 0 2
65392: PUSH
65393: LD_INT 4
65395: MINUS
65396: PUSH
65397: LD_INT 2
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: PUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_INT 3
65412: MINUS
65413: PUSH
65414: LD_VAR 0 2
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: PUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_INT 4
65434: PLUS
65435: PUSH
65436: LD_VAR 0 2
65440: PUSH
65441: LD_INT 4
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: PUSH
65449: LD_VAR 0 1
65453: PUSH
65454: LD_INT 3
65456: PLUS
65457: PUSH
65458: LD_VAR 0 2
65462: PUSH
65463: LD_INT 3
65465: PLUS
65466: PUSH
65467: LD_INT 5
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: LD_VAR 0 2
65484: PUSH
65485: LD_INT 4
65487: PLUS
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// end ; 1 :
65504: GO 66204
65506: LD_INT 1
65508: DOUBLE
65509: EQUAL
65510: IFTRUE 65514
65512: GO 65647
65514: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65515: LD_ADDR_VAR 0 5
65519: PUSH
65520: LD_VAR 0 1
65524: PUSH
65525: LD_VAR 0 2
65529: PUSH
65530: LD_INT 4
65532: MINUS
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: PUSH
65542: LD_VAR 0 1
65546: PUSH
65547: LD_INT 3
65549: MINUS
65550: PUSH
65551: LD_VAR 0 2
65555: PUSH
65556: LD_INT 3
65558: MINUS
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: PUSH
65568: LD_VAR 0 1
65572: PUSH
65573: LD_INT 4
65575: MINUS
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_INT 3
65602: PLUS
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 4
65619: PLUS
65620: PUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 4
65628: PLUS
65629: PUSH
65630: LD_INT 5
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// end ; 2 :
65645: GO 66204
65647: LD_INT 2
65649: DOUBLE
65650: EQUAL
65651: IFTRUE 65655
65653: GO 65784
65655: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65656: LD_ADDR_VAR 0 5
65660: PUSH
65661: LD_VAR 0 1
65665: PUSH
65666: LD_VAR 0 2
65670: PUSH
65671: LD_INT 3
65673: MINUS
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 4
65690: PLUS
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 4
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: LIST
65704: PUSH
65705: LD_VAR 0 1
65709: PUSH
65710: LD_VAR 0 2
65714: PUSH
65715: LD_INT 4
65717: PLUS
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: PUSH
65727: LD_VAR 0 1
65731: PUSH
65732: LD_INT 3
65734: MINUS
65735: PUSH
65736: LD_VAR 0 2
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: LIST
65748: PUSH
65749: LD_VAR 0 1
65753: PUSH
65754: LD_INT 4
65756: MINUS
65757: PUSH
65758: LD_VAR 0 2
65762: PUSH
65763: LD_INT 4
65765: MINUS
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// end ; 3 :
65782: GO 66204
65784: LD_INT 3
65786: DOUBLE
65787: EQUAL
65788: IFTRUE 65792
65790: GO 65925
65792: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65793: LD_ADDR_VAR 0 5
65797: PUSH
65798: LD_VAR 0 1
65802: PUSH
65803: LD_INT 3
65805: PLUS
65806: PUSH
65807: LD_VAR 0 2
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: PUSH
65820: LD_VAR 0 1
65824: PUSH
65825: LD_INT 4
65827: PLUS
65828: PUSH
65829: LD_VAR 0 2
65833: PUSH
65834: LD_INT 4
65836: PLUS
65837: PUSH
65838: LD_INT 5
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: PUSH
65846: LD_VAR 0 1
65850: PUSH
65851: LD_INT 4
65853: MINUS
65854: PUSH
65855: LD_VAR 0 2
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: PUSH
65868: LD_VAR 0 1
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_INT 4
65880: MINUS
65881: PUSH
65882: LD_INT 3
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: LD_VAR 0 1
65894: PUSH
65895: LD_INT 3
65897: MINUS
65898: PUSH
65899: LD_VAR 0 2
65903: PUSH
65904: LD_INT 3
65906: MINUS
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// end ; 4 :
65923: GO 66204
65925: LD_INT 4
65927: DOUBLE
65928: EQUAL
65929: IFTRUE 65933
65931: GO 66066
65933: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65934: LD_ADDR_VAR 0 5
65938: PUSH
65939: LD_VAR 0 1
65943: PUSH
65944: LD_VAR 0 2
65948: PUSH
65949: LD_INT 4
65951: PLUS
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: PUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 3
65968: PLUS
65969: PUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_INT 3
65977: PLUS
65978: PUSH
65979: LD_INT 5
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_INT 4
65994: PLUS
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 4
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: LD_VAR 0 2
66018: PUSH
66019: LD_INT 3
66021: MINUS
66022: PUSH
66023: LD_INT 3
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: LD_VAR 0 1
66035: PUSH
66036: LD_INT 4
66038: MINUS
66039: PUSH
66040: LD_VAR 0 2
66044: PUSH
66045: LD_INT 4
66047: MINUS
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// end ; 5 :
66064: GO 66204
66066: LD_INT 5
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66074
66072: GO 66203
66074: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: LD_INT 4
66087: MINUS
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: LD_VAR 0 2
66111: PUSH
66112: LD_INT 4
66114: MINUS
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: LD_VAR 0 1
66128: PUSH
66129: LD_INT 4
66131: PLUS
66132: PUSH
66133: LD_VAR 0 2
66137: PUSH
66138: LD_INT 4
66140: PLUS
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_INT 3
66157: PLUS
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 4
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: LD_VAR 0 1
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: LD_INT 3
66184: PLUS
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// end ; end ;
66201: GO 66204
66203: POP
// result := list ;
66204: LD_ADDR_VAR 0 4
66208: PUSH
66209: LD_VAR 0 5
66213: ST_TO_ADDR
// end ;
66214: LD_VAR 0 4
66218: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66219: LD_INT 0
66221: PPUSH
66222: PPUSH
66223: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66224: LD_VAR 0 1
66228: NOT
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: LD_INT 4
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: IN
66253: NOT
66254: OR
66255: IFFALSE 66259
// exit ;
66257: GO 66351
// tmp := [ ] ;
66259: LD_ADDR_VAR 0 5
66263: PUSH
66264: EMPTY
66265: ST_TO_ADDR
// for i in units do
66266: LD_ADDR_VAR 0 4
66270: PUSH
66271: LD_VAR 0 1
66275: PUSH
66276: FOR_IN
66277: IFFALSE 66320
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66279: LD_ADDR_VAR 0 5
66283: PUSH
66284: LD_VAR 0 5
66288: PPUSH
66289: LD_VAR 0 5
66293: PUSH
66294: LD_INT 1
66296: PLUS
66297: PPUSH
66298: LD_VAR 0 4
66302: PPUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: CALL_OW 259
66312: PPUSH
66313: CALL_OW 2
66317: ST_TO_ADDR
66318: GO 66276
66320: POP
66321: POP
// if not tmp then
66322: LD_VAR 0 5
66326: NOT
66327: IFFALSE 66331
// exit ;
66329: GO 66351
// result := SortListByListDesc ( units , tmp ) ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_VAR 0 5
66345: PPUSH
66346: CALL_OW 77
66350: ST_TO_ADDR
// end ;
66351: LD_VAR 0 3
66355: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66356: LD_INT 0
66358: PPUSH
66359: PPUSH
66360: PPUSH
// result := false ;
66361: LD_ADDR_VAR 0 3
66365: PUSH
66366: LD_INT 0
66368: ST_TO_ADDR
// x := GetX ( building ) ;
66369: LD_ADDR_VAR 0 4
66373: PUSH
66374: LD_VAR 0 2
66378: PPUSH
66379: CALL_OW 250
66383: ST_TO_ADDR
// y := GetY ( building ) ;
66384: LD_ADDR_VAR 0 5
66388: PUSH
66389: LD_VAR 0 2
66393: PPUSH
66394: CALL_OW 251
66398: ST_TO_ADDR
// if not building or not x or not y then
66399: LD_VAR 0 2
66403: NOT
66404: PUSH
66405: LD_VAR 0 4
66409: NOT
66410: OR
66411: PUSH
66412: LD_VAR 0 5
66416: NOT
66417: OR
66418: IFFALSE 66422
// exit ;
66420: GO 66514
// if GetTaskList ( unit ) then
66422: LD_VAR 0 1
66426: PPUSH
66427: CALL_OW 437
66431: IFFALSE 66514
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66433: LD_STRING e
66435: PUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 437
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: EQUAL
66454: PUSH
66455: LD_VAR 0 4
66459: PUSH
66460: LD_VAR 0 1
66464: PPUSH
66465: CALL_OW 437
66469: PUSH
66470: LD_INT 1
66472: ARRAY
66473: PUSH
66474: LD_INT 2
66476: ARRAY
66477: EQUAL
66478: AND
66479: PUSH
66480: LD_VAR 0 5
66484: PUSH
66485: LD_VAR 0 1
66489: PPUSH
66490: CALL_OW 437
66494: PUSH
66495: LD_INT 1
66497: ARRAY
66498: PUSH
66499: LD_INT 3
66501: ARRAY
66502: EQUAL
66503: AND
66504: IFFALSE 66514
// result := true end ;
66506: LD_ADDR_VAR 0 3
66510: PUSH
66511: LD_INT 1
66513: ST_TO_ADDR
// end ;
66514: LD_VAR 0 3
66518: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66519: LD_INT 0
66521: PPUSH
// result := false ;
66522: LD_ADDR_VAR 0 4
66526: PUSH
66527: LD_INT 0
66529: ST_TO_ADDR
// if GetTaskList ( unit ) then
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 437
66539: IFFALSE 66622
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66541: LD_STRING M
66543: PUSH
66544: LD_VAR 0 1
66548: PPUSH
66549: CALL_OW 437
66553: PUSH
66554: LD_INT 1
66556: ARRAY
66557: PUSH
66558: LD_INT 1
66560: ARRAY
66561: EQUAL
66562: PUSH
66563: LD_VAR 0 2
66567: PUSH
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 437
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PUSH
66582: LD_INT 2
66584: ARRAY
66585: EQUAL
66586: AND
66587: PUSH
66588: LD_VAR 0 3
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 437
66602: PUSH
66603: LD_INT 1
66605: ARRAY
66606: PUSH
66607: LD_INT 3
66609: ARRAY
66610: EQUAL
66611: AND
66612: IFFALSE 66622
// result := true ;
66614: LD_ADDR_VAR 0 4
66618: PUSH
66619: LD_INT 1
66621: ST_TO_ADDR
// end ; end ;
66622: LD_VAR 0 4
66626: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66627: LD_INT 0
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
// if not unit or not area then
66633: LD_VAR 0 1
66637: NOT
66638: PUSH
66639: LD_VAR 0 2
66643: NOT
66644: OR
66645: IFFALSE 66649
// exit ;
66647: GO 66813
// tmp := AreaToList ( area , i ) ;
66649: LD_ADDR_VAR 0 6
66653: PUSH
66654: LD_VAR 0 2
66658: PPUSH
66659: LD_VAR 0 5
66663: PPUSH
66664: CALL_OW 517
66668: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66669: LD_ADDR_VAR 0 5
66673: PUSH
66674: DOUBLE
66675: LD_INT 1
66677: DEC
66678: ST_TO_ADDR
66679: LD_VAR 0 6
66683: PUSH
66684: LD_INT 1
66686: ARRAY
66687: PUSH
66688: FOR_TO
66689: IFFALSE 66811
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66691: LD_ADDR_VAR 0 7
66695: PUSH
66696: LD_VAR 0 6
66700: PUSH
66701: LD_INT 1
66703: ARRAY
66704: PUSH
66705: LD_VAR 0 5
66709: ARRAY
66710: PUSH
66711: LD_VAR 0 6
66715: PUSH
66716: LD_INT 2
66718: ARRAY
66719: PUSH
66720: LD_VAR 0 5
66724: ARRAY
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66730: LD_VAR 0 7
66734: PUSH
66735: LD_INT 1
66737: ARRAY
66738: PPUSH
66739: LD_VAR 0 7
66743: PUSH
66744: LD_INT 2
66746: ARRAY
66747: PPUSH
66748: CALL_OW 428
66752: PUSH
66753: LD_INT 0
66755: EQUAL
66756: IFFALSE 66809
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66758: LD_VAR 0 1
66762: PPUSH
66763: LD_VAR 0 7
66767: PUSH
66768: LD_INT 1
66770: ARRAY
66771: PPUSH
66772: LD_VAR 0 7
66776: PUSH
66777: LD_INT 2
66779: ARRAY
66780: PPUSH
66781: LD_VAR 0 3
66785: PPUSH
66786: CALL_OW 48
// result := IsPlaced ( unit ) ;
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: LD_VAR 0 1
66799: PPUSH
66800: CALL_OW 305
66804: ST_TO_ADDR
// exit ;
66805: POP
66806: POP
66807: GO 66813
// end ; end ;
66809: GO 66688
66811: POP
66812: POP
// end ;
66813: LD_VAR 0 4
66817: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66818: LD_INT 0
66820: PPUSH
66821: PPUSH
66822: PPUSH
// if not side or side > 8 then
66823: LD_VAR 0 1
66827: NOT
66828: PUSH
66829: LD_VAR 0 1
66833: PUSH
66834: LD_INT 8
66836: GREATER
66837: OR
66838: IFFALSE 66842
// exit ;
66840: GO 67029
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_INT 22
66849: PUSH
66850: LD_VAR 0 1
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 21
66861: PUSH
66862: LD_INT 3
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PPUSH
66873: CALL_OW 69
66877: ST_TO_ADDR
// if not tmp then
66878: LD_VAR 0 4
66882: NOT
66883: IFFALSE 66887
// exit ;
66885: GO 67029
// enable_addtolog := true ;
66887: LD_ADDR_OWVAR 81
66891: PUSH
66892: LD_INT 1
66894: ST_TO_ADDR
// AddToLog ( [ ) ;
66895: LD_STRING [
66897: PPUSH
66898: CALL_OW 561
// for i in tmp do
66902: LD_ADDR_VAR 0 3
66906: PUSH
66907: LD_VAR 0 4
66911: PUSH
66912: FOR_IN
66913: IFFALSE 67020
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66915: LD_STRING [
66917: PUSH
66918: LD_VAR 0 3
66922: PPUSH
66923: CALL_OW 266
66927: STR
66928: PUSH
66929: LD_STRING , 
66931: STR
66932: PUSH
66933: LD_VAR 0 3
66937: PPUSH
66938: CALL_OW 250
66942: STR
66943: PUSH
66944: LD_STRING , 
66946: STR
66947: PUSH
66948: LD_VAR 0 3
66952: PPUSH
66953: CALL_OW 251
66957: STR
66958: PUSH
66959: LD_STRING , 
66961: STR
66962: PUSH
66963: LD_VAR 0 3
66967: PPUSH
66968: CALL_OW 254
66972: STR
66973: PUSH
66974: LD_STRING , 
66976: STR
66977: PUSH
66978: LD_VAR 0 3
66982: PPUSH
66983: LD_INT 1
66985: PPUSH
66986: CALL_OW 268
66990: STR
66991: PUSH
66992: LD_STRING , 
66994: STR
66995: PUSH
66996: LD_VAR 0 3
67000: PPUSH
67001: LD_INT 2
67003: PPUSH
67004: CALL_OW 268
67008: STR
67009: PUSH
67010: LD_STRING ],
67012: STR
67013: PPUSH
67014: CALL_OW 561
// end ;
67018: GO 66912
67020: POP
67021: POP
// AddToLog ( ]; ) ;
67022: LD_STRING ];
67024: PPUSH
67025: CALL_OW 561
// end ;
67029: LD_VAR 0 2
67033: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67034: LD_INT 0
67036: PPUSH
67037: PPUSH
67038: PPUSH
67039: PPUSH
67040: PPUSH
// if not area or not rate or not max then
67041: LD_VAR 0 1
67045: NOT
67046: PUSH
67047: LD_VAR 0 2
67051: NOT
67052: OR
67053: PUSH
67054: LD_VAR 0 4
67058: NOT
67059: OR
67060: IFFALSE 67064
// exit ;
67062: GO 67253
// while 1 do
67064: LD_INT 1
67066: IFFALSE 67253
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67068: LD_ADDR_VAR 0 9
67072: PUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: LD_INT 1
67080: PPUSH
67081: CALL_OW 287
67085: PUSH
67086: LD_INT 10
67088: MUL
67089: ST_TO_ADDR
// r := rate / 10 ;
67090: LD_ADDR_VAR 0 7
67094: PUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 10
67102: DIVREAL
67103: ST_TO_ADDR
// time := 1 1$00 ;
67104: LD_ADDR_VAR 0 8
67108: PUSH
67109: LD_INT 2100
67111: ST_TO_ADDR
// if amount < min then
67112: LD_VAR 0 9
67116: PUSH
67117: LD_VAR 0 3
67121: LESS
67122: IFFALSE 67140
// r := r * 2 else
67124: LD_ADDR_VAR 0 7
67128: PUSH
67129: LD_VAR 0 7
67133: PUSH
67134: LD_INT 2
67136: MUL
67137: ST_TO_ADDR
67138: GO 67166
// if amount > max then
67140: LD_VAR 0 9
67144: PUSH
67145: LD_VAR 0 4
67149: GREATER
67150: IFFALSE 67166
// r := r / 2 ;
67152: LD_ADDR_VAR 0 7
67156: PUSH
67157: LD_VAR 0 7
67161: PUSH
67162: LD_INT 2
67164: DIVREAL
67165: ST_TO_ADDR
// time := time / r ;
67166: LD_ADDR_VAR 0 8
67170: PUSH
67171: LD_VAR 0 8
67175: PUSH
67176: LD_VAR 0 7
67180: DIVREAL
67181: ST_TO_ADDR
// if time < 0 then
67182: LD_VAR 0 8
67186: PUSH
67187: LD_INT 0
67189: LESS
67190: IFFALSE 67207
// time := time * - 1 ;
67192: LD_ADDR_VAR 0 8
67196: PUSH
67197: LD_VAR 0 8
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: MUL
67206: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67207: LD_VAR 0 8
67211: PUSH
67212: LD_INT 35
67214: PPUSH
67215: LD_INT 875
67217: PPUSH
67218: CALL_OW 12
67222: PLUS
67223: PPUSH
67224: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67228: LD_INT 1
67230: PPUSH
67231: LD_INT 5
67233: PPUSH
67234: CALL_OW 12
67238: PPUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_INT 1
67246: PPUSH
67247: CALL_OW 55
// end ;
67251: GO 67064
// end ;
67253: LD_VAR 0 5
67257: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67258: LD_INT 0
67260: PPUSH
67261: PPUSH
67262: PPUSH
67263: PPUSH
67264: PPUSH
67265: PPUSH
67266: PPUSH
67267: PPUSH
// if not turrets or not factories then
67268: LD_VAR 0 1
67272: NOT
67273: PUSH
67274: LD_VAR 0 2
67278: NOT
67279: OR
67280: IFFALSE 67284
// exit ;
67282: GO 67591
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67284: LD_ADDR_VAR 0 10
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: LD_INT 6
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 5
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 24
67326: PUSH
67327: LD_INT 25
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 23
67336: PUSH
67337: LD_INT 27
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 42
67350: PUSH
67351: LD_INT 43
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 44
67360: PUSH
67361: LD_INT 46
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 45
67370: PUSH
67371: LD_INT 47
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: ST_TO_ADDR
// result := [ ] ;
67388: LD_ADDR_VAR 0 3
67392: PUSH
67393: EMPTY
67394: ST_TO_ADDR
// for i in turrets do
67395: LD_ADDR_VAR 0 4
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: FOR_IN
67406: IFFALSE 67589
// begin nat := GetNation ( i ) ;
67408: LD_ADDR_VAR 0 7
67412: PUSH
67413: LD_VAR 0 4
67417: PPUSH
67418: CALL_OW 248
67422: ST_TO_ADDR
// weapon := 0 ;
67423: LD_ADDR_VAR 0 8
67427: PUSH
67428: LD_INT 0
67430: ST_TO_ADDR
// if not nat then
67431: LD_VAR 0 7
67435: NOT
67436: IFFALSE 67440
// continue ;
67438: GO 67405
// for j in list [ nat ] do
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_VAR 0 10
67449: PUSH
67450: LD_VAR 0 7
67454: ARRAY
67455: PUSH
67456: FOR_IN
67457: IFFALSE 67498
// if GetBWeapon ( i ) = j [ 1 ] then
67459: LD_VAR 0 4
67463: PPUSH
67464: CALL_OW 269
67468: PUSH
67469: LD_VAR 0 5
67473: PUSH
67474: LD_INT 1
67476: ARRAY
67477: EQUAL
67478: IFFALSE 67496
// begin weapon := j [ 2 ] ;
67480: LD_ADDR_VAR 0 8
67484: PUSH
67485: LD_VAR 0 5
67489: PUSH
67490: LD_INT 2
67492: ARRAY
67493: ST_TO_ADDR
// break ;
67494: GO 67498
// end ;
67496: GO 67456
67498: POP
67499: POP
// if not weapon then
67500: LD_VAR 0 8
67504: NOT
67505: IFFALSE 67509
// continue ;
67507: GO 67405
// for k in factories do
67509: LD_ADDR_VAR 0 6
67513: PUSH
67514: LD_VAR 0 2
67518: PUSH
67519: FOR_IN
67520: IFFALSE 67585
// begin weapons := AvailableWeaponList ( k ) ;
67522: LD_ADDR_VAR 0 9
67526: PUSH
67527: LD_VAR 0 6
67531: PPUSH
67532: CALL_OW 478
67536: ST_TO_ADDR
// if not weapons then
67537: LD_VAR 0 9
67541: NOT
67542: IFFALSE 67546
// continue ;
67544: GO 67519
// if weapon in weapons then
67546: LD_VAR 0 8
67550: PUSH
67551: LD_VAR 0 9
67555: IN
67556: IFFALSE 67583
// begin result := [ i , weapon ] ;
67558: LD_ADDR_VAR 0 3
67562: PUSH
67563: LD_VAR 0 4
67567: PUSH
67568: LD_VAR 0 8
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// exit ;
67577: POP
67578: POP
67579: POP
67580: POP
67581: GO 67591
// end ; end ;
67583: GO 67519
67585: POP
67586: POP
// end ;
67587: GO 67405
67589: POP
67590: POP
// end ;
67591: LD_VAR 0 3
67595: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67596: LD_INT 0
67598: PPUSH
// if not side or side > 8 then
67599: LD_VAR 0 3
67603: NOT
67604: PUSH
67605: LD_VAR 0 3
67609: PUSH
67610: LD_INT 8
67612: GREATER
67613: OR
67614: IFFALSE 67618
// exit ;
67616: GO 67677
// if not range then
67618: LD_VAR 0 4
67622: NOT
67623: IFFALSE 67634
// range := - 12 ;
67625: LD_ADDR_VAR 0 4
67629: PUSH
67630: LD_INT 12
67632: NEG
67633: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67634: LD_VAR 0 1
67638: PPUSH
67639: LD_VAR 0 2
67643: PPUSH
67644: LD_VAR 0 3
67648: PPUSH
67649: LD_VAR 0 4
67653: PPUSH
67654: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67658: LD_VAR 0 1
67662: PPUSH
67663: LD_VAR 0 2
67667: PPUSH
67668: LD_VAR 0 3
67672: PPUSH
67673: CALL_OW 331
// end ;
67677: LD_VAR 0 5
67681: RET
// export function Video ( mode ) ; begin
67682: LD_INT 0
67684: PPUSH
// ingame_video = mode ;
67685: LD_ADDR_OWVAR 52
67689: PUSH
67690: LD_VAR 0 1
67694: ST_TO_ADDR
// interface_hidden = mode ;
67695: LD_ADDR_OWVAR 54
67699: PUSH
67700: LD_VAR 0 1
67704: ST_TO_ADDR
// end ;
67705: LD_VAR 0 2
67709: RET
// export function Join ( array , element ) ; begin
67710: LD_INT 0
67712: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67713: LD_ADDR_VAR 0 3
67717: PUSH
67718: LD_VAR 0 1
67722: PPUSH
67723: LD_VAR 0 1
67727: PUSH
67728: LD_INT 1
67730: PLUS
67731: PPUSH
67732: LD_VAR 0 2
67736: PPUSH
67737: CALL_OW 1
67741: ST_TO_ADDR
// end ;
67742: LD_VAR 0 3
67746: RET
// export function JoinUnion ( array , element ) ; begin
67747: LD_INT 0
67749: PPUSH
// result := array union element ;
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: LD_VAR 0 1
67759: PUSH
67760: LD_VAR 0 2
67764: UNION
67765: ST_TO_ADDR
// end ;
67766: LD_VAR 0 3
67770: RET
// export function GetBehemoths ( side ) ; begin
67771: LD_INT 0
67773: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67774: LD_ADDR_VAR 0 2
67778: PUSH
67779: LD_INT 22
67781: PUSH
67782: LD_VAR 0 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 31
67793: PUSH
67794: LD_INT 25
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PPUSH
67805: CALL_OW 69
67809: ST_TO_ADDR
// end ;
67810: LD_VAR 0 2
67814: RET
// export function Shuffle ( array ) ; var i , index ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
// result := [ ] ;
67820: LD_ADDR_VAR 0 2
67824: PUSH
67825: EMPTY
67826: ST_TO_ADDR
// if not array then
67827: LD_VAR 0 1
67831: NOT
67832: IFFALSE 67836
// exit ;
67834: GO 67935
// Randomize ;
67836: CALL_OW 10
// for i = array downto 1 do
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: DOUBLE
67846: LD_VAR 0 1
67850: INC
67851: ST_TO_ADDR
67852: LD_INT 1
67854: PUSH
67855: FOR_DOWNTO
67856: IFFALSE 67933
// begin index := rand ( 1 , array ) ;
67858: LD_ADDR_VAR 0 4
67862: PUSH
67863: LD_INT 1
67865: PPUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: CALL_OW 12
67875: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67876: LD_ADDR_VAR 0 2
67880: PUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: LD_VAR 0 2
67890: PUSH
67891: LD_INT 1
67893: PLUS
67894: PPUSH
67895: LD_VAR 0 1
67899: PUSH
67900: LD_VAR 0 4
67904: ARRAY
67905: PPUSH
67906: CALL_OW 2
67910: ST_TO_ADDR
// array := Delete ( array , index ) ;
67911: LD_ADDR_VAR 0 1
67915: PUSH
67916: LD_VAR 0 1
67920: PPUSH
67921: LD_VAR 0 4
67925: PPUSH
67926: CALL_OW 3
67930: ST_TO_ADDR
// end ;
67931: GO 67855
67933: POP
67934: POP
// end ;
67935: LD_VAR 0 2
67939: RET
// export function GetBaseMaterials ( base ) ; begin
67940: LD_INT 0
67942: PPUSH
// result := [ 0 , 0 , 0 ] ;
67943: LD_ADDR_VAR 0 2
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: LD_INT 0
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// if not base then
67962: LD_VAR 0 1
67966: NOT
67967: IFFALSE 67971
// exit ;
67969: GO 68020
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67971: LD_ADDR_VAR 0 2
67975: PUSH
67976: LD_VAR 0 1
67980: PPUSH
67981: LD_INT 1
67983: PPUSH
67984: CALL_OW 275
67988: PUSH
67989: LD_VAR 0 1
67993: PPUSH
67994: LD_INT 2
67996: PPUSH
67997: CALL_OW 275
68001: PUSH
68002: LD_VAR 0 1
68006: PPUSH
68007: LD_INT 3
68009: PPUSH
68010: CALL_OW 275
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: ST_TO_ADDR
// end ;
68020: LD_VAR 0 2
68024: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68025: LD_INT 0
68027: PPUSH
68028: PPUSH
// result := array ;
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 1
68038: ST_TO_ADDR
// if size >= result then
68039: LD_VAR 0 2
68043: PUSH
68044: LD_VAR 0 3
68048: GREATEREQUAL
68049: IFFALSE 68053
// exit ;
68051: GO 68103
// if size then
68053: LD_VAR 0 2
68057: IFFALSE 68103
// for i := array downto size do
68059: LD_ADDR_VAR 0 4
68063: PUSH
68064: DOUBLE
68065: LD_VAR 0 1
68069: INC
68070: ST_TO_ADDR
68071: LD_VAR 0 2
68075: PUSH
68076: FOR_DOWNTO
68077: IFFALSE 68101
// result := Delete ( result , result ) ;
68079: LD_ADDR_VAR 0 3
68083: PUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: LD_VAR 0 3
68093: PPUSH
68094: CALL_OW 3
68098: ST_TO_ADDR
68099: GO 68076
68101: POP
68102: POP
// end ;
68103: LD_VAR 0 3
68107: RET
// export function ComExit ( unit ) ; var tmp ; begin
68108: LD_INT 0
68110: PPUSH
68111: PPUSH
// if not IsInUnit ( unit ) then
68112: LD_VAR 0 1
68116: PPUSH
68117: CALL_OW 310
68121: NOT
68122: IFFALSE 68126
// exit ;
68124: GO 68186
// tmp := IsInUnit ( unit ) ;
68126: LD_ADDR_VAR 0 3
68130: PUSH
68131: LD_VAR 0 1
68135: PPUSH
68136: CALL_OW 310
68140: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68141: LD_VAR 0 3
68145: PPUSH
68146: CALL_OW 247
68150: PUSH
68151: LD_INT 2
68153: EQUAL
68154: IFFALSE 68167
// ComExitVehicle ( unit ) else
68156: LD_VAR 0 1
68160: PPUSH
68161: CALL_OW 121
68165: GO 68176
// ComExitBuilding ( unit ) ;
68167: LD_VAR 0 1
68171: PPUSH
68172: CALL_OW 122
// result := tmp ;
68176: LD_ADDR_VAR 0 2
68180: PUSH
68181: LD_VAR 0 3
68185: ST_TO_ADDR
// end ;
68186: LD_VAR 0 2
68190: RET
// export function ComExitAll ( units ) ; var i ; begin
68191: LD_INT 0
68193: PPUSH
68194: PPUSH
// if not units then
68195: LD_VAR 0 1
68199: NOT
68200: IFFALSE 68204
// exit ;
68202: GO 68230
// for i in units do
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: LD_VAR 0 1
68213: PUSH
68214: FOR_IN
68215: IFFALSE 68228
// ComExit ( i ) ;
68217: LD_VAR 0 3
68221: PPUSH
68222: CALL 68108 0 1
68226: GO 68214
68228: POP
68229: POP
// end ;
68230: LD_VAR 0 2
68234: RET
// export function ResetHc ; begin
68235: LD_INT 0
68237: PPUSH
// InitHc ;
68238: CALL_OW 19
// hc_importance := 0 ;
68242: LD_ADDR_OWVAR 32
68246: PUSH
68247: LD_INT 0
68249: ST_TO_ADDR
// end ;
68250: LD_VAR 0 1
68254: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68255: LD_INT 0
68257: PPUSH
68258: PPUSH
68259: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68260: LD_ADDR_VAR 0 6
68264: PUSH
68265: LD_VAR 0 1
68269: PUSH
68270: LD_VAR 0 3
68274: PLUS
68275: PUSH
68276: LD_INT 2
68278: DIV
68279: ST_TO_ADDR
// if _x < 0 then
68280: LD_VAR 0 6
68284: PUSH
68285: LD_INT 0
68287: LESS
68288: IFFALSE 68305
// _x := _x * - 1 ;
68290: LD_ADDR_VAR 0 6
68294: PUSH
68295: LD_VAR 0 6
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: MUL
68304: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68305: LD_ADDR_VAR 0 7
68309: PUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_VAR 0 4
68319: PLUS
68320: PUSH
68321: LD_INT 2
68323: DIV
68324: ST_TO_ADDR
// if _y < 0 then
68325: LD_VAR 0 7
68329: PUSH
68330: LD_INT 0
68332: LESS
68333: IFFALSE 68350
// _y := _y * - 1 ;
68335: LD_ADDR_VAR 0 7
68339: PUSH
68340: LD_VAR 0 7
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: MUL
68349: ST_TO_ADDR
// result := [ _x , _y ] ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: LD_VAR 0 6
68359: PUSH
68360: LD_VAR 0 7
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: ST_TO_ADDR
// end ;
68369: LD_VAR 0 5
68373: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
68378: PPUSH
68379: PPUSH
// task := GetTaskList ( unit ) ;
68380: LD_ADDR_VAR 0 7
68384: PUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 437
68394: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68395: LD_VAR 0 7
68399: NOT
68400: PUSH
68401: LD_VAR 0 1
68405: PPUSH
68406: LD_VAR 0 2
68410: PPUSH
68411: CALL_OW 308
68415: NOT
68416: AND
68417: IFFALSE 68421
// exit ;
68419: GO 68539
// if IsInArea ( unit , area ) then
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 2
68430: PPUSH
68431: CALL_OW 308
68435: IFFALSE 68453
// begin ComMoveToArea ( unit , goAway ) ;
68437: LD_VAR 0 1
68441: PPUSH
68442: LD_VAR 0 3
68446: PPUSH
68447: CALL_OW 113
// exit ;
68451: GO 68539
// end ; if task [ 1 ] [ 1 ] <> M then
68453: LD_VAR 0 7
68457: PUSH
68458: LD_INT 1
68460: ARRAY
68461: PUSH
68462: LD_INT 1
68464: ARRAY
68465: PUSH
68466: LD_STRING M
68468: NONEQUAL
68469: IFFALSE 68473
// exit ;
68471: GO 68539
// x := task [ 1 ] [ 2 ] ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: LD_VAR 0 7
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PUSH
68487: LD_INT 2
68489: ARRAY
68490: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68491: LD_ADDR_VAR 0 6
68495: PUSH
68496: LD_VAR 0 7
68500: PUSH
68501: LD_INT 1
68503: ARRAY
68504: PUSH
68505: LD_INT 3
68507: ARRAY
68508: ST_TO_ADDR
// if InArea ( x , y , area ) then
68509: LD_VAR 0 5
68513: PPUSH
68514: LD_VAR 0 6
68518: PPUSH
68519: LD_VAR 0 2
68523: PPUSH
68524: CALL_OW 309
68528: IFFALSE 68539
// ComStop ( unit ) ;
68530: LD_VAR 0 1
68534: PPUSH
68535: CALL_OW 141
// end ;
68539: LD_VAR 0 4
68543: RET
// export function Abs ( value ) ; begin
68544: LD_INT 0
68546: PPUSH
// result := value ;
68547: LD_ADDR_VAR 0 2
68551: PUSH
68552: LD_VAR 0 1
68556: ST_TO_ADDR
// if value < 0 then
68557: LD_VAR 0 1
68561: PUSH
68562: LD_INT 0
68564: LESS
68565: IFFALSE 68582
// result := value * - 1 ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_VAR 0 1
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: MUL
68581: ST_TO_ADDR
// end ;
68582: LD_VAR 0 2
68586: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68587: LD_INT 0
68589: PPUSH
68590: PPUSH
68591: PPUSH
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
// if not unit or not building then
68597: LD_VAR 0 1
68601: NOT
68602: PUSH
68603: LD_VAR 0 2
68607: NOT
68608: OR
68609: IFFALSE 68613
// exit ;
68611: GO 68839
// x := GetX ( building ) ;
68613: LD_ADDR_VAR 0 4
68617: PUSH
68618: LD_VAR 0 2
68622: PPUSH
68623: CALL_OW 250
68627: ST_TO_ADDR
// y := GetY ( building ) ;
68628: LD_ADDR_VAR 0 6
68632: PUSH
68633: LD_VAR 0 2
68637: PPUSH
68638: CALL_OW 251
68642: ST_TO_ADDR
// d := GetDir ( building ) ;
68643: LD_ADDR_VAR 0 8
68647: PUSH
68648: LD_VAR 0 2
68652: PPUSH
68653: CALL_OW 254
68657: ST_TO_ADDR
// r := 4 ;
68658: LD_ADDR_VAR 0 9
68662: PUSH
68663: LD_INT 4
68665: ST_TO_ADDR
// for i := 1 to 5 do
68666: LD_ADDR_VAR 0 10
68670: PUSH
68671: DOUBLE
68672: LD_INT 1
68674: DEC
68675: ST_TO_ADDR
68676: LD_INT 5
68678: PUSH
68679: FOR_TO
68680: IFFALSE 68837
// begin _x := ShiftX ( x , d , r + i ) ;
68682: LD_ADDR_VAR 0 5
68686: PUSH
68687: LD_VAR 0 4
68691: PPUSH
68692: LD_VAR 0 8
68696: PPUSH
68697: LD_VAR 0 9
68701: PUSH
68702: LD_VAR 0 10
68706: PLUS
68707: PPUSH
68708: CALL_OW 272
68712: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68713: LD_ADDR_VAR 0 7
68717: PUSH
68718: LD_VAR 0 6
68722: PPUSH
68723: LD_VAR 0 8
68727: PPUSH
68728: LD_VAR 0 9
68732: PUSH
68733: LD_VAR 0 10
68737: PLUS
68738: PPUSH
68739: CALL_OW 273
68743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68744: LD_VAR 0 5
68748: PPUSH
68749: LD_VAR 0 7
68753: PPUSH
68754: CALL_OW 488
68758: PUSH
68759: LD_VAR 0 5
68763: PPUSH
68764: LD_VAR 0 7
68768: PPUSH
68769: CALL_OW 428
68773: PPUSH
68774: CALL_OW 247
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: IN
68789: NOT
68790: AND
68791: IFFALSE 68835
// begin ComMoveXY ( unit , _x , _y ) ;
68793: LD_VAR 0 1
68797: PPUSH
68798: LD_VAR 0 5
68802: PPUSH
68803: LD_VAR 0 7
68807: PPUSH
68808: CALL_OW 111
// result := [ _x , _y ] ;
68812: LD_ADDR_VAR 0 3
68816: PUSH
68817: LD_VAR 0 5
68821: PUSH
68822: LD_VAR 0 7
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// exit ;
68831: POP
68832: POP
68833: GO 68839
// end ; end ;
68835: GO 68679
68837: POP
68838: POP
// end ;
68839: LD_VAR 0 3
68843: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68844: LD_INT 0
68846: PPUSH
68847: PPUSH
68848: PPUSH
// result := 0 ;
68849: LD_ADDR_VAR 0 3
68853: PUSH
68854: LD_INT 0
68856: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68857: LD_VAR 0 1
68861: PUSH
68862: LD_INT 0
68864: LESS
68865: PUSH
68866: LD_VAR 0 1
68870: PUSH
68871: LD_INT 8
68873: GREATER
68874: OR
68875: PUSH
68876: LD_VAR 0 2
68880: PUSH
68881: LD_INT 0
68883: LESS
68884: OR
68885: PUSH
68886: LD_VAR 0 2
68890: PUSH
68891: LD_INT 8
68893: GREATER
68894: OR
68895: IFFALSE 68899
// exit ;
68897: GO 68974
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68899: LD_ADDR_VAR 0 4
68903: PUSH
68904: LD_INT 22
68906: PUSH
68907: LD_VAR 0 2
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PPUSH
68916: CALL_OW 69
68920: PUSH
68921: FOR_IN
68922: IFFALSE 68972
// begin un := UnitShoot ( i ) ;
68924: LD_ADDR_VAR 0 5
68928: PUSH
68929: LD_VAR 0 4
68933: PPUSH
68934: CALL_OW 504
68938: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68939: LD_VAR 0 5
68943: PPUSH
68944: CALL_OW 255
68948: PUSH
68949: LD_VAR 0 1
68953: EQUAL
68954: IFFALSE 68970
// begin result := un ;
68956: LD_ADDR_VAR 0 3
68960: PUSH
68961: LD_VAR 0 5
68965: ST_TO_ADDR
// exit ;
68966: POP
68967: POP
68968: GO 68974
// end ; end ;
68970: GO 68921
68972: POP
68973: POP
// end ;
68974: LD_VAR 0 3
68978: RET
// export function GetCargoBay ( units ) ; begin
68979: LD_INT 0
68981: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68982: LD_ADDR_VAR 0 2
68986: PUSH
68987: LD_VAR 0 1
68991: PPUSH
68992: LD_INT 2
68994: PUSH
68995: LD_INT 34
68997: PUSH
68998: LD_INT 12
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 34
69007: PUSH
69008: LD_INT 51
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 34
69017: PUSH
69018: LD_INT 32
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 34
69027: PUSH
69028: LD_EXP 108
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: PPUSH
69044: CALL_OW 72
69048: ST_TO_ADDR
// end ;
69049: LD_VAR 0 2
69053: RET
// export function Negate ( value ) ; begin
69054: LD_INT 0
69056: PPUSH
// result := not value ;
69057: LD_ADDR_VAR 0 2
69061: PUSH
69062: LD_VAR 0 1
69066: NOT
69067: ST_TO_ADDR
// end ;
69068: LD_VAR 0 2
69072: RET
// export function Inc ( value ) ; begin
69073: LD_INT 0
69075: PPUSH
// result := value + 1 ;
69076: LD_ADDR_VAR 0 2
69080: PUSH
69081: LD_VAR 0 1
69085: PUSH
69086: LD_INT 1
69088: PLUS
69089: ST_TO_ADDR
// end ;
69090: LD_VAR 0 2
69094: RET
// export function Dec ( value ) ; begin
69095: LD_INT 0
69097: PPUSH
// result := value - 1 ;
69098: LD_ADDR_VAR 0 2
69102: PUSH
69103: LD_VAR 0 1
69107: PUSH
69108: LD_INT 1
69110: MINUS
69111: ST_TO_ADDR
// end ;
69112: LD_VAR 0 2
69116: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69117: LD_INT 0
69119: PPUSH
69120: PPUSH
69121: PPUSH
69122: PPUSH
69123: PPUSH
69124: PPUSH
69125: PPUSH
69126: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69127: LD_VAR 0 1
69131: PPUSH
69132: LD_VAR 0 2
69136: PPUSH
69137: CALL_OW 488
69141: NOT
69142: PUSH
69143: LD_VAR 0 3
69147: PPUSH
69148: LD_VAR 0 4
69152: PPUSH
69153: CALL_OW 488
69157: NOT
69158: OR
69159: IFFALSE 69172
// begin result := - 1 ;
69161: LD_ADDR_VAR 0 5
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: ST_TO_ADDR
// exit ;
69170: GO 69407
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69172: LD_ADDR_VAR 0 12
69176: PUSH
69177: LD_VAR 0 1
69181: PPUSH
69182: LD_VAR 0 2
69186: PPUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: LD_VAR 0 4
69196: PPUSH
69197: CALL 68255 0 4
69201: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69202: LD_ADDR_VAR 0 11
69206: PUSH
69207: LD_VAR 0 1
69211: PPUSH
69212: LD_VAR 0 2
69216: PPUSH
69217: LD_VAR 0 12
69221: PUSH
69222: LD_INT 1
69224: ARRAY
69225: PPUSH
69226: LD_VAR 0 12
69230: PUSH
69231: LD_INT 2
69233: ARRAY
69234: PPUSH
69235: CALL_OW 298
69239: ST_TO_ADDR
// distance := 9999 ;
69240: LD_ADDR_VAR 0 10
69244: PUSH
69245: LD_INT 9999
69247: ST_TO_ADDR
// for i := 0 to 5 do
69248: LD_ADDR_VAR 0 6
69252: PUSH
69253: DOUBLE
69254: LD_INT 0
69256: DEC
69257: ST_TO_ADDR
69258: LD_INT 5
69260: PUSH
69261: FOR_TO
69262: IFFALSE 69405
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69264: LD_ADDR_VAR 0 7
69268: PUSH
69269: LD_VAR 0 1
69273: PPUSH
69274: LD_VAR 0 6
69278: PPUSH
69279: LD_VAR 0 11
69283: PPUSH
69284: CALL_OW 272
69288: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69289: LD_ADDR_VAR 0 8
69293: PUSH
69294: LD_VAR 0 2
69298: PPUSH
69299: LD_VAR 0 6
69303: PPUSH
69304: LD_VAR 0 11
69308: PPUSH
69309: CALL_OW 273
69313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69314: LD_VAR 0 7
69318: PPUSH
69319: LD_VAR 0 8
69323: PPUSH
69324: CALL_OW 488
69328: NOT
69329: IFFALSE 69333
// continue ;
69331: GO 69261
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69333: LD_ADDR_VAR 0 9
69337: PUSH
69338: LD_VAR 0 12
69342: PUSH
69343: LD_INT 1
69345: ARRAY
69346: PPUSH
69347: LD_VAR 0 12
69351: PUSH
69352: LD_INT 2
69354: ARRAY
69355: PPUSH
69356: LD_VAR 0 7
69360: PPUSH
69361: LD_VAR 0 8
69365: PPUSH
69366: CALL_OW 298
69370: ST_TO_ADDR
// if tmp < distance then
69371: LD_VAR 0 9
69375: PUSH
69376: LD_VAR 0 10
69380: LESS
69381: IFFALSE 69403
// begin result := i ;
69383: LD_ADDR_VAR 0 5
69387: PUSH
69388: LD_VAR 0 6
69392: ST_TO_ADDR
// distance := tmp ;
69393: LD_ADDR_VAR 0 10
69397: PUSH
69398: LD_VAR 0 9
69402: ST_TO_ADDR
// end ; end ;
69403: GO 69261
69405: POP
69406: POP
// end ;
69407: LD_VAR 0 5
69411: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69412: LD_INT 0
69414: PPUSH
69415: PPUSH
// if not driver or not IsInUnit ( driver ) then
69416: LD_VAR 0 1
69420: NOT
69421: PUSH
69422: LD_VAR 0 1
69426: PPUSH
69427: CALL_OW 310
69431: NOT
69432: OR
69433: IFFALSE 69437
// exit ;
69435: GO 69527
// vehicle := IsInUnit ( driver ) ;
69437: LD_ADDR_VAR 0 3
69441: PUSH
69442: LD_VAR 0 1
69446: PPUSH
69447: CALL_OW 310
69451: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69452: LD_VAR 0 1
69456: PPUSH
69457: LD_STRING \
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: LD_INT 0
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: PUSH
69487: LD_STRING E
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_VAR 0 3
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PPUSH
69523: CALL_OW 446
// end ;
69527: LD_VAR 0 2
69531: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69532: LD_INT 0
69534: PPUSH
69535: PPUSH
// if not driver or not IsInUnit ( driver ) then
69536: LD_VAR 0 1
69540: NOT
69541: PUSH
69542: LD_VAR 0 1
69546: PPUSH
69547: CALL_OW 310
69551: NOT
69552: OR
69553: IFFALSE 69557
// exit ;
69555: GO 69647
// vehicle := IsInUnit ( driver ) ;
69557: LD_ADDR_VAR 0 3
69561: PUSH
69562: LD_VAR 0 1
69566: PPUSH
69567: CALL_OW 310
69571: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69572: LD_VAR 0 1
69576: PPUSH
69577: LD_STRING \
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: PUSH
69607: LD_STRING E
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: LD_VAR 0 3
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PPUSH
69643: CALL_OW 447
// end ;
69647: LD_VAR 0 2
69651: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69652: LD_INT 0
69654: PPUSH
69655: PPUSH
69656: PPUSH
// tmp := [ ] ;
69657: LD_ADDR_VAR 0 5
69661: PUSH
69662: EMPTY
69663: ST_TO_ADDR
// for i in units do
69664: LD_ADDR_VAR 0 4
69668: PUSH
69669: LD_VAR 0 1
69673: PUSH
69674: FOR_IN
69675: IFFALSE 69713
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69677: LD_ADDR_VAR 0 5
69681: PUSH
69682: LD_VAR 0 5
69686: PPUSH
69687: LD_VAR 0 5
69691: PUSH
69692: LD_INT 1
69694: PLUS
69695: PPUSH
69696: LD_VAR 0 4
69700: PPUSH
69701: CALL_OW 256
69705: PPUSH
69706: CALL_OW 2
69710: ST_TO_ADDR
69711: GO 69674
69713: POP
69714: POP
// if not tmp then
69715: LD_VAR 0 5
69719: NOT
69720: IFFALSE 69724
// exit ;
69722: GO 69772
// if asc then
69724: LD_VAR 0 2
69728: IFFALSE 69752
// result := SortListByListAsc ( units , tmp ) else
69730: LD_ADDR_VAR 0 3
69734: PUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_VAR 0 5
69744: PPUSH
69745: CALL_OW 76
69749: ST_TO_ADDR
69750: GO 69772
// result := SortListByListDesc ( units , tmp ) ;
69752: LD_ADDR_VAR 0 3
69756: PUSH
69757: LD_VAR 0 1
69761: PPUSH
69762: LD_VAR 0 5
69766: PPUSH
69767: CALL_OW 77
69771: ST_TO_ADDR
// end ;
69772: LD_VAR 0 3
69776: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69777: LD_INT 0
69779: PPUSH
69780: PPUSH
// task := GetTaskList ( mech ) ;
69781: LD_ADDR_VAR 0 4
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: CALL_OW 437
69795: ST_TO_ADDR
// if not task then
69796: LD_VAR 0 4
69800: NOT
69801: IFFALSE 69805
// exit ;
69803: GO 69847
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69805: LD_ADDR_VAR 0 3
69809: PUSH
69810: LD_VAR 0 4
69814: PUSH
69815: LD_INT 1
69817: ARRAY
69818: PUSH
69819: LD_INT 1
69821: ARRAY
69822: PUSH
69823: LD_STRING r
69825: EQUAL
69826: PUSH
69827: LD_VAR 0 4
69831: PUSH
69832: LD_INT 1
69834: ARRAY
69835: PUSH
69836: LD_INT 4
69838: ARRAY
69839: PUSH
69840: LD_VAR 0 2
69844: EQUAL
69845: AND
69846: ST_TO_ADDR
// end ;
69847: LD_VAR 0 3
69851: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69852: LD_INT 0
69854: PPUSH
// SetDir ( unit , d ) ;
69855: LD_VAR 0 1
69859: PPUSH
69860: LD_VAR 0 4
69864: PPUSH
69865: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69869: LD_VAR 0 1
69873: PPUSH
69874: LD_VAR 0 2
69878: PPUSH
69879: LD_VAR 0 3
69883: PPUSH
69884: LD_VAR 0 5
69888: PPUSH
69889: CALL_OW 48
// end ;
69893: LD_VAR 0 6
69897: RET
// export function ToNaturalNumber ( number ) ; begin
69898: LD_INT 0
69900: PPUSH
// result := number div 1 ;
69901: LD_ADDR_VAR 0 2
69905: PUSH
69906: LD_VAR 0 1
69910: PUSH
69911: LD_INT 1
69913: DIV
69914: ST_TO_ADDR
// if number < 0 then
69915: LD_VAR 0 1
69919: PUSH
69920: LD_INT 0
69922: LESS
69923: IFFALSE 69933
// result := 0 ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_INT 0
69932: ST_TO_ADDR
// end ;
69933: LD_VAR 0 2
69937: RET
// export function SortByClass ( units , class ) ; var un ; begin
69938: LD_INT 0
69940: PPUSH
69941: PPUSH
// if not units or not class then
69942: LD_VAR 0 1
69946: NOT
69947: PUSH
69948: LD_VAR 0 2
69952: NOT
69953: OR
69954: IFFALSE 69958
// exit ;
69956: GO 70053
// result := [ ] ;
69958: LD_ADDR_VAR 0 3
69962: PUSH
69963: EMPTY
69964: ST_TO_ADDR
// for un in units do
69965: LD_ADDR_VAR 0 4
69969: PUSH
69970: LD_VAR 0 1
69974: PUSH
69975: FOR_IN
69976: IFFALSE 70051
// if GetClass ( un ) = class then
69978: LD_VAR 0 4
69982: PPUSH
69983: CALL_OW 257
69987: PUSH
69988: LD_VAR 0 2
69992: EQUAL
69993: IFFALSE 70020
// result := Insert ( result , 1 , un ) else
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: LD_VAR 0 3
70004: PPUSH
70005: LD_INT 1
70007: PPUSH
70008: LD_VAR 0 4
70012: PPUSH
70013: CALL_OW 2
70017: ST_TO_ADDR
70018: GO 70049
// result := Replace ( result , result + 1 , un ) ;
70020: LD_ADDR_VAR 0 3
70024: PUSH
70025: LD_VAR 0 3
70029: PPUSH
70030: LD_VAR 0 3
70034: PUSH
70035: LD_INT 1
70037: PLUS
70038: PPUSH
70039: LD_VAR 0 4
70043: PPUSH
70044: CALL_OW 1
70048: ST_TO_ADDR
70049: GO 69975
70051: POP
70052: POP
// end ;
70053: LD_VAR 0 3
70057: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70058: LD_INT 0
70060: PPUSH
70061: PPUSH
70062: PPUSH
70063: PPUSH
70064: PPUSH
70065: PPUSH
70066: PPUSH
// result := [ ] ;
70067: LD_ADDR_VAR 0 4
70071: PUSH
70072: EMPTY
70073: ST_TO_ADDR
// if x - r < 0 then
70074: LD_VAR 0 1
70078: PUSH
70079: LD_VAR 0 3
70083: MINUS
70084: PUSH
70085: LD_INT 0
70087: LESS
70088: IFFALSE 70100
// min_x := 0 else
70090: LD_ADDR_VAR 0 8
70094: PUSH
70095: LD_INT 0
70097: ST_TO_ADDR
70098: GO 70116
// min_x := x - r ;
70100: LD_ADDR_VAR 0 8
70104: PUSH
70105: LD_VAR 0 1
70109: PUSH
70110: LD_VAR 0 3
70114: MINUS
70115: ST_TO_ADDR
// if y - r < 0 then
70116: LD_VAR 0 2
70120: PUSH
70121: LD_VAR 0 3
70125: MINUS
70126: PUSH
70127: LD_INT 0
70129: LESS
70130: IFFALSE 70142
// min_y := 0 else
70132: LD_ADDR_VAR 0 7
70136: PUSH
70137: LD_INT 0
70139: ST_TO_ADDR
70140: GO 70158
// min_y := y - r ;
70142: LD_ADDR_VAR 0 7
70146: PUSH
70147: LD_VAR 0 2
70151: PUSH
70152: LD_VAR 0 3
70156: MINUS
70157: ST_TO_ADDR
// max_x := x + r ;
70158: LD_ADDR_VAR 0 9
70162: PUSH
70163: LD_VAR 0 1
70167: PUSH
70168: LD_VAR 0 3
70172: PLUS
70173: ST_TO_ADDR
// max_y := y + r ;
70174: LD_ADDR_VAR 0 10
70178: PUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_VAR 0 3
70188: PLUS
70189: ST_TO_ADDR
// for _x = min_x to max_x do
70190: LD_ADDR_VAR 0 5
70194: PUSH
70195: DOUBLE
70196: LD_VAR 0 8
70200: DEC
70201: ST_TO_ADDR
70202: LD_VAR 0 9
70206: PUSH
70207: FOR_TO
70208: IFFALSE 70309
// for _y = min_y to max_y do
70210: LD_ADDR_VAR 0 6
70214: PUSH
70215: DOUBLE
70216: LD_VAR 0 7
70220: DEC
70221: ST_TO_ADDR
70222: LD_VAR 0 10
70226: PUSH
70227: FOR_TO
70228: IFFALSE 70305
// begin if not ValidHex ( _x , _y ) then
70230: LD_VAR 0 5
70234: PPUSH
70235: LD_VAR 0 6
70239: PPUSH
70240: CALL_OW 488
70244: NOT
70245: IFFALSE 70249
// continue ;
70247: GO 70227
// if GetResourceTypeXY ( _x , _y ) then
70249: LD_VAR 0 5
70253: PPUSH
70254: LD_VAR 0 6
70258: PPUSH
70259: CALL_OW 283
70263: IFFALSE 70303
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70265: LD_ADDR_VAR 0 4
70269: PUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: LD_VAR 0 4
70279: PUSH
70280: LD_INT 1
70282: PLUS
70283: PPUSH
70284: LD_VAR 0 5
70288: PUSH
70289: LD_VAR 0 6
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PPUSH
70298: CALL_OW 1
70302: ST_TO_ADDR
// end ;
70303: GO 70227
70305: POP
70306: POP
70307: GO 70207
70309: POP
70310: POP
// end ;
70311: LD_VAR 0 4
70315: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70316: LD_INT 0
70318: PPUSH
70319: PPUSH
70320: PPUSH
70321: PPUSH
70322: PPUSH
70323: PPUSH
70324: PPUSH
70325: PPUSH
// if not units then
70326: LD_VAR 0 1
70330: NOT
70331: IFFALSE 70335
// exit ;
70333: GO 70861
// result := UnitFilter ( units , [ f_ok ] ) ;
70335: LD_ADDR_VAR 0 3
70339: PUSH
70340: LD_VAR 0 1
70344: PPUSH
70345: LD_INT 50
70347: PUSH
70348: EMPTY
70349: LIST
70350: PPUSH
70351: CALL_OW 72
70355: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70356: LD_ADDR_VAR 0 8
70360: PUSH
70361: LD_VAR 0 1
70365: PUSH
70366: LD_INT 1
70368: ARRAY
70369: PPUSH
70370: CALL_OW 255
70374: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70375: LD_ADDR_VAR 0 10
70379: PUSH
70380: LD_INT 29
70382: PUSH
70383: LD_EXP 111
70387: PUSH
70388: LD_INT 49
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: ST_TO_ADDR
// if not result then
70396: LD_VAR 0 3
70400: NOT
70401: IFFALSE 70405
// exit ;
70403: GO 70861
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70405: LD_ADDR_VAR 0 5
70409: PUSH
70410: LD_INT 81
70412: PUSH
70413: LD_VAR 0 8
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PPUSH
70422: CALL_OW 69
70426: ST_TO_ADDR
// for i in result do
70427: LD_ADDR_VAR 0 4
70431: PUSH
70432: LD_VAR 0 3
70436: PUSH
70437: FOR_IN
70438: IFFALSE 70859
// begin tag := GetTag ( i ) + 1 ;
70440: LD_ADDR_VAR 0 9
70444: PUSH
70445: LD_VAR 0 4
70449: PPUSH
70450: CALL_OW 110
70454: PUSH
70455: LD_INT 1
70457: PLUS
70458: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70459: LD_ADDR_VAR 0 7
70463: PUSH
70464: LD_VAR 0 4
70468: PPUSH
70469: CALL_OW 250
70473: PPUSH
70474: LD_VAR 0 4
70478: PPUSH
70479: CALL_OW 251
70483: PPUSH
70484: LD_INT 6
70486: PPUSH
70487: CALL 70058 0 3
70491: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70492: LD_VAR 0 4
70496: PPUSH
70497: CALL_OW 247
70501: PUSH
70502: LD_INT 2
70504: EQUAL
70505: PUSH
70506: LD_VAR 0 7
70510: AND
70511: PUSH
70512: LD_VAR 0 4
70516: PPUSH
70517: CALL_OW 264
70521: PUSH
70522: LD_VAR 0 10
70526: IN
70527: NOT
70528: AND
70529: IFFALSE 70568
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70531: LD_VAR 0 4
70535: PPUSH
70536: LD_VAR 0 7
70540: PUSH
70541: LD_INT 1
70543: ARRAY
70544: PUSH
70545: LD_INT 1
70547: ARRAY
70548: PPUSH
70549: LD_VAR 0 7
70553: PUSH
70554: LD_INT 1
70556: ARRAY
70557: PUSH
70558: LD_INT 2
70560: ARRAY
70561: PPUSH
70562: CALL_OW 116
70566: GO 70857
// if path > tag then
70568: LD_VAR 0 2
70572: PUSH
70573: LD_VAR 0 9
70577: GREATER
70578: IFFALSE 70786
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70580: LD_ADDR_VAR 0 6
70584: PUSH
70585: LD_VAR 0 5
70589: PPUSH
70590: LD_INT 91
70592: PUSH
70593: LD_VAR 0 4
70597: PUSH
70598: LD_INT 8
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: PPUSH
70606: CALL_OW 72
70610: ST_TO_ADDR
// if nearEnemy then
70611: LD_VAR 0 6
70615: IFFALSE 70684
// begin if GetWeapon ( i ) = ru_time_lapser then
70617: LD_VAR 0 4
70621: PPUSH
70622: CALL_OW 264
70626: PUSH
70627: LD_INT 49
70629: EQUAL
70630: IFFALSE 70658
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70632: LD_VAR 0 4
70636: PPUSH
70637: LD_VAR 0 6
70641: PPUSH
70642: LD_VAR 0 4
70646: PPUSH
70647: CALL_OW 74
70651: PPUSH
70652: CALL_OW 112
70656: GO 70682
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70658: LD_VAR 0 4
70662: PPUSH
70663: LD_VAR 0 6
70667: PPUSH
70668: LD_VAR 0 4
70672: PPUSH
70673: CALL_OW 74
70677: PPUSH
70678: CALL_OW 115
// end else
70682: GO 70784
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70684: LD_VAR 0 4
70688: PPUSH
70689: LD_VAR 0 2
70693: PUSH
70694: LD_VAR 0 9
70698: ARRAY
70699: PUSH
70700: LD_INT 1
70702: ARRAY
70703: PPUSH
70704: LD_VAR 0 2
70708: PUSH
70709: LD_VAR 0 9
70713: ARRAY
70714: PUSH
70715: LD_INT 2
70717: ARRAY
70718: PPUSH
70719: CALL_OW 297
70723: PUSH
70724: LD_INT 6
70726: GREATER
70727: IFFALSE 70770
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70729: LD_VAR 0 4
70733: PPUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_VAR 0 9
70743: ARRAY
70744: PUSH
70745: LD_INT 1
70747: ARRAY
70748: PPUSH
70749: LD_VAR 0 2
70753: PUSH
70754: LD_VAR 0 9
70758: ARRAY
70759: PUSH
70760: LD_INT 2
70762: ARRAY
70763: PPUSH
70764: CALL_OW 114
70768: GO 70784
// SetTag ( i , tag ) ;
70770: LD_VAR 0 4
70774: PPUSH
70775: LD_VAR 0 9
70779: PPUSH
70780: CALL_OW 109
// end else
70784: GO 70857
// if enemy then
70786: LD_VAR 0 5
70790: IFFALSE 70857
// begin if GetWeapon ( i ) = ru_time_lapser then
70792: LD_VAR 0 4
70796: PPUSH
70797: CALL_OW 264
70801: PUSH
70802: LD_INT 49
70804: EQUAL
70805: IFFALSE 70833
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 5
70816: PPUSH
70817: LD_VAR 0 4
70821: PPUSH
70822: CALL_OW 74
70826: PPUSH
70827: CALL_OW 112
70831: GO 70857
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70833: LD_VAR 0 4
70837: PPUSH
70838: LD_VAR 0 5
70842: PPUSH
70843: LD_VAR 0 4
70847: PPUSH
70848: CALL_OW 74
70852: PPUSH
70853: CALL_OW 115
// end ; end ;
70857: GO 70437
70859: POP
70860: POP
// end ;
70861: LD_VAR 0 3
70865: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70866: LD_INT 0
70868: PPUSH
70869: PPUSH
70870: PPUSH
// if not unit or IsInUnit ( unit ) then
70871: LD_VAR 0 1
70875: NOT
70876: PUSH
70877: LD_VAR 0 1
70881: PPUSH
70882: CALL_OW 310
70886: OR
70887: IFFALSE 70891
// exit ;
70889: GO 70982
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70891: LD_ADDR_VAR 0 4
70895: PUSH
70896: LD_VAR 0 1
70900: PPUSH
70901: CALL_OW 250
70905: PPUSH
70906: LD_VAR 0 2
70910: PPUSH
70911: LD_INT 1
70913: PPUSH
70914: CALL_OW 272
70918: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70919: LD_ADDR_VAR 0 5
70923: PUSH
70924: LD_VAR 0 1
70928: PPUSH
70929: CALL_OW 251
70933: PPUSH
70934: LD_VAR 0 2
70938: PPUSH
70939: LD_INT 1
70941: PPUSH
70942: CALL_OW 273
70946: ST_TO_ADDR
// if ValidHex ( x , y ) then
70947: LD_VAR 0 4
70951: PPUSH
70952: LD_VAR 0 5
70956: PPUSH
70957: CALL_OW 488
70961: IFFALSE 70982
// ComTurnXY ( unit , x , y ) ;
70963: LD_VAR 0 1
70967: PPUSH
70968: LD_VAR 0 4
70972: PPUSH
70973: LD_VAR 0 5
70977: PPUSH
70978: CALL_OW 118
// end ;
70982: LD_VAR 0 3
70986: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70987: LD_INT 0
70989: PPUSH
70990: PPUSH
// result := false ;
70991: LD_ADDR_VAR 0 3
70995: PUSH
70996: LD_INT 0
70998: ST_TO_ADDR
// if not units then
70999: LD_VAR 0 2
71003: NOT
71004: IFFALSE 71008
// exit ;
71006: GO 71053
// for i in units do
71008: LD_ADDR_VAR 0 4
71012: PUSH
71013: LD_VAR 0 2
71017: PUSH
71018: FOR_IN
71019: IFFALSE 71051
// if See ( side , i ) then
71021: LD_VAR 0 1
71025: PPUSH
71026: LD_VAR 0 4
71030: PPUSH
71031: CALL_OW 292
71035: IFFALSE 71049
// begin result := true ;
71037: LD_ADDR_VAR 0 3
71041: PUSH
71042: LD_INT 1
71044: ST_TO_ADDR
// exit ;
71045: POP
71046: POP
71047: GO 71053
// end ;
71049: GO 71018
71051: POP
71052: POP
// end ;
71053: LD_VAR 0 3
71057: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71058: LD_INT 0
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
// if not unit or not points then
71064: LD_VAR 0 1
71068: NOT
71069: PUSH
71070: LD_VAR 0 2
71074: NOT
71075: OR
71076: IFFALSE 71080
// exit ;
71078: GO 71170
// dist := 99999 ;
71080: LD_ADDR_VAR 0 5
71084: PUSH
71085: LD_INT 99999
71087: ST_TO_ADDR
// for i in points do
71088: LD_ADDR_VAR 0 4
71092: PUSH
71093: LD_VAR 0 2
71097: PUSH
71098: FOR_IN
71099: IFFALSE 71168
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71101: LD_ADDR_VAR 0 6
71105: PUSH
71106: LD_VAR 0 1
71110: PPUSH
71111: LD_VAR 0 4
71115: PUSH
71116: LD_INT 1
71118: ARRAY
71119: PPUSH
71120: LD_VAR 0 4
71124: PUSH
71125: LD_INT 2
71127: ARRAY
71128: PPUSH
71129: CALL_OW 297
71133: ST_TO_ADDR
// if tmpDist < dist then
71134: LD_VAR 0 6
71138: PUSH
71139: LD_VAR 0 5
71143: LESS
71144: IFFALSE 71166
// begin result := i ;
71146: LD_ADDR_VAR 0 3
71150: PUSH
71151: LD_VAR 0 4
71155: ST_TO_ADDR
// dist := tmpDist ;
71156: LD_ADDR_VAR 0 5
71160: PUSH
71161: LD_VAR 0 6
71165: ST_TO_ADDR
// end ; end ;
71166: GO 71098
71168: POP
71169: POP
// end ;
71170: LD_VAR 0 3
71174: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71175: LD_INT 0
71177: PPUSH
// uc_side := side ;
71178: LD_ADDR_OWVAR 20
71182: PUSH
71183: LD_VAR 0 1
71187: ST_TO_ADDR
// uc_nation := 3 ;
71188: LD_ADDR_OWVAR 21
71192: PUSH
71193: LD_INT 3
71195: ST_TO_ADDR
// vc_chassis := 25 ;
71196: LD_ADDR_OWVAR 37
71200: PUSH
71201: LD_INT 25
71203: ST_TO_ADDR
// vc_engine := engine_siberite ;
71204: LD_ADDR_OWVAR 39
71208: PUSH
71209: LD_INT 3
71211: ST_TO_ADDR
// vc_control := control_computer ;
71212: LD_ADDR_OWVAR 38
71216: PUSH
71217: LD_INT 3
71219: ST_TO_ADDR
// vc_weapon := 59 ;
71220: LD_ADDR_OWVAR 40
71224: PUSH
71225: LD_INT 59
71227: ST_TO_ADDR
// result := CreateVehicle ;
71228: LD_ADDR_VAR 0 5
71232: PUSH
71233: CALL_OW 45
71237: ST_TO_ADDR
// SetDir ( result , d ) ;
71238: LD_VAR 0 5
71242: PPUSH
71243: LD_VAR 0 4
71247: PPUSH
71248: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71252: LD_VAR 0 5
71256: PPUSH
71257: LD_VAR 0 2
71261: PPUSH
71262: LD_VAR 0 3
71266: PPUSH
71267: LD_INT 0
71269: PPUSH
71270: CALL_OW 48
// end ;
71274: LD_VAR 0 5
71278: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71279: LD_INT 0
71281: PPUSH
71282: PPUSH
71283: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71284: LD_ADDR_VAR 0 2
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: LD_INT 0
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71307: LD_VAR 0 1
71311: NOT
71312: PUSH
71313: LD_VAR 0 1
71317: PPUSH
71318: CALL_OW 264
71322: PUSH
71323: LD_INT 12
71325: PUSH
71326: LD_INT 51
71328: PUSH
71329: LD_INT 32
71331: PUSH
71332: LD_EXP 108
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: IN
71343: NOT
71344: OR
71345: IFFALSE 71349
// exit ;
71347: GO 71447
// for i := 1 to 3 do
71349: LD_ADDR_VAR 0 3
71353: PUSH
71354: DOUBLE
71355: LD_INT 1
71357: DEC
71358: ST_TO_ADDR
71359: LD_INT 3
71361: PUSH
71362: FOR_TO
71363: IFFALSE 71445
// begin tmp := GetCargo ( cargo , i ) ;
71365: LD_ADDR_VAR 0 4
71369: PUSH
71370: LD_VAR 0 1
71374: PPUSH
71375: LD_VAR 0 3
71379: PPUSH
71380: CALL_OW 289
71384: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71385: LD_ADDR_VAR 0 2
71389: PUSH
71390: LD_VAR 0 2
71394: PPUSH
71395: LD_VAR 0 3
71399: PPUSH
71400: LD_VAR 0 4
71404: PPUSH
71405: CALL_OW 1
71409: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71410: LD_ADDR_VAR 0 2
71414: PUSH
71415: LD_VAR 0 2
71419: PPUSH
71420: LD_INT 4
71422: PPUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_INT 4
71430: ARRAY
71431: PUSH
71432: LD_VAR 0 4
71436: PLUS
71437: PPUSH
71438: CALL_OW 1
71442: ST_TO_ADDR
// end ;
71443: GO 71362
71445: POP
71446: POP
// end ;
71447: LD_VAR 0 2
71451: RET
// export function Length ( array ) ; begin
71452: LD_INT 0
71454: PPUSH
// result := array + 0 ;
71455: LD_ADDR_VAR 0 2
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 0
71467: PLUS
71468: ST_TO_ADDR
// end ;
71469: LD_VAR 0 2
71473: RET
// export function PrepareArray ( array ) ; begin
71474: LD_INT 0
71476: PPUSH
// result := array diff 0 ;
71477: LD_ADDR_VAR 0 2
71481: PUSH
71482: LD_VAR 0 1
71486: PUSH
71487: LD_INT 0
71489: DIFF
71490: ST_TO_ADDR
// if not result [ 1 ] then
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 1
71498: ARRAY
71499: NOT
71500: IFFALSE 71520
// result := Delete ( result , 1 ) ;
71502: LD_ADDR_VAR 0 2
71506: PUSH
71507: LD_VAR 0 2
71511: PPUSH
71512: LD_INT 1
71514: PPUSH
71515: CALL_OW 3
71519: ST_TO_ADDR
// end ; end_of_file
71520: LD_VAR 0 2
71524: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71525: LD_VAR 0 1
71529: PUSH
71530: LD_INT 200
71532: DOUBLE
71533: GREATEREQUAL
71534: IFFALSE 71542
71536: LD_INT 299
71538: DOUBLE
71539: LESSEQUAL
71540: IFTRUE 71544
71542: GO 71576
71544: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71545: LD_VAR 0 1
71549: PPUSH
71550: LD_VAR 0 2
71554: PPUSH
71555: LD_VAR 0 3
71559: PPUSH
71560: LD_VAR 0 4
71564: PPUSH
71565: LD_VAR 0 5
71569: PPUSH
71570: CALL 10565 0 5
71574: GO 71653
71576: LD_INT 300
71578: DOUBLE
71579: GREATEREQUAL
71580: IFFALSE 71588
71582: LD_INT 399
71584: DOUBLE
71585: LESSEQUAL
71586: IFTRUE 71590
71588: GO 71652
71590: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71591: LD_VAR 0 1
71595: PPUSH
71596: LD_VAR 0 2
71600: PPUSH
71601: LD_VAR 0 3
71605: PPUSH
71606: LD_VAR 0 4
71610: PPUSH
71611: LD_VAR 0 5
71615: PPUSH
71616: LD_VAR 0 6
71620: PPUSH
71621: LD_VAR 0 7
71625: PPUSH
71626: LD_VAR 0 8
71630: PPUSH
71631: LD_VAR 0 9
71635: PPUSH
71636: LD_VAR 0 10
71640: PPUSH
71641: LD_VAR 0 11
71645: PPUSH
71646: CALL 26856 0 11
71650: GO 71653
71652: POP
// end ;
71653: PPOPN 11
71655: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71656: LD_VAR 0 1
71660: PPUSH
71661: LD_VAR 0 2
71665: PPUSH
71666: LD_VAR 0 3
71670: PPUSH
71671: LD_VAR 0 4
71675: PPUSH
71676: LD_VAR 0 5
71680: PPUSH
71681: CALL 10301 0 5
// end ; end_of_file
71685: PPOPN 5
71687: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71688: LD_VAR 0 1
71692: PPUSH
71693: LD_VAR 0 2
71697: PPUSH
71698: LD_VAR 0 3
71702: PPUSH
71703: LD_VAR 0 4
71707: PPUSH
71708: LD_VAR 0 5
71712: PPUSH
71713: LD_VAR 0 6
71717: PPUSH
71718: CALL 14549 0 6
// end ;
71722: PPOPN 6
71724: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71725: LD_INT 0
71727: PPUSH
// begin if not units then
71728: LD_VAR 0 1
71732: NOT
71733: IFFALSE 71737
// exit ;
71735: GO 71737
// end ;
71737: PPOPN 7
71739: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71740: CALL 14520 0 0
// end ;
71744: PPOPN 1
71746: END
