// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7145 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6932 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1941 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9283 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5742 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: IFFALSE 1586
1580: PUSH
1581: LD_EXP 9
1585: AND
1586: IFFALSE 1733
1588: GO 1590
1590: DISABLE
1591: LD_INT 0
1593: PPUSH
// begin enable ;
1594: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1595: LD_ADDR_EXP 31
1599: PUSH
1600: LD_EXP 31
1604: PUSH
1605: LD_INT 1
1607: PLUS
1608: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1609: LD_ADDR_VAR 0 1
1613: PUSH
1614: DOUBLE
1615: LD_INT 1
1617: DEC
1618: ST_TO_ADDR
1619: LD_INT 4
1621: PUSH
1622: LD_INT 5
1624: PUSH
1625: LD_INT 5
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_OWVAR 67
1637: ARRAY
1638: PUSH
1639: LD_EXP 31
1643: PLUS
1644: PUSH
1645: FOR_TO
1646: IFFALSE 1676
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1648: LD_INT 1
1650: PUSH
1651: LD_INT 3
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 1
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: ARRAY
1669: PPUSH
1670: CALL 1133 0 1
1674: GO 1645
1676: POP
1677: POP
// repeat wait ( 0 0$01 ) ;
1678: LD_INT 35
1680: PPUSH
1681: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1685: LD_EXP 32
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 5
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_OWVAR 67
1708: ARRAY
1709: PUSH
1710: LD_EXP 31
1714: PLUS
1715: GREATEREQUAL
1716: IFFALSE 1678
// AddComMoveXY ( al_force , 143 , 178 ) ;
1718: LD_EXP 32
1722: PPUSH
1723: LD_INT 143
1725: PPUSH
1726: LD_INT 178
1728: PPUSH
1729: CALL_OW 171
// end ;
1733: PPOPN 1
1735: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1736: LD_INT 6
1738: PPUSH
1739: LD_INT 22
1741: PUSH
1742: LD_INT 7
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL_OW 70
1753: IFFALSE 1833
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
// begin enable ;
1761: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1762: LD_ADDR_VAR 0 1
1766: PUSH
1767: LD_INT 6
1769: PPUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 7
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PPUSH
1780: CALL_OW 70
1784: PUSH
1785: FOR_IN
1786: IFFALSE 1831
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: LD_INT 81
1795: PUSH
1796: LD_VAR 0 1
1800: PPUSH
1801: CALL_OW 255
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PPUSH
1810: CALL_OW 69
1814: PPUSH
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 74
1824: PPUSH
1825: CALL_OW 115
1829: GO 1785
1831: POP
1832: POP
// end ;
1833: PPOPN 1
1835: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1836: LD_EXP 9
1840: IFFALSE 1938
1842: GO 1844
1844: DISABLE
1845: LD_INT 0
1847: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1848: LD_ADDR_VAR 0 1
1852: PUSH
1853: LD_INT 18900
1855: PUSH
1856: LD_INT 18200
1858: PUSH
1859: LD_INT 16450
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: LD_OWVAR 67
1871: ARRAY
1872: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1873: CALL 8646 0 0
// wait ( reload_time / 2 ) ;
1877: LD_VAR 0 1
1881: PUSH
1882: LD_INT 2
1884: DIVREAL
1885: PPUSH
1886: CALL_OW 67
// ActiveArtifact2 ( ) ;
1890: CALL 9091 0 0
// wait ( reload_time / 2 ) ;
1894: LD_VAR 0 1
1898: PUSH
1899: LD_INT 2
1901: DIVREAL
1902: PPUSH
1903: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 7
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 8
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: NOT
1936: IFFALSE 1873
// end ; end_of_file
1938: PPOPN 1
1940: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1941: LD_INT 0
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
// uc_side := 8 ;
1949: LD_ADDR_OWVAR 20
1953: PUSH
1954: LD_INT 8
1956: ST_TO_ADDR
// uc_nation := 2 ;
1957: LD_ADDR_OWVAR 21
1961: PUSH
1962: LD_INT 2
1964: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_INT 7
1972: PUSH
1973: LD_INT 8
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_OWVAR 67
1988: ARRAY
1989: ST_TO_ADDR
// dep := ar_base ;
1990: LD_ADDR_VAR 0 5
1994: PUSH
1995: LD_INT 57
1997: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1998: LD_ADDR_VAR 0 6
2002: PUSH
2003: LD_INT 22
2005: PUSH
2006: LD_INT 8
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 30
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PPUSH
2027: CALL_OW 69
2031: PUSH
2032: LD_INT 1
2034: ARRAY
2035: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2036: LD_VAR 0 5
2040: PPUSH
2041: CALL_OW 274
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 999999
2051: PPUSH
2052: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2056: LD_VAR 0 5
2060: PPUSH
2061: CALL_OW 274
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: LD_INT 10000
2071: PPUSH
2072: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2076: LD_VAR 0 5
2080: PPUSH
2081: CALL_OW 274
2085: PPUSH
2086: LD_INT 3
2088: PPUSH
2089: LD_INT 10000
2091: PPUSH
2092: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2096: LD_INT 68
2098: PPUSH
2099: LD_INT 224
2101: PPUSH
2102: LD_INT 5
2104: PPUSH
2105: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2109: LD_INT 1
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 6
2117: PPUSH
2118: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2122: LD_ADDR_OWVAR 26
2126: PUSH
2127: LD_STRING Nicolas Vervecken
2129: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2130: LD_ADDR_OWVAR 33
2134: PUSH
2135: LD_STRING SecondCharsGal
2137: ST_TO_ADDR
// hc_face_number := 3 ;
2138: LD_ADDR_OWVAR 34
2142: PUSH
2143: LD_INT 3
2145: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2146: LD_ADDR_OWVAR 29
2150: PUSH
2151: LD_INT 11
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: ST_TO_ADDR
// Vervecken := CreateHuman ;
2161: LD_ADDR_EXP 3
2165: PUSH
2166: CALL_OW 44
2170: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2171: LD_EXP 3
2175: PPUSH
2176: LD_VAR 0 5
2180: PPUSH
2181: CALL_OW 52
// InitHc_All ( ) ;
2185: CALL_OW 584
// for i = 1 to 4 do
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: DOUBLE
2195: LD_INT 1
2197: DEC
2198: ST_TO_ADDR
2199: LD_INT 4
2201: PUSH
2202: FOR_TO
2203: IFFALSE 2264
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2205: LD_INT 0
2207: PPUSH
2208: LD_INT 9
2210: PPUSH
2211: LD_VAR 0 4
2215: PPUSH
2216: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2220: CALL_OW 44
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_INT 8
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 30
2237: PUSH
2238: LD_INT 5
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: LD_INT 1
2256: ARRAY
2257: PPUSH
2258: CALL_OW 52
// end ;
2262: GO 2202
2264: POP
2265: POP
// for i = 1 to 2 do
2266: LD_ADDR_VAR 0 2
2270: PUSH
2271: DOUBLE
2272: LD_INT 1
2274: DEC
2275: ST_TO_ADDR
2276: LD_INT 2
2278: PUSH
2279: FOR_TO
2280: IFFALSE 2341
// begin PrepareHuman ( false , 4 , skill ) ;
2282: LD_INT 0
2284: PPUSH
2285: LD_INT 4
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2297: CALL_OW 44
2301: PPUSH
2302: LD_INT 22
2304: PUSH
2305: LD_INT 8
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 30
2314: PUSH
2315: LD_INT 8
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PPUSH
2326: CALL_OW 69
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: CALL_OW 52
// end ;
2339: GO 2279
2341: POP
2342: POP
// for i = 1 to 6 do
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: DOUBLE
2349: LD_INT 1
2351: DEC
2352: ST_TO_ADDR
2353: LD_INT 6
2355: PUSH
2356: FOR_TO
2357: IFFALSE 2394
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2359: LD_INT 0
2361: PPUSH
2362: LD_INT 3
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: PLUS
2373: PPUSH
2374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2378: CALL_OW 44
2382: PPUSH
2383: LD_VAR 0 6
2387: PPUSH
2388: CALL_OW 52
// end ;
2392: GO 2356
2394: POP
2395: POP
// uc_nation := 0 ;
2396: LD_ADDR_OWVAR 21
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: FOR_IN
2439: IFFALSE 2476
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2441: LD_INT 0
2443: PPUSH
2444: LD_INT 15
2446: PPUSH
2447: LD_VAR 0 4
2451: PUSH
2452: LD_INT 1
2454: PLUS
2455: PPUSH
2456: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2460: CALL_OW 44
2464: PPUSH
2465: LD_VAR 0 2
2469: PPUSH
2470: CALL_OW 52
// end ;
2474: GO 2438
2476: POP
2477: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2478: LD_INT 0
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: LD_INT 10
2486: PPUSH
2487: CALL_OW 380
// un := CreateHuman ;
2491: LD_ADDR_VAR 0 3
2495: PUSH
2496: CALL_OW 44
2500: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 175
2508: PPUSH
2509: LD_INT 128
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2519: LD_VAR 0 3
2523: PPUSH
2524: LD_INT 115
2526: PPUSH
2527: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 1
2536: PPUSH
2537: LD_INT 10
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 240
2561: PPUSH
2562: LD_INT 128
2564: PPUSH
2565: CALL_OW 428
2569: PPUSH
2570: CALL_OW 52
// un := CreateHuman ;
2574: LD_ADDR_VAR 0 3
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2584: LD_VAR 0 3
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 260
2603: PPUSH
2604: LD_INT 147
2606: PPUSH
2607: CALL_OW 428
2611: PPUSH
2612: CALL_OW 52
// for i = 1 to 2 do
2616: LD_ADDR_VAR 0 2
2620: PUSH
2621: DOUBLE
2622: LD_INT 1
2624: DEC
2625: ST_TO_ADDR
2626: LD_INT 2
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2655
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2632: LD_VAR 0 6
2636: PPUSH
2637: LD_INT 14
2639: PPUSH
2640: LD_INT 2
2642: PPUSH
2643: LD_INT 1
2645: PPUSH
2646: LD_INT 31
2648: PPUSH
2649: CALL_OW 185
2653: GO 2629
2655: POP
2656: POP
// end ;
2657: LD_VAR 0 1
2661: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2662: LD_INT 0
2664: PPUSH
2665: PPUSH
// for i = 1 to num do
2666: LD_ADDR_VAR 0 3
2670: PUSH
2671: DOUBLE
2672: LD_INT 1
2674: DEC
2675: ST_TO_ADDR
2676: LD_VAR 0 1
2680: PUSH
2681: FOR_TO
2682: IFFALSE 2754
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2684: LD_INT 22
2686: PUSH
2687: LD_INT 8
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 3
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PPUSH
2717: LD_INT 11
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_INT 23
2728: PUSH
2729: LD_INT 24
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: CALL_OW 185
2752: GO 2681
2754: POP
2755: POP
// end ;
2756: LD_VAR 0 2
2760: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2761: LD_INT 0
2763: PPUSH
2764: PPUSH
2765: PPUSH
// uc_side := 8 ;
2766: LD_ADDR_OWVAR 20
2770: PUSH
2771: LD_INT 8
2773: ST_TO_ADDR
// uc_nation := 0 ;
2774: LD_ADDR_OWVAR 21
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// hc_class := 17 ;
2782: LD_ADDR_OWVAR 28
2786: PUSH
2787: LD_INT 17
2789: ST_TO_ADDR
// hc_gallery :=  ;
2790: LD_ADDR_OWVAR 33
2794: PUSH
2795: LD_STRING 
2797: ST_TO_ADDR
// hc_name :=  ;
2798: LD_ADDR_OWVAR 26
2802: PUSH
2803: LD_STRING 
2805: ST_TO_ADDR
// hc_importance := 0 ;
2806: LD_ADDR_OWVAR 32
2810: PUSH
2811: LD_INT 0
2813: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 10
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// if ar_base then
2837: LD_INT 57
2839: IFFALSE 2884
// begin un := CreateHuman ;
2841: LD_ADDR_VAR 0 3
2845: PUSH
2846: CALL_OW 44
2850: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2851: LD_VAR 0 3
2855: PPUSH
2856: LD_INT 57
2858: PPUSH
2859: CALL_OW 52
// ComExitBuilding ( un ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_INT 68
2879: PPUSH
2880: CALL_OW 180
// end ; end ;
2884: LD_VAR 0 1
2888: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
// legion_force := [ ] ;
2893: LD_ADDR_EXP 33
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// l_allow_attack := false ;
2900: LD_ADDR_EXP 34
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: CALL 2662 0 1
// repeat wait ( 0 0$01 ) ;
2917: LD_INT 35
2919: PPUSH
2920: CALL_OW 67
// until legion_force >= n1 ;
2924: LD_EXP 33
2928: PUSH
2929: LD_VAR 0 1
2933: GREATEREQUAL
2934: IFFALSE 2917
// l_allow_attack := true ;
2936: LD_ADDR_EXP 34
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// for i = 1 to n2 do
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: DOUBLE
2950: LD_INT 1
2952: DEC
2953: ST_TO_ADDR
2954: LD_VAR 0 2
2958: PUSH
2959: FOR_TO
2960: IFFALSE 2968
// begin AddKamikaze ( ) ;
2962: CALL 2761 0 0
// end ;
2966: GO 2959
2968: POP
2969: POP
// end ;
2970: LD_VAR 0 3
2974: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2975: LD_INT 22
2977: PUSH
2978: LD_INT 8
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 50
2987: PUSH
2988: EMPTY
2989: LIST
2990: PUSH
2991: LD_INT 33
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: LD_INT 61
3006: PUSH
3007: EMPTY
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: IFFALSE 3104
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
// begin enable ;
3032: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3033: LD_ADDR_VAR 0 1
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 8
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 50
3050: PUSH
3051: EMPTY
3052: LIST
3053: PUSH
3054: LD_INT 33
3056: PUSH
3057: LD_INT 2
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: LD_INT 61
3069: PUSH
3070: EMPTY
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: PPUSH
3083: CALL_OW 69
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3102
// Connect ( i ) ;
3091: LD_VAR 0 1
3095: PPUSH
3096: CALL 40279 0 1
3100: GO 3088
3102: POP
3103: POP
// end ;
3104: PPOPN 1
3106: END
// every 5 5$00 trigger legion_attacks_active do
3107: LD_EXP 7
3111: IFFALSE 3163
3113: GO 3115
3115: DISABLE
// begin enable ;
3116: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3117: LD_INT 5250
3119: PUSH
3120: LD_INT 2100
3122: PUSH
3123: LD_INT 1050
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: PPUSH
3137: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3141: LD_EXP 8
3145: PUSH
3146: LD_INT 2
3148: MINUS
3149: PUSH
3150: LD_OWVAR 67
3154: PLUS
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL 2889 0 2
// end ;
3163: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3164: LD_EXP 34
3168: IFFALSE 3211
3170: PUSH
3171: LD_EXP 33
3175: PPUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 60
3181: PUSH
3182: EMPTY
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 61
3191: PUSH
3192: EMPTY
3193: LIST
3194: PUSH
3195: LD_INT 50
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 72
3210: AND
3211: IFFALSE 3342
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
// begin enable ;
3220: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_EXP 33
3230: PPUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 60
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 61
3246: PUSH
3247: EMPTY
3248: LIST
3249: PUSH
3250: LD_INT 50
3252: PUSH
3253: EMPTY
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 72
3265: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3266: LD_ADDR_VAR 0 1
3270: PUSH
3271: LD_INT 150
3273: PUSH
3274: LD_INT 93
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 232
3283: PUSH
3284: LD_INT 88
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 209
3293: PUSH
3294: LD_INT 50
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 208
3303: PUSH
3304: LD_INT 29
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 191
3313: PUSH
3314: LD_INT 17
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3328: LD_VAR 0 2
3332: PPUSH
3333: LD_VAR 0 1
3337: PPUSH
3338: CALL 72733 0 2
// end ;
3342: PPOPN 2
3344: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3345: LD_INT 6
3347: PPUSH
3348: LD_INT 22
3350: PUSH
3351: LD_INT 8
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 25
3360: PUSH
3361: LD_INT 17
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PPUSH
3372: CALL_OW 70
3376: IFFALSE 3463
3378: GO 3380
3380: DISABLE
3381: LD_INT 0
3383: PPUSH
// begin enable ;
3384: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3385: LD_ADDR_VAR 0 1
3389: PUSH
3390: LD_INT 6
3392: PPUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 8
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 17
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 70
3421: PUSH
3422: FOR_IN
3423: IFFALSE 3461
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3425: LD_VAR 0 1
3429: PPUSH
3430: LD_INT 22
3432: PUSH
3433: LD_INT 6
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: PPUSH
3445: LD_VAR 0 1
3449: PPUSH
3450: CALL_OW 74
3454: PPUSH
3455: CALL_OW 115
3459: GO 3422
3461: POP
3462: POP
// end ;
3463: PPOPN 1
3465: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3466: LD_INT 68
3468: IFFALSE 3699
3470: GO 3472
3472: DISABLE
3473: LD_INT 0
3475: PPUSH
3476: PPUSH
3477: PPUSH
// begin enable ;
3478: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: LD_INT 224
3486: PUSH
3487: LD_INT 5
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 160
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 228
3506: PUSH
3507: LD_INT 56
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 271
3516: PUSH
3517: LD_INT 87
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: ST_TO_ADDR
// for i = 1 to 3 do
3530: LD_ADDR_VAR 0 3
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 3
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3560
// EraseResourceArea ( telArea , i ) ;
3546: LD_INT 7
3548: PPUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: CALL_OW 286
3558: GO 3543
3560: POP
3561: POP
// for i = xy downto 1 do
3562: LD_ADDR_VAR 0 3
3566: PUSH
3567: DOUBLE
3568: LD_VAR 0 2
3572: INC
3573: ST_TO_ADDR
3574: LD_INT 1
3576: PUSH
3577: FOR_DOWNTO
3578: IFFALSE 3660
// begin k := rand ( 1 , xy ) ;
3580: LD_ADDR_VAR 0 1
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_VAR 0 2
3592: PPUSH
3593: CALL_OW 12
3597: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3598: LD_VAR 0 2
3602: PUSH
3603: LD_VAR 0 1
3607: ARRAY
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: LD_VAR 0 2
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PUSH
3624: LD_INT 2
3626: ARRAY
3627: PPUSH
3628: CALL_OW 428
3632: IFFALSE 3656
// xy := Delete ( xy , k ) else
3634: LD_ADDR_VAR 0 2
3638: PUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 1
3648: PPUSH
3649: CALL_OW 3
3653: ST_TO_ADDR
3654: GO 3658
// break ;
3656: GO 3660
// end ;
3658: GO 3577
3660: POP
3661: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3662: LD_INT 68
3664: PPUSH
3665: LD_VAR 0 2
3669: PUSH
3670: LD_VAR 0 1
3674: ARRAY
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: LD_VAR 0 2
3684: PUSH
3685: LD_VAR 0 1
3689: ARRAY
3690: PUSH
3691: LD_INT 2
3693: ARRAY
3694: PPUSH
3695: CALL_OW 243
// end ; end_of_file
3699: PPOPN 3
3701: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3702: LD_INT 0
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// uc_side := 6 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 6
3718: ST_TO_ADDR
// uc_nation := nation_russian ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 3
3726: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3727: LD_INT 6
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3737: LD_ADDR_VAR 0 6
3741: PUSH
3742: LD_INT 9
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 8
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 8
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_OWVAR 67
3781: ARRAY
3782: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 8
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_OWVAR 67
3806: ARRAY
3807: ST_TO_ADDR
// tmp := [ ] ;
3808: LD_ADDR_VAR 0 5
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3815: LD_ADDR_EXP 2
3819: PUSH
3820: LD_STRING Davidov
3822: PPUSH
3823: CALL_OW 25
3827: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3828: LD_EXP 2
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 7
3838: PPUSH
3839: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3843: LD_EXP 2
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: LD_INT 8
3853: PPUSH
3854: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3858: LD_EXP 2
3862: PPUSH
3863: LD_INT 3
3865: PPUSH
3866: LD_INT 6
3868: PPUSH
3869: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3873: LD_EXP 2
3877: PPUSH
3878: LD_INT 4
3880: PPUSH
3881: LD_INT 10
3883: PPUSH
3884: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3888: LD_EXP 2
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: CALL_OW 336
// InitHc_All ( ) ;
3900: CALL_OW 584
// while amount [ 1 ] do
3904: LD_VAR 0 6
3908: PUSH
3909: LD_INT 1
3911: ARRAY
3912: IFFALSE 4249
// begin Wait ( 1 ) ;
3914: LD_INT 1
3916: PPUSH
3917: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3921: LD_ADDR_VAR 0 7
3925: PUSH
3926: LD_INT 1
3928: PPUSH
3929: LD_INT 4
3931: PPUSH
3932: CALL_OW 12
3936: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3937: LD_VAR 0 6
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: IFFALSE 3953
3947: PUSH
3948: LD_VAR 0 5
3952: AND
3953: IFFALSE 4108
// begin if k in [ 1 , 2 ] then
3955: LD_VAR 0 7
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: IN
3970: IFFALSE 3980
// k := 3 ;
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_INT 3
3979: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3980: LD_ADDR_OWVAR 37
3984: PUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 24
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 1
3997: PPUSH
3998: LD_INT 2
4000: PPUSH
4001: CALL_OW 12
4005: ARRAY
4006: ST_TO_ADDR
// vc_engine := engine_siberite ;
4007: LD_ADDR_OWVAR 39
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// vc_control := control_manual ;
4015: LD_ADDR_OWVAR 38
4019: PUSH
4020: LD_INT 1
4022: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4023: LD_ADDR_OWVAR 40
4027: PUSH
4028: LD_INT 44
4030: PUSH
4031: LD_INT 45
4033: PUSH
4034: LD_INT 43
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4054: LD_ADDR_VAR 0 5
4058: PUSH
4059: LD_VAR 0 5
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: CALL_OW 45
4071: PPUSH
4072: CALL_OW 2
4076: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_VAR 0 6
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: LD_VAR 0 6
4094: PUSH
4095: LD_INT 2
4097: ARRAY
4098: PUSH
4099: LD_INT 1
4101: MINUS
4102: PPUSH
4103: CALL_OW 1
4107: ST_TO_ADDR
// end ; if not tmp then
4108: LD_VAR 0 5
4112: NOT
4113: IFFALSE 4123
// k := 2 ;
4115: LD_ADDR_VAR 0 7
4119: PUSH
4120: LD_INT 2
4122: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4123: LD_VAR 0 6
4127: PUSH
4128: LD_INT 2
4130: ARRAY
4131: PUSH
4132: LD_INT 0
4134: EQUAL
4135: IFFALSE 4147
4137: PUSH
4138: LD_VAR 0 7
4142: PUSH
4143: LD_INT 3
4145: EQUAL
4146: AND
4147: IFFALSE 4176
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4149: LD_ADDR_VAR 0 7
4153: PUSH
4154: LD_INT 9
4156: PUSH
4157: LD_INT 4
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 12
4174: ARRAY
4175: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4176: LD_INT 0
4178: PPUSH
4179: LD_VAR 0 7
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4193: LD_ADDR_VAR 0 5
4197: PUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL_OW 44
4210: PPUSH
4211: CALL_OW 2
4215: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4216: LD_ADDR_VAR 0 6
4220: PUSH
4221: LD_VAR 0 6
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: LD_VAR 0 6
4233: PUSH
4234: LD_INT 1
4236: ARRAY
4237: PUSH
4238: LD_INT 1
4240: MINUS
4241: PPUSH
4242: CALL_OW 1
4246: ST_TO_ADDR
// end ;
4247: GO 3904
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4249: LD_ADDR_VAR 0 5
4253: PUSH
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_VAR 0 5
4263: PUSH
4264: LD_INT 1
4266: PLUS
4267: PPUSH
4268: LD_EXP 2
4272: PPUSH
4273: CALL_OW 2
4277: ST_TO_ADDR
// for i = tmp downto 1 do
4278: LD_ADDR_VAR 0 2
4282: PUSH
4283: DOUBLE
4284: LD_VAR 0 5
4288: INC
4289: ST_TO_ADDR
4290: LD_INT 1
4292: PUSH
4293: FOR_DOWNTO
4294: IFFALSE 4456
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4296: LD_VAR 0 5
4300: PUSH
4301: LD_VAR 0 2
4305: ARRAY
4306: PPUSH
4307: CALL_OW 247
4311: PUSH
4312: LD_INT 2
4314: EQUAL
4315: IFFALSE 4405
// begin SetDir ( tmp [ i ] , 3 ) ;
4317: LD_VAR 0 5
4321: PUSH
4322: LD_VAR 0 2
4326: ARRAY
4327: PPUSH
4328: LD_INT 3
4330: PPUSH
4331: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4335: LD_VAR 0 5
4339: PUSH
4340: LD_VAR 0 2
4344: ARRAY
4345: PPUSH
4346: LD_INT 193
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 0
4354: PPUSH
4355: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4359: LD_VAR 0 5
4363: PUSH
4364: LD_VAR 0 2
4368: PUSH
4369: LD_INT 1
4371: MINUS
4372: ARRAY
4373: PPUSH
4374: LD_VAR 0 5
4378: PUSH
4379: LD_VAR 0 2
4383: ARRAY
4384: PPUSH
4385: CALL_OW 52
// i := i - 1 ;
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_VAR 0 2
4398: PUSH
4399: LD_INT 1
4401: MINUS
4402: ST_TO_ADDR
// end else
4403: GO 4426
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4405: LD_VAR 0 5
4409: PUSH
4410: LD_VAR 0 2
4414: ARRAY
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4426: LD_VAR 0 5
4430: PUSH
4431: LD_VAR 0 2
4435: ARRAY
4436: PPUSH
4437: LD_INT 197
4439: PPUSH
4440: LD_INT 22
4442: PPUSH
4443: CALL_OW 111
// Wait ( 0 0$02 ) ;
4447: LD_INT 70
4449: PPUSH
4450: CALL_OW 67
// end ;
4454: GO 4293
4456: POP
4457: POP
// Wait ( 0 0$02 ) ;
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4465: LD_ADDR_OWVAR 37
4469: PUSH
4470: LD_INT 22
4472: ST_TO_ADDR
// vc_engine := engine_siberite ;
4473: LD_ADDR_OWVAR 39
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_control := control_computer ;
4481: LD_ADDR_OWVAR 38
4485: PUSH
4486: LD_INT 3
4488: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4489: LD_ADDR_OWVAR 40
4493: PUSH
4494: LD_INT 51
4496: ST_TO_ADDR
// tmp := CreateVehicle ;
4497: LD_ADDR_VAR 0 5
4501: PUSH
4502: CALL_OW 45
4506: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4507: LD_VAR 0 5
4511: PPUSH
4512: LD_INT 3
4514: PPUSH
4515: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_INT 193
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_INT 4
4544: PPUSH
4545: LD_INT 60
4547: PPUSH
4548: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4552: LD_VAR 0 5
4556: PPUSH
4557: LD_INT 197
4559: PPUSH
4560: LD_INT 22
4562: PPUSH
4563: CALL_OW 111
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4572: LD_INT 0
4574: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4575: LD_VAR 0 1
4579: PPUSH
4580: LD_VAR 0 2
4584: PPUSH
4585: CALL 9587 0 2
// side := GetSide ( fac ) ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_VAR 0 2
4598: PPUSH
4599: CALL_OW 255
4603: ST_TO_ADDR
// case side of 7 :
4604: LD_VAR 0 3
4608: PUSH
4609: LD_INT 7
4611: DOUBLE
4612: EQUAL
4613: IFTRUE 4617
4615: GO 4664
4617: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4618: LD_ADDR_EXP 32
4622: PUSH
4623: LD_EXP 32
4627: PPUSH
4628: LD_EXP 32
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: PPUSH
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL_OW 1
4646: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4647: LD_VAR 0 1
4651: PPUSH
4652: LD_INT 112
4654: PPUSH
4655: LD_INT 175
4657: PPUSH
4658: CALL_OW 171
// end ; 8 :
4662: GO 4750
4664: LD_INT 8
4666: DOUBLE
4667: EQUAL
4668: IFTRUE 4672
4670: GO 4749
4672: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 264
4682: PUSH
4683: LD_INT 31
4685: EQUAL
4686: IFFALSE 4703
// ComMoveXY ( veh , 145 , 66 ) ;
4688: LD_VAR 0 1
4692: PPUSH
4693: LD_INT 145
4695: PPUSH
4696: LD_INT 66
4698: PPUSH
4699: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 265
4712: PUSH
4713: LD_INT 11
4715: EQUAL
4716: IFFALSE 4747
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4718: LD_ADDR_EXP 33
4722: PUSH
4723: LD_EXP 33
4727: PPUSH
4728: LD_EXP 33
4732: PUSH
4733: LD_INT 1
4735: PLUS
4736: PPUSH
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 1
4746: ST_TO_ADDR
// end ; end ;
4747: GO 4750
4749: POP
// end ;
4750: PPOPN 3
4752: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL 9529 0 1
// if un in legion_force then
4762: LD_VAR 0 1
4766: PUSH
4767: LD_EXP 33
4771: IN
4772: IFFALSE 4790
// legion_force := legion_force diff un ;
4774: LD_ADDR_EXP 33
4778: PUSH
4779: LD_EXP 33
4783: PUSH
4784: LD_VAR 0 1
4788: DIFF
4789: ST_TO_ADDR
// if un in al_force then
4790: LD_VAR 0 1
4794: PUSH
4795: LD_EXP 32
4799: IN
4800: IFFALSE 4818
// al_force := al_force diff un ;
4802: LD_ADDR_EXP 32
4806: PUSH
4807: LD_EXP 32
4811: PUSH
4812: LD_VAR 0 1
4816: DIFF
4817: ST_TO_ADDR
// end ;
4818: PPOPN 1
4820: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4821: LD_VAR 0 1
4825: PUSH
4826: LD_INT 68
4828: EQUAL
4829: IFFALSE 4846
4831: PUSH
4832: LD_VAR 0 2
4836: PPUSH
4837: CALL_OW 257
4841: PUSH
4842: LD_INT 17
4844: EQUAL
4845: AND
4846: IFFALSE 4889
// begin Wait ( 0 0$01 ) ;
4848: LD_INT 35
4850: PPUSH
4851: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4855: LD_VAR 0 2
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: PPUSH
4875: LD_VAR 0 2
4879: PPUSH
4880: CALL_OW 74
4884: PPUSH
4885: CALL_OW 115
// end ; end ;
4889: PPOPN 2
4891: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4892: LD_VAR 0 1
4896: PUSH
4897: LD_EXP 32
4901: IN
4902: IFFALSE 4920
// al_force := al_force diff un ;
4904: LD_ADDR_EXP 32
4908: PUSH
4909: LD_EXP 32
4913: PUSH
4914: LD_VAR 0 1
4918: DIFF
4919: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 263
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: IFFALSE 4944
// ComUnlink ( un ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 22
4951: PUSH
4952: LD_INT 8
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 21
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: IN
4978: IFFALSE 4996
// begin wait ( 0 0$2 ) ;
4980: LD_INT 70
4982: PPUSH
4983: CALL_OW 67
// ComAutodestruct ( un ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL 65284 0 1
// end ; end ;
4996: PPOPN 1
4998: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4999: LD_VAR 0 1
5003: PUSH
5004: LD_INT 25
5006: EQUAL
5007: IFFALSE 5017
// player_start_res_sib_bomb := true ;
5009: LD_ADDR_EXP 4
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// if tech = tech_artifact then
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 24
5024: EQUAL
5025: IFFALSE 5035
// player_start_res_artifact := true ;
5027: LD_ADDR_EXP 5
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// end ;
5035: PPOPN 2
5037: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5038: LD_VAR 0 2
5042: PUSH
5043: LD_INT 6
5045: EQUAL
5046: IFFALSE 5056
// player_artifact_loaded := false ;
5048: LD_ADDR_EXP 18
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// end ;
5056: PPOPN 2
5058: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 6
5066: EQUAL
5067: IFFALSE 5077
// player_artifact_loaded := true ;
5069: LD_ADDR_EXP 18
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// end ;
5077: PPOPN 2
5079: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5080: LD_INT 0
5082: PPUSH
// begin player_used_sib_bomb := true ;
5083: LD_ADDR_EXP 12
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// for i = 1 to 3 do
5091: LD_ADDR_VAR 0 4
5095: PUSH
5096: DOUBLE
5097: LD_INT 1
5099: DEC
5100: ST_TO_ADDR
5101: LD_INT 3
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5178
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_VAR 0 3
5116: PPUSH
5117: LD_EXP 15
5121: PUSH
5122: LD_VAR 0 4
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_EXP 15
5136: PUSH
5137: LD_VAR 0 4
5141: ARRAY
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 298
5151: PUSH
5152: LD_EXP 17
5156: LESSEQUAL
5157: IFFALSE 5176
// begin wait ( 0 0$5 ) ;
5159: LD_INT 175
5161: PPUSH
5162: CALL_OW 67
// artifact_destroyed := true ;
5166: LD_ADDR_EXP 16
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// break ;
5174: GO 5178
// end ; end ;
5176: GO 5104
5178: POP
5179: POP
// end ;
5180: PPOPN 4
5182: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: CALL 9563 0 3
// end ;
5202: PPOPN 3
5204: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL 9571 0 1
// end ; end_of_file
5214: PPOPN 1
5216: END
// export function CreateArtifact ( type , x , y ) ; begin
5217: LD_INT 0
5219: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5220: LD_INT 4
5222: PPUSH
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_VAR 0 2
5232: PPUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 0
5240: PPUSH
5241: CALL_OW 58
// end ;
5245: LD_VAR 0 4
5249: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5250: LD_INT 0
5252: PPUSH
5253: PPUSH
5254: PPUSH
// result := 0 ;
5255: LD_ADDR_VAR 0 2
5259: PUSH
5260: LD_INT 0
5262: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5263: LD_ADDR_VAR 0 4
5267: PUSH
5268: LD_INT 22
5270: PUSH
5271: LD_VAR 0 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 2
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PPUSH
5312: CALL_OW 69
5316: ST_TO_ADDR
// if deps then
5317: LD_VAR 0 4
5321: IFFALSE 5369
// for i in deps do
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: LD_VAR 0 4
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5367
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5336: LD_ADDR_VAR 0 2
5340: PUSH
5341: LD_VAR 0 2
5345: PUSH
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 274
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: CALL_OW 275
5363: PLUS
5364: ST_TO_ADDR
5365: GO 5333
5367: POP
5368: POP
// end ;
5369: LD_VAR 0 2
5373: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
// if val <= 0 then
5380: LD_VAR 0 2
5384: PUSH
5385: LD_INT 0
5387: LESSEQUAL
5388: IFFALSE 5392
// exit ;
5390: GO 5584
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_VAR 0 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 0
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 30
5424: PUSH
5425: LD_INT 1
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// if deps then
5446: LD_VAR 0 5
5450: IFFALSE 5584
// for i in deps do
5452: LD_ADDR_VAR 0 4
5456: PUSH
5457: LD_VAR 0 5
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5582
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5465: LD_ADDR_VAR 0 6
5469: PUSH
5470: LD_VAR 0 4
5474: PPUSH
5475: CALL_OW 274
5479: PPUSH
5480: LD_INT 3
5482: PPUSH
5483: CALL_OW 275
5487: ST_TO_ADDR
// if val < s then
5488: LD_VAR 0 2
5492: PUSH
5493: LD_VAR 0 6
5497: LESS
5498: IFFALSE 5544
// begin s := s - val ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_VAR 0 6
5509: PUSH
5510: LD_VAR 0 2
5514: MINUS
5515: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5516: LD_VAR 0 4
5520: PPUSH
5521: CALL_OW 274
5525: PPUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: CALL_OW 277
// exit ;
5538: POP
5539: POP
5540: GO 5584
// end else
5542: GO 5580
// begin val := val - s ;
5544: LD_ADDR_VAR 0 2
5548: PUSH
5549: LD_VAR 0 2
5553: PUSH
5554: LD_VAR 0 6
5558: MINUS
5559: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5560: LD_VAR 0 4
5564: PPUSH
5565: CALL_OW 274
5569: PPUSH
5570: LD_INT 3
5572: PPUSH
5573: LD_INT 0
5575: PPUSH
5576: CALL_OW 277
// end ; end ;
5580: GO 5462
5582: POP
5583: POP
// end ;
5584: LD_VAR 0 3
5588: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_EXP 35
5598: IN
5599: NOT
5600: IFFALSE 5631
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5602: LD_ADDR_EXP 35
5606: PUSH
5607: LD_EXP 35
5611: PPUSH
5612: LD_EXP 35
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: PPUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: CALL_OW 1
5630: ST_TO_ADDR
// end ;
5631: PPOPN 1
5633: END
// export function DestinationReachable ( unit , x , y ) ; begin
5634: LD_INT 0
5636: PPUSH
// if ValidHex ( x , y ) then
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: CALL_OW 488
5651: IFFALSE 5677
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_VAR 0 2
5662: PPUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: CALL_OW 428
5672: PPUSH
5673: CALL_OW 115
// wait ( 0 0$1 ) ;
5677: LD_INT 35
5679: PPUSH
5680: CALL_OW 67
// if unit in unreachableList then
5684: LD_VAR 0 1
5688: PUSH
5689: LD_EXP 35
5693: IN
5694: IFFALSE 5706
// result := false else
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
5704: GO 5714
// result := true ;
5706: LD_ADDR_VAR 0 4
5710: PUSH
5711: LD_INT 1
5713: ST_TO_ADDR
// if not result then
5714: LD_VAR 0 4
5718: NOT
5719: IFFALSE 5737
// unreachableList := unreachableList diff unit ;
5721: LD_ADDR_EXP 35
5725: PUSH
5726: LD_EXP 35
5730: PUSH
5731: LD_VAR 0 1
5735: DIFF
5736: ST_TO_ADDR
// end ; end_of_file
5737: LD_VAR 0 4
5741: RET
// export function Action ; var dial ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5746: LD_INT 192
5748: PPUSH
5749: LD_INT 1
5751: PPUSH
5752: CALL_OW 86
// InGameOn ;
5756: CALL_OW 8
// PrepareRussian ;
5760: CALL 3702 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5764: LD_ADDR_VAR 0 2
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 6
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 2
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 25
5814: PUSH
5815: LD_INT 4
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: PUSH
5838: LD_EXP 2
5842: DIFF
5843: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5844: LD_VAR 0 2
5848: PUSH
5849: LD_INT 1
5851: ARRAY
5852: PPUSH
5853: LD_INT 202
5855: PPUSH
5856: LD_INT 40
5858: PPUSH
5859: CALL_OW 111
// Wait ( 0 0$03 ) ;
5863: LD_INT 105
5865: PPUSH
5866: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5870: LD_EXP 2
5874: PPUSH
5875: LD_STRING DDav-1
5877: PPUSH
5878: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PPUSH
5891: LD_EXP 2
5895: PPUSH
5896: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5900: LD_EXP 2
5904: PPUSH
5905: LD_VAR 0 2
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5918: LD_INT 202
5920: PPUSH
5921: LD_INT 40
5923: PPUSH
5924: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5928: LD_VAR 0 2
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: LD_STRING DRus-1
5939: PPUSH
5940: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5944: LD_EXP 2
5948: PPUSH
5949: LD_STRING DDav-2
5951: PPUSH
5952: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5956: LD_VAR 0 2
5960: PUSH
5961: LD_INT 1
5963: ARRAY
5964: PPUSH
5965: LD_STRING DRus-2
5967: PPUSH
5968: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5972: LD_EXP 2
5976: PPUSH
5977: LD_STRING DDav-3
5979: PPUSH
5980: CALL_OW 88
// InGameOff ;
5984: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5988: LD_INT 10
5990: PPUSH
5991: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5995: LD_STRING C1
5997: PPUSH
5998: CALL_OW 337
// SaveForQuickRestart ;
6002: CALL_OW 22
// end ;
6006: LD_VAR 0 1
6010: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6011: LD_INT 22
6013: PUSH
6014: LD_INT 6
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 6
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 7
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 30
6046: PUSH
6047: LD_INT 8
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PPUSH
6064: CALL_OW 69
6068: IFFALSE 6168
6070: GO 6072
6072: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6073: LD_EXP 2
6077: PPUSH
6078: LD_STRING DDav-4
6080: PPUSH
6081: CALL_OW 88
// Wait ( 0 0$40 ) ;
6085: LD_INT 1400
6087: PPUSH
6088: CALL_OW 67
// DialogueOn ;
6092: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6096: LD_EXP 3
6100: PPUSH
6101: LD_STRING Dver-Meet-1
6103: PPUSH
6104: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6108: LD_EXP 2
6112: PPUSH
6113: LD_STRING DDav-Meet-1
6115: PPUSH
6116: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6120: LD_EXP 3
6124: PPUSH
6125: LD_STRING Dver-Meet-2
6127: PPUSH
6128: CALL_OW 94
// DialogueOff ;
6132: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6136: LD_INT 19600
6138: PUSH
6139: LD_INT 15400
6141: PUSH
6142: LD_INT 13300
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: PUSH
6150: LD_OWVAR 67
6154: ARRAY
6155: PPUSH
6156: CALL_OW 67
// legion_attacks_active := true ;
6160: LD_ADDR_EXP 7
6164: PUSH
6165: LD_INT 1
6167: ST_TO_ADDR
// end ;
6168: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6169: LD_INT 22
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: IFTRUE 6209
6199: PUSH
6200: LD_OWVAR 1
6204: PUSH
6205: LD_INT 21000
6207: GREATER
6208: OR
6209: IFFALSE 6443
6211: GO 6213
6213: DISABLE
6214: LD_INT 0
6216: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6217: LD_ADDR_VAR 0 1
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_INT 6
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 2
6234: PUSH
6235: LD_INT 25
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 25
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 25
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 25
6267: PUSH
6268: LD_INT 4
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: PUSH
6291: LD_EXP 2
6295: DIFF
6296: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6297: LD_VAR 0 1
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_STRING DRus-3
6308: PPUSH
6309: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6313: LD_EXP 2
6317: PPUSH
6318: LD_STRING DDav-5
6320: PPUSH
6321: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6325: LD_VAR 0 1
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PPUSH
6334: LD_STRING DRus-4
6336: PPUSH
6337: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6341: LD_EXP 2
6345: PPUSH
6346: LD_STRING DDav-6
6348: PPUSH
6349: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6353: LD_STRING C2
6355: PPUSH
6356: CALL_OW 337
// Wait ( 5 5$00 ) ;
6360: LD_INT 10500
6362: PPUSH
6363: CALL_OW 67
// DialogueOn ;
6367: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING DBag-1
6378: PPUSH
6379: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6383: LD_EXP 2
6387: PPUSH
6388: LD_STRING DDavB-1
6390: PPUSH
6391: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING DBag-2
6402: PPUSH
6403: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6407: LD_EXP 2
6411: PPUSH
6412: LD_STRING DDavB-2
6414: PPUSH
6415: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING DBag-3
6426: PPUSH
6427: CALL_OW 94
// DialogueOff ;
6431: CALL_OW 7
// alliance_attack_active := true ;
6435: LD_ADDR_EXP 9
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6446: LD_EXP 10
6450: IFFALSE 6497
6452: GO 6454
6454: DISABLE
// begin DialogueOn ;
6455: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6459: LD_EXP 10
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: LD_EXP 10
6472: PUSH
6473: LD_INT 2
6475: ARRAY
6476: PPUSH
6477: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6481: LD_EXP 2
6485: PPUSH
6486: LD_STRING DDav-Artifact1-1
6488: PPUSH
6489: CALL_OW 88
// DialogueOff ;
6493: CALL_OW 7
// end ;
6497: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6498: LD_EXP 11
6502: IFFALSE 6549
6504: GO 6506
6506: DISABLE
// begin DialogueOn ;
6507: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6511: LD_EXP 11
6515: PUSH
6516: LD_INT 1
6518: ARRAY
6519: PPUSH
6520: LD_EXP 11
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PPUSH
6529: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6533: LD_EXP 2
6537: PPUSH
6538: LD_STRING DDav-Artifact2-1
6540: PPUSH
6541: CALL_OW 88
// DialogueOff ;
6545: CALL_OW 7
// end ;
6549: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6550: LD_EXP 16
6554: IFTRUE 6575
6556: PUSH
6557: LD_INT 6
6559: PPUSH
6560: CALL_OW 469
6564: NOT
6565: IFFALSE 6574
6567: PUSH
6568: LD_EXP 18
6572: NOT
6573: AND
6574: OR
6575: IFFALSE 6587
6577: GO 6579
6579: DISABLE
// YouLost ( artifact_destroyed ) ;
6580: LD_STRING artifact_destroyed
6582: PPUSH
6583: CALL_OW 104
6587: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6588: LD_EXP 2
6592: PPUSH
6593: CALL_OW 301
6597: IFFALSE 6609
6599: GO 6601
6601: DISABLE
// YouLost ( dead ) ;
6602: LD_STRING dead
6604: PPUSH
6605: CALL_OW 104
6609: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6610: LD_INT 22
6612: PUSH
6613: LD_INT 7
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 21
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: PUSH
6639: LD_INT 0
6641: EQUAL
6642: IFFALSE 6776
6644: GO 6646
6646: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6647: LD_OWVAR 1
6651: PUSH
6652: LD_INT 252000
6654: PUSH
6655: LD_INT 210000
6657: PUSH
6658: LD_INT 189000
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_OWVAR 67
6670: ARRAY
6671: LESS
6672: IFFALSE 6686
// AddMedal ( med1 , 1 ) else
6674: LD_STRING med1
6676: PPUSH
6677: LD_INT 1
6679: PPUSH
6680: CALL_OW 101
6684: GO 6697
// AddMedal ( med1 , - 1 ) ;
6686: LD_STRING med1
6688: PPUSH
6689: LD_INT 1
6691: NEG
6692: PPUSH
6693: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6697: LD_INT 22
6699: PUSH
6700: LD_INT 8
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: IFFALSE 6726
// AddMedal ( med2 , - 1 ) else
6713: LD_STRING med2
6715: PPUSH
6716: LD_INT 1
6718: NEG
6719: PPUSH
6720: CALL_OW 101
6724: GO 6736
// AddMedal ( med2 , 1 ) ;
6726: LD_STRING med2
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 101
// if player_used_sib_bomb then
6736: LD_EXP 12
6740: IFFALSE 6755
// AddMedal ( med3 , - 1 ) else
6742: LD_STRING med3
6744: PPUSH
6745: LD_INT 1
6747: NEG
6748: PPUSH
6749: CALL_OW 101
6753: GO 6765
// AddMedal ( med3 , 1 ) ;
6755: LD_STRING med3
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 101
// GiveMedals ( MAIN ) ;
6765: LD_STRING MAIN
6767: PPUSH
6768: CALL_OW 102
// YouWin ;
6772: CALL_OW 103
// end ; end_of_file
6776: END
// every 0 0$22 + 0 0$2 do
6777: GO 6779
6779: DISABLE
// begin enable ;
6780: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6781: LD_INT 4
6783: PPUSH
6784: LD_INT 5
6786: PPUSH
6787: CALL_OW 12
6791: PPUSH
6792: LD_INT 3
6794: PPUSH
6795: LD_INT 1
6797: PPUSH
6798: CALL_OW 55
// if tick >= 4 4$00 then
6802: LD_OWVAR 1
6806: PUSH
6807: LD_INT 8400
6809: GREATEREQUAL
6810: IFFALSE 6817
// begin disable ;
6812: DISABLE
// CratesSpawn ( ) ;
6813: CALL 6818 0 0
// end ; end ;
6817: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_INT 30000
6831: PUSH
6832: LD_INT 20000
6834: PUSH
6835: LD_INT 10000
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_OWVAR 67
6847: ARRAY
6848: ST_TO_ADDR
// while amount > 0 do
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 0
6856: GREATER
6857: IFFALSE 6927
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6859: LD_INT 1050
6861: PPUSH
6862: LD_INT 3150
6864: PPUSH
6865: CALL_OW 12
6869: PPUSH
6870: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6874: LD_ADDR_VAR 0 4
6878: PUSH
6879: LD_INT 1
6881: PPUSH
6882: LD_INT 5
6884: PPUSH
6885: CALL_OW 12
6889: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_VAR 0 3
6899: PUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 10
6907: MUL
6908: MINUS
6909: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6910: LD_VAR 0 4
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: CALL_OW 55
// end ;
6925: GO 6849
// end ; end_of_file
6927: LD_VAR 0 1
6931: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// InitHc_All ( ) ;
6936: CALL_OW 584
// for i := 1 to num1 do
6940: LD_ADDR_VAR 0 6
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_VAR 0 1
6954: PUSH
6955: FOR_TO
6956: IFFALSE 6984
// begin PrepareApeman ( 5 ) ;
6958: LD_INT 5
6960: PPUSH
6961: CALL 66094 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6965: CALL_OW 44
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: LD_INT 0
6977: PPUSH
6978: CALL_OW 49
// end ;
6982: GO 6955
6984: POP
6985: POP
// for i := 1 to num2 do
6986: LD_ADDR_VAR 0 6
6990: PUSH
6991: DOUBLE
6992: LD_INT 1
6994: DEC
6995: ST_TO_ADDR
6996: LD_VAR 0 2
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7030
// begin PrepareTiger ( 5 ) ;
7004: LD_INT 5
7006: PPUSH
7007: CALL 66245 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
7011: CALL_OW 44
7015: PPUSH
7016: LD_VAR 0 4
7020: PPUSH
7021: LD_INT 0
7023: PPUSH
7024: CALL_OW 49
// end ;
7028: GO 7001
7030: POP
7031: POP
// for i := 1 to num3 do
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: DOUBLE
7038: LD_INT 1
7040: DEC
7041: ST_TO_ADDR
7042: LD_VAR 0 3
7046: PUSH
7047: FOR_TO
7048: IFFALSE 7073
// begin PrepareBird ( ) ;
7050: CALL 66474 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7054: CALL_OW 44
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_INT 0
7066: PPUSH
7067: CALL_OW 49
// end ;
7071: GO 7047
7073: POP
7074: POP
// end ; end_of_file
7075: LD_VAR 0 5
7079: RET
// export function DebugArtifact ; begin
7080: LD_INT 0
7082: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7083: LD_STRING Artifact is loaded: 
7085: PUSH
7086: LD_EXP 18
7090: STR
7091: PPUSH
7092: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7096: LD_STRING Artifact is active: 
7098: PUSH
7099: LD_EXP 29
7103: STR
7104: PPUSH
7105: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7109: LD_STRING Artifact is researched: 
7111: PUSH
7112: LD_EXP 22
7116: STR
7117: PPUSH
7118: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7122: LD_STRING Artifact coords 
7124: PUSH
7125: LD_EXP 19
7129: PPUSH
7130: CALL_OW 469
7134: STR
7135: PPUSH
7136: CALL_OW 561
// end ;
7140: LD_VAR 0 1
7144: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_INT 100
7158: PUSH
7159: LD_INT 185
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 99
7168: PUSH
7169: LD_INT 175
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 117
7178: PUSH
7179: LD_INT 191
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// for i = 1 to artifacts_type do
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: DOUBLE
7197: LD_INT 1
7199: DEC
7200: ST_TO_ADDR
7201: LD_EXP 14
7205: PUSH
7206: FOR_TO
7207: IFFALSE 7309
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_VAR 0 4
7218: PUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_VAR 0 4
7226: PPUSH
7227: CALL_OW 12
7231: ARRAY
7232: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7233: LD_ADDR_VAR 0 4
7237: PUSH
7238: LD_VAR 0 4
7242: PUSH
7243: LD_VAR 0 3
7247: DIFF
7248: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7249: LD_ADDR_EXP 15
7253: PUSH
7254: LD_EXP 15
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: LD_VAR 0 3
7268: PPUSH
7269: CALL_OW 2
7273: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7274: LD_EXP 14
7278: PUSH
7279: LD_VAR 0 2
7283: ARRAY
7284: PPUSH
7285: LD_VAR 0 3
7289: PUSH
7290: LD_INT 1
7292: ARRAY
7293: PPUSH
7294: LD_VAR 0 3
7298: PUSH
7299: LD_INT 2
7301: ARRAY
7302: PPUSH
7303: CALL 5217 0 3
// end ;
7307: GO 7206
7309: POP
7310: POP
// end ;
7311: LD_VAR 0 1
7315: RET
// export function GetUseCost ( dist ) ; begin
7316: LD_INT 0
7318: PPUSH
// if dist < 30 then
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 30
7326: LESS
7327: IFFALSE 7337
// result := 10 ;
7329: LD_ADDR_VAR 0 2
7333: PUSH
7334: LD_INT 10
7336: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7337: LD_VAR 0 1
7341: PUSH
7342: LD_INT 30
7344: GREATEREQUAL
7345: IFFALSE 7357
7347: PUSH
7348: LD_VAR 0 1
7352: PUSH
7353: LD_INT 50
7355: LESS
7356: AND
7357: IFFALSE 7367
// result := 35 ;
7359: LD_ADDR_VAR 0 2
7363: PUSH
7364: LD_INT 35
7366: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 50
7374: GREATEREQUAL
7375: IFFALSE 7387
7377: PUSH
7378: LD_VAR 0 1
7382: PUSH
7383: LD_INT 80
7385: LESS
7386: AND
7387: IFFALSE 7397
// result := 70 ;
7389: LD_ADDR_VAR 0 2
7393: PUSH
7394: LD_INT 70
7396: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7397: LD_VAR 0 1
7401: PUSH
7402: LD_INT 80
7404: GREATEREQUAL
7405: IFFALSE 7417
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 120
7415: LESS
7416: AND
7417: IFFALSE 7427
// result := 100 ;
7419: LD_ADDR_VAR 0 2
7423: PUSH
7424: LD_INT 100
7426: ST_TO_ADDR
// if dist >= 120 then
7427: LD_VAR 0 1
7431: PUSH
7432: LD_INT 120
7434: GREATEREQUAL
7435: IFFALSE 7445
// result := 150 ;
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_INT 150
7444: ST_TO_ADDR
// end ;
7445: LD_VAR 0 2
7449: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7450: LD_VAR 0 1
7454: PPUSH
7455: CALL_OW 255
7459: PUSH
7460: LD_OWVAR 2
7464: EQUAL
7465: IFFALSE 7475
// player_artifact_researched := true ;
7467: LD_ADDR_EXP 22
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// end ;
7475: PPOPN 1
7477: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7478: LD_INT 22
7480: PUSH
7481: LD_OWVAR 2
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 2
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 30
7505: PUSH
7506: LD_INT 11
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 69
7526: IFFALSE 7534
7528: PUSH
7529: LD_EXP 22
7533: AND
7534: IFFALSE 7543
7536: PUSH
7537: LD_EXP 18
7541: NOT
7542: AND
7543: IFFALSE 7997
7545: GO 7547
7547: DISABLE
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
// begin enable ;
7552: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_EXP 19
7562: PPUSH
7563: CALL_OW 469
7567: ST_TO_ADDR
// if not coords then
7568: LD_VAR 0 2
7572: NOT
7573: IFFALSE 7577
// exit ;
7575: GO 7997
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7577: LD_ADDR_VAR 0 1
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_OWVAR 2
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 30
7599: PUSH
7600: LD_INT 8
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 30
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: PPUSH
7631: LD_VAR 0 2
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 2
7644: PUSH
7645: LD_INT 2
7647: ARRAY
7648: PPUSH
7649: CALL_OW 73
7653: ST_TO_ADDR
// if not lab then
7654: LD_VAR 0 1
7658: NOT
7659: IFFALSE 7676
// begin if debug then
7661: LD_EXP 6
7665: IFFALSE 7674
// AddToLog ( Cannot find lab for artifact! ) ;
7667: LD_STRING Cannot find lab for artifact!
7669: PPUSH
7670: CALL_OW 561
// exit ;
7674: GO 7997
// end ; if not player_artifact_ready then
7676: LD_EXP 29
7680: NOT
7681: IFFALSE 7805
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7683: LD_VAR 0 1
7687: PPUSH
7688: LD_VAR 0 2
7692: PUSH
7693: LD_INT 1
7695: ARRAY
7696: PPUSH
7697: LD_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: ARRAY
7705: PPUSH
7706: CALL_OW 297
7710: PUSH
7711: LD_EXP 23
7715: LESS
7716: IFFALSE 7781
// begin if BuildingStatus ( lab ) = bs_idle then
7718: LD_VAR 0 1
7722: PPUSH
7723: CALL_OW 461
7727: PUSH
7728: LD_INT 2
7730: EQUAL
7731: IFFALSE 7757
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7733: LD_OWVAR 2
7737: PPUSH
7738: LD_EXP 25
7742: PPUSH
7743: LD_INT 2
7745: PPUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 468
7755: GO 7779
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7757: LD_OWVAR 2
7761: PPUSH
7762: LD_EXP 25
7766: PPUSH
7767: LD_INT 1
7769: PPUSH
7770: LD_VAR 0 1
7774: PPUSH
7775: CALL_OW 468
// end else
7779: GO 7803
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7781: LD_OWVAR 2
7785: PPUSH
7786: LD_EXP 25
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 468
// end else
7803: GO 7997
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7805: LD_VAR 0 1
7809: PPUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_INT 2
7826: ARRAY
7827: PPUSH
7828: CALL_OW 297
7832: PUSH
7833: LD_EXP 23
7837: LESS
7838: IFFALSE 7953
// begin if BuildingStatus ( lab ) = bs_idle then
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 461
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7907
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7855: LD_OWVAR 2
7859: PPUSH
7860: LD_EXP 20
7864: PPUSH
7865: LD_INT 4
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 468
// if player_artifact_selected_unit then
7877: LD_EXP 30
7881: IFFALSE 7905
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7883: LD_OWVAR 2
7887: PPUSH
7888: LD_EXP 21
7892: PPUSH
7893: LD_INT 3
7895: PPUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 468
// end else
7905: GO 7951
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7907: LD_OWVAR 2
7911: PPUSH
7912: LD_EXP 20
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7929: LD_OWVAR 2
7933: PPUSH
7934: LD_EXP 21
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 468
// end ; end else
7951: GO 7997
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7953: LD_OWVAR 2
7957: PPUSH
7958: LD_EXP 20
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7975: LD_OWVAR 2
7979: PPUSH
7980: LD_EXP 21
7984: PPUSH
7985: LD_INT 1
7987: PPUSH
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL_OW 468
// end ; end ;
7997: PPOPN 2
7999: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
8006: PPUSH
8007: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8008: LD_ADDR_VAR 0 5
8012: PUSH
8013: LD_EXP 19
8017: PPUSH
8018: CALL_OW 469
8022: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8023: LD_ADDR_VAR 0 7
8027: PUSH
8028: LD_INT 22
8030: PUSH
8031: LD_OWVAR 2
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 2
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 8
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: LD_INT 30
8055: PUSH
8056: LD_INT 11
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: PPUSH
8077: LD_VAR 0 5
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 5
8090: PUSH
8091: LD_INT 2
8093: ARRAY
8094: PPUSH
8095: CALL_OW 73
8099: ST_TO_ADDR
// if not lab then
8100: LD_VAR 0 7
8104: NOT
8105: IFFALSE 8122
// begin if debug then
8107: LD_EXP 6
8111: IFFALSE 8120
// AddToLog ( Cannot find lab! ) ;
8113: LD_STRING Cannot find lab!
8115: PPUSH
8116: CALL_OW 561
// exit ;
8120: GO 8561
// end ; if icon = player_artifact_icon_res then
8122: LD_VAR 0 2
8126: PUSH
8127: LD_EXP 25
8131: EQUAL
8132: IFFALSE 8173
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8134: LD_VAR 0 7
8138: PPUSH
8139: LD_EXP 27
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8151: LD_OWVAR 2
8155: PPUSH
8156: LD_EXP 25
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: LD_VAR 0 7
8168: PPUSH
8169: CALL_OW 468
// end ; if icon = player_artifact_icon then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_EXP 20
8182: EQUAL
8183: IFFALSE 8224
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8185: LD_VAR 0 3
8189: PPUSH
8190: CALL_OW 247
8194: PUSH
8195: LD_INT 1
8197: EQUAL
8198: IFFALSE 8212
8200: PUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: CALL_OW 310
8210: NOT
8211: AND
8212: IFFALSE 8224
// player_artifact_selected_unit := cr1 ;
8214: LD_ADDR_EXP 30
8218: PUSH
8219: LD_VAR 0 3
8223: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8224: LD_VAR 0 2
8228: PUSH
8229: LD_EXP 21
8233: EQUAL
8234: IFFALSE 8551
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_VAR 0 4
8245: PPUSH
8246: CALL_OW 428
8250: PUSH
8251: LD_INT 0
8253: NONEQUAL
8254: IFTRUE 8295
8256: PUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 546
8271: PUSH
8272: LD_INT 6
8274: ARRAY
8275: PUSH
8276: LD_INT 3
8278: PUSH
8279: LD_INT 4
8281: PUSH
8282: LD_INT 5
8284: PUSH
8285: LD_INT 6
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: IN
8294: OR
8295: IFFALSE 8299
// exit ;
8297: GO 8561
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8299: LD_ADDR_VAR 0 9
8303: PUSH
8304: LD_EXP 30
8308: PPUSH
8309: CALL_OW 250
8313: PPUSH
8314: LD_EXP 30
8318: PPUSH
8319: CALL_OW 251
8323: PPUSH
8324: LD_VAR 0 3
8328: PPUSH
8329: LD_VAR 0 4
8333: PPUSH
8334: CALL_OW 298
8338: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8339: LD_ADDR_VAR 0 10
8343: PUSH
8344: LD_VAR 0 9
8348: PPUSH
8349: CALL 7316 0 1
8353: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8354: LD_VAR 0 10
8358: PUSH
8359: LD_OWVAR 2
8363: PPUSH
8364: CALL 5250 0 1
8368: GREATER
8369: IFFALSE 8383
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8371: LD_STRING ArtFrogJumpCost
8373: PPUSH
8374: LD_INT 2
8376: PPUSH
8377: CALL_OW 338
// exit ;
8381: GO 8561
// end ; SetSibResources ( your_side , cost ) ;
8383: LD_OWVAR 2
8387: PPUSH
8388: LD_VAR 0 10
8392: PPUSH
8393: CALL 5374 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8397: LD_VAR 0 3
8401: PPUSH
8402: LD_VAR 0 4
8406: PPUSH
8407: LD_INT 6
8409: PPUSH
8410: LD_INT 5
8412: NEG
8413: PPUSH
8414: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_VAR 0 4
8427: PPUSH
8428: LD_INT 6
8430: PPUSH
8431: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8435: LD_EXP 30
8439: PPUSH
8440: LD_VAR 0 3
8444: PPUSH
8445: LD_VAR 0 4
8449: PPUSH
8450: LD_INT 0
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8460: LD_VAR 0 3
8464: PPUSH
8465: LD_VAR 0 4
8469: PPUSH
8470: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8474: LD_ADDR_EXP 30
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// player_artifact_researched := false ;
8482: LD_ADDR_EXP 22
8486: PUSH
8487: LD_INT 0
8489: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8490: LD_OWVAR 2
8494: PPUSH
8495: LD_EXP 20
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_VAR 0 7
8507: PPUSH
8508: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8512: LD_OWVAR 2
8516: PPUSH
8517: LD_EXP 21
8521: PPUSH
8522: LD_INT 0
8524: PPUSH
8525: LD_VAR 0 7
8529: PPUSH
8530: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8534: LD_EXP 26
8538: PPUSH
8539: CALL_OW 67
// player_artifact_researched := true ;
8543: LD_ADDR_EXP 22
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// end ; if debug then
8551: LD_EXP 6
8555: IFFALSE 8561
// DebugArtifact ;
8557: CALL 7080 0 0
// end ;
8561: PPOPN 10
8563: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 255
8573: PUSH
8574: LD_OWVAR 2
8578: EQUAL
8579: IFFALSE 8618
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8581: LD_OWVAR 2
8585: PPUSH
8586: LD_EXP 25
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 468
// player_artifact_ready := true ;
8603: LD_ADDR_EXP 29
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8611: LD_STRING ArtFrogJump
8613: PPUSH
8614: CALL_OW 339
// end ; end ;
8618: PPOPN 1
8620: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8621: LD_OWVAR 2
8625: PPUSH
8626: LD_EXP 25
8630: PPUSH
8631: LD_INT 2
8633: PPUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 468
// end ;
8643: PPOPN 2
8645: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
8650: PPUSH
8651: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_INT 81
8659: PUSH
8660: LD_INT 7
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 34
8669: PUSH
8670: LD_INT 48
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PPUSH
8681: CALL_OW 69
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 28
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 30
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 21
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 30
8788: PUSH
8789: LD_INT 34
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 49
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 35
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 34
8878: PUSH
8879: LD_INT 47
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 31
8908: PUSH
8909: LD_INT 25
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: PUSH
8926: LD_INT 81
8928: PUSH
8929: LD_INT 7
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 32
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 69
8954: ADD
8955: ST_TO_ADDR
// if not tmp then
8956: LD_VAR 0 3
8960: NOT
8961: IFFALSE 8965
// exit ;
8963: GO 9086
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8965: LD_VAR 0 3
8969: PPUSH
8970: LD_INT 34
8972: PUSH
8973: LD_INT 48
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 72
8984: IFFALSE 9017
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8986: LD_ADDR_VAR 0 4
8990: PUSH
8991: LD_VAR 0 3
8995: PPUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 48
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 72
9010: PUSH
9011: LD_INT 1
9013: ARRAY
9014: ST_TO_ADDR
9015: GO 9041
// un := tmp [ rand ( 1 , tmp ) ] ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 1
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: CALL_OW 12
9039: ARRAY
9040: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9041: LD_EXP 10
9045: NOT
9046: IFFALSE 9077
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9048: LD_ADDR_EXP 10
9052: PUSH
9053: LD_VAR 0 4
9057: PPUSH
9058: CALL_OW 250
9062: PUSH
9063: LD_VAR 0 4
9067: PPUSH
9068: CALL_OW 251
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: ST_TO_ADDR
// KillUnit ( un ) ;
9077: LD_VAR 0 4
9081: PPUSH
9082: CALL_OW 66
// end ;
9086: LD_VAR 0 1
9090: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9097: LD_ADDR_VAR 0 4
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 33
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 69
9130: ST_TO_ADDR
// if not tmp then
9131: LD_VAR 0 4
9135: NOT
9136: IFFALSE 9140
// exit ;
9138: GO 9278
// un := tmp [ rand ( 1 , tmp ) ] ;
9140: LD_ADDR_VAR 0 3
9144: PUSH
9145: LD_VAR 0 4
9149: PUSH
9150: LD_INT 1
9152: PPUSH
9153: LD_VAR 0 4
9157: PPUSH
9158: CALL_OW 12
9162: ARRAY
9163: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9164: LD_VAR 0 3
9168: PPUSH
9169: LD_INT 7
9171: PPUSH
9172: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9176: LD_VAR 0 3
9180: PPUSH
9181: CALL_OW 264
9185: PUSH
9186: LD_INT 48
9188: EQUAL
9189: IFFALSE 9208
// ComAttackPlace ( un , 194 , 19 ) else
9191: LD_VAR 0 3
9195: PPUSH
9196: LD_INT 194
9198: PPUSH
9199: LD_INT 19
9201: PPUSH
9202: CALL_OW 116
9206: GO 9242
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9208: LD_VAR 0 3
9212: PPUSH
9213: LD_INT 81
9215: PUSH
9216: LD_INT 7
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PPUSH
9223: CALL_OW 69
9227: PPUSH
9228: LD_VAR 0 3
9232: PPUSH
9233: CALL_OW 74
9237: PPUSH
9238: CALL_OW 115
// if not alliance_used_artifact_2 then
9242: LD_EXP 11
9246: NOT
9247: IFFALSE 9278
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9249: LD_ADDR_EXP 11
9253: PUSH
9254: LD_VAR 0 3
9258: PPUSH
9259: CALL_OW 250
9263: PUSH
9264: LD_VAR 0 3
9268: PPUSH
9269: CALL_OW 251
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: ST_TO_ADDR
// end ; end_of_file
9278: LD_VAR 0 1
9282: RET
// export function DebugMode ; var i , j , b ; begin
9283: LD_INT 0
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
// enable_addtolog = true ;
9289: LD_ADDR_OWVAR 81
9293: PUSH
9294: LD_INT 1
9296: ST_TO_ADDR
// FogOff ( 6 ) ;
9297: LD_INT 6
9299: PPUSH
9300: CALL_OW 344
// uc_side = 6 ;
9304: LD_ADDR_OWVAR 20
9308: PUSH
9309: LD_INT 6
9311: ST_TO_ADDR
// uc_nation = 3 ;
9312: LD_ADDR_OWVAR 21
9316: PUSH
9317: LD_INT 3
9319: ST_TO_ADDR
// bc_level = 10 ;
9320: LD_ADDR_OWVAR 43
9324: PUSH
9325: LD_INT 10
9327: ST_TO_ADDR
// bc_type := b_lab_full ;
9328: LD_ADDR_OWVAR 42
9332: PUSH
9333: LD_INT 8
9335: ST_TO_ADDR
// bc_kind1 := 11 ;
9336: LD_ADDR_OWVAR 44
9340: PUSH
9341: LD_INT 11
9343: ST_TO_ADDR
// bc_kind2 := 12 ;
9344: LD_ADDR_OWVAR 45
9348: PUSH
9349: LD_INT 12
9351: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9352: LD_INT 189
9354: PPUSH
9355: LD_INT 20
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 47
// bc_type := b_warehouse ;
9365: LD_ADDR_OWVAR 42
9369: PUSH
9370: LD_INT 1
9372: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9373: LD_ADDR_VAR 0 4
9377: PUSH
9378: LD_INT 201
9380: PPUSH
9381: LD_INT 22
9383: PPUSH
9384: LD_INT 4
9386: PPUSH
9387: CALL_OW 47
9391: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9392: LD_VAR 0 4
9396: PPUSH
9397: CALL_OW 274
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: LD_INT 10000
9407: PPUSH
9408: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9412: LD_VAR 0 4
9416: PPUSH
9417: CALL_OW 274
9421: PPUSH
9422: LD_INT 2
9424: PPUSH
9425: LD_INT 10000
9427: PPUSH
9428: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 274
9441: PPUSH
9442: LD_INT 3
9444: PPUSH
9445: LD_INT 10000
9447: PPUSH
9448: CALL_OW 277
// bc_type := b_siberite_power ;
9452: LD_ADDR_OWVAR 42
9456: PUSH
9457: LD_INT 28
9459: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_INT 216
9467: PPUSH
9468: LD_INT 16
9470: PPUSH
9471: LD_INT 4
9473: PPUSH
9474: CALL_OW 47
9478: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9479: LD_ADDR_VAR 0 4
9483: PUSH
9484: LD_INT 219
9486: PPUSH
9487: LD_INT 16
9489: PPUSH
9490: LD_INT 4
9492: PPUSH
9493: CALL_OW 47
9497: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9498: LD_INT 55
9500: PPUSH
9501: LD_INT 6
9503: PPUSH
9504: LD_INT 2
9506: PPUSH
9507: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9511: LD_INT 56
9513: PPUSH
9514: LD_INT 6
9516: PPUSH
9517: LD_INT 2
9519: PPUSH
9520: CALL_OW 322
// end ; end_of_file
9524: LD_VAR 0 1
9528: RET
// export function SOS_UnitDestroyed ( un ) ; begin
9529: LD_INT 0
9531: PPUSH
// ComRadiation ( un ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: CALL 10618 0 1
// end ;
9541: LD_VAR 0 2
9545: RET
// export function SOS_UnitKamikazed ( un ) ; begin
9546: LD_INT 0
9548: PPUSH
// ComRadiation ( un ) ;
9549: LD_VAR 0 1
9553: PPUSH
9554: CALL 10618 0 1
// end ;
9558: LD_VAR 0 2
9562: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9563: LD_INT 0
9565: PPUSH
// end ;
9566: LD_VAR 0 4
9570: RET
// export function SOS_Command ( cmd ) ; begin
9571: LD_INT 0
9573: PPUSH
// end ;
9574: LD_VAR 0 2
9578: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9579: LD_INT 0
9581: PPUSH
// end ;
9582: LD_VAR 0 6
9586: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
9587: LD_INT 0
9589: PPUSH
9590: PPUSH
9591: PPUSH
9592: PPUSH
// if not vehicle or not factory then
9593: LD_VAR 0 1
9597: NOT
9598: IFTRUE 9607
9600: PUSH
9601: LD_VAR 0 2
9605: NOT
9606: OR
9607: IFFALSE 9611
// exit ;
9609: GO 10193
// if not factoryWaypoints then
9611: LD_EXP 105
9615: NOT
9616: IFFALSE 9620
// exit ;
9618: GO 10193
// for i := 1 to Count ( factoryWaypoints ) do
9620: LD_ADDR_VAR 0 4
9624: PUSH
9625: DOUBLE
9626: LD_INT 1
9628: DEC
9629: ST_TO_ADDR
9630: LD_EXP 105
9634: PPUSH
9635: CALL 34035 0 1
9639: PUSH
9640: FOR_TO
9641: IFFALSE 10191
// if factoryWaypoints [ i ] [ 2 ] = factory then
9643: LD_EXP 105
9647: PUSH
9648: LD_VAR 0 4
9652: ARRAY
9653: PUSH
9654: LD_INT 2
9656: ARRAY
9657: PUSH
9658: LD_VAR 0 2
9662: EQUAL
9663: IFFALSE 10189
// begin if GetControl ( vehicle ) = control_manual then
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 263
9674: PUSH
9675: LD_INT 1
9677: EQUAL
9678: IFFALSE 10042
// begin driver := IsDrivenBy ( vehicle ) ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 311
9694: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
9695: LD_VAR 0 5
9699: PUSH
9700: LD_EXP 106
9704: IN
9705: IFTRUE 9719
9707: PUSH
9708: LD_VAR 0 1
9712: PUSH
9713: LD_EXP 106
9717: IN
9718: OR
9719: IFFALSE 9725
// exit ;
9721: POP
9722: POP
9723: GO 10193
// if not HasTask ( driver ) then
9725: LD_VAR 0 5
9729: PPUSH
9730: CALL_OW 314
9734: NOT
9735: IFFALSE 10040
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
9737: LD_ADDR_EXP 106
9741: PUSH
9742: LD_EXP 106
9746: PPUSH
9747: LD_VAR 0 5
9751: PPUSH
9752: CALL 69967 0 2
9756: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
9757: LD_ADDR_EXP 106
9761: PUSH
9762: LD_EXP 106
9766: PPUSH
9767: LD_VAR 0 1
9771: PPUSH
9772: CALL 69967 0 2
9776: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: LD_EXP 105
9786: PUSH
9787: LD_VAR 0 4
9791: ARRAY
9792: PUSH
9793: LD_INT 3
9795: ARRAY
9796: PPUSH
9797: LD_EXP 105
9801: PUSH
9802: LD_VAR 0 4
9806: ARRAY
9807: PUSH
9808: LD_INT 4
9810: ARRAY
9811: PPUSH
9812: CALL_OW 428
9816: ST_TO_ADDR
// if hex then
9817: LD_VAR 0 6
9821: IFFALSE 9839
// ComMoveUnit ( driver , hex ) else
9823: LD_VAR 0 5
9827: PPUSH
9828: LD_VAR 0 6
9832: PPUSH
9833: CALL_OW 112
9837: GO 9923
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_EXP 105
9848: PUSH
9849: LD_VAR 0 4
9853: ARRAY
9854: PUSH
9855: LD_INT 3
9857: ARRAY
9858: PPUSH
9859: LD_EXP 105
9863: PUSH
9864: LD_VAR 0 4
9868: ARRAY
9869: PUSH
9870: LD_INT 4
9872: ARRAY
9873: PPUSH
9874: CALL_OW 297
9878: PUSH
9879: LD_INT 0
9881: GREATER
9882: IFFALSE 9923
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9884: LD_VAR 0 5
9888: PPUSH
9889: LD_EXP 105
9893: PUSH
9894: LD_VAR 0 4
9898: ARRAY
9899: PUSH
9900: LD_INT 3
9902: ARRAY
9903: PPUSH
9904: LD_EXP 105
9908: PUSH
9909: LD_VAR 0 4
9913: ARRAY
9914: PUSH
9915: LD_INT 4
9917: ARRAY
9918: PPUSH
9919: CALL_OW 111
// AddComExitVehicle ( driver ) ;
9923: LD_VAR 0 5
9927: PPUSH
9928: CALL_OW 181
// if Multiplayer then
9932: LD_OWVAR 4
9936: IFFALSE 9985
// begin repeat wait ( 10 ) ;
9938: LD_INT 10
9940: PPUSH
9941: CALL_OW 67
// until not IsInUnit ( driver ) ;
9945: LD_VAR 0 5
9949: PPUSH
9950: CALL_OW 310
9954: NOT
9955: IFFALSE 9938
// if not HasTask ( driver ) then
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL_OW 314
9966: NOT
9967: IFFALSE 9983
// ComEnterUnit ( driver , factory ) ;
9969: LD_VAR 0 5
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: CALL_OW 120
// end else
9983: GO 9999
// AddComEnterUnit ( driver , factory ) ;
9985: LD_VAR 0 5
9989: PPUSH
9990: LD_VAR 0 2
9994: PPUSH
9995: CALL_OW 180
// wait ( 0 0$1 ) ;
9999: LD_INT 35
10001: PPUSH
10002: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
10006: LD_ADDR_EXP 106
10010: PUSH
10011: LD_EXP 106
10015: PUSH
10016: LD_VAR 0 5
10020: DIFF
10021: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
10022: LD_ADDR_EXP 106
10026: PUSH
10027: LD_EXP 106
10031: PUSH
10032: LD_VAR 0 1
10036: DIFF
10037: ST_TO_ADDR
// break ;
10038: GO 10191
// end ; end else
10040: GO 10189
// if GetControl ( vehicle ) = control_remote then
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 263
10051: PUSH
10052: LD_INT 2
10054: EQUAL
10055: IFFALSE 10141
// begin wait ( 0 0$2 ) ;
10057: LD_INT 70
10059: PPUSH
10060: CALL_OW 67
// repeat wait ( 10 ) ;
10064: LD_INT 10
10066: PPUSH
10067: CALL_OW 67
// Connect ( vehicle ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL 40279 0 1
// until IsControledBy ( vehicle ) ;
10080: LD_VAR 0 1
10084: PPUSH
10085: CALL_OW 312
10089: IFFALSE 10064
// wait ( 10 ) ;
10091: LD_INT 10
10093: PPUSH
10094: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10098: LD_VAR 0 1
10102: PPUSH
10103: LD_EXP 105
10107: PUSH
10108: LD_VAR 0 4
10112: ARRAY
10113: PUSH
10114: LD_INT 3
10116: ARRAY
10117: PPUSH
10118: LD_EXP 105
10122: PUSH
10123: LD_VAR 0 4
10127: ARRAY
10128: PUSH
10129: LD_INT 4
10131: ARRAY
10132: PPUSH
10133: CALL_OW 111
// break ;
10137: GO 10191
// end else
10139: GO 10189
// begin wait ( 0 0$3 ) ;
10141: LD_INT 105
10143: PPUSH
10144: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: LD_EXP 105
10157: PUSH
10158: LD_VAR 0 4
10162: ARRAY
10163: PUSH
10164: LD_INT 3
10166: ARRAY
10167: PPUSH
10168: LD_EXP 105
10172: PUSH
10173: LD_VAR 0 4
10177: ARRAY
10178: PUSH
10179: LD_INT 4
10181: ARRAY
10182: PPUSH
10183: CALL_OW 111
// break ;
10187: GO 10191
// end ; end ;
10189: GO 9640
10191: POP
10192: POP
// end ;
10193: LD_VAR 0 3
10197: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10198: LD_INT 0
10200: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10201: LD_VAR 0 1
10205: PUSH
10206: LD_INT 250
10208: EQUAL
10209: IFFALSE 10226
10211: PUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 264
10221: PUSH
10222: LD_INT 81
10224: EQUAL
10225: AND
10226: IFFALSE 10247
// MinerPlaceMine ( unit , x , y ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_VAR 0 4
10237: PPUSH
10238: LD_VAR 0 5
10242: PPUSH
10243: CALL 13379 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10247: LD_VAR 0 1
10251: PUSH
10252: LD_INT 251
10254: EQUAL
10255: IFFALSE 10272
10257: PUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 264
10267: PUSH
10268: LD_INT 81
10270: EQUAL
10271: AND
10272: IFFALSE 10293
// MinerDetonateMine ( unit , x , y ) ;
10274: LD_VAR 0 2
10278: PPUSH
10279: LD_VAR 0 4
10283: PPUSH
10284: LD_VAR 0 5
10288: PPUSH
10289: CALL 13658 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10293: LD_VAR 0 1
10297: PUSH
10298: LD_INT 252
10300: EQUAL
10301: IFFALSE 10318
10303: PUSH
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 264
10313: PUSH
10314: LD_INT 81
10316: EQUAL
10317: AND
10318: IFFALSE 10339
// MinerCreateMinefield ( unit , x , y ) ;
10320: LD_VAR 0 2
10324: PPUSH
10325: LD_VAR 0 4
10329: PPUSH
10330: LD_VAR 0 5
10334: PPUSH
10335: CALL 14077 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 253
10346: EQUAL
10347: IFFALSE 10364
10349: PUSH
10350: LD_VAR 0 2
10354: PPUSH
10355: CALL_OW 257
10359: PUSH
10360: LD_INT 5
10362: EQUAL
10363: AND
10364: IFFALSE 10385
// ComBinocular ( unit , x , y ) ;
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_VAR 0 4
10375: PPUSH
10376: LD_VAR 0 5
10380: PPUSH
10381: CALL 14452 0 3
// if selectedUnit then
10385: LD_VAR 0 3
10389: IFFALSE 10449
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10391: LD_VAR 0 1
10395: PUSH
10396: LD_INT 254
10398: EQUAL
10399: IFFALSE 10416
10401: PUSH
10402: LD_VAR 0 2
10406: PPUSH
10407: CALL_OW 264
10411: PUSH
10412: LD_INT 99
10414: EQUAL
10415: AND
10416: IFFALSE 10433
10418: PUSH
10419: LD_VAR 0 3
10423: PPUSH
10424: CALL_OW 263
10428: PUSH
10429: LD_INT 3
10431: EQUAL
10432: AND
10433: IFFALSE 10449
// HackDestroyVehicle ( unit , selectedUnit ) ;
10435: LD_VAR 0 2
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: CALL 12739 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10449: LD_VAR 0 1
10453: PUSH
10454: LD_INT 255
10456: EQUAL
10457: IFFALSE 10481
10459: PUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 264
10469: PUSH
10470: LD_INT 14
10472: PUSH
10473: LD_INT 53
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: IN
10480: AND
10481: IFFALSE 10499
10483: PUSH
10484: LD_VAR 0 4
10488: PPUSH
10489: LD_VAR 0 5
10493: PPUSH
10494: CALL_OW 488
10498: AND
10499: IFFALSE 10523
// CutTreeXYR ( unit , x , y , 12 ) ;
10501: LD_VAR 0 2
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: LD_VAR 0 5
10515: PPUSH
10516: LD_INT 12
10518: PPUSH
10519: CALL 10714 0 4
// if cmd = 256 then
10523: LD_VAR 0 1
10527: PUSH
10528: LD_INT 256
10530: EQUAL
10531: IFFALSE 10552
// SetFactoryWaypoint ( unit , x , y ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_VAR 0 4
10542: PPUSH
10543: LD_VAR 0 5
10547: PPUSH
10548: CALL 30356 0 3
// if cmd = 257 then
10552: LD_VAR 0 1
10556: PUSH
10557: LD_INT 257
10559: EQUAL
10560: IFFALSE 10581
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 4
10571: PPUSH
10572: LD_VAR 0 5
10576: PPUSH
10577: CALL 30852 0 3
// if cmd = 258 then
10581: LD_VAR 0 1
10585: PUSH
10586: LD_INT 258
10588: EQUAL
10589: IFFALSE 10613
// BurnTreeXYR ( unit , x , y , 8 ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: LD_VAR 0 5
10605: PPUSH
10606: LD_INT 8
10608: PPUSH
10609: CALL 11114 0 4
// end ;
10613: LD_VAR 0 6
10617: RET
// export function ComRadiation ( un ) ; var eff ; begin
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
10622: LD_VAR 0 1
10626: PPUSH
10627: CALL_OW 264
10631: PUSH
10632: LD_INT 91
10634: NONEQUAL
10635: IFFALSE 10639
// exit ;
10637: GO 10709
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10639: LD_INT 68
10641: PPUSH
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 255
10651: PPUSH
10652: CALL_OW 321
10656: PUSH
10657: LD_INT 2
10659: EQUAL
10660: IFFALSE 10672
// eff := 50 else
10662: LD_ADDR_VAR 0 3
10666: PUSH
10667: LD_INT 50
10669: ST_TO_ADDR
10670: GO 10680
// eff := 25 ;
10672: LD_ADDR_VAR 0 3
10676: PUSH
10677: LD_INT 25
10679: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 250
10689: PPUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 251
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: CALL_OW 495
// end ;
10709: LD_VAR 0 2
10713: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10714: LD_INT 0
10716: PPUSH
10717: PPUSH
10718: PPUSH
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 302
10734: NOT
10735: IFTRUE 10754
10737: PUSH
10738: LD_VAR 0 2
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: CALL_OW 488
10752: NOT
10753: OR
10754: IFTRUE 10763
10756: PUSH
10757: LD_VAR 0 4
10761: NOT
10762: OR
10763: IFFALSE 10767
// exit ;
10765: GO 11109
// list := [ ] ;
10767: LD_ADDR_VAR 0 13
10771: PUSH
10772: EMPTY
10773: ST_TO_ADDR
// if x - r < 0 then
10774: LD_VAR 0 2
10778: PUSH
10779: LD_VAR 0 4
10783: MINUS
10784: PUSH
10785: LD_INT 0
10787: LESS
10788: IFFALSE 10800
// min_x := 0 else
10790: LD_ADDR_VAR 0 7
10794: PUSH
10795: LD_INT 0
10797: ST_TO_ADDR
10798: GO 10816
// min_x := x - r ;
10800: LD_ADDR_VAR 0 7
10804: PUSH
10805: LD_VAR 0 2
10809: PUSH
10810: LD_VAR 0 4
10814: MINUS
10815: ST_TO_ADDR
// if y - r < 0 then
10816: LD_VAR 0 3
10820: PUSH
10821: LD_VAR 0 4
10825: MINUS
10826: PUSH
10827: LD_INT 0
10829: LESS
10830: IFFALSE 10842
// min_y := 0 else
10832: LD_ADDR_VAR 0 8
10836: PUSH
10837: LD_INT 0
10839: ST_TO_ADDR
10840: GO 10858
// min_y := y - r ;
10842: LD_ADDR_VAR 0 8
10846: PUSH
10847: LD_VAR 0 3
10851: PUSH
10852: LD_VAR 0 4
10856: MINUS
10857: ST_TO_ADDR
// max_x := x + r ;
10858: LD_ADDR_VAR 0 9
10862: PUSH
10863: LD_VAR 0 2
10867: PUSH
10868: LD_VAR 0 4
10872: PLUS
10873: ST_TO_ADDR
// max_y := y + r ;
10874: LD_ADDR_VAR 0 10
10878: PUSH
10879: LD_VAR 0 3
10883: PUSH
10884: LD_VAR 0 4
10888: PLUS
10889: ST_TO_ADDR
// for _x = min_x to max_x do
10890: LD_ADDR_VAR 0 11
10894: PUSH
10895: DOUBLE
10896: LD_VAR 0 7
10900: DEC
10901: ST_TO_ADDR
10902: LD_VAR 0 9
10906: PUSH
10907: FOR_TO
10908: IFFALSE 11027
// for _y = min_y to max_y do
10910: LD_ADDR_VAR 0 12
10914: PUSH
10915: DOUBLE
10916: LD_VAR 0 8
10920: DEC
10921: ST_TO_ADDR
10922: LD_VAR 0 10
10926: PUSH
10927: FOR_TO
10928: IFFALSE 11023
// begin if not ValidHex ( _x , _y ) then
10930: LD_VAR 0 11
10934: PPUSH
10935: LD_VAR 0 12
10939: PPUSH
10940: CALL_OW 488
10944: NOT
10945: IFFALSE 10949
// continue ;
10947: GO 10927
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10949: LD_VAR 0 11
10953: PPUSH
10954: LD_VAR 0 12
10958: PPUSH
10959: CALL_OW 351
10963: IFFALSE 10981
10965: PUSH
10966: LD_VAR 0 11
10970: PPUSH
10971: LD_VAR 0 12
10975: PPUSH
10976: CALL_OW 554
10980: AND
10981: IFFALSE 11021
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10983: LD_ADDR_VAR 0 13
10987: PUSH
10988: LD_VAR 0 13
10992: PPUSH
10993: LD_VAR 0 13
10997: PUSH
10998: LD_INT 1
11000: PLUS
11001: PPUSH
11002: LD_VAR 0 11
11006: PUSH
11007: LD_VAR 0 12
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PPUSH
11016: CALL_OW 2
11020: ST_TO_ADDR
// end ;
11021: GO 10927
11023: POP
11024: POP
11025: GO 10907
11027: POP
11028: POP
// if not list then
11029: LD_VAR 0 13
11033: NOT
11034: IFFALSE 11038
// exit ;
11036: GO 11109
// for i in list do
11038: LD_ADDR_VAR 0 6
11042: PUSH
11043: LD_VAR 0 13
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11107
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_STRING M
11058: PUSH
11059: LD_VAR 0 6
11063: PUSH
11064: LD_INT 1
11066: ARRAY
11067: PUSH
11068: LD_VAR 0 6
11072: PUSH
11073: LD_INT 2
11075: ARRAY
11076: PUSH
11077: LD_INT 0
11079: PUSH
11080: LD_INT 0
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: PPUSH
11101: CALL_OW 447
11105: GO 11048
11107: POP
11108: POP
// end ;
11109: LD_VAR 0 5
11113: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
11114: LD_INT 0
11116: PPUSH
11117: PPUSH
11118: PPUSH
11119: PPUSH
11120: PPUSH
11121: PPUSH
11122: PPUSH
11123: PPUSH
11124: PPUSH
11125: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 302
11135: NOT
11136: IFTRUE 11155
11138: PUSH
11139: LD_VAR 0 2
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: CALL_OW 488
11153: NOT
11154: OR
11155: IFTRUE 11164
11157: PUSH
11158: LD_VAR 0 4
11162: NOT
11163: OR
11164: IFFALSE 11168
// exit ;
11166: GO 11685
// list := [ ] ;
11168: LD_ADDR_VAR 0 13
11172: PUSH
11173: EMPTY
11174: ST_TO_ADDR
// if x - r < 0 then
11175: LD_VAR 0 2
11179: PUSH
11180: LD_VAR 0 4
11184: MINUS
11185: PUSH
11186: LD_INT 0
11188: LESS
11189: IFFALSE 11201
// min_x := 0 else
11191: LD_ADDR_VAR 0 7
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
11199: GO 11217
// min_x := x - r ;
11201: LD_ADDR_VAR 0 7
11205: PUSH
11206: LD_VAR 0 2
11210: PUSH
11211: LD_VAR 0 4
11215: MINUS
11216: ST_TO_ADDR
// if y - r < 0 then
11217: LD_VAR 0 3
11221: PUSH
11222: LD_VAR 0 4
11226: MINUS
11227: PUSH
11228: LD_INT 0
11230: LESS
11231: IFFALSE 11243
// min_y := 0 else
11233: LD_ADDR_VAR 0 8
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
11241: GO 11259
// min_y := y - r ;
11243: LD_ADDR_VAR 0 8
11247: PUSH
11248: LD_VAR 0 3
11252: PUSH
11253: LD_VAR 0 4
11257: MINUS
11258: ST_TO_ADDR
// max_x := x + r ;
11259: LD_ADDR_VAR 0 9
11263: PUSH
11264: LD_VAR 0 2
11268: PUSH
11269: LD_VAR 0 4
11273: PLUS
11274: ST_TO_ADDR
// max_y := y + r ;
11275: LD_ADDR_VAR 0 10
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 4
11289: PLUS
11290: ST_TO_ADDR
// for _x = min_x to max_x do
11291: LD_ADDR_VAR 0 11
11295: PUSH
11296: DOUBLE
11297: LD_VAR 0 7
11301: DEC
11302: ST_TO_ADDR
11303: LD_VAR 0 9
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11428
// for _y = min_y to max_y do
11311: LD_ADDR_VAR 0 12
11315: PUSH
11316: DOUBLE
11317: LD_VAR 0 8
11321: DEC
11322: ST_TO_ADDR
11323: LD_VAR 0 10
11327: PUSH
11328: FOR_TO
11329: IFFALSE 11424
// begin if not ValidHex ( _x , _y ) then
11331: LD_VAR 0 11
11335: PPUSH
11336: LD_VAR 0 12
11340: PPUSH
11341: CALL_OW 488
11345: NOT
11346: IFFALSE 11350
// continue ;
11348: GO 11328
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11350: LD_VAR 0 11
11354: PPUSH
11355: LD_VAR 0 12
11359: PPUSH
11360: CALL_OW 351
11364: IFFALSE 11382
11366: PUSH
11367: LD_VAR 0 11
11371: PPUSH
11372: LD_VAR 0 12
11376: PPUSH
11377: CALL_OW 554
11381: AND
11382: IFFALSE 11422
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11384: LD_ADDR_VAR 0 13
11388: PUSH
11389: LD_VAR 0 13
11393: PPUSH
11394: LD_VAR 0 13
11398: PUSH
11399: LD_INT 1
11401: PLUS
11402: PPUSH
11403: LD_VAR 0 11
11407: PUSH
11408: LD_VAR 0 12
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 2
11421: ST_TO_ADDR
// end ;
11422: GO 11328
11424: POP
11425: POP
11426: GO 11308
11428: POP
11429: POP
// if not list then
11430: LD_VAR 0 13
11434: NOT
11435: IFFALSE 11439
// exit ;
11437: GO 11685
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
11439: LD_ADDR_VAR 0 13
11443: PUSH
11444: LD_VAR 0 1
11448: PPUSH
11449: LD_VAR 0 13
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL 37407 0 4
11464: ST_TO_ADDR
// ComStop ( flame ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: CALL_OW 141
// for i in list do
11474: LD_ADDR_VAR 0 6
11478: PUSH
11479: LD_VAR 0 13
11483: PUSH
11484: FOR_IN
11485: IFFALSE 11516
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11487: LD_VAR 0 1
11491: PPUSH
11492: LD_VAR 0 6
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: LD_VAR 0 6
11505: PUSH
11506: LD_INT 2
11508: ARRAY
11509: PPUSH
11510: CALL_OW 176
11514: GO 11484
11516: POP
11517: POP
// repeat wait ( 0 0$1 ) ;
11518: LD_INT 35
11520: PPUSH
11521: CALL_OW 67
// task := GetTaskList ( flame ) ;
11525: LD_ADDR_VAR 0 14
11529: PUSH
11530: LD_VAR 0 1
11534: PPUSH
11535: CALL_OW 437
11539: ST_TO_ADDR
// if not task then
11540: LD_VAR 0 14
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11685
// if task [ 1 ] [ 1 ] <> | then
11549: LD_VAR 0 14
11553: PUSH
11554: LD_INT 1
11556: ARRAY
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PUSH
11562: LD_STRING |
11564: NONEQUAL
11565: IFFALSE 11569
// exit ;
11567: GO 11685
// _x := task [ 1 ] [ 2 ] ;
11569: LD_ADDR_VAR 0 11
11573: PUSH
11574: LD_VAR 0 14
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PUSH
11583: LD_INT 2
11585: ARRAY
11586: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
11587: LD_ADDR_VAR 0 12
11591: PUSH
11592: LD_VAR 0 14
11596: PUSH
11597: LD_INT 1
11599: ARRAY
11600: PUSH
11601: LD_INT 3
11603: ARRAY
11604: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
11605: LD_VAR 0 11
11609: PPUSH
11610: LD_VAR 0 12
11614: PPUSH
11615: CALL_OW 351
11619: NOT
11620: IFTRUE 11639
11622: PUSH
11623: LD_VAR 0 11
11627: PPUSH
11628: LD_VAR 0 12
11632: PPUSH
11633: CALL_OW 554
11637: NOT
11638: OR
11639: IFFALSE 11673
// begin task := Delete ( task , 1 ) ;
11641: LD_ADDR_VAR 0 14
11645: PUSH
11646: LD_VAR 0 14
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 3
11658: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 14
11668: PPUSH
11669: CALL_OW 446
// end ; until not HasTask ( flame ) ;
11673: LD_VAR 0 1
11677: PPUSH
11678: CALL_OW 314
11682: NOT
11683: IFFALSE 11518
// end ;
11685: LD_VAR 0 5
11689: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11690: LD_EXP 36
11694: NOT
11695: IFFALSE 11745
11697: GO 11699
11699: DISABLE
// begin initHack := true ;
11700: LD_ADDR_EXP 36
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// hackTanks := [ ] ;
11708: LD_ADDR_EXP 37
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11715: LD_ADDR_EXP 38
11719: PUSH
11720: EMPTY
11721: ST_TO_ADDR
// hackLimit := 3 ;
11722: LD_ADDR_EXP 39
11726: PUSH
11727: LD_INT 3
11729: ST_TO_ADDR
// hackDist := 12 ;
11730: LD_ADDR_EXP 40
11734: PUSH
11735: LD_INT 12
11737: ST_TO_ADDR
// hackCounter := [ ] ;
11738: LD_ADDR_EXP 41
11742: PUSH
11743: EMPTY
11744: ST_TO_ADDR
// end ;
11745: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11746: LD_EXP 36
11750: IFFALSE 11768
11752: PUSH
11753: LD_INT 34
11755: PUSH
11756: LD_INT 99
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: AND
11768: IFFALSE 12021
11770: GO 11772
11772: DISABLE
11773: LD_INT 0
11775: PPUSH
11776: PPUSH
// begin enable ;
11777: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11778: LD_ADDR_VAR 0 1
11782: PUSH
11783: LD_INT 34
11785: PUSH
11786: LD_INT 99
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PPUSH
11793: CALL_OW 69
11797: PUSH
11798: FOR_IN
11799: IFFALSE 12019
// begin if not i in hackTanks then
11801: LD_VAR 0 1
11805: PUSH
11806: LD_EXP 37
11810: IN
11811: NOT
11812: IFFALSE 11895
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11814: LD_ADDR_EXP 37
11818: PUSH
11819: LD_EXP 37
11823: PPUSH
11824: LD_EXP 37
11828: PUSH
11829: LD_INT 1
11831: PLUS
11832: PPUSH
11833: LD_VAR 0 1
11837: PPUSH
11838: CALL_OW 1
11842: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11843: LD_ADDR_EXP 38
11847: PUSH
11848: LD_EXP 38
11852: PPUSH
11853: LD_EXP 38
11857: PUSH
11858: LD_INT 1
11860: PLUS
11861: PPUSH
11862: EMPTY
11863: PPUSH
11864: CALL_OW 1
11868: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11869: LD_ADDR_EXP 41
11873: PUSH
11874: LD_EXP 41
11878: PPUSH
11879: LD_EXP 41
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: PPUSH
11888: EMPTY
11889: PPUSH
11890: CALL_OW 1
11894: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 302
11904: NOT
11905: IFFALSE 11918
// begin HackUnlinkAll ( i ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL 12024 0 1
// continue ;
11916: GO 11798
// end ; HackCheckCapturedStatus ( i ) ;
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL 12469 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11927: LD_ADDR_VAR 0 2
11931: PUSH
11932: LD_INT 81
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 33
11951: PUSH
11952: LD_INT 3
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 91
11961: PUSH
11962: LD_VAR 0 1
11966: PUSH
11967: LD_EXP 40
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 50
11979: PUSH
11980: EMPTY
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// if not tmp then
11994: LD_VAR 0 2
11998: NOT
11999: IFFALSE 12003
// continue ;
12001: GO 11798
// HackLink ( i , tmp ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_VAR 0 2
12012: PPUSH
12013: CALL 12160 0 2
// end ;
12017: GO 11798
12019: POP
12020: POP
// end ;
12021: PPOPN 2
12023: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12024: LD_INT 0
12026: PPUSH
12027: PPUSH
12028: PPUSH
// if not hack in hackTanks then
12029: LD_VAR 0 1
12033: PUSH
12034: LD_EXP 37
12038: IN
12039: NOT
12040: IFFALSE 12044
// exit ;
12042: GO 12155
// index := GetElementIndex ( hackTanks , hack ) ;
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: LD_EXP 37
12053: PPUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL 36702 0 2
12063: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12064: LD_EXP 38
12068: PUSH
12069: LD_VAR 0 4
12073: ARRAY
12074: IFFALSE 12155
// begin for i in hackTanksCaptured [ index ] do
12076: LD_ADDR_VAR 0 3
12080: PUSH
12081: LD_EXP 38
12085: PUSH
12086: LD_VAR 0 4
12090: ARRAY
12091: PUSH
12092: FOR_IN
12093: IFFALSE 12119
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12095: LD_VAR 0 3
12099: PUSH
12100: LD_INT 1
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 2
12111: ARRAY
12112: PPUSH
12113: CALL_OW 235
12117: GO 12092
12119: POP
12120: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12121: LD_ADDR_EXP 38
12125: PUSH
12126: LD_EXP 38
12130: PPUSH
12131: LD_VAR 0 4
12135: PPUSH
12136: EMPTY
12137: PPUSH
12138: CALL_OW 1
12142: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12143: LD_VAR 0 1
12147: PPUSH
12148: LD_INT 0
12150: PPUSH
12151: CALL_OW 505
// end ; end ;
12155: LD_VAR 0 2
12159: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12160: LD_INT 0
12162: PPUSH
12163: PPUSH
12164: PPUSH
// if not hack in hackTanks or not vehicles then
12165: LD_VAR 0 1
12169: PUSH
12170: LD_EXP 37
12174: IN
12175: NOT
12176: IFTRUE 12185
12178: PUSH
12179: LD_VAR 0 2
12183: NOT
12184: OR
12185: IFFALSE 12189
// exit ;
12187: GO 12464
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12189: LD_ADDR_VAR 0 2
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: LD_VAR 0 2
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL 37354 0 4
12214: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12215: LD_ADDR_VAR 0 5
12219: PUSH
12220: LD_EXP 37
12224: PPUSH
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL 36702 0 2
12234: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12235: LD_EXP 38
12239: PUSH
12240: LD_VAR 0 5
12244: ARRAY
12245: PUSH
12246: LD_EXP 39
12250: LESS
12251: IFFALSE 12440
// begin for i := 1 to vehicles do
12253: LD_ADDR_VAR 0 4
12257: PUSH
12258: DOUBLE
12259: LD_INT 1
12261: DEC
12262: ST_TO_ADDR
12263: LD_VAR 0 2
12267: PUSH
12268: FOR_TO
12269: IFFALSE 12438
// begin if hackTanksCaptured [ index ] = hackLimit then
12271: LD_EXP 38
12275: PUSH
12276: LD_VAR 0 5
12280: ARRAY
12281: PUSH
12282: LD_EXP 39
12286: EQUAL
12287: IFFALSE 12291
// break ;
12289: GO 12438
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12291: LD_ADDR_EXP 41
12295: PUSH
12296: LD_EXP 41
12300: PPUSH
12301: LD_VAR 0 5
12305: PPUSH
12306: LD_EXP 41
12310: PUSH
12311: LD_VAR 0 5
12315: ARRAY
12316: PUSH
12317: LD_INT 1
12319: PLUS
12320: PPUSH
12321: CALL_OW 1
12325: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12326: LD_ADDR_EXP 38
12330: PUSH
12331: LD_EXP 38
12335: PPUSH
12336: LD_VAR 0 5
12340: PUSH
12341: LD_EXP 38
12345: PUSH
12346: LD_VAR 0 5
12350: ARRAY
12351: PUSH
12352: LD_INT 1
12354: PLUS
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: LD_VAR 0 2
12364: PUSH
12365: LD_VAR 0 4
12369: ARRAY
12370: PUSH
12371: LD_VAR 0 2
12375: PUSH
12376: LD_VAR 0 4
12380: ARRAY
12381: PPUSH
12382: CALL_OW 255
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL 36919 0 3
12395: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12396: LD_VAR 0 2
12400: PUSH
12401: LD_VAR 0 4
12405: ARRAY
12406: PPUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 255
12416: PPUSH
12417: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12421: LD_VAR 0 2
12425: PUSH
12426: LD_VAR 0 4
12430: ARRAY
12431: PPUSH
12432: CALL_OW 141
// end ;
12436: GO 12268
12438: POP
12439: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12440: LD_VAR 0 1
12444: PPUSH
12445: LD_EXP 38
12449: PUSH
12450: LD_VAR 0 5
12454: ARRAY
12455: PUSH
12456: LD_INT 0
12458: PLUS
12459: PPUSH
12460: CALL_OW 505
// end ;
12464: LD_VAR 0 3
12468: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12469: LD_INT 0
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
// if not hack in hackTanks then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 37
12484: IN
12485: NOT
12486: IFFALSE 12490
// exit ;
12488: GO 12734
// index := GetElementIndex ( hackTanks , hack ) ;
12490: LD_ADDR_VAR 0 4
12494: PUSH
12495: LD_EXP 37
12499: PPUSH
12500: LD_VAR 0 1
12504: PPUSH
12505: CALL 36702 0 2
12509: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12510: LD_ADDR_VAR 0 3
12514: PUSH
12515: DOUBLE
12516: LD_EXP 38
12520: PUSH
12521: LD_VAR 0 4
12525: ARRAY
12526: INC
12527: ST_TO_ADDR
12528: LD_INT 1
12530: PUSH
12531: FOR_DOWNTO
12532: IFFALSE 12708
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12534: LD_ADDR_VAR 0 5
12538: PUSH
12539: LD_EXP 38
12543: PUSH
12544: LD_VAR 0 4
12548: ARRAY
12549: PUSH
12550: LD_VAR 0 3
12554: ARRAY
12555: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12556: LD_VAR 0 5
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: CALL_OW 302
12569: NOT
12570: IFTRUE 12598
12572: PUSH
12573: LD_VAR 0 5
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: PPUSH
12582: CALL_OW 255
12586: PUSH
12587: LD_VAR 0 1
12591: PPUSH
12592: CALL_OW 255
12596: NONEQUAL
12597: OR
12598: IFFALSE 12706
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12600: LD_VAR 0 5
12604: PUSH
12605: LD_INT 1
12607: ARRAY
12608: PPUSH
12609: CALL_OW 305
12613: IFFALSE 12641
12615: PUSH
12616: LD_VAR 0 5
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 255
12629: PUSH
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL_OW 255
12639: EQUAL
12640: AND
12641: IFFALSE 12665
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12643: LD_VAR 0 5
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: PPUSH
12652: LD_VAR 0 5
12656: PUSH
12657: LD_INT 2
12659: ARRAY
12660: PPUSH
12661: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12665: LD_ADDR_EXP 38
12669: PUSH
12670: LD_EXP 38
12674: PPUSH
12675: LD_VAR 0 4
12679: PPUSH
12680: LD_EXP 38
12684: PUSH
12685: LD_VAR 0 4
12689: ARRAY
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: CALL_OW 3
12700: PPUSH
12701: CALL_OW 1
12705: ST_TO_ADDR
// end ; end ;
12706: GO 12531
12708: POP
12709: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12710: LD_VAR 0 1
12714: PPUSH
12715: LD_EXP 38
12719: PUSH
12720: LD_VAR 0 4
12724: ARRAY
12725: PUSH
12726: LD_INT 0
12728: PLUS
12729: PPUSH
12730: CALL_OW 505
// end ;
12734: LD_VAR 0 2
12738: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
12744: PPUSH
// if not hack in hackTanks then
12745: LD_VAR 0 1
12749: PUSH
12750: LD_EXP 37
12754: IN
12755: NOT
12756: IFFALSE 12760
// exit ;
12758: GO 12845
// index := GetElementIndex ( hackTanks , hack ) ;
12760: LD_ADDR_VAR 0 5
12764: PUSH
12765: LD_EXP 37
12769: PPUSH
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL 36702 0 2
12779: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12780: LD_ADDR_VAR 0 4
12784: PUSH
12785: DOUBLE
12786: LD_INT 1
12788: DEC
12789: ST_TO_ADDR
12790: LD_EXP 38
12794: PUSH
12795: LD_VAR 0 5
12799: ARRAY
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12843
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12804: LD_EXP 38
12808: PUSH
12809: LD_VAR 0 5
12813: ARRAY
12814: PUSH
12815: LD_VAR 0 4
12819: ARRAY
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PUSH
12825: LD_VAR 0 2
12829: EQUAL
12830: IFFALSE 12841
// KillUnit ( vehicle ) ;
12832: LD_VAR 0 2
12836: PPUSH
12837: CALL_OW 66
12841: GO 12801
12843: POP
12844: POP
// end ;
12845: LD_VAR 0 3
12849: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12850: LD_EXP 42
12854: NOT
12855: IFFALSE 12890
12857: GO 12859
12859: DISABLE
// begin initMiner := true ;
12860: LD_ADDR_EXP 42
12864: PUSH
12865: LD_INT 1
12867: ST_TO_ADDR
// minersList := [ ] ;
12868: LD_ADDR_EXP 43
12872: PUSH
12873: EMPTY
12874: ST_TO_ADDR
// minerMinesList := [ ] ;
12875: LD_ADDR_EXP 44
12879: PUSH
12880: EMPTY
12881: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12882: LD_ADDR_EXP 45
12886: PUSH
12887: LD_INT 5
12889: ST_TO_ADDR
// end ;
12890: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12891: LD_EXP 42
12895: IFFALSE 12913
12897: PUSH
12898: LD_INT 34
12900: PUSH
12901: LD_INT 81
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 69
12912: AND
12913: IFFALSE 13376
12915: GO 12917
12917: DISABLE
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
// begin enable ;
12924: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12925: LD_ADDR_VAR 0 1
12929: PUSH
12930: LD_INT 34
12932: PUSH
12933: LD_INT 81
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 69
12944: PUSH
12945: FOR_IN
12946: IFFALSE 13018
// begin if not i in minersList then
12948: LD_VAR 0 1
12952: PUSH
12953: LD_EXP 43
12957: IN
12958: NOT
12959: IFFALSE 13016
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12961: LD_ADDR_EXP 43
12965: PUSH
12966: LD_EXP 43
12970: PPUSH
12971: LD_EXP 43
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12990: LD_ADDR_EXP 44
12994: PUSH
12995: LD_EXP 44
12999: PPUSH
13000: LD_EXP 44
13004: PUSH
13005: LD_INT 1
13007: PLUS
13008: PPUSH
13009: EMPTY
13010: PPUSH
13011: CALL_OW 1
13015: ST_TO_ADDR
// end end ;
13016: GO 12945
13018: POP
13019: POP
// for i := minerMinesList downto 1 do
13020: LD_ADDR_VAR 0 1
13024: PUSH
13025: DOUBLE
13026: LD_EXP 44
13030: INC
13031: ST_TO_ADDR
13032: LD_INT 1
13034: PUSH
13035: FOR_DOWNTO
13036: IFFALSE 13374
// begin if IsLive ( minersList [ i ] ) then
13038: LD_EXP 43
13042: PUSH
13043: LD_VAR 0 1
13047: ARRAY
13048: PPUSH
13049: CALL_OW 300
13053: IFFALSE 13081
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13055: LD_EXP 43
13059: PUSH
13060: LD_VAR 0 1
13064: ARRAY
13065: PPUSH
13066: LD_EXP 44
13070: PUSH
13071: LD_VAR 0 1
13075: ARRAY
13076: PPUSH
13077: CALL_OW 505
// if not minerMinesList [ i ] then
13081: LD_EXP 44
13085: PUSH
13086: LD_VAR 0 1
13090: ARRAY
13091: NOT
13092: IFFALSE 13096
// continue ;
13094: GO 13035
// for j := minerMinesList [ i ] downto 1 do
13096: LD_ADDR_VAR 0 2
13100: PUSH
13101: DOUBLE
13102: LD_EXP 44
13106: PUSH
13107: LD_VAR 0 1
13111: ARRAY
13112: INC
13113: ST_TO_ADDR
13114: LD_INT 1
13116: PUSH
13117: FOR_DOWNTO
13118: IFFALSE 13370
// begin side := GetSide ( minersList [ i ] ) ;
13120: LD_ADDR_VAR 0 3
13124: PUSH
13125: LD_EXP 43
13129: PUSH
13130: LD_VAR 0 1
13134: ARRAY
13135: PPUSH
13136: CALL_OW 255
13140: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13141: LD_ADDR_VAR 0 4
13145: PUSH
13146: LD_EXP 44
13150: PUSH
13151: LD_VAR 0 1
13155: ARRAY
13156: PUSH
13157: LD_VAR 0 2
13161: ARRAY
13162: PUSH
13163: LD_INT 1
13165: ARRAY
13166: PPUSH
13167: LD_EXP 44
13171: PUSH
13172: LD_VAR 0 1
13176: ARRAY
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PUSH
13184: LD_INT 2
13186: ARRAY
13187: PPUSH
13188: CALL_OW 428
13192: ST_TO_ADDR
// if not tmp then
13193: LD_VAR 0 4
13197: NOT
13198: IFFALSE 13202
// continue ;
13200: GO 13117
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13202: LD_VAR 0 4
13206: PUSH
13207: LD_INT 81
13209: PUSH
13210: LD_VAR 0 3
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 69
13223: IN
13224: IFFALSE 13274
13226: PUSH
13227: LD_EXP 44
13231: PUSH
13232: LD_VAR 0 1
13236: ARRAY
13237: PUSH
13238: LD_VAR 0 2
13242: ARRAY
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: LD_EXP 44
13252: PUSH
13253: LD_VAR 0 1
13257: ARRAY
13258: PUSH
13259: LD_VAR 0 2
13263: ARRAY
13264: PUSH
13265: LD_INT 2
13267: ARRAY
13268: PPUSH
13269: CALL_OW 458
13273: AND
13274: IFFALSE 13368
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13276: LD_EXP 44
13280: PUSH
13281: LD_VAR 0 1
13285: ARRAY
13286: PUSH
13287: LD_VAR 0 2
13291: ARRAY
13292: PUSH
13293: LD_INT 1
13295: ARRAY
13296: PPUSH
13297: LD_EXP 44
13301: PUSH
13302: LD_VAR 0 1
13306: ARRAY
13307: PUSH
13308: LD_VAR 0 2
13312: ARRAY
13313: PUSH
13314: LD_INT 2
13316: ARRAY
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13327: LD_ADDR_EXP 44
13331: PUSH
13332: LD_EXP 44
13336: PPUSH
13337: LD_VAR 0 1
13341: PPUSH
13342: LD_EXP 44
13346: PUSH
13347: LD_VAR 0 1
13351: ARRAY
13352: PPUSH
13353: LD_VAR 0 2
13357: PPUSH
13358: CALL_OW 3
13362: PPUSH
13363: CALL_OW 1
13367: ST_TO_ADDR
// end ; end ;
13368: GO 13117
13370: POP
13371: POP
// end ;
13372: GO 13035
13374: POP
13375: POP
// end ;
13376: PPOPN 4
13378: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13379: LD_INT 0
13381: PPUSH
13382: PPUSH
// result := false ;
13383: LD_ADDR_VAR 0 4
13387: PUSH
13388: LD_INT 0
13390: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 264
13400: PUSH
13401: LD_INT 81
13403: EQUAL
13404: NOT
13405: IFFALSE 13409
// exit ;
13407: GO 13653
// index := GetElementIndex ( minersList , unit ) ;
13409: LD_ADDR_VAR 0 5
13413: PUSH
13414: LD_EXP 43
13418: PPUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: CALL 36702 0 2
13428: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13429: LD_EXP 44
13433: PUSH
13434: LD_VAR 0 5
13438: ARRAY
13439: PUSH
13440: LD_EXP 45
13444: GREATEREQUAL
13445: IFFALSE 13449
// exit ;
13447: GO 13653
// ComMoveXY ( unit , x , y ) ;
13449: LD_VAR 0 1
13453: PPUSH
13454: LD_VAR 0 2
13458: PPUSH
13459: LD_VAR 0 3
13463: PPUSH
13464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13468: LD_INT 35
13470: PPUSH
13471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13475: LD_VAR 0 1
13479: PPUSH
13480: LD_VAR 0 2
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: CALL 68748 0 3
13494: NOT
13495: IFFALSE 13508
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 314
13507: AND
13508: IFFALSE 13512
// exit ;
13510: GO 13653
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13512: LD_VAR 0 2
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: CALL_OW 428
13526: PUSH
13527: LD_VAR 0 1
13531: EQUAL
13532: IFFALSE 13546
13534: PUSH
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 314
13544: NOT
13545: AND
13546: IFFALSE 13468
// PlaySoundXY ( x , y , PlantMine ) ;
13548: LD_VAR 0 2
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_STRING PlantMine
13560: PPUSH
13561: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13565: LD_VAR 0 2
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 255
13584: PPUSH
13585: LD_INT 0
13587: PPUSH
13588: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13592: LD_ADDR_EXP 44
13596: PUSH
13597: LD_EXP 44
13601: PPUSH
13602: LD_VAR 0 5
13606: PUSH
13607: LD_EXP 44
13611: PUSH
13612: LD_VAR 0 5
13616: ARRAY
13617: PUSH
13618: LD_INT 1
13620: PLUS
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PPUSH
13626: LD_VAR 0 2
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL 36919 0 3
13644: ST_TO_ADDR
// result := true ;
13645: LD_ADDR_VAR 0 4
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end ;
13653: LD_VAR 0 4
13657: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13658: LD_INT 0
13660: PPUSH
13661: PPUSH
13662: PPUSH
// if not unit in minersList then
13663: LD_VAR 0 1
13667: PUSH
13668: LD_EXP 43
13672: IN
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14072
// index := GetElementIndex ( minersList , unit ) ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: LD_EXP 43
13687: PPUSH
13688: LD_VAR 0 1
13692: PPUSH
13693: CALL 36702 0 2
13697: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13698: LD_ADDR_VAR 0 5
13702: PUSH
13703: DOUBLE
13704: LD_EXP 44
13708: PUSH
13709: LD_VAR 0 6
13713: ARRAY
13714: INC
13715: ST_TO_ADDR
13716: LD_INT 1
13718: PUSH
13719: FOR_DOWNTO
13720: IFFALSE 13883
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13722: LD_EXP 44
13726: PUSH
13727: LD_VAR 0 6
13731: ARRAY
13732: PUSH
13733: LD_VAR 0 5
13737: ARRAY
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PUSH
13743: LD_VAR 0 2
13747: EQUAL
13748: IFFALSE 13778
13750: PUSH
13751: LD_EXP 44
13755: PUSH
13756: LD_VAR 0 6
13760: ARRAY
13761: PUSH
13762: LD_VAR 0 5
13766: ARRAY
13767: PUSH
13768: LD_INT 2
13770: ARRAY
13771: PUSH
13772: LD_VAR 0 3
13776: EQUAL
13777: AND
13778: IFFALSE 13881
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13780: LD_EXP 44
13784: PUSH
13785: LD_VAR 0 6
13789: ARRAY
13790: PUSH
13791: LD_VAR 0 5
13795: ARRAY
13796: PUSH
13797: LD_INT 1
13799: ARRAY
13800: PPUSH
13801: LD_EXP 44
13805: PUSH
13806: LD_VAR 0 6
13810: ARRAY
13811: PUSH
13812: LD_VAR 0 5
13816: ARRAY
13817: PUSH
13818: LD_INT 2
13820: ARRAY
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 255
13831: PPUSH
13832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13836: LD_ADDR_EXP 44
13840: PUSH
13841: LD_EXP 44
13845: PPUSH
13846: LD_VAR 0 6
13850: PPUSH
13851: LD_EXP 44
13855: PUSH
13856: LD_VAR 0 6
13860: ARRAY
13861: PPUSH
13862: LD_VAR 0 5
13866: PPUSH
13867: CALL_OW 3
13871: PPUSH
13872: CALL_OW 1
13876: ST_TO_ADDR
// exit ;
13877: POP
13878: POP
13879: GO 14072
// end ; end ;
13881: GO 13719
13883: POP
13884: POP
// for i := minerMinesList [ index ] downto 1 do
13885: LD_ADDR_VAR 0 5
13889: PUSH
13890: DOUBLE
13891: LD_EXP 44
13895: PUSH
13896: LD_VAR 0 6
13900: ARRAY
13901: INC
13902: ST_TO_ADDR
13903: LD_INT 1
13905: PUSH
13906: FOR_DOWNTO
13907: IFFALSE 14070
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13909: LD_EXP 44
13913: PUSH
13914: LD_VAR 0 6
13918: ARRAY
13919: PUSH
13920: LD_VAR 0 5
13924: ARRAY
13925: PUSH
13926: LD_INT 1
13928: ARRAY
13929: PPUSH
13930: LD_EXP 44
13934: PUSH
13935: LD_VAR 0 6
13939: ARRAY
13940: PUSH
13941: LD_VAR 0 5
13945: ARRAY
13946: PUSH
13947: LD_INT 2
13949: ARRAY
13950: PPUSH
13951: LD_VAR 0 2
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: CALL_OW 298
13965: PUSH
13966: LD_INT 6
13968: LESS
13969: IFFALSE 14068
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13971: LD_EXP 44
13975: PUSH
13976: LD_VAR 0 6
13980: ARRAY
13981: PUSH
13982: LD_VAR 0 5
13986: ARRAY
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: PPUSH
13992: LD_EXP 44
13996: PUSH
13997: LD_VAR 0 6
14001: ARRAY
14002: PUSH
14003: LD_VAR 0 5
14007: ARRAY
14008: PUSH
14009: LD_INT 2
14011: ARRAY
14012: PPUSH
14013: LD_VAR 0 1
14017: PPUSH
14018: CALL_OW 255
14022: PPUSH
14023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14027: LD_ADDR_EXP 44
14031: PUSH
14032: LD_EXP 44
14036: PPUSH
14037: LD_VAR 0 6
14041: PPUSH
14042: LD_EXP 44
14046: PUSH
14047: LD_VAR 0 6
14051: ARRAY
14052: PPUSH
14053: LD_VAR 0 5
14057: PPUSH
14058: CALL_OW 3
14062: PPUSH
14063: CALL_OW 1
14067: ST_TO_ADDR
// end ; end ;
14068: GO 13906
14070: POP
14071: POP
// end ;
14072: LD_VAR 0 4
14076: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14077: LD_INT 0
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 264
14097: PUSH
14098: LD_INT 81
14100: EQUAL
14101: NOT
14102: IFTRUE 14117
14104: PUSH
14105: LD_VAR 0 1
14109: PUSH
14110: LD_EXP 43
14114: IN
14115: NOT
14116: OR
14117: IFFALSE 14121
// exit ;
14119: GO 14447
// index := GetElementIndex ( minersList , unit ) ;
14121: LD_ADDR_VAR 0 6
14125: PUSH
14126: LD_EXP 43
14130: PPUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL 36702 0 2
14140: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14141: LD_ADDR_VAR 0 8
14145: PUSH
14146: LD_EXP 45
14150: PUSH
14151: LD_EXP 44
14155: PUSH
14156: LD_VAR 0 6
14160: ARRAY
14161: MINUS
14162: ST_TO_ADDR
// if not minesFreeAmount then
14163: LD_VAR 0 8
14167: NOT
14168: IFFALSE 14172
// exit ;
14170: GO 14447
// tmp := [ ] ;
14172: LD_ADDR_VAR 0 7
14176: PUSH
14177: EMPTY
14178: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14179: LD_ADDR_VAR 0 5
14183: PUSH
14184: DOUBLE
14185: LD_INT 1
14187: DEC
14188: ST_TO_ADDR
14189: LD_VAR 0 8
14193: PUSH
14194: FOR_TO
14195: IFFALSE 14394
// begin _d := rand ( 0 , 5 ) ;
14197: LD_ADDR_VAR 0 11
14201: PUSH
14202: LD_INT 0
14204: PPUSH
14205: LD_INT 5
14207: PPUSH
14208: CALL_OW 12
14212: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14213: LD_ADDR_VAR 0 12
14217: PUSH
14218: LD_INT 2
14220: PPUSH
14221: LD_INT 6
14223: PPUSH
14224: CALL_OW 12
14228: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14229: LD_ADDR_VAR 0 9
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_VAR 0 11
14243: PPUSH
14244: LD_VAR 0 12
14248: PPUSH
14249: CALL_OW 272
14253: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14254: LD_ADDR_VAR 0 10
14258: PUSH
14259: LD_VAR 0 3
14263: PPUSH
14264: LD_VAR 0 11
14268: PPUSH
14269: LD_VAR 0 12
14273: PPUSH
14274: CALL_OW 273
14278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14279: LD_VAR 0 9
14283: PPUSH
14284: LD_VAR 0 10
14288: PPUSH
14289: CALL_OW 488
14293: IFFALSE 14317
14295: PUSH
14296: LD_VAR 0 9
14300: PUSH
14301: LD_VAR 0 10
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_VAR 0 7
14314: IN
14315: NOT
14316: AND
14317: IFFALSE 14336
14319: PUSH
14320: LD_VAR 0 9
14324: PPUSH
14325: LD_VAR 0 10
14329: PPUSH
14330: CALL_OW 458
14334: NOT
14335: AND
14336: IFFALSE 14378
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14338: LD_ADDR_VAR 0 7
14342: PUSH
14343: LD_VAR 0 7
14347: PPUSH
14348: LD_VAR 0 7
14352: PUSH
14353: LD_INT 1
14355: PLUS
14356: PPUSH
14357: LD_VAR 0 9
14361: PUSH
14362: LD_VAR 0 10
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 1
14375: ST_TO_ADDR
14376: GO 14392
// i := i - 1 ;
14378: LD_ADDR_VAR 0 5
14382: PUSH
14383: LD_VAR 0 5
14387: PUSH
14388: LD_INT 1
14390: MINUS
14391: ST_TO_ADDR
// end ;
14392: GO 14194
14394: POP
14395: POP
// for i in tmp do
14396: LD_ADDR_VAR 0 5
14400: PUSH
14401: LD_VAR 0 7
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14445
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14409: LD_VAR 0 1
14413: PPUSH
14414: LD_VAR 0 5
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 5
14427: PUSH
14428: LD_INT 2
14430: ARRAY
14431: PPUSH
14432: CALL 13379 0 3
14436: NOT
14437: IFFALSE 14443
// exit ;
14439: POP
14440: POP
14441: GO 14447
14443: GO 14406
14445: POP
14446: POP
// end ;
14447: LD_VAR 0 4
14451: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
14457: PPUSH
14458: PPUSH
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
// if GetClass ( unit ) <> class_sniper then
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 257
14472: PUSH
14473: LD_INT 5
14475: NONEQUAL
14476: IFFALSE 14480
// exit ;
14478: GO 14950
// dist := 8 ;
14480: LD_ADDR_VAR 0 5
14484: PUSH
14485: LD_INT 8
14487: ST_TO_ADDR
// viewRange := 12 ;
14488: LD_ADDR_VAR 0 8
14492: PUSH
14493: LD_INT 12
14495: ST_TO_ADDR
// side := GetSide ( unit ) ;
14496: LD_ADDR_VAR 0 6
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 255
14510: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14511: LD_INT 61
14513: PPUSH
14514: LD_VAR 0 6
14518: PPUSH
14519: CALL_OW 321
14523: PUSH
14524: LD_INT 2
14526: EQUAL
14527: IFFALSE 14537
// viewRange := 16 ;
14529: LD_ADDR_VAR 0 8
14533: PUSH
14534: LD_INT 16
14536: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 2
14546: PPUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: CALL_OW 297
14556: PUSH
14557: LD_VAR 0 5
14561: GREATER
14562: IFFALSE 14641
// begin ComMoveXY ( unit , x , y ) ;
14564: LD_VAR 0 1
14568: PPUSH
14569: LD_VAR 0 2
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_VAR 0 2
14599: PPUSH
14600: LD_VAR 0 3
14604: PPUSH
14605: CALL 68748 0 3
14609: NOT
14610: IFFALSE 14614
// exit ;
14612: GO 14950
// until GetDistUnitXY ( unit , x , y ) < dist ;
14614: LD_VAR 0 1
14618: PPUSH
14619: LD_VAR 0 2
14623: PPUSH
14624: LD_VAR 0 3
14628: PPUSH
14629: CALL_OW 297
14633: PUSH
14634: LD_VAR 0 5
14638: LESS
14639: IFFALSE 14583
// end ; ComTurnXY ( unit , x , y ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_VAR 0 2
14650: PPUSH
14651: LD_VAR 0 3
14655: PPUSH
14656: CALL_OW 118
// repeat if Multiplayer then
14660: LD_OWVAR 4
14664: IFFALSE 14675
// wait ( 35 ) else
14666: LD_INT 35
14668: PPUSH
14669: CALL_OW 67
14673: GO 14682
// wait ( 5 ) ;
14675: LD_INT 5
14677: PPUSH
14678: CALL_OW 67
// _d := GetDir ( unit ) ;
14682: LD_ADDR_VAR 0 11
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 254
14696: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
14697: LD_ADDR_VAR 0 7
14701: PUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 250
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 251
14721: PPUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: CALL 71384 0 4
14736: ST_TO_ADDR
// until dir = _d ;
14737: LD_VAR 0 7
14741: PUSH
14742: LD_VAR 0 11
14746: EQUAL
14747: IFFALSE 14660
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
14749: LD_ADDR_VAR 0 9
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 250
14763: PPUSH
14764: LD_VAR 0 7
14768: PPUSH
14769: LD_VAR 0 5
14773: PPUSH
14774: CALL_OW 272
14778: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
14779: LD_ADDR_VAR 0 10
14783: PUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 251
14793: PPUSH
14794: LD_VAR 0 7
14798: PPUSH
14799: LD_VAR 0 5
14803: PPUSH
14804: CALL_OW 273
14808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14809: LD_VAR 0 9
14813: PPUSH
14814: LD_VAR 0 10
14818: PPUSH
14819: CALL_OW 488
14823: NOT
14824: IFFALSE 14828
// exit ;
14826: GO 14950
// ComAnimCustom ( unit , 1 ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 592
// p := 0 ;
14840: LD_ADDR_VAR 0 12
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14848: LD_VAR 0 9
14852: PPUSH
14853: LD_VAR 0 10
14857: PPUSH
14858: LD_VAR 0 6
14862: PPUSH
14863: LD_VAR 0 8
14867: PPUSH
14868: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
14872: LD_INT 35
14874: PPUSH
14875: CALL_OW 67
// p := Inc ( p ) ;
14879: LD_ADDR_VAR 0 12
14883: PUSH
14884: LD_VAR 0 12
14888: PPUSH
14889: CALL 71340 0 1
14893: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
14894: LD_VAR 0 12
14898: PUSH
14899: LD_INT 3
14901: EQUAL
14902: IFTRUE 14916
14904: PUSH
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 302
14914: NOT
14915: OR
14916: IFTRUE 14929
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 301
14928: OR
14929: IFFALSE 14872
// RemoveSeeing ( _x , _y , side ) ;
14931: LD_VAR 0 9
14935: PPUSH
14936: LD_VAR 0 10
14940: PPUSH
14941: LD_VAR 0 6
14945: PPUSH
14946: CALL_OW 331
// end ;
14950: LD_VAR 0 4
14954: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
14955: LD_INT 0
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
// if not unit then
14968: LD_VAR 0 1
14972: NOT
14973: IFFALSE 14977
// exit ;
14975: GO 15248
// side := GetSide ( unit ) ;
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 255
14991: ST_TO_ADDR
// x := GetX ( unit ) ;
14992: LD_ADDR_VAR 0 5
14996: PUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 250
15006: ST_TO_ADDR
// y := GetY ( unit ) ;
15007: LD_ADDR_VAR 0 6
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 251
15021: ST_TO_ADDR
// r := 8 ;
15022: LD_ADDR_VAR 0 4
15026: PUSH
15027: LD_INT 8
15029: ST_TO_ADDR
// if x - r < 0 then
15030: LD_VAR 0 5
15034: PUSH
15035: LD_VAR 0 4
15039: MINUS
15040: PUSH
15041: LD_INT 0
15043: LESS
15044: IFFALSE 15056
// min_x := 0 else
15046: LD_ADDR_VAR 0 7
15050: PUSH
15051: LD_INT 0
15053: ST_TO_ADDR
15054: GO 15072
// min_x := x - r ;
15056: LD_ADDR_VAR 0 7
15060: PUSH
15061: LD_VAR 0 5
15065: PUSH
15066: LD_VAR 0 4
15070: MINUS
15071: ST_TO_ADDR
// if y - r < 0 then
15072: LD_VAR 0 6
15076: PUSH
15077: LD_VAR 0 4
15081: MINUS
15082: PUSH
15083: LD_INT 0
15085: LESS
15086: IFFALSE 15098
// min_y := 0 else
15088: LD_ADDR_VAR 0 8
15092: PUSH
15093: LD_INT 0
15095: ST_TO_ADDR
15096: GO 15114
// min_y := y - r ;
15098: LD_ADDR_VAR 0 8
15102: PUSH
15103: LD_VAR 0 6
15107: PUSH
15108: LD_VAR 0 4
15112: MINUS
15113: ST_TO_ADDR
// max_x := x + r ;
15114: LD_ADDR_VAR 0 9
15118: PUSH
15119: LD_VAR 0 5
15123: PUSH
15124: LD_VAR 0 4
15128: PLUS
15129: ST_TO_ADDR
// max_y := y + r ;
15130: LD_ADDR_VAR 0 10
15134: PUSH
15135: LD_VAR 0 6
15139: PUSH
15140: LD_VAR 0 4
15144: PLUS
15145: ST_TO_ADDR
// for _x = min_x to max_x do
15146: LD_ADDR_VAR 0 11
15150: PUSH
15151: DOUBLE
15152: LD_VAR 0 7
15156: DEC
15157: ST_TO_ADDR
15158: LD_VAR 0 9
15162: PUSH
15163: FOR_TO
15164: IFFALSE 15246
// for _y = min_y to max_y do
15166: LD_ADDR_VAR 0 12
15170: PUSH
15171: DOUBLE
15172: LD_VAR 0 8
15176: DEC
15177: ST_TO_ADDR
15178: LD_VAR 0 10
15182: PUSH
15183: FOR_TO
15184: IFFALSE 15242
// begin if not ValidHex ( _x , _y ) then
15186: LD_VAR 0 11
15190: PPUSH
15191: LD_VAR 0 12
15195: PPUSH
15196: CALL_OW 488
15200: NOT
15201: IFFALSE 15205
// continue ;
15203: GO 15183
// if MineAtPos ( _x , _y ) then
15205: LD_VAR 0 11
15209: PPUSH
15210: LD_VAR 0 12
15214: PPUSH
15215: CALL_OW 458
15219: IFFALSE 15240
// ViewMineAtPos ( _x , _y , side ) ;
15221: LD_VAR 0 11
15225: PPUSH
15226: LD_VAR 0 12
15230: PPUSH
15231: LD_VAR 0 3
15235: PPUSH
15236: CALL_OW 457
// end ;
15240: GO 15183
15242: POP
15243: POP
15244: GO 15163
15246: POP
15247: POP
// end ;
15248: LD_VAR 0 2
15252: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
// if not units then
15261: LD_VAR 0 1
15265: NOT
15266: IFFALSE 15270
// exit ;
15268: GO 15700
// scaners := [ ] ;
15270: LD_ADDR_VAR 0 6
15274: PUSH
15275: EMPTY
15276: ST_TO_ADDR
// for i in units do
15277: LD_ADDR_VAR 0 3
15281: PUSH
15282: LD_VAR 0 1
15286: PUSH
15287: FOR_IN
15288: IFFALSE 15445
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
15290: LD_VAR 0 3
15294: PPUSH
15295: CALL_OW 264
15299: PUSH
15300: LD_INT 11
15302: NONEQUAL
15303: IFTRUE 15317
15305: PUSH
15306: LD_VAR 0 3
15310: PPUSH
15311: CALL_OW 302
15315: NOT
15316: OR
15317: IFTRUE 15334
15319: PUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: CALL_OW 110
15329: PUSH
15330: LD_INT 502
15332: EQUAL
15333: OR
15334: IFFALSE 15338
// continue ;
15336: GO 15287
// ComStop ( i ) ;
15338: LD_VAR 0 3
15342: PPUSH
15343: CALL_OW 141
// x := GetX ( i ) ;
15347: LD_ADDR_VAR 0 4
15351: PUSH
15352: LD_VAR 0 3
15356: PPUSH
15357: CALL_OW 250
15361: ST_TO_ADDR
// y := GetY ( i ) ;
15362: LD_ADDR_VAR 0 5
15366: PUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: CALL_OW 251
15376: ST_TO_ADDR
// if GetSide ( i ) = your_side then
15377: LD_VAR 0 3
15381: PPUSH
15382: CALL_OW 255
15386: PUSH
15387: LD_OWVAR 2
15391: EQUAL
15392: IFFALSE 15411
// PlaySoundXY ( x , y , mineDetector ) ;
15394: LD_VAR 0 4
15398: PPUSH
15399: LD_VAR 0 5
15403: PPUSH
15404: LD_STRING mineDetector
15406: PPUSH
15407: CALL_OW 366
// scaners := Join ( scaners , i ) ;
15411: LD_ADDR_VAR 0 6
15415: PUSH
15416: LD_VAR 0 6
15420: PPUSH
15421: LD_VAR 0 3
15425: PPUSH
15426: CALL 69967 0 2
15430: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
15431: LD_VAR 0 3
15435: PPUSH
15436: LD_INT 502
15438: PPUSH
15439: CALL_OW 109
// end ;
15443: GO 15287
15445: POP
15446: POP
// if not scaners then
15447: LD_VAR 0 6
15451: NOT
15452: IFFALSE 15456
// exit ;
15454: GO 15700
// wait ( 3 ) ;
15456: LD_INT 3
15458: PPUSH
15459: CALL_OW 67
// timer := 6 ;
15463: LD_ADDR_VAR 0 7
15467: PUSH
15468: LD_INT 6
15470: ST_TO_ADDR
// repeat for i in scaners do
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_VAR 0 6
15480: PUSH
15481: FOR_IN
15482: IFFALSE 15598
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
15484: LD_VAR 0 3
15488: PPUSH
15489: CALL_OW 302
15493: NOT
15494: IFTRUE 15507
15496: PUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: CALL_OW 314
15506: OR
15507: IFTRUE 15538
15509: PUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: CALL_OW 263
15519: PUSH
15520: LD_INT 1
15522: EQUAL
15523: IFFALSE 15537
15525: PUSH
15526: LD_VAR 0 3
15530: PPUSH
15531: CALL_OW 311
15535: NOT
15536: AND
15537: OR
15538: IFFALSE 15582
// begin SetUnitDisplayNumber ( i , 0 ) ;
15540: LD_VAR 0 3
15544: PPUSH
15545: LD_INT 0
15547: PPUSH
15548: CALL_OW 505
// SetTag ( i , 0 ) ;
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 0
15559: PPUSH
15560: CALL_OW 109
// scaners := scaners diff i ;
15564: LD_ADDR_VAR 0 6
15568: PUSH
15569: LD_VAR 0 6
15573: PUSH
15574: LD_VAR 0 3
15578: DIFF
15579: ST_TO_ADDR
// continue ;
15580: GO 15481
// end ; SetUnitDisplayNumber ( i , timer ) ;
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_VAR 0 7
15591: PPUSH
15592: CALL_OW 505
// end ;
15596: GO 15481
15598: POP
15599: POP
// if not scaners then
15600: LD_VAR 0 6
15604: NOT
15605: IFFALSE 15609
// exit ;
15607: GO 15700
// timer := Dec ( timer ) ;
15609: LD_ADDR_VAR 0 7
15613: PUSH
15614: LD_VAR 0 7
15618: PPUSH
15619: CALL 71362 0 1
15623: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15624: LD_INT 35
15626: PPUSH
15627: CALL_OW 67
// until timer = 0 ;
15631: LD_VAR 0 7
15635: PUSH
15636: LD_INT 0
15638: EQUAL
15639: IFFALSE 15471
// if not scaners then
15641: LD_VAR 0 6
15645: NOT
15646: IFFALSE 15650
// exit ;
15648: GO 15700
// for i in scaners do
15650: LD_ADDR_VAR 0 3
15654: PUSH
15655: LD_VAR 0 6
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15698
// begin SetUnitDisplayNumber ( i , 0 ) ;
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_INT 0
15670: PPUSH
15671: CALL_OW 505
// SetTag ( i , 0 ) ;
15675: LD_VAR 0 3
15679: PPUSH
15680: LD_INT 0
15682: PPUSH
15683: CALL_OW 109
// RevealDetectorMine ( i ) ;
15687: LD_VAR 0 3
15691: PPUSH
15692: CALL 14955 0 1
// end ;
15696: GO 15660
15698: POP
15699: POP
// end ;
15700: LD_VAR 0 2
15704: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
15705: LD_INT 0
15707: PPUSH
// if p1 = mine_detector_mode then
15708: LD_VAR 0 2
15712: PUSH
15713: LD_INT 103
15715: EQUAL
15716: IFFALSE 15727
// DetectMine ( units ) ;
15718: LD_VAR 0 1
15722: PPUSH
15723: CALL 15253 0 1
// end ; end_of_file
15727: LD_VAR 0 7
15731: RET
// export globalGameSaveCounter ; every 0 0$1 do
15732: GO 15734
15734: DISABLE
// begin enable ;
15735: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15736: LD_STRING updateTimer(
15738: PUSH
15739: LD_OWVAR 1
15743: STR
15744: PUSH
15745: LD_STRING );
15747: STR
15748: PPUSH
15749: CALL_OW 559
// end ;
15753: END
// every 0 0$1 do
15754: GO 15756
15756: DISABLE
// begin globalGameSaveCounter := 0 ;
15757: LD_ADDR_EXP 46
15761: PUSH
15762: LD_INT 0
15764: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15765: LD_STRING setGameSaveCounter(0)
15767: PPUSH
15768: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15772: LD_STRING initStreamRollete();
15774: PPUSH
15775: CALL_OW 559
// InitStreamMode ;
15779: CALL 17124 0 0
// DefineStreamItems ( false ) ;
15783: LD_INT 0
15785: PPUSH
15786: CALL 17588 0 1
// end ;
15790: END
// export function SOS_MapStart ( ) ; begin
15791: LD_INT 0
15793: PPUSH
// if streamModeActive then
15794: LD_EXP 47
15798: IFFALSE 15807
// DefineStreamItems ( true ) ;
15800: LD_INT 1
15802: PPUSH
15803: CALL 17588 0 1
// UpdateLuaVariables ( ) ;
15807: CALL 15824 0 0
// UpdateFactoryWaypoints ( ) ;
15811: CALL 30710 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15815: CALL 30962 0 0
// end ;
15819: LD_VAR 0 1
15823: RET
// function UpdateLuaVariables ( ) ; begin
15824: LD_INT 0
15826: PPUSH
// if globalGameSaveCounter then
15827: LD_EXP 46
15831: IFFALSE 15865
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15833: LD_ADDR_EXP 46
15837: PUSH
15838: LD_EXP 46
15842: PPUSH
15843: CALL 71340 0 1
15847: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15848: LD_STRING setGameSaveCounter(
15850: PUSH
15851: LD_EXP 46
15855: STR
15856: PUSH
15857: LD_STRING )
15859: STR
15860: PPUSH
15861: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15865: LD_STRING setGameDifficulty(
15867: PUSH
15868: LD_OWVAR 67
15872: STR
15873: PUSH
15874: LD_STRING )
15876: STR
15877: PPUSH
15878: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15882: LD_STRING displayDifficulty(
15884: PUSH
15885: LD_OWVAR 67
15889: STR
15890: PUSH
15891: LD_STRING )
15893: STR
15894: PPUSH
15895: CALL_OW 559
// end ;
15899: LD_VAR 0 1
15903: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15904: LD_INT 0
15906: PPUSH
// if p2 = stream_mode then
15907: LD_VAR 0 2
15911: PUSH
15912: LD_INT 100
15914: EQUAL
15915: IFFALSE 16918
// begin if not StreamModeActive then
15917: LD_EXP 47
15921: NOT
15922: IFFALSE 15932
// StreamModeActive := true ;
15924: LD_ADDR_EXP 47
15928: PUSH
15929: LD_INT 1
15931: ST_TO_ADDR
// if p3 = 0 then
15932: LD_VAR 0 3
15936: PUSH
15937: LD_INT 0
15939: EQUAL
15940: IFFALSE 15946
// InitStreamMode ;
15942: CALL 17124 0 0
// if p3 = 1 then
15946: LD_VAR 0 3
15950: PUSH
15951: LD_INT 1
15953: EQUAL
15954: IFFALSE 15964
// sRocket := true ;
15956: LD_ADDR_EXP 52
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// if p3 = 2 then
15964: LD_VAR 0 3
15968: PUSH
15969: LD_INT 2
15971: EQUAL
15972: IFFALSE 15982
// sSpeed := true ;
15974: LD_ADDR_EXP 51
15978: PUSH
15979: LD_INT 1
15981: ST_TO_ADDR
// if p3 = 3 then
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 3
15989: EQUAL
15990: IFFALSE 16000
// sEngine := true ;
15992: LD_ADDR_EXP 53
15996: PUSH
15997: LD_INT 1
15999: ST_TO_ADDR
// if p3 = 4 then
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 4
16007: EQUAL
16008: IFFALSE 16018
// sSpec := true ;
16010: LD_ADDR_EXP 50
16014: PUSH
16015: LD_INT 1
16017: ST_TO_ADDR
// if p3 = 5 then
16018: LD_VAR 0 3
16022: PUSH
16023: LD_INT 5
16025: EQUAL
16026: IFFALSE 16036
// sLevel := true ;
16028: LD_ADDR_EXP 54
16032: PUSH
16033: LD_INT 1
16035: ST_TO_ADDR
// if p3 = 6 then
16036: LD_VAR 0 3
16040: PUSH
16041: LD_INT 6
16043: EQUAL
16044: IFFALSE 16054
// sArmoury := true ;
16046: LD_ADDR_EXP 55
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// if p3 = 7 then
16054: LD_VAR 0 3
16058: PUSH
16059: LD_INT 7
16061: EQUAL
16062: IFFALSE 16072
// sRadar := true ;
16064: LD_ADDR_EXP 56
16068: PUSH
16069: LD_INT 1
16071: ST_TO_ADDR
// if p3 = 8 then
16072: LD_VAR 0 3
16076: PUSH
16077: LD_INT 8
16079: EQUAL
16080: IFFALSE 16090
// sBunker := true ;
16082: LD_ADDR_EXP 57
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// if p3 = 9 then
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 9
16097: EQUAL
16098: IFFALSE 16108
// sHack := true ;
16100: LD_ADDR_EXP 58
16104: PUSH
16105: LD_INT 1
16107: ST_TO_ADDR
// if p3 = 10 then
16108: LD_VAR 0 3
16112: PUSH
16113: LD_INT 10
16115: EQUAL
16116: IFFALSE 16126
// sFire := true ;
16118: LD_ADDR_EXP 59
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// if p3 = 11 then
16126: LD_VAR 0 3
16130: PUSH
16131: LD_INT 11
16133: EQUAL
16134: IFFALSE 16144
// sRefresh := true ;
16136: LD_ADDR_EXP 60
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// if p3 = 12 then
16144: LD_VAR 0 3
16148: PUSH
16149: LD_INT 12
16151: EQUAL
16152: IFFALSE 16162
// sExp := true ;
16154: LD_ADDR_EXP 61
16158: PUSH
16159: LD_INT 1
16161: ST_TO_ADDR
// if p3 = 13 then
16162: LD_VAR 0 3
16166: PUSH
16167: LD_INT 13
16169: EQUAL
16170: IFFALSE 16180
// sDepot := true ;
16172: LD_ADDR_EXP 62
16176: PUSH
16177: LD_INT 1
16179: ST_TO_ADDR
// if p3 = 14 then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_INT 14
16187: EQUAL
16188: IFFALSE 16198
// sFlag := true ;
16190: LD_ADDR_EXP 63
16194: PUSH
16195: LD_INT 1
16197: ST_TO_ADDR
// if p3 = 15 then
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 15
16205: EQUAL
16206: IFFALSE 16216
// sKamikadze := true ;
16208: LD_ADDR_EXP 71
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// if p3 = 16 then
16216: LD_VAR 0 3
16220: PUSH
16221: LD_INT 16
16223: EQUAL
16224: IFFALSE 16234
// sTroll := true ;
16226: LD_ADDR_EXP 72
16230: PUSH
16231: LD_INT 1
16233: ST_TO_ADDR
// if p3 = 17 then
16234: LD_VAR 0 3
16238: PUSH
16239: LD_INT 17
16241: EQUAL
16242: IFFALSE 16252
// sSlow := true ;
16244: LD_ADDR_EXP 73
16248: PUSH
16249: LD_INT 1
16251: ST_TO_ADDR
// if p3 = 18 then
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 18
16259: EQUAL
16260: IFFALSE 16270
// sLack := true ;
16262: LD_ADDR_EXP 74
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// if p3 = 19 then
16270: LD_VAR 0 3
16274: PUSH
16275: LD_INT 19
16277: EQUAL
16278: IFFALSE 16288
// sTank := true ;
16280: LD_ADDR_EXP 76
16284: PUSH
16285: LD_INT 1
16287: ST_TO_ADDR
// if p3 = 20 then
16288: LD_VAR 0 3
16292: PUSH
16293: LD_INT 20
16295: EQUAL
16296: IFFALSE 16306
// sRemote := true ;
16298: LD_ADDR_EXP 77
16302: PUSH
16303: LD_INT 1
16305: ST_TO_ADDR
// if p3 = 21 then
16306: LD_VAR 0 3
16310: PUSH
16311: LD_INT 21
16313: EQUAL
16314: IFFALSE 16324
// sPowell := true ;
16316: LD_ADDR_EXP 78
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// if p3 = 22 then
16324: LD_VAR 0 3
16328: PUSH
16329: LD_INT 22
16331: EQUAL
16332: IFFALSE 16342
// sTeleport := true ;
16334: LD_ADDR_EXP 81
16338: PUSH
16339: LD_INT 1
16341: ST_TO_ADDR
// if p3 = 23 then
16342: LD_VAR 0 3
16346: PUSH
16347: LD_INT 23
16349: EQUAL
16350: IFFALSE 16360
// sOilTower := true ;
16352: LD_ADDR_EXP 83
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// if p3 = 24 then
16360: LD_VAR 0 3
16364: PUSH
16365: LD_INT 24
16367: EQUAL
16368: IFFALSE 16378
// sShovel := true ;
16370: LD_ADDR_EXP 84
16374: PUSH
16375: LD_INT 1
16377: ST_TO_ADDR
// if p3 = 25 then
16378: LD_VAR 0 3
16382: PUSH
16383: LD_INT 25
16385: EQUAL
16386: IFFALSE 16396
// sSheik := true ;
16388: LD_ADDR_EXP 85
16392: PUSH
16393: LD_INT 1
16395: ST_TO_ADDR
// if p3 = 26 then
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 26
16403: EQUAL
16404: IFFALSE 16414
// sEarthquake := true ;
16406: LD_ADDR_EXP 87
16410: PUSH
16411: LD_INT 1
16413: ST_TO_ADDR
// if p3 = 27 then
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 27
16421: EQUAL
16422: IFFALSE 16432
// sAI := true ;
16424: LD_ADDR_EXP 88
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// if p3 = 28 then
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 28
16439: EQUAL
16440: IFFALSE 16450
// sCargo := true ;
16442: LD_ADDR_EXP 91
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if p3 = 29 then
16450: LD_VAR 0 3
16454: PUSH
16455: LD_INT 29
16457: EQUAL
16458: IFFALSE 16468
// sDLaser := true ;
16460: LD_ADDR_EXP 92
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// if p3 = 30 then
16468: LD_VAR 0 3
16472: PUSH
16473: LD_INT 30
16475: EQUAL
16476: IFFALSE 16486
// sExchange := true ;
16478: LD_ADDR_EXP 93
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
// if p3 = 31 then
16486: LD_VAR 0 3
16490: PUSH
16491: LD_INT 31
16493: EQUAL
16494: IFFALSE 16504
// sFac := true ;
16496: LD_ADDR_EXP 94
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// if p3 = 32 then
16504: LD_VAR 0 3
16508: PUSH
16509: LD_INT 32
16511: EQUAL
16512: IFFALSE 16522
// sPower := true ;
16514: LD_ADDR_EXP 95
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// if p3 = 33 then
16522: LD_VAR 0 3
16526: PUSH
16527: LD_INT 33
16529: EQUAL
16530: IFFALSE 16540
// sRandom := true ;
16532: LD_ADDR_EXP 96
16536: PUSH
16537: LD_INT 1
16539: ST_TO_ADDR
// if p3 = 34 then
16540: LD_VAR 0 3
16544: PUSH
16545: LD_INT 34
16547: EQUAL
16548: IFFALSE 16558
// sShield := true ;
16550: LD_ADDR_EXP 97
16554: PUSH
16555: LD_INT 1
16557: ST_TO_ADDR
// if p3 = 35 then
16558: LD_VAR 0 3
16562: PUSH
16563: LD_INT 35
16565: EQUAL
16566: IFFALSE 16576
// sTime := true ;
16568: LD_ADDR_EXP 98
16572: PUSH
16573: LD_INT 1
16575: ST_TO_ADDR
// if p3 = 36 then
16576: LD_VAR 0 3
16580: PUSH
16581: LD_INT 36
16583: EQUAL
16584: IFFALSE 16594
// sTools := true ;
16586: LD_ADDR_EXP 99
16590: PUSH
16591: LD_INT 1
16593: ST_TO_ADDR
// if p3 = 101 then
16594: LD_VAR 0 3
16598: PUSH
16599: LD_INT 101
16601: EQUAL
16602: IFFALSE 16612
// sSold := true ;
16604: LD_ADDR_EXP 64
16608: PUSH
16609: LD_INT 1
16611: ST_TO_ADDR
// if p3 = 102 then
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 102
16619: EQUAL
16620: IFFALSE 16630
// sDiff := true ;
16622: LD_ADDR_EXP 65
16626: PUSH
16627: LD_INT 1
16629: ST_TO_ADDR
// if p3 = 103 then
16630: LD_VAR 0 3
16634: PUSH
16635: LD_INT 103
16637: EQUAL
16638: IFFALSE 16648
// sFog := true ;
16640: LD_ADDR_EXP 68
16644: PUSH
16645: LD_INT 1
16647: ST_TO_ADDR
// if p3 = 104 then
16648: LD_VAR 0 3
16652: PUSH
16653: LD_INT 104
16655: EQUAL
16656: IFFALSE 16666
// sReset := true ;
16658: LD_ADDR_EXP 69
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// if p3 = 105 then
16666: LD_VAR 0 3
16670: PUSH
16671: LD_INT 105
16673: EQUAL
16674: IFFALSE 16684
// sSun := true ;
16676: LD_ADDR_EXP 70
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// if p3 = 106 then
16684: LD_VAR 0 3
16688: PUSH
16689: LD_INT 106
16691: EQUAL
16692: IFFALSE 16702
// sTiger := true ;
16694: LD_ADDR_EXP 66
16698: PUSH
16699: LD_INT 1
16701: ST_TO_ADDR
// if p3 = 107 then
16702: LD_VAR 0 3
16706: PUSH
16707: LD_INT 107
16709: EQUAL
16710: IFFALSE 16720
// sBomb := true ;
16712: LD_ADDR_EXP 67
16716: PUSH
16717: LD_INT 1
16719: ST_TO_ADDR
// if p3 = 108 then
16720: LD_VAR 0 3
16724: PUSH
16725: LD_INT 108
16727: EQUAL
16728: IFFALSE 16738
// sWound := true ;
16730: LD_ADDR_EXP 75
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// if p3 = 109 then
16738: LD_VAR 0 3
16742: PUSH
16743: LD_INT 109
16745: EQUAL
16746: IFFALSE 16756
// sBetray := true ;
16748: LD_ADDR_EXP 79
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// if p3 = 110 then
16756: LD_VAR 0 3
16760: PUSH
16761: LD_INT 110
16763: EQUAL
16764: IFFALSE 16774
// sContamin := true ;
16766: LD_ADDR_EXP 80
16770: PUSH
16771: LD_INT 1
16773: ST_TO_ADDR
// if p3 = 111 then
16774: LD_VAR 0 3
16778: PUSH
16779: LD_INT 111
16781: EQUAL
16782: IFFALSE 16792
// sOil := true ;
16784: LD_ADDR_EXP 82
16788: PUSH
16789: LD_INT 1
16791: ST_TO_ADDR
// if p3 = 112 then
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 112
16799: EQUAL
16800: IFFALSE 16810
// sStu := true ;
16802: LD_ADDR_EXP 86
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if p3 = 113 then
16810: LD_VAR 0 3
16814: PUSH
16815: LD_INT 113
16817: EQUAL
16818: IFFALSE 16828
// sBazooka := true ;
16820: LD_ADDR_EXP 89
16824: PUSH
16825: LD_INT 1
16827: ST_TO_ADDR
// if p3 = 114 then
16828: LD_VAR 0 3
16832: PUSH
16833: LD_INT 114
16835: EQUAL
16836: IFFALSE 16846
// sMortar := true ;
16838: LD_ADDR_EXP 90
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if p3 = 115 then
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 115
16853: EQUAL
16854: IFFALSE 16864
// sRanger := true ;
16856: LD_ADDR_EXP 100
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// if p3 = 116 then
16864: LD_VAR 0 3
16868: PUSH
16869: LD_INT 116
16871: EQUAL
16872: IFFALSE 16882
// sComputer := true ;
16874: LD_ADDR_EXP 101
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// if p3 = 117 then
16882: LD_VAR 0 3
16886: PUSH
16887: LD_INT 117
16889: EQUAL
16890: IFFALSE 16900
// s30 := true ;
16892: LD_ADDR_EXP 102
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if p3 = 118 then
16900: LD_VAR 0 3
16904: PUSH
16905: LD_INT 118
16907: EQUAL
16908: IFFALSE 16918
// s60 := true ;
16910: LD_ADDR_EXP 103
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// end ; if p2 = hack_mode then
16918: LD_VAR 0 2
16922: PUSH
16923: LD_INT 101
16925: EQUAL
16926: IFFALSE 17054
// begin case p3 of 1 :
16928: LD_VAR 0 3
16932: PUSH
16933: LD_INT 1
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16948
16941: POP
// hHackUnlimitedResources ; 2 :
16942: CALL 29317 0 0
16946: GO 17054
16948: LD_INT 2
16950: DOUBLE
16951: EQUAL
16952: IFTRUE 16956
16954: GO 16963
16956: POP
// hHackSetLevel10 ; 3 :
16957: CALL 29450 0 0
16961: GO 17054
16963: LD_INT 3
16965: DOUBLE
16966: EQUAL
16967: IFTRUE 16971
16969: GO 16978
16971: POP
// hHackSetLevel10YourUnits ; 4 :
16972: CALL 29535 0 0
16976: GO 17054
16978: LD_INT 4
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 16993
16986: POP
// hHackInvincible ; 5 :
16987: CALL 29983 0 0
16991: GO 17054
16993: LD_INT 5
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17008
17001: POP
// hHackInvisible ; 6 :
17002: CALL 30094 0 0
17006: GO 17054
17008: LD_INT 6
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17023
17016: POP
// hHackChangeYourSide ; 7 :
17017: CALL 30151 0 0
17021: GO 17054
17023: LD_INT 7
17025: DOUBLE
17026: EQUAL
17027: IFTRUE 17031
17029: GO 17038
17031: POP
// hHackChangeUnitSide ; 8 :
17032: CALL 30193 0 0
17036: GO 17054
17038: LD_INT 8
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17053
17046: POP
// hHackFog ; end ;
17047: CALL 30294 0 0
17051: GO 17054
17053: POP
// end ; if p2 = game_save_mode then
17054: LD_VAR 0 2
17058: PUSH
17059: LD_INT 102
17061: EQUAL
17062: IFFALSE 17119
// begin if p3 = 1 then
17064: LD_VAR 0 3
17068: PUSH
17069: LD_INT 1
17071: EQUAL
17072: IFFALSE 17084
// globalGameSaveCounter := p4 ;
17074: LD_ADDR_EXP 46
17078: PUSH
17079: LD_VAR 0 4
17083: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17084: LD_VAR 0 3
17088: PUSH
17089: LD_INT 2
17091: EQUAL
17092: IFFALSE 17100
17094: PUSH
17095: LD_EXP 46
17099: AND
17100: IFFALSE 17119
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17102: LD_STRING setGameSaveCounter(
17104: PUSH
17105: LD_EXP 46
17109: STR
17110: PUSH
17111: LD_STRING )
17113: STR
17114: PPUSH
17115: CALL_OW 559
// end ; end ;
17119: LD_VAR 0 7
17123: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17124: LD_INT 0
17126: PPUSH
// streamModeActive := false ;
17127: LD_ADDR_EXP 47
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// normalCounter := 36 ;
17135: LD_ADDR_EXP 48
17139: PUSH
17140: LD_INT 36
17142: ST_TO_ADDR
// hardcoreCounter := 18 ;
17143: LD_ADDR_EXP 49
17147: PUSH
17148: LD_INT 18
17150: ST_TO_ADDR
// sRocket := false ;
17151: LD_ADDR_EXP 52
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// sSpeed := false ;
17159: LD_ADDR_EXP 51
17163: PUSH
17164: LD_INT 0
17166: ST_TO_ADDR
// sEngine := false ;
17167: LD_ADDR_EXP 53
17171: PUSH
17172: LD_INT 0
17174: ST_TO_ADDR
// sSpec := false ;
17175: LD_ADDR_EXP 50
17179: PUSH
17180: LD_INT 0
17182: ST_TO_ADDR
// sLevel := false ;
17183: LD_ADDR_EXP 54
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// sArmoury := false ;
17191: LD_ADDR_EXP 55
17195: PUSH
17196: LD_INT 0
17198: ST_TO_ADDR
// sRadar := false ;
17199: LD_ADDR_EXP 56
17203: PUSH
17204: LD_INT 0
17206: ST_TO_ADDR
// sBunker := false ;
17207: LD_ADDR_EXP 57
17211: PUSH
17212: LD_INT 0
17214: ST_TO_ADDR
// sHack := false ;
17215: LD_ADDR_EXP 58
17219: PUSH
17220: LD_INT 0
17222: ST_TO_ADDR
// sFire := false ;
17223: LD_ADDR_EXP 59
17227: PUSH
17228: LD_INT 0
17230: ST_TO_ADDR
// sRefresh := false ;
17231: LD_ADDR_EXP 60
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
// sExp := false ;
17239: LD_ADDR_EXP 61
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
// sDepot := false ;
17247: LD_ADDR_EXP 62
17251: PUSH
17252: LD_INT 0
17254: ST_TO_ADDR
// sFlag := false ;
17255: LD_ADDR_EXP 63
17259: PUSH
17260: LD_INT 0
17262: ST_TO_ADDR
// sKamikadze := false ;
17263: LD_ADDR_EXP 71
17267: PUSH
17268: LD_INT 0
17270: ST_TO_ADDR
// sTroll := false ;
17271: LD_ADDR_EXP 72
17275: PUSH
17276: LD_INT 0
17278: ST_TO_ADDR
// sSlow := false ;
17279: LD_ADDR_EXP 73
17283: PUSH
17284: LD_INT 0
17286: ST_TO_ADDR
// sLack := false ;
17287: LD_ADDR_EXP 74
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// sTank := false ;
17295: LD_ADDR_EXP 76
17299: PUSH
17300: LD_INT 0
17302: ST_TO_ADDR
// sRemote := false ;
17303: LD_ADDR_EXP 77
17307: PUSH
17308: LD_INT 0
17310: ST_TO_ADDR
// sPowell := false ;
17311: LD_ADDR_EXP 78
17315: PUSH
17316: LD_INT 0
17318: ST_TO_ADDR
// sTeleport := false ;
17319: LD_ADDR_EXP 81
17323: PUSH
17324: LD_INT 0
17326: ST_TO_ADDR
// sOilTower := false ;
17327: LD_ADDR_EXP 83
17331: PUSH
17332: LD_INT 0
17334: ST_TO_ADDR
// sShovel := false ;
17335: LD_ADDR_EXP 84
17339: PUSH
17340: LD_INT 0
17342: ST_TO_ADDR
// sSheik := false ;
17343: LD_ADDR_EXP 85
17347: PUSH
17348: LD_INT 0
17350: ST_TO_ADDR
// sEarthquake := false ;
17351: LD_ADDR_EXP 87
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// sAI := false ;
17359: LD_ADDR_EXP 88
17363: PUSH
17364: LD_INT 0
17366: ST_TO_ADDR
// sCargo := false ;
17367: LD_ADDR_EXP 91
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
// sDLaser := false ;
17375: LD_ADDR_EXP 92
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
// sExchange := false ;
17383: LD_ADDR_EXP 93
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// sFac := false ;
17391: LD_ADDR_EXP 94
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// sPower := false ;
17399: LD_ADDR_EXP 95
17403: PUSH
17404: LD_INT 0
17406: ST_TO_ADDR
// sRandom := false ;
17407: LD_ADDR_EXP 96
17411: PUSH
17412: LD_INT 0
17414: ST_TO_ADDR
// sShield := false ;
17415: LD_ADDR_EXP 97
17419: PUSH
17420: LD_INT 0
17422: ST_TO_ADDR
// sTime := false ;
17423: LD_ADDR_EXP 98
17427: PUSH
17428: LD_INT 0
17430: ST_TO_ADDR
// sTools := false ;
17431: LD_ADDR_EXP 99
17435: PUSH
17436: LD_INT 0
17438: ST_TO_ADDR
// sSold := false ;
17439: LD_ADDR_EXP 64
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// sDiff := false ;
17447: LD_ADDR_EXP 65
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// sFog := false ;
17455: LD_ADDR_EXP 68
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// sReset := false ;
17463: LD_ADDR_EXP 69
17467: PUSH
17468: LD_INT 0
17470: ST_TO_ADDR
// sSun := false ;
17471: LD_ADDR_EXP 70
17475: PUSH
17476: LD_INT 0
17478: ST_TO_ADDR
// sTiger := false ;
17479: LD_ADDR_EXP 66
17483: PUSH
17484: LD_INT 0
17486: ST_TO_ADDR
// sBomb := false ;
17487: LD_ADDR_EXP 67
17491: PUSH
17492: LD_INT 0
17494: ST_TO_ADDR
// sWound := false ;
17495: LD_ADDR_EXP 75
17499: PUSH
17500: LD_INT 0
17502: ST_TO_ADDR
// sBetray := false ;
17503: LD_ADDR_EXP 79
17507: PUSH
17508: LD_INT 0
17510: ST_TO_ADDR
// sContamin := false ;
17511: LD_ADDR_EXP 80
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// sOil := false ;
17519: LD_ADDR_EXP 82
17523: PUSH
17524: LD_INT 0
17526: ST_TO_ADDR
// sStu := false ;
17527: LD_ADDR_EXP 86
17531: PUSH
17532: LD_INT 0
17534: ST_TO_ADDR
// sBazooka := false ;
17535: LD_ADDR_EXP 89
17539: PUSH
17540: LD_INT 0
17542: ST_TO_ADDR
// sMortar := false ;
17543: LD_ADDR_EXP 90
17547: PUSH
17548: LD_INT 0
17550: ST_TO_ADDR
// sRanger := false ;
17551: LD_ADDR_EXP 100
17555: PUSH
17556: LD_INT 0
17558: ST_TO_ADDR
// sComputer := false ;
17559: LD_ADDR_EXP 101
17563: PUSH
17564: LD_INT 0
17566: ST_TO_ADDR
// s30 := false ;
17567: LD_ADDR_EXP 102
17571: PUSH
17572: LD_INT 0
17574: ST_TO_ADDR
// s60 := false ;
17575: LD_ADDR_EXP 103
17579: PUSH
17580: LD_INT 0
17582: ST_TO_ADDR
// end ;
17583: LD_VAR 0 1
17587: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17588: LD_INT 0
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
// result := [ ] ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: EMPTY
17603: ST_TO_ADDR
// if campaign_id = 1 then
17604: LD_OWVAR 69
17608: PUSH
17609: LD_INT 1
17611: EQUAL
17612: IFFALSE 20778
// begin case mission_number of 1 :
17614: LD_OWVAR 70
17618: PUSH
17619: LD_INT 1
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17703
17627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17628: LD_ADDR_VAR 0 2
17632: PUSH
17633: LD_INT 2
17635: PUSH
17636: LD_INT 4
17638: PUSH
17639: LD_INT 11
17641: PUSH
17642: LD_INT 12
17644: PUSH
17645: LD_INT 15
17647: PUSH
17648: LD_INT 16
17650: PUSH
17651: LD_INT 22
17653: PUSH
17654: LD_INT 23
17656: PUSH
17657: LD_INT 26
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 101
17673: PUSH
17674: LD_INT 102
17676: PUSH
17677: LD_INT 106
17679: PUSH
17680: LD_INT 116
17682: PUSH
17683: LD_INT 117
17685: PUSH
17686: LD_INT 118
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: ST_TO_ADDR
17701: GO 20776
17703: LD_INT 2
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17795
17711: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: LD_INT 4
17722: PUSH
17723: LD_INT 11
17725: PUSH
17726: LD_INT 12
17728: PUSH
17729: LD_INT 15
17731: PUSH
17732: LD_INT 16
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_INT 23
17740: PUSH
17741: LD_INT 26
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 101
17757: PUSH
17758: LD_INT 102
17760: PUSH
17761: LD_INT 105
17763: PUSH
17764: LD_INT 106
17766: PUSH
17767: LD_INT 108
17769: PUSH
17770: LD_INT 116
17772: PUSH
17773: LD_INT 117
17775: PUSH
17776: LD_INT 118
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: ST_TO_ADDR
17793: GO 20776
17795: LD_INT 3
17797: DOUBLE
17798: EQUAL
17799: IFTRUE 17803
17801: GO 17891
17803: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17804: LD_ADDR_VAR 0 2
17808: PUSH
17809: LD_INT 2
17811: PUSH
17812: LD_INT 4
17814: PUSH
17815: LD_INT 5
17817: PUSH
17818: LD_INT 11
17820: PUSH
17821: LD_INT 12
17823: PUSH
17824: LD_INT 15
17826: PUSH
17827: LD_INT 16
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_INT 26
17835: PUSH
17836: LD_INT 36
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 101
17853: PUSH
17854: LD_INT 102
17856: PUSH
17857: LD_INT 105
17859: PUSH
17860: LD_INT 106
17862: PUSH
17863: LD_INT 108
17865: PUSH
17866: LD_INT 116
17868: PUSH
17869: LD_INT 117
17871: PUSH
17872: LD_INT 118
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: ST_TO_ADDR
17889: GO 20776
17891: LD_INT 4
17893: DOUBLE
17894: EQUAL
17895: IFTRUE 17899
17897: GO 17995
17899: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17900: LD_ADDR_VAR 0 2
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: LD_INT 4
17910: PUSH
17911: LD_INT 5
17913: PUSH
17914: LD_INT 8
17916: PUSH
17917: LD_INT 11
17919: PUSH
17920: LD_INT 12
17922: PUSH
17923: LD_INT 15
17925: PUSH
17926: LD_INT 16
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_INT 23
17934: PUSH
17935: LD_INT 26
17937: PUSH
17938: LD_INT 36
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 101
17957: PUSH
17958: LD_INT 102
17960: PUSH
17961: LD_INT 105
17963: PUSH
17964: LD_INT 106
17966: PUSH
17967: LD_INT 108
17969: PUSH
17970: LD_INT 116
17972: PUSH
17973: LD_INT 117
17975: PUSH
17976: LD_INT 118
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: ST_TO_ADDR
17993: GO 20776
17995: LD_INT 5
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18115
18003: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18004: LD_ADDR_VAR 0 2
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 4
18014: PUSH
18015: LD_INT 5
18017: PUSH
18018: LD_INT 6
18020: PUSH
18021: LD_INT 8
18023: PUSH
18024: LD_INT 11
18026: PUSH
18027: LD_INT 12
18029: PUSH
18030: LD_INT 15
18032: PUSH
18033: LD_INT 16
18035: PUSH
18036: LD_INT 22
18038: PUSH
18039: LD_INT 23
18041: PUSH
18042: LD_INT 25
18044: PUSH
18045: LD_INT 26
18047: PUSH
18048: LD_INT 36
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 101
18069: PUSH
18070: LD_INT 102
18072: PUSH
18073: LD_INT 105
18075: PUSH
18076: LD_INT 106
18078: PUSH
18079: LD_INT 108
18081: PUSH
18082: LD_INT 109
18084: PUSH
18085: LD_INT 112
18087: PUSH
18088: LD_INT 116
18090: PUSH
18091: LD_INT 117
18093: PUSH
18094: LD_INT 118
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: ST_TO_ADDR
18113: GO 20776
18115: LD_INT 6
18117: DOUBLE
18118: EQUAL
18119: IFTRUE 18123
18121: GO 18255
18123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18124: LD_ADDR_VAR 0 2
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 4
18134: PUSH
18135: LD_INT 5
18137: PUSH
18138: LD_INT 6
18140: PUSH
18141: LD_INT 8
18143: PUSH
18144: LD_INT 11
18146: PUSH
18147: LD_INT 12
18149: PUSH
18150: LD_INT 15
18152: PUSH
18153: LD_INT 16
18155: PUSH
18156: LD_INT 20
18158: PUSH
18159: LD_INT 21
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_INT 23
18167: PUSH
18168: LD_INT 25
18170: PUSH
18171: LD_INT 26
18173: PUSH
18174: LD_INT 30
18176: PUSH
18177: LD_INT 31
18179: PUSH
18180: LD_INT 32
18182: PUSH
18183: LD_INT 36
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 101
18209: PUSH
18210: LD_INT 102
18212: PUSH
18213: LD_INT 105
18215: PUSH
18216: LD_INT 106
18218: PUSH
18219: LD_INT 108
18221: PUSH
18222: LD_INT 109
18224: PUSH
18225: LD_INT 112
18227: PUSH
18228: LD_INT 116
18230: PUSH
18231: LD_INT 117
18233: PUSH
18234: LD_INT 118
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: ST_TO_ADDR
18253: GO 20776
18255: LD_INT 7
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18375
18263: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18264: LD_ADDR_VAR 0 2
18268: PUSH
18269: LD_INT 2
18271: PUSH
18272: LD_INT 4
18274: PUSH
18275: LD_INT 5
18277: PUSH
18278: LD_INT 7
18280: PUSH
18281: LD_INT 11
18283: PUSH
18284: LD_INT 12
18286: PUSH
18287: LD_INT 15
18289: PUSH
18290: LD_INT 16
18292: PUSH
18293: LD_INT 20
18295: PUSH
18296: LD_INT 21
18298: PUSH
18299: LD_INT 22
18301: PUSH
18302: LD_INT 23
18304: PUSH
18305: LD_INT 25
18307: PUSH
18308: LD_INT 26
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 101
18329: PUSH
18330: LD_INT 102
18332: PUSH
18333: LD_INT 103
18335: PUSH
18336: LD_INT 105
18338: PUSH
18339: LD_INT 106
18341: PUSH
18342: LD_INT 108
18344: PUSH
18345: LD_INT 112
18347: PUSH
18348: LD_INT 116
18350: PUSH
18351: LD_INT 117
18353: PUSH
18354: LD_INT 118
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: ST_TO_ADDR
18373: GO 20776
18375: LD_INT 8
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18523
18383: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 4
18394: PUSH
18395: LD_INT 5
18397: PUSH
18398: LD_INT 6
18400: PUSH
18401: LD_INT 7
18403: PUSH
18404: LD_INT 8
18406: PUSH
18407: LD_INT 11
18409: PUSH
18410: LD_INT 12
18412: PUSH
18413: LD_INT 15
18415: PUSH
18416: LD_INT 16
18418: PUSH
18419: LD_INT 20
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 22
18427: PUSH
18428: LD_INT 23
18430: PUSH
18431: LD_INT 25
18433: PUSH
18434: LD_INT 26
18436: PUSH
18437: LD_INT 30
18439: PUSH
18440: LD_INT 31
18442: PUSH
18443: LD_INT 32
18445: PUSH
18446: LD_INT 36
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 101
18473: PUSH
18474: LD_INT 102
18476: PUSH
18477: LD_INT 103
18479: PUSH
18480: LD_INT 105
18482: PUSH
18483: LD_INT 106
18485: PUSH
18486: LD_INT 108
18488: PUSH
18489: LD_INT 109
18491: PUSH
18492: LD_INT 112
18494: PUSH
18495: LD_INT 116
18497: PUSH
18498: LD_INT 117
18500: PUSH
18501: LD_INT 118
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: ST_TO_ADDR
18521: GO 20776
18523: LD_INT 9
18525: DOUBLE
18526: EQUAL
18527: IFTRUE 18531
18529: GO 18679
18531: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18532: LD_ADDR_VAR 0 2
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: LD_INT 4
18542: PUSH
18543: LD_INT 5
18545: PUSH
18546: LD_INT 6
18548: PUSH
18549: LD_INT 7
18551: PUSH
18552: LD_INT 8
18554: PUSH
18555: LD_INT 11
18557: PUSH
18558: LD_INT 12
18560: PUSH
18561: LD_INT 15
18563: PUSH
18564: LD_INT 16
18566: PUSH
18567: LD_INT 20
18569: PUSH
18570: LD_INT 21
18572: PUSH
18573: LD_INT 22
18575: PUSH
18576: LD_INT 23
18578: PUSH
18579: LD_INT 25
18581: PUSH
18582: LD_INT 26
18584: PUSH
18585: LD_INT 28
18587: PUSH
18588: LD_INT 30
18590: PUSH
18591: LD_INT 31
18593: PUSH
18594: LD_INT 32
18596: PUSH
18597: LD_INT 36
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 101
18625: PUSH
18626: LD_INT 102
18628: PUSH
18629: LD_INT 103
18631: PUSH
18632: LD_INT 105
18634: PUSH
18635: LD_INT 106
18637: PUSH
18638: LD_INT 108
18640: PUSH
18641: LD_INT 109
18643: PUSH
18644: LD_INT 112
18646: PUSH
18647: LD_INT 114
18649: PUSH
18650: LD_INT 116
18652: PUSH
18653: LD_INT 117
18655: PUSH
18656: LD_INT 118
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: ST_TO_ADDR
18677: GO 20776
18679: LD_INT 10
18681: DOUBLE
18682: EQUAL
18683: IFTRUE 18687
18685: GO 18883
18687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18688: LD_ADDR_VAR 0 2
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: LD_INT 4
18698: PUSH
18699: LD_INT 5
18701: PUSH
18702: LD_INT 6
18704: PUSH
18705: LD_INT 7
18707: PUSH
18708: LD_INT 8
18710: PUSH
18711: LD_INT 9
18713: PUSH
18714: LD_INT 10
18716: PUSH
18717: LD_INT 11
18719: PUSH
18720: LD_INT 12
18722: PUSH
18723: LD_INT 13
18725: PUSH
18726: LD_INT 14
18728: PUSH
18729: LD_INT 15
18731: PUSH
18732: LD_INT 16
18734: PUSH
18735: LD_INT 17
18737: PUSH
18738: LD_INT 18
18740: PUSH
18741: LD_INT 19
18743: PUSH
18744: LD_INT 20
18746: PUSH
18747: LD_INT 21
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_INT 23
18755: PUSH
18756: LD_INT 24
18758: PUSH
18759: LD_INT 25
18761: PUSH
18762: LD_INT 26
18764: PUSH
18765: LD_INT 28
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 31
18773: PUSH
18774: LD_INT 32
18776: PUSH
18777: LD_INT 36
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 101
18813: PUSH
18814: LD_INT 102
18816: PUSH
18817: LD_INT 103
18819: PUSH
18820: LD_INT 104
18822: PUSH
18823: LD_INT 105
18825: PUSH
18826: LD_INT 106
18828: PUSH
18829: LD_INT 107
18831: PUSH
18832: LD_INT 108
18834: PUSH
18835: LD_INT 109
18837: PUSH
18838: LD_INT 110
18840: PUSH
18841: LD_INT 111
18843: PUSH
18844: LD_INT 112
18846: PUSH
18847: LD_INT 114
18849: PUSH
18850: LD_INT 116
18852: PUSH
18853: LD_INT 117
18855: PUSH
18856: LD_INT 118
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: ST_TO_ADDR
18881: GO 20776
18883: LD_INT 11
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 19095
18891: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18892: LD_ADDR_VAR 0 2
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: LD_INT 4
18905: PUSH
18906: LD_INT 5
18908: PUSH
18909: LD_INT 6
18911: PUSH
18912: LD_INT 7
18914: PUSH
18915: LD_INT 8
18917: PUSH
18918: LD_INT 9
18920: PUSH
18921: LD_INT 10
18923: PUSH
18924: LD_INT 11
18926: PUSH
18927: LD_INT 12
18929: PUSH
18930: LD_INT 13
18932: PUSH
18933: LD_INT 14
18935: PUSH
18936: LD_INT 15
18938: PUSH
18939: LD_INT 16
18941: PUSH
18942: LD_INT 17
18944: PUSH
18945: LD_INT 18
18947: PUSH
18948: LD_INT 19
18950: PUSH
18951: LD_INT 20
18953: PUSH
18954: LD_INT 21
18956: PUSH
18957: LD_INT 22
18959: PUSH
18960: LD_INT 23
18962: PUSH
18963: LD_INT 24
18965: PUSH
18966: LD_INT 25
18968: PUSH
18969: LD_INT 26
18971: PUSH
18972: LD_INT 28
18974: PUSH
18975: LD_INT 30
18977: PUSH
18978: LD_INT 31
18980: PUSH
18981: LD_INT 32
18983: PUSH
18984: LD_INT 34
18986: PUSH
18987: LD_INT 36
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 101
19025: PUSH
19026: LD_INT 102
19028: PUSH
19029: LD_INT 103
19031: PUSH
19032: LD_INT 104
19034: PUSH
19035: LD_INT 105
19037: PUSH
19038: LD_INT 106
19040: PUSH
19041: LD_INT 107
19043: PUSH
19044: LD_INT 108
19046: PUSH
19047: LD_INT 109
19049: PUSH
19050: LD_INT 110
19052: PUSH
19053: LD_INT 111
19055: PUSH
19056: LD_INT 112
19058: PUSH
19059: LD_INT 114
19061: PUSH
19062: LD_INT 116
19064: PUSH
19065: LD_INT 117
19067: PUSH
19068: LD_INT 118
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ST_TO_ADDR
19093: GO 20776
19095: LD_INT 12
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19323
19103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: LD_INT 4
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: LD_INT 6
19126: PUSH
19127: LD_INT 7
19129: PUSH
19130: LD_INT 8
19132: PUSH
19133: LD_INT 9
19135: PUSH
19136: LD_INT 10
19138: PUSH
19139: LD_INT 11
19141: PUSH
19142: LD_INT 12
19144: PUSH
19145: LD_INT 13
19147: PUSH
19148: LD_INT 14
19150: PUSH
19151: LD_INT 15
19153: PUSH
19154: LD_INT 16
19156: PUSH
19157: LD_INT 17
19159: PUSH
19160: LD_INT 18
19162: PUSH
19163: LD_INT 19
19165: PUSH
19166: LD_INT 20
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 22
19174: PUSH
19175: LD_INT 23
19177: PUSH
19178: LD_INT 24
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 26
19186: PUSH
19187: LD_INT 27
19189: PUSH
19190: LD_INT 28
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 31
19198: PUSH
19199: LD_INT 32
19201: PUSH
19202: LD_INT 33
19204: PUSH
19205: LD_INT 34
19207: PUSH
19208: LD_INT 36
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 101
19249: PUSH
19250: LD_INT 102
19252: PUSH
19253: LD_INT 103
19255: PUSH
19256: LD_INT 104
19258: PUSH
19259: LD_INT 105
19261: PUSH
19262: LD_INT 106
19264: PUSH
19265: LD_INT 107
19267: PUSH
19268: LD_INT 108
19270: PUSH
19271: LD_INT 109
19273: PUSH
19274: LD_INT 110
19276: PUSH
19277: LD_INT 111
19279: PUSH
19280: LD_INT 112
19282: PUSH
19283: LD_INT 113
19285: PUSH
19286: LD_INT 114
19288: PUSH
19289: LD_INT 116
19291: PUSH
19292: LD_INT 117
19294: PUSH
19295: LD_INT 118
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: ST_TO_ADDR
19321: GO 20776
19323: LD_INT 13
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19539
19331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19332: LD_ADDR_VAR 0 2
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: LD_INT 3
19345: PUSH
19346: LD_INT 4
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: LD_INT 8
19354: PUSH
19355: LD_INT 9
19357: PUSH
19358: LD_INT 10
19360: PUSH
19361: LD_INT 11
19363: PUSH
19364: LD_INT 12
19366: PUSH
19367: LD_INT 14
19369: PUSH
19370: LD_INT 15
19372: PUSH
19373: LD_INT 16
19375: PUSH
19376: LD_INT 17
19378: PUSH
19379: LD_INT 18
19381: PUSH
19382: LD_INT 19
19384: PUSH
19385: LD_INT 20
19387: PUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 22
19393: PUSH
19394: LD_INT 23
19396: PUSH
19397: LD_INT 24
19399: PUSH
19400: LD_INT 25
19402: PUSH
19403: LD_INT 26
19405: PUSH
19406: LD_INT 27
19408: PUSH
19409: LD_INT 28
19411: PUSH
19412: LD_INT 30
19414: PUSH
19415: LD_INT 31
19417: PUSH
19418: LD_INT 32
19420: PUSH
19421: LD_INT 33
19423: PUSH
19424: LD_INT 34
19426: PUSH
19427: LD_INT 36
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 101
19465: PUSH
19466: LD_INT 102
19468: PUSH
19469: LD_INT 103
19471: PUSH
19472: LD_INT 104
19474: PUSH
19475: LD_INT 105
19477: PUSH
19478: LD_INT 106
19480: PUSH
19481: LD_INT 107
19483: PUSH
19484: LD_INT 108
19486: PUSH
19487: LD_INT 109
19489: PUSH
19490: LD_INT 110
19492: PUSH
19493: LD_INT 111
19495: PUSH
19496: LD_INT 112
19498: PUSH
19499: LD_INT 113
19501: PUSH
19502: LD_INT 114
19504: PUSH
19505: LD_INT 116
19507: PUSH
19508: LD_INT 117
19510: PUSH
19511: LD_INT 118
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: ST_TO_ADDR
19537: GO 20776
19539: LD_INT 14
19541: DOUBLE
19542: EQUAL
19543: IFTRUE 19547
19545: GO 19771
19547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19548: LD_ADDR_VAR 0 2
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 3
19561: PUSH
19562: LD_INT 4
19564: PUSH
19565: LD_INT 5
19567: PUSH
19568: LD_INT 6
19570: PUSH
19571: LD_INT 7
19573: PUSH
19574: LD_INT 8
19576: PUSH
19577: LD_INT 9
19579: PUSH
19580: LD_INT 10
19582: PUSH
19583: LD_INT 11
19585: PUSH
19586: LD_INT 12
19588: PUSH
19589: LD_INT 13
19591: PUSH
19592: LD_INT 14
19594: PUSH
19595: LD_INT 15
19597: PUSH
19598: LD_INT 16
19600: PUSH
19601: LD_INT 17
19603: PUSH
19604: LD_INT 18
19606: PUSH
19607: LD_INT 19
19609: PUSH
19610: LD_INT 20
19612: PUSH
19613: LD_INT 21
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 23
19621: PUSH
19622: LD_INT 24
19624: PUSH
19625: LD_INT 25
19627: PUSH
19628: LD_INT 26
19630: PUSH
19631: LD_INT 27
19633: PUSH
19634: LD_INT 28
19636: PUSH
19637: LD_INT 29
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 31
19645: PUSH
19646: LD_INT 32
19648: PUSH
19649: LD_INT 33
19651: PUSH
19652: LD_INT 34
19654: PUSH
19655: LD_INT 36
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 101
19697: PUSH
19698: LD_INT 102
19700: PUSH
19701: LD_INT 103
19703: PUSH
19704: LD_INT 104
19706: PUSH
19707: LD_INT 105
19709: PUSH
19710: LD_INT 106
19712: PUSH
19713: LD_INT 107
19715: PUSH
19716: LD_INT 108
19718: PUSH
19719: LD_INT 109
19721: PUSH
19722: LD_INT 110
19724: PUSH
19725: LD_INT 111
19727: PUSH
19728: LD_INT 112
19730: PUSH
19731: LD_INT 113
19733: PUSH
19734: LD_INT 114
19736: PUSH
19737: LD_INT 116
19739: PUSH
19740: LD_INT 117
19742: PUSH
19743: LD_INT 118
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: ST_TO_ADDR
19769: GO 20776
19771: LD_INT 15
19773: DOUBLE
19774: EQUAL
19775: IFTRUE 19779
19777: GO 20003
19779: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19780: LD_ADDR_VAR 0 2
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: LD_INT 3
19793: PUSH
19794: LD_INT 4
19796: PUSH
19797: LD_INT 5
19799: PUSH
19800: LD_INT 6
19802: PUSH
19803: LD_INT 7
19805: PUSH
19806: LD_INT 8
19808: PUSH
19809: LD_INT 9
19811: PUSH
19812: LD_INT 10
19814: PUSH
19815: LD_INT 11
19817: PUSH
19818: LD_INT 12
19820: PUSH
19821: LD_INT 13
19823: PUSH
19824: LD_INT 14
19826: PUSH
19827: LD_INT 15
19829: PUSH
19830: LD_INT 16
19832: PUSH
19833: LD_INT 17
19835: PUSH
19836: LD_INT 18
19838: PUSH
19839: LD_INT 19
19841: PUSH
19842: LD_INT 20
19844: PUSH
19845: LD_INT 21
19847: PUSH
19848: LD_INT 22
19850: PUSH
19851: LD_INT 23
19853: PUSH
19854: LD_INT 24
19856: PUSH
19857: LD_INT 25
19859: PUSH
19860: LD_INT 26
19862: PUSH
19863: LD_INT 27
19865: PUSH
19866: LD_INT 28
19868: PUSH
19869: LD_INT 29
19871: PUSH
19872: LD_INT 30
19874: PUSH
19875: LD_INT 31
19877: PUSH
19878: LD_INT 32
19880: PUSH
19881: LD_INT 33
19883: PUSH
19884: LD_INT 34
19886: PUSH
19887: LD_INT 36
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 101
19929: PUSH
19930: LD_INT 102
19932: PUSH
19933: LD_INT 103
19935: PUSH
19936: LD_INT 104
19938: PUSH
19939: LD_INT 105
19941: PUSH
19942: LD_INT 106
19944: PUSH
19945: LD_INT 107
19947: PUSH
19948: LD_INT 108
19950: PUSH
19951: LD_INT 109
19953: PUSH
19954: LD_INT 110
19956: PUSH
19957: LD_INT 111
19959: PUSH
19960: LD_INT 112
19962: PUSH
19963: LD_INT 113
19965: PUSH
19966: LD_INT 114
19968: PUSH
19969: LD_INT 116
19971: PUSH
19972: LD_INT 117
19974: PUSH
19975: LD_INT 118
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: ST_TO_ADDR
20001: GO 20776
20003: LD_INT 16
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20147
20011: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 4
20022: PUSH
20023: LD_INT 5
20025: PUSH
20026: LD_INT 7
20028: PUSH
20029: LD_INT 11
20031: PUSH
20032: LD_INT 12
20034: PUSH
20035: LD_INT 15
20037: PUSH
20038: LD_INT 16
20040: PUSH
20041: LD_INT 20
20043: PUSH
20044: LD_INT 21
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_INT 23
20052: PUSH
20053: LD_INT 25
20055: PUSH
20056: LD_INT 26
20058: PUSH
20059: LD_INT 30
20061: PUSH
20062: LD_INT 31
20064: PUSH
20065: LD_INT 32
20067: PUSH
20068: LD_INT 33
20070: PUSH
20071: LD_INT 34
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 101
20097: PUSH
20098: LD_INT 102
20100: PUSH
20101: LD_INT 103
20103: PUSH
20104: LD_INT 106
20106: PUSH
20107: LD_INT 108
20109: PUSH
20110: LD_INT 112
20112: PUSH
20113: LD_INT 113
20115: PUSH
20116: LD_INT 114
20118: PUSH
20119: LD_INT 116
20121: PUSH
20122: LD_INT 117
20124: PUSH
20125: LD_INT 118
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: ST_TO_ADDR
20145: GO 20776
20147: LD_INT 17
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20379
20155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20156: LD_ADDR_VAR 0 2
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: LD_INT 3
20169: PUSH
20170: LD_INT 4
20172: PUSH
20173: LD_INT 5
20175: PUSH
20176: LD_INT 6
20178: PUSH
20179: LD_INT 7
20181: PUSH
20182: LD_INT 8
20184: PUSH
20185: LD_INT 9
20187: PUSH
20188: LD_INT 10
20190: PUSH
20191: LD_INT 11
20193: PUSH
20194: LD_INT 12
20196: PUSH
20197: LD_INT 13
20199: PUSH
20200: LD_INT 14
20202: PUSH
20203: LD_INT 15
20205: PUSH
20206: LD_INT 16
20208: PUSH
20209: LD_INT 17
20211: PUSH
20212: LD_INT 18
20214: PUSH
20215: LD_INT 19
20217: PUSH
20218: LD_INT 20
20220: PUSH
20221: LD_INT 21
20223: PUSH
20224: LD_INT 22
20226: PUSH
20227: LD_INT 23
20229: PUSH
20230: LD_INT 24
20232: PUSH
20233: LD_INT 25
20235: PUSH
20236: LD_INT 26
20238: PUSH
20239: LD_INT 27
20241: PUSH
20242: LD_INT 28
20244: PUSH
20245: LD_INT 29
20247: PUSH
20248: LD_INT 30
20250: PUSH
20251: LD_INT 31
20253: PUSH
20254: LD_INT 32
20256: PUSH
20257: LD_INT 33
20259: PUSH
20260: LD_INT 34
20262: PUSH
20263: LD_INT 36
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 101
20305: PUSH
20306: LD_INT 102
20308: PUSH
20309: LD_INT 103
20311: PUSH
20312: LD_INT 104
20314: PUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 106
20320: PUSH
20321: LD_INT 107
20323: PUSH
20324: LD_INT 108
20326: PUSH
20327: LD_INT 109
20329: PUSH
20330: LD_INT 110
20332: PUSH
20333: LD_INT 111
20335: PUSH
20336: LD_INT 112
20338: PUSH
20339: LD_INT 113
20341: PUSH
20342: LD_INT 114
20344: PUSH
20345: LD_INT 116
20347: PUSH
20348: LD_INT 117
20350: PUSH
20351: LD_INT 118
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: ST_TO_ADDR
20377: GO 20776
20379: LD_INT 18
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20535
20387: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20388: LD_ADDR_VAR 0 2
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 4
20398: PUSH
20399: LD_INT 5
20401: PUSH
20402: LD_INT 7
20404: PUSH
20405: LD_INT 11
20407: PUSH
20408: LD_INT 12
20410: PUSH
20411: LD_INT 15
20413: PUSH
20414: LD_INT 16
20416: PUSH
20417: LD_INT 20
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 22
20425: PUSH
20426: LD_INT 23
20428: PUSH
20429: LD_INT 25
20431: PUSH
20432: LD_INT 26
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: LD_INT 31
20440: PUSH
20441: LD_INT 32
20443: PUSH
20444: LD_INT 33
20446: PUSH
20447: LD_INT 34
20449: PUSH
20450: LD_INT 35
20452: PUSH
20453: LD_INT 36
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 101
20481: PUSH
20482: LD_INT 102
20484: PUSH
20485: LD_INT 103
20487: PUSH
20488: LD_INT 106
20490: PUSH
20491: LD_INT 108
20493: PUSH
20494: LD_INT 112
20496: PUSH
20497: LD_INT 113
20499: PUSH
20500: LD_INT 114
20502: PUSH
20503: LD_INT 115
20505: PUSH
20506: LD_INT 116
20508: PUSH
20509: LD_INT 117
20511: PUSH
20512: LD_INT 118
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 20776
20535: LD_INT 19
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20775
20543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 2
20554: PUSH
20555: LD_INT 3
20557: PUSH
20558: LD_INT 4
20560: PUSH
20561: LD_INT 5
20563: PUSH
20564: LD_INT 6
20566: PUSH
20567: LD_INT 7
20569: PUSH
20570: LD_INT 8
20572: PUSH
20573: LD_INT 9
20575: PUSH
20576: LD_INT 10
20578: PUSH
20579: LD_INT 11
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: LD_INT 13
20587: PUSH
20588: LD_INT 14
20590: PUSH
20591: LD_INT 15
20593: PUSH
20594: LD_INT 16
20596: PUSH
20597: LD_INT 17
20599: PUSH
20600: LD_INT 18
20602: PUSH
20603: LD_INT 19
20605: PUSH
20606: LD_INT 20
20608: PUSH
20609: LD_INT 21
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 23
20617: PUSH
20618: LD_INT 24
20620: PUSH
20621: LD_INT 25
20623: PUSH
20624: LD_INT 26
20626: PUSH
20627: LD_INT 27
20629: PUSH
20630: LD_INT 28
20632: PUSH
20633: LD_INT 29
20635: PUSH
20636: LD_INT 30
20638: PUSH
20639: LD_INT 31
20641: PUSH
20642: LD_INT 32
20644: PUSH
20645: LD_INT 33
20647: PUSH
20648: LD_INT 34
20650: PUSH
20651: LD_INT 35
20653: PUSH
20654: LD_INT 36
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 101
20697: PUSH
20698: LD_INT 102
20700: PUSH
20701: LD_INT 103
20703: PUSH
20704: LD_INT 104
20706: PUSH
20707: LD_INT 105
20709: PUSH
20710: LD_INT 106
20712: PUSH
20713: LD_INT 107
20715: PUSH
20716: LD_INT 108
20718: PUSH
20719: LD_INT 109
20721: PUSH
20722: LD_INT 110
20724: PUSH
20725: LD_INT 111
20727: PUSH
20728: LD_INT 112
20730: PUSH
20731: LD_INT 113
20733: PUSH
20734: LD_INT 114
20736: PUSH
20737: LD_INT 115
20739: PUSH
20740: LD_INT 116
20742: PUSH
20743: LD_INT 117
20745: PUSH
20746: LD_INT 118
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: ST_TO_ADDR
20773: GO 20776
20775: POP
// end else
20776: GO 21007
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 3
20791: PUSH
20792: LD_INT 4
20794: PUSH
20795: LD_INT 5
20797: PUSH
20798: LD_INT 6
20800: PUSH
20801: LD_INT 7
20803: PUSH
20804: LD_INT 8
20806: PUSH
20807: LD_INT 9
20809: PUSH
20810: LD_INT 10
20812: PUSH
20813: LD_INT 11
20815: PUSH
20816: LD_INT 12
20818: PUSH
20819: LD_INT 13
20821: PUSH
20822: LD_INT 14
20824: PUSH
20825: LD_INT 15
20827: PUSH
20828: LD_INT 16
20830: PUSH
20831: LD_INT 17
20833: PUSH
20834: LD_INT 18
20836: PUSH
20837: LD_INT 19
20839: PUSH
20840: LD_INT 20
20842: PUSH
20843: LD_INT 21
20845: PUSH
20846: LD_INT 22
20848: PUSH
20849: LD_INT 23
20851: PUSH
20852: LD_INT 24
20854: PUSH
20855: LD_INT 25
20857: PUSH
20858: LD_INT 26
20860: PUSH
20861: LD_INT 27
20863: PUSH
20864: LD_INT 28
20866: PUSH
20867: LD_INT 29
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: LD_INT 31
20875: PUSH
20876: LD_INT 32
20878: PUSH
20879: LD_INT 33
20881: PUSH
20882: LD_INT 34
20884: PUSH
20885: LD_INT 35
20887: PUSH
20888: LD_INT 36
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 101
20931: PUSH
20932: LD_INT 102
20934: PUSH
20935: LD_INT 103
20937: PUSH
20938: LD_INT 104
20940: PUSH
20941: LD_INT 105
20943: PUSH
20944: LD_INT 106
20946: PUSH
20947: LD_INT 107
20949: PUSH
20950: LD_INT 108
20952: PUSH
20953: LD_INT 109
20955: PUSH
20956: LD_INT 110
20958: PUSH
20959: LD_INT 111
20961: PUSH
20962: LD_INT 112
20964: PUSH
20965: LD_INT 113
20967: PUSH
20968: LD_INT 114
20970: PUSH
20971: LD_INT 115
20973: PUSH
20974: LD_INT 116
20976: PUSH
20977: LD_INT 117
20979: PUSH
20980: LD_INT 118
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: ST_TO_ADDR
// if result then
21007: LD_VAR 0 2
21011: IFFALSE 21797
// begin normal :=  ;
21013: LD_ADDR_VAR 0 5
21017: PUSH
21018: LD_STRING 
21020: ST_TO_ADDR
// hardcore :=  ;
21021: LD_ADDR_VAR 0 6
21025: PUSH
21026: LD_STRING 
21028: ST_TO_ADDR
// active :=  ;
21029: LD_ADDR_VAR 0 7
21033: PUSH
21034: LD_STRING 
21036: ST_TO_ADDR
// for i = 1 to normalCounter do
21037: LD_ADDR_VAR 0 8
21041: PUSH
21042: DOUBLE
21043: LD_INT 1
21045: DEC
21046: ST_TO_ADDR
21047: LD_EXP 48
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21154
// begin tmp := 0 ;
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_STRING 0
21062: ST_TO_ADDR
// if result [ 1 ] then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 1
21070: ARRAY
21071: IFFALSE 21136
// if result [ 1 ] [ 1 ] = i then
21073: LD_VAR 0 2
21077: PUSH
21078: LD_INT 1
21080: ARRAY
21081: PUSH
21082: LD_INT 1
21084: ARRAY
21085: PUSH
21086: LD_VAR 0 8
21090: EQUAL
21091: IFFALSE 21136
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_VAR 0 2
21102: PPUSH
21103: LD_INT 1
21105: PPUSH
21106: LD_VAR 0 2
21110: PUSH
21111: LD_INT 1
21113: ARRAY
21114: PPUSH
21115: LD_INT 1
21117: PPUSH
21118: CALL_OW 3
21122: PPUSH
21123: CALL_OW 1
21127: ST_TO_ADDR
// tmp := 1 ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_STRING 1
21135: ST_TO_ADDR
// end ; normal := normal & tmp ;
21136: LD_ADDR_VAR 0 5
21140: PUSH
21141: LD_VAR 0 5
21145: PUSH
21146: LD_VAR 0 3
21150: STR
21151: ST_TO_ADDR
// end ;
21152: GO 21052
21154: POP
21155: POP
// for i = 1 to hardcoreCounter do
21156: LD_ADDR_VAR 0 8
21160: PUSH
21161: DOUBLE
21162: LD_INT 1
21164: DEC
21165: ST_TO_ADDR
21166: LD_EXP 49
21170: PUSH
21171: FOR_TO
21172: IFFALSE 21277
// begin tmp := 0 ;
21174: LD_ADDR_VAR 0 3
21178: PUSH
21179: LD_STRING 0
21181: ST_TO_ADDR
// if result [ 2 ] then
21182: LD_VAR 0 2
21186: PUSH
21187: LD_INT 2
21189: ARRAY
21190: IFFALSE 21259
// if result [ 2 ] [ 1 ] = 100 + i then
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 2
21199: ARRAY
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: PUSH
21205: LD_INT 100
21207: PUSH
21208: LD_VAR 0 8
21212: PLUS
21213: EQUAL
21214: IFFALSE 21259
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: LD_VAR 0 2
21225: PPUSH
21226: LD_INT 2
21228: PPUSH
21229: LD_VAR 0 2
21233: PUSH
21234: LD_INT 2
21236: ARRAY
21237: PPUSH
21238: LD_INT 1
21240: PPUSH
21241: CALL_OW 3
21245: PPUSH
21246: CALL_OW 1
21250: ST_TO_ADDR
// tmp := 1 ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_STRING 1
21258: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21259: LD_ADDR_VAR 0 6
21263: PUSH
21264: LD_VAR 0 6
21268: PUSH
21269: LD_VAR 0 3
21273: STR
21274: ST_TO_ADDR
// end ;
21275: GO 21171
21277: POP
21278: POP
// if isGameLoad then
21279: LD_VAR 0 1
21283: IFFALSE 21758
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21285: LD_ADDR_VAR 0 4
21289: PUSH
21290: LD_EXP 52
21294: PUSH
21295: LD_EXP 51
21299: PUSH
21300: LD_EXP 53
21304: PUSH
21305: LD_EXP 50
21309: PUSH
21310: LD_EXP 54
21314: PUSH
21315: LD_EXP 55
21319: PUSH
21320: LD_EXP 56
21324: PUSH
21325: LD_EXP 57
21329: PUSH
21330: LD_EXP 58
21334: PUSH
21335: LD_EXP 59
21339: PUSH
21340: LD_EXP 60
21344: PUSH
21345: LD_EXP 61
21349: PUSH
21350: LD_EXP 62
21354: PUSH
21355: LD_EXP 63
21359: PUSH
21360: LD_EXP 71
21364: PUSH
21365: LD_EXP 72
21369: PUSH
21370: LD_EXP 73
21374: PUSH
21375: LD_EXP 74
21379: PUSH
21380: LD_EXP 76
21384: PUSH
21385: LD_EXP 77
21389: PUSH
21390: LD_EXP 78
21394: PUSH
21395: LD_EXP 81
21399: PUSH
21400: LD_EXP 83
21404: PUSH
21405: LD_EXP 84
21409: PUSH
21410: LD_EXP 85
21414: PUSH
21415: LD_EXP 87
21419: PUSH
21420: LD_EXP 88
21424: PUSH
21425: LD_EXP 91
21429: PUSH
21430: LD_EXP 92
21434: PUSH
21435: LD_EXP 93
21439: PUSH
21440: LD_EXP 94
21444: PUSH
21445: LD_EXP 95
21449: PUSH
21450: LD_EXP 96
21454: PUSH
21455: LD_EXP 97
21459: PUSH
21460: LD_EXP 98
21464: PUSH
21465: LD_EXP 99
21469: PUSH
21470: LD_EXP 64
21474: PUSH
21475: LD_EXP 65
21479: PUSH
21480: LD_EXP 68
21484: PUSH
21485: LD_EXP 69
21489: PUSH
21490: LD_EXP 70
21494: PUSH
21495: LD_EXP 66
21499: PUSH
21500: LD_EXP 67
21504: PUSH
21505: LD_EXP 75
21509: PUSH
21510: LD_EXP 79
21514: PUSH
21515: LD_EXP 80
21519: PUSH
21520: LD_EXP 82
21524: PUSH
21525: LD_EXP 86
21529: PUSH
21530: LD_EXP 89
21534: PUSH
21535: LD_EXP 90
21539: PUSH
21540: LD_EXP 100
21544: PUSH
21545: LD_EXP 101
21549: PUSH
21550: LD_EXP 102
21554: PUSH
21555: LD_EXP 103
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: ST_TO_ADDR
// tmp :=  ;
21616: LD_ADDR_VAR 0 3
21620: PUSH
21621: LD_STRING 
21623: ST_TO_ADDR
// for i = 1 to normalCounter do
21624: LD_ADDR_VAR 0 8
21628: PUSH
21629: DOUBLE
21630: LD_INT 1
21632: DEC
21633: ST_TO_ADDR
21634: LD_EXP 48
21638: PUSH
21639: FOR_TO
21640: IFFALSE 21676
// begin if flags [ i ] then
21642: LD_VAR 0 4
21646: PUSH
21647: LD_VAR 0 8
21651: ARRAY
21652: IFFALSE 21674
// tmp := tmp & i & ; ;
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_VAR 0 8
21668: STR
21669: PUSH
21670: LD_STRING ;
21672: STR
21673: ST_TO_ADDR
// end ;
21674: GO 21639
21676: POP
21677: POP
// for i = 1 to hardcoreCounter do
21678: LD_ADDR_VAR 0 8
21682: PUSH
21683: DOUBLE
21684: LD_INT 1
21686: DEC
21687: ST_TO_ADDR
21688: LD_EXP 49
21692: PUSH
21693: FOR_TO
21694: IFFALSE 21740
// begin if flags [ normalCounter + i ] then
21696: LD_VAR 0 4
21700: PUSH
21701: LD_EXP 48
21705: PUSH
21706: LD_VAR 0 8
21710: PLUS
21711: ARRAY
21712: IFFALSE 21738
// tmp := tmp & ( 100 + i ) & ; ;
21714: LD_ADDR_VAR 0 3
21718: PUSH
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 100
21726: PUSH
21727: LD_VAR 0 8
21731: PLUS
21732: STR
21733: PUSH
21734: LD_STRING ;
21736: STR
21737: ST_TO_ADDR
// end ;
21738: GO 21693
21740: POP
21741: POP
// if tmp then
21742: LD_VAR 0 3
21746: IFFALSE 21758
// active := tmp ;
21748: LD_ADDR_VAR 0 7
21752: PUSH
21753: LD_VAR 0 3
21757: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21758: LD_STRING getStreamItemsFromMission("
21760: PUSH
21761: LD_VAR 0 5
21765: STR
21766: PUSH
21767: LD_STRING ","
21769: STR
21770: PUSH
21771: LD_VAR 0 6
21775: STR
21776: PUSH
21777: LD_STRING ","
21779: STR
21780: PUSH
21781: LD_VAR 0 7
21785: STR
21786: PUSH
21787: LD_STRING ")
21789: STR
21790: PPUSH
21791: CALL_OW 559
// end else
21795: GO 21804
// ToLua ( getStreamItemsFromMission("","","") ) ;
21797: LD_STRING getStreamItemsFromMission("","","")
21799: PPUSH
21800: CALL_OW 559
// end ;
21804: LD_VAR 0 2
21808: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21809: LD_EXP 47
21813: IFFALSE 21821
21815: PUSH
21816: LD_EXP 52
21820: AND
21821: IFFALSE 21945
21823: GO 21825
21825: DISABLE
21826: LD_INT 0
21828: PPUSH
21829: PPUSH
// begin enable ;
21830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21831: LD_ADDR_VAR 0 2
21835: PUSH
21836: LD_INT 22
21838: PUSH
21839: LD_OWVAR 2
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: LD_INT 34
21853: PUSH
21854: LD_INT 7
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 34
21863: PUSH
21864: LD_INT 45
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 34
21873: PUSH
21874: LD_INT 28
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 34
21883: PUSH
21884: LD_INT 47
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 69
21906: ST_TO_ADDR
// if not tmp then
21907: LD_VAR 0 2
21911: NOT
21912: IFFALSE 21916
// exit ;
21914: GO 21945
// for i in tmp do
21916: LD_ADDR_VAR 0 1
21920: PUSH
21921: LD_VAR 0 2
21925: PUSH
21926: FOR_IN
21927: IFFALSE 21943
// begin SetLives ( i , 0 ) ;
21929: LD_VAR 0 1
21933: PPUSH
21934: LD_INT 0
21936: PPUSH
21937: CALL_OW 234
// end ;
21941: GO 21926
21943: POP
21944: POP
// end ;
21945: PPOPN 2
21947: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21948: LD_EXP 47
21952: IFFALSE 21960
21954: PUSH
21955: LD_EXP 53
21959: AND
21960: IFFALSE 22044
21962: GO 21964
21964: DISABLE
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
// begin enable ;
21969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_OWVAR 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 32
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: ST_TO_ADDR
// if not tmp then
22006: LD_VAR 0 2
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22044
// for i in tmp do
22015: LD_ADDR_VAR 0 1
22019: PUSH
22020: LD_VAR 0 2
22024: PUSH
22025: FOR_IN
22026: IFFALSE 22042
// begin SetLives ( i , 0 ) ;
22028: LD_VAR 0 1
22032: PPUSH
22033: LD_INT 0
22035: PPUSH
22036: CALL_OW 234
// end ;
22040: GO 22025
22042: POP
22043: POP
// end ;
22044: PPOPN 2
22046: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22047: LD_EXP 47
22051: IFFALSE 22059
22053: PUSH
22054: LD_EXP 50
22058: AND
22059: IFFALSE 22152
22061: GO 22063
22063: DISABLE
22064: LD_INT 0
22066: PPUSH
// begin enable ;
22067: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 25
22090: PUSH
22091: LD_INT 5
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 25
22100: PUSH
22101: LD_INT 9
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 25
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PPUSH
22128: CALL_OW 69
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22150
// begin SetClass ( i , 1 ) ;
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 336
// end ;
22148: GO 22133
22150: POP
22151: POP
// end ;
22152: PPOPN 1
22154: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22155: LD_EXP 47
22159: IFFALSE 22167
22161: PUSH
22162: LD_EXP 51
22166: AND
22167: IFFALSE 22179
22169: PUSH
22170: LD_OWVAR 65
22174: PUSH
22175: LD_INT 7
22177: LESS
22178: AND
22179: IFFALSE 22193
22181: GO 22183
22183: DISABLE
// begin enable ;
22184: ENABLE
// game_speed := 7 ;
22185: LD_ADDR_OWVAR 65
22189: PUSH
22190: LD_INT 7
22192: ST_TO_ADDR
// end ;
22193: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22194: LD_EXP 47
22198: IFFALSE 22206
22200: PUSH
22201: LD_EXP 54
22205: AND
22206: IFFALSE 22408
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: LD_INT 81
22223: PUSH
22224: LD_OWVAR 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 21
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 69
22251: ST_TO_ADDR
// if not tmp then
22252: LD_VAR 0 3
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22408
// if tmp > 5 then
22261: LD_VAR 0 3
22265: PUSH
22266: LD_INT 5
22268: GREATER
22269: IFFALSE 22281
// k := 5 else
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_INT 5
22278: ST_TO_ADDR
22279: GO 22291
// k := tmp ;
22281: LD_ADDR_VAR 0 2
22285: PUSH
22286: LD_VAR 0 3
22290: ST_TO_ADDR
// for i := 1 to k do
22291: LD_ADDR_VAR 0 1
22295: PUSH
22296: DOUBLE
22297: LD_INT 1
22299: DEC
22300: ST_TO_ADDR
22301: LD_VAR 0 2
22305: PUSH
22306: FOR_TO
22307: IFFALSE 22406
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22309: LD_VAR 0 3
22313: PUSH
22314: LD_VAR 0 1
22318: ARRAY
22319: PPUSH
22320: LD_VAR 0 1
22324: PUSH
22325: LD_INT 4
22327: MOD
22328: PUSH
22329: LD_INT 1
22331: PLUS
22332: PPUSH
22333: CALL_OW 259
22337: PUSH
22338: LD_INT 10
22340: LESS
22341: IFFALSE 22404
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22343: LD_VAR 0 3
22347: PUSH
22348: LD_VAR 0 1
22352: ARRAY
22353: PPUSH
22354: LD_VAR 0 1
22358: PUSH
22359: LD_INT 4
22361: MOD
22362: PUSH
22363: LD_INT 1
22365: PLUS
22366: PPUSH
22367: LD_VAR 0 3
22371: PUSH
22372: LD_VAR 0 1
22376: ARRAY
22377: PPUSH
22378: LD_VAR 0 1
22382: PUSH
22383: LD_INT 4
22385: MOD
22386: PUSH
22387: LD_INT 1
22389: PLUS
22390: PPUSH
22391: CALL_OW 259
22395: PUSH
22396: LD_INT 1
22398: PLUS
22399: PPUSH
22400: CALL_OW 237
22404: GO 22306
22406: POP
22407: POP
// end ;
22408: PPOPN 3
22410: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22411: LD_EXP 47
22415: IFFALSE 22423
22417: PUSH
22418: LD_EXP 55
22422: AND
22423: IFFALSE 22443
22425: GO 22427
22427: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22428: LD_INT 4
22430: PPUSH
22431: LD_OWVAR 2
22435: PPUSH
22436: LD_INT 0
22438: PPUSH
22439: CALL_OW 324
22443: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22444: LD_EXP 47
22448: IFFALSE 22456
22450: PUSH
22451: LD_EXP 84
22455: AND
22456: IFFALSE 22476
22458: GO 22460
22460: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22461: LD_INT 19
22463: PPUSH
22464: LD_OWVAR 2
22468: PPUSH
22469: LD_INT 0
22471: PPUSH
22472: CALL_OW 324
22476: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22477: LD_EXP 47
22481: IFFALSE 22489
22483: PUSH
22484: LD_EXP 56
22488: AND
22489: IFFALSE 22591
22491: GO 22493
22493: DISABLE
22494: LD_INT 0
22496: PPUSH
22497: PPUSH
// begin enable ;
22498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_OWVAR 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 34
22521: PUSH
22522: LD_INT 11
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 34
22531: PUSH
22532: LD_INT 30
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PPUSH
22548: CALL_OW 69
22552: ST_TO_ADDR
// if not tmp then
22553: LD_VAR 0 2
22557: NOT
22558: IFFALSE 22562
// exit ;
22560: GO 22591
// for i in tmp do
22562: LD_ADDR_VAR 0 1
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22589
// begin SetLives ( i , 0 ) ;
22575: LD_VAR 0 1
22579: PPUSH
22580: LD_INT 0
22582: PPUSH
22583: CALL_OW 234
// end ;
22587: GO 22572
22589: POP
22590: POP
// end ;
22591: PPOPN 2
22593: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22594: LD_EXP 47
22598: IFFALSE 22606
22600: PUSH
22601: LD_EXP 57
22605: AND
22606: IFFALSE 22626
22608: GO 22610
22610: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22611: LD_INT 32
22613: PPUSH
22614: LD_OWVAR 2
22618: PPUSH
22619: LD_INT 0
22621: PPUSH
22622: CALL_OW 324
22626: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22627: LD_EXP 47
22631: IFFALSE 22639
22633: PUSH
22634: LD_EXP 58
22638: AND
22639: IFFALSE 22822
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
22648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 22
22656: PUSH
22657: LD_OWVAR 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 33
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PPUSH
22680: CALL_OW 69
22684: ST_TO_ADDR
// if not tmp then
22685: LD_VAR 0 2
22689: NOT
22690: IFFALSE 22694
// exit ;
22692: GO 22822
// side := 0 ;
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 0
22701: ST_TO_ADDR
// for i := 1 to 8 do
22702: LD_ADDR_VAR 0 1
22706: PUSH
22707: DOUBLE
22708: LD_INT 1
22710: DEC
22711: ST_TO_ADDR
22712: LD_INT 8
22714: PUSH
22715: FOR_TO
22716: IFFALSE 22766
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22718: LD_OWVAR 2
22722: PUSH
22723: LD_VAR 0 1
22727: NONEQUAL
22728: IFFALSE 22750
22730: PUSH
22731: LD_OWVAR 2
22735: PPUSH
22736: LD_VAR 0 1
22740: PPUSH
22741: CALL_OW 81
22745: PUSH
22746: LD_INT 2
22748: EQUAL
22749: AND
22750: IFFALSE 22764
// begin side := i ;
22752: LD_ADDR_VAR 0 3
22756: PUSH
22757: LD_VAR 0 1
22761: ST_TO_ADDR
// break ;
22762: GO 22766
// end ;
22764: GO 22715
22766: POP
22767: POP
// if not side then
22768: LD_VAR 0 3
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 22822
// for i := 1 to tmp do
22777: LD_ADDR_VAR 0 1
22781: PUSH
22782: DOUBLE
22783: LD_INT 1
22785: DEC
22786: ST_TO_ADDR
22787: LD_VAR 0 2
22791: PUSH
22792: FOR_TO
22793: IFFALSE 22820
// if Prob ( 60 ) then
22795: LD_INT 60
22797: PPUSH
22798: CALL_OW 13
22802: IFFALSE 22818
// SetSide ( i , side ) ;
22804: LD_VAR 0 1
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: CALL_OW 235
22818: GO 22792
22820: POP
22821: POP
// end ;
22822: PPOPN 3
22824: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22825: LD_EXP 47
22829: IFFALSE 22837
22831: PUSH
22832: LD_EXP 60
22836: AND
22837: IFFALSE 22956
22839: GO 22841
22841: DISABLE
22842: LD_INT 0
22844: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22845: LD_ADDR_VAR 0 1
22849: PUSH
22850: LD_INT 22
22852: PUSH
22853: LD_OWVAR 2
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: LD_INT 23
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: PPUSH
22894: CALL_OW 69
22898: PUSH
22899: FOR_IN
22900: IFFALSE 22954
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL_OW 257
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: LD_INT 4
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: IN
22930: IFFALSE 22952
// SetClass ( un , rand ( 1 , 4 ) ) ;
22932: LD_VAR 0 1
22936: PPUSH
22937: LD_INT 1
22939: PPUSH
22940: LD_INT 4
22942: PPUSH
22943: CALL_OW 12
22947: PPUSH
22948: CALL_OW 336
22952: GO 22899
22954: POP
22955: POP
// end ;
22956: PPOPN 1
22958: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22959: LD_EXP 47
22963: IFFALSE 22971
22965: PUSH
22966: LD_EXP 59
22970: AND
22971: IFFALSE 23050
22973: GO 22975
22975: DISABLE
22976: LD_INT 0
22978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22979: LD_ADDR_VAR 0 1
22983: PUSH
22984: LD_INT 22
22986: PUSH
22987: LD_OWVAR 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 21
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PPUSH
23010: CALL_OW 69
23014: ST_TO_ADDR
// if not tmp then
23015: LD_VAR 0 1
23019: NOT
23020: IFFALSE 23024
// exit ;
23022: GO 23050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23024: LD_VAR 0 1
23028: PUSH
23029: LD_INT 1
23031: PPUSH
23032: LD_VAR 0 1
23036: PPUSH
23037: CALL_OW 12
23041: ARRAY
23042: PPUSH
23043: LD_INT 100
23045: PPUSH
23046: CALL_OW 234
// end ;
23050: PPOPN 1
23052: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23053: LD_EXP 47
23057: IFFALSE 23065
23059: PUSH
23060: LD_EXP 61
23064: AND
23065: IFFALSE 23163
23067: GO 23069
23069: DISABLE
23070: LD_INT 0
23072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23073: LD_ADDR_VAR 0 1
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_OWVAR 2
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 21
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PPUSH
23104: CALL_OW 69
23108: ST_TO_ADDR
// if not tmp then
23109: LD_VAR 0 1
23113: NOT
23114: IFFALSE 23118
// exit ;
23116: GO 23163
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23118: LD_VAR 0 1
23122: PUSH
23123: LD_INT 1
23125: PPUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 12
23135: ARRAY
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: LD_INT 4
23142: PPUSH
23143: CALL_OW 12
23147: PPUSH
23148: LD_INT 3000
23150: PPUSH
23151: LD_INT 9000
23153: PPUSH
23154: CALL_OW 12
23158: PPUSH
23159: CALL_OW 492
// end ;
23163: PPOPN 1
23165: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23166: LD_EXP 47
23170: IFFALSE 23178
23172: PUSH
23173: LD_EXP 62
23177: AND
23178: IFFALSE 23198
23180: GO 23182
23182: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23183: LD_INT 1
23185: PPUSH
23186: LD_OWVAR 2
23190: PPUSH
23191: LD_INT 0
23193: PPUSH
23194: CALL_OW 324
23198: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23199: LD_EXP 47
23203: IFFALSE 23211
23205: PUSH
23206: LD_EXP 63
23210: AND
23211: IFFALSE 23294
23213: GO 23215
23215: DISABLE
23216: LD_INT 0
23218: PPUSH
23219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_OWVAR 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 21
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 2
23260: NOT
23261: IFFALSE 23265
// exit ;
23263: GO 23294
// for i in tmp do
23265: LD_ADDR_VAR 0 1
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23292
// SetBLevel ( i , 10 ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_INT 10
23285: PPUSH
23286: CALL_OW 241
23290: GO 23275
23292: POP
23293: POP
// end ;
23294: PPOPN 2
23296: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23297: LD_EXP 47
23301: IFFALSE 23309
23303: PUSH
23304: LD_EXP 64
23308: AND
23309: IFFALSE 23420
23311: GO 23313
23313: DISABLE
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
23318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23319: LD_ADDR_VAR 0 3
23323: PUSH
23324: LD_INT 22
23326: PUSH
23327: LD_OWVAR 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: ST_TO_ADDR
// if not tmp then
23355: LD_VAR 0 3
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23420
// un := tmp [ rand ( 1 , tmp ) ] ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_VAR 0 3
23381: PPUSH
23382: CALL_OW 12
23386: ARRAY
23387: ST_TO_ADDR
// if Crawls ( un ) then
23388: LD_VAR 0 2
23392: PPUSH
23393: CALL_OW 318
23397: IFFALSE 23408
// ComWalk ( un ) ;
23399: LD_VAR 0 2
23403: PPUSH
23404: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23408: LD_VAR 0 2
23412: PPUSH
23413: LD_INT 5
23415: PPUSH
23416: CALL_OW 336
// end ;
23420: PPOPN 3
23422: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23423: LD_EXP 47
23427: IFFALSE 23435
23429: PUSH
23430: LD_EXP 65
23434: AND
23435: IFFALSE 23447
23437: PUSH
23438: LD_OWVAR 67
23442: PUSH
23443: LD_INT 4
23445: LESS
23446: AND
23447: IFFALSE 23466
23449: GO 23451
23451: DISABLE
// begin Difficulty := Difficulty + 1 ;
23452: LD_ADDR_OWVAR 67
23456: PUSH
23457: LD_OWVAR 67
23461: PUSH
23462: LD_INT 1
23464: PLUS
23465: ST_TO_ADDR
// end ;
23466: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23467: LD_EXP 47
23471: IFFALSE 23479
23473: PUSH
23474: LD_EXP 66
23478: AND
23479: IFFALSE 23582
23481: GO 23483
23483: DISABLE
23484: LD_INT 0
23486: PPUSH
// begin for i := 1 to 5 do
23487: LD_ADDR_VAR 0 1
23491: PUSH
23492: DOUBLE
23493: LD_INT 1
23495: DEC
23496: ST_TO_ADDR
23497: LD_INT 5
23499: PUSH
23500: FOR_TO
23501: IFFALSE 23580
// begin uc_nation := nation_nature ;
23503: LD_ADDR_OWVAR 21
23507: PUSH
23508: LD_INT 0
23510: ST_TO_ADDR
// uc_side := 0 ;
23511: LD_ADDR_OWVAR 20
23515: PUSH
23516: LD_INT 0
23518: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23519: LD_ADDR_OWVAR 29
23523: PUSH
23524: LD_INT 12
23526: PUSH
23527: LD_INT 12
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
// hc_agressivity := 20 ;
23534: LD_ADDR_OWVAR 35
23538: PUSH
23539: LD_INT 20
23541: ST_TO_ADDR
// hc_class := class_tiger ;
23542: LD_ADDR_OWVAR 28
23546: PUSH
23547: LD_INT 14
23549: ST_TO_ADDR
// hc_gallery :=  ;
23550: LD_ADDR_OWVAR 33
23554: PUSH
23555: LD_STRING 
23557: ST_TO_ADDR
// hc_name :=  ;
23558: LD_ADDR_OWVAR 26
23562: PUSH
23563: LD_STRING 
23565: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23566: CALL_OW 44
23570: PPUSH
23571: LD_INT 0
23573: PPUSH
23574: CALL_OW 51
// end ;
23578: GO 23500
23580: POP
23581: POP
// end ;
23582: PPOPN 1
23584: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23585: LD_EXP 47
23589: IFFALSE 23597
23591: PUSH
23592: LD_EXP 67
23596: AND
23597: IFFALSE 23606
23599: GO 23601
23601: DISABLE
// StreamSibBomb ;
23602: CALL 23607 0 0
23606: END
// export function StreamSibBomb ; var i , x , y ; begin
23607: LD_INT 0
23609: PPUSH
23610: PPUSH
23611: PPUSH
23612: PPUSH
// result := false ;
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: LD_INT 0
23620: ST_TO_ADDR
// for i := 1 to 16 do
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: DOUBLE
23627: LD_INT 1
23629: DEC
23630: ST_TO_ADDR
23631: LD_INT 16
23633: PUSH
23634: FOR_TO
23635: IFFALSE 23834
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23637: LD_ADDR_VAR 0 3
23641: PUSH
23642: LD_INT 10
23644: PUSH
23645: LD_INT 20
23647: PUSH
23648: LD_INT 30
23650: PUSH
23651: LD_INT 40
23653: PUSH
23654: LD_INT 50
23656: PUSH
23657: LD_INT 60
23659: PUSH
23660: LD_INT 70
23662: PUSH
23663: LD_INT 80
23665: PUSH
23666: LD_INT 90
23668: PUSH
23669: LD_INT 100
23671: PUSH
23672: LD_INT 110
23674: PUSH
23675: LD_INT 120
23677: PUSH
23678: LD_INT 130
23680: PUSH
23681: LD_INT 140
23683: PUSH
23684: LD_INT 150
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: PPUSH
23707: LD_INT 15
23709: PPUSH
23710: CALL_OW 12
23714: ARRAY
23715: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23716: LD_ADDR_VAR 0 4
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 20
23726: PUSH
23727: LD_INT 30
23729: PUSH
23730: LD_INT 40
23732: PUSH
23733: LD_INT 50
23735: PUSH
23736: LD_INT 60
23738: PUSH
23739: LD_INT 70
23741: PUSH
23742: LD_INT 80
23744: PUSH
23745: LD_INT 90
23747: PUSH
23748: LD_INT 100
23750: PUSH
23751: LD_INT 110
23753: PUSH
23754: LD_INT 120
23756: PUSH
23757: LD_INT 130
23759: PUSH
23760: LD_INT 140
23762: PUSH
23763: LD_INT 150
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PPUSH
23786: LD_INT 15
23788: PPUSH
23789: CALL_OW 12
23793: ARRAY
23794: ST_TO_ADDR
// if ValidHex ( x , y ) then
23795: LD_VAR 0 3
23799: PPUSH
23800: LD_VAR 0 4
23804: PPUSH
23805: CALL_OW 488
23809: IFFALSE 23832
// begin result := [ x , y ] ;
23811: LD_ADDR_VAR 0 1
23815: PUSH
23816: LD_VAR 0 3
23820: PUSH
23821: LD_VAR 0 4
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// break ;
23830: GO 23834
// end ; end ;
23832: GO 23634
23834: POP
23835: POP
// if result then
23836: LD_VAR 0 1
23840: IFFALSE 23900
// begin ToLua ( playSibBomb() ) ;
23842: LD_STRING playSibBomb()
23844: PPUSH
23845: CALL_OW 559
// wait ( 0 0$14 ) ;
23849: LD_INT 490
23851: PPUSH
23852: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23856: LD_VAR 0 1
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_VAR 0 1
23869: PUSH
23870: LD_INT 2
23872: ARRAY
23873: PPUSH
23874: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23878: LD_VAR 0 1
23882: PUSH
23883: LD_INT 1
23885: ARRAY
23886: PPUSH
23887: LD_VAR 0 1
23891: PUSH
23892: LD_INT 2
23894: ARRAY
23895: PPUSH
23896: CALL_OW 429
// end ; end ;
23900: LD_VAR 0 1
23904: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23905: LD_EXP 47
23909: IFFALSE 23917
23911: PUSH
23912: LD_EXP 69
23916: AND
23917: IFFALSE 23929
23919: GO 23921
23921: DISABLE
// YouLost (  ) ;
23922: LD_STRING 
23924: PPUSH
23925: CALL_OW 104
23929: END
// every 0 0$1 trigger StreamModeActive and sFog do
23930: LD_EXP 47
23934: IFFALSE 23942
23936: PUSH
23937: LD_EXP 68
23941: AND
23942: IFFALSE 23956
23944: GO 23946
23946: DISABLE
// FogOff ( your_side ) ;
23947: LD_OWVAR 2
23951: PPUSH
23952: CALL_OW 344
23956: END
// every 0 0$1 trigger StreamModeActive and sSun do
23957: LD_EXP 47
23961: IFFALSE 23969
23963: PUSH
23964: LD_EXP 70
23968: AND
23969: IFFALSE 23997
23971: GO 23973
23973: DISABLE
// begin solar_recharge_percent := 0 ;
23974: LD_ADDR_OWVAR 79
23978: PUSH
23979: LD_INT 0
23981: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23982: LD_INT 10500
23984: PPUSH
23985: CALL_OW 67
// solar_recharge_percent := 100 ;
23989: LD_ADDR_OWVAR 79
23993: PUSH
23994: LD_INT 100
23996: ST_TO_ADDR
// end ;
23997: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23998: LD_EXP 47
24002: IFFALSE 24010
24004: PUSH
24005: LD_EXP 71
24009: AND
24010: IFFALSE 24249
24012: GO 24014
24014: DISABLE
24015: LD_INT 0
24017: PPUSH
24018: PPUSH
24019: PPUSH
// begin tmp := [ ] ;
24020: LD_ADDR_VAR 0 3
24024: PUSH
24025: EMPTY
24026: ST_TO_ADDR
// for i := 1 to 6 do
24027: LD_ADDR_VAR 0 1
24031: PUSH
24032: DOUBLE
24033: LD_INT 1
24035: DEC
24036: ST_TO_ADDR
24037: LD_INT 6
24039: PUSH
24040: FOR_TO
24041: IFFALSE 24146
// begin uc_nation := nation_nature ;
24043: LD_ADDR_OWVAR 21
24047: PUSH
24048: LD_INT 0
24050: ST_TO_ADDR
// uc_side := 0 ;
24051: LD_ADDR_OWVAR 20
24055: PUSH
24056: LD_INT 0
24058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24059: LD_ADDR_OWVAR 29
24063: PUSH
24064: LD_INT 12
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: ST_TO_ADDR
// hc_agressivity := 20 ;
24074: LD_ADDR_OWVAR 35
24078: PUSH
24079: LD_INT 20
24081: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24082: LD_ADDR_OWVAR 28
24086: PUSH
24087: LD_INT 17
24089: ST_TO_ADDR
// hc_gallery :=  ;
24090: LD_ADDR_OWVAR 33
24094: PUSH
24095: LD_STRING 
24097: ST_TO_ADDR
// hc_name :=  ;
24098: LD_ADDR_OWVAR 26
24102: PUSH
24103: LD_STRING 
24105: ST_TO_ADDR
// un := CreateHuman ;
24106: LD_ADDR_VAR 0 2
24110: PUSH
24111: CALL_OW 44
24115: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24116: LD_VAR 0 2
24120: PPUSH
24121: LD_INT 1
24123: PPUSH
24124: CALL_OW 51
// tmp := tmp ^ un ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_VAR 0 3
24137: PUSH
24138: LD_VAR 0 2
24142: ADD
24143: ST_TO_ADDR
// end ;
24144: GO 24040
24146: POP
24147: POP
// repeat wait ( 0 0$1 ) ;
24148: LD_INT 35
24150: PPUSH
24151: CALL_OW 67
// for un in tmp do
24155: LD_ADDR_VAR 0 2
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: FOR_IN
24166: IFFALSE 24240
// begin if IsDead ( un ) then
24168: LD_VAR 0 2
24172: PPUSH
24173: CALL_OW 301
24177: IFFALSE 24197
// begin tmp := tmp diff un ;
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_VAR 0 3
24188: PUSH
24189: LD_VAR 0 2
24193: DIFF
24194: ST_TO_ADDR
// continue ;
24195: GO 24165
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_INT 3
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PPUSH
24219: CALL_OW 69
24223: PPUSH
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 74
24233: PPUSH
24234: CALL_OW 115
// end ;
24238: GO 24165
24240: POP
24241: POP
// until not tmp ;
24242: LD_VAR 0 3
24246: NOT
24247: IFFALSE 24148
// end ;
24249: PPOPN 3
24251: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24252: LD_EXP 47
24256: IFFALSE 24264
24258: PUSH
24259: LD_EXP 72
24263: AND
24264: IFFALSE 24318
24266: GO 24268
24268: DISABLE
// begin ToLua ( displayTroll(); ) ;
24269: LD_STRING displayTroll();
24271: PPUSH
24272: CALL_OW 559
// wait ( 3 3$00 ) ;
24276: LD_INT 6300
24278: PPUSH
24279: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24283: LD_STRING hideTroll();
24285: PPUSH
24286: CALL_OW 559
// wait ( 1 1$00 ) ;
24290: LD_INT 2100
24292: PPUSH
24293: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24297: LD_STRING displayTroll();
24299: PPUSH
24300: CALL_OW 559
// wait ( 1 1$00 ) ;
24304: LD_INT 2100
24306: PPUSH
24307: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24311: LD_STRING hideTroll();
24313: PPUSH
24314: CALL_OW 559
// end ;
24318: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24319: LD_EXP 47
24323: IFFALSE 24331
24325: PUSH
24326: LD_EXP 73
24330: AND
24331: IFFALSE 24394
24333: GO 24335
24335: DISABLE
24336: LD_INT 0
24338: PPUSH
// begin p := 0 ;
24339: LD_ADDR_VAR 0 1
24343: PUSH
24344: LD_INT 0
24346: ST_TO_ADDR
// repeat game_speed := 1 ;
24347: LD_ADDR_OWVAR 65
24351: PUSH
24352: LD_INT 1
24354: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24355: LD_INT 35
24357: PPUSH
24358: CALL_OW 67
// p := p + 1 ;
24362: LD_ADDR_VAR 0 1
24366: PUSH
24367: LD_VAR 0 1
24371: PUSH
24372: LD_INT 1
24374: PLUS
24375: ST_TO_ADDR
// until p >= 60 ;
24376: LD_VAR 0 1
24380: PUSH
24381: LD_INT 60
24383: GREATEREQUAL
24384: IFFALSE 24347
// game_speed := 4 ;
24386: LD_ADDR_OWVAR 65
24390: PUSH
24391: LD_INT 4
24393: ST_TO_ADDR
// end ;
24394: PPOPN 1
24396: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24397: LD_EXP 47
24401: IFFALSE 24409
24403: PUSH
24404: LD_EXP 74
24408: AND
24409: IFFALSE 24555
24411: GO 24413
24413: DISABLE
24414: LD_INT 0
24416: PPUSH
24417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24418: LD_ADDR_VAR 0 1
24422: PUSH
24423: LD_INT 22
24425: PUSH
24426: LD_OWVAR 2
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 30
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 69
24471: ST_TO_ADDR
// if not depot then
24472: LD_VAR 0 1
24476: NOT
24477: IFFALSE 24481
// exit ;
24479: GO 24555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24481: LD_ADDR_VAR 0 2
24485: PUSH
24486: LD_VAR 0 1
24490: PUSH
24491: LD_INT 1
24493: PPUSH
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 12
24503: ARRAY
24504: PPUSH
24505: CALL_OW 274
24509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24510: LD_VAR 0 2
24514: PPUSH
24515: LD_INT 1
24517: PPUSH
24518: LD_INT 0
24520: PPUSH
24521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24525: LD_VAR 0 2
24529: PPUSH
24530: LD_INT 2
24532: PPUSH
24533: LD_INT 0
24535: PPUSH
24536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: LD_INT 0
24550: PPUSH
24551: CALL_OW 277
// end ;
24555: PPOPN 2
24557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24558: LD_EXP 47
24562: IFFALSE 24570
24564: PUSH
24565: LD_EXP 75
24569: AND
24570: IFFALSE 24667
24572: GO 24574
24574: DISABLE
24575: LD_INT 0
24577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24578: LD_ADDR_VAR 0 1
24582: PUSH
24583: LD_INT 22
24585: PUSH
24586: LD_OWVAR 2
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 21
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: LD_INT 23
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: ST_TO_ADDR
// if not tmp then
24632: LD_VAR 0 1
24636: NOT
24637: IFFALSE 24641
// exit ;
24639: GO 24667
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24641: LD_VAR 0 1
24645: PUSH
24646: LD_INT 1
24648: PPUSH
24649: LD_VAR 0 1
24653: PPUSH
24654: CALL_OW 12
24658: ARRAY
24659: PPUSH
24660: LD_INT 200
24662: PPUSH
24663: CALL_OW 234
// end ;
24667: PPOPN 1
24669: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24670: LD_EXP 47
24674: IFFALSE 24682
24676: PUSH
24677: LD_EXP 76
24681: AND
24682: IFFALSE 24761
24684: GO 24686
24686: DISABLE
24687: LD_INT 0
24689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: LD_INT 22
24697: PUSH
24698: LD_OWVAR 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: ST_TO_ADDR
// if not tmp then
24726: LD_VAR 0 1
24730: NOT
24731: IFFALSE 24735
// exit ;
24733: GO 24761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24735: LD_VAR 0 1
24739: PUSH
24740: LD_INT 1
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 12
24752: ARRAY
24753: PPUSH
24754: LD_INT 60
24756: PPUSH
24757: CALL_OW 234
// end ;
24761: PPOPN 1
24763: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24764: LD_EXP 47
24768: IFFALSE 24776
24770: PUSH
24771: LD_EXP 77
24775: AND
24776: IFFALSE 24875
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
24784: PPUSH
// begin enable ;
24785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24786: LD_ADDR_VAR 0 1
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_OWVAR 2
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 61
24805: PUSH
24806: EMPTY
24807: LIST
24808: PUSH
24809: LD_INT 33
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: PPUSH
24824: CALL_OW 69
24828: ST_TO_ADDR
// if not tmp then
24829: LD_VAR 0 1
24833: NOT
24834: IFFALSE 24838
// exit ;
24836: GO 24875
// for i in tmp do
24838: LD_ADDR_VAR 0 2
24842: PUSH
24843: LD_VAR 0 1
24847: PUSH
24848: FOR_IN
24849: IFFALSE 24873
// if IsControledBy ( i ) then
24851: LD_VAR 0 2
24855: PPUSH
24856: CALL_OW 312
24860: IFFALSE 24871
// ComUnlink ( i ) ;
24862: LD_VAR 0 2
24866: PPUSH
24867: CALL_OW 136
24871: GO 24848
24873: POP
24874: POP
// end ;
24875: PPOPN 2
24877: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24878: LD_EXP 47
24882: IFFALSE 24890
24884: PUSH
24885: LD_EXP 78
24889: AND
24890: IFFALSE 25030
24892: GO 24894
24894: DISABLE
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
// begin ToLua ( displayPowell(); ) ;
24899: LD_STRING displayPowell();
24901: PPUSH
24902: CALL_OW 559
// uc_side := 0 ;
24906: LD_ADDR_OWVAR 20
24910: PUSH
24911: LD_INT 0
24913: ST_TO_ADDR
// uc_nation := 2 ;
24914: LD_ADDR_OWVAR 21
24918: PUSH
24919: LD_INT 2
24921: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24922: LD_ADDR_OWVAR 37
24926: PUSH
24927: LD_INT 14
24929: ST_TO_ADDR
// vc_engine := engine_siberite ;
24930: LD_ADDR_OWVAR 39
24934: PUSH
24935: LD_INT 3
24937: ST_TO_ADDR
// vc_control := control_apeman ;
24938: LD_ADDR_OWVAR 38
24942: PUSH
24943: LD_INT 5
24945: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24946: LD_ADDR_OWVAR 40
24950: PUSH
24951: LD_INT 29
24953: ST_TO_ADDR
// un := CreateVehicle ;
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: CALL_OW 45
24963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24964: LD_VAR 0 2
24968: PPUSH
24969: LD_INT 1
24971: PPUSH
24972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24976: LD_INT 35
24978: PPUSH
24979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24983: LD_VAR 0 2
24987: PPUSH
24988: LD_INT 22
24990: PUSH
24991: LD_OWVAR 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PPUSH
25000: CALL_OW 69
25004: PPUSH
25005: LD_VAR 0 2
25009: PPUSH
25010: CALL_OW 74
25014: PPUSH
25015: CALL_OW 115
// until IsDead ( un ) ;
25019: LD_VAR 0 2
25023: PPUSH
25024: CALL_OW 301
25028: IFFALSE 24976
// end ;
25030: PPOPN 2
25032: END
// every 0 0$1 trigger StreamModeActive and sStu do
25033: LD_EXP 47
25037: IFFALSE 25045
25039: PUSH
25040: LD_EXP 86
25044: AND
25045: IFFALSE 25061
25047: GO 25049
25049: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25050: LD_STRING displayStucuk();
25052: PPUSH
25053: CALL_OW 559
// ResetFog ;
25057: CALL_OW 335
// end ;
25061: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25062: LD_EXP 47
25066: IFFALSE 25074
25068: PUSH
25069: LD_EXP 79
25073: AND
25074: IFFALSE 25215
25076: GO 25078
25078: DISABLE
25079: LD_INT 0
25081: PPUSH
25082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25083: LD_ADDR_VAR 0 2
25087: PUSH
25088: LD_INT 22
25090: PUSH
25091: LD_OWVAR 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PPUSH
25114: CALL_OW 69
25118: ST_TO_ADDR
// if not tmp then
25119: LD_VAR 0 2
25123: NOT
25124: IFFALSE 25128
// exit ;
25126: GO 25215
// un := tmp [ rand ( 1 , tmp ) ] ;
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: LD_VAR 0 2
25137: PUSH
25138: LD_INT 1
25140: PPUSH
25141: LD_VAR 0 2
25145: PPUSH
25146: CALL_OW 12
25150: ARRAY
25151: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_INT 0
25159: PPUSH
25160: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25164: LD_VAR 0 1
25168: PPUSH
25169: LD_OWVAR 3
25173: PUSH
25174: LD_VAR 0 1
25178: DIFF
25179: PPUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 74
25189: PPUSH
25190: CALL_OW 115
// wait ( 0 0$20 ) ;
25194: LD_INT 700
25196: PPUSH
25197: CALL_OW 67
// SetSide ( un , your_side ) ;
25201: LD_VAR 0 1
25205: PPUSH
25206: LD_OWVAR 2
25210: PPUSH
25211: CALL_OW 235
// end ;
25215: PPOPN 2
25217: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25218: LD_EXP 47
25222: IFFALSE 25230
25224: PUSH
25225: LD_EXP 80
25229: AND
25230: IFFALSE 25336
25232: GO 25234
25234: DISABLE
25235: LD_INT 0
25237: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25238: LD_ADDR_VAR 0 1
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_OWVAR 2
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: LD_INT 30
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 30
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PPUSH
25287: CALL_OW 69
25291: ST_TO_ADDR
// if not depot then
25292: LD_VAR 0 1
25296: NOT
25297: IFFALSE 25301
// exit ;
25299: GO 25336
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25301: LD_VAR 0 1
25305: PUSH
25306: LD_INT 1
25308: ARRAY
25309: PPUSH
25310: CALL_OW 250
25314: PPUSH
25315: LD_VAR 0 1
25319: PUSH
25320: LD_INT 1
25322: ARRAY
25323: PPUSH
25324: CALL_OW 251
25328: PPUSH
25329: LD_INT 70
25331: PPUSH
25332: CALL_OW 495
// end ;
25336: PPOPN 1
25338: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25339: LD_EXP 47
25343: IFFALSE 25351
25345: PUSH
25346: LD_EXP 81
25350: AND
25351: IFFALSE 25562
25353: GO 25355
25355: DISABLE
25356: LD_INT 0
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25363: LD_ADDR_VAR 0 5
25367: PUSH
25368: LD_INT 22
25370: PUSH
25371: LD_OWVAR 2
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 21
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PPUSH
25394: CALL_OW 69
25398: ST_TO_ADDR
// if not tmp then
25399: LD_VAR 0 5
25403: NOT
25404: IFFALSE 25408
// exit ;
25406: GO 25562
// for i in tmp do
25408: LD_ADDR_VAR 0 1
25412: PUSH
25413: LD_VAR 0 5
25417: PUSH
25418: FOR_IN
25419: IFFALSE 25560
// begin d := rand ( 0 , 5 ) ;
25421: LD_ADDR_VAR 0 4
25425: PUSH
25426: LD_INT 0
25428: PPUSH
25429: LD_INT 5
25431: PPUSH
25432: CALL_OW 12
25436: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25437: LD_ADDR_VAR 0 2
25441: PUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 250
25451: PPUSH
25452: LD_VAR 0 4
25456: PPUSH
25457: LD_INT 3
25459: PPUSH
25460: LD_INT 12
25462: PPUSH
25463: CALL_OW 12
25467: PPUSH
25468: CALL_OW 272
25472: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_VAR 0 1
25482: PPUSH
25483: CALL_OW 251
25487: PPUSH
25488: LD_VAR 0 4
25492: PPUSH
25493: LD_INT 3
25495: PPUSH
25496: LD_INT 12
25498: PPUSH
25499: CALL_OW 12
25503: PPUSH
25504: CALL_OW 273
25508: ST_TO_ADDR
// if ValidHex ( x , y ) then
25509: LD_VAR 0 2
25513: PPUSH
25514: LD_VAR 0 3
25518: PPUSH
25519: CALL_OW 488
25523: IFFALSE 25558
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25525: LD_VAR 0 1
25529: PPUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_VAR 0 3
25539: PPUSH
25540: LD_INT 3
25542: PPUSH
25543: LD_INT 6
25545: PPUSH
25546: CALL_OW 12
25550: PPUSH
25551: LD_INT 1
25553: PPUSH
25554: CALL_OW 483
// end ;
25558: GO 25418
25560: POP
25561: POP
// end ;
25562: PPOPN 5
25564: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25565: LD_EXP 47
25569: IFFALSE 25577
25571: PUSH
25572: LD_EXP 82
25576: AND
25577: IFFALSE 25671
25579: GO 25581
25581: DISABLE
25582: LD_INT 0
25584: PPUSH
25585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_INT 22
25593: PUSH
25594: LD_OWVAR 2
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 32
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 21
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: PPUSH
25628: CALL_OW 69
25632: ST_TO_ADDR
// if not tmp then
25633: LD_VAR 0 2
25637: NOT
25638: IFFALSE 25642
// exit ;
25640: GO 25671
// for i in tmp do
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_VAR 0 2
25651: PUSH
25652: FOR_IN
25653: IFFALSE 25669
// SetFuel ( i , 0 ) ;
25655: LD_VAR 0 1
25659: PPUSH
25660: LD_INT 0
25662: PPUSH
25663: CALL_OW 240
25667: GO 25652
25669: POP
25670: POP
// end ;
25671: PPOPN 2
25673: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25674: LD_EXP 47
25678: IFFALSE 25686
25680: PUSH
25681: LD_EXP 83
25685: AND
25686: IFFALSE 25752
25688: GO 25690
25690: DISABLE
25691: LD_INT 0
25693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25694: LD_ADDR_VAR 0 1
25698: PUSH
25699: LD_INT 22
25701: PUSH
25702: LD_OWVAR 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: LD_INT 29
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PPUSH
25725: CALL_OW 69
25729: ST_TO_ADDR
// if not tmp then
25730: LD_VAR 0 1
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25752
// DestroyUnit ( tmp [ 1 ] ) ;
25739: LD_VAR 0 1
25743: PUSH
25744: LD_INT 1
25746: ARRAY
25747: PPUSH
25748: CALL_OW 65
// end ;
25752: PPOPN 1
25754: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25755: LD_EXP 47
25759: IFFALSE 25767
25761: PUSH
25762: LD_EXP 85
25766: AND
25767: IFFALSE 25896
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
// begin uc_side := 0 ;
25775: LD_ADDR_OWVAR 20
25779: PUSH
25780: LD_INT 0
25782: ST_TO_ADDR
// uc_nation := nation_arabian ;
25783: LD_ADDR_OWVAR 21
25787: PUSH
25788: LD_INT 2
25790: ST_TO_ADDR
// hc_gallery :=  ;
25791: LD_ADDR_OWVAR 33
25795: PUSH
25796: LD_STRING 
25798: ST_TO_ADDR
// hc_name :=  ;
25799: LD_ADDR_OWVAR 26
25803: PUSH
25804: LD_STRING 
25806: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25807: LD_INT 1
25809: PPUSH
25810: LD_INT 11
25812: PPUSH
25813: LD_INT 10
25815: PPUSH
25816: CALL_OW 380
// un := CreateHuman ;
25820: LD_ADDR_VAR 0 1
25824: PUSH
25825: CALL_OW 44
25829: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_INT 1
25837: PPUSH
25838: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25842: LD_INT 35
25844: PPUSH
25845: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25849: LD_VAR 0 1
25853: PPUSH
25854: LD_INT 22
25856: PUSH
25857: LD_OWVAR 2
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PPUSH
25866: CALL_OW 69
25870: PPUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 74
25880: PPUSH
25881: CALL_OW 115
// until IsDead ( un ) ;
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL_OW 301
25894: IFFALSE 25842
// end ;
25896: PPOPN 1
25898: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25899: LD_EXP 47
25903: IFFALSE 25911
25905: PUSH
25906: LD_EXP 87
25910: AND
25911: IFFALSE 25923
25913: GO 25915
25915: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25916: LD_STRING earthquake(getX(game), 0, 32)
25918: PPUSH
25919: CALL_OW 559
25923: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25924: LD_EXP 47
25928: IFFALSE 25936
25930: PUSH
25931: LD_EXP 88
25935: AND
25936: IFFALSE 26027
25938: GO 25940
25940: DISABLE
25941: LD_INT 0
25943: PPUSH
// begin enable ;
25944: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 33
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: ST_TO_ADDR
// if not tmp then
25992: LD_VAR 0 1
25996: NOT
25997: IFFALSE 26001
// exit ;
25999: GO 26027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26001: LD_VAR 0 1
26005: PUSH
26006: LD_INT 1
26008: PPUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 12
26018: ARRAY
26019: PPUSH
26020: LD_INT 1
26022: PPUSH
26023: CALL_OW 234
// end ;
26027: PPOPN 1
26029: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26030: LD_EXP 47
26034: IFFALSE 26042
26036: PUSH
26037: LD_EXP 89
26041: AND
26042: IFFALSE 26183
26044: GO 26046
26046: DISABLE
26047: LD_INT 0
26049: PPUSH
26050: PPUSH
26051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26052: LD_ADDR_VAR 0 3
26056: PUSH
26057: LD_INT 22
26059: PUSH
26060: LD_OWVAR 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PPUSH
26083: CALL_OW 69
26087: ST_TO_ADDR
// if not tmp then
26088: LD_VAR 0 3
26092: NOT
26093: IFFALSE 26097
// exit ;
26095: GO 26183
// un := tmp [ rand ( 1 , tmp ) ] ;
26097: LD_ADDR_VAR 0 2
26101: PUSH
26102: LD_VAR 0 3
26106: PUSH
26107: LD_INT 1
26109: PPUSH
26110: LD_VAR 0 3
26114: PPUSH
26115: CALL_OW 12
26119: ARRAY
26120: ST_TO_ADDR
// if Crawls ( un ) then
26121: LD_VAR 0 2
26125: PPUSH
26126: CALL_OW 318
26130: IFFALSE 26141
// ComWalk ( un ) ;
26132: LD_VAR 0 2
26136: PPUSH
26137: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26141: LD_VAR 0 2
26145: PPUSH
26146: LD_INT 9
26148: PPUSH
26149: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26153: LD_INT 28
26155: PPUSH
26156: LD_OWVAR 2
26160: PPUSH
26161: LD_INT 2
26163: PPUSH
26164: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26168: LD_INT 29
26170: PPUSH
26171: LD_OWVAR 2
26175: PPUSH
26176: LD_INT 2
26178: PPUSH
26179: CALL_OW 322
// end ;
26183: PPOPN 3
26185: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26186: LD_EXP 47
26190: IFFALSE 26198
26192: PUSH
26193: LD_EXP 90
26197: AND
26198: IFFALSE 26309
26200: GO 26202
26202: DISABLE
26203: LD_INT 0
26205: PPUSH
26206: PPUSH
26207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 22
26215: PUSH
26216: LD_OWVAR 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 25
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 69
26243: ST_TO_ADDR
// if not tmp then
26244: LD_VAR 0 3
26248: NOT
26249: IFFALSE 26253
// exit ;
26251: GO 26309
// un := tmp [ rand ( 1 , tmp ) ] ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_VAR 0 3
26262: PUSH
26263: LD_INT 1
26265: PPUSH
26266: LD_VAR 0 3
26270: PPUSH
26271: CALL_OW 12
26275: ARRAY
26276: ST_TO_ADDR
// if Crawls ( un ) then
26277: LD_VAR 0 2
26281: PPUSH
26282: CALL_OW 318
26286: IFFALSE 26297
// ComWalk ( un ) ;
26288: LD_VAR 0 2
26292: PPUSH
26293: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26297: LD_VAR 0 2
26301: PPUSH
26302: LD_INT 8
26304: PPUSH
26305: CALL_OW 336
// end ;
26309: PPOPN 3
26311: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26312: LD_EXP 47
26316: IFFALSE 26324
26318: PUSH
26319: LD_EXP 91
26323: AND
26324: IFFALSE 26468
26326: GO 26328
26328: DISABLE
26329: LD_INT 0
26331: PPUSH
26332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26333: LD_ADDR_VAR 0 2
26337: PUSH
26338: LD_INT 22
26340: PUSH
26341: LD_OWVAR 2
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 21
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: LD_INT 34
26365: PUSH
26366: LD_INT 12
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 34
26375: PUSH
26376: LD_INT 51
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 34
26385: PUSH
26386: LD_INT 32
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: ST_TO_ADDR
// if not tmp then
26409: LD_VAR 0 2
26413: NOT
26414: IFFALSE 26418
// exit ;
26416: GO 26468
// for i in tmp do
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: LD_VAR 0 2
26427: PUSH
26428: FOR_IN
26429: IFFALSE 26466
// if GetCargo ( i , mat_artifact ) = 0 then
26431: LD_VAR 0 1
26435: PPUSH
26436: LD_INT 4
26438: PPUSH
26439: CALL_OW 289
26443: PUSH
26444: LD_INT 0
26446: EQUAL
26447: IFFALSE 26464
// SetCargo ( i , mat_siberit , 100 ) ;
26449: LD_VAR 0 1
26453: PPUSH
26454: LD_INT 3
26456: PPUSH
26457: LD_INT 100
26459: PPUSH
26460: CALL_OW 290
26464: GO 26428
26466: POP
26467: POP
// end ;
26468: PPOPN 2
26470: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26471: LD_EXP 47
26475: IFFALSE 26483
26477: PUSH
26478: LD_EXP 92
26482: AND
26483: IFFALSE 26666
26485: GO 26487
26487: DISABLE
26488: LD_INT 0
26490: PPUSH
26491: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26492: LD_ADDR_VAR 0 2
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_OWVAR 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PPUSH
26509: CALL_OW 69
26513: ST_TO_ADDR
// if not tmp then
26514: LD_VAR 0 2
26518: NOT
26519: IFFALSE 26523
// exit ;
26521: GO 26666
// for i := 1 to 2 do
26523: LD_ADDR_VAR 0 1
26527: PUSH
26528: DOUBLE
26529: LD_INT 1
26531: DEC
26532: ST_TO_ADDR
26533: LD_INT 2
26535: PUSH
26536: FOR_TO
26537: IFFALSE 26664
// begin uc_side := your_side ;
26539: LD_ADDR_OWVAR 20
26543: PUSH
26544: LD_OWVAR 2
26548: ST_TO_ADDR
// uc_nation := nation_american ;
26549: LD_ADDR_OWVAR 21
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// vc_chassis := us_morphling ;
26557: LD_ADDR_OWVAR 37
26561: PUSH
26562: LD_INT 5
26564: ST_TO_ADDR
// vc_engine := engine_siberite ;
26565: LD_ADDR_OWVAR 39
26569: PUSH
26570: LD_INT 3
26572: ST_TO_ADDR
// vc_control := control_computer ;
26573: LD_ADDR_OWVAR 38
26577: PUSH
26578: LD_INT 3
26580: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26581: LD_ADDR_OWVAR 40
26585: PUSH
26586: LD_INT 10
26588: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: ARRAY
26597: PPUSH
26598: CALL_OW 310
26602: NOT
26603: IFFALSE 26650
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26605: CALL_OW 45
26609: PPUSH
26610: LD_VAR 0 2
26614: PUSH
26615: LD_INT 1
26617: ARRAY
26618: PPUSH
26619: CALL_OW 250
26623: PPUSH
26624: LD_VAR 0 2
26628: PUSH
26629: LD_INT 1
26631: ARRAY
26632: PPUSH
26633: CALL_OW 251
26637: PPUSH
26638: LD_INT 12
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: CALL_OW 50
26648: GO 26662
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26650: CALL_OW 45
26654: PPUSH
26655: LD_INT 1
26657: PPUSH
26658: CALL_OW 51
// end ;
26662: GO 26536
26664: POP
26665: POP
// end ;
26666: PPOPN 2
26668: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26669: LD_EXP 47
26673: IFFALSE 26681
26675: PUSH
26676: LD_EXP 93
26680: AND
26681: IFFALSE 26903
26683: GO 26685
26685: DISABLE
26686: LD_INT 0
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26694: LD_ADDR_VAR 0 6
26698: PUSH
26699: LD_INT 22
26701: PUSH
26702: LD_OWVAR 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 21
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 3
26723: PUSH
26724: LD_INT 23
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL_OW 69
26747: ST_TO_ADDR
// if not tmp then
26748: LD_VAR 0 6
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26903
// s1 := rand ( 1 , 4 ) ;
26757: LD_ADDR_VAR 0 2
26761: PUSH
26762: LD_INT 1
26764: PPUSH
26765: LD_INT 4
26767: PPUSH
26768: CALL_OW 12
26772: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26773: LD_ADDR_VAR 0 4
26777: PUSH
26778: LD_VAR 0 6
26782: PUSH
26783: LD_INT 1
26785: ARRAY
26786: PPUSH
26787: LD_VAR 0 2
26791: PPUSH
26792: CALL_OW 259
26796: ST_TO_ADDR
// if s1 = 1 then
26797: LD_VAR 0 2
26801: PUSH
26802: LD_INT 1
26804: EQUAL
26805: IFFALSE 26825
// s2 := rand ( 2 , 4 ) else
26807: LD_ADDR_VAR 0 3
26811: PUSH
26812: LD_INT 2
26814: PPUSH
26815: LD_INT 4
26817: PPUSH
26818: CALL_OW 12
26822: ST_TO_ADDR
26823: GO 26833
// s2 := 1 ;
26825: LD_ADDR_VAR 0 3
26829: PUSH
26830: LD_INT 1
26832: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26833: LD_ADDR_VAR 0 5
26837: PUSH
26838: LD_VAR 0 6
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 3
26851: PPUSH
26852: CALL_OW 259
26856: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26857: LD_VAR 0 6
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26880: LD_VAR 0 6
26884: PUSH
26885: LD_INT 1
26887: ARRAY
26888: PPUSH
26889: LD_VAR 0 3
26893: PPUSH
26894: LD_VAR 0 4
26898: PPUSH
26899: CALL_OW 237
// end ;
26903: PPOPN 6
26905: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26906: LD_EXP 47
26910: IFFALSE 26918
26912: PUSH
26913: LD_EXP 94
26917: AND
26918: IFFALSE 26997
26920: GO 26922
26922: DISABLE
26923: LD_INT 0
26925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26926: LD_ADDR_VAR 0 1
26930: PUSH
26931: LD_INT 22
26933: PUSH
26934: LD_OWVAR 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 30
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PPUSH
26957: CALL_OW 69
26961: ST_TO_ADDR
// if not tmp then
26962: LD_VAR 0 1
26966: NOT
26967: IFFALSE 26971
// exit ;
26969: GO 26997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26971: LD_VAR 0 1
26975: PUSH
26976: LD_INT 1
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 12
26988: ARRAY
26989: PPUSH
26990: LD_INT 1
26992: PPUSH
26993: CALL_OW 234
// end ;
26997: PPOPN 1
26999: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27000: LD_EXP 47
27004: IFFALSE 27012
27006: PUSH
27007: LD_EXP 95
27011: AND
27012: IFFALSE 27124
27014: GO 27016
27016: DISABLE
27017: LD_INT 0
27019: PPUSH
27020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27021: LD_ADDR_VAR 0 2
27025: PUSH
27026: LD_INT 22
27028: PUSH
27029: LD_OWVAR 2
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: LD_INT 30
27043: PUSH
27044: LD_INT 27
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 30
27053: PUSH
27054: LD_INT 26
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 30
27063: PUSH
27064: LD_INT 28
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PPUSH
27081: CALL_OW 69
27085: ST_TO_ADDR
// if not tmp then
27086: LD_VAR 0 2
27090: NOT
27091: IFFALSE 27095
// exit ;
27093: GO 27124
// for i in tmp do
27095: LD_ADDR_VAR 0 1
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: FOR_IN
27106: IFFALSE 27122
// SetLives ( i , 1 ) ;
27108: LD_VAR 0 1
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: CALL_OW 234
27120: GO 27105
27122: POP
27123: POP
// end ;
27124: PPOPN 2
27126: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27127: LD_EXP 47
27131: IFFALSE 27139
27133: PUSH
27134: LD_EXP 96
27138: AND
27139: IFFALSE 27426
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
27148: PPUSH
// begin i := rand ( 1 , 7 ) ;
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_INT 1
27156: PPUSH
27157: LD_INT 7
27159: PPUSH
27160: CALL_OW 12
27164: ST_TO_ADDR
// case i of 1 :
27165: LD_VAR 0 1
27169: PUSH
27170: LD_INT 1
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27188
27178: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27179: LD_STRING earthquake(getX(game), 0, 32)
27181: PPUSH
27182: CALL_OW 559
27186: GO 27426
27188: LD_INT 2
27190: DOUBLE
27191: EQUAL
27192: IFTRUE 27196
27194: GO 27210
27196: POP
// begin ToLua ( displayStucuk(); ) ;
27197: LD_STRING displayStucuk();
27199: PPUSH
27200: CALL_OW 559
// ResetFog ;
27204: CALL_OW 335
// end ; 3 :
27208: GO 27426
27210: LD_INT 3
27212: DOUBLE
27213: EQUAL
27214: IFTRUE 27218
27216: GO 27322
27218: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27219: LD_ADDR_VAR 0 2
27223: PUSH
27224: LD_INT 22
27226: PUSH
27227: LD_OWVAR 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 25
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PPUSH
27250: CALL_OW 69
27254: ST_TO_ADDR
// if not tmp then
27255: LD_VAR 0 2
27259: NOT
27260: IFFALSE 27264
// exit ;
27262: GO 27426
// un := tmp [ rand ( 1 , tmp ) ] ;
27264: LD_ADDR_VAR 0 3
27268: PUSH
27269: LD_VAR 0 2
27273: PUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: CALL_OW 12
27286: ARRAY
27287: ST_TO_ADDR
// if Crawls ( un ) then
27288: LD_VAR 0 3
27292: PPUSH
27293: CALL_OW 318
27297: IFFALSE 27308
// ComWalk ( un ) ;
27299: LD_VAR 0 3
27303: PPUSH
27304: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27308: LD_VAR 0 3
27312: PPUSH
27313: LD_INT 8
27315: PPUSH
27316: CALL_OW 336
// end ; 4 :
27320: GO 27426
27322: LD_INT 4
27324: DOUBLE
27325: EQUAL
27326: IFTRUE 27330
27328: GO 27404
27330: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_INT 22
27338: PUSH
27339: LD_OWVAR 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 30
27350: PUSH
27351: LD_INT 29
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27426
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27376: LD_VAR 0 2
27380: PUSH
27381: LD_INT 1
27383: ARRAY
27384: PPUSH
27385: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27389: LD_VAR 0 2
27393: PUSH
27394: LD_INT 1
27396: ARRAY
27397: PPUSH
27398: CALL_OW 65
// end ; 5 .. 7 :
27402: GO 27426
27404: LD_INT 5
27406: DOUBLE
27407: GREATEREQUAL
27408: IFFALSE 27416
27410: LD_INT 7
27412: DOUBLE
27413: LESSEQUAL
27414: IFTRUE 27418
27416: GO 27425
27418: POP
// StreamSibBomb ; end ;
27419: CALL 23607 0 0
27423: GO 27426
27425: POP
// end ;
27426: PPOPN 3
27428: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27429: LD_EXP 47
27433: IFFALSE 27441
27435: PUSH
27436: LD_EXP 97
27440: AND
27441: IFFALSE 27597
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
27449: PPUSH
27450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27451: LD_ADDR_VAR 0 2
27455: PUSH
27456: LD_INT 81
27458: PUSH
27459: LD_OWVAR 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: LD_INT 21
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 21
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: LIST
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PPUSH
27500: CALL_OW 69
27504: ST_TO_ADDR
// if not tmp then
27505: LD_VAR 0 2
27509: NOT
27510: IFFALSE 27514
// exit ;
27512: GO 27597
// p := 0 ;
27514: LD_ADDR_VAR 0 3
27518: PUSH
27519: LD_INT 0
27521: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27522: LD_INT 35
27524: PPUSH
27525: CALL_OW 67
// p := p + 1 ;
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_VAR 0 3
27538: PUSH
27539: LD_INT 1
27541: PLUS
27542: ST_TO_ADDR
// for i in tmp do
27543: LD_ADDR_VAR 0 1
27547: PUSH
27548: LD_VAR 0 2
27552: PUSH
27553: FOR_IN
27554: IFFALSE 27585
// if GetLives ( i ) < 1000 then
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 256
27565: PUSH
27566: LD_INT 1000
27568: LESS
27569: IFFALSE 27583
// SetLives ( i , 1000 ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_INT 1000
27578: PPUSH
27579: CALL_OW 234
27583: GO 27553
27585: POP
27586: POP
// until p > 20 ;
27587: LD_VAR 0 3
27591: PUSH
27592: LD_INT 20
27594: GREATER
27595: IFFALSE 27522
// end ;
27597: PPOPN 3
27599: END
// every 0 0$1 trigger StreamModeActive and sTime do
27600: LD_EXP 47
27604: IFFALSE 27612
27606: PUSH
27607: LD_EXP 98
27611: AND
27612: IFFALSE 27647
27614: GO 27616
27616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27617: LD_INT 28
27619: PPUSH
27620: LD_OWVAR 2
27624: PPUSH
27625: LD_INT 2
27627: PPUSH
27628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27632: LD_INT 30
27634: PPUSH
27635: LD_OWVAR 2
27639: PPUSH
27640: LD_INT 2
27642: PPUSH
27643: CALL_OW 322
// end ;
27647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27648: LD_EXP 47
27652: IFFALSE 27660
27654: PUSH
27655: LD_EXP 99
27659: AND
27660: IFFALSE 27781
27662: GO 27664
27664: DISABLE
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27669: LD_ADDR_VAR 0 2
27673: PUSH
27674: LD_INT 22
27676: PUSH
27677: LD_OWVAR 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 21
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 23
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: PPUSH
27718: CALL_OW 69
27722: ST_TO_ADDR
// if not tmp then
27723: LD_VAR 0 2
27727: NOT
27728: IFFALSE 27732
// exit ;
27730: GO 27781
// for i in tmp do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: LD_VAR 0 2
27741: PUSH
27742: FOR_IN
27743: IFFALSE 27779
// begin if Crawls ( i ) then
27745: LD_VAR 0 1
27749: PPUSH
27750: CALL_OW 318
27754: IFFALSE 27765
// ComWalk ( i ) ;
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 138
// SetClass ( i , 2 ) ;
27765: LD_VAR 0 1
27769: PPUSH
27770: LD_INT 2
27772: PPUSH
27773: CALL_OW 336
// end ;
27777: GO 27742
27779: POP
27780: POP
// end ;
27781: PPOPN 2
27783: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27784: LD_EXP 47
27788: IFFALSE 27796
27790: PUSH
27791: LD_EXP 100
27795: AND
27796: IFFALSE 28086
27798: GO 27800
27800: DISABLE
27801: LD_INT 0
27803: PPUSH
27804: PPUSH
27805: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27806: LD_OWVAR 2
27810: PPUSH
27811: LD_INT 9
27813: PPUSH
27814: LD_INT 1
27816: PPUSH
27817: LD_INT 1
27819: PPUSH
27820: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27824: LD_INT 9
27826: PPUSH
27827: LD_OWVAR 2
27831: PPUSH
27832: CALL_OW 343
// uc_side := 9 ;
27836: LD_ADDR_OWVAR 20
27840: PUSH
27841: LD_INT 9
27843: ST_TO_ADDR
// uc_nation := 2 ;
27844: LD_ADDR_OWVAR 21
27848: PUSH
27849: LD_INT 2
27851: ST_TO_ADDR
// hc_name := Dark Warrior ;
27852: LD_ADDR_OWVAR 26
27856: PUSH
27857: LD_STRING Dark Warrior
27859: ST_TO_ADDR
// hc_gallery :=  ;
27860: LD_ADDR_OWVAR 33
27864: PUSH
27865: LD_STRING 
27867: ST_TO_ADDR
// hc_noskilllimit := true ;
27868: LD_ADDR_OWVAR 76
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27876: LD_ADDR_OWVAR 31
27880: PUSH
27881: LD_INT 30
27883: PUSH
27884: LD_INT 30
27886: PUSH
27887: LD_INT 30
27889: PUSH
27890: LD_INT 30
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: ST_TO_ADDR
// un := CreateHuman ;
27899: LD_ADDR_VAR 0 3
27903: PUSH
27904: CALL_OW 44
27908: ST_TO_ADDR
// hc_noskilllimit := false ;
27909: LD_ADDR_OWVAR 76
27913: PUSH
27914: LD_INT 0
27916: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27917: LD_VAR 0 3
27921: PPUSH
27922: LD_INT 1
27924: PPUSH
27925: CALL_OW 51
// ToLua ( playRanger() ) ;
27929: LD_STRING playRanger()
27931: PPUSH
27932: CALL_OW 559
// p := 0 ;
27936: LD_ADDR_VAR 0 2
27940: PUSH
27941: LD_INT 0
27943: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27944: LD_INT 35
27946: PPUSH
27947: CALL_OW 67
// p := p + 1 ;
27951: LD_ADDR_VAR 0 2
27955: PUSH
27956: LD_VAR 0 2
27960: PUSH
27961: LD_INT 1
27963: PLUS
27964: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27965: LD_VAR 0 3
27969: PPUSH
27970: CALL_OW 256
27974: PUSH
27975: LD_INT 1000
27977: LESS
27978: IFFALSE 27992
// SetLives ( un , 1000 ) ;
27980: LD_VAR 0 3
27984: PPUSH
27985: LD_INT 1000
27987: PPUSH
27988: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27992: LD_VAR 0 3
27996: PPUSH
27997: LD_INT 81
27999: PUSH
28000: LD_OWVAR 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 91
28011: PUSH
28012: LD_VAR 0 3
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PPUSH
28029: CALL_OW 69
28033: PPUSH
28034: LD_VAR 0 3
28038: PPUSH
28039: CALL_OW 74
28043: PPUSH
28044: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28048: LD_VAR 0 2
28052: PUSH
28053: LD_INT 80
28055: GREATER
28056: IFTRUE 28069
28058: PUSH
28059: LD_VAR 0 3
28063: PPUSH
28064: CALL_OW 301
28068: OR
28069: IFFALSE 27944
// if un then
28071: LD_VAR 0 3
28075: IFFALSE 28086
// RemoveUnit ( un ) ;
28077: LD_VAR 0 3
28081: PPUSH
28082: CALL_OW 64
// end ;
28086: PPOPN 3
28088: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28089: LD_EXP 101
28093: IFFALSE 28209
28095: GO 28097
28097: DISABLE
28098: LD_INT 0
28100: PPUSH
28101: PPUSH
28102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28103: LD_ADDR_VAR 0 2
28107: PUSH
28108: LD_INT 81
28110: PUSH
28111: LD_OWVAR 2
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 21
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 69
28138: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28139: LD_STRING playComputer()
28141: PPUSH
28142: CALL_OW 559
// if not tmp then
28146: LD_VAR 0 2
28150: NOT
28151: IFFALSE 28155
// exit ;
28153: GO 28209
// for i in tmp do
28155: LD_ADDR_VAR 0 1
28159: PUSH
28160: LD_VAR 0 2
28164: PUSH
28165: FOR_IN
28166: IFFALSE 28207
// for j := 1 to 4 do
28168: LD_ADDR_VAR 0 3
28172: PUSH
28173: DOUBLE
28174: LD_INT 1
28176: DEC
28177: ST_TO_ADDR
28178: LD_INT 4
28180: PUSH
28181: FOR_TO
28182: IFFALSE 28203
// SetSkill ( i , j , 10 ) ;
28184: LD_VAR 0 1
28188: PPUSH
28189: LD_VAR 0 3
28193: PPUSH
28194: LD_INT 10
28196: PPUSH
28197: CALL_OW 237
28201: GO 28181
28203: POP
28204: POP
28205: GO 28165
28207: POP
28208: POP
// end ;
28209: PPOPN 3
28211: END
// every 0 0$1 trigger s30 do var i , tmp ;
28212: LD_EXP 102
28216: IFFALSE 28285
28218: GO 28220
28220: DISABLE
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28225: LD_ADDR_VAR 0 2
28229: PUSH
28230: LD_INT 22
28232: PUSH
28233: LD_OWVAR 2
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PPUSH
28242: CALL_OW 69
28246: ST_TO_ADDR
// if not tmp then
28247: LD_VAR 0 2
28251: NOT
28252: IFFALSE 28256
// exit ;
28254: GO 28285
// for i in tmp do
28256: LD_ADDR_VAR 0 1
28260: PUSH
28261: LD_VAR 0 2
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28283
// SetLives ( i , 300 ) ;
28269: LD_VAR 0 1
28273: PPUSH
28274: LD_INT 300
28276: PPUSH
28277: CALL_OW 234
28281: GO 28266
28283: POP
28284: POP
// end ;
28285: PPOPN 2
28287: END
// every 0 0$1 trigger s60 do var i , tmp ;
28288: LD_EXP 103
28292: IFFALSE 28361
28294: GO 28296
28296: DISABLE
28297: LD_INT 0
28299: PPUSH
28300: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28301: LD_ADDR_VAR 0 2
28305: PUSH
28306: LD_INT 22
28308: PUSH
28309: LD_OWVAR 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PPUSH
28318: CALL_OW 69
28322: ST_TO_ADDR
// if not tmp then
28323: LD_VAR 0 2
28327: NOT
28328: IFFALSE 28332
// exit ;
28330: GO 28361
// for i in tmp do
28332: LD_ADDR_VAR 0 1
28336: PUSH
28337: LD_VAR 0 2
28341: PUSH
28342: FOR_IN
28343: IFFALSE 28359
// SetLives ( i , 600 ) ;
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_INT 600
28352: PPUSH
28353: CALL_OW 234
28357: GO 28342
28359: POP
28360: POP
// end ;
28361: PPOPN 2
28363: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28364: LD_INT 0
28366: PPUSH
// case cmd of 301 :
28367: LD_VAR 0 1
28371: PUSH
28372: LD_INT 301
28374: DOUBLE
28375: EQUAL
28376: IFTRUE 28380
28378: GO 28412
28380: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28381: LD_VAR 0 6
28385: PPUSH
28386: LD_VAR 0 7
28390: PPUSH
28391: LD_VAR 0 8
28395: PPUSH
28396: LD_VAR 0 4
28400: PPUSH
28401: LD_VAR 0 5
28405: PPUSH
28406: CALL 29625 0 5
28410: GO 28533
28412: LD_INT 302
28414: DOUBLE
28415: EQUAL
28416: IFTRUE 28420
28418: GO 28457
28420: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28421: LD_VAR 0 6
28425: PPUSH
28426: LD_VAR 0 7
28430: PPUSH
28431: LD_VAR 0 8
28435: PPUSH
28436: LD_VAR 0 9
28440: PPUSH
28441: LD_VAR 0 4
28445: PPUSH
28446: LD_VAR 0 5
28450: PPUSH
28451: CALL 29716 0 6
28455: GO 28533
28457: LD_INT 303
28459: DOUBLE
28460: EQUAL
28461: IFTRUE 28465
28463: GO 28502
28465: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28466: LD_VAR 0 6
28470: PPUSH
28471: LD_VAR 0 7
28475: PPUSH
28476: LD_VAR 0 8
28480: PPUSH
28481: LD_VAR 0 9
28485: PPUSH
28486: LD_VAR 0 4
28490: PPUSH
28491: LD_VAR 0 5
28495: PPUSH
28496: CALL 28538 0 6
28500: GO 28533
28502: LD_INT 304
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28532
28510: POP
// hHackTeleport ( unit , x , y ) ; end ;
28511: LD_VAR 0 2
28515: PPUSH
28516: LD_VAR 0 4
28520: PPUSH
28521: LD_VAR 0 5
28525: PPUSH
28526: CALL 30309 0 3
28530: GO 28533
28532: POP
// end ;
28533: LD_VAR 0 12
28537: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28538: LD_INT 0
28540: PPUSH
28541: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28542: LD_VAR 0 1
28546: PUSH
28547: LD_INT 1
28549: LESS
28550: IFTRUE 28562
28552: PUSH
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 3
28560: GREATER
28561: OR
28562: IFTRUE 28580
28564: PUSH
28565: LD_VAR 0 5
28569: PPUSH
28570: LD_VAR 0 6
28574: PPUSH
28575: CALL_OW 428
28579: OR
28580: IFFALSE 28584
// exit ;
28582: GO 29312
// uc_side := your_side ;
28584: LD_ADDR_OWVAR 20
28588: PUSH
28589: LD_OWVAR 2
28593: ST_TO_ADDR
// uc_nation := nation ;
28594: LD_ADDR_OWVAR 21
28598: PUSH
28599: LD_VAR 0 1
28603: ST_TO_ADDR
// bc_level = 1 ;
28604: LD_ADDR_OWVAR 43
28608: PUSH
28609: LD_INT 1
28611: ST_TO_ADDR
// case btype of 1 :
28612: LD_VAR 0 2
28616: PUSH
28617: LD_INT 1
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28636
28625: POP
// bc_type := b_depot ; 2 :
28626: LD_ADDR_OWVAR 42
28630: PUSH
28631: LD_INT 0
28633: ST_TO_ADDR
28634: GO 29256
28636: LD_INT 2
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28655
28644: POP
// bc_type := b_warehouse ; 3 :
28645: LD_ADDR_OWVAR 42
28649: PUSH
28650: LD_INT 1
28652: ST_TO_ADDR
28653: GO 29256
28655: LD_INT 3
28657: DOUBLE
28658: EQUAL
28659: IFTRUE 28663
28661: GO 28674
28663: POP
// bc_type := b_lab ; 4 .. 9 :
28664: LD_ADDR_OWVAR 42
28668: PUSH
28669: LD_INT 6
28671: ST_TO_ADDR
28672: GO 29256
28674: LD_INT 4
28676: DOUBLE
28677: GREATEREQUAL
28678: IFFALSE 28686
28680: LD_INT 9
28682: DOUBLE
28683: LESSEQUAL
28684: IFTRUE 28688
28686: GO 28748
28688: POP
// begin bc_type := b_lab_half ;
28689: LD_ADDR_OWVAR 42
28693: PUSH
28694: LD_INT 7
28696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28697: LD_ADDR_OWVAR 44
28701: PUSH
28702: LD_INT 10
28704: PUSH
28705: LD_INT 11
28707: PUSH
28708: LD_INT 12
28710: PUSH
28711: LD_INT 15
28713: PUSH
28714: LD_INT 14
28716: PUSH
28717: LD_INT 13
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: PUSH
28728: LD_VAR 0 2
28732: PUSH
28733: LD_INT 3
28735: MINUS
28736: ARRAY
28737: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28738: LD_ADDR_OWVAR 45
28742: PUSH
28743: LD_INT 9
28745: ST_TO_ADDR
// end ; 10 .. 13 :
28746: GO 29256
28748: LD_INT 10
28750: DOUBLE
28751: GREATEREQUAL
28752: IFFALSE 28760
28754: LD_INT 13
28756: DOUBLE
28757: LESSEQUAL
28758: IFTRUE 28762
28760: GO 28839
28762: POP
// begin bc_type := b_lab_full ;
28763: LD_ADDR_OWVAR 42
28767: PUSH
28768: LD_INT 8
28770: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28771: LD_ADDR_OWVAR 44
28775: PUSH
28776: LD_INT 10
28778: PUSH
28779: LD_INT 12
28781: PUSH
28782: LD_INT 14
28784: PUSH
28785: LD_INT 13
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: PUSH
28794: LD_VAR 0 2
28798: PUSH
28799: LD_INT 9
28801: MINUS
28802: ARRAY
28803: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28804: LD_ADDR_OWVAR 45
28808: PUSH
28809: LD_INT 11
28811: PUSH
28812: LD_INT 15
28814: PUSH
28815: LD_INT 12
28817: PUSH
28818: LD_INT 15
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: PUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_INT 9
28834: MINUS
28835: ARRAY
28836: ST_TO_ADDR
// end ; 14 :
28837: GO 29256
28839: LD_INT 14
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 28858
28847: POP
// bc_type := b_workshop ; 15 :
28848: LD_ADDR_OWVAR 42
28852: PUSH
28853: LD_INT 2
28855: ST_TO_ADDR
28856: GO 29256
28858: LD_INT 15
28860: DOUBLE
28861: EQUAL
28862: IFTRUE 28866
28864: GO 28877
28866: POP
// bc_type := b_factory ; 16 :
28867: LD_ADDR_OWVAR 42
28871: PUSH
28872: LD_INT 3
28874: ST_TO_ADDR
28875: GO 29256
28877: LD_INT 16
28879: DOUBLE
28880: EQUAL
28881: IFTRUE 28885
28883: GO 28896
28885: POP
// bc_type := b_ext_gun ; 17 :
28886: LD_ADDR_OWVAR 42
28890: PUSH
28891: LD_INT 17
28893: ST_TO_ADDR
28894: GO 29256
28896: LD_INT 17
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28932
28904: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28905: LD_ADDR_OWVAR 42
28909: PUSH
28910: LD_INT 19
28912: PUSH
28913: LD_INT 23
28915: PUSH
28916: LD_INT 19
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: PUSH
28924: LD_VAR 0 1
28928: ARRAY
28929: ST_TO_ADDR
28930: GO 29256
28932: LD_INT 18
28934: DOUBLE
28935: EQUAL
28936: IFTRUE 28940
28938: GO 28951
28940: POP
// bc_type := b_ext_radar ; 19 :
28941: LD_ADDR_OWVAR 42
28945: PUSH
28946: LD_INT 20
28948: ST_TO_ADDR
28949: GO 29256
28951: LD_INT 19
28953: DOUBLE
28954: EQUAL
28955: IFTRUE 28959
28957: GO 28970
28959: POP
// bc_type := b_ext_radio ; 20 :
28960: LD_ADDR_OWVAR 42
28964: PUSH
28965: LD_INT 22
28967: ST_TO_ADDR
28968: GO 29256
28970: LD_INT 20
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 28989
28978: POP
// bc_type := b_ext_siberium ; 21 :
28979: LD_ADDR_OWVAR 42
28983: PUSH
28984: LD_INT 21
28986: ST_TO_ADDR
28987: GO 29256
28989: LD_INT 21
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29008
28997: POP
// bc_type := b_ext_computer ; 22 :
28998: LD_ADDR_OWVAR 42
29002: PUSH
29003: LD_INT 24
29005: ST_TO_ADDR
29006: GO 29256
29008: LD_INT 22
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29027
29016: POP
// bc_type := b_ext_track ; 23 :
29017: LD_ADDR_OWVAR 42
29021: PUSH
29022: LD_INT 16
29024: ST_TO_ADDR
29025: GO 29256
29027: LD_INT 23
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29046
29035: POP
// bc_type := b_ext_laser ; 24 :
29036: LD_ADDR_OWVAR 42
29040: PUSH
29041: LD_INT 25
29043: ST_TO_ADDR
29044: GO 29256
29046: LD_INT 24
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29054
29052: GO 29065
29054: POP
// bc_type := b_control_tower ; 25 :
29055: LD_ADDR_OWVAR 42
29059: PUSH
29060: LD_INT 36
29062: ST_TO_ADDR
29063: GO 29256
29065: LD_INT 25
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29084
29073: POP
// bc_type := b_breastwork ; 26 :
29074: LD_ADDR_OWVAR 42
29078: PUSH
29079: LD_INT 31
29081: ST_TO_ADDR
29082: GO 29256
29084: LD_INT 26
29086: DOUBLE
29087: EQUAL
29088: IFTRUE 29092
29090: GO 29103
29092: POP
// bc_type := b_bunker ; 27 :
29093: LD_ADDR_OWVAR 42
29097: PUSH
29098: LD_INT 32
29100: ST_TO_ADDR
29101: GO 29256
29103: LD_INT 27
29105: DOUBLE
29106: EQUAL
29107: IFTRUE 29111
29109: GO 29122
29111: POP
// bc_type := b_turret ; 28 :
29112: LD_ADDR_OWVAR 42
29116: PUSH
29117: LD_INT 33
29119: ST_TO_ADDR
29120: GO 29256
29122: LD_INT 28
29124: DOUBLE
29125: EQUAL
29126: IFTRUE 29130
29128: GO 29141
29130: POP
// bc_type := b_armoury ; 29 :
29131: LD_ADDR_OWVAR 42
29135: PUSH
29136: LD_INT 4
29138: ST_TO_ADDR
29139: GO 29256
29141: LD_INT 29
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29160
29149: POP
// bc_type := b_barracks ; 30 :
29150: LD_ADDR_OWVAR 42
29154: PUSH
29155: LD_INT 5
29157: ST_TO_ADDR
29158: GO 29256
29160: LD_INT 30
29162: DOUBLE
29163: EQUAL
29164: IFTRUE 29168
29166: GO 29179
29168: POP
// bc_type := b_solar_power ; 31 :
29169: LD_ADDR_OWVAR 42
29173: PUSH
29174: LD_INT 27
29176: ST_TO_ADDR
29177: GO 29256
29179: LD_INT 31
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29198
29187: POP
// bc_type := b_oil_power ; 32 :
29188: LD_ADDR_OWVAR 42
29192: PUSH
29193: LD_INT 26
29195: ST_TO_ADDR
29196: GO 29256
29198: LD_INT 32
29200: DOUBLE
29201: EQUAL
29202: IFTRUE 29206
29204: GO 29217
29206: POP
// bc_type := b_siberite_power ; 33 :
29207: LD_ADDR_OWVAR 42
29211: PUSH
29212: LD_INT 28
29214: ST_TO_ADDR
29215: GO 29256
29217: LD_INT 33
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29236
29225: POP
// bc_type := b_oil_mine ; 34 :
29226: LD_ADDR_OWVAR 42
29230: PUSH
29231: LD_INT 29
29233: ST_TO_ADDR
29234: GO 29256
29236: LD_INT 34
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29255
29244: POP
// bc_type := b_siberite_mine ; end ;
29245: LD_ADDR_OWVAR 42
29249: PUSH
29250: LD_INT 30
29252: ST_TO_ADDR
29253: GO 29256
29255: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29256: LD_ADDR_VAR 0 8
29260: PUSH
29261: LD_VAR 0 5
29265: PPUSH
29266: LD_VAR 0 6
29270: PPUSH
29271: LD_VAR 0 3
29275: PPUSH
29276: CALL_OW 47
29280: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29281: LD_OWVAR 42
29285: PUSH
29286: LD_INT 32
29288: PUSH
29289: LD_INT 33
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: IN
29296: IFFALSE 29312
// PlaceWeaponTurret ( b , weapon ) ;
29298: LD_VAR 0 8
29302: PPUSH
29303: LD_VAR 0 4
29307: PPUSH
29308: CALL_OW 431
// end ;
29312: LD_VAR 0 7
29316: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29323: LD_ADDR_VAR 0 4
29327: PUSH
29328: LD_INT 22
29330: PUSH
29331: LD_OWVAR 2
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 30
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 30
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 69
29376: ST_TO_ADDR
// if not tmp then
29377: LD_VAR 0 4
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29445
// for i in tmp do
29386: LD_ADDR_VAR 0 2
29390: PUSH
29391: LD_VAR 0 4
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29443
// for j = 1 to 3 do
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: DOUBLE
29405: LD_INT 1
29407: DEC
29408: ST_TO_ADDR
29409: LD_INT 3
29411: PUSH
29412: FOR_TO
29413: IFFALSE 29439
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29415: LD_VAR 0 2
29419: PPUSH
29420: CALL_OW 274
29424: PPUSH
29425: LD_VAR 0 3
29429: PPUSH
29430: LD_INT 99999
29432: PPUSH
29433: CALL_OW 277
29437: GO 29412
29439: POP
29440: POP
29441: GO 29396
29443: POP
29444: POP
// end ;
29445: LD_VAR 0 1
29449: RET
// export function hHackSetLevel10 ; var i , j ; begin
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29455: LD_ADDR_VAR 0 2
29459: PUSH
29460: LD_INT 21
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PPUSH
29470: CALL_OW 69
29474: PUSH
29475: FOR_IN
29476: IFFALSE 29528
// if IsSelected ( i ) then
29478: LD_VAR 0 2
29482: PPUSH
29483: CALL_OW 306
29487: IFFALSE 29526
// begin for j := 1 to 4 do
29489: LD_ADDR_VAR 0 3
29493: PUSH
29494: DOUBLE
29495: LD_INT 1
29497: DEC
29498: ST_TO_ADDR
29499: LD_INT 4
29501: PUSH
29502: FOR_TO
29503: IFFALSE 29524
// SetSkill ( i , j , 10 ) ;
29505: LD_VAR 0 2
29509: PPUSH
29510: LD_VAR 0 3
29514: PPUSH
29515: LD_INT 10
29517: PPUSH
29518: CALL_OW 237
29522: GO 29502
29524: POP
29525: POP
// end ;
29526: GO 29475
29528: POP
29529: POP
// end ;
29530: LD_VAR 0 1
29534: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29535: LD_INT 0
29537: PPUSH
29538: PPUSH
29539: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29540: LD_ADDR_VAR 0 2
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_OWVAR 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 21
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: PUSH
29576: FOR_IN
29577: IFFALSE 29618
// begin for j := 1 to 4 do
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: DOUBLE
29585: LD_INT 1
29587: DEC
29588: ST_TO_ADDR
29589: LD_INT 4
29591: PUSH
29592: FOR_TO
29593: IFFALSE 29614
// SetSkill ( i , j , 10 ) ;
29595: LD_VAR 0 2
29599: PPUSH
29600: LD_VAR 0 3
29604: PPUSH
29605: LD_INT 10
29607: PPUSH
29608: CALL_OW 237
29612: GO 29592
29614: POP
29615: POP
// end ;
29616: GO 29576
29618: POP
29619: POP
// end ;
29620: LD_VAR 0 1
29624: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29625: LD_INT 0
29627: PPUSH
// uc_side := your_side ;
29628: LD_ADDR_OWVAR 20
29632: PUSH
29633: LD_OWVAR 2
29637: ST_TO_ADDR
// uc_nation := nation ;
29638: LD_ADDR_OWVAR 21
29642: PUSH
29643: LD_VAR 0 1
29647: ST_TO_ADDR
// InitHc ;
29648: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29652: LD_INT 0
29654: PPUSH
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29669: LD_VAR 0 4
29673: PPUSH
29674: LD_VAR 0 5
29678: PPUSH
29679: CALL_OW 428
29683: PUSH
29684: LD_INT 0
29686: EQUAL
29687: IFFALSE 29711
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29689: CALL_OW 44
29693: PPUSH
29694: LD_VAR 0 4
29698: PPUSH
29699: LD_VAR 0 5
29703: PPUSH
29704: LD_INT 1
29706: PPUSH
29707: CALL_OW 48
// end ;
29711: LD_VAR 0 6
29715: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
// uc_side := your_side ;
29720: LD_ADDR_OWVAR 20
29724: PUSH
29725: LD_OWVAR 2
29729: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29730: LD_VAR 0 1
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 3
29743: PUSH
29744: LD_INT 4
29746: PUSH
29747: LD_INT 5
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: IN
29757: IFFALSE 29769
// uc_nation := nation_american else
29759: LD_ADDR_OWVAR 21
29763: PUSH
29764: LD_INT 1
29766: ST_TO_ADDR
29767: GO 29812
// if chassis in [ 11 , 12 , 13 , 14 ] then
29769: LD_VAR 0 1
29773: PUSH
29774: LD_INT 11
29776: PUSH
29777: LD_INT 12
29779: PUSH
29780: LD_INT 13
29782: PUSH
29783: LD_INT 14
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: IN
29792: IFFALSE 29804
// uc_nation := nation_arabian else
29794: LD_ADDR_OWVAR 21
29798: PUSH
29799: LD_INT 2
29801: ST_TO_ADDR
29802: GO 29812
// uc_nation := nation_russian ;
29804: LD_ADDR_OWVAR 21
29808: PUSH
29809: LD_INT 3
29811: ST_TO_ADDR
// vc_chassis := chassis ;
29812: LD_ADDR_OWVAR 37
29816: PUSH
29817: LD_VAR 0 1
29821: ST_TO_ADDR
// vc_engine := engine ;
29822: LD_ADDR_OWVAR 39
29826: PUSH
29827: LD_VAR 0 2
29831: ST_TO_ADDR
// vc_control := control ;
29832: LD_ADDR_OWVAR 38
29836: PUSH
29837: LD_VAR 0 3
29841: ST_TO_ADDR
// vc_weapon := weapon ;
29842: LD_ADDR_OWVAR 40
29846: PUSH
29847: LD_VAR 0 4
29851: ST_TO_ADDR
// un := CreateVehicle ;
29852: LD_ADDR_VAR 0 8
29856: PUSH
29857: CALL_OW 45
29861: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29862: LD_VAR 0 8
29866: PPUSH
29867: LD_INT 0
29869: PPUSH
29870: LD_INT 5
29872: PPUSH
29873: CALL_OW 12
29877: PPUSH
29878: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29882: LD_VAR 0 8
29886: PPUSH
29887: LD_VAR 0 5
29891: PPUSH
29892: LD_VAR 0 6
29896: PPUSH
29897: LD_INT 1
29899: PPUSH
29900: CALL_OW 48
// end ;
29904: LD_VAR 0 7
29908: RET
// export hInvincible ; every 1 do
29909: GO 29911
29911: DISABLE
// hInvincible := [ ] ;
29912: LD_ADDR_EXP 104
29916: PUSH
29917: EMPTY
29918: ST_TO_ADDR
29919: END
// every 10 do var i ;
29920: GO 29922
29922: DISABLE
29923: LD_INT 0
29925: PPUSH
// begin enable ;
29926: ENABLE
// if not hInvincible then
29927: LD_EXP 104
29931: NOT
29932: IFFALSE 29936
// exit ;
29934: GO 29980
// for i in hInvincible do
29936: LD_ADDR_VAR 0 1
29940: PUSH
29941: LD_EXP 104
29945: PUSH
29946: FOR_IN
29947: IFFALSE 29978
// if GetLives ( i ) < 1000 then
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 256
29958: PUSH
29959: LD_INT 1000
29961: LESS
29962: IFFALSE 29976
// SetLives ( i , 1000 ) ;
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_INT 1000
29971: PPUSH
29972: CALL_OW 234
29976: GO 29946
29978: POP
29979: POP
// end ;
29980: PPOPN 1
29982: END
// export function hHackInvincible ; var i ; begin
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29987: LD_ADDR_VAR 0 2
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 21
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 21
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: PPUSH
30020: CALL_OW 69
30024: PUSH
30025: FOR_IN
30026: IFFALSE 30087
// if IsSelected ( i ) then
30028: LD_VAR 0 2
30032: PPUSH
30033: CALL_OW 306
30037: IFFALSE 30085
// begin if i in hInvincible then
30039: LD_VAR 0 2
30043: PUSH
30044: LD_EXP 104
30048: IN
30049: IFFALSE 30069
// hInvincible := hInvincible diff i else
30051: LD_ADDR_EXP 104
30055: PUSH
30056: LD_EXP 104
30060: PUSH
30061: LD_VAR 0 2
30065: DIFF
30066: ST_TO_ADDR
30067: GO 30085
// hInvincible := hInvincible union i ;
30069: LD_ADDR_EXP 104
30073: PUSH
30074: LD_EXP 104
30078: PUSH
30079: LD_VAR 0 2
30083: UNION
30084: ST_TO_ADDR
// end ;
30085: GO 30025
30087: POP
30088: POP
// end ;
30089: LD_VAR 0 1
30093: RET
// export function hHackInvisible ; var i , j ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
30098: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30099: LD_ADDR_VAR 0 2
30103: PUSH
30104: LD_INT 21
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: PUSH
30119: FOR_IN
30120: IFFALSE 30144
// if IsSelected ( i ) then
30122: LD_VAR 0 2
30126: PPUSH
30127: CALL_OW 306
30131: IFFALSE 30142
// ComForceInvisible ( i ) ;
30133: LD_VAR 0 2
30137: PPUSH
30138: CALL_OW 496
30142: GO 30119
30144: POP
30145: POP
// end ;
30146: LD_VAR 0 1
30150: RET
// export function hHackChangeYourSide ; begin
30151: LD_INT 0
30153: PPUSH
// if your_side = 8 then
30154: LD_OWVAR 2
30158: PUSH
30159: LD_INT 8
30161: EQUAL
30162: IFFALSE 30174
// your_side := 0 else
30164: LD_ADDR_OWVAR 2
30168: PUSH
30169: LD_INT 0
30171: ST_TO_ADDR
30172: GO 30188
// your_side := your_side + 1 ;
30174: LD_ADDR_OWVAR 2
30178: PUSH
30179: LD_OWVAR 2
30183: PUSH
30184: LD_INT 1
30186: PLUS
30187: ST_TO_ADDR
// end ;
30188: LD_VAR 0 1
30192: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30193: LD_INT 0
30195: PPUSH
30196: PPUSH
30197: PPUSH
// for i in all_units do
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_OWVAR 3
30207: PUSH
30208: FOR_IN
30209: IFFALSE 30287
// if IsSelected ( i ) then
30211: LD_VAR 0 2
30215: PPUSH
30216: CALL_OW 306
30220: IFFALSE 30285
// begin j := GetSide ( i ) ;
30222: LD_ADDR_VAR 0 3
30226: PUSH
30227: LD_VAR 0 2
30231: PPUSH
30232: CALL_OW 255
30236: ST_TO_ADDR
// if j = 8 then
30237: LD_VAR 0 3
30241: PUSH
30242: LD_INT 8
30244: EQUAL
30245: IFFALSE 30257
// j := 0 else
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 0
30254: ST_TO_ADDR
30255: GO 30271
// j := j + 1 ;
30257: LD_ADDR_VAR 0 3
30261: PUSH
30262: LD_VAR 0 3
30266: PUSH
30267: LD_INT 1
30269: PLUS
30270: ST_TO_ADDR
// SetSide ( i , j ) ;
30271: LD_VAR 0 2
30275: PPUSH
30276: LD_VAR 0 3
30280: PPUSH
30281: CALL_OW 235
// end ;
30285: GO 30208
30287: POP
30288: POP
// end ;
30289: LD_VAR 0 1
30293: RET
// export function hHackFog ; begin
30294: LD_INT 0
30296: PPUSH
// FogOff ( true ) ;
30297: LD_INT 1
30299: PPUSH
30300: CALL_OW 344
// end ;
30304: LD_VAR 0 1
30308: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30309: LD_INT 0
30311: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_INT 1
30329: PPUSH
30330: LD_INT 1
30332: PPUSH
30333: CALL_OW 483
// CenterOnXY ( x , y ) ;
30337: LD_VAR 0 2
30341: PPUSH
30342: LD_VAR 0 3
30346: PPUSH
30347: CALL_OW 84
// end ;
30351: LD_VAR 0 4
30355: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30356: LD_INT 0
30358: PPUSH
30359: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30360: LD_VAR 0 1
30364: NOT
30365: IFTRUE 30384
30367: PUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_VAR 0 3
30377: PPUSH
30378: CALL_OW 488
30382: NOT
30383: OR
30384: IFTRUE 30419
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 266
30396: PUSH
30397: LD_INT 3
30399: NONEQUAL
30400: IFFALSE 30418
30402: PUSH
30403: LD_VAR 0 1
30407: PPUSH
30408: CALL_OW 247
30412: PUSH
30413: LD_INT 1
30415: EQUAL
30416: NOT
30417: AND
30418: OR
30419: IFFALSE 30423
// exit ;
30421: GO 30705
// if GetType ( factory ) = unit_human then
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 247
30432: PUSH
30433: LD_INT 1
30435: EQUAL
30436: IFFALSE 30453
// factory := IsInUnit ( factory ) ;
30438: LD_ADDR_VAR 0 1
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 310
30452: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 266
30462: PUSH
30463: LD_INT 3
30465: NONEQUAL
30466: IFFALSE 30470
// exit ;
30468: GO 30705
// for i := 1 to Count ( factoryWaypoints ) do
30470: LD_ADDR_VAR 0 5
30474: PUSH
30475: DOUBLE
30476: LD_INT 1
30478: DEC
30479: ST_TO_ADDR
30480: LD_EXP 105
30484: PPUSH
30485: CALL 34035 0 1
30489: PUSH
30490: FOR_TO
30491: IFFALSE 30653
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30493: LD_VAR 0 2
30497: PPUSH
30498: LD_VAR 0 3
30502: PPUSH
30503: CALL_OW 428
30507: PUSH
30508: LD_EXP 105
30512: PUSH
30513: LD_VAR 0 5
30517: ARRAY
30518: PUSH
30519: LD_INT 2
30521: ARRAY
30522: EQUAL
30523: IFFALSE 30555
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30525: LD_ADDR_EXP 105
30529: PUSH
30530: LD_EXP 105
30534: PPUSH
30535: LD_VAR 0 5
30539: PPUSH
30540: CALL_OW 3
30544: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30545: CALL 30710 0 0
// exit ;
30549: POP
30550: POP
30551: GO 30705
// end else
30553: GO 30651
// if factory = factoryWaypoints [ i ] [ 2 ] then
30555: LD_VAR 0 1
30559: PUSH
30560: LD_EXP 105
30564: PUSH
30565: LD_VAR 0 5
30569: ARRAY
30570: PUSH
30571: LD_INT 2
30573: ARRAY
30574: EQUAL
30575: IFFALSE 30651
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30577: LD_ADDR_EXP 105
30581: PUSH
30582: LD_EXP 105
30586: PPUSH
30587: LD_VAR 0 5
30591: PPUSH
30592: CALL_OW 3
30596: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30597: LD_ADDR_EXP 105
30601: PUSH
30602: LD_EXP 105
30606: PPUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 255
30616: PUSH
30617: LD_VAR 0 1
30621: PUSH
30622: LD_VAR 0 2
30626: PUSH
30627: LD_VAR 0 3
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: PPUSH
30638: CALL 69967 0 2
30642: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30643: CALL 30710 0 0
// exit ;
30647: POP
30648: POP
30649: GO 30705
// end ; end ;
30651: GO 30490
30653: POP
30654: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30655: LD_ADDR_EXP 105
30659: PUSH
30660: LD_EXP 105
30664: PPUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 255
30674: PUSH
30675: LD_VAR 0 1
30679: PUSH
30680: LD_VAR 0 2
30684: PUSH
30685: LD_VAR 0 3
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: PPUSH
30696: CALL 69967 0 2
30700: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30701: CALL 30710 0 0
// end ;
30705: LD_VAR 0 4
30709: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30715: LD_STRING resetFactoryWaypoint();
30717: PPUSH
30718: CALL_OW 559
// if factoryWaypoints then
30722: LD_EXP 105
30726: IFFALSE 30847
// begin list := factoryWaypoints ;
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_EXP 105
30737: ST_TO_ADDR
// for i := 1 to list do
30738: LD_ADDR_VAR 0 2
30742: PUSH
30743: DOUBLE
30744: LD_INT 1
30746: DEC
30747: ST_TO_ADDR
30748: LD_VAR 0 3
30752: PUSH
30753: FOR_TO
30754: IFFALSE 30845
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30756: LD_STRING setFactoryWaypointXY(
30758: PUSH
30759: LD_VAR 0 3
30763: PUSH
30764: LD_VAR 0 2
30768: ARRAY
30769: PUSH
30770: LD_INT 1
30772: ARRAY
30773: STR
30774: PUSH
30775: LD_STRING ,
30777: STR
30778: PUSH
30779: LD_VAR 0 3
30783: PUSH
30784: LD_VAR 0 2
30788: ARRAY
30789: PUSH
30790: LD_INT 2
30792: ARRAY
30793: STR
30794: PUSH
30795: LD_STRING ,
30797: STR
30798: PUSH
30799: LD_VAR 0 3
30803: PUSH
30804: LD_VAR 0 2
30808: ARRAY
30809: PUSH
30810: LD_INT 3
30812: ARRAY
30813: STR
30814: PUSH
30815: LD_STRING ,
30817: STR
30818: PUSH
30819: LD_VAR 0 3
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: PUSH
30830: LD_INT 4
30832: ARRAY
30833: STR
30834: PUSH
30835: LD_STRING )
30837: STR
30838: PPUSH
30839: CALL_OW 559
30843: GO 30753
30845: POP
30846: POP
// end ; end ;
30847: LD_VAR 0 1
30851: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30852: LD_INT 0
30854: PPUSH
// if HexInfo ( x , y ) = warehouse then
30855: LD_VAR 0 2
30859: PPUSH
30860: LD_VAR 0 3
30864: PPUSH
30865: CALL_OW 428
30869: PUSH
30870: LD_VAR 0 1
30874: EQUAL
30875: IFFALSE 30902
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30877: LD_ADDR_EXP 107
30881: PUSH
30882: LD_EXP 107
30886: PPUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: LD_INT 0
30894: PPUSH
30895: CALL_OW 1
30899: ST_TO_ADDR
30900: GO 30953
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30902: LD_ADDR_EXP 107
30906: PUSH
30907: LD_EXP 107
30911: PPUSH
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_VAR 0 1
30921: PPUSH
30922: CALL_OW 255
30926: PUSH
30927: LD_VAR 0 1
30931: PUSH
30932: LD_VAR 0 2
30936: PUSH
30937: LD_VAR 0 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 1
30952: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30953: CALL 30962 0 0
// end ;
30957: LD_VAR 0 4
30961: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30962: LD_INT 0
30964: PPUSH
30965: PPUSH
30966: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30967: LD_STRING resetWarehouseGatheringPoints();
30969: PPUSH
30970: CALL_OW 559
// if warehouseGatheringPoints then
30974: LD_EXP 107
30978: IFFALSE 31104
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30980: LD_ADDR_VAR 0 3
30984: PUSH
30985: LD_EXP 107
30989: PPUSH
30990: CALL 73901 0 1
30994: ST_TO_ADDR
// for i := 1 to list do
30995: LD_ADDR_VAR 0 2
30999: PUSH
31000: DOUBLE
31001: LD_INT 1
31003: DEC
31004: ST_TO_ADDR
31005: LD_VAR 0 3
31009: PUSH
31010: FOR_TO
31011: IFFALSE 31102
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31013: LD_STRING setWarehouseGatheringPointXY(
31015: PUSH
31016: LD_VAR 0 3
31020: PUSH
31021: LD_VAR 0 2
31025: ARRAY
31026: PUSH
31027: LD_INT 1
31029: ARRAY
31030: STR
31031: PUSH
31032: LD_STRING ,
31034: STR
31035: PUSH
31036: LD_VAR 0 3
31040: PUSH
31041: LD_VAR 0 2
31045: ARRAY
31046: PUSH
31047: LD_INT 2
31049: ARRAY
31050: STR
31051: PUSH
31052: LD_STRING ,
31054: STR
31055: PUSH
31056: LD_VAR 0 3
31060: PUSH
31061: LD_VAR 0 2
31065: ARRAY
31066: PUSH
31067: LD_INT 3
31069: ARRAY
31070: STR
31071: PUSH
31072: LD_STRING ,
31074: STR
31075: PUSH
31076: LD_VAR 0 3
31080: PUSH
31081: LD_VAR 0 2
31085: ARRAY
31086: PUSH
31087: LD_INT 4
31089: ARRAY
31090: STR
31091: PUSH
31092: LD_STRING )
31094: STR
31095: PPUSH
31096: CALL_OW 559
31100: GO 31010
31102: POP
31103: POP
// end ; end ;
31104: LD_VAR 0 1
31108: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31109: LD_EXP 107
31113: IFFALSE 31808
31115: GO 31117
31117: DISABLE
31118: LD_INT 0
31120: PPUSH
31121: PPUSH
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
31127: PPUSH
31128: PPUSH
// begin enable ;
31129: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_EXP 107
31139: PPUSH
31140: CALL 73901 0 1
31144: ST_TO_ADDR
// if not list then
31145: LD_VAR 0 3
31149: NOT
31150: IFFALSE 31154
// exit ;
31152: GO 31808
// for i := 1 to list do
31154: LD_ADDR_VAR 0 1
31158: PUSH
31159: DOUBLE
31160: LD_INT 1
31162: DEC
31163: ST_TO_ADDR
31164: LD_VAR 0 3
31168: PUSH
31169: FOR_TO
31170: IFFALSE 31806
// begin depot := list [ i ] [ 2 ] ;
31172: LD_ADDR_VAR 0 8
31176: PUSH
31177: LD_VAR 0 3
31181: PUSH
31182: LD_VAR 0 1
31186: ARRAY
31187: PUSH
31188: LD_INT 2
31190: ARRAY
31191: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31192: LD_ADDR_VAR 0 5
31196: PUSH
31197: LD_VAR 0 3
31201: PUSH
31202: LD_VAR 0 1
31206: ARRAY
31207: PUSH
31208: LD_INT 1
31210: ARRAY
31211: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31212: LD_VAR 0 8
31216: PPUSH
31217: CALL_OW 301
31221: IFTRUE 31240
31223: PUSH
31224: LD_VAR 0 5
31228: PUSH
31229: LD_VAR 0 8
31233: PPUSH
31234: CALL_OW 255
31238: NONEQUAL
31239: OR
31240: IFFALSE 31269
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31242: LD_ADDR_EXP 107
31246: PUSH
31247: LD_EXP 107
31251: PPUSH
31252: LD_VAR 0 8
31256: PPUSH
31257: LD_INT 0
31259: PPUSH
31260: CALL_OW 1
31264: ST_TO_ADDR
// exit ;
31265: POP
31266: POP
31267: GO 31808
// end ; x := list [ i ] [ 3 ] ;
31269: LD_ADDR_VAR 0 6
31273: PUSH
31274: LD_VAR 0 3
31278: PUSH
31279: LD_VAR 0 1
31283: ARRAY
31284: PUSH
31285: LD_INT 3
31287: ARRAY
31288: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31289: LD_ADDR_VAR 0 7
31293: PUSH
31294: LD_VAR 0 3
31298: PUSH
31299: LD_VAR 0 1
31303: ARRAY
31304: PUSH
31305: LD_INT 4
31307: ARRAY
31308: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31309: LD_ADDR_VAR 0 9
31313: PUSH
31314: LD_VAR 0 6
31318: PPUSH
31319: LD_VAR 0 7
31323: PPUSH
31324: LD_INT 16
31326: PPUSH
31327: CALL 72475 0 3
31331: ST_TO_ADDR
// if not cratesNearbyPoint then
31332: LD_VAR 0 9
31336: NOT
31337: IFFALSE 31343
// exit ;
31339: POP
31340: POP
31341: GO 31808
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_VAR 0 5
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: LD_INT 60
31365: PUSH
31366: EMPTY
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 91
31375: PUSH
31376: LD_VAR 0 8
31380: PUSH
31381: LD_INT 6
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 25
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 25
31404: PUSH
31405: LD_INT 16
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: PPUSH
31423: CALL_OW 69
31427: PUSH
31428: LD_VAR 0 8
31432: PPUSH
31433: CALL_OW 313
31437: PPUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 60
31443: PUSH
31444: EMPTY
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 25
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 25
31466: PUSH
31467: LD_INT 16
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PPUSH
31483: CALL_OW 72
31487: UNION
31488: ST_TO_ADDR
// if tmp then
31489: LD_VAR 0 4
31493: IFFALSE 31573
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31495: LD_ADDR_VAR 0 4
31499: PUSH
31500: LD_VAR 0 4
31504: PPUSH
31505: LD_INT 3
31507: PPUSH
31508: CALL 70282 0 2
31512: ST_TO_ADDR
// for j in tmp do
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_VAR 0 4
31522: PUSH
31523: FOR_IN
31524: IFFALSE 31567
// begin if IsInUnit ( j ) then
31526: LD_VAR 0 2
31530: PPUSH
31531: CALL_OW 310
31535: IFFALSE 31546
// ComExit ( j ) ;
31537: LD_VAR 0 2
31541: PPUSH
31542: CALL 70365 0 1
// AddComCollect ( j , x , y ) ;
31546: LD_VAR 0 2
31550: PPUSH
31551: LD_VAR 0 6
31555: PPUSH
31556: LD_VAR 0 7
31560: PPUSH
31561: CALL_OW 177
// end ;
31565: GO 31523
31567: POP
31568: POP
// exit ;
31569: POP
31570: POP
31571: GO 31808
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31573: LD_ADDR_VAR 0 4
31577: PUSH
31578: LD_INT 22
31580: PUSH
31581: LD_VAR 0 5
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 91
31592: PUSH
31593: LD_VAR 0 8
31597: PUSH
31598: LD_INT 8
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 34
31611: PUSH
31612: LD_INT 12
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 34
31621: PUSH
31622: LD_INT 51
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 34
31631: PUSH
31632: LD_INT 32
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 34
31641: PUSH
31642: LD_INT 89
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 69
31665: ST_TO_ADDR
// if tmp then
31666: LD_VAR 0 4
31670: IFFALSE 31804
// begin for j in tmp do
31672: LD_ADDR_VAR 0 2
31676: PUSH
31677: LD_VAR 0 4
31681: PUSH
31682: FOR_IN
31683: IFFALSE 31802
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31685: LD_VAR 0 2
31689: PPUSH
31690: CALL_OW 262
31694: PUSH
31695: LD_INT 3
31697: EQUAL
31698: IFTRUE 31715
31700: PUSH
31701: LD_VAR 0 2
31705: PPUSH
31706: CALL_OW 261
31710: PUSH
31711: LD_INT 20
31713: GREATER
31714: OR
31715: IFFALSE 31729
31717: PUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 314
31727: NOT
31728: AND
31729: IFFALSE 31759
31731: PUSH
31732: LD_VAR 0 2
31736: PPUSH
31737: CALL_OW 263
31741: PUSH
31742: LD_INT 1
31744: NONEQUAL
31745: IFTRUE 31758
31747: PUSH
31748: LD_VAR 0 2
31752: PPUSH
31753: CALL_OW 311
31757: OR
31758: AND
31759: IFFALSE 31800
// begin ComCollect ( j , x , y ) ;
31761: LD_VAR 0 2
31765: PPUSH
31766: LD_VAR 0 6
31770: PPUSH
31771: LD_VAR 0 7
31775: PPUSH
31776: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31780: LD_VAR 0 2
31784: PPUSH
31785: LD_VAR 0 8
31789: PPUSH
31790: CALL_OW 172
// exit ;
31794: POP
31795: POP
31796: POP
31797: POP
31798: GO 31808
// end ;
31800: GO 31682
31802: POP
31803: POP
// end ; end ;
31804: GO 31169
31806: POP
31807: POP
// end ; end_of_file end_of_file
31808: PPOPN 9
31810: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31811: LD_INT 0
31813: PPUSH
31814: PPUSH
// if exist_mode then
31815: LD_VAR 0 2
31819: IFFALSE 31865
// begin unit := CreateCharacter ( prefix & ident ) ;
31821: LD_ADDR_VAR 0 5
31825: PUSH
31826: LD_VAR 0 3
31830: PUSH
31831: LD_VAR 0 1
31835: STR
31836: PPUSH
31837: CALL_OW 34
31841: ST_TO_ADDR
// if unit then
31842: LD_VAR 0 5
31846: IFFALSE 31863
// DeleteCharacters ( prefix & ident ) ;
31848: LD_VAR 0 3
31852: PUSH
31853: LD_VAR 0 1
31857: STR
31858: PPUSH
31859: CALL_OW 40
// end else
31863: GO 31880
// unit := NewCharacter ( ident ) ;
31865: LD_ADDR_VAR 0 5
31869: PUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL_OW 25
31879: ST_TO_ADDR
// result := unit ;
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: LD_VAR 0 5
31889: ST_TO_ADDR
// end ;
31890: LD_VAR 0 4
31894: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31895: LD_INT 0
31897: PPUSH
31898: PPUSH
// if exist_mode then
31899: LD_VAR 0 2
31903: IFFALSE 31928
// unit := CreateCharacter ( prefix & ident ) else
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_VAR 0 3
31914: PUSH
31915: LD_VAR 0 1
31919: STR
31920: PPUSH
31921: CALL_OW 34
31925: ST_TO_ADDR
31926: GO 31943
// unit := NewCharacter ( ident ) ;
31928: LD_ADDR_VAR 0 5
31932: PUSH
31933: LD_VAR 0 1
31937: PPUSH
31938: CALL_OW 25
31942: ST_TO_ADDR
// result := unit ;
31943: LD_ADDR_VAR 0 4
31947: PUSH
31948: LD_VAR 0 5
31952: ST_TO_ADDR
// end ;
31953: LD_VAR 0 4
31957: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
// if not side or not nation then
31962: LD_VAR 0 1
31966: NOT
31967: IFTRUE 31976
31969: PUSH
31970: LD_VAR 0 2
31974: NOT
31975: OR
31976: IFFALSE 31980
// exit ;
31978: GO 32774
// case nation of nation_american :
31980: LD_VAR 0 2
31984: PUSH
31985: LD_INT 1
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32215
31993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31994: LD_ADDR_VAR 0 4
31998: PUSH
31999: LD_INT 35
32001: PUSH
32002: LD_INT 45
32004: PUSH
32005: LD_INT 46
32007: PUSH
32008: LD_INT 47
32010: PUSH
32011: LD_INT 82
32013: PUSH
32014: LD_INT 83
32016: PUSH
32017: LD_INT 84
32019: PUSH
32020: LD_INT 85
32022: PUSH
32023: LD_INT 86
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 6
32034: PUSH
32035: LD_INT 15
32037: PUSH
32038: LD_INT 16
32040: PUSH
32041: LD_INT 7
32043: PUSH
32044: LD_INT 12
32046: PUSH
32047: LD_INT 13
32049: PUSH
32050: LD_INT 10
32052: PUSH
32053: LD_INT 14
32055: PUSH
32056: LD_INT 20
32058: PUSH
32059: LD_INT 21
32061: PUSH
32062: LD_INT 22
32064: PUSH
32065: LD_INT 25
32067: PUSH
32068: LD_INT 32
32070: PUSH
32071: LD_INT 27
32073: PUSH
32074: LD_INT 36
32076: PUSH
32077: LD_INT 69
32079: PUSH
32080: LD_INT 39
32082: PUSH
32083: LD_INT 34
32085: PUSH
32086: LD_INT 40
32088: PUSH
32089: LD_INT 48
32091: PUSH
32092: LD_INT 49
32094: PUSH
32095: LD_INT 50
32097: PUSH
32098: LD_INT 51
32100: PUSH
32101: LD_INT 52
32103: PUSH
32104: LD_INT 53
32106: PUSH
32107: LD_INT 54
32109: PUSH
32110: LD_INT 55
32112: PUSH
32113: LD_INT 56
32115: PUSH
32116: LD_INT 57
32118: PUSH
32119: LD_INT 58
32121: PUSH
32122: LD_INT 59
32124: PUSH
32125: LD_INT 60
32127: PUSH
32128: LD_INT 61
32130: PUSH
32131: LD_INT 62
32133: PUSH
32134: LD_INT 80
32136: PUSH
32137: LD_INT 82
32139: PUSH
32140: LD_INT 83
32142: PUSH
32143: LD_INT 84
32145: PUSH
32146: LD_INT 85
32148: PUSH
32149: LD_INT 86
32151: PUSH
32152: LD_INT 90
32154: PUSH
32155: LD_INT 93
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
32213: GO 32696
32215: LD_INT 2
32217: DOUBLE
32218: EQUAL
32219: IFTRUE 32223
32221: GO 32457
32223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_INT 35
32231: PUSH
32232: LD_INT 45
32234: PUSH
32235: LD_INT 46
32237: PUSH
32238: LD_INT 47
32240: PUSH
32241: LD_INT 82
32243: PUSH
32244: LD_INT 83
32246: PUSH
32247: LD_INT 84
32249: PUSH
32250: LD_INT 85
32252: PUSH
32253: LD_INT 87
32255: PUSH
32256: LD_INT 70
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 11
32264: PUSH
32265: LD_INT 3
32267: PUSH
32268: LD_INT 4
32270: PUSH
32271: LD_INT 5
32273: PUSH
32274: LD_INT 6
32276: PUSH
32277: LD_INT 15
32279: PUSH
32280: LD_INT 18
32282: PUSH
32283: LD_INT 7
32285: PUSH
32286: LD_INT 17
32288: PUSH
32289: LD_INT 8
32291: PUSH
32292: LD_INT 20
32294: PUSH
32295: LD_INT 21
32297: PUSH
32298: LD_INT 22
32300: PUSH
32301: LD_INT 72
32303: PUSH
32304: LD_INT 26
32306: PUSH
32307: LD_INT 69
32309: PUSH
32310: LD_INT 39
32312: PUSH
32313: LD_INT 40
32315: PUSH
32316: LD_INT 41
32318: PUSH
32319: LD_INT 42
32321: PUSH
32322: LD_INT 43
32324: PUSH
32325: LD_INT 48
32327: PUSH
32328: LD_INT 49
32330: PUSH
32331: LD_INT 50
32333: PUSH
32334: LD_INT 51
32336: PUSH
32337: LD_INT 52
32339: PUSH
32340: LD_INT 53
32342: PUSH
32343: LD_INT 54
32345: PUSH
32346: LD_INT 55
32348: PUSH
32349: LD_INT 56
32351: PUSH
32352: LD_INT 60
32354: PUSH
32355: LD_INT 61
32357: PUSH
32358: LD_INT 62
32360: PUSH
32361: LD_INT 66
32363: PUSH
32364: LD_INT 67
32366: PUSH
32367: LD_INT 68
32369: PUSH
32370: LD_INT 81
32372: PUSH
32373: LD_INT 82
32375: PUSH
32376: LD_INT 83
32378: PUSH
32379: LD_INT 84
32381: PUSH
32382: LD_INT 85
32384: PUSH
32385: LD_INT 87
32387: PUSH
32388: LD_INT 88
32390: PUSH
32391: LD_INT 92
32393: PUSH
32394: LD_INT 94
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: ST_TO_ADDR
32455: GO 32696
32457: LD_INT 3
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32695
32465: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32466: LD_ADDR_VAR 0 4
32470: PUSH
32471: LD_INT 46
32473: PUSH
32474: LD_INT 47
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 82
32485: PUSH
32486: LD_INT 83
32488: PUSH
32489: LD_INT 84
32491: PUSH
32492: LD_INT 85
32494: PUSH
32495: LD_INT 86
32497: PUSH
32498: LD_INT 11
32500: PUSH
32501: LD_INT 9
32503: PUSH
32504: LD_INT 20
32506: PUSH
32507: LD_INT 19
32509: PUSH
32510: LD_INT 21
32512: PUSH
32513: LD_INT 24
32515: PUSH
32516: LD_INT 22
32518: PUSH
32519: LD_INT 25
32521: PUSH
32522: LD_INT 28
32524: PUSH
32525: LD_INT 29
32527: PUSH
32528: LD_INT 30
32530: PUSH
32531: LD_INT 31
32533: PUSH
32534: LD_INT 37
32536: PUSH
32537: LD_INT 38
32539: PUSH
32540: LD_INT 32
32542: PUSH
32543: LD_INT 27
32545: PUSH
32546: LD_INT 33
32548: PUSH
32549: LD_INT 69
32551: PUSH
32552: LD_INT 39
32554: PUSH
32555: LD_INT 34
32557: PUSH
32558: LD_INT 40
32560: PUSH
32561: LD_INT 71
32563: PUSH
32564: LD_INT 23
32566: PUSH
32567: LD_INT 44
32569: PUSH
32570: LD_INT 48
32572: PUSH
32573: LD_INT 49
32575: PUSH
32576: LD_INT 50
32578: PUSH
32579: LD_INT 51
32581: PUSH
32582: LD_INT 52
32584: PUSH
32585: LD_INT 53
32587: PUSH
32588: LD_INT 54
32590: PUSH
32591: LD_INT 55
32593: PUSH
32594: LD_INT 56
32596: PUSH
32597: LD_INT 57
32599: PUSH
32600: LD_INT 58
32602: PUSH
32603: LD_INT 59
32605: PUSH
32606: LD_INT 63
32608: PUSH
32609: LD_INT 64
32611: PUSH
32612: LD_INT 65
32614: PUSH
32615: LD_INT 82
32617: PUSH
32618: LD_INT 83
32620: PUSH
32621: LD_INT 84
32623: PUSH
32624: LD_INT 85
32626: PUSH
32627: LD_INT 86
32629: PUSH
32630: LD_INT 89
32632: PUSH
32633: LD_INT 91
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
32693: GO 32696
32695: POP
// if state > - 1 and state < 3 then
32696: LD_VAR 0 3
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: GREATER
32705: IFFALSE 32717
32707: PUSH
32708: LD_VAR 0 3
32712: PUSH
32713: LD_INT 3
32715: LESS
32716: AND
32717: IFFALSE 32774
// for i in result do
32719: LD_ADDR_VAR 0 5
32723: PUSH
32724: LD_VAR 0 4
32728: PUSH
32729: FOR_IN
32730: IFFALSE 32772
// if GetTech ( i , side ) <> state then
32732: LD_VAR 0 5
32736: PPUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 321
32746: PUSH
32747: LD_VAR 0 3
32751: NONEQUAL
32752: IFFALSE 32770
// result := result diff i ;
32754: LD_ADDR_VAR 0 4
32758: PUSH
32759: LD_VAR 0 4
32763: PUSH
32764: LD_VAR 0 5
32768: DIFF
32769: ST_TO_ADDR
32770: GO 32729
32772: POP
32773: POP
// end ;
32774: LD_VAR 0 4
32778: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32779: LD_INT 0
32781: PPUSH
32782: PPUSH
32783: PPUSH
// result := true ;
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_INT 1
32791: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32792: LD_ADDR_VAR 0 5
32796: PUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: CALL_OW 480
32806: ST_TO_ADDR
// if not tmp then
32807: LD_VAR 0 5
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 32865
// for i in tmp do
32816: LD_ADDR_VAR 0 4
32820: PUSH
32821: LD_VAR 0 5
32825: PUSH
32826: FOR_IN
32827: IFFALSE 32863
// if GetTech ( i , side ) <> state_researched then
32829: LD_VAR 0 4
32833: PPUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: CALL_OW 321
32843: PUSH
32844: LD_INT 2
32846: NONEQUAL
32847: IFFALSE 32861
// begin result := false ;
32849: LD_ADDR_VAR 0 3
32853: PUSH
32854: LD_INT 0
32856: ST_TO_ADDR
// exit ;
32857: POP
32858: POP
32859: GO 32865
// end ;
32861: GO 32826
32863: POP
32864: POP
// end ;
32865: LD_VAR 0 3
32869: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
32876: PPUSH
32877: PPUSH
32878: PPUSH
32879: PPUSH
32880: PPUSH
32881: PPUSH
32882: PPUSH
32883: PPUSH
32884: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32885: LD_VAR 0 1
32889: NOT
32890: IFTRUE 32907
32892: PUSH
32893: LD_VAR 0 1
32897: PPUSH
32898: CALL_OW 257
32902: PUSH
32903: LD_INT 9
32905: NONEQUAL
32906: OR
32907: IFFALSE 32911
// exit ;
32909: GO 33490
// side := GetSide ( unit ) ;
32911: LD_ADDR_VAR 0 9
32915: PUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: CALL_OW 255
32925: ST_TO_ADDR
// tech_space := tech_spacanom ;
32926: LD_ADDR_VAR 0 12
32930: PUSH
32931: LD_INT 29
32933: ST_TO_ADDR
// tech_time := tech_taurad ;
32934: LD_ADDR_VAR 0 13
32938: PUSH
32939: LD_INT 28
32941: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32942: LD_ADDR_VAR 0 11
32946: PUSH
32947: LD_VAR 0 1
32951: PPUSH
32952: CALL_OW 310
32956: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32957: LD_VAR 0 11
32961: PPUSH
32962: CALL_OW 247
32966: PUSH
32967: LD_INT 2
32969: EQUAL
32970: IFFALSE 32974
// exit ;
32972: GO 33490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32974: LD_ADDR_VAR 0 8
32978: PUSH
32979: LD_INT 81
32981: PUSH
32982: LD_VAR 0 9
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: LD_INT 21
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PPUSH
33012: CALL_OW 69
33016: ST_TO_ADDR
// if not tmp then
33017: LD_VAR 0 8
33021: NOT
33022: IFFALSE 33026
// exit ;
33024: GO 33490
// if in_unit then
33026: LD_VAR 0 11
33030: IFFALSE 33054
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33032: LD_ADDR_VAR 0 10
33036: PUSH
33037: LD_VAR 0 8
33041: PPUSH
33042: LD_VAR 0 11
33046: PPUSH
33047: CALL_OW 74
33051: ST_TO_ADDR
33052: GO 33074
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33054: LD_ADDR_VAR 0 10
33058: PUSH
33059: LD_VAR 0 8
33063: PPUSH
33064: LD_VAR 0 1
33068: PPUSH
33069: CALL_OW 74
33073: ST_TO_ADDR
// if not enemy then
33074: LD_VAR 0 10
33078: NOT
33079: IFFALSE 33083
// exit ;
33081: GO 33490
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33083: LD_VAR 0 11
33087: IFFALSE 33109
33089: PUSH
33090: LD_VAR 0 11
33094: PPUSH
33095: LD_VAR 0 10
33099: PPUSH
33100: CALL_OW 296
33104: PUSH
33105: LD_INT 13
33107: GREATER
33108: AND
33109: IFTRUE 33131
33111: PUSH
33112: LD_VAR 0 1
33116: PPUSH
33117: LD_VAR 0 10
33121: PPUSH
33122: CALL_OW 296
33126: PUSH
33127: LD_INT 12
33129: GREATER
33130: OR
33131: IFFALSE 33135
// exit ;
33133: GO 33490
// missile := [ 1 ] ;
33135: LD_ADDR_VAR 0 14
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33146: LD_VAR 0 9
33150: PPUSH
33151: LD_VAR 0 12
33155: PPUSH
33156: CALL_OW 325
33160: IFFALSE 33189
// missile := Replace ( missile , missile + 1 , 2 ) ;
33162: LD_ADDR_VAR 0 14
33166: PUSH
33167: LD_VAR 0 14
33171: PPUSH
33172: LD_VAR 0 14
33176: PUSH
33177: LD_INT 1
33179: PLUS
33180: PPUSH
33181: LD_INT 2
33183: PPUSH
33184: CALL_OW 1
33188: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33189: LD_VAR 0 9
33193: PPUSH
33194: LD_VAR 0 13
33198: PPUSH
33199: CALL_OW 325
33203: IFFALSE 33227
33205: PUSH
33206: LD_VAR 0 10
33210: PPUSH
33211: CALL_OW 255
33215: PPUSH
33216: LD_VAR 0 13
33220: PPUSH
33221: CALL_OW 325
33225: NOT
33226: AND
33227: IFFALSE 33256
// missile := Replace ( missile , missile + 1 , 3 ) ;
33229: LD_ADDR_VAR 0 14
33233: PUSH
33234: LD_VAR 0 14
33238: PPUSH
33239: LD_VAR 0 14
33243: PUSH
33244: LD_INT 1
33246: PLUS
33247: PPUSH
33248: LD_INT 3
33250: PPUSH
33251: CALL_OW 1
33255: ST_TO_ADDR
// if missile < 2 then
33256: LD_VAR 0 14
33260: PUSH
33261: LD_INT 2
33263: LESS
33264: IFFALSE 33268
// exit ;
33266: GO 33490
// x := GetX ( enemy ) ;
33268: LD_ADDR_VAR 0 4
33272: PUSH
33273: LD_VAR 0 10
33277: PPUSH
33278: CALL_OW 250
33282: ST_TO_ADDR
// y := GetY ( enemy ) ;
33283: LD_ADDR_VAR 0 5
33287: PUSH
33288: LD_VAR 0 10
33292: PPUSH
33293: CALL_OW 251
33297: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33298: LD_ADDR_VAR 0 6
33302: PUSH
33303: LD_VAR 0 4
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PPUSH
33312: LD_INT 1
33314: PPUSH
33315: CALL_OW 12
33319: PLUS
33320: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33321: LD_ADDR_VAR 0 7
33325: PUSH
33326: LD_VAR 0 5
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PPUSH
33335: LD_INT 1
33337: PPUSH
33338: CALL_OW 12
33342: PLUS
33343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33344: LD_VAR 0 6
33348: PPUSH
33349: LD_VAR 0 7
33353: PPUSH
33354: CALL_OW 488
33358: NOT
33359: IFFALSE 33381
// begin _x := x ;
33361: LD_ADDR_VAR 0 6
33365: PUSH
33366: LD_VAR 0 4
33370: ST_TO_ADDR
// _y := y ;
33371: LD_ADDR_VAR 0 7
33375: PUSH
33376: LD_VAR 0 5
33380: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: LD_INT 1
33388: PPUSH
33389: LD_VAR 0 14
33393: PPUSH
33394: CALL_OW 12
33398: ST_TO_ADDR
// case i of 1 :
33399: LD_VAR 0 3
33403: PUSH
33404: LD_INT 1
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33429
33412: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33413: LD_VAR 0 1
33417: PPUSH
33418: LD_VAR 0 10
33422: PPUSH
33423: CALL_OW 115
33427: GO 33490
33429: LD_INT 2
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33459
33437: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 6
33447: PPUSH
33448: LD_VAR 0 7
33452: PPUSH
33453: CALL_OW 153
33457: GO 33490
33459: LD_INT 3
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33489
33467: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33468: LD_VAR 0 1
33472: PPUSH
33473: LD_VAR 0 6
33477: PPUSH
33478: LD_VAR 0 7
33482: PPUSH
33483: CALL_OW 154
33487: GO 33490
33489: POP
// end ;
33490: LD_VAR 0 2
33494: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33495: LD_INT 0
33497: PPUSH
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
// if not unit or not building then
33503: LD_VAR 0 1
33507: NOT
33508: IFTRUE 33517
33510: PUSH
33511: LD_VAR 0 2
33515: NOT
33516: OR
33517: IFFALSE 33521
// exit ;
33519: GO 33679
// x := GetX ( building ) ;
33521: LD_ADDR_VAR 0 5
33525: PUSH
33526: LD_VAR 0 2
33530: PPUSH
33531: CALL_OW 250
33535: ST_TO_ADDR
// y := GetY ( building ) ;
33536: LD_ADDR_VAR 0 6
33540: PUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: CALL_OW 251
33550: ST_TO_ADDR
// for i := 0 to 5 do
33551: LD_ADDR_VAR 0 4
33555: PUSH
33556: DOUBLE
33557: LD_INT 0
33559: DEC
33560: ST_TO_ADDR
33561: LD_INT 5
33563: PUSH
33564: FOR_TO
33565: IFFALSE 33677
// begin _x := ShiftX ( x , i , 3 ) ;
33567: LD_ADDR_VAR 0 7
33571: PUSH
33572: LD_VAR 0 5
33576: PPUSH
33577: LD_VAR 0 4
33581: PPUSH
33582: LD_INT 3
33584: PPUSH
33585: CALL_OW 272
33589: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33590: LD_ADDR_VAR 0 8
33594: PUSH
33595: LD_VAR 0 6
33599: PPUSH
33600: LD_VAR 0 4
33604: PPUSH
33605: LD_INT 3
33607: PPUSH
33608: CALL_OW 273
33612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33613: LD_VAR 0 7
33617: PPUSH
33618: LD_VAR 0 8
33622: PPUSH
33623: CALL_OW 488
33627: NOT
33628: IFFALSE 33632
// continue ;
33630: GO 33564
// if HexInfo ( _x , _y ) = 0 then
33632: LD_VAR 0 7
33636: PPUSH
33637: LD_VAR 0 8
33641: PPUSH
33642: CALL_OW 428
33646: PUSH
33647: LD_INT 0
33649: EQUAL
33650: IFFALSE 33675
// begin ComMoveXY ( unit , _x , _y ) ;
33652: LD_VAR 0 1
33656: PPUSH
33657: LD_VAR 0 7
33661: PPUSH
33662: LD_VAR 0 8
33666: PPUSH
33667: CALL_OW 111
// exit ;
33671: POP
33672: POP
33673: GO 33679
// end ; end ;
33675: GO 33564
33677: POP
33678: POP
// end ;
33679: LD_VAR 0 3
33683: RET
// export function ScanBase ( side , base_area ) ; begin
33684: LD_INT 0
33686: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33687: LD_ADDR_VAR 0 3
33691: PUSH
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_INT 81
33699: PUSH
33700: LD_VAR 0 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PPUSH
33709: CALL_OW 70
33713: ST_TO_ADDR
// end ;
33714: LD_VAR 0 3
33718: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
33724: PPUSH
// result := false ;
33725: LD_ADDR_VAR 0 2
33729: PUSH
33730: LD_INT 0
33732: ST_TO_ADDR
// side := GetSide ( unit ) ;
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL_OW 255
33747: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33748: LD_ADDR_VAR 0 4
33752: PUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 248
33762: ST_TO_ADDR
// case nat of 1 :
33763: LD_VAR 0 4
33767: PUSH
33768: LD_INT 1
33770: DOUBLE
33771: EQUAL
33772: IFTRUE 33776
33774: GO 33787
33776: POP
// tech := tech_lassight ; 2 :
33777: LD_ADDR_VAR 0 5
33781: PUSH
33782: LD_INT 12
33784: ST_TO_ADDR
33785: GO 33826
33787: LD_INT 2
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33806
33795: POP
// tech := tech_mortar ; 3 :
33796: LD_ADDR_VAR 0 5
33800: PUSH
33801: LD_INT 41
33803: ST_TO_ADDR
33804: GO 33826
33806: LD_INT 3
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33825
33814: POP
// tech := tech_bazooka ; end ;
33815: LD_ADDR_VAR 0 5
33819: PUSH
33820: LD_INT 44
33822: ST_TO_ADDR
33823: GO 33826
33825: POP
// if Researched ( side , tech ) then
33826: LD_VAR 0 3
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: CALL_OW 325
33840: IFFALSE 33867
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33842: LD_ADDR_VAR 0 2
33846: PUSH
33847: LD_INT 5
33849: PUSH
33850: LD_INT 8
33852: PUSH
33853: LD_INT 9
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: PUSH
33861: LD_VAR 0 4
33865: ARRAY
33866: ST_TO_ADDR
// end ;
33867: LD_VAR 0 2
33871: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
33876: PPUSH
// if not mines then
33877: LD_VAR 0 2
33881: NOT
33882: IFFALSE 33886
// exit ;
33884: GO 34030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33886: LD_ADDR_VAR 0 5
33890: PUSH
33891: LD_INT 81
33893: PUSH
33894: LD_VAR 0 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: LD_INT 21
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 69
33928: ST_TO_ADDR
// for i in mines do
33929: LD_ADDR_VAR 0 4
33933: PUSH
33934: LD_VAR 0 2
33938: PUSH
33939: FOR_IN
33940: IFFALSE 34028
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33942: LD_VAR 0 4
33946: PUSH
33947: LD_INT 1
33949: ARRAY
33950: PPUSH
33951: LD_VAR 0 4
33955: PUSH
33956: LD_INT 2
33958: ARRAY
33959: PPUSH
33960: CALL_OW 458
33964: NOT
33965: IFFALSE 33969
// continue ;
33967: GO 33939
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33969: LD_VAR 0 4
33973: PUSH
33974: LD_INT 1
33976: ARRAY
33977: PPUSH
33978: LD_VAR 0 4
33982: PUSH
33983: LD_INT 2
33985: ARRAY
33986: PPUSH
33987: CALL_OW 428
33991: PUSH
33992: LD_VAR 0 5
33996: IN
33997: IFFALSE 34026
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33999: LD_VAR 0 4
34003: PUSH
34004: LD_INT 1
34006: ARRAY
34007: PPUSH
34008: LD_VAR 0 4
34012: PUSH
34013: LD_INT 2
34015: ARRAY
34016: PPUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 456
// end ;
34026: GO 33939
34028: POP
34029: POP
// end ;
34030: LD_VAR 0 3
34034: RET
// export function Count ( array ) ; begin
34035: LD_INT 0
34037: PPUSH
// result := array + 0 ;
34038: LD_ADDR_VAR 0 2
34042: PUSH
34043: LD_VAR 0 1
34047: PUSH
34048: LD_INT 0
34050: PLUS
34051: ST_TO_ADDR
// end ;
34052: LD_VAR 0 2
34056: RET
// export function IsEmpty ( building ) ; begin
34057: LD_INT 0
34059: PPUSH
// if not building then
34060: LD_VAR 0 1
34064: NOT
34065: IFFALSE 34069
// exit ;
34067: GO 34112
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34069: LD_ADDR_VAR 0 2
34073: PUSH
34074: LD_VAR 0 1
34078: PUSH
34079: LD_INT 22
34081: PUSH
34082: LD_VAR 0 1
34086: PPUSH
34087: CALL_OW 255
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 58
34098: PUSH
34099: EMPTY
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PPUSH
34106: CALL_OW 69
34110: IN
34111: ST_TO_ADDR
// end ;
34112: LD_VAR 0 2
34116: RET
// export function IsNotFull ( building ) ; var places ; begin
34117: LD_INT 0
34119: PPUSH
34120: PPUSH
// if not building then
34121: LD_VAR 0 1
34125: NOT
34126: IFFALSE 34130
// exit ;
34128: GO 34158
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34130: LD_ADDR_VAR 0 2
34134: PUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 62
34145: PUSH
34146: EMPTY
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PPUSH
34153: CALL_OW 72
34157: ST_TO_ADDR
// end ;
34158: LD_VAR 0 2
34162: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34163: LD_INT 0
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
// tmp := [ ] ;
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: EMPTY
34175: ST_TO_ADDR
// list := [ ] ;
34176: LD_ADDR_VAR 0 5
34180: PUSH
34181: EMPTY
34182: ST_TO_ADDR
// for i = 16 to 25 do
34183: LD_ADDR_VAR 0 4
34187: PUSH
34188: DOUBLE
34189: LD_INT 16
34191: DEC
34192: ST_TO_ADDR
34193: LD_INT 25
34195: PUSH
34196: FOR_TO
34197: IFFALSE 34270
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_VAR 0 3
34208: PUSH
34209: LD_INT 22
34211: PUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 255
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 91
34228: PUSH
34229: LD_VAR 0 1
34233: PUSH
34234: LD_INT 6
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 30
34244: PUSH
34245: LD_VAR 0 4
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: EMPTY
34260: LIST
34261: PPUSH
34262: CALL_OW 69
34266: ADD
34267: ST_TO_ADDR
34268: GO 34196
34270: POP
34271: POP
// for i = 1 to tmp do
34272: LD_ADDR_VAR 0 4
34276: PUSH
34277: DOUBLE
34278: LD_INT 1
34280: DEC
34281: ST_TO_ADDR
34282: LD_VAR 0 3
34286: PUSH
34287: FOR_TO
34288: IFFALSE 34376
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34290: LD_ADDR_VAR 0 5
34294: PUSH
34295: LD_VAR 0 5
34299: PUSH
34300: LD_VAR 0 3
34304: PUSH
34305: LD_VAR 0 4
34309: ARRAY
34310: PPUSH
34311: CALL_OW 266
34315: PUSH
34316: LD_VAR 0 3
34320: PUSH
34321: LD_VAR 0 4
34325: ARRAY
34326: PPUSH
34327: CALL_OW 250
34331: PUSH
34332: LD_VAR 0 3
34336: PUSH
34337: LD_VAR 0 4
34341: ARRAY
34342: PPUSH
34343: CALL_OW 251
34347: PUSH
34348: LD_VAR 0 3
34352: PUSH
34353: LD_VAR 0 4
34357: ARRAY
34358: PPUSH
34359: CALL_OW 254
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: ADD
34373: ST_TO_ADDR
34374: GO 34287
34376: POP
34377: POP
// result := list ;
34378: LD_ADDR_VAR 0 2
34382: PUSH
34383: LD_VAR 0 5
34387: ST_TO_ADDR
// end ;
34388: LD_VAR 0 2
34392: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34393: LD_INT 0
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
// if not factory then
34402: LD_VAR 0 1
34406: NOT
34407: IFFALSE 34411
// exit ;
34409: GO 35014
// if control = control_apeman then
34411: LD_VAR 0 4
34415: PUSH
34416: LD_INT 5
34418: EQUAL
34419: IFFALSE 34528
// begin tmp := UnitsInside ( factory ) ;
34421: LD_ADDR_VAR 0 8
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 313
34435: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34436: LD_VAR 0 8
34440: PPUSH
34441: LD_INT 25
34443: PUSH
34444: LD_INT 12
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PPUSH
34451: CALL_OW 72
34455: NOT
34456: IFFALSE 34466
// control := control_manual ;
34458: LD_ADDR_VAR 0 4
34462: PUSH
34463: LD_INT 1
34465: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34466: LD_ADDR_VAR 0 8
34470: PUSH
34471: LD_VAR 0 1
34475: PPUSH
34476: CALL 34163 0 1
34480: ST_TO_ADDR
// if tmp then
34481: LD_VAR 0 8
34485: IFFALSE 34528
// begin for i in tmp do
34487: LD_ADDR_VAR 0 7
34491: PUSH
34492: LD_VAR 0 8
34496: PUSH
34497: FOR_IN
34498: IFFALSE 34526
// if i [ 1 ] = b_ext_radio then
34500: LD_VAR 0 7
34504: PUSH
34505: LD_INT 1
34507: ARRAY
34508: PUSH
34509: LD_INT 22
34511: EQUAL
34512: IFFALSE 34524
// begin control := control_remote ;
34514: LD_ADDR_VAR 0 4
34518: PUSH
34519: LD_INT 2
34521: ST_TO_ADDR
// break ;
34522: GO 34526
// end ;
34524: GO 34497
34526: POP
34527: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34528: LD_VAR 0 1
34532: PPUSH
34533: LD_VAR 0 2
34537: PPUSH
34538: LD_VAR 0 3
34542: PPUSH
34543: LD_VAR 0 4
34547: PPUSH
34548: LD_VAR 0 5
34552: PPUSH
34553: CALL_OW 448
34557: IFFALSE 34592
// begin result := [ chassis , engine , control , weapon ] ;
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_VAR 0 2
34568: PUSH
34569: LD_VAR 0 3
34573: PUSH
34574: LD_VAR 0 4
34578: PUSH
34579: LD_VAR 0 5
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
// exit ;
34590: GO 35014
// end ; _chassis := AvailableChassisList ( factory ) ;
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 475
34606: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34607: LD_ADDR_VAR 0 11
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 476
34621: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34622: LD_ADDR_VAR 0 12
34626: PUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 477
34636: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34637: LD_ADDR_VAR 0 10
34641: PUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 478
34651: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34652: LD_VAR 0 9
34656: NOT
34657: IFTRUE 34666
34659: PUSH
34660: LD_VAR 0 11
34664: NOT
34665: OR
34666: IFTRUE 34675
34668: PUSH
34669: LD_VAR 0 12
34673: NOT
34674: OR
34675: IFTRUE 34684
34677: PUSH
34678: LD_VAR 0 10
34682: NOT
34683: OR
34684: IFFALSE 34719
// begin result := [ chassis , engine , control , weapon ] ;
34686: LD_ADDR_VAR 0 6
34690: PUSH
34691: LD_VAR 0 2
34695: PUSH
34696: LD_VAR 0 3
34700: PUSH
34701: LD_VAR 0 4
34705: PUSH
34706: LD_VAR 0 5
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: ST_TO_ADDR
// exit ;
34717: GO 35014
// end ; if not chassis in _chassis then
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 9
34728: IN
34729: NOT
34730: IFFALSE 34756
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34732: LD_ADDR_VAR 0 2
34736: PUSH
34737: LD_VAR 0 9
34741: PUSH
34742: LD_INT 1
34744: PPUSH
34745: LD_VAR 0 9
34749: PPUSH
34750: CALL_OW 12
34754: ARRAY
34755: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34756: LD_VAR 0 2
34760: PPUSH
34761: LD_VAR 0 3
34765: PPUSH
34766: CALL 35019 0 2
34770: NOT
34771: IFFALSE 34832
// repeat engine := _engine [ 1 ] ;
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_VAR 0 11
34782: PUSH
34783: LD_INT 1
34785: ARRAY
34786: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34787: LD_ADDR_VAR 0 11
34791: PUSH
34792: LD_VAR 0 11
34796: PPUSH
34797: LD_INT 1
34799: PPUSH
34800: CALL_OW 3
34804: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34805: LD_VAR 0 2
34809: PPUSH
34810: LD_VAR 0 3
34814: PPUSH
34815: CALL 35019 0 2
34819: IFTRUE 34830
34821: PUSH
34822: LD_VAR 0 11
34826: PUSH
34827: EMPTY
34828: EQUAL
34829: OR
34830: IFFALSE 34773
// if not control in _control then
34832: LD_VAR 0 4
34836: PUSH
34837: LD_VAR 0 12
34841: IN
34842: NOT
34843: IFFALSE 34869
// control := _control [ rand ( 1 , _control ) ] ;
34845: LD_ADDR_VAR 0 4
34849: PUSH
34850: LD_VAR 0 12
34854: PUSH
34855: LD_INT 1
34857: PPUSH
34858: LD_VAR 0 12
34862: PPUSH
34863: CALL_OW 12
34867: ARRAY
34868: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 5
34878: PPUSH
34879: CALL 35241 0 2
34883: NOT
34884: IFFALSE 34945
// repeat weapon := _weapon [ 1 ] ;
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: LD_VAR 0 10
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34900: LD_ADDR_VAR 0 10
34904: PUSH
34905: LD_VAR 0 10
34909: PPUSH
34910: LD_INT 1
34912: PPUSH
34913: CALL_OW 3
34917: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 5
34927: PPUSH
34928: CALL 35241 0 2
34932: IFTRUE 34943
34934: PUSH
34935: LD_VAR 0 10
34939: PUSH
34940: EMPTY
34941: EQUAL
34942: OR
34943: IFFALSE 34886
// result := [ ] ;
34945: LD_ADDR_VAR 0 6
34949: PUSH
34950: EMPTY
34951: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34952: LD_VAR 0 1
34956: PPUSH
34957: LD_VAR 0 2
34961: PPUSH
34962: LD_VAR 0 3
34966: PPUSH
34967: LD_VAR 0 4
34971: PPUSH
34972: LD_VAR 0 5
34976: PPUSH
34977: CALL_OW 448
34981: IFFALSE 35014
// result := [ chassis , engine , control , weapon ] ;
34983: LD_ADDR_VAR 0 6
34987: PUSH
34988: LD_VAR 0 2
34992: PUSH
34993: LD_VAR 0 3
34997: PUSH
34998: LD_VAR 0 4
35002: PUSH
35003: LD_VAR 0 5
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 6
35018: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35019: LD_INT 0
35021: PPUSH
// if not chassis or not engine then
35022: LD_VAR 0 1
35026: NOT
35027: IFTRUE 35036
35029: PUSH
35030: LD_VAR 0 2
35034: NOT
35035: OR
35036: IFFALSE 35040
// exit ;
35038: GO 35236
// case engine of engine_solar :
35040: LD_VAR 0 2
35044: PUSH
35045: LD_INT 2
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35091
35053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_INT 11
35061: PUSH
35062: LD_INT 12
35064: PUSH
35065: LD_INT 13
35067: PUSH
35068: LD_INT 14
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
35089: GO 35220
35091: LD_INT 1
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35161
35099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: LD_INT 11
35107: PUSH
35108: LD_INT 12
35110: PUSH
35111: LD_INT 13
35113: PUSH
35114: LD_INT 14
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: LD_INT 5
35131: PUSH
35132: LD_INT 21
35134: PUSH
35135: LD_INT 23
35137: PUSH
35138: LD_INT 22
35140: PUSH
35141: LD_INT 24
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
35159: GO 35220
35161: LD_INT 3
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35219
35169: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35170: LD_ADDR_VAR 0 3
35174: PUSH
35175: LD_INT 13
35177: PUSH
35178: LD_INT 14
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: LD_INT 3
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: LD_INT 5
35192: PUSH
35193: LD_INT 21
35195: PUSH
35196: LD_INT 22
35198: PUSH
35199: LD_INT 23
35201: PUSH
35202: LD_INT 24
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: ST_TO_ADDR
35217: GO 35220
35219: POP
// result := ( chassis in result ) ;
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_VAR 0 1
35229: PUSH
35230: LD_VAR 0 3
35234: IN
35235: ST_TO_ADDR
// end ;
35236: LD_VAR 0 3
35240: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35241: LD_INT 0
35243: PPUSH
// if not chassis or not weapon then
35244: LD_VAR 0 1
35248: NOT
35249: IFTRUE 35258
35251: PUSH
35252: LD_VAR 0 2
35256: NOT
35257: OR
35258: IFFALSE 35262
// exit ;
35260: GO 36322
// case weapon of us_machine_gun :
35262: LD_VAR 0 2
35266: PUSH
35267: LD_INT 2
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35275
35273: GO 35305
35275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35276: LD_ADDR_VAR 0 3
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 5
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
35303: GO 36306
35305: LD_INT 3
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35343
35313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: LD_INT 4
35330: PUSH
35331: LD_INT 5
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
35341: GO 36306
35343: LD_INT 11
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35351
35349: GO 35381
35351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: LD_INT 3
35365: PUSH
35366: LD_INT 4
35368: PUSH
35369: LD_INT 5
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
35379: GO 36306
35381: LD_INT 4
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35389
35387: GO 35415
35389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 4
35403: PUSH
35404: LD_INT 5
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
35413: GO 36306
35415: LD_INT 5
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35449
35423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: LD_INT 5
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
35447: GO 36306
35449: LD_INT 9
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35483
35457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: LD_INT 5
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 36306
35483: LD_INT 7
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35517
35491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: LD_INT 5
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
35515: GO 36306
35517: LD_INT 12
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35551
35525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 4
35539: PUSH
35540: LD_INT 5
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
35549: GO 36306
35551: LD_INT 13
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35559
35557: GO 35585
35559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35560: LD_ADDR_VAR 0 3
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: LD_INT 4
35573: PUSH
35574: LD_INT 5
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
35583: GO 36306
35585: LD_INT 14
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35593
35591: GO 35611
35593: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35594: LD_ADDR_VAR 0 3
35598: PUSH
35599: LD_INT 4
35601: PUSH
35602: LD_INT 5
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: ST_TO_ADDR
35609: GO 36306
35611: LD_INT 6
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35637
35619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_INT 4
35627: PUSH
35628: LD_INT 5
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: ST_TO_ADDR
35635: GO 36306
35637: LD_INT 10
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35645
35643: GO 35663
35645: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35646: LD_ADDR_VAR 0 3
35650: PUSH
35651: LD_INT 4
35653: PUSH
35654: LD_INT 5
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: ST_TO_ADDR
35661: GO 36306
35663: LD_INT 22
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35697
35671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 11
35679: PUSH
35680: LD_INT 12
35682: PUSH
35683: LD_INT 13
35685: PUSH
35686: LD_INT 14
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
35695: GO 36306
35697: LD_INT 23
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35705
35703: GO 35731
35705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35706: LD_ADDR_VAR 0 3
35710: PUSH
35711: LD_INT 11
35713: PUSH
35714: LD_INT 12
35716: PUSH
35717: LD_INT 13
35719: PUSH
35720: LD_INT 14
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
35729: GO 36306
35731: LD_INT 24
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 35765
35739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35740: LD_ADDR_VAR 0 3
35744: PUSH
35745: LD_INT 11
35747: PUSH
35748: LD_INT 12
35750: PUSH
35751: LD_INT 13
35753: PUSH
35754: LD_INT 14
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: ST_TO_ADDR
35763: GO 36306
35765: LD_INT 30
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35773
35771: GO 35799
35773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35774: LD_ADDR_VAR 0 3
35778: PUSH
35779: LD_INT 11
35781: PUSH
35782: LD_INT 12
35784: PUSH
35785: LD_INT 13
35787: PUSH
35788: LD_INT 14
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: ST_TO_ADDR
35797: GO 36306
35799: LD_INT 25
35801: DOUBLE
35802: EQUAL
35803: IFTRUE 35807
35805: GO 35825
35807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_INT 13
35815: PUSH
35816: LD_INT 14
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: ST_TO_ADDR
35823: GO 36306
35825: LD_INT 27
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35851
35833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35834: LD_ADDR_VAR 0 3
35838: PUSH
35839: LD_INT 13
35841: PUSH
35842: LD_INT 14
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: ST_TO_ADDR
35849: GO 36306
35851: LD_INT 92
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35859
35857: GO 35885
35859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35860: LD_ADDR_VAR 0 3
35864: PUSH
35865: LD_INT 11
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: LD_INT 13
35873: PUSH
35874: LD_INT 14
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
35883: GO 36306
35885: LD_INT 28
35887: DOUBLE
35888: EQUAL
35889: IFTRUE 35893
35891: GO 35911
35893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_INT 13
35901: PUSH
35902: LD_INT 14
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: ST_TO_ADDR
35909: GO 36306
35911: LD_INT 29
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35919
35917: GO 35937
35919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 13
35927: PUSH
35928: LD_INT 14
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: ST_TO_ADDR
35935: GO 36306
35937: LD_INT 31
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35945
35943: GO 35963
35945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35946: LD_ADDR_VAR 0 3
35950: PUSH
35951: LD_INT 13
35953: PUSH
35954: LD_INT 14
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 36306
35963: LD_INT 26
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 35989
35971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35972: LD_ADDR_VAR 0 3
35976: PUSH
35977: LD_INT 13
35979: PUSH
35980: LD_INT 14
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: ST_TO_ADDR
35987: GO 36306
35989: LD_INT 42
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 35997
35995: GO 36023
35997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_INT 21
36005: PUSH
36006: LD_INT 22
36008: PUSH
36009: LD_INT 23
36011: PUSH
36012: LD_INT 24
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
36021: GO 36306
36023: LD_INT 43
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36031
36029: GO 36057
36031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36032: LD_ADDR_VAR 0 3
36036: PUSH
36037: LD_INT 21
36039: PUSH
36040: LD_INT 22
36042: PUSH
36043: LD_INT 23
36045: PUSH
36046: LD_INT 24
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
36055: GO 36306
36057: LD_INT 44
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36091
36065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_INT 21
36073: PUSH
36074: LD_INT 22
36076: PUSH
36077: LD_INT 23
36079: PUSH
36080: LD_INT 24
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
36089: GO 36306
36091: LD_INT 45
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36125
36099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 21
36107: PUSH
36108: LD_INT 22
36110: PUSH
36111: LD_INT 23
36113: PUSH
36114: LD_INT 24
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
36123: GO 36306
36125: LD_INT 49
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36159
36133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36134: LD_ADDR_VAR 0 3
36138: PUSH
36139: LD_INT 21
36141: PUSH
36142: LD_INT 22
36144: PUSH
36145: LD_INT 23
36147: PUSH
36148: LD_INT 24
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
36157: GO 36306
36159: LD_INT 51
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36193
36167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_INT 21
36175: PUSH
36176: LD_INT 22
36178: PUSH
36179: LD_INT 23
36181: PUSH
36182: LD_INT 24
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
36191: GO 36306
36193: LD_INT 52
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36227
36201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 21
36209: PUSH
36210: LD_INT 22
36212: PUSH
36213: LD_INT 23
36215: PUSH
36216: LD_INT 24
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
36225: GO 36306
36227: LD_INT 53
36229: DOUBLE
36230: EQUAL
36231: IFTRUE 36235
36233: GO 36253
36235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 23
36243: PUSH
36244: LD_INT 24
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: ST_TO_ADDR
36251: GO 36306
36253: LD_INT 46
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36261
36259: GO 36279
36261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36262: LD_ADDR_VAR 0 3
36266: PUSH
36267: LD_INT 23
36269: PUSH
36270: LD_INT 24
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: ST_TO_ADDR
36277: GO 36306
36279: LD_INT 47
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36305
36287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 23
36295: PUSH
36296: LD_INT 24
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: ST_TO_ADDR
36303: GO 36306
36305: POP
// result := ( chassis in result ) ;
36306: LD_ADDR_VAR 0 3
36310: PUSH
36311: LD_VAR 0 1
36315: PUSH
36316: LD_VAR 0 3
36320: IN
36321: ST_TO_ADDR
// end ;
36322: LD_VAR 0 3
36326: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
// result := array ;
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: LD_VAR 0 1
36345: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36346: LD_VAR 0 1
36350: NOT
36351: IFTRUE 36360
36353: PUSH
36354: LD_VAR 0 2
36358: NOT
36359: OR
36360: IFTRUE 36369
36362: PUSH
36363: LD_VAR 0 3
36367: NOT
36368: OR
36369: IFTRUE 36383
36371: PUSH
36372: LD_VAR 0 2
36376: PUSH
36377: LD_VAR 0 1
36381: GREATER
36382: OR
36383: IFTRUE 36397
36385: PUSH
36386: LD_VAR 0 3
36390: PUSH
36391: LD_VAR 0 1
36395: GREATER
36396: OR
36397: IFFALSE 36401
// exit ;
36399: GO 36697
// if direction then
36401: LD_VAR 0 4
36405: IFFALSE 36469
// begin d := 1 ;
36407: LD_ADDR_VAR 0 9
36411: PUSH
36412: LD_INT 1
36414: ST_TO_ADDR
// if i_from > i_to then
36415: LD_VAR 0 2
36419: PUSH
36420: LD_VAR 0 3
36424: GREATER
36425: IFFALSE 36451
// length := ( array - i_from ) + i_to else
36427: LD_ADDR_VAR 0 11
36431: PUSH
36432: LD_VAR 0 1
36436: PUSH
36437: LD_VAR 0 2
36441: MINUS
36442: PUSH
36443: LD_VAR 0 3
36447: PLUS
36448: ST_TO_ADDR
36449: GO 36467
// length := i_to - i_from ;
36451: LD_ADDR_VAR 0 11
36455: PUSH
36456: LD_VAR 0 3
36460: PUSH
36461: LD_VAR 0 2
36465: MINUS
36466: ST_TO_ADDR
// end else
36467: GO 36530
// begin d := - 1 ;
36469: LD_ADDR_VAR 0 9
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: ST_TO_ADDR
// if i_from > i_to then
36478: LD_VAR 0 2
36482: PUSH
36483: LD_VAR 0 3
36487: GREATER
36488: IFFALSE 36508
// length := i_from - i_to else
36490: LD_ADDR_VAR 0 11
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_VAR 0 3
36504: MINUS
36505: ST_TO_ADDR
36506: GO 36530
// length := ( array - i_to ) + i_from ;
36508: LD_ADDR_VAR 0 11
36512: PUSH
36513: LD_VAR 0 1
36517: PUSH
36518: LD_VAR 0 3
36522: MINUS
36523: PUSH
36524: LD_VAR 0 2
36528: PLUS
36529: ST_TO_ADDR
// end ; if not length then
36530: LD_VAR 0 11
36534: NOT
36535: IFFALSE 36539
// exit ;
36537: GO 36697
// tmp := array ;
36539: LD_ADDR_VAR 0 10
36543: PUSH
36544: LD_VAR 0 1
36548: ST_TO_ADDR
// for i = 1 to length do
36549: LD_ADDR_VAR 0 6
36553: PUSH
36554: DOUBLE
36555: LD_INT 1
36557: DEC
36558: ST_TO_ADDR
36559: LD_VAR 0 11
36563: PUSH
36564: FOR_TO
36565: IFFALSE 36685
// begin for j = 1 to array do
36567: LD_ADDR_VAR 0 7
36571: PUSH
36572: DOUBLE
36573: LD_INT 1
36575: DEC
36576: ST_TO_ADDR
36577: LD_VAR 0 1
36581: PUSH
36582: FOR_TO
36583: IFFALSE 36671
// begin k := j + d ;
36585: LD_ADDR_VAR 0 8
36589: PUSH
36590: LD_VAR 0 7
36594: PUSH
36595: LD_VAR 0 9
36599: PLUS
36600: ST_TO_ADDR
// if k > array then
36601: LD_VAR 0 8
36605: PUSH
36606: LD_VAR 0 1
36610: GREATER
36611: IFFALSE 36621
// k := 1 ;
36613: LD_ADDR_VAR 0 8
36617: PUSH
36618: LD_INT 1
36620: ST_TO_ADDR
// if not k then
36621: LD_VAR 0 8
36625: NOT
36626: IFFALSE 36638
// k := array ;
36628: LD_ADDR_VAR 0 8
36632: PUSH
36633: LD_VAR 0 1
36637: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36638: LD_ADDR_VAR 0 10
36642: PUSH
36643: LD_VAR 0 10
36647: PPUSH
36648: LD_VAR 0 8
36652: PPUSH
36653: LD_VAR 0 1
36657: PUSH
36658: LD_VAR 0 7
36662: ARRAY
36663: PPUSH
36664: CALL_OW 1
36668: ST_TO_ADDR
// end ;
36669: GO 36582
36671: POP
36672: POP
// array := tmp ;
36673: LD_ADDR_VAR 0 1
36677: PUSH
36678: LD_VAR 0 10
36682: ST_TO_ADDR
// end ;
36683: GO 36564
36685: POP
36686: POP
// result := array ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_VAR 0 1
36696: ST_TO_ADDR
// end ;
36697: LD_VAR 0 5
36701: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36702: LD_INT 0
36704: PPUSH
36705: PPUSH
// result := 0 ;
36706: LD_ADDR_VAR 0 3
36710: PUSH
36711: LD_INT 0
36713: ST_TO_ADDR
// if not array or not value in array then
36714: LD_VAR 0 1
36718: NOT
36719: IFTRUE 36734
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_VAR 0 1
36731: IN
36732: NOT
36733: OR
36734: IFFALSE 36738
// exit ;
36736: GO 36792
// for i = 1 to array do
36738: LD_ADDR_VAR 0 4
36742: PUSH
36743: DOUBLE
36744: LD_INT 1
36746: DEC
36747: ST_TO_ADDR
36748: LD_VAR 0 1
36752: PUSH
36753: FOR_TO
36754: IFFALSE 36790
// if value = array [ i ] then
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 1
36765: PUSH
36766: LD_VAR 0 4
36770: ARRAY
36771: EQUAL
36772: IFFALSE 36788
// begin result := i ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_VAR 0 4
36783: ST_TO_ADDR
// exit ;
36784: POP
36785: POP
36786: GO 36792
// end ;
36788: GO 36753
36790: POP
36791: POP
// end ;
36792: LD_VAR 0 3
36796: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36797: LD_INT 0
36799: PPUSH
// vc_chassis := chassis ;
36800: LD_ADDR_OWVAR 37
36804: PUSH
36805: LD_VAR 0 1
36809: ST_TO_ADDR
// vc_engine := engine ;
36810: LD_ADDR_OWVAR 39
36814: PUSH
36815: LD_VAR 0 2
36819: ST_TO_ADDR
// vc_control := control ;
36820: LD_ADDR_OWVAR 38
36824: PUSH
36825: LD_VAR 0 3
36829: ST_TO_ADDR
// vc_weapon := weapon ;
36830: LD_ADDR_OWVAR 40
36834: PUSH
36835: LD_VAR 0 4
36839: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36840: LD_ADDR_OWVAR 41
36844: PUSH
36845: LD_VAR 0 5
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 6
36854: RET
// export function WantPlant ( unit ) ; var task ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
// result := false ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36867: LD_ADDR_VAR 0 3
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 437
36881: ST_TO_ADDR
// if task then
36882: LD_VAR 0 3
36886: IFFALSE 36914
// if task [ 1 ] [ 1 ] = p then
36888: LD_VAR 0 3
36892: PUSH
36893: LD_INT 1
36895: ARRAY
36896: PUSH
36897: LD_INT 1
36899: ARRAY
36900: PUSH
36901: LD_STRING p
36903: EQUAL
36904: IFFALSE 36914
// result := true ;
36906: LD_ADDR_VAR 0 2
36910: PUSH
36911: LD_INT 1
36913: ST_TO_ADDR
// end ;
36914: LD_VAR 0 2
36918: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36919: LD_INT 0
36921: PPUSH
36922: PPUSH
36923: PPUSH
36924: PPUSH
// if pos < 1 then
36925: LD_VAR 0 2
36929: PUSH
36930: LD_INT 1
36932: LESS
36933: IFFALSE 36937
// exit ;
36935: GO 37240
// if pos = 1 then
36937: LD_VAR 0 2
36941: PUSH
36942: LD_INT 1
36944: EQUAL
36945: IFFALSE 36978
// result := Replace ( arr , pos [ 1 ] , value ) else
36947: LD_ADDR_VAR 0 4
36951: PUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: LD_VAR 0 2
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 3
36970: PPUSH
36971: CALL_OW 1
36975: ST_TO_ADDR
36976: GO 37240
// begin tmp := arr ;
36978: LD_ADDR_VAR 0 6
36982: PUSH
36983: LD_VAR 0 1
36987: ST_TO_ADDR
// s_arr := [ tmp ] ;
36988: LD_ADDR_VAR 0 7
36992: PUSH
36993: LD_VAR 0 6
36997: PUSH
36998: EMPTY
36999: LIST
37000: ST_TO_ADDR
// for i = 1 to pos - 1 do
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_VAR 0 2
37015: PUSH
37016: LD_INT 1
37018: MINUS
37019: PUSH
37020: FOR_TO
37021: IFFALSE 37066
// begin tmp := tmp [ pos [ i ] ] ;
37023: LD_ADDR_VAR 0 6
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: ARRAY
37044: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37045: LD_ADDR_VAR 0 7
37049: PUSH
37050: LD_VAR 0 7
37054: PUSH
37055: LD_VAR 0 6
37059: PUSH
37060: EMPTY
37061: LIST
37062: ADD
37063: ST_TO_ADDR
// end ;
37064: GO 37020
37066: POP
37067: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37068: LD_ADDR_VAR 0 6
37072: PUSH
37073: LD_VAR 0 6
37077: PPUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 2
37087: ARRAY
37088: PPUSH
37089: LD_VAR 0 3
37093: PPUSH
37094: CALL_OW 1
37098: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: LD_VAR 0 7
37108: PPUSH
37109: LD_VAR 0 7
37113: PPUSH
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 1
37123: ST_TO_ADDR
// for i = s_arr downto 2 do
37124: LD_ADDR_VAR 0 5
37128: PUSH
37129: DOUBLE
37130: LD_VAR 0 7
37134: INC
37135: ST_TO_ADDR
37136: LD_INT 2
37138: PUSH
37139: FOR_DOWNTO
37140: IFFALSE 37224
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37142: LD_ADDR_VAR 0 6
37146: PUSH
37147: LD_VAR 0 7
37151: PUSH
37152: LD_VAR 0 5
37156: PUSH
37157: LD_INT 1
37159: MINUS
37160: ARRAY
37161: PPUSH
37162: LD_VAR 0 2
37166: PUSH
37167: LD_VAR 0 5
37171: PUSH
37172: LD_INT 1
37174: MINUS
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 7
37181: PUSH
37182: LD_VAR 0 5
37186: ARRAY
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37193: LD_ADDR_VAR 0 7
37197: PUSH
37198: LD_VAR 0 7
37202: PPUSH
37203: LD_VAR 0 5
37207: PUSH
37208: LD_INT 1
37210: MINUS
37211: PPUSH
37212: LD_VAR 0 6
37216: PPUSH
37217: CALL_OW 1
37221: ST_TO_ADDR
// end ;
37222: GO 37139
37224: POP
37225: POP
// result := s_arr [ 1 ] ;
37226: LD_ADDR_VAR 0 4
37230: PUSH
37231: LD_VAR 0 7
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: ST_TO_ADDR
// end ; end ;
37240: LD_VAR 0 4
37244: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37245: LD_INT 0
37247: PPUSH
37248: PPUSH
// if not list then
37249: LD_VAR 0 1
37253: NOT
37254: IFFALSE 37258
// exit ;
37256: GO 37349
// i := list [ pos1 ] ;
37258: LD_ADDR_VAR 0 5
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_VAR 0 2
37272: ARRAY
37273: ST_TO_ADDR
// if not i then
37274: LD_VAR 0 5
37278: NOT
37279: IFFALSE 37283
// exit ;
37281: GO 37349
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37283: LD_ADDR_VAR 0 1
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: LD_VAR 0 2
37297: PPUSH
37298: LD_VAR 0 1
37302: PUSH
37303: LD_VAR 0 3
37307: ARRAY
37308: PPUSH
37309: CALL_OW 1
37313: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37314: LD_ADDR_VAR 0 1
37318: PUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: LD_VAR 0 3
37328: PPUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: CALL_OW 1
37338: ST_TO_ADDR
// result := list ;
37339: LD_ADDR_VAR 0 4
37343: PUSH
37344: LD_VAR 0 1
37348: ST_TO_ADDR
// end ;
37349: LD_VAR 0 4
37353: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37354: LD_INT 0
37356: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 250
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 251
37381: PPUSH
37382: LD_VAR 0 2
37386: PPUSH
37387: LD_VAR 0 3
37391: PPUSH
37392: LD_VAR 0 4
37396: PPUSH
37397: CALL 37779 0 5
37401: ST_TO_ADDR
// end ;
37402: LD_VAR 0 5
37406: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37407: LD_INT 0
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
// if not list or not unit then
37413: LD_VAR 0 2
37417: NOT
37418: IFTRUE 37427
37420: PUSH
37421: LD_VAR 0 1
37425: NOT
37426: OR
37427: IFFALSE 37431
// exit ;
37429: GO 37774
// result := [ ] ;
37431: LD_ADDR_VAR 0 5
37435: PUSH
37436: EMPTY
37437: ST_TO_ADDR
// for i in list do
37438: LD_ADDR_VAR 0 6
37442: PUSH
37443: LD_VAR 0 2
37447: PUSH
37448: FOR_IN
37449: IFFALSE 37667
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37451: LD_ADDR_VAR 0 8
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: LD_VAR 0 6
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PPUSH
37470: LD_VAR 0 6
37474: PUSH
37475: LD_INT 2
37477: ARRAY
37478: PPUSH
37479: CALL_OW 297
37483: ST_TO_ADDR
// if not Count ( result ) then
37484: LD_VAR 0 5
37488: PPUSH
37489: CALL 34035 0 1
37493: NOT
37494: IFFALSE 37527
// begin result := Join ( result , [ i , tmp ] ) ;
37496: LD_ADDR_VAR 0 5
37500: PUSH
37501: LD_VAR 0 5
37505: PPUSH
37506: LD_VAR 0 6
37510: PUSH
37511: LD_VAR 0 8
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PPUSH
37520: CALL 69967 0 2
37524: ST_TO_ADDR
// continue ;
37525: GO 37448
// end ; if result [ result ] [ 2 ] <= tmp then
37527: LD_VAR 0 5
37531: PUSH
37532: LD_VAR 0 5
37536: ARRAY
37537: PUSH
37538: LD_INT 2
37540: ARRAY
37541: PUSH
37542: LD_VAR 0 8
37546: LESSEQUAL
37547: IFFALSE 37580
// result := Join ( result , [ i , tmp ] ) else
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: LD_VAR 0 5
37558: PPUSH
37559: LD_VAR 0 6
37563: PUSH
37564: LD_VAR 0 8
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PPUSH
37573: CALL 69967 0 2
37577: ST_TO_ADDR
37578: GO 37665
// begin for j := 1 to Count ( result ) do
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: DOUBLE
37586: LD_INT 1
37588: DEC
37589: ST_TO_ADDR
37590: LD_VAR 0 5
37594: PPUSH
37595: CALL 34035 0 1
37599: PUSH
37600: FOR_TO
37601: IFFALSE 37663
// begin if tmp < result [ j ] [ 2 ] then
37603: LD_VAR 0 8
37607: PUSH
37608: LD_VAR 0 5
37612: PUSH
37613: LD_VAR 0 7
37617: ARRAY
37618: PUSH
37619: LD_INT 2
37621: ARRAY
37622: LESS
37623: IFFALSE 37661
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37625: LD_ADDR_VAR 0 5
37629: PUSH
37630: LD_VAR 0 5
37634: PPUSH
37635: LD_VAR 0 7
37639: PPUSH
37640: LD_VAR 0 6
37644: PUSH
37645: LD_VAR 0 8
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PPUSH
37654: CALL_OW 2
37658: ST_TO_ADDR
// break ;
37659: GO 37663
// end ; end ;
37661: GO 37600
37663: POP
37664: POP
// end ; end ;
37665: GO 37448
37667: POP
37668: POP
// if result and not asc then
37669: LD_VAR 0 5
37673: IFFALSE 37682
37675: PUSH
37676: LD_VAR 0 3
37680: NOT
37681: AND
37682: IFFALSE 37699
// result := ReverseArray ( result ) ;
37684: LD_ADDR_VAR 0 5
37688: PUSH
37689: LD_VAR 0 5
37693: PPUSH
37694: CALL 65057 0 1
37698: ST_TO_ADDR
// tmp := [ ] ;
37699: LD_ADDR_VAR 0 8
37703: PUSH
37704: EMPTY
37705: ST_TO_ADDR
// if mode then
37706: LD_VAR 0 4
37710: IFFALSE 37774
// begin for i := 1 to result do
37712: LD_ADDR_VAR 0 6
37716: PUSH
37717: DOUBLE
37718: LD_INT 1
37720: DEC
37721: ST_TO_ADDR
37722: LD_VAR 0 5
37726: PUSH
37727: FOR_TO
37728: IFFALSE 37762
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37730: LD_ADDR_VAR 0 8
37734: PUSH
37735: LD_VAR 0 8
37739: PPUSH
37740: LD_VAR 0 5
37744: PUSH
37745: LD_VAR 0 6
37749: ARRAY
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: PPUSH
37755: CALL 69967 0 2
37759: ST_TO_ADDR
37760: GO 37727
37762: POP
37763: POP
// result := tmp ;
37764: LD_ADDR_VAR 0 5
37768: PUSH
37769: LD_VAR 0 8
37773: ST_TO_ADDR
// end ; end ;
37774: LD_VAR 0 5
37778: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
// if not list then
37785: LD_VAR 0 3
37789: NOT
37790: IFFALSE 37794
// exit ;
37792: GO 38184
// result := [ ] ;
37794: LD_ADDR_VAR 0 6
37798: PUSH
37799: EMPTY
37800: ST_TO_ADDR
// for i in list do
37801: LD_ADDR_VAR 0 7
37805: PUSH
37806: LD_VAR 0 3
37810: PUSH
37811: FOR_IN
37812: IFFALSE 38014
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37814: LD_ADDR_VAR 0 9
37818: PUSH
37819: LD_VAR 0 7
37823: PPUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: LD_VAR 0 2
37833: PPUSH
37834: CALL_OW 297
37838: ST_TO_ADDR
// if not result then
37839: LD_VAR 0 6
37843: NOT
37844: IFFALSE 37870
// result := [ [ i , tmp ] ] else
37846: LD_ADDR_VAR 0 6
37850: PUSH
37851: LD_VAR 0 7
37855: PUSH
37856: LD_VAR 0 9
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: ST_TO_ADDR
37868: GO 38012
// begin if result [ result ] [ 2 ] <= tmp then
37870: LD_VAR 0 6
37874: PUSH
37875: LD_VAR 0 6
37879: ARRAY
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PUSH
37885: LD_VAR 0 9
37889: LESSEQUAL
37890: IFFALSE 37932
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37892: LD_ADDR_VAR 0 6
37896: PUSH
37897: LD_VAR 0 6
37901: PPUSH
37902: LD_VAR 0 6
37906: PUSH
37907: LD_INT 1
37909: PLUS
37910: PPUSH
37911: LD_VAR 0 7
37915: PUSH
37916: LD_VAR 0 9
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PPUSH
37925: CALL_OW 2
37929: ST_TO_ADDR
37930: GO 38012
// for j := 1 to result do
37932: LD_ADDR_VAR 0 8
37936: PUSH
37937: DOUBLE
37938: LD_INT 1
37940: DEC
37941: ST_TO_ADDR
37942: LD_VAR 0 6
37946: PUSH
37947: FOR_TO
37948: IFFALSE 38010
// begin if tmp < result [ j ] [ 2 ] then
37950: LD_VAR 0 9
37954: PUSH
37955: LD_VAR 0 6
37959: PUSH
37960: LD_VAR 0 8
37964: ARRAY
37965: PUSH
37966: LD_INT 2
37968: ARRAY
37969: LESS
37970: IFFALSE 38008
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37972: LD_ADDR_VAR 0 6
37976: PUSH
37977: LD_VAR 0 6
37981: PPUSH
37982: LD_VAR 0 8
37986: PPUSH
37987: LD_VAR 0 7
37991: PUSH
37992: LD_VAR 0 9
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PPUSH
38001: CALL_OW 2
38005: ST_TO_ADDR
// break ;
38006: GO 38010
// end ; end ;
38008: GO 37947
38010: POP
38011: POP
// end ; end ;
38012: GO 37811
38014: POP
38015: POP
// if result and not asc then
38016: LD_VAR 0 6
38020: IFFALSE 38029
38022: PUSH
38023: LD_VAR 0 4
38027: NOT
38028: AND
38029: IFFALSE 38104
// begin tmp := result ;
38031: LD_ADDR_VAR 0 9
38035: PUSH
38036: LD_VAR 0 6
38040: ST_TO_ADDR
// for i = tmp downto 1 do
38041: LD_ADDR_VAR 0 7
38045: PUSH
38046: DOUBLE
38047: LD_VAR 0 9
38051: INC
38052: ST_TO_ADDR
38053: LD_INT 1
38055: PUSH
38056: FOR_DOWNTO
38057: IFFALSE 38102
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38059: LD_ADDR_VAR 0 6
38063: PUSH
38064: LD_VAR 0 6
38068: PPUSH
38069: LD_VAR 0 9
38073: PUSH
38074: LD_VAR 0 7
38078: MINUS
38079: PUSH
38080: LD_INT 1
38082: PLUS
38083: PPUSH
38084: LD_VAR 0 9
38088: PUSH
38089: LD_VAR 0 7
38093: ARRAY
38094: PPUSH
38095: CALL_OW 1
38099: ST_TO_ADDR
38100: GO 38056
38102: POP
38103: POP
// end ; tmp := [ ] ;
38104: LD_ADDR_VAR 0 9
38108: PUSH
38109: EMPTY
38110: ST_TO_ADDR
// if mode then
38111: LD_VAR 0 5
38115: IFFALSE 38184
// begin for i = 1 to result do
38117: LD_ADDR_VAR 0 7
38121: PUSH
38122: DOUBLE
38123: LD_INT 1
38125: DEC
38126: ST_TO_ADDR
38127: LD_VAR 0 6
38131: PUSH
38132: FOR_TO
38133: IFFALSE 38172
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38135: LD_ADDR_VAR 0 9
38139: PUSH
38140: LD_VAR 0 9
38144: PPUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: LD_VAR 0 6
38154: PUSH
38155: LD_VAR 0 7
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PPUSH
38165: CALL_OW 1
38169: ST_TO_ADDR
38170: GO 38132
38172: POP
38173: POP
// result := tmp ;
38174: LD_ADDR_VAR 0 6
38178: PUSH
38179: LD_VAR 0 9
38183: ST_TO_ADDR
// end ; end ;
38184: LD_VAR 0 6
38188: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38197: LD_ADDR_VAR 0 5
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// if not x or not y then
38219: LD_VAR 0 2
38223: NOT
38224: IFTRUE 38233
38226: PUSH
38227: LD_VAR 0 3
38231: NOT
38232: OR
38233: IFFALSE 38237
// exit ;
38235: GO 39893
// if not range then
38237: LD_VAR 0 4
38241: NOT
38242: IFFALSE 38252
// range := 10 ;
38244: LD_ADDR_VAR 0 4
38248: PUSH
38249: LD_INT 10
38251: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38252: LD_ADDR_VAR 0 8
38256: PUSH
38257: LD_INT 81
38259: PUSH
38260: LD_VAR 0 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 92
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_VAR 0 3
38281: PUSH
38282: LD_VAR 0 4
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: LD_INT 21
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: PPUSH
38315: CALL_OW 69
38319: ST_TO_ADDR
// if not tmp then
38320: LD_VAR 0 8
38324: NOT
38325: IFFALSE 38329
// exit ;
38327: GO 39893
// for i in tmp do
38329: LD_ADDR_VAR 0 6
38333: PUSH
38334: LD_VAR 0 8
38338: PUSH
38339: FOR_IN
38340: IFFALSE 39868
// begin points := [ 0 , 0 , 0 ] ;
38342: LD_ADDR_VAR 0 9
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: ST_TO_ADDR
// bpoints := 1 ;
38361: LD_ADDR_VAR 0 10
38365: PUSH
38366: LD_INT 1
38368: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38369: LD_VAR 0 6
38373: PPUSH
38374: CALL_OW 247
38378: PUSH
38379: LD_INT 1
38381: DOUBLE
38382: EQUAL
38383: IFTRUE 38387
38385: GO 38969
38387: POP
// begin if GetClass ( i ) = 1 then
38388: LD_VAR 0 6
38392: PPUSH
38393: CALL_OW 257
38397: PUSH
38398: LD_INT 1
38400: EQUAL
38401: IFFALSE 38422
// points := [ 10 , 5 , 3 ] ;
38403: LD_ADDR_VAR 0 9
38407: PUSH
38408: LD_INT 10
38410: PUSH
38411: LD_INT 5
38413: PUSH
38414: LD_INT 3
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38422: LD_VAR 0 6
38426: PPUSH
38427: CALL_OW 257
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 4
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: IN
38446: IFFALSE 38467
// points := [ 3 , 2 , 1 ] ;
38448: LD_ADDR_VAR 0 9
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38467: LD_VAR 0 6
38471: PPUSH
38472: CALL_OW 257
38476: PUSH
38477: LD_INT 5
38479: EQUAL
38480: IFFALSE 38501
// points := [ 130 , 5 , 2 ] ;
38482: LD_ADDR_VAR 0 9
38486: PUSH
38487: LD_INT 130
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38501: LD_VAR 0 6
38505: PPUSH
38506: CALL_OW 257
38510: PUSH
38511: LD_INT 8
38513: EQUAL
38514: IFFALSE 38535
// points := [ 35 , 35 , 30 ] ;
38516: LD_ADDR_VAR 0 9
38520: PUSH
38521: LD_INT 35
38523: PUSH
38524: LD_INT 35
38526: PUSH
38527: LD_INT 30
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38535: LD_VAR 0 6
38539: PPUSH
38540: CALL_OW 257
38544: PUSH
38545: LD_INT 9
38547: EQUAL
38548: IFFALSE 38569
// points := [ 20 , 55 , 40 ] ;
38550: LD_ADDR_VAR 0 9
38554: PUSH
38555: LD_INT 20
38557: PUSH
38558: LD_INT 55
38560: PUSH
38561: LD_INT 40
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38569: LD_VAR 0 6
38573: PPUSH
38574: CALL_OW 257
38578: PUSH
38579: LD_INT 12
38581: PUSH
38582: LD_INT 16
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: IN
38589: IFFALSE 38610
// points := [ 5 , 3 , 2 ] ;
38591: LD_ADDR_VAR 0 9
38595: PUSH
38596: LD_INT 5
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38610: LD_VAR 0 6
38614: PPUSH
38615: CALL_OW 257
38619: PUSH
38620: LD_INT 17
38622: EQUAL
38623: IFFALSE 38644
// points := [ 100 , 50 , 75 ] ;
38625: LD_ADDR_VAR 0 9
38629: PUSH
38630: LD_INT 100
38632: PUSH
38633: LD_INT 50
38635: PUSH
38636: LD_INT 75
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38644: LD_VAR 0 6
38648: PPUSH
38649: CALL_OW 257
38653: PUSH
38654: LD_INT 15
38656: EQUAL
38657: IFFALSE 38678
// points := [ 10 , 5 , 3 ] ;
38659: LD_ADDR_VAR 0 9
38663: PUSH
38664: LD_INT 10
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38678: LD_VAR 0 6
38682: PPUSH
38683: CALL_OW 257
38687: PUSH
38688: LD_INT 14
38690: EQUAL
38691: IFFALSE 38712
// points := [ 10 , 0 , 0 ] ;
38693: LD_ADDR_VAR 0 9
38697: PUSH
38698: LD_INT 10
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38712: LD_VAR 0 6
38716: PPUSH
38717: CALL_OW 257
38721: PUSH
38722: LD_INT 11
38724: EQUAL
38725: IFFALSE 38746
// points := [ 30 , 10 , 5 ] ;
38727: LD_ADDR_VAR 0 9
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 10
38737: PUSH
38738: LD_INT 5
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_INT 5
38753: PPUSH
38754: CALL_OW 321
38758: PUSH
38759: LD_INT 2
38761: EQUAL
38762: IFFALSE 38779
// bpoints := bpoints * 1.8 ;
38764: LD_ADDR_VAR 0 10
38768: PUSH
38769: LD_VAR 0 10
38773: PUSH
38774: LD_REAL  1.80000000000000E+0000
38777: MUL
38778: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 257
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: LD_INT 4
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: IN
38807: IFFALSE 38827
38809: PUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: LD_INT 51
38817: PPUSH
38818: CALL_OW 321
38822: PUSH
38823: LD_INT 2
38825: EQUAL
38826: AND
38827: IFFALSE 38844
// bpoints := bpoints * 1.2 ;
38829: LD_ADDR_VAR 0 10
38833: PUSH
38834: LD_VAR 0 10
38838: PUSH
38839: LD_REAL  1.20000000000000E+0000
38842: MUL
38843: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38844: LD_VAR 0 6
38848: PPUSH
38849: CALL_OW 257
38853: PUSH
38854: LD_INT 5
38856: PUSH
38857: LD_INT 7
38859: PUSH
38860: LD_INT 9
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: IN
38868: IFFALSE 38888
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_INT 52
38878: PPUSH
38879: CALL_OW 321
38883: PUSH
38884: LD_INT 2
38886: EQUAL
38887: AND
38888: IFFALSE 38905
// bpoints := bpoints * 1.5 ;
38890: LD_ADDR_VAR 0 10
38894: PUSH
38895: LD_VAR 0 10
38899: PUSH
38900: LD_REAL  1.50000000000000E+0000
38903: MUL
38904: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38905: LD_VAR 0 1
38909: PPUSH
38910: LD_INT 66
38912: PPUSH
38913: CALL_OW 321
38917: PUSH
38918: LD_INT 2
38920: EQUAL
38921: IFFALSE 38938
// bpoints := bpoints * 1.1 ;
38923: LD_ADDR_VAR 0 10
38927: PUSH
38928: LD_VAR 0 10
38932: PUSH
38933: LD_REAL  1.10000000000000E+0000
38936: MUL
38937: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38938: LD_ADDR_VAR 0 10
38942: PUSH
38943: LD_VAR 0 10
38947: PUSH
38948: LD_VAR 0 6
38952: PPUSH
38953: LD_INT 1
38955: PPUSH
38956: CALL_OW 259
38960: PUSH
38961: LD_REAL  1.15000000000000E+0000
38964: MUL
38965: MUL
38966: ST_TO_ADDR
// end ; unit_vehicle :
38967: GO 39797
38969: LD_INT 2
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 39785
38977: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38978: LD_VAR 0 6
38982: PPUSH
38983: CALL_OW 264
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 42
38993: PUSH
38994: LD_INT 24
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: IN
39002: IFFALSE 39023
// points := [ 25 , 5 , 3 ] ;
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: LD_INT 25
39011: PUSH
39012: LD_INT 5
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39023: LD_VAR 0 6
39027: PPUSH
39028: CALL_OW 264
39032: PUSH
39033: LD_INT 4
39035: PUSH
39036: LD_INT 43
39038: PUSH
39039: LD_INT 25
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: IN
39047: IFFALSE 39068
// points := [ 40 , 15 , 5 ] ;
39049: LD_ADDR_VAR 0 9
39053: PUSH
39054: LD_INT 40
39056: PUSH
39057: LD_INT 15
39059: PUSH
39060: LD_INT 5
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39068: LD_VAR 0 6
39072: PPUSH
39073: CALL_OW 264
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 23
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: IN
39088: IFFALSE 39109
// points := [ 7 , 25 , 8 ] ;
39090: LD_ADDR_VAR 0 9
39094: PUSH
39095: LD_INT 7
39097: PUSH
39098: LD_INT 25
39100: PUSH
39101: LD_INT 8
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39109: LD_VAR 0 6
39113: PPUSH
39114: CALL_OW 264
39118: PUSH
39119: LD_INT 5
39121: PUSH
39122: LD_INT 27
39124: PUSH
39125: LD_INT 44
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: IN
39133: IFFALSE 39154
// points := [ 14 , 50 , 16 ] ;
39135: LD_ADDR_VAR 0 9
39139: PUSH
39140: LD_INT 14
39142: PUSH
39143: LD_INT 50
39145: PUSH
39146: LD_INT 16
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39154: LD_VAR 0 6
39158: PPUSH
39159: CALL_OW 264
39163: PUSH
39164: LD_INT 6
39166: PUSH
39167: LD_INT 46
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: IN
39174: IFFALSE 39195
// points := [ 32 , 120 , 70 ] ;
39176: LD_ADDR_VAR 0 9
39180: PUSH
39181: LD_INT 32
39183: PUSH
39184: LD_INT 120
39186: PUSH
39187: LD_INT 70
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39195: LD_VAR 0 6
39199: PPUSH
39200: CALL_OW 264
39204: PUSH
39205: LD_INT 7
39207: PUSH
39208: LD_INT 28
39210: PUSH
39211: LD_INT 45
39213: PUSH
39214: LD_INT 92
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: IN
39223: IFFALSE 39244
// points := [ 35 , 20 , 45 ] ;
39225: LD_ADDR_VAR 0 9
39229: PUSH
39230: LD_INT 35
39232: PUSH
39233: LD_INT 20
39235: PUSH
39236: LD_INT 45
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39244: LD_VAR 0 6
39248: PPUSH
39249: CALL_OW 264
39253: PUSH
39254: LD_INT 47
39256: PUSH
39257: EMPTY
39258: LIST
39259: IN
39260: IFFALSE 39281
// points := [ 67 , 45 , 75 ] ;
39262: LD_ADDR_VAR 0 9
39266: PUSH
39267: LD_INT 67
39269: PUSH
39270: LD_INT 45
39272: PUSH
39273: LD_INT 75
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39281: LD_VAR 0 6
39285: PPUSH
39286: CALL_OW 264
39290: PUSH
39291: LD_INT 26
39293: PUSH
39294: EMPTY
39295: LIST
39296: IN
39297: IFFALSE 39318
// points := [ 120 , 30 , 80 ] ;
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: LD_INT 120
39306: PUSH
39307: LD_INT 30
39309: PUSH
39310: LD_INT 80
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 264
39327: PUSH
39328: LD_INT 22
39330: PUSH
39331: EMPTY
39332: LIST
39333: IN
39334: IFFALSE 39355
// points := [ 40 , 1 , 1 ] ;
39336: LD_ADDR_VAR 0 9
39340: PUSH
39341: LD_INT 40
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39355: LD_VAR 0 6
39359: PPUSH
39360: CALL_OW 264
39364: PUSH
39365: LD_INT 29
39367: PUSH
39368: EMPTY
39369: LIST
39370: IN
39371: IFFALSE 39392
// points := [ 70 , 200 , 400 ] ;
39373: LD_ADDR_VAR 0 9
39377: PUSH
39378: LD_INT 70
39380: PUSH
39381: LD_INT 200
39383: PUSH
39384: LD_INT 400
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39392: LD_VAR 0 6
39396: PPUSH
39397: CALL_OW 264
39401: PUSH
39402: LD_INT 14
39404: PUSH
39405: LD_INT 53
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: IN
39412: IFFALSE 39433
// points := [ 40 , 10 , 20 ] ;
39414: LD_ADDR_VAR 0 9
39418: PUSH
39419: LD_INT 40
39421: PUSH
39422: LD_INT 10
39424: PUSH
39425: LD_INT 20
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39433: LD_VAR 0 6
39437: PPUSH
39438: CALL_OW 264
39442: PUSH
39443: LD_INT 9
39445: PUSH
39446: EMPTY
39447: LIST
39448: IN
39449: IFFALSE 39470
// points := [ 5 , 70 , 20 ] ;
39451: LD_ADDR_VAR 0 9
39455: PUSH
39456: LD_INT 5
39458: PUSH
39459: LD_INT 70
39461: PUSH
39462: LD_INT 20
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39470: LD_VAR 0 6
39474: PPUSH
39475: CALL_OW 264
39479: PUSH
39480: LD_INT 10
39482: PUSH
39483: EMPTY
39484: LIST
39485: IN
39486: IFFALSE 39507
// points := [ 35 , 110 , 70 ] ;
39488: LD_ADDR_VAR 0 9
39492: PUSH
39493: LD_INT 35
39495: PUSH
39496: LD_INT 110
39498: PUSH
39499: LD_INT 70
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39507: LD_VAR 0 6
39511: PPUSH
39512: CALL_OW 265
39516: PUSH
39517: LD_INT 25
39519: EQUAL
39520: IFFALSE 39541
// points := [ 80 , 65 , 100 ] ;
39522: LD_ADDR_VAR 0 9
39526: PUSH
39527: LD_INT 80
39529: PUSH
39530: LD_INT 65
39532: PUSH
39533: LD_INT 100
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39541: LD_VAR 0 6
39545: PPUSH
39546: CALL_OW 263
39550: PUSH
39551: LD_INT 1
39553: EQUAL
39554: IFFALSE 39589
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39556: LD_ADDR_VAR 0 10
39560: PUSH
39561: LD_VAR 0 10
39565: PUSH
39566: LD_VAR 0 6
39570: PPUSH
39571: CALL_OW 311
39575: PPUSH
39576: LD_INT 3
39578: PPUSH
39579: CALL_OW 259
39583: PUSH
39584: LD_INT 4
39586: MUL
39587: MUL
39588: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39589: LD_VAR 0 6
39593: PPUSH
39594: CALL_OW 263
39598: PUSH
39599: LD_INT 2
39601: EQUAL
39602: IFFALSE 39653
// begin j := IsControledBy ( i ) ;
39604: LD_ADDR_VAR 0 7
39608: PUSH
39609: LD_VAR 0 6
39613: PPUSH
39614: CALL_OW 312
39618: ST_TO_ADDR
// if j then
39619: LD_VAR 0 7
39623: IFFALSE 39653
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39625: LD_ADDR_VAR 0 10
39629: PUSH
39630: LD_VAR 0 10
39634: PUSH
39635: LD_VAR 0 7
39639: PPUSH
39640: LD_INT 3
39642: PPUSH
39643: CALL_OW 259
39647: PUSH
39648: LD_INT 3
39650: MUL
39651: MUL
39652: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39653: LD_VAR 0 6
39657: PPUSH
39658: CALL_OW 264
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 6
39668: PUSH
39669: LD_INT 46
39671: PUSH
39672: LD_INT 44
39674: PUSH
39675: LD_INT 47
39677: PUSH
39678: LD_INT 45
39680: PUSH
39681: LD_INT 28
39683: PUSH
39684: LD_INT 7
39686: PUSH
39687: LD_INT 27
39689: PUSH
39690: LD_INT 29
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: IN
39705: IFFALSE 39725
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: LD_INT 52
39715: PPUSH
39716: CALL_OW 321
39720: PUSH
39721: LD_INT 2
39723: EQUAL
39724: AND
39725: IFFALSE 39742
// bpoints := bpoints * 1.2 ;
39727: LD_ADDR_VAR 0 10
39731: PUSH
39732: LD_VAR 0 10
39736: PUSH
39737: LD_REAL  1.20000000000000E+0000
39740: MUL
39741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39742: LD_VAR 0 6
39746: PPUSH
39747: CALL_OW 264
39751: PUSH
39752: LD_INT 6
39754: PUSH
39755: LD_INT 46
39757: PUSH
39758: LD_INT 47
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: IN
39766: IFFALSE 39783
// bpoints := bpoints * 1.2 ;
39768: LD_ADDR_VAR 0 10
39772: PUSH
39773: LD_VAR 0 10
39777: PUSH
39778: LD_REAL  1.20000000000000E+0000
39781: MUL
39782: ST_TO_ADDR
// end ; unit_building :
39783: GO 39797
39785: LD_INT 3
39787: DOUBLE
39788: EQUAL
39789: IFTRUE 39793
39791: GO 39796
39793: POP
// ; end ;
39794: GO 39797
39796: POP
// for j = 1 to 3 do
39797: LD_ADDR_VAR 0 7
39801: PUSH
39802: DOUBLE
39803: LD_INT 1
39805: DEC
39806: ST_TO_ADDR
39807: LD_INT 3
39809: PUSH
39810: FOR_TO
39811: IFFALSE 39864
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39813: LD_ADDR_VAR 0 5
39817: PUSH
39818: LD_VAR 0 5
39822: PPUSH
39823: LD_VAR 0 7
39827: PPUSH
39828: LD_VAR 0 5
39832: PUSH
39833: LD_VAR 0 7
39837: ARRAY
39838: PUSH
39839: LD_VAR 0 9
39843: PUSH
39844: LD_VAR 0 7
39848: ARRAY
39849: PUSH
39850: LD_VAR 0 10
39854: MUL
39855: PLUS
39856: PPUSH
39857: CALL_OW 1
39861: ST_TO_ADDR
39862: GO 39810
39864: POP
39865: POP
// end ;
39866: GO 38339
39868: POP
39869: POP
// result := Replace ( result , 4 , tmp ) ;
39870: LD_ADDR_VAR 0 5
39874: PUSH
39875: LD_VAR 0 5
39879: PPUSH
39880: LD_INT 4
39882: PPUSH
39883: LD_VAR 0 8
39887: PPUSH
39888: CALL_OW 1
39892: ST_TO_ADDR
// end ;
39893: LD_VAR 0 5
39897: RET
// export function DangerAtRange ( unit , range ) ; begin
39898: LD_INT 0
39900: PPUSH
// if not unit then
39901: LD_VAR 0 1
39905: NOT
39906: IFFALSE 39910
// exit ;
39908: GO 39955
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 255
39924: PPUSH
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 250
39934: PPUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 251
39944: PPUSH
39945: LD_VAR 0 2
39949: PPUSH
39950: CALL 38189 0 4
39954: ST_TO_ADDR
// end ;
39955: LD_VAR 0 3
39959: RET
// export function DangerInArea ( side , area ) ; begin
39960: LD_INT 0
39962: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39963: LD_ADDR_VAR 0 3
39967: PUSH
39968: LD_VAR 0 2
39972: PPUSH
39973: LD_INT 81
39975: PUSH
39976: LD_VAR 0 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PPUSH
39985: CALL_OW 70
39989: ST_TO_ADDR
// end ;
39990: LD_VAR 0 3
39994: RET
// export function IsExtension ( b ) ; begin
39995: LD_INT 0
39997: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39998: LD_ADDR_VAR 0 2
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: LD_INT 23
40010: PUSH
40011: LD_INT 20
40013: PUSH
40014: LD_INT 22
40016: PUSH
40017: LD_INT 17
40019: PUSH
40020: LD_INT 24
40022: PUSH
40023: LD_INT 21
40025: PUSH
40026: LD_INT 19
40028: PUSH
40029: LD_INT 16
40031: PUSH
40032: LD_INT 25
40034: PUSH
40035: LD_INT 18
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: IN
40050: ST_TO_ADDR
// end ;
40051: LD_VAR 0 2
40055: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40056: LD_INT 0
40058: PPUSH
40059: PPUSH
40060: PPUSH
// result := [ ] ;
40061: LD_ADDR_VAR 0 4
40065: PUSH
40066: EMPTY
40067: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40068: LD_ADDR_VAR 0 5
40072: PUSH
40073: LD_VAR 0 2
40077: PPUSH
40078: LD_INT 21
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PPUSH
40088: CALL_OW 70
40092: ST_TO_ADDR
// if not tmp then
40093: LD_VAR 0 5
40097: NOT
40098: IFFALSE 40102
// exit ;
40100: GO 40166
// if checkLink then
40102: LD_VAR 0 3
40106: IFFALSE 40156
// begin for i in tmp do
40108: LD_ADDR_VAR 0 6
40112: PUSH
40113: LD_VAR 0 5
40117: PUSH
40118: FOR_IN
40119: IFFALSE 40154
// if GetBase ( i ) <> base then
40121: LD_VAR 0 6
40125: PPUSH
40126: CALL_OW 274
40130: PUSH
40131: LD_VAR 0 1
40135: NONEQUAL
40136: IFFALSE 40152
// ComLinkToBase ( base , i ) ;
40138: LD_VAR 0 1
40142: PPUSH
40143: LD_VAR 0 6
40147: PPUSH
40148: CALL_OW 169
40152: GO 40118
40154: POP
40155: POP
// end ; result := tmp ;
40156: LD_ADDR_VAR 0 4
40160: PUSH
40161: LD_VAR 0 5
40165: ST_TO_ADDR
// end ;
40166: LD_VAR 0 4
40170: RET
// export function ComComplete ( units , b ) ; var i ; begin
40171: LD_INT 0
40173: PPUSH
40174: PPUSH
// if not units then
40175: LD_VAR 0 1
40179: NOT
40180: IFFALSE 40184
// exit ;
40182: GO 40274
// for i in units do
40184: LD_ADDR_VAR 0 4
40188: PUSH
40189: LD_VAR 0 1
40193: PUSH
40194: FOR_IN
40195: IFFALSE 40272
// if BuildingStatus ( b ) = bs_build then
40197: LD_VAR 0 2
40201: PPUSH
40202: CALL_OW 461
40206: PUSH
40207: LD_INT 1
40209: EQUAL
40210: IFFALSE 40270
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40212: LD_VAR 0 4
40216: PPUSH
40217: LD_STRING h
40219: PUSH
40220: LD_VAR 0 2
40224: PPUSH
40225: CALL_OW 250
40229: PUSH
40230: LD_VAR 0 2
40234: PPUSH
40235: CALL_OW 251
40239: PUSH
40240: LD_VAR 0 2
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: PPUSH
40266: CALL_OW 446
40270: GO 40194
40272: POP
40273: POP
// end ;
40274: LD_VAR 0 3
40278: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40279: LD_INT 0
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40287: LD_VAR 0 1
40291: NOT
40292: IFTRUE 40309
40294: PUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: CALL_OW 263
40304: PUSH
40305: LD_INT 2
40307: NONEQUAL
40308: OR
40309: IFFALSE 40313
// exit ;
40311: GO 40629
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40313: LD_ADDR_VAR 0 6
40317: PUSH
40318: LD_INT 22
40320: PUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 255
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: LD_INT 36
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 34
40350: PUSH
40351: LD_INT 31
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PPUSH
40367: CALL_OW 69
40371: ST_TO_ADDR
// if not tmp then
40372: LD_VAR 0 6
40376: NOT
40377: IFFALSE 40381
// exit ;
40379: GO 40629
// result := [ ] ;
40381: LD_ADDR_VAR 0 2
40385: PUSH
40386: EMPTY
40387: ST_TO_ADDR
// for i in tmp do
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_VAR 0 6
40397: PUSH
40398: FOR_IN
40399: IFFALSE 40470
// begin t := UnitsInside ( i ) ;
40401: LD_ADDR_VAR 0 4
40405: PUSH
40406: LD_VAR 0 3
40410: PPUSH
40411: CALL_OW 313
40415: ST_TO_ADDR
// if t then
40416: LD_VAR 0 4
40420: IFFALSE 40468
// for j in t do
40422: LD_ADDR_VAR 0 7
40426: PUSH
40427: LD_VAR 0 4
40431: PUSH
40432: FOR_IN
40433: IFFALSE 40466
// result := Replace ( result , result + 1 , j ) ;
40435: LD_ADDR_VAR 0 2
40439: PUSH
40440: LD_VAR 0 2
40444: PPUSH
40445: LD_VAR 0 2
40449: PUSH
40450: LD_INT 1
40452: PLUS
40453: PPUSH
40454: LD_VAR 0 7
40458: PPUSH
40459: CALL_OW 1
40463: ST_TO_ADDR
40464: GO 40432
40466: POP
40467: POP
// end ;
40468: GO 40398
40470: POP
40471: POP
// if not result then
40472: LD_VAR 0 2
40476: NOT
40477: IFFALSE 40481
// exit ;
40479: GO 40629
// mech := result [ 1 ] ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: LD_VAR 0 2
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: ST_TO_ADDR
// if result > 1 then
40495: LD_VAR 0 2
40499: PUSH
40500: LD_INT 1
40502: GREATER
40503: IFFALSE 40615
// begin for i = 2 to result do
40505: LD_ADDR_VAR 0 3
40509: PUSH
40510: DOUBLE
40511: LD_INT 2
40513: DEC
40514: ST_TO_ADDR
40515: LD_VAR 0 2
40519: PUSH
40520: FOR_TO
40521: IFFALSE 40613
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40523: LD_ADDR_VAR 0 4
40527: PUSH
40528: LD_VAR 0 2
40532: PUSH
40533: LD_VAR 0 3
40537: ARRAY
40538: PPUSH
40539: LD_INT 3
40541: PPUSH
40542: CALL_OW 259
40546: PUSH
40547: LD_VAR 0 2
40551: PUSH
40552: LD_VAR 0 3
40556: ARRAY
40557: PPUSH
40558: CALL_OW 432
40562: MINUS
40563: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40564: LD_VAR 0 4
40568: PUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: LD_INT 3
40576: PPUSH
40577: CALL_OW 259
40581: PUSH
40582: LD_VAR 0 5
40586: PPUSH
40587: CALL_OW 432
40591: MINUS
40592: GREATEREQUAL
40593: IFFALSE 40611
// mech := result [ i ] ;
40595: LD_ADDR_VAR 0 5
40599: PUSH
40600: LD_VAR 0 2
40604: PUSH
40605: LD_VAR 0 3
40609: ARRAY
40610: ST_TO_ADDR
// end ;
40611: GO 40520
40613: POP
40614: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_VAR 0 5
40624: PPUSH
40625: CALL_OW 135
// end ;
40629: LD_VAR 0 2
40633: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40634: LD_INT 0
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
// result := [ ] ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: EMPTY
40655: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 266
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: IN
40676: NOT
40677: IFFALSE 40681
// exit ;
40679: GO 42321
// if name then
40681: LD_VAR 0 3
40685: IFFALSE 40701
// SetBName ( base_dep , name ) ;
40687: LD_VAR 0 1
40691: PPUSH
40692: LD_VAR 0 3
40696: PPUSH
40697: CALL_OW 500
// base := GetBase ( base_dep ) ;
40701: LD_ADDR_VAR 0 15
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 274
40715: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40716: LD_ADDR_VAR 0 16
40720: PUSH
40721: LD_VAR 0 1
40725: PPUSH
40726: CALL_OW 255
40730: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40731: LD_ADDR_VAR 0 17
40735: PUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 248
40745: ST_TO_ADDR
// if sources then
40746: LD_VAR 0 5
40750: IFFALSE 40797
// for i = 1 to 3 do
40752: LD_ADDR_VAR 0 8
40756: PUSH
40757: DOUBLE
40758: LD_INT 1
40760: DEC
40761: ST_TO_ADDR
40762: LD_INT 3
40764: PUSH
40765: FOR_TO
40766: IFFALSE 40795
// AddResourceType ( base , i , sources [ i ] ) ;
40768: LD_VAR 0 15
40772: PPUSH
40773: LD_VAR 0 8
40777: PPUSH
40778: LD_VAR 0 5
40782: PUSH
40783: LD_VAR 0 8
40787: ARRAY
40788: PPUSH
40789: CALL_OW 276
40793: GO 40765
40795: POP
40796: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40797: LD_ADDR_VAR 0 18
40801: PUSH
40802: LD_VAR 0 15
40806: PPUSH
40807: LD_VAR 0 2
40811: PPUSH
40812: LD_INT 1
40814: PPUSH
40815: CALL 40056 0 3
40819: ST_TO_ADDR
// InitHc ;
40820: CALL_OW 19
// InitUc ;
40824: CALL_OW 18
// uc_side := side ;
40828: LD_ADDR_OWVAR 20
40832: PUSH
40833: LD_VAR 0 16
40837: ST_TO_ADDR
// uc_nation := nation ;
40838: LD_ADDR_OWVAR 21
40842: PUSH
40843: LD_VAR 0 17
40847: ST_TO_ADDR
// if buildings then
40848: LD_VAR 0 18
40852: IFFALSE 42180
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40854: LD_ADDR_VAR 0 19
40858: PUSH
40859: LD_VAR 0 18
40863: PPUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 30
40869: PUSH
40870: LD_INT 29
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 30
40879: PUSH
40880: LD_INT 30
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: PPUSH
40892: CALL_OW 72
40896: ST_TO_ADDR
// if tmp then
40897: LD_VAR 0 19
40901: IFFALSE 40949
// for i in tmp do
40903: LD_ADDR_VAR 0 8
40907: PUSH
40908: LD_VAR 0 19
40912: PUSH
40913: FOR_IN
40914: IFFALSE 40947
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40916: LD_VAR 0 8
40920: PPUSH
40921: CALL_OW 250
40925: PPUSH
40926: LD_VAR 0 8
40930: PPUSH
40931: CALL_OW 251
40935: PPUSH
40936: LD_VAR 0 16
40940: PPUSH
40941: CALL_OW 441
40945: GO 40913
40947: POP
40948: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40949: LD_VAR 0 18
40953: PPUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 30
40959: PUSH
40960: LD_INT 32
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 30
40969: PUSH
40970: LD_INT 33
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: PPUSH
40982: CALL_OW 72
40986: IFFALSE 41074
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40988: LD_ADDR_VAR 0 8
40992: PUSH
40993: LD_VAR 0 18
40997: PPUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 30
41003: PUSH
41004: LD_INT 32
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 30
41013: PUSH
41014: LD_INT 33
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: PPUSH
41026: CALL_OW 72
41030: PUSH
41031: FOR_IN
41032: IFFALSE 41072
// begin if not GetBWeapon ( i ) then
41034: LD_VAR 0 8
41038: PPUSH
41039: CALL_OW 269
41043: NOT
41044: IFFALSE 41070
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41046: LD_VAR 0 8
41050: PPUSH
41051: LD_VAR 0 8
41055: PPUSH
41056: LD_VAR 0 2
41060: PPUSH
41061: CALL 42326 0 2
41065: PPUSH
41066: CALL_OW 431
// end ;
41070: GO 41031
41072: POP
41073: POP
// end ; for i = 1 to personel do
41074: LD_ADDR_VAR 0 8
41078: PUSH
41079: DOUBLE
41080: LD_INT 1
41082: DEC
41083: ST_TO_ADDR
41084: LD_VAR 0 6
41088: PUSH
41089: FOR_TO
41090: IFFALSE 42160
// begin if i > 4 then
41092: LD_VAR 0 8
41096: PUSH
41097: LD_INT 4
41099: GREATER
41100: IFFALSE 41104
// break ;
41102: GO 42160
// case i of 1 :
41104: LD_VAR 0 8
41108: PUSH
41109: LD_INT 1
41111: DOUBLE
41112: EQUAL
41113: IFTRUE 41117
41115: GO 41197
41117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41118: LD_ADDR_VAR 0 12
41122: PUSH
41123: LD_VAR 0 18
41127: PPUSH
41128: LD_INT 22
41130: PUSH
41131: LD_VAR 0 16
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 58
41142: PUSH
41143: EMPTY
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 30
41151: PUSH
41152: LD_INT 32
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 4
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 5
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: PPUSH
41190: CALL_OW 72
41194: ST_TO_ADDR
41195: GO 41419
41197: LD_INT 2
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41205
41203: GO 41267
41205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41206: LD_ADDR_VAR 0 12
41210: PUSH
41211: LD_VAR 0 18
41215: PPUSH
41216: LD_INT 22
41218: PUSH
41219: LD_VAR 0 16
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 30
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PPUSH
41260: CALL_OW 72
41264: ST_TO_ADDR
41265: GO 41419
41267: LD_INT 3
41269: DOUBLE
41270: EQUAL
41271: IFTRUE 41275
41273: GO 41337
41275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41276: LD_ADDR_VAR 0 12
41280: PUSH
41281: LD_VAR 0 18
41285: PPUSH
41286: LD_INT 22
41288: PUSH
41289: LD_VAR 0 16
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 30
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 30
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 72
41334: ST_TO_ADDR
41335: GO 41419
41337: LD_INT 4
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41418
41345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41346: LD_ADDR_VAR 0 12
41350: PUSH
41351: LD_VAR 0 18
41355: PPUSH
41356: LD_INT 22
41358: PUSH
41359: LD_VAR 0 16
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 30
41373: PUSH
41374: LD_INT 6
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 30
41383: PUSH
41384: LD_INT 7
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 30
41393: PUSH
41394: LD_INT 8
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PPUSH
41411: CALL_OW 72
41415: ST_TO_ADDR
41416: GO 41419
41418: POP
// if i = 1 then
41419: LD_VAR 0 8
41423: PUSH
41424: LD_INT 1
41426: EQUAL
41427: IFFALSE 41538
// begin tmp := [ ] ;
41429: LD_ADDR_VAR 0 19
41433: PUSH
41434: EMPTY
41435: ST_TO_ADDR
// for j in f do
41436: LD_ADDR_VAR 0 9
41440: PUSH
41441: LD_VAR 0 12
41445: PUSH
41446: FOR_IN
41447: IFFALSE 41520
// if GetBType ( j ) = b_bunker then
41449: LD_VAR 0 9
41453: PPUSH
41454: CALL_OW 266
41458: PUSH
41459: LD_INT 32
41461: EQUAL
41462: IFFALSE 41489
// tmp := Insert ( tmp , 1 , j ) else
41464: LD_ADDR_VAR 0 19
41468: PUSH
41469: LD_VAR 0 19
41473: PPUSH
41474: LD_INT 1
41476: PPUSH
41477: LD_VAR 0 9
41481: PPUSH
41482: CALL_OW 2
41486: ST_TO_ADDR
41487: GO 41518
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41489: LD_ADDR_VAR 0 19
41493: PUSH
41494: LD_VAR 0 19
41498: PPUSH
41499: LD_VAR 0 19
41503: PUSH
41504: LD_INT 1
41506: PLUS
41507: PPUSH
41508: LD_VAR 0 9
41512: PPUSH
41513: CALL_OW 2
41517: ST_TO_ADDR
41518: GO 41446
41520: POP
41521: POP
// if tmp then
41522: LD_VAR 0 19
41526: IFFALSE 41538
// f := tmp ;
41528: LD_ADDR_VAR 0 12
41532: PUSH
41533: LD_VAR 0 19
41537: ST_TO_ADDR
// end ; x := personel [ i ] ;
41538: LD_ADDR_VAR 0 13
41542: PUSH
41543: LD_VAR 0 6
41547: PUSH
41548: LD_VAR 0 8
41552: ARRAY
41553: ST_TO_ADDR
// if x = - 1 then
41554: LD_VAR 0 13
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: EQUAL
41563: IFFALSE 41774
// begin for j in f do
41565: LD_ADDR_VAR 0 9
41569: PUSH
41570: LD_VAR 0 12
41574: PUSH
41575: FOR_IN
41576: IFFALSE 41770
// repeat InitHc ;
41578: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41582: LD_VAR 0 9
41586: PPUSH
41587: CALL_OW 266
41591: PUSH
41592: LD_INT 5
41594: EQUAL
41595: IFFALSE 41665
// begin if UnitsInside ( j ) < 3 then
41597: LD_VAR 0 9
41601: PPUSH
41602: CALL_OW 313
41606: PUSH
41607: LD_INT 3
41609: LESS
41610: IFFALSE 41646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41612: LD_INT 0
41614: PPUSH
41615: LD_INT 5
41617: PUSH
41618: LD_INT 8
41620: PUSH
41621: LD_INT 9
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: PUSH
41629: LD_VAR 0 17
41633: ARRAY
41634: PPUSH
41635: LD_VAR 0 4
41639: PPUSH
41640: CALL_OW 380
41644: GO 41663
// PrepareHuman ( false , i , skill ) ;
41646: LD_INT 0
41648: PPUSH
41649: LD_VAR 0 8
41653: PPUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: CALL_OW 380
// end else
41663: GO 41682
// PrepareHuman ( false , i , skill ) ;
41665: LD_INT 0
41667: PPUSH
41668: LD_VAR 0 8
41672: PPUSH
41673: LD_VAR 0 4
41677: PPUSH
41678: CALL_OW 380
// un := CreateHuman ;
41682: LD_ADDR_VAR 0 14
41686: PUSH
41687: CALL_OW 44
41691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41692: LD_ADDR_VAR 0 7
41696: PUSH
41697: LD_VAR 0 7
41701: PPUSH
41702: LD_INT 1
41704: PPUSH
41705: LD_VAR 0 14
41709: PPUSH
41710: CALL_OW 2
41714: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41715: LD_VAR 0 14
41719: PPUSH
41720: LD_VAR 0 9
41724: PPUSH
41725: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41729: LD_VAR 0 9
41733: PPUSH
41734: CALL_OW 313
41738: PUSH
41739: LD_INT 6
41741: EQUAL
41742: IFTRUE 41766
41744: PUSH
41745: LD_VAR 0 9
41749: PPUSH
41750: CALL_OW 266
41754: PUSH
41755: LD_INT 32
41757: PUSH
41758: LD_INT 31
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: IN
41765: OR
41766: IFFALSE 41578
41768: GO 41575
41770: POP
41771: POP
// end else
41772: GO 42158
// for j = 1 to x do
41774: LD_ADDR_VAR 0 9
41778: PUSH
41779: DOUBLE
41780: LD_INT 1
41782: DEC
41783: ST_TO_ADDR
41784: LD_VAR 0 13
41788: PUSH
41789: FOR_TO
41790: IFFALSE 42156
// begin InitHc ;
41792: CALL_OW 19
// if not f then
41796: LD_VAR 0 12
41800: NOT
41801: IFFALSE 41890
// begin PrepareHuman ( false , i , skill ) ;
41803: LD_INT 0
41805: PPUSH
41806: LD_VAR 0 8
41810: PPUSH
41811: LD_VAR 0 4
41815: PPUSH
41816: CALL_OW 380
// un := CreateHuman ;
41820: LD_ADDR_VAR 0 14
41824: PUSH
41825: CALL_OW 44
41829: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41830: LD_ADDR_VAR 0 7
41834: PUSH
41835: LD_VAR 0 7
41839: PPUSH
41840: LD_INT 1
41842: PPUSH
41843: LD_VAR 0 14
41847: PPUSH
41848: CALL_OW 2
41852: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41853: LD_VAR 0 14
41857: PPUSH
41858: LD_VAR 0 1
41862: PPUSH
41863: CALL_OW 250
41867: PPUSH
41868: LD_VAR 0 1
41872: PPUSH
41873: CALL_OW 251
41877: PPUSH
41878: LD_INT 10
41880: PPUSH
41881: LD_INT 0
41883: PPUSH
41884: CALL_OW 50
// continue ;
41888: GO 41789
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41890: LD_VAR 0 12
41894: PUSH
41895: LD_INT 1
41897: ARRAY
41898: PPUSH
41899: CALL_OW 313
41903: IFFALSE 41931
41905: PUSH
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 32
41922: PUSH
41923: LD_INT 31
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: IN
41930: AND
41931: IFTRUE 41952
41933: PUSH
41934: LD_VAR 0 12
41938: PUSH
41939: LD_INT 1
41941: ARRAY
41942: PPUSH
41943: CALL_OW 313
41947: PUSH
41948: LD_INT 6
41950: EQUAL
41951: OR
41952: IFFALSE 41972
// f := Delete ( f , 1 ) ;
41954: LD_ADDR_VAR 0 12
41958: PUSH
41959: LD_VAR 0 12
41963: PPUSH
41964: LD_INT 1
41966: PPUSH
41967: CALL_OW 3
41971: ST_TO_ADDR
// if not f then
41972: LD_VAR 0 12
41976: NOT
41977: IFFALSE 41995
// begin x := x + 2 ;
41979: LD_ADDR_VAR 0 13
41983: PUSH
41984: LD_VAR 0 13
41988: PUSH
41989: LD_INT 2
41991: PLUS
41992: ST_TO_ADDR
// continue ;
41993: GO 41789
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41995: LD_VAR 0 12
41999: PUSH
42000: LD_INT 1
42002: ARRAY
42003: PPUSH
42004: CALL_OW 266
42008: PUSH
42009: LD_INT 5
42011: EQUAL
42012: IFFALSE 42086
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42014: LD_VAR 0 12
42018: PUSH
42019: LD_INT 1
42021: ARRAY
42022: PPUSH
42023: CALL_OW 313
42027: PUSH
42028: LD_INT 3
42030: LESS
42031: IFFALSE 42067
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42033: LD_INT 0
42035: PPUSH
42036: LD_INT 5
42038: PUSH
42039: LD_INT 8
42041: PUSH
42042: LD_INT 9
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: PUSH
42050: LD_VAR 0 17
42054: ARRAY
42055: PPUSH
42056: LD_VAR 0 4
42060: PPUSH
42061: CALL_OW 380
42065: GO 42084
// PrepareHuman ( false , i , skill ) ;
42067: LD_INT 0
42069: PPUSH
42070: LD_VAR 0 8
42074: PPUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 380
// end else
42084: GO 42103
// PrepareHuman ( false , i , skill ) ;
42086: LD_INT 0
42088: PPUSH
42089: LD_VAR 0 8
42093: PPUSH
42094: LD_VAR 0 4
42098: PPUSH
42099: CALL_OW 380
// un := CreateHuman ;
42103: LD_ADDR_VAR 0 14
42107: PUSH
42108: CALL_OW 44
42112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42113: LD_ADDR_VAR 0 7
42117: PUSH
42118: LD_VAR 0 7
42122: PPUSH
42123: LD_INT 1
42125: PPUSH
42126: LD_VAR 0 14
42130: PPUSH
42131: CALL_OW 2
42135: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42136: LD_VAR 0 14
42140: PPUSH
42141: LD_VAR 0 12
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PPUSH
42150: CALL_OW 52
// end ;
42154: GO 41789
42156: POP
42157: POP
// end ;
42158: GO 41089
42160: POP
42161: POP
// result := result ^ buildings ;
42162: LD_ADDR_VAR 0 7
42166: PUSH
42167: LD_VAR 0 7
42171: PUSH
42172: LD_VAR 0 18
42176: ADD
42177: ST_TO_ADDR
// end else
42178: GO 42321
// begin for i = 1 to personel do
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: DOUBLE
42186: LD_INT 1
42188: DEC
42189: ST_TO_ADDR
42190: LD_VAR 0 6
42194: PUSH
42195: FOR_TO
42196: IFFALSE 42319
// begin if i > 4 then
42198: LD_VAR 0 8
42202: PUSH
42203: LD_INT 4
42205: GREATER
42206: IFFALSE 42210
// break ;
42208: GO 42319
// x := personel [ i ] ;
42210: LD_ADDR_VAR 0 13
42214: PUSH
42215: LD_VAR 0 6
42219: PUSH
42220: LD_VAR 0 8
42224: ARRAY
42225: ST_TO_ADDR
// if x = - 1 then
42226: LD_VAR 0 13
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: EQUAL
42235: IFFALSE 42239
// continue ;
42237: GO 42195
// PrepareHuman ( false , i , skill ) ;
42239: LD_INT 0
42241: PPUSH
42242: LD_VAR 0 8
42246: PPUSH
42247: LD_VAR 0 4
42251: PPUSH
42252: CALL_OW 380
// un := CreateHuman ;
42256: LD_ADDR_VAR 0 14
42260: PUSH
42261: CALL_OW 44
42265: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42266: LD_VAR 0 14
42270: PPUSH
42271: LD_VAR 0 1
42275: PPUSH
42276: CALL_OW 250
42280: PPUSH
42281: LD_VAR 0 1
42285: PPUSH
42286: CALL_OW 251
42290: PPUSH
42291: LD_INT 10
42293: PPUSH
42294: LD_INT 0
42296: PPUSH
42297: CALL_OW 50
// result := result ^ un ;
42301: LD_ADDR_VAR 0 7
42305: PUSH
42306: LD_VAR 0 7
42310: PUSH
42311: LD_VAR 0 14
42315: ADD
42316: ST_TO_ADDR
// end ;
42317: GO 42195
42319: POP
42320: POP
// end ; end ;
42321: LD_VAR 0 7
42325: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42326: LD_INT 0
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
// result := false ;
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_INT 0
42351: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42352: LD_VAR 0 1
42356: NOT
42357: IFTRUE 42382
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 266
42369: PUSH
42370: LD_INT 32
42372: PUSH
42373: LD_INT 33
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: IN
42380: NOT
42381: OR
42382: IFFALSE 42386
// exit ;
42384: GO 43521
// nat := GetNation ( tower ) ;
42386: LD_ADDR_VAR 0 12
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 248
42400: ST_TO_ADDR
// side := GetSide ( tower ) ;
42401: LD_ADDR_VAR 0 16
42405: PUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 255
42415: ST_TO_ADDR
// x := GetX ( tower ) ;
42416: LD_ADDR_VAR 0 10
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 250
42430: ST_TO_ADDR
// y := GetY ( tower ) ;
42431: LD_ADDR_VAR 0 11
42435: PUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: CALL_OW 251
42445: ST_TO_ADDR
// if not x or not y then
42446: LD_VAR 0 10
42450: NOT
42451: IFTRUE 42460
42453: PUSH
42454: LD_VAR 0 11
42458: NOT
42459: OR
42460: IFFALSE 42464
// exit ;
42462: GO 43521
// weapon := 0 ;
42464: LD_ADDR_VAR 0 18
42468: PUSH
42469: LD_INT 0
42471: ST_TO_ADDR
// fac_list := [ ] ;
42472: LD_ADDR_VAR 0 17
42476: PUSH
42477: EMPTY
42478: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42479: LD_ADDR_VAR 0 6
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 274
42493: PPUSH
42494: LD_VAR 0 2
42498: PPUSH
42499: LD_INT 0
42501: PPUSH
42502: CALL 40056 0 3
42506: PPUSH
42507: LD_INT 30
42509: PUSH
42510: LD_INT 3
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PPUSH
42517: CALL_OW 72
42521: ST_TO_ADDR
// if not factories then
42522: LD_VAR 0 6
42526: NOT
42527: IFFALSE 42531
// exit ;
42529: GO 43521
// for i in factories do
42531: LD_ADDR_VAR 0 8
42535: PUSH
42536: LD_VAR 0 6
42540: PUSH
42541: FOR_IN
42542: IFFALSE 42567
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42544: LD_ADDR_VAR 0 17
42548: PUSH
42549: LD_VAR 0 17
42553: PUSH
42554: LD_VAR 0 8
42558: PPUSH
42559: CALL_OW 478
42563: UNION
42564: ST_TO_ADDR
42565: GO 42541
42567: POP
42568: POP
// if not fac_list then
42569: LD_VAR 0 17
42573: NOT
42574: IFFALSE 42578
// exit ;
42576: GO 43521
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: LD_INT 4
42585: PUSH
42586: LD_INT 5
42588: PUSH
42589: LD_INT 9
42591: PUSH
42592: LD_INT 10
42594: PUSH
42595: LD_INT 6
42597: PUSH
42598: LD_INT 7
42600: PUSH
42601: LD_INT 11
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 27
42615: PUSH
42616: LD_INT 28
42618: PUSH
42619: LD_INT 26
42621: PUSH
42622: LD_INT 30
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 43
42633: PUSH
42634: LD_INT 44
42636: PUSH
42637: LD_INT 46
42639: PUSH
42640: LD_INT 45
42642: PUSH
42643: LD_INT 47
42645: PUSH
42646: LD_INT 49
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: LD_VAR 0 12
42666: ARRAY
42667: ST_TO_ADDR
// list := list isect fac_list ;
42668: LD_ADDR_VAR 0 5
42672: PUSH
42673: LD_VAR 0 5
42677: PUSH
42678: LD_VAR 0 17
42682: ISECT
42683: ST_TO_ADDR
// if not list then
42684: LD_VAR 0 5
42688: NOT
42689: IFFALSE 42693
// exit ;
42691: GO 43521
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42693: LD_VAR 0 12
42697: PUSH
42698: LD_INT 3
42700: EQUAL
42701: IFFALSE 42713
42703: PUSH
42704: LD_INT 49
42706: PUSH
42707: LD_VAR 0 5
42711: IN
42712: AND
42713: IFFALSE 42733
42715: PUSH
42716: LD_INT 31
42718: PPUSH
42719: LD_VAR 0 16
42723: PPUSH
42724: CALL_OW 321
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: AND
42733: IFFALSE 42793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42735: LD_INT 22
42737: PUSH
42738: LD_VAR 0 16
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 35
42749: PUSH
42750: LD_INT 49
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 91
42759: PUSH
42760: LD_VAR 0 1
42764: PUSH
42765: LD_INT 10
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: LIST
42777: PPUSH
42778: CALL_OW 69
42782: NOT
42783: IFFALSE 42793
// weapon := ru_time_lapser ;
42785: LD_ADDR_VAR 0 18
42789: PUSH
42790: LD_INT 49
42792: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42793: LD_VAR 0 12
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: IN
42808: IFFALSE 42832
42810: PUSH
42811: LD_INT 11
42813: PUSH
42814: LD_VAR 0 5
42818: IN
42819: IFTRUE 42831
42821: PUSH
42822: LD_INT 30
42824: PUSH
42825: LD_VAR 0 5
42829: IN
42830: OR
42831: AND
42832: IFFALSE 42852
42834: PUSH
42835: LD_INT 6
42837: PPUSH
42838: LD_VAR 0 16
42842: PPUSH
42843: CALL_OW 321
42847: PUSH
42848: LD_INT 2
42850: EQUAL
42851: AND
42852: IFFALSE 43019
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42854: LD_INT 22
42856: PUSH
42857: LD_VAR 0 16
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 35
42871: PUSH
42872: LD_INT 11
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 35
42881: PUSH
42882: LD_INT 30
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 91
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_INT 18
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: NOT
42920: IFFALSE 42996
42922: PUSH
42923: LD_INT 22
42925: PUSH
42926: LD_VAR 0 16
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 30
42940: PUSH
42941: LD_INT 32
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 30
42950: PUSH
42951: LD_INT 33
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 91
42965: PUSH
42966: LD_VAR 0 1
42970: PUSH
42971: LD_INT 12
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: PPUSH
42987: CALL_OW 69
42991: PUSH
42992: LD_INT 2
42994: GREATER
42995: AND
42996: IFFALSE 43019
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42998: LD_ADDR_VAR 0 18
43002: PUSH
43003: LD_INT 11
43005: PUSH
43006: LD_INT 30
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_VAR 0 12
43017: ARRAY
43018: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43019: LD_VAR 0 18
43023: NOT
43024: IFFALSE 43044
43026: PUSH
43027: LD_INT 40
43029: PPUSH
43030: LD_VAR 0 16
43034: PPUSH
43035: CALL_OW 321
43039: PUSH
43040: LD_INT 2
43042: EQUAL
43043: AND
43044: IFFALSE 43080
43046: PUSH
43047: LD_INT 7
43049: PUSH
43050: LD_VAR 0 5
43054: IN
43055: IFTRUE 43067
43057: PUSH
43058: LD_INT 28
43060: PUSH
43061: LD_VAR 0 5
43065: IN
43066: OR
43067: IFTRUE 43079
43069: PUSH
43070: LD_INT 45
43072: PUSH
43073: LD_VAR 0 5
43077: IN
43078: OR
43079: AND
43080: IFFALSE 43334
// begin hex := GetHexInfo ( x , y ) ;
43082: LD_ADDR_VAR 0 4
43086: PUSH
43087: LD_VAR 0 10
43091: PPUSH
43092: LD_VAR 0 11
43096: PPUSH
43097: CALL_OW 546
43101: ST_TO_ADDR
// if hex [ 1 ] then
43102: LD_VAR 0 4
43106: PUSH
43107: LD_INT 1
43109: ARRAY
43110: IFFALSE 43114
// exit ;
43112: GO 43521
// height := hex [ 2 ] ;
43114: LD_ADDR_VAR 0 15
43118: PUSH
43119: LD_VAR 0 4
43123: PUSH
43124: LD_INT 2
43126: ARRAY
43127: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43128: LD_ADDR_VAR 0 14
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// for i in tmp do
43151: LD_ADDR_VAR 0 8
43155: PUSH
43156: LD_VAR 0 14
43160: PUSH
43161: FOR_IN
43162: IFFALSE 43332
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43164: LD_ADDR_VAR 0 9
43168: PUSH
43169: LD_VAR 0 10
43173: PPUSH
43174: LD_VAR 0 8
43178: PPUSH
43179: LD_INT 5
43181: PPUSH
43182: CALL_OW 272
43186: PUSH
43187: LD_VAR 0 11
43191: PPUSH
43192: LD_VAR 0 8
43196: PPUSH
43197: LD_INT 5
43199: PPUSH
43200: CALL_OW 273
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43209: LD_VAR 0 9
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: PPUSH
43218: LD_VAR 0 9
43222: PUSH
43223: LD_INT 2
43225: ARRAY
43226: PPUSH
43227: CALL_OW 488
43231: IFFALSE 43330
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43233: LD_ADDR_VAR 0 4
43237: PUSH
43238: LD_VAR 0 9
43242: PUSH
43243: LD_INT 1
43245: ARRAY
43246: PPUSH
43247: LD_VAR 0 9
43251: PUSH
43252: LD_INT 2
43254: ARRAY
43255: PPUSH
43256: CALL_OW 546
43260: ST_TO_ADDR
// if hex [ 1 ] then
43261: LD_VAR 0 4
43265: PUSH
43266: LD_INT 1
43268: ARRAY
43269: IFFALSE 43273
// continue ;
43271: GO 43161
// h := hex [ 2 ] ;
43273: LD_ADDR_VAR 0 13
43277: PUSH
43278: LD_VAR 0 4
43282: PUSH
43283: LD_INT 2
43285: ARRAY
43286: ST_TO_ADDR
// if h + 7 < height then
43287: LD_VAR 0 13
43291: PUSH
43292: LD_INT 7
43294: PLUS
43295: PUSH
43296: LD_VAR 0 15
43300: LESS
43301: IFFALSE 43330
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43303: LD_ADDR_VAR 0 18
43307: PUSH
43308: LD_INT 7
43310: PUSH
43311: LD_INT 28
43313: PUSH
43314: LD_INT 45
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: PUSH
43322: LD_VAR 0 12
43326: ARRAY
43327: ST_TO_ADDR
// break ;
43328: GO 43332
// end ; end ; end ;
43330: GO 43161
43332: POP
43333: POP
// end ; if not weapon then
43334: LD_VAR 0 18
43338: NOT
43339: IFFALSE 43399
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43341: LD_ADDR_VAR 0 5
43345: PUSH
43346: LD_VAR 0 5
43350: PUSH
43351: LD_INT 11
43353: PUSH
43354: LD_INT 30
43356: PUSH
43357: LD_INT 49
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: DIFF
43365: ST_TO_ADDR
// if not list then
43366: LD_VAR 0 5
43370: NOT
43371: IFFALSE 43375
// exit ;
43373: GO 43521
// weapon := list [ rand ( 1 , list ) ] ;
43375: LD_ADDR_VAR 0 18
43379: PUSH
43380: LD_VAR 0 5
43384: PUSH
43385: LD_INT 1
43387: PPUSH
43388: LD_VAR 0 5
43392: PPUSH
43393: CALL_OW 12
43397: ARRAY
43398: ST_TO_ADDR
// end ; if weapon then
43399: LD_VAR 0 18
43403: IFFALSE 43521
// begin tmp := CostOfWeapon ( weapon ) ;
43405: LD_ADDR_VAR 0 14
43409: PUSH
43410: LD_VAR 0 18
43414: PPUSH
43415: CALL_OW 451
43419: ST_TO_ADDR
// j := GetBase ( tower ) ;
43420: LD_ADDR_VAR 0 9
43424: PUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 274
43434: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43435: LD_VAR 0 9
43439: PPUSH
43440: LD_INT 1
43442: PPUSH
43443: CALL_OW 275
43447: PUSH
43448: LD_VAR 0 14
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: GREATEREQUAL
43457: IFFALSE 43483
43459: PUSH
43460: LD_VAR 0 9
43464: PPUSH
43465: LD_INT 2
43467: PPUSH
43468: CALL_OW 275
43472: PUSH
43473: LD_VAR 0 14
43477: PUSH
43478: LD_INT 2
43480: ARRAY
43481: GREATEREQUAL
43482: AND
43483: IFFALSE 43509
43485: PUSH
43486: LD_VAR 0 9
43490: PPUSH
43491: LD_INT 3
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 14
43503: PUSH
43504: LD_INT 3
43506: ARRAY
43507: GREATEREQUAL
43508: AND
43509: IFFALSE 43521
// result := weapon ;
43511: LD_ADDR_VAR 0 3
43515: PUSH
43516: LD_VAR 0 18
43520: ST_TO_ADDR
// end ; end ;
43521: LD_VAR 0 3
43525: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
// result := true ;
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 1
43537: ST_TO_ADDR
// if array1 = array2 then
43538: LD_VAR 0 1
43542: PUSH
43543: LD_VAR 0 2
43547: EQUAL
43548: IFFALSE 43608
// begin for i = 1 to array1 do
43550: LD_ADDR_VAR 0 4
43554: PUSH
43555: DOUBLE
43556: LD_INT 1
43558: DEC
43559: ST_TO_ADDR
43560: LD_VAR 0 1
43564: PUSH
43565: FOR_TO
43566: IFFALSE 43604
// if array1 [ i ] <> array2 [ i ] then
43568: LD_VAR 0 1
43572: PUSH
43573: LD_VAR 0 4
43577: ARRAY
43578: PUSH
43579: LD_VAR 0 2
43583: PUSH
43584: LD_VAR 0 4
43588: ARRAY
43589: NONEQUAL
43590: IFFALSE 43602
// begin result := false ;
43592: LD_ADDR_VAR 0 3
43596: PUSH
43597: LD_INT 0
43599: ST_TO_ADDR
// break ;
43600: GO 43604
// end ;
43602: GO 43565
43604: POP
43605: POP
// end else
43606: GO 43616
// result := false ;
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_INT 0
43615: ST_TO_ADDR
// end ;
43616: LD_VAR 0 3
43620: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43621: LD_INT 0
43623: PPUSH
43624: PPUSH
// if not array1 or not array2 then
43625: LD_VAR 0 1
43629: NOT
43630: IFTRUE 43639
43632: PUSH
43633: LD_VAR 0 2
43637: NOT
43638: OR
43639: IFFALSE 43643
// exit ;
43641: GO 43707
// result := true ;
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_INT 1
43650: ST_TO_ADDR
// for i = 1 to array1 do
43651: LD_ADDR_VAR 0 4
43655: PUSH
43656: DOUBLE
43657: LD_INT 1
43659: DEC
43660: ST_TO_ADDR
43661: LD_VAR 0 1
43665: PUSH
43666: FOR_TO
43667: IFFALSE 43705
// if array1 [ i ] <> array2 [ i ] then
43669: LD_VAR 0 1
43673: PUSH
43674: LD_VAR 0 4
43678: ARRAY
43679: PUSH
43680: LD_VAR 0 2
43684: PUSH
43685: LD_VAR 0 4
43689: ARRAY
43690: NONEQUAL
43691: IFFALSE 43703
// begin result := false ;
43693: LD_ADDR_VAR 0 3
43697: PUSH
43698: LD_INT 0
43700: ST_TO_ADDR
// break ;
43701: GO 43705
// end ;
43703: GO 43666
43705: POP
43706: POP
// end ;
43707: LD_VAR 0 3
43711: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43712: LD_INT 0
43714: PPUSH
43715: PPUSH
43716: PPUSH
// pom := GetBase ( fac ) ;
43717: LD_ADDR_VAR 0 5
43721: PUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: CALL_OW 274
43731: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43732: LD_ADDR_VAR 0 4
43736: PUSH
43737: LD_VAR 0 2
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: PPUSH
43746: LD_VAR 0 2
43750: PUSH
43751: LD_INT 2
43753: ARRAY
43754: PPUSH
43755: LD_VAR 0 2
43759: PUSH
43760: LD_INT 3
43762: ARRAY
43763: PPUSH
43764: LD_VAR 0 2
43768: PUSH
43769: LD_INT 4
43771: ARRAY
43772: PPUSH
43773: CALL_OW 449
43777: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43778: LD_ADDR_VAR 0 3
43782: PUSH
43783: LD_VAR 0 5
43787: PPUSH
43788: LD_INT 1
43790: PPUSH
43791: CALL_OW 275
43795: PUSH
43796: LD_VAR 0 4
43800: PUSH
43801: LD_INT 1
43803: ARRAY
43804: GREATEREQUAL
43805: IFFALSE 43831
43807: PUSH
43808: LD_VAR 0 5
43812: PPUSH
43813: LD_INT 2
43815: PPUSH
43816: CALL_OW 275
43820: PUSH
43821: LD_VAR 0 4
43825: PUSH
43826: LD_INT 2
43828: ARRAY
43829: GREATEREQUAL
43830: AND
43831: IFFALSE 43857
43833: PUSH
43834: LD_VAR 0 5
43838: PPUSH
43839: LD_INT 3
43841: PPUSH
43842: CALL_OW 275
43846: PUSH
43847: LD_VAR 0 4
43851: PUSH
43852: LD_INT 3
43854: ARRAY
43855: GREATEREQUAL
43856: AND
43857: ST_TO_ADDR
// end ;
43858: LD_VAR 0 3
43862: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43863: LD_INT 0
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
// pom := GetBase ( building ) ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 274
43883: ST_TO_ADDR
// if not pom then
43884: LD_VAR 0 3
43888: NOT
43889: IFFALSE 43893
// exit ;
43891: GO 44067
// btype := GetBType ( building ) ;
43893: LD_ADDR_VAR 0 5
43897: PUSH
43898: LD_VAR 0 1
43902: PPUSH
43903: CALL_OW 266
43907: ST_TO_ADDR
// if btype = b_armoury then
43908: LD_VAR 0 5
43912: PUSH
43913: LD_INT 4
43915: EQUAL
43916: IFFALSE 43926
// btype := b_barracks ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_INT 5
43925: ST_TO_ADDR
// if btype = b_depot then
43926: LD_VAR 0 5
43930: PUSH
43931: LD_INT 0
43933: EQUAL
43934: IFFALSE 43944
// btype := b_warehouse ;
43936: LD_ADDR_VAR 0 5
43940: PUSH
43941: LD_INT 1
43943: ST_TO_ADDR
// if btype = b_workshop then
43944: LD_VAR 0 5
43948: PUSH
43949: LD_INT 2
43951: EQUAL
43952: IFFALSE 43962
// btype := b_factory ;
43954: LD_ADDR_VAR 0 5
43958: PUSH
43959: LD_INT 3
43961: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43962: LD_ADDR_VAR 0 4
43966: PUSH
43967: LD_VAR 0 5
43971: PPUSH
43972: LD_VAR 0 1
43976: PPUSH
43977: CALL_OW 248
43981: PPUSH
43982: CALL_OW 450
43986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43987: LD_ADDR_VAR 0 2
43991: PUSH
43992: LD_VAR 0 3
43996: PPUSH
43997: LD_INT 1
43999: PPUSH
44000: CALL_OW 275
44004: PUSH
44005: LD_VAR 0 4
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: GREATEREQUAL
44014: IFFALSE 44040
44016: PUSH
44017: LD_VAR 0 3
44021: PPUSH
44022: LD_INT 2
44024: PPUSH
44025: CALL_OW 275
44029: PUSH
44030: LD_VAR 0 4
44034: PUSH
44035: LD_INT 2
44037: ARRAY
44038: GREATEREQUAL
44039: AND
44040: IFFALSE 44066
44042: PUSH
44043: LD_VAR 0 3
44047: PPUSH
44048: LD_INT 3
44050: PPUSH
44051: CALL_OW 275
44055: PUSH
44056: LD_VAR 0 4
44060: PUSH
44061: LD_INT 3
44063: ARRAY
44064: GREATEREQUAL
44065: AND
44066: ST_TO_ADDR
// end ;
44067: LD_VAR 0 2
44071: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44072: LD_INT 0
44074: PPUSH
44075: PPUSH
44076: PPUSH
// pom := GetBase ( building ) ;
44077: LD_ADDR_VAR 0 4
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 274
44091: ST_TO_ADDR
// if not pom then
44092: LD_VAR 0 4
44096: NOT
44097: IFFALSE 44101
// exit ;
44099: GO 44206
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44101: LD_ADDR_VAR 0 5
44105: PUSH
44106: LD_VAR 0 2
44110: PPUSH
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 248
44120: PPUSH
44121: CALL_OW 450
44125: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_VAR 0 4
44135: PPUSH
44136: LD_INT 1
44138: PPUSH
44139: CALL_OW 275
44143: PUSH
44144: LD_VAR 0 5
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: GREATEREQUAL
44153: IFFALSE 44179
44155: PUSH
44156: LD_VAR 0 4
44160: PPUSH
44161: LD_INT 2
44163: PPUSH
44164: CALL_OW 275
44168: PUSH
44169: LD_VAR 0 5
44173: PUSH
44174: LD_INT 2
44176: ARRAY
44177: GREATEREQUAL
44178: AND
44179: IFFALSE 44205
44181: PUSH
44182: LD_VAR 0 4
44186: PPUSH
44187: LD_INT 3
44189: PPUSH
44190: CALL_OW 275
44194: PUSH
44195: LD_VAR 0 5
44199: PUSH
44200: LD_INT 3
44202: ARRAY
44203: GREATEREQUAL
44204: AND
44205: ST_TO_ADDR
// end ;
44206: LD_VAR 0 3
44210: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44211: LD_INT 0
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
// result := false ;
44224: LD_ADDR_VAR 0 8
44228: PUSH
44229: LD_INT 0
44231: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44232: LD_VAR 0 5
44236: NOT
44237: IFTRUE 44246
44239: PUSH
44240: LD_VAR 0 1
44244: NOT
44245: OR
44246: IFTRUE 44255
44248: PUSH
44249: LD_VAR 0 2
44253: NOT
44254: OR
44255: IFTRUE 44264
44257: PUSH
44258: LD_VAR 0 3
44262: NOT
44263: OR
44264: IFFALSE 44268
// exit ;
44266: GO 45094
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44268: LD_ADDR_VAR 0 14
44272: PUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: LD_VAR 0 2
44282: PPUSH
44283: LD_VAR 0 3
44287: PPUSH
44288: LD_VAR 0 4
44292: PPUSH
44293: LD_VAR 0 5
44297: PUSH
44298: LD_INT 1
44300: ARRAY
44301: PPUSH
44302: CALL_OW 248
44306: PPUSH
44307: LD_INT 0
44309: PPUSH
44310: CALL 46375 0 6
44314: ST_TO_ADDR
// if not hexes then
44315: LD_VAR 0 14
44319: NOT
44320: IFFALSE 44324
// exit ;
44322: GO 45094
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44324: LD_ADDR_VAR 0 17
44328: PUSH
44329: LD_VAR 0 5
44333: PPUSH
44334: LD_INT 22
44336: PUSH
44337: LD_VAR 0 13
44341: PPUSH
44342: CALL_OW 255
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 30
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 30
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PPUSH
44383: CALL_OW 72
44387: ST_TO_ADDR
// for i = 1 to hexes do
44388: LD_ADDR_VAR 0 9
44392: PUSH
44393: DOUBLE
44394: LD_INT 1
44396: DEC
44397: ST_TO_ADDR
44398: LD_VAR 0 14
44402: PUSH
44403: FOR_TO
44404: IFFALSE 45092
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44406: LD_ADDR_VAR 0 13
44410: PUSH
44411: LD_VAR 0 14
44415: PUSH
44416: LD_VAR 0 9
44420: ARRAY
44421: PUSH
44422: LD_INT 1
44424: ARRAY
44425: PPUSH
44426: LD_VAR 0 14
44430: PUSH
44431: LD_VAR 0 9
44435: ARRAY
44436: PUSH
44437: LD_INT 2
44439: ARRAY
44440: PPUSH
44441: CALL_OW 428
44445: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44446: LD_VAR 0 14
44450: PUSH
44451: LD_VAR 0 9
44455: ARRAY
44456: PUSH
44457: LD_INT 1
44459: ARRAY
44460: PPUSH
44461: LD_VAR 0 14
44465: PUSH
44466: LD_VAR 0 9
44470: ARRAY
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: PPUSH
44476: CALL_OW 351
44480: IFTRUE 44519
44482: PUSH
44483: LD_VAR 0 14
44487: PUSH
44488: LD_VAR 0 9
44492: ARRAY
44493: PUSH
44494: LD_INT 1
44496: ARRAY
44497: PPUSH
44498: LD_VAR 0 14
44502: PUSH
44503: LD_VAR 0 9
44507: ARRAY
44508: PUSH
44509: LD_INT 2
44511: ARRAY
44512: PPUSH
44513: CALL_OW 488
44517: NOT
44518: OR
44519: IFTRUE 44536
44521: PUSH
44522: LD_VAR 0 13
44526: PPUSH
44527: CALL_OW 247
44531: PUSH
44532: LD_INT 3
44534: EQUAL
44535: OR
44536: IFFALSE 44542
// exit ;
44538: POP
44539: POP
44540: GO 45094
// if not tmp then
44542: LD_VAR 0 13
44546: NOT
44547: IFFALSE 44551
// continue ;
44549: GO 44403
// result := true ;
44551: LD_ADDR_VAR 0 8
44555: PUSH
44556: LD_INT 1
44558: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44559: LD_VAR 0 6
44563: IFFALSE 44580
44565: PUSH
44566: LD_VAR 0 13
44570: PPUSH
44571: CALL_OW 247
44575: PUSH
44576: LD_INT 2
44578: EQUAL
44579: AND
44580: IFFALSE 44597
44582: PUSH
44583: LD_VAR 0 13
44587: PPUSH
44588: CALL_OW 263
44592: PUSH
44593: LD_INT 1
44595: EQUAL
44596: AND
44597: IFFALSE 44761
// begin if IsDrivenBy ( tmp ) then
44599: LD_VAR 0 13
44603: PPUSH
44604: CALL_OW 311
44608: IFFALSE 44612
// continue ;
44610: GO 44403
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44612: LD_VAR 0 6
44616: PPUSH
44617: LD_INT 3
44619: PUSH
44620: LD_INT 60
44622: PUSH
44623: EMPTY
44624: LIST
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: PUSH
44633: LD_INT 55
44635: PUSH
44636: EMPTY
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PPUSH
44647: CALL_OW 72
44651: IFFALSE 44759
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44653: LD_ADDR_VAR 0 18
44657: PUSH
44658: LD_VAR 0 6
44662: PPUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 60
44668: PUSH
44669: EMPTY
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 55
44681: PUSH
44682: EMPTY
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PPUSH
44693: CALL_OW 72
44697: PUSH
44698: LD_INT 1
44700: ARRAY
44701: ST_TO_ADDR
// if IsInUnit ( driver ) then
44702: LD_VAR 0 18
44706: PPUSH
44707: CALL_OW 310
44711: IFFALSE 44722
// ComExit ( driver ) ;
44713: LD_VAR 0 18
44717: PPUSH
44718: CALL 70365 0 1
// AddComEnterUnit ( driver , tmp ) ;
44722: LD_VAR 0 18
44726: PPUSH
44727: LD_VAR 0 13
44731: PPUSH
44732: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44736: LD_VAR 0 18
44740: PPUSH
44741: LD_VAR 0 7
44745: PPUSH
44746: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44750: LD_VAR 0 18
44754: PPUSH
44755: CALL_OW 181
// end ; continue ;
44759: GO 44403
// end ; if not cleaners or not tmp in cleaners then
44761: LD_VAR 0 6
44765: NOT
44766: IFTRUE 44781
44768: PUSH
44769: LD_VAR 0 13
44773: PUSH
44774: LD_VAR 0 6
44778: IN
44779: NOT
44780: OR
44781: IFFALSE 45090
// begin if dep then
44783: LD_VAR 0 17
44787: IFFALSE 44923
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44789: LD_ADDR_VAR 0 16
44793: PUSH
44794: LD_VAR 0 17
44798: PUSH
44799: LD_INT 1
44801: ARRAY
44802: PPUSH
44803: CALL_OW 250
44807: PPUSH
44808: LD_VAR 0 17
44812: PUSH
44813: LD_INT 1
44815: ARRAY
44816: PPUSH
44817: CALL_OW 254
44821: PPUSH
44822: LD_INT 5
44824: PPUSH
44825: CALL_OW 272
44829: PUSH
44830: LD_VAR 0 17
44834: PUSH
44835: LD_INT 1
44837: ARRAY
44838: PPUSH
44839: CALL_OW 251
44843: PPUSH
44844: LD_VAR 0 17
44848: PUSH
44849: LD_INT 1
44851: ARRAY
44852: PPUSH
44853: CALL_OW 254
44857: PPUSH
44858: LD_INT 5
44860: PPUSH
44861: CALL_OW 273
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44870: LD_VAR 0 16
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PPUSH
44879: LD_VAR 0 16
44883: PUSH
44884: LD_INT 2
44886: ARRAY
44887: PPUSH
44888: CALL_OW 488
44892: IFFALSE 44923
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44894: LD_VAR 0 13
44898: PPUSH
44899: LD_VAR 0 16
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: LD_VAR 0 16
44912: PUSH
44913: LD_INT 2
44915: ARRAY
44916: PPUSH
44917: CALL_OW 111
// continue ;
44921: GO 44403
// end ; end ; r := GetDir ( tmp ) ;
44923: LD_ADDR_VAR 0 15
44927: PUSH
44928: LD_VAR 0 13
44932: PPUSH
44933: CALL_OW 254
44937: ST_TO_ADDR
// if r = 5 then
44938: LD_VAR 0 15
44942: PUSH
44943: LD_INT 5
44945: EQUAL
44946: IFFALSE 44956
// r := 0 ;
44948: LD_ADDR_VAR 0 15
44952: PUSH
44953: LD_INT 0
44955: ST_TO_ADDR
// for j = r to 5 do
44956: LD_ADDR_VAR 0 10
44960: PUSH
44961: DOUBLE
44962: LD_VAR 0 15
44966: DEC
44967: ST_TO_ADDR
44968: LD_INT 5
44970: PUSH
44971: FOR_TO
44972: IFFALSE 45088
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44974: LD_ADDR_VAR 0 11
44978: PUSH
44979: LD_VAR 0 13
44983: PPUSH
44984: CALL_OW 250
44988: PPUSH
44989: LD_VAR 0 10
44993: PPUSH
44994: LD_INT 2
44996: PPUSH
44997: CALL_OW 272
45001: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45002: LD_ADDR_VAR 0 12
45006: PUSH
45007: LD_VAR 0 13
45011: PPUSH
45012: CALL_OW 251
45016: PPUSH
45017: LD_VAR 0 10
45021: PPUSH
45022: LD_INT 2
45024: PPUSH
45025: CALL_OW 273
45029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45030: LD_VAR 0 11
45034: PPUSH
45035: LD_VAR 0 12
45039: PPUSH
45040: CALL_OW 488
45044: IFFALSE 45063
45046: PUSH
45047: LD_VAR 0 11
45051: PPUSH
45052: LD_VAR 0 12
45056: PPUSH
45057: CALL_OW 428
45061: NOT
45062: AND
45063: IFFALSE 45086
// begin ComMoveXY ( tmp , _x , _y ) ;
45065: LD_VAR 0 13
45069: PPUSH
45070: LD_VAR 0 11
45074: PPUSH
45075: LD_VAR 0 12
45079: PPUSH
45080: CALL_OW 111
// break ;
45084: GO 45088
// end ; end ;
45086: GO 44971
45088: POP
45089: POP
// end ; end ;
45090: GO 44403
45092: POP
45093: POP
// end ;
45094: LD_VAR 0 8
45098: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45099: LD_INT 0
45101: PPUSH
// result := true ;
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45110: LD_VAR 0 2
45114: PUSH
45115: LD_INT 24
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45129
45121: LD_INT 33
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45154
45129: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 32
45137: PPUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 321
45147: PUSH
45148: LD_INT 2
45150: EQUAL
45151: ST_TO_ADDR
45152: GO 45470
45154: LD_INT 20
45156: DOUBLE
45157: EQUAL
45158: IFTRUE 45162
45160: GO 45187
45162: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45163: LD_ADDR_VAR 0 3
45167: PUSH
45168: LD_INT 6
45170: PPUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 321
45180: PUSH
45181: LD_INT 2
45183: EQUAL
45184: ST_TO_ADDR
45185: GO 45470
45187: LD_INT 22
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45201
45193: LD_INT 36
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45201
45199: GO 45226
45201: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 15
45209: PPUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 321
45219: PUSH
45220: LD_INT 2
45222: EQUAL
45223: ST_TO_ADDR
45224: GO 45470
45226: LD_INT 30
45228: DOUBLE
45229: EQUAL
45230: IFTRUE 45234
45232: GO 45259
45234: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45235: LD_ADDR_VAR 0 3
45239: PUSH
45240: LD_INT 20
45242: PPUSH
45243: LD_VAR 0 1
45247: PPUSH
45248: CALL_OW 321
45252: PUSH
45253: LD_INT 2
45255: EQUAL
45256: ST_TO_ADDR
45257: GO 45470
45259: LD_INT 28
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45273
45265: LD_INT 21
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45298
45273: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_INT 21
45281: PPUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 321
45291: PUSH
45292: LD_INT 2
45294: EQUAL
45295: ST_TO_ADDR
45296: GO 45470
45298: LD_INT 16
45300: DOUBLE
45301: EQUAL
45302: IFTRUE 45306
45304: GO 45331
45306: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 84
45314: PPUSH
45315: LD_VAR 0 1
45319: PPUSH
45320: CALL_OW 321
45324: PUSH
45325: LD_INT 2
45327: EQUAL
45328: ST_TO_ADDR
45329: GO 45470
45331: LD_INT 19
45333: DOUBLE
45334: EQUAL
45335: IFTRUE 45345
45337: LD_INT 23
45339: DOUBLE
45340: EQUAL
45341: IFTRUE 45345
45343: GO 45370
45345: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45346: LD_ADDR_VAR 0 3
45350: PUSH
45351: LD_INT 83
45353: PPUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: CALL_OW 321
45363: PUSH
45364: LD_INT 2
45366: EQUAL
45367: ST_TO_ADDR
45368: GO 45470
45370: LD_INT 17
45372: DOUBLE
45373: EQUAL
45374: IFTRUE 45378
45376: GO 45403
45378: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45379: LD_ADDR_VAR 0 3
45383: PUSH
45384: LD_INT 39
45386: PPUSH
45387: LD_VAR 0 1
45391: PPUSH
45392: CALL_OW 321
45396: PUSH
45397: LD_INT 2
45399: EQUAL
45400: ST_TO_ADDR
45401: GO 45470
45403: LD_INT 18
45405: DOUBLE
45406: EQUAL
45407: IFTRUE 45411
45409: GO 45436
45411: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45412: LD_ADDR_VAR 0 3
45416: PUSH
45417: LD_INT 40
45419: PPUSH
45420: LD_VAR 0 1
45424: PPUSH
45425: CALL_OW 321
45429: PUSH
45430: LD_INT 2
45432: EQUAL
45433: ST_TO_ADDR
45434: GO 45470
45436: LD_INT 27
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45469
45444: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 35
45452: PPUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 321
45462: PUSH
45463: LD_INT 2
45465: EQUAL
45466: ST_TO_ADDR
45467: GO 45470
45469: POP
// end ;
45470: LD_VAR 0 3
45474: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45475: LD_INT 0
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
// result := false ;
45488: LD_ADDR_VAR 0 6
45492: PUSH
45493: LD_INT 0
45495: ST_TO_ADDR
// if btype = b_depot then
45496: LD_VAR 0 2
45500: PUSH
45501: LD_INT 0
45503: EQUAL
45504: IFFALSE 45516
// begin result := true ;
45506: LD_ADDR_VAR 0 6
45510: PUSH
45511: LD_INT 1
45513: ST_TO_ADDR
// exit ;
45514: GO 46370
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45516: LD_VAR 0 1
45520: NOT
45521: IFTRUE 45546
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 266
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: IN
45544: NOT
45545: OR
45546: IFTRUE 45555
45548: PUSH
45549: LD_VAR 0 2
45553: NOT
45554: OR
45555: IFTRUE 45591
45557: PUSH
45558: LD_VAR 0 5
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 4
45577: PUSH
45578: LD_INT 5
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: IN
45589: NOT
45590: OR
45591: IFTRUE 45610
45593: PUSH
45594: LD_VAR 0 3
45598: PPUSH
45599: LD_VAR 0 4
45603: PPUSH
45604: CALL_OW 488
45608: NOT
45609: OR
45610: IFFALSE 45614
// exit ;
45612: GO 46370
// side := GetSide ( depot ) ;
45614: LD_ADDR_VAR 0 9
45618: PUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: CALL_OW 255
45628: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45629: LD_VAR 0 9
45633: PPUSH
45634: LD_VAR 0 2
45638: PPUSH
45639: CALL 45099 0 2
45643: NOT
45644: IFFALSE 45648
// exit ;
45646: GO 46370
// pom := GetBase ( depot ) ;
45648: LD_ADDR_VAR 0 10
45652: PUSH
45653: LD_VAR 0 1
45657: PPUSH
45658: CALL_OW 274
45662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45663: LD_ADDR_VAR 0 11
45667: PUSH
45668: LD_VAR 0 2
45672: PPUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 248
45682: PPUSH
45683: CALL_OW 450
45687: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45688: LD_VAR 0 10
45692: PPUSH
45693: LD_INT 1
45695: PPUSH
45696: CALL_OW 275
45700: PUSH
45701: LD_VAR 0 11
45705: PUSH
45706: LD_INT 1
45708: ARRAY
45709: GREATEREQUAL
45710: IFFALSE 45736
45712: PUSH
45713: LD_VAR 0 10
45717: PPUSH
45718: LD_INT 2
45720: PPUSH
45721: CALL_OW 275
45725: PUSH
45726: LD_VAR 0 11
45730: PUSH
45731: LD_INT 2
45733: ARRAY
45734: GREATEREQUAL
45735: AND
45736: IFFALSE 45762
45738: PUSH
45739: LD_VAR 0 10
45743: PPUSH
45744: LD_INT 3
45746: PPUSH
45747: CALL_OW 275
45751: PUSH
45752: LD_VAR 0 11
45756: PUSH
45757: LD_INT 3
45759: ARRAY
45760: GREATEREQUAL
45761: AND
45762: NOT
45763: IFFALSE 45767
// exit ;
45765: GO 46370
// if GetBType ( depot ) = b_depot then
45767: LD_VAR 0 1
45771: PPUSH
45772: CALL_OW 266
45776: PUSH
45777: LD_INT 0
45779: EQUAL
45780: IFFALSE 45792
// dist := 28 else
45782: LD_ADDR_VAR 0 14
45786: PUSH
45787: LD_INT 28
45789: ST_TO_ADDR
45790: GO 45800
// dist := 36 ;
45792: LD_ADDR_VAR 0 14
45796: PUSH
45797: LD_INT 36
45799: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45800: LD_VAR 0 1
45804: PPUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: LD_VAR 0 4
45814: PPUSH
45815: CALL_OW 297
45819: PUSH
45820: LD_VAR 0 14
45824: GREATER
45825: IFFALSE 45829
// exit ;
45827: GO 46370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45829: LD_ADDR_VAR 0 12
45833: PUSH
45834: LD_VAR 0 2
45838: PPUSH
45839: LD_VAR 0 3
45843: PPUSH
45844: LD_VAR 0 4
45848: PPUSH
45849: LD_VAR 0 5
45853: PPUSH
45854: LD_VAR 0 1
45858: PPUSH
45859: CALL_OW 248
45863: PPUSH
45864: LD_INT 0
45866: PPUSH
45867: CALL 46375 0 6
45871: ST_TO_ADDR
// if not hexes then
45872: LD_VAR 0 12
45876: NOT
45877: IFFALSE 45881
// exit ;
45879: GO 46370
// hex := GetHexInfo ( x , y ) ;
45881: LD_ADDR_VAR 0 15
45885: PUSH
45886: LD_VAR 0 3
45890: PPUSH
45891: LD_VAR 0 4
45895: PPUSH
45896: CALL_OW 546
45900: ST_TO_ADDR
// if hex [ 1 ] then
45901: LD_VAR 0 15
45905: PUSH
45906: LD_INT 1
45908: ARRAY
45909: IFFALSE 45913
// exit ;
45911: GO 46370
// height := hex [ 2 ] ;
45913: LD_ADDR_VAR 0 13
45917: PUSH
45918: LD_VAR 0 15
45922: PUSH
45923: LD_INT 2
45925: ARRAY
45926: ST_TO_ADDR
// for i = 1 to hexes do
45927: LD_ADDR_VAR 0 7
45931: PUSH
45932: DOUBLE
45933: LD_INT 1
45935: DEC
45936: ST_TO_ADDR
45937: LD_VAR 0 12
45941: PUSH
45942: FOR_TO
45943: IFFALSE 46287
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45945: LD_VAR 0 12
45949: PUSH
45950: LD_VAR 0 7
45954: ARRAY
45955: PUSH
45956: LD_INT 1
45958: ARRAY
45959: PPUSH
45960: LD_VAR 0 12
45964: PUSH
45965: LD_VAR 0 7
45969: ARRAY
45970: PUSH
45971: LD_INT 2
45973: ARRAY
45974: PPUSH
45975: CALL_OW 488
45979: NOT
45980: IFTRUE 46022
45982: PUSH
45983: LD_VAR 0 12
45987: PUSH
45988: LD_VAR 0 7
45992: ARRAY
45993: PUSH
45994: LD_INT 1
45996: ARRAY
45997: PPUSH
45998: LD_VAR 0 12
46002: PUSH
46003: LD_VAR 0 7
46007: ARRAY
46008: PUSH
46009: LD_INT 2
46011: ARRAY
46012: PPUSH
46013: CALL_OW 428
46017: PUSH
46018: LD_INT 0
46020: GREATER
46021: OR
46022: IFTRUE 46060
46024: PUSH
46025: LD_VAR 0 12
46029: PUSH
46030: LD_VAR 0 7
46034: ARRAY
46035: PUSH
46036: LD_INT 1
46038: ARRAY
46039: PPUSH
46040: LD_VAR 0 12
46044: PUSH
46045: LD_VAR 0 7
46049: ARRAY
46050: PUSH
46051: LD_INT 2
46053: ARRAY
46054: PPUSH
46055: CALL_OW 351
46059: OR
46060: IFFALSE 46066
// exit ;
46062: POP
46063: POP
46064: GO 46370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46066: LD_ADDR_VAR 0 8
46070: PUSH
46071: LD_VAR 0 12
46075: PUSH
46076: LD_VAR 0 7
46080: ARRAY
46081: PUSH
46082: LD_INT 1
46084: ARRAY
46085: PPUSH
46086: LD_VAR 0 12
46090: PUSH
46091: LD_VAR 0 7
46095: ARRAY
46096: PUSH
46097: LD_INT 2
46099: ARRAY
46100: PPUSH
46101: CALL_OW 546
46105: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46106: LD_VAR 0 8
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: IFTRUE 46136
46116: PUSH
46117: LD_VAR 0 8
46121: PUSH
46122: LD_INT 2
46124: ARRAY
46125: PUSH
46126: LD_VAR 0 13
46130: PUSH
46131: LD_INT 2
46133: PLUS
46134: GREATER
46135: OR
46136: IFTRUE 46158
46138: PUSH
46139: LD_VAR 0 8
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PUSH
46148: LD_VAR 0 13
46152: PUSH
46153: LD_INT 2
46155: MINUS
46156: LESS
46157: OR
46158: IFTRUE 46226
46160: PUSH
46161: LD_VAR 0 8
46165: PUSH
46166: LD_INT 3
46168: ARRAY
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 8
46175: PUSH
46176: LD_INT 9
46178: PUSH
46179: LD_INT 10
46181: PUSH
46182: LD_INT 11
46184: PUSH
46185: LD_INT 12
46187: PUSH
46188: LD_INT 13
46190: PUSH
46191: LD_INT 16
46193: PUSH
46194: LD_INT 17
46196: PUSH
46197: LD_INT 18
46199: PUSH
46200: LD_INT 19
46202: PUSH
46203: LD_INT 20
46205: PUSH
46206: LD_INT 21
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: IN
46224: NOT
46225: OR
46226: IFTRUE 46239
46228: PUSH
46229: LD_VAR 0 8
46233: PUSH
46234: LD_INT 5
46236: ARRAY
46237: NOT
46238: OR
46239: IFTRUE 46279
46241: PUSH
46242: LD_VAR 0 8
46246: PUSH
46247: LD_INT 6
46249: ARRAY
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 7
46259: PUSH
46260: LD_INT 9
46262: PUSH
46263: LD_INT 10
46265: PUSH
46266: LD_INT 11
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: IN
46277: NOT
46278: OR
46279: IFFALSE 46285
// exit ;
46281: POP
46282: POP
46283: GO 46370
// end ;
46285: GO 45942
46287: POP
46288: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46289: LD_VAR 0 9
46293: PPUSH
46294: LD_VAR 0 3
46298: PPUSH
46299: LD_VAR 0 4
46303: PPUSH
46304: LD_INT 20
46306: PPUSH
46307: CALL 38189 0 4
46311: PUSH
46312: LD_INT 4
46314: ARRAY
46315: IFFALSE 46319
// exit ;
46317: GO 46370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46319: LD_VAR 0 2
46323: PUSH
46324: LD_INT 29
46326: PUSH
46327: LD_INT 30
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: IN
46334: IFFALSE 46358
46336: PUSH
46337: LD_VAR 0 3
46341: PPUSH
46342: LD_VAR 0 4
46346: PPUSH
46347: LD_VAR 0 9
46351: PPUSH
46352: CALL_OW 440
46356: NOT
46357: AND
46358: IFFALSE 46362
// exit ;
46360: GO 46370
// result := true ;
46362: LD_ADDR_VAR 0 6
46366: PUSH
46367: LD_INT 1
46369: ST_TO_ADDR
// end ;
46370: LD_VAR 0 6
46374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46375: LD_INT 0
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
// result = [ ] ;
46435: LD_ADDR_VAR 0 7
46439: PUSH
46440: EMPTY
46441: ST_TO_ADDR
// temp_list = [ ] ;
46442: LD_ADDR_VAR 0 9
46446: PUSH
46447: EMPTY
46448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46449: LD_VAR 0 4
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: LD_INT 4
46468: PUSH
46469: LD_INT 5
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: IN
46480: NOT
46481: IFTRUE 46524
46483: PUSH
46484: LD_VAR 0 1
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: IN
46499: IFFALSE 46523
46501: PUSH
46502: LD_VAR 0 5
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: IN
46521: NOT
46522: AND
46523: OR
46524: IFFALSE 46528
// exit ;
46526: GO 64927
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46528: LD_VAR 0 1
46532: PUSH
46533: LD_INT 6
46535: PUSH
46536: LD_INT 7
46538: PUSH
46539: LD_INT 8
46541: PUSH
46542: LD_INT 13
46544: PUSH
46545: LD_INT 12
46547: PUSH
46548: LD_INT 15
46550: PUSH
46551: LD_INT 11
46553: PUSH
46554: LD_INT 14
46556: PUSH
46557: LD_INT 10
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: IN
46571: IFFALSE 46581
// btype = b_lab ;
46573: LD_ADDR_VAR 0 1
46577: PUSH
46578: LD_INT 6
46580: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46581: LD_VAR 0 6
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: IN
46600: NOT
46601: IFTRUE 46669
46603: PUSH
46604: LD_VAR 0 1
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 6
46623: PUSH
46624: LD_INT 36
46626: PUSH
46627: LD_INT 4
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: LD_INT 31
46635: PUSH
46636: LD_INT 32
46638: PUSH
46639: LD_INT 33
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: IN
46655: NOT
46656: IFFALSE 46668
46658: PUSH
46659: LD_VAR 0 6
46663: PUSH
46664: LD_INT 1
46666: EQUAL
46667: AND
46668: OR
46669: IFTRUE 46701
46671: PUSH
46672: LD_VAR 0 1
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: IN
46687: NOT
46688: IFFALSE 46700
46690: PUSH
46691: LD_VAR 0 6
46695: PUSH
46696: LD_INT 2
46698: EQUAL
46699: AND
46700: OR
46701: IFFALSE 46711
// mode = 0 ;
46703: LD_ADDR_VAR 0 6
46707: PUSH
46708: LD_INT 0
46710: ST_TO_ADDR
// case mode of 0 :
46711: LD_VAR 0 6
46715: PUSH
46716: LD_INT 0
46718: DOUBLE
46719: EQUAL
46720: IFTRUE 46724
46722: GO 58177
46724: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46725: LD_ADDR_VAR 0 11
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 3
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46918: LD_ADDR_VAR 0 12
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 3
47075: NEG
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47114: LD_ADDR_VAR 0 13
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47313: LD_ADDR_VAR 0 14
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47509: LD_ADDR_VAR 0 15
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47702: LD_ADDR_VAR 0 16
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 3
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47895: LD_ADDR_VAR 0 17
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48125: LD_ADDR_VAR 0 18
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48355: LD_ADDR_VAR 0 19
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48585: LD_ADDR_VAR 0 20
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48815: LD_ADDR_VAR 0 21
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49045: LD_ADDR_VAR 0 22
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49275: LD_ADDR_VAR 0 23
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49555: LD_ADDR_VAR 0 24
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49831: LD_ADDR_VAR 0 25
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 3
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50105: LD_ADDR_VAR 0 26
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 3
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50381: LD_ADDR_VAR 0 27
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50661: LD_ADDR_VAR 0 28
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50943: LD_ADDR_VAR 0 29
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51222: LD_ADDR_VAR 0 30
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51500: LD_ADDR_VAR 0 31
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51778: LD_ADDR_VAR 0 32
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52056: LD_ADDR_VAR 0 33
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52335: LD_ADDR_VAR 0 34
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52615: LD_ADDR_VAR 0 35
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52727: LD_ADDR_VAR 0 36
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52839: LD_ADDR_VAR 0 37
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52951: LD_ADDR_VAR 0 38
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53063: LD_ADDR_VAR 0 39
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53175: LD_ADDR_VAR 0 40
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53287: LD_ADDR_VAR 0 41
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53637: LD_ADDR_VAR 0 42
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53987: LD_ADDR_VAR 0 43
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54335: LD_ADDR_VAR 0 44
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54685: LD_ADDR_VAR 0 45
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55035: LD_ADDR_VAR 0 46
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55383: LD_ADDR_VAR 0 47
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55534: LD_ADDR_VAR 0 48
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55681: LD_ADDR_VAR 0 49
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55825: LD_ADDR_VAR 0 50
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55969: LD_ADDR_VAR 0 51
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56116: LD_ADDR_VAR 0 52
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56267: LD_ADDR_VAR 0 53
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56497: LD_ADDR_VAR 0 54
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56727: LD_ADDR_VAR 0 55
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56957: LD_ADDR_VAR 0 56
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57187: LD_ADDR_VAR 0 57
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57417: LD_ADDR_VAR 0 58
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57647: LD_ADDR_VAR 0 59
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57735: LD_ADDR_VAR 0 60
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57823: LD_ADDR_VAR 0 61
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57911: LD_ADDR_VAR 0 62
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57999: LD_ADDR_VAR 0 63
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58087: LD_ADDR_VAR 0 64
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: ST_TO_ADDR
// end ; 1 :
58175: GO 64072
58177: LD_INT 1
58179: DOUBLE
58180: EQUAL
58181: IFTRUE 58185
58183: GO 60808
58185: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58186: LD_ADDR_VAR 0 11
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58230: LD_ADDR_VAR 0 12
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58271: LD_ADDR_VAR 0 13
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58311: LD_ADDR_VAR 0 14
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58352: LD_ADDR_VAR 0 15
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58396: LD_ADDR_VAR 0 16
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58442: LD_ADDR_VAR 0 17
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58486: LD_ADDR_VAR 0 18
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58527: LD_ADDR_VAR 0 19
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 3
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58567: LD_ADDR_VAR 0 20
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58608: LD_ADDR_VAR 0 21
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58652: LD_ADDR_VAR 0 22
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58698: LD_ADDR_VAR 0 23
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 4
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58742: LD_ADDR_VAR 0 24
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58783: LD_ADDR_VAR 0 25
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58823: LD_ADDR_VAR 0 26
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58864: LD_ADDR_VAR 0 27
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58908: LD_ADDR_VAR 0 28
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 4
58939: NEG
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58954: LD_ADDR_VAR 0 29
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 4
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 5
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 5
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 6
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 6
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59109: LD_ADDR_VAR 0 30
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 5
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 5
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 5
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 6
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 6
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59252: LD_ADDR_VAR 0 31
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 4
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 5
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 6
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 6
59359: PUSH
59360: LD_INT 6
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 5
59369: PUSH
59370: LD_INT 6
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59391: LD_ADDR_VAR 0 32
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 5
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 4
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 6
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 6
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 5
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59534: LD_ADDR_VAR 0 33
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 5
59620: NEG
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 5
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 6
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 6
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59689: LD_ADDR_VAR 0 34
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 4
59744: NEG
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 4
59768: NEG
59769: PUSH
59770: LD_INT 5
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: NEG
59781: PUSH
59782: LD_INT 4
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 5
59792: NEG
59793: PUSH
59794: LD_INT 5
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: LD_INT 6
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 6
59816: NEG
59817: PUSH
59818: LD_INT 5
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 6
59828: NEG
59829: PUSH
59830: LD_INT 6
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59852: LD_ADDR_VAR 0 41
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59896: LD_ADDR_VAR 0 42
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59937: LD_ADDR_VAR 0 43
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59977: LD_ADDR_VAR 0 44
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60018: LD_ADDR_VAR 0 45
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60062: LD_ADDR_VAR 0 46
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: NEG
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60108: LD_ADDR_VAR 0 47
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60141: LD_ADDR_VAR 0 48
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60172: LD_ADDR_VAR 0 49
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60201: LD_ADDR_VAR 0 50
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60230: LD_ADDR_VAR 0 51
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60261: LD_ADDR_VAR 0 52
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60294: LD_ADDR_VAR 0 53
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60338: LD_ADDR_VAR 0 54
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60379: LD_ADDR_VAR 0 55
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60419: LD_ADDR_VAR 0 56
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60460: LD_ADDR_VAR 0 57
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 3
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60504: LD_ADDR_VAR 0 58
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60550: LD_ADDR_VAR 0 59
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60594: LD_ADDR_VAR 0 60
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60635: LD_ADDR_VAR 0 61
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60675: LD_ADDR_VAR 0 62
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60716: LD_ADDR_VAR 0 63
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60760: LD_ADDR_VAR 0 64
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// end ; 2 :
60806: GO 64072
60808: LD_INT 2
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60816
60814: GO 64071
60816: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60817: LD_ADDR_VAR 0 29
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 4
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 5
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 4
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 5
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 3
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 4
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 4
61202: NEG
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 4
61214: NEG
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: LD_INT 4
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 5
61262: NEG
61263: PUSH
61264: LD_INT 4
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 5
61274: NEG
61275: PUSH
61276: LD_INT 5
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: NEG
61287: PUSH
61288: LD_INT 5
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 5
61298: NEG
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61355: LD_ADDR_VAR 0 30
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: LD_INT 5
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 5
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 4
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: NEG
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 3
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 5
61601: NEG
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 5
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 4
61707: NEG
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 4
61719: NEG
61720: PUSH
61721: LD_INT 4
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 4
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 5
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 4
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 5
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61902: LD_ADDR_VAR 0 31
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: LD_INT 4
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 5
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 4
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 4
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 4
62104: NEG
62105: PUSH
62106: LD_INT 4
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 4
62116: NEG
62117: PUSH
62118: LD_INT 5
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 4
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 4
62152: NEG
62153: PUSH
62154: LD_INT 3
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: NEG
62165: PUSH
62166: LD_INT 4
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 5
62176: NEG
62177: PUSH
62178: LD_INT 5
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: LD_INT 5
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 5
62200: NEG
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 3
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 4
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 4
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: LD_INT 4
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 5
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 5
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 5
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62452: LD_ADDR_VAR 0 32
62456: PUSH
62457: LD_INT 4
62459: NEG
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 3
62482: NEG
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 4
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 5
62515: NEG
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 5
62538: NEG
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: LD_INT 4
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: LD_INT 3
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: NEG
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 4
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 4
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 4
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 5
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 4
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 5
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 5
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 4
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 4
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: LD_INT 5
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: LD_INT 5
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: LD_INT 4
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 5
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 5
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62999: LD_ADDR_VAR 0 33
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: LD_INT 4
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 4
63018: NEG
63019: PUSH
63020: LD_INT 5
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: NEG
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: LD_INT 3
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 5
63066: NEG
63067: PUSH
63068: LD_INT 4
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 5
63078: NEG
63079: PUSH
63080: LD_INT 5
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: LD_INT 5
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 5
63102: NEG
63103: PUSH
63104: LD_INT 3
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 4
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 4
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: LD_INT 4
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 5
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 5
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 5
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 4
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 4
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 5
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 5
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63537: LD_ADDR_VAR 0 34
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 4
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 5
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 4
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 3
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 4
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 5
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 3
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 5
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 4
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 4
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 4
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 5
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 5
63769: PUSH
63770: LD_INT 5
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: LD_INT 5
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 4
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 5
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 5
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 4
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 4
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: LD_INT 4
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 4
63922: NEG
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 4
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: NEG
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 5
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 5
64001: NEG
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// end ; end ;
64069: GO 64072
64071: POP
// case btype of b_depot , b_warehouse :
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 0
64079: DOUBLE
64080: EQUAL
64081: IFTRUE 64091
64083: LD_INT 1
64085: DOUBLE
64086: EQUAL
64087: IFTRUE 64091
64089: GO 64292
64091: POP
// case nation of nation_american :
64092: LD_VAR 0 5
64096: PUSH
64097: LD_INT 1
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64105
64103: GO 64161
64105: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64106: LD_ADDR_VAR 0 9
64110: PUSH
64111: LD_VAR 0 11
64115: PUSH
64116: LD_VAR 0 12
64120: PUSH
64121: LD_VAR 0 13
64125: PUSH
64126: LD_VAR 0 14
64130: PUSH
64131: LD_VAR 0 15
64135: PUSH
64136: LD_VAR 0 16
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: LD_VAR 0 4
64153: PUSH
64154: LD_INT 1
64156: PLUS
64157: ARRAY
64158: ST_TO_ADDR
64159: GO 64290
64161: LD_INT 2
64163: DOUBLE
64164: EQUAL
64165: IFTRUE 64169
64167: GO 64225
64169: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64170: LD_ADDR_VAR 0 9
64174: PUSH
64175: LD_VAR 0 17
64179: PUSH
64180: LD_VAR 0 18
64184: PUSH
64185: LD_VAR 0 19
64189: PUSH
64190: LD_VAR 0 20
64194: PUSH
64195: LD_VAR 0 21
64199: PUSH
64200: LD_VAR 0 22
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: PUSH
64213: LD_VAR 0 4
64217: PUSH
64218: LD_INT 1
64220: PLUS
64221: ARRAY
64222: ST_TO_ADDR
64223: GO 64290
64225: LD_INT 3
64227: DOUBLE
64228: EQUAL
64229: IFTRUE 64233
64231: GO 64289
64233: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64234: LD_ADDR_VAR 0 9
64238: PUSH
64239: LD_VAR 0 23
64243: PUSH
64244: LD_VAR 0 24
64248: PUSH
64249: LD_VAR 0 25
64253: PUSH
64254: LD_VAR 0 26
64258: PUSH
64259: LD_VAR 0 27
64263: PUSH
64264: LD_VAR 0 28
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: LD_VAR 0 4
64281: PUSH
64282: LD_INT 1
64284: PLUS
64285: ARRAY
64286: ST_TO_ADDR
64287: GO 64290
64289: POP
64290: GO 64845
64292: LD_INT 2
64294: DOUBLE
64295: EQUAL
64296: IFTRUE 64306
64298: LD_INT 3
64300: DOUBLE
64301: EQUAL
64302: IFTRUE 64306
64304: GO 64362
64306: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64307: LD_ADDR_VAR 0 9
64311: PUSH
64312: LD_VAR 0 29
64316: PUSH
64317: LD_VAR 0 30
64321: PUSH
64322: LD_VAR 0 31
64326: PUSH
64327: LD_VAR 0 32
64331: PUSH
64332: LD_VAR 0 33
64336: PUSH
64337: LD_VAR 0 34
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: PUSH
64350: LD_VAR 0 4
64354: PUSH
64355: LD_INT 1
64357: PLUS
64358: ARRAY
64359: ST_TO_ADDR
64360: GO 64845
64362: LD_INT 16
64364: DOUBLE
64365: EQUAL
64366: IFTRUE 64424
64368: LD_INT 17
64370: DOUBLE
64371: EQUAL
64372: IFTRUE 64424
64374: LD_INT 18
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64424
64380: LD_INT 19
64382: DOUBLE
64383: EQUAL
64384: IFTRUE 64424
64386: LD_INT 22
64388: DOUBLE
64389: EQUAL
64390: IFTRUE 64424
64392: LD_INT 20
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64424
64398: LD_INT 21
64400: DOUBLE
64401: EQUAL
64402: IFTRUE 64424
64404: LD_INT 23
64406: DOUBLE
64407: EQUAL
64408: IFTRUE 64424
64410: LD_INT 24
64412: DOUBLE
64413: EQUAL
64414: IFTRUE 64424
64416: LD_INT 25
64418: DOUBLE
64419: EQUAL
64420: IFTRUE 64424
64422: GO 64480
64424: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64425: LD_ADDR_VAR 0 9
64429: PUSH
64430: LD_VAR 0 35
64434: PUSH
64435: LD_VAR 0 36
64439: PUSH
64440: LD_VAR 0 37
64444: PUSH
64445: LD_VAR 0 38
64449: PUSH
64450: LD_VAR 0 39
64454: PUSH
64455: LD_VAR 0 40
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: PUSH
64468: LD_VAR 0 4
64472: PUSH
64473: LD_INT 1
64475: PLUS
64476: ARRAY
64477: ST_TO_ADDR
64478: GO 64845
64480: LD_INT 6
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64536
64486: LD_INT 7
64488: DOUBLE
64489: EQUAL
64490: IFTRUE 64536
64492: LD_INT 8
64494: DOUBLE
64495: EQUAL
64496: IFTRUE 64536
64498: LD_INT 13
64500: DOUBLE
64501: EQUAL
64502: IFTRUE 64536
64504: LD_INT 12
64506: DOUBLE
64507: EQUAL
64508: IFTRUE 64536
64510: LD_INT 15
64512: DOUBLE
64513: EQUAL
64514: IFTRUE 64536
64516: LD_INT 11
64518: DOUBLE
64519: EQUAL
64520: IFTRUE 64536
64522: LD_INT 14
64524: DOUBLE
64525: EQUAL
64526: IFTRUE 64536
64528: LD_INT 10
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64536
64534: GO 64592
64536: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64537: LD_ADDR_VAR 0 9
64541: PUSH
64542: LD_VAR 0 41
64546: PUSH
64547: LD_VAR 0 42
64551: PUSH
64552: LD_VAR 0 43
64556: PUSH
64557: LD_VAR 0 44
64561: PUSH
64562: LD_VAR 0 45
64566: PUSH
64567: LD_VAR 0 46
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: PUSH
64580: LD_VAR 0 4
64584: PUSH
64585: LD_INT 1
64587: PLUS
64588: ARRAY
64589: ST_TO_ADDR
64590: GO 64845
64592: LD_INT 36
64594: DOUBLE
64595: EQUAL
64596: IFTRUE 64600
64598: GO 64656
64600: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64601: LD_ADDR_VAR 0 9
64605: PUSH
64606: LD_VAR 0 47
64610: PUSH
64611: LD_VAR 0 48
64615: PUSH
64616: LD_VAR 0 49
64620: PUSH
64621: LD_VAR 0 50
64625: PUSH
64626: LD_VAR 0 51
64630: PUSH
64631: LD_VAR 0 52
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_VAR 0 4
64648: PUSH
64649: LD_INT 1
64651: PLUS
64652: ARRAY
64653: ST_TO_ADDR
64654: GO 64845
64656: LD_INT 4
64658: DOUBLE
64659: EQUAL
64660: IFTRUE 64682
64662: LD_INT 5
64664: DOUBLE
64665: EQUAL
64666: IFTRUE 64682
64668: LD_INT 34
64670: DOUBLE
64671: EQUAL
64672: IFTRUE 64682
64674: LD_INT 37
64676: DOUBLE
64677: EQUAL
64678: IFTRUE 64682
64680: GO 64738
64682: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64683: LD_ADDR_VAR 0 9
64687: PUSH
64688: LD_VAR 0 53
64692: PUSH
64693: LD_VAR 0 54
64697: PUSH
64698: LD_VAR 0 55
64702: PUSH
64703: LD_VAR 0 56
64707: PUSH
64708: LD_VAR 0 57
64712: PUSH
64713: LD_VAR 0 58
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: PUSH
64726: LD_VAR 0 4
64730: PUSH
64731: LD_INT 1
64733: PLUS
64734: ARRAY
64735: ST_TO_ADDR
64736: GO 64845
64738: LD_INT 31
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64788
64744: LD_INT 32
64746: DOUBLE
64747: EQUAL
64748: IFTRUE 64788
64750: LD_INT 33
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64788
64756: LD_INT 27
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64788
64762: LD_INT 26
64764: DOUBLE
64765: EQUAL
64766: IFTRUE 64788
64768: LD_INT 28
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64788
64774: LD_INT 29
64776: DOUBLE
64777: EQUAL
64778: IFTRUE 64788
64780: LD_INT 30
64782: DOUBLE
64783: EQUAL
64784: IFTRUE 64788
64786: GO 64844
64788: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64789: LD_ADDR_VAR 0 9
64793: PUSH
64794: LD_VAR 0 59
64798: PUSH
64799: LD_VAR 0 60
64803: PUSH
64804: LD_VAR 0 61
64808: PUSH
64809: LD_VAR 0 62
64813: PUSH
64814: LD_VAR 0 63
64818: PUSH
64819: LD_VAR 0 64
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: PUSH
64832: LD_VAR 0 4
64836: PUSH
64837: LD_INT 1
64839: PLUS
64840: ARRAY
64841: ST_TO_ADDR
64842: GO 64845
64844: POP
// temp_list2 = [ ] ;
64845: LD_ADDR_VAR 0 10
64849: PUSH
64850: EMPTY
64851: ST_TO_ADDR
// for i in temp_list do
64852: LD_ADDR_VAR 0 8
64856: PUSH
64857: LD_VAR 0 9
64861: PUSH
64862: FOR_IN
64863: IFFALSE 64915
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64865: LD_ADDR_VAR 0 10
64869: PUSH
64870: LD_VAR 0 10
64874: PUSH
64875: LD_VAR 0 8
64879: PUSH
64880: LD_INT 1
64882: ARRAY
64883: PUSH
64884: LD_VAR 0 2
64888: PLUS
64889: PUSH
64890: LD_VAR 0 8
64894: PUSH
64895: LD_INT 2
64897: ARRAY
64898: PUSH
64899: LD_VAR 0 3
64903: PLUS
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: ADD
64912: ST_TO_ADDR
64913: GO 64862
64915: POP
64916: POP
// result = temp_list2 ;
64917: LD_ADDR_VAR 0 7
64921: PUSH
64922: LD_VAR 0 10
64926: ST_TO_ADDR
// end ;
64927: LD_VAR 0 7
64931: RET
// export function EnemyInRange ( unit , dist ) ; begin
64932: LD_INT 0
64934: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64935: LD_ADDR_VAR 0 3
64939: PUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 255
64949: PPUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 250
64959: PPUSH
64960: LD_VAR 0 1
64964: PPUSH
64965: CALL_OW 251
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: CALL 38189 0 4
64979: PUSH
64980: LD_INT 4
64982: ARRAY
64983: ST_TO_ADDR
// end ;
64984: LD_VAR 0 3
64988: RET
// export function PlayerSeeMe ( unit ) ; begin
64989: LD_INT 0
64991: PPUSH
// result := See ( your_side , unit ) ;
64992: LD_ADDR_VAR 0 2
64996: PUSH
64997: LD_OWVAR 2
65001: PPUSH
65002: LD_VAR 0 1
65006: PPUSH
65007: CALL_OW 292
65011: ST_TO_ADDR
// end ;
65012: LD_VAR 0 2
65016: RET
// export function ReverseDir ( unit ) ; begin
65017: LD_INT 0
65019: PPUSH
// if not unit then
65020: LD_VAR 0 1
65024: NOT
65025: IFFALSE 65029
// exit ;
65027: GO 65052
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65029: LD_ADDR_VAR 0 2
65033: PUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 254
65043: PUSH
65044: LD_INT 3
65046: PLUS
65047: PUSH
65048: LD_INT 6
65050: MOD
65051: ST_TO_ADDR
// end ;
65052: LD_VAR 0 2
65056: RET
// export function ReverseArray ( array ) ; var i ; begin
65057: LD_INT 0
65059: PPUSH
65060: PPUSH
// if not array then
65061: LD_VAR 0 1
65065: NOT
65066: IFFALSE 65070
// exit ;
65068: GO 65125
// result := [ ] ;
65070: LD_ADDR_VAR 0 2
65074: PUSH
65075: EMPTY
65076: ST_TO_ADDR
// for i := array downto 1 do
65077: LD_ADDR_VAR 0 3
65081: PUSH
65082: DOUBLE
65083: LD_VAR 0 1
65087: INC
65088: ST_TO_ADDR
65089: LD_INT 1
65091: PUSH
65092: FOR_DOWNTO
65093: IFFALSE 65123
// result := Join ( result , array [ i ] ) ;
65095: LD_ADDR_VAR 0 2
65099: PUSH
65100: LD_VAR 0 2
65104: PPUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_VAR 0 3
65114: ARRAY
65115: PPUSH
65116: CALL 69967 0 2
65120: ST_TO_ADDR
65121: GO 65092
65123: POP
65124: POP
// end ;
65125: LD_VAR 0 2
65129: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65130: LD_INT 0
65132: PPUSH
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
65137: PPUSH
// if not unit or not hexes then
65138: LD_VAR 0 1
65142: NOT
65143: IFTRUE 65152
65145: PUSH
65146: LD_VAR 0 2
65150: NOT
65151: OR
65152: IFFALSE 65156
// exit ;
65154: GO 65279
// dist := 9999 ;
65156: LD_ADDR_VAR 0 5
65160: PUSH
65161: LD_INT 9999
65163: ST_TO_ADDR
// for i = 1 to hexes do
65164: LD_ADDR_VAR 0 4
65168: PUSH
65169: DOUBLE
65170: LD_INT 1
65172: DEC
65173: ST_TO_ADDR
65174: LD_VAR 0 2
65178: PUSH
65179: FOR_TO
65180: IFFALSE 65267
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65182: LD_ADDR_VAR 0 6
65186: PUSH
65187: LD_VAR 0 1
65191: PPUSH
65192: LD_VAR 0 2
65196: PUSH
65197: LD_VAR 0 4
65201: ARRAY
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PPUSH
65207: LD_VAR 0 2
65211: PUSH
65212: LD_VAR 0 4
65216: ARRAY
65217: PUSH
65218: LD_INT 2
65220: ARRAY
65221: PPUSH
65222: CALL_OW 297
65226: ST_TO_ADDR
// if tdist < dist then
65227: LD_VAR 0 6
65231: PUSH
65232: LD_VAR 0 5
65236: LESS
65237: IFFALSE 65265
// begin hex := hexes [ i ] ;
65239: LD_ADDR_VAR 0 8
65243: PUSH
65244: LD_VAR 0 2
65248: PUSH
65249: LD_VAR 0 4
65253: ARRAY
65254: ST_TO_ADDR
// dist := tdist ;
65255: LD_ADDR_VAR 0 5
65259: PUSH
65260: LD_VAR 0 6
65264: ST_TO_ADDR
// end ; end ;
65265: GO 65179
65267: POP
65268: POP
// result := hex ;
65269: LD_ADDR_VAR 0 3
65273: PUSH
65274: LD_VAR 0 8
65278: ST_TO_ADDR
// end ;
65279: LD_VAR 0 3
65283: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65284: LD_INT 0
65286: PPUSH
65287: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65288: LD_VAR 0 1
65292: NOT
65293: IFTRUE 65332
65295: PUSH
65296: LD_VAR 0 1
65300: PUSH
65301: LD_INT 21
65303: PUSH
65304: LD_INT 2
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 23
65313: PUSH
65314: LD_INT 2
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PPUSH
65325: CALL_OW 69
65329: IN
65330: NOT
65331: OR
65332: IFFALSE 65336
// exit ;
65334: GO 65383
// for i = 1 to 3 do
65336: LD_ADDR_VAR 0 3
65340: PUSH
65341: DOUBLE
65342: LD_INT 1
65344: DEC
65345: ST_TO_ADDR
65346: LD_INT 3
65348: PUSH
65349: FOR_TO
65350: IFFALSE 65381
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 250
65361: PPUSH
65362: LD_VAR 0 1
65366: PPUSH
65367: CALL_OW 251
65371: PPUSH
65372: LD_INT 1
65374: PPUSH
65375: CALL_OW 453
65379: GO 65349
65381: POP
65382: POP
// end ;
65383: LD_VAR 0 2
65387: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65388: LD_INT 0
65390: PPUSH
65391: PPUSH
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not unit or not enemy_unit then
65396: LD_VAR 0 1
65400: NOT
65401: IFTRUE 65410
65403: PUSH
65404: LD_VAR 0 2
65408: NOT
65409: OR
65410: IFFALSE 65414
// exit ;
65412: GO 65885
// if GetLives ( i ) < 250 then
65414: LD_VAR 0 4
65418: PPUSH
65419: CALL_OW 256
65423: PUSH
65424: LD_INT 250
65426: LESS
65427: IFFALSE 65440
// begin ComAutodestruct ( i ) ;
65429: LD_VAR 0 4
65433: PPUSH
65434: CALL 65284 0 1
// exit ;
65438: GO 65885
// end ; x := GetX ( enemy_unit ) ;
65440: LD_ADDR_VAR 0 7
65444: PUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: CALL_OW 250
65454: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65455: LD_ADDR_VAR 0 8
65459: PUSH
65460: LD_VAR 0 2
65464: PPUSH
65465: CALL_OW 251
65469: ST_TO_ADDR
// if not x or not y then
65470: LD_VAR 0 7
65474: NOT
65475: IFTRUE 65484
65477: PUSH
65478: LD_VAR 0 8
65482: NOT
65483: OR
65484: IFFALSE 65488
// exit ;
65486: GO 65885
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65488: LD_ADDR_VAR 0 6
65492: PUSH
65493: LD_VAR 0 7
65497: PPUSH
65498: LD_INT 0
65500: PPUSH
65501: LD_INT 4
65503: PPUSH
65504: CALL_OW 272
65508: PUSH
65509: LD_VAR 0 8
65513: PPUSH
65514: LD_INT 0
65516: PPUSH
65517: LD_INT 4
65519: PPUSH
65520: CALL_OW 273
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_VAR 0 7
65533: PPUSH
65534: LD_INT 1
65536: PPUSH
65537: LD_INT 4
65539: PPUSH
65540: CALL_OW 272
65544: PUSH
65545: LD_VAR 0 8
65549: PPUSH
65550: LD_INT 1
65552: PPUSH
65553: LD_INT 4
65555: PPUSH
65556: CALL_OW 273
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_VAR 0 7
65569: PPUSH
65570: LD_INT 2
65572: PPUSH
65573: LD_INT 4
65575: PPUSH
65576: CALL_OW 272
65580: PUSH
65581: LD_VAR 0 8
65585: PPUSH
65586: LD_INT 2
65588: PPUSH
65589: LD_INT 4
65591: PPUSH
65592: CALL_OW 273
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_VAR 0 7
65605: PPUSH
65606: LD_INT 3
65608: PPUSH
65609: LD_INT 4
65611: PPUSH
65612: CALL_OW 272
65616: PUSH
65617: LD_VAR 0 8
65621: PPUSH
65622: LD_INT 3
65624: PPUSH
65625: LD_INT 4
65627: PPUSH
65628: CALL_OW 273
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_VAR 0 7
65641: PPUSH
65642: LD_INT 4
65644: PPUSH
65645: LD_INT 4
65647: PPUSH
65648: CALL_OW 272
65652: PUSH
65653: LD_VAR 0 8
65657: PPUSH
65658: LD_INT 4
65660: PPUSH
65661: LD_INT 4
65663: PPUSH
65664: CALL_OW 273
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_VAR 0 7
65677: PPUSH
65678: LD_INT 5
65680: PPUSH
65681: LD_INT 4
65683: PPUSH
65684: CALL_OW 272
65688: PUSH
65689: LD_VAR 0 8
65693: PPUSH
65694: LD_INT 5
65696: PPUSH
65697: LD_INT 4
65699: PPUSH
65700: CALL_OW 273
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: ST_TO_ADDR
// for i = tmp downto 1 do
65717: LD_ADDR_VAR 0 4
65721: PUSH
65722: DOUBLE
65723: LD_VAR 0 6
65727: INC
65728: ST_TO_ADDR
65729: LD_INT 1
65731: PUSH
65732: FOR_DOWNTO
65733: IFFALSE 65836
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65735: LD_VAR 0 6
65739: PUSH
65740: LD_VAR 0 4
65744: ARRAY
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PPUSH
65750: LD_VAR 0 6
65754: PUSH
65755: LD_VAR 0 4
65759: ARRAY
65760: PUSH
65761: LD_INT 2
65763: ARRAY
65764: PPUSH
65765: CALL_OW 488
65769: NOT
65770: IFTRUE 65812
65772: PUSH
65773: LD_VAR 0 6
65777: PUSH
65778: LD_VAR 0 4
65782: ARRAY
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: PPUSH
65788: LD_VAR 0 6
65792: PUSH
65793: LD_VAR 0 4
65797: ARRAY
65798: PUSH
65799: LD_INT 2
65801: ARRAY
65802: PPUSH
65803: CALL_OW 428
65807: PUSH
65808: LD_INT 0
65810: NONEQUAL
65811: OR
65812: IFFALSE 65834
// tmp := Delete ( tmp , i ) ;
65814: LD_ADDR_VAR 0 6
65818: PUSH
65819: LD_VAR 0 6
65823: PPUSH
65824: LD_VAR 0 4
65828: PPUSH
65829: CALL_OW 3
65833: ST_TO_ADDR
65834: GO 65732
65836: POP
65837: POP
// j := GetClosestHex ( unit , tmp ) ;
65838: LD_ADDR_VAR 0 5
65842: PUSH
65843: LD_VAR 0 1
65847: PPUSH
65848: LD_VAR 0 6
65852: PPUSH
65853: CALL 65130 0 2
65857: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65858: LD_VAR 0 1
65862: PPUSH
65863: LD_VAR 0 5
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: PPUSH
65872: LD_VAR 0 5
65876: PUSH
65877: LD_INT 2
65879: ARRAY
65880: PPUSH
65881: CALL_OW 111
// end ;
65885: LD_VAR 0 3
65889: RET
// export function PrepareApemanSoldier ( ) ; begin
65890: LD_INT 0
65892: PPUSH
// uc_nation := 0 ;
65893: LD_ADDR_OWVAR 21
65897: PUSH
65898: LD_INT 0
65900: ST_TO_ADDR
// hc_sex := sex_male ;
65901: LD_ADDR_OWVAR 27
65905: PUSH
65906: LD_INT 1
65908: ST_TO_ADDR
// hc_name :=  ;
65909: LD_ADDR_OWVAR 26
65913: PUSH
65914: LD_STRING 
65916: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65917: LD_ADDR_OWVAR 28
65921: PUSH
65922: LD_INT 15
65924: ST_TO_ADDR
// hc_gallery :=  ;
65925: LD_ADDR_OWVAR 33
65929: PUSH
65930: LD_STRING 
65932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65933: LD_ADDR_OWVAR 31
65937: PUSH
65938: LD_INT 0
65940: PPUSH
65941: LD_INT 3
65943: PPUSH
65944: CALL_OW 12
65948: PUSH
65949: LD_INT 0
65951: PPUSH
65952: LD_INT 3
65954: PPUSH
65955: CALL_OW 12
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65972: LD_ADDR_OWVAR 29
65976: PUSH
65977: LD_INT 12
65979: PUSH
65980: LD_INT 12
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// end ;
65987: LD_VAR 0 1
65991: RET
// export function PrepareApemanEngineer ( ) ; begin
65992: LD_INT 0
65994: PPUSH
// uc_nation := 0 ;
65995: LD_ADDR_OWVAR 21
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// hc_sex := sex_male ;
66003: LD_ADDR_OWVAR 27
66007: PUSH
66008: LD_INT 1
66010: ST_TO_ADDR
// hc_name :=  ;
66011: LD_ADDR_OWVAR 26
66015: PUSH
66016: LD_STRING 
66018: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66019: LD_ADDR_OWVAR 28
66023: PUSH
66024: LD_INT 16
66026: ST_TO_ADDR
// hc_gallery :=  ;
66027: LD_ADDR_OWVAR 33
66031: PUSH
66032: LD_STRING 
66034: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66035: LD_ADDR_OWVAR 31
66039: PUSH
66040: LD_INT 0
66042: PPUSH
66043: LD_INT 3
66045: PPUSH
66046: CALL_OW 12
66050: PUSH
66051: LD_INT 0
66053: PPUSH
66054: LD_INT 3
66056: PPUSH
66057: CALL_OW 12
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66074: LD_ADDR_OWVAR 29
66078: PUSH
66079: LD_INT 12
66081: PUSH
66082: LD_INT 12
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: ST_TO_ADDR
// end ;
66089: LD_VAR 0 1
66093: RET
// export function PrepareApeman ( agressivity ) ; begin
66094: LD_INT 0
66096: PPUSH
// uc_side := 0 ;
66097: LD_ADDR_OWVAR 20
66101: PUSH
66102: LD_INT 0
66104: ST_TO_ADDR
// uc_nation := 0 ;
66105: LD_ADDR_OWVAR 21
66109: PUSH
66110: LD_INT 0
66112: ST_TO_ADDR
// hc_sex := sex_male ;
66113: LD_ADDR_OWVAR 27
66117: PUSH
66118: LD_INT 1
66120: ST_TO_ADDR
// hc_class := class_apeman ;
66121: LD_ADDR_OWVAR 28
66125: PUSH
66126: LD_INT 12
66128: ST_TO_ADDR
// hc_gallery :=  ;
66129: LD_ADDR_OWVAR 33
66133: PUSH
66134: LD_STRING 
66136: ST_TO_ADDR
// hc_name :=  ;
66137: LD_ADDR_OWVAR 26
66141: PUSH
66142: LD_STRING 
66144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66145: LD_ADDR_OWVAR 29
66149: PUSH
66150: LD_INT 12
66152: PUSH
66153: LD_INT 12
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: ST_TO_ADDR
// if agressivity = 0 then
66160: LD_VAR 0 1
66164: PUSH
66165: LD_INT 0
66167: EQUAL
66168: IFFALSE 66180
// hc_agressivity := 0 else
66170: LD_ADDR_OWVAR 35
66174: PUSH
66175: LD_INT 0
66177: ST_TO_ADDR
66178: GO 66201
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66180: LD_ADDR_OWVAR 35
66184: PUSH
66185: LD_VAR 0 1
66189: NEG
66190: PPUSH
66191: LD_VAR 0 1
66195: PPUSH
66196: CALL_OW 12
66200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66201: LD_ADDR_OWVAR 31
66205: PUSH
66206: LD_INT 0
66208: PPUSH
66209: LD_INT 3
66211: PPUSH
66212: CALL_OW 12
66216: PUSH
66217: LD_INT 0
66219: PPUSH
66220: LD_INT 3
66222: PPUSH
66223: CALL_OW 12
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// end ;
66240: LD_VAR 0 2
66244: RET
// export function PrepareTiger ( agressivity ) ; begin
66245: LD_INT 0
66247: PPUSH
// uc_side := 0 ;
66248: LD_ADDR_OWVAR 20
66252: PUSH
66253: LD_INT 0
66255: ST_TO_ADDR
// uc_nation := 0 ;
66256: LD_ADDR_OWVAR 21
66260: PUSH
66261: LD_INT 0
66263: ST_TO_ADDR
// InitHc ;
66264: CALL_OW 19
// hc_class := class_tiger ;
66268: LD_ADDR_OWVAR 28
66272: PUSH
66273: LD_INT 14
66275: ST_TO_ADDR
// hc_gallery :=  ;
66276: LD_ADDR_OWVAR 33
66280: PUSH
66281: LD_STRING 
66283: ST_TO_ADDR
// hc_name :=  ;
66284: LD_ADDR_OWVAR 26
66288: PUSH
66289: LD_STRING 
66291: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66292: LD_ADDR_OWVAR 35
66296: PUSH
66297: LD_VAR 0 1
66301: NEG
66302: PPUSH
66303: LD_VAR 0 1
66307: PPUSH
66308: CALL_OW 12
66312: ST_TO_ADDR
// end ;
66313: LD_VAR 0 2
66317: RET
// export function PrepareEnchidna ( ) ; begin
66318: LD_INT 0
66320: PPUSH
// uc_side := 0 ;
66321: LD_ADDR_OWVAR 20
66325: PUSH
66326: LD_INT 0
66328: ST_TO_ADDR
// uc_nation := 0 ;
66329: LD_ADDR_OWVAR 21
66333: PUSH
66334: LD_INT 0
66336: ST_TO_ADDR
// InitHc ;
66337: CALL_OW 19
// hc_class := class_baggie ;
66341: LD_ADDR_OWVAR 28
66345: PUSH
66346: LD_INT 13
66348: ST_TO_ADDR
// hc_gallery :=  ;
66349: LD_ADDR_OWVAR 33
66353: PUSH
66354: LD_STRING 
66356: ST_TO_ADDR
// hc_name :=  ;
66357: LD_ADDR_OWVAR 26
66361: PUSH
66362: LD_STRING 
66364: ST_TO_ADDR
// end ;
66365: LD_VAR 0 1
66369: RET
// export function PrepareFrog ( ) ; begin
66370: LD_INT 0
66372: PPUSH
// uc_side := 0 ;
66373: LD_ADDR_OWVAR 20
66377: PUSH
66378: LD_INT 0
66380: ST_TO_ADDR
// uc_nation := 0 ;
66381: LD_ADDR_OWVAR 21
66385: PUSH
66386: LD_INT 0
66388: ST_TO_ADDR
// InitHc ;
66389: CALL_OW 19
// hc_class := class_frog ;
66393: LD_ADDR_OWVAR 28
66397: PUSH
66398: LD_INT 19
66400: ST_TO_ADDR
// hc_gallery :=  ;
66401: LD_ADDR_OWVAR 33
66405: PUSH
66406: LD_STRING 
66408: ST_TO_ADDR
// hc_name :=  ;
66409: LD_ADDR_OWVAR 26
66413: PUSH
66414: LD_STRING 
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 1
66421: RET
// export function PrepareFish ( ) ; begin
66422: LD_INT 0
66424: PPUSH
// uc_side := 0 ;
66425: LD_ADDR_OWVAR 20
66429: PUSH
66430: LD_INT 0
66432: ST_TO_ADDR
// uc_nation := 0 ;
66433: LD_ADDR_OWVAR 21
66437: PUSH
66438: LD_INT 0
66440: ST_TO_ADDR
// InitHc ;
66441: CALL_OW 19
// hc_class := class_fish ;
66445: LD_ADDR_OWVAR 28
66449: PUSH
66450: LD_INT 20
66452: ST_TO_ADDR
// hc_gallery :=  ;
66453: LD_ADDR_OWVAR 33
66457: PUSH
66458: LD_STRING 
66460: ST_TO_ADDR
// hc_name :=  ;
66461: LD_ADDR_OWVAR 26
66465: PUSH
66466: LD_STRING 
66468: ST_TO_ADDR
// end ;
66469: LD_VAR 0 1
66473: RET
// export function PrepareBird ( ) ; begin
66474: LD_INT 0
66476: PPUSH
// uc_side := 0 ;
66477: LD_ADDR_OWVAR 20
66481: PUSH
66482: LD_INT 0
66484: ST_TO_ADDR
// uc_nation := 0 ;
66485: LD_ADDR_OWVAR 21
66489: PUSH
66490: LD_INT 0
66492: ST_TO_ADDR
// InitHc ;
66493: CALL_OW 19
// hc_class := class_phororhacos ;
66497: LD_ADDR_OWVAR 28
66501: PUSH
66502: LD_INT 18
66504: ST_TO_ADDR
// hc_gallery :=  ;
66505: LD_ADDR_OWVAR 33
66509: PUSH
66510: LD_STRING 
66512: ST_TO_ADDR
// hc_name :=  ;
66513: LD_ADDR_OWVAR 26
66517: PUSH
66518: LD_STRING 
66520: ST_TO_ADDR
// end ;
66521: LD_VAR 0 1
66525: RET
// export function PrepareHorse ( ) ; begin
66526: LD_INT 0
66528: PPUSH
// uc_side := 0 ;
66529: LD_ADDR_OWVAR 20
66533: PUSH
66534: LD_INT 0
66536: ST_TO_ADDR
// uc_nation := 0 ;
66537: LD_ADDR_OWVAR 21
66541: PUSH
66542: LD_INT 0
66544: ST_TO_ADDR
// InitHc ;
66545: CALL_OW 19
// hc_class := class_horse ;
66549: LD_ADDR_OWVAR 28
66553: PUSH
66554: LD_INT 21
66556: ST_TO_ADDR
// hc_gallery :=  ;
66557: LD_ADDR_OWVAR 33
66561: PUSH
66562: LD_STRING 
66564: ST_TO_ADDR
// hc_name :=  ;
66565: LD_ADDR_OWVAR 26
66569: PUSH
66570: LD_STRING 
66572: ST_TO_ADDR
// end ;
66573: LD_VAR 0 1
66577: RET
// export function PrepareMastodont ( ) ; begin
66578: LD_INT 0
66580: PPUSH
// uc_side := 0 ;
66581: LD_ADDR_OWVAR 20
66585: PUSH
66586: LD_INT 0
66588: ST_TO_ADDR
// uc_nation := 0 ;
66589: LD_ADDR_OWVAR 21
66593: PUSH
66594: LD_INT 0
66596: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66597: LD_ADDR_OWVAR 37
66601: PUSH
66602: LD_INT 31
66604: ST_TO_ADDR
// vc_control := control_rider ;
66605: LD_ADDR_OWVAR 38
66609: PUSH
66610: LD_INT 4
66612: ST_TO_ADDR
// end ;
66613: LD_VAR 0 1
66617: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66618: LD_INT 0
66620: PPUSH
66621: PPUSH
66622: PPUSH
// uc_side = 0 ;
66623: LD_ADDR_OWVAR 20
66627: PUSH
66628: LD_INT 0
66630: ST_TO_ADDR
// uc_nation = 0 ;
66631: LD_ADDR_OWVAR 21
66635: PUSH
66636: LD_INT 0
66638: ST_TO_ADDR
// InitHc_All ( ) ;
66639: CALL_OW 584
// InitVc ;
66643: CALL_OW 20
// if mastodonts then
66647: LD_VAR 0 6
66651: IFFALSE 66718
// for i = 1 to mastodonts do
66653: LD_ADDR_VAR 0 11
66657: PUSH
66658: DOUBLE
66659: LD_INT 1
66661: DEC
66662: ST_TO_ADDR
66663: LD_VAR 0 6
66667: PUSH
66668: FOR_TO
66669: IFFALSE 66716
// begin vc_chassis := 31 ;
66671: LD_ADDR_OWVAR 37
66675: PUSH
66676: LD_INT 31
66678: ST_TO_ADDR
// vc_control := control_rider ;
66679: LD_ADDR_OWVAR 38
66683: PUSH
66684: LD_INT 4
66686: ST_TO_ADDR
// animal := CreateVehicle ;
66687: LD_ADDR_VAR 0 12
66691: PUSH
66692: CALL_OW 45
66696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66697: LD_VAR 0 12
66701: PPUSH
66702: LD_VAR 0 8
66706: PPUSH
66707: LD_INT 0
66709: PPUSH
66710: CALL 68860 0 3
// end ;
66714: GO 66668
66716: POP
66717: POP
// if horses then
66718: LD_VAR 0 5
66722: IFFALSE 66789
// for i = 1 to horses do
66724: LD_ADDR_VAR 0 11
66728: PUSH
66729: DOUBLE
66730: LD_INT 1
66732: DEC
66733: ST_TO_ADDR
66734: LD_VAR 0 5
66738: PUSH
66739: FOR_TO
66740: IFFALSE 66787
// begin hc_class := 21 ;
66742: LD_ADDR_OWVAR 28
66746: PUSH
66747: LD_INT 21
66749: ST_TO_ADDR
// hc_gallery :=  ;
66750: LD_ADDR_OWVAR 33
66754: PUSH
66755: LD_STRING 
66757: ST_TO_ADDR
// animal := CreateHuman ;
66758: LD_ADDR_VAR 0 12
66762: PUSH
66763: CALL_OW 44
66767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66768: LD_VAR 0 12
66772: PPUSH
66773: LD_VAR 0 8
66777: PPUSH
66778: LD_INT 0
66780: PPUSH
66781: CALL 68860 0 3
// end ;
66785: GO 66739
66787: POP
66788: POP
// if birds then
66789: LD_VAR 0 1
66793: IFFALSE 66860
// for i = 1 to birds do
66795: LD_ADDR_VAR 0 11
66799: PUSH
66800: DOUBLE
66801: LD_INT 1
66803: DEC
66804: ST_TO_ADDR
66805: LD_VAR 0 1
66809: PUSH
66810: FOR_TO
66811: IFFALSE 66858
// begin hc_class := 18 ;
66813: LD_ADDR_OWVAR 28
66817: PUSH
66818: LD_INT 18
66820: ST_TO_ADDR
// hc_gallery =  ;
66821: LD_ADDR_OWVAR 33
66825: PUSH
66826: LD_STRING 
66828: ST_TO_ADDR
// animal := CreateHuman ;
66829: LD_ADDR_VAR 0 12
66833: PUSH
66834: CALL_OW 44
66838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66839: LD_VAR 0 12
66843: PPUSH
66844: LD_VAR 0 8
66848: PPUSH
66849: LD_INT 0
66851: PPUSH
66852: CALL 68860 0 3
// end ;
66856: GO 66810
66858: POP
66859: POP
// if tigers then
66860: LD_VAR 0 2
66864: IFFALSE 66948
// for i = 1 to tigers do
66866: LD_ADDR_VAR 0 11
66870: PUSH
66871: DOUBLE
66872: LD_INT 1
66874: DEC
66875: ST_TO_ADDR
66876: LD_VAR 0 2
66880: PUSH
66881: FOR_TO
66882: IFFALSE 66946
// begin hc_class = class_tiger ;
66884: LD_ADDR_OWVAR 28
66888: PUSH
66889: LD_INT 14
66891: ST_TO_ADDR
// hc_gallery =  ;
66892: LD_ADDR_OWVAR 33
66896: PUSH
66897: LD_STRING 
66899: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66900: LD_ADDR_OWVAR 35
66904: PUSH
66905: LD_INT 7
66907: NEG
66908: PPUSH
66909: LD_INT 7
66911: PPUSH
66912: CALL_OW 12
66916: ST_TO_ADDR
// animal := CreateHuman ;
66917: LD_ADDR_VAR 0 12
66921: PUSH
66922: CALL_OW 44
66926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66927: LD_VAR 0 12
66931: PPUSH
66932: LD_VAR 0 8
66936: PPUSH
66937: LD_INT 0
66939: PPUSH
66940: CALL 68860 0 3
// end ;
66944: GO 66881
66946: POP
66947: POP
// if apemans then
66948: LD_VAR 0 3
66952: IFFALSE 67075
// for i = 1 to apemans do
66954: LD_ADDR_VAR 0 11
66958: PUSH
66959: DOUBLE
66960: LD_INT 1
66962: DEC
66963: ST_TO_ADDR
66964: LD_VAR 0 3
66968: PUSH
66969: FOR_TO
66970: IFFALSE 67073
// begin hc_class = class_apeman ;
66972: LD_ADDR_OWVAR 28
66976: PUSH
66977: LD_INT 12
66979: ST_TO_ADDR
// hc_gallery =  ;
66980: LD_ADDR_OWVAR 33
66984: PUSH
66985: LD_STRING 
66987: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66988: LD_ADDR_OWVAR 35
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PPUSH
66997: LD_INT 2
66999: PPUSH
67000: CALL_OW 12
67004: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67005: LD_ADDR_OWVAR 31
67009: PUSH
67010: LD_INT 1
67012: PPUSH
67013: LD_INT 3
67015: PPUSH
67016: CALL_OW 12
67020: PUSH
67021: LD_INT 1
67023: PPUSH
67024: LD_INT 3
67026: PPUSH
67027: CALL_OW 12
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// animal := CreateHuman ;
67044: LD_ADDR_VAR 0 12
67048: PUSH
67049: CALL_OW 44
67053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67054: LD_VAR 0 12
67058: PPUSH
67059: LD_VAR 0 8
67063: PPUSH
67064: LD_INT 0
67066: PPUSH
67067: CALL 68860 0 3
// end ;
67071: GO 66969
67073: POP
67074: POP
// if enchidnas then
67075: LD_VAR 0 4
67079: IFFALSE 67146
// for i = 1 to enchidnas do
67081: LD_ADDR_VAR 0 11
67085: PUSH
67086: DOUBLE
67087: LD_INT 1
67089: DEC
67090: ST_TO_ADDR
67091: LD_VAR 0 4
67095: PUSH
67096: FOR_TO
67097: IFFALSE 67144
// begin hc_class = 13 ;
67099: LD_ADDR_OWVAR 28
67103: PUSH
67104: LD_INT 13
67106: ST_TO_ADDR
// hc_gallery =  ;
67107: LD_ADDR_OWVAR 33
67111: PUSH
67112: LD_STRING 
67114: ST_TO_ADDR
// animal := CreateHuman ;
67115: LD_ADDR_VAR 0 12
67119: PUSH
67120: CALL_OW 44
67124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67125: LD_VAR 0 12
67129: PPUSH
67130: LD_VAR 0 8
67134: PPUSH
67135: LD_INT 0
67137: PPUSH
67138: CALL 68860 0 3
// end ;
67142: GO 67096
67144: POP
67145: POP
// if fishes then
67146: LD_VAR 0 7
67150: IFFALSE 67217
// for i = 1 to fishes do
67152: LD_ADDR_VAR 0 11
67156: PUSH
67157: DOUBLE
67158: LD_INT 1
67160: DEC
67161: ST_TO_ADDR
67162: LD_VAR 0 7
67166: PUSH
67167: FOR_TO
67168: IFFALSE 67215
// begin hc_class = 20 ;
67170: LD_ADDR_OWVAR 28
67174: PUSH
67175: LD_INT 20
67177: ST_TO_ADDR
// hc_gallery =  ;
67178: LD_ADDR_OWVAR 33
67182: PUSH
67183: LD_STRING 
67185: ST_TO_ADDR
// animal := CreateHuman ;
67186: LD_ADDR_VAR 0 12
67190: PUSH
67191: CALL_OW 44
67195: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67196: LD_VAR 0 12
67200: PPUSH
67201: LD_VAR 0 9
67205: PPUSH
67206: LD_INT 0
67208: PPUSH
67209: CALL 68860 0 3
// end ;
67213: GO 67167
67215: POP
67216: POP
// end ;
67217: LD_VAR 0 10
67221: RET
// export function WantHeal ( sci , unit ) ; begin
67222: LD_INT 0
67224: PPUSH
// if GetTaskList ( sci ) > 0 then
67225: LD_VAR 0 1
67229: PPUSH
67230: CALL_OW 437
67234: PUSH
67235: LD_INT 0
67237: GREATER
67238: IFFALSE 67310
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67240: LD_VAR 0 1
67244: PPUSH
67245: CALL_OW 437
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: PUSH
67254: LD_INT 1
67256: ARRAY
67257: PUSH
67258: LD_STRING l
67260: EQUAL
67261: IFFALSE 67288
67263: PUSH
67264: LD_VAR 0 1
67268: PPUSH
67269: CALL_OW 437
67273: PUSH
67274: LD_INT 1
67276: ARRAY
67277: PUSH
67278: LD_INT 4
67280: ARRAY
67281: PUSH
67282: LD_VAR 0 2
67286: EQUAL
67287: AND
67288: IFFALSE 67300
// result := true else
67290: LD_ADDR_VAR 0 3
67294: PUSH
67295: LD_INT 1
67297: ST_TO_ADDR
67298: GO 67308
// result := false ;
67300: LD_ADDR_VAR 0 3
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// end else
67308: GO 67318
// result := false ;
67310: LD_ADDR_VAR 0 3
67314: PUSH
67315: LD_INT 0
67317: ST_TO_ADDR
// end ;
67318: LD_VAR 0 3
67322: RET
// export function HealTarget ( sci ) ; begin
67323: LD_INT 0
67325: PPUSH
// if not sci then
67326: LD_VAR 0 1
67330: NOT
67331: IFFALSE 67335
// exit ;
67333: GO 67400
// result := 0 ;
67335: LD_ADDR_VAR 0 2
67339: PUSH
67340: LD_INT 0
67342: ST_TO_ADDR
// if GetTaskList ( sci ) then
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 437
67352: IFFALSE 67400
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67354: LD_VAR 0 1
67358: PPUSH
67359: CALL_OW 437
67363: PUSH
67364: LD_INT 1
67366: ARRAY
67367: PUSH
67368: LD_INT 1
67370: ARRAY
67371: PUSH
67372: LD_STRING l
67374: EQUAL
67375: IFFALSE 67400
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67377: LD_ADDR_VAR 0 2
67381: PUSH
67382: LD_VAR 0 1
67386: PPUSH
67387: CALL_OW 437
67391: PUSH
67392: LD_INT 1
67394: ARRAY
67395: PUSH
67396: LD_INT 4
67398: ARRAY
67399: ST_TO_ADDR
// end ;
67400: LD_VAR 0 2
67404: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67405: LD_INT 0
67407: PPUSH
67408: PPUSH
67409: PPUSH
67410: PPUSH
// if not base_units then
67411: LD_VAR 0 1
67415: NOT
67416: IFFALSE 67420
// exit ;
67418: GO 67507
// result := false ;
67420: LD_ADDR_VAR 0 2
67424: PUSH
67425: LD_INT 0
67427: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67428: LD_ADDR_VAR 0 5
67432: PUSH
67433: LD_VAR 0 1
67437: PPUSH
67438: LD_INT 21
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 72
67452: ST_TO_ADDR
// if not tmp then
67453: LD_VAR 0 5
67457: NOT
67458: IFFALSE 67462
// exit ;
67460: GO 67507
// for i in tmp do
67462: LD_ADDR_VAR 0 3
67466: PUSH
67467: LD_VAR 0 5
67471: PUSH
67472: FOR_IN
67473: IFFALSE 67505
// begin result := EnemyInRange ( i , 22 ) ;
67475: LD_ADDR_VAR 0 2
67479: PUSH
67480: LD_VAR 0 3
67484: PPUSH
67485: LD_INT 22
67487: PPUSH
67488: CALL 64932 0 2
67492: ST_TO_ADDR
// if result then
67493: LD_VAR 0 2
67497: IFFALSE 67503
// exit ;
67499: POP
67500: POP
67501: GO 67507
// end ;
67503: GO 67472
67505: POP
67506: POP
// end ;
67507: LD_VAR 0 2
67511: RET
// export function FilterByTag ( units , tag ) ; begin
67512: LD_INT 0
67514: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67515: LD_ADDR_VAR 0 3
67519: PUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: LD_INT 120
67527: PUSH
67528: LD_VAR 0 2
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PPUSH
67537: CALL_OW 72
67541: ST_TO_ADDR
// end ;
67542: LD_VAR 0 3
67546: RET
// export function IsDriver ( un ) ; begin
67547: LD_INT 0
67549: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_VAR 0 1
67559: PUSH
67560: LD_INT 55
67562: PUSH
67563: EMPTY
67564: LIST
67565: PPUSH
67566: CALL_OW 69
67570: IN
67571: ST_TO_ADDR
// end ;
67572: LD_VAR 0 2
67576: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67577: LD_INT 0
67579: PPUSH
67580: PPUSH
// list := [ ] ;
67581: LD_ADDR_VAR 0 5
67585: PUSH
67586: EMPTY
67587: ST_TO_ADDR
// case d of 0 :
67588: LD_VAR 0 3
67592: PUSH
67593: LD_INT 0
67595: DOUBLE
67596: EQUAL
67597: IFTRUE 67601
67599: GO 67734
67601: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_VAR 0 1
67611: PUSH
67612: LD_INT 4
67614: MINUS
67615: PUSH
67616: LD_VAR 0 2
67620: PUSH
67621: LD_INT 4
67623: MINUS
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: LD_VAR 0 1
67637: PUSH
67638: LD_INT 3
67640: MINUS
67641: PUSH
67642: LD_VAR 0 2
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: LIST
67654: PUSH
67655: LD_VAR 0 1
67659: PUSH
67660: LD_INT 4
67662: PLUS
67663: PUSH
67664: LD_VAR 0 2
67668: PUSH
67669: LD_INT 4
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: LIST
67676: PUSH
67677: LD_VAR 0 1
67681: PUSH
67682: LD_INT 3
67684: PLUS
67685: PUSH
67686: LD_VAR 0 2
67690: PUSH
67691: LD_INT 3
67693: PLUS
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: PUSH
67703: LD_VAR 0 1
67707: PUSH
67708: LD_VAR 0 2
67712: PUSH
67713: LD_INT 4
67715: PLUS
67716: PUSH
67717: LD_INT 0
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: ST_TO_ADDR
// end ; 1 :
67732: GO 68432
67734: LD_INT 1
67736: DOUBLE
67737: EQUAL
67738: IFTRUE 67742
67740: GO 67875
67742: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67743: LD_ADDR_VAR 0 5
67747: PUSH
67748: LD_VAR 0 1
67752: PUSH
67753: LD_VAR 0 2
67757: PUSH
67758: LD_INT 4
67760: MINUS
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: PUSH
67770: LD_VAR 0 1
67774: PUSH
67775: LD_INT 3
67777: MINUS
67778: PUSH
67779: LD_VAR 0 2
67783: PUSH
67784: LD_INT 3
67786: MINUS
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: LD_INT 4
67803: MINUS
67804: PUSH
67805: LD_VAR 0 2
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: LIST
67817: PUSH
67818: LD_VAR 0 1
67822: PUSH
67823: LD_VAR 0 2
67827: PUSH
67828: LD_INT 3
67830: PLUS
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_VAR 0 1
67844: PUSH
67845: LD_INT 4
67847: PLUS
67848: PUSH
67849: LD_VAR 0 2
67853: PUSH
67854: LD_INT 4
67856: PLUS
67857: PUSH
67858: LD_INT 5
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: ST_TO_ADDR
// end ; 2 :
67873: GO 68432
67875: LD_INT 2
67877: DOUBLE
67878: EQUAL
67879: IFTRUE 67883
67881: GO 68012
67883: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: LD_VAR 0 1
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_INT 3
67901: MINUS
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: PUSH
67911: LD_VAR 0 1
67915: PUSH
67916: LD_INT 4
67918: PLUS
67919: PUSH
67920: LD_VAR 0 2
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: PUSH
67933: LD_VAR 0 1
67937: PUSH
67938: LD_VAR 0 2
67942: PUSH
67943: LD_INT 4
67945: PLUS
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: LIST
67954: PUSH
67955: LD_VAR 0 1
67959: PUSH
67960: LD_INT 3
67962: MINUS
67963: PUSH
67964: LD_VAR 0 2
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: LIST
67976: PUSH
67977: LD_VAR 0 1
67981: PUSH
67982: LD_INT 4
67984: MINUS
67985: PUSH
67986: LD_VAR 0 2
67990: PUSH
67991: LD_INT 4
67993: MINUS
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// end ; 3 :
68010: GO 68432
68012: LD_INT 3
68014: DOUBLE
68015: EQUAL
68016: IFTRUE 68020
68018: GO 68153
68020: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68021: LD_ADDR_VAR 0 5
68025: PUSH
68026: LD_VAR 0 1
68030: PUSH
68031: LD_INT 3
68033: PLUS
68034: PUSH
68035: LD_VAR 0 2
68039: PUSH
68040: LD_INT 4
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: LD_INT 4
68055: PLUS
68056: PUSH
68057: LD_VAR 0 2
68061: PUSH
68062: LD_INT 4
68064: PLUS
68065: PUSH
68066: LD_INT 5
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: LIST
68073: PUSH
68074: LD_VAR 0 1
68078: PUSH
68079: LD_INT 4
68081: MINUS
68082: PUSH
68083: LD_VAR 0 2
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: PUSH
68096: LD_VAR 0 1
68100: PUSH
68101: LD_VAR 0 2
68105: PUSH
68106: LD_INT 4
68108: MINUS
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: LD_INT 3
68125: MINUS
68126: PUSH
68127: LD_VAR 0 2
68131: PUSH
68132: LD_INT 3
68134: MINUS
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// end ; 4 :
68151: GO 68432
68153: LD_INT 4
68155: DOUBLE
68156: EQUAL
68157: IFTRUE 68161
68159: GO 68294
68161: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68162: LD_ADDR_VAR 0 5
68166: PUSH
68167: LD_VAR 0 1
68171: PUSH
68172: LD_VAR 0 2
68176: PUSH
68177: LD_INT 4
68179: PLUS
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: LIST
68188: PUSH
68189: LD_VAR 0 1
68193: PUSH
68194: LD_INT 3
68196: PLUS
68197: PUSH
68198: LD_VAR 0 2
68202: PUSH
68203: LD_INT 3
68205: PLUS
68206: PUSH
68207: LD_INT 5
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: PUSH
68215: LD_VAR 0 1
68219: PUSH
68220: LD_INT 4
68222: PLUS
68223: PUSH
68224: LD_VAR 0 2
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: PUSH
68237: LD_VAR 0 1
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: LD_INT 3
68249: MINUS
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: LIST
68258: PUSH
68259: LD_VAR 0 1
68263: PUSH
68264: LD_INT 4
68266: MINUS
68267: PUSH
68268: LD_VAR 0 2
68272: PUSH
68273: LD_INT 4
68275: MINUS
68276: PUSH
68277: LD_INT 2
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// end ; 5 :
68292: GO 68432
68294: LD_INT 5
68296: DOUBLE
68297: EQUAL
68298: IFTRUE 68302
68300: GO 68431
68302: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68303: LD_ADDR_VAR 0 5
68307: PUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_INT 4
68315: MINUS
68316: PUSH
68317: LD_VAR 0 2
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: LIST
68329: PUSH
68330: LD_VAR 0 1
68334: PUSH
68335: LD_VAR 0 2
68339: PUSH
68340: LD_INT 4
68342: MINUS
68343: PUSH
68344: LD_INT 3
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: PUSH
68352: LD_VAR 0 1
68356: PUSH
68357: LD_INT 4
68359: PLUS
68360: PUSH
68361: LD_VAR 0 2
68365: PUSH
68366: LD_INT 4
68368: PLUS
68369: PUSH
68370: LD_INT 5
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: PUSH
68378: LD_VAR 0 1
68382: PUSH
68383: LD_INT 3
68385: PLUS
68386: PUSH
68387: LD_VAR 0 2
68391: PUSH
68392: LD_INT 4
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: PUSH
68400: LD_VAR 0 1
68404: PUSH
68405: LD_VAR 0 2
68409: PUSH
68410: LD_INT 3
68412: PLUS
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: ST_TO_ADDR
// end ; end ;
68429: GO 68432
68431: POP
// result := list ;
68432: LD_ADDR_VAR 0 4
68436: PUSH
68437: LD_VAR 0 5
68441: ST_TO_ADDR
// end ;
68442: LD_VAR 0 4
68446: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68447: LD_INT 0
68449: PPUSH
68450: PPUSH
68451: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68452: LD_VAR 0 1
68456: NOT
68457: IFTRUE 68485
68459: PUSH
68460: LD_VAR 0 2
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: IN
68483: NOT
68484: OR
68485: IFFALSE 68489
// exit ;
68487: GO 68572
// tmp := [ ] ;
68489: LD_ADDR_VAR 0 5
68493: PUSH
68494: EMPTY
68495: ST_TO_ADDR
// for i in units do
68496: LD_ADDR_VAR 0 4
68500: PUSH
68501: LD_VAR 0 1
68505: PUSH
68506: FOR_IN
68507: IFFALSE 68541
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68509: LD_ADDR_VAR 0 5
68513: PUSH
68514: LD_VAR 0 5
68518: PPUSH
68519: LD_VAR 0 4
68523: PPUSH
68524: LD_VAR 0 2
68528: PPUSH
68529: CALL_OW 259
68533: PPUSH
68534: CALL 69967 0 2
68538: ST_TO_ADDR
68539: GO 68506
68541: POP
68542: POP
// if not tmp then
68543: LD_VAR 0 5
68547: NOT
68548: IFFALSE 68552
// exit ;
68550: GO 68572
// result := SortListByListDesc ( units , tmp ) ;
68552: LD_ADDR_VAR 0 3
68556: PUSH
68557: LD_VAR 0 1
68561: PPUSH
68562: LD_VAR 0 5
68566: PPUSH
68567: CALL_OW 77
68571: ST_TO_ADDR
// end ;
68572: LD_VAR 0 3
68576: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68577: LD_INT 0
68579: PPUSH
68580: PPUSH
68581: PPUSH
// result := false ;
68582: LD_ADDR_VAR 0 3
68586: PUSH
68587: LD_INT 0
68589: ST_TO_ADDR
// if not building then
68590: LD_VAR 0 2
68594: NOT
68595: IFFALSE 68599
// exit ;
68597: GO 68743
// x := GetX ( building ) ;
68599: LD_ADDR_VAR 0 4
68603: PUSH
68604: LD_VAR 0 2
68608: PPUSH
68609: CALL_OW 250
68613: ST_TO_ADDR
// y := GetY ( building ) ;
68614: LD_ADDR_VAR 0 5
68618: PUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: CALL_OW 251
68628: ST_TO_ADDR
// if not x or not y then
68629: LD_VAR 0 4
68633: NOT
68634: IFTRUE 68643
68636: PUSH
68637: LD_VAR 0 5
68641: NOT
68642: OR
68643: IFFALSE 68647
// exit ;
68645: GO 68743
// if GetTaskList ( unit ) then
68647: LD_VAR 0 1
68651: PPUSH
68652: CALL_OW 437
68656: IFFALSE 68743
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68658: LD_STRING e
68660: PUSH
68661: LD_VAR 0 1
68665: PPUSH
68666: CALL_OW 437
68670: PUSH
68671: LD_INT 1
68673: ARRAY
68674: PUSH
68675: LD_INT 1
68677: ARRAY
68678: EQUAL
68679: IFFALSE 68706
68681: PUSH
68682: LD_VAR 0 4
68686: PUSH
68687: LD_VAR 0 1
68691: PPUSH
68692: CALL_OW 437
68696: PUSH
68697: LD_INT 1
68699: ARRAY
68700: PUSH
68701: LD_INT 2
68703: ARRAY
68704: EQUAL
68705: AND
68706: IFFALSE 68733
68708: PUSH
68709: LD_VAR 0 5
68713: PUSH
68714: LD_VAR 0 1
68718: PPUSH
68719: CALL_OW 437
68723: PUSH
68724: LD_INT 1
68726: ARRAY
68727: PUSH
68728: LD_INT 3
68730: ARRAY
68731: EQUAL
68732: AND
68733: IFFALSE 68743
// result := true end ;
68735: LD_ADDR_VAR 0 3
68739: PUSH
68740: LD_INT 1
68742: ST_TO_ADDR
// end ;
68743: LD_VAR 0 3
68747: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68748: LD_INT 0
68750: PPUSH
// result := false ;
68751: LD_ADDR_VAR 0 4
68755: PUSH
68756: LD_INT 0
68758: ST_TO_ADDR
// if GetTaskList ( unit ) then
68759: LD_VAR 0 1
68763: PPUSH
68764: CALL_OW 437
68768: IFFALSE 68855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68770: LD_STRING M
68772: PUSH
68773: LD_VAR 0 1
68777: PPUSH
68778: CALL_OW 437
68782: PUSH
68783: LD_INT 1
68785: ARRAY
68786: PUSH
68787: LD_INT 1
68789: ARRAY
68790: EQUAL
68791: IFFALSE 68818
68793: PUSH
68794: LD_VAR 0 2
68798: PUSH
68799: LD_VAR 0 1
68803: PPUSH
68804: CALL_OW 437
68808: PUSH
68809: LD_INT 1
68811: ARRAY
68812: PUSH
68813: LD_INT 2
68815: ARRAY
68816: EQUAL
68817: AND
68818: IFFALSE 68845
68820: PUSH
68821: LD_VAR 0 3
68825: PUSH
68826: LD_VAR 0 1
68830: PPUSH
68831: CALL_OW 437
68835: PUSH
68836: LD_INT 1
68838: ARRAY
68839: PUSH
68840: LD_INT 3
68842: ARRAY
68843: EQUAL
68844: AND
68845: IFFALSE 68855
// result := true ;
68847: LD_ADDR_VAR 0 4
68851: PUSH
68852: LD_INT 1
68854: ST_TO_ADDR
// end ; end ;
68855: LD_VAR 0 4
68859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68860: LD_INT 0
68862: PPUSH
68863: PPUSH
68864: PPUSH
68865: PPUSH
// if not unit or not area then
68866: LD_VAR 0 1
68870: NOT
68871: IFTRUE 68880
68873: PUSH
68874: LD_VAR 0 2
68878: NOT
68879: OR
68880: IFFALSE 68884
// exit ;
68882: GO 69060
// tmp := AreaToList ( area , i ) ;
68884: LD_ADDR_VAR 0 6
68888: PUSH
68889: LD_VAR 0 2
68893: PPUSH
68894: LD_VAR 0 5
68898: PPUSH
68899: CALL_OW 517
68903: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68904: LD_ADDR_VAR 0 5
68908: PUSH
68909: DOUBLE
68910: LD_INT 1
68912: DEC
68913: ST_TO_ADDR
68914: LD_VAR 0 6
68918: PUSH
68919: LD_INT 1
68921: ARRAY
68922: PUSH
68923: FOR_TO
68924: IFFALSE 69058
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68926: LD_ADDR_VAR 0 7
68930: PUSH
68931: LD_VAR 0 6
68935: PUSH
68936: LD_INT 1
68938: ARRAY
68939: PUSH
68940: LD_VAR 0 5
68944: ARRAY
68945: PUSH
68946: LD_VAR 0 6
68950: PUSH
68951: LD_INT 2
68953: ARRAY
68954: PUSH
68955: LD_VAR 0 5
68959: ARRAY
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68965: LD_INT 92
68967: PUSH
68968: LD_VAR 0 7
68972: PUSH
68973: LD_INT 1
68975: ARRAY
68976: PUSH
68977: LD_VAR 0 7
68981: PUSH
68982: LD_INT 2
68984: ARRAY
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: PPUSH
68995: CALL_OW 69
68999: PUSH
69000: LD_INT 0
69002: EQUAL
69003: IFFALSE 69056
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 7
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PPUSH
69019: LD_VAR 0 7
69023: PUSH
69024: LD_INT 2
69026: ARRAY
69027: PPUSH
69028: LD_VAR 0 3
69032: PPUSH
69033: CALL_OW 48
// result := IsPlaced ( unit ) ;
69037: LD_ADDR_VAR 0 4
69041: PUSH
69042: LD_VAR 0 1
69046: PPUSH
69047: CALL_OW 305
69051: ST_TO_ADDR
// exit ;
69052: POP
69053: POP
69054: GO 69060
// end ; end ;
69056: GO 68923
69058: POP
69059: POP
// end ;
69060: LD_VAR 0 4
69064: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69065: LD_INT 0
69067: PPUSH
69068: PPUSH
69069: PPUSH
// if not side or side > 8 then
69070: LD_VAR 0 1
69074: NOT
69075: IFTRUE 69087
69077: PUSH
69078: LD_VAR 0 1
69082: PUSH
69083: LD_INT 8
69085: GREATER
69086: OR
69087: IFFALSE 69091
// exit ;
69089: GO 69278
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69091: LD_ADDR_VAR 0 4
69095: PUSH
69096: LD_INT 22
69098: PUSH
69099: LD_VAR 0 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 21
69110: PUSH
69111: LD_INT 3
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PPUSH
69122: CALL_OW 69
69126: ST_TO_ADDR
// if not tmp then
69127: LD_VAR 0 4
69131: NOT
69132: IFFALSE 69136
// exit ;
69134: GO 69278
// enable_addtolog := true ;
69136: LD_ADDR_OWVAR 81
69140: PUSH
69141: LD_INT 1
69143: ST_TO_ADDR
// AddToLog ( [ ) ;
69144: LD_STRING [
69146: PPUSH
69147: CALL_OW 561
// for i in tmp do
69151: LD_ADDR_VAR 0 3
69155: PUSH
69156: LD_VAR 0 4
69160: PUSH
69161: FOR_IN
69162: IFFALSE 69269
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69164: LD_STRING [
69166: PUSH
69167: LD_VAR 0 3
69171: PPUSH
69172: CALL_OW 266
69176: STR
69177: PUSH
69178: LD_STRING , 
69180: STR
69181: PUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 250
69191: STR
69192: PUSH
69193: LD_STRING , 
69195: STR
69196: PUSH
69197: LD_VAR 0 3
69201: PPUSH
69202: CALL_OW 251
69206: STR
69207: PUSH
69208: LD_STRING , 
69210: STR
69211: PUSH
69212: LD_VAR 0 3
69216: PPUSH
69217: CALL_OW 254
69221: STR
69222: PUSH
69223: LD_STRING , 
69225: STR
69226: PUSH
69227: LD_VAR 0 3
69231: PPUSH
69232: LD_INT 1
69234: PPUSH
69235: CALL_OW 268
69239: STR
69240: PUSH
69241: LD_STRING , 
69243: STR
69244: PUSH
69245: LD_VAR 0 3
69249: PPUSH
69250: LD_INT 2
69252: PPUSH
69253: CALL_OW 268
69257: STR
69258: PUSH
69259: LD_STRING ],
69261: STR
69262: PPUSH
69263: CALL_OW 561
// end ;
69267: GO 69161
69269: POP
69270: POP
// AddToLog ( ]; ) ;
69271: LD_STRING ];
69273: PPUSH
69274: CALL_OW 561
// end ;
69278: LD_VAR 0 2
69282: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69283: LD_INT 0
69285: PPUSH
69286: PPUSH
69287: PPUSH
69288: PPUSH
69289: PPUSH
// if not area or not rate or not max then
69290: LD_VAR 0 1
69294: NOT
69295: IFTRUE 69304
69297: PUSH
69298: LD_VAR 0 2
69302: NOT
69303: OR
69304: IFTRUE 69313
69306: PUSH
69307: LD_VAR 0 4
69311: NOT
69312: OR
69313: IFFALSE 69317
// exit ;
69315: GO 69506
// while 1 do
69317: LD_INT 1
69319: IFFALSE 69506
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69321: LD_ADDR_VAR 0 9
69325: PUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: LD_INT 1
69333: PPUSH
69334: CALL_OW 287
69338: PUSH
69339: LD_INT 10
69341: MUL
69342: ST_TO_ADDR
// r := rate / 10 ;
69343: LD_ADDR_VAR 0 7
69347: PUSH
69348: LD_VAR 0 2
69352: PUSH
69353: LD_INT 10
69355: DIVREAL
69356: ST_TO_ADDR
// time := 1 1$00 ;
69357: LD_ADDR_VAR 0 8
69361: PUSH
69362: LD_INT 2100
69364: ST_TO_ADDR
// if amount < min then
69365: LD_VAR 0 9
69369: PUSH
69370: LD_VAR 0 3
69374: LESS
69375: IFFALSE 69393
// r := r * 2 else
69377: LD_ADDR_VAR 0 7
69381: PUSH
69382: LD_VAR 0 7
69386: PUSH
69387: LD_INT 2
69389: MUL
69390: ST_TO_ADDR
69391: GO 69419
// if amount > max then
69393: LD_VAR 0 9
69397: PUSH
69398: LD_VAR 0 4
69402: GREATER
69403: IFFALSE 69419
// r := r / 2 ;
69405: LD_ADDR_VAR 0 7
69409: PUSH
69410: LD_VAR 0 7
69414: PUSH
69415: LD_INT 2
69417: DIVREAL
69418: ST_TO_ADDR
// time := time / r ;
69419: LD_ADDR_VAR 0 8
69423: PUSH
69424: LD_VAR 0 8
69428: PUSH
69429: LD_VAR 0 7
69433: DIVREAL
69434: ST_TO_ADDR
// if time < 0 then
69435: LD_VAR 0 8
69439: PUSH
69440: LD_INT 0
69442: LESS
69443: IFFALSE 69460
// time := time * - 1 ;
69445: LD_ADDR_VAR 0 8
69449: PUSH
69450: LD_VAR 0 8
69454: PUSH
69455: LD_INT 1
69457: NEG
69458: MUL
69459: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69460: LD_VAR 0 8
69464: PUSH
69465: LD_INT 35
69467: PPUSH
69468: LD_INT 875
69470: PPUSH
69471: CALL_OW 12
69475: PLUS
69476: PPUSH
69477: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69481: LD_INT 1
69483: PPUSH
69484: LD_INT 5
69486: PPUSH
69487: CALL_OW 12
69491: PPUSH
69492: LD_VAR 0 1
69496: PPUSH
69497: LD_INT 1
69499: PPUSH
69500: CALL_OW 55
// end ;
69504: GO 69317
// end ;
69506: LD_VAR 0 5
69510: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69511: LD_INT 0
69513: PPUSH
69514: PPUSH
69515: PPUSH
69516: PPUSH
69517: PPUSH
69518: PPUSH
69519: PPUSH
69520: PPUSH
// if not turrets or not factories then
69521: LD_VAR 0 1
69525: NOT
69526: IFTRUE 69535
69528: PUSH
69529: LD_VAR 0 2
69533: NOT
69534: OR
69535: IFFALSE 69539
// exit ;
69537: GO 69846
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69539: LD_ADDR_VAR 0 10
69543: PUSH
69544: LD_INT 5
69546: PUSH
69547: LD_INT 6
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: LD_INT 4
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: LD_INT 5
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 24
69581: PUSH
69582: LD_INT 25
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 23
69591: PUSH
69592: LD_INT 27
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 42
69605: PUSH
69606: LD_INT 43
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 44
69615: PUSH
69616: LD_INT 46
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 45
69625: PUSH
69626: LD_INT 47
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: ST_TO_ADDR
// result := [ ] ;
69643: LD_ADDR_VAR 0 3
69647: PUSH
69648: EMPTY
69649: ST_TO_ADDR
// for i in turrets do
69650: LD_ADDR_VAR 0 4
69654: PUSH
69655: LD_VAR 0 1
69659: PUSH
69660: FOR_IN
69661: IFFALSE 69844
// begin nat := GetNation ( i ) ;
69663: LD_ADDR_VAR 0 7
69667: PUSH
69668: LD_VAR 0 4
69672: PPUSH
69673: CALL_OW 248
69677: ST_TO_ADDR
// weapon := 0 ;
69678: LD_ADDR_VAR 0 8
69682: PUSH
69683: LD_INT 0
69685: ST_TO_ADDR
// if not nat then
69686: LD_VAR 0 7
69690: NOT
69691: IFFALSE 69695
// continue ;
69693: GO 69660
// for j in list [ nat ] do
69695: LD_ADDR_VAR 0 5
69699: PUSH
69700: LD_VAR 0 10
69704: PUSH
69705: LD_VAR 0 7
69709: ARRAY
69710: PUSH
69711: FOR_IN
69712: IFFALSE 69753
// if GetBWeapon ( i ) = j [ 1 ] then
69714: LD_VAR 0 4
69718: PPUSH
69719: CALL_OW 269
69723: PUSH
69724: LD_VAR 0 5
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: EQUAL
69733: IFFALSE 69751
// begin weapon := j [ 2 ] ;
69735: LD_ADDR_VAR 0 8
69739: PUSH
69740: LD_VAR 0 5
69744: PUSH
69745: LD_INT 2
69747: ARRAY
69748: ST_TO_ADDR
// break ;
69749: GO 69753
// end ;
69751: GO 69711
69753: POP
69754: POP
// if not weapon then
69755: LD_VAR 0 8
69759: NOT
69760: IFFALSE 69764
// continue ;
69762: GO 69660
// for k in factories do
69764: LD_ADDR_VAR 0 6
69768: PUSH
69769: LD_VAR 0 2
69773: PUSH
69774: FOR_IN
69775: IFFALSE 69840
// begin weapons := AvailableWeaponList ( k ) ;
69777: LD_ADDR_VAR 0 9
69781: PUSH
69782: LD_VAR 0 6
69786: PPUSH
69787: CALL_OW 478
69791: ST_TO_ADDR
// if not weapons then
69792: LD_VAR 0 9
69796: NOT
69797: IFFALSE 69801
// continue ;
69799: GO 69774
// if weapon in weapons then
69801: LD_VAR 0 8
69805: PUSH
69806: LD_VAR 0 9
69810: IN
69811: IFFALSE 69838
// begin result := [ i , weapon ] ;
69813: LD_ADDR_VAR 0 3
69817: PUSH
69818: LD_VAR 0 4
69822: PUSH
69823: LD_VAR 0 8
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: ST_TO_ADDR
// exit ;
69832: POP
69833: POP
69834: POP
69835: POP
69836: GO 69846
// end ; end ;
69838: GO 69774
69840: POP
69841: POP
// end ;
69842: GO 69660
69844: POP
69845: POP
// end ;
69846: LD_VAR 0 3
69850: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69851: LD_INT 0
69853: PPUSH
// if not side or side > 8 then
69854: LD_VAR 0 3
69858: NOT
69859: IFTRUE 69871
69861: PUSH
69862: LD_VAR 0 3
69866: PUSH
69867: LD_INT 8
69869: GREATER
69870: OR
69871: IFFALSE 69875
// exit ;
69873: GO 69934
// if not range then
69875: LD_VAR 0 4
69879: NOT
69880: IFFALSE 69891
// range := - 12 ;
69882: LD_ADDR_VAR 0 4
69886: PUSH
69887: LD_INT 12
69889: NEG
69890: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69891: LD_VAR 0 1
69895: PPUSH
69896: LD_VAR 0 2
69900: PPUSH
69901: LD_VAR 0 3
69905: PPUSH
69906: LD_VAR 0 4
69910: PPUSH
69911: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69915: LD_VAR 0 1
69919: PPUSH
69920: LD_VAR 0 2
69924: PPUSH
69925: LD_VAR 0 3
69929: PPUSH
69930: CALL_OW 331
// end ;
69934: LD_VAR 0 5
69938: RET
// export function Video ( mode ) ; begin
69939: LD_INT 0
69941: PPUSH
// ingame_video = mode ;
69942: LD_ADDR_OWVAR 52
69946: PUSH
69947: LD_VAR 0 1
69951: ST_TO_ADDR
// interface_hidden = mode ;
69952: LD_ADDR_OWVAR 54
69956: PUSH
69957: LD_VAR 0 1
69961: ST_TO_ADDR
// end ;
69962: LD_VAR 0 2
69966: RET
// export function Join ( array , element ) ; begin
69967: LD_INT 0
69969: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69970: LD_ADDR_VAR 0 3
69974: PUSH
69975: LD_VAR 0 1
69979: PPUSH
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 1
69987: PLUS
69988: PPUSH
69989: LD_VAR 0 2
69993: PPUSH
69994: CALL_OW 1
69998: ST_TO_ADDR
// end ;
69999: LD_VAR 0 3
70003: RET
// export function JoinUnion ( array , element ) ; begin
70004: LD_INT 0
70006: PPUSH
// result := array union element ;
70007: LD_ADDR_VAR 0 3
70011: PUSH
70012: LD_VAR 0 1
70016: PUSH
70017: LD_VAR 0 2
70021: UNION
70022: ST_TO_ADDR
// end ;
70023: LD_VAR 0 3
70027: RET
// export function GetBehemoths ( side ) ; begin
70028: LD_INT 0
70030: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70031: LD_ADDR_VAR 0 2
70035: PUSH
70036: LD_INT 22
70038: PUSH
70039: LD_VAR 0 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 31
70050: PUSH
70051: LD_INT 25
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PPUSH
70062: CALL_OW 69
70066: ST_TO_ADDR
// end ;
70067: LD_VAR 0 2
70071: RET
// export function Shuffle ( array ) ; var i , index ; begin
70072: LD_INT 0
70074: PPUSH
70075: PPUSH
70076: PPUSH
// result := [ ] ;
70077: LD_ADDR_VAR 0 2
70081: PUSH
70082: EMPTY
70083: ST_TO_ADDR
// if not array then
70084: LD_VAR 0 1
70088: NOT
70089: IFFALSE 70093
// exit ;
70091: GO 70192
// Randomize ;
70093: CALL_OW 10
// for i = array downto 1 do
70097: LD_ADDR_VAR 0 3
70101: PUSH
70102: DOUBLE
70103: LD_VAR 0 1
70107: INC
70108: ST_TO_ADDR
70109: LD_INT 1
70111: PUSH
70112: FOR_DOWNTO
70113: IFFALSE 70190
// begin index := rand ( 1 , array ) ;
70115: LD_ADDR_VAR 0 4
70119: PUSH
70120: LD_INT 1
70122: PPUSH
70123: LD_VAR 0 1
70127: PPUSH
70128: CALL_OW 12
70132: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70133: LD_ADDR_VAR 0 2
70137: PUSH
70138: LD_VAR 0 2
70142: PPUSH
70143: LD_VAR 0 2
70147: PUSH
70148: LD_INT 1
70150: PLUS
70151: PPUSH
70152: LD_VAR 0 1
70156: PUSH
70157: LD_VAR 0 4
70161: ARRAY
70162: PPUSH
70163: CALL_OW 2
70167: ST_TO_ADDR
// array := Delete ( array , index ) ;
70168: LD_ADDR_VAR 0 1
70172: PUSH
70173: LD_VAR 0 1
70177: PPUSH
70178: LD_VAR 0 4
70182: PPUSH
70183: CALL_OW 3
70187: ST_TO_ADDR
// end ;
70188: GO 70112
70190: POP
70191: POP
// end ;
70192: LD_VAR 0 2
70196: RET
// export function GetBaseMaterials ( base ) ; begin
70197: LD_INT 0
70199: PPUSH
// result := [ 0 , 0 , 0 ] ;
70200: LD_ADDR_VAR 0 2
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: LD_INT 0
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: LIST
70218: ST_TO_ADDR
// if not base then
70219: LD_VAR 0 1
70223: NOT
70224: IFFALSE 70228
// exit ;
70226: GO 70277
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70228: LD_ADDR_VAR 0 2
70232: PUSH
70233: LD_VAR 0 1
70237: PPUSH
70238: LD_INT 1
70240: PPUSH
70241: CALL_OW 275
70245: PUSH
70246: LD_VAR 0 1
70250: PPUSH
70251: LD_INT 2
70253: PPUSH
70254: CALL_OW 275
70258: PUSH
70259: LD_VAR 0 1
70263: PPUSH
70264: LD_INT 3
70266: PPUSH
70267: CALL_OW 275
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: ST_TO_ADDR
// end ;
70277: LD_VAR 0 2
70281: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70282: LD_INT 0
70284: PPUSH
70285: PPUSH
// result := array ;
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_VAR 0 1
70295: ST_TO_ADDR
// if size >= result then
70296: LD_VAR 0 2
70300: PUSH
70301: LD_VAR 0 3
70305: GREATEREQUAL
70306: IFFALSE 70310
// exit ;
70308: GO 70360
// if size then
70310: LD_VAR 0 2
70314: IFFALSE 70360
// for i := array downto size do
70316: LD_ADDR_VAR 0 4
70320: PUSH
70321: DOUBLE
70322: LD_VAR 0 1
70326: INC
70327: ST_TO_ADDR
70328: LD_VAR 0 2
70332: PUSH
70333: FOR_DOWNTO
70334: IFFALSE 70358
// result := Delete ( result , result ) ;
70336: LD_ADDR_VAR 0 3
70340: PUSH
70341: LD_VAR 0 3
70345: PPUSH
70346: LD_VAR 0 3
70350: PPUSH
70351: CALL_OW 3
70355: ST_TO_ADDR
70356: GO 70333
70358: POP
70359: POP
// end ;
70360: LD_VAR 0 3
70364: RET
// export function ComExit ( unit ) ; var tmp ; begin
70365: LD_INT 0
70367: PPUSH
70368: PPUSH
// if not IsInUnit ( unit ) then
70369: LD_VAR 0 1
70373: PPUSH
70374: CALL_OW 310
70378: NOT
70379: IFFALSE 70383
// exit ;
70381: GO 70443
// tmp := IsInUnit ( unit ) ;
70383: LD_ADDR_VAR 0 3
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: CALL_OW 310
70397: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70398: LD_VAR 0 3
70402: PPUSH
70403: CALL_OW 247
70407: PUSH
70408: LD_INT 2
70410: EQUAL
70411: IFFALSE 70424
// ComExitVehicle ( unit ) else
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 121
70422: GO 70433
// ComExitBuilding ( unit ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: CALL_OW 122
// result := tmp ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_VAR 0 3
70442: ST_TO_ADDR
// end ;
70443: LD_VAR 0 2
70447: RET
// export function ComExitAll ( units ) ; var i ; begin
70448: LD_INT 0
70450: PPUSH
70451: PPUSH
// if not units then
70452: LD_VAR 0 1
70456: NOT
70457: IFFALSE 70461
// exit ;
70459: GO 70487
// for i in units do
70461: LD_ADDR_VAR 0 3
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: FOR_IN
70472: IFFALSE 70485
// ComExit ( i ) ;
70474: LD_VAR 0 3
70478: PPUSH
70479: CALL 70365 0 1
70483: GO 70471
70485: POP
70486: POP
// end ;
70487: LD_VAR 0 2
70491: RET
// export function ResetHc ; begin
70492: LD_INT 0
70494: PPUSH
// InitHc ;
70495: CALL_OW 19
// hc_importance := 0 ;
70499: LD_ADDR_OWVAR 32
70503: PUSH
70504: LD_INT 0
70506: ST_TO_ADDR
// end ;
70507: LD_VAR 0 1
70511: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70512: LD_INT 0
70514: PPUSH
70515: PPUSH
70516: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70517: LD_ADDR_VAR 0 6
70521: PUSH
70522: LD_VAR 0 1
70526: PUSH
70527: LD_VAR 0 3
70531: PLUS
70532: PUSH
70533: LD_INT 2
70535: DIV
70536: ST_TO_ADDR
// if _x < 0 then
70537: LD_VAR 0 6
70541: PUSH
70542: LD_INT 0
70544: LESS
70545: IFFALSE 70562
// _x := _x * - 1 ;
70547: LD_ADDR_VAR 0 6
70551: PUSH
70552: LD_VAR 0 6
70556: PUSH
70557: LD_INT 1
70559: NEG
70560: MUL
70561: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70562: LD_ADDR_VAR 0 7
70566: PUSH
70567: LD_VAR 0 2
70571: PUSH
70572: LD_VAR 0 4
70576: PLUS
70577: PUSH
70578: LD_INT 2
70580: DIV
70581: ST_TO_ADDR
// if _y < 0 then
70582: LD_VAR 0 7
70586: PUSH
70587: LD_INT 0
70589: LESS
70590: IFFALSE 70607
// _y := _y * - 1 ;
70592: LD_ADDR_VAR 0 7
70596: PUSH
70597: LD_VAR 0 7
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: MUL
70606: ST_TO_ADDR
// result := [ _x , _y ] ;
70607: LD_ADDR_VAR 0 5
70611: PUSH
70612: LD_VAR 0 6
70616: PUSH
70617: LD_VAR 0 7
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: ST_TO_ADDR
// end ;
70626: LD_VAR 0 5
70630: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70631: LD_INT 0
70633: PPUSH
70634: PPUSH
70635: PPUSH
70636: PPUSH
// task := GetTaskList ( unit ) ;
70637: LD_ADDR_VAR 0 7
70641: PUSH
70642: LD_VAR 0 1
70646: PPUSH
70647: CALL_OW 437
70651: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70652: LD_VAR 0 7
70656: NOT
70657: IFFALSE 70676
70659: PUSH
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: CALL_OW 308
70674: NOT
70675: AND
70676: IFFALSE 70680
// exit ;
70678: GO 70798
// if IsInArea ( unit , area ) then
70680: LD_VAR 0 1
70684: PPUSH
70685: LD_VAR 0 2
70689: PPUSH
70690: CALL_OW 308
70694: IFFALSE 70712
// begin ComMoveToArea ( unit , goAway ) ;
70696: LD_VAR 0 1
70700: PPUSH
70701: LD_VAR 0 3
70705: PPUSH
70706: CALL_OW 113
// exit ;
70710: GO 70798
// end ; if task [ 1 ] [ 1 ] <> M then
70712: LD_VAR 0 7
70716: PUSH
70717: LD_INT 1
70719: ARRAY
70720: PUSH
70721: LD_INT 1
70723: ARRAY
70724: PUSH
70725: LD_STRING M
70727: NONEQUAL
70728: IFFALSE 70732
// exit ;
70730: GO 70798
// x := task [ 1 ] [ 2 ] ;
70732: LD_ADDR_VAR 0 5
70736: PUSH
70737: LD_VAR 0 7
70741: PUSH
70742: LD_INT 1
70744: ARRAY
70745: PUSH
70746: LD_INT 2
70748: ARRAY
70749: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70750: LD_ADDR_VAR 0 6
70754: PUSH
70755: LD_VAR 0 7
70759: PUSH
70760: LD_INT 1
70762: ARRAY
70763: PUSH
70764: LD_INT 3
70766: ARRAY
70767: ST_TO_ADDR
// if InArea ( x , y , area ) then
70768: LD_VAR 0 5
70772: PPUSH
70773: LD_VAR 0 6
70777: PPUSH
70778: LD_VAR 0 2
70782: PPUSH
70783: CALL_OW 309
70787: IFFALSE 70798
// ComStop ( unit ) ;
70789: LD_VAR 0 1
70793: PPUSH
70794: CALL_OW 141
// end ;
70798: LD_VAR 0 4
70802: RET
// export function Abs ( value ) ; begin
70803: LD_INT 0
70805: PPUSH
// result := value ;
70806: LD_ADDR_VAR 0 2
70810: PUSH
70811: LD_VAR 0 1
70815: ST_TO_ADDR
// if value < 0 then
70816: LD_VAR 0 1
70820: PUSH
70821: LD_INT 0
70823: LESS
70824: IFFALSE 70841
// result := value * - 1 ;
70826: LD_ADDR_VAR 0 2
70830: PUSH
70831: LD_VAR 0 1
70835: PUSH
70836: LD_INT 1
70838: NEG
70839: MUL
70840: ST_TO_ADDR
// end ;
70841: LD_VAR 0 2
70845: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70846: LD_INT 0
70848: PPUSH
70849: PPUSH
70850: PPUSH
70851: PPUSH
70852: PPUSH
70853: PPUSH
70854: PPUSH
70855: PPUSH
// if not unit or not building then
70856: LD_VAR 0 1
70860: NOT
70861: IFTRUE 70870
70863: PUSH
70864: LD_VAR 0 2
70868: NOT
70869: OR
70870: IFFALSE 70874
// exit ;
70872: GO 71102
// x := GetX ( building ) ;
70874: LD_ADDR_VAR 0 4
70878: PUSH
70879: LD_VAR 0 2
70883: PPUSH
70884: CALL_OW 250
70888: ST_TO_ADDR
// y := GetY ( building ) ;
70889: LD_ADDR_VAR 0 6
70893: PUSH
70894: LD_VAR 0 2
70898: PPUSH
70899: CALL_OW 251
70903: ST_TO_ADDR
// d := GetDir ( building ) ;
70904: LD_ADDR_VAR 0 8
70908: PUSH
70909: LD_VAR 0 2
70913: PPUSH
70914: CALL_OW 254
70918: ST_TO_ADDR
// r := 4 ;
70919: LD_ADDR_VAR 0 9
70923: PUSH
70924: LD_INT 4
70926: ST_TO_ADDR
// for i := 1 to 5 do
70927: LD_ADDR_VAR 0 10
70931: PUSH
70932: DOUBLE
70933: LD_INT 1
70935: DEC
70936: ST_TO_ADDR
70937: LD_INT 5
70939: PUSH
70940: FOR_TO
70941: IFFALSE 71100
// begin _x := ShiftX ( x , d , r + i ) ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: LD_VAR 0 4
70952: PPUSH
70953: LD_VAR 0 8
70957: PPUSH
70958: LD_VAR 0 9
70962: PUSH
70963: LD_VAR 0 10
70967: PLUS
70968: PPUSH
70969: CALL_OW 272
70973: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70974: LD_ADDR_VAR 0 7
70978: PUSH
70979: LD_VAR 0 6
70983: PPUSH
70984: LD_VAR 0 8
70988: PPUSH
70989: LD_VAR 0 9
70993: PUSH
70994: LD_VAR 0 10
70998: PLUS
70999: PPUSH
71000: CALL_OW 273
71004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71005: LD_VAR 0 5
71009: PPUSH
71010: LD_VAR 0 7
71014: PPUSH
71015: CALL_OW 488
71019: IFFALSE 71054
71021: PUSH
71022: LD_VAR 0 5
71026: PPUSH
71027: LD_VAR 0 7
71031: PPUSH
71032: CALL_OW 428
71036: PPUSH
71037: CALL_OW 247
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: IN
71052: NOT
71053: AND
71054: IFFALSE 71098
// begin ComMoveXY ( unit , _x , _y ) ;
71056: LD_VAR 0 1
71060: PPUSH
71061: LD_VAR 0 5
71065: PPUSH
71066: LD_VAR 0 7
71070: PPUSH
71071: CALL_OW 111
// result := [ _x , _y ] ;
71075: LD_ADDR_VAR 0 3
71079: PUSH
71080: LD_VAR 0 5
71084: PUSH
71085: LD_VAR 0 7
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// exit ;
71094: POP
71095: POP
71096: GO 71102
// end ; end ;
71098: GO 70940
71100: POP
71101: POP
// end ;
71102: LD_VAR 0 3
71106: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71107: LD_INT 0
71109: PPUSH
71110: PPUSH
71111: PPUSH
// result := 0 ;
71112: LD_ADDR_VAR 0 3
71116: PUSH
71117: LD_INT 0
71119: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71120: LD_VAR 0 1
71124: PUSH
71125: LD_INT 0
71127: LESS
71128: IFTRUE 71140
71130: PUSH
71131: LD_VAR 0 1
71135: PUSH
71136: LD_INT 8
71138: GREATER
71139: OR
71140: IFTRUE 71152
71142: PUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_INT 0
71150: LESS
71151: OR
71152: IFTRUE 71164
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: LD_INT 8
71162: GREATER
71163: OR
71164: IFFALSE 71168
// exit ;
71166: GO 71243
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71168: LD_ADDR_VAR 0 4
71172: PUSH
71173: LD_INT 22
71175: PUSH
71176: LD_VAR 0 2
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PPUSH
71185: CALL_OW 69
71189: PUSH
71190: FOR_IN
71191: IFFALSE 71241
// begin un := UnitShoot ( i ) ;
71193: LD_ADDR_VAR 0 5
71197: PUSH
71198: LD_VAR 0 4
71202: PPUSH
71203: CALL_OW 504
71207: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71208: LD_VAR 0 5
71212: PPUSH
71213: CALL_OW 255
71217: PUSH
71218: LD_VAR 0 1
71222: EQUAL
71223: IFFALSE 71239
// begin result := un ;
71225: LD_ADDR_VAR 0 3
71229: PUSH
71230: LD_VAR 0 5
71234: ST_TO_ADDR
// exit ;
71235: POP
71236: POP
71237: GO 71243
// end ; end ;
71239: GO 71190
71241: POP
71242: POP
// end ;
71243: LD_VAR 0 3
71247: RET
// export function GetCargoBay ( units ) ; begin
71248: LD_INT 0
71250: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71251: LD_ADDR_VAR 0 2
71255: PUSH
71256: LD_VAR 0 1
71260: PPUSH
71261: LD_INT 2
71263: PUSH
71264: LD_INT 34
71266: PUSH
71267: LD_INT 12
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 34
71276: PUSH
71277: LD_INT 51
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 34
71286: PUSH
71287: LD_INT 32
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 34
71296: PUSH
71297: LD_INT 89
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: PPUSH
71311: CALL_OW 72
71315: ST_TO_ADDR
// end ;
71316: LD_VAR 0 2
71320: RET
// export function Negate ( value ) ; begin
71321: LD_INT 0
71323: PPUSH
// result := not value ;
71324: LD_ADDR_VAR 0 2
71328: PUSH
71329: LD_VAR 0 1
71333: NOT
71334: ST_TO_ADDR
// end ;
71335: LD_VAR 0 2
71339: RET
// export function Inc ( value ) ; begin
71340: LD_INT 0
71342: PPUSH
// result := value + 1 ;
71343: LD_ADDR_VAR 0 2
71347: PUSH
71348: LD_VAR 0 1
71352: PUSH
71353: LD_INT 1
71355: PLUS
71356: ST_TO_ADDR
// end ;
71357: LD_VAR 0 2
71361: RET
// export function Dec ( value ) ; begin
71362: LD_INT 0
71364: PPUSH
// result := value - 1 ;
71365: LD_ADDR_VAR 0 2
71369: PUSH
71370: LD_VAR 0 1
71374: PUSH
71375: LD_INT 1
71377: MINUS
71378: ST_TO_ADDR
// end ;
71379: LD_VAR 0 2
71383: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71384: LD_INT 0
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71394: LD_VAR 0 1
71398: PPUSH
71399: LD_VAR 0 2
71403: PPUSH
71404: CALL_OW 488
71408: NOT
71409: IFTRUE 71428
71411: PUSH
71412: LD_VAR 0 3
71416: PPUSH
71417: LD_VAR 0 4
71421: PPUSH
71422: CALL_OW 488
71426: NOT
71427: OR
71428: IFFALSE 71441
// begin result := - 1 ;
71430: LD_ADDR_VAR 0 5
71434: PUSH
71435: LD_INT 1
71437: NEG
71438: ST_TO_ADDR
// exit ;
71439: GO 71676
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71441: LD_ADDR_VAR 0 12
71445: PUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: LD_VAR 0 3
71460: PPUSH
71461: LD_VAR 0 4
71465: PPUSH
71466: CALL 70512 0 4
71470: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71471: LD_ADDR_VAR 0 11
71475: PUSH
71476: LD_VAR 0 1
71480: PPUSH
71481: LD_VAR 0 2
71485: PPUSH
71486: LD_VAR 0 12
71490: PUSH
71491: LD_INT 1
71493: ARRAY
71494: PPUSH
71495: LD_VAR 0 12
71499: PUSH
71500: LD_INT 2
71502: ARRAY
71503: PPUSH
71504: CALL_OW 298
71508: ST_TO_ADDR
// distance := 9999 ;
71509: LD_ADDR_VAR 0 10
71513: PUSH
71514: LD_INT 9999
71516: ST_TO_ADDR
// for i := 0 to 5 do
71517: LD_ADDR_VAR 0 6
71521: PUSH
71522: DOUBLE
71523: LD_INT 0
71525: DEC
71526: ST_TO_ADDR
71527: LD_INT 5
71529: PUSH
71530: FOR_TO
71531: IFFALSE 71674
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71533: LD_ADDR_VAR 0 7
71537: PUSH
71538: LD_VAR 0 1
71542: PPUSH
71543: LD_VAR 0 6
71547: PPUSH
71548: LD_VAR 0 11
71552: PPUSH
71553: CALL_OW 272
71557: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71558: LD_ADDR_VAR 0 8
71562: PUSH
71563: LD_VAR 0 2
71567: PPUSH
71568: LD_VAR 0 6
71572: PPUSH
71573: LD_VAR 0 11
71577: PPUSH
71578: CALL_OW 273
71582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71583: LD_VAR 0 7
71587: PPUSH
71588: LD_VAR 0 8
71592: PPUSH
71593: CALL_OW 488
71597: NOT
71598: IFFALSE 71602
// continue ;
71600: GO 71530
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71602: LD_ADDR_VAR 0 9
71606: PUSH
71607: LD_VAR 0 12
71611: PUSH
71612: LD_INT 1
71614: ARRAY
71615: PPUSH
71616: LD_VAR 0 12
71620: PUSH
71621: LD_INT 2
71623: ARRAY
71624: PPUSH
71625: LD_VAR 0 7
71629: PPUSH
71630: LD_VAR 0 8
71634: PPUSH
71635: CALL_OW 298
71639: ST_TO_ADDR
// if tmp < distance then
71640: LD_VAR 0 9
71644: PUSH
71645: LD_VAR 0 10
71649: LESS
71650: IFFALSE 71672
// begin result := i ;
71652: LD_ADDR_VAR 0 5
71656: PUSH
71657: LD_VAR 0 6
71661: ST_TO_ADDR
// distance := tmp ;
71662: LD_ADDR_VAR 0 10
71666: PUSH
71667: LD_VAR 0 9
71671: ST_TO_ADDR
// end ; end ;
71672: GO 71530
71674: POP
71675: POP
// end ;
71676: LD_VAR 0 5
71680: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71681: LD_INT 0
71683: PPUSH
71684: PPUSH
// if not driver or not IsInUnit ( driver ) then
71685: LD_VAR 0 1
71689: NOT
71690: IFTRUE 71704
71692: PUSH
71693: LD_VAR 0 1
71697: PPUSH
71698: CALL_OW 310
71702: NOT
71703: OR
71704: IFFALSE 71708
// exit ;
71706: GO 71798
// vehicle := IsInUnit ( driver ) ;
71708: LD_ADDR_VAR 0 3
71712: PUSH
71713: LD_VAR 0 1
71717: PPUSH
71718: CALL_OW 310
71722: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71723: LD_VAR 0 1
71727: PPUSH
71728: LD_STRING \
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: PUSH
71758: LD_STRING E
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: LD_VAR 0 3
71771: PUSH
71772: LD_INT 0
71774: PUSH
71775: LD_INT 0
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PPUSH
71794: CALL_OW 446
// end ;
71798: LD_VAR 0 2
71802: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71803: LD_INT 0
71805: PPUSH
71806: PPUSH
// if not driver or not IsInUnit ( driver ) then
71807: LD_VAR 0 1
71811: NOT
71812: IFTRUE 71826
71814: PUSH
71815: LD_VAR 0 1
71819: PPUSH
71820: CALL_OW 310
71824: NOT
71825: OR
71826: IFFALSE 71830
// exit ;
71828: GO 71920
// vehicle := IsInUnit ( driver ) ;
71830: LD_ADDR_VAR 0 3
71834: PUSH
71835: LD_VAR 0 1
71839: PPUSH
71840: CALL_OW 310
71844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71845: LD_VAR 0 1
71849: PPUSH
71850: LD_STRING \
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: PUSH
71880: LD_STRING E
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_VAR 0 3
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PPUSH
71916: CALL_OW 447
// end ;
71920: LD_VAR 0 2
71924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71925: LD_INT 0
71927: PPUSH
71928: PPUSH
71929: PPUSH
// tmp := [ ] ;
71930: LD_ADDR_VAR 0 5
71934: PUSH
71935: EMPTY
71936: ST_TO_ADDR
// for i in units do
71937: LD_ADDR_VAR 0 4
71941: PUSH
71942: LD_VAR 0 1
71946: PUSH
71947: FOR_IN
71948: IFFALSE 71986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71950: LD_ADDR_VAR 0 5
71954: PUSH
71955: LD_VAR 0 5
71959: PPUSH
71960: LD_VAR 0 5
71964: PUSH
71965: LD_INT 1
71967: PLUS
71968: PPUSH
71969: LD_VAR 0 4
71973: PPUSH
71974: CALL_OW 256
71978: PPUSH
71979: CALL_OW 2
71983: ST_TO_ADDR
71984: GO 71947
71986: POP
71987: POP
// if not tmp then
71988: LD_VAR 0 5
71992: NOT
71993: IFFALSE 71997
// exit ;
71995: GO 72045
// if asc then
71997: LD_VAR 0 2
72001: IFFALSE 72025
// result := SortListByListAsc ( units , tmp ) else
72003: LD_ADDR_VAR 0 3
72007: PUSH
72008: LD_VAR 0 1
72012: PPUSH
72013: LD_VAR 0 5
72017: PPUSH
72018: CALL_OW 76
72022: ST_TO_ADDR
72023: GO 72045
// result := SortListByListDesc ( units , tmp ) ;
72025: LD_ADDR_VAR 0 3
72029: PUSH
72030: LD_VAR 0 1
72034: PPUSH
72035: LD_VAR 0 5
72039: PPUSH
72040: CALL_OW 77
72044: ST_TO_ADDR
// end ;
72045: LD_VAR 0 3
72049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
// task := GetTaskList ( mech ) ;
72054: LD_ADDR_VAR 0 4
72058: PUSH
72059: LD_VAR 0 1
72063: PPUSH
72064: CALL_OW 437
72068: ST_TO_ADDR
// if not task then
72069: LD_VAR 0 4
72073: NOT
72074: IFFALSE 72078
// exit ;
72076: GO 72122
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72078: LD_ADDR_VAR 0 3
72082: PUSH
72083: LD_VAR 0 4
72087: PUSH
72088: LD_INT 1
72090: ARRAY
72091: PUSH
72092: LD_INT 1
72094: ARRAY
72095: PUSH
72096: LD_STRING r
72098: EQUAL
72099: IFFALSE 72121
72101: PUSH
72102: LD_VAR 0 4
72106: PUSH
72107: LD_INT 1
72109: ARRAY
72110: PUSH
72111: LD_INT 4
72113: ARRAY
72114: PUSH
72115: LD_VAR 0 2
72119: EQUAL
72120: AND
72121: ST_TO_ADDR
// end ;
72122: LD_VAR 0 3
72126: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72127: LD_INT 0
72129: PPUSH
// SetDir ( unit , d ) ;
72130: LD_VAR 0 1
72134: PPUSH
72135: LD_VAR 0 4
72139: PPUSH
72140: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72144: LD_ADDR_VAR 0 6
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: LD_VAR 0 2
72158: PPUSH
72159: LD_VAR 0 3
72163: PPUSH
72164: LD_VAR 0 5
72168: PPUSH
72169: CALL_OW 48
72173: ST_TO_ADDR
// end ;
72174: LD_VAR 0 6
72178: RET
// export function ToNaturalNumber ( number ) ; begin
72179: LD_INT 0
72181: PPUSH
// result := number div 1 ;
72182: LD_ADDR_VAR 0 2
72186: PUSH
72187: LD_VAR 0 1
72191: PUSH
72192: LD_INT 1
72194: DIV
72195: ST_TO_ADDR
// if number < 0 then
72196: LD_VAR 0 1
72200: PUSH
72201: LD_INT 0
72203: LESS
72204: IFFALSE 72214
// result := 0 ;
72206: LD_ADDR_VAR 0 2
72210: PUSH
72211: LD_INT 0
72213: ST_TO_ADDR
// end ;
72214: LD_VAR 0 2
72218: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72219: LD_INT 0
72221: PPUSH
72222: PPUSH
72223: PPUSH
// if not buildings then
72224: LD_VAR 0 1
72228: NOT
72229: IFFALSE 72233
// exit ;
72231: GO 72348
// tmp := [ ] ;
72233: LD_ADDR_VAR 0 5
72237: PUSH
72238: EMPTY
72239: ST_TO_ADDR
// for b in buildings do
72240: LD_ADDR_VAR 0 4
72244: PUSH
72245: LD_VAR 0 1
72249: PUSH
72250: FOR_IN
72251: IFFALSE 72289
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72253: LD_ADDR_VAR 0 5
72257: PUSH
72258: LD_VAR 0 5
72262: PPUSH
72263: LD_VAR 0 5
72267: PUSH
72268: LD_INT 1
72270: PLUS
72271: PPUSH
72272: LD_VAR 0 4
72276: PPUSH
72277: CALL_OW 266
72281: PPUSH
72282: CALL_OW 1
72286: ST_TO_ADDR
72287: GO 72250
72289: POP
72290: POP
// if not tmp then
72291: LD_VAR 0 5
72295: NOT
72296: IFFALSE 72300
// exit ;
72298: GO 72348
// if asc then
72300: LD_VAR 0 2
72304: IFFALSE 72328
// result := SortListByListAsc ( buildings , tmp ) else
72306: LD_ADDR_VAR 0 3
72310: PUSH
72311: LD_VAR 0 1
72315: PPUSH
72316: LD_VAR 0 5
72320: PPUSH
72321: CALL_OW 76
72325: ST_TO_ADDR
72326: GO 72348
// result := SortListByListDesc ( buildings , tmp ) ;
72328: LD_ADDR_VAR 0 3
72332: PUSH
72333: LD_VAR 0 1
72337: PPUSH
72338: LD_VAR 0 5
72342: PPUSH
72343: CALL_OW 77
72347: ST_TO_ADDR
// end ;
72348: LD_VAR 0 3
72352: RET
// export function SortByClass ( units , class ) ; var un ; begin
72353: LD_INT 0
72355: PPUSH
72356: PPUSH
// if not units or not class then
72357: LD_VAR 0 1
72361: NOT
72362: IFTRUE 72371
72364: PUSH
72365: LD_VAR 0 2
72369: NOT
72370: OR
72371: IFFALSE 72375
// exit ;
72373: GO 72470
// result := [ ] ;
72375: LD_ADDR_VAR 0 3
72379: PUSH
72380: EMPTY
72381: ST_TO_ADDR
// for un in units do
72382: LD_ADDR_VAR 0 4
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: FOR_IN
72393: IFFALSE 72468
// if GetClass ( un ) = class then
72395: LD_VAR 0 4
72399: PPUSH
72400: CALL_OW 257
72404: PUSH
72405: LD_VAR 0 2
72409: EQUAL
72410: IFFALSE 72437
// result := Insert ( result , 1 , un ) else
72412: LD_ADDR_VAR 0 3
72416: PUSH
72417: LD_VAR 0 3
72421: PPUSH
72422: LD_INT 1
72424: PPUSH
72425: LD_VAR 0 4
72429: PPUSH
72430: CALL_OW 2
72434: ST_TO_ADDR
72435: GO 72466
// result := Replace ( result , result + 1 , un ) ;
72437: LD_ADDR_VAR 0 3
72441: PUSH
72442: LD_VAR 0 3
72446: PPUSH
72447: LD_VAR 0 3
72451: PUSH
72452: LD_INT 1
72454: PLUS
72455: PPUSH
72456: LD_VAR 0 4
72460: PPUSH
72461: CALL_OW 1
72465: ST_TO_ADDR
72466: GO 72392
72468: POP
72469: POP
// end ;
72470: LD_VAR 0 3
72474: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72475: LD_INT 0
72477: PPUSH
72478: PPUSH
72479: PPUSH
72480: PPUSH
72481: PPUSH
72482: PPUSH
72483: PPUSH
// result := [ ] ;
72484: LD_ADDR_VAR 0 4
72488: PUSH
72489: EMPTY
72490: ST_TO_ADDR
// if x - r < 0 then
72491: LD_VAR 0 1
72495: PUSH
72496: LD_VAR 0 3
72500: MINUS
72501: PUSH
72502: LD_INT 0
72504: LESS
72505: IFFALSE 72517
// min_x := 0 else
72507: LD_ADDR_VAR 0 8
72511: PUSH
72512: LD_INT 0
72514: ST_TO_ADDR
72515: GO 72533
// min_x := x - r ;
72517: LD_ADDR_VAR 0 8
72521: PUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_VAR 0 3
72531: MINUS
72532: ST_TO_ADDR
// if y - r < 0 then
72533: LD_VAR 0 2
72537: PUSH
72538: LD_VAR 0 3
72542: MINUS
72543: PUSH
72544: LD_INT 0
72546: LESS
72547: IFFALSE 72559
// min_y := 0 else
72549: LD_ADDR_VAR 0 7
72553: PUSH
72554: LD_INT 0
72556: ST_TO_ADDR
72557: GO 72575
// min_y := y - r ;
72559: LD_ADDR_VAR 0 7
72563: PUSH
72564: LD_VAR 0 2
72568: PUSH
72569: LD_VAR 0 3
72573: MINUS
72574: ST_TO_ADDR
// max_x := x + r ;
72575: LD_ADDR_VAR 0 9
72579: PUSH
72580: LD_VAR 0 1
72584: PUSH
72585: LD_VAR 0 3
72589: PLUS
72590: ST_TO_ADDR
// max_y := y + r ;
72591: LD_ADDR_VAR 0 10
72595: PUSH
72596: LD_VAR 0 2
72600: PUSH
72601: LD_VAR 0 3
72605: PLUS
72606: ST_TO_ADDR
// for _x = min_x to max_x do
72607: LD_ADDR_VAR 0 5
72611: PUSH
72612: DOUBLE
72613: LD_VAR 0 8
72617: DEC
72618: ST_TO_ADDR
72619: LD_VAR 0 9
72623: PUSH
72624: FOR_TO
72625: IFFALSE 72726
// for _y = min_y to max_y do
72627: LD_ADDR_VAR 0 6
72631: PUSH
72632: DOUBLE
72633: LD_VAR 0 7
72637: DEC
72638: ST_TO_ADDR
72639: LD_VAR 0 10
72643: PUSH
72644: FOR_TO
72645: IFFALSE 72722
// begin if not ValidHex ( _x , _y ) then
72647: LD_VAR 0 5
72651: PPUSH
72652: LD_VAR 0 6
72656: PPUSH
72657: CALL_OW 488
72661: NOT
72662: IFFALSE 72666
// continue ;
72664: GO 72644
// if GetResourceTypeXY ( _x , _y ) then
72666: LD_VAR 0 5
72670: PPUSH
72671: LD_VAR 0 6
72675: PPUSH
72676: CALL_OW 283
72680: IFFALSE 72720
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72682: LD_ADDR_VAR 0 4
72686: PUSH
72687: LD_VAR 0 4
72691: PPUSH
72692: LD_VAR 0 4
72696: PUSH
72697: LD_INT 1
72699: PLUS
72700: PPUSH
72701: LD_VAR 0 5
72705: PUSH
72706: LD_VAR 0 6
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PPUSH
72715: CALL_OW 1
72719: ST_TO_ADDR
// end ;
72720: GO 72644
72722: POP
72723: POP
72724: GO 72624
72726: POP
72727: POP
// end ;
72728: LD_VAR 0 4
72732: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72733: LD_INT 0
72735: PPUSH
72736: PPUSH
72737: PPUSH
72738: PPUSH
72739: PPUSH
72740: PPUSH
72741: PPUSH
72742: PPUSH
// if not units then
72743: LD_VAR 0 1
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 73284
// result := UnitFilter ( units , [ f_ok ] ) ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_VAR 0 1
72761: PPUSH
72762: LD_INT 50
72764: PUSH
72765: EMPTY
72766: LIST
72767: PPUSH
72768: CALL_OW 72
72772: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72773: LD_ADDR_VAR 0 8
72777: PUSH
72778: LD_VAR 0 1
72782: PUSH
72783: LD_INT 1
72785: ARRAY
72786: PPUSH
72787: CALL_OW 255
72791: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72792: LD_ADDR_VAR 0 10
72796: PUSH
72797: LD_INT 29
72799: PUSH
72800: LD_INT 91
72802: PUSH
72803: LD_INT 49
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: LIST
72810: ST_TO_ADDR
// if not result then
72811: LD_VAR 0 3
72815: NOT
72816: IFFALSE 72820
// exit ;
72818: GO 73284
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72820: LD_ADDR_VAR 0 5
72824: PUSH
72825: LD_INT 81
72827: PUSH
72828: LD_VAR 0 8
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PPUSH
72837: CALL_OW 69
72841: ST_TO_ADDR
// for i in result do
72842: LD_ADDR_VAR 0 4
72846: PUSH
72847: LD_VAR 0 3
72851: PUSH
72852: FOR_IN
72853: IFFALSE 73282
// begin tag := GetTag ( i ) + 1 ;
72855: LD_ADDR_VAR 0 9
72859: PUSH
72860: LD_VAR 0 4
72864: PPUSH
72865: CALL_OW 110
72869: PUSH
72870: LD_INT 1
72872: PLUS
72873: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72874: LD_ADDR_VAR 0 7
72878: PUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: CALL_OW 250
72888: PPUSH
72889: LD_VAR 0 4
72893: PPUSH
72894: CALL_OW 251
72898: PPUSH
72899: LD_INT 4
72901: PPUSH
72902: CALL 72475 0 3
72906: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72907: LD_VAR 0 4
72911: PPUSH
72912: CALL_OW 247
72916: PUSH
72917: LD_INT 2
72919: EQUAL
72920: IFFALSE 72932
72922: PUSH
72923: LD_VAR 0 7
72927: PUSH
72928: LD_INT 2
72930: GREATER
72931: AND
72932: IFFALSE 72952
72934: PUSH
72935: LD_VAR 0 4
72939: PPUSH
72940: CALL_OW 264
72944: PUSH
72945: LD_VAR 0 10
72949: IN
72950: NOT
72951: AND
72952: IFFALSE 72991
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72954: LD_VAR 0 4
72958: PPUSH
72959: LD_VAR 0 7
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: LD_INT 1
72970: ARRAY
72971: PPUSH
72972: LD_VAR 0 7
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PUSH
72981: LD_INT 2
72983: ARRAY
72984: PPUSH
72985: CALL_OW 116
72989: GO 73280
// if path > tag then
72991: LD_VAR 0 2
72995: PUSH
72996: LD_VAR 0 9
73000: GREATER
73001: IFFALSE 73209
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73003: LD_ADDR_VAR 0 6
73007: PUSH
73008: LD_VAR 0 5
73012: PPUSH
73013: LD_INT 91
73015: PUSH
73016: LD_VAR 0 4
73020: PUSH
73021: LD_INT 8
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: PPUSH
73029: CALL_OW 72
73033: ST_TO_ADDR
// if nearEnemy then
73034: LD_VAR 0 6
73038: IFFALSE 73107
// begin if GetWeapon ( i ) = ru_time_lapser then
73040: LD_VAR 0 4
73044: PPUSH
73045: CALL_OW 264
73049: PUSH
73050: LD_INT 49
73052: EQUAL
73053: IFFALSE 73081
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73055: LD_VAR 0 4
73059: PPUSH
73060: LD_VAR 0 6
73064: PPUSH
73065: LD_VAR 0 4
73069: PPUSH
73070: CALL_OW 74
73074: PPUSH
73075: CALL_OW 112
73079: GO 73105
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73081: LD_VAR 0 4
73085: PPUSH
73086: LD_VAR 0 6
73090: PPUSH
73091: LD_VAR 0 4
73095: PPUSH
73096: CALL_OW 74
73100: PPUSH
73101: CALL 74365 0 2
// end else
73105: GO 73207
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73107: LD_VAR 0 4
73111: PPUSH
73112: LD_VAR 0 2
73116: PUSH
73117: LD_VAR 0 9
73121: ARRAY
73122: PUSH
73123: LD_INT 1
73125: ARRAY
73126: PPUSH
73127: LD_VAR 0 2
73131: PUSH
73132: LD_VAR 0 9
73136: ARRAY
73137: PUSH
73138: LD_INT 2
73140: ARRAY
73141: PPUSH
73142: CALL_OW 297
73146: PUSH
73147: LD_INT 6
73149: GREATER
73150: IFFALSE 73193
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73152: LD_VAR 0 4
73156: PPUSH
73157: LD_VAR 0 2
73161: PUSH
73162: LD_VAR 0 9
73166: ARRAY
73167: PUSH
73168: LD_INT 1
73170: ARRAY
73171: PPUSH
73172: LD_VAR 0 2
73176: PUSH
73177: LD_VAR 0 9
73181: ARRAY
73182: PUSH
73183: LD_INT 2
73185: ARRAY
73186: PPUSH
73187: CALL_OW 114
73191: GO 73207
// SetTag ( i , tag ) ;
73193: LD_VAR 0 4
73197: PPUSH
73198: LD_VAR 0 9
73202: PPUSH
73203: CALL_OW 109
// end else
73207: GO 73280
// if enemy then
73209: LD_VAR 0 5
73213: IFFALSE 73280
// begin if GetWeapon ( i ) = ru_time_lapser then
73215: LD_VAR 0 4
73219: PPUSH
73220: CALL_OW 264
73224: PUSH
73225: LD_INT 49
73227: EQUAL
73228: IFFALSE 73256
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73230: LD_VAR 0 4
73234: PPUSH
73235: LD_VAR 0 5
73239: PPUSH
73240: LD_VAR 0 4
73244: PPUSH
73245: CALL_OW 74
73249: PPUSH
73250: CALL_OW 112
73254: GO 73280
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73256: LD_VAR 0 4
73260: PPUSH
73261: LD_VAR 0 5
73265: PPUSH
73266: LD_VAR 0 4
73270: PPUSH
73271: CALL_OW 74
73275: PPUSH
73276: CALL 74365 0 2
// end ; end ;
73280: GO 72852
73282: POP
73283: POP
// end ;
73284: LD_VAR 0 3
73288: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73289: LD_INT 0
73291: PPUSH
73292: PPUSH
73293: PPUSH
// if not unit or IsInUnit ( unit ) then
73294: LD_VAR 0 1
73298: NOT
73299: IFTRUE 73312
73301: PUSH
73302: LD_VAR 0 1
73306: PPUSH
73307: CALL_OW 310
73311: OR
73312: IFFALSE 73316
// exit ;
73314: GO 73407
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73316: LD_ADDR_VAR 0 4
73320: PUSH
73321: LD_VAR 0 1
73325: PPUSH
73326: CALL_OW 250
73330: PPUSH
73331: LD_VAR 0 2
73335: PPUSH
73336: LD_INT 1
73338: PPUSH
73339: CALL_OW 272
73343: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73344: LD_ADDR_VAR 0 5
73348: PUSH
73349: LD_VAR 0 1
73353: PPUSH
73354: CALL_OW 251
73358: PPUSH
73359: LD_VAR 0 2
73363: PPUSH
73364: LD_INT 1
73366: PPUSH
73367: CALL_OW 273
73371: ST_TO_ADDR
// if ValidHex ( x , y ) then
73372: LD_VAR 0 4
73376: PPUSH
73377: LD_VAR 0 5
73381: PPUSH
73382: CALL_OW 488
73386: IFFALSE 73407
// ComTurnXY ( unit , x , y ) ;
73388: LD_VAR 0 1
73392: PPUSH
73393: LD_VAR 0 4
73397: PPUSH
73398: LD_VAR 0 5
73402: PPUSH
73403: CALL_OW 118
// end ;
73407: LD_VAR 0 3
73411: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73412: LD_INT 0
73414: PPUSH
73415: PPUSH
// result := false ;
73416: LD_ADDR_VAR 0 3
73420: PUSH
73421: LD_INT 0
73423: ST_TO_ADDR
// if not units then
73424: LD_VAR 0 2
73428: NOT
73429: IFFALSE 73433
// exit ;
73431: GO 73478
// for i in units do
73433: LD_ADDR_VAR 0 4
73437: PUSH
73438: LD_VAR 0 2
73442: PUSH
73443: FOR_IN
73444: IFFALSE 73476
// if See ( side , i ) then
73446: LD_VAR 0 1
73450: PPUSH
73451: LD_VAR 0 4
73455: PPUSH
73456: CALL_OW 292
73460: IFFALSE 73474
// begin result := true ;
73462: LD_ADDR_VAR 0 3
73466: PUSH
73467: LD_INT 1
73469: ST_TO_ADDR
// exit ;
73470: POP
73471: POP
73472: GO 73478
// end ;
73474: GO 73443
73476: POP
73477: POP
// end ;
73478: LD_VAR 0 3
73482: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73483: LD_INT 0
73485: PPUSH
73486: PPUSH
73487: PPUSH
73488: PPUSH
// if not unit or not points then
73489: LD_VAR 0 1
73493: NOT
73494: IFTRUE 73503
73496: PUSH
73497: LD_VAR 0 2
73501: NOT
73502: OR
73503: IFFALSE 73507
// exit ;
73505: GO 73597
// dist := 99999 ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_INT 99999
73514: ST_TO_ADDR
// for i in points do
73515: LD_ADDR_VAR 0 4
73519: PUSH
73520: LD_VAR 0 2
73524: PUSH
73525: FOR_IN
73526: IFFALSE 73595
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73528: LD_ADDR_VAR 0 6
73532: PUSH
73533: LD_VAR 0 1
73537: PPUSH
73538: LD_VAR 0 4
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PPUSH
73547: LD_VAR 0 4
73551: PUSH
73552: LD_INT 2
73554: ARRAY
73555: PPUSH
73556: CALL_OW 297
73560: ST_TO_ADDR
// if tmpDist < dist then
73561: LD_VAR 0 6
73565: PUSH
73566: LD_VAR 0 5
73570: LESS
73571: IFFALSE 73593
// begin result := i ;
73573: LD_ADDR_VAR 0 3
73577: PUSH
73578: LD_VAR 0 4
73582: ST_TO_ADDR
// dist := tmpDist ;
73583: LD_ADDR_VAR 0 5
73587: PUSH
73588: LD_VAR 0 6
73592: ST_TO_ADDR
// end ; end ;
73593: GO 73525
73595: POP
73596: POP
// end ;
73597: LD_VAR 0 3
73601: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73602: LD_INT 0
73604: PPUSH
// uc_side := side ;
73605: LD_ADDR_OWVAR 20
73609: PUSH
73610: LD_VAR 0 1
73614: ST_TO_ADDR
// uc_nation := 3 ;
73615: LD_ADDR_OWVAR 21
73619: PUSH
73620: LD_INT 3
73622: ST_TO_ADDR
// vc_chassis := 25 ;
73623: LD_ADDR_OWVAR 37
73627: PUSH
73628: LD_INT 25
73630: ST_TO_ADDR
// vc_engine := engine_siberite ;
73631: LD_ADDR_OWVAR 39
73635: PUSH
73636: LD_INT 3
73638: ST_TO_ADDR
// vc_control := control_computer ;
73639: LD_ADDR_OWVAR 38
73643: PUSH
73644: LD_INT 3
73646: ST_TO_ADDR
// vc_weapon := 59 ;
73647: LD_ADDR_OWVAR 40
73651: PUSH
73652: LD_INT 59
73654: ST_TO_ADDR
// result := CreateVehicle ;
73655: LD_ADDR_VAR 0 5
73659: PUSH
73660: CALL_OW 45
73664: ST_TO_ADDR
// SetDir ( result , d ) ;
73665: LD_VAR 0 5
73669: PPUSH
73670: LD_VAR 0 4
73674: PPUSH
73675: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73679: LD_VAR 0 5
73683: PPUSH
73684: LD_VAR 0 2
73688: PPUSH
73689: LD_VAR 0 3
73693: PPUSH
73694: LD_INT 0
73696: PPUSH
73697: CALL_OW 48
// end ;
73701: LD_VAR 0 5
73705: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73706: LD_INT 0
73708: PPUSH
73709: PPUSH
73710: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73711: LD_ADDR_VAR 0 2
73715: PUSH
73716: LD_INT 0
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: LD_INT 0
73724: PUSH
73725: LD_INT 0
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73734: LD_VAR 0 1
73738: NOT
73739: IFTRUE 73772
73741: PUSH
73742: LD_VAR 0 1
73746: PPUSH
73747: CALL_OW 264
73751: PUSH
73752: LD_INT 12
73754: PUSH
73755: LD_INT 51
73757: PUSH
73758: LD_INT 32
73760: PUSH
73761: LD_INT 89
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: IN
73770: NOT
73771: OR
73772: IFFALSE 73776
// exit ;
73774: GO 73874
// for i := 1 to 3 do
73776: LD_ADDR_VAR 0 3
73780: PUSH
73781: DOUBLE
73782: LD_INT 1
73784: DEC
73785: ST_TO_ADDR
73786: LD_INT 3
73788: PUSH
73789: FOR_TO
73790: IFFALSE 73872
// begin tmp := GetCargo ( cargo , i ) ;
73792: LD_ADDR_VAR 0 4
73796: PUSH
73797: LD_VAR 0 1
73801: PPUSH
73802: LD_VAR 0 3
73806: PPUSH
73807: CALL_OW 289
73811: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73812: LD_ADDR_VAR 0 2
73816: PUSH
73817: LD_VAR 0 2
73821: PPUSH
73822: LD_VAR 0 3
73826: PPUSH
73827: LD_VAR 0 4
73831: PPUSH
73832: CALL_OW 1
73836: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73837: LD_ADDR_VAR 0 2
73841: PUSH
73842: LD_VAR 0 2
73846: PPUSH
73847: LD_INT 4
73849: PPUSH
73850: LD_VAR 0 2
73854: PUSH
73855: LD_INT 4
73857: ARRAY
73858: PUSH
73859: LD_VAR 0 4
73863: PLUS
73864: PPUSH
73865: CALL_OW 1
73869: ST_TO_ADDR
// end ;
73870: GO 73789
73872: POP
73873: POP
// end ;
73874: LD_VAR 0 2
73878: RET
// export function Length ( array ) ; begin
73879: LD_INT 0
73881: PPUSH
// result := array + 0 ;
73882: LD_ADDR_VAR 0 2
73886: PUSH
73887: LD_VAR 0 1
73891: PUSH
73892: LD_INT 0
73894: PLUS
73895: ST_TO_ADDR
// end ;
73896: LD_VAR 0 2
73900: RET
// export function PrepareArray ( array ) ; begin
73901: LD_INT 0
73903: PPUSH
// result := array diff 0 ;
73904: LD_ADDR_VAR 0 2
73908: PUSH
73909: LD_VAR 0 1
73913: PUSH
73914: LD_INT 0
73916: DIFF
73917: ST_TO_ADDR
// if not result [ 1 ] then
73918: LD_VAR 0 2
73922: PUSH
73923: LD_INT 1
73925: ARRAY
73926: NOT
73927: IFFALSE 73947
// result := Delete ( result , 1 ) ;
73929: LD_ADDR_VAR 0 2
73933: PUSH
73934: LD_VAR 0 2
73938: PPUSH
73939: LD_INT 1
73941: PPUSH
73942: CALL_OW 3
73946: ST_TO_ADDR
// end ;
73947: LD_VAR 0 2
73951: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73952: LD_INT 0
73954: PPUSH
73955: PPUSH
73956: PPUSH
73957: PPUSH
// sibRocketRange := 25 ;
73958: LD_ADDR_VAR 0 6
73962: PUSH
73963: LD_INT 25
73965: ST_TO_ADDR
// result := false ;
73966: LD_ADDR_VAR 0 4
73970: PUSH
73971: LD_INT 0
73973: ST_TO_ADDR
// for i := 0 to 5 do
73974: LD_ADDR_VAR 0 5
73978: PUSH
73979: DOUBLE
73980: LD_INT 0
73982: DEC
73983: ST_TO_ADDR
73984: LD_INT 5
73986: PUSH
73987: FOR_TO
73988: IFFALSE 74055
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73990: LD_VAR 0 1
73994: PPUSH
73995: LD_VAR 0 5
73999: PPUSH
74000: LD_VAR 0 6
74004: PPUSH
74005: CALL_OW 272
74009: PPUSH
74010: LD_VAR 0 2
74014: PPUSH
74015: LD_VAR 0 5
74019: PPUSH
74020: LD_VAR 0 6
74024: PPUSH
74025: CALL_OW 273
74029: PPUSH
74030: LD_VAR 0 3
74034: PPUSH
74035: CALL_OW 309
74039: IFFALSE 74053
// begin result := true ;
74041: LD_ADDR_VAR 0 4
74045: PUSH
74046: LD_INT 1
74048: ST_TO_ADDR
// exit ;
74049: POP
74050: POP
74051: GO 74057
// end ;
74053: GO 73987
74055: POP
74056: POP
// end ;
74057: LD_VAR 0 4
74061: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74062: LD_INT 0
74064: PPUSH
74065: PPUSH
74066: PPUSH
// if btype = b_depot then
74067: LD_VAR 0 2
74071: PUSH
74072: LD_INT 0
74074: EQUAL
74075: IFFALSE 74087
// begin result := true ;
74077: LD_ADDR_VAR 0 3
74081: PUSH
74082: LD_INT 1
74084: ST_TO_ADDR
// exit ;
74085: GO 74207
// end ; pom := GetBase ( depot ) ;
74087: LD_ADDR_VAR 0 4
74091: PUSH
74092: LD_VAR 0 1
74096: PPUSH
74097: CALL_OW 274
74101: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74102: LD_ADDR_VAR 0 5
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: LD_VAR 0 1
74116: PPUSH
74117: CALL_OW 248
74121: PPUSH
74122: CALL_OW 450
74126: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74127: LD_ADDR_VAR 0 3
74131: PUSH
74132: LD_VAR 0 4
74136: PPUSH
74137: LD_INT 1
74139: PPUSH
74140: CALL_OW 275
74144: PUSH
74145: LD_VAR 0 5
74149: PUSH
74150: LD_INT 1
74152: ARRAY
74153: GREATEREQUAL
74154: IFFALSE 74180
74156: PUSH
74157: LD_VAR 0 4
74161: PPUSH
74162: LD_INT 2
74164: PPUSH
74165: CALL_OW 275
74169: PUSH
74170: LD_VAR 0 5
74174: PUSH
74175: LD_INT 2
74177: ARRAY
74178: GREATEREQUAL
74179: AND
74180: IFFALSE 74206
74182: PUSH
74183: LD_VAR 0 4
74187: PPUSH
74188: LD_INT 3
74190: PPUSH
74191: CALL_OW 275
74195: PUSH
74196: LD_VAR 0 5
74200: PUSH
74201: LD_INT 3
74203: ARRAY
74204: GREATEREQUAL
74205: AND
74206: ST_TO_ADDR
// end ;
74207: LD_VAR 0 3
74211: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74212: LD_INT 0
74214: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74215: LD_VAR 0 1
74219: PPUSH
74220: LD_VAR 0 2
74224: PPUSH
74225: LD_INT 0
74227: PPUSH
74228: LD_INT 0
74230: PPUSH
74231: LD_INT 1
74233: PPUSH
74234: LD_INT 0
74236: PPUSH
74237: CALL_OW 587
// end ;
74241: LD_VAR 0 3
74245: RET
// export function CenterOnNow ( unit ) ; begin
74246: LD_INT 0
74248: PPUSH
// result := IsInUnit ( unit ) ;
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: LD_VAR 0 1
74258: PPUSH
74259: CALL_OW 310
74263: ST_TO_ADDR
// if not result then
74264: LD_VAR 0 2
74268: NOT
74269: IFFALSE 74281
// result := unit ;
74271: LD_ADDR_VAR 0 2
74275: PUSH
74276: LD_VAR 0 1
74280: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74281: LD_VAR 0 1
74285: PPUSH
74286: CALL_OW 87
// end ;
74290: LD_VAR 0 2
74294: RET
// export function ComMoveHex ( unit , hex ) ; begin
74295: LD_INT 0
74297: PPUSH
// if not hex then
74298: LD_VAR 0 2
74302: NOT
74303: IFFALSE 74307
// exit ;
74305: GO 74360
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74307: LD_VAR 0 2
74311: PUSH
74312: LD_INT 1
74314: ARRAY
74315: PPUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 2
74323: ARRAY
74324: PPUSH
74325: CALL_OW 428
74329: IFFALSE 74333
// exit ;
74331: GO 74360
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74333: LD_VAR 0 1
74337: PPUSH
74338: LD_VAR 0 2
74342: PUSH
74343: LD_INT 1
74345: ARRAY
74346: PPUSH
74347: LD_VAR 0 2
74351: PUSH
74352: LD_INT 2
74354: ARRAY
74355: PPUSH
74356: CALL_OW 111
// end ;
74360: LD_VAR 0 3
74364: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74365: LD_INT 0
74367: PPUSH
74368: PPUSH
74369: PPUSH
// if not unit or not enemy then
74370: LD_VAR 0 1
74374: NOT
74375: IFTRUE 74384
74377: PUSH
74378: LD_VAR 0 2
74382: NOT
74383: OR
74384: IFFALSE 74388
// exit ;
74386: GO 74514
// x := GetX ( enemy ) ;
74388: LD_ADDR_VAR 0 4
74392: PUSH
74393: LD_VAR 0 2
74397: PPUSH
74398: CALL_OW 250
74402: ST_TO_ADDR
// y := GetY ( enemy ) ;
74403: LD_ADDR_VAR 0 5
74407: PUSH
74408: LD_VAR 0 2
74412: PPUSH
74413: CALL_OW 251
74417: ST_TO_ADDR
// if ValidHex ( x , y ) then
74418: LD_VAR 0 4
74422: PPUSH
74423: LD_VAR 0 5
74427: PPUSH
74428: CALL_OW 488
74432: IFFALSE 74514
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74434: LD_VAR 0 2
74438: PPUSH
74439: CALL_OW 247
74443: PUSH
74444: LD_INT 3
74446: PUSH
74447: LD_INT 2
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: IN
74454: IFTRUE 74477
74456: PUSH
74457: LD_VAR 0 1
74461: PPUSH
74462: CALL_OW 255
74466: PPUSH
74467: LD_VAR 0 2
74471: PPUSH
74472: CALL_OW 292
74476: OR
74477: IFFALSE 74495
// ComAttackUnit ( unit , enemy ) else
74479: LD_VAR 0 1
74483: PPUSH
74484: LD_VAR 0 2
74488: PPUSH
74489: CALL_OW 115
74493: GO 74514
// ComAgressiveMove ( unit , x , y ) ;
74495: LD_VAR 0 1
74499: PPUSH
74500: LD_VAR 0 4
74504: PPUSH
74505: LD_VAR 0 5
74509: PPUSH
74510: CALL_OW 114
// end ;
74514: LD_VAR 0 3
74518: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
// list := AreaToList ( area , 0 ) ;
74524: LD_ADDR_VAR 0 5
74528: PUSH
74529: LD_VAR 0 1
74533: PPUSH
74534: LD_INT 0
74536: PPUSH
74537: CALL_OW 517
74541: ST_TO_ADDR
// if not list then
74542: LD_VAR 0 5
74546: NOT
74547: IFFALSE 74551
// exit ;
74549: GO 74681
// if all then
74551: LD_VAR 0 2
74555: IFFALSE 74643
// begin for i := 1 to list [ 1 ] do
74557: LD_ADDR_VAR 0 4
74561: PUSH
74562: DOUBLE
74563: LD_INT 1
74565: DEC
74566: ST_TO_ADDR
74567: LD_VAR 0 5
74571: PUSH
74572: LD_INT 1
74574: ARRAY
74575: PUSH
74576: FOR_TO
74577: IFFALSE 74639
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74579: LD_ADDR_VAR 0 3
74583: PUSH
74584: LD_VAR 0 3
74588: PPUSH
74589: LD_VAR 0 3
74593: PUSH
74594: LD_INT 1
74596: PLUS
74597: PPUSH
74598: LD_VAR 0 5
74602: PUSH
74603: LD_INT 1
74605: ARRAY
74606: PUSH
74607: LD_VAR 0 4
74611: ARRAY
74612: PUSH
74613: LD_VAR 0 5
74617: PUSH
74618: LD_INT 2
74620: ARRAY
74621: PUSH
74622: LD_VAR 0 4
74626: ARRAY
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PPUSH
74632: CALL_OW 1
74636: ST_TO_ADDR
74637: GO 74576
74639: POP
74640: POP
// exit ;
74641: GO 74681
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74643: LD_ADDR_VAR 0 3
74647: PUSH
74648: LD_VAR 0 5
74652: PUSH
74653: LD_INT 1
74655: ARRAY
74656: PUSH
74657: LD_INT 1
74659: ARRAY
74660: PUSH
74661: LD_VAR 0 5
74665: PUSH
74666: LD_INT 2
74668: ARRAY
74669: PUSH
74670: LD_INT 1
74672: ARRAY
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: EMPTY
74679: LIST
74680: ST_TO_ADDR
// end ;
74681: LD_VAR 0 3
74685: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74686: LD_INT 0
74688: PPUSH
74689: PPUSH
// list := AreaToList ( area , 0 ) ;
74690: LD_ADDR_VAR 0 4
74694: PUSH
74695: LD_VAR 0 1
74699: PPUSH
74700: LD_INT 0
74702: PPUSH
74703: CALL_OW 517
74707: ST_TO_ADDR
// if not list then
74708: LD_VAR 0 4
74712: NOT
74713: IFFALSE 74717
// exit ;
74715: GO 74758
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74717: LD_ADDR_VAR 0 3
74721: PUSH
74722: LD_VAR 0 4
74726: PUSH
74727: LD_INT 1
74729: ARRAY
74730: PUSH
74731: LD_INT 1
74733: ARRAY
74734: PUSH
74735: LD_VAR 0 4
74739: PUSH
74740: LD_INT 2
74742: ARRAY
74743: PUSH
74744: LD_INT 1
74746: ARRAY
74747: PUSH
74748: LD_VAR 0 2
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: LIST
74757: ST_TO_ADDR
// end ;
74758: LD_VAR 0 3
74762: RET
// export function First ( array ) ; begin
74763: LD_INT 0
74765: PPUSH
// if not array then
74766: LD_VAR 0 1
74770: NOT
74771: IFFALSE 74775
// exit ;
74773: GO 74789
// result := array [ 1 ] ;
74775: LD_ADDR_VAR 0 2
74779: PUSH
74780: LD_VAR 0 1
74784: PUSH
74785: LD_INT 1
74787: ARRAY
74788: ST_TO_ADDR
// end ;
74789: LD_VAR 0 2
74793: RET
// export function Last ( array ) ; begin
74794: LD_INT 0
74796: PPUSH
// if not array then
74797: LD_VAR 0 1
74801: NOT
74802: IFFALSE 74806
// exit ;
74804: GO 74822
// result := array [ array ] ;
74806: LD_ADDR_VAR 0 2
74810: PUSH
74811: LD_VAR 0 1
74815: PUSH
74816: LD_VAR 0 1
74820: ARRAY
74821: ST_TO_ADDR
// end ;
74822: LD_VAR 0 2
74826: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74827: LD_INT 0
74829: PPUSH
74830: PPUSH
// result := [ ] ;
74831: LD_ADDR_VAR 0 5
74835: PUSH
74836: EMPTY
74837: ST_TO_ADDR
// if not array then
74838: LD_VAR 0 1
74842: NOT
74843: IFFALSE 74847
// exit ;
74845: GO 74959
// for i := 1 to array do
74847: LD_ADDR_VAR 0 6
74851: PUSH
74852: DOUBLE
74853: LD_INT 1
74855: DEC
74856: ST_TO_ADDR
74857: LD_VAR 0 1
74861: PUSH
74862: FOR_TO
74863: IFFALSE 74957
// if array [ i ] [ index ] = value then
74865: LD_VAR 0 1
74869: PUSH
74870: LD_VAR 0 6
74874: ARRAY
74875: PUSH
74876: LD_VAR 0 2
74880: ARRAY
74881: PUSH
74882: LD_VAR 0 3
74886: EQUAL
74887: IFFALSE 74955
// begin if indexColumn then
74889: LD_VAR 0 4
74893: IFFALSE 74929
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74895: LD_ADDR_VAR 0 5
74899: PUSH
74900: LD_VAR 0 5
74904: PPUSH
74905: LD_VAR 0 1
74909: PUSH
74910: LD_VAR 0 6
74914: ARRAY
74915: PUSH
74916: LD_VAR 0 4
74920: ARRAY
74921: PPUSH
74922: CALL 69967 0 2
74926: ST_TO_ADDR
74927: GO 74955
// result := Join ( result , array [ i ] ) ;
74929: LD_ADDR_VAR 0 5
74933: PUSH
74934: LD_VAR 0 5
74938: PPUSH
74939: LD_VAR 0 1
74943: PUSH
74944: LD_VAR 0 6
74948: ARRAY
74949: PPUSH
74950: CALL 69967 0 2
74954: ST_TO_ADDR
// end ;
74955: GO 74862
74957: POP
74958: POP
// end ;
74959: LD_VAR 0 5
74963: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74964: LD_INT 0
74966: PPUSH
// if not vehicles or not parkingPoint then
74967: LD_VAR 0 1
74971: NOT
74972: IFTRUE 74981
74974: PUSH
74975: LD_VAR 0 2
74979: NOT
74980: OR
74981: IFFALSE 74985
// exit ;
74983: GO 75083
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74985: LD_ADDR_VAR 0 1
74989: PUSH
74990: LD_VAR 0 1
74994: PPUSH
74995: LD_INT 50
74997: PUSH
74998: EMPTY
74999: LIST
75000: PUSH
75001: LD_INT 3
75003: PUSH
75004: LD_INT 92
75006: PUSH
75007: LD_VAR 0 2
75011: PUSH
75012: LD_INT 1
75014: ARRAY
75015: PUSH
75016: LD_VAR 0 2
75020: PUSH
75021: LD_INT 2
75023: ARRAY
75024: PUSH
75025: LD_INT 8
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PPUSH
75042: CALL_OW 72
75046: ST_TO_ADDR
// if not vehicles then
75047: LD_VAR 0 1
75051: NOT
75052: IFFALSE 75056
// exit ;
75054: GO 75083
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_VAR 0 2
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: PPUSH
75070: LD_VAR 0 2
75074: PUSH
75075: LD_INT 2
75077: ARRAY
75078: PPUSH
75079: CALL_OW 111
// end ;
75083: LD_VAR 0 3
75087: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75088: LD_INT 0
75090: PPUSH
75091: PPUSH
75092: PPUSH
// if not side or not area then
75093: LD_VAR 0 1
75097: NOT
75098: IFTRUE 75107
75100: PUSH
75101: LD_VAR 0 2
75105: NOT
75106: OR
75107: IFFALSE 75111
// exit ;
75109: GO 75230
// tmp := AreaToList ( area , 0 ) ;
75111: LD_ADDR_VAR 0 5
75115: PUSH
75116: LD_VAR 0 2
75120: PPUSH
75121: LD_INT 0
75123: PPUSH
75124: CALL_OW 517
75128: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75129: LD_ADDR_VAR 0 4
75133: PUSH
75134: DOUBLE
75135: LD_INT 1
75137: DEC
75138: ST_TO_ADDR
75139: LD_VAR 0 5
75143: PUSH
75144: LD_INT 1
75146: ARRAY
75147: PUSH
75148: FOR_TO
75149: IFFALSE 75228
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75151: LD_VAR 0 5
75155: PUSH
75156: LD_INT 1
75158: ARRAY
75159: PUSH
75160: LD_VAR 0 4
75164: ARRAY
75165: PPUSH
75166: LD_VAR 0 5
75170: PUSH
75171: LD_INT 2
75173: ARRAY
75174: PUSH
75175: LD_VAR 0 4
75179: ARRAY
75180: PPUSH
75181: CALL_OW 351
75185: IFFALSE 75226
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75187: LD_VAR 0 5
75191: PUSH
75192: LD_INT 1
75194: ARRAY
75195: PUSH
75196: LD_VAR 0 4
75200: ARRAY
75201: PPUSH
75202: LD_VAR 0 5
75206: PUSH
75207: LD_INT 2
75209: ARRAY
75210: PUSH
75211: LD_VAR 0 4
75215: ARRAY
75216: PPUSH
75217: LD_VAR 0 1
75221: PPUSH
75222: CALL_OW 244
// end ;
75226: GO 75148
75228: POP
75229: POP
// end ;
75230: LD_VAR 0 3
75234: RET
// export function UniqueArray ( array ) ; var i ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
// result := [ ] ;
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// if not array then
75246: LD_VAR 0 1
75250: NOT
75251: IFFALSE 75255
// exit ;
75253: GO 75316
// for i := 1 to array do
75255: LD_ADDR_VAR 0 3
75259: PUSH
75260: DOUBLE
75261: LD_INT 1
75263: DEC
75264: ST_TO_ADDR
75265: LD_VAR 0 1
75269: PUSH
75270: FOR_TO
75271: IFFALSE 75314
// if not array [ i ] in result then
75273: LD_VAR 0 1
75277: PUSH
75278: LD_VAR 0 3
75282: ARRAY
75283: PUSH
75284: LD_VAR 0 2
75288: IN
75289: NOT
75290: IFFALSE 75312
// result := Join ( result , i ) ;
75292: LD_ADDR_VAR 0 2
75296: PUSH
75297: LD_VAR 0 2
75301: PPUSH
75302: LD_VAR 0 3
75306: PPUSH
75307: CALL 69967 0 2
75311: ST_TO_ADDR
75312: GO 75270
75314: POP
75315: POP
// end ; end_of_file
75316: LD_VAR 0 2
75320: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75321: LD_VAR 0 1
75325: PUSH
75326: LD_INT 200
75328: DOUBLE
75329: GREATEREQUAL
75330: IFFALSE 75338
75332: LD_INT 299
75334: DOUBLE
75335: LESSEQUAL
75336: IFTRUE 75340
75338: GO 75372
75340: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75341: LD_VAR 0 1
75345: PPUSH
75346: LD_VAR 0 2
75350: PPUSH
75351: LD_VAR 0 3
75355: PPUSH
75356: LD_VAR 0 4
75360: PPUSH
75361: LD_VAR 0 5
75365: PPUSH
75366: CALL 10198 0 5
75370: GO 75449
75372: LD_INT 300
75374: DOUBLE
75375: GREATEREQUAL
75376: IFFALSE 75384
75378: LD_INT 399
75380: DOUBLE
75381: LESSEQUAL
75382: IFTRUE 75386
75384: GO 75448
75386: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75387: LD_VAR 0 1
75391: PPUSH
75392: LD_VAR 0 2
75396: PPUSH
75397: LD_VAR 0 3
75401: PPUSH
75402: LD_VAR 0 4
75406: PPUSH
75407: LD_VAR 0 5
75411: PPUSH
75412: LD_VAR 0 6
75416: PPUSH
75417: LD_VAR 0 7
75421: PPUSH
75422: LD_VAR 0 8
75426: PPUSH
75427: LD_VAR 0 9
75431: PPUSH
75432: LD_VAR 0 10
75436: PPUSH
75437: LD_VAR 0 11
75441: PPUSH
75442: CALL 28364 0 11
75446: GO 75449
75448: POP
// end ;
75449: PPOPN 11
75451: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75452: LD_VAR 0 1
75456: PPUSH
75457: LD_VAR 0 2
75461: PPUSH
75462: LD_VAR 0 3
75466: PPUSH
75467: LD_VAR 0 4
75471: PPUSH
75472: LD_VAR 0 5
75476: PPUSH
75477: CALL 9579 0 5
// end ; end_of_file
75481: PPOPN 5
75483: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75484: LD_VAR 0 1
75488: PPUSH
75489: LD_VAR 0 2
75493: PPUSH
75494: LD_VAR 0 3
75498: PPUSH
75499: LD_VAR 0 4
75503: PPUSH
75504: LD_VAR 0 5
75508: PPUSH
75509: LD_VAR 0 6
75513: PPUSH
75514: CALL 15904 0 6
// end ;
75518: PPOPN 6
75520: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75521: LD_INT 0
75523: PPUSH
// begin if not units then
75524: LD_VAR 0 1
75528: NOT
75529: IFFALSE 75533
// exit ;
75531: GO 75567
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75533: LD_VAR 0 1
75537: PPUSH
75538: LD_VAR 0 2
75542: PPUSH
75543: LD_VAR 0 3
75547: PPUSH
75548: LD_VAR 0 4
75552: PPUSH
75553: LD_VAR 0 5
75557: PPUSH
75558: LD_VAR 0 6
75562: PPUSH
75563: CALL 15705 0 6
// end ;
75567: PPOPN 7
75569: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75570: CALL 15791 0 0
// end ;
75574: PPOPN 1
75576: END
