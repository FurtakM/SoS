// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 64398 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 109
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// end ;
11035: LD_VAR 0 6
11039: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
11040: LD_INT 0
11042: PPUSH
11043: PPUSH
// if not vehicle or not factory then
11044: LD_VAR 0 1
11048: NOT
11049: PUSH
11050: LD_VAR 0 2
11054: NOT
11055: OR
11056: IFFALSE 11060
// exit ;
11058: GO 11291
// if factoryWaypoints >= factory then
11060: LD_EXP 36
11064: PUSH
11065: LD_VAR 0 2
11069: GREATEREQUAL
11070: IFFALSE 11291
// if factoryWaypoints [ factory ] then
11072: LD_EXP 36
11076: PUSH
11077: LD_VAR 0 2
11081: ARRAY
11082: IFFALSE 11291
// begin if GetControl ( vehicle ) = control_manual then
11084: LD_VAR 0 1
11088: PPUSH
11089: CALL_OW 263
11093: PUSH
11094: LD_INT 1
11096: EQUAL
11097: IFFALSE 11178
// begin driver := IsDrivenBy ( vehicle ) ;
11099: LD_ADDR_VAR 0 4
11103: PUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 311
11113: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
11114: LD_VAR 0 4
11118: PPUSH
11119: LD_EXP 36
11123: PUSH
11124: LD_VAR 0 2
11128: ARRAY
11129: PUSH
11130: LD_INT 1
11132: ARRAY
11133: PPUSH
11134: LD_EXP 36
11138: PUSH
11139: LD_VAR 0 2
11143: ARRAY
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComExitVehicle ( driver ) ;
11153: LD_VAR 0 4
11157: PPUSH
11158: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
11162: LD_VAR 0 4
11166: PPUSH
11167: LD_VAR 0 2
11171: PPUSH
11172: CALL_OW 180
// end else
11176: GO 11291
// if GetControl ( vehicle ) = control_remote then
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 263
11187: PUSH
11188: LD_INT 2
11190: EQUAL
11191: IFFALSE 11252
// begin wait ( 0 0$2 ) ;
11193: LD_INT 70
11195: PPUSH
11196: CALL_OW 67
// if Connect ( vehicle ) then
11200: LD_VAR 0 1
11204: PPUSH
11205: CALL 38012 0 1
11209: IFFALSE 11250
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
11211: LD_VAR 0 1
11215: PPUSH
11216: LD_EXP 36
11220: PUSH
11221: LD_VAR 0 2
11225: ARRAY
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: PPUSH
11231: LD_EXP 36
11235: PUSH
11236: LD_VAR 0 2
11240: ARRAY
11241: PUSH
11242: LD_INT 2
11244: ARRAY
11245: PPUSH
11246: CALL_OW 171
// end else
11250: GO 11291
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_EXP 36
11261: PUSH
11262: LD_VAR 0 2
11266: ARRAY
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PPUSH
11272: LD_EXP 36
11276: PUSH
11277: LD_VAR 0 2
11281: ARRAY
11282: PUSH
11283: LD_INT 2
11285: ARRAY
11286: PPUSH
11287: CALL_OW 171
// end ; end ;
11291: LD_VAR 0 3
11295: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11296: LD_INT 0
11298: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11299: LD_VAR 0 1
11303: PUSH
11304: LD_INT 250
11306: EQUAL
11307: PUSH
11308: LD_VAR 0 2
11312: PPUSH
11313: CALL_OW 264
11317: PUSH
11318: LD_EXP 112
11322: EQUAL
11323: AND
11324: IFFALSE 11345
// MinerPlaceMine ( unit , x , y ) ;
11326: LD_VAR 0 2
11330: PPUSH
11331: LD_VAR 0 4
11335: PPUSH
11336: LD_VAR 0 5
11340: PPUSH
11341: CALL 14073 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11345: LD_VAR 0 1
11349: PUSH
11350: LD_INT 251
11352: EQUAL
11353: PUSH
11354: LD_VAR 0 2
11358: PPUSH
11359: CALL_OW 264
11363: PUSH
11364: LD_EXP 112
11368: EQUAL
11369: AND
11370: IFFALSE 11391
// MinerDetonateMine ( unit , x , y ) ;
11372: LD_VAR 0 2
11376: PPUSH
11377: LD_VAR 0 4
11381: PPUSH
11382: LD_VAR 0 5
11386: PPUSH
11387: CALL 14350 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11391: LD_VAR 0 1
11395: PUSH
11396: LD_INT 252
11398: EQUAL
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 264
11409: PUSH
11410: LD_EXP 112
11414: EQUAL
11415: AND
11416: IFFALSE 11437
// MinerCreateMinefield ( unit , x , y ) ;
11418: LD_VAR 0 2
11422: PPUSH
11423: LD_VAR 0 4
11427: PPUSH
11428: LD_VAR 0 5
11432: PPUSH
11433: CALL 14767 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11437: LD_VAR 0 1
11441: PUSH
11442: LD_INT 253
11444: EQUAL
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 257
11455: PUSH
11456: LD_INT 5
11458: EQUAL
11459: AND
11460: IFFALSE 11481
// ComBinocular ( unit , x , y ) ;
11462: LD_VAR 0 2
11466: PPUSH
11467: LD_VAR 0 4
11471: PPUSH
11472: LD_VAR 0 5
11476: PPUSH
11477: CALL 15138 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11481: LD_VAR 0 1
11485: PUSH
11486: LD_INT 254
11488: EQUAL
11489: PUSH
11490: LD_VAR 0 2
11494: PPUSH
11495: CALL_OW 264
11499: PUSH
11500: LD_EXP 107
11504: EQUAL
11505: AND
11506: PUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: CALL_OW 263
11516: PUSH
11517: LD_INT 3
11519: EQUAL
11520: AND
11521: IFFALSE 11537
// HackDestroyVehicle ( unit , selectedUnit ) ;
11523: LD_VAR 0 2
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: CALL 13433 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11537: LD_VAR 0 1
11541: PUSH
11542: LD_INT 255
11544: EQUAL
11545: PUSH
11546: LD_VAR 0 2
11550: PPUSH
11551: CALL_OW 264
11555: PUSH
11556: LD_INT 14
11558: PUSH
11559: LD_INT 53
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: IN
11566: AND
11567: PUSH
11568: LD_VAR 0 4
11572: PPUSH
11573: LD_VAR 0 5
11577: PPUSH
11578: CALL_OW 488
11582: AND
11583: IFFALSE 11607
// CutTreeXYR ( unit , x , y , 12 ) ;
11585: LD_VAR 0 2
11589: PPUSH
11590: LD_VAR 0 4
11594: PPUSH
11595: LD_VAR 0 5
11599: PPUSH
11600: LD_INT 12
11602: PPUSH
11603: CALL 11999 0 4
// if cmd = 256 then
11607: LD_VAR 0 1
11611: PUSH
11612: LD_INT 256
11614: EQUAL
11615: IFFALSE 11636
// SetFactoryWaypoint ( unit , x , y ) ;
11617: LD_VAR 0 2
11621: PPUSH
11622: LD_VAR 0 4
11626: PPUSH
11627: LD_VAR 0 5
11631: PPUSH
11632: CALL 11641 0 3
// end ;
11636: LD_VAR 0 6
11640: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11641: LD_INT 0
11643: PPUSH
11644: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11645: LD_VAR 0 1
11649: NOT
11650: PUSH
11651: LD_VAR 0 2
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: CALL_OW 488
11665: NOT
11666: OR
11667: PUSH
11668: LD_VAR 0 1
11672: PPUSH
11673: CALL_OW 266
11677: PUSH
11678: LD_INT 3
11680: NONEQUAL
11681: PUSH
11682: LD_VAR 0 1
11686: PPUSH
11687: CALL_OW 247
11691: PUSH
11692: LD_INT 1
11694: EQUAL
11695: NOT
11696: AND
11697: OR
11698: IFFALSE 11702
// exit ;
11700: GO 11851
// if GetType ( factory ) = unit_human then
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL_OW 247
11711: PUSH
11712: LD_INT 1
11714: EQUAL
11715: IFFALSE 11732
// factory := IsInUnit ( factory ) ;
11717: LD_ADDR_VAR 0 1
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 310
11731: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 266
11741: PUSH
11742: LD_INT 3
11744: NONEQUAL
11745: IFFALSE 11749
// exit ;
11747: GO 11851
// if HexInfo ( x , y ) = factory then
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_VAR 0 3
11758: PPUSH
11759: CALL_OW 428
11763: PUSH
11764: LD_VAR 0 1
11768: EQUAL
11769: IFFALSE 11796
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11771: LD_ADDR_EXP 36
11775: PUSH
11776: LD_EXP 36
11780: PPUSH
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 1
11793: ST_TO_ADDR
11794: GO 11847
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
11796: LD_ADDR_EXP 36
11800: PUSH
11801: LD_EXP 36
11805: PPUSH
11806: LD_VAR 0 1
11810: PPUSH
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 255
11820: PUSH
11821: LD_VAR 0 1
11825: PUSH
11826: LD_VAR 0 2
11830: PUSH
11831: LD_VAR 0 3
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 1
11846: ST_TO_ADDR
// UpdateFactoryWaypoints ;
11847: CALL 11856 0 0
// end ;
11851: LD_VAR 0 4
11855: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
11856: LD_INT 0
11858: PPUSH
11859: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
11860: LD_STRING resetFactoryWaypoint();
11862: PPUSH
11863: CALL_OW 559
// if factoryWaypoints then
11867: LD_EXP 36
11871: IFFALSE 11994
// begin for i := 1 to factoryWaypoints do
11873: LD_ADDR_VAR 0 2
11877: PUSH
11878: DOUBLE
11879: LD_INT 1
11881: DEC
11882: ST_TO_ADDR
11883: LD_EXP 36
11887: PUSH
11888: FOR_TO
11889: IFFALSE 11992
// if factoryWaypoints [ i ] then
11891: LD_EXP 36
11895: PUSH
11896: LD_VAR 0 2
11900: ARRAY
11901: IFFALSE 11990
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
11903: LD_STRING setFactoryWaypointXY(
11905: PUSH
11906: LD_EXP 36
11910: PUSH
11911: LD_VAR 0 2
11915: ARRAY
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: STR
11921: PUSH
11922: LD_STRING ,
11924: STR
11925: PUSH
11926: LD_EXP 36
11930: PUSH
11931: LD_VAR 0 2
11935: ARRAY
11936: PUSH
11937: LD_INT 2
11939: ARRAY
11940: STR
11941: PUSH
11942: LD_STRING ,
11944: STR
11945: PUSH
11946: LD_EXP 36
11950: PUSH
11951: LD_VAR 0 2
11955: ARRAY
11956: PUSH
11957: LD_INT 3
11959: ARRAY
11960: STR
11961: PUSH
11962: LD_STRING ,
11964: STR
11965: PUSH
11966: LD_EXP 36
11970: PUSH
11971: LD_VAR 0 2
11975: ARRAY
11976: PUSH
11977: LD_INT 4
11979: ARRAY
11980: STR
11981: PUSH
11982: LD_STRING )
11984: STR
11985: PPUSH
11986: CALL_OW 559
11990: GO 11888
11992: POP
11993: POP
// end ; end ;
11994: LD_VAR 0 1
11998: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11999: LD_INT 0
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
12010: LD_VAR 0 1
12014: NOT
12015: PUSH
12016: LD_VAR 0 2
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: CALL_OW 488
12030: NOT
12031: OR
12032: PUSH
12033: LD_VAR 0 4
12037: NOT
12038: OR
12039: IFFALSE 12043
// exit ;
12041: GO 12383
// list := [ ] ;
12043: LD_ADDR_VAR 0 13
12047: PUSH
12048: EMPTY
12049: ST_TO_ADDR
// if x - r < 0 then
12050: LD_VAR 0 2
12054: PUSH
12055: LD_VAR 0 4
12059: MINUS
12060: PUSH
12061: LD_INT 0
12063: LESS
12064: IFFALSE 12076
// min_x := 0 else
12066: LD_ADDR_VAR 0 7
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
12074: GO 12092
// min_x := x - r ;
12076: LD_ADDR_VAR 0 7
12080: PUSH
12081: LD_VAR 0 2
12085: PUSH
12086: LD_VAR 0 4
12090: MINUS
12091: ST_TO_ADDR
// if y - r < 0 then
12092: LD_VAR 0 3
12096: PUSH
12097: LD_VAR 0 4
12101: MINUS
12102: PUSH
12103: LD_INT 0
12105: LESS
12106: IFFALSE 12118
// min_y := 0 else
12108: LD_ADDR_VAR 0 8
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
12116: GO 12134
// min_y := y - r ;
12118: LD_ADDR_VAR 0 8
12122: PUSH
12123: LD_VAR 0 3
12127: PUSH
12128: LD_VAR 0 4
12132: MINUS
12133: ST_TO_ADDR
// max_x := x + r ;
12134: LD_ADDR_VAR 0 9
12138: PUSH
12139: LD_VAR 0 2
12143: PUSH
12144: LD_VAR 0 4
12148: PLUS
12149: ST_TO_ADDR
// max_y := y + r ;
12150: LD_ADDR_VAR 0 10
12154: PUSH
12155: LD_VAR 0 3
12159: PUSH
12160: LD_VAR 0 4
12164: PLUS
12165: ST_TO_ADDR
// for _x = min_x to max_x do
12166: LD_ADDR_VAR 0 11
12170: PUSH
12171: DOUBLE
12172: LD_VAR 0 7
12176: DEC
12177: ST_TO_ADDR
12178: LD_VAR 0 9
12182: PUSH
12183: FOR_TO
12184: IFFALSE 12301
// for _y = min_y to max_y do
12186: LD_ADDR_VAR 0 12
12190: PUSH
12191: DOUBLE
12192: LD_VAR 0 8
12196: DEC
12197: ST_TO_ADDR
12198: LD_VAR 0 10
12202: PUSH
12203: FOR_TO
12204: IFFALSE 12297
// begin if not ValidHex ( _x , _y ) then
12206: LD_VAR 0 11
12210: PPUSH
12211: LD_VAR 0 12
12215: PPUSH
12216: CALL_OW 488
12220: NOT
12221: IFFALSE 12225
// continue ;
12223: GO 12203
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12225: LD_VAR 0 11
12229: PPUSH
12230: LD_VAR 0 12
12234: PPUSH
12235: CALL_OW 351
12239: PUSH
12240: LD_VAR 0 11
12244: PPUSH
12245: LD_VAR 0 12
12249: PPUSH
12250: CALL_OW 554
12254: AND
12255: IFFALSE 12295
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12257: LD_ADDR_VAR 0 13
12261: PUSH
12262: LD_VAR 0 13
12266: PPUSH
12267: LD_VAR 0 13
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: PPUSH
12276: LD_VAR 0 11
12280: PUSH
12281: LD_VAR 0 12
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PPUSH
12290: CALL_OW 2
12294: ST_TO_ADDR
// end ;
12295: GO 12203
12297: POP
12298: POP
12299: GO 12183
12301: POP
12302: POP
// if not list then
12303: LD_VAR 0 13
12307: NOT
12308: IFFALSE 12312
// exit ;
12310: GO 12383
// for i in list do
12312: LD_ADDR_VAR 0 6
12316: PUSH
12317: LD_VAR 0 13
12321: PUSH
12322: FOR_IN
12323: IFFALSE 12381
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12325: LD_VAR 0 1
12329: PPUSH
12330: LD_STRING M
12332: PUSH
12333: LD_VAR 0 6
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PUSH
12342: LD_VAR 0 6
12346: PUSH
12347: LD_INT 2
12349: ARRAY
12350: PUSH
12351: LD_INT 0
12353: PUSH
12354: LD_INT 0
12356: PUSH
12357: LD_INT 0
12359: PUSH
12360: LD_INT 0
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: PPUSH
12375: CALL_OW 447
12379: GO 12322
12381: POP
12382: POP
// end ;
12383: LD_VAR 0 5
12387: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12388: LD_EXP 37
12392: NOT
12393: IFFALSE 12443
12395: GO 12397
12397: DISABLE
// begin initHack := true ;
12398: LD_ADDR_EXP 37
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// hackTanks := [ ] ;
12406: LD_ADDR_EXP 38
12410: PUSH
12411: EMPTY
12412: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12413: LD_ADDR_EXP 39
12417: PUSH
12418: EMPTY
12419: ST_TO_ADDR
// hackLimit := 3 ;
12420: LD_ADDR_EXP 40
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hackDist := 12 ;
12428: LD_ADDR_EXP 41
12432: PUSH
12433: LD_INT 12
12435: ST_TO_ADDR
// hackCounter := [ ] ;
12436: LD_ADDR_EXP 42
12440: PUSH
12441: EMPTY
12442: ST_TO_ADDR
// end ;
12443: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12444: LD_EXP 37
12448: PUSH
12449: LD_INT 34
12451: PUSH
12452: LD_EXP 107
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PPUSH
12461: CALL_OW 69
12465: AND
12466: IFFALSE 12721
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
12474: PPUSH
// begin enable ;
12475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12476: LD_ADDR_VAR 0 1
12480: PUSH
12481: LD_INT 34
12483: PUSH
12484: LD_EXP 107
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PPUSH
12493: CALL_OW 69
12497: PUSH
12498: FOR_IN
12499: IFFALSE 12719
// begin if not i in hackTanks then
12501: LD_VAR 0 1
12505: PUSH
12506: LD_EXP 38
12510: IN
12511: NOT
12512: IFFALSE 12595
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12514: LD_ADDR_EXP 38
12518: PUSH
12519: LD_EXP 38
12523: PPUSH
12524: LD_EXP 38
12528: PUSH
12529: LD_INT 1
12531: PLUS
12532: PPUSH
12533: LD_VAR 0 1
12537: PPUSH
12538: CALL_OW 1
12542: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12543: LD_ADDR_EXP 39
12547: PUSH
12548: LD_EXP 39
12552: PPUSH
12553: LD_EXP 39
12557: PUSH
12558: LD_INT 1
12560: PLUS
12561: PPUSH
12562: EMPTY
12563: PPUSH
12564: CALL_OW 1
12568: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12569: LD_ADDR_EXP 42
12573: PUSH
12574: LD_EXP 42
12578: PPUSH
12579: LD_EXP 42
12583: PUSH
12584: LD_INT 1
12586: PLUS
12587: PPUSH
12588: EMPTY
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 302
12604: NOT
12605: IFFALSE 12618
// begin HackUnlinkAll ( i ) ;
12607: LD_VAR 0 1
12611: PPUSH
12612: CALL 12724 0 1
// continue ;
12616: GO 12498
// end ; HackCheckCapturedStatus ( i ) ;
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL 13167 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 81
12634: PUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: CALL_OW 255
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 33
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 91
12661: PUSH
12662: LD_VAR 0 1
12666: PUSH
12667: LD_EXP 41
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: EMPTY
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// if not tmp then
12694: LD_VAR 0 2
12698: NOT
12699: IFFALSE 12703
// continue ;
12701: GO 12498
// HackLink ( i , tmp ) ;
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_VAR 0 2
12712: PPUSH
12713: CALL 12860 0 2
// end ;
12717: GO 12498
12719: POP
12720: POP
// end ;
12721: PPOPN 2
12723: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12724: LD_INT 0
12726: PPUSH
12727: PPUSH
12728: PPUSH
// if not hack in hackTanks then
12729: LD_VAR 0 1
12733: PUSH
12734: LD_EXP 38
12738: IN
12739: NOT
12740: IFFALSE 12744
// exit ;
12742: GO 12855
// index := GetElementIndex ( hackTanks , hack ) ;
12744: LD_ADDR_VAR 0 4
12748: PUSH
12749: LD_EXP 38
12753: PPUSH
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL 34826 0 2
12763: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12764: LD_EXP 39
12768: PUSH
12769: LD_VAR 0 4
12773: ARRAY
12774: IFFALSE 12855
// begin for i in hackTanksCaptured [ index ] do
12776: LD_ADDR_VAR 0 3
12780: PUSH
12781: LD_EXP 39
12785: PUSH
12786: LD_VAR 0 4
12790: ARRAY
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12819
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12795: LD_VAR 0 3
12799: PUSH
12800: LD_INT 1
12802: ARRAY
12803: PPUSH
12804: LD_VAR 0 3
12808: PUSH
12809: LD_INT 2
12811: ARRAY
12812: PPUSH
12813: CALL_OW 235
12817: GO 12792
12819: POP
12820: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12821: LD_ADDR_EXP 39
12825: PUSH
12826: LD_EXP 39
12830: PPUSH
12831: LD_VAR 0 4
12835: PPUSH
12836: EMPTY
12837: PPUSH
12838: CALL_OW 1
12842: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 505
// end ; end ;
12855: LD_VAR 0 2
12859: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12860: LD_INT 0
12862: PPUSH
12863: PPUSH
12864: PPUSH
// if not hack in hackTanks or not vehicles then
12865: LD_VAR 0 1
12869: PUSH
12870: LD_EXP 38
12874: IN
12875: NOT
12876: PUSH
12877: LD_VAR 0 2
12881: NOT
12882: OR
12883: IFFALSE 12887
// exit ;
12885: GO 13162
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL 35476 0 4
12912: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12913: LD_ADDR_VAR 0 5
12917: PUSH
12918: LD_EXP 38
12922: PPUSH
12923: LD_VAR 0 1
12927: PPUSH
12928: CALL 34826 0 2
12932: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12933: LD_EXP 39
12937: PUSH
12938: LD_VAR 0 5
12942: ARRAY
12943: PUSH
12944: LD_EXP 40
12948: LESS
12949: IFFALSE 13138
// begin for i := 1 to vehicles do
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: DOUBLE
12957: LD_INT 1
12959: DEC
12960: ST_TO_ADDR
12961: LD_VAR 0 2
12965: PUSH
12966: FOR_TO
12967: IFFALSE 13136
// begin if hackTanksCaptured [ index ] = hackLimit then
12969: LD_EXP 39
12973: PUSH
12974: LD_VAR 0 5
12978: ARRAY
12979: PUSH
12980: LD_EXP 40
12984: EQUAL
12985: IFFALSE 12989
// break ;
12987: GO 13136
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12989: LD_ADDR_EXP 42
12993: PUSH
12994: LD_EXP 42
12998: PPUSH
12999: LD_VAR 0 5
13003: PPUSH
13004: LD_EXP 42
13008: PUSH
13009: LD_VAR 0 5
13013: ARRAY
13014: PUSH
13015: LD_INT 1
13017: PLUS
13018: PPUSH
13019: CALL_OW 1
13023: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13024: LD_ADDR_EXP 39
13028: PUSH
13029: LD_EXP 39
13033: PPUSH
13034: LD_VAR 0 5
13038: PUSH
13039: LD_EXP 39
13043: PUSH
13044: LD_VAR 0 5
13048: ARRAY
13049: PUSH
13050: LD_INT 1
13052: PLUS
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: LD_VAR 0 2
13062: PUSH
13063: LD_VAR 0 4
13067: ARRAY
13068: PUSH
13069: LD_VAR 0 2
13073: PUSH
13074: LD_VAR 0 4
13078: ARRAY
13079: PPUSH
13080: CALL_OW 255
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL 35041 0 3
13093: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13094: LD_VAR 0 2
13098: PUSH
13099: LD_VAR 0 4
13103: ARRAY
13104: PPUSH
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 255
13114: PPUSH
13115: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13119: LD_VAR 0 2
13123: PUSH
13124: LD_VAR 0 4
13128: ARRAY
13129: PPUSH
13130: CALL_OW 141
// end ;
13134: GO 12966
13136: POP
13137: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_EXP 39
13147: PUSH
13148: LD_VAR 0 5
13152: ARRAY
13153: PUSH
13154: LD_INT 0
13156: PLUS
13157: PPUSH
13158: CALL_OW 505
// end ;
13162: LD_VAR 0 3
13166: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
// if not hack in hackTanks then
13173: LD_VAR 0 1
13177: PUSH
13178: LD_EXP 38
13182: IN
13183: NOT
13184: IFFALSE 13188
// exit ;
13186: GO 13428
// index := GetElementIndex ( hackTanks , hack ) ;
13188: LD_ADDR_VAR 0 4
13192: PUSH
13193: LD_EXP 38
13197: PPUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL 34826 0 2
13207: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: DOUBLE
13214: LD_EXP 39
13218: PUSH
13219: LD_VAR 0 4
13223: ARRAY
13224: INC
13225: ST_TO_ADDR
13226: LD_INT 1
13228: PUSH
13229: FOR_DOWNTO
13230: IFFALSE 13402
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13232: LD_ADDR_VAR 0 5
13236: PUSH
13237: LD_EXP 39
13241: PUSH
13242: LD_VAR 0 4
13246: ARRAY
13247: PUSH
13248: LD_VAR 0 3
13252: ARRAY
13253: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13254: LD_VAR 0 5
13258: PUSH
13259: LD_INT 1
13261: ARRAY
13262: PPUSH
13263: CALL_OW 302
13267: NOT
13268: PUSH
13269: LD_VAR 0 5
13273: PUSH
13274: LD_INT 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 255
13282: PUSH
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 255
13292: NONEQUAL
13293: OR
13294: IFFALSE 13400
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13296: LD_VAR 0 5
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PPUSH
13305: CALL_OW 305
13309: PUSH
13310: LD_VAR 0 5
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: PPUSH
13319: CALL_OW 255
13323: PUSH
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 255
13333: EQUAL
13334: AND
13335: IFFALSE 13359
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13337: LD_VAR 0 5
13341: PUSH
13342: LD_INT 1
13344: ARRAY
13345: PPUSH
13346: LD_VAR 0 5
13350: PUSH
13351: LD_INT 2
13353: ARRAY
13354: PPUSH
13355: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13359: LD_ADDR_EXP 39
13363: PUSH
13364: LD_EXP 39
13368: PPUSH
13369: LD_VAR 0 4
13373: PPUSH
13374: LD_EXP 39
13378: PUSH
13379: LD_VAR 0 4
13383: ARRAY
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: CALL_OW 3
13394: PPUSH
13395: CALL_OW 1
13399: ST_TO_ADDR
// end ; end ;
13400: GO 13229
13402: POP
13403: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13404: LD_VAR 0 1
13408: PPUSH
13409: LD_EXP 39
13413: PUSH
13414: LD_VAR 0 4
13418: ARRAY
13419: PUSH
13420: LD_INT 0
13422: PLUS
13423: PPUSH
13424: CALL_OW 505
// end ;
13428: LD_VAR 0 2
13432: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// if not hack in hackTanks then
13439: LD_VAR 0 1
13443: PUSH
13444: LD_EXP 38
13448: IN
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13539
// index := GetElementIndex ( hackTanks , hack ) ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: LD_EXP 38
13463: PPUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL 34826 0 2
13473: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13474: LD_ADDR_VAR 0 4
13478: PUSH
13479: DOUBLE
13480: LD_INT 1
13482: DEC
13483: ST_TO_ADDR
13484: LD_EXP 39
13488: PUSH
13489: LD_VAR 0 5
13493: ARRAY
13494: PUSH
13495: FOR_TO
13496: IFFALSE 13537
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13498: LD_EXP 39
13502: PUSH
13503: LD_VAR 0 5
13507: ARRAY
13508: PUSH
13509: LD_VAR 0 4
13513: ARRAY
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PUSH
13519: LD_VAR 0 2
13523: EQUAL
13524: IFFALSE 13535
// KillUnit ( vehicle ) ;
13526: LD_VAR 0 2
13530: PPUSH
13531: CALL_OW 66
13535: GO 13495
13537: POP
13538: POP
// end ;
13539: LD_VAR 0 3
13543: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13544: LD_EXP 43
13548: NOT
13549: IFFALSE 13584
13551: GO 13553
13553: DISABLE
// begin initMiner := true ;
13554: LD_ADDR_EXP 43
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// minersList := [ ] ;
13562: LD_ADDR_EXP 44
13566: PUSH
13567: EMPTY
13568: ST_TO_ADDR
// minerMinesList := [ ] ;
13569: LD_ADDR_EXP 45
13573: PUSH
13574: EMPTY
13575: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13576: LD_ADDR_EXP 46
13580: PUSH
13581: LD_INT 5
13583: ST_TO_ADDR
// end ;
13584: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13585: LD_EXP 43
13589: PUSH
13590: LD_INT 34
13592: PUSH
13593: LD_EXP 112
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 69
13606: AND
13607: IFFALSE 14070
13609: GO 13611
13611: DISABLE
13612: LD_INT 0
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
// begin enable ;
13618: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13619: LD_ADDR_VAR 0 1
13623: PUSH
13624: LD_INT 34
13626: PUSH
13627: LD_EXP 112
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 69
13640: PUSH
13641: FOR_IN
13642: IFFALSE 13714
// begin if not i in minersList then
13644: LD_VAR 0 1
13648: PUSH
13649: LD_EXP 44
13653: IN
13654: NOT
13655: IFFALSE 13712
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13657: LD_ADDR_EXP 44
13661: PUSH
13662: LD_EXP 44
13666: PPUSH
13667: LD_EXP 44
13671: PUSH
13672: LD_INT 1
13674: PLUS
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 1
13685: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13686: LD_ADDR_EXP 45
13690: PUSH
13691: LD_EXP 45
13695: PPUSH
13696: LD_EXP 45
13700: PUSH
13701: LD_INT 1
13703: PLUS
13704: PPUSH
13705: EMPTY
13706: PPUSH
13707: CALL_OW 1
13711: ST_TO_ADDR
// end end ;
13712: GO 13641
13714: POP
13715: POP
// for i := minerMinesList downto 1 do
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: DOUBLE
13722: LD_EXP 45
13726: INC
13727: ST_TO_ADDR
13728: LD_INT 1
13730: PUSH
13731: FOR_DOWNTO
13732: IFFALSE 14068
// begin if IsLive ( minersList [ i ] ) then
13734: LD_EXP 44
13738: PUSH
13739: LD_VAR 0 1
13743: ARRAY
13744: PPUSH
13745: CALL_OW 300
13749: IFFALSE 13777
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13751: LD_EXP 44
13755: PUSH
13756: LD_VAR 0 1
13760: ARRAY
13761: PPUSH
13762: LD_EXP 45
13766: PUSH
13767: LD_VAR 0 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 505
// if not minerMinesList [ i ] then
13777: LD_EXP 45
13781: PUSH
13782: LD_VAR 0 1
13786: ARRAY
13787: NOT
13788: IFFALSE 13792
// continue ;
13790: GO 13731
// for j := minerMinesList [ i ] downto 1 do
13792: LD_ADDR_VAR 0 2
13796: PUSH
13797: DOUBLE
13798: LD_EXP 45
13802: PUSH
13803: LD_VAR 0 1
13807: ARRAY
13808: INC
13809: ST_TO_ADDR
13810: LD_INT 1
13812: PUSH
13813: FOR_DOWNTO
13814: IFFALSE 14064
// begin side := GetSide ( minersList [ i ] ) ;
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: LD_EXP 44
13825: PUSH
13826: LD_VAR 0 1
13830: ARRAY
13831: PPUSH
13832: CALL_OW 255
13836: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13837: LD_ADDR_VAR 0 4
13841: PUSH
13842: LD_EXP 45
13846: PUSH
13847: LD_VAR 0 1
13851: ARRAY
13852: PUSH
13853: LD_VAR 0 2
13857: ARRAY
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_EXP 45
13867: PUSH
13868: LD_VAR 0 1
13872: ARRAY
13873: PUSH
13874: LD_VAR 0 2
13878: ARRAY
13879: PUSH
13880: LD_INT 2
13882: ARRAY
13883: PPUSH
13884: CALL_OW 428
13888: ST_TO_ADDR
// if not tmp then
13889: LD_VAR 0 4
13893: NOT
13894: IFFALSE 13898
// continue ;
13896: GO 13813
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13898: LD_VAR 0 4
13902: PUSH
13903: LD_INT 81
13905: PUSH
13906: LD_VAR 0 3
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: IN
13920: PUSH
13921: LD_EXP 45
13925: PUSH
13926: LD_VAR 0 1
13930: ARRAY
13931: PUSH
13932: LD_VAR 0 2
13936: ARRAY
13937: PUSH
13938: LD_INT 1
13940: ARRAY
13941: PPUSH
13942: LD_EXP 45
13946: PUSH
13947: LD_VAR 0 1
13951: ARRAY
13952: PUSH
13953: LD_VAR 0 2
13957: ARRAY
13958: PUSH
13959: LD_INT 2
13961: ARRAY
13962: PPUSH
13963: CALL_OW 458
13967: AND
13968: IFFALSE 14062
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13970: LD_EXP 45
13974: PUSH
13975: LD_VAR 0 1
13979: ARRAY
13980: PUSH
13981: LD_VAR 0 2
13985: ARRAY
13986: PUSH
13987: LD_INT 1
13989: ARRAY
13990: PPUSH
13991: LD_EXP 45
13995: PUSH
13996: LD_VAR 0 1
14000: ARRAY
14001: PUSH
14002: LD_VAR 0 2
14006: ARRAY
14007: PUSH
14008: LD_INT 2
14010: ARRAY
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14021: LD_ADDR_EXP 45
14025: PUSH
14026: LD_EXP 45
14030: PPUSH
14031: LD_VAR 0 1
14035: PPUSH
14036: LD_EXP 45
14040: PUSH
14041: LD_VAR 0 1
14045: ARRAY
14046: PPUSH
14047: LD_VAR 0 2
14051: PPUSH
14052: CALL_OW 3
14056: PPUSH
14057: CALL_OW 1
14061: ST_TO_ADDR
// end ; end ;
14062: GO 13813
14064: POP
14065: POP
// end ;
14066: GO 13731
14068: POP
14069: POP
// end ;
14070: PPOPN 4
14072: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14073: LD_INT 0
14075: PPUSH
14076: PPUSH
// result := false ;
14077: LD_ADDR_VAR 0 4
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 264
14094: PUSH
14095: LD_EXP 112
14099: EQUAL
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14345
// index := GetElementIndex ( minersList , unit ) ;
14105: LD_ADDR_VAR 0 5
14109: PUSH
14110: LD_EXP 44
14114: PPUSH
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL 34826 0 2
14124: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14125: LD_EXP 45
14129: PUSH
14130: LD_VAR 0 5
14134: ARRAY
14135: PUSH
14136: LD_EXP 46
14140: GREATEREQUAL
14141: IFFALSE 14145
// exit ;
14143: GO 14345
// ComMoveXY ( unit , x , y ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_VAR 0 2
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14164: LD_INT 35
14166: PPUSH
14167: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14171: LD_VAR 0 1
14175: PPUSH
14176: LD_VAR 0 2
14180: PPUSH
14181: LD_VAR 0 3
14185: PPUSH
14186: CALL 65598 0 3
14190: NOT
14191: PUSH
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 314
14201: AND
14202: IFFALSE 14206
// exit ;
14204: GO 14345
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14206: LD_VAR 0 2
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: CALL_OW 428
14220: PUSH
14221: LD_VAR 0 1
14225: EQUAL
14226: PUSH
14227: LD_VAR 0 1
14231: PPUSH
14232: CALL_OW 314
14236: NOT
14237: AND
14238: IFFALSE 14164
// PlaySoundXY ( x , y , PlantMine ) ;
14240: LD_VAR 0 2
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_STRING PlantMine
14252: PPUSH
14253: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14257: LD_VAR 0 2
14261: PPUSH
14262: LD_VAR 0 3
14266: PPUSH
14267: LD_VAR 0 1
14271: PPUSH
14272: CALL_OW 255
14276: PPUSH
14277: LD_INT 0
14279: PPUSH
14280: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14284: LD_ADDR_EXP 45
14288: PUSH
14289: LD_EXP 45
14293: PPUSH
14294: LD_VAR 0 5
14298: PUSH
14299: LD_EXP 45
14303: PUSH
14304: LD_VAR 0 5
14308: ARRAY
14309: PUSH
14310: LD_INT 1
14312: PLUS
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PPUSH
14318: LD_VAR 0 2
14322: PUSH
14323: LD_VAR 0 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL 35041 0 3
14336: ST_TO_ADDR
// result := true ;
14337: LD_ADDR_VAR 0 4
14341: PUSH
14342: LD_INT 1
14344: ST_TO_ADDR
// end ;
14345: LD_VAR 0 4
14349: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14350: LD_INT 0
14352: PPUSH
14353: PPUSH
14354: PPUSH
// if not unit in minersList then
14355: LD_VAR 0 1
14359: PUSH
14360: LD_EXP 44
14364: IN
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14762
// index := GetElementIndex ( minersList , unit ) ;
14370: LD_ADDR_VAR 0 6
14374: PUSH
14375: LD_EXP 44
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL 34826 0 2
14389: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14390: LD_ADDR_VAR 0 5
14394: PUSH
14395: DOUBLE
14396: LD_EXP 45
14400: PUSH
14401: LD_VAR 0 6
14405: ARRAY
14406: INC
14407: ST_TO_ADDR
14408: LD_INT 1
14410: PUSH
14411: FOR_DOWNTO
14412: IFFALSE 14573
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14414: LD_EXP 45
14418: PUSH
14419: LD_VAR 0 6
14423: ARRAY
14424: PUSH
14425: LD_VAR 0 5
14429: ARRAY
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PUSH
14435: LD_VAR 0 2
14439: EQUAL
14440: PUSH
14441: LD_EXP 45
14445: PUSH
14446: LD_VAR 0 6
14450: ARRAY
14451: PUSH
14452: LD_VAR 0 5
14456: ARRAY
14457: PUSH
14458: LD_INT 2
14460: ARRAY
14461: PUSH
14462: LD_VAR 0 3
14466: EQUAL
14467: AND
14468: IFFALSE 14571
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14470: LD_EXP 45
14474: PUSH
14475: LD_VAR 0 6
14479: ARRAY
14480: PUSH
14481: LD_VAR 0 5
14485: ARRAY
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_EXP 45
14495: PUSH
14496: LD_VAR 0 6
14500: ARRAY
14501: PUSH
14502: LD_VAR 0 5
14506: ARRAY
14507: PUSH
14508: LD_INT 2
14510: ARRAY
14511: PPUSH
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 255
14521: PPUSH
14522: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14526: LD_ADDR_EXP 45
14530: PUSH
14531: LD_EXP 45
14535: PPUSH
14536: LD_VAR 0 6
14540: PPUSH
14541: LD_EXP 45
14545: PUSH
14546: LD_VAR 0 6
14550: ARRAY
14551: PPUSH
14552: LD_VAR 0 5
14556: PPUSH
14557: CALL_OW 3
14561: PPUSH
14562: CALL_OW 1
14566: ST_TO_ADDR
// exit ;
14567: POP
14568: POP
14569: GO 14762
// end ; end ;
14571: GO 14411
14573: POP
14574: POP
// for i := minerMinesList [ index ] downto 1 do
14575: LD_ADDR_VAR 0 5
14579: PUSH
14580: DOUBLE
14581: LD_EXP 45
14585: PUSH
14586: LD_VAR 0 6
14590: ARRAY
14591: INC
14592: ST_TO_ADDR
14593: LD_INT 1
14595: PUSH
14596: FOR_DOWNTO
14597: IFFALSE 14760
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14599: LD_EXP 45
14603: PUSH
14604: LD_VAR 0 6
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: ARRAY
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: LD_EXP 45
14624: PUSH
14625: LD_VAR 0 6
14629: ARRAY
14630: PUSH
14631: LD_VAR 0 5
14635: ARRAY
14636: PUSH
14637: LD_INT 2
14639: ARRAY
14640: PPUSH
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: CALL_OW 298
14655: PUSH
14656: LD_INT 6
14658: LESS
14659: IFFALSE 14758
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14661: LD_EXP 45
14665: PUSH
14666: LD_VAR 0 6
14670: ARRAY
14671: PUSH
14672: LD_VAR 0 5
14676: ARRAY
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PPUSH
14682: LD_EXP 45
14686: PUSH
14687: LD_VAR 0 6
14691: ARRAY
14692: PUSH
14693: LD_VAR 0 5
14697: ARRAY
14698: PUSH
14699: LD_INT 2
14701: ARRAY
14702: PPUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 255
14712: PPUSH
14713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14717: LD_ADDR_EXP 45
14721: PUSH
14722: LD_EXP 45
14726: PPUSH
14727: LD_VAR 0 6
14731: PPUSH
14732: LD_EXP 45
14736: PUSH
14737: LD_VAR 0 6
14741: ARRAY
14742: PPUSH
14743: LD_VAR 0 5
14747: PPUSH
14748: CALL_OW 3
14752: PPUSH
14753: CALL_OW 1
14757: ST_TO_ADDR
// end ; end ;
14758: GO 14596
14760: POP
14761: POP
// end ;
14762: LD_VAR 0 4
14766: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14767: LD_INT 0
14769: PPUSH
14770: PPUSH
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
14777: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 264
14787: PUSH
14788: LD_EXP 112
14792: EQUAL
14793: NOT
14794: PUSH
14795: LD_VAR 0 1
14799: PUSH
14800: LD_EXP 44
14804: IN
14805: NOT
14806: OR
14807: IFFALSE 14811
// exit ;
14809: GO 15133
// index := GetElementIndex ( minersList , unit ) ;
14811: LD_ADDR_VAR 0 6
14815: PUSH
14816: LD_EXP 44
14820: PPUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL 34826 0 2
14830: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14831: LD_ADDR_VAR 0 8
14835: PUSH
14836: LD_EXP 46
14840: PUSH
14841: LD_EXP 45
14845: PUSH
14846: LD_VAR 0 6
14850: ARRAY
14851: MINUS
14852: ST_TO_ADDR
// if not minesFreeAmount then
14853: LD_VAR 0 8
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 15133
// tmp := [ ] ;
14862: LD_ADDR_VAR 0 7
14866: PUSH
14867: EMPTY
14868: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14869: LD_ADDR_VAR 0 5
14873: PUSH
14874: DOUBLE
14875: LD_INT 1
14877: DEC
14878: ST_TO_ADDR
14879: LD_VAR 0 8
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15080
// begin _d := rand ( 0 , 5 ) ;
14887: LD_ADDR_VAR 0 11
14891: PUSH
14892: LD_INT 0
14894: PPUSH
14895: LD_INT 5
14897: PPUSH
14898: CALL_OW 12
14902: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14903: LD_ADDR_VAR 0 12
14907: PUSH
14908: LD_INT 2
14910: PPUSH
14911: LD_INT 6
14913: PPUSH
14914: CALL_OW 12
14918: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14919: LD_ADDR_VAR 0 9
14923: PUSH
14924: LD_VAR 0 2
14928: PPUSH
14929: LD_VAR 0 11
14933: PPUSH
14934: LD_VAR 0 12
14938: PPUSH
14939: CALL_OW 272
14943: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14944: LD_ADDR_VAR 0 10
14948: PUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_VAR 0 11
14958: PPUSH
14959: LD_VAR 0 12
14963: PPUSH
14964: CALL_OW 273
14968: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14969: LD_VAR 0 9
14973: PPUSH
14974: LD_VAR 0 10
14978: PPUSH
14979: CALL_OW 488
14983: PUSH
14984: LD_VAR 0 9
14988: PUSH
14989: LD_VAR 0 10
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_VAR 0 7
15002: IN
15003: NOT
15004: AND
15005: PUSH
15006: LD_VAR 0 9
15010: PPUSH
15011: LD_VAR 0 10
15015: PPUSH
15016: CALL_OW 458
15020: NOT
15021: AND
15022: IFFALSE 15064
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15024: LD_ADDR_VAR 0 7
15028: PUSH
15029: LD_VAR 0 7
15033: PPUSH
15034: LD_VAR 0 7
15038: PUSH
15039: LD_INT 1
15041: PLUS
15042: PPUSH
15043: LD_VAR 0 9
15047: PUSH
15048: LD_VAR 0 10
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 1
15061: ST_TO_ADDR
15062: GO 15078
// i := i - 1 ;
15064: LD_ADDR_VAR 0 5
15068: PUSH
15069: LD_VAR 0 5
15073: PUSH
15074: LD_INT 1
15076: MINUS
15077: ST_TO_ADDR
// end ;
15078: GO 14884
15080: POP
15081: POP
// for i in tmp do
15082: LD_ADDR_VAR 0 5
15086: PUSH
15087: LD_VAR 0 7
15091: PUSH
15092: FOR_IN
15093: IFFALSE 15131
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 5
15104: PUSH
15105: LD_INT 1
15107: ARRAY
15108: PPUSH
15109: LD_VAR 0 5
15113: PUSH
15114: LD_INT 2
15116: ARRAY
15117: PPUSH
15118: CALL 14073 0 3
15122: NOT
15123: IFFALSE 15129
// exit ;
15125: POP
15126: POP
15127: GO 15133
15129: GO 15092
15131: POP
15132: POP
// end ;
15133: LD_VAR 0 4
15137: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
15138: LD_INT 0
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
// if not GetClass ( unit ) = class_sniper then
15147: LD_VAR 0 1
15151: PPUSH
15152: CALL_OW 257
15156: PUSH
15157: LD_INT 5
15159: EQUAL
15160: NOT
15161: IFFALSE 15165
// exit ;
15163: GO 15553
// dist := 8 ;
15165: LD_ADDR_VAR 0 5
15169: PUSH
15170: LD_INT 8
15172: ST_TO_ADDR
// viewRange := 12 ;
15173: LD_ADDR_VAR 0 7
15177: PUSH
15178: LD_INT 12
15180: ST_TO_ADDR
// side := GetSide ( unit ) ;
15181: LD_ADDR_VAR 0 6
15185: PUSH
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 255
15195: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15196: LD_INT 61
15198: PPUSH
15199: LD_VAR 0 6
15203: PPUSH
15204: CALL_OW 321
15208: PUSH
15209: LD_INT 2
15211: EQUAL
15212: IFFALSE 15222
// viewRange := 16 ;
15214: LD_ADDR_VAR 0 7
15218: PUSH
15219: LD_INT 16
15221: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_VAR 0 2
15231: PPUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: CALL_OW 297
15241: PUSH
15242: LD_VAR 0 5
15246: GREATER
15247: IFFALSE 15326
// begin ComMoveXY ( unit , x , y ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_VAR 0 2
15258: PPUSH
15259: LD_VAR 0 3
15263: PPUSH
15264: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15268: LD_INT 35
15270: PPUSH
15271: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_VAR 0 2
15284: PPUSH
15285: LD_VAR 0 3
15289: PPUSH
15290: CALL 65598 0 3
15294: NOT
15295: IFFALSE 15299
// exit ;
15297: GO 15553
// until GetDistUnitXY ( unit , x , y ) < dist ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_VAR 0 2
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: CALL_OW 297
15318: PUSH
15319: LD_VAR 0 5
15323: LESS
15324: IFFALSE 15268
// end ; ComTurnXY ( unit , x , y ) ;
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: CALL_OW 118
// wait ( 5 ) ;
15345: LD_INT 5
15347: PPUSH
15348: CALL_OW 67
// _d := GetDir ( unit ) ;
15352: LD_ADDR_VAR 0 10
15356: PUSH
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 254
15366: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15367: LD_ADDR_VAR 0 8
15371: PUSH
15372: LD_VAR 0 1
15376: PPUSH
15377: CALL_OW 250
15381: PPUSH
15382: LD_VAR 0 10
15386: PPUSH
15387: LD_VAR 0 5
15391: PPUSH
15392: CALL_OW 272
15396: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15397: LD_ADDR_VAR 0 9
15401: PUSH
15402: LD_VAR 0 1
15406: PPUSH
15407: CALL_OW 251
15411: PPUSH
15412: LD_VAR 0 10
15416: PPUSH
15417: LD_VAR 0 5
15421: PPUSH
15422: CALL_OW 273
15426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15427: LD_VAR 0 8
15431: PPUSH
15432: LD_VAR 0 9
15436: PPUSH
15437: CALL_OW 488
15441: NOT
15442: IFFALSE 15446
// exit ;
15444: GO 15553
// ComAnimCustom ( unit , 1 ) ;
15446: LD_VAR 0 1
15450: PPUSH
15451: LD_INT 1
15453: PPUSH
15454: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15458: LD_VAR 0 8
15462: PPUSH
15463: LD_VAR 0 9
15467: PPUSH
15468: LD_VAR 0 6
15472: PPUSH
15473: LD_VAR 0 7
15477: PPUSH
15478: CALL_OW 330
// repeat wait ( 1 ) ;
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15489: LD_VAR 0 1
15493: PPUSH
15494: CALL_OW 316
15498: PUSH
15499: LD_VAR 0 1
15503: PPUSH
15504: CALL_OW 314
15508: OR
15509: PUSH
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 302
15519: NOT
15520: OR
15521: PUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 301
15531: OR
15532: IFFALSE 15482
// RemoveSeeing ( _x , _y , side ) ;
15534: LD_VAR 0 8
15538: PPUSH
15539: LD_VAR 0 9
15543: PPUSH
15544: LD_VAR 0 6
15548: PPUSH
15549: CALL_OW 331
// end ; end_of_file
15553: LD_VAR 0 4
15557: RET
// every 0 0$1 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15562: LD_STRING updateTimer(
15564: PUSH
15565: LD_OWVAR 1
15569: STR
15570: PUSH
15571: LD_STRING );
15573: STR
15574: PPUSH
15575: CALL_OW 559
// end ;
15579: END
// on MapStart ( p ) do begin if streamModeActive then
15580: LD_EXP 47
15584: IFFALSE 15593
// DefineStreamItems ( true ) ;
15586: LD_INT 1
15588: PPUSH
15589: CALL 17241 0 1
// UpdateFactoryWaypoints ( ) ;
15593: CALL 11856 0 0
// end ;
15597: PPOPN 1
15599: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15600: LD_INT 0
15602: PPUSH
// if p2 = 100 then
15603: LD_VAR 0 2
15607: PUSH
15608: LD_INT 100
15610: EQUAL
15611: IFFALSE 16614
// begin if not StreamModeActive then
15613: LD_EXP 47
15617: NOT
15618: IFFALSE 15628
// StreamModeActive := true ;
15620: LD_ADDR_EXP 47
15624: PUSH
15625: LD_INT 1
15627: ST_TO_ADDR
// if p3 = 0 then
15628: LD_VAR 0 3
15632: PUSH
15633: LD_INT 0
15635: EQUAL
15636: IFFALSE 15642
// InitStreamMode ;
15638: CALL 16777 0 0
// if p3 = 1 then
15642: LD_VAR 0 3
15646: PUSH
15647: LD_INT 1
15649: EQUAL
15650: IFFALSE 15660
// sRocket := true ;
15652: LD_ADDR_EXP 52
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// if p3 = 2 then
15660: LD_VAR 0 3
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15678
// sSpeed := true ;
15670: LD_ADDR_EXP 51
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// if p3 = 3 then
15678: LD_VAR 0 3
15682: PUSH
15683: LD_INT 3
15685: EQUAL
15686: IFFALSE 15696
// sEngine := true ;
15688: LD_ADDR_EXP 53
15692: PUSH
15693: LD_INT 1
15695: ST_TO_ADDR
// if p3 = 4 then
15696: LD_VAR 0 3
15700: PUSH
15701: LD_INT 4
15703: EQUAL
15704: IFFALSE 15714
// sSpec := true ;
15706: LD_ADDR_EXP 50
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// if p3 = 5 then
15714: LD_VAR 0 3
15718: PUSH
15719: LD_INT 5
15721: EQUAL
15722: IFFALSE 15732
// sLevel := true ;
15724: LD_ADDR_EXP 54
15728: PUSH
15729: LD_INT 1
15731: ST_TO_ADDR
// if p3 = 6 then
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 6
15739: EQUAL
15740: IFFALSE 15750
// sArmoury := true ;
15742: LD_ADDR_EXP 55
15746: PUSH
15747: LD_INT 1
15749: ST_TO_ADDR
// if p3 = 7 then
15750: LD_VAR 0 3
15754: PUSH
15755: LD_INT 7
15757: EQUAL
15758: IFFALSE 15768
// sRadar := true ;
15760: LD_ADDR_EXP 56
15764: PUSH
15765: LD_INT 1
15767: ST_TO_ADDR
// if p3 = 8 then
15768: LD_VAR 0 3
15772: PUSH
15773: LD_INT 8
15775: EQUAL
15776: IFFALSE 15786
// sBunker := true ;
15778: LD_ADDR_EXP 57
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// if p3 = 9 then
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 9
15793: EQUAL
15794: IFFALSE 15804
// sHack := true ;
15796: LD_ADDR_EXP 58
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// if p3 = 10 then
15804: LD_VAR 0 3
15808: PUSH
15809: LD_INT 10
15811: EQUAL
15812: IFFALSE 15822
// sFire := true ;
15814: LD_ADDR_EXP 59
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// if p3 = 11 then
15822: LD_VAR 0 3
15826: PUSH
15827: LD_INT 11
15829: EQUAL
15830: IFFALSE 15840
// sRefresh := true ;
15832: LD_ADDR_EXP 60
15836: PUSH
15837: LD_INT 1
15839: ST_TO_ADDR
// if p3 = 12 then
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 12
15847: EQUAL
15848: IFFALSE 15858
// sExp := true ;
15850: LD_ADDR_EXP 61
15854: PUSH
15855: LD_INT 1
15857: ST_TO_ADDR
// if p3 = 13 then
15858: LD_VAR 0 3
15862: PUSH
15863: LD_INT 13
15865: EQUAL
15866: IFFALSE 15876
// sDepot := true ;
15868: LD_ADDR_EXP 62
15872: PUSH
15873: LD_INT 1
15875: ST_TO_ADDR
// if p3 = 14 then
15876: LD_VAR 0 3
15880: PUSH
15881: LD_INT 14
15883: EQUAL
15884: IFFALSE 15894
// sFlag := true ;
15886: LD_ADDR_EXP 63
15890: PUSH
15891: LD_INT 1
15893: ST_TO_ADDR
// if p3 = 15 then
15894: LD_VAR 0 3
15898: PUSH
15899: LD_INT 15
15901: EQUAL
15902: IFFALSE 15912
// sKamikadze := true ;
15904: LD_ADDR_EXP 71
15908: PUSH
15909: LD_INT 1
15911: ST_TO_ADDR
// if p3 = 16 then
15912: LD_VAR 0 3
15916: PUSH
15917: LD_INT 16
15919: EQUAL
15920: IFFALSE 15930
// sTroll := true ;
15922: LD_ADDR_EXP 72
15926: PUSH
15927: LD_INT 1
15929: ST_TO_ADDR
// if p3 = 17 then
15930: LD_VAR 0 3
15934: PUSH
15935: LD_INT 17
15937: EQUAL
15938: IFFALSE 15948
// sSlow := true ;
15940: LD_ADDR_EXP 73
15944: PUSH
15945: LD_INT 1
15947: ST_TO_ADDR
// if p3 = 18 then
15948: LD_VAR 0 3
15952: PUSH
15953: LD_INT 18
15955: EQUAL
15956: IFFALSE 15966
// sLack := true ;
15958: LD_ADDR_EXP 74
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// if p3 = 19 then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_INT 19
15973: EQUAL
15974: IFFALSE 15984
// sTank := true ;
15976: LD_ADDR_EXP 76
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if p3 = 20 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 20
15991: EQUAL
15992: IFFALSE 16002
// sRemote := true ;
15994: LD_ADDR_EXP 77
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// if p3 = 21 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 21
16009: EQUAL
16010: IFFALSE 16020
// sPowell := true ;
16012: LD_ADDR_EXP 78
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 22 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 22
16027: EQUAL
16028: IFFALSE 16038
// sTeleport := true ;
16030: LD_ADDR_EXP 81
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 23 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 23
16045: EQUAL
16046: IFFALSE 16056
// sOilTower := true ;
16048: LD_ADDR_EXP 83
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// if p3 = 24 then
16056: LD_VAR 0 3
16060: PUSH
16061: LD_INT 24
16063: EQUAL
16064: IFFALSE 16074
// sShovel := true ;
16066: LD_ADDR_EXP 84
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// if p3 = 25 then
16074: LD_VAR 0 3
16078: PUSH
16079: LD_INT 25
16081: EQUAL
16082: IFFALSE 16092
// sSheik := true ;
16084: LD_ADDR_EXP 85
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// if p3 = 26 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 26
16099: EQUAL
16100: IFFALSE 16110
// sEarthquake := true ;
16102: LD_ADDR_EXP 87
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// if p3 = 27 then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_INT 27
16117: EQUAL
16118: IFFALSE 16128
// sAI := true ;
16120: LD_ADDR_EXP 88
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// if p3 = 28 then
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 28
16135: EQUAL
16136: IFFALSE 16146
// sCargo := true ;
16138: LD_ADDR_EXP 91
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// if p3 = 29 then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 29
16153: EQUAL
16154: IFFALSE 16164
// sDLaser := true ;
16156: LD_ADDR_EXP 92
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if p3 = 30 then
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 30
16171: EQUAL
16172: IFFALSE 16182
// sExchange := true ;
16174: LD_ADDR_EXP 93
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if p3 = 31 then
16182: LD_VAR 0 3
16186: PUSH
16187: LD_INT 31
16189: EQUAL
16190: IFFALSE 16200
// sFac := true ;
16192: LD_ADDR_EXP 94
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// if p3 = 32 then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 32
16207: EQUAL
16208: IFFALSE 16218
// sPower := true ;
16210: LD_ADDR_EXP 95
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// if p3 = 33 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_INT 33
16225: EQUAL
16226: IFFALSE 16236
// sRandom := true ;
16228: LD_ADDR_EXP 96
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if p3 = 34 then
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 34
16243: EQUAL
16244: IFFALSE 16254
// sShield := true ;
16246: LD_ADDR_EXP 97
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if p3 = 35 then
16254: LD_VAR 0 3
16258: PUSH
16259: LD_INT 35
16261: EQUAL
16262: IFFALSE 16272
// sTime := true ;
16264: LD_ADDR_EXP 98
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// if p3 = 36 then
16272: LD_VAR 0 3
16276: PUSH
16277: LD_INT 36
16279: EQUAL
16280: IFFALSE 16290
// sTools := true ;
16282: LD_ADDR_EXP 99
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if p3 = 101 then
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 101
16297: EQUAL
16298: IFFALSE 16308
// sSold := true ;
16300: LD_ADDR_EXP 64
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// if p3 = 102 then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 102
16315: EQUAL
16316: IFFALSE 16326
// sDiff := true ;
16318: LD_ADDR_EXP 65
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// if p3 = 103 then
16326: LD_VAR 0 3
16330: PUSH
16331: LD_INT 103
16333: EQUAL
16334: IFFALSE 16344
// sFog := true ;
16336: LD_ADDR_EXP 68
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if p3 = 104 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 104
16351: EQUAL
16352: IFFALSE 16362
// sReset := true ;
16354: LD_ADDR_EXP 69
16358: PUSH
16359: LD_INT 1
16361: ST_TO_ADDR
// if p3 = 105 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 105
16369: EQUAL
16370: IFFALSE 16380
// sSun := true ;
16372: LD_ADDR_EXP 70
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if p3 = 106 then
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 106
16387: EQUAL
16388: IFFALSE 16398
// sTiger := true ;
16390: LD_ADDR_EXP 66
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if p3 = 107 then
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 107
16405: EQUAL
16406: IFFALSE 16416
// sBomb := true ;
16408: LD_ADDR_EXP 67
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if p3 = 108 then
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 108
16423: EQUAL
16424: IFFALSE 16434
// sWound := true ;
16426: LD_ADDR_EXP 75
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// if p3 = 109 then
16434: LD_VAR 0 3
16438: PUSH
16439: LD_INT 109
16441: EQUAL
16442: IFFALSE 16452
// sBetray := true ;
16444: LD_ADDR_EXP 79
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// if p3 = 110 then
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 110
16459: EQUAL
16460: IFFALSE 16470
// sContamin := true ;
16462: LD_ADDR_EXP 80
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// if p3 = 111 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 111
16477: EQUAL
16478: IFFALSE 16488
// sOil := true ;
16480: LD_ADDR_EXP 82
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if p3 = 112 then
16488: LD_VAR 0 3
16492: PUSH
16493: LD_INT 112
16495: EQUAL
16496: IFFALSE 16506
// sStu := true ;
16498: LD_ADDR_EXP 86
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// if p3 = 113 then
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 113
16513: EQUAL
16514: IFFALSE 16524
// sBazooka := true ;
16516: LD_ADDR_EXP 89
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if p3 = 114 then
16524: LD_VAR 0 3
16528: PUSH
16529: LD_INT 114
16531: EQUAL
16532: IFFALSE 16542
// sMortar := true ;
16534: LD_ADDR_EXP 90
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if p3 = 115 then
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 115
16549: EQUAL
16550: IFFALSE 16560
// sRanger := true ;
16552: LD_ADDR_EXP 100
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if p3 = 116 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 116
16567: EQUAL
16568: IFFALSE 16578
// sComputer := true ;
16570: LD_ADDR_EXP 101
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// if p3 = 117 then
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 117
16585: EQUAL
16586: IFFALSE 16596
// s30 := true ;
16588: LD_ADDR_EXP 102
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// if p3 = 118 then
16596: LD_VAR 0 3
16600: PUSH
16601: LD_INT 118
16603: EQUAL
16604: IFFALSE 16614
// s60 := true ;
16606: LD_ADDR_EXP 103
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// end ; if p2 = 101 then
16614: LD_VAR 0 2
16618: PUSH
16619: LD_INT 101
16621: EQUAL
16622: IFFALSE 16750
// begin case p3 of 1 :
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 1
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16644
16637: POP
// hHackUnlimitedResources ; 2 :
16638: CALL 28848 0 0
16642: GO 16750
16644: LD_INT 2
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16659
16652: POP
// hHackSetLevel10 ; 3 :
16653: CALL 28981 0 0
16657: GO 16750
16659: LD_INT 3
16661: DOUBLE
16662: EQUAL
16663: IFTRUE 16667
16665: GO 16674
16667: POP
// hHackSetLevel10YourUnits ; 4 :
16668: CALL 29066 0 0
16672: GO 16750
16674: LD_INT 4
16676: DOUBLE
16677: EQUAL
16678: IFTRUE 16682
16680: GO 16689
16682: POP
// hHackInvincible ; 5 :
16683: CALL 29514 0 0
16687: GO 16750
16689: LD_INT 5
16691: DOUBLE
16692: EQUAL
16693: IFTRUE 16697
16695: GO 16704
16697: POP
// hHackInvisible ; 6 :
16698: CALL 29625 0 0
16702: GO 16750
16704: LD_INT 6
16706: DOUBLE
16707: EQUAL
16708: IFTRUE 16712
16710: GO 16719
16712: POP
// hHackChangeYourSide ; 7 :
16713: CALL 29682 0 0
16717: GO 16750
16719: LD_INT 7
16721: DOUBLE
16722: EQUAL
16723: IFTRUE 16727
16725: GO 16734
16727: POP
// hHackChangeUnitSide ; 8 :
16728: CALL 29724 0 0
16732: GO 16750
16734: LD_INT 8
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16749
16742: POP
// hHackFog ; end ;
16743: CALL 29825 0 0
16747: GO 16750
16749: POP
// end ; end ;
16750: LD_VAR 0 7
16754: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16755: GO 16757
16757: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16758: LD_STRING initStreamRollete();
16760: PPUSH
16761: CALL_OW 559
// InitStreamMode ;
16765: CALL 16777 0 0
// DefineStreamItems ( false ) ;
16769: LD_INT 0
16771: PPUSH
16772: CALL 17241 0 1
// end ;
16776: END
// function InitStreamMode ; begin
16777: LD_INT 0
16779: PPUSH
// streamModeActive := false ;
16780: LD_ADDR_EXP 47
16784: PUSH
16785: LD_INT 0
16787: ST_TO_ADDR
// normalCounter := 36 ;
16788: LD_ADDR_EXP 48
16792: PUSH
16793: LD_INT 36
16795: ST_TO_ADDR
// hardcoreCounter := 18 ;
16796: LD_ADDR_EXP 49
16800: PUSH
16801: LD_INT 18
16803: ST_TO_ADDR
// sRocket := false ;
16804: LD_ADDR_EXP 52
16808: PUSH
16809: LD_INT 0
16811: ST_TO_ADDR
// sSpeed := false ;
16812: LD_ADDR_EXP 51
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// sEngine := false ;
16820: LD_ADDR_EXP 53
16824: PUSH
16825: LD_INT 0
16827: ST_TO_ADDR
// sSpec := false ;
16828: LD_ADDR_EXP 50
16832: PUSH
16833: LD_INT 0
16835: ST_TO_ADDR
// sLevel := false ;
16836: LD_ADDR_EXP 54
16840: PUSH
16841: LD_INT 0
16843: ST_TO_ADDR
// sArmoury := false ;
16844: LD_ADDR_EXP 55
16848: PUSH
16849: LD_INT 0
16851: ST_TO_ADDR
// sRadar := false ;
16852: LD_ADDR_EXP 56
16856: PUSH
16857: LD_INT 0
16859: ST_TO_ADDR
// sBunker := false ;
16860: LD_ADDR_EXP 57
16864: PUSH
16865: LD_INT 0
16867: ST_TO_ADDR
// sHack := false ;
16868: LD_ADDR_EXP 58
16872: PUSH
16873: LD_INT 0
16875: ST_TO_ADDR
// sFire := false ;
16876: LD_ADDR_EXP 59
16880: PUSH
16881: LD_INT 0
16883: ST_TO_ADDR
// sRefresh := false ;
16884: LD_ADDR_EXP 60
16888: PUSH
16889: LD_INT 0
16891: ST_TO_ADDR
// sExp := false ;
16892: LD_ADDR_EXP 61
16896: PUSH
16897: LD_INT 0
16899: ST_TO_ADDR
// sDepot := false ;
16900: LD_ADDR_EXP 62
16904: PUSH
16905: LD_INT 0
16907: ST_TO_ADDR
// sFlag := false ;
16908: LD_ADDR_EXP 63
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
// sKamikadze := false ;
16916: LD_ADDR_EXP 71
16920: PUSH
16921: LD_INT 0
16923: ST_TO_ADDR
// sTroll := false ;
16924: LD_ADDR_EXP 72
16928: PUSH
16929: LD_INT 0
16931: ST_TO_ADDR
// sSlow := false ;
16932: LD_ADDR_EXP 73
16936: PUSH
16937: LD_INT 0
16939: ST_TO_ADDR
// sLack := false ;
16940: LD_ADDR_EXP 74
16944: PUSH
16945: LD_INT 0
16947: ST_TO_ADDR
// sTank := false ;
16948: LD_ADDR_EXP 76
16952: PUSH
16953: LD_INT 0
16955: ST_TO_ADDR
// sRemote := false ;
16956: LD_ADDR_EXP 77
16960: PUSH
16961: LD_INT 0
16963: ST_TO_ADDR
// sPowell := false ;
16964: LD_ADDR_EXP 78
16968: PUSH
16969: LD_INT 0
16971: ST_TO_ADDR
// sTeleport := false ;
16972: LD_ADDR_EXP 81
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// sOilTower := false ;
16980: LD_ADDR_EXP 83
16984: PUSH
16985: LD_INT 0
16987: ST_TO_ADDR
// sShovel := false ;
16988: LD_ADDR_EXP 84
16992: PUSH
16993: LD_INT 0
16995: ST_TO_ADDR
// sSheik := false ;
16996: LD_ADDR_EXP 85
17000: PUSH
17001: LD_INT 0
17003: ST_TO_ADDR
// sEarthquake := false ;
17004: LD_ADDR_EXP 87
17008: PUSH
17009: LD_INT 0
17011: ST_TO_ADDR
// sAI := false ;
17012: LD_ADDR_EXP 88
17016: PUSH
17017: LD_INT 0
17019: ST_TO_ADDR
// sCargo := false ;
17020: LD_ADDR_EXP 91
17024: PUSH
17025: LD_INT 0
17027: ST_TO_ADDR
// sDLaser := false ;
17028: LD_ADDR_EXP 92
17032: PUSH
17033: LD_INT 0
17035: ST_TO_ADDR
// sExchange := false ;
17036: LD_ADDR_EXP 93
17040: PUSH
17041: LD_INT 0
17043: ST_TO_ADDR
// sFac := false ;
17044: LD_ADDR_EXP 94
17048: PUSH
17049: LD_INT 0
17051: ST_TO_ADDR
// sPower := false ;
17052: LD_ADDR_EXP 95
17056: PUSH
17057: LD_INT 0
17059: ST_TO_ADDR
// sRandom := false ;
17060: LD_ADDR_EXP 96
17064: PUSH
17065: LD_INT 0
17067: ST_TO_ADDR
// sShield := false ;
17068: LD_ADDR_EXP 97
17072: PUSH
17073: LD_INT 0
17075: ST_TO_ADDR
// sTime := false ;
17076: LD_ADDR_EXP 98
17080: PUSH
17081: LD_INT 0
17083: ST_TO_ADDR
// sTools := false ;
17084: LD_ADDR_EXP 99
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// sSold := false ;
17092: LD_ADDR_EXP 64
17096: PUSH
17097: LD_INT 0
17099: ST_TO_ADDR
// sDiff := false ;
17100: LD_ADDR_EXP 65
17104: PUSH
17105: LD_INT 0
17107: ST_TO_ADDR
// sFog := false ;
17108: LD_ADDR_EXP 68
17112: PUSH
17113: LD_INT 0
17115: ST_TO_ADDR
// sReset := false ;
17116: LD_ADDR_EXP 69
17120: PUSH
17121: LD_INT 0
17123: ST_TO_ADDR
// sSun := false ;
17124: LD_ADDR_EXP 70
17128: PUSH
17129: LD_INT 0
17131: ST_TO_ADDR
// sTiger := false ;
17132: LD_ADDR_EXP 66
17136: PUSH
17137: LD_INT 0
17139: ST_TO_ADDR
// sBomb := false ;
17140: LD_ADDR_EXP 67
17144: PUSH
17145: LD_INT 0
17147: ST_TO_ADDR
// sWound := false ;
17148: LD_ADDR_EXP 75
17152: PUSH
17153: LD_INT 0
17155: ST_TO_ADDR
// sBetray := false ;
17156: LD_ADDR_EXP 79
17160: PUSH
17161: LD_INT 0
17163: ST_TO_ADDR
// sContamin := false ;
17164: LD_ADDR_EXP 80
17168: PUSH
17169: LD_INT 0
17171: ST_TO_ADDR
// sOil := false ;
17172: LD_ADDR_EXP 82
17176: PUSH
17177: LD_INT 0
17179: ST_TO_ADDR
// sStu := false ;
17180: LD_ADDR_EXP 86
17184: PUSH
17185: LD_INT 0
17187: ST_TO_ADDR
// sBazooka := false ;
17188: LD_ADDR_EXP 89
17192: PUSH
17193: LD_INT 0
17195: ST_TO_ADDR
// sMortar := false ;
17196: LD_ADDR_EXP 90
17200: PUSH
17201: LD_INT 0
17203: ST_TO_ADDR
// sRanger := false ;
17204: LD_ADDR_EXP 100
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// sComputer := false ;
17212: LD_ADDR_EXP 101
17216: PUSH
17217: LD_INT 0
17219: ST_TO_ADDR
// s30 := false ;
17220: LD_ADDR_EXP 102
17224: PUSH
17225: LD_INT 0
17227: ST_TO_ADDR
// s60 := false ;
17228: LD_ADDR_EXP 103
17232: PUSH
17233: LD_INT 0
17235: ST_TO_ADDR
// end ;
17236: LD_VAR 0 1
17240: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17241: LD_INT 0
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
// result := [ ] ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: EMPTY
17256: ST_TO_ADDR
// if campaign_id = 1 then
17257: LD_OWVAR 69
17261: PUSH
17262: LD_INT 1
17264: EQUAL
17265: IFFALSE 20431
// begin case mission_number of 1 :
17267: LD_OWVAR 70
17271: PUSH
17272: LD_INT 1
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17356
17280: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 4
17291: PUSH
17292: LD_INT 11
17294: PUSH
17295: LD_INT 12
17297: PUSH
17298: LD_INT 15
17300: PUSH
17301: LD_INT 16
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_INT 23
17309: PUSH
17310: LD_INT 26
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 101
17326: PUSH
17327: LD_INT 102
17329: PUSH
17330: LD_INT 106
17332: PUSH
17333: LD_INT 116
17335: PUSH
17336: LD_INT 117
17338: PUSH
17339: LD_INT 118
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: ST_TO_ADDR
17354: GO 20429
17356: LD_INT 2
17358: DOUBLE
17359: EQUAL
17360: IFTRUE 17364
17362: GO 17448
17364: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: LD_INT 4
17375: PUSH
17376: LD_INT 11
17378: PUSH
17379: LD_INT 12
17381: PUSH
17382: LD_INT 15
17384: PUSH
17385: LD_INT 16
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_INT 23
17393: PUSH
17394: LD_INT 26
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 101
17410: PUSH
17411: LD_INT 102
17413: PUSH
17414: LD_INT 105
17416: PUSH
17417: LD_INT 106
17419: PUSH
17420: LD_INT 108
17422: PUSH
17423: LD_INT 116
17425: PUSH
17426: LD_INT 117
17428: PUSH
17429: LD_INT 118
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: ST_TO_ADDR
17446: GO 20429
17448: LD_INT 3
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17544
17456: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17457: LD_ADDR_VAR 0 2
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 4
17467: PUSH
17468: LD_INT 5
17470: PUSH
17471: LD_INT 11
17473: PUSH
17474: LD_INT 12
17476: PUSH
17477: LD_INT 15
17479: PUSH
17480: LD_INT 16
17482: PUSH
17483: LD_INT 22
17485: PUSH
17486: LD_INT 26
17488: PUSH
17489: LD_INT 36
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 101
17506: PUSH
17507: LD_INT 102
17509: PUSH
17510: LD_INT 105
17512: PUSH
17513: LD_INT 106
17515: PUSH
17516: LD_INT 108
17518: PUSH
17519: LD_INT 116
17521: PUSH
17522: LD_INT 117
17524: PUSH
17525: LD_INT 118
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: ST_TO_ADDR
17542: GO 20429
17544: LD_INT 4
17546: DOUBLE
17547: EQUAL
17548: IFTRUE 17552
17550: GO 17648
17552: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 4
17563: PUSH
17564: LD_INT 5
17566: PUSH
17567: LD_INT 8
17569: PUSH
17570: LD_INT 11
17572: PUSH
17573: LD_INT 12
17575: PUSH
17576: LD_INT 15
17578: PUSH
17579: LD_INT 16
17581: PUSH
17582: LD_INT 22
17584: PUSH
17585: LD_INT 23
17587: PUSH
17588: LD_INT 26
17590: PUSH
17591: LD_INT 36
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 101
17610: PUSH
17611: LD_INT 102
17613: PUSH
17614: LD_INT 105
17616: PUSH
17617: LD_INT 106
17619: PUSH
17620: LD_INT 108
17622: PUSH
17623: LD_INT 116
17625: PUSH
17626: LD_INT 117
17628: PUSH
17629: LD_INT 118
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: ST_TO_ADDR
17646: GO 20429
17648: LD_INT 5
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17768
17656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: LD_INT 4
17667: PUSH
17668: LD_INT 5
17670: PUSH
17671: LD_INT 6
17673: PUSH
17674: LD_INT 8
17676: PUSH
17677: LD_INT 11
17679: PUSH
17680: LD_INT 12
17682: PUSH
17683: LD_INT 15
17685: PUSH
17686: LD_INT 16
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_INT 23
17694: PUSH
17695: LD_INT 25
17697: PUSH
17698: LD_INT 26
17700: PUSH
17701: LD_INT 36
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 101
17722: PUSH
17723: LD_INT 102
17725: PUSH
17726: LD_INT 105
17728: PUSH
17729: LD_INT 106
17731: PUSH
17732: LD_INT 108
17734: PUSH
17735: LD_INT 109
17737: PUSH
17738: LD_INT 112
17740: PUSH
17741: LD_INT 116
17743: PUSH
17744: LD_INT 117
17746: PUSH
17747: LD_INT 118
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: ST_TO_ADDR
17766: GO 20429
17768: LD_INT 6
17770: DOUBLE
17771: EQUAL
17772: IFTRUE 17776
17774: GO 17908
17776: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17777: LD_ADDR_VAR 0 2
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: LD_INT 4
17787: PUSH
17788: LD_INT 5
17790: PUSH
17791: LD_INT 6
17793: PUSH
17794: LD_INT 8
17796: PUSH
17797: LD_INT 11
17799: PUSH
17800: LD_INT 12
17802: PUSH
17803: LD_INT 15
17805: PUSH
17806: LD_INT 16
17808: PUSH
17809: LD_INT 20
17811: PUSH
17812: LD_INT 21
17814: PUSH
17815: LD_INT 22
17817: PUSH
17818: LD_INT 23
17820: PUSH
17821: LD_INT 25
17823: PUSH
17824: LD_INT 26
17826: PUSH
17827: LD_INT 30
17829: PUSH
17830: LD_INT 31
17832: PUSH
17833: LD_INT 32
17835: PUSH
17836: LD_INT 36
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 101
17862: PUSH
17863: LD_INT 102
17865: PUSH
17866: LD_INT 105
17868: PUSH
17869: LD_INT 106
17871: PUSH
17872: LD_INT 108
17874: PUSH
17875: LD_INT 109
17877: PUSH
17878: LD_INT 112
17880: PUSH
17881: LD_INT 116
17883: PUSH
17884: LD_INT 117
17886: PUSH
17887: LD_INT 118
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: ST_TO_ADDR
17906: GO 20429
17908: LD_INT 7
17910: DOUBLE
17911: EQUAL
17912: IFTRUE 17916
17914: GO 18028
17916: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17917: LD_ADDR_VAR 0 2
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: LD_INT 5
17930: PUSH
17931: LD_INT 7
17933: PUSH
17934: LD_INT 11
17936: PUSH
17937: LD_INT 12
17939: PUSH
17940: LD_INT 15
17942: PUSH
17943: LD_INT 16
17945: PUSH
17946: LD_INT 20
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_INT 23
17957: PUSH
17958: LD_INT 25
17960: PUSH
17961: LD_INT 26
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 101
17982: PUSH
17983: LD_INT 102
17985: PUSH
17986: LD_INT 103
17988: PUSH
17989: LD_INT 105
17991: PUSH
17992: LD_INT 106
17994: PUSH
17995: LD_INT 108
17997: PUSH
17998: LD_INT 112
18000: PUSH
18001: LD_INT 116
18003: PUSH
18004: LD_INT 117
18006: PUSH
18007: LD_INT 118
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: ST_TO_ADDR
18026: GO 20429
18028: LD_INT 8
18030: DOUBLE
18031: EQUAL
18032: IFTRUE 18036
18034: GO 18176
18036: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18037: LD_ADDR_VAR 0 2
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: LD_INT 4
18047: PUSH
18048: LD_INT 5
18050: PUSH
18051: LD_INT 6
18053: PUSH
18054: LD_INT 7
18056: PUSH
18057: LD_INT 8
18059: PUSH
18060: LD_INT 11
18062: PUSH
18063: LD_INT 12
18065: PUSH
18066: LD_INT 15
18068: PUSH
18069: LD_INT 16
18071: PUSH
18072: LD_INT 20
18074: PUSH
18075: LD_INT 21
18077: PUSH
18078: LD_INT 22
18080: PUSH
18081: LD_INT 23
18083: PUSH
18084: LD_INT 25
18086: PUSH
18087: LD_INT 26
18089: PUSH
18090: LD_INT 30
18092: PUSH
18093: LD_INT 31
18095: PUSH
18096: LD_INT 32
18098: PUSH
18099: LD_INT 36
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 101
18126: PUSH
18127: LD_INT 102
18129: PUSH
18130: LD_INT 103
18132: PUSH
18133: LD_INT 105
18135: PUSH
18136: LD_INT 106
18138: PUSH
18139: LD_INT 108
18141: PUSH
18142: LD_INT 109
18144: PUSH
18145: LD_INT 112
18147: PUSH
18148: LD_INT 116
18150: PUSH
18151: LD_INT 117
18153: PUSH
18154: LD_INT 118
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: ST_TO_ADDR
18174: GO 20429
18176: LD_INT 9
18178: DOUBLE
18179: EQUAL
18180: IFTRUE 18184
18182: GO 18332
18184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18185: LD_ADDR_VAR 0 2
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: LD_INT 4
18195: PUSH
18196: LD_INT 5
18198: PUSH
18199: LD_INT 6
18201: PUSH
18202: LD_INT 7
18204: PUSH
18205: LD_INT 8
18207: PUSH
18208: LD_INT 11
18210: PUSH
18211: LD_INT 12
18213: PUSH
18214: LD_INT 15
18216: PUSH
18217: LD_INT 16
18219: PUSH
18220: LD_INT 20
18222: PUSH
18223: LD_INT 21
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_INT 23
18231: PUSH
18232: LD_INT 25
18234: PUSH
18235: LD_INT 26
18237: PUSH
18238: LD_INT 28
18240: PUSH
18241: LD_INT 30
18243: PUSH
18244: LD_INT 31
18246: PUSH
18247: LD_INT 32
18249: PUSH
18250: LD_INT 36
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 101
18278: PUSH
18279: LD_INT 102
18281: PUSH
18282: LD_INT 103
18284: PUSH
18285: LD_INT 105
18287: PUSH
18288: LD_INT 106
18290: PUSH
18291: LD_INT 108
18293: PUSH
18294: LD_INT 109
18296: PUSH
18297: LD_INT 112
18299: PUSH
18300: LD_INT 114
18302: PUSH
18303: LD_INT 116
18305: PUSH
18306: LD_INT 117
18308: PUSH
18309: LD_INT 118
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: ST_TO_ADDR
18330: GO 20429
18332: LD_INT 10
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18536
18340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18341: LD_ADDR_VAR 0 2
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: LD_INT 4
18351: PUSH
18352: LD_INT 5
18354: PUSH
18355: LD_INT 6
18357: PUSH
18358: LD_INT 7
18360: PUSH
18361: LD_INT 8
18363: PUSH
18364: LD_INT 9
18366: PUSH
18367: LD_INT 10
18369: PUSH
18370: LD_INT 11
18372: PUSH
18373: LD_INT 12
18375: PUSH
18376: LD_INT 13
18378: PUSH
18379: LD_INT 14
18381: PUSH
18382: LD_INT 15
18384: PUSH
18385: LD_INT 16
18387: PUSH
18388: LD_INT 17
18390: PUSH
18391: LD_INT 18
18393: PUSH
18394: LD_INT 19
18396: PUSH
18397: LD_INT 20
18399: PUSH
18400: LD_INT 21
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_INT 23
18408: PUSH
18409: LD_INT 24
18411: PUSH
18412: LD_INT 25
18414: PUSH
18415: LD_INT 26
18417: PUSH
18418: LD_INT 28
18420: PUSH
18421: LD_INT 30
18423: PUSH
18424: LD_INT 31
18426: PUSH
18427: LD_INT 32
18429: PUSH
18430: LD_INT 36
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 101
18466: PUSH
18467: LD_INT 102
18469: PUSH
18470: LD_INT 103
18472: PUSH
18473: LD_INT 104
18475: PUSH
18476: LD_INT 105
18478: PUSH
18479: LD_INT 106
18481: PUSH
18482: LD_INT 107
18484: PUSH
18485: LD_INT 108
18487: PUSH
18488: LD_INT 109
18490: PUSH
18491: LD_INT 110
18493: PUSH
18494: LD_INT 111
18496: PUSH
18497: LD_INT 112
18499: PUSH
18500: LD_INT 114
18502: PUSH
18503: LD_INT 116
18505: PUSH
18506: LD_INT 117
18508: PUSH
18509: LD_INT 118
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: ST_TO_ADDR
18534: GO 20429
18536: LD_INT 11
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18748
18544: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: LD_INT 4
18558: PUSH
18559: LD_INT 5
18561: PUSH
18562: LD_INT 6
18564: PUSH
18565: LD_INT 7
18567: PUSH
18568: LD_INT 8
18570: PUSH
18571: LD_INT 9
18573: PUSH
18574: LD_INT 10
18576: PUSH
18577: LD_INT 11
18579: PUSH
18580: LD_INT 12
18582: PUSH
18583: LD_INT 13
18585: PUSH
18586: LD_INT 14
18588: PUSH
18589: LD_INT 15
18591: PUSH
18592: LD_INT 16
18594: PUSH
18595: LD_INT 17
18597: PUSH
18598: LD_INT 18
18600: PUSH
18601: LD_INT 19
18603: PUSH
18604: LD_INT 20
18606: PUSH
18607: LD_INT 21
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_INT 23
18615: PUSH
18616: LD_INT 24
18618: PUSH
18619: LD_INT 25
18621: PUSH
18622: LD_INT 26
18624: PUSH
18625: LD_INT 28
18627: PUSH
18628: LD_INT 30
18630: PUSH
18631: LD_INT 31
18633: PUSH
18634: LD_INT 32
18636: PUSH
18637: LD_INT 34
18639: PUSH
18640: LD_INT 36
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 101
18678: PUSH
18679: LD_INT 102
18681: PUSH
18682: LD_INT 103
18684: PUSH
18685: LD_INT 104
18687: PUSH
18688: LD_INT 105
18690: PUSH
18691: LD_INT 106
18693: PUSH
18694: LD_INT 107
18696: PUSH
18697: LD_INT 108
18699: PUSH
18700: LD_INT 109
18702: PUSH
18703: LD_INT 110
18705: PUSH
18706: LD_INT 111
18708: PUSH
18709: LD_INT 112
18711: PUSH
18712: LD_INT 114
18714: PUSH
18715: LD_INT 116
18717: PUSH
18718: LD_INT 117
18720: PUSH
18721: LD_INT 118
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: ST_TO_ADDR
18746: GO 20429
18748: LD_INT 12
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18976
18756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18757: LD_ADDR_VAR 0 2
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 3
18770: PUSH
18771: LD_INT 4
18773: PUSH
18774: LD_INT 5
18776: PUSH
18777: LD_INT 6
18779: PUSH
18780: LD_INT 7
18782: PUSH
18783: LD_INT 8
18785: PUSH
18786: LD_INT 9
18788: PUSH
18789: LD_INT 10
18791: PUSH
18792: LD_INT 11
18794: PUSH
18795: LD_INT 12
18797: PUSH
18798: LD_INT 13
18800: PUSH
18801: LD_INT 14
18803: PUSH
18804: LD_INT 15
18806: PUSH
18807: LD_INT 16
18809: PUSH
18810: LD_INT 17
18812: PUSH
18813: LD_INT 18
18815: PUSH
18816: LD_INT 19
18818: PUSH
18819: LD_INT 20
18821: PUSH
18822: LD_INT 21
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_INT 23
18830: PUSH
18831: LD_INT 24
18833: PUSH
18834: LD_INT 25
18836: PUSH
18837: LD_INT 26
18839: PUSH
18840: LD_INT 27
18842: PUSH
18843: LD_INT 28
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 31
18851: PUSH
18852: LD_INT 32
18854: PUSH
18855: LD_INT 33
18857: PUSH
18858: LD_INT 34
18860: PUSH
18861: LD_INT 36
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 101
18902: PUSH
18903: LD_INT 102
18905: PUSH
18906: LD_INT 103
18908: PUSH
18909: LD_INT 104
18911: PUSH
18912: LD_INT 105
18914: PUSH
18915: LD_INT 106
18917: PUSH
18918: LD_INT 107
18920: PUSH
18921: LD_INT 108
18923: PUSH
18924: LD_INT 109
18926: PUSH
18927: LD_INT 110
18929: PUSH
18930: LD_INT 111
18932: PUSH
18933: LD_INT 112
18935: PUSH
18936: LD_INT 113
18938: PUSH
18939: LD_INT 114
18941: PUSH
18942: LD_INT 116
18944: PUSH
18945: LD_INT 117
18947: PUSH
18948: LD_INT 118
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: ST_TO_ADDR
18974: GO 20429
18976: LD_INT 13
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 19192
18984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18985: LD_ADDR_VAR 0 2
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 4
19001: PUSH
19002: LD_INT 5
19004: PUSH
19005: LD_INT 8
19007: PUSH
19008: LD_INT 9
19010: PUSH
19011: LD_INT 10
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: LD_INT 12
19019: PUSH
19020: LD_INT 14
19022: PUSH
19023: LD_INT 15
19025: PUSH
19026: LD_INT 16
19028: PUSH
19029: LD_INT 17
19031: PUSH
19032: LD_INT 18
19034: PUSH
19035: LD_INT 19
19037: PUSH
19038: LD_INT 20
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 22
19046: PUSH
19047: LD_INT 23
19049: PUSH
19050: LD_INT 24
19052: PUSH
19053: LD_INT 25
19055: PUSH
19056: LD_INT 26
19058: PUSH
19059: LD_INT 27
19061: PUSH
19062: LD_INT 28
19064: PUSH
19065: LD_INT 30
19067: PUSH
19068: LD_INT 31
19070: PUSH
19071: LD_INT 32
19073: PUSH
19074: LD_INT 33
19076: PUSH
19077: LD_INT 34
19079: PUSH
19080: LD_INT 36
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 101
19118: PUSH
19119: LD_INT 102
19121: PUSH
19122: LD_INT 103
19124: PUSH
19125: LD_INT 104
19127: PUSH
19128: LD_INT 105
19130: PUSH
19131: LD_INT 106
19133: PUSH
19134: LD_INT 107
19136: PUSH
19137: LD_INT 108
19139: PUSH
19140: LD_INT 109
19142: PUSH
19143: LD_INT 110
19145: PUSH
19146: LD_INT 111
19148: PUSH
19149: LD_INT 112
19151: PUSH
19152: LD_INT 113
19154: PUSH
19155: LD_INT 114
19157: PUSH
19158: LD_INT 116
19160: PUSH
19161: LD_INT 117
19163: PUSH
19164: LD_INT 118
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: ST_TO_ADDR
19190: GO 20429
19192: LD_INT 14
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19424
19200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: LD_INT 4
19217: PUSH
19218: LD_INT 5
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: LD_INT 9
19232: PUSH
19233: LD_INT 10
19235: PUSH
19236: LD_INT 11
19238: PUSH
19239: LD_INT 12
19241: PUSH
19242: LD_INT 13
19244: PUSH
19245: LD_INT 14
19247: PUSH
19248: LD_INT 15
19250: PUSH
19251: LD_INT 16
19253: PUSH
19254: LD_INT 17
19256: PUSH
19257: LD_INT 18
19259: PUSH
19260: LD_INT 19
19262: PUSH
19263: LD_INT 20
19265: PUSH
19266: LD_INT 21
19268: PUSH
19269: LD_INT 22
19271: PUSH
19272: LD_INT 23
19274: PUSH
19275: LD_INT 24
19277: PUSH
19278: LD_INT 25
19280: PUSH
19281: LD_INT 26
19283: PUSH
19284: LD_INT 27
19286: PUSH
19287: LD_INT 28
19289: PUSH
19290: LD_INT 29
19292: PUSH
19293: LD_INT 30
19295: PUSH
19296: LD_INT 31
19298: PUSH
19299: LD_INT 32
19301: PUSH
19302: LD_INT 33
19304: PUSH
19305: LD_INT 34
19307: PUSH
19308: LD_INT 36
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 101
19350: PUSH
19351: LD_INT 102
19353: PUSH
19354: LD_INT 103
19356: PUSH
19357: LD_INT 104
19359: PUSH
19360: LD_INT 105
19362: PUSH
19363: LD_INT 106
19365: PUSH
19366: LD_INT 107
19368: PUSH
19369: LD_INT 108
19371: PUSH
19372: LD_INT 109
19374: PUSH
19375: LD_INT 110
19377: PUSH
19378: LD_INT 111
19380: PUSH
19381: LD_INT 112
19383: PUSH
19384: LD_INT 113
19386: PUSH
19387: LD_INT 114
19389: PUSH
19390: LD_INT 116
19392: PUSH
19393: LD_INT 117
19395: PUSH
19396: LD_INT 118
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: ST_TO_ADDR
19422: GO 20429
19424: LD_INT 15
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19656
19432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19433: LD_ADDR_VAR 0 2
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: LD_INT 3
19446: PUSH
19447: LD_INT 4
19449: PUSH
19450: LD_INT 5
19452: PUSH
19453: LD_INT 6
19455: PUSH
19456: LD_INT 7
19458: PUSH
19459: LD_INT 8
19461: PUSH
19462: LD_INT 9
19464: PUSH
19465: LD_INT 10
19467: PUSH
19468: LD_INT 11
19470: PUSH
19471: LD_INT 12
19473: PUSH
19474: LD_INT 13
19476: PUSH
19477: LD_INT 14
19479: PUSH
19480: LD_INT 15
19482: PUSH
19483: LD_INT 16
19485: PUSH
19486: LD_INT 17
19488: PUSH
19489: LD_INT 18
19491: PUSH
19492: LD_INT 19
19494: PUSH
19495: LD_INT 20
19497: PUSH
19498: LD_INT 21
19500: PUSH
19501: LD_INT 22
19503: PUSH
19504: LD_INT 23
19506: PUSH
19507: LD_INT 24
19509: PUSH
19510: LD_INT 25
19512: PUSH
19513: LD_INT 26
19515: PUSH
19516: LD_INT 27
19518: PUSH
19519: LD_INT 28
19521: PUSH
19522: LD_INT 29
19524: PUSH
19525: LD_INT 30
19527: PUSH
19528: LD_INT 31
19530: PUSH
19531: LD_INT 32
19533: PUSH
19534: LD_INT 33
19536: PUSH
19537: LD_INT 34
19539: PUSH
19540: LD_INT 36
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 101
19582: PUSH
19583: LD_INT 102
19585: PUSH
19586: LD_INT 103
19588: PUSH
19589: LD_INT 104
19591: PUSH
19592: LD_INT 105
19594: PUSH
19595: LD_INT 106
19597: PUSH
19598: LD_INT 107
19600: PUSH
19601: LD_INT 108
19603: PUSH
19604: LD_INT 109
19606: PUSH
19607: LD_INT 110
19609: PUSH
19610: LD_INT 111
19612: PUSH
19613: LD_INT 112
19615: PUSH
19616: LD_INT 113
19618: PUSH
19619: LD_INT 114
19621: PUSH
19622: LD_INT 116
19624: PUSH
19625: LD_INT 117
19627: PUSH
19628: LD_INT 118
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: ST_TO_ADDR
19654: GO 20429
19656: LD_INT 16
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19800
19664: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19665: LD_ADDR_VAR 0 2
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: LD_INT 4
19675: PUSH
19676: LD_INT 5
19678: PUSH
19679: LD_INT 7
19681: PUSH
19682: LD_INT 11
19684: PUSH
19685: LD_INT 12
19687: PUSH
19688: LD_INT 15
19690: PUSH
19691: LD_INT 16
19693: PUSH
19694: LD_INT 20
19696: PUSH
19697: LD_INT 21
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 25
19708: PUSH
19709: LD_INT 26
19711: PUSH
19712: LD_INT 30
19714: PUSH
19715: LD_INT 31
19717: PUSH
19718: LD_INT 32
19720: PUSH
19721: LD_INT 33
19723: PUSH
19724: LD_INT 34
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 101
19750: PUSH
19751: LD_INT 102
19753: PUSH
19754: LD_INT 103
19756: PUSH
19757: LD_INT 106
19759: PUSH
19760: LD_INT 108
19762: PUSH
19763: LD_INT 112
19765: PUSH
19766: LD_INT 113
19768: PUSH
19769: LD_INT 114
19771: PUSH
19772: LD_INT 116
19774: PUSH
19775: LD_INT 117
19777: PUSH
19778: LD_INT 118
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: ST_TO_ADDR
19798: GO 20429
19800: LD_INT 17
19802: DOUBLE
19803: EQUAL
19804: IFTRUE 19808
19806: GO 20032
19808: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: LD_INT 4
19825: PUSH
19826: LD_INT 5
19828: PUSH
19829: LD_INT 6
19831: PUSH
19832: LD_INT 7
19834: PUSH
19835: LD_INT 8
19837: PUSH
19838: LD_INT 9
19840: PUSH
19841: LD_INT 10
19843: PUSH
19844: LD_INT 11
19846: PUSH
19847: LD_INT 12
19849: PUSH
19850: LD_INT 13
19852: PUSH
19853: LD_INT 14
19855: PUSH
19856: LD_INT 15
19858: PUSH
19859: LD_INT 16
19861: PUSH
19862: LD_INT 17
19864: PUSH
19865: LD_INT 18
19867: PUSH
19868: LD_INT 19
19870: PUSH
19871: LD_INT 20
19873: PUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 22
19879: PUSH
19880: LD_INT 23
19882: PUSH
19883: LD_INT 24
19885: PUSH
19886: LD_INT 25
19888: PUSH
19889: LD_INT 26
19891: PUSH
19892: LD_INT 27
19894: PUSH
19895: LD_INT 28
19897: PUSH
19898: LD_INT 29
19900: PUSH
19901: LD_INT 30
19903: PUSH
19904: LD_INT 31
19906: PUSH
19907: LD_INT 32
19909: PUSH
19910: LD_INT 33
19912: PUSH
19913: LD_INT 34
19915: PUSH
19916: LD_INT 36
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 101
19958: PUSH
19959: LD_INT 102
19961: PUSH
19962: LD_INT 103
19964: PUSH
19965: LD_INT 104
19967: PUSH
19968: LD_INT 105
19970: PUSH
19971: LD_INT 106
19973: PUSH
19974: LD_INT 107
19976: PUSH
19977: LD_INT 108
19979: PUSH
19980: LD_INT 109
19982: PUSH
19983: LD_INT 110
19985: PUSH
19986: LD_INT 111
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 113
19994: PUSH
19995: LD_INT 114
19997: PUSH
19998: LD_INT 116
20000: PUSH
20001: LD_INT 117
20003: PUSH
20004: LD_INT 118
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: ST_TO_ADDR
20030: GO 20429
20032: LD_INT 18
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20188
20040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20041: LD_ADDR_VAR 0 2
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: LD_INT 7
20057: PUSH
20058: LD_INT 11
20060: PUSH
20061: LD_INT 12
20063: PUSH
20064: LD_INT 15
20066: PUSH
20067: LD_INT 16
20069: PUSH
20070: LD_INT 20
20072: PUSH
20073: LD_INT 21
20075: PUSH
20076: LD_INT 22
20078: PUSH
20079: LD_INT 23
20081: PUSH
20082: LD_INT 25
20084: PUSH
20085: LD_INT 26
20087: PUSH
20088: LD_INT 30
20090: PUSH
20091: LD_INT 31
20093: PUSH
20094: LD_INT 32
20096: PUSH
20097: LD_INT 33
20099: PUSH
20100: LD_INT 34
20102: PUSH
20103: LD_INT 35
20105: PUSH
20106: LD_INT 36
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 101
20134: PUSH
20135: LD_INT 102
20137: PUSH
20138: LD_INT 103
20140: PUSH
20141: LD_INT 106
20143: PUSH
20144: LD_INT 108
20146: PUSH
20147: LD_INT 112
20149: PUSH
20150: LD_INT 113
20152: PUSH
20153: LD_INT 114
20155: PUSH
20156: LD_INT 115
20158: PUSH
20159: LD_INT 116
20161: PUSH
20162: LD_INT 117
20164: PUSH
20165: LD_INT 118
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: ST_TO_ADDR
20186: GO 20429
20188: LD_INT 19
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20428
20196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20197: LD_ADDR_VAR 0 2
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: LD_INT 3
20210: PUSH
20211: LD_INT 4
20213: PUSH
20214: LD_INT 5
20216: PUSH
20217: LD_INT 6
20219: PUSH
20220: LD_INT 7
20222: PUSH
20223: LD_INT 8
20225: PUSH
20226: LD_INT 9
20228: PUSH
20229: LD_INT 10
20231: PUSH
20232: LD_INT 11
20234: PUSH
20235: LD_INT 12
20237: PUSH
20238: LD_INT 13
20240: PUSH
20241: LD_INT 14
20243: PUSH
20244: LD_INT 15
20246: PUSH
20247: LD_INT 16
20249: PUSH
20250: LD_INT 17
20252: PUSH
20253: LD_INT 18
20255: PUSH
20256: LD_INT 19
20258: PUSH
20259: LD_INT 20
20261: PUSH
20262: LD_INT 21
20264: PUSH
20265: LD_INT 22
20267: PUSH
20268: LD_INT 23
20270: PUSH
20271: LD_INT 24
20273: PUSH
20274: LD_INT 25
20276: PUSH
20277: LD_INT 26
20279: PUSH
20280: LD_INT 27
20282: PUSH
20283: LD_INT 28
20285: PUSH
20286: LD_INT 29
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 31
20294: PUSH
20295: LD_INT 32
20297: PUSH
20298: LD_INT 33
20300: PUSH
20301: LD_INT 34
20303: PUSH
20304: LD_INT 35
20306: PUSH
20307: LD_INT 36
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 101
20350: PUSH
20351: LD_INT 102
20353: PUSH
20354: LD_INT 103
20356: PUSH
20357: LD_INT 104
20359: PUSH
20360: LD_INT 105
20362: PUSH
20363: LD_INT 106
20365: PUSH
20366: LD_INT 107
20368: PUSH
20369: LD_INT 108
20371: PUSH
20372: LD_INT 109
20374: PUSH
20375: LD_INT 110
20377: PUSH
20378: LD_INT 111
20380: PUSH
20381: LD_INT 112
20383: PUSH
20384: LD_INT 113
20386: PUSH
20387: LD_INT 114
20389: PUSH
20390: LD_INT 115
20392: PUSH
20393: LD_INT 116
20395: PUSH
20396: LD_INT 117
20398: PUSH
20399: LD_INT 118
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: ST_TO_ADDR
20426: GO 20429
20428: POP
// end else
20429: GO 20660
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20431: LD_ADDR_VAR 0 2
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 4
20447: PUSH
20448: LD_INT 5
20450: PUSH
20451: LD_INT 6
20453: PUSH
20454: LD_INT 7
20456: PUSH
20457: LD_INT 8
20459: PUSH
20460: LD_INT 9
20462: PUSH
20463: LD_INT 10
20465: PUSH
20466: LD_INT 11
20468: PUSH
20469: LD_INT 12
20471: PUSH
20472: LD_INT 13
20474: PUSH
20475: LD_INT 14
20477: PUSH
20478: LD_INT 15
20480: PUSH
20481: LD_INT 16
20483: PUSH
20484: LD_INT 17
20486: PUSH
20487: LD_INT 18
20489: PUSH
20490: LD_INT 19
20492: PUSH
20493: LD_INT 20
20495: PUSH
20496: LD_INT 21
20498: PUSH
20499: LD_INT 22
20501: PUSH
20502: LD_INT 23
20504: PUSH
20505: LD_INT 24
20507: PUSH
20508: LD_INT 25
20510: PUSH
20511: LD_INT 26
20513: PUSH
20514: LD_INT 27
20516: PUSH
20517: LD_INT 28
20519: PUSH
20520: LD_INT 29
20522: PUSH
20523: LD_INT 30
20525: PUSH
20526: LD_INT 31
20528: PUSH
20529: LD_INT 32
20531: PUSH
20532: LD_INT 33
20534: PUSH
20535: LD_INT 34
20537: PUSH
20538: LD_INT 35
20540: PUSH
20541: LD_INT 36
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 101
20584: PUSH
20585: LD_INT 102
20587: PUSH
20588: LD_INT 103
20590: PUSH
20591: LD_INT 104
20593: PUSH
20594: LD_INT 105
20596: PUSH
20597: LD_INT 106
20599: PUSH
20600: LD_INT 107
20602: PUSH
20603: LD_INT 108
20605: PUSH
20606: LD_INT 109
20608: PUSH
20609: LD_INT 110
20611: PUSH
20612: LD_INT 111
20614: PUSH
20615: LD_INT 112
20617: PUSH
20618: LD_INT 113
20620: PUSH
20621: LD_INT 114
20623: PUSH
20624: LD_INT 115
20626: PUSH
20627: LD_INT 116
20629: PUSH
20630: LD_INT 117
20632: PUSH
20633: LD_INT 118
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: ST_TO_ADDR
// if result then
20660: LD_VAR 0 2
20664: IFFALSE 21450
// begin normal :=  ;
20666: LD_ADDR_VAR 0 5
20670: PUSH
20671: LD_STRING 
20673: ST_TO_ADDR
// hardcore :=  ;
20674: LD_ADDR_VAR 0 6
20678: PUSH
20679: LD_STRING 
20681: ST_TO_ADDR
// active :=  ;
20682: LD_ADDR_VAR 0 7
20686: PUSH
20687: LD_STRING 
20689: ST_TO_ADDR
// for i = 1 to normalCounter do
20690: LD_ADDR_VAR 0 8
20694: PUSH
20695: DOUBLE
20696: LD_INT 1
20698: DEC
20699: ST_TO_ADDR
20700: LD_EXP 48
20704: PUSH
20705: FOR_TO
20706: IFFALSE 20807
// begin tmp := 0 ;
20708: LD_ADDR_VAR 0 3
20712: PUSH
20713: LD_STRING 0
20715: ST_TO_ADDR
// if result [ 1 ] then
20716: LD_VAR 0 2
20720: PUSH
20721: LD_INT 1
20723: ARRAY
20724: IFFALSE 20789
// if result [ 1 ] [ 1 ] = i then
20726: LD_VAR 0 2
20730: PUSH
20731: LD_INT 1
20733: ARRAY
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PUSH
20739: LD_VAR 0 8
20743: EQUAL
20744: IFFALSE 20789
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20746: LD_ADDR_VAR 0 2
20750: PUSH
20751: LD_VAR 0 2
20755: PPUSH
20756: LD_INT 1
20758: PPUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 1
20766: ARRAY
20767: PPUSH
20768: LD_INT 1
20770: PPUSH
20771: CALL_OW 3
20775: PPUSH
20776: CALL_OW 1
20780: ST_TO_ADDR
// tmp := 1 ;
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: LD_STRING 1
20788: ST_TO_ADDR
// end ; normal := normal & tmp ;
20789: LD_ADDR_VAR 0 5
20793: PUSH
20794: LD_VAR 0 5
20798: PUSH
20799: LD_VAR 0 3
20803: STR
20804: ST_TO_ADDR
// end ;
20805: GO 20705
20807: POP
20808: POP
// for i = 1 to hardcoreCounter do
20809: LD_ADDR_VAR 0 8
20813: PUSH
20814: DOUBLE
20815: LD_INT 1
20817: DEC
20818: ST_TO_ADDR
20819: LD_EXP 49
20823: PUSH
20824: FOR_TO
20825: IFFALSE 20930
// begin tmp := 0 ;
20827: LD_ADDR_VAR 0 3
20831: PUSH
20832: LD_STRING 0
20834: ST_TO_ADDR
// if result [ 2 ] then
20835: LD_VAR 0 2
20839: PUSH
20840: LD_INT 2
20842: ARRAY
20843: IFFALSE 20912
// if result [ 2 ] [ 1 ] = 100 + i then
20845: LD_VAR 0 2
20849: PUSH
20850: LD_INT 2
20852: ARRAY
20853: PUSH
20854: LD_INT 1
20856: ARRAY
20857: PUSH
20858: LD_INT 100
20860: PUSH
20861: LD_VAR 0 8
20865: PLUS
20866: EQUAL
20867: IFFALSE 20912
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20869: LD_ADDR_VAR 0 2
20873: PUSH
20874: LD_VAR 0 2
20878: PPUSH
20879: LD_INT 2
20881: PPUSH
20882: LD_VAR 0 2
20886: PUSH
20887: LD_INT 2
20889: ARRAY
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 3
20898: PPUSH
20899: CALL_OW 1
20903: ST_TO_ADDR
// tmp := 1 ;
20904: LD_ADDR_VAR 0 3
20908: PUSH
20909: LD_STRING 1
20911: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20912: LD_ADDR_VAR 0 6
20916: PUSH
20917: LD_VAR 0 6
20921: PUSH
20922: LD_VAR 0 3
20926: STR
20927: ST_TO_ADDR
// end ;
20928: GO 20824
20930: POP
20931: POP
// if isGameLoad then
20932: LD_VAR 0 1
20936: IFFALSE 21411
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20938: LD_ADDR_VAR 0 4
20942: PUSH
20943: LD_EXP 52
20947: PUSH
20948: LD_EXP 51
20952: PUSH
20953: LD_EXP 53
20957: PUSH
20958: LD_EXP 50
20962: PUSH
20963: LD_EXP 54
20967: PUSH
20968: LD_EXP 55
20972: PUSH
20973: LD_EXP 56
20977: PUSH
20978: LD_EXP 57
20982: PUSH
20983: LD_EXP 58
20987: PUSH
20988: LD_EXP 59
20992: PUSH
20993: LD_EXP 60
20997: PUSH
20998: LD_EXP 61
21002: PUSH
21003: LD_EXP 62
21007: PUSH
21008: LD_EXP 63
21012: PUSH
21013: LD_EXP 71
21017: PUSH
21018: LD_EXP 72
21022: PUSH
21023: LD_EXP 73
21027: PUSH
21028: LD_EXP 74
21032: PUSH
21033: LD_EXP 76
21037: PUSH
21038: LD_EXP 77
21042: PUSH
21043: LD_EXP 78
21047: PUSH
21048: LD_EXP 81
21052: PUSH
21053: LD_EXP 83
21057: PUSH
21058: LD_EXP 84
21062: PUSH
21063: LD_EXP 85
21067: PUSH
21068: LD_EXP 87
21072: PUSH
21073: LD_EXP 88
21077: PUSH
21078: LD_EXP 91
21082: PUSH
21083: LD_EXP 92
21087: PUSH
21088: LD_EXP 93
21092: PUSH
21093: LD_EXP 94
21097: PUSH
21098: LD_EXP 95
21102: PUSH
21103: LD_EXP 96
21107: PUSH
21108: LD_EXP 97
21112: PUSH
21113: LD_EXP 98
21117: PUSH
21118: LD_EXP 99
21122: PUSH
21123: LD_EXP 64
21127: PUSH
21128: LD_EXP 65
21132: PUSH
21133: LD_EXP 68
21137: PUSH
21138: LD_EXP 69
21142: PUSH
21143: LD_EXP 70
21147: PUSH
21148: LD_EXP 66
21152: PUSH
21153: LD_EXP 67
21157: PUSH
21158: LD_EXP 75
21162: PUSH
21163: LD_EXP 79
21167: PUSH
21168: LD_EXP 80
21172: PUSH
21173: LD_EXP 82
21177: PUSH
21178: LD_EXP 86
21182: PUSH
21183: LD_EXP 89
21187: PUSH
21188: LD_EXP 90
21192: PUSH
21193: LD_EXP 100
21197: PUSH
21198: LD_EXP 101
21202: PUSH
21203: LD_EXP 102
21207: PUSH
21208: LD_EXP 103
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// tmp :=  ;
21269: LD_ADDR_VAR 0 3
21273: PUSH
21274: LD_STRING 
21276: ST_TO_ADDR
// for i = 1 to normalCounter do
21277: LD_ADDR_VAR 0 8
21281: PUSH
21282: DOUBLE
21283: LD_INT 1
21285: DEC
21286: ST_TO_ADDR
21287: LD_EXP 48
21291: PUSH
21292: FOR_TO
21293: IFFALSE 21329
// begin if flags [ i ] then
21295: LD_VAR 0 4
21299: PUSH
21300: LD_VAR 0 8
21304: ARRAY
21305: IFFALSE 21327
// tmp := tmp & i & ; ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_VAR 0 3
21316: PUSH
21317: LD_VAR 0 8
21321: STR
21322: PUSH
21323: LD_STRING ;
21325: STR
21326: ST_TO_ADDR
// end ;
21327: GO 21292
21329: POP
21330: POP
// for i = 1 to hardcoreCounter do
21331: LD_ADDR_VAR 0 8
21335: PUSH
21336: DOUBLE
21337: LD_INT 1
21339: DEC
21340: ST_TO_ADDR
21341: LD_EXP 49
21345: PUSH
21346: FOR_TO
21347: IFFALSE 21393
// begin if flags [ normalCounter + i ] then
21349: LD_VAR 0 4
21353: PUSH
21354: LD_EXP 48
21358: PUSH
21359: LD_VAR 0 8
21363: PLUS
21364: ARRAY
21365: IFFALSE 21391
// tmp := tmp & ( 100 + i ) & ; ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_INT 100
21379: PUSH
21380: LD_VAR 0 8
21384: PLUS
21385: STR
21386: PUSH
21387: LD_STRING ;
21389: STR
21390: ST_TO_ADDR
// end ;
21391: GO 21346
21393: POP
21394: POP
// if tmp then
21395: LD_VAR 0 3
21399: IFFALSE 21411
// active := tmp ;
21401: LD_ADDR_VAR 0 7
21405: PUSH
21406: LD_VAR 0 3
21410: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21411: LD_STRING getStreamItemsFromMission("
21413: PUSH
21414: LD_VAR 0 5
21418: STR
21419: PUSH
21420: LD_STRING ","
21422: STR
21423: PUSH
21424: LD_VAR 0 6
21428: STR
21429: PUSH
21430: LD_STRING ","
21432: STR
21433: PUSH
21434: LD_VAR 0 7
21438: STR
21439: PUSH
21440: LD_STRING ")
21442: STR
21443: PPUSH
21444: CALL_OW 559
// end else
21448: GO 21457
// ToLua ( getStreamItemsFromMission("","","") ) ;
21450: LD_STRING getStreamItemsFromMission("","","")
21452: PPUSH
21453: CALL_OW 559
// end ;
21457: LD_VAR 0 2
21461: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21462: LD_EXP 47
21466: PUSH
21467: LD_EXP 52
21471: AND
21472: IFFALSE 21596
21474: GO 21476
21476: DISABLE
21477: LD_INT 0
21479: PPUSH
21480: PPUSH
// begin enable ;
21481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21482: LD_ADDR_VAR 0 2
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_OWVAR 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 7
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 34
21514: PUSH
21515: LD_INT 45
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 34
21524: PUSH
21525: LD_INT 28
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 34
21534: PUSH
21535: LD_INT 47
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PPUSH
21553: CALL_OW 69
21557: ST_TO_ADDR
// if not tmp then
21558: LD_VAR 0 2
21562: NOT
21563: IFFALSE 21567
// exit ;
21565: GO 21596
// for i in tmp do
21567: LD_ADDR_VAR 0 1
21571: PUSH
21572: LD_VAR 0 2
21576: PUSH
21577: FOR_IN
21578: IFFALSE 21594
// begin SetLives ( i , 0 ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_INT 0
21587: PPUSH
21588: CALL_OW 234
// end ;
21592: GO 21577
21594: POP
21595: POP
// end ;
21596: PPOPN 2
21598: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21599: LD_EXP 47
21603: PUSH
21604: LD_EXP 53
21608: AND
21609: IFFALSE 21693
21611: GO 21613
21613: DISABLE
21614: LD_INT 0
21616: PPUSH
21617: PPUSH
// begin enable ;
21618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_OWVAR 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 32
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 69
21654: ST_TO_ADDR
// if not tmp then
21655: LD_VAR 0 2
21659: NOT
21660: IFFALSE 21664
// exit ;
21662: GO 21693
// for i in tmp do
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: LD_VAR 0 2
21673: PUSH
21674: FOR_IN
21675: IFFALSE 21691
// begin SetLives ( i , 0 ) ;
21677: LD_VAR 0 1
21681: PPUSH
21682: LD_INT 0
21684: PPUSH
21685: CALL_OW 234
// end ;
21689: GO 21674
21691: POP
21692: POP
// end ;
21693: PPOPN 2
21695: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21696: LD_EXP 47
21700: PUSH
21701: LD_EXP 50
21705: AND
21706: IFFALSE 21799
21708: GO 21710
21710: DISABLE
21711: LD_INT 0
21713: PPUSH
// begin enable ;
21714: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21715: LD_ADDR_VAR 0 1
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_OWVAR 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: LD_INT 25
21737: PUSH
21738: LD_INT 5
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 25
21747: PUSH
21748: LD_INT 9
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 8
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21797
// begin SetClass ( i , 1 ) ;
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_INT 1
21790: PPUSH
21791: CALL_OW 336
// end ;
21795: GO 21780
21797: POP
21798: POP
// end ;
21799: PPOPN 1
21801: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21802: LD_EXP 47
21806: PUSH
21807: LD_EXP 51
21811: AND
21812: PUSH
21813: LD_OWVAR 65
21817: PUSH
21818: LD_INT 7
21820: LESS
21821: AND
21822: IFFALSE 21836
21824: GO 21826
21826: DISABLE
// begin enable ;
21827: ENABLE
// game_speed := 7 ;
21828: LD_ADDR_OWVAR 65
21832: PUSH
21833: LD_INT 7
21835: ST_TO_ADDR
// end ;
21836: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21837: LD_EXP 47
21841: PUSH
21842: LD_EXP 54
21846: AND
21847: IFFALSE 22049
21849: GO 21851
21851: DISABLE
21852: LD_INT 0
21854: PPUSH
21855: PPUSH
21856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21857: LD_ADDR_VAR 0 3
21861: PUSH
21862: LD_INT 81
21864: PUSH
21865: LD_OWVAR 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 21
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 69
21892: ST_TO_ADDR
// if not tmp then
21893: LD_VAR 0 3
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 22049
// if tmp > 5 then
21902: LD_VAR 0 3
21906: PUSH
21907: LD_INT 5
21909: GREATER
21910: IFFALSE 21922
// k := 5 else
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: LD_INT 5
21919: ST_TO_ADDR
21920: GO 21932
// k := tmp ;
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_VAR 0 3
21931: ST_TO_ADDR
// for i := 1 to k do
21932: LD_ADDR_VAR 0 1
21936: PUSH
21937: DOUBLE
21938: LD_INT 1
21940: DEC
21941: ST_TO_ADDR
21942: LD_VAR 0 2
21946: PUSH
21947: FOR_TO
21948: IFFALSE 22047
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21950: LD_VAR 0 3
21954: PUSH
21955: LD_VAR 0 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 1
21965: PUSH
21966: LD_INT 4
21968: MOD
21969: PUSH
21970: LD_INT 1
21972: PLUS
21973: PPUSH
21974: CALL_OW 259
21978: PUSH
21979: LD_INT 10
21981: LESS
21982: IFFALSE 22045
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21984: LD_VAR 0 3
21988: PUSH
21989: LD_VAR 0 1
21993: ARRAY
21994: PPUSH
21995: LD_VAR 0 1
21999: PUSH
22000: LD_INT 4
22002: MOD
22003: PUSH
22004: LD_INT 1
22006: PLUS
22007: PPUSH
22008: LD_VAR 0 3
22012: PUSH
22013: LD_VAR 0 1
22017: ARRAY
22018: PPUSH
22019: LD_VAR 0 1
22023: PUSH
22024: LD_INT 4
22026: MOD
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: PPUSH
22032: CALL_OW 259
22036: PUSH
22037: LD_INT 1
22039: PLUS
22040: PPUSH
22041: CALL_OW 237
22045: GO 21947
22047: POP
22048: POP
// end ;
22049: PPOPN 3
22051: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22052: LD_EXP 47
22056: PUSH
22057: LD_EXP 55
22061: AND
22062: IFFALSE 22082
22064: GO 22066
22066: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22067: LD_INT 4
22069: PPUSH
22070: LD_OWVAR 2
22074: PPUSH
22075: LD_INT 0
22077: PPUSH
22078: CALL_OW 324
22082: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22083: LD_EXP 47
22087: PUSH
22088: LD_EXP 84
22092: AND
22093: IFFALSE 22113
22095: GO 22097
22097: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22098: LD_INT 19
22100: PPUSH
22101: LD_OWVAR 2
22105: PPUSH
22106: LD_INT 0
22108: PPUSH
22109: CALL_OW 324
22113: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22114: LD_EXP 47
22118: PUSH
22119: LD_EXP 56
22123: AND
22124: IFFALSE 22226
22126: GO 22128
22128: DISABLE
22129: LD_INT 0
22131: PPUSH
22132: PPUSH
// begin enable ;
22133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22134: LD_ADDR_VAR 0 2
22138: PUSH
22139: LD_INT 22
22141: PUSH
22142: LD_OWVAR 2
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 34
22156: PUSH
22157: LD_INT 11
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 34
22166: PUSH
22167: LD_INT 30
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PPUSH
22183: CALL_OW 69
22187: ST_TO_ADDR
// if not tmp then
22188: LD_VAR 0 2
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 22226
// for i in tmp do
22197: LD_ADDR_VAR 0 1
22201: PUSH
22202: LD_VAR 0 2
22206: PUSH
22207: FOR_IN
22208: IFFALSE 22224
// begin SetLives ( i , 0 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 0
22217: PPUSH
22218: CALL_OW 234
// end ;
22222: GO 22207
22224: POP
22225: POP
// end ;
22226: PPOPN 2
22228: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22229: LD_EXP 47
22233: PUSH
22234: LD_EXP 57
22238: AND
22239: IFFALSE 22259
22241: GO 22243
22243: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22244: LD_INT 32
22246: PPUSH
22247: LD_OWVAR 2
22251: PPUSH
22252: LD_INT 0
22254: PPUSH
22255: CALL_OW 324
22259: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22260: LD_EXP 47
22264: PUSH
22265: LD_EXP 58
22269: AND
22270: IFFALSE 22451
22272: GO 22274
22274: DISABLE
22275: LD_INT 0
22277: PPUSH
22278: PPUSH
22279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22280: LD_ADDR_VAR 0 2
22284: PUSH
22285: LD_INT 22
22287: PUSH
22288: LD_OWVAR 2
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 33
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PPUSH
22311: CALL_OW 69
22315: ST_TO_ADDR
// if not tmp then
22316: LD_VAR 0 2
22320: NOT
22321: IFFALSE 22325
// exit ;
22323: GO 22451
// side := 0 ;
22325: LD_ADDR_VAR 0 3
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// for i := 1 to 8 do
22333: LD_ADDR_VAR 0 1
22337: PUSH
22338: DOUBLE
22339: LD_INT 1
22341: DEC
22342: ST_TO_ADDR
22343: LD_INT 8
22345: PUSH
22346: FOR_TO
22347: IFFALSE 22395
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22349: LD_OWVAR 2
22353: PUSH
22354: LD_VAR 0 1
22358: NONEQUAL
22359: PUSH
22360: LD_OWVAR 2
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 81
22374: PUSH
22375: LD_INT 2
22377: EQUAL
22378: AND
22379: IFFALSE 22393
// begin side := i ;
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_VAR 0 1
22390: ST_TO_ADDR
// break ;
22391: GO 22395
// end ;
22393: GO 22346
22395: POP
22396: POP
// if not side then
22397: LD_VAR 0 3
22401: NOT
22402: IFFALSE 22406
// exit ;
22404: GO 22451
// for i := 1 to tmp do
22406: LD_ADDR_VAR 0 1
22410: PUSH
22411: DOUBLE
22412: LD_INT 1
22414: DEC
22415: ST_TO_ADDR
22416: LD_VAR 0 2
22420: PUSH
22421: FOR_TO
22422: IFFALSE 22449
// if Prob ( 60 ) then
22424: LD_INT 60
22426: PPUSH
22427: CALL_OW 13
22431: IFFALSE 22447
// SetSide ( i , side ) ;
22433: LD_VAR 0 1
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 235
22447: GO 22421
22449: POP
22450: POP
// end ;
22451: PPOPN 3
22453: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22454: LD_EXP 47
22458: PUSH
22459: LD_EXP 60
22463: AND
22464: IFFALSE 22583
22466: GO 22468
22468: DISABLE
22469: LD_INT 0
22471: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_OWVAR 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 21
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 3
22501: PUSH
22502: LD_INT 23
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: PPUSH
22521: CALL_OW 69
22525: PUSH
22526: FOR_IN
22527: IFFALSE 22581
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22529: LD_VAR 0 1
22533: PPUSH
22534: CALL_OW 257
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: LD_INT 3
22547: PUSH
22548: LD_INT 4
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: IN
22557: IFFALSE 22579
// SetClass ( un , rand ( 1 , 4 ) ) ;
22559: LD_VAR 0 1
22563: PPUSH
22564: LD_INT 1
22566: PPUSH
22567: LD_INT 4
22569: PPUSH
22570: CALL_OW 12
22574: PPUSH
22575: CALL_OW 336
22579: GO 22526
22581: POP
22582: POP
// end ;
22583: PPOPN 1
22585: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22586: LD_EXP 47
22590: PUSH
22591: LD_EXP 59
22595: AND
22596: IFFALSE 22675
22598: GO 22600
22600: DISABLE
22601: LD_INT 0
22603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22604: LD_ADDR_VAR 0 1
22608: PUSH
22609: LD_INT 22
22611: PUSH
22612: LD_OWVAR 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 21
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PPUSH
22635: CALL_OW 69
22639: ST_TO_ADDR
// if not tmp then
22640: LD_VAR 0 1
22644: NOT
22645: IFFALSE 22649
// exit ;
22647: GO 22675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22649: LD_VAR 0 1
22653: PUSH
22654: LD_INT 1
22656: PPUSH
22657: LD_VAR 0 1
22661: PPUSH
22662: CALL_OW 12
22666: ARRAY
22667: PPUSH
22668: LD_INT 100
22670: PPUSH
22671: CALL_OW 234
// end ;
22675: PPOPN 1
22677: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22678: LD_EXP 47
22682: PUSH
22683: LD_EXP 61
22687: AND
22688: IFFALSE 22786
22690: GO 22692
22692: DISABLE
22693: LD_INT 0
22695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22696: LD_ADDR_VAR 0 1
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_OWVAR 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 21
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PPUSH
22727: CALL_OW 69
22731: ST_TO_ADDR
// if not tmp then
22732: LD_VAR 0 1
22736: NOT
22737: IFFALSE 22741
// exit ;
22739: GO 22786
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22741: LD_VAR 0 1
22745: PUSH
22746: LD_INT 1
22748: PPUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL_OW 12
22758: ARRAY
22759: PPUSH
22760: LD_INT 1
22762: PPUSH
22763: LD_INT 4
22765: PPUSH
22766: CALL_OW 12
22770: PPUSH
22771: LD_INT 3000
22773: PPUSH
22774: LD_INT 9000
22776: PPUSH
22777: CALL_OW 12
22781: PPUSH
22782: CALL_OW 492
// end ;
22786: PPOPN 1
22788: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22789: LD_EXP 47
22793: PUSH
22794: LD_EXP 62
22798: AND
22799: IFFALSE 22819
22801: GO 22803
22803: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22804: LD_INT 1
22806: PPUSH
22807: LD_OWVAR 2
22811: PPUSH
22812: LD_INT 0
22814: PPUSH
22815: CALL_OW 324
22819: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22820: LD_EXP 47
22824: PUSH
22825: LD_EXP 63
22829: AND
22830: IFFALSE 22913
22832: GO 22834
22834: DISABLE
22835: LD_INT 0
22837: PPUSH
22838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 21
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 69
22874: ST_TO_ADDR
// if not tmp then
22875: LD_VAR 0 2
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22913
// for i in tmp do
22884: LD_ADDR_VAR 0 1
22888: PUSH
22889: LD_VAR 0 2
22893: PUSH
22894: FOR_IN
22895: IFFALSE 22911
// SetBLevel ( i , 10 ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: LD_INT 10
22904: PPUSH
22905: CALL_OW 241
22909: GO 22894
22911: POP
22912: POP
// end ;
22913: PPOPN 2
22915: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22916: LD_EXP 47
22920: PUSH
22921: LD_EXP 64
22925: AND
22926: IFFALSE 23037
22928: GO 22930
22930: DISABLE
22931: LD_INT 0
22933: PPUSH
22934: PPUSH
22935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22936: LD_ADDR_VAR 0 3
22940: PUSH
22941: LD_INT 22
22943: PUSH
22944: LD_OWVAR 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 25
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PPUSH
22967: CALL_OW 69
22971: ST_TO_ADDR
// if not tmp then
22972: LD_VAR 0 3
22976: NOT
22977: IFFALSE 22981
// exit ;
22979: GO 23037
// un := tmp [ rand ( 1 , tmp ) ] ;
22981: LD_ADDR_VAR 0 2
22985: PUSH
22986: LD_VAR 0 3
22990: PUSH
22991: LD_INT 1
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: CALL_OW 12
23003: ARRAY
23004: ST_TO_ADDR
// if Crawls ( un ) then
23005: LD_VAR 0 2
23009: PPUSH
23010: CALL_OW 318
23014: IFFALSE 23025
// ComWalk ( un ) ;
23016: LD_VAR 0 2
23020: PPUSH
23021: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_INT 5
23032: PPUSH
23033: CALL_OW 336
// end ;
23037: PPOPN 3
23039: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23040: LD_EXP 47
23044: PUSH
23045: LD_EXP 65
23049: AND
23050: PUSH
23051: LD_OWVAR 67
23055: PUSH
23056: LD_INT 4
23058: LESS
23059: AND
23060: IFFALSE 23079
23062: GO 23064
23064: DISABLE
// begin Difficulty := Difficulty + 1 ;
23065: LD_ADDR_OWVAR 67
23069: PUSH
23070: LD_OWVAR 67
23074: PUSH
23075: LD_INT 1
23077: PLUS
23078: ST_TO_ADDR
// end ;
23079: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23080: LD_EXP 47
23084: PUSH
23085: LD_EXP 66
23089: AND
23090: IFFALSE 23193
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
// begin for i := 1 to 5 do
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: DOUBLE
23104: LD_INT 1
23106: DEC
23107: ST_TO_ADDR
23108: LD_INT 5
23110: PUSH
23111: FOR_TO
23112: IFFALSE 23191
// begin uc_nation := nation_nature ;
23114: LD_ADDR_OWVAR 21
23118: PUSH
23119: LD_INT 0
23121: ST_TO_ADDR
// uc_side := 0 ;
23122: LD_ADDR_OWVAR 20
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23130: LD_ADDR_OWVAR 29
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 12
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: ST_TO_ADDR
// hc_agressivity := 20 ;
23145: LD_ADDR_OWVAR 35
23149: PUSH
23150: LD_INT 20
23152: ST_TO_ADDR
// hc_class := class_tiger ;
23153: LD_ADDR_OWVAR 28
23157: PUSH
23158: LD_INT 14
23160: ST_TO_ADDR
// hc_gallery :=  ;
23161: LD_ADDR_OWVAR 33
23165: PUSH
23166: LD_STRING 
23168: ST_TO_ADDR
// hc_name :=  ;
23169: LD_ADDR_OWVAR 26
23173: PUSH
23174: LD_STRING 
23176: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23177: CALL_OW 44
23181: PPUSH
23182: LD_INT 0
23184: PPUSH
23185: CALL_OW 51
// end ;
23189: GO 23111
23191: POP
23192: POP
// end ;
23193: PPOPN 1
23195: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23196: LD_EXP 47
23200: PUSH
23201: LD_EXP 67
23205: AND
23206: IFFALSE 23215
23208: GO 23210
23210: DISABLE
// StreamSibBomb ;
23211: CALL 23216 0 0
23215: END
// export function StreamSibBomb ; var i , x , y ; begin
23216: LD_INT 0
23218: PPUSH
23219: PPUSH
23220: PPUSH
23221: PPUSH
// result := false ;
23222: LD_ADDR_VAR 0 1
23226: PUSH
23227: LD_INT 0
23229: ST_TO_ADDR
// for i := 1 to 16 do
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: DOUBLE
23236: LD_INT 1
23238: DEC
23239: ST_TO_ADDR
23240: LD_INT 16
23242: PUSH
23243: FOR_TO
23244: IFFALSE 23443
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23246: LD_ADDR_VAR 0 3
23250: PUSH
23251: LD_INT 10
23253: PUSH
23254: LD_INT 20
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 40
23262: PUSH
23263: LD_INT 50
23265: PUSH
23266: LD_INT 60
23268: PUSH
23269: LD_INT 70
23271: PUSH
23272: LD_INT 80
23274: PUSH
23275: LD_INT 90
23277: PUSH
23278: LD_INT 100
23280: PUSH
23281: LD_INT 110
23283: PUSH
23284: LD_INT 120
23286: PUSH
23287: LD_INT 130
23289: PUSH
23290: LD_INT 140
23292: PUSH
23293: LD_INT 150
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: PPUSH
23316: LD_INT 15
23318: PPUSH
23319: CALL_OW 12
23323: ARRAY
23324: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23325: LD_ADDR_VAR 0 4
23329: PUSH
23330: LD_INT 10
23332: PUSH
23333: LD_INT 20
23335: PUSH
23336: LD_INT 30
23338: PUSH
23339: LD_INT 40
23341: PUSH
23342: LD_INT 50
23344: PUSH
23345: LD_INT 60
23347: PUSH
23348: LD_INT 70
23350: PUSH
23351: LD_INT 80
23353: PUSH
23354: LD_INT 90
23356: PUSH
23357: LD_INT 100
23359: PUSH
23360: LD_INT 110
23362: PUSH
23363: LD_INT 120
23365: PUSH
23366: LD_INT 130
23368: PUSH
23369: LD_INT 140
23371: PUSH
23372: LD_INT 150
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: PPUSH
23395: LD_INT 15
23397: PPUSH
23398: CALL_OW 12
23402: ARRAY
23403: ST_TO_ADDR
// if ValidHex ( x , y ) then
23404: LD_VAR 0 3
23408: PPUSH
23409: LD_VAR 0 4
23413: PPUSH
23414: CALL_OW 488
23418: IFFALSE 23441
// begin result := [ x , y ] ;
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_VAR 0 3
23429: PUSH
23430: LD_VAR 0 4
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: ST_TO_ADDR
// break ;
23439: GO 23443
// end ; end ;
23441: GO 23243
23443: POP
23444: POP
// if result then
23445: LD_VAR 0 1
23449: IFFALSE 23509
// begin ToLua ( playSibBomb() ) ;
23451: LD_STRING playSibBomb()
23453: PPUSH
23454: CALL_OW 559
// wait ( 0 0$14 ) ;
23458: LD_INT 490
23460: PPUSH
23461: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 1
23472: ARRAY
23473: PPUSH
23474: LD_VAR 0 1
23478: PUSH
23479: LD_INT 2
23481: ARRAY
23482: PPUSH
23483: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23487: LD_VAR 0 1
23491: PUSH
23492: LD_INT 1
23494: ARRAY
23495: PPUSH
23496: LD_VAR 0 1
23500: PUSH
23501: LD_INT 2
23503: ARRAY
23504: PPUSH
23505: CALL_OW 429
// end ; end ;
23509: LD_VAR 0 1
23513: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23514: LD_EXP 47
23518: PUSH
23519: LD_EXP 69
23523: AND
23524: IFFALSE 23536
23526: GO 23528
23528: DISABLE
// YouLost (  ) ;
23529: LD_STRING 
23531: PPUSH
23532: CALL_OW 104
23536: END
// every 0 0$1 trigger StreamModeActive and sFog do
23537: LD_EXP 47
23541: PUSH
23542: LD_EXP 68
23546: AND
23547: IFFALSE 23561
23549: GO 23551
23551: DISABLE
// FogOff ( your_side ) ;
23552: LD_OWVAR 2
23556: PPUSH
23557: CALL_OW 344
23561: END
// every 0 0$1 trigger StreamModeActive and sSun do
23562: LD_EXP 47
23566: PUSH
23567: LD_EXP 70
23571: AND
23572: IFFALSE 23600
23574: GO 23576
23576: DISABLE
// begin solar_recharge_percent := 0 ;
23577: LD_ADDR_OWVAR 79
23581: PUSH
23582: LD_INT 0
23584: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23585: LD_INT 10500
23587: PPUSH
23588: CALL_OW 67
// solar_recharge_percent := 100 ;
23592: LD_ADDR_OWVAR 79
23596: PUSH
23597: LD_INT 100
23599: ST_TO_ADDR
// end ;
23600: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23601: LD_EXP 47
23605: PUSH
23606: LD_EXP 71
23610: AND
23611: IFFALSE 23850
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
// begin tmp := [ ] ;
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: EMPTY
23627: ST_TO_ADDR
// for i := 1 to 6 do
23628: LD_ADDR_VAR 0 1
23632: PUSH
23633: DOUBLE
23634: LD_INT 1
23636: DEC
23637: ST_TO_ADDR
23638: LD_INT 6
23640: PUSH
23641: FOR_TO
23642: IFFALSE 23747
// begin uc_nation := nation_nature ;
23644: LD_ADDR_OWVAR 21
23648: PUSH
23649: LD_INT 0
23651: ST_TO_ADDR
// uc_side := 0 ;
23652: LD_ADDR_OWVAR 20
23656: PUSH
23657: LD_INT 0
23659: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23660: LD_ADDR_OWVAR 29
23664: PUSH
23665: LD_INT 12
23667: PUSH
23668: LD_INT 12
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: ST_TO_ADDR
// hc_agressivity := 20 ;
23675: LD_ADDR_OWVAR 35
23679: PUSH
23680: LD_INT 20
23682: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23683: LD_ADDR_OWVAR 28
23687: PUSH
23688: LD_INT 17
23690: ST_TO_ADDR
// hc_gallery :=  ;
23691: LD_ADDR_OWVAR 33
23695: PUSH
23696: LD_STRING 
23698: ST_TO_ADDR
// hc_name :=  ;
23699: LD_ADDR_OWVAR 26
23703: PUSH
23704: LD_STRING 
23706: ST_TO_ADDR
// un := CreateHuman ;
23707: LD_ADDR_VAR 0 2
23711: PUSH
23712: CALL_OW 44
23716: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23717: LD_VAR 0 2
23721: PPUSH
23722: LD_INT 1
23724: PPUSH
23725: CALL_OW 51
// tmp := tmp ^ un ;
23729: LD_ADDR_VAR 0 3
23733: PUSH
23734: LD_VAR 0 3
23738: PUSH
23739: LD_VAR 0 2
23743: ADD
23744: ST_TO_ADDR
// end ;
23745: GO 23641
23747: POP
23748: POP
// repeat wait ( 0 0$1 ) ;
23749: LD_INT 35
23751: PPUSH
23752: CALL_OW 67
// for un in tmp do
23756: LD_ADDR_VAR 0 2
23760: PUSH
23761: LD_VAR 0 3
23765: PUSH
23766: FOR_IN
23767: IFFALSE 23841
// begin if IsDead ( un ) then
23769: LD_VAR 0 2
23773: PPUSH
23774: CALL_OW 301
23778: IFFALSE 23798
// begin tmp := tmp diff un ;
23780: LD_ADDR_VAR 0 3
23784: PUSH
23785: LD_VAR 0 3
23789: PUSH
23790: LD_VAR 0 2
23794: DIFF
23795: ST_TO_ADDR
// continue ;
23796: GO 23766
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23798: LD_VAR 0 2
23802: PPUSH
23803: LD_INT 3
23805: PUSH
23806: LD_INT 22
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PPUSH
23820: CALL_OW 69
23824: PPUSH
23825: LD_VAR 0 2
23829: PPUSH
23830: CALL_OW 74
23834: PPUSH
23835: CALL_OW 115
// end ;
23839: GO 23766
23841: POP
23842: POP
// until not tmp ;
23843: LD_VAR 0 3
23847: NOT
23848: IFFALSE 23749
// end ;
23850: PPOPN 3
23852: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23853: LD_EXP 47
23857: PUSH
23858: LD_EXP 72
23862: AND
23863: IFFALSE 23917
23865: GO 23867
23867: DISABLE
// begin ToLua ( displayTroll(); ) ;
23868: LD_STRING displayTroll();
23870: PPUSH
23871: CALL_OW 559
// wait ( 3 3$00 ) ;
23875: LD_INT 6300
23877: PPUSH
23878: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23882: LD_STRING hideTroll();
23884: PPUSH
23885: CALL_OW 559
// wait ( 1 1$00 ) ;
23889: LD_INT 2100
23891: PPUSH
23892: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23896: LD_STRING displayTroll();
23898: PPUSH
23899: CALL_OW 559
// wait ( 1 1$00 ) ;
23903: LD_INT 2100
23905: PPUSH
23906: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23910: LD_STRING hideTroll();
23912: PPUSH
23913: CALL_OW 559
// end ;
23917: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23918: LD_EXP 47
23922: PUSH
23923: LD_EXP 73
23927: AND
23928: IFFALSE 23991
23930: GO 23932
23932: DISABLE
23933: LD_INT 0
23935: PPUSH
// begin p := 0 ;
23936: LD_ADDR_VAR 0 1
23940: PUSH
23941: LD_INT 0
23943: ST_TO_ADDR
// repeat game_speed := 1 ;
23944: LD_ADDR_OWVAR 65
23948: PUSH
23949: LD_INT 1
23951: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23952: LD_INT 35
23954: PPUSH
23955: CALL_OW 67
// p := p + 1 ;
23959: LD_ADDR_VAR 0 1
23963: PUSH
23964: LD_VAR 0 1
23968: PUSH
23969: LD_INT 1
23971: PLUS
23972: ST_TO_ADDR
// until p >= 60 ;
23973: LD_VAR 0 1
23977: PUSH
23978: LD_INT 60
23980: GREATEREQUAL
23981: IFFALSE 23944
// game_speed := 4 ;
23983: LD_ADDR_OWVAR 65
23987: PUSH
23988: LD_INT 4
23990: ST_TO_ADDR
// end ;
23991: PPOPN 1
23993: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23994: LD_EXP 47
23998: PUSH
23999: LD_EXP 74
24003: AND
24004: IFFALSE 24150
24006: GO 24008
24008: DISABLE
24009: LD_INT 0
24011: PPUSH
24012: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24013: LD_ADDR_VAR 0 1
24017: PUSH
24018: LD_INT 22
24020: PUSH
24021: LD_OWVAR 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 30
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 69
24066: ST_TO_ADDR
// if not depot then
24067: LD_VAR 0 1
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24150
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 1
24085: PUSH
24086: LD_INT 1
24088: PPUSH
24089: LD_VAR 0 1
24093: PPUSH
24094: CALL_OW 12
24098: ARRAY
24099: PPUSH
24100: CALL_OW 274
24104: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24105: LD_VAR 0 2
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: LD_INT 0
24115: PPUSH
24116: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24120: LD_VAR 0 2
24124: PPUSH
24125: LD_INT 2
24127: PPUSH
24128: LD_INT 0
24130: PPUSH
24131: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_INT 3
24142: PPUSH
24143: LD_INT 0
24145: PPUSH
24146: CALL_OW 277
// end ;
24150: PPOPN 2
24152: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24153: LD_EXP 47
24157: PUSH
24158: LD_EXP 75
24162: AND
24163: IFFALSE 24260
24165: GO 24167
24167: DISABLE
24168: LD_INT 0
24170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24171: LD_ADDR_VAR 0 1
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_OWVAR 2
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 21
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 3
24200: PUSH
24201: LD_INT 23
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 1
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24234: LD_VAR 0 1
24238: PUSH
24239: LD_INT 1
24241: PPUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 12
24251: ARRAY
24252: PPUSH
24253: LD_INT 200
24255: PPUSH
24256: CALL_OW 234
// end ;
24260: PPOPN 1
24262: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24263: LD_EXP 47
24267: PUSH
24268: LD_EXP 76
24272: AND
24273: IFFALSE 24352
24275: GO 24277
24277: DISABLE
24278: LD_INT 0
24280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24281: LD_ADDR_VAR 0 1
24285: PUSH
24286: LD_INT 22
24288: PUSH
24289: LD_OWVAR 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 21
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PPUSH
24312: CALL_OW 69
24316: ST_TO_ADDR
// if not tmp then
24317: LD_VAR 0 1
24321: NOT
24322: IFFALSE 24326
// exit ;
24324: GO 24352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24326: LD_VAR 0 1
24330: PUSH
24331: LD_INT 1
24333: PPUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 12
24343: ARRAY
24344: PPUSH
24345: LD_INT 60
24347: PPUSH
24348: CALL_OW 234
// end ;
24352: PPOPN 1
24354: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24355: LD_EXP 47
24359: PUSH
24360: LD_EXP 77
24364: AND
24365: IFFALSE 24464
24367: GO 24369
24369: DISABLE
24370: LD_INT 0
24372: PPUSH
24373: PPUSH
// begin enable ;
24374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24375: LD_ADDR_VAR 0 1
24379: PUSH
24380: LD_INT 22
24382: PUSH
24383: LD_OWVAR 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 61
24394: PUSH
24395: EMPTY
24396: LIST
24397: PUSH
24398: LD_INT 33
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: PPUSH
24413: CALL_OW 69
24417: ST_TO_ADDR
// if not tmp then
24418: LD_VAR 0 1
24422: NOT
24423: IFFALSE 24427
// exit ;
24425: GO 24464
// for i in tmp do
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_VAR 0 1
24436: PUSH
24437: FOR_IN
24438: IFFALSE 24462
// if IsControledBy ( i ) then
24440: LD_VAR 0 2
24444: PPUSH
24445: CALL_OW 312
24449: IFFALSE 24460
// ComUnlink ( i ) ;
24451: LD_VAR 0 2
24455: PPUSH
24456: CALL_OW 136
24460: GO 24437
24462: POP
24463: POP
// end ;
24464: PPOPN 2
24466: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24467: LD_EXP 47
24471: PUSH
24472: LD_EXP 78
24476: AND
24477: IFFALSE 24617
24479: GO 24481
24481: DISABLE
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
// begin ToLua ( displayPowell(); ) ;
24486: LD_STRING displayPowell();
24488: PPUSH
24489: CALL_OW 559
// uc_side := 0 ;
24493: LD_ADDR_OWVAR 20
24497: PUSH
24498: LD_INT 0
24500: ST_TO_ADDR
// uc_nation := 2 ;
24501: LD_ADDR_OWVAR 21
24505: PUSH
24506: LD_INT 2
24508: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24509: LD_ADDR_OWVAR 37
24513: PUSH
24514: LD_INT 14
24516: ST_TO_ADDR
// vc_engine := engine_siberite ;
24517: LD_ADDR_OWVAR 39
24521: PUSH
24522: LD_INT 3
24524: ST_TO_ADDR
// vc_control := control_apeman ;
24525: LD_ADDR_OWVAR 38
24529: PUSH
24530: LD_INT 5
24532: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24533: LD_ADDR_OWVAR 40
24537: PUSH
24538: LD_INT 29
24540: ST_TO_ADDR
// un := CreateVehicle ;
24541: LD_ADDR_VAR 0 2
24545: PUSH
24546: CALL_OW 45
24550: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24563: LD_INT 35
24565: PPUSH
24566: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_INT 22
24577: PUSH
24578: LD_OWVAR 2
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PPUSH
24587: CALL_OW 69
24591: PPUSH
24592: LD_VAR 0 2
24596: PPUSH
24597: CALL_OW 74
24601: PPUSH
24602: CALL_OW 115
// until IsDead ( un ) ;
24606: LD_VAR 0 2
24610: PPUSH
24611: CALL_OW 301
24615: IFFALSE 24563
// end ;
24617: PPOPN 2
24619: END
// every 0 0$1 trigger StreamModeActive and sStu do
24620: LD_EXP 47
24624: PUSH
24625: LD_EXP 86
24629: AND
24630: IFFALSE 24646
24632: GO 24634
24634: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24635: LD_STRING displayStucuk();
24637: PPUSH
24638: CALL_OW 559
// ResetFog ;
24642: CALL_OW 335
// end ;
24646: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24647: LD_EXP 47
24651: PUSH
24652: LD_EXP 79
24656: AND
24657: IFFALSE 24798
24659: GO 24661
24661: DISABLE
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24666: LD_ADDR_VAR 0 2
24670: PUSH
24671: LD_INT 22
24673: PUSH
24674: LD_OWVAR 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 21
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: ST_TO_ADDR
// if not tmp then
24702: LD_VAR 0 2
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24798
// un := tmp [ rand ( 1 , tmp ) ] ;
24711: LD_ADDR_VAR 0 1
24715: PUSH
24716: LD_VAR 0 2
24720: PUSH
24721: LD_INT 1
24723: PPUSH
24724: LD_VAR 0 2
24728: PPUSH
24729: CALL_OW 12
24733: ARRAY
24734: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24735: LD_VAR 0 1
24739: PPUSH
24740: LD_INT 0
24742: PPUSH
24743: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_OWVAR 3
24756: PUSH
24757: LD_VAR 0 1
24761: DIFF
24762: PPUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 74
24772: PPUSH
24773: CALL_OW 115
// wait ( 0 0$20 ) ;
24777: LD_INT 700
24779: PPUSH
24780: CALL_OW 67
// SetSide ( un , your_side ) ;
24784: LD_VAR 0 1
24788: PPUSH
24789: LD_OWVAR 2
24793: PPUSH
24794: CALL_OW 235
// end ;
24798: PPOPN 2
24800: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24801: LD_EXP 47
24805: PUSH
24806: LD_EXP 80
24810: AND
24811: IFFALSE 24917
24813: GO 24815
24815: DISABLE
24816: LD_INT 0
24818: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24819: LD_ADDR_VAR 0 1
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_OWVAR 2
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 30
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PPUSH
24868: CALL_OW 69
24872: ST_TO_ADDR
// if not depot then
24873: LD_VAR 0 1
24877: NOT
24878: IFFALSE 24882
// exit ;
24880: GO 24917
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24882: LD_VAR 0 1
24886: PUSH
24887: LD_INT 1
24889: ARRAY
24890: PPUSH
24891: CALL_OW 250
24895: PPUSH
24896: LD_VAR 0 1
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: CALL_OW 251
24909: PPUSH
24910: LD_INT 70
24912: PPUSH
24913: CALL_OW 495
// end ;
24917: PPOPN 1
24919: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24920: LD_EXP 47
24924: PUSH
24925: LD_EXP 81
24929: AND
24930: IFFALSE 25141
24932: GO 24934
24934: DISABLE
24935: LD_INT 0
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24942: LD_ADDR_VAR 0 5
24946: PUSH
24947: LD_INT 22
24949: PUSH
24950: LD_OWVAR 2
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 21
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PPUSH
24973: CALL_OW 69
24977: ST_TO_ADDR
// if not tmp then
24978: LD_VAR 0 5
24982: NOT
24983: IFFALSE 24987
// exit ;
24985: GO 25141
// for i in tmp do
24987: LD_ADDR_VAR 0 1
24991: PUSH
24992: LD_VAR 0 5
24996: PUSH
24997: FOR_IN
24998: IFFALSE 25139
// begin d := rand ( 0 , 5 ) ;
25000: LD_ADDR_VAR 0 4
25004: PUSH
25005: LD_INT 0
25007: PPUSH
25008: LD_INT 5
25010: PPUSH
25011: CALL_OW 12
25015: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25016: LD_ADDR_VAR 0 2
25020: PUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 250
25030: PPUSH
25031: LD_VAR 0 4
25035: PPUSH
25036: LD_INT 3
25038: PPUSH
25039: LD_INT 12
25041: PPUSH
25042: CALL_OW 12
25046: PPUSH
25047: CALL_OW 272
25051: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25052: LD_ADDR_VAR 0 3
25056: PUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 251
25066: PPUSH
25067: LD_VAR 0 4
25071: PPUSH
25072: LD_INT 3
25074: PPUSH
25075: LD_INT 12
25077: PPUSH
25078: CALL_OW 12
25082: PPUSH
25083: CALL_OW 273
25087: ST_TO_ADDR
// if ValidHex ( x , y ) then
25088: LD_VAR 0 2
25092: PPUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: CALL_OW 488
25102: IFFALSE 25137
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25104: LD_VAR 0 1
25108: PPUSH
25109: LD_VAR 0 2
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: LD_INT 3
25121: PPUSH
25122: LD_INT 6
25124: PPUSH
25125: CALL_OW 12
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: CALL_OW 483
// end ;
25137: GO 24997
25139: POP
25140: POP
// end ;
25141: PPOPN 5
25143: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25144: LD_EXP 47
25148: PUSH
25149: LD_EXP 82
25153: AND
25154: IFFALSE 25248
25156: GO 25158
25158: DISABLE
25159: LD_INT 0
25161: PPUSH
25162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25163: LD_ADDR_VAR 0 2
25167: PUSH
25168: LD_INT 22
25170: PUSH
25171: LD_OWVAR 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 32
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 21
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: PPUSH
25205: CALL_OW 69
25209: ST_TO_ADDR
// if not tmp then
25210: LD_VAR 0 2
25214: NOT
25215: IFFALSE 25219
// exit ;
25217: GO 25248
// for i in tmp do
25219: LD_ADDR_VAR 0 1
25223: PUSH
25224: LD_VAR 0 2
25228: PUSH
25229: FOR_IN
25230: IFFALSE 25246
// SetFuel ( i , 0 ) ;
25232: LD_VAR 0 1
25236: PPUSH
25237: LD_INT 0
25239: PPUSH
25240: CALL_OW 240
25244: GO 25229
25246: POP
25247: POP
// end ;
25248: PPOPN 2
25250: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25251: LD_EXP 47
25255: PUSH
25256: LD_EXP 83
25260: AND
25261: IFFALSE 25327
25263: GO 25265
25265: DISABLE
25266: LD_INT 0
25268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25269: LD_ADDR_VAR 0 1
25273: PUSH
25274: LD_INT 22
25276: PUSH
25277: LD_OWVAR 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 30
25288: PUSH
25289: LD_INT 29
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PPUSH
25300: CALL_OW 69
25304: ST_TO_ADDR
// if not tmp then
25305: LD_VAR 0 1
25309: NOT
25310: IFFALSE 25314
// exit ;
25312: GO 25327
// DestroyUnit ( tmp [ 1 ] ) ;
25314: LD_VAR 0 1
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PPUSH
25323: CALL_OW 65
// end ;
25327: PPOPN 1
25329: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25330: LD_EXP 47
25334: PUSH
25335: LD_EXP 85
25339: AND
25340: IFFALSE 25469
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
// begin uc_side := 0 ;
25348: LD_ADDR_OWVAR 20
25352: PUSH
25353: LD_INT 0
25355: ST_TO_ADDR
// uc_nation := nation_arabian ;
25356: LD_ADDR_OWVAR 21
25360: PUSH
25361: LD_INT 2
25363: ST_TO_ADDR
// hc_gallery :=  ;
25364: LD_ADDR_OWVAR 33
25368: PUSH
25369: LD_STRING 
25371: ST_TO_ADDR
// hc_name :=  ;
25372: LD_ADDR_OWVAR 26
25376: PUSH
25377: LD_STRING 
25379: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25380: LD_INT 1
25382: PPUSH
25383: LD_INT 11
25385: PPUSH
25386: LD_INT 10
25388: PPUSH
25389: CALL_OW 380
// un := CreateHuman ;
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: CALL_OW 44
25402: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25403: LD_VAR 0 1
25407: PPUSH
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25415: LD_INT 35
25417: PPUSH
25418: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25422: LD_VAR 0 1
25426: PPUSH
25427: LD_INT 22
25429: PUSH
25430: LD_OWVAR 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PPUSH
25439: CALL_OW 69
25443: PPUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 74
25453: PPUSH
25454: CALL_OW 115
// until IsDead ( un ) ;
25458: LD_VAR 0 1
25462: PPUSH
25463: CALL_OW 301
25467: IFFALSE 25415
// end ;
25469: PPOPN 1
25471: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25472: LD_EXP 47
25476: PUSH
25477: LD_EXP 87
25481: AND
25482: IFFALSE 25494
25484: GO 25486
25486: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25487: LD_STRING earthquake(getX(game), 0, 32)
25489: PPUSH
25490: CALL_OW 559
25494: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25495: LD_EXP 47
25499: PUSH
25500: LD_EXP 88
25504: AND
25505: IFFALSE 25596
25507: GO 25509
25509: DISABLE
25510: LD_INT 0
25512: PPUSH
// begin enable ;
25513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25514: LD_ADDR_VAR 0 1
25518: PUSH
25519: LD_INT 22
25521: PUSH
25522: LD_OWVAR 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 21
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 33
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: PPUSH
25556: CALL_OW 69
25560: ST_TO_ADDR
// if not tmp then
25561: LD_VAR 0 1
25565: NOT
25566: IFFALSE 25570
// exit ;
25568: GO 25596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25570: LD_VAR 0 1
25574: PUSH
25575: LD_INT 1
25577: PPUSH
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 12
25587: ARRAY
25588: PPUSH
25589: LD_INT 1
25591: PPUSH
25592: CALL_OW 234
// end ;
25596: PPOPN 1
25598: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25599: LD_EXP 47
25603: PUSH
25604: LD_EXP 89
25608: AND
25609: IFFALSE 25750
25611: GO 25613
25613: DISABLE
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
25618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25619: LD_ADDR_VAR 0 3
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_OWVAR 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 25
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PPUSH
25650: CALL_OW 69
25654: ST_TO_ADDR
// if not tmp then
25655: LD_VAR 0 3
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 25750
// un := tmp [ rand ( 1 , tmp ) ] ;
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: LD_VAR 0 3
25673: PUSH
25674: LD_INT 1
25676: PPUSH
25677: LD_VAR 0 3
25681: PPUSH
25682: CALL_OW 12
25686: ARRAY
25687: ST_TO_ADDR
// if Crawls ( un ) then
25688: LD_VAR 0 2
25692: PPUSH
25693: CALL_OW 318
25697: IFFALSE 25708
// ComWalk ( un ) ;
25699: LD_VAR 0 2
25703: PPUSH
25704: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25708: LD_VAR 0 2
25712: PPUSH
25713: LD_INT 9
25715: PPUSH
25716: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25720: LD_INT 28
25722: PPUSH
25723: LD_OWVAR 2
25727: PPUSH
25728: LD_INT 2
25730: PPUSH
25731: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25735: LD_INT 29
25737: PPUSH
25738: LD_OWVAR 2
25742: PPUSH
25743: LD_INT 2
25745: PPUSH
25746: CALL_OW 322
// end ;
25750: PPOPN 3
25752: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25753: LD_EXP 47
25757: PUSH
25758: LD_EXP 90
25762: AND
25763: IFFALSE 25874
25765: GO 25767
25767: DISABLE
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
25772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25773: LD_ADDR_VAR 0 3
25777: PUSH
25778: LD_INT 22
25780: PUSH
25781: LD_OWVAR 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 25
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PPUSH
25804: CALL_OW 69
25808: ST_TO_ADDR
// if not tmp then
25809: LD_VAR 0 3
25813: NOT
25814: IFFALSE 25818
// exit ;
25816: GO 25874
// un := tmp [ rand ( 1 , tmp ) ] ;
25818: LD_ADDR_VAR 0 2
25822: PUSH
25823: LD_VAR 0 3
25827: PUSH
25828: LD_INT 1
25830: PPUSH
25831: LD_VAR 0 3
25835: PPUSH
25836: CALL_OW 12
25840: ARRAY
25841: ST_TO_ADDR
// if Crawls ( un ) then
25842: LD_VAR 0 2
25846: PPUSH
25847: CALL_OW 318
25851: IFFALSE 25862
// ComWalk ( un ) ;
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_INT 8
25869: PPUSH
25870: CALL_OW 336
// end ;
25874: PPOPN 3
25876: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25877: LD_EXP 47
25881: PUSH
25882: LD_EXP 91
25886: AND
25887: IFFALSE 26031
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25896: LD_ADDR_VAR 0 2
25900: PUSH
25901: LD_INT 22
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 34
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 34
25938: PUSH
25939: LD_INT 51
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 34
25948: PUSH
25949: LD_INT 32
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 69
25971: ST_TO_ADDR
// if not tmp then
25972: LD_VAR 0 2
25976: NOT
25977: IFFALSE 25981
// exit ;
25979: GO 26031
// for i in tmp do
25981: LD_ADDR_VAR 0 1
25985: PUSH
25986: LD_VAR 0 2
25990: PUSH
25991: FOR_IN
25992: IFFALSE 26029
// if GetCargo ( i , mat_artifact ) = 0 then
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_INT 4
26001: PPUSH
26002: CALL_OW 289
26006: PUSH
26007: LD_INT 0
26009: EQUAL
26010: IFFALSE 26027
// SetCargo ( i , mat_siberit , 100 ) ;
26012: LD_VAR 0 1
26016: PPUSH
26017: LD_INT 3
26019: PPUSH
26020: LD_INT 100
26022: PPUSH
26023: CALL_OW 290
26027: GO 25991
26029: POP
26030: POP
// end ;
26031: PPOPN 2
26033: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26034: LD_EXP 47
26038: PUSH
26039: LD_EXP 92
26043: AND
26044: IFFALSE 26227
26046: GO 26048
26048: DISABLE
26049: LD_INT 0
26051: PPUSH
26052: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26053: LD_ADDR_VAR 0 2
26057: PUSH
26058: LD_INT 22
26060: PUSH
26061: LD_OWVAR 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 69
26074: ST_TO_ADDR
// if not tmp then
26075: LD_VAR 0 2
26079: NOT
26080: IFFALSE 26084
// exit ;
26082: GO 26227
// for i := 1 to 2 do
26084: LD_ADDR_VAR 0 1
26088: PUSH
26089: DOUBLE
26090: LD_INT 1
26092: DEC
26093: ST_TO_ADDR
26094: LD_INT 2
26096: PUSH
26097: FOR_TO
26098: IFFALSE 26225
// begin uc_side := your_side ;
26100: LD_ADDR_OWVAR 20
26104: PUSH
26105: LD_OWVAR 2
26109: ST_TO_ADDR
// uc_nation := nation_american ;
26110: LD_ADDR_OWVAR 21
26114: PUSH
26115: LD_INT 1
26117: ST_TO_ADDR
// vc_chassis := us_morphling ;
26118: LD_ADDR_OWVAR 37
26122: PUSH
26123: LD_INT 5
26125: ST_TO_ADDR
// vc_engine := engine_siberite ;
26126: LD_ADDR_OWVAR 39
26130: PUSH
26131: LD_INT 3
26133: ST_TO_ADDR
// vc_control := control_computer ;
26134: LD_ADDR_OWVAR 38
26138: PUSH
26139: LD_INT 3
26141: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26142: LD_ADDR_OWVAR 40
26146: PUSH
26147: LD_INT 10
26149: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26150: LD_VAR 0 2
26154: PUSH
26155: LD_INT 1
26157: ARRAY
26158: PPUSH
26159: CALL_OW 310
26163: NOT
26164: IFFALSE 26211
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26166: CALL_OW 45
26170: PPUSH
26171: LD_VAR 0 2
26175: PUSH
26176: LD_INT 1
26178: ARRAY
26179: PPUSH
26180: CALL_OW 250
26184: PPUSH
26185: LD_VAR 0 2
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: PPUSH
26194: CALL_OW 251
26198: PPUSH
26199: LD_INT 12
26201: PPUSH
26202: LD_INT 1
26204: PPUSH
26205: CALL_OW 50
26209: GO 26223
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26211: CALL_OW 45
26215: PPUSH
26216: LD_INT 1
26218: PPUSH
26219: CALL_OW 51
// end ;
26223: GO 26097
26225: POP
26226: POP
// end ;
26227: PPOPN 2
26229: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26230: LD_EXP 47
26234: PUSH
26235: LD_EXP 93
26239: AND
26240: IFFALSE 26462
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26253: LD_ADDR_VAR 0 6
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_OWVAR 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 21
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 3
26282: PUSH
26283: LD_INT 23
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: ST_TO_ADDR
// if not tmp then
26307: LD_VAR 0 6
26311: NOT
26312: IFFALSE 26316
// exit ;
26314: GO 26462
// s1 := rand ( 1 , 4 ) ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_INT 1
26323: PPUSH
26324: LD_INT 4
26326: PPUSH
26327: CALL_OW 12
26331: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26332: LD_ADDR_VAR 0 4
26336: PUSH
26337: LD_VAR 0 6
26341: PUSH
26342: LD_INT 1
26344: ARRAY
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 259
26355: ST_TO_ADDR
// if s1 = 1 then
26356: LD_VAR 0 2
26360: PUSH
26361: LD_INT 1
26363: EQUAL
26364: IFFALSE 26384
// s2 := rand ( 2 , 4 ) else
26366: LD_ADDR_VAR 0 3
26370: PUSH
26371: LD_INT 2
26373: PPUSH
26374: LD_INT 4
26376: PPUSH
26377: CALL_OW 12
26381: ST_TO_ADDR
26382: GO 26392
// s2 := 1 ;
26384: LD_ADDR_VAR 0 3
26388: PUSH
26389: LD_INT 1
26391: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: LD_VAR 0 6
26401: PUSH
26402: LD_INT 1
26404: ARRAY
26405: PPUSH
26406: LD_VAR 0 3
26410: PPUSH
26411: CALL_OW 259
26415: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26416: LD_VAR 0 6
26420: PUSH
26421: LD_INT 1
26423: ARRAY
26424: PPUSH
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_VAR 0 5
26434: PPUSH
26435: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26439: LD_VAR 0 6
26443: PUSH
26444: LD_INT 1
26446: ARRAY
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: LD_VAR 0 4
26457: PPUSH
26458: CALL_OW 237
// end ;
26462: PPOPN 6
26464: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26465: LD_EXP 47
26469: PUSH
26470: LD_EXP 94
26474: AND
26475: IFFALSE 26554
26477: GO 26479
26479: DISABLE
26480: LD_INT 0
26482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26483: LD_ADDR_VAR 0 1
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_OWVAR 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 30
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PPUSH
26514: CALL_OW 69
26518: ST_TO_ADDR
// if not tmp then
26519: LD_VAR 0 1
26523: NOT
26524: IFFALSE 26528
// exit ;
26526: GO 26554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26528: LD_VAR 0 1
26532: PUSH
26533: LD_INT 1
26535: PPUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 12
26545: ARRAY
26546: PPUSH
26547: LD_INT 1
26549: PPUSH
26550: CALL_OW 234
// end ;
26554: PPOPN 1
26556: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26557: LD_EXP 47
26561: PUSH
26562: LD_EXP 95
26566: AND
26567: IFFALSE 26679
26569: GO 26571
26571: DISABLE
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26576: LD_ADDR_VAR 0 2
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: LD_INT 30
26598: PUSH
26599: LD_INT 27
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 30
26608: PUSH
26609: LD_INT 26
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 30
26618: PUSH
26619: LD_INT 28
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: ST_TO_ADDR
// if not tmp then
26641: LD_VAR 0 2
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 26679
// for i in tmp do
26650: LD_ADDR_VAR 0 1
26654: PUSH
26655: LD_VAR 0 2
26659: PUSH
26660: FOR_IN
26661: IFFALSE 26677
// SetLives ( i , 1 ) ;
26663: LD_VAR 0 1
26667: PPUSH
26668: LD_INT 1
26670: PPUSH
26671: CALL_OW 234
26675: GO 26660
26677: POP
26678: POP
// end ;
26679: PPOPN 2
26681: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26682: LD_EXP 47
26686: PUSH
26687: LD_EXP 96
26691: AND
26692: IFFALSE 26979
26694: GO 26696
26696: DISABLE
26697: LD_INT 0
26699: PPUSH
26700: PPUSH
26701: PPUSH
// begin i := rand ( 1 , 7 ) ;
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: LD_INT 1
26709: PPUSH
26710: LD_INT 7
26712: PPUSH
26713: CALL_OW 12
26717: ST_TO_ADDR
// case i of 1 :
26718: LD_VAR 0 1
26722: PUSH
26723: LD_INT 1
26725: DOUBLE
26726: EQUAL
26727: IFTRUE 26731
26729: GO 26741
26731: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26732: LD_STRING earthquake(getX(game), 0, 32)
26734: PPUSH
26735: CALL_OW 559
26739: GO 26979
26741: LD_INT 2
26743: DOUBLE
26744: EQUAL
26745: IFTRUE 26749
26747: GO 26763
26749: POP
// begin ToLua ( displayStucuk(); ) ;
26750: LD_STRING displayStucuk();
26752: PPUSH
26753: CALL_OW 559
// ResetFog ;
26757: CALL_OW 335
// end ; 3 :
26761: GO 26979
26763: LD_INT 3
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26875
26771: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26772: LD_ADDR_VAR 0 2
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_OWVAR 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 25
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PPUSH
26803: CALL_OW 69
26807: ST_TO_ADDR
// if not tmp then
26808: LD_VAR 0 2
26812: NOT
26813: IFFALSE 26817
// exit ;
26815: GO 26979
// un := tmp [ rand ( 1 , tmp ) ] ;
26817: LD_ADDR_VAR 0 3
26821: PUSH
26822: LD_VAR 0 2
26826: PUSH
26827: LD_INT 1
26829: PPUSH
26830: LD_VAR 0 2
26834: PPUSH
26835: CALL_OW 12
26839: ARRAY
26840: ST_TO_ADDR
// if Crawls ( un ) then
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 318
26850: IFFALSE 26861
// ComWalk ( un ) ;
26852: LD_VAR 0 3
26856: PPUSH
26857: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26861: LD_VAR 0 3
26865: PPUSH
26866: LD_INT 8
26868: PPUSH
26869: CALL_OW 336
// end ; 4 :
26873: GO 26979
26875: LD_INT 4
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26957
26883: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26884: LD_ADDR_VAR 0 2
26888: PUSH
26889: LD_INT 22
26891: PUSH
26892: LD_OWVAR 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 30
26903: PUSH
26904: LD_INT 29
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 69
26919: ST_TO_ADDR
// if not tmp then
26920: LD_VAR 0 2
26924: NOT
26925: IFFALSE 26929
// exit ;
26927: GO 26979
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26929: LD_VAR 0 2
26933: PUSH
26934: LD_INT 1
26936: ARRAY
26937: PPUSH
26938: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26942: LD_VAR 0 2
26946: PUSH
26947: LD_INT 1
26949: ARRAY
26950: PPUSH
26951: CALL_OW 65
// end ; 5 .. 7 :
26955: GO 26979
26957: LD_INT 5
26959: DOUBLE
26960: GREATEREQUAL
26961: IFFALSE 26969
26963: LD_INT 7
26965: DOUBLE
26966: LESSEQUAL
26967: IFTRUE 26971
26969: GO 26978
26971: POP
// StreamSibBomb ; end ;
26972: CALL 23216 0 0
26976: GO 26979
26978: POP
// end ;
26979: PPOPN 3
26981: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26982: LD_EXP 47
26986: PUSH
26987: LD_EXP 97
26991: AND
26992: IFFALSE 27148
26994: GO 26996
26996: DISABLE
26997: LD_INT 0
26999: PPUSH
27000: PPUSH
27001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27002: LD_ADDR_VAR 0 2
27006: PUSH
27007: LD_INT 81
27009: PUSH
27010: LD_OWVAR 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: LD_INT 21
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 21
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 69
27055: ST_TO_ADDR
// if not tmp then
27056: LD_VAR 0 2
27060: NOT
27061: IFFALSE 27065
// exit ;
27063: GO 27148
// p := 0 ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27073: LD_INT 35
27075: PPUSH
27076: CALL_OW 67
// p := p + 1 ;
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: LD_INT 1
27092: PLUS
27093: ST_TO_ADDR
// for i in tmp do
27094: LD_ADDR_VAR 0 1
27098: PUSH
27099: LD_VAR 0 2
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27136
// if GetLives ( i ) < 1000 then
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 256
27116: PUSH
27117: LD_INT 1000
27119: LESS
27120: IFFALSE 27134
// SetLives ( i , 1000 ) ;
27122: LD_VAR 0 1
27126: PPUSH
27127: LD_INT 1000
27129: PPUSH
27130: CALL_OW 234
27134: GO 27104
27136: POP
27137: POP
// until p > 20 ;
27138: LD_VAR 0 3
27142: PUSH
27143: LD_INT 20
27145: GREATER
27146: IFFALSE 27073
// end ;
27148: PPOPN 3
27150: END
// every 0 0$1 trigger StreamModeActive and sTime do
27151: LD_EXP 47
27155: PUSH
27156: LD_EXP 98
27160: AND
27161: IFFALSE 27196
27163: GO 27165
27165: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27166: LD_INT 28
27168: PPUSH
27169: LD_OWVAR 2
27173: PPUSH
27174: LD_INT 2
27176: PPUSH
27177: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27181: LD_INT 30
27183: PPUSH
27184: LD_OWVAR 2
27188: PPUSH
27189: LD_INT 2
27191: PPUSH
27192: CALL_OW 322
// end ;
27196: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27197: LD_EXP 47
27201: PUSH
27202: LD_EXP 99
27206: AND
27207: IFFALSE 27328
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27216: LD_ADDR_VAR 0 2
27220: PUSH
27221: LD_INT 22
27223: PUSH
27224: LD_OWVAR 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 21
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: LD_INT 23
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: PPUSH
27265: CALL_OW 69
27269: ST_TO_ADDR
// if not tmp then
27270: LD_VAR 0 2
27274: NOT
27275: IFFALSE 27279
// exit ;
27277: GO 27328
// for i in tmp do
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: FOR_IN
27290: IFFALSE 27326
// begin if Crawls ( i ) then
27292: LD_VAR 0 1
27296: PPUSH
27297: CALL_OW 318
27301: IFFALSE 27312
// ComWalk ( i ) ;
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 138
// SetClass ( i , 2 ) ;
27312: LD_VAR 0 1
27316: PPUSH
27317: LD_INT 2
27319: PPUSH
27320: CALL_OW 336
// end ;
27324: GO 27289
27326: POP
27327: POP
// end ;
27328: PPOPN 2
27330: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27331: LD_EXP 47
27335: PUSH
27336: LD_EXP 100
27340: AND
27341: IFFALSE 27629
27343: GO 27345
27345: DISABLE
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27351: LD_OWVAR 2
27355: PPUSH
27356: LD_INT 9
27358: PPUSH
27359: LD_INT 1
27361: PPUSH
27362: LD_INT 1
27364: PPUSH
27365: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27369: LD_INT 9
27371: PPUSH
27372: LD_OWVAR 2
27376: PPUSH
27377: CALL_OW 343
// uc_side := 9 ;
27381: LD_ADDR_OWVAR 20
27385: PUSH
27386: LD_INT 9
27388: ST_TO_ADDR
// uc_nation := 2 ;
27389: LD_ADDR_OWVAR 21
27393: PUSH
27394: LD_INT 2
27396: ST_TO_ADDR
// hc_name := Dark Warrior ;
27397: LD_ADDR_OWVAR 26
27401: PUSH
27402: LD_STRING Dark Warrior
27404: ST_TO_ADDR
// hc_gallery :=  ;
27405: LD_ADDR_OWVAR 33
27409: PUSH
27410: LD_STRING 
27412: ST_TO_ADDR
// hc_noskilllimit := true ;
27413: LD_ADDR_OWVAR 76
27417: PUSH
27418: LD_INT 1
27420: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27421: LD_ADDR_OWVAR 31
27425: PUSH
27426: LD_INT 30
27428: PUSH
27429: LD_INT 30
27431: PUSH
27432: LD_INT 30
27434: PUSH
27435: LD_INT 30
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// un := CreateHuman ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: CALL_OW 44
27453: ST_TO_ADDR
// hc_noskilllimit := false ;
27454: LD_ADDR_OWVAR 76
27458: PUSH
27459: LD_INT 0
27461: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27462: LD_VAR 0 3
27466: PPUSH
27467: LD_INT 1
27469: PPUSH
27470: CALL_OW 51
// ToLua ( playRanger() ) ;
27474: LD_STRING playRanger()
27476: PPUSH
27477: CALL_OW 559
// p := 0 ;
27481: LD_ADDR_VAR 0 2
27485: PUSH
27486: LD_INT 0
27488: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27489: LD_INT 35
27491: PPUSH
27492: CALL_OW 67
// p := p + 1 ;
27496: LD_ADDR_VAR 0 2
27500: PUSH
27501: LD_VAR 0 2
27505: PUSH
27506: LD_INT 1
27508: PLUS
27509: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27510: LD_VAR 0 3
27514: PPUSH
27515: CALL_OW 256
27519: PUSH
27520: LD_INT 1000
27522: LESS
27523: IFFALSE 27537
// SetLives ( un , 1000 ) ;
27525: LD_VAR 0 3
27529: PPUSH
27530: LD_INT 1000
27532: PPUSH
27533: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27537: LD_VAR 0 3
27541: PPUSH
27542: LD_INT 81
27544: PUSH
27545: LD_OWVAR 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 91
27556: PUSH
27557: LD_VAR 0 3
27561: PUSH
27562: LD_INT 30
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PPUSH
27574: CALL_OW 69
27578: PPUSH
27579: LD_VAR 0 3
27583: PPUSH
27584: CALL_OW 74
27588: PPUSH
27589: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27593: LD_VAR 0 2
27597: PUSH
27598: LD_INT 80
27600: GREATER
27601: PUSH
27602: LD_VAR 0 3
27606: PPUSH
27607: CALL_OW 301
27611: OR
27612: IFFALSE 27489
// if un then
27614: LD_VAR 0 3
27618: IFFALSE 27629
// RemoveUnit ( un ) ;
27620: LD_VAR 0 3
27624: PPUSH
27625: CALL_OW 64
// end ;
27629: PPOPN 3
27631: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27632: LD_EXP 101
27636: IFFALSE 27752
27638: GO 27640
27640: DISABLE
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
27645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27646: LD_ADDR_VAR 0 2
27650: PUSH
27651: LD_INT 81
27653: PUSH
27654: LD_OWVAR 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 21
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27682: LD_STRING playComputer()
27684: PPUSH
27685: CALL_OW 559
// if not tmp then
27689: LD_VAR 0 2
27693: NOT
27694: IFFALSE 27698
// exit ;
27696: GO 27752
// for i in tmp do
27698: LD_ADDR_VAR 0 1
27702: PUSH
27703: LD_VAR 0 2
27707: PUSH
27708: FOR_IN
27709: IFFALSE 27750
// for j := 1 to 4 do
27711: LD_ADDR_VAR 0 3
27715: PUSH
27716: DOUBLE
27717: LD_INT 1
27719: DEC
27720: ST_TO_ADDR
27721: LD_INT 4
27723: PUSH
27724: FOR_TO
27725: IFFALSE 27746
// SetSkill ( i , j , 10 ) ;
27727: LD_VAR 0 1
27731: PPUSH
27732: LD_VAR 0 3
27736: PPUSH
27737: LD_INT 10
27739: PPUSH
27740: CALL_OW 237
27744: GO 27724
27746: POP
27747: POP
27748: GO 27708
27750: POP
27751: POP
// end ;
27752: PPOPN 3
27754: END
// every 0 0$1 trigger s30 do var i , tmp ;
27755: LD_EXP 102
27759: IFFALSE 27828
27761: GO 27763
27763: DISABLE
27764: LD_INT 0
27766: PPUSH
27767: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_INT 22
27775: PUSH
27776: LD_OWVAR 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PPUSH
27785: CALL_OW 69
27789: ST_TO_ADDR
// if not tmp then
27790: LD_VAR 0 2
27794: NOT
27795: IFFALSE 27799
// exit ;
27797: GO 27828
// for i in tmp do
27799: LD_ADDR_VAR 0 1
27803: PUSH
27804: LD_VAR 0 2
27808: PUSH
27809: FOR_IN
27810: IFFALSE 27826
// SetLives ( i , 300 ) ;
27812: LD_VAR 0 1
27816: PPUSH
27817: LD_INT 300
27819: PPUSH
27820: CALL_OW 234
27824: GO 27809
27826: POP
27827: POP
// end ;
27828: PPOPN 2
27830: END
// every 0 0$1 trigger s60 do var i , tmp ;
27831: LD_EXP 103
27835: IFFALSE 27904
27837: GO 27839
27839: DISABLE
27840: LD_INT 0
27842: PPUSH
27843: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27844: LD_ADDR_VAR 0 2
27848: PUSH
27849: LD_INT 22
27851: PUSH
27852: LD_OWVAR 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PPUSH
27861: CALL_OW 69
27865: ST_TO_ADDR
// if not tmp then
27866: LD_VAR 0 2
27870: NOT
27871: IFFALSE 27875
// exit ;
27873: GO 27904
// for i in tmp do
27875: LD_ADDR_VAR 0 1
27879: PUSH
27880: LD_VAR 0 2
27884: PUSH
27885: FOR_IN
27886: IFFALSE 27902
// SetLives ( i , 600 ) ;
27888: LD_VAR 0 1
27892: PPUSH
27893: LD_INT 600
27895: PPUSH
27896: CALL_OW 234
27900: GO 27885
27902: POP
27903: POP
// end ;
27904: PPOPN 2
27906: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27907: LD_INT 0
27909: PPUSH
// case cmd of 301 :
27910: LD_VAR 0 1
27914: PUSH
27915: LD_INT 301
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 27955
27923: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27924: LD_VAR 0 6
27928: PPUSH
27929: LD_VAR 0 7
27933: PPUSH
27934: LD_VAR 0 8
27938: PPUSH
27939: LD_VAR 0 4
27943: PPUSH
27944: LD_VAR 0 5
27948: PPUSH
27949: CALL 29156 0 5
27953: GO 28076
27955: LD_INT 302
27957: DOUBLE
27958: EQUAL
27959: IFTRUE 27963
27961: GO 28000
27963: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27964: LD_VAR 0 6
27968: PPUSH
27969: LD_VAR 0 7
27973: PPUSH
27974: LD_VAR 0 8
27978: PPUSH
27979: LD_VAR 0 9
27983: PPUSH
27984: LD_VAR 0 4
27988: PPUSH
27989: LD_VAR 0 5
27993: PPUSH
27994: CALL 29247 0 6
27998: GO 28076
28000: LD_INT 303
28002: DOUBLE
28003: EQUAL
28004: IFTRUE 28008
28006: GO 28045
28008: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28009: LD_VAR 0 6
28013: PPUSH
28014: LD_VAR 0 7
28018: PPUSH
28019: LD_VAR 0 8
28023: PPUSH
28024: LD_VAR 0 9
28028: PPUSH
28029: LD_VAR 0 4
28033: PPUSH
28034: LD_VAR 0 5
28038: PPUSH
28039: CALL 28081 0 6
28043: GO 28076
28045: LD_INT 304
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28053
28051: GO 28075
28053: POP
// hHackTeleport ( unit , x , y ) ; end ;
28054: LD_VAR 0 2
28058: PPUSH
28059: LD_VAR 0 4
28063: PPUSH
28064: LD_VAR 0 5
28068: PPUSH
28069: CALL 29840 0 3
28073: GO 28076
28075: POP
// end ;
28076: LD_VAR 0 12
28080: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28081: LD_INT 0
28083: PPUSH
28084: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28085: LD_VAR 0 1
28089: PUSH
28090: LD_INT 1
28092: LESS
28093: PUSH
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 3
28101: GREATER
28102: OR
28103: PUSH
28104: LD_VAR 0 5
28108: PPUSH
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 428
28118: OR
28119: IFFALSE 28123
// exit ;
28121: GO 28843
// uc_side := your_side ;
28123: LD_ADDR_OWVAR 20
28127: PUSH
28128: LD_OWVAR 2
28132: ST_TO_ADDR
// uc_nation := nation ;
28133: LD_ADDR_OWVAR 21
28137: PUSH
28138: LD_VAR 0 1
28142: ST_TO_ADDR
// bc_level = 1 ;
28143: LD_ADDR_OWVAR 43
28147: PUSH
28148: LD_INT 1
28150: ST_TO_ADDR
// case btype of 1 :
28151: LD_VAR 0 2
28155: PUSH
28156: LD_INT 1
28158: DOUBLE
28159: EQUAL
28160: IFTRUE 28164
28162: GO 28175
28164: POP
// bc_type := b_depot ; 2 :
28165: LD_ADDR_OWVAR 42
28169: PUSH
28170: LD_INT 0
28172: ST_TO_ADDR
28173: GO 28787
28175: LD_INT 2
28177: DOUBLE
28178: EQUAL
28179: IFTRUE 28183
28181: GO 28194
28183: POP
// bc_type := b_warehouse ; 3 :
28184: LD_ADDR_OWVAR 42
28188: PUSH
28189: LD_INT 1
28191: ST_TO_ADDR
28192: GO 28787
28194: LD_INT 3
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28213
28202: POP
// bc_type := b_lab ; 4 .. 9 :
28203: LD_ADDR_OWVAR 42
28207: PUSH
28208: LD_INT 6
28210: ST_TO_ADDR
28211: GO 28787
28213: LD_INT 4
28215: DOUBLE
28216: GREATEREQUAL
28217: IFFALSE 28225
28219: LD_INT 9
28221: DOUBLE
28222: LESSEQUAL
28223: IFTRUE 28227
28225: GO 28279
28227: POP
// begin bc_type := b_lab_half ;
28228: LD_ADDR_OWVAR 42
28232: PUSH
28233: LD_INT 7
28235: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28236: LD_ADDR_OWVAR 44
28240: PUSH
28241: LD_INT 10
28243: PUSH
28244: LD_INT 11
28246: PUSH
28247: LD_INT 12
28249: PUSH
28250: LD_INT 15
28252: PUSH
28253: LD_INT 14
28255: PUSH
28256: LD_INT 13
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: PUSH
28267: LD_VAR 0 2
28271: PUSH
28272: LD_INT 3
28274: MINUS
28275: ARRAY
28276: ST_TO_ADDR
// end ; 10 .. 13 :
28277: GO 28787
28279: LD_INT 10
28281: DOUBLE
28282: GREATEREQUAL
28283: IFFALSE 28291
28285: LD_INT 13
28287: DOUBLE
28288: LESSEQUAL
28289: IFTRUE 28293
28291: GO 28370
28293: POP
// begin bc_type := b_lab_full ;
28294: LD_ADDR_OWVAR 42
28298: PUSH
28299: LD_INT 8
28301: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28302: LD_ADDR_OWVAR 44
28306: PUSH
28307: LD_INT 10
28309: PUSH
28310: LD_INT 12
28312: PUSH
28313: LD_INT 14
28315: PUSH
28316: LD_INT 13
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: PUSH
28325: LD_VAR 0 2
28329: PUSH
28330: LD_INT 9
28332: MINUS
28333: ARRAY
28334: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28335: LD_ADDR_OWVAR 45
28339: PUSH
28340: LD_INT 11
28342: PUSH
28343: LD_INT 15
28345: PUSH
28346: LD_INT 12
28348: PUSH
28349: LD_INT 15
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: LD_VAR 0 2
28362: PUSH
28363: LD_INT 9
28365: MINUS
28366: ARRAY
28367: ST_TO_ADDR
// end ; 14 :
28368: GO 28787
28370: LD_INT 14
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// bc_type := b_workshop ; 15 :
28379: LD_ADDR_OWVAR 42
28383: PUSH
28384: LD_INT 2
28386: ST_TO_ADDR
28387: GO 28787
28389: LD_INT 15
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28408
28397: POP
// bc_type := b_factory ; 16 :
28398: LD_ADDR_OWVAR 42
28402: PUSH
28403: LD_INT 3
28405: ST_TO_ADDR
28406: GO 28787
28408: LD_INT 16
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28427
28416: POP
// bc_type := b_ext_gun ; 17 :
28417: LD_ADDR_OWVAR 42
28421: PUSH
28422: LD_INT 17
28424: ST_TO_ADDR
28425: GO 28787
28427: LD_INT 17
28429: DOUBLE
28430: EQUAL
28431: IFTRUE 28435
28433: GO 28463
28435: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28436: LD_ADDR_OWVAR 42
28440: PUSH
28441: LD_INT 19
28443: PUSH
28444: LD_INT 23
28446: PUSH
28447: LD_INT 19
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: PUSH
28455: LD_VAR 0 1
28459: ARRAY
28460: ST_TO_ADDR
28461: GO 28787
28463: LD_INT 18
28465: DOUBLE
28466: EQUAL
28467: IFTRUE 28471
28469: GO 28482
28471: POP
// bc_type := b_ext_radar ; 19 :
28472: LD_ADDR_OWVAR 42
28476: PUSH
28477: LD_INT 20
28479: ST_TO_ADDR
28480: GO 28787
28482: LD_INT 19
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28501
28490: POP
// bc_type := b_ext_radio ; 20 :
28491: LD_ADDR_OWVAR 42
28495: PUSH
28496: LD_INT 22
28498: ST_TO_ADDR
28499: GO 28787
28501: LD_INT 20
28503: DOUBLE
28504: EQUAL
28505: IFTRUE 28509
28507: GO 28520
28509: POP
// bc_type := b_ext_siberium ; 21 :
28510: LD_ADDR_OWVAR 42
28514: PUSH
28515: LD_INT 21
28517: ST_TO_ADDR
28518: GO 28787
28520: LD_INT 21
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28528
28526: GO 28539
28528: POP
// bc_type := b_ext_computer ; 22 :
28529: LD_ADDR_OWVAR 42
28533: PUSH
28534: LD_INT 24
28536: ST_TO_ADDR
28537: GO 28787
28539: LD_INT 22
28541: DOUBLE
28542: EQUAL
28543: IFTRUE 28547
28545: GO 28558
28547: POP
// bc_type := b_ext_track ; 23 :
28548: LD_ADDR_OWVAR 42
28552: PUSH
28553: LD_INT 16
28555: ST_TO_ADDR
28556: GO 28787
28558: LD_INT 23
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28566
28564: GO 28577
28566: POP
// bc_type := b_ext_laser ; 24 :
28567: LD_ADDR_OWVAR 42
28571: PUSH
28572: LD_INT 25
28574: ST_TO_ADDR
28575: GO 28787
28577: LD_INT 24
28579: DOUBLE
28580: EQUAL
28581: IFTRUE 28585
28583: GO 28596
28585: POP
// bc_type := b_control_tower ; 25 :
28586: LD_ADDR_OWVAR 42
28590: PUSH
28591: LD_INT 36
28593: ST_TO_ADDR
28594: GO 28787
28596: LD_INT 25
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28615
28604: POP
// bc_type := b_breastwork ; 26 :
28605: LD_ADDR_OWVAR 42
28609: PUSH
28610: LD_INT 31
28612: ST_TO_ADDR
28613: GO 28787
28615: LD_INT 26
28617: DOUBLE
28618: EQUAL
28619: IFTRUE 28623
28621: GO 28634
28623: POP
// bc_type := b_bunker ; 27 :
28624: LD_ADDR_OWVAR 42
28628: PUSH
28629: LD_INT 32
28631: ST_TO_ADDR
28632: GO 28787
28634: LD_INT 27
28636: DOUBLE
28637: EQUAL
28638: IFTRUE 28642
28640: GO 28653
28642: POP
// bc_type := b_turret ; 28 :
28643: LD_ADDR_OWVAR 42
28647: PUSH
28648: LD_INT 33
28650: ST_TO_ADDR
28651: GO 28787
28653: LD_INT 28
28655: DOUBLE
28656: EQUAL
28657: IFTRUE 28661
28659: GO 28672
28661: POP
// bc_type := b_armoury ; 29 :
28662: LD_ADDR_OWVAR 42
28666: PUSH
28667: LD_INT 4
28669: ST_TO_ADDR
28670: GO 28787
28672: LD_INT 29
28674: DOUBLE
28675: EQUAL
28676: IFTRUE 28680
28678: GO 28691
28680: POP
// bc_type := b_barracks ; 30 :
28681: LD_ADDR_OWVAR 42
28685: PUSH
28686: LD_INT 5
28688: ST_TO_ADDR
28689: GO 28787
28691: LD_INT 30
28693: DOUBLE
28694: EQUAL
28695: IFTRUE 28699
28697: GO 28710
28699: POP
// bc_type := b_solar_power ; 31 :
28700: LD_ADDR_OWVAR 42
28704: PUSH
28705: LD_INT 27
28707: ST_TO_ADDR
28708: GO 28787
28710: LD_INT 31
28712: DOUBLE
28713: EQUAL
28714: IFTRUE 28718
28716: GO 28729
28718: POP
// bc_type := b_oil_power ; 32 :
28719: LD_ADDR_OWVAR 42
28723: PUSH
28724: LD_INT 26
28726: ST_TO_ADDR
28727: GO 28787
28729: LD_INT 32
28731: DOUBLE
28732: EQUAL
28733: IFTRUE 28737
28735: GO 28748
28737: POP
// bc_type := b_siberite_power ; 33 :
28738: LD_ADDR_OWVAR 42
28742: PUSH
28743: LD_INT 28
28745: ST_TO_ADDR
28746: GO 28787
28748: LD_INT 33
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28767
28756: POP
// bc_type := b_oil_mine ; 34 :
28757: LD_ADDR_OWVAR 42
28761: PUSH
28762: LD_INT 29
28764: ST_TO_ADDR
28765: GO 28787
28767: LD_INT 34
28769: DOUBLE
28770: EQUAL
28771: IFTRUE 28775
28773: GO 28786
28775: POP
// bc_type := b_siberite_mine ; end ;
28776: LD_ADDR_OWVAR 42
28780: PUSH
28781: LD_INT 30
28783: ST_TO_ADDR
28784: GO 28787
28786: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28787: LD_ADDR_VAR 0 8
28791: PUSH
28792: LD_VAR 0 5
28796: PPUSH
28797: LD_VAR 0 6
28801: PPUSH
28802: LD_VAR 0 3
28806: PPUSH
28807: CALL_OW 47
28811: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28812: LD_OWVAR 42
28816: PUSH
28817: LD_INT 32
28819: PUSH
28820: LD_INT 33
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: IN
28827: IFFALSE 28843
// PlaceWeaponTurret ( b , weapon ) ;
28829: LD_VAR 0 8
28833: PPUSH
28834: LD_VAR 0 4
28838: PPUSH
28839: CALL_OW 431
// end ;
28843: LD_VAR 0 7
28847: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28848: LD_INT 0
28850: PPUSH
28851: PPUSH
28852: PPUSH
28853: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28854: LD_ADDR_VAR 0 4
28858: PUSH
28859: LD_INT 22
28861: PUSH
28862: LD_OWVAR 2
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 30
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 30
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PPUSH
28903: CALL_OW 69
28907: ST_TO_ADDR
// if not tmp then
28908: LD_VAR 0 4
28912: NOT
28913: IFFALSE 28917
// exit ;
28915: GO 28976
// for i in tmp do
28917: LD_ADDR_VAR 0 2
28921: PUSH
28922: LD_VAR 0 4
28926: PUSH
28927: FOR_IN
28928: IFFALSE 28974
// for j = 1 to 3 do
28930: LD_ADDR_VAR 0 3
28934: PUSH
28935: DOUBLE
28936: LD_INT 1
28938: DEC
28939: ST_TO_ADDR
28940: LD_INT 3
28942: PUSH
28943: FOR_TO
28944: IFFALSE 28970
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28946: LD_VAR 0 2
28950: PPUSH
28951: CALL_OW 274
28955: PPUSH
28956: LD_VAR 0 3
28960: PPUSH
28961: LD_INT 99999
28963: PPUSH
28964: CALL_OW 277
28968: GO 28943
28970: POP
28971: POP
28972: GO 28927
28974: POP
28975: POP
// end ;
28976: LD_VAR 0 1
28980: RET
// export function hHackSetLevel10 ; var i , j ; begin
28981: LD_INT 0
28983: PPUSH
28984: PPUSH
28985: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28986: LD_ADDR_VAR 0 2
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29059
// if IsSelected ( i ) then
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 306
29018: IFFALSE 29057
// begin for j := 1 to 4 do
29020: LD_ADDR_VAR 0 3
29024: PUSH
29025: DOUBLE
29026: LD_INT 1
29028: DEC
29029: ST_TO_ADDR
29030: LD_INT 4
29032: PUSH
29033: FOR_TO
29034: IFFALSE 29055
// SetSkill ( i , j , 10 ) ;
29036: LD_VAR 0 2
29040: PPUSH
29041: LD_VAR 0 3
29045: PPUSH
29046: LD_INT 10
29048: PPUSH
29049: CALL_OW 237
29053: GO 29033
29055: POP
29056: POP
// end ;
29057: GO 29006
29059: POP
29060: POP
// end ;
29061: LD_VAR 0 1
29065: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29066: LD_INT 0
29068: PPUSH
29069: PPUSH
29070: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29071: LD_ADDR_VAR 0 2
29075: PUSH
29076: LD_INT 22
29078: PUSH
29079: LD_OWVAR 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 21
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PPUSH
29102: CALL_OW 69
29106: PUSH
29107: FOR_IN
29108: IFFALSE 29149
// begin for j := 1 to 4 do
29110: LD_ADDR_VAR 0 3
29114: PUSH
29115: DOUBLE
29116: LD_INT 1
29118: DEC
29119: ST_TO_ADDR
29120: LD_INT 4
29122: PUSH
29123: FOR_TO
29124: IFFALSE 29145
// SetSkill ( i , j , 10 ) ;
29126: LD_VAR 0 2
29130: PPUSH
29131: LD_VAR 0 3
29135: PPUSH
29136: LD_INT 10
29138: PPUSH
29139: CALL_OW 237
29143: GO 29123
29145: POP
29146: POP
// end ;
29147: GO 29107
29149: POP
29150: POP
// end ;
29151: LD_VAR 0 1
29155: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29156: LD_INT 0
29158: PPUSH
// uc_side := your_side ;
29159: LD_ADDR_OWVAR 20
29163: PUSH
29164: LD_OWVAR 2
29168: ST_TO_ADDR
// uc_nation := nation ;
29169: LD_ADDR_OWVAR 21
29173: PUSH
29174: LD_VAR 0 1
29178: ST_TO_ADDR
// InitHc ;
29179: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29183: LD_INT 0
29185: PPUSH
29186: LD_VAR 0 2
29190: PPUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29200: LD_VAR 0 4
29204: PPUSH
29205: LD_VAR 0 5
29209: PPUSH
29210: CALL_OW 428
29214: PUSH
29215: LD_INT 0
29217: EQUAL
29218: IFFALSE 29242
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29220: CALL_OW 44
29224: PPUSH
29225: LD_VAR 0 4
29229: PPUSH
29230: LD_VAR 0 5
29234: PPUSH
29235: LD_INT 1
29237: PPUSH
29238: CALL_OW 48
// end ;
29242: LD_VAR 0 6
29246: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
// uc_side := your_side ;
29251: LD_ADDR_OWVAR 20
29255: PUSH
29256: LD_OWVAR 2
29260: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29261: LD_VAR 0 1
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 3
29274: PUSH
29275: LD_INT 4
29277: PUSH
29278: LD_INT 5
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: IN
29288: IFFALSE 29300
// uc_nation := nation_american else
29290: LD_ADDR_OWVAR 21
29294: PUSH
29295: LD_INT 1
29297: ST_TO_ADDR
29298: GO 29343
// if chassis in [ 11 , 12 , 13 , 14 ] then
29300: LD_VAR 0 1
29304: PUSH
29305: LD_INT 11
29307: PUSH
29308: LD_INT 12
29310: PUSH
29311: LD_INT 13
29313: PUSH
29314: LD_INT 14
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: IN
29323: IFFALSE 29335
// uc_nation := nation_arabian else
29325: LD_ADDR_OWVAR 21
29329: PUSH
29330: LD_INT 2
29332: ST_TO_ADDR
29333: GO 29343
// uc_nation := nation_russian ;
29335: LD_ADDR_OWVAR 21
29339: PUSH
29340: LD_INT 3
29342: ST_TO_ADDR
// vc_chassis := chassis ;
29343: LD_ADDR_OWVAR 37
29347: PUSH
29348: LD_VAR 0 1
29352: ST_TO_ADDR
// vc_engine := engine ;
29353: LD_ADDR_OWVAR 39
29357: PUSH
29358: LD_VAR 0 2
29362: ST_TO_ADDR
// vc_control := control ;
29363: LD_ADDR_OWVAR 38
29367: PUSH
29368: LD_VAR 0 3
29372: ST_TO_ADDR
// vc_weapon := weapon ;
29373: LD_ADDR_OWVAR 40
29377: PUSH
29378: LD_VAR 0 4
29382: ST_TO_ADDR
// un := CreateVehicle ;
29383: LD_ADDR_VAR 0 8
29387: PUSH
29388: CALL_OW 45
29392: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29393: LD_VAR 0 8
29397: PPUSH
29398: LD_INT 0
29400: PPUSH
29401: LD_INT 5
29403: PPUSH
29404: CALL_OW 12
29408: PPUSH
29409: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29413: LD_VAR 0 8
29417: PPUSH
29418: LD_VAR 0 5
29422: PPUSH
29423: LD_VAR 0 6
29427: PPUSH
29428: LD_INT 1
29430: PPUSH
29431: CALL_OW 48
// end ;
29435: LD_VAR 0 7
29439: RET
// export hInvincible ; every 1 do
29440: GO 29442
29442: DISABLE
// hInvincible := [ ] ;
29443: LD_ADDR_EXP 104
29447: PUSH
29448: EMPTY
29449: ST_TO_ADDR
29450: END
// every 10 do var i ;
29451: GO 29453
29453: DISABLE
29454: LD_INT 0
29456: PPUSH
// begin enable ;
29457: ENABLE
// if not hInvincible then
29458: LD_EXP 104
29462: NOT
29463: IFFALSE 29467
// exit ;
29465: GO 29511
// for i in hInvincible do
29467: LD_ADDR_VAR 0 1
29471: PUSH
29472: LD_EXP 104
29476: PUSH
29477: FOR_IN
29478: IFFALSE 29509
// if GetLives ( i ) < 1000 then
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 256
29489: PUSH
29490: LD_INT 1000
29492: LESS
29493: IFFALSE 29507
// SetLives ( i , 1000 ) ;
29495: LD_VAR 0 1
29499: PPUSH
29500: LD_INT 1000
29502: PPUSH
29503: CALL_OW 234
29507: GO 29477
29509: POP
29510: POP
// end ;
29511: PPOPN 1
29513: END
// export function hHackInvincible ; var i ; begin
29514: LD_INT 0
29516: PPUSH
29517: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 21
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: PPUSH
29551: CALL_OW 69
29555: PUSH
29556: FOR_IN
29557: IFFALSE 29618
// if IsSelected ( i ) then
29559: LD_VAR 0 2
29563: PPUSH
29564: CALL_OW 306
29568: IFFALSE 29616
// begin if i in hInvincible then
29570: LD_VAR 0 2
29574: PUSH
29575: LD_EXP 104
29579: IN
29580: IFFALSE 29600
// hInvincible := hInvincible diff i else
29582: LD_ADDR_EXP 104
29586: PUSH
29587: LD_EXP 104
29591: PUSH
29592: LD_VAR 0 2
29596: DIFF
29597: ST_TO_ADDR
29598: GO 29616
// hInvincible := hInvincible union i ;
29600: LD_ADDR_EXP 104
29604: PUSH
29605: LD_EXP 104
29609: PUSH
29610: LD_VAR 0 2
29614: UNION
29615: ST_TO_ADDR
// end ;
29616: GO 29556
29618: POP
29619: POP
// end ;
29620: LD_VAR 0 1
29624: RET
// export function hHackInvisible ; var i , j ; begin
29625: LD_INT 0
29627: PPUSH
29628: PPUSH
29629: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 21
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PPUSH
29645: CALL_OW 69
29649: PUSH
29650: FOR_IN
29651: IFFALSE 29675
// if IsSelected ( i ) then
29653: LD_VAR 0 2
29657: PPUSH
29658: CALL_OW 306
29662: IFFALSE 29673
// ComForceInvisible ( i ) ;
29664: LD_VAR 0 2
29668: PPUSH
29669: CALL_OW 496
29673: GO 29650
29675: POP
29676: POP
// end ;
29677: LD_VAR 0 1
29681: RET
// export function hHackChangeYourSide ; begin
29682: LD_INT 0
29684: PPUSH
// if your_side = 8 then
29685: LD_OWVAR 2
29689: PUSH
29690: LD_INT 8
29692: EQUAL
29693: IFFALSE 29705
// your_side := 0 else
29695: LD_ADDR_OWVAR 2
29699: PUSH
29700: LD_INT 0
29702: ST_TO_ADDR
29703: GO 29719
// your_side := your_side + 1 ;
29705: LD_ADDR_OWVAR 2
29709: PUSH
29710: LD_OWVAR 2
29714: PUSH
29715: LD_INT 1
29717: PLUS
29718: ST_TO_ADDR
// end ;
29719: LD_VAR 0 1
29723: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29724: LD_INT 0
29726: PPUSH
29727: PPUSH
29728: PPUSH
// for i in all_units do
29729: LD_ADDR_VAR 0 2
29733: PUSH
29734: LD_OWVAR 3
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29818
// if IsSelected ( i ) then
29742: LD_VAR 0 2
29746: PPUSH
29747: CALL_OW 306
29751: IFFALSE 29816
// begin j := GetSide ( i ) ;
29753: LD_ADDR_VAR 0 3
29757: PUSH
29758: LD_VAR 0 2
29762: PPUSH
29763: CALL_OW 255
29767: ST_TO_ADDR
// if j = 8 then
29768: LD_VAR 0 3
29772: PUSH
29773: LD_INT 8
29775: EQUAL
29776: IFFALSE 29788
// j := 0 else
29778: LD_ADDR_VAR 0 3
29782: PUSH
29783: LD_INT 0
29785: ST_TO_ADDR
29786: GO 29802
// j := j + 1 ;
29788: LD_ADDR_VAR 0 3
29792: PUSH
29793: LD_VAR 0 3
29797: PUSH
29798: LD_INT 1
29800: PLUS
29801: ST_TO_ADDR
// SetSide ( i , j ) ;
29802: LD_VAR 0 2
29806: PPUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 235
// end ;
29816: GO 29739
29818: POP
29819: POP
// end ;
29820: LD_VAR 0 1
29824: RET
// export function hHackFog ; begin
29825: LD_INT 0
29827: PPUSH
// FogOff ( true ) ;
29828: LD_INT 1
29830: PPUSH
29831: CALL_OW 344
// end ;
29835: LD_VAR 0 1
29839: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29840: LD_INT 0
29842: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29843: LD_VAR 0 1
29847: PPUSH
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_VAR 0 3
29857: PPUSH
29858: LD_INT 1
29860: PPUSH
29861: LD_INT 1
29863: PPUSH
29864: CALL_OW 483
// CenterOnXY ( x , y ) ;
29868: LD_VAR 0 2
29872: PPUSH
29873: LD_VAR 0 3
29877: PPUSH
29878: CALL_OW 84
// end ; end_of_file end_of_file
29882: LD_VAR 0 4
29886: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29887: LD_INT 0
29889: PPUSH
// ar_miner := 81 ;
29890: LD_ADDR_EXP 112
29894: PUSH
29895: LD_INT 81
29897: ST_TO_ADDR
// ar_crane := 88 ;
29898: LD_ADDR_EXP 111
29902: PUSH
29903: LD_INT 88
29905: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29906: LD_ADDR_EXP 106
29910: PUSH
29911: LD_INT 89
29913: ST_TO_ADDR
// us_hack := 99 ;
29914: LD_ADDR_EXP 107
29918: PUSH
29919: LD_INT 99
29921: ST_TO_ADDR
// us_artillery := 97 ;
29922: LD_ADDR_EXP 108
29926: PUSH
29927: LD_INT 97
29929: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29930: LD_ADDR_EXP 109
29934: PUSH
29935: LD_INT 91
29937: ST_TO_ADDR
// ar_mortar := 92 ;
29938: LD_ADDR_EXP 110
29942: PUSH
29943: LD_INT 92
29945: ST_TO_ADDR
// ru_radar := 98 ;
29946: LD_ADDR_EXP 105
29950: PUSH
29951: LD_INT 98
29953: ST_TO_ADDR
// tech_Artillery := 80 ;
29954: LD_ADDR_EXP 113
29958: PUSH
29959: LD_INT 80
29961: ST_TO_ADDR
// tech_RadMat := 81 ;
29962: LD_ADDR_EXP 114
29966: PUSH
29967: LD_INT 81
29969: ST_TO_ADDR
// tech_BasicTools := 82 ;
29970: LD_ADDR_EXP 115
29974: PUSH
29975: LD_INT 82
29977: ST_TO_ADDR
// tech_Cargo := 83 ;
29978: LD_ADDR_EXP 116
29982: PUSH
29983: LD_INT 83
29985: ST_TO_ADDR
// tech_Track := 84 ;
29986: LD_ADDR_EXP 117
29990: PUSH
29991: LD_INT 84
29993: ST_TO_ADDR
// tech_Crane := 85 ;
29994: LD_ADDR_EXP 118
29998: PUSH
29999: LD_INT 85
30001: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30002: LD_ADDR_EXP 119
30006: PUSH
30007: LD_INT 86
30009: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30010: LD_ADDR_EXP 120
30014: PUSH
30015: LD_INT 87
30017: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30018: LD_ADDR_EXP 121
30022: PUSH
30023: LD_INT 88
30025: ST_TO_ADDR
// class_mastodont := 31 ;
30026: LD_ADDR_EXP 122
30030: PUSH
30031: LD_INT 31
30033: ST_TO_ADDR
// class_horse := 21 ;
30034: LD_ADDR_EXP 123
30038: PUSH
30039: LD_INT 21
30041: ST_TO_ADDR
// end ;
30042: LD_VAR 0 1
30046: RET
// every 1 do
30047: GO 30049
30049: DISABLE
// InitGlobalVariables ; end_of_file
30050: CALL 29887 0 0
30054: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
// if exist_mode then
30059: LD_VAR 0 2
30063: IFFALSE 30088
// unit := CreateCharacter ( prefix & ident ) else
30065: LD_ADDR_VAR 0 5
30069: PUSH
30070: LD_VAR 0 3
30074: PUSH
30075: LD_VAR 0 1
30079: STR
30080: PPUSH
30081: CALL_OW 34
30085: ST_TO_ADDR
30086: GO 30103
// unit := NewCharacter ( ident ) ;
30088: LD_ADDR_VAR 0 5
30092: PUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: CALL_OW 25
30102: ST_TO_ADDR
// result := unit ;
30103: LD_ADDR_VAR 0 4
30107: PUSH
30108: LD_VAR 0 5
30112: ST_TO_ADDR
// end ;
30113: LD_VAR 0 4
30117: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30118: LD_INT 0
30120: PPUSH
30121: PPUSH
// if not side or not nation then
30122: LD_VAR 0 1
30126: NOT
30127: PUSH
30128: LD_VAR 0 2
30132: NOT
30133: OR
30134: IFFALSE 30138
// exit ;
30136: GO 30906
// case nation of nation_american :
30138: LD_VAR 0 2
30142: PUSH
30143: LD_INT 1
30145: DOUBLE
30146: EQUAL
30147: IFTRUE 30151
30149: GO 30365
30151: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30152: LD_ADDR_VAR 0 4
30156: PUSH
30157: LD_INT 35
30159: PUSH
30160: LD_INT 45
30162: PUSH
30163: LD_INT 46
30165: PUSH
30166: LD_INT 47
30168: PUSH
30169: LD_INT 82
30171: PUSH
30172: LD_INT 83
30174: PUSH
30175: LD_INT 84
30177: PUSH
30178: LD_INT 85
30180: PUSH
30181: LD_INT 86
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 6
30192: PUSH
30193: LD_INT 15
30195: PUSH
30196: LD_INT 16
30198: PUSH
30199: LD_INT 7
30201: PUSH
30202: LD_INT 12
30204: PUSH
30205: LD_INT 13
30207: PUSH
30208: LD_INT 10
30210: PUSH
30211: LD_INT 14
30213: PUSH
30214: LD_INT 20
30216: PUSH
30217: LD_INT 21
30219: PUSH
30220: LD_INT 22
30222: PUSH
30223: LD_INT 25
30225: PUSH
30226: LD_INT 32
30228: PUSH
30229: LD_INT 27
30231: PUSH
30232: LD_INT 36
30234: PUSH
30235: LD_INT 69
30237: PUSH
30238: LD_INT 39
30240: PUSH
30241: LD_INT 34
30243: PUSH
30244: LD_INT 40
30246: PUSH
30247: LD_INT 48
30249: PUSH
30250: LD_INT 49
30252: PUSH
30253: LD_INT 50
30255: PUSH
30256: LD_INT 51
30258: PUSH
30259: LD_INT 52
30261: PUSH
30262: LD_INT 53
30264: PUSH
30265: LD_INT 54
30267: PUSH
30268: LD_INT 55
30270: PUSH
30271: LD_INT 56
30273: PUSH
30274: LD_INT 57
30276: PUSH
30277: LD_INT 58
30279: PUSH
30280: LD_INT 59
30282: PUSH
30283: LD_INT 60
30285: PUSH
30286: LD_INT 61
30288: PUSH
30289: LD_INT 62
30291: PUSH
30292: LD_INT 80
30294: PUSH
30295: LD_INT 82
30297: PUSH
30298: LD_INT 83
30300: PUSH
30301: LD_INT 84
30303: PUSH
30304: LD_INT 85
30306: PUSH
30307: LD_INT 86
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
30363: GO 30830
30365: LD_INT 2
30367: DOUBLE
30368: EQUAL
30369: IFTRUE 30373
30371: GO 30599
30373: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30374: LD_ADDR_VAR 0 4
30378: PUSH
30379: LD_INT 35
30381: PUSH
30382: LD_INT 45
30384: PUSH
30385: LD_INT 46
30387: PUSH
30388: LD_INT 47
30390: PUSH
30391: LD_INT 82
30393: PUSH
30394: LD_INT 83
30396: PUSH
30397: LD_INT 84
30399: PUSH
30400: LD_INT 85
30402: PUSH
30403: LD_INT 87
30405: PUSH
30406: LD_INT 70
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 11
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 4
30420: PUSH
30421: LD_INT 5
30423: PUSH
30424: LD_INT 6
30426: PUSH
30427: LD_INT 15
30429: PUSH
30430: LD_INT 18
30432: PUSH
30433: LD_INT 7
30435: PUSH
30436: LD_INT 17
30438: PUSH
30439: LD_INT 8
30441: PUSH
30442: LD_INT 20
30444: PUSH
30445: LD_INT 21
30447: PUSH
30448: LD_INT 22
30450: PUSH
30451: LD_INT 72
30453: PUSH
30454: LD_INT 26
30456: PUSH
30457: LD_INT 69
30459: PUSH
30460: LD_INT 39
30462: PUSH
30463: LD_INT 40
30465: PUSH
30466: LD_INT 41
30468: PUSH
30469: LD_INT 42
30471: PUSH
30472: LD_INT 43
30474: PUSH
30475: LD_INT 48
30477: PUSH
30478: LD_INT 49
30480: PUSH
30481: LD_INT 50
30483: PUSH
30484: LD_INT 51
30486: PUSH
30487: LD_INT 52
30489: PUSH
30490: LD_INT 53
30492: PUSH
30493: LD_INT 54
30495: PUSH
30496: LD_INT 55
30498: PUSH
30499: LD_INT 56
30501: PUSH
30502: LD_INT 60
30504: PUSH
30505: LD_INT 61
30507: PUSH
30508: LD_INT 62
30510: PUSH
30511: LD_INT 66
30513: PUSH
30514: LD_INT 67
30516: PUSH
30517: LD_INT 68
30519: PUSH
30520: LD_INT 81
30522: PUSH
30523: LD_INT 82
30525: PUSH
30526: LD_INT 83
30528: PUSH
30529: LD_INT 84
30531: PUSH
30532: LD_INT 85
30534: PUSH
30535: LD_INT 87
30537: PUSH
30538: LD_INT 88
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: ST_TO_ADDR
30597: GO 30830
30599: LD_INT 3
30601: DOUBLE
30602: EQUAL
30603: IFTRUE 30607
30605: GO 30829
30607: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_INT 46
30615: PUSH
30616: LD_INT 47
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 82
30627: PUSH
30628: LD_INT 83
30630: PUSH
30631: LD_INT 84
30633: PUSH
30634: LD_INT 85
30636: PUSH
30637: LD_INT 86
30639: PUSH
30640: LD_INT 11
30642: PUSH
30643: LD_INT 9
30645: PUSH
30646: LD_INT 20
30648: PUSH
30649: LD_INT 19
30651: PUSH
30652: LD_INT 21
30654: PUSH
30655: LD_INT 24
30657: PUSH
30658: LD_INT 22
30660: PUSH
30661: LD_INT 25
30663: PUSH
30664: LD_INT 28
30666: PUSH
30667: LD_INT 29
30669: PUSH
30670: LD_INT 30
30672: PUSH
30673: LD_INT 31
30675: PUSH
30676: LD_INT 37
30678: PUSH
30679: LD_INT 38
30681: PUSH
30682: LD_INT 32
30684: PUSH
30685: LD_INT 27
30687: PUSH
30688: LD_INT 33
30690: PUSH
30691: LD_INT 69
30693: PUSH
30694: LD_INT 39
30696: PUSH
30697: LD_INT 34
30699: PUSH
30700: LD_INT 40
30702: PUSH
30703: LD_INT 71
30705: PUSH
30706: LD_INT 23
30708: PUSH
30709: LD_INT 44
30711: PUSH
30712: LD_INT 48
30714: PUSH
30715: LD_INT 49
30717: PUSH
30718: LD_INT 50
30720: PUSH
30721: LD_INT 51
30723: PUSH
30724: LD_INT 52
30726: PUSH
30727: LD_INT 53
30729: PUSH
30730: LD_INT 54
30732: PUSH
30733: LD_INT 55
30735: PUSH
30736: LD_INT 56
30738: PUSH
30739: LD_INT 57
30741: PUSH
30742: LD_INT 58
30744: PUSH
30745: LD_INT 59
30747: PUSH
30748: LD_INT 63
30750: PUSH
30751: LD_INT 64
30753: PUSH
30754: LD_INT 65
30756: PUSH
30757: LD_INT 82
30759: PUSH
30760: LD_INT 83
30762: PUSH
30763: LD_INT 84
30765: PUSH
30766: LD_INT 85
30768: PUSH
30769: LD_INT 86
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 30830
30829: POP
// if state > - 1 and state < 3 then
30830: LD_VAR 0 3
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: GREATER
30839: PUSH
30840: LD_VAR 0 3
30844: PUSH
30845: LD_INT 3
30847: LESS
30848: AND
30849: IFFALSE 30906
// for i in result do
30851: LD_ADDR_VAR 0 5
30855: PUSH
30856: LD_VAR 0 4
30860: PUSH
30861: FOR_IN
30862: IFFALSE 30904
// if GetTech ( i , side ) <> state then
30864: LD_VAR 0 5
30868: PPUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 321
30878: PUSH
30879: LD_VAR 0 3
30883: NONEQUAL
30884: IFFALSE 30902
// result := result diff i ;
30886: LD_ADDR_VAR 0 4
30890: PUSH
30891: LD_VAR 0 4
30895: PUSH
30896: LD_VAR 0 5
30900: DIFF
30901: ST_TO_ADDR
30902: GO 30861
30904: POP
30905: POP
// end ;
30906: LD_VAR 0 4
30910: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30911: LD_INT 0
30913: PPUSH
30914: PPUSH
30915: PPUSH
// result := true ;
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 1
30923: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: LD_VAR 0 2
30933: PPUSH
30934: CALL_OW 480
30938: ST_TO_ADDR
// if not tmp then
30939: LD_VAR 0 5
30943: NOT
30944: IFFALSE 30948
// exit ;
30946: GO 30997
// for i in tmp do
30948: LD_ADDR_VAR 0 4
30952: PUSH
30953: LD_VAR 0 5
30957: PUSH
30958: FOR_IN
30959: IFFALSE 30995
// if GetTech ( i , side ) <> state_researched then
30961: LD_VAR 0 4
30965: PPUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 321
30975: PUSH
30976: LD_INT 2
30978: NONEQUAL
30979: IFFALSE 30993
// begin result := false ;
30981: LD_ADDR_VAR 0 3
30985: PUSH
30986: LD_INT 0
30988: ST_TO_ADDR
// exit ;
30989: POP
30990: POP
30991: GO 30997
// end ;
30993: GO 30958
30995: POP
30996: POP
// end ;
30997: LD_VAR 0 3
31001: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31002: LD_INT 0
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
31014: PPUSH
31015: PPUSH
31016: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31017: LD_VAR 0 1
31021: NOT
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 257
31032: PUSH
31033: LD_INT 9
31035: NONEQUAL
31036: OR
31037: IFFALSE 31041
// exit ;
31039: GO 31614
// side := GetSide ( unit ) ;
31041: LD_ADDR_VAR 0 9
31045: PUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: CALL_OW 255
31055: ST_TO_ADDR
// tech_space := tech_spacanom ;
31056: LD_ADDR_VAR 0 12
31060: PUSH
31061: LD_INT 29
31063: ST_TO_ADDR
// tech_time := tech_taurad ;
31064: LD_ADDR_VAR 0 13
31068: PUSH
31069: LD_INT 28
31071: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31072: LD_ADDR_VAR 0 11
31076: PUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 310
31086: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31087: LD_VAR 0 11
31091: PPUSH
31092: CALL_OW 247
31096: PUSH
31097: LD_INT 2
31099: EQUAL
31100: IFFALSE 31104
// exit ;
31102: GO 31614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31104: LD_ADDR_VAR 0 8
31108: PUSH
31109: LD_INT 81
31111: PUSH
31112: LD_VAR 0 9
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: PUSH
31124: LD_INT 21
31126: PUSH
31127: LD_INT 3
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 69
31146: ST_TO_ADDR
// if not tmp then
31147: LD_VAR 0 8
31151: NOT
31152: IFFALSE 31156
// exit ;
31154: GO 31614
// if in_unit then
31156: LD_VAR 0 11
31160: IFFALSE 31184
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31162: LD_ADDR_VAR 0 10
31166: PUSH
31167: LD_VAR 0 8
31171: PPUSH
31172: LD_VAR 0 11
31176: PPUSH
31177: CALL_OW 74
31181: ST_TO_ADDR
31182: GO 31204
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31184: LD_ADDR_VAR 0 10
31188: PUSH
31189: LD_VAR 0 8
31193: PPUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 74
31203: ST_TO_ADDR
// if not enemy then
31204: LD_VAR 0 10
31208: NOT
31209: IFFALSE 31213
// exit ;
31211: GO 31614
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31213: LD_VAR 0 11
31217: PUSH
31218: LD_VAR 0 11
31222: PPUSH
31223: LD_VAR 0 10
31227: PPUSH
31228: CALL_OW 296
31232: PUSH
31233: LD_INT 13
31235: GREATER
31236: AND
31237: PUSH
31238: LD_VAR 0 1
31242: PPUSH
31243: LD_VAR 0 10
31247: PPUSH
31248: CALL_OW 296
31252: PUSH
31253: LD_INT 12
31255: GREATER
31256: OR
31257: IFFALSE 31261
// exit ;
31259: GO 31614
// missile := [ 1 ] ;
31261: LD_ADDR_VAR 0 14
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31272: LD_VAR 0 9
31276: PPUSH
31277: LD_VAR 0 12
31281: PPUSH
31282: CALL_OW 325
31286: IFFALSE 31315
// missile := Insert ( missile , missile + 1 , 2 ) ;
31288: LD_ADDR_VAR 0 14
31292: PUSH
31293: LD_VAR 0 14
31297: PPUSH
31298: LD_VAR 0 14
31302: PUSH
31303: LD_INT 1
31305: PLUS
31306: PPUSH
31307: LD_INT 2
31309: PPUSH
31310: CALL_OW 2
31314: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31315: LD_VAR 0 9
31319: PPUSH
31320: LD_VAR 0 13
31324: PPUSH
31325: CALL_OW 325
31329: PUSH
31330: LD_VAR 0 10
31334: PPUSH
31335: CALL_OW 255
31339: PPUSH
31340: LD_VAR 0 13
31344: PPUSH
31345: CALL_OW 325
31349: NOT
31350: AND
31351: IFFALSE 31380
// missile := Insert ( missile , missile + 1 , 3 ) ;
31353: LD_ADDR_VAR 0 14
31357: PUSH
31358: LD_VAR 0 14
31362: PPUSH
31363: LD_VAR 0 14
31367: PUSH
31368: LD_INT 1
31370: PLUS
31371: PPUSH
31372: LD_INT 3
31374: PPUSH
31375: CALL_OW 2
31379: ST_TO_ADDR
// if missile < 2 then
31380: LD_VAR 0 14
31384: PUSH
31385: LD_INT 2
31387: LESS
31388: IFFALSE 31392
// exit ;
31390: GO 31614
// x := GetX ( enemy ) ;
31392: LD_ADDR_VAR 0 4
31396: PUSH
31397: LD_VAR 0 10
31401: PPUSH
31402: CALL_OW 250
31406: ST_TO_ADDR
// y := GetY ( enemy ) ;
31407: LD_ADDR_VAR 0 5
31411: PUSH
31412: LD_VAR 0 10
31416: PPUSH
31417: CALL_OW 251
31421: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31422: LD_ADDR_VAR 0 6
31426: PUSH
31427: LD_VAR 0 4
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PPUSH
31436: LD_INT 1
31438: PPUSH
31439: CALL_OW 12
31443: PLUS
31444: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31445: LD_ADDR_VAR 0 7
31449: PUSH
31450: LD_VAR 0 5
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PPUSH
31459: LD_INT 1
31461: PPUSH
31462: CALL_OW 12
31466: PLUS
31467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31468: LD_VAR 0 6
31472: PPUSH
31473: LD_VAR 0 7
31477: PPUSH
31478: CALL_OW 488
31482: NOT
31483: IFFALSE 31505
// begin _x := x ;
31485: LD_ADDR_VAR 0 6
31489: PUSH
31490: LD_VAR 0 4
31494: ST_TO_ADDR
// _y := y ;
31495: LD_ADDR_VAR 0 7
31499: PUSH
31500: LD_VAR 0 5
31504: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31505: LD_ADDR_VAR 0 3
31509: PUSH
31510: LD_INT 1
31512: PPUSH
31513: LD_VAR 0 14
31517: PPUSH
31518: CALL_OW 12
31522: ST_TO_ADDR
// case i of 1 :
31523: LD_VAR 0 3
31527: PUSH
31528: LD_INT 1
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31553
31536: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31537: LD_VAR 0 1
31541: PPUSH
31542: LD_VAR 0 10
31546: PPUSH
31547: CALL_OW 115
31551: GO 31614
31553: LD_INT 2
31555: DOUBLE
31556: EQUAL
31557: IFTRUE 31561
31559: GO 31583
31561: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31562: LD_VAR 0 1
31566: PPUSH
31567: LD_VAR 0 6
31571: PPUSH
31572: LD_VAR 0 7
31576: PPUSH
31577: CALL_OW 153
31581: GO 31614
31583: LD_INT 3
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31613
31591: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31592: LD_VAR 0 1
31596: PPUSH
31597: LD_VAR 0 6
31601: PPUSH
31602: LD_VAR 0 7
31606: PPUSH
31607: CALL_OW 154
31611: GO 31614
31613: POP
// end ;
31614: LD_VAR 0 2
31618: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31619: LD_INT 0
31621: PPUSH
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
// if not unit or not building then
31627: LD_VAR 0 1
31631: NOT
31632: PUSH
31633: LD_VAR 0 2
31637: NOT
31638: OR
31639: IFFALSE 31643
// exit ;
31641: GO 31801
// x := GetX ( building ) ;
31643: LD_ADDR_VAR 0 5
31647: PUSH
31648: LD_VAR 0 2
31652: PPUSH
31653: CALL_OW 250
31657: ST_TO_ADDR
// y := GetY ( building ) ;
31658: LD_ADDR_VAR 0 6
31662: PUSH
31663: LD_VAR 0 2
31667: PPUSH
31668: CALL_OW 251
31672: ST_TO_ADDR
// for i = 0 to 5 do
31673: LD_ADDR_VAR 0 4
31677: PUSH
31678: DOUBLE
31679: LD_INT 0
31681: DEC
31682: ST_TO_ADDR
31683: LD_INT 5
31685: PUSH
31686: FOR_TO
31687: IFFALSE 31799
// begin _x := ShiftX ( x , i , 3 ) ;
31689: LD_ADDR_VAR 0 7
31693: PUSH
31694: LD_VAR 0 5
31698: PPUSH
31699: LD_VAR 0 4
31703: PPUSH
31704: LD_INT 3
31706: PPUSH
31707: CALL_OW 272
31711: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31712: LD_ADDR_VAR 0 8
31716: PUSH
31717: LD_VAR 0 6
31721: PPUSH
31722: LD_VAR 0 4
31726: PPUSH
31727: LD_INT 3
31729: PPUSH
31730: CALL_OW 273
31734: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31735: LD_VAR 0 7
31739: PPUSH
31740: LD_VAR 0 8
31744: PPUSH
31745: CALL_OW 488
31749: NOT
31750: IFFALSE 31754
// continue ;
31752: GO 31686
// if HexInfo ( _x , _y ) = 0 then
31754: LD_VAR 0 7
31758: PPUSH
31759: LD_VAR 0 8
31763: PPUSH
31764: CALL_OW 428
31768: PUSH
31769: LD_INT 0
31771: EQUAL
31772: IFFALSE 31797
// begin ComMoveXY ( unit , _x , _y ) ;
31774: LD_VAR 0 1
31778: PPUSH
31779: LD_VAR 0 7
31783: PPUSH
31784: LD_VAR 0 8
31788: PPUSH
31789: CALL_OW 111
// exit ;
31793: POP
31794: POP
31795: GO 31801
// end ; end ;
31797: GO 31686
31799: POP
31800: POP
// end ;
31801: LD_VAR 0 3
31805: RET
// export function ScanBase ( side , base_area ) ; begin
31806: LD_INT 0
31808: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_VAR 0 2
31818: PPUSH
31819: LD_INT 81
31821: PUSH
31822: LD_VAR 0 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PPUSH
31831: CALL_OW 70
31835: ST_TO_ADDR
// end ;
31836: LD_VAR 0 3
31840: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
31845: PPUSH
31846: PPUSH
// result := false ;
31847: LD_ADDR_VAR 0 2
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
// side := GetSide ( unit ) ;
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 255
31869: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: LD_VAR 0 1
31879: PPUSH
31880: CALL_OW 248
31884: ST_TO_ADDR
// case nat of 1 :
31885: LD_VAR 0 4
31889: PUSH
31890: LD_INT 1
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31909
31898: POP
// tech := tech_lassight ; 2 :
31899: LD_ADDR_VAR 0 5
31903: PUSH
31904: LD_INT 12
31906: ST_TO_ADDR
31907: GO 31948
31909: LD_INT 2
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31928
31917: POP
// tech := tech_mortar ; 3 :
31918: LD_ADDR_VAR 0 5
31922: PUSH
31923: LD_INT 41
31925: ST_TO_ADDR
31926: GO 31948
31928: LD_INT 3
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31947
31936: POP
// tech := tech_bazooka ; end ;
31937: LD_ADDR_VAR 0 5
31941: PUSH
31942: LD_INT 44
31944: ST_TO_ADDR
31945: GO 31948
31947: POP
// if Researched ( side , tech ) then
31948: LD_VAR 0 3
31952: PPUSH
31953: LD_VAR 0 5
31957: PPUSH
31958: CALL_OW 325
31962: IFFALSE 31989
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31964: LD_ADDR_VAR 0 2
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: LD_INT 8
31974: PUSH
31975: LD_INT 9
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: PUSH
31983: LD_VAR 0 4
31987: ARRAY
31988: ST_TO_ADDR
// end ;
31989: LD_VAR 0 2
31993: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31994: LD_INT 0
31996: PPUSH
31997: PPUSH
31998: PPUSH
// if not mines then
31999: LD_VAR 0 2
32003: NOT
32004: IFFALSE 32008
// exit ;
32006: GO 32152
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32008: LD_ADDR_VAR 0 5
32012: PUSH
32013: LD_INT 81
32015: PUSH
32016: LD_VAR 0 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 21
32030: PUSH
32031: LD_INT 3
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL_OW 69
32050: ST_TO_ADDR
// for i in mines do
32051: LD_ADDR_VAR 0 4
32055: PUSH
32056: LD_VAR 0 2
32060: PUSH
32061: FOR_IN
32062: IFFALSE 32150
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32064: LD_VAR 0 4
32068: PUSH
32069: LD_INT 1
32071: ARRAY
32072: PPUSH
32073: LD_VAR 0 4
32077: PUSH
32078: LD_INT 2
32080: ARRAY
32081: PPUSH
32082: CALL_OW 458
32086: NOT
32087: IFFALSE 32091
// continue ;
32089: GO 32061
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32091: LD_VAR 0 4
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PPUSH
32100: LD_VAR 0 4
32104: PUSH
32105: LD_INT 2
32107: ARRAY
32108: PPUSH
32109: CALL_OW 428
32113: PUSH
32114: LD_VAR 0 5
32118: IN
32119: IFFALSE 32148
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32121: LD_VAR 0 4
32125: PUSH
32126: LD_INT 1
32128: ARRAY
32129: PPUSH
32130: LD_VAR 0 4
32134: PUSH
32135: LD_INT 2
32137: ARRAY
32138: PPUSH
32139: LD_VAR 0 1
32143: PPUSH
32144: CALL_OW 456
// end ;
32148: GO 32061
32150: POP
32151: POP
// end ;
32152: LD_VAR 0 3
32156: RET
// export function Count ( array ) ; var i ; begin
32157: LD_INT 0
32159: PPUSH
32160: PPUSH
// result := 0 ;
32161: LD_ADDR_VAR 0 2
32165: PUSH
32166: LD_INT 0
32168: ST_TO_ADDR
// for i in array do
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_VAR 0 1
32178: PUSH
32179: FOR_IN
32180: IFFALSE 32204
// if i then
32182: LD_VAR 0 3
32186: IFFALSE 32202
// result := result + 1 ;
32188: LD_ADDR_VAR 0 2
32192: PUSH
32193: LD_VAR 0 2
32197: PUSH
32198: LD_INT 1
32200: PLUS
32201: ST_TO_ADDR
32202: GO 32179
32204: POP
32205: POP
// end ;
32206: LD_VAR 0 2
32210: RET
// export function IsEmpty ( building ) ; begin
32211: LD_INT 0
32213: PPUSH
// if not building then
32214: LD_VAR 0 1
32218: NOT
32219: IFFALSE 32223
// exit ;
32221: GO 32266
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_VAR 0 1
32232: PUSH
32233: LD_INT 22
32235: PUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 255
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 58
32252: PUSH
32253: EMPTY
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PPUSH
32260: CALL_OW 69
32264: IN
32265: ST_TO_ADDR
// end ;
32266: LD_VAR 0 2
32270: RET
// export function IsNotFull ( building ) ; begin
32271: LD_INT 0
32273: PPUSH
// if not building then
32274: LD_VAR 0 1
32278: NOT
32279: IFFALSE 32283
// exit ;
32281: GO 32302
// result := UnitsInside ( building ) < 6 ;
32283: LD_ADDR_VAR 0 2
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 313
32297: PUSH
32298: LD_INT 6
32300: LESS
32301: ST_TO_ADDR
// end ;
32302: LD_VAR 0 2
32306: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32307: LD_INT 0
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
// tmp := [ ] ;
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: EMPTY
32319: ST_TO_ADDR
// list := [ ] ;
32320: LD_ADDR_VAR 0 5
32324: PUSH
32325: EMPTY
32326: ST_TO_ADDR
// for i = 16 to 25 do
32327: LD_ADDR_VAR 0 4
32331: PUSH
32332: DOUBLE
32333: LD_INT 16
32335: DEC
32336: ST_TO_ADDR
32337: LD_INT 25
32339: PUSH
32340: FOR_TO
32341: IFFALSE 32414
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_VAR 0 3
32352: PUSH
32353: LD_INT 22
32355: PUSH
32356: LD_VAR 0 1
32360: PPUSH
32361: CALL_OW 255
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 91
32372: PUSH
32373: LD_VAR 0 1
32377: PUSH
32378: LD_INT 6
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 30
32388: PUSH
32389: LD_VAR 0 4
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: PPUSH
32406: CALL_OW 69
32410: ADD
32411: ST_TO_ADDR
32412: GO 32340
32414: POP
32415: POP
// for i = 1 to tmp do
32416: LD_ADDR_VAR 0 4
32420: PUSH
32421: DOUBLE
32422: LD_INT 1
32424: DEC
32425: ST_TO_ADDR
32426: LD_VAR 0 3
32430: PUSH
32431: FOR_TO
32432: IFFALSE 32520
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32434: LD_ADDR_VAR 0 5
32438: PUSH
32439: LD_VAR 0 5
32443: PUSH
32444: LD_VAR 0 3
32448: PUSH
32449: LD_VAR 0 4
32453: ARRAY
32454: PPUSH
32455: CALL_OW 266
32459: PUSH
32460: LD_VAR 0 3
32464: PUSH
32465: LD_VAR 0 4
32469: ARRAY
32470: PPUSH
32471: CALL_OW 250
32475: PUSH
32476: LD_VAR 0 3
32480: PUSH
32481: LD_VAR 0 4
32485: ARRAY
32486: PPUSH
32487: CALL_OW 251
32491: PUSH
32492: LD_VAR 0 3
32496: PUSH
32497: LD_VAR 0 4
32501: ARRAY
32502: PPUSH
32503: CALL_OW 254
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: PUSH
32514: EMPTY
32515: LIST
32516: ADD
32517: ST_TO_ADDR
32518: GO 32431
32520: POP
32521: POP
// result := list ;
32522: LD_ADDR_VAR 0 2
32526: PUSH
32527: LD_VAR 0 5
32531: ST_TO_ADDR
// end ;
32532: LD_VAR 0 2
32536: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32537: LD_INT 0
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
32544: PPUSH
32545: PPUSH
// if not factory then
32546: LD_VAR 0 1
32550: NOT
32551: IFFALSE 32555
// exit ;
32553: GO 33148
// if control = control_apeman then
32555: LD_VAR 0 4
32559: PUSH
32560: LD_INT 5
32562: EQUAL
32563: IFFALSE 32672
// begin tmp := UnitsInside ( factory ) ;
32565: LD_ADDR_VAR 0 8
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 313
32579: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32580: LD_VAR 0 8
32584: PPUSH
32585: LD_INT 25
32587: PUSH
32588: LD_INT 12
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 72
32599: NOT
32600: IFFALSE 32610
// control := control_manual ;
32602: LD_ADDR_VAR 0 4
32606: PUSH
32607: LD_INT 1
32609: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32610: LD_ADDR_VAR 0 8
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL 32307 0 1
32624: ST_TO_ADDR
// if tmp then
32625: LD_VAR 0 8
32629: IFFALSE 32672
// begin for i in tmp do
32631: LD_ADDR_VAR 0 7
32635: PUSH
32636: LD_VAR 0 8
32640: PUSH
32641: FOR_IN
32642: IFFALSE 32670
// if i [ 1 ] = b_ext_radio then
32644: LD_VAR 0 7
32648: PUSH
32649: LD_INT 1
32651: ARRAY
32652: PUSH
32653: LD_INT 22
32655: EQUAL
32656: IFFALSE 32668
// begin control := control_remote ;
32658: LD_ADDR_VAR 0 4
32662: PUSH
32663: LD_INT 2
32665: ST_TO_ADDR
// break ;
32666: GO 32670
// end ;
32668: GO 32641
32670: POP
32671: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32672: LD_VAR 0 1
32676: PPUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: LD_VAR 0 3
32686: PPUSH
32687: LD_VAR 0 4
32691: PPUSH
32692: LD_VAR 0 5
32696: PPUSH
32697: CALL_OW 448
32701: IFFALSE 32736
// begin result := [ chassis , engine , control , weapon ] ;
32703: LD_ADDR_VAR 0 6
32707: PUSH
32708: LD_VAR 0 2
32712: PUSH
32713: LD_VAR 0 3
32717: PUSH
32718: LD_VAR 0 4
32722: PUSH
32723: LD_VAR 0 5
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// exit ;
32734: GO 33148
// end ; _chassis := AvailableChassisList ( factory ) ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: CALL_OW 475
32750: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32751: LD_ADDR_VAR 0 11
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 476
32765: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32766: LD_ADDR_VAR 0 12
32770: PUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: CALL_OW 477
32780: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32781: LD_ADDR_VAR 0 10
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 478
32795: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32796: LD_VAR 0 9
32800: NOT
32801: PUSH
32802: LD_VAR 0 11
32806: NOT
32807: OR
32808: PUSH
32809: LD_VAR 0 12
32813: NOT
32814: OR
32815: PUSH
32816: LD_VAR 0 10
32820: NOT
32821: OR
32822: IFFALSE 32857
// begin result := [ chassis , engine , control , weapon ] ;
32824: LD_ADDR_VAR 0 6
32828: PUSH
32829: LD_VAR 0 2
32833: PUSH
32834: LD_VAR 0 3
32838: PUSH
32839: LD_VAR 0 4
32843: PUSH
32844: LD_VAR 0 5
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
// exit ;
32855: GO 33148
// end ; if not chassis in _chassis then
32857: LD_VAR 0 2
32861: PUSH
32862: LD_VAR 0 9
32866: IN
32867: NOT
32868: IFFALSE 32894
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32870: LD_ADDR_VAR 0 2
32874: PUSH
32875: LD_VAR 0 9
32879: PUSH
32880: LD_INT 1
32882: PPUSH
32883: LD_VAR 0 9
32887: PPUSH
32888: CALL_OW 12
32892: ARRAY
32893: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32894: LD_VAR 0 2
32898: PPUSH
32899: LD_VAR 0 3
32903: PPUSH
32904: CALL 33153 0 2
32908: NOT
32909: IFFALSE 32968
// repeat engine := _engine [ 1 ] ;
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: LD_VAR 0 11
32920: PUSH
32921: LD_INT 1
32923: ARRAY
32924: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32925: LD_ADDR_VAR 0 11
32929: PUSH
32930: LD_VAR 0 11
32934: PPUSH
32935: LD_INT 1
32937: PPUSH
32938: CALL_OW 3
32942: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32943: LD_VAR 0 2
32947: PPUSH
32948: LD_VAR 0 3
32952: PPUSH
32953: CALL 33153 0 2
32957: PUSH
32958: LD_VAR 0 11
32962: PUSH
32963: EMPTY
32964: EQUAL
32965: OR
32966: IFFALSE 32911
// if not control in _control then
32968: LD_VAR 0 4
32972: PUSH
32973: LD_VAR 0 12
32977: IN
32978: NOT
32979: IFFALSE 33005
// control := _control [ rand ( 1 , _control ) ] ;
32981: LD_ADDR_VAR 0 4
32985: PUSH
32986: LD_VAR 0 12
32990: PUSH
32991: LD_INT 1
32993: PPUSH
32994: LD_VAR 0 12
32998: PPUSH
32999: CALL_OW 12
33003: ARRAY
33004: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33005: LD_VAR 0 2
33009: PPUSH
33010: LD_VAR 0 5
33014: PPUSH
33015: CALL 33373 0 2
33019: NOT
33020: IFFALSE 33079
// repeat weapon := _weapon [ 1 ] ;
33022: LD_ADDR_VAR 0 5
33026: PUSH
33027: LD_VAR 0 10
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33036: LD_ADDR_VAR 0 10
33040: PUSH
33041: LD_VAR 0 10
33045: PPUSH
33046: LD_INT 1
33048: PPUSH
33049: CALL_OW 3
33053: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33054: LD_VAR 0 2
33058: PPUSH
33059: LD_VAR 0 5
33063: PPUSH
33064: CALL 33373 0 2
33068: PUSH
33069: LD_VAR 0 10
33073: PUSH
33074: EMPTY
33075: EQUAL
33076: OR
33077: IFFALSE 33022
// result := [ ] ;
33079: LD_ADDR_VAR 0 6
33083: PUSH
33084: EMPTY
33085: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33086: LD_VAR 0 1
33090: PPUSH
33091: LD_VAR 0 2
33095: PPUSH
33096: LD_VAR 0 3
33100: PPUSH
33101: LD_VAR 0 4
33105: PPUSH
33106: LD_VAR 0 5
33110: PPUSH
33111: CALL_OW 448
33115: IFFALSE 33148
// result := [ chassis , engine , control , weapon ] ;
33117: LD_ADDR_VAR 0 6
33121: PUSH
33122: LD_VAR 0 2
33126: PUSH
33127: LD_VAR 0 3
33131: PUSH
33132: LD_VAR 0 4
33136: PUSH
33137: LD_VAR 0 5
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// end ;
33148: LD_VAR 0 6
33152: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33153: LD_INT 0
33155: PPUSH
// if not chassis or not engine then
33156: LD_VAR 0 1
33160: NOT
33161: PUSH
33162: LD_VAR 0 2
33166: NOT
33167: OR
33168: IFFALSE 33172
// exit ;
33170: GO 33368
// case engine of engine_solar :
33172: LD_VAR 0 2
33176: PUSH
33177: LD_INT 2
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33223
33185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 11
33193: PUSH
33194: LD_INT 12
33196: PUSH
33197: LD_INT 13
33199: PUSH
33200: LD_INT 14
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
33221: GO 33352
33223: LD_INT 1
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33293
33231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33232: LD_ADDR_VAR 0 3
33236: PUSH
33237: LD_INT 11
33239: PUSH
33240: LD_INT 12
33242: PUSH
33243: LD_INT 13
33245: PUSH
33246: LD_INT 14
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 4
33260: PUSH
33261: LD_INT 5
33263: PUSH
33264: LD_INT 21
33266: PUSH
33267: LD_INT 23
33269: PUSH
33270: LD_INT 22
33272: PUSH
33273: LD_INT 24
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: ST_TO_ADDR
33291: GO 33352
33293: LD_INT 3
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33351
33301: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 13
33309: PUSH
33310: LD_INT 14
33312: PUSH
33313: LD_INT 2
33315: PUSH
33316: LD_INT 3
33318: PUSH
33319: LD_INT 4
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: LD_INT 21
33327: PUSH
33328: LD_INT 22
33330: PUSH
33331: LD_INT 23
33333: PUSH
33334: LD_INT 24
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: ST_TO_ADDR
33349: GO 33352
33351: POP
// result := ( chassis in result ) ;
33352: LD_ADDR_VAR 0 3
33356: PUSH
33357: LD_VAR 0 1
33361: PUSH
33362: LD_VAR 0 3
33366: IN
33367: ST_TO_ADDR
// end ;
33368: LD_VAR 0 3
33372: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33373: LD_INT 0
33375: PPUSH
// if not chassis or not weapon then
33376: LD_VAR 0 1
33380: NOT
33381: PUSH
33382: LD_VAR 0 2
33386: NOT
33387: OR
33388: IFFALSE 33392
// exit ;
33390: GO 34454
// case weapon of us_machine_gun :
33392: LD_VAR 0 2
33396: PUSH
33397: LD_INT 2
33399: DOUBLE
33400: EQUAL
33401: IFTRUE 33405
33403: GO 33435
33405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33406: LD_ADDR_VAR 0 3
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: LD_INT 4
33422: PUSH
33423: LD_INT 5
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
33433: GO 34438
33435: LD_INT 3
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33473
33443: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
33471: GO 34438
33473: LD_INT 11
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33511
33481: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: ST_TO_ADDR
33509: GO 34438
33511: LD_INT 4
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33519
33517: GO 33545
33519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 3
33530: PUSH
33531: LD_INT 4
33533: PUSH
33534: LD_INT 5
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: ST_TO_ADDR
33543: GO 34438
33545: LD_INT 5
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33579
33553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
33577: GO 34438
33579: LD_INT 9
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33587
33585: GO 33613
33587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33588: LD_ADDR_VAR 0 3
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 4
33601: PUSH
33602: LD_INT 5
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
33611: GO 34438
33613: LD_INT 7
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33647
33621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33622: LD_ADDR_VAR 0 3
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 34438
33647: LD_INT 12
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33681
33655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
33679: GO 34438
33681: LD_INT 13
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33715
33689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33690: LD_ADDR_VAR 0 3
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: LD_INT 4
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
33713: GO 34438
33715: LD_INT 14
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33741
33723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_INT 4
33731: PUSH
33732: LD_INT 5
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: ST_TO_ADDR
33739: GO 34438
33741: LD_INT 6
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33767
33749: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: ST_TO_ADDR
33765: GO 34438
33767: LD_INT 10
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33793
33775: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_INT 4
33783: PUSH
33784: LD_INT 5
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: ST_TO_ADDR
33791: GO 34438
33793: LD_INT 22
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 33827
33801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_INT 11
33809: PUSH
33810: LD_INT 12
33812: PUSH
33813: LD_INT 13
33815: PUSH
33816: LD_INT 14
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
33825: GO 34438
33827: LD_INT 23
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33835
33833: GO 33861
33835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33836: LD_ADDR_VAR 0 3
33840: PUSH
33841: LD_INT 11
33843: PUSH
33844: LD_INT 12
33846: PUSH
33847: LD_INT 13
33849: PUSH
33850: LD_INT 14
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
33859: GO 34438
33861: LD_INT 24
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33869
33867: GO 33895
33869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_INT 11
33877: PUSH
33878: LD_INT 12
33880: PUSH
33881: LD_INT 13
33883: PUSH
33884: LD_INT 14
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
33893: GO 34438
33895: LD_INT 30
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33929
33903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: LD_INT 11
33911: PUSH
33912: LD_INT 12
33914: PUSH
33915: LD_INT 13
33917: PUSH
33918: LD_INT 14
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34438
33929: LD_INT 25
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33955
33937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_INT 13
33945: PUSH
33946: LD_INT 14
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: ST_TO_ADDR
33953: GO 34438
33955: LD_INT 27
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 33981
33963: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33964: LD_ADDR_VAR 0 3
33968: PUSH
33969: LD_INT 13
33971: PUSH
33972: LD_INT 14
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: ST_TO_ADDR
33979: GO 34438
33981: LD_EXP 110
33985: DOUBLE
33986: EQUAL
33987: IFTRUE 33991
33989: GO 34017
33991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33992: LD_ADDR_VAR 0 3
33996: PUSH
33997: LD_INT 11
33999: PUSH
34000: LD_INT 12
34002: PUSH
34003: LD_INT 13
34005: PUSH
34006: LD_INT 14
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: ST_TO_ADDR
34015: GO 34438
34017: LD_INT 28
34019: DOUBLE
34020: EQUAL
34021: IFTRUE 34025
34023: GO 34043
34025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34026: LD_ADDR_VAR 0 3
34030: PUSH
34031: LD_INT 13
34033: PUSH
34034: LD_INT 14
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: ST_TO_ADDR
34041: GO 34438
34043: LD_INT 29
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34051
34049: GO 34069
34051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34052: LD_ADDR_VAR 0 3
34056: PUSH
34057: LD_INT 13
34059: PUSH
34060: LD_INT 14
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: ST_TO_ADDR
34067: GO 34438
34069: LD_INT 31
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34095
34077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 13
34085: PUSH
34086: LD_INT 14
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: ST_TO_ADDR
34093: GO 34438
34095: LD_INT 26
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34121
34103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 13
34111: PUSH
34112: LD_INT 14
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: ST_TO_ADDR
34119: GO 34438
34121: LD_INT 42
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34155
34129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_INT 21
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_INT 23
34143: PUSH
34144: LD_INT 24
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: ST_TO_ADDR
34153: GO 34438
34155: LD_INT 43
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34189
34163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_INT 21
34171: PUSH
34172: LD_INT 22
34174: PUSH
34175: LD_INT 23
34177: PUSH
34178: LD_INT 24
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
34187: GO 34438
34189: LD_INT 44
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34223
34197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 21
34205: PUSH
34206: LD_INT 22
34208: PUSH
34209: LD_INT 23
34211: PUSH
34212: LD_INT 24
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
34221: GO 34438
34223: LD_INT 45
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34257
34231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34232: LD_ADDR_VAR 0 3
34236: PUSH
34237: LD_INT 21
34239: PUSH
34240: LD_INT 22
34242: PUSH
34243: LD_INT 23
34245: PUSH
34246: LD_INT 24
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
34255: GO 34438
34257: LD_INT 49
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34291
34265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34266: LD_ADDR_VAR 0 3
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 22
34276: PUSH
34277: LD_INT 23
34279: PUSH
34280: LD_INT 24
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: ST_TO_ADDR
34289: GO 34438
34291: LD_INT 51
34293: DOUBLE
34294: EQUAL
34295: IFTRUE 34299
34297: GO 34325
34299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: LD_INT 21
34307: PUSH
34308: LD_INT 22
34310: PUSH
34311: LD_INT 23
34313: PUSH
34314: LD_INT 24
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
34323: GO 34438
34325: LD_INT 52
34327: DOUBLE
34328: EQUAL
34329: IFTRUE 34333
34331: GO 34359
34333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_INT 21
34341: PUSH
34342: LD_INT 22
34344: PUSH
34345: LD_INT 23
34347: PUSH
34348: LD_INT 24
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
34357: GO 34438
34359: LD_INT 53
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34385
34367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: LD_INT 23
34375: PUSH
34376: LD_INT 24
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: ST_TO_ADDR
34383: GO 34438
34385: LD_INT 46
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34393
34391: GO 34411
34393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34394: LD_ADDR_VAR 0 3
34398: PUSH
34399: LD_INT 23
34401: PUSH
34402: LD_INT 24
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: ST_TO_ADDR
34409: GO 34438
34411: LD_INT 47
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34419
34417: GO 34437
34419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 23
34427: PUSH
34428: LD_INT 24
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 34438
34437: POP
// result := ( chassis in result ) ;
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_VAR 0 1
34447: PUSH
34448: LD_VAR 0 3
34452: IN
34453: ST_TO_ADDR
// end ;
34454: LD_VAR 0 3
34458: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
// result := array ;
34468: LD_ADDR_VAR 0 5
34472: PUSH
34473: LD_VAR 0 1
34477: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34478: LD_VAR 0 1
34482: NOT
34483: PUSH
34484: LD_VAR 0 2
34488: NOT
34489: OR
34490: PUSH
34491: LD_VAR 0 3
34495: NOT
34496: OR
34497: PUSH
34498: LD_VAR 0 2
34502: PUSH
34503: LD_VAR 0 1
34507: GREATER
34508: OR
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_VAR 0 1
34519: GREATER
34520: OR
34521: IFFALSE 34525
// exit ;
34523: GO 34821
// if direction then
34525: LD_VAR 0 4
34529: IFFALSE 34593
// begin d := 1 ;
34531: LD_ADDR_VAR 0 9
34535: PUSH
34536: LD_INT 1
34538: ST_TO_ADDR
// if i_from > i_to then
34539: LD_VAR 0 2
34543: PUSH
34544: LD_VAR 0 3
34548: GREATER
34549: IFFALSE 34575
// length := ( array - i_from ) + i_to else
34551: LD_ADDR_VAR 0 11
34555: PUSH
34556: LD_VAR 0 1
34560: PUSH
34561: LD_VAR 0 2
34565: MINUS
34566: PUSH
34567: LD_VAR 0 3
34571: PLUS
34572: ST_TO_ADDR
34573: GO 34591
// length := i_to - i_from ;
34575: LD_ADDR_VAR 0 11
34579: PUSH
34580: LD_VAR 0 3
34584: PUSH
34585: LD_VAR 0 2
34589: MINUS
34590: ST_TO_ADDR
// end else
34591: GO 34654
// begin d := - 1 ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: ST_TO_ADDR
// if i_from > i_to then
34602: LD_VAR 0 2
34606: PUSH
34607: LD_VAR 0 3
34611: GREATER
34612: IFFALSE 34632
// length := i_from - i_to else
34614: LD_ADDR_VAR 0 11
34618: PUSH
34619: LD_VAR 0 2
34623: PUSH
34624: LD_VAR 0 3
34628: MINUS
34629: ST_TO_ADDR
34630: GO 34654
// length := ( array - i_to ) + i_from ;
34632: LD_ADDR_VAR 0 11
34636: PUSH
34637: LD_VAR 0 1
34641: PUSH
34642: LD_VAR 0 3
34646: MINUS
34647: PUSH
34648: LD_VAR 0 2
34652: PLUS
34653: ST_TO_ADDR
// end ; if not length then
34654: LD_VAR 0 11
34658: NOT
34659: IFFALSE 34663
// exit ;
34661: GO 34821
// tmp := array ;
34663: LD_ADDR_VAR 0 10
34667: PUSH
34668: LD_VAR 0 1
34672: ST_TO_ADDR
// for i = 1 to length do
34673: LD_ADDR_VAR 0 6
34677: PUSH
34678: DOUBLE
34679: LD_INT 1
34681: DEC
34682: ST_TO_ADDR
34683: LD_VAR 0 11
34687: PUSH
34688: FOR_TO
34689: IFFALSE 34809
// begin for j = 1 to array do
34691: LD_ADDR_VAR 0 7
34695: PUSH
34696: DOUBLE
34697: LD_INT 1
34699: DEC
34700: ST_TO_ADDR
34701: LD_VAR 0 1
34705: PUSH
34706: FOR_TO
34707: IFFALSE 34795
// begin k := j + d ;
34709: LD_ADDR_VAR 0 8
34713: PUSH
34714: LD_VAR 0 7
34718: PUSH
34719: LD_VAR 0 9
34723: PLUS
34724: ST_TO_ADDR
// if k > array then
34725: LD_VAR 0 8
34729: PUSH
34730: LD_VAR 0 1
34734: GREATER
34735: IFFALSE 34745
// k := 1 ;
34737: LD_ADDR_VAR 0 8
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
// if not k then
34745: LD_VAR 0 8
34749: NOT
34750: IFFALSE 34762
// k := array ;
34752: LD_ADDR_VAR 0 8
34756: PUSH
34757: LD_VAR 0 1
34761: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34762: LD_ADDR_VAR 0 10
34766: PUSH
34767: LD_VAR 0 10
34771: PPUSH
34772: LD_VAR 0 8
34776: PPUSH
34777: LD_VAR 0 1
34781: PUSH
34782: LD_VAR 0 7
34786: ARRAY
34787: PPUSH
34788: CALL_OW 1
34792: ST_TO_ADDR
// end ;
34793: GO 34706
34795: POP
34796: POP
// array := tmp ;
34797: LD_ADDR_VAR 0 1
34801: PUSH
34802: LD_VAR 0 10
34806: ST_TO_ADDR
// end ;
34807: GO 34688
34809: POP
34810: POP
// result := array ;
34811: LD_ADDR_VAR 0 5
34815: PUSH
34816: LD_VAR 0 1
34820: ST_TO_ADDR
// end ;
34821: LD_VAR 0 5
34825: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34826: LD_INT 0
34828: PPUSH
34829: PPUSH
// result := 0 ;
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 0
34837: ST_TO_ADDR
// if not array or not value in array then
34838: LD_VAR 0 1
34842: NOT
34843: PUSH
34844: LD_VAR 0 2
34848: PUSH
34849: LD_VAR 0 1
34853: IN
34854: NOT
34855: OR
34856: IFFALSE 34860
// exit ;
34858: GO 34914
// for i = 1 to array do
34860: LD_ADDR_VAR 0 4
34864: PUSH
34865: DOUBLE
34866: LD_INT 1
34868: DEC
34869: ST_TO_ADDR
34870: LD_VAR 0 1
34874: PUSH
34875: FOR_TO
34876: IFFALSE 34912
// if value = array [ i ] then
34878: LD_VAR 0 2
34882: PUSH
34883: LD_VAR 0 1
34887: PUSH
34888: LD_VAR 0 4
34892: ARRAY
34893: EQUAL
34894: IFFALSE 34910
// begin result := i ;
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_VAR 0 4
34905: ST_TO_ADDR
// exit ;
34906: POP
34907: POP
34908: GO 34914
// end ;
34910: GO 34875
34912: POP
34913: POP
// end ;
34914: LD_VAR 0 3
34918: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34919: LD_INT 0
34921: PPUSH
// vc_chassis := chassis ;
34922: LD_ADDR_OWVAR 37
34926: PUSH
34927: LD_VAR 0 1
34931: ST_TO_ADDR
// vc_engine := engine ;
34932: LD_ADDR_OWVAR 39
34936: PUSH
34937: LD_VAR 0 2
34941: ST_TO_ADDR
// vc_control := control ;
34942: LD_ADDR_OWVAR 38
34946: PUSH
34947: LD_VAR 0 3
34951: ST_TO_ADDR
// vc_weapon := weapon ;
34952: LD_ADDR_OWVAR 40
34956: PUSH
34957: LD_VAR 0 4
34961: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34962: LD_ADDR_OWVAR 41
34966: PUSH
34967: LD_VAR 0 5
34971: ST_TO_ADDR
// end ;
34972: LD_VAR 0 6
34976: RET
// export function WantPlant ( unit ) ; var task ; begin
34977: LD_INT 0
34979: PPUSH
34980: PPUSH
// result := false ;
34981: LD_ADDR_VAR 0 2
34985: PUSH
34986: LD_INT 0
34988: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 437
35003: ST_TO_ADDR
// if task then
35004: LD_VAR 0 3
35008: IFFALSE 35036
// if task [ 1 ] [ 1 ] = p then
35010: LD_VAR 0 3
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PUSH
35023: LD_STRING p
35025: EQUAL
35026: IFFALSE 35036
// result := true ;
35028: LD_ADDR_VAR 0 2
35032: PUSH
35033: LD_INT 1
35035: ST_TO_ADDR
// end ;
35036: LD_VAR 0 2
35040: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35041: LD_INT 0
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
// if pos < 1 then
35047: LD_VAR 0 2
35051: PUSH
35052: LD_INT 1
35054: LESS
35055: IFFALSE 35059
// exit ;
35057: GO 35362
// if pos = 1 then
35059: LD_VAR 0 2
35063: PUSH
35064: LD_INT 1
35066: EQUAL
35067: IFFALSE 35100
// result := Replace ( arr , pos [ 1 ] , value ) else
35069: LD_ADDR_VAR 0 4
35073: PUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: LD_VAR 0 2
35083: PUSH
35084: LD_INT 1
35086: ARRAY
35087: PPUSH
35088: LD_VAR 0 3
35092: PPUSH
35093: CALL_OW 1
35097: ST_TO_ADDR
35098: GO 35362
// begin tmp := arr ;
35100: LD_ADDR_VAR 0 6
35104: PUSH
35105: LD_VAR 0 1
35109: ST_TO_ADDR
// s_arr := [ tmp ] ;
35110: LD_ADDR_VAR 0 7
35114: PUSH
35115: LD_VAR 0 6
35119: PUSH
35120: EMPTY
35121: LIST
35122: ST_TO_ADDR
// for i = 1 to pos - 1 do
35123: LD_ADDR_VAR 0 5
35127: PUSH
35128: DOUBLE
35129: LD_INT 1
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 2
35137: PUSH
35138: LD_INT 1
35140: MINUS
35141: PUSH
35142: FOR_TO
35143: IFFALSE 35188
// begin tmp := tmp [ pos [ i ] ] ;
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_VAR 0 6
35154: PUSH
35155: LD_VAR 0 2
35159: PUSH
35160: LD_VAR 0 5
35164: ARRAY
35165: ARRAY
35166: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35167: LD_ADDR_VAR 0 7
35171: PUSH
35172: LD_VAR 0 7
35176: PUSH
35177: LD_VAR 0 6
35181: PUSH
35182: EMPTY
35183: LIST
35184: ADD
35185: ST_TO_ADDR
// end ;
35186: GO 35142
35188: POP
35189: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35190: LD_ADDR_VAR 0 6
35194: PUSH
35195: LD_VAR 0 6
35199: PPUSH
35200: LD_VAR 0 2
35204: PUSH
35205: LD_VAR 0 2
35209: ARRAY
35210: PPUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: CALL_OW 1
35220: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35221: LD_ADDR_VAR 0 7
35225: PUSH
35226: LD_VAR 0 7
35230: PPUSH
35231: LD_VAR 0 7
35235: PPUSH
35236: LD_VAR 0 6
35240: PPUSH
35241: CALL_OW 1
35245: ST_TO_ADDR
// for i = s_arr downto 2 do
35246: LD_ADDR_VAR 0 5
35250: PUSH
35251: DOUBLE
35252: LD_VAR 0 7
35256: INC
35257: ST_TO_ADDR
35258: LD_INT 2
35260: PUSH
35261: FOR_DOWNTO
35262: IFFALSE 35346
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35264: LD_ADDR_VAR 0 6
35268: PUSH
35269: LD_VAR 0 7
35273: PUSH
35274: LD_VAR 0 5
35278: PUSH
35279: LD_INT 1
35281: MINUS
35282: ARRAY
35283: PPUSH
35284: LD_VAR 0 2
35288: PUSH
35289: LD_VAR 0 5
35293: PUSH
35294: LD_INT 1
35296: MINUS
35297: ARRAY
35298: PPUSH
35299: LD_VAR 0 7
35303: PUSH
35304: LD_VAR 0 5
35308: ARRAY
35309: PPUSH
35310: CALL_OW 1
35314: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35315: LD_ADDR_VAR 0 7
35319: PUSH
35320: LD_VAR 0 7
35324: PPUSH
35325: LD_VAR 0 5
35329: PUSH
35330: LD_INT 1
35332: MINUS
35333: PPUSH
35334: LD_VAR 0 6
35338: PPUSH
35339: CALL_OW 1
35343: ST_TO_ADDR
// end ;
35344: GO 35261
35346: POP
35347: POP
// result := s_arr [ 1 ] ;
35348: LD_ADDR_VAR 0 4
35352: PUSH
35353: LD_VAR 0 7
35357: PUSH
35358: LD_INT 1
35360: ARRAY
35361: ST_TO_ADDR
// end ; end ;
35362: LD_VAR 0 4
35366: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35367: LD_INT 0
35369: PPUSH
35370: PPUSH
// if not list then
35371: LD_VAR 0 1
35375: NOT
35376: IFFALSE 35380
// exit ;
35378: GO 35471
// i := list [ pos1 ] ;
35380: LD_ADDR_VAR 0 5
35384: PUSH
35385: LD_VAR 0 1
35389: PUSH
35390: LD_VAR 0 2
35394: ARRAY
35395: ST_TO_ADDR
// if not i then
35396: LD_VAR 0 5
35400: NOT
35401: IFFALSE 35405
// exit ;
35403: GO 35471
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35405: LD_ADDR_VAR 0 1
35409: PUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: LD_VAR 0 2
35419: PPUSH
35420: LD_VAR 0 1
35424: PUSH
35425: LD_VAR 0 3
35429: ARRAY
35430: PPUSH
35431: CALL_OW 1
35435: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35436: LD_ADDR_VAR 0 1
35440: PUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: LD_VAR 0 3
35450: PPUSH
35451: LD_VAR 0 5
35455: PPUSH
35456: CALL_OW 1
35460: ST_TO_ADDR
// result := list ;
35461: LD_ADDR_VAR 0 4
35465: PUSH
35466: LD_VAR 0 1
35470: ST_TO_ADDR
// end ;
35471: LD_VAR 0 4
35475: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35476: LD_INT 0
35478: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35479: LD_ADDR_VAR 0 5
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: CALL_OW 250
35493: PPUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 251
35503: PPUSH
35504: LD_VAR 0 2
35508: PPUSH
35509: LD_VAR 0 3
35513: PPUSH
35514: LD_VAR 0 4
35518: PPUSH
35519: CALL 35529 0 5
35523: ST_TO_ADDR
// end ;
35524: LD_VAR 0 5
35528: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35529: LD_INT 0
35531: PPUSH
35532: PPUSH
35533: PPUSH
35534: PPUSH
// if not list then
35535: LD_VAR 0 3
35539: NOT
35540: IFFALSE 35544
// exit ;
35542: GO 35932
// result := [ ] ;
35544: LD_ADDR_VAR 0 6
35548: PUSH
35549: EMPTY
35550: ST_TO_ADDR
// for i in list do
35551: LD_ADDR_VAR 0 7
35555: PUSH
35556: LD_VAR 0 3
35560: PUSH
35561: FOR_IN
35562: IFFALSE 35764
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_VAR 0 7
35573: PPUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: LD_VAR 0 2
35583: PPUSH
35584: CALL_OW 297
35588: ST_TO_ADDR
// if not result then
35589: LD_VAR 0 6
35593: NOT
35594: IFFALSE 35620
// result := [ [ i , tmp ] ] else
35596: LD_ADDR_VAR 0 6
35600: PUSH
35601: LD_VAR 0 7
35605: PUSH
35606: LD_VAR 0 9
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: ST_TO_ADDR
35618: GO 35762
// begin if result [ result ] [ 2 ] < tmp then
35620: LD_VAR 0 6
35624: PUSH
35625: LD_VAR 0 6
35629: ARRAY
35630: PUSH
35631: LD_INT 2
35633: ARRAY
35634: PUSH
35635: LD_VAR 0 9
35639: LESS
35640: IFFALSE 35682
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35642: LD_ADDR_VAR 0 6
35646: PUSH
35647: LD_VAR 0 6
35651: PPUSH
35652: LD_VAR 0 6
35656: PUSH
35657: LD_INT 1
35659: PLUS
35660: PPUSH
35661: LD_VAR 0 7
35665: PUSH
35666: LD_VAR 0 9
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PPUSH
35675: CALL_OW 2
35679: ST_TO_ADDR
35680: GO 35762
// for j = 1 to result do
35682: LD_ADDR_VAR 0 8
35686: PUSH
35687: DOUBLE
35688: LD_INT 1
35690: DEC
35691: ST_TO_ADDR
35692: LD_VAR 0 6
35696: PUSH
35697: FOR_TO
35698: IFFALSE 35760
// begin if tmp < result [ j ] [ 2 ] then
35700: LD_VAR 0 9
35704: PUSH
35705: LD_VAR 0 6
35709: PUSH
35710: LD_VAR 0 8
35714: ARRAY
35715: PUSH
35716: LD_INT 2
35718: ARRAY
35719: LESS
35720: IFFALSE 35758
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35722: LD_ADDR_VAR 0 6
35726: PUSH
35727: LD_VAR 0 6
35731: PPUSH
35732: LD_VAR 0 8
35736: PPUSH
35737: LD_VAR 0 7
35741: PUSH
35742: LD_VAR 0 9
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 2
35755: ST_TO_ADDR
// break ;
35756: GO 35760
// end ; end ;
35758: GO 35697
35760: POP
35761: POP
// end ; end ;
35762: GO 35561
35764: POP
35765: POP
// if result and not asc then
35766: LD_VAR 0 6
35770: PUSH
35771: LD_VAR 0 4
35775: NOT
35776: AND
35777: IFFALSE 35852
// begin tmp := result ;
35779: LD_ADDR_VAR 0 9
35783: PUSH
35784: LD_VAR 0 6
35788: ST_TO_ADDR
// for i = tmp downto 1 do
35789: LD_ADDR_VAR 0 7
35793: PUSH
35794: DOUBLE
35795: LD_VAR 0 9
35799: INC
35800: ST_TO_ADDR
35801: LD_INT 1
35803: PUSH
35804: FOR_DOWNTO
35805: IFFALSE 35850
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35807: LD_ADDR_VAR 0 6
35811: PUSH
35812: LD_VAR 0 6
35816: PPUSH
35817: LD_VAR 0 9
35821: PUSH
35822: LD_VAR 0 7
35826: MINUS
35827: PUSH
35828: LD_INT 1
35830: PLUS
35831: PPUSH
35832: LD_VAR 0 9
35836: PUSH
35837: LD_VAR 0 7
35841: ARRAY
35842: PPUSH
35843: CALL_OW 1
35847: ST_TO_ADDR
35848: GO 35804
35850: POP
35851: POP
// end ; tmp := [ ] ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: EMPTY
35858: ST_TO_ADDR
// if mode then
35859: LD_VAR 0 5
35863: IFFALSE 35932
// begin for i = 1 to result do
35865: LD_ADDR_VAR 0 7
35869: PUSH
35870: DOUBLE
35871: LD_INT 1
35873: DEC
35874: ST_TO_ADDR
35875: LD_VAR 0 6
35879: PUSH
35880: FOR_TO
35881: IFFALSE 35920
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35883: LD_ADDR_VAR 0 9
35887: PUSH
35888: LD_VAR 0 9
35892: PPUSH
35893: LD_VAR 0 7
35897: PPUSH
35898: LD_VAR 0 6
35902: PUSH
35903: LD_VAR 0 7
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PPUSH
35913: CALL_OW 1
35917: ST_TO_ADDR
35918: GO 35880
35920: POP
35921: POP
// result := tmp ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_VAR 0 9
35931: ST_TO_ADDR
// end ; end ;
35932: LD_VAR 0 6
35936: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35937: LD_INT 0
35939: PPUSH
35940: PPUSH
35941: PPUSH
35942: PPUSH
35943: PPUSH
35944: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
// if not x or not y then
35967: LD_VAR 0 2
35971: NOT
35972: PUSH
35973: LD_VAR 0 3
35977: NOT
35978: OR
35979: IFFALSE 35983
// exit ;
35981: GO 37635
// if not range then
35983: LD_VAR 0 4
35987: NOT
35988: IFFALSE 35998
// range := 10 ;
35990: LD_ADDR_VAR 0 4
35994: PUSH
35995: LD_INT 10
35997: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35998: LD_ADDR_VAR 0 8
36002: PUSH
36003: LD_INT 81
36005: PUSH
36006: LD_VAR 0 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 92
36017: PUSH
36018: LD_VAR 0 2
36022: PUSH
36023: LD_VAR 0 3
36027: PUSH
36028: LD_VAR 0 4
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: LD_INT 21
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: PPUSH
36061: CALL_OW 69
36065: ST_TO_ADDR
// if not tmp then
36066: LD_VAR 0 8
36070: NOT
36071: IFFALSE 36075
// exit ;
36073: GO 37635
// for i in tmp do
36075: LD_ADDR_VAR 0 6
36079: PUSH
36080: LD_VAR 0 8
36084: PUSH
36085: FOR_IN
36086: IFFALSE 37610
// begin points := [ 0 , 0 , 0 ] ;
36088: LD_ADDR_VAR 0 9
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: ST_TO_ADDR
// bpoints := 1 ;
36107: LD_ADDR_VAR 0 10
36111: PUSH
36112: LD_INT 1
36114: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36115: LD_VAR 0 6
36119: PPUSH
36120: CALL_OW 247
36124: PUSH
36125: LD_INT 1
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36711
36133: POP
// begin if GetClass ( i ) = 1 then
36134: LD_VAR 0 6
36138: PPUSH
36139: CALL_OW 257
36143: PUSH
36144: LD_INT 1
36146: EQUAL
36147: IFFALSE 36168
// points := [ 10 , 5 , 3 ] ;
36149: LD_ADDR_VAR 0 9
36153: PUSH
36154: LD_INT 10
36156: PUSH
36157: LD_INT 5
36159: PUSH
36160: LD_INT 3
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36168: LD_VAR 0 6
36172: PPUSH
36173: CALL_OW 257
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: LD_INT 4
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: IN
36192: IFFALSE 36213
// points := [ 3 , 2 , 1 ] ;
36194: LD_ADDR_VAR 0 9
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36213: LD_VAR 0 6
36217: PPUSH
36218: CALL_OW 257
36222: PUSH
36223: LD_INT 5
36225: EQUAL
36226: IFFALSE 36247
// points := [ 130 , 5 , 2 ] ;
36228: LD_ADDR_VAR 0 9
36232: PUSH
36233: LD_INT 130
36235: PUSH
36236: LD_INT 5
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36247: LD_VAR 0 6
36251: PPUSH
36252: CALL_OW 257
36256: PUSH
36257: LD_INT 8
36259: EQUAL
36260: IFFALSE 36281
// points := [ 35 , 35 , 30 ] ;
36262: LD_ADDR_VAR 0 9
36266: PUSH
36267: LD_INT 35
36269: PUSH
36270: LD_INT 35
36272: PUSH
36273: LD_INT 30
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36281: LD_VAR 0 6
36285: PPUSH
36286: CALL_OW 257
36290: PUSH
36291: LD_INT 9
36293: EQUAL
36294: IFFALSE 36315
// points := [ 20 , 55 , 40 ] ;
36296: LD_ADDR_VAR 0 9
36300: PUSH
36301: LD_INT 20
36303: PUSH
36304: LD_INT 55
36306: PUSH
36307: LD_INT 40
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36315: LD_VAR 0 6
36319: PPUSH
36320: CALL_OW 257
36324: PUSH
36325: LD_INT 12
36327: PUSH
36328: LD_INT 16
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: IN
36335: IFFALSE 36356
// points := [ 5 , 3 , 2 ] ;
36337: LD_ADDR_VAR 0 9
36341: PUSH
36342: LD_INT 5
36344: PUSH
36345: LD_INT 3
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36356: LD_VAR 0 6
36360: PPUSH
36361: CALL_OW 257
36365: PUSH
36366: LD_INT 17
36368: EQUAL
36369: IFFALSE 36390
// points := [ 100 , 50 , 75 ] ;
36371: LD_ADDR_VAR 0 9
36375: PUSH
36376: LD_INT 100
36378: PUSH
36379: LD_INT 50
36381: PUSH
36382: LD_INT 75
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36390: LD_VAR 0 6
36394: PPUSH
36395: CALL_OW 257
36399: PUSH
36400: LD_INT 15
36402: EQUAL
36403: IFFALSE 36424
// points := [ 10 , 5 , 3 ] ;
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: LD_INT 10
36412: PUSH
36413: LD_INT 5
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36424: LD_VAR 0 6
36428: PPUSH
36429: CALL_OW 257
36433: PUSH
36434: LD_INT 14
36436: EQUAL
36437: IFFALSE 36458
// points := [ 10 , 0 , 0 ] ;
36439: LD_ADDR_VAR 0 9
36443: PUSH
36444: LD_INT 10
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36458: LD_VAR 0 6
36462: PPUSH
36463: CALL_OW 257
36467: PUSH
36468: LD_INT 11
36470: EQUAL
36471: IFFALSE 36492
// points := [ 30 , 10 , 5 ] ;
36473: LD_ADDR_VAR 0 9
36477: PUSH
36478: LD_INT 30
36480: PUSH
36481: LD_INT 10
36483: PUSH
36484: LD_INT 5
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_INT 5
36499: PPUSH
36500: CALL_OW 321
36504: PUSH
36505: LD_INT 2
36507: EQUAL
36508: IFFALSE 36525
// bpoints := bpoints * 1.8 ;
36510: LD_ADDR_VAR 0 10
36514: PUSH
36515: LD_VAR 0 10
36519: PUSH
36520: LD_REAL  1.80000000000000E+0000
36523: MUL
36524: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 257
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: LD_INT 4
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: IN
36553: PUSH
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_INT 51
36561: PPUSH
36562: CALL_OW 321
36566: PUSH
36567: LD_INT 2
36569: EQUAL
36570: AND
36571: IFFALSE 36588
// bpoints := bpoints * 1.2 ;
36573: LD_ADDR_VAR 0 10
36577: PUSH
36578: LD_VAR 0 10
36582: PUSH
36583: LD_REAL  1.20000000000000E+0000
36586: MUL
36587: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 257
36597: PUSH
36598: LD_INT 5
36600: PUSH
36601: LD_INT 7
36603: PUSH
36604: LD_INT 9
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: IN
36612: PUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: LD_INT 52
36620: PPUSH
36621: CALL_OW 321
36625: PUSH
36626: LD_INT 2
36628: EQUAL
36629: AND
36630: IFFALSE 36647
// bpoints := bpoints * 1.5 ;
36632: LD_ADDR_VAR 0 10
36636: PUSH
36637: LD_VAR 0 10
36641: PUSH
36642: LD_REAL  1.50000000000000E+0000
36645: MUL
36646: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36647: LD_VAR 0 1
36651: PPUSH
36652: LD_INT 66
36654: PPUSH
36655: CALL_OW 321
36659: PUSH
36660: LD_INT 2
36662: EQUAL
36663: IFFALSE 36680
// bpoints := bpoints * 1.1 ;
36665: LD_ADDR_VAR 0 10
36669: PUSH
36670: LD_VAR 0 10
36674: PUSH
36675: LD_REAL  1.10000000000000E+0000
36678: MUL
36679: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36680: LD_ADDR_VAR 0 10
36684: PUSH
36685: LD_VAR 0 10
36689: PUSH
36690: LD_VAR 0 6
36694: PPUSH
36695: LD_INT 1
36697: PPUSH
36698: CALL_OW 259
36702: PUSH
36703: LD_REAL  1.15000000000000E+0000
36706: MUL
36707: MUL
36708: ST_TO_ADDR
// end ; unit_vehicle :
36709: GO 37539
36711: LD_INT 2
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 37527
36719: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36720: LD_VAR 0 6
36724: PPUSH
36725: CALL_OW 264
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 42
36735: PUSH
36736: LD_INT 24
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: IN
36744: IFFALSE 36765
// points := [ 25 , 5 , 3 ] ;
36746: LD_ADDR_VAR 0 9
36750: PUSH
36751: LD_INT 25
36753: PUSH
36754: LD_INT 5
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 264
36774: PUSH
36775: LD_INT 4
36777: PUSH
36778: LD_INT 43
36780: PUSH
36781: LD_INT 25
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: IN
36789: IFFALSE 36810
// points := [ 40 , 15 , 5 ] ;
36791: LD_ADDR_VAR 0 9
36795: PUSH
36796: LD_INT 40
36798: PUSH
36799: LD_INT 15
36801: PUSH
36802: LD_INT 5
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36810: LD_VAR 0 6
36814: PPUSH
36815: CALL_OW 264
36819: PUSH
36820: LD_INT 3
36822: PUSH
36823: LD_INT 23
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: IN
36830: IFFALSE 36851
// points := [ 7 , 25 , 8 ] ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_INT 7
36839: PUSH
36840: LD_INT 25
36842: PUSH
36843: LD_INT 8
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 264
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 27
36866: PUSH
36867: LD_INT 44
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: IN
36875: IFFALSE 36896
// points := [ 14 , 50 , 16 ] ;
36877: LD_ADDR_VAR 0 9
36881: PUSH
36882: LD_INT 14
36884: PUSH
36885: LD_INT 50
36887: PUSH
36888: LD_INT 16
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36896: LD_VAR 0 6
36900: PPUSH
36901: CALL_OW 264
36905: PUSH
36906: LD_INT 6
36908: PUSH
36909: LD_INT 46
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: IN
36916: IFFALSE 36937
// points := [ 32 , 120 , 70 ] ;
36918: LD_ADDR_VAR 0 9
36922: PUSH
36923: LD_INT 32
36925: PUSH
36926: LD_INT 120
36928: PUSH
36929: LD_INT 70
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36937: LD_VAR 0 6
36941: PPUSH
36942: CALL_OW 264
36946: PUSH
36947: LD_INT 7
36949: PUSH
36950: LD_INT 28
36952: PUSH
36953: LD_INT 45
36955: PUSH
36956: LD_EXP 110
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: IN
36967: IFFALSE 36988
// points := [ 35 , 20 , 45 ] ;
36969: LD_ADDR_VAR 0 9
36973: PUSH
36974: LD_INT 35
36976: PUSH
36977: LD_INT 20
36979: PUSH
36980: LD_INT 45
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36988: LD_VAR 0 6
36992: PPUSH
36993: CALL_OW 264
36997: PUSH
36998: LD_INT 47
37000: PUSH
37001: EMPTY
37002: LIST
37003: IN
37004: IFFALSE 37025
// points := [ 67 , 45 , 75 ] ;
37006: LD_ADDR_VAR 0 9
37010: PUSH
37011: LD_INT 67
37013: PUSH
37014: LD_INT 45
37016: PUSH
37017: LD_INT 75
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37025: LD_VAR 0 6
37029: PPUSH
37030: CALL_OW 264
37034: PUSH
37035: LD_INT 26
37037: PUSH
37038: EMPTY
37039: LIST
37040: IN
37041: IFFALSE 37062
// points := [ 120 , 30 , 80 ] ;
37043: LD_ADDR_VAR 0 9
37047: PUSH
37048: LD_INT 120
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: LD_INT 80
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37062: LD_VAR 0 6
37066: PPUSH
37067: CALL_OW 264
37071: PUSH
37072: LD_INT 22
37074: PUSH
37075: EMPTY
37076: LIST
37077: IN
37078: IFFALSE 37099
// points := [ 40 , 1 , 1 ] ;
37080: LD_ADDR_VAR 0 9
37084: PUSH
37085: LD_INT 40
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37099: LD_VAR 0 6
37103: PPUSH
37104: CALL_OW 264
37108: PUSH
37109: LD_INT 29
37111: PUSH
37112: EMPTY
37113: LIST
37114: IN
37115: IFFALSE 37136
// points := [ 70 , 200 , 400 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 70
37124: PUSH
37125: LD_INT 200
37127: PUSH
37128: LD_INT 400
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 264
37145: PUSH
37146: LD_INT 14
37148: PUSH
37149: LD_INT 53
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: IN
37156: IFFALSE 37177
// points := [ 40 , 10 , 20 ] ;
37158: LD_ADDR_VAR 0 9
37162: PUSH
37163: LD_INT 40
37165: PUSH
37166: LD_INT 10
37168: PUSH
37169: LD_INT 20
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37177: LD_VAR 0 6
37181: PPUSH
37182: CALL_OW 264
37186: PUSH
37187: LD_INT 9
37189: PUSH
37190: EMPTY
37191: LIST
37192: IN
37193: IFFALSE 37214
// points := [ 5 , 70 , 20 ] ;
37195: LD_ADDR_VAR 0 9
37199: PUSH
37200: LD_INT 5
37202: PUSH
37203: LD_INT 70
37205: PUSH
37206: LD_INT 20
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37214: LD_VAR 0 6
37218: PPUSH
37219: CALL_OW 264
37223: PUSH
37224: LD_INT 10
37226: PUSH
37227: EMPTY
37228: LIST
37229: IN
37230: IFFALSE 37251
// points := [ 35 , 110 , 70 ] ;
37232: LD_ADDR_VAR 0 9
37236: PUSH
37237: LD_INT 35
37239: PUSH
37240: LD_INT 110
37242: PUSH
37243: LD_INT 70
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37251: LD_VAR 0 6
37255: PPUSH
37256: CALL_OW 265
37260: PUSH
37261: LD_INT 25
37263: EQUAL
37264: IFFALSE 37285
// points := [ 80 , 65 , 100 ] ;
37266: LD_ADDR_VAR 0 9
37270: PUSH
37271: LD_INT 80
37273: PUSH
37274: LD_INT 65
37276: PUSH
37277: LD_INT 100
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37285: LD_VAR 0 6
37289: PPUSH
37290: CALL_OW 263
37294: PUSH
37295: LD_INT 1
37297: EQUAL
37298: IFFALSE 37333
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37300: LD_ADDR_VAR 0 10
37304: PUSH
37305: LD_VAR 0 10
37309: PUSH
37310: LD_VAR 0 6
37314: PPUSH
37315: CALL_OW 311
37319: PPUSH
37320: LD_INT 3
37322: PPUSH
37323: CALL_OW 259
37327: PUSH
37328: LD_INT 4
37330: MUL
37331: MUL
37332: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 263
37342: PUSH
37343: LD_INT 2
37345: EQUAL
37346: IFFALSE 37397
// begin j := IsControledBy ( i ) ;
37348: LD_ADDR_VAR 0 7
37352: PUSH
37353: LD_VAR 0 6
37357: PPUSH
37358: CALL_OW 312
37362: ST_TO_ADDR
// if j then
37363: LD_VAR 0 7
37367: IFFALSE 37397
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37369: LD_ADDR_VAR 0 10
37373: PUSH
37374: LD_VAR 0 10
37378: PUSH
37379: LD_VAR 0 7
37383: PPUSH
37384: LD_INT 3
37386: PPUSH
37387: CALL_OW 259
37391: PUSH
37392: LD_INT 3
37394: MUL
37395: MUL
37396: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37397: LD_VAR 0 6
37401: PPUSH
37402: CALL_OW 264
37406: PUSH
37407: LD_INT 5
37409: PUSH
37410: LD_INT 6
37412: PUSH
37413: LD_INT 46
37415: PUSH
37416: LD_INT 44
37418: PUSH
37419: LD_INT 47
37421: PUSH
37422: LD_INT 45
37424: PUSH
37425: LD_INT 28
37427: PUSH
37428: LD_INT 7
37430: PUSH
37431: LD_INT 27
37433: PUSH
37434: LD_INT 29
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: IN
37449: PUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: LD_INT 52
37457: PPUSH
37458: CALL_OW 321
37462: PUSH
37463: LD_INT 2
37465: EQUAL
37466: AND
37467: IFFALSE 37484
// bpoints := bpoints * 1.2 ;
37469: LD_ADDR_VAR 0 10
37473: PUSH
37474: LD_VAR 0 10
37478: PUSH
37479: LD_REAL  1.20000000000000E+0000
37482: MUL
37483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37484: LD_VAR 0 6
37488: PPUSH
37489: CALL_OW 264
37493: PUSH
37494: LD_INT 6
37496: PUSH
37497: LD_INT 46
37499: PUSH
37500: LD_INT 47
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: IN
37508: IFFALSE 37525
// bpoints := bpoints * 1.2 ;
37510: LD_ADDR_VAR 0 10
37514: PUSH
37515: LD_VAR 0 10
37519: PUSH
37520: LD_REAL  1.20000000000000E+0000
37523: MUL
37524: ST_TO_ADDR
// end ; unit_building :
37525: GO 37539
37527: LD_INT 3
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37535
37533: GO 37538
37535: POP
// ; end ;
37536: GO 37539
37538: POP
// for j = 1 to 3 do
37539: LD_ADDR_VAR 0 7
37543: PUSH
37544: DOUBLE
37545: LD_INT 1
37547: DEC
37548: ST_TO_ADDR
37549: LD_INT 3
37551: PUSH
37552: FOR_TO
37553: IFFALSE 37606
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37555: LD_ADDR_VAR 0 5
37559: PUSH
37560: LD_VAR 0 5
37564: PPUSH
37565: LD_VAR 0 7
37569: PPUSH
37570: LD_VAR 0 5
37574: PUSH
37575: LD_VAR 0 7
37579: ARRAY
37580: PUSH
37581: LD_VAR 0 9
37585: PUSH
37586: LD_VAR 0 7
37590: ARRAY
37591: PUSH
37592: LD_VAR 0 10
37596: MUL
37597: PLUS
37598: PPUSH
37599: CALL_OW 1
37603: ST_TO_ADDR
37604: GO 37552
37606: POP
37607: POP
// end ;
37608: GO 36085
37610: POP
37611: POP
// result := Replace ( result , 4 , tmp ) ;
37612: LD_ADDR_VAR 0 5
37616: PUSH
37617: LD_VAR 0 5
37621: PPUSH
37622: LD_INT 4
37624: PPUSH
37625: LD_VAR 0 8
37629: PPUSH
37630: CALL_OW 1
37634: ST_TO_ADDR
// end ;
37635: LD_VAR 0 5
37639: RET
// export function DangerAtRange ( unit , range ) ; begin
37640: LD_INT 0
37642: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37643: LD_ADDR_VAR 0 3
37647: PUSH
37648: LD_VAR 0 1
37652: PPUSH
37653: CALL_OW 255
37657: PPUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 250
37667: PPUSH
37668: LD_VAR 0 1
37672: PPUSH
37673: CALL_OW 251
37677: PPUSH
37678: LD_VAR 0 2
37682: PPUSH
37683: CALL 35937 0 4
37687: ST_TO_ADDR
// end ;
37688: LD_VAR 0 3
37692: RET
// export function DangerInArea ( side , area ) ; begin
37693: LD_INT 0
37695: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37696: LD_ADDR_VAR 0 3
37700: PUSH
37701: LD_VAR 0 2
37705: PPUSH
37706: LD_INT 81
37708: PUSH
37709: LD_VAR 0 1
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PPUSH
37718: CALL_OW 70
37722: ST_TO_ADDR
// end ;
37723: LD_VAR 0 3
37727: RET
// export function IsExtension ( b ) ; begin
37728: LD_INT 0
37730: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37731: LD_ADDR_VAR 0 2
37735: PUSH
37736: LD_VAR 0 1
37740: PUSH
37741: LD_INT 23
37743: PUSH
37744: LD_INT 20
37746: PUSH
37747: LD_INT 22
37749: PUSH
37750: LD_INT 17
37752: PUSH
37753: LD_INT 24
37755: PUSH
37756: LD_INT 21
37758: PUSH
37759: LD_INT 19
37761: PUSH
37762: LD_INT 16
37764: PUSH
37765: LD_INT 25
37767: PUSH
37768: LD_INT 18
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: IN
37783: ST_TO_ADDR
// end ;
37784: LD_VAR 0 2
37788: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37789: LD_INT 0
37791: PPUSH
37792: PPUSH
37793: PPUSH
// result := [ ] ;
37794: LD_ADDR_VAR 0 4
37798: PUSH
37799: EMPTY
37800: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37801: LD_ADDR_VAR 0 5
37805: PUSH
37806: LD_VAR 0 2
37810: PPUSH
37811: LD_INT 21
37813: PUSH
37814: LD_INT 3
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PPUSH
37821: CALL_OW 70
37825: ST_TO_ADDR
// if not tmp then
37826: LD_VAR 0 5
37830: NOT
37831: IFFALSE 37835
// exit ;
37833: GO 37899
// if checkLink then
37835: LD_VAR 0 3
37839: IFFALSE 37889
// begin for i in tmp do
37841: LD_ADDR_VAR 0 6
37845: PUSH
37846: LD_VAR 0 5
37850: PUSH
37851: FOR_IN
37852: IFFALSE 37887
// if GetBase ( i ) <> base then
37854: LD_VAR 0 6
37858: PPUSH
37859: CALL_OW 274
37863: PUSH
37864: LD_VAR 0 1
37868: NONEQUAL
37869: IFFALSE 37885
// ComLinkToBase ( base , i ) ;
37871: LD_VAR 0 1
37875: PPUSH
37876: LD_VAR 0 6
37880: PPUSH
37881: CALL_OW 169
37885: GO 37851
37887: POP
37888: POP
// end ; result := tmp ;
37889: LD_ADDR_VAR 0 4
37893: PUSH
37894: LD_VAR 0 5
37898: ST_TO_ADDR
// end ;
37899: LD_VAR 0 4
37903: RET
// export function ComComplete ( units , b ) ; var i ; begin
37904: LD_INT 0
37906: PPUSH
37907: PPUSH
// if not units then
37908: LD_VAR 0 1
37912: NOT
37913: IFFALSE 37917
// exit ;
37915: GO 38007
// for i in units do
37917: LD_ADDR_VAR 0 4
37921: PUSH
37922: LD_VAR 0 1
37926: PUSH
37927: FOR_IN
37928: IFFALSE 38005
// if BuildingStatus ( b ) = bs_build then
37930: LD_VAR 0 2
37934: PPUSH
37935: CALL_OW 461
37939: PUSH
37940: LD_INT 1
37942: EQUAL
37943: IFFALSE 38003
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37945: LD_VAR 0 4
37949: PPUSH
37950: LD_STRING h
37952: PUSH
37953: LD_VAR 0 2
37957: PPUSH
37958: CALL_OW 250
37962: PUSH
37963: LD_VAR 0 2
37967: PPUSH
37968: CALL_OW 251
37972: PUSH
37973: LD_VAR 0 2
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: PPUSH
37999: CALL_OW 446
38003: GO 37927
38005: POP
38006: POP
// end ;
38007: LD_VAR 0 3
38011: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38020: LD_VAR 0 1
38024: NOT
38025: PUSH
38026: LD_VAR 0 1
38030: PPUSH
38031: CALL_OW 263
38035: PUSH
38036: LD_INT 2
38038: NONEQUAL
38039: OR
38040: IFFALSE 38044
// exit ;
38042: GO 38360
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38044: LD_ADDR_VAR 0 6
38048: PUSH
38049: LD_INT 22
38051: PUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 255
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: LD_INT 30
38071: PUSH
38072: LD_INT 36
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 34
38081: PUSH
38082: LD_INT 31
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 69
38102: ST_TO_ADDR
// if not tmp then
38103: LD_VAR 0 6
38107: NOT
38108: IFFALSE 38112
// exit ;
38110: GO 38360
// result := [ ] ;
38112: LD_ADDR_VAR 0 2
38116: PUSH
38117: EMPTY
38118: ST_TO_ADDR
// for i in tmp do
38119: LD_ADDR_VAR 0 3
38123: PUSH
38124: LD_VAR 0 6
38128: PUSH
38129: FOR_IN
38130: IFFALSE 38201
// begin t := UnitsInside ( i ) ;
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: LD_VAR 0 3
38141: PPUSH
38142: CALL_OW 313
38146: ST_TO_ADDR
// if t then
38147: LD_VAR 0 4
38151: IFFALSE 38199
// for j in t do
38153: LD_ADDR_VAR 0 7
38157: PUSH
38158: LD_VAR 0 4
38162: PUSH
38163: FOR_IN
38164: IFFALSE 38197
// result := Replace ( result , result + 1 , j ) ;
38166: LD_ADDR_VAR 0 2
38170: PUSH
38171: LD_VAR 0 2
38175: PPUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_INT 1
38183: PLUS
38184: PPUSH
38185: LD_VAR 0 7
38189: PPUSH
38190: CALL_OW 1
38194: ST_TO_ADDR
38195: GO 38163
38197: POP
38198: POP
// end ;
38199: GO 38129
38201: POP
38202: POP
// if not result then
38203: LD_VAR 0 2
38207: NOT
38208: IFFALSE 38212
// exit ;
38210: GO 38360
// mech := result [ 1 ] ;
38212: LD_ADDR_VAR 0 5
38216: PUSH
38217: LD_VAR 0 2
38221: PUSH
38222: LD_INT 1
38224: ARRAY
38225: ST_TO_ADDR
// if result > 1 then
38226: LD_VAR 0 2
38230: PUSH
38231: LD_INT 1
38233: GREATER
38234: IFFALSE 38346
// begin for i = 2 to result do
38236: LD_ADDR_VAR 0 3
38240: PUSH
38241: DOUBLE
38242: LD_INT 2
38244: DEC
38245: ST_TO_ADDR
38246: LD_VAR 0 2
38250: PUSH
38251: FOR_TO
38252: IFFALSE 38344
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38254: LD_ADDR_VAR 0 4
38258: PUSH
38259: LD_VAR 0 2
38263: PUSH
38264: LD_VAR 0 3
38268: ARRAY
38269: PPUSH
38270: LD_INT 3
38272: PPUSH
38273: CALL_OW 259
38277: PUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_VAR 0 3
38287: ARRAY
38288: PPUSH
38289: CALL_OW 432
38293: MINUS
38294: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38295: LD_VAR 0 4
38299: PUSH
38300: LD_VAR 0 5
38304: PPUSH
38305: LD_INT 3
38307: PPUSH
38308: CALL_OW 259
38312: PUSH
38313: LD_VAR 0 5
38317: PPUSH
38318: CALL_OW 432
38322: MINUS
38323: GREATEREQUAL
38324: IFFALSE 38342
// mech := result [ i ] ;
38326: LD_ADDR_VAR 0 5
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: LD_VAR 0 3
38340: ARRAY
38341: ST_TO_ADDR
// end ;
38342: GO 38251
38344: POP
38345: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_VAR 0 5
38355: PPUSH
38356: CALL_OW 135
// end ;
38360: LD_VAR 0 2
38364: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38365: LD_INT 0
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
// result := [ ] ;
38380: LD_ADDR_VAR 0 7
38384: PUSH
38385: EMPTY
38386: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 266
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: IN
38407: NOT
38408: IFFALSE 38412
// exit ;
38410: GO 40046
// if name then
38412: LD_VAR 0 3
38416: IFFALSE 38432
// SetBName ( base_dep , name ) ;
38418: LD_VAR 0 1
38422: PPUSH
38423: LD_VAR 0 3
38427: PPUSH
38428: CALL_OW 500
// base := GetBase ( base_dep ) ;
38432: LD_ADDR_VAR 0 15
38436: PUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 274
38446: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38447: LD_ADDR_VAR 0 16
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 255
38461: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38462: LD_ADDR_VAR 0 17
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 248
38476: ST_TO_ADDR
// if sources then
38477: LD_VAR 0 5
38481: IFFALSE 38528
// for i = 1 to 3 do
38483: LD_ADDR_VAR 0 8
38487: PUSH
38488: DOUBLE
38489: LD_INT 1
38491: DEC
38492: ST_TO_ADDR
38493: LD_INT 3
38495: PUSH
38496: FOR_TO
38497: IFFALSE 38526
// AddResourceType ( base , i , sources [ i ] ) ;
38499: LD_VAR 0 15
38503: PPUSH
38504: LD_VAR 0 8
38508: PPUSH
38509: LD_VAR 0 5
38513: PUSH
38514: LD_VAR 0 8
38518: ARRAY
38519: PPUSH
38520: CALL_OW 276
38524: GO 38496
38526: POP
38527: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38528: LD_ADDR_VAR 0 18
38532: PUSH
38533: LD_VAR 0 15
38537: PPUSH
38538: LD_VAR 0 2
38542: PPUSH
38543: LD_INT 1
38545: PPUSH
38546: CALL 37789 0 3
38550: ST_TO_ADDR
// InitHc ;
38551: CALL_OW 19
// InitUc ;
38555: CALL_OW 18
// uc_side := side ;
38559: LD_ADDR_OWVAR 20
38563: PUSH
38564: LD_VAR 0 16
38568: ST_TO_ADDR
// uc_nation := nation ;
38569: LD_ADDR_OWVAR 21
38573: PUSH
38574: LD_VAR 0 17
38578: ST_TO_ADDR
// if buildings then
38579: LD_VAR 0 18
38583: IFFALSE 39905
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38585: LD_ADDR_VAR 0 19
38589: PUSH
38590: LD_VAR 0 18
38594: PPUSH
38595: LD_INT 2
38597: PUSH
38598: LD_INT 30
38600: PUSH
38601: LD_INT 29
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 30
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PPUSH
38623: CALL_OW 72
38627: ST_TO_ADDR
// if tmp then
38628: LD_VAR 0 19
38632: IFFALSE 38680
// for i in tmp do
38634: LD_ADDR_VAR 0 8
38638: PUSH
38639: LD_VAR 0 19
38643: PUSH
38644: FOR_IN
38645: IFFALSE 38678
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38647: LD_VAR 0 8
38651: PPUSH
38652: CALL_OW 250
38656: PPUSH
38657: LD_VAR 0 8
38661: PPUSH
38662: CALL_OW 251
38666: PPUSH
38667: LD_VAR 0 16
38671: PPUSH
38672: CALL_OW 441
38676: GO 38644
38678: POP
38679: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38680: LD_VAR 0 18
38684: PPUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 30
38690: PUSH
38691: LD_INT 32
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 30
38700: PUSH
38701: LD_INT 33
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PPUSH
38713: CALL_OW 72
38717: IFFALSE 38805
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38719: LD_ADDR_VAR 0 8
38723: PUSH
38724: LD_VAR 0 18
38728: PPUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 32
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 33
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: PPUSH
38757: CALL_OW 72
38761: PUSH
38762: FOR_IN
38763: IFFALSE 38803
// begin if not GetBWeapon ( i ) then
38765: LD_VAR 0 8
38769: PPUSH
38770: CALL_OW 269
38774: NOT
38775: IFFALSE 38801
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38777: LD_VAR 0 8
38781: PPUSH
38782: LD_VAR 0 8
38786: PPUSH
38787: LD_VAR 0 2
38791: PPUSH
38792: CALL 40051 0 2
38796: PPUSH
38797: CALL_OW 431
// end ;
38801: GO 38762
38803: POP
38804: POP
// end ; for i = 1 to personel do
38805: LD_ADDR_VAR 0 8
38809: PUSH
38810: DOUBLE
38811: LD_INT 1
38813: DEC
38814: ST_TO_ADDR
38815: LD_VAR 0 6
38819: PUSH
38820: FOR_TO
38821: IFFALSE 39885
// begin if i > 4 then
38823: LD_VAR 0 8
38827: PUSH
38828: LD_INT 4
38830: GREATER
38831: IFFALSE 38835
// break ;
38833: GO 39885
// case i of 1 :
38835: LD_VAR 0 8
38839: PUSH
38840: LD_INT 1
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 38928
38848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38849: LD_ADDR_VAR 0 12
38853: PUSH
38854: LD_VAR 0 18
38858: PPUSH
38859: LD_INT 22
38861: PUSH
38862: LD_VAR 0 16
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 58
38873: PUSH
38874: EMPTY
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 30
38882: PUSH
38883: LD_INT 32
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 30
38892: PUSH
38893: LD_INT 4
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 30
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: PPUSH
38921: CALL_OW 72
38925: ST_TO_ADDR
38926: GO 39150
38928: LD_INT 2
38930: DOUBLE
38931: EQUAL
38932: IFTRUE 38936
38934: GO 38998
38936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38937: LD_ADDR_VAR 0 12
38941: PUSH
38942: LD_VAR 0 18
38946: PPUSH
38947: LD_INT 22
38949: PUSH
38950: LD_VAR 0 16
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 30
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 30
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PPUSH
38991: CALL_OW 72
38995: ST_TO_ADDR
38996: GO 39150
38998: LD_INT 3
39000: DOUBLE
39001: EQUAL
39002: IFTRUE 39006
39004: GO 39068
39006: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39007: LD_ADDR_VAR 0 12
39011: PUSH
39012: LD_VAR 0 18
39016: PPUSH
39017: LD_INT 22
39019: PUSH
39020: LD_VAR 0 16
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 30
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 30
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PPUSH
39061: CALL_OW 72
39065: ST_TO_ADDR
39066: GO 39150
39068: LD_INT 4
39070: DOUBLE
39071: EQUAL
39072: IFTRUE 39076
39074: GO 39149
39076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39077: LD_ADDR_VAR 0 12
39081: PUSH
39082: LD_VAR 0 18
39086: PPUSH
39087: LD_INT 22
39089: PUSH
39090: LD_VAR 0 16
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 30
39104: PUSH
39105: LD_INT 6
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: LD_INT 7
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: LD_INT 8
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 72
39146: ST_TO_ADDR
39147: GO 39150
39149: POP
// if i = 1 then
39150: LD_VAR 0 8
39154: PUSH
39155: LD_INT 1
39157: EQUAL
39158: IFFALSE 39269
// begin tmp := [ ] ;
39160: LD_ADDR_VAR 0 19
39164: PUSH
39165: EMPTY
39166: ST_TO_ADDR
// for j in f do
39167: LD_ADDR_VAR 0 9
39171: PUSH
39172: LD_VAR 0 12
39176: PUSH
39177: FOR_IN
39178: IFFALSE 39251
// if GetBType ( j ) = b_bunker then
39180: LD_VAR 0 9
39184: PPUSH
39185: CALL_OW 266
39189: PUSH
39190: LD_INT 32
39192: EQUAL
39193: IFFALSE 39220
// tmp := Insert ( tmp , 1 , j ) else
39195: LD_ADDR_VAR 0 19
39199: PUSH
39200: LD_VAR 0 19
39204: PPUSH
39205: LD_INT 1
39207: PPUSH
39208: LD_VAR 0 9
39212: PPUSH
39213: CALL_OW 2
39217: ST_TO_ADDR
39218: GO 39249
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39220: LD_ADDR_VAR 0 19
39224: PUSH
39225: LD_VAR 0 19
39229: PPUSH
39230: LD_VAR 0 19
39234: PUSH
39235: LD_INT 1
39237: PLUS
39238: PPUSH
39239: LD_VAR 0 9
39243: PPUSH
39244: CALL_OW 2
39248: ST_TO_ADDR
39249: GO 39177
39251: POP
39252: POP
// if tmp then
39253: LD_VAR 0 19
39257: IFFALSE 39269
// f := tmp ;
39259: LD_ADDR_VAR 0 12
39263: PUSH
39264: LD_VAR 0 19
39268: ST_TO_ADDR
// end ; x := personel [ i ] ;
39269: LD_ADDR_VAR 0 13
39273: PUSH
39274: LD_VAR 0 6
39278: PUSH
39279: LD_VAR 0 8
39283: ARRAY
39284: ST_TO_ADDR
// if x = - 1 then
39285: LD_VAR 0 13
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: EQUAL
39294: IFFALSE 39503
// begin for j in f do
39296: LD_ADDR_VAR 0 9
39300: PUSH
39301: LD_VAR 0 12
39305: PUSH
39306: FOR_IN
39307: IFFALSE 39499
// repeat InitHc ;
39309: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39313: LD_VAR 0 9
39317: PPUSH
39318: CALL_OW 266
39322: PUSH
39323: LD_INT 5
39325: EQUAL
39326: IFFALSE 39396
// begin if UnitsInside ( j ) < 3 then
39328: LD_VAR 0 9
39332: PPUSH
39333: CALL_OW 313
39337: PUSH
39338: LD_INT 3
39340: LESS
39341: IFFALSE 39377
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39343: LD_INT 0
39345: PPUSH
39346: LD_INT 5
39348: PUSH
39349: LD_INT 8
39351: PUSH
39352: LD_INT 9
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: PUSH
39360: LD_VAR 0 17
39364: ARRAY
39365: PPUSH
39366: LD_VAR 0 4
39370: PPUSH
39371: CALL_OW 380
39375: GO 39394
// PrepareHuman ( false , i , skill ) ;
39377: LD_INT 0
39379: PPUSH
39380: LD_VAR 0 8
39384: PPUSH
39385: LD_VAR 0 4
39389: PPUSH
39390: CALL_OW 380
// end else
39394: GO 39413
// PrepareHuman ( false , i , skill ) ;
39396: LD_INT 0
39398: PPUSH
39399: LD_VAR 0 8
39403: PPUSH
39404: LD_VAR 0 4
39408: PPUSH
39409: CALL_OW 380
// un := CreateHuman ;
39413: LD_ADDR_VAR 0 14
39417: PUSH
39418: CALL_OW 44
39422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39423: LD_ADDR_VAR 0 7
39427: PUSH
39428: LD_VAR 0 7
39432: PPUSH
39433: LD_INT 1
39435: PPUSH
39436: LD_VAR 0 14
39440: PPUSH
39441: CALL_OW 2
39445: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39446: LD_VAR 0 14
39450: PPUSH
39451: LD_VAR 0 9
39455: PPUSH
39456: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39460: LD_VAR 0 9
39464: PPUSH
39465: CALL_OW 313
39469: PUSH
39470: LD_INT 6
39472: EQUAL
39473: PUSH
39474: LD_VAR 0 9
39478: PPUSH
39479: CALL_OW 266
39483: PUSH
39484: LD_INT 32
39486: PUSH
39487: LD_INT 31
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: IN
39494: OR
39495: IFFALSE 39309
39497: GO 39306
39499: POP
39500: POP
// end else
39501: GO 39883
// for j = 1 to x do
39503: LD_ADDR_VAR 0 9
39507: PUSH
39508: DOUBLE
39509: LD_INT 1
39511: DEC
39512: ST_TO_ADDR
39513: LD_VAR 0 13
39517: PUSH
39518: FOR_TO
39519: IFFALSE 39881
// begin InitHc ;
39521: CALL_OW 19
// if not f then
39525: LD_VAR 0 12
39529: NOT
39530: IFFALSE 39619
// begin PrepareHuman ( false , i , skill ) ;
39532: LD_INT 0
39534: PPUSH
39535: LD_VAR 0 8
39539: PPUSH
39540: LD_VAR 0 4
39544: PPUSH
39545: CALL_OW 380
// un := CreateHuman ;
39549: LD_ADDR_VAR 0 14
39553: PUSH
39554: CALL_OW 44
39558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39559: LD_ADDR_VAR 0 7
39563: PUSH
39564: LD_VAR 0 7
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: LD_VAR 0 14
39576: PPUSH
39577: CALL_OW 2
39581: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39582: LD_VAR 0 14
39586: PPUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: CALL_OW 250
39596: PPUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 251
39606: PPUSH
39607: LD_INT 10
39609: PPUSH
39610: LD_INT 0
39612: PPUSH
39613: CALL_OW 50
// continue ;
39617: GO 39518
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39619: LD_VAR 0 12
39623: PUSH
39624: LD_INT 1
39626: ARRAY
39627: PPUSH
39628: CALL_OW 313
39632: PUSH
39633: LD_VAR 0 12
39637: PUSH
39638: LD_INT 1
39640: ARRAY
39641: PPUSH
39642: CALL_OW 266
39646: PUSH
39647: LD_INT 32
39649: PUSH
39650: LD_INT 31
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: IN
39657: AND
39658: PUSH
39659: LD_VAR 0 12
39663: PUSH
39664: LD_INT 1
39666: ARRAY
39667: PPUSH
39668: CALL_OW 313
39672: PUSH
39673: LD_INT 6
39675: EQUAL
39676: OR
39677: IFFALSE 39697
// f := Delete ( f , 1 ) ;
39679: LD_ADDR_VAR 0 12
39683: PUSH
39684: LD_VAR 0 12
39688: PPUSH
39689: LD_INT 1
39691: PPUSH
39692: CALL_OW 3
39696: ST_TO_ADDR
// if not f then
39697: LD_VAR 0 12
39701: NOT
39702: IFFALSE 39720
// begin x := x + 2 ;
39704: LD_ADDR_VAR 0 13
39708: PUSH
39709: LD_VAR 0 13
39713: PUSH
39714: LD_INT 2
39716: PLUS
39717: ST_TO_ADDR
// continue ;
39718: GO 39518
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39720: LD_VAR 0 12
39724: PUSH
39725: LD_INT 1
39727: ARRAY
39728: PPUSH
39729: CALL_OW 266
39733: PUSH
39734: LD_INT 5
39736: EQUAL
39737: IFFALSE 39811
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39739: LD_VAR 0 12
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PPUSH
39748: CALL_OW 313
39752: PUSH
39753: LD_INT 3
39755: LESS
39756: IFFALSE 39792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39758: LD_INT 0
39760: PPUSH
39761: LD_INT 5
39763: PUSH
39764: LD_INT 8
39766: PUSH
39767: LD_INT 9
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: PUSH
39775: LD_VAR 0 17
39779: ARRAY
39780: PPUSH
39781: LD_VAR 0 4
39785: PPUSH
39786: CALL_OW 380
39790: GO 39809
// PrepareHuman ( false , i , skill ) ;
39792: LD_INT 0
39794: PPUSH
39795: LD_VAR 0 8
39799: PPUSH
39800: LD_VAR 0 4
39804: PPUSH
39805: CALL_OW 380
// end else
39809: GO 39828
// PrepareHuman ( false , i , skill ) ;
39811: LD_INT 0
39813: PPUSH
39814: LD_VAR 0 8
39818: PPUSH
39819: LD_VAR 0 4
39823: PPUSH
39824: CALL_OW 380
// un := CreateHuman ;
39828: LD_ADDR_VAR 0 14
39832: PUSH
39833: CALL_OW 44
39837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: LD_VAR 0 7
39847: PPUSH
39848: LD_INT 1
39850: PPUSH
39851: LD_VAR 0 14
39855: PPUSH
39856: CALL_OW 2
39860: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39861: LD_VAR 0 14
39865: PPUSH
39866: LD_VAR 0 12
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PPUSH
39875: CALL_OW 52
// end ;
39879: GO 39518
39881: POP
39882: POP
// end ;
39883: GO 38820
39885: POP
39886: POP
// result := result ^ buildings ;
39887: LD_ADDR_VAR 0 7
39891: PUSH
39892: LD_VAR 0 7
39896: PUSH
39897: LD_VAR 0 18
39901: ADD
39902: ST_TO_ADDR
// end else
39903: GO 40046
// begin for i = 1 to personel do
39905: LD_ADDR_VAR 0 8
39909: PUSH
39910: DOUBLE
39911: LD_INT 1
39913: DEC
39914: ST_TO_ADDR
39915: LD_VAR 0 6
39919: PUSH
39920: FOR_TO
39921: IFFALSE 40044
// begin if i > 4 then
39923: LD_VAR 0 8
39927: PUSH
39928: LD_INT 4
39930: GREATER
39931: IFFALSE 39935
// break ;
39933: GO 40044
// x := personel [ i ] ;
39935: LD_ADDR_VAR 0 13
39939: PUSH
39940: LD_VAR 0 6
39944: PUSH
39945: LD_VAR 0 8
39949: ARRAY
39950: ST_TO_ADDR
// if x = - 1 then
39951: LD_VAR 0 13
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: EQUAL
39960: IFFALSE 39964
// continue ;
39962: GO 39920
// PrepareHuman ( false , i , skill ) ;
39964: LD_INT 0
39966: PPUSH
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_VAR 0 4
39976: PPUSH
39977: CALL_OW 380
// un := CreateHuman ;
39981: LD_ADDR_VAR 0 14
39985: PUSH
39986: CALL_OW 44
39990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39991: LD_VAR 0 14
39995: PPUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 250
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 251
40015: PPUSH
40016: LD_INT 10
40018: PPUSH
40019: LD_INT 0
40021: PPUSH
40022: CALL_OW 50
// result := result ^ un ;
40026: LD_ADDR_VAR 0 7
40030: PUSH
40031: LD_VAR 0 7
40035: PUSH
40036: LD_VAR 0 14
40040: ADD
40041: ST_TO_ADDR
// end ;
40042: GO 39920
40044: POP
40045: POP
// end ; end ;
40046: LD_VAR 0 7
40050: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40051: LD_INT 0
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
// result := false ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_INT 0
40076: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40077: LD_VAR 0 1
40081: NOT
40082: PUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 266
40092: PUSH
40093: LD_INT 32
40095: PUSH
40096: LD_INT 33
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: IN
40103: NOT
40104: OR
40105: IFFALSE 40109
// exit ;
40107: GO 41218
// nat := GetNation ( tower ) ;
40109: LD_ADDR_VAR 0 12
40113: PUSH
40114: LD_VAR 0 1
40118: PPUSH
40119: CALL_OW 248
40123: ST_TO_ADDR
// side := GetSide ( tower ) ;
40124: LD_ADDR_VAR 0 16
40128: PUSH
40129: LD_VAR 0 1
40133: PPUSH
40134: CALL_OW 255
40138: ST_TO_ADDR
// x := GetX ( tower ) ;
40139: LD_ADDR_VAR 0 10
40143: PUSH
40144: LD_VAR 0 1
40148: PPUSH
40149: CALL_OW 250
40153: ST_TO_ADDR
// y := GetY ( tower ) ;
40154: LD_ADDR_VAR 0 11
40158: PUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 251
40168: ST_TO_ADDR
// if not x or not y then
40169: LD_VAR 0 10
40173: NOT
40174: PUSH
40175: LD_VAR 0 11
40179: NOT
40180: OR
40181: IFFALSE 40185
// exit ;
40183: GO 41218
// weapon := 0 ;
40185: LD_ADDR_VAR 0 18
40189: PUSH
40190: LD_INT 0
40192: ST_TO_ADDR
// fac_list := [ ] ;
40193: LD_ADDR_VAR 0 17
40197: PUSH
40198: EMPTY
40199: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40200: LD_ADDR_VAR 0 6
40204: PUSH
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 274
40214: PPUSH
40215: LD_VAR 0 2
40219: PPUSH
40220: LD_INT 0
40222: PPUSH
40223: CALL 37789 0 3
40227: PPUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PPUSH
40238: CALL_OW 72
40242: ST_TO_ADDR
// if not factories then
40243: LD_VAR 0 6
40247: NOT
40248: IFFALSE 40252
// exit ;
40250: GO 41218
// for i in factories do
40252: LD_ADDR_VAR 0 8
40256: PUSH
40257: LD_VAR 0 6
40261: PUSH
40262: FOR_IN
40263: IFFALSE 40288
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40265: LD_ADDR_VAR 0 17
40269: PUSH
40270: LD_VAR 0 17
40274: PUSH
40275: LD_VAR 0 8
40279: PPUSH
40280: CALL_OW 478
40284: UNION
40285: ST_TO_ADDR
40286: GO 40262
40288: POP
40289: POP
// if not fac_list then
40290: LD_VAR 0 17
40294: NOT
40295: IFFALSE 40299
// exit ;
40297: GO 41218
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40299: LD_ADDR_VAR 0 5
40303: PUSH
40304: LD_INT 4
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: LD_INT 9
40312: PUSH
40313: LD_INT 10
40315: PUSH
40316: LD_INT 6
40318: PUSH
40319: LD_INT 7
40321: PUSH
40322: LD_INT 11
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 27
40336: PUSH
40337: LD_INT 28
40339: PUSH
40340: LD_INT 26
40342: PUSH
40343: LD_INT 30
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 43
40354: PUSH
40355: LD_INT 44
40357: PUSH
40358: LD_INT 46
40360: PUSH
40361: LD_INT 45
40363: PUSH
40364: LD_INT 47
40366: PUSH
40367: LD_INT 49
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: LD_VAR 0 12
40387: ARRAY
40388: ST_TO_ADDR
// list := list isect fac_list ;
40389: LD_ADDR_VAR 0 5
40393: PUSH
40394: LD_VAR 0 5
40398: PUSH
40399: LD_VAR 0 17
40403: ISECT
40404: ST_TO_ADDR
// if not list then
40405: LD_VAR 0 5
40409: NOT
40410: IFFALSE 40414
// exit ;
40412: GO 41218
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40414: LD_VAR 0 12
40418: PUSH
40419: LD_INT 3
40421: EQUAL
40422: PUSH
40423: LD_INT 49
40425: PUSH
40426: LD_VAR 0 5
40430: IN
40431: AND
40432: PUSH
40433: LD_INT 31
40435: PPUSH
40436: LD_VAR 0 16
40440: PPUSH
40441: CALL_OW 321
40445: PUSH
40446: LD_INT 2
40448: EQUAL
40449: AND
40450: IFFALSE 40510
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40452: LD_INT 22
40454: PUSH
40455: LD_VAR 0 16
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 35
40466: PUSH
40467: LD_INT 49
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 91
40476: PUSH
40477: LD_VAR 0 1
40481: PUSH
40482: LD_INT 10
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: PPUSH
40495: CALL_OW 69
40499: NOT
40500: IFFALSE 40510
// weapon := ru_time_lapser ;
40502: LD_ADDR_VAR 0 18
40506: PUSH
40507: LD_INT 49
40509: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40510: LD_VAR 0 12
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: IN
40525: PUSH
40526: LD_INT 11
40528: PUSH
40529: LD_VAR 0 5
40533: IN
40534: PUSH
40535: LD_INT 30
40537: PUSH
40538: LD_VAR 0 5
40542: IN
40543: OR
40544: AND
40545: PUSH
40546: LD_INT 6
40548: PPUSH
40549: LD_VAR 0 16
40553: PPUSH
40554: CALL_OW 321
40558: PUSH
40559: LD_INT 2
40561: EQUAL
40562: AND
40563: IFFALSE 40728
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40565: LD_INT 22
40567: PUSH
40568: LD_VAR 0 16
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 35
40582: PUSH
40583: LD_INT 11
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 35
40592: PUSH
40593: LD_INT 30
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 91
40607: PUSH
40608: LD_VAR 0 1
40612: PUSH
40613: LD_INT 18
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: PPUSH
40626: CALL_OW 69
40630: NOT
40631: PUSH
40632: LD_INT 22
40634: PUSH
40635: LD_VAR 0 16
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 30
40649: PUSH
40650: LD_INT 32
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 30
40659: PUSH
40660: LD_INT 33
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 91
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: LD_INT 12
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: PPUSH
40696: CALL_OW 69
40700: PUSH
40701: LD_INT 2
40703: GREATER
40704: AND
40705: IFFALSE 40728
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40707: LD_ADDR_VAR 0 18
40711: PUSH
40712: LD_INT 11
40714: PUSH
40715: LD_INT 30
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_VAR 0 12
40726: ARRAY
40727: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40728: LD_VAR 0 18
40732: NOT
40733: PUSH
40734: LD_INT 40
40736: PPUSH
40737: LD_VAR 0 16
40741: PPUSH
40742: CALL_OW 321
40746: PUSH
40747: LD_INT 2
40749: EQUAL
40750: AND
40751: PUSH
40752: LD_INT 7
40754: PUSH
40755: LD_VAR 0 5
40759: IN
40760: PUSH
40761: LD_INT 28
40763: PUSH
40764: LD_VAR 0 5
40768: IN
40769: OR
40770: PUSH
40771: LD_INT 45
40773: PUSH
40774: LD_VAR 0 5
40778: IN
40779: OR
40780: AND
40781: IFFALSE 41035
// begin hex := GetHexInfo ( x , y ) ;
40783: LD_ADDR_VAR 0 4
40787: PUSH
40788: LD_VAR 0 10
40792: PPUSH
40793: LD_VAR 0 11
40797: PPUSH
40798: CALL_OW 546
40802: ST_TO_ADDR
// if hex [ 1 ] then
40803: LD_VAR 0 4
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: IFFALSE 40815
// exit ;
40813: GO 41218
// height := hex [ 2 ] ;
40815: LD_ADDR_VAR 0 15
40819: PUSH
40820: LD_VAR 0 4
40824: PUSH
40825: LD_INT 2
40827: ARRAY
40828: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40829: LD_ADDR_VAR 0 14
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 5
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// for i in tmp do
40852: LD_ADDR_VAR 0 8
40856: PUSH
40857: LD_VAR 0 14
40861: PUSH
40862: FOR_IN
40863: IFFALSE 41033
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40865: LD_ADDR_VAR 0 9
40869: PUSH
40870: LD_VAR 0 10
40874: PPUSH
40875: LD_VAR 0 8
40879: PPUSH
40880: LD_INT 5
40882: PPUSH
40883: CALL_OW 272
40887: PUSH
40888: LD_VAR 0 11
40892: PPUSH
40893: LD_VAR 0 8
40897: PPUSH
40898: LD_INT 5
40900: PPUSH
40901: CALL_OW 273
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40910: LD_VAR 0 9
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: PPUSH
40919: LD_VAR 0 9
40923: PUSH
40924: LD_INT 2
40926: ARRAY
40927: PPUSH
40928: CALL_OW 488
40932: IFFALSE 41031
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40934: LD_ADDR_VAR 0 4
40938: PUSH
40939: LD_VAR 0 9
40943: PUSH
40944: LD_INT 1
40946: ARRAY
40947: PPUSH
40948: LD_VAR 0 9
40952: PUSH
40953: LD_INT 2
40955: ARRAY
40956: PPUSH
40957: CALL_OW 546
40961: ST_TO_ADDR
// if hex [ 1 ] then
40962: LD_VAR 0 4
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: IFFALSE 40974
// continue ;
40972: GO 40862
// h := hex [ 2 ] ;
40974: LD_ADDR_VAR 0 13
40978: PUSH
40979: LD_VAR 0 4
40983: PUSH
40984: LD_INT 2
40986: ARRAY
40987: ST_TO_ADDR
// if h + 7 < height then
40988: LD_VAR 0 13
40992: PUSH
40993: LD_INT 7
40995: PLUS
40996: PUSH
40997: LD_VAR 0 15
41001: LESS
41002: IFFALSE 41031
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41004: LD_ADDR_VAR 0 18
41008: PUSH
41009: LD_INT 7
41011: PUSH
41012: LD_INT 28
41014: PUSH
41015: LD_INT 45
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: PUSH
41023: LD_VAR 0 12
41027: ARRAY
41028: ST_TO_ADDR
// break ;
41029: GO 41033
// end ; end ; end ;
41031: GO 40862
41033: POP
41034: POP
// end ; if not weapon then
41035: LD_VAR 0 18
41039: NOT
41040: IFFALSE 41100
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_VAR 0 5
41051: PUSH
41052: LD_INT 11
41054: PUSH
41055: LD_INT 30
41057: PUSH
41058: LD_INT 49
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: DIFF
41066: ST_TO_ADDR
// if not list then
41067: LD_VAR 0 5
41071: NOT
41072: IFFALSE 41076
// exit ;
41074: GO 41218
// weapon := list [ rand ( 1 , list ) ] ;
41076: LD_ADDR_VAR 0 18
41080: PUSH
41081: LD_VAR 0 5
41085: PUSH
41086: LD_INT 1
41088: PPUSH
41089: LD_VAR 0 5
41093: PPUSH
41094: CALL_OW 12
41098: ARRAY
41099: ST_TO_ADDR
// end ; if weapon then
41100: LD_VAR 0 18
41104: IFFALSE 41218
// begin tmp := CostOfWeapon ( weapon ) ;
41106: LD_ADDR_VAR 0 14
41110: PUSH
41111: LD_VAR 0 18
41115: PPUSH
41116: CALL_OW 451
41120: ST_TO_ADDR
// j := GetBase ( tower ) ;
41121: LD_ADDR_VAR 0 9
41125: PUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: CALL_OW 274
41135: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41136: LD_VAR 0 9
41140: PPUSH
41141: LD_INT 1
41143: PPUSH
41144: CALL_OW 275
41148: PUSH
41149: LD_VAR 0 14
41153: PUSH
41154: LD_INT 1
41156: ARRAY
41157: GREATEREQUAL
41158: PUSH
41159: LD_VAR 0 9
41163: PPUSH
41164: LD_INT 2
41166: PPUSH
41167: CALL_OW 275
41171: PUSH
41172: LD_VAR 0 14
41176: PUSH
41177: LD_INT 2
41179: ARRAY
41180: GREATEREQUAL
41181: AND
41182: PUSH
41183: LD_VAR 0 9
41187: PPUSH
41188: LD_INT 3
41190: PPUSH
41191: CALL_OW 275
41195: PUSH
41196: LD_VAR 0 14
41200: PUSH
41201: LD_INT 3
41203: ARRAY
41204: GREATEREQUAL
41205: AND
41206: IFFALSE 41218
// result := weapon ;
41208: LD_ADDR_VAR 0 3
41212: PUSH
41213: LD_VAR 0 18
41217: ST_TO_ADDR
// end ; end ;
41218: LD_VAR 0 3
41222: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41223: LD_INT 0
41225: PPUSH
41226: PPUSH
// result := true ;
41227: LD_ADDR_VAR 0 3
41231: PUSH
41232: LD_INT 1
41234: ST_TO_ADDR
// if array1 = array2 then
41235: LD_VAR 0 1
41239: PUSH
41240: LD_VAR 0 2
41244: EQUAL
41245: IFFALSE 41305
// begin for i = 1 to array1 do
41247: LD_ADDR_VAR 0 4
41251: PUSH
41252: DOUBLE
41253: LD_INT 1
41255: DEC
41256: ST_TO_ADDR
41257: LD_VAR 0 1
41261: PUSH
41262: FOR_TO
41263: IFFALSE 41301
// if array1 [ i ] <> array2 [ i ] then
41265: LD_VAR 0 1
41269: PUSH
41270: LD_VAR 0 4
41274: ARRAY
41275: PUSH
41276: LD_VAR 0 2
41280: PUSH
41281: LD_VAR 0 4
41285: ARRAY
41286: NONEQUAL
41287: IFFALSE 41299
// begin result := false ;
41289: LD_ADDR_VAR 0 3
41293: PUSH
41294: LD_INT 0
41296: ST_TO_ADDR
// break ;
41297: GO 41301
// end ;
41299: GO 41262
41301: POP
41302: POP
// end else
41303: GO 41313
// result := false ;
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: LD_INT 0
41312: ST_TO_ADDR
// end ;
41313: LD_VAR 0 3
41317: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41318: LD_INT 0
41320: PPUSH
41321: PPUSH
// if not array1 or not array2 then
41322: LD_VAR 0 1
41326: NOT
41327: PUSH
41328: LD_VAR 0 2
41332: NOT
41333: OR
41334: IFFALSE 41338
// exit ;
41336: GO 41402
// result := true ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_INT 1
41345: ST_TO_ADDR
// for i = 1 to array1 do
41346: LD_ADDR_VAR 0 4
41350: PUSH
41351: DOUBLE
41352: LD_INT 1
41354: DEC
41355: ST_TO_ADDR
41356: LD_VAR 0 1
41360: PUSH
41361: FOR_TO
41362: IFFALSE 41400
// if array1 [ i ] <> array2 [ i ] then
41364: LD_VAR 0 1
41368: PUSH
41369: LD_VAR 0 4
41373: ARRAY
41374: PUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_VAR 0 4
41384: ARRAY
41385: NONEQUAL
41386: IFFALSE 41398
// begin result := false ;
41388: LD_ADDR_VAR 0 3
41392: PUSH
41393: LD_INT 0
41395: ST_TO_ADDR
// break ;
41396: GO 41400
// end ;
41398: GO 41361
41400: POP
41401: POP
// end ;
41402: LD_VAR 0 3
41406: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41407: LD_INT 0
41409: PPUSH
41410: PPUSH
41411: PPUSH
// pom := GetBase ( fac ) ;
41412: LD_ADDR_VAR 0 5
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 274
41426: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_INT 1
41439: ARRAY
41440: PPUSH
41441: LD_VAR 0 2
41445: PUSH
41446: LD_INT 2
41448: ARRAY
41449: PPUSH
41450: LD_VAR 0 2
41454: PUSH
41455: LD_INT 3
41457: ARRAY
41458: PPUSH
41459: LD_VAR 0 2
41463: PUSH
41464: LD_INT 4
41466: ARRAY
41467: PPUSH
41468: CALL_OW 449
41472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_VAR 0 5
41482: PPUSH
41483: LD_INT 1
41485: PPUSH
41486: CALL_OW 275
41490: PUSH
41491: LD_VAR 0 4
41495: PUSH
41496: LD_INT 1
41498: ARRAY
41499: GREATEREQUAL
41500: PUSH
41501: LD_VAR 0 5
41505: PPUSH
41506: LD_INT 2
41508: PPUSH
41509: CALL_OW 275
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: LD_INT 2
41521: ARRAY
41522: GREATEREQUAL
41523: AND
41524: PUSH
41525: LD_VAR 0 5
41529: PPUSH
41530: LD_INT 3
41532: PPUSH
41533: CALL_OW 275
41537: PUSH
41538: LD_VAR 0 4
41542: PUSH
41543: LD_INT 3
41545: ARRAY
41546: GREATEREQUAL
41547: AND
41548: ST_TO_ADDR
// end ;
41549: LD_VAR 0 3
41553: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41554: LD_INT 0
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
// pom := GetBase ( building ) ;
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 274
41574: ST_TO_ADDR
// if not pom then
41575: LD_VAR 0 3
41579: NOT
41580: IFFALSE 41584
// exit ;
41582: GO 41754
// btype := GetBType ( building ) ;
41584: LD_ADDR_VAR 0 5
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 266
41598: ST_TO_ADDR
// if btype = b_armoury then
41599: LD_VAR 0 5
41603: PUSH
41604: LD_INT 4
41606: EQUAL
41607: IFFALSE 41617
// btype := b_barracks ;
41609: LD_ADDR_VAR 0 5
41613: PUSH
41614: LD_INT 5
41616: ST_TO_ADDR
// if btype = b_depot then
41617: LD_VAR 0 5
41621: PUSH
41622: LD_INT 0
41624: EQUAL
41625: IFFALSE 41635
// btype := b_warehouse ;
41627: LD_ADDR_VAR 0 5
41631: PUSH
41632: LD_INT 1
41634: ST_TO_ADDR
// if btype = b_workshop then
41635: LD_VAR 0 5
41639: PUSH
41640: LD_INT 2
41642: EQUAL
41643: IFFALSE 41653
// btype := b_factory ;
41645: LD_ADDR_VAR 0 5
41649: PUSH
41650: LD_INT 3
41652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41653: LD_ADDR_VAR 0 4
41657: PUSH
41658: LD_VAR 0 5
41662: PPUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 248
41672: PPUSH
41673: CALL_OW 450
41677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41678: LD_ADDR_VAR 0 2
41682: PUSH
41683: LD_VAR 0 3
41687: PPUSH
41688: LD_INT 1
41690: PPUSH
41691: CALL_OW 275
41695: PUSH
41696: LD_VAR 0 4
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: GREATEREQUAL
41705: PUSH
41706: LD_VAR 0 3
41710: PPUSH
41711: LD_INT 2
41713: PPUSH
41714: CALL_OW 275
41718: PUSH
41719: LD_VAR 0 4
41723: PUSH
41724: LD_INT 2
41726: ARRAY
41727: GREATEREQUAL
41728: AND
41729: PUSH
41730: LD_VAR 0 3
41734: PPUSH
41735: LD_INT 3
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 4
41747: PUSH
41748: LD_INT 3
41750: ARRAY
41751: GREATEREQUAL
41752: AND
41753: ST_TO_ADDR
// end ;
41754: LD_VAR 0 2
41758: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41759: LD_INT 0
41761: PPUSH
41762: PPUSH
41763: PPUSH
// pom := GetBase ( building ) ;
41764: LD_ADDR_VAR 0 4
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 274
41778: ST_TO_ADDR
// if not pom then
41779: LD_VAR 0 4
41783: NOT
41784: IFFALSE 41788
// exit ;
41786: GO 41889
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41788: LD_ADDR_VAR 0 5
41792: PUSH
41793: LD_VAR 0 2
41797: PPUSH
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 248
41807: PPUSH
41808: CALL_OW 450
41812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41813: LD_ADDR_VAR 0 3
41817: PUSH
41818: LD_VAR 0 4
41822: PPUSH
41823: LD_INT 1
41825: PPUSH
41826: CALL_OW 275
41830: PUSH
41831: LD_VAR 0 5
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: GREATEREQUAL
41840: PUSH
41841: LD_VAR 0 4
41845: PPUSH
41846: LD_INT 2
41848: PPUSH
41849: CALL_OW 275
41853: PUSH
41854: LD_VAR 0 5
41858: PUSH
41859: LD_INT 2
41861: ARRAY
41862: GREATEREQUAL
41863: AND
41864: PUSH
41865: LD_VAR 0 4
41869: PPUSH
41870: LD_INT 3
41872: PPUSH
41873: CALL_OW 275
41877: PUSH
41878: LD_VAR 0 5
41882: PUSH
41883: LD_INT 3
41885: ARRAY
41886: GREATEREQUAL
41887: AND
41888: ST_TO_ADDR
// end ;
41889: LD_VAR 0 3
41893: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
// result := false ;
41907: LD_ADDR_VAR 0 8
41911: PUSH
41912: LD_INT 0
41914: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41915: LD_VAR 0 5
41919: NOT
41920: PUSH
41921: LD_VAR 0 1
41925: NOT
41926: OR
41927: PUSH
41928: LD_VAR 0 2
41932: NOT
41933: OR
41934: PUSH
41935: LD_VAR 0 3
41939: NOT
41940: OR
41941: IFFALSE 41945
// exit ;
41943: GO 42759
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41945: LD_ADDR_VAR 0 14
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: LD_VAR 0 2
41959: PPUSH
41960: LD_VAR 0 3
41964: PPUSH
41965: LD_VAR 0 4
41969: PPUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_INT 1
41977: ARRAY
41978: PPUSH
41979: CALL_OW 248
41983: PPUSH
41984: LD_INT 0
41986: PPUSH
41987: CALL 43996 0 6
41991: ST_TO_ADDR
// if not hexes then
41992: LD_VAR 0 14
41996: NOT
41997: IFFALSE 42001
// exit ;
41999: GO 42759
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42001: LD_ADDR_VAR 0 17
42005: PUSH
42006: LD_VAR 0 5
42010: PPUSH
42011: LD_INT 22
42013: PUSH
42014: LD_VAR 0 13
42018: PPUSH
42019: CALL_OW 255
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 30
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 30
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 72
42064: ST_TO_ADDR
// for i = 1 to hexes do
42065: LD_ADDR_VAR 0 9
42069: PUSH
42070: DOUBLE
42071: LD_INT 1
42073: DEC
42074: ST_TO_ADDR
42075: LD_VAR 0 14
42079: PUSH
42080: FOR_TO
42081: IFFALSE 42757
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42083: LD_ADDR_VAR 0 13
42087: PUSH
42088: LD_VAR 0 14
42092: PUSH
42093: LD_VAR 0 9
42097: ARRAY
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: PPUSH
42103: LD_VAR 0 14
42107: PUSH
42108: LD_VAR 0 9
42112: ARRAY
42113: PUSH
42114: LD_INT 2
42116: ARRAY
42117: PPUSH
42118: CALL_OW 428
42122: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42123: LD_VAR 0 14
42127: PUSH
42128: LD_VAR 0 9
42132: ARRAY
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: PPUSH
42138: LD_VAR 0 14
42142: PUSH
42143: LD_VAR 0 9
42147: ARRAY
42148: PUSH
42149: LD_INT 2
42151: ARRAY
42152: PPUSH
42153: CALL_OW 351
42157: PUSH
42158: LD_VAR 0 14
42162: PUSH
42163: LD_VAR 0 9
42167: ARRAY
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: PPUSH
42173: LD_VAR 0 14
42177: PUSH
42178: LD_VAR 0 9
42182: ARRAY
42183: PUSH
42184: LD_INT 2
42186: ARRAY
42187: PPUSH
42188: CALL_OW 488
42192: NOT
42193: OR
42194: PUSH
42195: LD_VAR 0 13
42199: PPUSH
42200: CALL_OW 247
42204: PUSH
42205: LD_INT 3
42207: EQUAL
42208: OR
42209: IFFALSE 42215
// exit ;
42211: POP
42212: POP
42213: GO 42759
// if not tmp then
42215: LD_VAR 0 13
42219: NOT
42220: IFFALSE 42224
// continue ;
42222: GO 42080
// result := true ;
42224: LD_ADDR_VAR 0 8
42228: PUSH
42229: LD_INT 1
42231: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42232: LD_VAR 0 6
42236: PUSH
42237: LD_VAR 0 13
42241: PPUSH
42242: CALL_OW 247
42246: PUSH
42247: LD_INT 2
42249: EQUAL
42250: AND
42251: PUSH
42252: LD_VAR 0 13
42256: PPUSH
42257: CALL_OW 263
42261: PUSH
42262: LD_INT 1
42264: EQUAL
42265: AND
42266: IFFALSE 42430
// begin if IsDrivenBy ( tmp ) then
42268: LD_VAR 0 13
42272: PPUSH
42273: CALL_OW 311
42277: IFFALSE 42281
// continue ;
42279: GO 42080
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42281: LD_VAR 0 6
42285: PPUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 60
42291: PUSH
42292: EMPTY
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 55
42304: PUSH
42305: EMPTY
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PPUSH
42316: CALL_OW 72
42320: IFFALSE 42428
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42322: LD_ADDR_VAR 0 18
42326: PUSH
42327: LD_VAR 0 6
42331: PPUSH
42332: LD_INT 3
42334: PUSH
42335: LD_INT 60
42337: PUSH
42338: EMPTY
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 55
42350: PUSH
42351: EMPTY
42352: LIST
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PPUSH
42362: CALL_OW 72
42366: PUSH
42367: LD_INT 1
42369: ARRAY
42370: ST_TO_ADDR
// if IsInUnit ( driver ) then
42371: LD_VAR 0 18
42375: PPUSH
42376: CALL_OW 310
42380: IFFALSE 42391
// ComExit ( driver ) ;
42382: LD_VAR 0 18
42386: PPUSH
42387: CALL 67180 0 1
// AddComEnterUnit ( driver , tmp ) ;
42391: LD_VAR 0 18
42395: PPUSH
42396: LD_VAR 0 13
42400: PPUSH
42401: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42405: LD_VAR 0 18
42409: PPUSH
42410: LD_VAR 0 7
42414: PPUSH
42415: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42419: LD_VAR 0 18
42423: PPUSH
42424: CALL_OW 181
// end ; continue ;
42428: GO 42080
// end ; if not cleaners or not tmp in cleaners then
42430: LD_VAR 0 6
42434: NOT
42435: PUSH
42436: LD_VAR 0 13
42440: PUSH
42441: LD_VAR 0 6
42445: IN
42446: NOT
42447: OR
42448: IFFALSE 42755
// begin if dep then
42450: LD_VAR 0 17
42454: IFFALSE 42590
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42456: LD_ADDR_VAR 0 16
42460: PUSH
42461: LD_VAR 0 17
42465: PUSH
42466: LD_INT 1
42468: ARRAY
42469: PPUSH
42470: CALL_OW 250
42474: PPUSH
42475: LD_VAR 0 17
42479: PUSH
42480: LD_INT 1
42482: ARRAY
42483: PPUSH
42484: CALL_OW 254
42488: PPUSH
42489: LD_INT 5
42491: PPUSH
42492: CALL_OW 272
42496: PUSH
42497: LD_VAR 0 17
42501: PUSH
42502: LD_INT 1
42504: ARRAY
42505: PPUSH
42506: CALL_OW 251
42510: PPUSH
42511: LD_VAR 0 17
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: CALL_OW 254
42524: PPUSH
42525: LD_INT 5
42527: PPUSH
42528: CALL_OW 273
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42537: LD_VAR 0 16
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PPUSH
42546: LD_VAR 0 16
42550: PUSH
42551: LD_INT 2
42553: ARRAY
42554: PPUSH
42555: CALL_OW 488
42559: IFFALSE 42590
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42561: LD_VAR 0 13
42565: PPUSH
42566: LD_VAR 0 16
42570: PUSH
42571: LD_INT 1
42573: ARRAY
42574: PPUSH
42575: LD_VAR 0 16
42579: PUSH
42580: LD_INT 2
42582: ARRAY
42583: PPUSH
42584: CALL_OW 111
// continue ;
42588: GO 42080
// end ; end ; r := GetDir ( tmp ) ;
42590: LD_ADDR_VAR 0 15
42594: PUSH
42595: LD_VAR 0 13
42599: PPUSH
42600: CALL_OW 254
42604: ST_TO_ADDR
// if r = 5 then
42605: LD_VAR 0 15
42609: PUSH
42610: LD_INT 5
42612: EQUAL
42613: IFFALSE 42623
// r := 0 ;
42615: LD_ADDR_VAR 0 15
42619: PUSH
42620: LD_INT 0
42622: ST_TO_ADDR
// for j = r to 5 do
42623: LD_ADDR_VAR 0 10
42627: PUSH
42628: DOUBLE
42629: LD_VAR 0 15
42633: DEC
42634: ST_TO_ADDR
42635: LD_INT 5
42637: PUSH
42638: FOR_TO
42639: IFFALSE 42753
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42641: LD_ADDR_VAR 0 11
42645: PUSH
42646: LD_VAR 0 13
42650: PPUSH
42651: CALL_OW 250
42655: PPUSH
42656: LD_VAR 0 10
42660: PPUSH
42661: LD_INT 2
42663: PPUSH
42664: CALL_OW 272
42668: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42669: LD_ADDR_VAR 0 12
42673: PUSH
42674: LD_VAR 0 13
42678: PPUSH
42679: CALL_OW 251
42683: PPUSH
42684: LD_VAR 0 10
42688: PPUSH
42689: LD_INT 2
42691: PPUSH
42692: CALL_OW 273
42696: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42697: LD_VAR 0 11
42701: PPUSH
42702: LD_VAR 0 12
42706: PPUSH
42707: CALL_OW 488
42711: PUSH
42712: LD_VAR 0 11
42716: PPUSH
42717: LD_VAR 0 12
42721: PPUSH
42722: CALL_OW 428
42726: NOT
42727: AND
42728: IFFALSE 42751
// begin ComMoveXY ( tmp , _x , _y ) ;
42730: LD_VAR 0 13
42734: PPUSH
42735: LD_VAR 0 11
42739: PPUSH
42740: LD_VAR 0 12
42744: PPUSH
42745: CALL_OW 111
// break ;
42749: GO 42753
// end ; end ;
42751: GO 42638
42753: POP
42754: POP
// end ; end ;
42755: GO 42080
42757: POP
42758: POP
// end ;
42759: LD_VAR 0 8
42763: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42764: LD_INT 0
42766: PPUSH
// result := true ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_INT 1
42774: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42775: LD_VAR 0 2
42779: PUSH
42780: LD_INT 24
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42794
42786: LD_INT 33
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42819
42794: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 32
42802: PPUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 321
42812: PUSH
42813: LD_INT 2
42815: EQUAL
42816: ST_TO_ADDR
42817: GO 43139
42819: LD_INT 20
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42852
42827: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 6
42835: PPUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 321
42845: PUSH
42846: LD_INT 2
42848: EQUAL
42849: ST_TO_ADDR
42850: GO 43139
42852: LD_INT 22
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42866
42858: LD_INT 36
42860: DOUBLE
42861: EQUAL
42862: IFTRUE 42866
42864: GO 42891
42866: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42867: LD_ADDR_VAR 0 3
42871: PUSH
42872: LD_INT 15
42874: PPUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 321
42884: PUSH
42885: LD_INT 2
42887: EQUAL
42888: ST_TO_ADDR
42889: GO 43139
42891: LD_INT 30
42893: DOUBLE
42894: EQUAL
42895: IFTRUE 42899
42897: GO 42924
42899: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_INT 20
42907: PPUSH
42908: LD_VAR 0 1
42912: PPUSH
42913: CALL_OW 321
42917: PUSH
42918: LD_INT 2
42920: EQUAL
42921: ST_TO_ADDR
42922: GO 43139
42924: LD_INT 28
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42938
42930: LD_INT 21
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42963
42938: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_INT 21
42946: PPUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 321
42956: PUSH
42957: LD_INT 2
42959: EQUAL
42960: ST_TO_ADDR
42961: GO 43139
42963: LD_INT 16
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 42998
42971: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_EXP 117
42981: PPUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 321
42991: PUSH
42992: LD_INT 2
42994: EQUAL
42995: ST_TO_ADDR
42996: GO 43139
42998: LD_INT 19
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43012
43004: LD_INT 23
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43039
43012: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_EXP 116
43022: PPUSH
43023: LD_VAR 0 1
43027: PPUSH
43028: CALL_OW 321
43032: PUSH
43033: LD_INT 2
43035: EQUAL
43036: ST_TO_ADDR
43037: GO 43139
43039: LD_INT 17
43041: DOUBLE
43042: EQUAL
43043: IFTRUE 43047
43045: GO 43072
43047: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43048: LD_ADDR_VAR 0 3
43052: PUSH
43053: LD_INT 39
43055: PPUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: CALL_OW 321
43065: PUSH
43066: LD_INT 2
43068: EQUAL
43069: ST_TO_ADDR
43070: GO 43139
43072: LD_INT 18
43074: DOUBLE
43075: EQUAL
43076: IFTRUE 43080
43078: GO 43105
43080: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_INT 40
43088: PPUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: CALL_OW 321
43098: PUSH
43099: LD_INT 2
43101: EQUAL
43102: ST_TO_ADDR
43103: GO 43139
43105: LD_INT 27
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43138
43113: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_INT 35
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 321
43131: PUSH
43132: LD_INT 2
43134: EQUAL
43135: ST_TO_ADDR
43136: GO 43139
43138: POP
// end ;
43139: LD_VAR 0 3
43143: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43144: LD_INT 0
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
// result := false ;
43157: LD_ADDR_VAR 0 6
43161: PUSH
43162: LD_INT 0
43164: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43165: LD_VAR 0 1
43169: NOT
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 266
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: IN
43191: NOT
43192: OR
43193: PUSH
43194: LD_VAR 0 2
43198: NOT
43199: OR
43200: PUSH
43201: LD_VAR 0 5
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: IN
43232: NOT
43233: OR
43234: PUSH
43235: LD_VAR 0 3
43239: PPUSH
43240: LD_VAR 0 4
43244: PPUSH
43245: CALL_OW 488
43249: NOT
43250: OR
43251: IFFALSE 43255
// exit ;
43253: GO 43991
// side := GetSide ( depot ) ;
43255: LD_ADDR_VAR 0 9
43259: PUSH
43260: LD_VAR 0 1
43264: PPUSH
43265: CALL_OW 255
43269: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43270: LD_VAR 0 9
43274: PPUSH
43275: LD_VAR 0 2
43279: PPUSH
43280: CALL 42764 0 2
43284: NOT
43285: IFFALSE 43289
// exit ;
43287: GO 43991
// pom := GetBase ( depot ) ;
43289: LD_ADDR_VAR 0 10
43293: PUSH
43294: LD_VAR 0 1
43298: PPUSH
43299: CALL_OW 274
43303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43304: LD_ADDR_VAR 0 11
43308: PUSH
43309: LD_VAR 0 2
43313: PPUSH
43314: LD_VAR 0 1
43318: PPUSH
43319: CALL_OW 248
43323: PPUSH
43324: CALL_OW 450
43328: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43329: LD_VAR 0 10
43333: PPUSH
43334: LD_INT 1
43336: PPUSH
43337: CALL_OW 275
43341: PUSH
43342: LD_VAR 0 11
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: GREATEREQUAL
43351: PUSH
43352: LD_VAR 0 10
43356: PPUSH
43357: LD_INT 2
43359: PPUSH
43360: CALL_OW 275
43364: PUSH
43365: LD_VAR 0 11
43369: PUSH
43370: LD_INT 2
43372: ARRAY
43373: GREATEREQUAL
43374: AND
43375: PUSH
43376: LD_VAR 0 10
43380: PPUSH
43381: LD_INT 3
43383: PPUSH
43384: CALL_OW 275
43388: PUSH
43389: LD_VAR 0 11
43393: PUSH
43394: LD_INT 3
43396: ARRAY
43397: GREATEREQUAL
43398: AND
43399: NOT
43400: IFFALSE 43404
// exit ;
43402: GO 43991
// if GetBType ( depot ) = b_depot then
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 266
43413: PUSH
43414: LD_INT 0
43416: EQUAL
43417: IFFALSE 43429
// dist := 28 else
43419: LD_ADDR_VAR 0 14
43423: PUSH
43424: LD_INT 28
43426: ST_TO_ADDR
43427: GO 43437
// dist := 36 ;
43429: LD_ADDR_VAR 0 14
43433: PUSH
43434: LD_INT 36
43436: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43437: LD_VAR 0 1
43441: PPUSH
43442: LD_VAR 0 3
43446: PPUSH
43447: LD_VAR 0 4
43451: PPUSH
43452: CALL_OW 297
43456: PUSH
43457: LD_VAR 0 14
43461: GREATER
43462: IFFALSE 43466
// exit ;
43464: GO 43991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43466: LD_ADDR_VAR 0 12
43470: PUSH
43471: LD_VAR 0 2
43475: PPUSH
43476: LD_VAR 0 3
43480: PPUSH
43481: LD_VAR 0 4
43485: PPUSH
43486: LD_VAR 0 5
43490: PPUSH
43491: LD_VAR 0 1
43495: PPUSH
43496: CALL_OW 248
43500: PPUSH
43501: LD_INT 0
43503: PPUSH
43504: CALL 43996 0 6
43508: ST_TO_ADDR
// if not hexes then
43509: LD_VAR 0 12
43513: NOT
43514: IFFALSE 43518
// exit ;
43516: GO 43991
// hex := GetHexInfo ( x , y ) ;
43518: LD_ADDR_VAR 0 15
43522: PUSH
43523: LD_VAR 0 3
43527: PPUSH
43528: LD_VAR 0 4
43532: PPUSH
43533: CALL_OW 546
43537: ST_TO_ADDR
// if hex [ 1 ] then
43538: LD_VAR 0 15
43542: PUSH
43543: LD_INT 1
43545: ARRAY
43546: IFFALSE 43550
// exit ;
43548: GO 43991
// height := hex [ 2 ] ;
43550: LD_ADDR_VAR 0 13
43554: PUSH
43555: LD_VAR 0 15
43559: PUSH
43560: LD_INT 2
43562: ARRAY
43563: ST_TO_ADDR
// for i = 1 to hexes do
43564: LD_ADDR_VAR 0 7
43568: PUSH
43569: DOUBLE
43570: LD_INT 1
43572: DEC
43573: ST_TO_ADDR
43574: LD_VAR 0 12
43578: PUSH
43579: FOR_TO
43580: IFFALSE 43910
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43582: LD_VAR 0 12
43586: PUSH
43587: LD_VAR 0 7
43591: ARRAY
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PPUSH
43597: LD_VAR 0 12
43601: PUSH
43602: LD_VAR 0 7
43606: ARRAY
43607: PUSH
43608: LD_INT 2
43610: ARRAY
43611: PPUSH
43612: CALL_OW 488
43616: NOT
43617: PUSH
43618: LD_VAR 0 12
43622: PUSH
43623: LD_VAR 0 7
43627: ARRAY
43628: PUSH
43629: LD_INT 1
43631: ARRAY
43632: PPUSH
43633: LD_VAR 0 12
43637: PUSH
43638: LD_VAR 0 7
43642: ARRAY
43643: PUSH
43644: LD_INT 2
43646: ARRAY
43647: PPUSH
43648: CALL_OW 428
43652: PUSH
43653: LD_INT 0
43655: GREATER
43656: OR
43657: PUSH
43658: LD_VAR 0 12
43662: PUSH
43663: LD_VAR 0 7
43667: ARRAY
43668: PUSH
43669: LD_INT 1
43671: ARRAY
43672: PPUSH
43673: LD_VAR 0 12
43677: PUSH
43678: LD_VAR 0 7
43682: ARRAY
43683: PUSH
43684: LD_INT 2
43686: ARRAY
43687: PPUSH
43688: CALL_OW 351
43692: OR
43693: IFFALSE 43699
// exit ;
43695: POP
43696: POP
43697: GO 43991
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43699: LD_ADDR_VAR 0 8
43703: PUSH
43704: LD_VAR 0 12
43708: PUSH
43709: LD_VAR 0 7
43713: ARRAY
43714: PUSH
43715: LD_INT 1
43717: ARRAY
43718: PPUSH
43719: LD_VAR 0 12
43723: PUSH
43724: LD_VAR 0 7
43728: ARRAY
43729: PUSH
43730: LD_INT 2
43732: ARRAY
43733: PPUSH
43734: CALL_OW 546
43738: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43739: LD_VAR 0 8
43743: PUSH
43744: LD_INT 1
43746: ARRAY
43747: PUSH
43748: LD_VAR 0 8
43752: PUSH
43753: LD_INT 2
43755: ARRAY
43756: PUSH
43757: LD_VAR 0 13
43761: PUSH
43762: LD_INT 2
43764: PLUS
43765: GREATER
43766: OR
43767: PUSH
43768: LD_VAR 0 8
43772: PUSH
43773: LD_INT 2
43775: ARRAY
43776: PUSH
43777: LD_VAR 0 13
43781: PUSH
43782: LD_INT 2
43784: MINUS
43785: LESS
43786: OR
43787: PUSH
43788: LD_VAR 0 8
43792: PUSH
43793: LD_INT 3
43795: ARRAY
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 8
43802: PUSH
43803: LD_INT 9
43805: PUSH
43806: LD_INT 10
43808: PUSH
43809: LD_INT 11
43811: PUSH
43812: LD_INT 12
43814: PUSH
43815: LD_INT 13
43817: PUSH
43818: LD_INT 16
43820: PUSH
43821: LD_INT 17
43823: PUSH
43824: LD_INT 18
43826: PUSH
43827: LD_INT 19
43829: PUSH
43830: LD_INT 20
43832: PUSH
43833: LD_INT 21
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: IN
43851: NOT
43852: OR
43853: PUSH
43854: LD_VAR 0 8
43858: PUSH
43859: LD_INT 5
43861: ARRAY
43862: NOT
43863: OR
43864: PUSH
43865: LD_VAR 0 8
43869: PUSH
43870: LD_INT 6
43872: ARRAY
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 7
43882: PUSH
43883: LD_INT 9
43885: PUSH
43886: LD_INT 10
43888: PUSH
43889: LD_INT 11
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: IN
43900: NOT
43901: OR
43902: IFFALSE 43908
// exit ;
43904: POP
43905: POP
43906: GO 43991
// end ;
43908: GO 43579
43910: POP
43911: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43912: LD_VAR 0 9
43916: PPUSH
43917: LD_VAR 0 3
43921: PPUSH
43922: LD_VAR 0 4
43926: PPUSH
43927: LD_INT 20
43929: PPUSH
43930: CALL 35937 0 4
43934: PUSH
43935: LD_INT 4
43937: ARRAY
43938: IFFALSE 43942
// exit ;
43940: GO 43991
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43942: LD_VAR 0 2
43946: PUSH
43947: LD_INT 29
43949: PUSH
43950: LD_INT 30
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: IN
43957: PUSH
43958: LD_VAR 0 3
43962: PPUSH
43963: LD_VAR 0 4
43967: PPUSH
43968: LD_VAR 0 9
43972: PPUSH
43973: CALL_OW 440
43977: NOT
43978: AND
43979: IFFALSE 43983
// exit ;
43981: GO 43991
// result := true ;
43983: LD_ADDR_VAR 0 6
43987: PUSH
43988: LD_INT 1
43990: ST_TO_ADDR
// end ;
43991: LD_VAR 0 6
43995: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43996: LD_INT 0
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
// result = [ ] ;
44056: LD_ADDR_VAR 0 7
44060: PUSH
44061: EMPTY
44062: ST_TO_ADDR
// temp_list = [ ] ;
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: EMPTY
44069: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44070: LD_VAR 0 4
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: LD_INT 4
44089: PUSH
44090: LD_INT 5
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: IN
44101: NOT
44102: PUSH
44103: LD_VAR 0 1
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: IN
44118: PUSH
44119: LD_VAR 0 5
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: IN
44138: NOT
44139: AND
44140: OR
44141: IFFALSE 44145
// exit ;
44143: GO 62536
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44145: LD_VAR 0 1
44149: PUSH
44150: LD_INT 6
44152: PUSH
44153: LD_INT 7
44155: PUSH
44156: LD_INT 8
44158: PUSH
44159: LD_INT 13
44161: PUSH
44162: LD_INT 12
44164: PUSH
44165: LD_INT 15
44167: PUSH
44168: LD_INT 11
44170: PUSH
44171: LD_INT 14
44173: PUSH
44174: LD_INT 10
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: IN
44188: IFFALSE 44198
// btype = b_lab ;
44190: LD_ADDR_VAR 0 1
44194: PUSH
44195: LD_INT 6
44197: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44198: LD_VAR 0 6
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: IN
44217: NOT
44218: PUSH
44219: LD_VAR 0 1
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: LD_INT 6
44238: PUSH
44239: LD_INT 36
44241: PUSH
44242: LD_INT 4
44244: PUSH
44245: LD_INT 5
44247: PUSH
44248: LD_INT 31
44250: PUSH
44251: LD_INT 32
44253: PUSH
44254: LD_INT 33
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: IN
44270: NOT
44271: PUSH
44272: LD_VAR 0 6
44276: PUSH
44277: LD_INT 1
44279: EQUAL
44280: AND
44281: OR
44282: PUSH
44283: LD_VAR 0 1
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: IN
44298: NOT
44299: PUSH
44300: LD_VAR 0 6
44304: PUSH
44305: LD_INT 2
44307: EQUAL
44308: AND
44309: OR
44310: IFFALSE 44320
// mode = 0 ;
44312: LD_ADDR_VAR 0 6
44316: PUSH
44317: LD_INT 0
44319: ST_TO_ADDR
// case mode of 0 :
44320: LD_VAR 0 6
44324: PUSH
44325: LD_INT 0
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44333
44331: GO 55786
44333: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44334: LD_ADDR_VAR 0 11
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44527: LD_ADDR_VAR 0 12
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44723: LD_ADDR_VAR 0 13
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 3
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: NEG
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44922: LD_ADDR_VAR 0 14
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 3
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45118: LD_ADDR_VAR 0 15
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45311: LD_ADDR_VAR 0 16
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45504: LD_ADDR_VAR 0 17
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45734: LD_ADDR_VAR 0 18
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45964: LD_ADDR_VAR 0 19
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46194: LD_ADDR_VAR 0 20
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46424: LD_ADDR_VAR 0 21
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46654: LD_ADDR_VAR 0 22
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46884: LD_ADDR_VAR 0 23
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47164: LD_ADDR_VAR 0 24
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47440: LD_ADDR_VAR 0 25
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 3
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47714: LD_ADDR_VAR 0 26
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47990: LD_ADDR_VAR 0 27
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48270: LD_ADDR_VAR 0 28
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 3
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48552: LD_ADDR_VAR 0 29
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48831: LD_ADDR_VAR 0 30
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49109: LD_ADDR_VAR 0 31
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 3
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49387: LD_ADDR_VAR 0 32
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49665: LD_ADDR_VAR 0 33
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: LD_INT 3
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49944: LD_ADDR_VAR 0 34
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 3
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50224: LD_ADDR_VAR 0 35
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50336: LD_ADDR_VAR 0 36
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50448: LD_ADDR_VAR 0 37
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50560: LD_ADDR_VAR 0 38
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50672: LD_ADDR_VAR 0 39
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50784: LD_ADDR_VAR 0 40
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50896: LD_ADDR_VAR 0 41
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51246: LD_ADDR_VAR 0 42
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 3
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51596: LD_ADDR_VAR 0 43
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 3
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 3
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51944: LD_ADDR_VAR 0 44
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: LD_INT 3
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52294: LD_ADDR_VAR 0 45
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52644: LD_ADDR_VAR 0 46
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52992: LD_ADDR_VAR 0 47
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53143: LD_ADDR_VAR 0 48
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53290: LD_ADDR_VAR 0 49
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53434: LD_ADDR_VAR 0 50
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53578: LD_ADDR_VAR 0 51
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53725: LD_ADDR_VAR 0 52
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53876: LD_ADDR_VAR 0 53
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54106: LD_ADDR_VAR 0 54
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54336: LD_ADDR_VAR 0 55
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54566: LD_ADDR_VAR 0 56
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54796: LD_ADDR_VAR 0 57
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55026: LD_ADDR_VAR 0 58
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55256: LD_ADDR_VAR 0 59
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55344: LD_ADDR_VAR 0 60
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55432: LD_ADDR_VAR 0 61
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55520: LD_ADDR_VAR 0 62
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55608: LD_ADDR_VAR 0 63
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55696: LD_ADDR_VAR 0 64
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// end ; 1 :
55784: GO 61681
55786: LD_INT 1
55788: DOUBLE
55789: EQUAL
55790: IFTRUE 55794
55792: GO 58417
55794: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55795: LD_ADDR_VAR 0 11
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55839: LD_ADDR_VAR 0 12
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55880: LD_ADDR_VAR 0 13
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55920: LD_ADDR_VAR 0 14
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 3
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55961: LD_ADDR_VAR 0 15
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56005: LD_ADDR_VAR 0 16
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56051: LD_ADDR_VAR 0 17
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56095: LD_ADDR_VAR 0 18
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56136: LD_ADDR_VAR 0 19
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56176: LD_ADDR_VAR 0 20
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56217: LD_ADDR_VAR 0 21
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56261: LD_ADDR_VAR 0 22
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56307: LD_ADDR_VAR 0 23
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56351: LD_ADDR_VAR 0 24
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56392: LD_ADDR_VAR 0 25
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56432: LD_ADDR_VAR 0 26
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56473: LD_ADDR_VAR 0 27
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 4
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56517: LD_ADDR_VAR 0 28
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: LD_INT 4
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56563: LD_ADDR_VAR 0 29
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 4
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 5
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 6
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 6
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 5
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56718: LD_ADDR_VAR 0 30
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 4
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 5
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 5
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 5
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 6
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 6
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56861: LD_ADDR_VAR 0 31
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 4
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 4
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 5
56938: PUSH
56939: LD_INT 5
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 6
56958: PUSH
56959: LD_INT 5
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 6
56968: PUSH
56969: LD_INT 6
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 5
56978: PUSH
56979: LD_INT 6
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57000: LD_ADDR_VAR 0 32
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 4
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 5
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 4
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 6
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 6
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 5
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57143: LD_ADDR_VAR 0 33
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 4
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 4
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 4
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 5
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 5
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 6
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 6
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57298: LD_ADDR_VAR 0 34
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 4
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: LD_INT 4
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 5
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 5
57389: NEG
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: LD_INT 5
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: LD_INT 6
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 6
57425: NEG
57426: PUSH
57427: LD_INT 5
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 6
57437: NEG
57438: PUSH
57439: LD_INT 6
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57461: LD_ADDR_VAR 0 41
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57505: LD_ADDR_VAR 0 42
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 3
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57546: LD_ADDR_VAR 0 43
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57586: LD_ADDR_VAR 0 44
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57627: LD_ADDR_VAR 0 45
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57671: LD_ADDR_VAR 0 46
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57717: LD_ADDR_VAR 0 47
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57750: LD_ADDR_VAR 0 48
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57781: LD_ADDR_VAR 0 49
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57810: LD_ADDR_VAR 0 50
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57839: LD_ADDR_VAR 0 51
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57870: LD_ADDR_VAR 0 52
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57903: LD_ADDR_VAR 0 53
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 3
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57947: LD_ADDR_VAR 0 54
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57988: LD_ADDR_VAR 0 55
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58028: LD_ADDR_VAR 0 56
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58069: LD_ADDR_VAR 0 57
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58113: LD_ADDR_VAR 0 58
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58159: LD_ADDR_VAR 0 59
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58203: LD_ADDR_VAR 0 60
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58244: LD_ADDR_VAR 0 61
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58284: LD_ADDR_VAR 0 62
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58325: LD_ADDR_VAR 0 63
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58369: LD_ADDR_VAR 0 64
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// end ; 2 :
58415: GO 61681
58417: LD_INT 2
58419: DOUBLE
58420: EQUAL
58421: IFTRUE 58425
58423: GO 61680
58425: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58426: LD_ADDR_VAR 0 29
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 5
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 5
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: LD_INT 5
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 4
58765: NEG
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: NEG
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 4
58811: NEG
58812: PUSH
58813: LD_INT 4
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 5
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: NEG
58872: PUSH
58873: LD_INT 4
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 5
58883: NEG
58884: PUSH
58885: LD_INT 5
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58964: LD_ADDR_VAR 0 30
58968: PUSH
58969: LD_INT 4
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 5
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: PUSH
59002: LD_INT 5
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: LD_INT 5
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: LD_INT 4
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 5
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 5
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: NEG
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 4
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 5
59210: NEG
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: NEG
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: LD_INT 4
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: NEG
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 4
59328: NEG
59329: PUSH
59330: LD_INT 4
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: NEG
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 5
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 4
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 5
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 5
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59511: LD_ADDR_VAR 0 31
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 4
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 4
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 5
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 5
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 5
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 4
59690: NEG
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 4
59713: NEG
59714: PUSH
59715: LD_INT 4
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 4
59725: NEG
59726: PUSH
59727: LD_INT 5
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 5
59773: NEG
59774: PUSH
59775: LD_INT 4
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 5
59785: NEG
59786: PUSH
59787: LD_INT 5
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: LD_INT 5
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 5
59809: NEG
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 4
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 4
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 4
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 5
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 5
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 5
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60061: LD_ADDR_VAR 0 32
60065: PUSH
60066: LD_INT 4
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 4
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: NEG
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 5
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 5
60147: NEG
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 4
60230: NEG
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 4
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 4
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 4
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 5
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 4
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 5
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 3
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: LD_INT 5
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 4
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: PUSH
60474: LD_INT 4
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 5
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: LD_INT 5
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 4
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 5
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: LD_INT 5
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60608: LD_ADDR_VAR 0 33
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: LD_INT 4
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 4
60627: NEG
60628: PUSH
60629: LD_INT 5
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: LD_INT 4
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 5
60675: NEG
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 5
60687: NEG
60688: PUSH
60689: LD_INT 5
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: LD_INT 5
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 5
60711: NEG
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 4
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 4
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 5
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 5
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 5
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 4
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 4
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 5
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 5
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61146: LD_ADDR_VAR 0 34
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 5
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 4
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 5
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 3
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 5
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 4
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: PUSH
61349: LD_INT 4
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 4
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 4
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 5
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: LD_INT 5
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 5
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: LD_INT 5
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 4
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 4
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 4
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 5
61587: NEG
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: NEG
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 5
61610: NEG
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: ST_TO_ADDR
// end ; end ;
61678: GO 61681
61680: POP
// case btype of b_depot , b_warehouse :
61681: LD_VAR 0 1
61685: PUSH
61686: LD_INT 0
61688: DOUBLE
61689: EQUAL
61690: IFTRUE 61700
61692: LD_INT 1
61694: DOUBLE
61695: EQUAL
61696: IFTRUE 61700
61698: GO 61901
61700: POP
// case nation of nation_american :
61701: LD_VAR 0 5
61705: PUSH
61706: LD_INT 1
61708: DOUBLE
61709: EQUAL
61710: IFTRUE 61714
61712: GO 61770
61714: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61715: LD_ADDR_VAR 0 9
61719: PUSH
61720: LD_VAR 0 11
61724: PUSH
61725: LD_VAR 0 12
61729: PUSH
61730: LD_VAR 0 13
61734: PUSH
61735: LD_VAR 0 14
61739: PUSH
61740: LD_VAR 0 15
61744: PUSH
61745: LD_VAR 0 16
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: PUSH
61758: LD_VAR 0 4
61762: PUSH
61763: LD_INT 1
61765: PLUS
61766: ARRAY
61767: ST_TO_ADDR
61768: GO 61899
61770: LD_INT 2
61772: DOUBLE
61773: EQUAL
61774: IFTRUE 61778
61776: GO 61834
61778: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61779: LD_ADDR_VAR 0 9
61783: PUSH
61784: LD_VAR 0 17
61788: PUSH
61789: LD_VAR 0 18
61793: PUSH
61794: LD_VAR 0 19
61798: PUSH
61799: LD_VAR 0 20
61803: PUSH
61804: LD_VAR 0 21
61808: PUSH
61809: LD_VAR 0 22
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: PUSH
61822: LD_VAR 0 4
61826: PUSH
61827: LD_INT 1
61829: PLUS
61830: ARRAY
61831: ST_TO_ADDR
61832: GO 61899
61834: LD_INT 3
61836: DOUBLE
61837: EQUAL
61838: IFTRUE 61842
61840: GO 61898
61842: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61843: LD_ADDR_VAR 0 9
61847: PUSH
61848: LD_VAR 0 23
61852: PUSH
61853: LD_VAR 0 24
61857: PUSH
61858: LD_VAR 0 25
61862: PUSH
61863: LD_VAR 0 26
61867: PUSH
61868: LD_VAR 0 27
61872: PUSH
61873: LD_VAR 0 28
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 4
61890: PUSH
61891: LD_INT 1
61893: PLUS
61894: ARRAY
61895: ST_TO_ADDR
61896: GO 61899
61898: POP
61899: GO 62454
61901: LD_INT 2
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61915
61907: LD_INT 3
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61915
61913: GO 61971
61915: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61916: LD_ADDR_VAR 0 9
61920: PUSH
61921: LD_VAR 0 29
61925: PUSH
61926: LD_VAR 0 30
61930: PUSH
61931: LD_VAR 0 31
61935: PUSH
61936: LD_VAR 0 32
61940: PUSH
61941: LD_VAR 0 33
61945: PUSH
61946: LD_VAR 0 34
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: PUSH
61959: LD_VAR 0 4
61963: PUSH
61964: LD_INT 1
61966: PLUS
61967: ARRAY
61968: ST_TO_ADDR
61969: GO 62454
61971: LD_INT 16
61973: DOUBLE
61974: EQUAL
61975: IFTRUE 62033
61977: LD_INT 17
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 62033
61983: LD_INT 18
61985: DOUBLE
61986: EQUAL
61987: IFTRUE 62033
61989: LD_INT 19
61991: DOUBLE
61992: EQUAL
61993: IFTRUE 62033
61995: LD_INT 22
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62033
62001: LD_INT 20
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62033
62007: LD_INT 21
62009: DOUBLE
62010: EQUAL
62011: IFTRUE 62033
62013: LD_INT 23
62015: DOUBLE
62016: EQUAL
62017: IFTRUE 62033
62019: LD_INT 24
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62033
62025: LD_INT 25
62027: DOUBLE
62028: EQUAL
62029: IFTRUE 62033
62031: GO 62089
62033: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62034: LD_ADDR_VAR 0 9
62038: PUSH
62039: LD_VAR 0 35
62043: PUSH
62044: LD_VAR 0 36
62048: PUSH
62049: LD_VAR 0 37
62053: PUSH
62054: LD_VAR 0 38
62058: PUSH
62059: LD_VAR 0 39
62063: PUSH
62064: LD_VAR 0 40
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: LD_VAR 0 4
62081: PUSH
62082: LD_INT 1
62084: PLUS
62085: ARRAY
62086: ST_TO_ADDR
62087: GO 62454
62089: LD_INT 6
62091: DOUBLE
62092: EQUAL
62093: IFTRUE 62145
62095: LD_INT 7
62097: DOUBLE
62098: EQUAL
62099: IFTRUE 62145
62101: LD_INT 8
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62145
62107: LD_INT 13
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62145
62113: LD_INT 12
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62145
62119: LD_INT 15
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62145
62125: LD_INT 11
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62145
62131: LD_INT 14
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62145
62137: LD_INT 10
62139: DOUBLE
62140: EQUAL
62141: IFTRUE 62145
62143: GO 62201
62145: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62146: LD_ADDR_VAR 0 9
62150: PUSH
62151: LD_VAR 0 41
62155: PUSH
62156: LD_VAR 0 42
62160: PUSH
62161: LD_VAR 0 43
62165: PUSH
62166: LD_VAR 0 44
62170: PUSH
62171: LD_VAR 0 45
62175: PUSH
62176: LD_VAR 0 46
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: PUSH
62189: LD_VAR 0 4
62193: PUSH
62194: LD_INT 1
62196: PLUS
62197: ARRAY
62198: ST_TO_ADDR
62199: GO 62454
62201: LD_INT 36
62203: DOUBLE
62204: EQUAL
62205: IFTRUE 62209
62207: GO 62265
62209: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62210: LD_ADDR_VAR 0 9
62214: PUSH
62215: LD_VAR 0 47
62219: PUSH
62220: LD_VAR 0 48
62224: PUSH
62225: LD_VAR 0 49
62229: PUSH
62230: LD_VAR 0 50
62234: PUSH
62235: LD_VAR 0 51
62239: PUSH
62240: LD_VAR 0 52
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: PUSH
62253: LD_VAR 0 4
62257: PUSH
62258: LD_INT 1
62260: PLUS
62261: ARRAY
62262: ST_TO_ADDR
62263: GO 62454
62265: LD_INT 4
62267: DOUBLE
62268: EQUAL
62269: IFTRUE 62291
62271: LD_INT 5
62273: DOUBLE
62274: EQUAL
62275: IFTRUE 62291
62277: LD_INT 34
62279: DOUBLE
62280: EQUAL
62281: IFTRUE 62291
62283: LD_INT 37
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62291
62289: GO 62347
62291: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62292: LD_ADDR_VAR 0 9
62296: PUSH
62297: LD_VAR 0 53
62301: PUSH
62302: LD_VAR 0 54
62306: PUSH
62307: LD_VAR 0 55
62311: PUSH
62312: LD_VAR 0 56
62316: PUSH
62317: LD_VAR 0 57
62321: PUSH
62322: LD_VAR 0 58
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 4
62339: PUSH
62340: LD_INT 1
62342: PLUS
62343: ARRAY
62344: ST_TO_ADDR
62345: GO 62454
62347: LD_INT 31
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62397
62353: LD_INT 32
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62397
62359: LD_INT 33
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62397
62365: LD_INT 27
62367: DOUBLE
62368: EQUAL
62369: IFTRUE 62397
62371: LD_INT 26
62373: DOUBLE
62374: EQUAL
62375: IFTRUE 62397
62377: LD_INT 28
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62397
62383: LD_INT 29
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62397
62389: LD_INT 30
62391: DOUBLE
62392: EQUAL
62393: IFTRUE 62397
62395: GO 62453
62397: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62398: LD_ADDR_VAR 0 9
62402: PUSH
62403: LD_VAR 0 59
62407: PUSH
62408: LD_VAR 0 60
62412: PUSH
62413: LD_VAR 0 61
62417: PUSH
62418: LD_VAR 0 62
62422: PUSH
62423: LD_VAR 0 63
62427: PUSH
62428: LD_VAR 0 64
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 4
62445: PUSH
62446: LD_INT 1
62448: PLUS
62449: ARRAY
62450: ST_TO_ADDR
62451: GO 62454
62453: POP
// temp_list2 = [ ] ;
62454: LD_ADDR_VAR 0 10
62458: PUSH
62459: EMPTY
62460: ST_TO_ADDR
// for i in temp_list do
62461: LD_ADDR_VAR 0 8
62465: PUSH
62466: LD_VAR 0 9
62470: PUSH
62471: FOR_IN
62472: IFFALSE 62524
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62474: LD_ADDR_VAR 0 10
62478: PUSH
62479: LD_VAR 0 10
62483: PUSH
62484: LD_VAR 0 8
62488: PUSH
62489: LD_INT 1
62491: ARRAY
62492: PUSH
62493: LD_VAR 0 2
62497: PLUS
62498: PUSH
62499: LD_VAR 0 8
62503: PUSH
62504: LD_INT 2
62506: ARRAY
62507: PUSH
62508: LD_VAR 0 3
62512: PLUS
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: EMPTY
62519: LIST
62520: ADD
62521: ST_TO_ADDR
62522: GO 62471
62524: POP
62525: POP
// result = temp_list2 ;
62526: LD_ADDR_VAR 0 7
62530: PUSH
62531: LD_VAR 0 10
62535: ST_TO_ADDR
// end ;
62536: LD_VAR 0 7
62540: RET
// export function EnemyInRange ( unit , dist ) ; begin
62541: LD_INT 0
62543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62544: LD_ADDR_VAR 0 3
62548: PUSH
62549: LD_VAR 0 1
62553: PPUSH
62554: CALL_OW 255
62558: PPUSH
62559: LD_VAR 0 1
62563: PPUSH
62564: CALL_OW 250
62568: PPUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL_OW 251
62578: PPUSH
62579: LD_VAR 0 2
62583: PPUSH
62584: CALL 35937 0 4
62588: PUSH
62589: LD_INT 4
62591: ARRAY
62592: ST_TO_ADDR
// end ;
62593: LD_VAR 0 3
62597: RET
// export function PlayerSeeMe ( unit ) ; begin
62598: LD_INT 0
62600: PPUSH
// result := See ( your_side , unit ) ;
62601: LD_ADDR_VAR 0 2
62605: PUSH
62606: LD_OWVAR 2
62610: PPUSH
62611: LD_VAR 0 1
62615: PPUSH
62616: CALL_OW 292
62620: ST_TO_ADDR
// end ;
62621: LD_VAR 0 2
62625: RET
// export function ReverseDir ( unit ) ; begin
62626: LD_INT 0
62628: PPUSH
// if not unit then
62629: LD_VAR 0 1
62633: NOT
62634: IFFALSE 62638
// exit ;
62636: GO 62661
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62638: LD_ADDR_VAR 0 2
62642: PUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 254
62652: PUSH
62653: LD_INT 3
62655: PLUS
62656: PUSH
62657: LD_INT 6
62659: MOD
62660: ST_TO_ADDR
// end ;
62661: LD_VAR 0 2
62665: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62666: LD_INT 0
62668: PPUSH
62669: PPUSH
62670: PPUSH
62671: PPUSH
62672: PPUSH
// if not hexes then
62673: LD_VAR 0 2
62677: NOT
62678: IFFALSE 62682
// exit ;
62680: GO 62830
// dist := 9999 ;
62682: LD_ADDR_VAR 0 5
62686: PUSH
62687: LD_INT 9999
62689: ST_TO_ADDR
// for i = 1 to hexes do
62690: LD_ADDR_VAR 0 4
62694: PUSH
62695: DOUBLE
62696: LD_INT 1
62698: DEC
62699: ST_TO_ADDR
62700: LD_VAR 0 2
62704: PUSH
62705: FOR_TO
62706: IFFALSE 62818
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62708: LD_VAR 0 1
62712: PPUSH
62713: LD_VAR 0 2
62717: PUSH
62718: LD_VAR 0 4
62722: ARRAY
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PPUSH
62728: LD_VAR 0 2
62732: PUSH
62733: LD_VAR 0 4
62737: ARRAY
62738: PUSH
62739: LD_INT 2
62741: ARRAY
62742: PPUSH
62743: CALL_OW 297
62747: PUSH
62748: LD_VAR 0 5
62752: LESS
62753: IFFALSE 62816
// begin hex := hexes [ i ] ;
62755: LD_ADDR_VAR 0 7
62759: PUSH
62760: LD_VAR 0 2
62764: PUSH
62765: LD_VAR 0 4
62769: ARRAY
62770: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62771: LD_ADDR_VAR 0 5
62775: PUSH
62776: LD_VAR 0 1
62780: PPUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_VAR 0 4
62790: ARRAY
62791: PUSH
62792: LD_INT 1
62794: ARRAY
62795: PPUSH
62796: LD_VAR 0 2
62800: PUSH
62801: LD_VAR 0 4
62805: ARRAY
62806: PUSH
62807: LD_INT 2
62809: ARRAY
62810: PPUSH
62811: CALL_OW 297
62815: ST_TO_ADDR
// end ; end ;
62816: GO 62705
62818: POP
62819: POP
// result := hex ;
62820: LD_ADDR_VAR 0 3
62824: PUSH
62825: LD_VAR 0 7
62829: ST_TO_ADDR
// end ;
62830: LD_VAR 0 3
62834: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62839: LD_VAR 0 1
62843: NOT
62844: PUSH
62845: LD_VAR 0 1
62849: PUSH
62850: LD_INT 21
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 23
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PPUSH
62874: CALL_OW 69
62878: IN
62879: NOT
62880: OR
62881: IFFALSE 62885
// exit ;
62883: GO 62932
// for i = 1 to 3 do
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: DOUBLE
62891: LD_INT 1
62893: DEC
62894: ST_TO_ADDR
62895: LD_INT 3
62897: PUSH
62898: FOR_TO
62899: IFFALSE 62930
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62901: LD_VAR 0 1
62905: PPUSH
62906: CALL_OW 250
62910: PPUSH
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL_OW 251
62920: PPUSH
62921: LD_INT 1
62923: PPUSH
62924: CALL_OW 453
62928: GO 62898
62930: POP
62931: POP
// end ;
62932: LD_VAR 0 2
62936: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62937: LD_INT 0
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
62944: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62945: LD_VAR 0 1
62949: NOT
62950: PUSH
62951: LD_VAR 0 2
62955: NOT
62956: OR
62957: PUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL_OW 314
62967: OR
62968: IFFALSE 62972
// exit ;
62970: GO 63413
// x := GetX ( enemy_unit ) ;
62972: LD_ADDR_VAR 0 7
62976: PUSH
62977: LD_VAR 0 2
62981: PPUSH
62982: CALL_OW 250
62986: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62987: LD_ADDR_VAR 0 8
62991: PUSH
62992: LD_VAR 0 2
62996: PPUSH
62997: CALL_OW 251
63001: ST_TO_ADDR
// if not x or not y then
63002: LD_VAR 0 7
63006: NOT
63007: PUSH
63008: LD_VAR 0 8
63012: NOT
63013: OR
63014: IFFALSE 63018
// exit ;
63016: GO 63413
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63018: LD_ADDR_VAR 0 6
63022: PUSH
63023: LD_VAR 0 7
63027: PPUSH
63028: LD_INT 0
63030: PPUSH
63031: LD_INT 4
63033: PPUSH
63034: CALL_OW 272
63038: PUSH
63039: LD_VAR 0 8
63043: PPUSH
63044: LD_INT 0
63046: PPUSH
63047: LD_INT 4
63049: PPUSH
63050: CALL_OW 273
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_VAR 0 7
63063: PPUSH
63064: LD_INT 1
63066: PPUSH
63067: LD_INT 4
63069: PPUSH
63070: CALL_OW 272
63074: PUSH
63075: LD_VAR 0 8
63079: PPUSH
63080: LD_INT 1
63082: PPUSH
63083: LD_INT 4
63085: PPUSH
63086: CALL_OW 273
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_VAR 0 7
63099: PPUSH
63100: LD_INT 2
63102: PPUSH
63103: LD_INT 4
63105: PPUSH
63106: CALL_OW 272
63110: PUSH
63111: LD_VAR 0 8
63115: PPUSH
63116: LD_INT 2
63118: PPUSH
63119: LD_INT 4
63121: PPUSH
63122: CALL_OW 273
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_VAR 0 7
63135: PPUSH
63136: LD_INT 3
63138: PPUSH
63139: LD_INT 4
63141: PPUSH
63142: CALL_OW 272
63146: PUSH
63147: LD_VAR 0 8
63151: PPUSH
63152: LD_INT 3
63154: PPUSH
63155: LD_INT 4
63157: PPUSH
63158: CALL_OW 273
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_VAR 0 7
63171: PPUSH
63172: LD_INT 4
63174: PPUSH
63175: LD_INT 4
63177: PPUSH
63178: CALL_OW 272
63182: PUSH
63183: LD_VAR 0 8
63187: PPUSH
63188: LD_INT 4
63190: PPUSH
63191: LD_INT 4
63193: PPUSH
63194: CALL_OW 273
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_VAR 0 7
63207: PPUSH
63208: LD_INT 5
63210: PPUSH
63211: LD_INT 4
63213: PPUSH
63214: CALL_OW 272
63218: PUSH
63219: LD_VAR 0 8
63223: PPUSH
63224: LD_INT 5
63226: PPUSH
63227: LD_INT 4
63229: PPUSH
63230: CALL_OW 273
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: ST_TO_ADDR
// for i = tmp downto 1 do
63247: LD_ADDR_VAR 0 4
63251: PUSH
63252: DOUBLE
63253: LD_VAR 0 6
63257: INC
63258: ST_TO_ADDR
63259: LD_INT 1
63261: PUSH
63262: FOR_DOWNTO
63263: IFFALSE 63364
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63265: LD_VAR 0 6
63269: PUSH
63270: LD_VAR 0 4
63274: ARRAY
63275: PUSH
63276: LD_INT 1
63278: ARRAY
63279: PPUSH
63280: LD_VAR 0 6
63284: PUSH
63285: LD_VAR 0 4
63289: ARRAY
63290: PUSH
63291: LD_INT 2
63293: ARRAY
63294: PPUSH
63295: CALL_OW 488
63299: NOT
63300: PUSH
63301: LD_VAR 0 6
63305: PUSH
63306: LD_VAR 0 4
63310: ARRAY
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PPUSH
63316: LD_VAR 0 6
63320: PUSH
63321: LD_VAR 0 4
63325: ARRAY
63326: PUSH
63327: LD_INT 2
63329: ARRAY
63330: PPUSH
63331: CALL_OW 428
63335: PUSH
63336: LD_INT 0
63338: NONEQUAL
63339: OR
63340: IFFALSE 63362
// tmp := Delete ( tmp , i ) ;
63342: LD_ADDR_VAR 0 6
63346: PUSH
63347: LD_VAR 0 6
63351: PPUSH
63352: LD_VAR 0 4
63356: PPUSH
63357: CALL_OW 3
63361: ST_TO_ADDR
63362: GO 63262
63364: POP
63365: POP
// j := GetClosestHex ( unit , tmp ) ;
63366: LD_ADDR_VAR 0 5
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: LD_VAR 0 6
63380: PPUSH
63381: CALL 62666 0 2
63385: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63386: LD_VAR 0 1
63390: PPUSH
63391: LD_VAR 0 5
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PPUSH
63400: LD_VAR 0 5
63404: PUSH
63405: LD_INT 2
63407: ARRAY
63408: PPUSH
63409: CALL_OW 111
// end ;
63413: LD_VAR 0 3
63417: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63418: LD_INT 0
63420: PPUSH
63421: PPUSH
63422: PPUSH
// uc_side = 0 ;
63423: LD_ADDR_OWVAR 20
63427: PUSH
63428: LD_INT 0
63430: ST_TO_ADDR
// uc_nation = 0 ;
63431: LD_ADDR_OWVAR 21
63435: PUSH
63436: LD_INT 0
63438: ST_TO_ADDR
// InitHc_All ( ) ;
63439: CALL_OW 584
// InitVc ;
63443: CALL_OW 20
// if mastodonts then
63447: LD_VAR 0 6
63451: IFFALSE 63518
// for i = 1 to mastodonts do
63453: LD_ADDR_VAR 0 11
63457: PUSH
63458: DOUBLE
63459: LD_INT 1
63461: DEC
63462: ST_TO_ADDR
63463: LD_VAR 0 6
63467: PUSH
63468: FOR_TO
63469: IFFALSE 63516
// begin vc_chassis := 31 ;
63471: LD_ADDR_OWVAR 37
63475: PUSH
63476: LD_INT 31
63478: ST_TO_ADDR
// vc_control := control_rider ;
63479: LD_ADDR_OWVAR 38
63483: PUSH
63484: LD_INT 4
63486: ST_TO_ADDR
// animal := CreateVehicle ;
63487: LD_ADDR_VAR 0 12
63491: PUSH
63492: CALL_OW 45
63496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63497: LD_VAR 0 12
63501: PPUSH
63502: LD_VAR 0 8
63506: PPUSH
63507: LD_INT 0
63509: PPUSH
63510: CALL 65706 0 3
// end ;
63514: GO 63468
63516: POP
63517: POP
// if horses then
63518: LD_VAR 0 5
63522: IFFALSE 63589
// for i = 1 to horses do
63524: LD_ADDR_VAR 0 11
63528: PUSH
63529: DOUBLE
63530: LD_INT 1
63532: DEC
63533: ST_TO_ADDR
63534: LD_VAR 0 5
63538: PUSH
63539: FOR_TO
63540: IFFALSE 63587
// begin hc_class := 21 ;
63542: LD_ADDR_OWVAR 28
63546: PUSH
63547: LD_INT 21
63549: ST_TO_ADDR
// hc_gallery :=  ;
63550: LD_ADDR_OWVAR 33
63554: PUSH
63555: LD_STRING 
63557: ST_TO_ADDR
// animal := CreateHuman ;
63558: LD_ADDR_VAR 0 12
63562: PUSH
63563: CALL_OW 44
63567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63568: LD_VAR 0 12
63572: PPUSH
63573: LD_VAR 0 8
63577: PPUSH
63578: LD_INT 0
63580: PPUSH
63581: CALL 65706 0 3
// end ;
63585: GO 63539
63587: POP
63588: POP
// if birds then
63589: LD_VAR 0 1
63593: IFFALSE 63660
// for i = 1 to birds do
63595: LD_ADDR_VAR 0 11
63599: PUSH
63600: DOUBLE
63601: LD_INT 1
63603: DEC
63604: ST_TO_ADDR
63605: LD_VAR 0 1
63609: PUSH
63610: FOR_TO
63611: IFFALSE 63658
// begin hc_class = 18 ;
63613: LD_ADDR_OWVAR 28
63617: PUSH
63618: LD_INT 18
63620: ST_TO_ADDR
// hc_gallery =  ;
63621: LD_ADDR_OWVAR 33
63625: PUSH
63626: LD_STRING 
63628: ST_TO_ADDR
// animal := CreateHuman ;
63629: LD_ADDR_VAR 0 12
63633: PUSH
63634: CALL_OW 44
63638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63639: LD_VAR 0 12
63643: PPUSH
63644: LD_VAR 0 8
63648: PPUSH
63649: LD_INT 0
63651: PPUSH
63652: CALL 65706 0 3
// end ;
63656: GO 63610
63658: POP
63659: POP
// if tigers then
63660: LD_VAR 0 2
63664: IFFALSE 63748
// for i = 1 to tigers do
63666: LD_ADDR_VAR 0 11
63670: PUSH
63671: DOUBLE
63672: LD_INT 1
63674: DEC
63675: ST_TO_ADDR
63676: LD_VAR 0 2
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63746
// begin hc_class = class_tiger ;
63684: LD_ADDR_OWVAR 28
63688: PUSH
63689: LD_INT 14
63691: ST_TO_ADDR
// hc_gallery =  ;
63692: LD_ADDR_OWVAR 33
63696: PUSH
63697: LD_STRING 
63699: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63700: LD_ADDR_OWVAR 35
63704: PUSH
63705: LD_INT 7
63707: NEG
63708: PPUSH
63709: LD_INT 7
63711: PPUSH
63712: CALL_OW 12
63716: ST_TO_ADDR
// animal := CreateHuman ;
63717: LD_ADDR_VAR 0 12
63721: PUSH
63722: CALL_OW 44
63726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63727: LD_VAR 0 12
63731: PPUSH
63732: LD_VAR 0 8
63736: PPUSH
63737: LD_INT 0
63739: PPUSH
63740: CALL 65706 0 3
// end ;
63744: GO 63681
63746: POP
63747: POP
// if apemans then
63748: LD_VAR 0 3
63752: IFFALSE 63875
// for i = 1 to apemans do
63754: LD_ADDR_VAR 0 11
63758: PUSH
63759: DOUBLE
63760: LD_INT 1
63762: DEC
63763: ST_TO_ADDR
63764: LD_VAR 0 3
63768: PUSH
63769: FOR_TO
63770: IFFALSE 63873
// begin hc_class = class_apeman ;
63772: LD_ADDR_OWVAR 28
63776: PUSH
63777: LD_INT 12
63779: ST_TO_ADDR
// hc_gallery =  ;
63780: LD_ADDR_OWVAR 33
63784: PUSH
63785: LD_STRING 
63787: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63788: LD_ADDR_OWVAR 35
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PPUSH
63797: LD_INT 2
63799: PPUSH
63800: CALL_OW 12
63804: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63805: LD_ADDR_OWVAR 31
63809: PUSH
63810: LD_INT 1
63812: PPUSH
63813: LD_INT 3
63815: PPUSH
63816: CALL_OW 12
63820: PUSH
63821: LD_INT 1
63823: PPUSH
63824: LD_INT 3
63826: PPUSH
63827: CALL_OW 12
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: ST_TO_ADDR
// animal := CreateHuman ;
63844: LD_ADDR_VAR 0 12
63848: PUSH
63849: CALL_OW 44
63853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63854: LD_VAR 0 12
63858: PPUSH
63859: LD_VAR 0 8
63863: PPUSH
63864: LD_INT 0
63866: PPUSH
63867: CALL 65706 0 3
// end ;
63871: GO 63769
63873: POP
63874: POP
// if enchidnas then
63875: LD_VAR 0 4
63879: IFFALSE 63946
// for i = 1 to enchidnas do
63881: LD_ADDR_VAR 0 11
63885: PUSH
63886: DOUBLE
63887: LD_INT 1
63889: DEC
63890: ST_TO_ADDR
63891: LD_VAR 0 4
63895: PUSH
63896: FOR_TO
63897: IFFALSE 63944
// begin hc_class = 13 ;
63899: LD_ADDR_OWVAR 28
63903: PUSH
63904: LD_INT 13
63906: ST_TO_ADDR
// hc_gallery =  ;
63907: LD_ADDR_OWVAR 33
63911: PUSH
63912: LD_STRING 
63914: ST_TO_ADDR
// animal := CreateHuman ;
63915: LD_ADDR_VAR 0 12
63919: PUSH
63920: CALL_OW 44
63924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63925: LD_VAR 0 12
63929: PPUSH
63930: LD_VAR 0 8
63934: PPUSH
63935: LD_INT 0
63937: PPUSH
63938: CALL 65706 0 3
// end ;
63942: GO 63896
63944: POP
63945: POP
// if fishes then
63946: LD_VAR 0 7
63950: IFFALSE 64017
// for i = 1 to fishes do
63952: LD_ADDR_VAR 0 11
63956: PUSH
63957: DOUBLE
63958: LD_INT 1
63960: DEC
63961: ST_TO_ADDR
63962: LD_VAR 0 7
63966: PUSH
63967: FOR_TO
63968: IFFALSE 64015
// begin hc_class = 20 ;
63970: LD_ADDR_OWVAR 28
63974: PUSH
63975: LD_INT 20
63977: ST_TO_ADDR
// hc_gallery =  ;
63978: LD_ADDR_OWVAR 33
63982: PUSH
63983: LD_STRING 
63985: ST_TO_ADDR
// animal := CreateHuman ;
63986: LD_ADDR_VAR 0 12
63990: PUSH
63991: CALL_OW 44
63995: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63996: LD_VAR 0 12
64000: PPUSH
64001: LD_VAR 0 9
64005: PPUSH
64006: LD_INT 0
64008: PPUSH
64009: CALL 65706 0 3
// end ;
64013: GO 63967
64015: POP
64016: POP
// end ;
64017: LD_VAR 0 10
64021: RET
// export function WantHeal ( sci , unit ) ; begin
64022: LD_INT 0
64024: PPUSH
// if GetTaskList ( sci ) > 0 then
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 437
64034: PUSH
64035: LD_INT 0
64037: GREATER
64038: IFFALSE 64108
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64040: LD_VAR 0 1
64044: PPUSH
64045: CALL_OW 437
64049: PUSH
64050: LD_INT 1
64052: ARRAY
64053: PUSH
64054: LD_INT 1
64056: ARRAY
64057: PUSH
64058: LD_STRING l
64060: EQUAL
64061: PUSH
64062: LD_VAR 0 1
64066: PPUSH
64067: CALL_OW 437
64071: PUSH
64072: LD_INT 1
64074: ARRAY
64075: PUSH
64076: LD_INT 4
64078: ARRAY
64079: PUSH
64080: LD_VAR 0 2
64084: EQUAL
64085: AND
64086: IFFALSE 64098
// result := true else
64088: LD_ADDR_VAR 0 3
64092: PUSH
64093: LD_INT 1
64095: ST_TO_ADDR
64096: GO 64106
// result := false ;
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
// end else
64106: GO 64116
// result := false ;
64108: LD_ADDR_VAR 0 3
64112: PUSH
64113: LD_INT 0
64115: ST_TO_ADDR
// end ;
64116: LD_VAR 0 3
64120: RET
// export function HealTarget ( sci ) ; begin
64121: LD_INT 0
64123: PPUSH
// if not sci then
64124: LD_VAR 0 1
64128: NOT
64129: IFFALSE 64133
// exit ;
64131: GO 64198
// result := 0 ;
64133: LD_ADDR_VAR 0 2
64137: PUSH
64138: LD_INT 0
64140: ST_TO_ADDR
// if GetTaskList ( sci ) then
64141: LD_VAR 0 1
64145: PPUSH
64146: CALL_OW 437
64150: IFFALSE 64198
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 437
64161: PUSH
64162: LD_INT 1
64164: ARRAY
64165: PUSH
64166: LD_INT 1
64168: ARRAY
64169: PUSH
64170: LD_STRING l
64172: EQUAL
64173: IFFALSE 64198
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64175: LD_ADDR_VAR 0 2
64179: PUSH
64180: LD_VAR 0 1
64184: PPUSH
64185: CALL_OW 437
64189: PUSH
64190: LD_INT 1
64192: ARRAY
64193: PUSH
64194: LD_INT 4
64196: ARRAY
64197: ST_TO_ADDR
// end ;
64198: LD_VAR 0 2
64202: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
64207: PPUSH
64208: PPUSH
// if not base_units then
64209: LD_VAR 0 1
64213: NOT
64214: IFFALSE 64218
// exit ;
64216: GO 64305
// result := false ;
64218: LD_ADDR_VAR 0 2
64222: PUSH
64223: LD_INT 0
64225: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64226: LD_ADDR_VAR 0 5
64230: PUSH
64231: LD_VAR 0 1
64235: PPUSH
64236: LD_INT 21
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PPUSH
64246: CALL_OW 72
64250: ST_TO_ADDR
// if not tmp then
64251: LD_VAR 0 5
64255: NOT
64256: IFFALSE 64260
// exit ;
64258: GO 64305
// for i in tmp do
64260: LD_ADDR_VAR 0 3
64264: PUSH
64265: LD_VAR 0 5
64269: PUSH
64270: FOR_IN
64271: IFFALSE 64303
// begin result := EnemyInRange ( i , 22 ) ;
64273: LD_ADDR_VAR 0 2
64277: PUSH
64278: LD_VAR 0 3
64282: PPUSH
64283: LD_INT 22
64285: PPUSH
64286: CALL 62541 0 2
64290: ST_TO_ADDR
// if result then
64291: LD_VAR 0 2
64295: IFFALSE 64301
// exit ;
64297: POP
64298: POP
64299: GO 64305
// end ;
64301: GO 64270
64303: POP
64304: POP
// end ;
64305: LD_VAR 0 2
64309: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64310: LD_INT 0
64312: PPUSH
64313: PPUSH
// if not units then
64314: LD_VAR 0 1
64318: NOT
64319: IFFALSE 64323
// exit ;
64321: GO 64393
// result := [ ] ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: EMPTY
64329: ST_TO_ADDR
// for i in units do
64330: LD_ADDR_VAR 0 4
64334: PUSH
64335: LD_VAR 0 1
64339: PUSH
64340: FOR_IN
64341: IFFALSE 64391
// if GetTag ( i ) = tag then
64343: LD_VAR 0 4
64347: PPUSH
64348: CALL_OW 110
64352: PUSH
64353: LD_VAR 0 2
64357: EQUAL
64358: IFFALSE 64389
// result := Replace ( result , result + 1 , i ) ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_VAR 0 3
64369: PPUSH
64370: LD_VAR 0 3
64374: PUSH
64375: LD_INT 1
64377: PLUS
64378: PPUSH
64379: LD_VAR 0 4
64383: PPUSH
64384: CALL_OW 1
64388: ST_TO_ADDR
64389: GO 64340
64391: POP
64392: POP
// end ;
64393: LD_VAR 0 3
64397: RET
// export function IsDriver ( un ) ; begin
64398: LD_INT 0
64400: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64401: LD_ADDR_VAR 0 2
64405: PUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 55
64413: PUSH
64414: EMPTY
64415: LIST
64416: PPUSH
64417: CALL_OW 69
64421: IN
64422: ST_TO_ADDR
// end ;
64423: LD_VAR 0 2
64427: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64428: LD_INT 0
64430: PPUSH
64431: PPUSH
// list := [ ] ;
64432: LD_ADDR_VAR 0 5
64436: PUSH
64437: EMPTY
64438: ST_TO_ADDR
// case d of 0 :
64439: LD_VAR 0 3
64443: PUSH
64444: LD_INT 0
64446: DOUBLE
64447: EQUAL
64448: IFTRUE 64452
64450: GO 64585
64452: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64453: LD_ADDR_VAR 0 5
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 4
64465: MINUS
64466: PUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 4
64474: MINUS
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: LIST
64483: PUSH
64484: LD_VAR 0 1
64488: PUSH
64489: LD_INT 3
64491: MINUS
64492: PUSH
64493: LD_VAR 0 2
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_INT 4
64513: PLUS
64514: PUSH
64515: LD_VAR 0 2
64519: PUSH
64520: LD_INT 4
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: PUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 3
64535: PLUS
64536: PUSH
64537: LD_VAR 0 2
64541: PUSH
64542: LD_INT 3
64544: PLUS
64545: PUSH
64546: LD_INT 5
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: PUSH
64554: LD_VAR 0 1
64558: PUSH
64559: LD_VAR 0 2
64563: PUSH
64564: LD_INT 4
64566: PLUS
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// end ; 1 :
64583: GO 65283
64585: LD_INT 1
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64593
64591: GO 64726
64593: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64594: LD_ADDR_VAR 0 5
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: LD_VAR 0 2
64608: PUSH
64609: LD_INT 4
64611: MINUS
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 3
64628: MINUS
64629: PUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_INT 3
64637: MINUS
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: PUSH
64647: LD_VAR 0 1
64651: PUSH
64652: LD_INT 4
64654: MINUS
64655: PUSH
64656: LD_VAR 0 2
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: PUSH
64669: LD_VAR 0 1
64673: PUSH
64674: LD_VAR 0 2
64678: PUSH
64679: LD_INT 3
64681: PLUS
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: LD_INT 4
64698: PLUS
64699: PUSH
64700: LD_VAR 0 2
64704: PUSH
64705: LD_INT 4
64707: PLUS
64708: PUSH
64709: LD_INT 5
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: ST_TO_ADDR
// end ; 2 :
64724: GO 65283
64726: LD_INT 2
64728: DOUBLE
64729: EQUAL
64730: IFTRUE 64734
64732: GO 64863
64734: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64735: LD_ADDR_VAR 0 5
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: LD_VAR 0 2
64749: PUSH
64750: LD_INT 3
64752: MINUS
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: PUSH
64762: LD_VAR 0 1
64766: PUSH
64767: LD_INT 4
64769: PLUS
64770: PUSH
64771: LD_VAR 0 2
64775: PUSH
64776: LD_INT 4
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: PUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_VAR 0 2
64793: PUSH
64794: LD_INT 4
64796: PLUS
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_INT 3
64813: MINUS
64814: PUSH
64815: LD_VAR 0 2
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 4
64835: MINUS
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 4
64844: MINUS
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// end ; 3 :
64861: GO 65283
64863: LD_INT 3
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64871
64869: GO 65004
64871: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 1
64881: PUSH
64882: LD_INT 3
64884: PLUS
64885: PUSH
64886: LD_VAR 0 2
64890: PUSH
64891: LD_INT 4
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 4
64906: PLUS
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 4
64915: PLUS
64916: PUSH
64917: LD_INT 5
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: PUSH
64925: LD_VAR 0 1
64929: PUSH
64930: LD_INT 4
64932: MINUS
64933: PUSH
64934: LD_VAR 0 2
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: LD_VAR 0 2
64956: PUSH
64957: LD_INT 4
64959: MINUS
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: PUSH
64969: LD_VAR 0 1
64973: PUSH
64974: LD_INT 3
64976: MINUS
64977: PUSH
64978: LD_VAR 0 2
64982: PUSH
64983: LD_INT 3
64985: MINUS
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// end ; 4 :
65002: GO 65283
65004: LD_INT 4
65006: DOUBLE
65007: EQUAL
65008: IFTRUE 65012
65010: GO 65145
65012: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: LD_INT 4
65030: PLUS
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: PUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_INT 3
65047: PLUS
65048: PUSH
65049: LD_VAR 0 2
65053: PUSH
65054: LD_INT 3
65056: PLUS
65057: PUSH
65058: LD_INT 5
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: LD_VAR 0 1
65070: PUSH
65071: LD_INT 4
65073: PLUS
65074: PUSH
65075: LD_VAR 0 2
65079: PUSH
65080: LD_INT 4
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: LD_VAR 0 1
65092: PUSH
65093: LD_VAR 0 2
65097: PUSH
65098: LD_INT 3
65100: MINUS
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: PUSH
65110: LD_VAR 0 1
65114: PUSH
65115: LD_INT 4
65117: MINUS
65118: PUSH
65119: LD_VAR 0 2
65123: PUSH
65124: LD_INT 4
65126: MINUS
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: ST_TO_ADDR
// end ; 5 :
65143: GO 65283
65145: LD_INT 5
65147: DOUBLE
65148: EQUAL
65149: IFTRUE 65153
65151: GO 65282
65153: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65154: LD_ADDR_VAR 0 5
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 4
65166: MINUS
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_VAR 0 2
65190: PUSH
65191: LD_INT 4
65193: MINUS
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: LD_INT 4
65210: PLUS
65211: PUSH
65212: LD_VAR 0 2
65216: PUSH
65217: LD_INT 4
65219: PLUS
65220: PUSH
65221: LD_INT 5
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: PUSH
65229: LD_VAR 0 1
65233: PUSH
65234: LD_INT 3
65236: PLUS
65237: PUSH
65238: LD_VAR 0 2
65242: PUSH
65243: LD_INT 4
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: PUSH
65251: LD_VAR 0 1
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_INT 3
65263: PLUS
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: ST_TO_ADDR
// end ; end ;
65280: GO 65283
65282: POP
// result := list ;
65283: LD_ADDR_VAR 0 4
65287: PUSH
65288: LD_VAR 0 5
65292: ST_TO_ADDR
// end ;
65293: LD_VAR 0 4
65297: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65298: LD_INT 0
65300: PPUSH
65301: PPUSH
65302: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65303: LD_VAR 0 1
65307: NOT
65308: PUSH
65309: LD_VAR 0 2
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: LD_INT 4
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: IN
65332: NOT
65333: OR
65334: IFFALSE 65338
// exit ;
65336: GO 65430
// tmp := [ ] ;
65338: LD_ADDR_VAR 0 5
65342: PUSH
65343: EMPTY
65344: ST_TO_ADDR
// for i in units do
65345: LD_ADDR_VAR 0 4
65349: PUSH
65350: LD_VAR 0 1
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65399
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 5
65367: PPUSH
65368: LD_VAR 0 5
65372: PUSH
65373: LD_INT 1
65375: PLUS
65376: PPUSH
65377: LD_VAR 0 4
65381: PPUSH
65382: LD_VAR 0 2
65386: PPUSH
65387: CALL_OW 259
65391: PPUSH
65392: CALL_OW 2
65396: ST_TO_ADDR
65397: GO 65355
65399: POP
65400: POP
// if not tmp then
65401: LD_VAR 0 5
65405: NOT
65406: IFFALSE 65410
// exit ;
65408: GO 65430
// result := SortListByListDesc ( units , tmp ) ;
65410: LD_ADDR_VAR 0 3
65414: PUSH
65415: LD_VAR 0 1
65419: PPUSH
65420: LD_VAR 0 5
65424: PPUSH
65425: CALL_OW 77
65429: ST_TO_ADDR
// end ;
65430: LD_VAR 0 3
65434: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
65439: PPUSH
// result := false ;
65440: LD_ADDR_VAR 0 3
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
// x := GetX ( building ) ;
65448: LD_ADDR_VAR 0 4
65452: PUSH
65453: LD_VAR 0 2
65457: PPUSH
65458: CALL_OW 250
65462: ST_TO_ADDR
// y := GetY ( building ) ;
65463: LD_ADDR_VAR 0 5
65467: PUSH
65468: LD_VAR 0 2
65472: PPUSH
65473: CALL_OW 251
65477: ST_TO_ADDR
// if not building or not x or not y then
65478: LD_VAR 0 2
65482: NOT
65483: PUSH
65484: LD_VAR 0 4
65488: NOT
65489: OR
65490: PUSH
65491: LD_VAR 0 5
65495: NOT
65496: OR
65497: IFFALSE 65501
// exit ;
65499: GO 65593
// if GetTaskList ( unit ) then
65501: LD_VAR 0 1
65505: PPUSH
65506: CALL_OW 437
65510: IFFALSE 65593
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65512: LD_STRING e
65514: PUSH
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 437
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: PUSH
65529: LD_INT 1
65531: ARRAY
65532: EQUAL
65533: PUSH
65534: LD_VAR 0 4
65538: PUSH
65539: LD_VAR 0 1
65543: PPUSH
65544: CALL_OW 437
65548: PUSH
65549: LD_INT 1
65551: ARRAY
65552: PUSH
65553: LD_INT 2
65555: ARRAY
65556: EQUAL
65557: AND
65558: PUSH
65559: LD_VAR 0 5
65563: PUSH
65564: LD_VAR 0 1
65568: PPUSH
65569: CALL_OW 437
65573: PUSH
65574: LD_INT 1
65576: ARRAY
65577: PUSH
65578: LD_INT 3
65580: ARRAY
65581: EQUAL
65582: AND
65583: IFFALSE 65593
// result := true end ;
65585: LD_ADDR_VAR 0 3
65589: PUSH
65590: LD_INT 1
65592: ST_TO_ADDR
// end ;
65593: LD_VAR 0 3
65597: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65598: LD_INT 0
65600: PPUSH
// result := false ;
65601: LD_ADDR_VAR 0 4
65605: PUSH
65606: LD_INT 0
65608: ST_TO_ADDR
// if GetTaskList ( unit ) then
65609: LD_VAR 0 1
65613: PPUSH
65614: CALL_OW 437
65618: IFFALSE 65701
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65620: LD_STRING M
65622: PUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 437
65632: PUSH
65633: LD_INT 1
65635: ARRAY
65636: PUSH
65637: LD_INT 1
65639: ARRAY
65640: EQUAL
65641: PUSH
65642: LD_VAR 0 2
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 437
65656: PUSH
65657: LD_INT 1
65659: ARRAY
65660: PUSH
65661: LD_INT 2
65663: ARRAY
65664: EQUAL
65665: AND
65666: PUSH
65667: LD_VAR 0 3
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 437
65681: PUSH
65682: LD_INT 1
65684: ARRAY
65685: PUSH
65686: LD_INT 3
65688: ARRAY
65689: EQUAL
65690: AND
65691: IFFALSE 65701
// result := true ;
65693: LD_ADDR_VAR 0 4
65697: PUSH
65698: LD_INT 1
65700: ST_TO_ADDR
// end ; end ;
65701: LD_VAR 0 4
65705: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65706: LD_INT 0
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not unit or not area then
65712: LD_VAR 0 1
65716: NOT
65717: PUSH
65718: LD_VAR 0 2
65722: NOT
65723: OR
65724: IFFALSE 65728
// exit ;
65726: GO 65892
// tmp := AreaToList ( area , i ) ;
65728: LD_ADDR_VAR 0 6
65732: PUSH
65733: LD_VAR 0 2
65737: PPUSH
65738: LD_VAR 0 5
65742: PPUSH
65743: CALL_OW 517
65747: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65748: LD_ADDR_VAR 0 5
65752: PUSH
65753: DOUBLE
65754: LD_INT 1
65756: DEC
65757: ST_TO_ADDR
65758: LD_VAR 0 6
65762: PUSH
65763: LD_INT 1
65765: ARRAY
65766: PUSH
65767: FOR_TO
65768: IFFALSE 65890
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65770: LD_ADDR_VAR 0 7
65774: PUSH
65775: LD_VAR 0 6
65779: PUSH
65780: LD_INT 1
65782: ARRAY
65783: PUSH
65784: LD_VAR 0 5
65788: ARRAY
65789: PUSH
65790: LD_VAR 0 6
65794: PUSH
65795: LD_INT 2
65797: ARRAY
65798: PUSH
65799: LD_VAR 0 5
65803: ARRAY
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65809: LD_VAR 0 7
65813: PUSH
65814: LD_INT 1
65816: ARRAY
65817: PPUSH
65818: LD_VAR 0 7
65822: PUSH
65823: LD_INT 2
65825: ARRAY
65826: PPUSH
65827: CALL_OW 428
65831: PUSH
65832: LD_INT 0
65834: EQUAL
65835: IFFALSE 65888
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65837: LD_VAR 0 1
65841: PPUSH
65842: LD_VAR 0 7
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: PPUSH
65851: LD_VAR 0 7
65855: PUSH
65856: LD_INT 2
65858: ARRAY
65859: PPUSH
65860: LD_VAR 0 3
65864: PPUSH
65865: CALL_OW 48
// result := IsPlaced ( unit ) ;
65869: LD_ADDR_VAR 0 4
65873: PUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: CALL_OW 305
65883: ST_TO_ADDR
// exit ;
65884: POP
65885: POP
65886: GO 65892
// end ; end ;
65888: GO 65767
65890: POP
65891: POP
// end ;
65892: LD_VAR 0 4
65896: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
65901: PPUSH
// if not side or side > 8 then
65902: LD_VAR 0 1
65906: NOT
65907: PUSH
65908: LD_VAR 0 1
65912: PUSH
65913: LD_INT 8
65915: GREATER
65916: OR
65917: IFFALSE 65921
// exit ;
65919: GO 66108
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65921: LD_ADDR_VAR 0 4
65925: PUSH
65926: LD_INT 22
65928: PUSH
65929: LD_VAR 0 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 21
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PPUSH
65952: CALL_OW 69
65956: ST_TO_ADDR
// if not tmp then
65957: LD_VAR 0 4
65961: NOT
65962: IFFALSE 65966
// exit ;
65964: GO 66108
// enable_addtolog := true ;
65966: LD_ADDR_OWVAR 81
65970: PUSH
65971: LD_INT 1
65973: ST_TO_ADDR
// AddToLog ( [ ) ;
65974: LD_STRING [
65976: PPUSH
65977: CALL_OW 561
// for i in tmp do
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: LD_VAR 0 4
65990: PUSH
65991: FOR_IN
65992: IFFALSE 66099
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65994: LD_STRING [
65996: PUSH
65997: LD_VAR 0 3
66001: PPUSH
66002: CALL_OW 266
66006: STR
66007: PUSH
66008: LD_STRING , 
66010: STR
66011: PUSH
66012: LD_VAR 0 3
66016: PPUSH
66017: CALL_OW 250
66021: STR
66022: PUSH
66023: LD_STRING , 
66025: STR
66026: PUSH
66027: LD_VAR 0 3
66031: PPUSH
66032: CALL_OW 251
66036: STR
66037: PUSH
66038: LD_STRING , 
66040: STR
66041: PUSH
66042: LD_VAR 0 3
66046: PPUSH
66047: CALL_OW 254
66051: STR
66052: PUSH
66053: LD_STRING , 
66055: STR
66056: PUSH
66057: LD_VAR 0 3
66061: PPUSH
66062: LD_INT 1
66064: PPUSH
66065: CALL_OW 268
66069: STR
66070: PUSH
66071: LD_STRING , 
66073: STR
66074: PUSH
66075: LD_VAR 0 3
66079: PPUSH
66080: LD_INT 2
66082: PPUSH
66083: CALL_OW 268
66087: STR
66088: PUSH
66089: LD_STRING ],
66091: STR
66092: PPUSH
66093: CALL_OW 561
// end ;
66097: GO 65991
66099: POP
66100: POP
// AddToLog ( ]; ) ;
66101: LD_STRING ];
66103: PPUSH
66104: CALL_OW 561
// end ;
66108: LD_VAR 0 2
66112: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66113: LD_INT 0
66115: PPUSH
66116: PPUSH
66117: PPUSH
66118: PPUSH
66119: PPUSH
// if not area or not rate or not max then
66120: LD_VAR 0 1
66124: NOT
66125: PUSH
66126: LD_VAR 0 2
66130: NOT
66131: OR
66132: PUSH
66133: LD_VAR 0 4
66137: NOT
66138: OR
66139: IFFALSE 66143
// exit ;
66141: GO 66335
// while 1 do
66143: LD_INT 1
66145: IFFALSE 66335
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66147: LD_ADDR_VAR 0 9
66151: PUSH
66152: LD_VAR 0 1
66156: PPUSH
66157: LD_INT 1
66159: PPUSH
66160: CALL_OW 287
66164: PUSH
66165: LD_INT 10
66167: MUL
66168: ST_TO_ADDR
// r := rate / 10 ;
66169: LD_ADDR_VAR 0 7
66173: PUSH
66174: LD_VAR 0 2
66178: PUSH
66179: LD_INT 10
66181: DIVREAL
66182: ST_TO_ADDR
// time := 1 1$00 ;
66183: LD_ADDR_VAR 0 8
66187: PUSH
66188: LD_INT 2100
66190: ST_TO_ADDR
// if amount < min then
66191: LD_VAR 0 9
66195: PUSH
66196: LD_VAR 0 3
66200: LESS
66201: IFFALSE 66219
// r := r * 2 else
66203: LD_ADDR_VAR 0 7
66207: PUSH
66208: LD_VAR 0 7
66212: PUSH
66213: LD_INT 2
66215: MUL
66216: ST_TO_ADDR
66217: GO 66245
// if amount > max then
66219: LD_VAR 0 9
66223: PUSH
66224: LD_VAR 0 4
66228: GREATER
66229: IFFALSE 66245
// r := r / 2 ;
66231: LD_ADDR_VAR 0 7
66235: PUSH
66236: LD_VAR 0 7
66240: PUSH
66241: LD_INT 2
66243: DIVREAL
66244: ST_TO_ADDR
// time := time / r ;
66245: LD_ADDR_VAR 0 8
66249: PUSH
66250: LD_VAR 0 8
66254: PUSH
66255: LD_VAR 0 7
66259: DIVREAL
66260: ST_TO_ADDR
// if time < 0 then
66261: LD_VAR 0 8
66265: PUSH
66266: LD_INT 0
66268: LESS
66269: IFFALSE 66286
// time := time * - 1 ;
66271: LD_ADDR_VAR 0 8
66275: PUSH
66276: LD_VAR 0 8
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: MUL
66285: ST_TO_ADDR
// wait ( time ) ;
66286: LD_VAR 0 8
66290: PPUSH
66291: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66295: LD_INT 35
66297: PPUSH
66298: LD_INT 875
66300: PPUSH
66301: CALL_OW 12
66305: PPUSH
66306: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66310: LD_INT 1
66312: PPUSH
66313: LD_INT 5
66315: PPUSH
66316: CALL_OW 12
66320: PPUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_INT 1
66328: PPUSH
66329: CALL_OW 55
// end ;
66333: GO 66143
// end ;
66335: LD_VAR 0 5
66339: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66340: LD_INT 0
66342: PPUSH
66343: PPUSH
66344: PPUSH
66345: PPUSH
66346: PPUSH
66347: PPUSH
66348: PPUSH
66349: PPUSH
// if not turrets or not factories then
66350: LD_VAR 0 1
66354: NOT
66355: PUSH
66356: LD_VAR 0 2
66360: NOT
66361: OR
66362: IFFALSE 66366
// exit ;
66364: GO 66673
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66366: LD_ADDR_VAR 0 10
66370: PUSH
66371: LD_INT 5
66373: PUSH
66374: LD_INT 6
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 4
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 3
66393: PUSH
66394: LD_INT 5
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 24
66408: PUSH
66409: LD_INT 25
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 23
66418: PUSH
66419: LD_INT 27
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 42
66432: PUSH
66433: LD_INT 43
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 44
66442: PUSH
66443: LD_INT 46
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 45
66452: PUSH
66453: LD_INT 47
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: ST_TO_ADDR
// result := [ ] ;
66470: LD_ADDR_VAR 0 3
66474: PUSH
66475: EMPTY
66476: ST_TO_ADDR
// for i in turrets do
66477: LD_ADDR_VAR 0 4
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: FOR_IN
66488: IFFALSE 66671
// begin nat := GetNation ( i ) ;
66490: LD_ADDR_VAR 0 7
66494: PUSH
66495: LD_VAR 0 4
66499: PPUSH
66500: CALL_OW 248
66504: ST_TO_ADDR
// weapon := 0 ;
66505: LD_ADDR_VAR 0 8
66509: PUSH
66510: LD_INT 0
66512: ST_TO_ADDR
// if not nat then
66513: LD_VAR 0 7
66517: NOT
66518: IFFALSE 66522
// continue ;
66520: GO 66487
// for j in list [ nat ] do
66522: LD_ADDR_VAR 0 5
66526: PUSH
66527: LD_VAR 0 10
66531: PUSH
66532: LD_VAR 0 7
66536: ARRAY
66537: PUSH
66538: FOR_IN
66539: IFFALSE 66580
// if GetBWeapon ( i ) = j [ 1 ] then
66541: LD_VAR 0 4
66545: PPUSH
66546: CALL_OW 269
66550: PUSH
66551: LD_VAR 0 5
66555: PUSH
66556: LD_INT 1
66558: ARRAY
66559: EQUAL
66560: IFFALSE 66578
// begin weapon := j [ 2 ] ;
66562: LD_ADDR_VAR 0 8
66566: PUSH
66567: LD_VAR 0 5
66571: PUSH
66572: LD_INT 2
66574: ARRAY
66575: ST_TO_ADDR
// break ;
66576: GO 66580
// end ;
66578: GO 66538
66580: POP
66581: POP
// if not weapon then
66582: LD_VAR 0 8
66586: NOT
66587: IFFALSE 66591
// continue ;
66589: GO 66487
// for k in factories do
66591: LD_ADDR_VAR 0 6
66595: PUSH
66596: LD_VAR 0 2
66600: PUSH
66601: FOR_IN
66602: IFFALSE 66667
// begin weapons := AvailableWeaponList ( k ) ;
66604: LD_ADDR_VAR 0 9
66608: PUSH
66609: LD_VAR 0 6
66613: PPUSH
66614: CALL_OW 478
66618: ST_TO_ADDR
// if not weapons then
66619: LD_VAR 0 9
66623: NOT
66624: IFFALSE 66628
// continue ;
66626: GO 66601
// if weapon in weapons then
66628: LD_VAR 0 8
66632: PUSH
66633: LD_VAR 0 9
66637: IN
66638: IFFALSE 66665
// begin result := [ i , weapon ] ;
66640: LD_ADDR_VAR 0 3
66644: PUSH
66645: LD_VAR 0 4
66649: PUSH
66650: LD_VAR 0 8
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// exit ;
66659: POP
66660: POP
66661: POP
66662: POP
66663: GO 66673
// end ; end ;
66665: GO 66601
66667: POP
66668: POP
// end ;
66669: GO 66487
66671: POP
66672: POP
// end ;
66673: LD_VAR 0 3
66677: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66678: LD_INT 0
66680: PPUSH
// if not side or side > 8 then
66681: LD_VAR 0 3
66685: NOT
66686: PUSH
66687: LD_VAR 0 3
66691: PUSH
66692: LD_INT 8
66694: GREATER
66695: OR
66696: IFFALSE 66700
// exit ;
66698: GO 66759
// if not range then
66700: LD_VAR 0 4
66704: NOT
66705: IFFALSE 66716
// range := - 12 ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_INT 12
66714: NEG
66715: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66716: LD_VAR 0 1
66720: PPUSH
66721: LD_VAR 0 2
66725: PPUSH
66726: LD_VAR 0 3
66730: PPUSH
66731: LD_VAR 0 4
66735: PPUSH
66736: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66740: LD_VAR 0 1
66744: PPUSH
66745: LD_VAR 0 2
66749: PPUSH
66750: LD_VAR 0 3
66754: PPUSH
66755: CALL_OW 331
// end ;
66759: LD_VAR 0 5
66763: RET
// export function Video ( mode ) ; begin
66764: LD_INT 0
66766: PPUSH
// ingame_video = mode ;
66767: LD_ADDR_OWVAR 52
66771: PUSH
66772: LD_VAR 0 1
66776: ST_TO_ADDR
// interface_hidden = mode ;
66777: LD_ADDR_OWVAR 54
66781: PUSH
66782: LD_VAR 0 1
66786: ST_TO_ADDR
// end ;
66787: LD_VAR 0 2
66791: RET
// export function Join ( array , element ) ; begin
66792: LD_INT 0
66794: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66795: LD_ADDR_VAR 0 3
66799: PUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_INT 1
66812: PLUS
66813: PPUSH
66814: LD_VAR 0 2
66818: PPUSH
66819: CALL_OW 1
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 3
66828: RET
// export function JoinUnion ( array , element ) ; begin
66829: LD_INT 0
66831: PPUSH
// result := array union element ;
66832: LD_ADDR_VAR 0 3
66836: PUSH
66837: LD_VAR 0 1
66841: PUSH
66842: LD_VAR 0 2
66846: UNION
66847: ST_TO_ADDR
// end ;
66848: LD_VAR 0 3
66852: RET
// export function GetBehemoths ( side ) ; begin
66853: LD_INT 0
66855: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66856: LD_ADDR_VAR 0 2
66860: PUSH
66861: LD_INT 22
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 31
66875: PUSH
66876: LD_INT 25
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PPUSH
66887: CALL_OW 69
66891: ST_TO_ADDR
// end ;
66892: LD_VAR 0 2
66896: RET
// export function Shuffle ( array ) ; var i , index ; begin
66897: LD_INT 0
66899: PPUSH
66900: PPUSH
66901: PPUSH
// result := [ ] ;
66902: LD_ADDR_VAR 0 2
66906: PUSH
66907: EMPTY
66908: ST_TO_ADDR
// if not array then
66909: LD_VAR 0 1
66913: NOT
66914: IFFALSE 66918
// exit ;
66916: GO 67017
// Randomize ;
66918: CALL_OW 10
// for i = array downto 1 do
66922: LD_ADDR_VAR 0 3
66926: PUSH
66927: DOUBLE
66928: LD_VAR 0 1
66932: INC
66933: ST_TO_ADDR
66934: LD_INT 1
66936: PUSH
66937: FOR_DOWNTO
66938: IFFALSE 67015
// begin index := rand ( 1 , array ) ;
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_INT 1
66947: PPUSH
66948: LD_VAR 0 1
66952: PPUSH
66953: CALL_OW 12
66957: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66958: LD_ADDR_VAR 0 2
66962: PUSH
66963: LD_VAR 0 2
66967: PPUSH
66968: LD_VAR 0 2
66972: PUSH
66973: LD_INT 1
66975: PLUS
66976: PPUSH
66977: LD_VAR 0 1
66981: PUSH
66982: LD_VAR 0 4
66986: ARRAY
66987: PPUSH
66988: CALL_OW 2
66992: ST_TO_ADDR
// array := Delete ( array , index ) ;
66993: LD_ADDR_VAR 0 1
66997: PUSH
66998: LD_VAR 0 1
67002: PPUSH
67003: LD_VAR 0 4
67007: PPUSH
67008: CALL_OW 3
67012: ST_TO_ADDR
// end ;
67013: GO 66937
67015: POP
67016: POP
// end ;
67017: LD_VAR 0 2
67021: RET
// export function GetBaseMaterials ( base ) ; begin
67022: LD_INT 0
67024: PPUSH
// result := [ 0 , 0 , 0 ] ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// if not base then
67044: LD_VAR 0 1
67048: NOT
67049: IFFALSE 67053
// exit ;
67051: GO 67102
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67053: LD_ADDR_VAR 0 2
67057: PUSH
67058: LD_VAR 0 1
67062: PPUSH
67063: LD_INT 1
67065: PPUSH
67066: CALL_OW 275
67070: PUSH
67071: LD_VAR 0 1
67075: PPUSH
67076: LD_INT 2
67078: PPUSH
67079: CALL_OW 275
67083: PUSH
67084: LD_VAR 0 1
67088: PPUSH
67089: LD_INT 3
67091: PPUSH
67092: CALL_OW 275
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: ST_TO_ADDR
// end ;
67102: LD_VAR 0 2
67106: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67107: LD_INT 0
67109: PPUSH
67110: PPUSH
// result := array ;
67111: LD_ADDR_VAR 0 3
67115: PUSH
67116: LD_VAR 0 1
67120: ST_TO_ADDR
// if size > 0 then
67121: LD_VAR 0 2
67125: PUSH
67126: LD_INT 0
67128: GREATER
67129: IFFALSE 67175
// for i := array downto size do
67131: LD_ADDR_VAR 0 4
67135: PUSH
67136: DOUBLE
67137: LD_VAR 0 1
67141: INC
67142: ST_TO_ADDR
67143: LD_VAR 0 2
67147: PUSH
67148: FOR_DOWNTO
67149: IFFALSE 67173
// result := Delete ( result , result ) ;
67151: LD_ADDR_VAR 0 3
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: LD_VAR 0 3
67165: PPUSH
67166: CALL_OW 3
67170: ST_TO_ADDR
67171: GO 67148
67173: POP
67174: POP
// end ;
67175: LD_VAR 0 3
67179: RET
// export function ComExit ( unit ) ; var tmp ; begin
67180: LD_INT 0
67182: PPUSH
67183: PPUSH
// if not IsInUnit ( unit ) then
67184: LD_VAR 0 1
67188: PPUSH
67189: CALL_OW 310
67193: NOT
67194: IFFALSE 67198
// exit ;
67196: GO 67258
// tmp := IsInUnit ( unit ) ;
67198: LD_ADDR_VAR 0 3
67202: PUSH
67203: LD_VAR 0 1
67207: PPUSH
67208: CALL_OW 310
67212: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67213: LD_VAR 0 3
67217: PPUSH
67218: CALL_OW 247
67222: PUSH
67223: LD_INT 2
67225: EQUAL
67226: IFFALSE 67239
// ComExitVehicle ( unit ) else
67228: LD_VAR 0 1
67232: PPUSH
67233: CALL_OW 121
67237: GO 67248
// ComExitBuilding ( unit ) ;
67239: LD_VAR 0 1
67243: PPUSH
67244: CALL_OW 122
// result := tmp ;
67248: LD_ADDR_VAR 0 2
67252: PUSH
67253: LD_VAR 0 3
67257: ST_TO_ADDR
// end ;
67258: LD_VAR 0 2
67262: RET
// export function ComExitAll ( units ) ; var i ; begin
67263: LD_INT 0
67265: PPUSH
67266: PPUSH
// if not units then
67267: LD_VAR 0 1
67271: NOT
67272: IFFALSE 67276
// exit ;
67274: GO 67302
// for i in units do
67276: LD_ADDR_VAR 0 3
67280: PUSH
67281: LD_VAR 0 1
67285: PUSH
67286: FOR_IN
67287: IFFALSE 67300
// ComExit ( i ) ;
67289: LD_VAR 0 3
67293: PPUSH
67294: CALL 67180 0 1
67298: GO 67286
67300: POP
67301: POP
// end ;
67302: LD_VAR 0 2
67306: RET
// export function ResetHc ; begin
67307: LD_INT 0
67309: PPUSH
// InitHc ;
67310: CALL_OW 19
// hc_importance := 0 ;
67314: LD_ADDR_OWVAR 32
67318: PUSH
67319: LD_INT 0
67321: ST_TO_ADDR
// end ;
67322: LD_VAR 0 1
67326: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67327: LD_INT 0
67329: PPUSH
67330: PPUSH
67331: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67332: LD_ADDR_VAR 0 6
67336: PUSH
67337: LD_VAR 0 1
67341: PUSH
67342: LD_VAR 0 3
67346: PLUS
67347: PUSH
67348: LD_INT 2
67350: DIV
67351: ST_TO_ADDR
// if _x < 0 then
67352: LD_VAR 0 6
67356: PUSH
67357: LD_INT 0
67359: LESS
67360: IFFALSE 67377
// _x := _x * - 1 ;
67362: LD_ADDR_VAR 0 6
67366: PUSH
67367: LD_VAR 0 6
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: MUL
67376: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67377: LD_ADDR_VAR 0 7
67381: PUSH
67382: LD_VAR 0 2
67386: PUSH
67387: LD_VAR 0 4
67391: PLUS
67392: PUSH
67393: LD_INT 2
67395: DIV
67396: ST_TO_ADDR
// if _y < 0 then
67397: LD_VAR 0 7
67401: PUSH
67402: LD_INT 0
67404: LESS
67405: IFFALSE 67422
// _y := _y * - 1 ;
67407: LD_ADDR_VAR 0 7
67411: PUSH
67412: LD_VAR 0 7
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: MUL
67421: ST_TO_ADDR
// result := [ _x , _y ] ;
67422: LD_ADDR_VAR 0 5
67426: PUSH
67427: LD_VAR 0 6
67431: PUSH
67432: LD_VAR 0 7
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: ST_TO_ADDR
// end ;
67441: LD_VAR 0 5
67445: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67446: LD_INT 0
67448: PPUSH
67449: PPUSH
67450: PPUSH
67451: PPUSH
// task := GetTaskList ( unit ) ;
67452: LD_ADDR_VAR 0 7
67456: PUSH
67457: LD_VAR 0 1
67461: PPUSH
67462: CALL_OW 437
67466: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67467: LD_VAR 0 7
67471: NOT
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: LD_VAR 0 2
67482: PPUSH
67483: CALL_OW 308
67487: NOT
67488: AND
67489: IFFALSE 67493
// exit ;
67491: GO 67611
// if IsInArea ( unit , area ) then
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: CALL_OW 308
67507: IFFALSE 67525
// begin ComMoveToArea ( unit , goAway ) ;
67509: LD_VAR 0 1
67513: PPUSH
67514: LD_VAR 0 3
67518: PPUSH
67519: CALL_OW 113
// exit ;
67523: GO 67611
// end ; if task [ 1 ] [ 1 ] <> M then
67525: LD_VAR 0 7
67529: PUSH
67530: LD_INT 1
67532: ARRAY
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PUSH
67538: LD_STRING M
67540: NONEQUAL
67541: IFFALSE 67545
// exit ;
67543: GO 67611
// x := task [ 1 ] [ 2 ] ;
67545: LD_ADDR_VAR 0 5
67549: PUSH
67550: LD_VAR 0 7
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PUSH
67559: LD_INT 2
67561: ARRAY
67562: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67563: LD_ADDR_VAR 0 6
67567: PUSH
67568: LD_VAR 0 7
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 3
67579: ARRAY
67580: ST_TO_ADDR
// if InArea ( x , y , area ) then
67581: LD_VAR 0 5
67585: PPUSH
67586: LD_VAR 0 6
67590: PPUSH
67591: LD_VAR 0 2
67595: PPUSH
67596: CALL_OW 309
67600: IFFALSE 67611
// ComStop ( unit ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: CALL_OW 141
// end ;
67611: LD_VAR 0 4
67615: RET
// export function Abs ( value ) ; begin
67616: LD_INT 0
67618: PPUSH
// result := value ;
67619: LD_ADDR_VAR 0 2
67623: PUSH
67624: LD_VAR 0 1
67628: ST_TO_ADDR
// if value < 0 then
67629: LD_VAR 0 1
67633: PUSH
67634: LD_INT 0
67636: LESS
67637: IFFALSE 67654
// result := value * - 1 ;
67639: LD_ADDR_VAR 0 2
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: MUL
67653: ST_TO_ADDR
// end ;
67654: LD_VAR 0 2
67658: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67659: LD_INT 0
67661: PPUSH
67662: PPUSH
67663: PPUSH
67664: PPUSH
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
// if not unit or not building then
67669: LD_VAR 0 1
67673: NOT
67674: PUSH
67675: LD_VAR 0 2
67679: NOT
67680: OR
67681: IFFALSE 67685
// exit ;
67683: GO 67911
// x := GetX ( building ) ;
67685: LD_ADDR_VAR 0 4
67689: PUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: CALL_OW 250
67699: ST_TO_ADDR
// y := GetY ( building ) ;
67700: LD_ADDR_VAR 0 6
67704: PUSH
67705: LD_VAR 0 2
67709: PPUSH
67710: CALL_OW 251
67714: ST_TO_ADDR
// d := GetDir ( building ) ;
67715: LD_ADDR_VAR 0 8
67719: PUSH
67720: LD_VAR 0 2
67724: PPUSH
67725: CALL_OW 254
67729: ST_TO_ADDR
// r := 4 ;
67730: LD_ADDR_VAR 0 9
67734: PUSH
67735: LD_INT 4
67737: ST_TO_ADDR
// for i := 1 to 5 do
67738: LD_ADDR_VAR 0 10
67742: PUSH
67743: DOUBLE
67744: LD_INT 1
67746: DEC
67747: ST_TO_ADDR
67748: LD_INT 5
67750: PUSH
67751: FOR_TO
67752: IFFALSE 67909
// begin _x := ShiftX ( x , d , r + i ) ;
67754: LD_ADDR_VAR 0 5
67758: PUSH
67759: LD_VAR 0 4
67763: PPUSH
67764: LD_VAR 0 8
67768: PPUSH
67769: LD_VAR 0 9
67773: PUSH
67774: LD_VAR 0 10
67778: PLUS
67779: PPUSH
67780: CALL_OW 272
67784: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67785: LD_ADDR_VAR 0 7
67789: PUSH
67790: LD_VAR 0 6
67794: PPUSH
67795: LD_VAR 0 8
67799: PPUSH
67800: LD_VAR 0 9
67804: PUSH
67805: LD_VAR 0 10
67809: PLUS
67810: PPUSH
67811: CALL_OW 273
67815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67816: LD_VAR 0 5
67820: PPUSH
67821: LD_VAR 0 7
67825: PPUSH
67826: CALL_OW 488
67830: PUSH
67831: LD_VAR 0 5
67835: PPUSH
67836: LD_VAR 0 7
67840: PPUSH
67841: CALL_OW 428
67845: PPUSH
67846: CALL_OW 247
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: IN
67861: NOT
67862: AND
67863: IFFALSE 67907
// begin ComMoveXY ( unit , _x , _y ) ;
67865: LD_VAR 0 1
67869: PPUSH
67870: LD_VAR 0 5
67874: PPUSH
67875: LD_VAR 0 7
67879: PPUSH
67880: CALL_OW 111
// result := [ _x , _y ] ;
67884: LD_ADDR_VAR 0 3
67888: PUSH
67889: LD_VAR 0 5
67893: PUSH
67894: LD_VAR 0 7
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: ST_TO_ADDR
// exit ;
67903: POP
67904: POP
67905: GO 67911
// end ; end ;
67907: GO 67751
67909: POP
67910: POP
// end ;
67911: LD_VAR 0 3
67915: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67916: LD_INT 0
67918: PPUSH
67919: PPUSH
67920: PPUSH
// result := 0 ;
67921: LD_ADDR_VAR 0 3
67925: PUSH
67926: LD_INT 0
67928: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67929: LD_VAR 0 1
67933: PUSH
67934: LD_INT 0
67936: LESS
67937: PUSH
67938: LD_VAR 0 1
67942: PUSH
67943: LD_INT 8
67945: GREATER
67946: OR
67947: PUSH
67948: LD_VAR 0 2
67952: PUSH
67953: LD_INT 0
67955: LESS
67956: OR
67957: PUSH
67958: LD_VAR 0 2
67962: PUSH
67963: LD_INT 8
67965: GREATER
67966: OR
67967: IFFALSE 67971
// exit ;
67969: GO 68046
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67971: LD_ADDR_VAR 0 4
67975: PUSH
67976: LD_INT 22
67978: PUSH
67979: LD_VAR 0 2
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PPUSH
67988: CALL_OW 69
67992: PUSH
67993: FOR_IN
67994: IFFALSE 68044
// begin un := UnitShoot ( i ) ;
67996: LD_ADDR_VAR 0 5
68000: PUSH
68001: LD_VAR 0 4
68005: PPUSH
68006: CALL_OW 504
68010: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68011: LD_VAR 0 5
68015: PPUSH
68016: CALL_OW 255
68020: PUSH
68021: LD_VAR 0 1
68025: EQUAL
68026: IFFALSE 68042
// begin result := un ;
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_VAR 0 5
68037: ST_TO_ADDR
// exit ;
68038: POP
68039: POP
68040: GO 68046
// end ; end ;
68042: GO 67993
68044: POP
68045: POP
// end ;
68046: LD_VAR 0 3
68050: RET
// export function GetCargoBay ( units ) ; begin
68051: LD_INT 0
68053: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68054: LD_ADDR_VAR 0 2
68058: PUSH
68059: LD_VAR 0 1
68063: PPUSH
68064: LD_INT 2
68066: PUSH
68067: LD_INT 34
68069: PUSH
68070: LD_INT 12
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 34
68079: PUSH
68080: LD_INT 51
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 34
68089: PUSH
68090: LD_INT 32
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 34
68099: PUSH
68100: LD_EXP 106
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: PPUSH
68116: CALL_OW 72
68120: ST_TO_ADDR
// end ;
68121: LD_VAR 0 2
68125: RET
// export function Negate ( value ) ; begin
68126: LD_INT 0
68128: PPUSH
// result := not value ;
68129: LD_ADDR_VAR 0 2
68133: PUSH
68134: LD_VAR 0 1
68138: NOT
68139: ST_TO_ADDR
// end ;
68140: LD_VAR 0 2
68144: RET
// export function Inc ( value ) ; begin
68145: LD_INT 0
68147: PPUSH
// result := value + 1 ;
68148: LD_ADDR_VAR 0 2
68152: PUSH
68153: LD_VAR 0 1
68157: PUSH
68158: LD_INT 1
68160: PLUS
68161: ST_TO_ADDR
// end ;
68162: LD_VAR 0 2
68166: RET
// export function Dec ( value ) ; begin
68167: LD_INT 0
68169: PPUSH
// result := value - 1 ;
68170: LD_ADDR_VAR 0 2
68174: PUSH
68175: LD_VAR 0 1
68179: PUSH
68180: LD_INT 1
68182: MINUS
68183: ST_TO_ADDR
// end ;
68184: LD_VAR 0 2
68188: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68189: LD_INT 0
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
68196: PPUSH
68197: PPUSH
68198: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 2
68208: PPUSH
68209: CALL_OW 488
68213: NOT
68214: PUSH
68215: LD_VAR 0 3
68219: PPUSH
68220: LD_VAR 0 4
68224: PPUSH
68225: CALL_OW 488
68229: NOT
68230: OR
68231: IFFALSE 68244
// begin result := - 1 ;
68233: LD_ADDR_VAR 0 5
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: ST_TO_ADDR
// exit ;
68242: GO 68479
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68244: LD_ADDR_VAR 0 12
68248: PUSH
68249: LD_VAR 0 1
68253: PPUSH
68254: LD_VAR 0 2
68258: PPUSH
68259: LD_VAR 0 3
68263: PPUSH
68264: LD_VAR 0 4
68268: PPUSH
68269: CALL 67327 0 4
68273: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68274: LD_ADDR_VAR 0 11
68278: PUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: LD_VAR 0 2
68288: PPUSH
68289: LD_VAR 0 12
68293: PUSH
68294: LD_INT 1
68296: ARRAY
68297: PPUSH
68298: LD_VAR 0 12
68302: PUSH
68303: LD_INT 2
68305: ARRAY
68306: PPUSH
68307: CALL_OW 298
68311: ST_TO_ADDR
// distance := 9999 ;
68312: LD_ADDR_VAR 0 10
68316: PUSH
68317: LD_INT 9999
68319: ST_TO_ADDR
// for i := 0 to 5 do
68320: LD_ADDR_VAR 0 6
68324: PUSH
68325: DOUBLE
68326: LD_INT 0
68328: DEC
68329: ST_TO_ADDR
68330: LD_INT 5
68332: PUSH
68333: FOR_TO
68334: IFFALSE 68477
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68336: LD_ADDR_VAR 0 7
68340: PUSH
68341: LD_VAR 0 1
68345: PPUSH
68346: LD_VAR 0 6
68350: PPUSH
68351: LD_VAR 0 11
68355: PPUSH
68356: CALL_OW 272
68360: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68361: LD_ADDR_VAR 0 8
68365: PUSH
68366: LD_VAR 0 2
68370: PPUSH
68371: LD_VAR 0 6
68375: PPUSH
68376: LD_VAR 0 11
68380: PPUSH
68381: CALL_OW 273
68385: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68386: LD_VAR 0 7
68390: PPUSH
68391: LD_VAR 0 8
68395: PPUSH
68396: CALL_OW 488
68400: NOT
68401: IFFALSE 68405
// continue ;
68403: GO 68333
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68405: LD_ADDR_VAR 0 9
68409: PUSH
68410: LD_VAR 0 12
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: PPUSH
68419: LD_VAR 0 12
68423: PUSH
68424: LD_INT 2
68426: ARRAY
68427: PPUSH
68428: LD_VAR 0 7
68432: PPUSH
68433: LD_VAR 0 8
68437: PPUSH
68438: CALL_OW 298
68442: ST_TO_ADDR
// if tmp < distance then
68443: LD_VAR 0 9
68447: PUSH
68448: LD_VAR 0 10
68452: LESS
68453: IFFALSE 68475
// begin result := i ;
68455: LD_ADDR_VAR 0 5
68459: PUSH
68460: LD_VAR 0 6
68464: ST_TO_ADDR
// distance := tmp ;
68465: LD_ADDR_VAR 0 10
68469: PUSH
68470: LD_VAR 0 9
68474: ST_TO_ADDR
// end ; end ;
68475: GO 68333
68477: POP
68478: POP
// end ;
68479: LD_VAR 0 5
68483: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68484: LD_INT 0
68486: PPUSH
68487: PPUSH
// if not driver or not IsInUnit ( driver ) then
68488: LD_VAR 0 1
68492: NOT
68493: PUSH
68494: LD_VAR 0 1
68498: PPUSH
68499: CALL_OW 310
68503: NOT
68504: OR
68505: IFFALSE 68509
// exit ;
68507: GO 68599
// vehicle := IsInUnit ( driver ) ;
68509: LD_ADDR_VAR 0 3
68513: PUSH
68514: LD_VAR 0 1
68518: PPUSH
68519: CALL_OW 310
68523: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_STRING \
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: PUSH
68559: LD_STRING E
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_VAR 0 3
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PPUSH
68595: CALL_OW 446
// end ;
68599: LD_VAR 0 2
68603: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68604: LD_INT 0
68606: PPUSH
68607: PPUSH
// if not driver or not IsInUnit ( driver ) then
68608: LD_VAR 0 1
68612: NOT
68613: PUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: CALL_OW 310
68623: NOT
68624: OR
68625: IFFALSE 68629
// exit ;
68627: GO 68719
// vehicle := IsInUnit ( driver ) ;
68629: LD_ADDR_VAR 0 3
68633: PUSH
68634: LD_VAR 0 1
68638: PPUSH
68639: CALL_OW 310
68643: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68644: LD_VAR 0 1
68648: PPUSH
68649: LD_STRING \
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: PUSH
68679: LD_STRING E
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_VAR 0 3
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PPUSH
68715: CALL_OW 447
// end ;
68719: LD_VAR 0 2
68723: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68724: LD_INT 0
68726: PPUSH
68727: PPUSH
68728: PPUSH
// tmp := [ ] ;
68729: LD_ADDR_VAR 0 5
68733: PUSH
68734: EMPTY
68735: ST_TO_ADDR
// for i in units do
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: LD_VAR 0 1
68745: PUSH
68746: FOR_IN
68747: IFFALSE 68785
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68749: LD_ADDR_VAR 0 5
68753: PUSH
68754: LD_VAR 0 5
68758: PPUSH
68759: LD_VAR 0 5
68763: PUSH
68764: LD_INT 1
68766: PLUS
68767: PPUSH
68768: LD_VAR 0 4
68772: PPUSH
68773: CALL_OW 256
68777: PPUSH
68778: CALL_OW 2
68782: ST_TO_ADDR
68783: GO 68746
68785: POP
68786: POP
// if not tmp then
68787: LD_VAR 0 5
68791: NOT
68792: IFFALSE 68796
// exit ;
68794: GO 68844
// if asc then
68796: LD_VAR 0 2
68800: IFFALSE 68824
// result := SortListByListAsc ( units , tmp ) else
68802: LD_ADDR_VAR 0 3
68806: PUSH
68807: LD_VAR 0 1
68811: PPUSH
68812: LD_VAR 0 5
68816: PPUSH
68817: CALL_OW 76
68821: ST_TO_ADDR
68822: GO 68844
// result := SortListByListDesc ( units , tmp ) ;
68824: LD_ADDR_VAR 0 3
68828: PUSH
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_VAR 0 5
68838: PPUSH
68839: CALL_OW 77
68843: ST_TO_ADDR
// end ;
68844: LD_VAR 0 3
68848: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68849: LD_INT 0
68851: PPUSH
68852: PPUSH
// task := GetTaskList ( mech ) ;
68853: LD_ADDR_VAR 0 4
68857: PUSH
68858: LD_VAR 0 1
68862: PPUSH
68863: CALL_OW 437
68867: ST_TO_ADDR
// if not task then
68868: LD_VAR 0 4
68872: NOT
68873: IFFALSE 68877
// exit ;
68875: GO 68919
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68877: LD_ADDR_VAR 0 3
68881: PUSH
68882: LD_VAR 0 4
68886: PUSH
68887: LD_INT 1
68889: ARRAY
68890: PUSH
68891: LD_INT 1
68893: ARRAY
68894: PUSH
68895: LD_STRING r
68897: EQUAL
68898: PUSH
68899: LD_VAR 0 4
68903: PUSH
68904: LD_INT 1
68906: ARRAY
68907: PUSH
68908: LD_INT 4
68910: ARRAY
68911: PUSH
68912: LD_VAR 0 2
68916: EQUAL
68917: AND
68918: ST_TO_ADDR
// end ;
68919: LD_VAR 0 3
68923: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68924: LD_INT 0
68926: PPUSH
// SetDir ( unit , d ) ;
68927: LD_VAR 0 1
68931: PPUSH
68932: LD_VAR 0 4
68936: PPUSH
68937: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68941: LD_VAR 0 1
68945: PPUSH
68946: LD_VAR 0 2
68950: PPUSH
68951: LD_VAR 0 3
68955: PPUSH
68956: LD_VAR 0 5
68960: PPUSH
68961: CALL_OW 48
// end ;
68965: LD_VAR 0 6
68969: RET
// export function ToNaturalNumber ( number ) ; begin
68970: LD_INT 0
68972: PPUSH
// result := number div 1 ;
68973: LD_ADDR_VAR 0 2
68977: PUSH
68978: LD_VAR 0 1
68982: PUSH
68983: LD_INT 1
68985: DIV
68986: ST_TO_ADDR
// if number < 0 then
68987: LD_VAR 0 1
68991: PUSH
68992: LD_INT 0
68994: LESS
68995: IFFALSE 69005
// result := 0 ;
68997: LD_ADDR_VAR 0 2
69001: PUSH
69002: LD_INT 0
69004: ST_TO_ADDR
// end ;
69005: LD_VAR 0 2
69009: RET
// export function SortByClass ( units , class ) ; var un ; begin
69010: LD_INT 0
69012: PPUSH
69013: PPUSH
// if not units or not class then
69014: LD_VAR 0 1
69018: NOT
69019: PUSH
69020: LD_VAR 0 2
69024: NOT
69025: OR
69026: IFFALSE 69030
// exit ;
69028: GO 69125
// result := [ ] ;
69030: LD_ADDR_VAR 0 3
69034: PUSH
69035: EMPTY
69036: ST_TO_ADDR
// for un in units do
69037: LD_ADDR_VAR 0 4
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: FOR_IN
69048: IFFALSE 69123
// if GetClass ( un ) = class then
69050: LD_VAR 0 4
69054: PPUSH
69055: CALL_OW 257
69059: PUSH
69060: LD_VAR 0 2
69064: EQUAL
69065: IFFALSE 69092
// result := Insert ( result , 1 , un ) else
69067: LD_ADDR_VAR 0 3
69071: PUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: LD_INT 1
69079: PPUSH
69080: LD_VAR 0 4
69084: PPUSH
69085: CALL_OW 2
69089: ST_TO_ADDR
69090: GO 69121
// result := Replace ( result , result + 1 , un ) ;
69092: LD_ADDR_VAR 0 3
69096: PUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: LD_VAR 0 3
69106: PUSH
69107: LD_INT 1
69109: PLUS
69110: PPUSH
69111: LD_VAR 0 4
69115: PPUSH
69116: CALL_OW 1
69120: ST_TO_ADDR
69121: GO 69047
69123: POP
69124: POP
// end ;
69125: LD_VAR 0 3
69129: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69130: LD_INT 0
69132: PPUSH
69133: PPUSH
69134: PPUSH
69135: PPUSH
69136: PPUSH
69137: PPUSH
69138: PPUSH
// result := [ ] ;
69139: LD_ADDR_VAR 0 4
69143: PUSH
69144: EMPTY
69145: ST_TO_ADDR
// if x - r < 0 then
69146: LD_VAR 0 1
69150: PUSH
69151: LD_VAR 0 3
69155: MINUS
69156: PUSH
69157: LD_INT 0
69159: LESS
69160: IFFALSE 69172
// min_x := 0 else
69162: LD_ADDR_VAR 0 8
69166: PUSH
69167: LD_INT 0
69169: ST_TO_ADDR
69170: GO 69188
// min_x := x - r ;
69172: LD_ADDR_VAR 0 8
69176: PUSH
69177: LD_VAR 0 1
69181: PUSH
69182: LD_VAR 0 3
69186: MINUS
69187: ST_TO_ADDR
// if y - r < 0 then
69188: LD_VAR 0 2
69192: PUSH
69193: LD_VAR 0 3
69197: MINUS
69198: PUSH
69199: LD_INT 0
69201: LESS
69202: IFFALSE 69214
// min_y := 0 else
69204: LD_ADDR_VAR 0 7
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
69212: GO 69230
// min_y := y - r ;
69214: LD_ADDR_VAR 0 7
69218: PUSH
69219: LD_VAR 0 2
69223: PUSH
69224: LD_VAR 0 3
69228: MINUS
69229: ST_TO_ADDR
// max_x := x + r ;
69230: LD_ADDR_VAR 0 9
69234: PUSH
69235: LD_VAR 0 1
69239: PUSH
69240: LD_VAR 0 3
69244: PLUS
69245: ST_TO_ADDR
// max_y := y + r ;
69246: LD_ADDR_VAR 0 10
69250: PUSH
69251: LD_VAR 0 2
69255: PUSH
69256: LD_VAR 0 3
69260: PLUS
69261: ST_TO_ADDR
// for _x = min_x to max_x do
69262: LD_ADDR_VAR 0 5
69266: PUSH
69267: DOUBLE
69268: LD_VAR 0 8
69272: DEC
69273: ST_TO_ADDR
69274: LD_VAR 0 9
69278: PUSH
69279: FOR_TO
69280: IFFALSE 69381
// for _y = min_y to max_y do
69282: LD_ADDR_VAR 0 6
69286: PUSH
69287: DOUBLE
69288: LD_VAR 0 7
69292: DEC
69293: ST_TO_ADDR
69294: LD_VAR 0 10
69298: PUSH
69299: FOR_TO
69300: IFFALSE 69377
// begin if not ValidHex ( _x , _y ) then
69302: LD_VAR 0 5
69306: PPUSH
69307: LD_VAR 0 6
69311: PPUSH
69312: CALL_OW 488
69316: NOT
69317: IFFALSE 69321
// continue ;
69319: GO 69299
// if GetResourceTypeXY ( _x , _y ) then
69321: LD_VAR 0 5
69325: PPUSH
69326: LD_VAR 0 6
69330: PPUSH
69331: CALL_OW 283
69335: IFFALSE 69375
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69337: LD_ADDR_VAR 0 4
69341: PUSH
69342: LD_VAR 0 4
69346: PPUSH
69347: LD_VAR 0 4
69351: PUSH
69352: LD_INT 1
69354: PLUS
69355: PPUSH
69356: LD_VAR 0 5
69360: PUSH
69361: LD_VAR 0 6
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PPUSH
69370: CALL_OW 1
69374: ST_TO_ADDR
// end ;
69375: GO 69299
69377: POP
69378: POP
69379: GO 69279
69381: POP
69382: POP
// end ;
69383: LD_VAR 0 4
69387: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69388: LD_INT 0
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
69397: PPUSH
// if not units then
69398: LD_VAR 0 1
69402: NOT
69403: IFFALSE 69407
// exit ;
69405: GO 69832
// result := UnitFilter ( units , [ f_ok ] ) ;
69407: LD_ADDR_VAR 0 3
69411: PUSH
69412: LD_VAR 0 1
69416: PPUSH
69417: LD_INT 50
69419: PUSH
69420: EMPTY
69421: LIST
69422: PPUSH
69423: CALL_OW 72
69427: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69428: LD_ADDR_VAR 0 8
69432: PUSH
69433: LD_VAR 0 1
69437: PUSH
69438: LD_INT 1
69440: ARRAY
69441: PPUSH
69442: CALL_OW 255
69446: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69447: LD_ADDR_VAR 0 10
69451: PUSH
69452: LD_INT 29
69454: PUSH
69455: LD_EXP 109
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: ST_TO_ADDR
// if not result then
69464: LD_VAR 0 3
69468: NOT
69469: IFFALSE 69473
// exit ;
69471: GO 69832
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69473: LD_ADDR_VAR 0 5
69477: PUSH
69478: LD_INT 81
69480: PUSH
69481: LD_VAR 0 8
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PPUSH
69490: CALL_OW 69
69494: ST_TO_ADDR
// for i in result do
69495: LD_ADDR_VAR 0 4
69499: PUSH
69500: LD_VAR 0 3
69504: PUSH
69505: FOR_IN
69506: IFFALSE 69830
// begin tag := GetTag ( i ) + 1 ;
69508: LD_ADDR_VAR 0 9
69512: PUSH
69513: LD_VAR 0 4
69517: PPUSH
69518: CALL_OW 110
69522: PUSH
69523: LD_INT 1
69525: PLUS
69526: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69527: LD_ADDR_VAR 0 7
69531: PUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: CALL_OW 250
69541: PPUSH
69542: LD_VAR 0 4
69546: PPUSH
69547: CALL_OW 251
69551: PPUSH
69552: LD_INT 6
69554: PPUSH
69555: CALL 69130 0 3
69559: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69560: LD_VAR 0 7
69564: PUSH
69565: LD_VAR 0 4
69569: PPUSH
69570: CALL_OW 264
69574: PUSH
69575: LD_VAR 0 10
69579: IN
69580: NOT
69581: AND
69582: IFFALSE 69621
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69584: LD_VAR 0 4
69588: PPUSH
69589: LD_VAR 0 7
69593: PUSH
69594: LD_INT 1
69596: ARRAY
69597: PUSH
69598: LD_INT 1
69600: ARRAY
69601: PPUSH
69602: LD_VAR 0 7
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PUSH
69611: LD_INT 2
69613: ARRAY
69614: PPUSH
69615: CALL_OW 116
69619: GO 69828
// if path > tag then
69621: LD_VAR 0 2
69625: PUSH
69626: LD_VAR 0 9
69630: GREATER
69631: IFFALSE 69798
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69633: LD_ADDR_VAR 0 6
69637: PUSH
69638: LD_VAR 0 5
69642: PPUSH
69643: LD_INT 91
69645: PUSH
69646: LD_VAR 0 4
69650: PUSH
69651: LD_INT 12
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: PPUSH
69659: CALL_OW 72
69663: ST_TO_ADDR
// if nearEnemy then
69664: LD_VAR 0 6
69668: IFFALSE 69696
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69670: LD_VAR 0 4
69674: PPUSH
69675: LD_VAR 0 6
69679: PPUSH
69680: LD_VAR 0 4
69684: PPUSH
69685: CALL_OW 74
69689: PPUSH
69690: CALL_OW 115
69694: GO 69796
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69696: LD_VAR 0 4
69700: PPUSH
69701: LD_VAR 0 2
69705: PUSH
69706: LD_VAR 0 9
69710: ARRAY
69711: PUSH
69712: LD_INT 1
69714: ARRAY
69715: PPUSH
69716: LD_VAR 0 2
69720: PUSH
69721: LD_VAR 0 9
69725: ARRAY
69726: PUSH
69727: LD_INT 2
69729: ARRAY
69730: PPUSH
69731: CALL_OW 297
69735: PUSH
69736: LD_INT 6
69738: GREATER
69739: IFFALSE 69782
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69741: LD_VAR 0 4
69745: PPUSH
69746: LD_VAR 0 2
69750: PUSH
69751: LD_VAR 0 9
69755: ARRAY
69756: PUSH
69757: LD_INT 1
69759: ARRAY
69760: PPUSH
69761: LD_VAR 0 2
69765: PUSH
69766: LD_VAR 0 9
69770: ARRAY
69771: PUSH
69772: LD_INT 2
69774: ARRAY
69775: PPUSH
69776: CALL_OW 114
69780: GO 69796
// SetTag ( i , tag ) ;
69782: LD_VAR 0 4
69786: PPUSH
69787: LD_VAR 0 9
69791: PPUSH
69792: CALL_OW 109
// end else
69796: GO 69828
// if enemy then
69798: LD_VAR 0 5
69802: IFFALSE 69828
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69804: LD_VAR 0 4
69808: PPUSH
69809: LD_VAR 0 5
69813: PPUSH
69814: LD_VAR 0 4
69818: PPUSH
69819: CALL_OW 74
69823: PPUSH
69824: CALL_OW 115
// end ;
69828: GO 69505
69830: POP
69831: POP
// end ;
69832: LD_VAR 0 3
69836: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69837: LD_INT 0
69839: PPUSH
69840: PPUSH
69841: PPUSH
// if not unit or IsInUnit ( unit ) then
69842: LD_VAR 0 1
69846: NOT
69847: PUSH
69848: LD_VAR 0 1
69852: PPUSH
69853: CALL_OW 310
69857: OR
69858: IFFALSE 69862
// exit ;
69860: GO 69953
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69862: LD_ADDR_VAR 0 4
69866: PUSH
69867: LD_VAR 0 1
69871: PPUSH
69872: CALL_OW 250
69876: PPUSH
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_INT 1
69884: PPUSH
69885: CALL_OW 272
69889: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69890: LD_ADDR_VAR 0 5
69894: PUSH
69895: LD_VAR 0 1
69899: PPUSH
69900: CALL_OW 251
69904: PPUSH
69905: LD_VAR 0 2
69909: PPUSH
69910: LD_INT 1
69912: PPUSH
69913: CALL_OW 273
69917: ST_TO_ADDR
// if ValidHex ( x , y ) then
69918: LD_VAR 0 4
69922: PPUSH
69923: LD_VAR 0 5
69927: PPUSH
69928: CALL_OW 488
69932: IFFALSE 69953
// ComTurnXY ( unit , x , y ) ;
69934: LD_VAR 0 1
69938: PPUSH
69939: LD_VAR 0 4
69943: PPUSH
69944: LD_VAR 0 5
69948: PPUSH
69949: CALL_OW 118
// end ;
69953: LD_VAR 0 3
69957: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69958: LD_INT 0
69960: PPUSH
69961: PPUSH
// result := false ;
69962: LD_ADDR_VAR 0 3
69966: PUSH
69967: LD_INT 0
69969: ST_TO_ADDR
// if not units then
69970: LD_VAR 0 2
69974: NOT
69975: IFFALSE 69979
// exit ;
69977: GO 70024
// for i in units do
69979: LD_ADDR_VAR 0 4
69983: PUSH
69984: LD_VAR 0 2
69988: PUSH
69989: FOR_IN
69990: IFFALSE 70022
// if See ( side , i ) then
69992: LD_VAR 0 1
69996: PPUSH
69997: LD_VAR 0 4
70001: PPUSH
70002: CALL_OW 292
70006: IFFALSE 70020
// begin result := true ;
70008: LD_ADDR_VAR 0 3
70012: PUSH
70013: LD_INT 1
70015: ST_TO_ADDR
// exit ;
70016: POP
70017: POP
70018: GO 70024
// end ;
70020: GO 69989
70022: POP
70023: POP
// end ;
70024: LD_VAR 0 3
70028: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
// if not unit or not points then
70035: LD_VAR 0 1
70039: NOT
70040: PUSH
70041: LD_VAR 0 2
70045: NOT
70046: OR
70047: IFFALSE 70051
// exit ;
70049: GO 70141
// dist := 99999 ;
70051: LD_ADDR_VAR 0 5
70055: PUSH
70056: LD_INT 99999
70058: ST_TO_ADDR
// for i in points do
70059: LD_ADDR_VAR 0 4
70063: PUSH
70064: LD_VAR 0 2
70068: PUSH
70069: FOR_IN
70070: IFFALSE 70139
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70072: LD_ADDR_VAR 0 6
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: LD_VAR 0 4
70086: PUSH
70087: LD_INT 1
70089: ARRAY
70090: PPUSH
70091: LD_VAR 0 4
70095: PUSH
70096: LD_INT 2
70098: ARRAY
70099: PPUSH
70100: CALL_OW 297
70104: ST_TO_ADDR
// if tmpDist < dist then
70105: LD_VAR 0 6
70109: PUSH
70110: LD_VAR 0 5
70114: LESS
70115: IFFALSE 70137
// begin result := i ;
70117: LD_ADDR_VAR 0 3
70121: PUSH
70122: LD_VAR 0 4
70126: ST_TO_ADDR
// dist := tmpDist ;
70127: LD_ADDR_VAR 0 5
70131: PUSH
70132: LD_VAR 0 6
70136: ST_TO_ADDR
// end ; end ;
70137: GO 70069
70139: POP
70140: POP
// end ; end_of_file
70141: LD_VAR 0 3
70145: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70146: LD_VAR 0 1
70150: PUSH
70151: LD_INT 200
70153: DOUBLE
70154: GREATEREQUAL
70155: IFFALSE 70163
70157: LD_INT 299
70159: DOUBLE
70160: LESSEQUAL
70161: IFTRUE 70165
70163: GO 70197
70165: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70166: LD_VAR 0 1
70170: PPUSH
70171: LD_VAR 0 2
70175: PPUSH
70176: LD_VAR 0 3
70180: PPUSH
70181: LD_VAR 0 4
70185: PPUSH
70186: LD_VAR 0 5
70190: PPUSH
70191: CALL 11296 0 5
70195: GO 70274
70197: LD_INT 300
70199: DOUBLE
70200: GREATEREQUAL
70201: IFFALSE 70209
70203: LD_INT 399
70205: DOUBLE
70206: LESSEQUAL
70207: IFTRUE 70211
70209: GO 70273
70211: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70212: LD_VAR 0 1
70216: PPUSH
70217: LD_VAR 0 2
70221: PPUSH
70222: LD_VAR 0 3
70226: PPUSH
70227: LD_VAR 0 4
70231: PPUSH
70232: LD_VAR 0 5
70236: PPUSH
70237: LD_VAR 0 6
70241: PPUSH
70242: LD_VAR 0 7
70246: PPUSH
70247: LD_VAR 0 8
70251: PPUSH
70252: LD_VAR 0 9
70256: PPUSH
70257: LD_VAR 0 10
70261: PPUSH
70262: LD_VAR 0 11
70266: PPUSH
70267: CALL 27907 0 11
70271: GO 70274
70273: POP
// end ;
70274: PPOPN 11
70276: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70277: LD_VAR 0 1
70281: PPUSH
70282: LD_VAR 0 2
70286: PPUSH
70287: LD_VAR 0 3
70291: PPUSH
70292: LD_VAR 0 4
70296: PPUSH
70297: LD_VAR 0 5
70301: PPUSH
70302: CALL 11032 0 5
// end ; end_of_file
70306: PPOPN 5
70308: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70309: LD_VAR 0 1
70313: PPUSH
70314: LD_VAR 0 2
70318: PPUSH
70319: LD_VAR 0 3
70323: PPUSH
70324: LD_VAR 0 4
70328: PPUSH
70329: LD_VAR 0 5
70333: PPUSH
70334: LD_VAR 0 6
70338: PPUSH
70339: CALL 15600 0 6
// end ;
70343: PPOPN 6
70345: END
