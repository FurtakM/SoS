// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9941 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9316 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9761 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 37294 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 68614 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10309 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10187 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 62117 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10285 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10293 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 63627 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9231
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9221
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: IFFALSE 8969
// exit ;
8967: GO 9231
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_EXP 30
8978: PPUSH
8979: CALL_OW 250
8983: PPUSH
8984: LD_EXP 30
8988: PPUSH
8989: CALL_OW 251
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_VAR 0 4
9003: PPUSH
9004: CALL_OW 298
9008: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9009: LD_ADDR_VAR 0 10
9013: PUSH
9014: LD_VAR 0 9
9018: PPUSH
9019: CALL 8039 0 1
9023: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9024: LD_VAR 0 10
9028: PUSH
9029: LD_OWVAR 2
9033: PPUSH
9034: CALL 5639 0 1
9038: GREATER
9039: IFFALSE 9053
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9041: LD_STRING ArtFrogJumpCost
9043: PPUSH
9044: LD_INT 2
9046: PPUSH
9047: CALL_OW 338
// exit ;
9051: GO 9231
// end ; SetSibResources ( your_side , cost ) ;
9053: LD_OWVAR 2
9057: PPUSH
9058: LD_VAR 0 10
9062: PPUSH
9063: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_VAR 0 4
9076: PPUSH
9077: LD_INT 6
9079: PPUSH
9080: LD_INT 5
9082: NEG
9083: PPUSH
9084: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9088: LD_VAR 0 3
9092: PPUSH
9093: LD_VAR 0 4
9097: PPUSH
9098: LD_INT 6
9100: PPUSH
9101: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9105: LD_EXP 30
9109: PPUSH
9110: LD_VAR 0 3
9114: PPUSH
9115: LD_VAR 0 4
9119: PPUSH
9120: LD_INT 0
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9130: LD_VAR 0 3
9134: PPUSH
9135: LD_VAR 0 4
9139: PPUSH
9140: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9144: LD_ADDR_EXP 30
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// player_artifact_researched := false ;
9152: LD_ADDR_EXP 22
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9160: LD_OWVAR 2
9164: PPUSH
9165: LD_EXP 20
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_VAR 0 7
9177: PPUSH
9178: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9182: LD_OWVAR 2
9186: PPUSH
9187: LD_EXP 21
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: LD_VAR 0 7
9199: PPUSH
9200: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9204: LD_EXP 26
9208: PPUSH
9209: CALL_OW 67
// player_artifact_researched := true ;
9213: LD_ADDR_EXP 22
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// end ; if debug then
9221: LD_EXP 6
9225: IFFALSE 9231
// DebugArtifact ;
9227: CALL 7803 0 0
// end ;
9231: PPOPN 10
9233: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 255
9243: PUSH
9244: LD_OWVAR 2
9248: EQUAL
9249: IFFALSE 9288
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9251: LD_OWVAR 2
9255: PPUSH
9256: LD_EXP 25
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 468
// player_artifact_ready := true ;
9273: LD_ADDR_EXP 29
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9281: LD_STRING ArtFrogJump
9283: PPUSH
9284: CALL_OW 339
// end ; end ;
9288: PPOPN 1
9290: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9291: LD_OWVAR 2
9295: PPUSH
9296: LD_EXP 25
9300: PPUSH
9301: LD_INT 2
9303: PPUSH
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 468
// end ;
9313: PPOPN 2
9315: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
9320: PPUSH
9321: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9322: LD_ADDR_VAR 0 3
9326: PUSH
9327: LD_INT 81
9329: PUSH
9330: LD_INT 7
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 48
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: PUSH
9356: LD_INT 81
9358: PUSH
9359: LD_INT 7
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 30
9368: PUSH
9369: LD_INT 28
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: ADD
9385: PUSH
9386: LD_INT 81
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 30
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PPUSH
9410: CALL_OW 69
9414: ADD
9415: PUSH
9416: LD_INT 81
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 30
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 69
9444: ADD
9445: PUSH
9446: LD_INT 81
9448: PUSH
9449: LD_INT 7
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 30
9458: PUSH
9459: LD_INT 34
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: ADD
9475: PUSH
9476: LD_INT 81
9478: PUSH
9479: LD_INT 7
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 35
9488: PUSH
9489: LD_INT 49
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ADD
9505: PUSH
9506: LD_INT 81
9508: PUSH
9509: LD_INT 7
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 35
9518: PUSH
9519: LD_INT 47
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ADD
9535: PUSH
9536: LD_INT 81
9538: PUSH
9539: LD_INT 7
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 47
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 69
9564: ADD
9565: PUSH
9566: LD_INT 81
9568: PUSH
9569: LD_INT 7
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 69
9594: ADD
9595: PUSH
9596: LD_INT 81
9598: PUSH
9599: LD_INT 7
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: LD_INT 3
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: ADD
9625: ST_TO_ADDR
// if not tmp then
9626: LD_VAR 0 3
9630: NOT
9631: IFFALSE 9635
// exit ;
9633: GO 9756
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 48
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 72
9654: IFFALSE 9687
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9656: LD_ADDR_VAR 0 4
9660: PUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 48
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 72
9680: PUSH
9681: LD_INT 1
9683: ARRAY
9684: ST_TO_ADDR
9685: GO 9711
// un := tmp [ rand ( 1 , tmp ) ] ;
9687: LD_ADDR_VAR 0 4
9691: PUSH
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: PPUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: CALL_OW 12
9709: ARRAY
9710: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9711: LD_EXP 10
9715: NOT
9716: IFFALSE 9747
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9718: LD_ADDR_EXP 10
9722: PUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL_OW 250
9732: PUSH
9733: LD_VAR 0 4
9737: PPUSH
9738: CALL_OW 251
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: ST_TO_ADDR
// KillUnit ( un ) ;
9747: LD_VAR 0 4
9751: PPUSH
9752: CALL_OW 66
// end ;
9756: LD_VAR 0 1
9760: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9767: LD_ADDR_VAR 0 4
9771: PUSH
9772: LD_INT 22
9774: PUSH
9775: LD_INT 6
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 33
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: ST_TO_ADDR
// if not tmp then
9801: LD_VAR 0 4
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 9936
// un := tmp [ rand ( 1 , tmp ) ] ;
9810: LD_ADDR_VAR 0 3
9814: PUSH
9815: LD_VAR 0 4
9819: PUSH
9820: LD_INT 1
9822: PPUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: CALL_OW 12
9832: ARRAY
9833: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9834: LD_VAR 0 3
9838: PPUSH
9839: CALL_OW 264
9843: PUSH
9844: LD_INT 48
9846: EQUAL
9847: IFFALSE 9866
// ComAttackPlace ( un , 194 , 19 ) else
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 194
9856: PPUSH
9857: LD_INT 19
9859: PPUSH
9860: CALL_OW 116
9864: GO 9900
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 81
9873: PUSH
9874: LD_INT 7
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_VAR 0 3
9890: PPUSH
9891: CALL_OW 74
9895: PPUSH
9896: CALL_OW 115
// if not alliance_used_artifact_2 then
9900: LD_EXP 11
9904: NOT
9905: IFFALSE 9936
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9907: LD_ADDR_EXP 11
9911: PUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: CALL_OW 250
9921: PUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: CALL_OW 251
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// end ; end_of_file
9936: LD_VAR 0 1
9940: RET
// export function DebugMode ; var i , j , b ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
// enable_addtolog = true ;
9947: LD_ADDR_OWVAR 81
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// FogOff ( 6 ) ;
9955: LD_INT 6
9957: PPUSH
9958: CALL_OW 344
// uc_side = 6 ;
9962: LD_ADDR_OWVAR 20
9966: PUSH
9967: LD_INT 6
9969: ST_TO_ADDR
// uc_nation = 3 ;
9970: LD_ADDR_OWVAR 21
9974: PUSH
9975: LD_INT 3
9977: ST_TO_ADDR
// bc_level = 10 ;
9978: LD_ADDR_OWVAR 43
9982: PUSH
9983: LD_INT 10
9985: ST_TO_ADDR
// bc_type := b_lab_full ;
9986: LD_ADDR_OWVAR 42
9990: PUSH
9991: LD_INT 8
9993: ST_TO_ADDR
// bc_kind1 := 11 ;
9994: LD_ADDR_OWVAR 44
9998: PUSH
9999: LD_INT 11
10001: ST_TO_ADDR
// bc_kind2 := 12 ;
10002: LD_ADDR_OWVAR 45
10006: PUSH
10007: LD_INT 12
10009: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10010: LD_INT 189
10012: PPUSH
10013: LD_INT 20
10015: PPUSH
10016: LD_INT 1
10018: PPUSH
10019: CALL_OW 47
// bc_type := b_warehouse ;
10023: LD_ADDR_OWVAR 42
10027: PUSH
10028: LD_INT 1
10030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10031: LD_ADDR_VAR 0 4
10035: PUSH
10036: LD_INT 201
10038: PPUSH
10039: LD_INT 22
10041: PPUSH
10042: LD_INT 4
10044: PPUSH
10045: CALL_OW 47
10049: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10050: LD_VAR 0 4
10054: PPUSH
10055: CALL_OW 274
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: LD_INT 10000
10065: PPUSH
10066: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10070: LD_VAR 0 4
10074: PPUSH
10075: CALL_OW 274
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: LD_INT 10000
10085: PPUSH
10086: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: CALL_OW 274
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: LD_INT 10000
10105: PPUSH
10106: CALL_OW 277
// bc_type := b_siberite_power ;
10110: LD_ADDR_OWVAR 42
10114: PUSH
10115: LD_INT 28
10117: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10118: LD_ADDR_VAR 0 4
10122: PUSH
10123: LD_INT 216
10125: PPUSH
10126: LD_INT 16
10128: PPUSH
10129: LD_INT 4
10131: PPUSH
10132: CALL_OW 47
10136: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10137: LD_ADDR_VAR 0 4
10141: PUSH
10142: LD_INT 219
10144: PPUSH
10145: LD_INT 16
10147: PPUSH
10148: LD_INT 4
10150: PPUSH
10151: CALL_OW 47
10155: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10156: LD_INT 55
10158: PPUSH
10159: LD_INT 6
10161: PPUSH
10162: LD_INT 2
10164: PPUSH
10165: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10169: LD_INT 56
10171: PPUSH
10172: LD_INT 6
10174: PPUSH
10175: LD_INT 2
10177: PPUSH
10178: CALL_OW 322
// end ; end_of_file
10182: LD_VAR 0 1
10186: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10187: LD_INT 0
10189: PPUSH
10190: PPUSH
10191: PPUSH
10192: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_EXP 109
10207: EQUAL
10208: IFFALSE 10280
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10210: LD_INT 68
10212: PPUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 255
10222: PPUSH
10223: CALL_OW 321
10227: PUSH
10228: LD_INT 2
10230: EQUAL
10231: IFFALSE 10243
// eff := 70 else
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_INT 70
10240: ST_TO_ADDR
10241: GO 10251
// eff := 30 ;
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: LD_INT 30
10250: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 250
10260: PPUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: CALL_OW 251
10270: PPUSH
10271: LD_VAR 0 4
10275: PPUSH
10276: CALL_OW 495
// end ; end ;
10280: LD_VAR 0 2
10284: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10285: LD_INT 0
10287: PPUSH
// end ;
10288: LD_VAR 0 4
10292: RET
// export function SOS_Command ( cmd ) ; begin
10293: LD_INT 0
10295: PPUSH
// end ;
10296: LD_VAR 0 2
10300: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10301: LD_INT 0
10303: PPUSH
// end ;
10304: LD_VAR 0 6
10308: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10309: LD_INT 0
10311: PPUSH
10312: PPUSH
// if not vehicle or not factory then
10313: LD_VAR 0 1
10317: NOT
10318: PUSH
10319: LD_VAR 0 2
10323: NOT
10324: OR
10325: IFFALSE 10329
// exit ;
10327: GO 10560
// if factoryWaypoints >= factory then
10329: LD_EXP 36
10333: PUSH
10334: LD_VAR 0 2
10338: GREATEREQUAL
10339: IFFALSE 10560
// if factoryWaypoints [ factory ] then
10341: LD_EXP 36
10345: PUSH
10346: LD_VAR 0 2
10350: ARRAY
10351: IFFALSE 10560
// begin if GetControl ( vehicle ) = control_manual then
10353: LD_VAR 0 1
10357: PPUSH
10358: CALL_OW 263
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10447
// begin driver := IsDrivenBy ( vehicle ) ;
10368: LD_ADDR_VAR 0 4
10372: PUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: CALL_OW 311
10382: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10383: LD_VAR 0 4
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_VAR 0 2
10397: ARRAY
10398: PUSH
10399: LD_INT 3
10401: ARRAY
10402: PPUSH
10403: LD_EXP 36
10407: PUSH
10408: LD_VAR 0 2
10412: ARRAY
10413: PUSH
10414: LD_INT 4
10416: ARRAY
10417: PPUSH
10418: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10422: LD_VAR 0 4
10426: PPUSH
10427: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10431: LD_VAR 0 4
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 180
// end else
10445: GO 10560
// if GetControl ( vehicle ) = control_remote then
10447: LD_VAR 0 1
10451: PPUSH
10452: CALL_OW 263
10456: PUSH
10457: LD_INT 2
10459: EQUAL
10460: IFFALSE 10521
// begin wait ( 0 0$2 ) ;
10462: LD_INT 70
10464: PPUSH
10465: CALL_OW 67
// if Connect ( vehicle ) then
10469: LD_VAR 0 1
10473: PPUSH
10474: CALL 37294 0 1
10478: IFFALSE 10519
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_EXP 36
10489: PUSH
10490: LD_VAR 0 2
10494: ARRAY
10495: PUSH
10496: LD_INT 3
10498: ARRAY
10499: PPUSH
10500: LD_EXP 36
10504: PUSH
10505: LD_VAR 0 2
10509: ARRAY
10510: PUSH
10511: LD_INT 4
10513: ARRAY
10514: PPUSH
10515: CALL_OW 171
// end else
10519: GO 10560
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10521: LD_VAR 0 1
10525: PPUSH
10526: LD_EXP 36
10530: PUSH
10531: LD_VAR 0 2
10535: ARRAY
10536: PUSH
10537: LD_INT 3
10539: ARRAY
10540: PPUSH
10541: LD_EXP 36
10545: PUSH
10546: LD_VAR 0 2
10550: ARRAY
10551: PUSH
10552: LD_INT 4
10554: ARRAY
10555: PPUSH
10556: CALL_OW 171
// end ; end ;
10560: LD_VAR 0 3
10564: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10565: LD_INT 0
10567: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10568: LD_VAR 0 1
10572: PUSH
10573: LD_INT 250
10575: EQUAL
10576: PUSH
10577: LD_VAR 0 2
10581: PPUSH
10582: CALL_OW 264
10586: PUSH
10587: LD_EXP 112
10591: EQUAL
10592: AND
10593: IFFALSE 10614
// MinerPlaceMine ( unit , x , y ) ;
10595: LD_VAR 0 2
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: LD_VAR 0 5
10609: PPUSH
10610: CALL 13342 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10614: LD_VAR 0 1
10618: PUSH
10619: LD_INT 251
10621: EQUAL
10622: PUSH
10623: LD_VAR 0 2
10627: PPUSH
10628: CALL_OW 264
10632: PUSH
10633: LD_EXP 112
10637: EQUAL
10638: AND
10639: IFFALSE 10660
// MinerDetonateMine ( unit , x , y ) ;
10641: LD_VAR 0 2
10645: PPUSH
10646: LD_VAR 0 4
10650: PPUSH
10651: LD_VAR 0 5
10655: PPUSH
10656: CALL 13619 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10660: LD_VAR 0 1
10664: PUSH
10665: LD_INT 252
10667: EQUAL
10668: PUSH
10669: LD_VAR 0 2
10673: PPUSH
10674: CALL_OW 264
10678: PUSH
10679: LD_EXP 112
10683: EQUAL
10684: AND
10685: IFFALSE 10706
// MinerCreateMinefield ( unit , x , y ) ;
10687: LD_VAR 0 2
10691: PPUSH
10692: LD_VAR 0 4
10696: PPUSH
10697: LD_VAR 0 5
10701: PPUSH
10702: CALL 14036 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_INT 253
10713: EQUAL
10714: PUSH
10715: LD_VAR 0 2
10719: PPUSH
10720: CALL_OW 257
10724: PUSH
10725: LD_INT 5
10727: EQUAL
10728: AND
10729: IFFALSE 10750
// ComBinocular ( unit , x , y ) ;
10731: LD_VAR 0 2
10735: PPUSH
10736: LD_VAR 0 4
10740: PPUSH
10741: LD_VAR 0 5
10745: PPUSH
10746: CALL 14407 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 254
10757: EQUAL
10758: PUSH
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 264
10768: PUSH
10769: LD_EXP 107
10773: EQUAL
10774: AND
10775: PUSH
10776: LD_VAR 0 3
10780: PPUSH
10781: CALL_OW 263
10785: PUSH
10786: LD_INT 3
10788: EQUAL
10789: AND
10790: IFFALSE 10806
// HackDestroyVehicle ( unit , selectedUnit ) ;
10792: LD_VAR 0 2
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: CALL 12702 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10806: LD_VAR 0 1
10810: PUSH
10811: LD_INT 255
10813: EQUAL
10814: PUSH
10815: LD_VAR 0 2
10819: PPUSH
10820: CALL_OW 264
10824: PUSH
10825: LD_INT 14
10827: PUSH
10828: LD_INT 53
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: IN
10835: AND
10836: PUSH
10837: LD_VAR 0 4
10841: PPUSH
10842: LD_VAR 0 5
10846: PPUSH
10847: CALL_OW 488
10851: AND
10852: IFFALSE 10876
// CutTreeXYR ( unit , x , y , 12 ) ;
10854: LD_VAR 0 2
10858: PPUSH
10859: LD_VAR 0 4
10863: PPUSH
10864: LD_VAR 0 5
10868: PPUSH
10869: LD_INT 12
10871: PPUSH
10872: CALL 11268 0 4
// if cmd = 256 then
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 256
10883: EQUAL
10884: IFFALSE 10905
// SetFactoryWaypoint ( unit , x , y ) ;
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: LD_VAR 0 5
10900: PPUSH
10901: CALL 10910 0 3
// end ;
10905: LD_VAR 0 6
10909: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
10910: LD_INT 0
10912: PPUSH
10913: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
10914: LD_VAR 0 1
10918: NOT
10919: PUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: CALL_OW 488
10934: NOT
10935: OR
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: CALL_OW 266
10946: PUSH
10947: LD_INT 3
10949: NONEQUAL
10950: PUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 247
10960: PUSH
10961: LD_INT 1
10963: EQUAL
10964: NOT
10965: AND
10966: OR
10967: IFFALSE 10971
// exit ;
10969: GO 11120
// if GetType ( factory ) = unit_human then
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 247
10980: PUSH
10981: LD_INT 1
10983: EQUAL
10984: IFFALSE 11001
// factory := IsInUnit ( factory ) ;
10986: LD_ADDR_VAR 0 1
10990: PUSH
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL_OW 310
11000: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 266
11010: PUSH
11011: LD_INT 3
11013: NONEQUAL
11014: IFFALSE 11018
// exit ;
11016: GO 11120
// if HexInfo ( x , y ) = factory then
11018: LD_VAR 0 2
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: CALL_OW 428
11032: PUSH
11033: LD_VAR 0 1
11037: EQUAL
11038: IFFALSE 11065
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11040: LD_ADDR_EXP 36
11044: PUSH
11045: LD_EXP 36
11049: PPUSH
11050: LD_VAR 0 1
11054: PPUSH
11055: LD_INT 0
11057: PPUSH
11058: CALL_OW 1
11062: ST_TO_ADDR
11063: GO 11116
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
11065: LD_ADDR_EXP 36
11069: PUSH
11070: LD_EXP 36
11074: PPUSH
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_VAR 0 1
11084: PPUSH
11085: CALL_OW 255
11089: PUSH
11090: LD_VAR 0 1
11094: PUSH
11095: LD_VAR 0 2
11099: PUSH
11100: LD_VAR 0 3
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: PPUSH
11111: CALL_OW 1
11115: ST_TO_ADDR
// UpdateFactoryWaypoints ;
11116: CALL 11125 0 0
// end ;
11120: LD_VAR 0 4
11124: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
11125: LD_INT 0
11127: PPUSH
11128: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
11129: LD_STRING resetFactoryWaypoint();
11131: PPUSH
11132: CALL_OW 559
// if factoryWaypoints then
11136: LD_EXP 36
11140: IFFALSE 11263
// begin for i := 1 to factoryWaypoints do
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_EXP 36
11156: PUSH
11157: FOR_TO
11158: IFFALSE 11261
// if factoryWaypoints [ i ] then
11160: LD_EXP 36
11164: PUSH
11165: LD_VAR 0 2
11169: ARRAY
11170: IFFALSE 11259
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
11172: LD_STRING setFactoryWaypointXY(
11174: PUSH
11175: LD_EXP 36
11179: PUSH
11180: LD_VAR 0 2
11184: ARRAY
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: STR
11190: PUSH
11191: LD_STRING ,
11193: STR
11194: PUSH
11195: LD_EXP 36
11199: PUSH
11200: LD_VAR 0 2
11204: ARRAY
11205: PUSH
11206: LD_INT 2
11208: ARRAY
11209: STR
11210: PUSH
11211: LD_STRING ,
11213: STR
11214: PUSH
11215: LD_EXP 36
11219: PUSH
11220: LD_VAR 0 2
11224: ARRAY
11225: PUSH
11226: LD_INT 3
11228: ARRAY
11229: STR
11230: PUSH
11231: LD_STRING ,
11233: STR
11234: PUSH
11235: LD_EXP 36
11239: PUSH
11240: LD_VAR 0 2
11244: ARRAY
11245: PUSH
11246: LD_INT 4
11248: ARRAY
11249: STR
11250: PUSH
11251: LD_STRING )
11253: STR
11254: PPUSH
11255: CALL_OW 559
11259: GO 11157
11261: POP
11262: POP
// end ; end ;
11263: LD_VAR 0 1
11267: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11268: LD_INT 0
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11279: LD_VAR 0 1
11283: NOT
11284: PUSH
11285: LD_VAR 0 2
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 488
11299: NOT
11300: OR
11301: PUSH
11302: LD_VAR 0 4
11306: NOT
11307: OR
11308: IFFALSE 11312
// exit ;
11310: GO 11652
// list := [ ] ;
11312: LD_ADDR_VAR 0 13
11316: PUSH
11317: EMPTY
11318: ST_TO_ADDR
// if x - r < 0 then
11319: LD_VAR 0 2
11323: PUSH
11324: LD_VAR 0 4
11328: MINUS
11329: PUSH
11330: LD_INT 0
11332: LESS
11333: IFFALSE 11345
// min_x := 0 else
11335: LD_ADDR_VAR 0 7
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
11343: GO 11361
// min_x := x - r ;
11345: LD_ADDR_VAR 0 7
11349: PUSH
11350: LD_VAR 0 2
11354: PUSH
11355: LD_VAR 0 4
11359: MINUS
11360: ST_TO_ADDR
// if y - r < 0 then
11361: LD_VAR 0 3
11365: PUSH
11366: LD_VAR 0 4
11370: MINUS
11371: PUSH
11372: LD_INT 0
11374: LESS
11375: IFFALSE 11387
// min_y := 0 else
11377: LD_ADDR_VAR 0 8
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
11385: GO 11403
// min_y := y - r ;
11387: LD_ADDR_VAR 0 8
11391: PUSH
11392: LD_VAR 0 3
11396: PUSH
11397: LD_VAR 0 4
11401: MINUS
11402: ST_TO_ADDR
// max_x := x + r ;
11403: LD_ADDR_VAR 0 9
11407: PUSH
11408: LD_VAR 0 2
11412: PUSH
11413: LD_VAR 0 4
11417: PLUS
11418: ST_TO_ADDR
// max_y := y + r ;
11419: LD_ADDR_VAR 0 10
11423: PUSH
11424: LD_VAR 0 3
11428: PUSH
11429: LD_VAR 0 4
11433: PLUS
11434: ST_TO_ADDR
// for _x = min_x to max_x do
11435: LD_ADDR_VAR 0 11
11439: PUSH
11440: DOUBLE
11441: LD_VAR 0 7
11445: DEC
11446: ST_TO_ADDR
11447: LD_VAR 0 9
11451: PUSH
11452: FOR_TO
11453: IFFALSE 11570
// for _y = min_y to max_y do
11455: LD_ADDR_VAR 0 12
11459: PUSH
11460: DOUBLE
11461: LD_VAR 0 8
11465: DEC
11466: ST_TO_ADDR
11467: LD_VAR 0 10
11471: PUSH
11472: FOR_TO
11473: IFFALSE 11566
// begin if not ValidHex ( _x , _y ) then
11475: LD_VAR 0 11
11479: PPUSH
11480: LD_VAR 0 12
11484: PPUSH
11485: CALL_OW 488
11489: NOT
11490: IFFALSE 11494
// continue ;
11492: GO 11472
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11494: LD_VAR 0 11
11498: PPUSH
11499: LD_VAR 0 12
11503: PPUSH
11504: CALL_OW 351
11508: PUSH
11509: LD_VAR 0 11
11513: PPUSH
11514: LD_VAR 0 12
11518: PPUSH
11519: CALL_OW 554
11523: AND
11524: IFFALSE 11564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11526: LD_ADDR_VAR 0 13
11530: PUSH
11531: LD_VAR 0 13
11535: PPUSH
11536: LD_VAR 0 13
11540: PUSH
11541: LD_INT 1
11543: PLUS
11544: PPUSH
11545: LD_VAR 0 11
11549: PUSH
11550: LD_VAR 0 12
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PPUSH
11559: CALL_OW 2
11563: ST_TO_ADDR
// end ;
11564: GO 11472
11566: POP
11567: POP
11568: GO 11452
11570: POP
11571: POP
// if not list then
11572: LD_VAR 0 13
11576: NOT
11577: IFFALSE 11581
// exit ;
11579: GO 11652
// for i in list do
11581: LD_ADDR_VAR 0 6
11585: PUSH
11586: LD_VAR 0 13
11590: PUSH
11591: FOR_IN
11592: IFFALSE 11650
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_STRING M
11601: PUSH
11602: LD_VAR 0 6
11606: PUSH
11607: LD_INT 1
11609: ARRAY
11610: PUSH
11611: LD_VAR 0 6
11615: PUSH
11616: LD_INT 2
11618: ARRAY
11619: PUSH
11620: LD_INT 0
11622: PUSH
11623: LD_INT 0
11625: PUSH
11626: LD_INT 0
11628: PUSH
11629: LD_INT 0
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: PPUSH
11644: CALL_OW 447
11648: GO 11591
11650: POP
11651: POP
// end ;
11652: LD_VAR 0 5
11656: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11657: LD_EXP 37
11661: NOT
11662: IFFALSE 11712
11664: GO 11666
11666: DISABLE
// begin initHack := true ;
11667: LD_ADDR_EXP 37
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// hackTanks := [ ] ;
11675: LD_ADDR_EXP 38
11679: PUSH
11680: EMPTY
11681: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11682: LD_ADDR_EXP 39
11686: PUSH
11687: EMPTY
11688: ST_TO_ADDR
// hackLimit := 3 ;
11689: LD_ADDR_EXP 40
11693: PUSH
11694: LD_INT 3
11696: ST_TO_ADDR
// hackDist := 12 ;
11697: LD_ADDR_EXP 41
11701: PUSH
11702: LD_INT 12
11704: ST_TO_ADDR
// hackCounter := [ ] ;
11705: LD_ADDR_EXP 42
11709: PUSH
11710: EMPTY
11711: ST_TO_ADDR
// end ;
11712: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11713: LD_EXP 37
11717: PUSH
11718: LD_INT 34
11720: PUSH
11721: LD_EXP 107
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: AND
11735: IFFALSE 11990
11737: GO 11739
11739: DISABLE
11740: LD_INT 0
11742: PPUSH
11743: PPUSH
// begin enable ;
11744: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11745: LD_ADDR_VAR 0 1
11749: PUSH
11750: LD_INT 34
11752: PUSH
11753: LD_EXP 107
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 69
11766: PUSH
11767: FOR_IN
11768: IFFALSE 11988
// begin if not i in hackTanks then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 38
11779: IN
11780: NOT
11781: IFFALSE 11864
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11783: LD_ADDR_EXP 38
11787: PUSH
11788: LD_EXP 38
11792: PPUSH
11793: LD_EXP 38
11797: PUSH
11798: LD_INT 1
11800: PLUS
11801: PPUSH
11802: LD_VAR 0 1
11806: PPUSH
11807: CALL_OW 1
11811: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11812: LD_ADDR_EXP 39
11816: PUSH
11817: LD_EXP 39
11821: PPUSH
11822: LD_EXP 39
11826: PUSH
11827: LD_INT 1
11829: PLUS
11830: PPUSH
11831: EMPTY
11832: PPUSH
11833: CALL_OW 1
11837: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11838: LD_ADDR_EXP 42
11842: PUSH
11843: LD_EXP 42
11847: PPUSH
11848: LD_EXP 42
11852: PUSH
11853: LD_INT 1
11855: PLUS
11856: PPUSH
11857: EMPTY
11858: PPUSH
11859: CALL_OW 1
11863: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11864: LD_VAR 0 1
11868: PPUSH
11869: CALL_OW 302
11873: NOT
11874: IFFALSE 11887
// begin HackUnlinkAll ( i ) ;
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL 11993 0 1
// continue ;
11885: GO 11767
// end ; HackCheckCapturedStatus ( i ) ;
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL 12436 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: LD_INT 81
11903: PUSH
11904: LD_VAR 0 1
11908: PPUSH
11909: CALL_OW 255
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 33
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 91
11930: PUSH
11931: LD_VAR 0 1
11935: PUSH
11936: LD_EXP 41
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 50
11948: PUSH
11949: EMPTY
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: ST_TO_ADDR
// if not tmp then
11963: LD_VAR 0 2
11967: NOT
11968: IFFALSE 11972
// continue ;
11970: GO 11767
// HackLink ( i , tmp ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_VAR 0 2
11981: PPUSH
11982: CALL 12129 0 2
// end ;
11986: GO 11767
11988: POP
11989: POP
// end ;
11990: PPOPN 2
11992: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11993: LD_INT 0
11995: PPUSH
11996: PPUSH
11997: PPUSH
// if not hack in hackTanks then
11998: LD_VAR 0 1
12002: PUSH
12003: LD_EXP 38
12007: IN
12008: NOT
12009: IFFALSE 12013
// exit ;
12011: GO 12124
// index := GetElementIndex ( hackTanks , hack ) ;
12013: LD_ADDR_VAR 0 4
12017: PUSH
12018: LD_EXP 38
12022: PPUSH
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL 34108 0 2
12032: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12033: LD_EXP 39
12037: PUSH
12038: LD_VAR 0 4
12042: ARRAY
12043: IFFALSE 12124
// begin for i in hackTanksCaptured [ index ] do
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: LD_EXP 39
12054: PUSH
12055: LD_VAR 0 4
12059: ARRAY
12060: PUSH
12061: FOR_IN
12062: IFFALSE 12088
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12064: LD_VAR 0 3
12068: PUSH
12069: LD_INT 1
12071: ARRAY
12072: PPUSH
12073: LD_VAR 0 3
12077: PUSH
12078: LD_INT 2
12080: ARRAY
12081: PPUSH
12082: CALL_OW 235
12086: GO 12061
12088: POP
12089: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12090: LD_ADDR_EXP 39
12094: PUSH
12095: LD_EXP 39
12099: PPUSH
12100: LD_VAR 0 4
12104: PPUSH
12105: EMPTY
12106: PPUSH
12107: CALL_OW 1
12111: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12112: LD_VAR 0 1
12116: PPUSH
12117: LD_INT 0
12119: PPUSH
12120: CALL_OW 505
// end ; end ;
12124: LD_VAR 0 2
12128: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
12133: PPUSH
// if not hack in hackTanks or not vehicles then
12134: LD_VAR 0 1
12138: PUSH
12139: LD_EXP 38
12143: IN
12144: NOT
12145: PUSH
12146: LD_VAR 0 2
12150: NOT
12151: OR
12152: IFFALSE 12156
// exit ;
12154: GO 12431
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12156: LD_ADDR_VAR 0 2
12160: PUSH
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_VAR 0 2
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL 34758 0 4
12181: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_EXP 38
12191: PPUSH
12192: LD_VAR 0 1
12196: PPUSH
12197: CALL 34108 0 2
12201: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12202: LD_EXP 39
12206: PUSH
12207: LD_VAR 0 5
12211: ARRAY
12212: PUSH
12213: LD_EXP 40
12217: LESS
12218: IFFALSE 12407
// begin for i := 1 to vehicles do
12220: LD_ADDR_VAR 0 4
12224: PUSH
12225: DOUBLE
12226: LD_INT 1
12228: DEC
12229: ST_TO_ADDR
12230: LD_VAR 0 2
12234: PUSH
12235: FOR_TO
12236: IFFALSE 12405
// begin if hackTanksCaptured [ index ] = hackLimit then
12238: LD_EXP 39
12242: PUSH
12243: LD_VAR 0 5
12247: ARRAY
12248: PUSH
12249: LD_EXP 40
12253: EQUAL
12254: IFFALSE 12258
// break ;
12256: GO 12405
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12258: LD_ADDR_EXP 42
12262: PUSH
12263: LD_EXP 42
12267: PPUSH
12268: LD_VAR 0 5
12272: PPUSH
12273: LD_EXP 42
12277: PUSH
12278: LD_VAR 0 5
12282: ARRAY
12283: PUSH
12284: LD_INT 1
12286: PLUS
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12293: LD_ADDR_EXP 39
12297: PUSH
12298: LD_EXP 39
12302: PPUSH
12303: LD_VAR 0 5
12307: PUSH
12308: LD_EXP 39
12312: PUSH
12313: LD_VAR 0 5
12317: ARRAY
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: LD_VAR 0 2
12331: PUSH
12332: LD_VAR 0 4
12336: ARRAY
12337: PUSH
12338: LD_VAR 0 2
12342: PUSH
12343: LD_VAR 0 4
12347: ARRAY
12348: PPUSH
12349: CALL_OW 255
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL 34323 0 3
12362: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12363: LD_VAR 0 2
12367: PUSH
12368: LD_VAR 0 4
12372: ARRAY
12373: PPUSH
12374: LD_VAR 0 1
12378: PPUSH
12379: CALL_OW 255
12383: PPUSH
12384: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12388: LD_VAR 0 2
12392: PUSH
12393: LD_VAR 0 4
12397: ARRAY
12398: PPUSH
12399: CALL_OW 141
// end ;
12403: GO 12235
12405: POP
12406: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12407: LD_VAR 0 1
12411: PPUSH
12412: LD_EXP 39
12416: PUSH
12417: LD_VAR 0 5
12421: ARRAY
12422: PUSH
12423: LD_INT 0
12425: PLUS
12426: PPUSH
12427: CALL_OW 505
// end ;
12431: LD_VAR 0 3
12435: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
12440: PPUSH
12441: PPUSH
// if not hack in hackTanks then
12442: LD_VAR 0 1
12446: PUSH
12447: LD_EXP 38
12451: IN
12452: NOT
12453: IFFALSE 12457
// exit ;
12455: GO 12697
// index := GetElementIndex ( hackTanks , hack ) ;
12457: LD_ADDR_VAR 0 4
12461: PUSH
12462: LD_EXP 38
12466: PPUSH
12467: LD_VAR 0 1
12471: PPUSH
12472: CALL 34108 0 2
12476: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: DOUBLE
12483: LD_EXP 39
12487: PUSH
12488: LD_VAR 0 4
12492: ARRAY
12493: INC
12494: ST_TO_ADDR
12495: LD_INT 1
12497: PUSH
12498: FOR_DOWNTO
12499: IFFALSE 12671
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12501: LD_ADDR_VAR 0 5
12505: PUSH
12506: LD_EXP 39
12510: PUSH
12511: LD_VAR 0 4
12515: ARRAY
12516: PUSH
12517: LD_VAR 0 3
12521: ARRAY
12522: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12523: LD_VAR 0 5
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 302
12536: NOT
12537: PUSH
12538: LD_VAR 0 5
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PPUSH
12547: CALL_OW 255
12551: PUSH
12552: LD_VAR 0 1
12556: PPUSH
12557: CALL_OW 255
12561: NONEQUAL
12562: OR
12563: IFFALSE 12669
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12565: LD_VAR 0 5
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PPUSH
12574: CALL_OW 305
12578: PUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 255
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 255
12602: EQUAL
12603: AND
12604: IFFALSE 12628
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12606: LD_VAR 0 5
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: LD_VAR 0 5
12619: PUSH
12620: LD_INT 2
12622: ARRAY
12623: PPUSH
12624: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12628: LD_ADDR_EXP 39
12632: PUSH
12633: LD_EXP 39
12637: PPUSH
12638: LD_VAR 0 4
12642: PPUSH
12643: LD_EXP 39
12647: PUSH
12648: LD_VAR 0 4
12652: ARRAY
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: CALL_OW 3
12663: PPUSH
12664: CALL_OW 1
12668: ST_TO_ADDR
// end ; end ;
12669: GO 12498
12671: POP
12672: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_EXP 39
12682: PUSH
12683: LD_VAR 0 4
12687: ARRAY
12688: PUSH
12689: LD_INT 0
12691: PLUS
12692: PPUSH
12693: CALL_OW 505
// end ;
12697: LD_VAR 0 2
12701: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12702: LD_INT 0
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
// if not hack in hackTanks then
12708: LD_VAR 0 1
12712: PUSH
12713: LD_EXP 38
12717: IN
12718: NOT
12719: IFFALSE 12723
// exit ;
12721: GO 12808
// index := GetElementIndex ( hackTanks , hack ) ;
12723: LD_ADDR_VAR 0 5
12727: PUSH
12728: LD_EXP 38
12732: PPUSH
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL 34108 0 2
12742: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12743: LD_ADDR_VAR 0 4
12747: PUSH
12748: DOUBLE
12749: LD_INT 1
12751: DEC
12752: ST_TO_ADDR
12753: LD_EXP 39
12757: PUSH
12758: LD_VAR 0 5
12762: ARRAY
12763: PUSH
12764: FOR_TO
12765: IFFALSE 12806
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12767: LD_EXP 39
12771: PUSH
12772: LD_VAR 0 5
12776: ARRAY
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PUSH
12788: LD_VAR 0 2
12792: EQUAL
12793: IFFALSE 12804
// KillUnit ( vehicle ) ;
12795: LD_VAR 0 2
12799: PPUSH
12800: CALL_OW 66
12804: GO 12764
12806: POP
12807: POP
// end ;
12808: LD_VAR 0 3
12812: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12813: LD_EXP 43
12817: NOT
12818: IFFALSE 12853
12820: GO 12822
12822: DISABLE
// begin initMiner := true ;
12823: LD_ADDR_EXP 43
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// minersList := [ ] ;
12831: LD_ADDR_EXP 44
12835: PUSH
12836: EMPTY
12837: ST_TO_ADDR
// minerMinesList := [ ] ;
12838: LD_ADDR_EXP 45
12842: PUSH
12843: EMPTY
12844: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12845: LD_ADDR_EXP 46
12849: PUSH
12850: LD_INT 5
12852: ST_TO_ADDR
// end ;
12853: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12854: LD_EXP 43
12858: PUSH
12859: LD_INT 34
12861: PUSH
12862: LD_EXP 112
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 69
12875: AND
12876: IFFALSE 13339
12878: GO 12880
12880: DISABLE
12881: LD_INT 0
12883: PPUSH
12884: PPUSH
12885: PPUSH
12886: PPUSH
// begin enable ;
12887: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12888: LD_ADDR_VAR 0 1
12892: PUSH
12893: LD_INT 34
12895: PUSH
12896: LD_EXP 112
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: PUSH
12910: FOR_IN
12911: IFFALSE 12983
// begin if not i in minersList then
12913: LD_VAR 0 1
12917: PUSH
12918: LD_EXP 44
12922: IN
12923: NOT
12924: IFFALSE 12981
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12926: LD_ADDR_EXP 44
12930: PUSH
12931: LD_EXP 44
12935: PPUSH
12936: LD_EXP 44
12940: PUSH
12941: LD_INT 1
12943: PLUS
12944: PPUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 1
12954: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12955: LD_ADDR_EXP 45
12959: PUSH
12960: LD_EXP 45
12964: PPUSH
12965: LD_EXP 45
12969: PUSH
12970: LD_INT 1
12972: PLUS
12973: PPUSH
12974: EMPTY
12975: PPUSH
12976: CALL_OW 1
12980: ST_TO_ADDR
// end end ;
12981: GO 12910
12983: POP
12984: POP
// for i := minerMinesList downto 1 do
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: DOUBLE
12991: LD_EXP 45
12995: INC
12996: ST_TO_ADDR
12997: LD_INT 1
12999: PUSH
13000: FOR_DOWNTO
13001: IFFALSE 13337
// begin if IsLive ( minersList [ i ] ) then
13003: LD_EXP 44
13007: PUSH
13008: LD_VAR 0 1
13012: ARRAY
13013: PPUSH
13014: CALL_OW 300
13018: IFFALSE 13046
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13020: LD_EXP 44
13024: PUSH
13025: LD_VAR 0 1
13029: ARRAY
13030: PPUSH
13031: LD_EXP 45
13035: PUSH
13036: LD_VAR 0 1
13040: ARRAY
13041: PPUSH
13042: CALL_OW 505
// if not minerMinesList [ i ] then
13046: LD_EXP 45
13050: PUSH
13051: LD_VAR 0 1
13055: ARRAY
13056: NOT
13057: IFFALSE 13061
// continue ;
13059: GO 13000
// for j := minerMinesList [ i ] downto 1 do
13061: LD_ADDR_VAR 0 2
13065: PUSH
13066: DOUBLE
13067: LD_EXP 45
13071: PUSH
13072: LD_VAR 0 1
13076: ARRAY
13077: INC
13078: ST_TO_ADDR
13079: LD_INT 1
13081: PUSH
13082: FOR_DOWNTO
13083: IFFALSE 13333
// begin side := GetSide ( minersList [ i ] ) ;
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_EXP 44
13094: PUSH
13095: LD_VAR 0 1
13099: ARRAY
13100: PPUSH
13101: CALL_OW 255
13105: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13106: LD_ADDR_VAR 0 4
13110: PUSH
13111: LD_EXP 45
13115: PUSH
13116: LD_VAR 0 1
13120: ARRAY
13121: PUSH
13122: LD_VAR 0 2
13126: ARRAY
13127: PUSH
13128: LD_INT 1
13130: ARRAY
13131: PPUSH
13132: LD_EXP 45
13136: PUSH
13137: LD_VAR 0 1
13141: ARRAY
13142: PUSH
13143: LD_VAR 0 2
13147: ARRAY
13148: PUSH
13149: LD_INT 2
13151: ARRAY
13152: PPUSH
13153: CALL_OW 428
13157: ST_TO_ADDR
// if not tmp then
13158: LD_VAR 0 4
13162: NOT
13163: IFFALSE 13167
// continue ;
13165: GO 13082
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13167: LD_VAR 0 4
13171: PUSH
13172: LD_INT 81
13174: PUSH
13175: LD_VAR 0 3
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: IN
13189: PUSH
13190: LD_EXP 45
13194: PUSH
13195: LD_VAR 0 1
13199: ARRAY
13200: PUSH
13201: LD_VAR 0 2
13205: ARRAY
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_EXP 45
13215: PUSH
13216: LD_VAR 0 1
13220: ARRAY
13221: PUSH
13222: LD_VAR 0 2
13226: ARRAY
13227: PUSH
13228: LD_INT 2
13230: ARRAY
13231: PPUSH
13232: CALL_OW 458
13236: AND
13237: IFFALSE 13331
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13239: LD_EXP 45
13243: PUSH
13244: LD_VAR 0 1
13248: ARRAY
13249: PUSH
13250: LD_VAR 0 2
13254: ARRAY
13255: PUSH
13256: LD_INT 1
13258: ARRAY
13259: PPUSH
13260: LD_EXP 45
13264: PUSH
13265: LD_VAR 0 1
13269: ARRAY
13270: PUSH
13271: LD_VAR 0 2
13275: ARRAY
13276: PUSH
13277: LD_INT 2
13279: ARRAY
13280: PPUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13290: LD_ADDR_EXP 45
13294: PUSH
13295: LD_EXP 45
13299: PPUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_EXP 45
13309: PUSH
13310: LD_VAR 0 1
13314: ARRAY
13315: PPUSH
13316: LD_VAR 0 2
13320: PPUSH
13321: CALL_OW 3
13325: PPUSH
13326: CALL_OW 1
13330: ST_TO_ADDR
// end ; end ;
13331: GO 13082
13333: POP
13334: POP
// end ;
13335: GO 13000
13337: POP
13338: POP
// end ;
13339: PPOPN 4
13341: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
// result := false ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_INT 0
13353: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 264
13363: PUSH
13364: LD_EXP 112
13368: EQUAL
13369: NOT
13370: IFFALSE 13374
// exit ;
13372: GO 13614
// index := GetElementIndex ( minersList , unit ) ;
13374: LD_ADDR_VAR 0 5
13378: PUSH
13379: LD_EXP 44
13383: PPUSH
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL 34108 0 2
13393: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13394: LD_EXP 45
13398: PUSH
13399: LD_VAR 0 5
13403: ARRAY
13404: PUSH
13405: LD_EXP 46
13409: GREATEREQUAL
13410: IFFALSE 13414
// exit ;
13412: GO 13614
// ComMoveXY ( unit , x , y ) ;
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 2
13423: PPUSH
13424: LD_VAR 0 3
13428: PPUSH
13429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13433: LD_INT 35
13435: PPUSH
13436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13440: LD_VAR 0 1
13444: PPUSH
13445: LD_VAR 0 2
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: CALL 64827 0 3
13459: NOT
13460: PUSH
13461: LD_VAR 0 1
13465: PPUSH
13466: CALL_OW 314
13470: AND
13471: IFFALSE 13475
// exit ;
13473: GO 13614
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13475: LD_VAR 0 2
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: CALL_OW 428
13489: PUSH
13490: LD_VAR 0 1
13494: EQUAL
13495: PUSH
13496: LD_VAR 0 1
13500: PPUSH
13501: CALL_OW 314
13505: NOT
13506: AND
13507: IFFALSE 13433
// PlaySoundXY ( x , y , PlantMine ) ;
13509: LD_VAR 0 2
13513: PPUSH
13514: LD_VAR 0 3
13518: PPUSH
13519: LD_STRING PlantMine
13521: PPUSH
13522: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13526: LD_VAR 0 2
13530: PPUSH
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_VAR 0 1
13540: PPUSH
13541: CALL_OW 255
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13553: LD_ADDR_EXP 45
13557: PUSH
13558: LD_EXP 45
13562: PPUSH
13563: LD_VAR 0 5
13567: PUSH
13568: LD_EXP 45
13572: PUSH
13573: LD_VAR 0 5
13577: ARRAY
13578: PUSH
13579: LD_INT 1
13581: PLUS
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: LD_VAR 0 2
13591: PUSH
13592: LD_VAR 0 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL 34323 0 3
13605: ST_TO_ADDR
// result := true ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// end ;
13614: LD_VAR 0 4
13618: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13619: LD_INT 0
13621: PPUSH
13622: PPUSH
13623: PPUSH
// if not unit in minersList then
13624: LD_VAR 0 1
13628: PUSH
13629: LD_EXP 44
13633: IN
13634: NOT
13635: IFFALSE 13639
// exit ;
13637: GO 14031
// index := GetElementIndex ( minersList , unit ) ;
13639: LD_ADDR_VAR 0 6
13643: PUSH
13644: LD_EXP 44
13648: PPUSH
13649: LD_VAR 0 1
13653: PPUSH
13654: CALL 34108 0 2
13658: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13659: LD_ADDR_VAR 0 5
13663: PUSH
13664: DOUBLE
13665: LD_EXP 45
13669: PUSH
13670: LD_VAR 0 6
13674: ARRAY
13675: INC
13676: ST_TO_ADDR
13677: LD_INT 1
13679: PUSH
13680: FOR_DOWNTO
13681: IFFALSE 13842
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13683: LD_EXP 45
13687: PUSH
13688: LD_VAR 0 6
13692: ARRAY
13693: PUSH
13694: LD_VAR 0 5
13698: ARRAY
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PUSH
13704: LD_VAR 0 2
13708: EQUAL
13709: PUSH
13710: LD_EXP 45
13714: PUSH
13715: LD_VAR 0 6
13719: ARRAY
13720: PUSH
13721: LD_VAR 0 5
13725: ARRAY
13726: PUSH
13727: LD_INT 2
13729: ARRAY
13730: PUSH
13731: LD_VAR 0 3
13735: EQUAL
13736: AND
13737: IFFALSE 13840
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13739: LD_EXP 45
13743: PUSH
13744: LD_VAR 0 6
13748: ARRAY
13749: PUSH
13750: LD_VAR 0 5
13754: ARRAY
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: PPUSH
13760: LD_EXP 45
13764: PUSH
13765: LD_VAR 0 6
13769: ARRAY
13770: PUSH
13771: LD_VAR 0 5
13775: ARRAY
13776: PUSH
13777: LD_INT 2
13779: ARRAY
13780: PPUSH
13781: LD_VAR 0 1
13785: PPUSH
13786: CALL_OW 255
13790: PPUSH
13791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13795: LD_ADDR_EXP 45
13799: PUSH
13800: LD_EXP 45
13804: PPUSH
13805: LD_VAR 0 6
13809: PPUSH
13810: LD_EXP 45
13814: PUSH
13815: LD_VAR 0 6
13819: ARRAY
13820: PPUSH
13821: LD_VAR 0 5
13825: PPUSH
13826: CALL_OW 3
13830: PPUSH
13831: CALL_OW 1
13835: ST_TO_ADDR
// exit ;
13836: POP
13837: POP
13838: GO 14031
// end ; end ;
13840: GO 13680
13842: POP
13843: POP
// for i := minerMinesList [ index ] downto 1 do
13844: LD_ADDR_VAR 0 5
13848: PUSH
13849: DOUBLE
13850: LD_EXP 45
13854: PUSH
13855: LD_VAR 0 6
13859: ARRAY
13860: INC
13861: ST_TO_ADDR
13862: LD_INT 1
13864: PUSH
13865: FOR_DOWNTO
13866: IFFALSE 14029
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13868: LD_EXP 45
13872: PUSH
13873: LD_VAR 0 6
13877: ARRAY
13878: PUSH
13879: LD_VAR 0 5
13883: ARRAY
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: PPUSH
13889: LD_EXP 45
13893: PUSH
13894: LD_VAR 0 6
13898: ARRAY
13899: PUSH
13900: LD_VAR 0 5
13904: ARRAY
13905: PUSH
13906: LD_INT 2
13908: ARRAY
13909: PPUSH
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: CALL_OW 298
13924: PUSH
13925: LD_INT 6
13927: LESS
13928: IFFALSE 14027
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13930: LD_EXP 45
13934: PUSH
13935: LD_VAR 0 6
13939: ARRAY
13940: PUSH
13941: LD_VAR 0 5
13945: ARRAY
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PPUSH
13951: LD_EXP 45
13955: PUSH
13956: LD_VAR 0 6
13960: ARRAY
13961: PUSH
13962: LD_VAR 0 5
13966: ARRAY
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 255
13981: PPUSH
13982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13986: LD_ADDR_EXP 45
13990: PUSH
13991: LD_EXP 45
13995: PPUSH
13996: LD_VAR 0 6
14000: PPUSH
14001: LD_EXP 45
14005: PUSH
14006: LD_VAR 0 6
14010: ARRAY
14011: PPUSH
14012: LD_VAR 0 5
14016: PPUSH
14017: CALL_OW 3
14021: PPUSH
14022: CALL_OW 1
14026: ST_TO_ADDR
// end ; end ;
14027: GO 13865
14029: POP
14030: POP
// end ;
14031: LD_VAR 0 4
14035: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14036: LD_INT 0
14038: PPUSH
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14047: LD_VAR 0 1
14051: PPUSH
14052: CALL_OW 264
14056: PUSH
14057: LD_EXP 112
14061: EQUAL
14062: NOT
14063: PUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_EXP 44
14073: IN
14074: NOT
14075: OR
14076: IFFALSE 14080
// exit ;
14078: GO 14402
// index := GetElementIndex ( minersList , unit ) ;
14080: LD_ADDR_VAR 0 6
14084: PUSH
14085: LD_EXP 44
14089: PPUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL 34108 0 2
14099: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14100: LD_ADDR_VAR 0 8
14104: PUSH
14105: LD_EXP 46
14109: PUSH
14110: LD_EXP 45
14114: PUSH
14115: LD_VAR 0 6
14119: ARRAY
14120: MINUS
14121: ST_TO_ADDR
// if not minesFreeAmount then
14122: LD_VAR 0 8
14126: NOT
14127: IFFALSE 14131
// exit ;
14129: GO 14402
// tmp := [ ] ;
14131: LD_ADDR_VAR 0 7
14135: PUSH
14136: EMPTY
14137: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14138: LD_ADDR_VAR 0 5
14142: PUSH
14143: DOUBLE
14144: LD_INT 1
14146: DEC
14147: ST_TO_ADDR
14148: LD_VAR 0 8
14152: PUSH
14153: FOR_TO
14154: IFFALSE 14349
// begin _d := rand ( 0 , 5 ) ;
14156: LD_ADDR_VAR 0 11
14160: PUSH
14161: LD_INT 0
14163: PPUSH
14164: LD_INT 5
14166: PPUSH
14167: CALL_OW 12
14171: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14172: LD_ADDR_VAR 0 12
14176: PUSH
14177: LD_INT 2
14179: PPUSH
14180: LD_INT 6
14182: PPUSH
14183: CALL_OW 12
14187: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14188: LD_ADDR_VAR 0 9
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_VAR 0 11
14202: PPUSH
14203: LD_VAR 0 12
14207: PPUSH
14208: CALL_OW 272
14212: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14213: LD_ADDR_VAR 0 10
14217: PUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_VAR 0 11
14227: PPUSH
14228: LD_VAR 0 12
14232: PPUSH
14233: CALL_OW 273
14237: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14238: LD_VAR 0 9
14242: PPUSH
14243: LD_VAR 0 10
14247: PPUSH
14248: CALL_OW 488
14252: PUSH
14253: LD_VAR 0 9
14257: PUSH
14258: LD_VAR 0 10
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_VAR 0 7
14271: IN
14272: NOT
14273: AND
14274: PUSH
14275: LD_VAR 0 9
14279: PPUSH
14280: LD_VAR 0 10
14284: PPUSH
14285: CALL_OW 458
14289: NOT
14290: AND
14291: IFFALSE 14333
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14293: LD_ADDR_VAR 0 7
14297: PUSH
14298: LD_VAR 0 7
14302: PPUSH
14303: LD_VAR 0 7
14307: PUSH
14308: LD_INT 1
14310: PLUS
14311: PPUSH
14312: LD_VAR 0 9
14316: PUSH
14317: LD_VAR 0 10
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 1
14330: ST_TO_ADDR
14331: GO 14347
// i := i - 1 ;
14333: LD_ADDR_VAR 0 5
14337: PUSH
14338: LD_VAR 0 5
14342: PUSH
14343: LD_INT 1
14345: MINUS
14346: ST_TO_ADDR
// end ;
14347: GO 14153
14349: POP
14350: POP
// for i in tmp do
14351: LD_ADDR_VAR 0 5
14355: PUSH
14356: LD_VAR 0 7
14360: PUSH
14361: FOR_IN
14362: IFFALSE 14400
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14364: LD_VAR 0 1
14368: PPUSH
14369: LD_VAR 0 5
14373: PUSH
14374: LD_INT 1
14376: ARRAY
14377: PPUSH
14378: LD_VAR 0 5
14382: PUSH
14383: LD_INT 2
14385: ARRAY
14386: PPUSH
14387: CALL 13342 0 3
14391: NOT
14392: IFFALSE 14398
// exit ;
14394: POP
14395: POP
14396: GO 14402
14398: GO 14361
14400: POP
14401: POP
// end ;
14402: LD_VAR 0 4
14406: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
// if not GetClass ( unit ) = class_sniper then
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 257
14425: PUSH
14426: LD_INT 5
14428: EQUAL
14429: NOT
14430: IFFALSE 14434
// exit ;
14432: GO 14822
// dist := 8 ;
14434: LD_ADDR_VAR 0 5
14438: PUSH
14439: LD_INT 8
14441: ST_TO_ADDR
// viewRange := 12 ;
14442: LD_ADDR_VAR 0 7
14446: PUSH
14447: LD_INT 12
14449: ST_TO_ADDR
// side := GetSide ( unit ) ;
14450: LD_ADDR_VAR 0 6
14454: PUSH
14455: LD_VAR 0 1
14459: PPUSH
14460: CALL_OW 255
14464: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14465: LD_INT 61
14467: PPUSH
14468: LD_VAR 0 6
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14491
// viewRange := 16 ;
14483: LD_ADDR_VAR 0 7
14487: PUSH
14488: LD_INT 16
14490: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14491: LD_VAR 0 1
14495: PPUSH
14496: LD_VAR 0 2
14500: PPUSH
14501: LD_VAR 0 3
14505: PPUSH
14506: CALL_OW 297
14510: PUSH
14511: LD_VAR 0 5
14515: GREATER
14516: IFFALSE 14595
// begin ComMoveXY ( unit , x , y ) ;
14518: LD_VAR 0 1
14522: PPUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14537: LD_INT 35
14539: PPUSH
14540: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14544: LD_VAR 0 1
14548: PPUSH
14549: LD_VAR 0 2
14553: PPUSH
14554: LD_VAR 0 3
14558: PPUSH
14559: CALL 64827 0 3
14563: NOT
14564: IFFALSE 14568
// exit ;
14566: GO 14822
// until GetDistUnitXY ( unit , x , y ) < dist ;
14568: LD_VAR 0 1
14572: PPUSH
14573: LD_VAR 0 2
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: CALL_OW 297
14587: PUSH
14588: LD_VAR 0 5
14592: LESS
14593: IFFALSE 14537
// end ; ComTurnXY ( unit , x , y ) ;
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_VAR 0 2
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: CALL_OW 118
// wait ( 5 ) ;
14614: LD_INT 5
14616: PPUSH
14617: CALL_OW 67
// _d := GetDir ( unit ) ;
14621: LD_ADDR_VAR 0 10
14625: PUSH
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 254
14635: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14636: LD_ADDR_VAR 0 8
14640: PUSH
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 250
14650: PPUSH
14651: LD_VAR 0 10
14655: PPUSH
14656: LD_VAR 0 5
14660: PPUSH
14661: CALL_OW 272
14665: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14666: LD_ADDR_VAR 0 9
14670: PUSH
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 251
14680: PPUSH
14681: LD_VAR 0 10
14685: PPUSH
14686: LD_VAR 0 5
14690: PPUSH
14691: CALL_OW 273
14695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14696: LD_VAR 0 8
14700: PPUSH
14701: LD_VAR 0 9
14705: PPUSH
14706: CALL_OW 488
14710: NOT
14711: IFFALSE 14715
// exit ;
14713: GO 14822
// ComAnimCustom ( unit , 1 ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14727: LD_VAR 0 8
14731: PPUSH
14732: LD_VAR 0 9
14736: PPUSH
14737: LD_VAR 0 6
14741: PPUSH
14742: LD_VAR 0 7
14746: PPUSH
14747: CALL_OW 330
// repeat wait ( 1 ) ;
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 316
14767: PUSH
14768: LD_VAR 0 1
14772: PPUSH
14773: CALL_OW 314
14777: OR
14778: PUSH
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 302
14788: NOT
14789: OR
14790: PUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 301
14800: OR
14801: IFFALSE 14751
// RemoveSeeing ( _x , _y , side ) ;
14803: LD_VAR 0 8
14807: PPUSH
14808: LD_VAR 0 9
14812: PPUSH
14813: LD_VAR 0 6
14817: PPUSH
14818: CALL_OW 331
// end ; end_of_file
14822: LD_VAR 0 4
14826: RET
// every 0 0$1 do
14827: GO 14829
14829: DISABLE
// begin enable ;
14830: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14831: LD_STRING updateTimer(
14833: PUSH
14834: LD_OWVAR 1
14838: STR
14839: PUSH
14840: LD_STRING );
14842: STR
14843: PPUSH
14844: CALL_OW 559
// end ;
14848: END
// export function SOS_MapStart ( ) ; begin
14849: LD_INT 0
14851: PPUSH
// if streamModeActive then
14852: LD_EXP 47
14856: IFFALSE 14865
// DefineStreamItems ( true ) ;
14858: LD_INT 1
14860: PPUSH
14861: CALL 16515 0 1
// UpdateFactoryWaypoints ( ) ;
14865: CALL 11125 0 0
// end ;
14869: LD_VAR 0 1
14873: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14874: LD_INT 0
14876: PPUSH
// if p2 = 100 then
14877: LD_VAR 0 2
14881: PUSH
14882: LD_INT 100
14884: EQUAL
14885: IFFALSE 15888
// begin if not StreamModeActive then
14887: LD_EXP 47
14891: NOT
14892: IFFALSE 14902
// StreamModeActive := true ;
14894: LD_ADDR_EXP 47
14898: PUSH
14899: LD_INT 1
14901: ST_TO_ADDR
// if p3 = 0 then
14902: LD_VAR 0 3
14906: PUSH
14907: LD_INT 0
14909: EQUAL
14910: IFFALSE 14916
// InitStreamMode ;
14912: CALL 16051 0 0
// if p3 = 1 then
14916: LD_VAR 0 3
14920: PUSH
14921: LD_INT 1
14923: EQUAL
14924: IFFALSE 14934
// sRocket := true ;
14926: LD_ADDR_EXP 52
14930: PUSH
14931: LD_INT 1
14933: ST_TO_ADDR
// if p3 = 2 then
14934: LD_VAR 0 3
14938: PUSH
14939: LD_INT 2
14941: EQUAL
14942: IFFALSE 14952
// sSpeed := true ;
14944: LD_ADDR_EXP 51
14948: PUSH
14949: LD_INT 1
14951: ST_TO_ADDR
// if p3 = 3 then
14952: LD_VAR 0 3
14956: PUSH
14957: LD_INT 3
14959: EQUAL
14960: IFFALSE 14970
// sEngine := true ;
14962: LD_ADDR_EXP 53
14966: PUSH
14967: LD_INT 1
14969: ST_TO_ADDR
// if p3 = 4 then
14970: LD_VAR 0 3
14974: PUSH
14975: LD_INT 4
14977: EQUAL
14978: IFFALSE 14988
// sSpec := true ;
14980: LD_ADDR_EXP 50
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// if p3 = 5 then
14988: LD_VAR 0 3
14992: PUSH
14993: LD_INT 5
14995: EQUAL
14996: IFFALSE 15006
// sLevel := true ;
14998: LD_ADDR_EXP 54
15002: PUSH
15003: LD_INT 1
15005: ST_TO_ADDR
// if p3 = 6 then
15006: LD_VAR 0 3
15010: PUSH
15011: LD_INT 6
15013: EQUAL
15014: IFFALSE 15024
// sArmoury := true ;
15016: LD_ADDR_EXP 55
15020: PUSH
15021: LD_INT 1
15023: ST_TO_ADDR
// if p3 = 7 then
15024: LD_VAR 0 3
15028: PUSH
15029: LD_INT 7
15031: EQUAL
15032: IFFALSE 15042
// sRadar := true ;
15034: LD_ADDR_EXP 56
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// if p3 = 8 then
15042: LD_VAR 0 3
15046: PUSH
15047: LD_INT 8
15049: EQUAL
15050: IFFALSE 15060
// sBunker := true ;
15052: LD_ADDR_EXP 57
15056: PUSH
15057: LD_INT 1
15059: ST_TO_ADDR
// if p3 = 9 then
15060: LD_VAR 0 3
15064: PUSH
15065: LD_INT 9
15067: EQUAL
15068: IFFALSE 15078
// sHack := true ;
15070: LD_ADDR_EXP 58
15074: PUSH
15075: LD_INT 1
15077: ST_TO_ADDR
// if p3 = 10 then
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 10
15085: EQUAL
15086: IFFALSE 15096
// sFire := true ;
15088: LD_ADDR_EXP 59
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// if p3 = 11 then
15096: LD_VAR 0 3
15100: PUSH
15101: LD_INT 11
15103: EQUAL
15104: IFFALSE 15114
// sRefresh := true ;
15106: LD_ADDR_EXP 60
15110: PUSH
15111: LD_INT 1
15113: ST_TO_ADDR
// if p3 = 12 then
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 12
15121: EQUAL
15122: IFFALSE 15132
// sExp := true ;
15124: LD_ADDR_EXP 61
15128: PUSH
15129: LD_INT 1
15131: ST_TO_ADDR
// if p3 = 13 then
15132: LD_VAR 0 3
15136: PUSH
15137: LD_INT 13
15139: EQUAL
15140: IFFALSE 15150
// sDepot := true ;
15142: LD_ADDR_EXP 62
15146: PUSH
15147: LD_INT 1
15149: ST_TO_ADDR
// if p3 = 14 then
15150: LD_VAR 0 3
15154: PUSH
15155: LD_INT 14
15157: EQUAL
15158: IFFALSE 15168
// sFlag := true ;
15160: LD_ADDR_EXP 63
15164: PUSH
15165: LD_INT 1
15167: ST_TO_ADDR
// if p3 = 15 then
15168: LD_VAR 0 3
15172: PUSH
15173: LD_INT 15
15175: EQUAL
15176: IFFALSE 15186
// sKamikadze := true ;
15178: LD_ADDR_EXP 71
15182: PUSH
15183: LD_INT 1
15185: ST_TO_ADDR
// if p3 = 16 then
15186: LD_VAR 0 3
15190: PUSH
15191: LD_INT 16
15193: EQUAL
15194: IFFALSE 15204
// sTroll := true ;
15196: LD_ADDR_EXP 72
15200: PUSH
15201: LD_INT 1
15203: ST_TO_ADDR
// if p3 = 17 then
15204: LD_VAR 0 3
15208: PUSH
15209: LD_INT 17
15211: EQUAL
15212: IFFALSE 15222
// sSlow := true ;
15214: LD_ADDR_EXP 73
15218: PUSH
15219: LD_INT 1
15221: ST_TO_ADDR
// if p3 = 18 then
15222: LD_VAR 0 3
15226: PUSH
15227: LD_INT 18
15229: EQUAL
15230: IFFALSE 15240
// sLack := true ;
15232: LD_ADDR_EXP 74
15236: PUSH
15237: LD_INT 1
15239: ST_TO_ADDR
// if p3 = 19 then
15240: LD_VAR 0 3
15244: PUSH
15245: LD_INT 19
15247: EQUAL
15248: IFFALSE 15258
// sTank := true ;
15250: LD_ADDR_EXP 76
15254: PUSH
15255: LD_INT 1
15257: ST_TO_ADDR
// if p3 = 20 then
15258: LD_VAR 0 3
15262: PUSH
15263: LD_INT 20
15265: EQUAL
15266: IFFALSE 15276
// sRemote := true ;
15268: LD_ADDR_EXP 77
15272: PUSH
15273: LD_INT 1
15275: ST_TO_ADDR
// if p3 = 21 then
15276: LD_VAR 0 3
15280: PUSH
15281: LD_INT 21
15283: EQUAL
15284: IFFALSE 15294
// sPowell := true ;
15286: LD_ADDR_EXP 78
15290: PUSH
15291: LD_INT 1
15293: ST_TO_ADDR
// if p3 = 22 then
15294: LD_VAR 0 3
15298: PUSH
15299: LD_INT 22
15301: EQUAL
15302: IFFALSE 15312
// sTeleport := true ;
15304: LD_ADDR_EXP 81
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// if p3 = 23 then
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 23
15319: EQUAL
15320: IFFALSE 15330
// sOilTower := true ;
15322: LD_ADDR_EXP 83
15326: PUSH
15327: LD_INT 1
15329: ST_TO_ADDR
// if p3 = 24 then
15330: LD_VAR 0 3
15334: PUSH
15335: LD_INT 24
15337: EQUAL
15338: IFFALSE 15348
// sShovel := true ;
15340: LD_ADDR_EXP 84
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// if p3 = 25 then
15348: LD_VAR 0 3
15352: PUSH
15353: LD_INT 25
15355: EQUAL
15356: IFFALSE 15366
// sSheik := true ;
15358: LD_ADDR_EXP 85
15362: PUSH
15363: LD_INT 1
15365: ST_TO_ADDR
// if p3 = 26 then
15366: LD_VAR 0 3
15370: PUSH
15371: LD_INT 26
15373: EQUAL
15374: IFFALSE 15384
// sEarthquake := true ;
15376: LD_ADDR_EXP 87
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if p3 = 27 then
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 27
15391: EQUAL
15392: IFFALSE 15402
// sAI := true ;
15394: LD_ADDR_EXP 88
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if p3 = 28 then
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 28
15409: EQUAL
15410: IFFALSE 15420
// sCargo := true ;
15412: LD_ADDR_EXP 91
15416: PUSH
15417: LD_INT 1
15419: ST_TO_ADDR
// if p3 = 29 then
15420: LD_VAR 0 3
15424: PUSH
15425: LD_INT 29
15427: EQUAL
15428: IFFALSE 15438
// sDLaser := true ;
15430: LD_ADDR_EXP 92
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// if p3 = 30 then
15438: LD_VAR 0 3
15442: PUSH
15443: LD_INT 30
15445: EQUAL
15446: IFFALSE 15456
// sExchange := true ;
15448: LD_ADDR_EXP 93
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// if p3 = 31 then
15456: LD_VAR 0 3
15460: PUSH
15461: LD_INT 31
15463: EQUAL
15464: IFFALSE 15474
// sFac := true ;
15466: LD_ADDR_EXP 94
15470: PUSH
15471: LD_INT 1
15473: ST_TO_ADDR
// if p3 = 32 then
15474: LD_VAR 0 3
15478: PUSH
15479: LD_INT 32
15481: EQUAL
15482: IFFALSE 15492
// sPower := true ;
15484: LD_ADDR_EXP 95
15488: PUSH
15489: LD_INT 1
15491: ST_TO_ADDR
// if p3 = 33 then
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 33
15499: EQUAL
15500: IFFALSE 15510
// sRandom := true ;
15502: LD_ADDR_EXP 96
15506: PUSH
15507: LD_INT 1
15509: ST_TO_ADDR
// if p3 = 34 then
15510: LD_VAR 0 3
15514: PUSH
15515: LD_INT 34
15517: EQUAL
15518: IFFALSE 15528
// sShield := true ;
15520: LD_ADDR_EXP 97
15524: PUSH
15525: LD_INT 1
15527: ST_TO_ADDR
// if p3 = 35 then
15528: LD_VAR 0 3
15532: PUSH
15533: LD_INT 35
15535: EQUAL
15536: IFFALSE 15546
// sTime := true ;
15538: LD_ADDR_EXP 98
15542: PUSH
15543: LD_INT 1
15545: ST_TO_ADDR
// if p3 = 36 then
15546: LD_VAR 0 3
15550: PUSH
15551: LD_INT 36
15553: EQUAL
15554: IFFALSE 15564
// sTools := true ;
15556: LD_ADDR_EXP 99
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// if p3 = 101 then
15564: LD_VAR 0 3
15568: PUSH
15569: LD_INT 101
15571: EQUAL
15572: IFFALSE 15582
// sSold := true ;
15574: LD_ADDR_EXP 64
15578: PUSH
15579: LD_INT 1
15581: ST_TO_ADDR
// if p3 = 102 then
15582: LD_VAR 0 3
15586: PUSH
15587: LD_INT 102
15589: EQUAL
15590: IFFALSE 15600
// sDiff := true ;
15592: LD_ADDR_EXP 65
15596: PUSH
15597: LD_INT 1
15599: ST_TO_ADDR
// if p3 = 103 then
15600: LD_VAR 0 3
15604: PUSH
15605: LD_INT 103
15607: EQUAL
15608: IFFALSE 15618
// sFog := true ;
15610: LD_ADDR_EXP 68
15614: PUSH
15615: LD_INT 1
15617: ST_TO_ADDR
// if p3 = 104 then
15618: LD_VAR 0 3
15622: PUSH
15623: LD_INT 104
15625: EQUAL
15626: IFFALSE 15636
// sReset := true ;
15628: LD_ADDR_EXP 69
15632: PUSH
15633: LD_INT 1
15635: ST_TO_ADDR
// if p3 = 105 then
15636: LD_VAR 0 3
15640: PUSH
15641: LD_INT 105
15643: EQUAL
15644: IFFALSE 15654
// sSun := true ;
15646: LD_ADDR_EXP 70
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// if p3 = 106 then
15654: LD_VAR 0 3
15658: PUSH
15659: LD_INT 106
15661: EQUAL
15662: IFFALSE 15672
// sTiger := true ;
15664: LD_ADDR_EXP 66
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// if p3 = 107 then
15672: LD_VAR 0 3
15676: PUSH
15677: LD_INT 107
15679: EQUAL
15680: IFFALSE 15690
// sBomb := true ;
15682: LD_ADDR_EXP 67
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// if p3 = 108 then
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 108
15697: EQUAL
15698: IFFALSE 15708
// sWound := true ;
15700: LD_ADDR_EXP 75
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
// if p3 = 109 then
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 109
15715: EQUAL
15716: IFFALSE 15726
// sBetray := true ;
15718: LD_ADDR_EXP 79
15722: PUSH
15723: LD_INT 1
15725: ST_TO_ADDR
// if p3 = 110 then
15726: LD_VAR 0 3
15730: PUSH
15731: LD_INT 110
15733: EQUAL
15734: IFFALSE 15744
// sContamin := true ;
15736: LD_ADDR_EXP 80
15740: PUSH
15741: LD_INT 1
15743: ST_TO_ADDR
// if p3 = 111 then
15744: LD_VAR 0 3
15748: PUSH
15749: LD_INT 111
15751: EQUAL
15752: IFFALSE 15762
// sOil := true ;
15754: LD_ADDR_EXP 82
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if p3 = 112 then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 112
15769: EQUAL
15770: IFFALSE 15780
// sStu := true ;
15772: LD_ADDR_EXP 86
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// if p3 = 113 then
15780: LD_VAR 0 3
15784: PUSH
15785: LD_INT 113
15787: EQUAL
15788: IFFALSE 15798
// sBazooka := true ;
15790: LD_ADDR_EXP 89
15794: PUSH
15795: LD_INT 1
15797: ST_TO_ADDR
// if p3 = 114 then
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 114
15805: EQUAL
15806: IFFALSE 15816
// sMortar := true ;
15808: LD_ADDR_EXP 90
15812: PUSH
15813: LD_INT 1
15815: ST_TO_ADDR
// if p3 = 115 then
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 115
15823: EQUAL
15824: IFFALSE 15834
// sRanger := true ;
15826: LD_ADDR_EXP 100
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// if p3 = 116 then
15834: LD_VAR 0 3
15838: PUSH
15839: LD_INT 116
15841: EQUAL
15842: IFFALSE 15852
// sComputer := true ;
15844: LD_ADDR_EXP 101
15848: PUSH
15849: LD_INT 1
15851: ST_TO_ADDR
// if p3 = 117 then
15852: LD_VAR 0 3
15856: PUSH
15857: LD_INT 117
15859: EQUAL
15860: IFFALSE 15870
// s30 := true ;
15862: LD_ADDR_EXP 102
15866: PUSH
15867: LD_INT 1
15869: ST_TO_ADDR
// if p3 = 118 then
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 118
15877: EQUAL
15878: IFFALSE 15888
// s60 := true ;
15880: LD_ADDR_EXP 103
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// end ; if p2 = 101 then
15888: LD_VAR 0 2
15892: PUSH
15893: LD_INT 101
15895: EQUAL
15896: IFFALSE 16024
// begin case p3 of 1 :
15898: LD_VAR 0 3
15902: PUSH
15903: LD_INT 1
15905: DOUBLE
15906: EQUAL
15907: IFTRUE 15911
15909: GO 15918
15911: POP
// hHackUnlimitedResources ; 2 :
15912: CALL 28122 0 0
15916: GO 16024
15918: LD_INT 2
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15926
15924: GO 15933
15926: POP
// hHackSetLevel10 ; 3 :
15927: CALL 28255 0 0
15931: GO 16024
15933: LD_INT 3
15935: DOUBLE
15936: EQUAL
15937: IFTRUE 15941
15939: GO 15948
15941: POP
// hHackSetLevel10YourUnits ; 4 :
15942: CALL 28340 0 0
15946: GO 16024
15948: LD_INT 4
15950: DOUBLE
15951: EQUAL
15952: IFTRUE 15956
15954: GO 15963
15956: POP
// hHackInvincible ; 5 :
15957: CALL 28788 0 0
15961: GO 16024
15963: LD_INT 5
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 15978
15971: POP
// hHackInvisible ; 6 :
15972: CALL 28899 0 0
15976: GO 16024
15978: LD_INT 6
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15993
15986: POP
// hHackChangeYourSide ; 7 :
15987: CALL 28956 0 0
15991: GO 16024
15993: LD_INT 7
15995: DOUBLE
15996: EQUAL
15997: IFTRUE 16001
15999: GO 16008
16001: POP
// hHackChangeUnitSide ; 8 :
16002: CALL 28998 0 0
16006: GO 16024
16008: LD_INT 8
16010: DOUBLE
16011: EQUAL
16012: IFTRUE 16016
16014: GO 16023
16016: POP
// hHackFog ; end ;
16017: CALL 29099 0 0
16021: GO 16024
16023: POP
// end ; end ;
16024: LD_VAR 0 7
16028: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16029: GO 16031
16031: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16032: LD_STRING initStreamRollete();
16034: PPUSH
16035: CALL_OW 559
// InitStreamMode ;
16039: CALL 16051 0 0
// DefineStreamItems ( false ) ;
16043: LD_INT 0
16045: PPUSH
16046: CALL 16515 0 1
// end ;
16050: END
// function InitStreamMode ; begin
16051: LD_INT 0
16053: PPUSH
// streamModeActive := false ;
16054: LD_ADDR_EXP 47
16058: PUSH
16059: LD_INT 0
16061: ST_TO_ADDR
// normalCounter := 36 ;
16062: LD_ADDR_EXP 48
16066: PUSH
16067: LD_INT 36
16069: ST_TO_ADDR
// hardcoreCounter := 18 ;
16070: LD_ADDR_EXP 49
16074: PUSH
16075: LD_INT 18
16077: ST_TO_ADDR
// sRocket := false ;
16078: LD_ADDR_EXP 52
16082: PUSH
16083: LD_INT 0
16085: ST_TO_ADDR
// sSpeed := false ;
16086: LD_ADDR_EXP 51
16090: PUSH
16091: LD_INT 0
16093: ST_TO_ADDR
// sEngine := false ;
16094: LD_ADDR_EXP 53
16098: PUSH
16099: LD_INT 0
16101: ST_TO_ADDR
// sSpec := false ;
16102: LD_ADDR_EXP 50
16106: PUSH
16107: LD_INT 0
16109: ST_TO_ADDR
// sLevel := false ;
16110: LD_ADDR_EXP 54
16114: PUSH
16115: LD_INT 0
16117: ST_TO_ADDR
// sArmoury := false ;
16118: LD_ADDR_EXP 55
16122: PUSH
16123: LD_INT 0
16125: ST_TO_ADDR
// sRadar := false ;
16126: LD_ADDR_EXP 56
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// sBunker := false ;
16134: LD_ADDR_EXP 57
16138: PUSH
16139: LD_INT 0
16141: ST_TO_ADDR
// sHack := false ;
16142: LD_ADDR_EXP 58
16146: PUSH
16147: LD_INT 0
16149: ST_TO_ADDR
// sFire := false ;
16150: LD_ADDR_EXP 59
16154: PUSH
16155: LD_INT 0
16157: ST_TO_ADDR
// sRefresh := false ;
16158: LD_ADDR_EXP 60
16162: PUSH
16163: LD_INT 0
16165: ST_TO_ADDR
// sExp := false ;
16166: LD_ADDR_EXP 61
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// sDepot := false ;
16174: LD_ADDR_EXP 62
16178: PUSH
16179: LD_INT 0
16181: ST_TO_ADDR
// sFlag := false ;
16182: LD_ADDR_EXP 63
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// sKamikadze := false ;
16190: LD_ADDR_EXP 71
16194: PUSH
16195: LD_INT 0
16197: ST_TO_ADDR
// sTroll := false ;
16198: LD_ADDR_EXP 72
16202: PUSH
16203: LD_INT 0
16205: ST_TO_ADDR
// sSlow := false ;
16206: LD_ADDR_EXP 73
16210: PUSH
16211: LD_INT 0
16213: ST_TO_ADDR
// sLack := false ;
16214: LD_ADDR_EXP 74
16218: PUSH
16219: LD_INT 0
16221: ST_TO_ADDR
// sTank := false ;
16222: LD_ADDR_EXP 76
16226: PUSH
16227: LD_INT 0
16229: ST_TO_ADDR
// sRemote := false ;
16230: LD_ADDR_EXP 77
16234: PUSH
16235: LD_INT 0
16237: ST_TO_ADDR
// sPowell := false ;
16238: LD_ADDR_EXP 78
16242: PUSH
16243: LD_INT 0
16245: ST_TO_ADDR
// sTeleport := false ;
16246: LD_ADDR_EXP 81
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// sOilTower := false ;
16254: LD_ADDR_EXP 83
16258: PUSH
16259: LD_INT 0
16261: ST_TO_ADDR
// sShovel := false ;
16262: LD_ADDR_EXP 84
16266: PUSH
16267: LD_INT 0
16269: ST_TO_ADDR
// sSheik := false ;
16270: LD_ADDR_EXP 85
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
// sEarthquake := false ;
16278: LD_ADDR_EXP 87
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// sAI := false ;
16286: LD_ADDR_EXP 88
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// sCargo := false ;
16294: LD_ADDR_EXP 91
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// sDLaser := false ;
16302: LD_ADDR_EXP 92
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// sExchange := false ;
16310: LD_ADDR_EXP 93
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// sFac := false ;
16318: LD_ADDR_EXP 94
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// sPower := false ;
16326: LD_ADDR_EXP 95
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// sRandom := false ;
16334: LD_ADDR_EXP 96
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// sShield := false ;
16342: LD_ADDR_EXP 97
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// sTime := false ;
16350: LD_ADDR_EXP 98
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// sTools := false ;
16358: LD_ADDR_EXP 99
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// sSold := false ;
16366: LD_ADDR_EXP 64
16370: PUSH
16371: LD_INT 0
16373: ST_TO_ADDR
// sDiff := false ;
16374: LD_ADDR_EXP 65
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
// sFog := false ;
16382: LD_ADDR_EXP 68
16386: PUSH
16387: LD_INT 0
16389: ST_TO_ADDR
// sReset := false ;
16390: LD_ADDR_EXP 69
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// sSun := false ;
16398: LD_ADDR_EXP 70
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// sTiger := false ;
16406: LD_ADDR_EXP 66
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// sBomb := false ;
16414: LD_ADDR_EXP 67
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// sWound := false ;
16422: LD_ADDR_EXP 75
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// sBetray := false ;
16430: LD_ADDR_EXP 79
16434: PUSH
16435: LD_INT 0
16437: ST_TO_ADDR
// sContamin := false ;
16438: LD_ADDR_EXP 80
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// sOil := false ;
16446: LD_ADDR_EXP 82
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// sStu := false ;
16454: LD_ADDR_EXP 86
16458: PUSH
16459: LD_INT 0
16461: ST_TO_ADDR
// sBazooka := false ;
16462: LD_ADDR_EXP 89
16466: PUSH
16467: LD_INT 0
16469: ST_TO_ADDR
// sMortar := false ;
16470: LD_ADDR_EXP 90
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// sRanger := false ;
16478: LD_ADDR_EXP 100
16482: PUSH
16483: LD_INT 0
16485: ST_TO_ADDR
// sComputer := false ;
16486: LD_ADDR_EXP 101
16490: PUSH
16491: LD_INT 0
16493: ST_TO_ADDR
// s30 := false ;
16494: LD_ADDR_EXP 102
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// s60 := false ;
16502: LD_ADDR_EXP 103
16506: PUSH
16507: LD_INT 0
16509: ST_TO_ADDR
// end ;
16510: LD_VAR 0 1
16514: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
// result := [ ] ;
16524: LD_ADDR_VAR 0 2
16528: PUSH
16529: EMPTY
16530: ST_TO_ADDR
// if campaign_id = 1 then
16531: LD_OWVAR 69
16535: PUSH
16536: LD_INT 1
16538: EQUAL
16539: IFFALSE 19705
// begin case mission_number of 1 :
16541: LD_OWVAR 70
16545: PUSH
16546: LD_INT 1
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16554
16552: GO 16630
16554: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16555: LD_ADDR_VAR 0 2
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 4
16565: PUSH
16566: LD_INT 11
16568: PUSH
16569: LD_INT 12
16571: PUSH
16572: LD_INT 15
16574: PUSH
16575: LD_INT 16
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_INT 23
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 106
16606: PUSH
16607: LD_INT 116
16609: PUSH
16610: LD_INT 117
16612: PUSH
16613: LD_INT 118
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: ST_TO_ADDR
16628: GO 19703
16630: LD_INT 2
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 16722
16638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16639: LD_ADDR_VAR 0 2
16643: PUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 4
16649: PUSH
16650: LD_INT 11
16652: PUSH
16653: LD_INT 12
16655: PUSH
16656: LD_INT 15
16658: PUSH
16659: LD_INT 16
16661: PUSH
16662: LD_INT 22
16664: PUSH
16665: LD_INT 23
16667: PUSH
16668: LD_INT 26
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 101
16684: PUSH
16685: LD_INT 102
16687: PUSH
16688: LD_INT 105
16690: PUSH
16691: LD_INT 106
16693: PUSH
16694: LD_INT 108
16696: PUSH
16697: LD_INT 116
16699: PUSH
16700: LD_INT 117
16702: PUSH
16703: LD_INT 118
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: ST_TO_ADDR
16720: GO 19703
16722: LD_INT 3
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16818
16730: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16731: LD_ADDR_VAR 0 2
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 11
16747: PUSH
16748: LD_INT 12
16750: PUSH
16751: LD_INT 15
16753: PUSH
16754: LD_INT 16
16756: PUSH
16757: LD_INT 22
16759: PUSH
16760: LD_INT 26
16762: PUSH
16763: LD_INT 36
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 101
16780: PUSH
16781: LD_INT 102
16783: PUSH
16784: LD_INT 105
16786: PUSH
16787: LD_INT 106
16789: PUSH
16790: LD_INT 108
16792: PUSH
16793: LD_INT 116
16795: PUSH
16796: LD_INT 117
16798: PUSH
16799: LD_INT 118
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: ST_TO_ADDR
16816: GO 19703
16818: LD_INT 4
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16826
16824: GO 16922
16826: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16827: LD_ADDR_VAR 0 2
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 4
16837: PUSH
16838: LD_INT 5
16840: PUSH
16841: LD_INT 8
16843: PUSH
16844: LD_INT 11
16846: PUSH
16847: LD_INT 12
16849: PUSH
16850: LD_INT 15
16852: PUSH
16853: LD_INT 16
16855: PUSH
16856: LD_INT 22
16858: PUSH
16859: LD_INT 23
16861: PUSH
16862: LD_INT 26
16864: PUSH
16865: LD_INT 36
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 101
16884: PUSH
16885: LD_INT 102
16887: PUSH
16888: LD_INT 105
16890: PUSH
16891: LD_INT 106
16893: PUSH
16894: LD_INT 108
16896: PUSH
16897: LD_INT 116
16899: PUSH
16900: LD_INT 117
16902: PUSH
16903: LD_INT 118
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: ST_TO_ADDR
16920: GO 19703
16922: LD_INT 5
16924: DOUBLE
16925: EQUAL
16926: IFTRUE 16930
16928: GO 17042
16930: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16931: LD_ADDR_VAR 0 2
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: LD_INT 4
16941: PUSH
16942: LD_INT 5
16944: PUSH
16945: LD_INT 6
16947: PUSH
16948: LD_INT 8
16950: PUSH
16951: LD_INT 11
16953: PUSH
16954: LD_INT 12
16956: PUSH
16957: LD_INT 15
16959: PUSH
16960: LD_INT 16
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_INT 23
16968: PUSH
16969: LD_INT 25
16971: PUSH
16972: LD_INT 26
16974: PUSH
16975: LD_INT 36
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 101
16996: PUSH
16997: LD_INT 102
16999: PUSH
17000: LD_INT 105
17002: PUSH
17003: LD_INT 106
17005: PUSH
17006: LD_INT 108
17008: PUSH
17009: LD_INT 109
17011: PUSH
17012: LD_INT 112
17014: PUSH
17015: LD_INT 116
17017: PUSH
17018: LD_INT 117
17020: PUSH
17021: LD_INT 118
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: ST_TO_ADDR
17040: GO 19703
17042: LD_INT 6
17044: DOUBLE
17045: EQUAL
17046: IFTRUE 17050
17048: GO 17182
17050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_INT 2
17058: PUSH
17059: LD_INT 4
17061: PUSH
17062: LD_INT 5
17064: PUSH
17065: LD_INT 6
17067: PUSH
17068: LD_INT 8
17070: PUSH
17071: LD_INT 11
17073: PUSH
17074: LD_INT 12
17076: PUSH
17077: LD_INT 15
17079: PUSH
17080: LD_INT 16
17082: PUSH
17083: LD_INT 20
17085: PUSH
17086: LD_INT 21
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 23
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 26
17100: PUSH
17101: LD_INT 30
17103: PUSH
17104: LD_INT 31
17106: PUSH
17107: LD_INT 32
17109: PUSH
17110: LD_INT 36
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 101
17136: PUSH
17137: LD_INT 102
17139: PUSH
17140: LD_INT 105
17142: PUSH
17143: LD_INT 106
17145: PUSH
17146: LD_INT 108
17148: PUSH
17149: LD_INT 109
17151: PUSH
17152: LD_INT 112
17154: PUSH
17155: LD_INT 116
17157: PUSH
17158: LD_INT 117
17160: PUSH
17161: LD_INT 118
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: ST_TO_ADDR
17180: GO 19703
17182: LD_INT 7
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17302
17190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 4
17201: PUSH
17202: LD_INT 5
17204: PUSH
17205: LD_INT 7
17207: PUSH
17208: LD_INT 11
17210: PUSH
17211: LD_INT 12
17213: PUSH
17214: LD_INT 15
17216: PUSH
17217: LD_INT 16
17219: PUSH
17220: LD_INT 20
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_INT 23
17231: PUSH
17232: LD_INT 25
17234: PUSH
17235: LD_INT 26
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 101
17256: PUSH
17257: LD_INT 102
17259: PUSH
17260: LD_INT 103
17262: PUSH
17263: LD_INT 105
17265: PUSH
17266: LD_INT 106
17268: PUSH
17269: LD_INT 108
17271: PUSH
17272: LD_INT 112
17274: PUSH
17275: LD_INT 116
17277: PUSH
17278: LD_INT 117
17280: PUSH
17281: LD_INT 118
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 19703
17302: LD_INT 8
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17450
17310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17311: LD_ADDR_VAR 0 2
17315: PUSH
17316: LD_INT 2
17318: PUSH
17319: LD_INT 4
17321: PUSH
17322: LD_INT 5
17324: PUSH
17325: LD_INT 6
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 8
17333: PUSH
17334: LD_INT 11
17336: PUSH
17337: LD_INT 12
17339: PUSH
17340: LD_INT 15
17342: PUSH
17343: LD_INT 16
17345: PUSH
17346: LD_INT 20
17348: PUSH
17349: LD_INT 21
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 23
17357: PUSH
17358: LD_INT 25
17360: PUSH
17361: LD_INT 26
17363: PUSH
17364: LD_INT 30
17366: PUSH
17367: LD_INT 31
17369: PUSH
17370: LD_INT 32
17372: PUSH
17373: LD_INT 36
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 101
17400: PUSH
17401: LD_INT 102
17403: PUSH
17404: LD_INT 103
17406: PUSH
17407: LD_INT 105
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: LD_INT 108
17415: PUSH
17416: LD_INT 109
17418: PUSH
17419: LD_INT 112
17421: PUSH
17422: LD_INT 116
17424: PUSH
17425: LD_INT 117
17427: PUSH
17428: LD_INT 118
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: ST_TO_ADDR
17448: GO 19703
17450: LD_INT 9
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17606
17458: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17459: LD_ADDR_VAR 0 2
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 4
17469: PUSH
17470: LD_INT 5
17472: PUSH
17473: LD_INT 6
17475: PUSH
17476: LD_INT 7
17478: PUSH
17479: LD_INT 8
17481: PUSH
17482: LD_INT 11
17484: PUSH
17485: LD_INT 12
17487: PUSH
17488: LD_INT 15
17490: PUSH
17491: LD_INT 16
17493: PUSH
17494: LD_INT 20
17496: PUSH
17497: LD_INT 21
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_INT 23
17505: PUSH
17506: LD_INT 25
17508: PUSH
17509: LD_INT 26
17511: PUSH
17512: LD_INT 28
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 31
17520: PUSH
17521: LD_INT 32
17523: PUSH
17524: LD_INT 36
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 101
17552: PUSH
17553: LD_INT 102
17555: PUSH
17556: LD_INT 103
17558: PUSH
17559: LD_INT 105
17561: PUSH
17562: LD_INT 106
17564: PUSH
17565: LD_INT 108
17567: PUSH
17568: LD_INT 109
17570: PUSH
17571: LD_INT 112
17573: PUSH
17574: LD_INT 114
17576: PUSH
17577: LD_INT 116
17579: PUSH
17580: LD_INT 117
17582: PUSH
17583: LD_INT 118
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: ST_TO_ADDR
17604: GO 19703
17606: LD_INT 10
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17810
17614: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17615: LD_ADDR_VAR 0 2
17619: PUSH
17620: LD_INT 2
17622: PUSH
17623: LD_INT 4
17625: PUSH
17626: LD_INT 5
17628: PUSH
17629: LD_INT 6
17631: PUSH
17632: LD_INT 7
17634: PUSH
17635: LD_INT 8
17637: PUSH
17638: LD_INT 9
17640: PUSH
17641: LD_INT 10
17643: PUSH
17644: LD_INT 11
17646: PUSH
17647: LD_INT 12
17649: PUSH
17650: LD_INT 13
17652: PUSH
17653: LD_INT 14
17655: PUSH
17656: LD_INT 15
17658: PUSH
17659: LD_INT 16
17661: PUSH
17662: LD_INT 17
17664: PUSH
17665: LD_INT 18
17667: PUSH
17668: LD_INT 19
17670: PUSH
17671: LD_INT 20
17673: PUSH
17674: LD_INT 21
17676: PUSH
17677: LD_INT 22
17679: PUSH
17680: LD_INT 23
17682: PUSH
17683: LD_INT 24
17685: PUSH
17686: LD_INT 25
17688: PUSH
17689: LD_INT 26
17691: PUSH
17692: LD_INT 28
17694: PUSH
17695: LD_INT 30
17697: PUSH
17698: LD_INT 31
17700: PUSH
17701: LD_INT 32
17703: PUSH
17704: LD_INT 36
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 101
17740: PUSH
17741: LD_INT 102
17743: PUSH
17744: LD_INT 103
17746: PUSH
17747: LD_INT 104
17749: PUSH
17750: LD_INT 105
17752: PUSH
17753: LD_INT 106
17755: PUSH
17756: LD_INT 107
17758: PUSH
17759: LD_INT 108
17761: PUSH
17762: LD_INT 109
17764: PUSH
17765: LD_INT 110
17767: PUSH
17768: LD_INT 111
17770: PUSH
17771: LD_INT 112
17773: PUSH
17774: LD_INT 114
17776: PUSH
17777: LD_INT 116
17779: PUSH
17780: LD_INT 117
17782: PUSH
17783: LD_INT 118
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: ST_TO_ADDR
17808: GO 19703
17810: LD_INT 11
17812: DOUBLE
17813: EQUAL
17814: IFTRUE 17818
17816: GO 18022
17818: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17819: LD_ADDR_VAR 0 2
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 3
17829: PUSH
17830: LD_INT 4
17832: PUSH
17833: LD_INT 5
17835: PUSH
17836: LD_INT 6
17838: PUSH
17839: LD_INT 7
17841: PUSH
17842: LD_INT 8
17844: PUSH
17845: LD_INT 9
17847: PUSH
17848: LD_INT 10
17850: PUSH
17851: LD_INT 11
17853: PUSH
17854: LD_INT 12
17856: PUSH
17857: LD_INT 13
17859: PUSH
17860: LD_INT 14
17862: PUSH
17863: LD_INT 15
17865: PUSH
17866: LD_INT 16
17868: PUSH
17869: LD_INT 17
17871: PUSH
17872: LD_INT 18
17874: PUSH
17875: LD_INT 19
17877: PUSH
17878: LD_INT 20
17880: PUSH
17881: LD_INT 21
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_INT 23
17889: PUSH
17890: LD_INT 24
17892: PUSH
17893: LD_INT 25
17895: PUSH
17896: LD_INT 26
17898: PUSH
17899: LD_INT 28
17901: PUSH
17902: LD_INT 30
17904: PUSH
17905: LD_INT 31
17907: PUSH
17908: LD_INT 32
17910: PUSH
17911: LD_INT 34
17913: PUSH
17914: LD_INT 36
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 101
17952: PUSH
17953: LD_INT 102
17955: PUSH
17956: LD_INT 103
17958: PUSH
17959: LD_INT 104
17961: PUSH
17962: LD_INT 105
17964: PUSH
17965: LD_INT 106
17967: PUSH
17968: LD_INT 107
17970: PUSH
17971: LD_INT 108
17973: PUSH
17974: LD_INT 109
17976: PUSH
17977: LD_INT 110
17979: PUSH
17980: LD_INT 111
17982: PUSH
17983: LD_INT 112
17985: PUSH
17986: LD_INT 114
17988: PUSH
17989: LD_INT 116
17991: PUSH
17992: LD_INT 117
17994: PUSH
17995: LD_INT 118
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: ST_TO_ADDR
18020: GO 19703
18022: LD_INT 12
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18250
18030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: LD_INT 2
18041: PUSH
18042: LD_INT 3
18044: PUSH
18045: LD_INT 4
18047: PUSH
18048: LD_INT 5
18050: PUSH
18051: LD_INT 6
18053: PUSH
18054: LD_INT 7
18056: PUSH
18057: LD_INT 8
18059: PUSH
18060: LD_INT 9
18062: PUSH
18063: LD_INT 10
18065: PUSH
18066: LD_INT 11
18068: PUSH
18069: LD_INT 12
18071: PUSH
18072: LD_INT 13
18074: PUSH
18075: LD_INT 14
18077: PUSH
18078: LD_INT 15
18080: PUSH
18081: LD_INT 16
18083: PUSH
18084: LD_INT 17
18086: PUSH
18087: LD_INT 18
18089: PUSH
18090: LD_INT 19
18092: PUSH
18093: LD_INT 20
18095: PUSH
18096: LD_INT 21
18098: PUSH
18099: LD_INT 22
18101: PUSH
18102: LD_INT 23
18104: PUSH
18105: LD_INT 24
18107: PUSH
18108: LD_INT 25
18110: PUSH
18111: LD_INT 26
18113: PUSH
18114: LD_INT 27
18116: PUSH
18117: LD_INT 28
18119: PUSH
18120: LD_INT 30
18122: PUSH
18123: LD_INT 31
18125: PUSH
18126: LD_INT 32
18128: PUSH
18129: LD_INT 33
18131: PUSH
18132: LD_INT 34
18134: PUSH
18135: LD_INT 36
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 101
18176: PUSH
18177: LD_INT 102
18179: PUSH
18180: LD_INT 103
18182: PUSH
18183: LD_INT 104
18185: PUSH
18186: LD_INT 105
18188: PUSH
18189: LD_INT 106
18191: PUSH
18192: LD_INT 107
18194: PUSH
18195: LD_INT 108
18197: PUSH
18198: LD_INT 109
18200: PUSH
18201: LD_INT 110
18203: PUSH
18204: LD_INT 111
18206: PUSH
18207: LD_INT 112
18209: PUSH
18210: LD_INT 113
18212: PUSH
18213: LD_INT 114
18215: PUSH
18216: LD_INT 116
18218: PUSH
18219: LD_INT 117
18221: PUSH
18222: LD_INT 118
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: ST_TO_ADDR
18248: GO 19703
18250: LD_INT 13
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18466
18258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18259: LD_ADDR_VAR 0 2
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: LD_INT 4
18275: PUSH
18276: LD_INT 5
18278: PUSH
18279: LD_INT 8
18281: PUSH
18282: LD_INT 9
18284: PUSH
18285: LD_INT 10
18287: PUSH
18288: LD_INT 11
18290: PUSH
18291: LD_INT 12
18293: PUSH
18294: LD_INT 14
18296: PUSH
18297: LD_INT 15
18299: PUSH
18300: LD_INT 16
18302: PUSH
18303: LD_INT 17
18305: PUSH
18306: LD_INT 18
18308: PUSH
18309: LD_INT 19
18311: PUSH
18312: LD_INT 20
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 22
18320: PUSH
18321: LD_INT 23
18323: PUSH
18324: LD_INT 24
18326: PUSH
18327: LD_INT 25
18329: PUSH
18330: LD_INT 26
18332: PUSH
18333: LD_INT 27
18335: PUSH
18336: LD_INT 28
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 31
18344: PUSH
18345: LD_INT 32
18347: PUSH
18348: LD_INT 33
18350: PUSH
18351: LD_INT 34
18353: PUSH
18354: LD_INT 36
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 101
18392: PUSH
18393: LD_INT 102
18395: PUSH
18396: LD_INT 103
18398: PUSH
18399: LD_INT 104
18401: PUSH
18402: LD_INT 105
18404: PUSH
18405: LD_INT 106
18407: PUSH
18408: LD_INT 107
18410: PUSH
18411: LD_INT 108
18413: PUSH
18414: LD_INT 109
18416: PUSH
18417: LD_INT 110
18419: PUSH
18420: LD_INT 111
18422: PUSH
18423: LD_INT 112
18425: PUSH
18426: LD_INT 113
18428: PUSH
18429: LD_INT 114
18431: PUSH
18432: LD_INT 116
18434: PUSH
18435: LD_INT 117
18437: PUSH
18438: LD_INT 118
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: ST_TO_ADDR
18464: GO 19703
18466: LD_INT 14
18468: DOUBLE
18469: EQUAL
18470: IFTRUE 18474
18472: GO 18698
18474: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18475: LD_ADDR_VAR 0 2
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 3
18488: PUSH
18489: LD_INT 4
18491: PUSH
18492: LD_INT 5
18494: PUSH
18495: LD_INT 6
18497: PUSH
18498: LD_INT 7
18500: PUSH
18501: LD_INT 8
18503: PUSH
18504: LD_INT 9
18506: PUSH
18507: LD_INT 10
18509: PUSH
18510: LD_INT 11
18512: PUSH
18513: LD_INT 12
18515: PUSH
18516: LD_INT 13
18518: PUSH
18519: LD_INT 14
18521: PUSH
18522: LD_INT 15
18524: PUSH
18525: LD_INT 16
18527: PUSH
18528: LD_INT 17
18530: PUSH
18531: LD_INT 18
18533: PUSH
18534: LD_INT 19
18536: PUSH
18537: LD_INT 20
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 23
18548: PUSH
18549: LD_INT 24
18551: PUSH
18552: LD_INT 25
18554: PUSH
18555: LD_INT 26
18557: PUSH
18558: LD_INT 27
18560: PUSH
18561: LD_INT 28
18563: PUSH
18564: LD_INT 29
18566: PUSH
18567: LD_INT 30
18569: PUSH
18570: LD_INT 31
18572: PUSH
18573: LD_INT 32
18575: PUSH
18576: LD_INT 33
18578: PUSH
18579: LD_INT 34
18581: PUSH
18582: LD_INT 36
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 101
18624: PUSH
18625: LD_INT 102
18627: PUSH
18628: LD_INT 103
18630: PUSH
18631: LD_INT 104
18633: PUSH
18634: LD_INT 105
18636: PUSH
18637: LD_INT 106
18639: PUSH
18640: LD_INT 107
18642: PUSH
18643: LD_INT 108
18645: PUSH
18646: LD_INT 109
18648: PUSH
18649: LD_INT 110
18651: PUSH
18652: LD_INT 111
18654: PUSH
18655: LD_INT 112
18657: PUSH
18658: LD_INT 113
18660: PUSH
18661: LD_INT 114
18663: PUSH
18664: LD_INT 116
18666: PUSH
18667: LD_INT 117
18669: PUSH
18670: LD_INT 118
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: ST_TO_ADDR
18696: GO 19703
18698: LD_INT 15
18700: DOUBLE
18701: EQUAL
18702: IFTRUE 18706
18704: GO 18930
18706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18707: LD_ADDR_VAR 0 2
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 3
18720: PUSH
18721: LD_INT 4
18723: PUSH
18724: LD_INT 5
18726: PUSH
18727: LD_INT 6
18729: PUSH
18730: LD_INT 7
18732: PUSH
18733: LD_INT 8
18735: PUSH
18736: LD_INT 9
18738: PUSH
18739: LD_INT 10
18741: PUSH
18742: LD_INT 11
18744: PUSH
18745: LD_INT 12
18747: PUSH
18748: LD_INT 13
18750: PUSH
18751: LD_INT 14
18753: PUSH
18754: LD_INT 15
18756: PUSH
18757: LD_INT 16
18759: PUSH
18760: LD_INT 17
18762: PUSH
18763: LD_INT 18
18765: PUSH
18766: LD_INT 19
18768: PUSH
18769: LD_INT 20
18771: PUSH
18772: LD_INT 21
18774: PUSH
18775: LD_INT 22
18777: PUSH
18778: LD_INT 23
18780: PUSH
18781: LD_INT 24
18783: PUSH
18784: LD_INT 25
18786: PUSH
18787: LD_INT 26
18789: PUSH
18790: LD_INT 27
18792: PUSH
18793: LD_INT 28
18795: PUSH
18796: LD_INT 29
18798: PUSH
18799: LD_INT 30
18801: PUSH
18802: LD_INT 31
18804: PUSH
18805: LD_INT 32
18807: PUSH
18808: LD_INT 33
18810: PUSH
18811: LD_INT 34
18813: PUSH
18814: LD_INT 36
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 101
18856: PUSH
18857: LD_INT 102
18859: PUSH
18860: LD_INT 103
18862: PUSH
18863: LD_INT 104
18865: PUSH
18866: LD_INT 105
18868: PUSH
18869: LD_INT 106
18871: PUSH
18872: LD_INT 107
18874: PUSH
18875: LD_INT 108
18877: PUSH
18878: LD_INT 109
18880: PUSH
18881: LD_INT 110
18883: PUSH
18884: LD_INT 111
18886: PUSH
18887: LD_INT 112
18889: PUSH
18890: LD_INT 113
18892: PUSH
18893: LD_INT 114
18895: PUSH
18896: LD_INT 116
18898: PUSH
18899: LD_INT 117
18901: PUSH
18902: LD_INT 118
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 19703
18930: LD_INT 16
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 19074
18938: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18939: LD_ADDR_VAR 0 2
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: LD_INT 4
18949: PUSH
18950: LD_INT 5
18952: PUSH
18953: LD_INT 7
18955: PUSH
18956: LD_INT 11
18958: PUSH
18959: LD_INT 12
18961: PUSH
18962: LD_INT 15
18964: PUSH
18965: LD_INT 16
18967: PUSH
18968: LD_INT 20
18970: PUSH
18971: LD_INT 21
18973: PUSH
18974: LD_INT 22
18976: PUSH
18977: LD_INT 23
18979: PUSH
18980: LD_INT 25
18982: PUSH
18983: LD_INT 26
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 31
18991: PUSH
18992: LD_INT 32
18994: PUSH
18995: LD_INT 33
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 101
19024: PUSH
19025: LD_INT 102
19027: PUSH
19028: LD_INT 103
19030: PUSH
19031: LD_INT 106
19033: PUSH
19034: LD_INT 108
19036: PUSH
19037: LD_INT 112
19039: PUSH
19040: LD_INT 113
19042: PUSH
19043: LD_INT 114
19045: PUSH
19046: LD_INT 116
19048: PUSH
19049: LD_INT 117
19051: PUSH
19052: LD_INT 118
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: ST_TO_ADDR
19072: GO 19703
19074: LD_INT 17
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19306
19082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19083: LD_ADDR_VAR 0 2
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 3
19096: PUSH
19097: LD_INT 4
19099: PUSH
19100: LD_INT 5
19102: PUSH
19103: LD_INT 6
19105: PUSH
19106: LD_INT 7
19108: PUSH
19109: LD_INT 8
19111: PUSH
19112: LD_INT 9
19114: PUSH
19115: LD_INT 10
19117: PUSH
19118: LD_INT 11
19120: PUSH
19121: LD_INT 12
19123: PUSH
19124: LD_INT 13
19126: PUSH
19127: LD_INT 14
19129: PUSH
19130: LD_INT 15
19132: PUSH
19133: LD_INT 16
19135: PUSH
19136: LD_INT 17
19138: PUSH
19139: LD_INT 18
19141: PUSH
19142: LD_INT 19
19144: PUSH
19145: LD_INT 20
19147: PUSH
19148: LD_INT 21
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 24
19159: PUSH
19160: LD_INT 25
19162: PUSH
19163: LD_INT 26
19165: PUSH
19166: LD_INT 27
19168: PUSH
19169: LD_INT 28
19171: PUSH
19172: LD_INT 29
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 31
19180: PUSH
19181: LD_INT 32
19183: PUSH
19184: LD_INT 33
19186: PUSH
19187: LD_INT 34
19189: PUSH
19190: LD_INT 36
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 101
19232: PUSH
19233: LD_INT 102
19235: PUSH
19236: LD_INT 103
19238: PUSH
19239: LD_INT 104
19241: PUSH
19242: LD_INT 105
19244: PUSH
19245: LD_INT 106
19247: PUSH
19248: LD_INT 107
19250: PUSH
19251: LD_INT 108
19253: PUSH
19254: LD_INT 109
19256: PUSH
19257: LD_INT 110
19259: PUSH
19260: LD_INT 111
19262: PUSH
19263: LD_INT 112
19265: PUSH
19266: LD_INT 113
19268: PUSH
19269: LD_INT 114
19271: PUSH
19272: LD_INT 116
19274: PUSH
19275: LD_INT 117
19277: PUSH
19278: LD_INT 118
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: ST_TO_ADDR
19304: GO 19703
19306: LD_INT 18
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19462
19314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19315: LD_ADDR_VAR 0 2
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: LD_INT 5
19328: PUSH
19329: LD_INT 7
19331: PUSH
19332: LD_INT 11
19334: PUSH
19335: LD_INT 12
19337: PUSH
19338: LD_INT 15
19340: PUSH
19341: LD_INT 16
19343: PUSH
19344: LD_INT 20
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 22
19352: PUSH
19353: LD_INT 23
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 26
19361: PUSH
19362: LD_INT 30
19364: PUSH
19365: LD_INT 31
19367: PUSH
19368: LD_INT 32
19370: PUSH
19371: LD_INT 33
19373: PUSH
19374: LD_INT 34
19376: PUSH
19377: LD_INT 35
19379: PUSH
19380: LD_INT 36
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 101
19408: PUSH
19409: LD_INT 102
19411: PUSH
19412: LD_INT 103
19414: PUSH
19415: LD_INT 106
19417: PUSH
19418: LD_INT 108
19420: PUSH
19421: LD_INT 112
19423: PUSH
19424: LD_INT 113
19426: PUSH
19427: LD_INT 114
19429: PUSH
19430: LD_INT 115
19432: PUSH
19433: LD_INT 116
19435: PUSH
19436: LD_INT 117
19438: PUSH
19439: LD_INT 118
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: ST_TO_ADDR
19460: GO 19703
19462: LD_INT 19
19464: DOUBLE
19465: EQUAL
19466: IFTRUE 19470
19468: GO 19702
19470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: LD_INT 3
19484: PUSH
19485: LD_INT 4
19487: PUSH
19488: LD_INT 5
19490: PUSH
19491: LD_INT 6
19493: PUSH
19494: LD_INT 7
19496: PUSH
19497: LD_INT 8
19499: PUSH
19500: LD_INT 9
19502: PUSH
19503: LD_INT 10
19505: PUSH
19506: LD_INT 11
19508: PUSH
19509: LD_INT 12
19511: PUSH
19512: LD_INT 13
19514: PUSH
19515: LD_INT 14
19517: PUSH
19518: LD_INT 15
19520: PUSH
19521: LD_INT 16
19523: PUSH
19524: LD_INT 17
19526: PUSH
19527: LD_INT 18
19529: PUSH
19530: LD_INT 19
19532: PUSH
19533: LD_INT 20
19535: PUSH
19536: LD_INT 21
19538: PUSH
19539: LD_INT 22
19541: PUSH
19542: LD_INT 23
19544: PUSH
19545: LD_INT 24
19547: PUSH
19548: LD_INT 25
19550: PUSH
19551: LD_INT 26
19553: PUSH
19554: LD_INT 27
19556: PUSH
19557: LD_INT 28
19559: PUSH
19560: LD_INT 29
19562: PUSH
19563: LD_INT 30
19565: PUSH
19566: LD_INT 31
19568: PUSH
19569: LD_INT 32
19571: PUSH
19572: LD_INT 33
19574: PUSH
19575: LD_INT 34
19577: PUSH
19578: LD_INT 35
19580: PUSH
19581: LD_INT 36
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 101
19624: PUSH
19625: LD_INT 102
19627: PUSH
19628: LD_INT 103
19630: PUSH
19631: LD_INT 104
19633: PUSH
19634: LD_INT 105
19636: PUSH
19637: LD_INT 106
19639: PUSH
19640: LD_INT 107
19642: PUSH
19643: LD_INT 108
19645: PUSH
19646: LD_INT 109
19648: PUSH
19649: LD_INT 110
19651: PUSH
19652: LD_INT 111
19654: PUSH
19655: LD_INT 112
19657: PUSH
19658: LD_INT 113
19660: PUSH
19661: LD_INT 114
19663: PUSH
19664: LD_INT 115
19666: PUSH
19667: LD_INT 116
19669: PUSH
19670: LD_INT 117
19672: PUSH
19673: LD_INT 118
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: ST_TO_ADDR
19700: GO 19703
19702: POP
// end else
19703: GO 19934
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: LD_INT 4
19721: PUSH
19722: LD_INT 5
19724: PUSH
19725: LD_INT 6
19727: PUSH
19728: LD_INT 7
19730: PUSH
19731: LD_INT 8
19733: PUSH
19734: LD_INT 9
19736: PUSH
19737: LD_INT 10
19739: PUSH
19740: LD_INT 11
19742: PUSH
19743: LD_INT 12
19745: PUSH
19746: LD_INT 13
19748: PUSH
19749: LD_INT 14
19751: PUSH
19752: LD_INT 15
19754: PUSH
19755: LD_INT 16
19757: PUSH
19758: LD_INT 17
19760: PUSH
19761: LD_INT 18
19763: PUSH
19764: LD_INT 19
19766: PUSH
19767: LD_INT 20
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_INT 23
19778: PUSH
19779: LD_INT 24
19781: PUSH
19782: LD_INT 25
19784: PUSH
19785: LD_INT 26
19787: PUSH
19788: LD_INT 27
19790: PUSH
19791: LD_INT 28
19793: PUSH
19794: LD_INT 29
19796: PUSH
19797: LD_INT 30
19799: PUSH
19800: LD_INT 31
19802: PUSH
19803: LD_INT 32
19805: PUSH
19806: LD_INT 33
19808: PUSH
19809: LD_INT 34
19811: PUSH
19812: LD_INT 35
19814: PUSH
19815: LD_INT 36
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 101
19858: PUSH
19859: LD_INT 102
19861: PUSH
19862: LD_INT 103
19864: PUSH
19865: LD_INT 104
19867: PUSH
19868: LD_INT 105
19870: PUSH
19871: LD_INT 106
19873: PUSH
19874: LD_INT 107
19876: PUSH
19877: LD_INT 108
19879: PUSH
19880: LD_INT 109
19882: PUSH
19883: LD_INT 110
19885: PUSH
19886: LD_INT 111
19888: PUSH
19889: LD_INT 112
19891: PUSH
19892: LD_INT 113
19894: PUSH
19895: LD_INT 114
19897: PUSH
19898: LD_INT 115
19900: PUSH
19901: LD_INT 116
19903: PUSH
19904: LD_INT 117
19906: PUSH
19907: LD_INT 118
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: ST_TO_ADDR
// if result then
19934: LD_VAR 0 2
19938: IFFALSE 20724
// begin normal :=  ;
19940: LD_ADDR_VAR 0 5
19944: PUSH
19945: LD_STRING 
19947: ST_TO_ADDR
// hardcore :=  ;
19948: LD_ADDR_VAR 0 6
19952: PUSH
19953: LD_STRING 
19955: ST_TO_ADDR
// active :=  ;
19956: LD_ADDR_VAR 0 7
19960: PUSH
19961: LD_STRING 
19963: ST_TO_ADDR
// for i = 1 to normalCounter do
19964: LD_ADDR_VAR 0 8
19968: PUSH
19969: DOUBLE
19970: LD_INT 1
19972: DEC
19973: ST_TO_ADDR
19974: LD_EXP 48
19978: PUSH
19979: FOR_TO
19980: IFFALSE 20081
// begin tmp := 0 ;
19982: LD_ADDR_VAR 0 3
19986: PUSH
19987: LD_STRING 0
19989: ST_TO_ADDR
// if result [ 1 ] then
19990: LD_VAR 0 2
19994: PUSH
19995: LD_INT 1
19997: ARRAY
19998: IFFALSE 20063
// if result [ 1 ] [ 1 ] = i then
20000: LD_VAR 0 2
20004: PUSH
20005: LD_INT 1
20007: ARRAY
20008: PUSH
20009: LD_INT 1
20011: ARRAY
20012: PUSH
20013: LD_VAR 0 8
20017: EQUAL
20018: IFFALSE 20063
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20020: LD_ADDR_VAR 0 2
20024: PUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_VAR 0 2
20037: PUSH
20038: LD_INT 1
20040: ARRAY
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: CALL_OW 3
20049: PPUSH
20050: CALL_OW 1
20054: ST_TO_ADDR
// tmp := 1 ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_STRING 1
20062: ST_TO_ADDR
// end ; normal := normal & tmp ;
20063: LD_ADDR_VAR 0 5
20067: PUSH
20068: LD_VAR 0 5
20072: PUSH
20073: LD_VAR 0 3
20077: STR
20078: ST_TO_ADDR
// end ;
20079: GO 19979
20081: POP
20082: POP
// for i = 1 to hardcoreCounter do
20083: LD_ADDR_VAR 0 8
20087: PUSH
20088: DOUBLE
20089: LD_INT 1
20091: DEC
20092: ST_TO_ADDR
20093: LD_EXP 49
20097: PUSH
20098: FOR_TO
20099: IFFALSE 20204
// begin tmp := 0 ;
20101: LD_ADDR_VAR 0 3
20105: PUSH
20106: LD_STRING 0
20108: ST_TO_ADDR
// if result [ 2 ] then
20109: LD_VAR 0 2
20113: PUSH
20114: LD_INT 2
20116: ARRAY
20117: IFFALSE 20186
// if result [ 2 ] [ 1 ] = 100 + i then
20119: LD_VAR 0 2
20123: PUSH
20124: LD_INT 2
20126: ARRAY
20127: PUSH
20128: LD_INT 1
20130: ARRAY
20131: PUSH
20132: LD_INT 100
20134: PUSH
20135: LD_VAR 0 8
20139: PLUS
20140: EQUAL
20141: IFFALSE 20186
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20143: LD_ADDR_VAR 0 2
20147: PUSH
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 2
20155: PPUSH
20156: LD_VAR 0 2
20160: PUSH
20161: LD_INT 2
20163: ARRAY
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 3
20172: PPUSH
20173: CALL_OW 1
20177: ST_TO_ADDR
// tmp := 1 ;
20178: LD_ADDR_VAR 0 3
20182: PUSH
20183: LD_STRING 1
20185: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20186: LD_ADDR_VAR 0 6
20190: PUSH
20191: LD_VAR 0 6
20195: PUSH
20196: LD_VAR 0 3
20200: STR
20201: ST_TO_ADDR
// end ;
20202: GO 20098
20204: POP
20205: POP
// if isGameLoad then
20206: LD_VAR 0 1
20210: IFFALSE 20685
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20212: LD_ADDR_VAR 0 4
20216: PUSH
20217: LD_EXP 52
20221: PUSH
20222: LD_EXP 51
20226: PUSH
20227: LD_EXP 53
20231: PUSH
20232: LD_EXP 50
20236: PUSH
20237: LD_EXP 54
20241: PUSH
20242: LD_EXP 55
20246: PUSH
20247: LD_EXP 56
20251: PUSH
20252: LD_EXP 57
20256: PUSH
20257: LD_EXP 58
20261: PUSH
20262: LD_EXP 59
20266: PUSH
20267: LD_EXP 60
20271: PUSH
20272: LD_EXP 61
20276: PUSH
20277: LD_EXP 62
20281: PUSH
20282: LD_EXP 63
20286: PUSH
20287: LD_EXP 71
20291: PUSH
20292: LD_EXP 72
20296: PUSH
20297: LD_EXP 73
20301: PUSH
20302: LD_EXP 74
20306: PUSH
20307: LD_EXP 76
20311: PUSH
20312: LD_EXP 77
20316: PUSH
20317: LD_EXP 78
20321: PUSH
20322: LD_EXP 81
20326: PUSH
20327: LD_EXP 83
20331: PUSH
20332: LD_EXP 84
20336: PUSH
20337: LD_EXP 85
20341: PUSH
20342: LD_EXP 87
20346: PUSH
20347: LD_EXP 88
20351: PUSH
20352: LD_EXP 91
20356: PUSH
20357: LD_EXP 92
20361: PUSH
20362: LD_EXP 93
20366: PUSH
20367: LD_EXP 94
20371: PUSH
20372: LD_EXP 95
20376: PUSH
20377: LD_EXP 96
20381: PUSH
20382: LD_EXP 97
20386: PUSH
20387: LD_EXP 98
20391: PUSH
20392: LD_EXP 99
20396: PUSH
20397: LD_EXP 64
20401: PUSH
20402: LD_EXP 65
20406: PUSH
20407: LD_EXP 68
20411: PUSH
20412: LD_EXP 69
20416: PUSH
20417: LD_EXP 70
20421: PUSH
20422: LD_EXP 66
20426: PUSH
20427: LD_EXP 67
20431: PUSH
20432: LD_EXP 75
20436: PUSH
20437: LD_EXP 79
20441: PUSH
20442: LD_EXP 80
20446: PUSH
20447: LD_EXP 82
20451: PUSH
20452: LD_EXP 86
20456: PUSH
20457: LD_EXP 89
20461: PUSH
20462: LD_EXP 90
20466: PUSH
20467: LD_EXP 100
20471: PUSH
20472: LD_EXP 101
20476: PUSH
20477: LD_EXP 102
20481: PUSH
20482: LD_EXP 103
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: ST_TO_ADDR
// tmp :=  ;
20543: LD_ADDR_VAR 0 3
20547: PUSH
20548: LD_STRING 
20550: ST_TO_ADDR
// for i = 1 to normalCounter do
20551: LD_ADDR_VAR 0 8
20555: PUSH
20556: DOUBLE
20557: LD_INT 1
20559: DEC
20560: ST_TO_ADDR
20561: LD_EXP 48
20565: PUSH
20566: FOR_TO
20567: IFFALSE 20603
// begin if flags [ i ] then
20569: LD_VAR 0 4
20573: PUSH
20574: LD_VAR 0 8
20578: ARRAY
20579: IFFALSE 20601
// tmp := tmp & i & ; ;
20581: LD_ADDR_VAR 0 3
20585: PUSH
20586: LD_VAR 0 3
20590: PUSH
20591: LD_VAR 0 8
20595: STR
20596: PUSH
20597: LD_STRING ;
20599: STR
20600: ST_TO_ADDR
// end ;
20601: GO 20566
20603: POP
20604: POP
// for i = 1 to hardcoreCounter do
20605: LD_ADDR_VAR 0 8
20609: PUSH
20610: DOUBLE
20611: LD_INT 1
20613: DEC
20614: ST_TO_ADDR
20615: LD_EXP 49
20619: PUSH
20620: FOR_TO
20621: IFFALSE 20667
// begin if flags [ normalCounter + i ] then
20623: LD_VAR 0 4
20627: PUSH
20628: LD_EXP 48
20632: PUSH
20633: LD_VAR 0 8
20637: PLUS
20638: ARRAY
20639: IFFALSE 20665
// tmp := tmp & ( 100 + i ) & ; ;
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: LD_VAR 0 3
20650: PUSH
20651: LD_INT 100
20653: PUSH
20654: LD_VAR 0 8
20658: PLUS
20659: STR
20660: PUSH
20661: LD_STRING ;
20663: STR
20664: ST_TO_ADDR
// end ;
20665: GO 20620
20667: POP
20668: POP
// if tmp then
20669: LD_VAR 0 3
20673: IFFALSE 20685
// active := tmp ;
20675: LD_ADDR_VAR 0 7
20679: PUSH
20680: LD_VAR 0 3
20684: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20685: LD_STRING getStreamItemsFromMission("
20687: PUSH
20688: LD_VAR 0 5
20692: STR
20693: PUSH
20694: LD_STRING ","
20696: STR
20697: PUSH
20698: LD_VAR 0 6
20702: STR
20703: PUSH
20704: LD_STRING ","
20706: STR
20707: PUSH
20708: LD_VAR 0 7
20712: STR
20713: PUSH
20714: LD_STRING ")
20716: STR
20717: PPUSH
20718: CALL_OW 559
// end else
20722: GO 20731
// ToLua ( getStreamItemsFromMission("","","") ) ;
20724: LD_STRING getStreamItemsFromMission("","","")
20726: PPUSH
20727: CALL_OW 559
// end ;
20731: LD_VAR 0 2
20735: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20736: LD_EXP 47
20740: PUSH
20741: LD_EXP 52
20745: AND
20746: IFFALSE 20870
20748: GO 20750
20750: DISABLE
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// begin enable ;
20755: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20756: LD_ADDR_VAR 0 2
20760: PUSH
20761: LD_INT 22
20763: PUSH
20764: LD_OWVAR 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 34
20778: PUSH
20779: LD_INT 7
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 34
20788: PUSH
20789: LD_INT 45
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 34
20798: PUSH
20799: LD_INT 28
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 34
20808: PUSH
20809: LD_INT 47
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: ST_TO_ADDR
// if not tmp then
20832: LD_VAR 0 2
20836: NOT
20837: IFFALSE 20841
// exit ;
20839: GO 20870
// for i in tmp do
20841: LD_ADDR_VAR 0 1
20845: PUSH
20846: LD_VAR 0 2
20850: PUSH
20851: FOR_IN
20852: IFFALSE 20868
// begin SetLives ( i , 0 ) ;
20854: LD_VAR 0 1
20858: PPUSH
20859: LD_INT 0
20861: PPUSH
20862: CALL_OW 234
// end ;
20866: GO 20851
20868: POP
20869: POP
// end ;
20870: PPOPN 2
20872: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20873: LD_EXP 47
20877: PUSH
20878: LD_EXP 53
20882: AND
20883: IFFALSE 20967
20885: GO 20887
20887: DISABLE
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
// begin enable ;
20892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_INT 22
20900: PUSH
20901: LD_OWVAR 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 32
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL_OW 69
20928: ST_TO_ADDR
// if not tmp then
20929: LD_VAR 0 2
20933: NOT
20934: IFFALSE 20938
// exit ;
20936: GO 20967
// for i in tmp do
20938: LD_ADDR_VAR 0 1
20942: PUSH
20943: LD_VAR 0 2
20947: PUSH
20948: FOR_IN
20949: IFFALSE 20965
// begin SetLives ( i , 0 ) ;
20951: LD_VAR 0 1
20955: PPUSH
20956: LD_INT 0
20958: PPUSH
20959: CALL_OW 234
// end ;
20963: GO 20948
20965: POP
20966: POP
// end ;
20967: PPOPN 2
20969: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20970: LD_EXP 47
20974: PUSH
20975: LD_EXP 50
20979: AND
20980: IFFALSE 21073
20982: GO 20984
20984: DISABLE
20985: LD_INT 0
20987: PPUSH
// begin enable ;
20988: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20989: LD_ADDR_VAR 0 1
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 25
21011: PUSH
21012: LD_INT 5
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 25
21021: PUSH
21022: LD_INT 9
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 25
21031: PUSH
21032: LD_INT 8
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PPUSH
21049: CALL_OW 69
21053: PUSH
21054: FOR_IN
21055: IFFALSE 21071
// begin SetClass ( i , 1 ) ;
21057: LD_VAR 0 1
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 336
// end ;
21069: GO 21054
21071: POP
21072: POP
// end ;
21073: PPOPN 1
21075: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21076: LD_EXP 47
21080: PUSH
21081: LD_EXP 51
21085: AND
21086: PUSH
21087: LD_OWVAR 65
21091: PUSH
21092: LD_INT 7
21094: LESS
21095: AND
21096: IFFALSE 21110
21098: GO 21100
21100: DISABLE
// begin enable ;
21101: ENABLE
// game_speed := 7 ;
21102: LD_ADDR_OWVAR 65
21106: PUSH
21107: LD_INT 7
21109: ST_TO_ADDR
// end ;
21110: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21111: LD_EXP 47
21115: PUSH
21116: LD_EXP 54
21120: AND
21121: IFFALSE 21323
21123: GO 21125
21125: DISABLE
21126: LD_INT 0
21128: PPUSH
21129: PPUSH
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21131: LD_ADDR_VAR 0 3
21135: PUSH
21136: LD_INT 81
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 3
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21323
// if tmp > 5 then
21176: LD_VAR 0 3
21180: PUSH
21181: LD_INT 5
21183: GREATER
21184: IFFALSE 21196
// k := 5 else
21186: LD_ADDR_VAR 0 2
21190: PUSH
21191: LD_INT 5
21193: ST_TO_ADDR
21194: GO 21206
// k := tmp ;
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_VAR 0 3
21205: ST_TO_ADDR
// for i := 1 to k do
21206: LD_ADDR_VAR 0 1
21210: PUSH
21211: DOUBLE
21212: LD_INT 1
21214: DEC
21215: ST_TO_ADDR
21216: LD_VAR 0 2
21220: PUSH
21221: FOR_TO
21222: IFFALSE 21321
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21224: LD_VAR 0 3
21228: PUSH
21229: LD_VAR 0 1
21233: ARRAY
21234: PPUSH
21235: LD_VAR 0 1
21239: PUSH
21240: LD_INT 4
21242: MOD
21243: PUSH
21244: LD_INT 1
21246: PLUS
21247: PPUSH
21248: CALL_OW 259
21252: PUSH
21253: LD_INT 10
21255: LESS
21256: IFFALSE 21319
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21258: LD_VAR 0 3
21262: PUSH
21263: LD_VAR 0 1
21267: ARRAY
21268: PPUSH
21269: LD_VAR 0 1
21273: PUSH
21274: LD_INT 4
21276: MOD
21277: PUSH
21278: LD_INT 1
21280: PLUS
21281: PPUSH
21282: LD_VAR 0 3
21286: PUSH
21287: LD_VAR 0 1
21291: ARRAY
21292: PPUSH
21293: LD_VAR 0 1
21297: PUSH
21298: LD_INT 4
21300: MOD
21301: PUSH
21302: LD_INT 1
21304: PLUS
21305: PPUSH
21306: CALL_OW 259
21310: PUSH
21311: LD_INT 1
21313: PLUS
21314: PPUSH
21315: CALL_OW 237
21319: GO 21221
21321: POP
21322: POP
// end ;
21323: PPOPN 3
21325: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21326: LD_EXP 47
21330: PUSH
21331: LD_EXP 55
21335: AND
21336: IFFALSE 21356
21338: GO 21340
21340: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21341: LD_INT 4
21343: PPUSH
21344: LD_OWVAR 2
21348: PPUSH
21349: LD_INT 0
21351: PPUSH
21352: CALL_OW 324
21356: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21357: LD_EXP 47
21361: PUSH
21362: LD_EXP 84
21366: AND
21367: IFFALSE 21387
21369: GO 21371
21371: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21372: LD_INT 19
21374: PPUSH
21375: LD_OWVAR 2
21379: PPUSH
21380: LD_INT 0
21382: PPUSH
21383: CALL_OW 324
21387: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21388: LD_EXP 47
21392: PUSH
21393: LD_EXP 56
21397: AND
21398: IFFALSE 21500
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// begin enable ;
21407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_OWVAR 2
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 34
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 34
21440: PUSH
21441: LD_INT 30
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PPUSH
21457: CALL_OW 69
21461: ST_TO_ADDR
// if not tmp then
21462: LD_VAR 0 2
21466: NOT
21467: IFFALSE 21471
// exit ;
21469: GO 21500
// for i in tmp do
21471: LD_ADDR_VAR 0 1
21475: PUSH
21476: LD_VAR 0 2
21480: PUSH
21481: FOR_IN
21482: IFFALSE 21498
// begin SetLives ( i , 0 ) ;
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_INT 0
21491: PPUSH
21492: CALL_OW 234
// end ;
21496: GO 21481
21498: POP
21499: POP
// end ;
21500: PPOPN 2
21502: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21503: LD_EXP 47
21507: PUSH
21508: LD_EXP 57
21512: AND
21513: IFFALSE 21533
21515: GO 21517
21517: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21518: LD_INT 32
21520: PPUSH
21521: LD_OWVAR 2
21525: PPUSH
21526: LD_INT 0
21528: PPUSH
21529: CALL_OW 324
21533: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21534: LD_EXP 47
21538: PUSH
21539: LD_EXP 58
21543: AND
21544: IFFALSE 21725
21546: GO 21548
21548: DISABLE
21549: LD_INT 0
21551: PPUSH
21552: PPUSH
21553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21554: LD_ADDR_VAR 0 2
21558: PUSH
21559: LD_INT 22
21561: PUSH
21562: LD_OWVAR 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 33
21573: PUSH
21574: LD_INT 3
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PPUSH
21585: CALL_OW 69
21589: ST_TO_ADDR
// if not tmp then
21590: LD_VAR 0 2
21594: NOT
21595: IFFALSE 21599
// exit ;
21597: GO 21725
// side := 0 ;
21599: LD_ADDR_VAR 0 3
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// for i := 1 to 8 do
21607: LD_ADDR_VAR 0 1
21611: PUSH
21612: DOUBLE
21613: LD_INT 1
21615: DEC
21616: ST_TO_ADDR
21617: LD_INT 8
21619: PUSH
21620: FOR_TO
21621: IFFALSE 21669
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21623: LD_OWVAR 2
21627: PUSH
21628: LD_VAR 0 1
21632: NONEQUAL
21633: PUSH
21634: LD_OWVAR 2
21638: PPUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 81
21648: PUSH
21649: LD_INT 2
21651: EQUAL
21652: AND
21653: IFFALSE 21667
// begin side := i ;
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_VAR 0 1
21664: ST_TO_ADDR
// break ;
21665: GO 21669
// end ;
21667: GO 21620
21669: POP
21670: POP
// if not side then
21671: LD_VAR 0 3
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 21725
// for i := 1 to tmp do
21680: LD_ADDR_VAR 0 1
21684: PUSH
21685: DOUBLE
21686: LD_INT 1
21688: DEC
21689: ST_TO_ADDR
21690: LD_VAR 0 2
21694: PUSH
21695: FOR_TO
21696: IFFALSE 21723
// if Prob ( 60 ) then
21698: LD_INT 60
21700: PPUSH
21701: CALL_OW 13
21705: IFFALSE 21721
// SetSide ( i , side ) ;
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: CALL_OW 235
21721: GO 21695
21723: POP
21724: POP
// end ;
21725: PPOPN 3
21727: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21728: LD_EXP 47
21732: PUSH
21733: LD_EXP 60
21737: AND
21738: IFFALSE 21857
21740: GO 21742
21742: DISABLE
21743: LD_INT 0
21745: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21746: LD_ADDR_VAR 0 1
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_OWVAR 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 21
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: LD_INT 23
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: PUSH
21800: FOR_IN
21801: IFFALSE 21855
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL_OW 257
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 3
21821: PUSH
21822: LD_INT 4
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: IN
21831: IFFALSE 21853
// SetClass ( un , rand ( 1 , 4 ) ) ;
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_INT 1
21840: PPUSH
21841: LD_INT 4
21843: PPUSH
21844: CALL_OW 12
21848: PPUSH
21849: CALL_OW 336
21853: GO 21800
21855: POP
21856: POP
// end ;
21857: PPOPN 1
21859: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21860: LD_EXP 47
21864: PUSH
21865: LD_EXP 59
21869: AND
21870: IFFALSE 21949
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21878: LD_ADDR_VAR 0 1
21882: PUSH
21883: LD_INT 22
21885: PUSH
21886: LD_OWVAR 2
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: ST_TO_ADDR
// if not tmp then
21914: LD_VAR 0 1
21918: NOT
21919: IFFALSE 21923
// exit ;
21921: GO 21949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21923: LD_VAR 0 1
21927: PUSH
21928: LD_INT 1
21930: PPUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 12
21940: ARRAY
21941: PPUSH
21942: LD_INT 100
21944: PPUSH
21945: CALL_OW 234
// end ;
21949: PPOPN 1
21951: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21952: LD_EXP 47
21956: PUSH
21957: LD_EXP 61
21961: AND
21962: IFFALSE 22060
21964: GO 21966
21966: DISABLE
21967: LD_INT 0
21969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21970: LD_ADDR_VAR 0 1
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_OWVAR 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 21
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: ST_TO_ADDR
// if not tmp then
22006: LD_VAR 0 1
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22060
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22015: LD_VAR 0 1
22019: PUSH
22020: LD_INT 1
22022: PPUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 12
22032: ARRAY
22033: PPUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_INT 4
22039: PPUSH
22040: CALL_OW 12
22044: PPUSH
22045: LD_INT 3000
22047: PPUSH
22048: LD_INT 9000
22050: PPUSH
22051: CALL_OW 12
22055: PPUSH
22056: CALL_OW 492
// end ;
22060: PPOPN 1
22062: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22063: LD_EXP 47
22067: PUSH
22068: LD_EXP 62
22072: AND
22073: IFFALSE 22093
22075: GO 22077
22077: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22078: LD_INT 1
22080: PPUSH
22081: LD_OWVAR 2
22085: PPUSH
22086: LD_INT 0
22088: PPUSH
22089: CALL_OW 324
22093: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22094: LD_EXP 47
22098: PUSH
22099: LD_EXP 63
22103: AND
22104: IFFALSE 22187
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_OWVAR 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 21
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PPUSH
22144: CALL_OW 69
22148: ST_TO_ADDR
// if not tmp then
22149: LD_VAR 0 2
22153: NOT
22154: IFFALSE 22158
// exit ;
22156: GO 22187
// for i in tmp do
22158: LD_ADDR_VAR 0 1
22162: PUSH
22163: LD_VAR 0 2
22167: PUSH
22168: FOR_IN
22169: IFFALSE 22185
// SetBLevel ( i , 10 ) ;
22171: LD_VAR 0 1
22175: PPUSH
22176: LD_INT 10
22178: PPUSH
22179: CALL_OW 241
22183: GO 22168
22185: POP
22186: POP
// end ;
22187: PPOPN 2
22189: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22190: LD_EXP 47
22194: PUSH
22195: LD_EXP 64
22199: AND
22200: IFFALSE 22311
22202: GO 22204
22204: DISABLE
22205: LD_INT 0
22207: PPUSH
22208: PPUSH
22209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22210: LD_ADDR_VAR 0 3
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_OWVAR 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 25
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PPUSH
22241: CALL_OW 69
22245: ST_TO_ADDR
// if not tmp then
22246: LD_VAR 0 3
22250: NOT
22251: IFFALSE 22255
// exit ;
22253: GO 22311
// un := tmp [ rand ( 1 , tmp ) ] ;
22255: LD_ADDR_VAR 0 2
22259: PUSH
22260: LD_VAR 0 3
22264: PUSH
22265: LD_INT 1
22267: PPUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: CALL_OW 12
22277: ARRAY
22278: ST_TO_ADDR
// if Crawls ( un ) then
22279: LD_VAR 0 2
22283: PPUSH
22284: CALL_OW 318
22288: IFFALSE 22299
// ComWalk ( un ) ;
22290: LD_VAR 0 2
22294: PPUSH
22295: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22299: LD_VAR 0 2
22303: PPUSH
22304: LD_INT 5
22306: PPUSH
22307: CALL_OW 336
// end ;
22311: PPOPN 3
22313: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22314: LD_EXP 47
22318: PUSH
22319: LD_EXP 65
22323: AND
22324: PUSH
22325: LD_OWVAR 67
22329: PUSH
22330: LD_INT 4
22332: LESS
22333: AND
22334: IFFALSE 22353
22336: GO 22338
22338: DISABLE
// begin Difficulty := Difficulty + 1 ;
22339: LD_ADDR_OWVAR 67
22343: PUSH
22344: LD_OWVAR 67
22348: PUSH
22349: LD_INT 1
22351: PLUS
22352: ST_TO_ADDR
// end ;
22353: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22354: LD_EXP 47
22358: PUSH
22359: LD_EXP 66
22363: AND
22364: IFFALSE 22467
22366: GO 22368
22368: DISABLE
22369: LD_INT 0
22371: PPUSH
// begin for i := 1 to 5 do
22372: LD_ADDR_VAR 0 1
22376: PUSH
22377: DOUBLE
22378: LD_INT 1
22380: DEC
22381: ST_TO_ADDR
22382: LD_INT 5
22384: PUSH
22385: FOR_TO
22386: IFFALSE 22465
// begin uc_nation := nation_nature ;
22388: LD_ADDR_OWVAR 21
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
// uc_side := 0 ;
22396: LD_ADDR_OWVAR 20
22400: PUSH
22401: LD_INT 0
22403: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22404: LD_ADDR_OWVAR 29
22408: PUSH
22409: LD_INT 12
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: ST_TO_ADDR
// hc_agressivity := 20 ;
22419: LD_ADDR_OWVAR 35
22423: PUSH
22424: LD_INT 20
22426: ST_TO_ADDR
// hc_class := class_tiger ;
22427: LD_ADDR_OWVAR 28
22431: PUSH
22432: LD_INT 14
22434: ST_TO_ADDR
// hc_gallery :=  ;
22435: LD_ADDR_OWVAR 33
22439: PUSH
22440: LD_STRING 
22442: ST_TO_ADDR
// hc_name :=  ;
22443: LD_ADDR_OWVAR 26
22447: PUSH
22448: LD_STRING 
22450: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22451: CALL_OW 44
22455: PPUSH
22456: LD_INT 0
22458: PPUSH
22459: CALL_OW 51
// end ;
22463: GO 22385
22465: POP
22466: POP
// end ;
22467: PPOPN 1
22469: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22470: LD_EXP 47
22474: PUSH
22475: LD_EXP 67
22479: AND
22480: IFFALSE 22489
22482: GO 22484
22484: DISABLE
// StreamSibBomb ;
22485: CALL 22490 0 0
22489: END
// export function StreamSibBomb ; var i , x , y ; begin
22490: LD_INT 0
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
// result := false ;
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: LD_INT 0
22503: ST_TO_ADDR
// for i := 1 to 16 do
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: DOUBLE
22510: LD_INT 1
22512: DEC
22513: ST_TO_ADDR
22514: LD_INT 16
22516: PUSH
22517: FOR_TO
22518: IFFALSE 22717
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22520: LD_ADDR_VAR 0 3
22524: PUSH
22525: LD_INT 10
22527: PUSH
22528: LD_INT 20
22530: PUSH
22531: LD_INT 30
22533: PUSH
22534: LD_INT 40
22536: PUSH
22537: LD_INT 50
22539: PUSH
22540: LD_INT 60
22542: PUSH
22543: LD_INT 70
22545: PUSH
22546: LD_INT 80
22548: PUSH
22549: LD_INT 90
22551: PUSH
22552: LD_INT 100
22554: PUSH
22555: LD_INT 110
22557: PUSH
22558: LD_INT 120
22560: PUSH
22561: LD_INT 130
22563: PUSH
22564: LD_INT 140
22566: PUSH
22567: LD_INT 150
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: PPUSH
22590: LD_INT 15
22592: PPUSH
22593: CALL_OW 12
22597: ARRAY
22598: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22599: LD_ADDR_VAR 0 4
22603: PUSH
22604: LD_INT 10
22606: PUSH
22607: LD_INT 20
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 40
22615: PUSH
22616: LD_INT 50
22618: PUSH
22619: LD_INT 60
22621: PUSH
22622: LD_INT 70
22624: PUSH
22625: LD_INT 80
22627: PUSH
22628: LD_INT 90
22630: PUSH
22631: LD_INT 100
22633: PUSH
22634: LD_INT 110
22636: PUSH
22637: LD_INT 120
22639: PUSH
22640: LD_INT 130
22642: PUSH
22643: LD_INT 140
22645: PUSH
22646: LD_INT 150
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 1
22668: PPUSH
22669: LD_INT 15
22671: PPUSH
22672: CALL_OW 12
22676: ARRAY
22677: ST_TO_ADDR
// if ValidHex ( x , y ) then
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_VAR 0 4
22687: PPUSH
22688: CALL_OW 488
22692: IFFALSE 22715
// begin result := [ x , y ] ;
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_VAR 0 3
22703: PUSH
22704: LD_VAR 0 4
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: ST_TO_ADDR
// break ;
22713: GO 22717
// end ; end ;
22715: GO 22517
22717: POP
22718: POP
// if result then
22719: LD_VAR 0 1
22723: IFFALSE 22783
// begin ToLua ( playSibBomb() ) ;
22725: LD_STRING playSibBomb()
22727: PPUSH
22728: CALL_OW 559
// wait ( 0 0$14 ) ;
22732: LD_INT 490
22734: PPUSH
22735: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22739: LD_VAR 0 1
22743: PUSH
22744: LD_INT 1
22746: ARRAY
22747: PPUSH
22748: LD_VAR 0 1
22752: PUSH
22753: LD_INT 2
22755: ARRAY
22756: PPUSH
22757: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 1
22768: ARRAY
22769: PPUSH
22770: LD_VAR 0 1
22774: PUSH
22775: LD_INT 2
22777: ARRAY
22778: PPUSH
22779: CALL_OW 429
// end ; end ;
22783: LD_VAR 0 1
22787: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22788: LD_EXP 47
22792: PUSH
22793: LD_EXP 69
22797: AND
22798: IFFALSE 22810
22800: GO 22802
22802: DISABLE
// YouLost (  ) ;
22803: LD_STRING 
22805: PPUSH
22806: CALL_OW 104
22810: END
// every 0 0$1 trigger StreamModeActive and sFog do
22811: LD_EXP 47
22815: PUSH
22816: LD_EXP 68
22820: AND
22821: IFFALSE 22835
22823: GO 22825
22825: DISABLE
// FogOff ( your_side ) ;
22826: LD_OWVAR 2
22830: PPUSH
22831: CALL_OW 344
22835: END
// every 0 0$1 trigger StreamModeActive and sSun do
22836: LD_EXP 47
22840: PUSH
22841: LD_EXP 70
22845: AND
22846: IFFALSE 22874
22848: GO 22850
22850: DISABLE
// begin solar_recharge_percent := 0 ;
22851: LD_ADDR_OWVAR 79
22855: PUSH
22856: LD_INT 0
22858: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22859: LD_INT 10500
22861: PPUSH
22862: CALL_OW 67
// solar_recharge_percent := 100 ;
22866: LD_ADDR_OWVAR 79
22870: PUSH
22871: LD_INT 100
22873: ST_TO_ADDR
// end ;
22874: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22875: LD_EXP 47
22879: PUSH
22880: LD_EXP 71
22884: AND
22885: IFFALSE 23124
22887: GO 22889
22889: DISABLE
22890: LD_INT 0
22892: PPUSH
22893: PPUSH
22894: PPUSH
// begin tmp := [ ] ;
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: EMPTY
22901: ST_TO_ADDR
// for i := 1 to 6 do
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: DOUBLE
22908: LD_INT 1
22910: DEC
22911: ST_TO_ADDR
22912: LD_INT 6
22914: PUSH
22915: FOR_TO
22916: IFFALSE 23021
// begin uc_nation := nation_nature ;
22918: LD_ADDR_OWVAR 21
22922: PUSH
22923: LD_INT 0
22925: ST_TO_ADDR
// uc_side := 0 ;
22926: LD_ADDR_OWVAR 20
22930: PUSH
22931: LD_INT 0
22933: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22934: LD_ADDR_OWVAR 29
22938: PUSH
22939: LD_INT 12
22941: PUSH
22942: LD_INT 12
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: ST_TO_ADDR
// hc_agressivity := 20 ;
22949: LD_ADDR_OWVAR 35
22953: PUSH
22954: LD_INT 20
22956: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22957: LD_ADDR_OWVAR 28
22961: PUSH
22962: LD_INT 17
22964: ST_TO_ADDR
// hc_gallery :=  ;
22965: LD_ADDR_OWVAR 33
22969: PUSH
22970: LD_STRING 
22972: ST_TO_ADDR
// hc_name :=  ;
22973: LD_ADDR_OWVAR 26
22977: PUSH
22978: LD_STRING 
22980: ST_TO_ADDR
// un := CreateHuman ;
22981: LD_ADDR_VAR 0 2
22985: PUSH
22986: CALL_OW 44
22990: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22991: LD_VAR 0 2
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 51
// tmp := tmp ^ un ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 2
23017: ADD
23018: ST_TO_ADDR
// end ;
23019: GO 22915
23021: POP
23022: POP
// repeat wait ( 0 0$1 ) ;
23023: LD_INT 35
23025: PPUSH
23026: CALL_OW 67
// for un in tmp do
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_VAR 0 3
23039: PUSH
23040: FOR_IN
23041: IFFALSE 23115
// begin if IsDead ( un ) then
23043: LD_VAR 0 2
23047: PPUSH
23048: CALL_OW 301
23052: IFFALSE 23072
// begin tmp := tmp diff un ;
23054: LD_ADDR_VAR 0 3
23058: PUSH
23059: LD_VAR 0 3
23063: PUSH
23064: LD_VAR 0 2
23068: DIFF
23069: ST_TO_ADDR
// continue ;
23070: GO 23040
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23072: LD_VAR 0 2
23076: PPUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 22
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: PPUSH
23099: LD_VAR 0 2
23103: PPUSH
23104: CALL_OW 74
23108: PPUSH
23109: CALL_OW 115
// end ;
23113: GO 23040
23115: POP
23116: POP
// until not tmp ;
23117: LD_VAR 0 3
23121: NOT
23122: IFFALSE 23023
// end ;
23124: PPOPN 3
23126: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23127: LD_EXP 47
23131: PUSH
23132: LD_EXP 72
23136: AND
23137: IFFALSE 23191
23139: GO 23141
23141: DISABLE
// begin ToLua ( displayTroll(); ) ;
23142: LD_STRING displayTroll();
23144: PPUSH
23145: CALL_OW 559
// wait ( 3 3$00 ) ;
23149: LD_INT 6300
23151: PPUSH
23152: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23156: LD_STRING hideTroll();
23158: PPUSH
23159: CALL_OW 559
// wait ( 1 1$00 ) ;
23163: LD_INT 2100
23165: PPUSH
23166: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23170: LD_STRING displayTroll();
23172: PPUSH
23173: CALL_OW 559
// wait ( 1 1$00 ) ;
23177: LD_INT 2100
23179: PPUSH
23180: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23184: LD_STRING hideTroll();
23186: PPUSH
23187: CALL_OW 559
// end ;
23191: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23192: LD_EXP 47
23196: PUSH
23197: LD_EXP 73
23201: AND
23202: IFFALSE 23265
23204: GO 23206
23206: DISABLE
23207: LD_INT 0
23209: PPUSH
// begin p := 0 ;
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_INT 0
23217: ST_TO_ADDR
// repeat game_speed := 1 ;
23218: LD_ADDR_OWVAR 65
23222: PUSH
23223: LD_INT 1
23225: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23226: LD_INT 35
23228: PPUSH
23229: CALL_OW 67
// p := p + 1 ;
23233: LD_ADDR_VAR 0 1
23237: PUSH
23238: LD_VAR 0 1
23242: PUSH
23243: LD_INT 1
23245: PLUS
23246: ST_TO_ADDR
// until p >= 60 ;
23247: LD_VAR 0 1
23251: PUSH
23252: LD_INT 60
23254: GREATEREQUAL
23255: IFFALSE 23218
// game_speed := 4 ;
23257: LD_ADDR_OWVAR 65
23261: PUSH
23262: LD_INT 4
23264: ST_TO_ADDR
// end ;
23265: PPOPN 1
23267: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23268: LD_EXP 47
23272: PUSH
23273: LD_EXP 74
23277: AND
23278: IFFALSE 23424
23280: GO 23282
23282: DISABLE
23283: LD_INT 0
23285: PPUSH
23286: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23287: LD_ADDR_VAR 0 1
23291: PUSH
23292: LD_INT 22
23294: PUSH
23295: LD_OWVAR 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 30
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 30
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 69
23340: ST_TO_ADDR
// if not depot then
23341: LD_VAR 0 1
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23424
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23350: LD_ADDR_VAR 0 2
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: LD_INT 1
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 12
23372: ARRAY
23373: PPUSH
23374: CALL_OW 274
23378: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23379: LD_VAR 0 2
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: LD_INT 0
23389: PPUSH
23390: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_INT 2
23401: PPUSH
23402: LD_INT 0
23404: PPUSH
23405: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23409: LD_VAR 0 2
23413: PPUSH
23414: LD_INT 3
23416: PPUSH
23417: LD_INT 0
23419: PPUSH
23420: CALL_OW 277
// end ;
23424: PPOPN 2
23426: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23427: LD_EXP 47
23431: PUSH
23432: LD_EXP 75
23436: AND
23437: IFFALSE 23534
23439: GO 23441
23441: DISABLE
23442: LD_INT 0
23444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23445: LD_ADDR_VAR 0 1
23449: PUSH
23450: LD_INT 22
23452: PUSH
23453: LD_OWVAR 2
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 21
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 3
23474: PUSH
23475: LD_INT 23
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: PPUSH
23494: CALL_OW 69
23498: ST_TO_ADDR
// if not tmp then
23499: LD_VAR 0 1
23503: NOT
23504: IFFALSE 23508
// exit ;
23506: GO 23534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23508: LD_VAR 0 1
23512: PUSH
23513: LD_INT 1
23515: PPUSH
23516: LD_VAR 0 1
23520: PPUSH
23521: CALL_OW 12
23525: ARRAY
23526: PPUSH
23527: LD_INT 200
23529: PPUSH
23530: CALL_OW 234
// end ;
23534: PPOPN 1
23536: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23537: LD_EXP 47
23541: PUSH
23542: LD_EXP 76
23546: AND
23547: IFFALSE 23626
23549: GO 23551
23551: DISABLE
23552: LD_INT 0
23554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23555: LD_ADDR_VAR 0 1
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_OWVAR 2
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 21
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 69
23590: ST_TO_ADDR
// if not tmp then
23591: LD_VAR 0 1
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23600: LD_VAR 0 1
23604: PUSH
23605: LD_INT 1
23607: PPUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 12
23617: ARRAY
23618: PPUSH
23619: LD_INT 60
23621: PPUSH
23622: CALL_OW 234
// end ;
23626: PPOPN 1
23628: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23629: LD_EXP 47
23633: PUSH
23634: LD_EXP 77
23638: AND
23639: IFFALSE 23738
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
// begin enable ;
23648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23649: LD_ADDR_VAR 0 1
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_OWVAR 2
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 61
23668: PUSH
23669: EMPTY
23670: LIST
23671: PUSH
23672: LD_INT 33
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PPUSH
23687: CALL_OW 69
23691: ST_TO_ADDR
// if not tmp then
23692: LD_VAR 0 1
23696: NOT
23697: IFFALSE 23701
// exit ;
23699: GO 23738
// for i in tmp do
23701: LD_ADDR_VAR 0 2
23705: PUSH
23706: LD_VAR 0 1
23710: PUSH
23711: FOR_IN
23712: IFFALSE 23736
// if IsControledBy ( i ) then
23714: LD_VAR 0 2
23718: PPUSH
23719: CALL_OW 312
23723: IFFALSE 23734
// ComUnlink ( i ) ;
23725: LD_VAR 0 2
23729: PPUSH
23730: CALL_OW 136
23734: GO 23711
23736: POP
23737: POP
// end ;
23738: PPOPN 2
23740: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23741: LD_EXP 47
23745: PUSH
23746: LD_EXP 78
23750: AND
23751: IFFALSE 23891
23753: GO 23755
23755: DISABLE
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
// begin ToLua ( displayPowell(); ) ;
23760: LD_STRING displayPowell();
23762: PPUSH
23763: CALL_OW 559
// uc_side := 0 ;
23767: LD_ADDR_OWVAR 20
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// uc_nation := 2 ;
23775: LD_ADDR_OWVAR 21
23779: PUSH
23780: LD_INT 2
23782: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23783: LD_ADDR_OWVAR 37
23787: PUSH
23788: LD_INT 14
23790: ST_TO_ADDR
// vc_engine := engine_siberite ;
23791: LD_ADDR_OWVAR 39
23795: PUSH
23796: LD_INT 3
23798: ST_TO_ADDR
// vc_control := control_apeman ;
23799: LD_ADDR_OWVAR 38
23803: PUSH
23804: LD_INT 5
23806: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23807: LD_ADDR_OWVAR 40
23811: PUSH
23812: LD_INT 29
23814: ST_TO_ADDR
// un := CreateVehicle ;
23815: LD_ADDR_VAR 0 2
23819: PUSH
23820: CALL_OW 45
23824: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23825: LD_VAR 0 2
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23837: LD_INT 35
23839: PPUSH
23840: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23844: LD_VAR 0 2
23848: PPUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: PPUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: CALL_OW 74
23875: PPUSH
23876: CALL_OW 115
// until IsDead ( un ) ;
23880: LD_VAR 0 2
23884: PPUSH
23885: CALL_OW 301
23889: IFFALSE 23837
// end ;
23891: PPOPN 2
23893: END
// every 0 0$1 trigger StreamModeActive and sStu do
23894: LD_EXP 47
23898: PUSH
23899: LD_EXP 86
23903: AND
23904: IFFALSE 23920
23906: GO 23908
23908: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23909: LD_STRING displayStucuk();
23911: PPUSH
23912: CALL_OW 559
// ResetFog ;
23916: CALL_OW 335
// end ;
23920: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23921: LD_EXP 47
23925: PUSH
23926: LD_EXP 79
23930: AND
23931: IFFALSE 24072
23933: GO 23935
23935: DISABLE
23936: LD_INT 0
23938: PPUSH
23939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23940: LD_ADDR_VAR 0 2
23944: PUSH
23945: LD_INT 22
23947: PUSH
23948: LD_OWVAR 2
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 21
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PPUSH
23971: CALL_OW 69
23975: ST_TO_ADDR
// if not tmp then
23976: LD_VAR 0 2
23980: NOT
23981: IFFALSE 23985
// exit ;
23983: GO 24072
// un := tmp [ rand ( 1 , tmp ) ] ;
23985: LD_ADDR_VAR 0 1
23989: PUSH
23990: LD_VAR 0 2
23994: PUSH
23995: LD_INT 1
23997: PPUSH
23998: LD_VAR 0 2
24002: PPUSH
24003: CALL_OW 12
24007: ARRAY
24008: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_INT 0
24016: PPUSH
24017: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24021: LD_VAR 0 1
24025: PPUSH
24026: LD_OWVAR 3
24030: PUSH
24031: LD_VAR 0 1
24035: DIFF
24036: PPUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: CALL_OW 74
24046: PPUSH
24047: CALL_OW 115
// wait ( 0 0$20 ) ;
24051: LD_INT 700
24053: PPUSH
24054: CALL_OW 67
// SetSide ( un , your_side ) ;
24058: LD_VAR 0 1
24062: PPUSH
24063: LD_OWVAR 2
24067: PPUSH
24068: CALL_OW 235
// end ;
24072: PPOPN 2
24074: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24075: LD_EXP 47
24079: PUSH
24080: LD_EXP 80
24084: AND
24085: IFFALSE 24191
24087: GO 24089
24089: DISABLE
24090: LD_INT 0
24092: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24093: LD_ADDR_VAR 0 1
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_OWVAR 2
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 30
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 30
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PPUSH
24142: CALL_OW 69
24146: ST_TO_ADDR
// if not depot then
24147: LD_VAR 0 1
24151: NOT
24152: IFFALSE 24156
// exit ;
24154: GO 24191
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24156: LD_VAR 0 1
24160: PUSH
24161: LD_INT 1
24163: ARRAY
24164: PPUSH
24165: CALL_OW 250
24169: PPUSH
24170: LD_VAR 0 1
24174: PUSH
24175: LD_INT 1
24177: ARRAY
24178: PPUSH
24179: CALL_OW 251
24183: PPUSH
24184: LD_INT 70
24186: PPUSH
24187: CALL_OW 495
// end ;
24191: PPOPN 1
24193: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24194: LD_EXP 47
24198: PUSH
24199: LD_EXP 81
24203: AND
24204: IFFALSE 24415
24206: GO 24208
24208: DISABLE
24209: LD_INT 0
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24216: LD_ADDR_VAR 0 5
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_OWVAR 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 21
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: ST_TO_ADDR
// if not tmp then
24252: LD_VAR 0 5
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24415
// for i in tmp do
24261: LD_ADDR_VAR 0 1
24265: PUSH
24266: LD_VAR 0 5
24270: PUSH
24271: FOR_IN
24272: IFFALSE 24413
// begin d := rand ( 0 , 5 ) ;
24274: LD_ADDR_VAR 0 4
24278: PUSH
24279: LD_INT 0
24281: PPUSH
24282: LD_INT 5
24284: PPUSH
24285: CALL_OW 12
24289: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24290: LD_ADDR_VAR 0 2
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 250
24304: PPUSH
24305: LD_VAR 0 4
24309: PPUSH
24310: LD_INT 3
24312: PPUSH
24313: LD_INT 12
24315: PPUSH
24316: CALL_OW 12
24320: PPUSH
24321: CALL_OW 272
24325: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24326: LD_ADDR_VAR 0 3
24330: PUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 251
24340: PPUSH
24341: LD_VAR 0 4
24345: PPUSH
24346: LD_INT 3
24348: PPUSH
24349: LD_INT 12
24351: PPUSH
24352: CALL_OW 12
24356: PPUSH
24357: CALL_OW 273
24361: ST_TO_ADDR
// if ValidHex ( x , y ) then
24362: LD_VAR 0 2
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL_OW 488
24376: IFFALSE 24411
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_VAR 0 2
24387: PPUSH
24388: LD_VAR 0 3
24392: PPUSH
24393: LD_INT 3
24395: PPUSH
24396: LD_INT 6
24398: PPUSH
24399: CALL_OW 12
24403: PPUSH
24404: LD_INT 1
24406: PPUSH
24407: CALL_OW 483
// end ;
24411: GO 24271
24413: POP
24414: POP
// end ;
24415: PPOPN 5
24417: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24418: LD_EXP 47
24422: PUSH
24423: LD_EXP 82
24427: AND
24428: IFFALSE 24522
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 32
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 21
24466: PUSH
24467: LD_INT 2
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: PPUSH
24479: CALL_OW 69
24483: ST_TO_ADDR
// if not tmp then
24484: LD_VAR 0 2
24488: NOT
24489: IFFALSE 24493
// exit ;
24491: GO 24522
// for i in tmp do
24493: LD_ADDR_VAR 0 1
24497: PUSH
24498: LD_VAR 0 2
24502: PUSH
24503: FOR_IN
24504: IFFALSE 24520
// SetFuel ( i , 0 ) ;
24506: LD_VAR 0 1
24510: PPUSH
24511: LD_INT 0
24513: PPUSH
24514: CALL_OW 240
24518: GO 24503
24520: POP
24521: POP
// end ;
24522: PPOPN 2
24524: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24525: LD_EXP 47
24529: PUSH
24530: LD_EXP 83
24534: AND
24535: IFFALSE 24601
24537: GO 24539
24539: DISABLE
24540: LD_INT 0
24542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24543: LD_ADDR_VAR 0 1
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 30
24562: PUSH
24563: LD_INT 29
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 69
24578: ST_TO_ADDR
// if not tmp then
24579: LD_VAR 0 1
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 24601
// DestroyUnit ( tmp [ 1 ] ) ;
24588: LD_VAR 0 1
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: PPUSH
24597: CALL_OW 65
// end ;
24601: PPOPN 1
24603: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24604: LD_EXP 47
24608: PUSH
24609: LD_EXP 85
24613: AND
24614: IFFALSE 24743
24616: GO 24618
24618: DISABLE
24619: LD_INT 0
24621: PPUSH
// begin uc_side := 0 ;
24622: LD_ADDR_OWVAR 20
24626: PUSH
24627: LD_INT 0
24629: ST_TO_ADDR
// uc_nation := nation_arabian ;
24630: LD_ADDR_OWVAR 21
24634: PUSH
24635: LD_INT 2
24637: ST_TO_ADDR
// hc_gallery :=  ;
24638: LD_ADDR_OWVAR 33
24642: PUSH
24643: LD_STRING 
24645: ST_TO_ADDR
// hc_name :=  ;
24646: LD_ADDR_OWVAR 26
24650: PUSH
24651: LD_STRING 
24653: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24654: LD_INT 1
24656: PPUSH
24657: LD_INT 11
24659: PPUSH
24660: LD_INT 10
24662: PPUSH
24663: CALL_OW 380
// un := CreateHuman ;
24667: LD_ADDR_VAR 0 1
24671: PUSH
24672: CALL_OW 44
24676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24677: LD_VAR 0 1
24681: PPUSH
24682: LD_INT 1
24684: PPUSH
24685: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24689: LD_INT 35
24691: PPUSH
24692: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24696: LD_VAR 0 1
24700: PPUSH
24701: LD_INT 22
24703: PUSH
24704: LD_OWVAR 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PPUSH
24713: CALL_OW 69
24717: PPUSH
24718: LD_VAR 0 1
24722: PPUSH
24723: CALL_OW 74
24727: PPUSH
24728: CALL_OW 115
// until IsDead ( un ) ;
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 301
24741: IFFALSE 24689
// end ;
24743: PPOPN 1
24745: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24746: LD_EXP 47
24750: PUSH
24751: LD_EXP 87
24755: AND
24756: IFFALSE 24768
24758: GO 24760
24760: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24761: LD_STRING earthquake(getX(game), 0, 32)
24763: PPUSH
24764: CALL_OW 559
24768: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24769: LD_EXP 47
24773: PUSH
24774: LD_EXP 88
24778: AND
24779: IFFALSE 24870
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
// begin enable ;
24787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24788: LD_ADDR_VAR 0 1
24792: PUSH
24793: LD_INT 22
24795: PUSH
24796: LD_OWVAR 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 33
24817: PUSH
24818: LD_INT 3
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: PPUSH
24830: CALL_OW 69
24834: ST_TO_ADDR
// if not tmp then
24835: LD_VAR 0 1
24839: NOT
24840: IFFALSE 24844
// exit ;
24842: GO 24870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24844: LD_VAR 0 1
24848: PUSH
24849: LD_INT 1
24851: PPUSH
24852: LD_VAR 0 1
24856: PPUSH
24857: CALL_OW 12
24861: ARRAY
24862: PPUSH
24863: LD_INT 1
24865: PPUSH
24866: CALL_OW 234
// end ;
24870: PPOPN 1
24872: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24873: LD_EXP 47
24877: PUSH
24878: LD_EXP 89
24882: AND
24883: IFFALSE 25024
24885: GO 24887
24887: DISABLE
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24893: LD_ADDR_VAR 0 3
24897: PUSH
24898: LD_INT 22
24900: PUSH
24901: LD_OWVAR 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 25
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PPUSH
24924: CALL_OW 69
24928: ST_TO_ADDR
// if not tmp then
24929: LD_VAR 0 3
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 25024
// un := tmp [ rand ( 1 , tmp ) ] ;
24938: LD_ADDR_VAR 0 2
24942: PUSH
24943: LD_VAR 0 3
24947: PUSH
24948: LD_INT 1
24950: PPUSH
24951: LD_VAR 0 3
24955: PPUSH
24956: CALL_OW 12
24960: ARRAY
24961: ST_TO_ADDR
// if Crawls ( un ) then
24962: LD_VAR 0 2
24966: PPUSH
24967: CALL_OW 318
24971: IFFALSE 24982
// ComWalk ( un ) ;
24973: LD_VAR 0 2
24977: PPUSH
24978: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24982: LD_VAR 0 2
24986: PPUSH
24987: LD_INT 9
24989: PPUSH
24990: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24994: LD_INT 28
24996: PPUSH
24997: LD_OWVAR 2
25001: PPUSH
25002: LD_INT 2
25004: PPUSH
25005: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25009: LD_INT 29
25011: PPUSH
25012: LD_OWVAR 2
25016: PPUSH
25017: LD_INT 2
25019: PPUSH
25020: CALL_OW 322
// end ;
25024: PPOPN 3
25026: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25027: LD_EXP 47
25031: PUSH
25032: LD_EXP 90
25036: AND
25037: IFFALSE 25148
25039: GO 25041
25041: DISABLE
25042: LD_INT 0
25044: PPUSH
25045: PPUSH
25046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_OWVAR 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 25
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 69
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 3
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25148
// un := tmp [ rand ( 1 , tmp ) ] ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_VAR 0 3
25101: PUSH
25102: LD_INT 1
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: CALL_OW 12
25114: ARRAY
25115: ST_TO_ADDR
// if Crawls ( un ) then
25116: LD_VAR 0 2
25120: PPUSH
25121: CALL_OW 318
25125: IFFALSE 25136
// ComWalk ( un ) ;
25127: LD_VAR 0 2
25131: PPUSH
25132: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_INT 8
25143: PPUSH
25144: CALL_OW 336
// end ;
25148: PPOPN 3
25150: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25151: LD_EXP 47
25155: PUSH
25156: LD_EXP 91
25160: AND
25161: IFFALSE 25305
25163: GO 25165
25165: DISABLE
25166: LD_INT 0
25168: PPUSH
25169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25170: LD_ADDR_VAR 0 2
25174: PUSH
25175: LD_INT 22
25177: PUSH
25178: LD_OWVAR 2
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 21
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 34
25202: PUSH
25203: LD_INT 12
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 51
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 34
25222: PUSH
25223: LD_INT 32
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: PPUSH
25241: CALL_OW 69
25245: ST_TO_ADDR
// if not tmp then
25246: LD_VAR 0 2
25250: NOT
25251: IFFALSE 25255
// exit ;
25253: GO 25305
// for i in tmp do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: LD_VAR 0 2
25264: PUSH
25265: FOR_IN
25266: IFFALSE 25303
// if GetCargo ( i , mat_artifact ) = 0 then
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_INT 4
25275: PPUSH
25276: CALL_OW 289
25280: PUSH
25281: LD_INT 0
25283: EQUAL
25284: IFFALSE 25301
// SetCargo ( i , mat_siberit , 100 ) ;
25286: LD_VAR 0 1
25290: PPUSH
25291: LD_INT 3
25293: PPUSH
25294: LD_INT 100
25296: PPUSH
25297: CALL_OW 290
25301: GO 25265
25303: POP
25304: POP
// end ;
25305: PPOPN 2
25307: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25308: LD_EXP 47
25312: PUSH
25313: LD_EXP 92
25317: AND
25318: IFFALSE 25501
25320: GO 25322
25322: DISABLE
25323: LD_INT 0
25325: PPUSH
25326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25327: LD_ADDR_VAR 0 2
25331: PUSH
25332: LD_INT 22
25334: PUSH
25335: LD_OWVAR 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PPUSH
25344: CALL_OW 69
25348: ST_TO_ADDR
// if not tmp then
25349: LD_VAR 0 2
25353: NOT
25354: IFFALSE 25358
// exit ;
25356: GO 25501
// for i := 1 to 2 do
25358: LD_ADDR_VAR 0 1
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_INT 2
25370: PUSH
25371: FOR_TO
25372: IFFALSE 25499
// begin uc_side := your_side ;
25374: LD_ADDR_OWVAR 20
25378: PUSH
25379: LD_OWVAR 2
25383: ST_TO_ADDR
// uc_nation := nation_american ;
25384: LD_ADDR_OWVAR 21
25388: PUSH
25389: LD_INT 1
25391: ST_TO_ADDR
// vc_chassis := us_morphling ;
25392: LD_ADDR_OWVAR 37
25396: PUSH
25397: LD_INT 5
25399: ST_TO_ADDR
// vc_engine := engine_siberite ;
25400: LD_ADDR_OWVAR 39
25404: PUSH
25405: LD_INT 3
25407: ST_TO_ADDR
// vc_control := control_computer ;
25408: LD_ADDR_OWVAR 38
25412: PUSH
25413: LD_INT 3
25415: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25416: LD_ADDR_OWVAR 40
25420: PUSH
25421: LD_INT 10
25423: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25424: LD_VAR 0 2
25428: PUSH
25429: LD_INT 1
25431: ARRAY
25432: PPUSH
25433: CALL_OW 310
25437: NOT
25438: IFFALSE 25485
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25440: CALL_OW 45
25444: PPUSH
25445: LD_VAR 0 2
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: PPUSH
25454: CALL_OW 250
25458: PPUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_INT 1
25466: ARRAY
25467: PPUSH
25468: CALL_OW 251
25472: PPUSH
25473: LD_INT 12
25475: PPUSH
25476: LD_INT 1
25478: PPUSH
25479: CALL_OW 50
25483: GO 25497
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25485: CALL_OW 45
25489: PPUSH
25490: LD_INT 1
25492: PPUSH
25493: CALL_OW 51
// end ;
25497: GO 25371
25499: POP
25500: POP
// end ;
25501: PPOPN 2
25503: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25504: LD_EXP 47
25508: PUSH
25509: LD_EXP 93
25513: AND
25514: IFFALSE 25736
25516: GO 25518
25518: DISABLE
25519: LD_INT 0
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25527: LD_ADDR_VAR 0 6
25531: PUSH
25532: LD_INT 22
25534: PUSH
25535: LD_OWVAR 2
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 21
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: LD_INT 23
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL_OW 69
25580: ST_TO_ADDR
// if not tmp then
25581: LD_VAR 0 6
25585: NOT
25586: IFFALSE 25590
// exit ;
25588: GO 25736
// s1 := rand ( 1 , 4 ) ;
25590: LD_ADDR_VAR 0 2
25594: PUSH
25595: LD_INT 1
25597: PPUSH
25598: LD_INT 4
25600: PPUSH
25601: CALL_OW 12
25605: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25606: LD_ADDR_VAR 0 4
25610: PUSH
25611: LD_VAR 0 6
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: PPUSH
25620: LD_VAR 0 2
25624: PPUSH
25625: CALL_OW 259
25629: ST_TO_ADDR
// if s1 = 1 then
25630: LD_VAR 0 2
25634: PUSH
25635: LD_INT 1
25637: EQUAL
25638: IFFALSE 25658
// s2 := rand ( 2 , 4 ) else
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_INT 2
25647: PPUSH
25648: LD_INT 4
25650: PPUSH
25651: CALL_OW 12
25655: ST_TO_ADDR
25656: GO 25666
// s2 := 1 ;
25658: LD_ADDR_VAR 0 3
25662: PUSH
25663: LD_INT 1
25665: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25666: LD_ADDR_VAR 0 5
25670: PUSH
25671: LD_VAR 0 6
25675: PUSH
25676: LD_INT 1
25678: ARRAY
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: CALL_OW 259
25689: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25690: LD_VAR 0 6
25694: PUSH
25695: LD_INT 1
25697: ARRAY
25698: PPUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_VAR 0 5
25708: PPUSH
25709: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25713: LD_VAR 0 6
25717: PUSH
25718: LD_INT 1
25720: ARRAY
25721: PPUSH
25722: LD_VAR 0 3
25726: PPUSH
25727: LD_VAR 0 4
25731: PPUSH
25732: CALL_OW 237
// end ;
25736: PPOPN 6
25738: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25739: LD_EXP 47
25743: PUSH
25744: LD_EXP 94
25748: AND
25749: IFFALSE 25828
25751: GO 25753
25753: DISABLE
25754: LD_INT 0
25756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_OWVAR 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 30
25776: PUSH
25777: LD_INT 3
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 1
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 1
25809: PPUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 12
25819: ARRAY
25820: PPUSH
25821: LD_INT 1
25823: PPUSH
25824: CALL_OW 234
// end ;
25828: PPOPN 1
25830: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25831: LD_EXP 47
25835: PUSH
25836: LD_EXP 95
25840: AND
25841: IFFALSE 25953
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25850: LD_ADDR_VAR 0 2
25854: PUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 30
25872: PUSH
25873: LD_INT 27
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 30
25882: PUSH
25883: LD_INT 26
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 30
25892: PUSH
25893: LD_INT 28
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PPUSH
25910: CALL_OW 69
25914: ST_TO_ADDR
// if not tmp then
25915: LD_VAR 0 2
25919: NOT
25920: IFFALSE 25924
// exit ;
25922: GO 25953
// for i in tmp do
25924: LD_ADDR_VAR 0 1
25928: PUSH
25929: LD_VAR 0 2
25933: PUSH
25934: FOR_IN
25935: IFFALSE 25951
// SetLives ( i , 1 ) ;
25937: LD_VAR 0 1
25941: PPUSH
25942: LD_INT 1
25944: PPUSH
25945: CALL_OW 234
25949: GO 25934
25951: POP
25952: POP
// end ;
25953: PPOPN 2
25955: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25956: LD_EXP 47
25960: PUSH
25961: LD_EXP 96
25965: AND
25966: IFFALSE 26253
25968: GO 25970
25970: DISABLE
25971: LD_INT 0
25973: PPUSH
25974: PPUSH
25975: PPUSH
// begin i := rand ( 1 , 7 ) ;
25976: LD_ADDR_VAR 0 1
25980: PUSH
25981: LD_INT 1
25983: PPUSH
25984: LD_INT 7
25986: PPUSH
25987: CALL_OW 12
25991: ST_TO_ADDR
// case i of 1 :
25992: LD_VAR 0 1
25996: PUSH
25997: LD_INT 1
25999: DOUBLE
26000: EQUAL
26001: IFTRUE 26005
26003: GO 26015
26005: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26006: LD_STRING earthquake(getX(game), 0, 32)
26008: PPUSH
26009: CALL_OW 559
26013: GO 26253
26015: LD_INT 2
26017: DOUBLE
26018: EQUAL
26019: IFTRUE 26023
26021: GO 26037
26023: POP
// begin ToLua ( displayStucuk(); ) ;
26024: LD_STRING displayStucuk();
26026: PPUSH
26027: CALL_OW 559
// ResetFog ;
26031: CALL_OW 335
// end ; 3 :
26035: GO 26253
26037: LD_INT 3
26039: DOUBLE
26040: EQUAL
26041: IFTRUE 26045
26043: GO 26149
26045: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26046: LD_ADDR_VAR 0 2
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_OWVAR 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 25
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PPUSH
26077: CALL_OW 69
26081: ST_TO_ADDR
// if not tmp then
26082: LD_VAR 0 2
26086: NOT
26087: IFFALSE 26091
// exit ;
26089: GO 26253
// un := tmp [ rand ( 1 , tmp ) ] ;
26091: LD_ADDR_VAR 0 3
26095: PUSH
26096: LD_VAR 0 2
26100: PUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_VAR 0 2
26108: PPUSH
26109: CALL_OW 12
26113: ARRAY
26114: ST_TO_ADDR
// if Crawls ( un ) then
26115: LD_VAR 0 3
26119: PPUSH
26120: CALL_OW 318
26124: IFFALSE 26135
// ComWalk ( un ) ;
26126: LD_VAR 0 3
26130: PPUSH
26131: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26135: LD_VAR 0 3
26139: PPUSH
26140: LD_INT 8
26142: PPUSH
26143: CALL_OW 336
// end ; 4 :
26147: GO 26253
26149: LD_INT 4
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26231
26157: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: LD_INT 22
26165: PUSH
26166: LD_OWVAR 2
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 30
26177: PUSH
26178: LD_INT 29
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PPUSH
26189: CALL_OW 69
26193: ST_TO_ADDR
// if not tmp then
26194: LD_VAR 0 2
26198: NOT
26199: IFFALSE 26203
// exit ;
26201: GO 26253
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26203: LD_VAR 0 2
26207: PUSH
26208: LD_INT 1
26210: ARRAY
26211: PPUSH
26212: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26216: LD_VAR 0 2
26220: PUSH
26221: LD_INT 1
26223: ARRAY
26224: PPUSH
26225: CALL_OW 65
// end ; 5 .. 7 :
26229: GO 26253
26231: LD_INT 5
26233: DOUBLE
26234: GREATEREQUAL
26235: IFFALSE 26243
26237: LD_INT 7
26239: DOUBLE
26240: LESSEQUAL
26241: IFTRUE 26245
26243: GO 26252
26245: POP
// StreamSibBomb ; end ;
26246: CALL 22490 0 0
26250: GO 26253
26252: POP
// end ;
26253: PPOPN 3
26255: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26256: LD_EXP 47
26260: PUSH
26261: LD_EXP 97
26265: AND
26266: IFFALSE 26422
26268: GO 26270
26270: DISABLE
26271: LD_INT 0
26273: PPUSH
26274: PPUSH
26275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26276: LD_ADDR_VAR 0 2
26280: PUSH
26281: LD_INT 81
26283: PUSH
26284: LD_OWVAR 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: LD_INT 21
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 21
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 2
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26422
// p := 0 ;
26339: LD_ADDR_VAR 0 3
26343: PUSH
26344: LD_INT 0
26346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26347: LD_INT 35
26349: PPUSH
26350: CALL_OW 67
// p := p + 1 ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_VAR 0 3
26363: PUSH
26364: LD_INT 1
26366: PLUS
26367: ST_TO_ADDR
// for i in tmp do
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: LD_VAR 0 2
26377: PUSH
26378: FOR_IN
26379: IFFALSE 26410
// if GetLives ( i ) < 1000 then
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 256
26390: PUSH
26391: LD_INT 1000
26393: LESS
26394: IFFALSE 26408
// SetLives ( i , 1000 ) ;
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_INT 1000
26403: PPUSH
26404: CALL_OW 234
26408: GO 26378
26410: POP
26411: POP
// until p > 20 ;
26412: LD_VAR 0 3
26416: PUSH
26417: LD_INT 20
26419: GREATER
26420: IFFALSE 26347
// end ;
26422: PPOPN 3
26424: END
// every 0 0$1 trigger StreamModeActive and sTime do
26425: LD_EXP 47
26429: PUSH
26430: LD_EXP 98
26434: AND
26435: IFFALSE 26470
26437: GO 26439
26439: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26440: LD_INT 28
26442: PPUSH
26443: LD_OWVAR 2
26447: PPUSH
26448: LD_INT 2
26450: PPUSH
26451: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26455: LD_INT 30
26457: PPUSH
26458: LD_OWVAR 2
26462: PPUSH
26463: LD_INT 2
26465: PPUSH
26466: CALL_OW 322
// end ;
26470: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26471: LD_EXP 47
26475: PUSH
26476: LD_EXP 99
26480: AND
26481: IFFALSE 26602
26483: GO 26485
26485: DISABLE
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26490: LD_ADDR_VAR 0 2
26494: PUSH
26495: LD_INT 22
26497: PUSH
26498: LD_OWVAR 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 3
26519: PUSH
26520: LD_INT 23
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: PPUSH
26539: CALL_OW 69
26543: ST_TO_ADDR
// if not tmp then
26544: LD_VAR 0 2
26548: NOT
26549: IFFALSE 26553
// exit ;
26551: GO 26602
// for i in tmp do
26553: LD_ADDR_VAR 0 1
26557: PUSH
26558: LD_VAR 0 2
26562: PUSH
26563: FOR_IN
26564: IFFALSE 26600
// begin if Crawls ( i ) then
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 318
26575: IFFALSE 26586
// ComWalk ( i ) ;
26577: LD_VAR 0 1
26581: PPUSH
26582: CALL_OW 138
// SetClass ( i , 2 ) ;
26586: LD_VAR 0 1
26590: PPUSH
26591: LD_INT 2
26593: PPUSH
26594: CALL_OW 336
// end ;
26598: GO 26563
26600: POP
26601: POP
// end ;
26602: PPOPN 2
26604: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26605: LD_EXP 47
26609: PUSH
26610: LD_EXP 100
26614: AND
26615: IFFALSE 26903
26617: GO 26619
26619: DISABLE
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
26624: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26625: LD_OWVAR 2
26629: PPUSH
26630: LD_INT 9
26632: PPUSH
26633: LD_INT 1
26635: PPUSH
26636: LD_INT 1
26638: PPUSH
26639: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26643: LD_INT 9
26645: PPUSH
26646: LD_OWVAR 2
26650: PPUSH
26651: CALL_OW 343
// uc_side := 9 ;
26655: LD_ADDR_OWVAR 20
26659: PUSH
26660: LD_INT 9
26662: ST_TO_ADDR
// uc_nation := 2 ;
26663: LD_ADDR_OWVAR 21
26667: PUSH
26668: LD_INT 2
26670: ST_TO_ADDR
// hc_name := Dark Warrior ;
26671: LD_ADDR_OWVAR 26
26675: PUSH
26676: LD_STRING Dark Warrior
26678: ST_TO_ADDR
// hc_gallery :=  ;
26679: LD_ADDR_OWVAR 33
26683: PUSH
26684: LD_STRING 
26686: ST_TO_ADDR
// hc_noskilllimit := true ;
26687: LD_ADDR_OWVAR 76
26691: PUSH
26692: LD_INT 1
26694: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26695: LD_ADDR_OWVAR 31
26699: PUSH
26700: LD_INT 30
26702: PUSH
26703: LD_INT 30
26705: PUSH
26706: LD_INT 30
26708: PUSH
26709: LD_INT 30
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: ST_TO_ADDR
// un := CreateHuman ;
26718: LD_ADDR_VAR 0 3
26722: PUSH
26723: CALL_OW 44
26727: ST_TO_ADDR
// hc_noskilllimit := false ;
26728: LD_ADDR_OWVAR 76
26732: PUSH
26733: LD_INT 0
26735: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26736: LD_VAR 0 3
26740: PPUSH
26741: LD_INT 1
26743: PPUSH
26744: CALL_OW 51
// ToLua ( playRanger() ) ;
26748: LD_STRING playRanger()
26750: PPUSH
26751: CALL_OW 559
// p := 0 ;
26755: LD_ADDR_VAR 0 2
26759: PUSH
26760: LD_INT 0
26762: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26763: LD_INT 35
26765: PPUSH
26766: CALL_OW 67
// p := p + 1 ;
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: LD_VAR 0 2
26779: PUSH
26780: LD_INT 1
26782: PLUS
26783: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26784: LD_VAR 0 3
26788: PPUSH
26789: CALL_OW 256
26793: PUSH
26794: LD_INT 1000
26796: LESS
26797: IFFALSE 26811
// SetLives ( un , 1000 ) ;
26799: LD_VAR 0 3
26803: PPUSH
26804: LD_INT 1000
26806: PPUSH
26807: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26811: LD_VAR 0 3
26815: PPUSH
26816: LD_INT 81
26818: PUSH
26819: LD_OWVAR 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 91
26830: PUSH
26831: LD_VAR 0 3
26835: PUSH
26836: LD_INT 30
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: PPUSH
26853: LD_VAR 0 3
26857: PPUSH
26858: CALL_OW 74
26862: PPUSH
26863: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26867: LD_VAR 0 2
26871: PUSH
26872: LD_INT 80
26874: GREATER
26875: PUSH
26876: LD_VAR 0 3
26880: PPUSH
26881: CALL_OW 301
26885: OR
26886: IFFALSE 26763
// if un then
26888: LD_VAR 0 3
26892: IFFALSE 26903
// RemoveUnit ( un ) ;
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 64
// end ;
26903: PPOPN 3
26905: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26906: LD_EXP 101
26910: IFFALSE 27026
26912: GO 26914
26914: DISABLE
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
26919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26920: LD_ADDR_VAR 0 2
26924: PUSH
26925: LD_INT 81
26927: PUSH
26928: LD_OWVAR 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 21
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PPUSH
26951: CALL_OW 69
26955: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26956: LD_STRING playComputer()
26958: PPUSH
26959: CALL_OW 559
// if not tmp then
26963: LD_VAR 0 2
26967: NOT
26968: IFFALSE 26972
// exit ;
26970: GO 27026
// for i in tmp do
26972: LD_ADDR_VAR 0 1
26976: PUSH
26977: LD_VAR 0 2
26981: PUSH
26982: FOR_IN
26983: IFFALSE 27024
// for j := 1 to 4 do
26985: LD_ADDR_VAR 0 3
26989: PUSH
26990: DOUBLE
26991: LD_INT 1
26993: DEC
26994: ST_TO_ADDR
26995: LD_INT 4
26997: PUSH
26998: FOR_TO
26999: IFFALSE 27020
// SetSkill ( i , j , 10 ) ;
27001: LD_VAR 0 1
27005: PPUSH
27006: LD_VAR 0 3
27010: PPUSH
27011: LD_INT 10
27013: PPUSH
27014: CALL_OW 237
27018: GO 26998
27020: POP
27021: POP
27022: GO 26982
27024: POP
27025: POP
// end ;
27026: PPOPN 3
27028: END
// every 0 0$1 trigger s30 do var i , tmp ;
27029: LD_EXP 102
27033: IFFALSE 27102
27035: GO 27037
27037: DISABLE
27038: LD_INT 0
27040: PPUSH
27041: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27042: LD_ADDR_VAR 0 2
27046: PUSH
27047: LD_INT 22
27049: PUSH
27050: LD_OWVAR 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: ST_TO_ADDR
// if not tmp then
27064: LD_VAR 0 2
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27102
// for i in tmp do
27073: LD_ADDR_VAR 0 1
27077: PUSH
27078: LD_VAR 0 2
27082: PUSH
27083: FOR_IN
27084: IFFALSE 27100
// SetLives ( i , 300 ) ;
27086: LD_VAR 0 1
27090: PPUSH
27091: LD_INT 300
27093: PPUSH
27094: CALL_OW 234
27098: GO 27083
27100: POP
27101: POP
// end ;
27102: PPOPN 2
27104: END
// every 0 0$1 trigger s60 do var i , tmp ;
27105: LD_EXP 103
27109: IFFALSE 27178
27111: GO 27113
27113: DISABLE
27114: LD_INT 0
27116: PPUSH
27117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27118: LD_ADDR_VAR 0 2
27122: PUSH
27123: LD_INT 22
27125: PUSH
27126: LD_OWVAR 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PPUSH
27135: CALL_OW 69
27139: ST_TO_ADDR
// if not tmp then
27140: LD_VAR 0 2
27144: NOT
27145: IFFALSE 27149
// exit ;
27147: GO 27178
// for i in tmp do
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_VAR 0 2
27158: PUSH
27159: FOR_IN
27160: IFFALSE 27176
// SetLives ( i , 600 ) ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_INT 600
27169: PPUSH
27170: CALL_OW 234
27174: GO 27159
27176: POP
27177: POP
// end ;
27178: PPOPN 2
27180: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27181: LD_INT 0
27183: PPUSH
// case cmd of 301 :
27184: LD_VAR 0 1
27188: PUSH
27189: LD_INT 301
27191: DOUBLE
27192: EQUAL
27193: IFTRUE 27197
27195: GO 27229
27197: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27198: LD_VAR 0 6
27202: PPUSH
27203: LD_VAR 0 7
27207: PPUSH
27208: LD_VAR 0 8
27212: PPUSH
27213: LD_VAR 0 4
27217: PPUSH
27218: LD_VAR 0 5
27222: PPUSH
27223: CALL 28430 0 5
27227: GO 27350
27229: LD_INT 302
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27274
27237: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27238: LD_VAR 0 6
27242: PPUSH
27243: LD_VAR 0 7
27247: PPUSH
27248: LD_VAR 0 8
27252: PPUSH
27253: LD_VAR 0 9
27257: PPUSH
27258: LD_VAR 0 4
27262: PPUSH
27263: LD_VAR 0 5
27267: PPUSH
27268: CALL 28521 0 6
27272: GO 27350
27274: LD_INT 303
27276: DOUBLE
27277: EQUAL
27278: IFTRUE 27282
27280: GO 27319
27282: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27283: LD_VAR 0 6
27287: PPUSH
27288: LD_VAR 0 7
27292: PPUSH
27293: LD_VAR 0 8
27297: PPUSH
27298: LD_VAR 0 9
27302: PPUSH
27303: LD_VAR 0 4
27307: PPUSH
27308: LD_VAR 0 5
27312: PPUSH
27313: CALL 27355 0 6
27317: GO 27350
27319: LD_INT 304
27321: DOUBLE
27322: EQUAL
27323: IFTRUE 27327
27325: GO 27349
27327: POP
// hHackTeleport ( unit , x , y ) ; end ;
27328: LD_VAR 0 2
27332: PPUSH
27333: LD_VAR 0 4
27337: PPUSH
27338: LD_VAR 0 5
27342: PPUSH
27343: CALL 29114 0 3
27347: GO 27350
27349: POP
// end ;
27350: LD_VAR 0 12
27354: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27359: LD_VAR 0 1
27363: PUSH
27364: LD_INT 1
27366: LESS
27367: PUSH
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 3
27375: GREATER
27376: OR
27377: PUSH
27378: LD_VAR 0 5
27382: PPUSH
27383: LD_VAR 0 6
27387: PPUSH
27388: CALL_OW 428
27392: OR
27393: IFFALSE 27397
// exit ;
27395: GO 28117
// uc_side := your_side ;
27397: LD_ADDR_OWVAR 20
27401: PUSH
27402: LD_OWVAR 2
27406: ST_TO_ADDR
// uc_nation := nation ;
27407: LD_ADDR_OWVAR 21
27411: PUSH
27412: LD_VAR 0 1
27416: ST_TO_ADDR
// bc_level = 1 ;
27417: LD_ADDR_OWVAR 43
27421: PUSH
27422: LD_INT 1
27424: ST_TO_ADDR
// case btype of 1 :
27425: LD_VAR 0 2
27429: PUSH
27430: LD_INT 1
27432: DOUBLE
27433: EQUAL
27434: IFTRUE 27438
27436: GO 27449
27438: POP
// bc_type := b_depot ; 2 :
27439: LD_ADDR_OWVAR 42
27443: PUSH
27444: LD_INT 0
27446: ST_TO_ADDR
27447: GO 28061
27449: LD_INT 2
27451: DOUBLE
27452: EQUAL
27453: IFTRUE 27457
27455: GO 27468
27457: POP
// bc_type := b_warehouse ; 3 :
27458: LD_ADDR_OWVAR 42
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
27466: GO 28061
27468: LD_INT 3
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27476
27474: GO 27487
27476: POP
// bc_type := b_lab ; 4 .. 9 :
27477: LD_ADDR_OWVAR 42
27481: PUSH
27482: LD_INT 6
27484: ST_TO_ADDR
27485: GO 28061
27487: LD_INT 4
27489: DOUBLE
27490: GREATEREQUAL
27491: IFFALSE 27499
27493: LD_INT 9
27495: DOUBLE
27496: LESSEQUAL
27497: IFTRUE 27501
27499: GO 27553
27501: POP
// begin bc_type := b_lab_half ;
27502: LD_ADDR_OWVAR 42
27506: PUSH
27507: LD_INT 7
27509: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27510: LD_ADDR_OWVAR 44
27514: PUSH
27515: LD_INT 10
27517: PUSH
27518: LD_INT 11
27520: PUSH
27521: LD_INT 12
27523: PUSH
27524: LD_INT 15
27526: PUSH
27527: LD_INT 14
27529: PUSH
27530: LD_INT 13
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: PUSH
27541: LD_VAR 0 2
27545: PUSH
27546: LD_INT 3
27548: MINUS
27549: ARRAY
27550: ST_TO_ADDR
// end ; 10 .. 13 :
27551: GO 28061
27553: LD_INT 10
27555: DOUBLE
27556: GREATEREQUAL
27557: IFFALSE 27565
27559: LD_INT 13
27561: DOUBLE
27562: LESSEQUAL
27563: IFTRUE 27567
27565: GO 27644
27567: POP
// begin bc_type := b_lab_full ;
27568: LD_ADDR_OWVAR 42
27572: PUSH
27573: LD_INT 8
27575: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27576: LD_ADDR_OWVAR 44
27580: PUSH
27581: LD_INT 10
27583: PUSH
27584: LD_INT 12
27586: PUSH
27587: LD_INT 14
27589: PUSH
27590: LD_INT 13
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: PUSH
27599: LD_VAR 0 2
27603: PUSH
27604: LD_INT 9
27606: MINUS
27607: ARRAY
27608: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27609: LD_ADDR_OWVAR 45
27613: PUSH
27614: LD_INT 11
27616: PUSH
27617: LD_INT 15
27619: PUSH
27620: LD_INT 12
27622: PUSH
27623: LD_INT 15
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: LD_VAR 0 2
27636: PUSH
27637: LD_INT 9
27639: MINUS
27640: ARRAY
27641: ST_TO_ADDR
// end ; 14 :
27642: GO 28061
27644: LD_INT 14
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27652
27650: GO 27663
27652: POP
// bc_type := b_workshop ; 15 :
27653: LD_ADDR_OWVAR 42
27657: PUSH
27658: LD_INT 2
27660: ST_TO_ADDR
27661: GO 28061
27663: LD_INT 15
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27682
27671: POP
// bc_type := b_factory ; 16 :
27672: LD_ADDR_OWVAR 42
27676: PUSH
27677: LD_INT 3
27679: ST_TO_ADDR
27680: GO 28061
27682: LD_INT 16
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27690
27688: GO 27701
27690: POP
// bc_type := b_ext_gun ; 17 :
27691: LD_ADDR_OWVAR 42
27695: PUSH
27696: LD_INT 17
27698: ST_TO_ADDR
27699: GO 28061
27701: LD_INT 17
27703: DOUBLE
27704: EQUAL
27705: IFTRUE 27709
27707: GO 27737
27709: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27710: LD_ADDR_OWVAR 42
27714: PUSH
27715: LD_INT 19
27717: PUSH
27718: LD_INT 23
27720: PUSH
27721: LD_INT 19
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: PUSH
27729: LD_VAR 0 1
27733: ARRAY
27734: ST_TO_ADDR
27735: GO 28061
27737: LD_INT 18
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27756
27745: POP
// bc_type := b_ext_radar ; 19 :
27746: LD_ADDR_OWVAR 42
27750: PUSH
27751: LD_INT 20
27753: ST_TO_ADDR
27754: GO 28061
27756: LD_INT 19
27758: DOUBLE
27759: EQUAL
27760: IFTRUE 27764
27762: GO 27775
27764: POP
// bc_type := b_ext_radio ; 20 :
27765: LD_ADDR_OWVAR 42
27769: PUSH
27770: LD_INT 22
27772: ST_TO_ADDR
27773: GO 28061
27775: LD_INT 20
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27783
27781: GO 27794
27783: POP
// bc_type := b_ext_siberium ; 21 :
27784: LD_ADDR_OWVAR 42
27788: PUSH
27789: LD_INT 21
27791: ST_TO_ADDR
27792: GO 28061
27794: LD_INT 21
27796: DOUBLE
27797: EQUAL
27798: IFTRUE 27802
27800: GO 27813
27802: POP
// bc_type := b_ext_computer ; 22 :
27803: LD_ADDR_OWVAR 42
27807: PUSH
27808: LD_INT 24
27810: ST_TO_ADDR
27811: GO 28061
27813: LD_INT 22
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27821
27819: GO 27832
27821: POP
// bc_type := b_ext_track ; 23 :
27822: LD_ADDR_OWVAR 42
27826: PUSH
27827: LD_INT 16
27829: ST_TO_ADDR
27830: GO 28061
27832: LD_INT 23
27834: DOUBLE
27835: EQUAL
27836: IFTRUE 27840
27838: GO 27851
27840: POP
// bc_type := b_ext_laser ; 24 :
27841: LD_ADDR_OWVAR 42
27845: PUSH
27846: LD_INT 25
27848: ST_TO_ADDR
27849: GO 28061
27851: LD_INT 24
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27870
27859: POP
// bc_type := b_control_tower ; 25 :
27860: LD_ADDR_OWVAR 42
27864: PUSH
27865: LD_INT 36
27867: ST_TO_ADDR
27868: GO 28061
27870: LD_INT 25
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 27889
27878: POP
// bc_type := b_breastwork ; 26 :
27879: LD_ADDR_OWVAR 42
27883: PUSH
27884: LD_INT 31
27886: ST_TO_ADDR
27887: GO 28061
27889: LD_INT 26
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27908
27897: POP
// bc_type := b_bunker ; 27 :
27898: LD_ADDR_OWVAR 42
27902: PUSH
27903: LD_INT 32
27905: ST_TO_ADDR
27906: GO 28061
27908: LD_INT 27
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27916
27914: GO 27927
27916: POP
// bc_type := b_turret ; 28 :
27917: LD_ADDR_OWVAR 42
27921: PUSH
27922: LD_INT 33
27924: ST_TO_ADDR
27925: GO 28061
27927: LD_INT 28
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 27946
27935: POP
// bc_type := b_armoury ; 29 :
27936: LD_ADDR_OWVAR 42
27940: PUSH
27941: LD_INT 4
27943: ST_TO_ADDR
27944: GO 28061
27946: LD_INT 29
27948: DOUBLE
27949: EQUAL
27950: IFTRUE 27954
27952: GO 27965
27954: POP
// bc_type := b_barracks ; 30 :
27955: LD_ADDR_OWVAR 42
27959: PUSH
27960: LD_INT 5
27962: ST_TO_ADDR
27963: GO 28061
27965: LD_INT 30
27967: DOUBLE
27968: EQUAL
27969: IFTRUE 27973
27971: GO 27984
27973: POP
// bc_type := b_solar_power ; 31 :
27974: LD_ADDR_OWVAR 42
27978: PUSH
27979: LD_INT 27
27981: ST_TO_ADDR
27982: GO 28061
27984: LD_INT 31
27986: DOUBLE
27987: EQUAL
27988: IFTRUE 27992
27990: GO 28003
27992: POP
// bc_type := b_oil_power ; 32 :
27993: LD_ADDR_OWVAR 42
27997: PUSH
27998: LD_INT 26
28000: ST_TO_ADDR
28001: GO 28061
28003: LD_INT 32
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28022
28011: POP
// bc_type := b_siberite_power ; 33 :
28012: LD_ADDR_OWVAR 42
28016: PUSH
28017: LD_INT 28
28019: ST_TO_ADDR
28020: GO 28061
28022: LD_INT 33
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28041
28030: POP
// bc_type := b_oil_mine ; 34 :
28031: LD_ADDR_OWVAR 42
28035: PUSH
28036: LD_INT 29
28038: ST_TO_ADDR
28039: GO 28061
28041: LD_INT 34
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28060
28049: POP
// bc_type := b_siberite_mine ; end ;
28050: LD_ADDR_OWVAR 42
28054: PUSH
28055: LD_INT 30
28057: ST_TO_ADDR
28058: GO 28061
28060: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28061: LD_ADDR_VAR 0 8
28065: PUSH
28066: LD_VAR 0 5
28070: PPUSH
28071: LD_VAR 0 6
28075: PPUSH
28076: LD_VAR 0 3
28080: PPUSH
28081: CALL_OW 47
28085: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28086: LD_OWVAR 42
28090: PUSH
28091: LD_INT 32
28093: PUSH
28094: LD_INT 33
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: IN
28101: IFFALSE 28117
// PlaceWeaponTurret ( b , weapon ) ;
28103: LD_VAR 0 8
28107: PPUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: CALL_OW 431
// end ;
28117: LD_VAR 0 7
28121: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28122: LD_INT 0
28124: PPUSH
28125: PPUSH
28126: PPUSH
28127: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28128: LD_ADDR_VAR 0 4
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_OWVAR 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 30
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 30
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: ST_TO_ADDR
// if not tmp then
28182: LD_VAR 0 4
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28250
// for i in tmp do
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_VAR 0 4
28200: PUSH
28201: FOR_IN
28202: IFFALSE 28248
// for j = 1 to 3 do
28204: LD_ADDR_VAR 0 3
28208: PUSH
28209: DOUBLE
28210: LD_INT 1
28212: DEC
28213: ST_TO_ADDR
28214: LD_INT 3
28216: PUSH
28217: FOR_TO
28218: IFFALSE 28244
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28220: LD_VAR 0 2
28224: PPUSH
28225: CALL_OW 274
28229: PPUSH
28230: LD_VAR 0 3
28234: PPUSH
28235: LD_INT 99999
28237: PPUSH
28238: CALL_OW 277
28242: GO 28217
28244: POP
28245: POP
28246: GO 28201
28248: POP
28249: POP
// end ;
28250: LD_VAR 0 1
28254: RET
// export function hHackSetLevel10 ; var i , j ; begin
28255: LD_INT 0
28257: PPUSH
28258: PPUSH
28259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28260: LD_ADDR_VAR 0 2
28264: PUSH
28265: LD_INT 21
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL_OW 69
28279: PUSH
28280: FOR_IN
28281: IFFALSE 28333
// if IsSelected ( i ) then
28283: LD_VAR 0 2
28287: PPUSH
28288: CALL_OW 306
28292: IFFALSE 28331
// begin for j := 1 to 4 do
28294: LD_ADDR_VAR 0 3
28298: PUSH
28299: DOUBLE
28300: LD_INT 1
28302: DEC
28303: ST_TO_ADDR
28304: LD_INT 4
28306: PUSH
28307: FOR_TO
28308: IFFALSE 28329
// SetSkill ( i , j , 10 ) ;
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_VAR 0 3
28319: PPUSH
28320: LD_INT 10
28322: PPUSH
28323: CALL_OW 237
28327: GO 28307
28329: POP
28330: POP
// end ;
28331: GO 28280
28333: POP
28334: POP
// end ;
28335: LD_VAR 0 1
28339: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28340: LD_INT 0
28342: PPUSH
28343: PPUSH
28344: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28345: LD_ADDR_VAR 0 2
28349: PUSH
28350: LD_INT 22
28352: PUSH
28353: LD_OWVAR 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 21
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 69
28380: PUSH
28381: FOR_IN
28382: IFFALSE 28423
// begin for j := 1 to 4 do
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: DOUBLE
28390: LD_INT 1
28392: DEC
28393: ST_TO_ADDR
28394: LD_INT 4
28396: PUSH
28397: FOR_TO
28398: IFFALSE 28419
// SetSkill ( i , j , 10 ) ;
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_VAR 0 3
28409: PPUSH
28410: LD_INT 10
28412: PPUSH
28413: CALL_OW 237
28417: GO 28397
28419: POP
28420: POP
// end ;
28421: GO 28381
28423: POP
28424: POP
// end ;
28425: LD_VAR 0 1
28429: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28430: LD_INT 0
28432: PPUSH
// uc_side := your_side ;
28433: LD_ADDR_OWVAR 20
28437: PUSH
28438: LD_OWVAR 2
28442: ST_TO_ADDR
// uc_nation := nation ;
28443: LD_ADDR_OWVAR 21
28447: PUSH
28448: LD_VAR 0 1
28452: ST_TO_ADDR
// InitHc ;
28453: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28457: LD_INT 0
28459: PPUSH
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 3
28469: PPUSH
28470: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28474: LD_VAR 0 4
28478: PPUSH
28479: LD_VAR 0 5
28483: PPUSH
28484: CALL_OW 428
28488: PUSH
28489: LD_INT 0
28491: EQUAL
28492: IFFALSE 28516
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28494: CALL_OW 44
28498: PPUSH
28499: LD_VAR 0 4
28503: PPUSH
28504: LD_VAR 0 5
28508: PPUSH
28509: LD_INT 1
28511: PPUSH
28512: CALL_OW 48
// end ;
28516: LD_VAR 0 6
28520: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
// uc_side := your_side ;
28525: LD_ADDR_OWVAR 20
28529: PUSH
28530: LD_OWVAR 2
28534: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28535: LD_VAR 0 1
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: LD_INT 4
28551: PUSH
28552: LD_INT 5
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: IN
28562: IFFALSE 28574
// uc_nation := nation_american else
28564: LD_ADDR_OWVAR 21
28568: PUSH
28569: LD_INT 1
28571: ST_TO_ADDR
28572: GO 28617
// if chassis in [ 11 , 12 , 13 , 14 ] then
28574: LD_VAR 0 1
28578: PUSH
28579: LD_INT 11
28581: PUSH
28582: LD_INT 12
28584: PUSH
28585: LD_INT 13
28587: PUSH
28588: LD_INT 14
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: IN
28597: IFFALSE 28609
// uc_nation := nation_arabian else
28599: LD_ADDR_OWVAR 21
28603: PUSH
28604: LD_INT 2
28606: ST_TO_ADDR
28607: GO 28617
// uc_nation := nation_russian ;
28609: LD_ADDR_OWVAR 21
28613: PUSH
28614: LD_INT 3
28616: ST_TO_ADDR
// vc_chassis := chassis ;
28617: LD_ADDR_OWVAR 37
28621: PUSH
28622: LD_VAR 0 1
28626: ST_TO_ADDR
// vc_engine := engine ;
28627: LD_ADDR_OWVAR 39
28631: PUSH
28632: LD_VAR 0 2
28636: ST_TO_ADDR
// vc_control := control ;
28637: LD_ADDR_OWVAR 38
28641: PUSH
28642: LD_VAR 0 3
28646: ST_TO_ADDR
// vc_weapon := weapon ;
28647: LD_ADDR_OWVAR 40
28651: PUSH
28652: LD_VAR 0 4
28656: ST_TO_ADDR
// un := CreateVehicle ;
28657: LD_ADDR_VAR 0 8
28661: PUSH
28662: CALL_OW 45
28666: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28667: LD_VAR 0 8
28671: PPUSH
28672: LD_INT 0
28674: PPUSH
28675: LD_INT 5
28677: PPUSH
28678: CALL_OW 12
28682: PPUSH
28683: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28687: LD_VAR 0 8
28691: PPUSH
28692: LD_VAR 0 5
28696: PPUSH
28697: LD_VAR 0 6
28701: PPUSH
28702: LD_INT 1
28704: PPUSH
28705: CALL_OW 48
// end ;
28709: LD_VAR 0 7
28713: RET
// export hInvincible ; every 1 do
28714: GO 28716
28716: DISABLE
// hInvincible := [ ] ;
28717: LD_ADDR_EXP 104
28721: PUSH
28722: EMPTY
28723: ST_TO_ADDR
28724: END
// every 10 do var i ;
28725: GO 28727
28727: DISABLE
28728: LD_INT 0
28730: PPUSH
// begin enable ;
28731: ENABLE
// if not hInvincible then
28732: LD_EXP 104
28736: NOT
28737: IFFALSE 28741
// exit ;
28739: GO 28785
// for i in hInvincible do
28741: LD_ADDR_VAR 0 1
28745: PUSH
28746: LD_EXP 104
28750: PUSH
28751: FOR_IN
28752: IFFALSE 28783
// if GetLives ( i ) < 1000 then
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 256
28763: PUSH
28764: LD_INT 1000
28766: LESS
28767: IFFALSE 28781
// SetLives ( i , 1000 ) ;
28769: LD_VAR 0 1
28773: PPUSH
28774: LD_INT 1000
28776: PPUSH
28777: CALL_OW 234
28781: GO 28751
28783: POP
28784: POP
// end ;
28785: PPOPN 1
28787: END
// export function hHackInvincible ; var i ; begin
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28792: LD_ADDR_VAR 0 2
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 21
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 21
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: PPUSH
28825: CALL_OW 69
28829: PUSH
28830: FOR_IN
28831: IFFALSE 28892
// if IsSelected ( i ) then
28833: LD_VAR 0 2
28837: PPUSH
28838: CALL_OW 306
28842: IFFALSE 28890
// begin if i in hInvincible then
28844: LD_VAR 0 2
28848: PUSH
28849: LD_EXP 104
28853: IN
28854: IFFALSE 28874
// hInvincible := hInvincible diff i else
28856: LD_ADDR_EXP 104
28860: PUSH
28861: LD_EXP 104
28865: PUSH
28866: LD_VAR 0 2
28870: DIFF
28871: ST_TO_ADDR
28872: GO 28890
// hInvincible := hInvincible union i ;
28874: LD_ADDR_EXP 104
28878: PUSH
28879: LD_EXP 104
28883: PUSH
28884: LD_VAR 0 2
28888: UNION
28889: ST_TO_ADDR
// end ;
28890: GO 28830
28892: POP
28893: POP
// end ;
28894: LD_VAR 0 1
28898: RET
// export function hHackInvisible ; var i , j ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28904: LD_ADDR_VAR 0 2
28908: PUSH
28909: LD_INT 21
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 69
28923: PUSH
28924: FOR_IN
28925: IFFALSE 28949
// if IsSelected ( i ) then
28927: LD_VAR 0 2
28931: PPUSH
28932: CALL_OW 306
28936: IFFALSE 28947
// ComForceInvisible ( i ) ;
28938: LD_VAR 0 2
28942: PPUSH
28943: CALL_OW 496
28947: GO 28924
28949: POP
28950: POP
// end ;
28951: LD_VAR 0 1
28955: RET
// export function hHackChangeYourSide ; begin
28956: LD_INT 0
28958: PPUSH
// if your_side = 8 then
28959: LD_OWVAR 2
28963: PUSH
28964: LD_INT 8
28966: EQUAL
28967: IFFALSE 28979
// your_side := 0 else
28969: LD_ADDR_OWVAR 2
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
28977: GO 28993
// your_side := your_side + 1 ;
28979: LD_ADDR_OWVAR 2
28983: PUSH
28984: LD_OWVAR 2
28988: PUSH
28989: LD_INT 1
28991: PLUS
28992: ST_TO_ADDR
// end ;
28993: LD_VAR 0 1
28997: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28998: LD_INT 0
29000: PPUSH
29001: PPUSH
29002: PPUSH
// for i in all_units do
29003: LD_ADDR_VAR 0 2
29007: PUSH
29008: LD_OWVAR 3
29012: PUSH
29013: FOR_IN
29014: IFFALSE 29092
// if IsSelected ( i ) then
29016: LD_VAR 0 2
29020: PPUSH
29021: CALL_OW 306
29025: IFFALSE 29090
// begin j := GetSide ( i ) ;
29027: LD_ADDR_VAR 0 3
29031: PUSH
29032: LD_VAR 0 2
29036: PPUSH
29037: CALL_OW 255
29041: ST_TO_ADDR
// if j = 8 then
29042: LD_VAR 0 3
29046: PUSH
29047: LD_INT 8
29049: EQUAL
29050: IFFALSE 29062
// j := 0 else
29052: LD_ADDR_VAR 0 3
29056: PUSH
29057: LD_INT 0
29059: ST_TO_ADDR
29060: GO 29076
// j := j + 1 ;
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: LD_VAR 0 3
29071: PUSH
29072: LD_INT 1
29074: PLUS
29075: ST_TO_ADDR
// SetSide ( i , j ) ;
29076: LD_VAR 0 2
29080: PPUSH
29081: LD_VAR 0 3
29085: PPUSH
29086: CALL_OW 235
// end ;
29090: GO 29013
29092: POP
29093: POP
// end ;
29094: LD_VAR 0 1
29098: RET
// export function hHackFog ; begin
29099: LD_INT 0
29101: PPUSH
// FogOff ( true ) ;
29102: LD_INT 1
29104: PPUSH
29105: CALL_OW 344
// end ;
29109: LD_VAR 0 1
29113: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29114: LD_INT 0
29116: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29117: LD_VAR 0 1
29121: PPUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: LD_INT 1
29134: PPUSH
29135: LD_INT 1
29137: PPUSH
29138: CALL_OW 483
// CenterOnXY ( x , y ) ;
29142: LD_VAR 0 2
29146: PPUSH
29147: LD_VAR 0 3
29151: PPUSH
29152: CALL_OW 84
// end ; end_of_file end_of_file
29156: LD_VAR 0 4
29160: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29161: LD_INT 0
29163: PPUSH
// ar_miner := 81 ;
29164: LD_ADDR_EXP 112
29168: PUSH
29169: LD_INT 81
29171: ST_TO_ADDR
// ar_crane := 88 ;
29172: LD_ADDR_EXP 111
29176: PUSH
29177: LD_INT 88
29179: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29180: LD_ADDR_EXP 106
29184: PUSH
29185: LD_INT 89
29187: ST_TO_ADDR
// us_hack := 99 ;
29188: LD_ADDR_EXP 107
29192: PUSH
29193: LD_INT 99
29195: ST_TO_ADDR
// us_artillery := 97 ;
29196: LD_ADDR_EXP 108
29200: PUSH
29201: LD_INT 97
29203: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29204: LD_ADDR_EXP 109
29208: PUSH
29209: LD_INT 91
29211: ST_TO_ADDR
// ar_mortar := 92 ;
29212: LD_ADDR_EXP 110
29216: PUSH
29217: LD_INT 92
29219: ST_TO_ADDR
// ru_flamethrower := 93 ;
29220: LD_ADDR_EXP 113
29224: PUSH
29225: LD_INT 93
29227: ST_TO_ADDR
// ru_radar := 98 ;
29228: LD_ADDR_EXP 105
29232: PUSH
29233: LD_INT 98
29235: ST_TO_ADDR
// tech_Artillery := 80 ;
29236: LD_ADDR_EXP 114
29240: PUSH
29241: LD_INT 80
29243: ST_TO_ADDR
// tech_RadMat := 81 ;
29244: LD_ADDR_EXP 115
29248: PUSH
29249: LD_INT 81
29251: ST_TO_ADDR
// tech_BasicTools := 82 ;
29252: LD_ADDR_EXP 116
29256: PUSH
29257: LD_INT 82
29259: ST_TO_ADDR
// tech_Cargo := 83 ;
29260: LD_ADDR_EXP 117
29264: PUSH
29265: LD_INT 83
29267: ST_TO_ADDR
// tech_Track := 84 ;
29268: LD_ADDR_EXP 118
29272: PUSH
29273: LD_INT 84
29275: ST_TO_ADDR
// tech_Crane := 85 ;
29276: LD_ADDR_EXP 119
29280: PUSH
29281: LD_INT 85
29283: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29284: LD_ADDR_EXP 120
29288: PUSH
29289: LD_INT 86
29291: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29292: LD_ADDR_EXP 121
29296: PUSH
29297: LD_INT 87
29299: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29300: LD_ADDR_EXP 122
29304: PUSH
29305: LD_INT 88
29307: ST_TO_ADDR
// class_mastodont := 31 ;
29308: LD_ADDR_EXP 123
29312: PUSH
29313: LD_INT 31
29315: ST_TO_ADDR
// class_horse := 21 ;
29316: LD_ADDR_EXP 124
29320: PUSH
29321: LD_INT 21
29323: ST_TO_ADDR
// end ;
29324: LD_VAR 0 1
29328: RET
// every 1 do
29329: GO 29331
29331: DISABLE
// InitGlobalVariables ; end_of_file
29332: CALL 29161 0 0
29336: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
// if exist_mode then
29341: LD_VAR 0 2
29345: IFFALSE 29370
// unit := CreateCharacter ( prefix & ident ) else
29347: LD_ADDR_VAR 0 5
29351: PUSH
29352: LD_VAR 0 3
29356: PUSH
29357: LD_VAR 0 1
29361: STR
29362: PPUSH
29363: CALL_OW 34
29367: ST_TO_ADDR
29368: GO 29385
// unit := NewCharacter ( ident ) ;
29370: LD_ADDR_VAR 0 5
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 25
29384: ST_TO_ADDR
// result := unit ;
29385: LD_ADDR_VAR 0 4
29389: PUSH
29390: LD_VAR 0 5
29394: ST_TO_ADDR
// end ;
29395: LD_VAR 0 4
29399: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
// if not side or not nation then
29404: LD_VAR 0 1
29408: NOT
29409: PUSH
29410: LD_VAR 0 2
29414: NOT
29415: OR
29416: IFFALSE 29420
// exit ;
29418: GO 30188
// case nation of nation_american :
29420: LD_VAR 0 2
29424: PUSH
29425: LD_INT 1
29427: DOUBLE
29428: EQUAL
29429: IFTRUE 29433
29431: GO 29647
29433: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29434: LD_ADDR_VAR 0 4
29438: PUSH
29439: LD_INT 35
29441: PUSH
29442: LD_INT 45
29444: PUSH
29445: LD_INT 46
29447: PUSH
29448: LD_INT 47
29450: PUSH
29451: LD_INT 82
29453: PUSH
29454: LD_INT 83
29456: PUSH
29457: LD_INT 84
29459: PUSH
29460: LD_INT 85
29462: PUSH
29463: LD_INT 86
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 6
29474: PUSH
29475: LD_INT 15
29477: PUSH
29478: LD_INT 16
29480: PUSH
29481: LD_INT 7
29483: PUSH
29484: LD_INT 12
29486: PUSH
29487: LD_INT 13
29489: PUSH
29490: LD_INT 10
29492: PUSH
29493: LD_INT 14
29495: PUSH
29496: LD_INT 20
29498: PUSH
29499: LD_INT 21
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_INT 25
29507: PUSH
29508: LD_INT 32
29510: PUSH
29511: LD_INT 27
29513: PUSH
29514: LD_INT 36
29516: PUSH
29517: LD_INT 69
29519: PUSH
29520: LD_INT 39
29522: PUSH
29523: LD_INT 34
29525: PUSH
29526: LD_INT 40
29528: PUSH
29529: LD_INT 48
29531: PUSH
29532: LD_INT 49
29534: PUSH
29535: LD_INT 50
29537: PUSH
29538: LD_INT 51
29540: PUSH
29541: LD_INT 52
29543: PUSH
29544: LD_INT 53
29546: PUSH
29547: LD_INT 54
29549: PUSH
29550: LD_INT 55
29552: PUSH
29553: LD_INT 56
29555: PUSH
29556: LD_INT 57
29558: PUSH
29559: LD_INT 58
29561: PUSH
29562: LD_INT 59
29564: PUSH
29565: LD_INT 60
29567: PUSH
29568: LD_INT 61
29570: PUSH
29571: LD_INT 62
29573: PUSH
29574: LD_INT 80
29576: PUSH
29577: LD_INT 82
29579: PUSH
29580: LD_INT 83
29582: PUSH
29583: LD_INT 84
29585: PUSH
29586: LD_INT 85
29588: PUSH
29589: LD_INT 86
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
29645: GO 30112
29647: LD_INT 2
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29881
29655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29656: LD_ADDR_VAR 0 4
29660: PUSH
29661: LD_INT 35
29663: PUSH
29664: LD_INT 45
29666: PUSH
29667: LD_INT 46
29669: PUSH
29670: LD_INT 47
29672: PUSH
29673: LD_INT 82
29675: PUSH
29676: LD_INT 83
29678: PUSH
29679: LD_INT 84
29681: PUSH
29682: LD_INT 85
29684: PUSH
29685: LD_INT 87
29687: PUSH
29688: LD_INT 70
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 11
29696: PUSH
29697: LD_INT 3
29699: PUSH
29700: LD_INT 4
29702: PUSH
29703: LD_INT 5
29705: PUSH
29706: LD_INT 6
29708: PUSH
29709: LD_INT 15
29711: PUSH
29712: LD_INT 18
29714: PUSH
29715: LD_INT 7
29717: PUSH
29718: LD_INT 17
29720: PUSH
29721: LD_INT 8
29723: PUSH
29724: LD_INT 20
29726: PUSH
29727: LD_INT 21
29729: PUSH
29730: LD_INT 22
29732: PUSH
29733: LD_INT 72
29735: PUSH
29736: LD_INT 26
29738: PUSH
29739: LD_INT 69
29741: PUSH
29742: LD_INT 39
29744: PUSH
29745: LD_INT 40
29747: PUSH
29748: LD_INT 41
29750: PUSH
29751: LD_INT 42
29753: PUSH
29754: LD_INT 43
29756: PUSH
29757: LD_INT 48
29759: PUSH
29760: LD_INT 49
29762: PUSH
29763: LD_INT 50
29765: PUSH
29766: LD_INT 51
29768: PUSH
29769: LD_INT 52
29771: PUSH
29772: LD_INT 53
29774: PUSH
29775: LD_INT 54
29777: PUSH
29778: LD_INT 55
29780: PUSH
29781: LD_INT 56
29783: PUSH
29784: LD_INT 60
29786: PUSH
29787: LD_INT 61
29789: PUSH
29790: LD_INT 62
29792: PUSH
29793: LD_INT 66
29795: PUSH
29796: LD_INT 67
29798: PUSH
29799: LD_INT 68
29801: PUSH
29802: LD_INT 81
29804: PUSH
29805: LD_INT 82
29807: PUSH
29808: LD_INT 83
29810: PUSH
29811: LD_INT 84
29813: PUSH
29814: LD_INT 85
29816: PUSH
29817: LD_INT 87
29819: PUSH
29820: LD_INT 88
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
29879: GO 30112
29881: LD_INT 3
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 30111
29889: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29890: LD_ADDR_VAR 0 4
29894: PUSH
29895: LD_INT 46
29897: PUSH
29898: LD_INT 47
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: LD_INT 2
29906: PUSH
29907: LD_INT 82
29909: PUSH
29910: LD_INT 83
29912: PUSH
29913: LD_INT 84
29915: PUSH
29916: LD_INT 85
29918: PUSH
29919: LD_INT 86
29921: PUSH
29922: LD_INT 11
29924: PUSH
29925: LD_INT 9
29927: PUSH
29928: LD_INT 20
29930: PUSH
29931: LD_INT 19
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 24
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_INT 25
29945: PUSH
29946: LD_INT 28
29948: PUSH
29949: LD_INT 29
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 31
29957: PUSH
29958: LD_INT 37
29960: PUSH
29961: LD_INT 38
29963: PUSH
29964: LD_INT 32
29966: PUSH
29967: LD_INT 27
29969: PUSH
29970: LD_INT 33
29972: PUSH
29973: LD_INT 69
29975: PUSH
29976: LD_INT 39
29978: PUSH
29979: LD_INT 34
29981: PUSH
29982: LD_INT 40
29984: PUSH
29985: LD_INT 71
29987: PUSH
29988: LD_INT 23
29990: PUSH
29991: LD_INT 44
29993: PUSH
29994: LD_INT 48
29996: PUSH
29997: LD_INT 49
29999: PUSH
30000: LD_INT 50
30002: PUSH
30003: LD_INT 51
30005: PUSH
30006: LD_INT 52
30008: PUSH
30009: LD_INT 53
30011: PUSH
30012: LD_INT 54
30014: PUSH
30015: LD_INT 55
30017: PUSH
30018: LD_INT 56
30020: PUSH
30021: LD_INT 57
30023: PUSH
30024: LD_INT 58
30026: PUSH
30027: LD_INT 59
30029: PUSH
30030: LD_INT 63
30032: PUSH
30033: LD_INT 64
30035: PUSH
30036: LD_INT 65
30038: PUSH
30039: LD_INT 82
30041: PUSH
30042: LD_INT 83
30044: PUSH
30045: LD_INT 84
30047: PUSH
30048: LD_INT 85
30050: PUSH
30051: LD_INT 86
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
30109: GO 30112
30111: POP
// if state > - 1 and state < 3 then
30112: LD_VAR 0 3
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: GREATER
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_INT 3
30129: LESS
30130: AND
30131: IFFALSE 30188
// for i in result do
30133: LD_ADDR_VAR 0 5
30137: PUSH
30138: LD_VAR 0 4
30142: PUSH
30143: FOR_IN
30144: IFFALSE 30186
// if GetTech ( i , side ) <> state then
30146: LD_VAR 0 5
30150: PPUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 321
30160: PUSH
30161: LD_VAR 0 3
30165: NONEQUAL
30166: IFFALSE 30184
// result := result diff i ;
30168: LD_ADDR_VAR 0 4
30172: PUSH
30173: LD_VAR 0 4
30177: PUSH
30178: LD_VAR 0 5
30182: DIFF
30183: ST_TO_ADDR
30184: GO 30143
30186: POP
30187: POP
// end ;
30188: LD_VAR 0 4
30192: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30193: LD_INT 0
30195: PPUSH
30196: PPUSH
30197: PPUSH
// result := true ;
30198: LD_ADDR_VAR 0 3
30202: PUSH
30203: LD_INT 1
30205: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: LD_VAR 0 2
30215: PPUSH
30216: CALL_OW 480
30220: ST_TO_ADDR
// if not tmp then
30221: LD_VAR 0 5
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30279
// for i in tmp do
30230: LD_ADDR_VAR 0 4
30234: PUSH
30235: LD_VAR 0 5
30239: PUSH
30240: FOR_IN
30241: IFFALSE 30277
// if GetTech ( i , side ) <> state_researched then
30243: LD_VAR 0 4
30247: PPUSH
30248: LD_VAR 0 1
30252: PPUSH
30253: CALL_OW 321
30257: PUSH
30258: LD_INT 2
30260: NONEQUAL
30261: IFFALSE 30275
// begin result := false ;
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 0
30270: ST_TO_ADDR
// exit ;
30271: POP
30272: POP
30273: GO 30279
// end ;
30275: GO 30240
30277: POP
30278: POP
// end ;
30279: LD_VAR 0 3
30283: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30284: LD_INT 0
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30299: LD_VAR 0 1
30303: NOT
30304: PUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: CALL_OW 257
30314: PUSH
30315: LD_INT 9
30317: NONEQUAL
30318: OR
30319: IFFALSE 30323
// exit ;
30321: GO 30896
// side := GetSide ( unit ) ;
30323: LD_ADDR_VAR 0 9
30327: PUSH
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 255
30337: ST_TO_ADDR
// tech_space := tech_spacanom ;
30338: LD_ADDR_VAR 0 12
30342: PUSH
30343: LD_INT 29
30345: ST_TO_ADDR
// tech_time := tech_taurad ;
30346: LD_ADDR_VAR 0 13
30350: PUSH
30351: LD_INT 28
30353: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30354: LD_ADDR_VAR 0 11
30358: PUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 310
30368: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30369: LD_VAR 0 11
30373: PPUSH
30374: CALL_OW 247
30378: PUSH
30379: LD_INT 2
30381: EQUAL
30382: IFFALSE 30386
// exit ;
30384: GO 30896
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30386: LD_ADDR_VAR 0 8
30390: PUSH
30391: LD_INT 81
30393: PUSH
30394: LD_VAR 0 9
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: LD_INT 21
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 69
30428: ST_TO_ADDR
// if not tmp then
30429: LD_VAR 0 8
30433: NOT
30434: IFFALSE 30438
// exit ;
30436: GO 30896
// if in_unit then
30438: LD_VAR 0 11
30442: IFFALSE 30466
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30444: LD_ADDR_VAR 0 10
30448: PUSH
30449: LD_VAR 0 8
30453: PPUSH
30454: LD_VAR 0 11
30458: PPUSH
30459: CALL_OW 74
30463: ST_TO_ADDR
30464: GO 30486
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30466: LD_ADDR_VAR 0 10
30470: PUSH
30471: LD_VAR 0 8
30475: PPUSH
30476: LD_VAR 0 1
30480: PPUSH
30481: CALL_OW 74
30485: ST_TO_ADDR
// if not enemy then
30486: LD_VAR 0 10
30490: NOT
30491: IFFALSE 30495
// exit ;
30493: GO 30896
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30495: LD_VAR 0 11
30499: PUSH
30500: LD_VAR 0 11
30504: PPUSH
30505: LD_VAR 0 10
30509: PPUSH
30510: CALL_OW 296
30514: PUSH
30515: LD_INT 13
30517: GREATER
30518: AND
30519: PUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: LD_VAR 0 10
30529: PPUSH
30530: CALL_OW 296
30534: PUSH
30535: LD_INT 12
30537: GREATER
30538: OR
30539: IFFALSE 30543
// exit ;
30541: GO 30896
// missile := [ 1 ] ;
30543: LD_ADDR_VAR 0 14
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: EMPTY
30552: LIST
30553: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30554: LD_VAR 0 9
30558: PPUSH
30559: LD_VAR 0 12
30563: PPUSH
30564: CALL_OW 325
30568: IFFALSE 30597
// missile := Replace ( missile , missile + 1 , 2 ) ;
30570: LD_ADDR_VAR 0 14
30574: PUSH
30575: LD_VAR 0 14
30579: PPUSH
30580: LD_VAR 0 14
30584: PUSH
30585: LD_INT 1
30587: PLUS
30588: PPUSH
30589: LD_INT 2
30591: PPUSH
30592: CALL_OW 1
30596: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30597: LD_VAR 0 9
30601: PPUSH
30602: LD_VAR 0 13
30606: PPUSH
30607: CALL_OW 325
30611: PUSH
30612: LD_VAR 0 10
30616: PPUSH
30617: CALL_OW 255
30621: PPUSH
30622: LD_VAR 0 13
30626: PPUSH
30627: CALL_OW 325
30631: NOT
30632: AND
30633: IFFALSE 30662
// missile := Replace ( missile , missile + 1 , 3 ) ;
30635: LD_ADDR_VAR 0 14
30639: PUSH
30640: LD_VAR 0 14
30644: PPUSH
30645: LD_VAR 0 14
30649: PUSH
30650: LD_INT 1
30652: PLUS
30653: PPUSH
30654: LD_INT 3
30656: PPUSH
30657: CALL_OW 1
30661: ST_TO_ADDR
// if missile < 2 then
30662: LD_VAR 0 14
30666: PUSH
30667: LD_INT 2
30669: LESS
30670: IFFALSE 30674
// exit ;
30672: GO 30896
// x := GetX ( enemy ) ;
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: LD_VAR 0 10
30683: PPUSH
30684: CALL_OW 250
30688: ST_TO_ADDR
// y := GetY ( enemy ) ;
30689: LD_ADDR_VAR 0 5
30693: PUSH
30694: LD_VAR 0 10
30698: PPUSH
30699: CALL_OW 251
30703: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30704: LD_ADDR_VAR 0 6
30708: PUSH
30709: LD_VAR 0 4
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PPUSH
30718: LD_INT 1
30720: PPUSH
30721: CALL_OW 12
30725: PLUS
30726: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30727: LD_ADDR_VAR 0 7
30731: PUSH
30732: LD_VAR 0 5
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PPUSH
30741: LD_INT 1
30743: PPUSH
30744: CALL_OW 12
30748: PLUS
30749: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30750: LD_VAR 0 6
30754: PPUSH
30755: LD_VAR 0 7
30759: PPUSH
30760: CALL_OW 488
30764: NOT
30765: IFFALSE 30787
// begin _x := x ;
30767: LD_ADDR_VAR 0 6
30771: PUSH
30772: LD_VAR 0 4
30776: ST_TO_ADDR
// _y := y ;
30777: LD_ADDR_VAR 0 7
30781: PUSH
30782: LD_VAR 0 5
30786: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30787: LD_ADDR_VAR 0 3
30791: PUSH
30792: LD_INT 1
30794: PPUSH
30795: LD_VAR 0 14
30799: PPUSH
30800: CALL_OW 12
30804: ST_TO_ADDR
// case i of 1 :
30805: LD_VAR 0 3
30809: PUSH
30810: LD_INT 1
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30835
30818: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30819: LD_VAR 0 1
30823: PPUSH
30824: LD_VAR 0 10
30828: PPUSH
30829: CALL_OW 115
30833: GO 30896
30835: LD_INT 2
30837: DOUBLE
30838: EQUAL
30839: IFTRUE 30843
30841: GO 30865
30843: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30844: LD_VAR 0 1
30848: PPUSH
30849: LD_VAR 0 6
30853: PPUSH
30854: LD_VAR 0 7
30858: PPUSH
30859: CALL_OW 153
30863: GO 30896
30865: LD_INT 3
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30895
30873: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_VAR 0 6
30883: PPUSH
30884: LD_VAR 0 7
30888: PPUSH
30889: CALL_OW 154
30893: GO 30896
30895: POP
// end ;
30896: LD_VAR 0 2
30900: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
// if not unit or not building then
30909: LD_VAR 0 1
30913: NOT
30914: PUSH
30915: LD_VAR 0 2
30919: NOT
30920: OR
30921: IFFALSE 30925
// exit ;
30923: GO 31083
// x := GetX ( building ) ;
30925: LD_ADDR_VAR 0 5
30929: PUSH
30930: LD_VAR 0 2
30934: PPUSH
30935: CALL_OW 250
30939: ST_TO_ADDR
// y := GetY ( building ) ;
30940: LD_ADDR_VAR 0 6
30944: PUSH
30945: LD_VAR 0 2
30949: PPUSH
30950: CALL_OW 251
30954: ST_TO_ADDR
// for i = 0 to 5 do
30955: LD_ADDR_VAR 0 4
30959: PUSH
30960: DOUBLE
30961: LD_INT 0
30963: DEC
30964: ST_TO_ADDR
30965: LD_INT 5
30967: PUSH
30968: FOR_TO
30969: IFFALSE 31081
// begin _x := ShiftX ( x , i , 3 ) ;
30971: LD_ADDR_VAR 0 7
30975: PUSH
30976: LD_VAR 0 5
30980: PPUSH
30981: LD_VAR 0 4
30985: PPUSH
30986: LD_INT 3
30988: PPUSH
30989: CALL_OW 272
30993: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30994: LD_ADDR_VAR 0 8
30998: PUSH
30999: LD_VAR 0 6
31003: PPUSH
31004: LD_VAR 0 4
31008: PPUSH
31009: LD_INT 3
31011: PPUSH
31012: CALL_OW 273
31016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31017: LD_VAR 0 7
31021: PPUSH
31022: LD_VAR 0 8
31026: PPUSH
31027: CALL_OW 488
31031: NOT
31032: IFFALSE 31036
// continue ;
31034: GO 30968
// if HexInfo ( _x , _y ) = 0 then
31036: LD_VAR 0 7
31040: PPUSH
31041: LD_VAR 0 8
31045: PPUSH
31046: CALL_OW 428
31050: PUSH
31051: LD_INT 0
31053: EQUAL
31054: IFFALSE 31079
// begin ComMoveXY ( unit , _x , _y ) ;
31056: LD_VAR 0 1
31060: PPUSH
31061: LD_VAR 0 7
31065: PPUSH
31066: LD_VAR 0 8
31070: PPUSH
31071: CALL_OW 111
// exit ;
31075: POP
31076: POP
31077: GO 31083
// end ; end ;
31079: GO 30968
31081: POP
31082: POP
// end ;
31083: LD_VAR 0 3
31087: RET
// export function ScanBase ( side , base_area ) ; begin
31088: LD_INT 0
31090: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_INT 81
31103: PUSH
31104: LD_VAR 0 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PPUSH
31113: CALL_OW 70
31117: ST_TO_ADDR
// end ;
31118: LD_VAR 0 3
31122: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31123: LD_INT 0
31125: PPUSH
31126: PPUSH
31127: PPUSH
31128: PPUSH
// result := false ;
31129: LD_ADDR_VAR 0 2
31133: PUSH
31134: LD_INT 0
31136: ST_TO_ADDR
// side := GetSide ( unit ) ;
31137: LD_ADDR_VAR 0 3
31141: PUSH
31142: LD_VAR 0 1
31146: PPUSH
31147: CALL_OW 255
31151: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31152: LD_ADDR_VAR 0 4
31156: PUSH
31157: LD_VAR 0 1
31161: PPUSH
31162: CALL_OW 248
31166: ST_TO_ADDR
// case nat of 1 :
31167: LD_VAR 0 4
31171: PUSH
31172: LD_INT 1
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31191
31180: POP
// tech := tech_lassight ; 2 :
31181: LD_ADDR_VAR 0 5
31185: PUSH
31186: LD_INT 12
31188: ST_TO_ADDR
31189: GO 31230
31191: LD_INT 2
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31210
31199: POP
// tech := tech_mortar ; 3 :
31200: LD_ADDR_VAR 0 5
31204: PUSH
31205: LD_INT 41
31207: ST_TO_ADDR
31208: GO 31230
31210: LD_INT 3
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31229
31218: POP
// tech := tech_bazooka ; end ;
31219: LD_ADDR_VAR 0 5
31223: PUSH
31224: LD_INT 44
31226: ST_TO_ADDR
31227: GO 31230
31229: POP
// if Researched ( side , tech ) then
31230: LD_VAR 0 3
31234: PPUSH
31235: LD_VAR 0 5
31239: PPUSH
31240: CALL_OW 325
31244: IFFALSE 31271
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31246: LD_ADDR_VAR 0 2
31250: PUSH
31251: LD_INT 5
31253: PUSH
31254: LD_INT 8
31256: PUSH
31257: LD_INT 9
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: PUSH
31265: LD_VAR 0 4
31269: ARRAY
31270: ST_TO_ADDR
// end ;
31271: LD_VAR 0 2
31275: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31276: LD_INT 0
31278: PPUSH
31279: PPUSH
31280: PPUSH
// if not mines then
31281: LD_VAR 0 2
31285: NOT
31286: IFFALSE 31290
// exit ;
31288: GO 31434
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31290: LD_ADDR_VAR 0 5
31294: PUSH
31295: LD_INT 81
31297: PUSH
31298: LD_VAR 0 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 3
31309: PUSH
31310: LD_INT 21
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PPUSH
31328: CALL_OW 69
31332: ST_TO_ADDR
// for i in mines do
31333: LD_ADDR_VAR 0 4
31337: PUSH
31338: LD_VAR 0 2
31342: PUSH
31343: FOR_IN
31344: IFFALSE 31432
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31346: LD_VAR 0 4
31350: PUSH
31351: LD_INT 1
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 4
31359: PUSH
31360: LD_INT 2
31362: ARRAY
31363: PPUSH
31364: CALL_OW 458
31368: NOT
31369: IFFALSE 31373
// continue ;
31371: GO 31343
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31373: LD_VAR 0 4
31377: PUSH
31378: LD_INT 1
31380: ARRAY
31381: PPUSH
31382: LD_VAR 0 4
31386: PUSH
31387: LD_INT 2
31389: ARRAY
31390: PPUSH
31391: CALL_OW 428
31395: PUSH
31396: LD_VAR 0 5
31400: IN
31401: IFFALSE 31430
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31403: LD_VAR 0 4
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: LD_VAR 0 4
31416: PUSH
31417: LD_INT 2
31419: ARRAY
31420: PPUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 456
// end ;
31430: GO 31343
31432: POP
31433: POP
// end ;
31434: LD_VAR 0 3
31438: RET
// export function Count ( array ) ; var i ; begin
31439: LD_INT 0
31441: PPUSH
31442: PPUSH
// result := 0 ;
31443: LD_ADDR_VAR 0 2
31447: PUSH
31448: LD_INT 0
31450: ST_TO_ADDR
// for i in array do
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 1
31460: PUSH
31461: FOR_IN
31462: IFFALSE 31486
// if i then
31464: LD_VAR 0 3
31468: IFFALSE 31484
// result := result + 1 ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_VAR 0 2
31479: PUSH
31480: LD_INT 1
31482: PLUS
31483: ST_TO_ADDR
31484: GO 31461
31486: POP
31487: POP
// end ;
31488: LD_VAR 0 2
31492: RET
// export function IsEmpty ( building ) ; begin
31493: LD_INT 0
31495: PPUSH
// if not building then
31496: LD_VAR 0 1
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31548
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31505: LD_ADDR_VAR 0 2
31509: PUSH
31510: LD_VAR 0 1
31514: PUSH
31515: LD_INT 22
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 255
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 58
31534: PUSH
31535: EMPTY
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PPUSH
31542: CALL_OW 69
31546: IN
31547: ST_TO_ADDR
// end ;
31548: LD_VAR 0 2
31552: RET
// export function IsNotFull ( building ) ; begin
31553: LD_INT 0
31555: PPUSH
// if not building then
31556: LD_VAR 0 1
31560: NOT
31561: IFFALSE 31565
// exit ;
31563: GO 31584
// result := UnitsInside ( building ) < 6 ;
31565: LD_ADDR_VAR 0 2
31569: PUSH
31570: LD_VAR 0 1
31574: PPUSH
31575: CALL_OW 313
31579: PUSH
31580: LD_INT 6
31582: LESS
31583: ST_TO_ADDR
// end ;
31584: LD_VAR 0 2
31588: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31589: LD_INT 0
31591: PPUSH
31592: PPUSH
31593: PPUSH
31594: PPUSH
// tmp := [ ] ;
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: EMPTY
31601: ST_TO_ADDR
// list := [ ] ;
31602: LD_ADDR_VAR 0 5
31606: PUSH
31607: EMPTY
31608: ST_TO_ADDR
// for i = 16 to 25 do
31609: LD_ADDR_VAR 0 4
31613: PUSH
31614: DOUBLE
31615: LD_INT 16
31617: DEC
31618: ST_TO_ADDR
31619: LD_INT 25
31621: PUSH
31622: FOR_TO
31623: IFFALSE 31696
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_VAR 0 3
31634: PUSH
31635: LD_INT 22
31637: PUSH
31638: LD_VAR 0 1
31642: PPUSH
31643: CALL_OW 255
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 91
31654: PUSH
31655: LD_VAR 0 1
31659: PUSH
31660: LD_INT 6
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 30
31670: PUSH
31671: LD_VAR 0 4
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: PPUSH
31688: CALL_OW 69
31692: ADD
31693: ST_TO_ADDR
31694: GO 31622
31696: POP
31697: POP
// for i = 1 to tmp do
31698: LD_ADDR_VAR 0 4
31702: PUSH
31703: DOUBLE
31704: LD_INT 1
31706: DEC
31707: ST_TO_ADDR
31708: LD_VAR 0 3
31712: PUSH
31713: FOR_TO
31714: IFFALSE 31802
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31716: LD_ADDR_VAR 0 5
31720: PUSH
31721: LD_VAR 0 5
31725: PUSH
31726: LD_VAR 0 3
31730: PUSH
31731: LD_VAR 0 4
31735: ARRAY
31736: PPUSH
31737: CALL_OW 266
31741: PUSH
31742: LD_VAR 0 3
31746: PUSH
31747: LD_VAR 0 4
31751: ARRAY
31752: PPUSH
31753: CALL_OW 250
31757: PUSH
31758: LD_VAR 0 3
31762: PUSH
31763: LD_VAR 0 4
31767: ARRAY
31768: PPUSH
31769: CALL_OW 251
31773: PUSH
31774: LD_VAR 0 3
31778: PUSH
31779: LD_VAR 0 4
31783: ARRAY
31784: PPUSH
31785: CALL_OW 254
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: ADD
31799: ST_TO_ADDR
31800: GO 31713
31802: POP
31803: POP
// result := list ;
31804: LD_ADDR_VAR 0 2
31808: PUSH
31809: LD_VAR 0 5
31813: ST_TO_ADDR
// end ;
31814: LD_VAR 0 2
31818: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
// if not factory then
31828: LD_VAR 0 1
31832: NOT
31833: IFFALSE 31837
// exit ;
31835: GO 32430
// if control = control_apeman then
31837: LD_VAR 0 4
31841: PUSH
31842: LD_INT 5
31844: EQUAL
31845: IFFALSE 31954
// begin tmp := UnitsInside ( factory ) ;
31847: LD_ADDR_VAR 0 8
31851: PUSH
31852: LD_VAR 0 1
31856: PPUSH
31857: CALL_OW 313
31861: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31862: LD_VAR 0 8
31866: PPUSH
31867: LD_INT 25
31869: PUSH
31870: LD_INT 12
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PPUSH
31877: CALL_OW 72
31881: NOT
31882: IFFALSE 31892
// control := control_manual ;
31884: LD_ADDR_VAR 0 4
31888: PUSH
31889: LD_INT 1
31891: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31892: LD_ADDR_VAR 0 8
31896: PUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL 31589 0 1
31906: ST_TO_ADDR
// if tmp then
31907: LD_VAR 0 8
31911: IFFALSE 31954
// begin for i in tmp do
31913: LD_ADDR_VAR 0 7
31917: PUSH
31918: LD_VAR 0 8
31922: PUSH
31923: FOR_IN
31924: IFFALSE 31952
// if i [ 1 ] = b_ext_radio then
31926: LD_VAR 0 7
31930: PUSH
31931: LD_INT 1
31933: ARRAY
31934: PUSH
31935: LD_INT 22
31937: EQUAL
31938: IFFALSE 31950
// begin control := control_remote ;
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: LD_INT 2
31947: ST_TO_ADDR
// break ;
31948: GO 31952
// end ;
31950: GO 31923
31952: POP
31953: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31954: LD_VAR 0 1
31958: PPUSH
31959: LD_VAR 0 2
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: LD_VAR 0 4
31973: PPUSH
31974: LD_VAR 0 5
31978: PPUSH
31979: CALL_OW 448
31983: IFFALSE 32018
// begin result := [ chassis , engine , control , weapon ] ;
31985: LD_ADDR_VAR 0 6
31989: PUSH
31990: LD_VAR 0 2
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_VAR 0 4
32004: PUSH
32005: LD_VAR 0 5
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// exit ;
32016: GO 32430
// end ; _chassis := AvailableChassisList ( factory ) ;
32018: LD_ADDR_VAR 0 9
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 475
32032: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32033: LD_ADDR_VAR 0 11
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 476
32047: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32048: LD_ADDR_VAR 0 12
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 477
32062: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32063: LD_ADDR_VAR 0 10
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 478
32077: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32078: LD_VAR 0 9
32082: NOT
32083: PUSH
32084: LD_VAR 0 11
32088: NOT
32089: OR
32090: PUSH
32091: LD_VAR 0 12
32095: NOT
32096: OR
32097: PUSH
32098: LD_VAR 0 10
32102: NOT
32103: OR
32104: IFFALSE 32139
// begin result := [ chassis , engine , control , weapon ] ;
32106: LD_ADDR_VAR 0 6
32110: PUSH
32111: LD_VAR 0 2
32115: PUSH
32116: LD_VAR 0 3
32120: PUSH
32121: LD_VAR 0 4
32125: PUSH
32126: LD_VAR 0 5
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: ST_TO_ADDR
// exit ;
32137: GO 32430
// end ; if not chassis in _chassis then
32139: LD_VAR 0 2
32143: PUSH
32144: LD_VAR 0 9
32148: IN
32149: NOT
32150: IFFALSE 32176
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32152: LD_ADDR_VAR 0 2
32156: PUSH
32157: LD_VAR 0 9
32161: PUSH
32162: LD_INT 1
32164: PPUSH
32165: LD_VAR 0 9
32169: PPUSH
32170: CALL_OW 12
32174: ARRAY
32175: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32176: LD_VAR 0 2
32180: PPUSH
32181: LD_VAR 0 3
32185: PPUSH
32186: CALL 32435 0 2
32190: NOT
32191: IFFALSE 32250
// repeat engine := _engine [ 1 ] ;
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_VAR 0 11
32202: PUSH
32203: LD_INT 1
32205: ARRAY
32206: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32207: LD_ADDR_VAR 0 11
32211: PUSH
32212: LD_VAR 0 11
32216: PPUSH
32217: LD_INT 1
32219: PPUSH
32220: CALL_OW 3
32224: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32225: LD_VAR 0 2
32229: PPUSH
32230: LD_VAR 0 3
32234: PPUSH
32235: CALL 32435 0 2
32239: PUSH
32240: LD_VAR 0 11
32244: PUSH
32245: EMPTY
32246: EQUAL
32247: OR
32248: IFFALSE 32193
// if not control in _control then
32250: LD_VAR 0 4
32254: PUSH
32255: LD_VAR 0 12
32259: IN
32260: NOT
32261: IFFALSE 32287
// control := _control [ rand ( 1 , _control ) ] ;
32263: LD_ADDR_VAR 0 4
32267: PUSH
32268: LD_VAR 0 12
32272: PUSH
32273: LD_INT 1
32275: PPUSH
32276: LD_VAR 0 12
32280: PPUSH
32281: CALL_OW 12
32285: ARRAY
32286: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32287: LD_VAR 0 2
32291: PPUSH
32292: LD_VAR 0 5
32296: PPUSH
32297: CALL 32655 0 2
32301: NOT
32302: IFFALSE 32361
// repeat weapon := _weapon [ 1 ] ;
32304: LD_ADDR_VAR 0 5
32308: PUSH
32309: LD_VAR 0 10
32313: PUSH
32314: LD_INT 1
32316: ARRAY
32317: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32318: LD_ADDR_VAR 0 10
32322: PUSH
32323: LD_VAR 0 10
32327: PPUSH
32328: LD_INT 1
32330: PPUSH
32331: CALL_OW 3
32335: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 5
32345: PPUSH
32346: CALL 32655 0 2
32350: PUSH
32351: LD_VAR 0 10
32355: PUSH
32356: EMPTY
32357: EQUAL
32358: OR
32359: IFFALSE 32304
// result := [ ] ;
32361: LD_ADDR_VAR 0 6
32365: PUSH
32366: EMPTY
32367: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_VAR 0 3
32382: PPUSH
32383: LD_VAR 0 4
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: CALL_OW 448
32397: IFFALSE 32430
// result := [ chassis , engine , control , weapon ] ;
32399: LD_ADDR_VAR 0 6
32403: PUSH
32404: LD_VAR 0 2
32408: PUSH
32409: LD_VAR 0 3
32413: PUSH
32414: LD_VAR 0 4
32418: PUSH
32419: LD_VAR 0 5
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
// end ;
32430: LD_VAR 0 6
32434: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32435: LD_INT 0
32437: PPUSH
// if not chassis or not engine then
32438: LD_VAR 0 1
32442: NOT
32443: PUSH
32444: LD_VAR 0 2
32448: NOT
32449: OR
32450: IFFALSE 32454
// exit ;
32452: GO 32650
// case engine of engine_solar :
32454: LD_VAR 0 2
32458: PUSH
32459: LD_INT 2
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32505
32467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_INT 11
32475: PUSH
32476: LD_INT 12
32478: PUSH
32479: LD_INT 13
32481: PUSH
32482: LD_INT 14
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: ST_TO_ADDR
32503: GO 32634
32505: LD_INT 1
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32575
32513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32514: LD_ADDR_VAR 0 3
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 12
32524: PUSH
32525: LD_INT 13
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: LD_INT 21
32548: PUSH
32549: LD_INT 23
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_INT 24
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: ST_TO_ADDR
32573: GO 32634
32575: LD_INT 3
32577: DOUBLE
32578: EQUAL
32579: IFTRUE 32583
32581: GO 32633
32583: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32584: LD_ADDR_VAR 0 3
32588: PUSH
32589: LD_INT 13
32591: PUSH
32592: LD_INT 14
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 3
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: LD_INT 5
32606: PUSH
32607: LD_INT 21
32609: PUSH
32610: LD_INT 22
32612: PUSH
32613: LD_INT 23
32615: PUSH
32616: LD_INT 24
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
32631: GO 32634
32633: POP
// result := ( chassis in result ) ;
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: LD_VAR 0 1
32643: PUSH
32644: LD_VAR 0 3
32648: IN
32649: ST_TO_ADDR
// end ;
32650: LD_VAR 0 3
32654: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32655: LD_INT 0
32657: PPUSH
// if not chassis or not weapon then
32658: LD_VAR 0 1
32662: NOT
32663: PUSH
32664: LD_VAR 0 2
32668: NOT
32669: OR
32670: IFFALSE 32674
// exit ;
32672: GO 33736
// case weapon of us_machine_gun :
32674: LD_VAR 0 2
32678: PUSH
32679: LD_INT 2
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32717
32687: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32688: LD_ADDR_VAR 0 3
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 4
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
32715: GO 33720
32717: LD_INT 3
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32755
32725: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: LD_INT 5
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 33720
32755: LD_INT 11
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32793
32763: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: ST_TO_ADDR
32791: GO 33720
32793: LD_INT 4
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32827
32801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: LD_INT 4
32815: PUSH
32816: LD_INT 5
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
32825: GO 33720
32827: LD_INT 5
32829: DOUBLE
32830: EQUAL
32831: IFTRUE 32835
32833: GO 32861
32835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: LD_INT 4
32849: PUSH
32850: LD_INT 5
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: ST_TO_ADDR
32859: GO 33720
32861: LD_INT 9
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32895
32869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32870: LD_ADDR_VAR 0 3
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: LD_INT 5
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
32893: GO 33720
32895: LD_INT 7
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32929
32903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32904: LD_ADDR_VAR 0 3
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: LD_INT 4
32917: PUSH
32918: LD_INT 5
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
32927: GO 33720
32929: LD_INT 12
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32963
32937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 33720
32963: LD_INT 13
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32997
32971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
32995: GO 33720
32997: LD_INT 14
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33023
33005: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: ST_TO_ADDR
33021: GO 33720
33023: LD_INT 6
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33049
33031: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: ST_TO_ADDR
33047: GO 33720
33049: LD_INT 10
33051: DOUBLE
33052: EQUAL
33053: IFTRUE 33057
33055: GO 33075
33057: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 4
33065: PUSH
33066: LD_INT 5
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33720
33075: LD_INT 22
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33109
33083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 11
33091: PUSH
33092: LD_INT 12
33094: PUSH
33095: LD_INT 13
33097: PUSH
33098: LD_INT 14
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
33107: GO 33720
33109: LD_INT 23
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33143
33117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 11
33125: PUSH
33126: LD_INT 12
33128: PUSH
33129: LD_INT 13
33131: PUSH
33132: LD_INT 14
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
33141: GO 33720
33143: LD_INT 24
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33177
33151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33152: LD_ADDR_VAR 0 3
33156: PUSH
33157: LD_INT 11
33159: PUSH
33160: LD_INT 12
33162: PUSH
33163: LD_INT 13
33165: PUSH
33166: LD_INT 14
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
33175: GO 33720
33177: LD_INT 30
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33211
33185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 11
33193: PUSH
33194: LD_INT 12
33196: PUSH
33197: LD_INT 13
33199: PUSH
33200: LD_INT 14
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: ST_TO_ADDR
33209: GO 33720
33211: LD_INT 25
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33237
33219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_INT 13
33227: PUSH
33228: LD_INT 14
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: ST_TO_ADDR
33235: GO 33720
33237: LD_INT 27
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33263
33245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33246: LD_ADDR_VAR 0 3
33250: PUSH
33251: LD_INT 13
33253: PUSH
33254: LD_INT 14
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: ST_TO_ADDR
33261: GO 33720
33263: LD_EXP 110
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33273
33271: GO 33299
33273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_INT 11
33281: PUSH
33282: LD_INT 12
33284: PUSH
33285: LD_INT 13
33287: PUSH
33288: LD_INT 14
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: ST_TO_ADDR
33297: GO 33720
33299: LD_INT 28
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33325
33307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_INT 13
33315: PUSH
33316: LD_INT 14
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: ST_TO_ADDR
33323: GO 33720
33325: LD_INT 29
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33333
33331: GO 33351
33333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33334: LD_ADDR_VAR 0 3
33338: PUSH
33339: LD_INT 13
33341: PUSH
33342: LD_INT 14
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: ST_TO_ADDR
33349: GO 33720
33351: LD_INT 31
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33359
33357: GO 33377
33359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33360: LD_ADDR_VAR 0 3
33364: PUSH
33365: LD_INT 13
33367: PUSH
33368: LD_INT 14
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: ST_TO_ADDR
33375: GO 33720
33377: LD_INT 26
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33403
33385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_INT 13
33393: PUSH
33394: LD_INT 14
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33720
33403: LD_INT 42
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33437
33411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 21
33419: PUSH
33420: LD_INT 22
33422: PUSH
33423: LD_INT 23
33425: PUSH
33426: LD_INT 24
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
33435: GO 33720
33437: LD_INT 43
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33471
33445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 21
33453: PUSH
33454: LD_INT 22
33456: PUSH
33457: LD_INT 23
33459: PUSH
33460: LD_INT 24
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
33469: GO 33720
33471: LD_INT 44
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33479
33477: GO 33505
33479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 21
33487: PUSH
33488: LD_INT 22
33490: PUSH
33491: LD_INT 23
33493: PUSH
33494: LD_INT 24
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: ST_TO_ADDR
33503: GO 33720
33505: LD_INT 45
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33539
33513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_INT 21
33521: PUSH
33522: LD_INT 22
33524: PUSH
33525: LD_INT 23
33527: PUSH
33528: LD_INT 24
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 33720
33539: LD_INT 49
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33573
33547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 21
33555: PUSH
33556: LD_INT 22
33558: PUSH
33559: LD_INT 23
33561: PUSH
33562: LD_INT 24
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
33571: GO 33720
33573: LD_INT 51
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33607
33581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 21
33589: PUSH
33590: LD_INT 22
33592: PUSH
33593: LD_INT 23
33595: PUSH
33596: LD_INT 24
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
33605: GO 33720
33607: LD_INT 52
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33641
33615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 21
33623: PUSH
33624: LD_INT 22
33626: PUSH
33627: LD_INT 23
33629: PUSH
33630: LD_INT 24
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 33720
33641: LD_INT 53
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33667
33649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 23
33657: PUSH
33658: LD_INT 24
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 33720
33667: LD_INT 46
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33693
33675: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 23
33683: PUSH
33684: LD_INT 24
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: ST_TO_ADDR
33691: GO 33720
33693: LD_INT 47
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33719
33701: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 23
33709: PUSH
33710: LD_INT 24
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 33720
33719: POP
// result := ( chassis in result ) ;
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_VAR 0 1
33729: PUSH
33730: LD_VAR 0 3
33734: IN
33735: ST_TO_ADDR
// end ;
33736: LD_VAR 0 3
33740: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
// result := array ;
33750: LD_ADDR_VAR 0 5
33754: PUSH
33755: LD_VAR 0 1
33759: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33760: LD_VAR 0 1
33764: NOT
33765: PUSH
33766: LD_VAR 0 2
33770: NOT
33771: OR
33772: PUSH
33773: LD_VAR 0 3
33777: NOT
33778: OR
33779: PUSH
33780: LD_VAR 0 2
33784: PUSH
33785: LD_VAR 0 1
33789: GREATER
33790: OR
33791: PUSH
33792: LD_VAR 0 3
33796: PUSH
33797: LD_VAR 0 1
33801: GREATER
33802: OR
33803: IFFALSE 33807
// exit ;
33805: GO 34103
// if direction then
33807: LD_VAR 0 4
33811: IFFALSE 33875
// begin d := 1 ;
33813: LD_ADDR_VAR 0 9
33817: PUSH
33818: LD_INT 1
33820: ST_TO_ADDR
// if i_from > i_to then
33821: LD_VAR 0 2
33825: PUSH
33826: LD_VAR 0 3
33830: GREATER
33831: IFFALSE 33857
// length := ( array - i_from ) + i_to else
33833: LD_ADDR_VAR 0 11
33837: PUSH
33838: LD_VAR 0 1
33842: PUSH
33843: LD_VAR 0 2
33847: MINUS
33848: PUSH
33849: LD_VAR 0 3
33853: PLUS
33854: ST_TO_ADDR
33855: GO 33873
// length := i_to - i_from ;
33857: LD_ADDR_VAR 0 11
33861: PUSH
33862: LD_VAR 0 3
33866: PUSH
33867: LD_VAR 0 2
33871: MINUS
33872: ST_TO_ADDR
// end else
33873: GO 33936
// begin d := - 1 ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: ST_TO_ADDR
// if i_from > i_to then
33884: LD_VAR 0 2
33888: PUSH
33889: LD_VAR 0 3
33893: GREATER
33894: IFFALSE 33914
// length := i_from - i_to else
33896: LD_ADDR_VAR 0 11
33900: PUSH
33901: LD_VAR 0 2
33905: PUSH
33906: LD_VAR 0 3
33910: MINUS
33911: ST_TO_ADDR
33912: GO 33936
// length := ( array - i_to ) + i_from ;
33914: LD_ADDR_VAR 0 11
33918: PUSH
33919: LD_VAR 0 1
33923: PUSH
33924: LD_VAR 0 3
33928: MINUS
33929: PUSH
33930: LD_VAR 0 2
33934: PLUS
33935: ST_TO_ADDR
// end ; if not length then
33936: LD_VAR 0 11
33940: NOT
33941: IFFALSE 33945
// exit ;
33943: GO 34103
// tmp := array ;
33945: LD_ADDR_VAR 0 10
33949: PUSH
33950: LD_VAR 0 1
33954: ST_TO_ADDR
// for i = 1 to length do
33955: LD_ADDR_VAR 0 6
33959: PUSH
33960: DOUBLE
33961: LD_INT 1
33963: DEC
33964: ST_TO_ADDR
33965: LD_VAR 0 11
33969: PUSH
33970: FOR_TO
33971: IFFALSE 34091
// begin for j = 1 to array do
33973: LD_ADDR_VAR 0 7
33977: PUSH
33978: DOUBLE
33979: LD_INT 1
33981: DEC
33982: ST_TO_ADDR
33983: LD_VAR 0 1
33987: PUSH
33988: FOR_TO
33989: IFFALSE 34077
// begin k := j + d ;
33991: LD_ADDR_VAR 0 8
33995: PUSH
33996: LD_VAR 0 7
34000: PUSH
34001: LD_VAR 0 9
34005: PLUS
34006: ST_TO_ADDR
// if k > array then
34007: LD_VAR 0 8
34011: PUSH
34012: LD_VAR 0 1
34016: GREATER
34017: IFFALSE 34027
// k := 1 ;
34019: LD_ADDR_VAR 0 8
34023: PUSH
34024: LD_INT 1
34026: ST_TO_ADDR
// if not k then
34027: LD_VAR 0 8
34031: NOT
34032: IFFALSE 34044
// k := array ;
34034: LD_ADDR_VAR 0 8
34038: PUSH
34039: LD_VAR 0 1
34043: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34044: LD_ADDR_VAR 0 10
34048: PUSH
34049: LD_VAR 0 10
34053: PPUSH
34054: LD_VAR 0 8
34058: PPUSH
34059: LD_VAR 0 1
34063: PUSH
34064: LD_VAR 0 7
34068: ARRAY
34069: PPUSH
34070: CALL_OW 1
34074: ST_TO_ADDR
// end ;
34075: GO 33988
34077: POP
34078: POP
// array := tmp ;
34079: LD_ADDR_VAR 0 1
34083: PUSH
34084: LD_VAR 0 10
34088: ST_TO_ADDR
// end ;
34089: GO 33970
34091: POP
34092: POP
// result := array ;
34093: LD_ADDR_VAR 0 5
34097: PUSH
34098: LD_VAR 0 1
34102: ST_TO_ADDR
// end ;
34103: LD_VAR 0 5
34107: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
// result := 0 ;
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_INT 0
34119: ST_TO_ADDR
// if not array or not value in array then
34120: LD_VAR 0 1
34124: NOT
34125: PUSH
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 1
34135: IN
34136: NOT
34137: OR
34138: IFFALSE 34142
// exit ;
34140: GO 34196
// for i = 1 to array do
34142: LD_ADDR_VAR 0 4
34146: PUSH
34147: DOUBLE
34148: LD_INT 1
34150: DEC
34151: ST_TO_ADDR
34152: LD_VAR 0 1
34156: PUSH
34157: FOR_TO
34158: IFFALSE 34194
// if value = array [ i ] then
34160: LD_VAR 0 2
34164: PUSH
34165: LD_VAR 0 1
34169: PUSH
34170: LD_VAR 0 4
34174: ARRAY
34175: EQUAL
34176: IFFALSE 34192
// begin result := i ;
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_VAR 0 4
34187: ST_TO_ADDR
// exit ;
34188: POP
34189: POP
34190: GO 34196
// end ;
34192: GO 34157
34194: POP
34195: POP
// end ;
34196: LD_VAR 0 3
34200: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34201: LD_INT 0
34203: PPUSH
// vc_chassis := chassis ;
34204: LD_ADDR_OWVAR 37
34208: PUSH
34209: LD_VAR 0 1
34213: ST_TO_ADDR
// vc_engine := engine ;
34214: LD_ADDR_OWVAR 39
34218: PUSH
34219: LD_VAR 0 2
34223: ST_TO_ADDR
// vc_control := control ;
34224: LD_ADDR_OWVAR 38
34228: PUSH
34229: LD_VAR 0 3
34233: ST_TO_ADDR
// vc_weapon := weapon ;
34234: LD_ADDR_OWVAR 40
34238: PUSH
34239: LD_VAR 0 4
34243: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34244: LD_ADDR_OWVAR 41
34248: PUSH
34249: LD_VAR 0 5
34253: ST_TO_ADDR
// end ;
34254: LD_VAR 0 6
34258: RET
// export function WantPlant ( unit ) ; var task ; begin
34259: LD_INT 0
34261: PPUSH
34262: PPUSH
// result := false ;
34263: LD_ADDR_VAR 0 2
34267: PUSH
34268: LD_INT 0
34270: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34271: LD_ADDR_VAR 0 3
34275: PUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: CALL_OW 437
34285: ST_TO_ADDR
// if task then
34286: LD_VAR 0 3
34290: IFFALSE 34318
// if task [ 1 ] [ 1 ] = p then
34292: LD_VAR 0 3
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PUSH
34305: LD_STRING p
34307: EQUAL
34308: IFFALSE 34318
// result := true ;
34310: LD_ADDR_VAR 0 2
34314: PUSH
34315: LD_INT 1
34317: ST_TO_ADDR
// end ;
34318: LD_VAR 0 2
34322: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34323: LD_INT 0
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
// if pos < 1 then
34329: LD_VAR 0 2
34333: PUSH
34334: LD_INT 1
34336: LESS
34337: IFFALSE 34341
// exit ;
34339: GO 34644
// if pos = 1 then
34341: LD_VAR 0 2
34345: PUSH
34346: LD_INT 1
34348: EQUAL
34349: IFFALSE 34382
// result := Replace ( arr , pos [ 1 ] , value ) else
34351: LD_ADDR_VAR 0 4
34355: PUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_VAR 0 2
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PPUSH
34370: LD_VAR 0 3
34374: PPUSH
34375: CALL_OW 1
34379: ST_TO_ADDR
34380: GO 34644
// begin tmp := arr ;
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_VAR 0 1
34391: ST_TO_ADDR
// s_arr := [ tmp ] ;
34392: LD_ADDR_VAR 0 7
34396: PUSH
34397: LD_VAR 0 6
34401: PUSH
34402: EMPTY
34403: LIST
34404: ST_TO_ADDR
// for i = 1 to pos - 1 do
34405: LD_ADDR_VAR 0 5
34409: PUSH
34410: DOUBLE
34411: LD_INT 1
34413: DEC
34414: ST_TO_ADDR
34415: LD_VAR 0 2
34419: PUSH
34420: LD_INT 1
34422: MINUS
34423: PUSH
34424: FOR_TO
34425: IFFALSE 34470
// begin tmp := tmp [ pos [ i ] ] ;
34427: LD_ADDR_VAR 0 6
34431: PUSH
34432: LD_VAR 0 6
34436: PUSH
34437: LD_VAR 0 2
34441: PUSH
34442: LD_VAR 0 5
34446: ARRAY
34447: ARRAY
34448: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34449: LD_ADDR_VAR 0 7
34453: PUSH
34454: LD_VAR 0 7
34458: PUSH
34459: LD_VAR 0 6
34463: PUSH
34464: EMPTY
34465: LIST
34466: ADD
34467: ST_TO_ADDR
// end ;
34468: GO 34424
34470: POP
34471: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34472: LD_ADDR_VAR 0 6
34476: PUSH
34477: LD_VAR 0 6
34481: PPUSH
34482: LD_VAR 0 2
34486: PUSH
34487: LD_VAR 0 2
34491: ARRAY
34492: PPUSH
34493: LD_VAR 0 3
34497: PPUSH
34498: CALL_OW 1
34502: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34503: LD_ADDR_VAR 0 7
34507: PUSH
34508: LD_VAR 0 7
34512: PPUSH
34513: LD_VAR 0 7
34517: PPUSH
34518: LD_VAR 0 6
34522: PPUSH
34523: CALL_OW 1
34527: ST_TO_ADDR
// for i = s_arr downto 2 do
34528: LD_ADDR_VAR 0 5
34532: PUSH
34533: DOUBLE
34534: LD_VAR 0 7
34538: INC
34539: ST_TO_ADDR
34540: LD_INT 2
34542: PUSH
34543: FOR_DOWNTO
34544: IFFALSE 34628
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34546: LD_ADDR_VAR 0 6
34550: PUSH
34551: LD_VAR 0 7
34555: PUSH
34556: LD_VAR 0 5
34560: PUSH
34561: LD_INT 1
34563: MINUS
34564: ARRAY
34565: PPUSH
34566: LD_VAR 0 2
34570: PUSH
34571: LD_VAR 0 5
34575: PUSH
34576: LD_INT 1
34578: MINUS
34579: ARRAY
34580: PPUSH
34581: LD_VAR 0 7
34585: PUSH
34586: LD_VAR 0 5
34590: ARRAY
34591: PPUSH
34592: CALL_OW 1
34596: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: LD_VAR 0 7
34606: PPUSH
34607: LD_VAR 0 5
34611: PUSH
34612: LD_INT 1
34614: MINUS
34615: PPUSH
34616: LD_VAR 0 6
34620: PPUSH
34621: CALL_OW 1
34625: ST_TO_ADDR
// end ;
34626: GO 34543
34628: POP
34629: POP
// result := s_arr [ 1 ] ;
34630: LD_ADDR_VAR 0 4
34634: PUSH
34635: LD_VAR 0 7
34639: PUSH
34640: LD_INT 1
34642: ARRAY
34643: ST_TO_ADDR
// end ; end ;
34644: LD_VAR 0 4
34648: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34649: LD_INT 0
34651: PPUSH
34652: PPUSH
// if not list then
34653: LD_VAR 0 1
34657: NOT
34658: IFFALSE 34662
// exit ;
34660: GO 34753
// i := list [ pos1 ] ;
34662: LD_ADDR_VAR 0 5
34666: PUSH
34667: LD_VAR 0 1
34671: PUSH
34672: LD_VAR 0 2
34676: ARRAY
34677: ST_TO_ADDR
// if not i then
34678: LD_VAR 0 5
34682: NOT
34683: IFFALSE 34687
// exit ;
34685: GO 34753
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34687: LD_ADDR_VAR 0 1
34691: PUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: LD_VAR 0 2
34701: PPUSH
34702: LD_VAR 0 1
34706: PUSH
34707: LD_VAR 0 3
34711: ARRAY
34712: PPUSH
34713: CALL_OW 1
34717: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34718: LD_ADDR_VAR 0 1
34722: PUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: LD_VAR 0 3
34732: PPUSH
34733: LD_VAR 0 5
34737: PPUSH
34738: CALL_OW 1
34742: ST_TO_ADDR
// result := list ;
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_VAR 0 1
34752: ST_TO_ADDR
// end ;
34753: LD_VAR 0 4
34757: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34758: LD_INT 0
34760: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34761: LD_ADDR_VAR 0 5
34765: PUSH
34766: LD_VAR 0 1
34770: PPUSH
34771: CALL_OW 250
34775: PPUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 251
34785: PPUSH
34786: LD_VAR 0 2
34790: PPUSH
34791: LD_VAR 0 3
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: CALL 34811 0 5
34805: ST_TO_ADDR
// end ;
34806: LD_VAR 0 5
34810: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34811: LD_INT 0
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
// if not list then
34817: LD_VAR 0 3
34821: NOT
34822: IFFALSE 34826
// exit ;
34824: GO 35214
// result := [ ] ;
34826: LD_ADDR_VAR 0 6
34830: PUSH
34831: EMPTY
34832: ST_TO_ADDR
// for i in list do
34833: LD_ADDR_VAR 0 7
34837: PUSH
34838: LD_VAR 0 3
34842: PUSH
34843: FOR_IN
34844: IFFALSE 35046
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34846: LD_ADDR_VAR 0 9
34850: PUSH
34851: LD_VAR 0 7
34855: PPUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: LD_VAR 0 2
34865: PPUSH
34866: CALL_OW 297
34870: ST_TO_ADDR
// if not result then
34871: LD_VAR 0 6
34875: NOT
34876: IFFALSE 34902
// result := [ [ i , tmp ] ] else
34878: LD_ADDR_VAR 0 6
34882: PUSH
34883: LD_VAR 0 7
34887: PUSH
34888: LD_VAR 0 9
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: ST_TO_ADDR
34900: GO 35044
// begin if result [ result ] [ 2 ] < tmp then
34902: LD_VAR 0 6
34906: PUSH
34907: LD_VAR 0 6
34911: ARRAY
34912: PUSH
34913: LD_INT 2
34915: ARRAY
34916: PUSH
34917: LD_VAR 0 9
34921: LESS
34922: IFFALSE 34964
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34924: LD_ADDR_VAR 0 6
34928: PUSH
34929: LD_VAR 0 6
34933: PPUSH
34934: LD_VAR 0 6
34938: PUSH
34939: LD_INT 1
34941: PLUS
34942: PPUSH
34943: LD_VAR 0 7
34947: PUSH
34948: LD_VAR 0 9
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PPUSH
34957: CALL_OW 2
34961: ST_TO_ADDR
34962: GO 35044
// for j = 1 to result do
34964: LD_ADDR_VAR 0 8
34968: PUSH
34969: DOUBLE
34970: LD_INT 1
34972: DEC
34973: ST_TO_ADDR
34974: LD_VAR 0 6
34978: PUSH
34979: FOR_TO
34980: IFFALSE 35042
// begin if tmp < result [ j ] [ 2 ] then
34982: LD_VAR 0 9
34986: PUSH
34987: LD_VAR 0 6
34991: PUSH
34992: LD_VAR 0 8
34996: ARRAY
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: LESS
35002: IFFALSE 35040
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35004: LD_ADDR_VAR 0 6
35008: PUSH
35009: LD_VAR 0 6
35013: PPUSH
35014: LD_VAR 0 8
35018: PPUSH
35019: LD_VAR 0 7
35023: PUSH
35024: LD_VAR 0 9
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PPUSH
35033: CALL_OW 2
35037: ST_TO_ADDR
// break ;
35038: GO 35042
// end ; end ;
35040: GO 34979
35042: POP
35043: POP
// end ; end ;
35044: GO 34843
35046: POP
35047: POP
// if result and not asc then
35048: LD_VAR 0 6
35052: PUSH
35053: LD_VAR 0 4
35057: NOT
35058: AND
35059: IFFALSE 35134
// begin tmp := result ;
35061: LD_ADDR_VAR 0 9
35065: PUSH
35066: LD_VAR 0 6
35070: ST_TO_ADDR
// for i = tmp downto 1 do
35071: LD_ADDR_VAR 0 7
35075: PUSH
35076: DOUBLE
35077: LD_VAR 0 9
35081: INC
35082: ST_TO_ADDR
35083: LD_INT 1
35085: PUSH
35086: FOR_DOWNTO
35087: IFFALSE 35132
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35089: LD_ADDR_VAR 0 6
35093: PUSH
35094: LD_VAR 0 6
35098: PPUSH
35099: LD_VAR 0 9
35103: PUSH
35104: LD_VAR 0 7
35108: MINUS
35109: PUSH
35110: LD_INT 1
35112: PLUS
35113: PPUSH
35114: LD_VAR 0 9
35118: PUSH
35119: LD_VAR 0 7
35123: ARRAY
35124: PPUSH
35125: CALL_OW 1
35129: ST_TO_ADDR
35130: GO 35086
35132: POP
35133: POP
// end ; tmp := [ ] ;
35134: LD_ADDR_VAR 0 9
35138: PUSH
35139: EMPTY
35140: ST_TO_ADDR
// if mode then
35141: LD_VAR 0 5
35145: IFFALSE 35214
// begin for i = 1 to result do
35147: LD_ADDR_VAR 0 7
35151: PUSH
35152: DOUBLE
35153: LD_INT 1
35155: DEC
35156: ST_TO_ADDR
35157: LD_VAR 0 6
35161: PUSH
35162: FOR_TO
35163: IFFALSE 35202
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35165: LD_ADDR_VAR 0 9
35169: PUSH
35170: LD_VAR 0 9
35174: PPUSH
35175: LD_VAR 0 7
35179: PPUSH
35180: LD_VAR 0 6
35184: PUSH
35185: LD_VAR 0 7
35189: ARRAY
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: PPUSH
35195: CALL_OW 1
35199: ST_TO_ADDR
35200: GO 35162
35202: POP
35203: POP
// result := tmp ;
35204: LD_ADDR_VAR 0 6
35208: PUSH
35209: LD_VAR 0 9
35213: ST_TO_ADDR
// end ; end ;
35214: LD_VAR 0 6
35218: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35219: LD_INT 0
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35227: LD_ADDR_VAR 0 5
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// if not x or not y then
35249: LD_VAR 0 2
35253: NOT
35254: PUSH
35255: LD_VAR 0 3
35259: NOT
35260: OR
35261: IFFALSE 35265
// exit ;
35263: GO 36917
// if not range then
35265: LD_VAR 0 4
35269: NOT
35270: IFFALSE 35280
// range := 10 ;
35272: LD_ADDR_VAR 0 4
35276: PUSH
35277: LD_INT 10
35279: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35280: LD_ADDR_VAR 0 8
35284: PUSH
35285: LD_INT 81
35287: PUSH
35288: LD_VAR 0 1
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 92
35299: PUSH
35300: LD_VAR 0 2
35304: PUSH
35305: LD_VAR 0 3
35309: PUSH
35310: LD_VAR 0 4
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: LD_INT 21
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: PPUSH
35343: CALL_OW 69
35347: ST_TO_ADDR
// if not tmp then
35348: LD_VAR 0 8
35352: NOT
35353: IFFALSE 35357
// exit ;
35355: GO 36917
// for i in tmp do
35357: LD_ADDR_VAR 0 6
35361: PUSH
35362: LD_VAR 0 8
35366: PUSH
35367: FOR_IN
35368: IFFALSE 36892
// begin points := [ 0 , 0 , 0 ] ;
35370: LD_ADDR_VAR 0 9
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
// bpoints := 1 ;
35389: LD_ADDR_VAR 0 10
35393: PUSH
35394: LD_INT 1
35396: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35397: LD_VAR 0 6
35401: PPUSH
35402: CALL_OW 247
35406: PUSH
35407: LD_INT 1
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35415
35413: GO 35993
35415: POP
// begin if GetClass ( i ) = 1 then
35416: LD_VAR 0 6
35420: PPUSH
35421: CALL_OW 257
35425: PUSH
35426: LD_INT 1
35428: EQUAL
35429: IFFALSE 35450
// points := [ 10 , 5 , 3 ] ;
35431: LD_ADDR_VAR 0 9
35435: PUSH
35436: LD_INT 10
35438: PUSH
35439: LD_INT 5
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35450: LD_VAR 0 6
35454: PPUSH
35455: CALL_OW 257
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: LD_INT 4
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: IN
35474: IFFALSE 35495
// points := [ 3 , 2 , 1 ] ;
35476: LD_ADDR_VAR 0 9
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35495: LD_VAR 0 6
35499: PPUSH
35500: CALL_OW 257
35504: PUSH
35505: LD_INT 5
35507: EQUAL
35508: IFFALSE 35529
// points := [ 130 , 5 , 2 ] ;
35510: LD_ADDR_VAR 0 9
35514: PUSH
35515: LD_INT 130
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35529: LD_VAR 0 6
35533: PPUSH
35534: CALL_OW 257
35538: PUSH
35539: LD_INT 8
35541: EQUAL
35542: IFFALSE 35563
// points := [ 35 , 35 , 30 ] ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_INT 35
35551: PUSH
35552: LD_INT 35
35554: PUSH
35555: LD_INT 30
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 257
35572: PUSH
35573: LD_INT 9
35575: EQUAL
35576: IFFALSE 35597
// points := [ 20 , 55 , 40 ] ;
35578: LD_ADDR_VAR 0 9
35582: PUSH
35583: LD_INT 20
35585: PUSH
35586: LD_INT 55
35588: PUSH
35589: LD_INT 40
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35597: LD_VAR 0 6
35601: PPUSH
35602: CALL_OW 257
35606: PUSH
35607: LD_INT 12
35609: PUSH
35610: LD_INT 16
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: IN
35617: IFFALSE 35638
// points := [ 5 , 3 , 2 ] ;
35619: LD_ADDR_VAR 0 9
35623: PUSH
35624: LD_INT 5
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35638: LD_VAR 0 6
35642: PPUSH
35643: CALL_OW 257
35647: PUSH
35648: LD_INT 17
35650: EQUAL
35651: IFFALSE 35672
// points := [ 100 , 50 , 75 ] ;
35653: LD_ADDR_VAR 0 9
35657: PUSH
35658: LD_INT 100
35660: PUSH
35661: LD_INT 50
35663: PUSH
35664: LD_INT 75
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35672: LD_VAR 0 6
35676: PPUSH
35677: CALL_OW 257
35681: PUSH
35682: LD_INT 15
35684: EQUAL
35685: IFFALSE 35706
// points := [ 10 , 5 , 3 ] ;
35687: LD_ADDR_VAR 0 9
35691: PUSH
35692: LD_INT 10
35694: PUSH
35695: LD_INT 5
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35706: LD_VAR 0 6
35710: PPUSH
35711: CALL_OW 257
35715: PUSH
35716: LD_INT 14
35718: EQUAL
35719: IFFALSE 35740
// points := [ 10 , 0 , 0 ] ;
35721: LD_ADDR_VAR 0 9
35725: PUSH
35726: LD_INT 10
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35740: LD_VAR 0 6
35744: PPUSH
35745: CALL_OW 257
35749: PUSH
35750: LD_INT 11
35752: EQUAL
35753: IFFALSE 35774
// points := [ 30 , 10 , 5 ] ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 10
35765: PUSH
35766: LD_INT 5
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35774: LD_VAR 0 1
35778: PPUSH
35779: LD_INT 5
35781: PPUSH
35782: CALL_OW 321
35786: PUSH
35787: LD_INT 2
35789: EQUAL
35790: IFFALSE 35807
// bpoints := bpoints * 1.8 ;
35792: LD_ADDR_VAR 0 10
35796: PUSH
35797: LD_VAR 0 10
35801: PUSH
35802: LD_REAL  1.80000000000000E+0000
35805: MUL
35806: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 257
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 4
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: IN
35835: PUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_INT 51
35843: PPUSH
35844: CALL_OW 321
35848: PUSH
35849: LD_INT 2
35851: EQUAL
35852: AND
35853: IFFALSE 35870
// bpoints := bpoints * 1.2 ;
35855: LD_ADDR_VAR 0 10
35859: PUSH
35860: LD_VAR 0 10
35864: PUSH
35865: LD_REAL  1.20000000000000E+0000
35868: MUL
35869: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35870: LD_VAR 0 6
35874: PPUSH
35875: CALL_OW 257
35879: PUSH
35880: LD_INT 5
35882: PUSH
35883: LD_INT 7
35885: PUSH
35886: LD_INT 9
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: IN
35894: PUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: LD_INT 52
35902: PPUSH
35903: CALL_OW 321
35907: PUSH
35908: LD_INT 2
35910: EQUAL
35911: AND
35912: IFFALSE 35929
// bpoints := bpoints * 1.5 ;
35914: LD_ADDR_VAR 0 10
35918: PUSH
35919: LD_VAR 0 10
35923: PUSH
35924: LD_REAL  1.50000000000000E+0000
35927: MUL
35928: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35929: LD_VAR 0 1
35933: PPUSH
35934: LD_INT 66
35936: PPUSH
35937: CALL_OW 321
35941: PUSH
35942: LD_INT 2
35944: EQUAL
35945: IFFALSE 35962
// bpoints := bpoints * 1.1 ;
35947: LD_ADDR_VAR 0 10
35951: PUSH
35952: LD_VAR 0 10
35956: PUSH
35957: LD_REAL  1.10000000000000E+0000
35960: MUL
35961: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35962: LD_ADDR_VAR 0 10
35966: PUSH
35967: LD_VAR 0 10
35971: PUSH
35972: LD_VAR 0 6
35976: PPUSH
35977: LD_INT 1
35979: PPUSH
35980: CALL_OW 259
35984: PUSH
35985: LD_REAL  1.15000000000000E+0000
35988: MUL
35989: MUL
35990: ST_TO_ADDR
// end ; unit_vehicle :
35991: GO 36821
35993: LD_INT 2
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36809
36001: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36002: LD_VAR 0 6
36006: PPUSH
36007: CALL_OW 264
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 42
36017: PUSH
36018: LD_INT 24
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: IN
36026: IFFALSE 36047
// points := [ 25 , 5 , 3 ] ;
36028: LD_ADDR_VAR 0 9
36032: PUSH
36033: LD_INT 25
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36047: LD_VAR 0 6
36051: PPUSH
36052: CALL_OW 264
36056: PUSH
36057: LD_INT 4
36059: PUSH
36060: LD_INT 43
36062: PUSH
36063: LD_INT 25
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: IN
36071: IFFALSE 36092
// points := [ 40 , 15 , 5 ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_INT 40
36080: PUSH
36081: LD_INT 15
36083: PUSH
36084: LD_INT 5
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 264
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: LD_INT 23
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: IN
36112: IFFALSE 36133
// points := [ 7 , 25 , 8 ] ;
36114: LD_ADDR_VAR 0 9
36118: PUSH
36119: LD_INT 7
36121: PUSH
36122: LD_INT 25
36124: PUSH
36125: LD_INT 8
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36133: LD_VAR 0 6
36137: PPUSH
36138: CALL_OW 264
36142: PUSH
36143: LD_INT 5
36145: PUSH
36146: LD_INT 27
36148: PUSH
36149: LD_INT 44
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: IN
36157: IFFALSE 36178
// points := [ 14 , 50 , 16 ] ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_INT 14
36166: PUSH
36167: LD_INT 50
36169: PUSH
36170: LD_INT 16
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 264
36187: PUSH
36188: LD_INT 6
36190: PUSH
36191: LD_INT 46
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: IN
36198: IFFALSE 36219
// points := [ 32 , 120 , 70 ] ;
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: LD_INT 32
36207: PUSH
36208: LD_INT 120
36210: PUSH
36211: LD_INT 70
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36219: LD_VAR 0 6
36223: PPUSH
36224: CALL_OW 264
36228: PUSH
36229: LD_INT 7
36231: PUSH
36232: LD_INT 28
36234: PUSH
36235: LD_INT 45
36237: PUSH
36238: LD_EXP 110
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: IN
36249: IFFALSE 36270
// points := [ 35 , 20 , 45 ] ;
36251: LD_ADDR_VAR 0 9
36255: PUSH
36256: LD_INT 35
36258: PUSH
36259: LD_INT 20
36261: PUSH
36262: LD_INT 45
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36270: LD_VAR 0 6
36274: PPUSH
36275: CALL_OW 264
36279: PUSH
36280: LD_INT 47
36282: PUSH
36283: EMPTY
36284: LIST
36285: IN
36286: IFFALSE 36307
// points := [ 67 , 45 , 75 ] ;
36288: LD_ADDR_VAR 0 9
36292: PUSH
36293: LD_INT 67
36295: PUSH
36296: LD_INT 45
36298: PUSH
36299: LD_INT 75
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36307: LD_VAR 0 6
36311: PPUSH
36312: CALL_OW 264
36316: PUSH
36317: LD_INT 26
36319: PUSH
36320: EMPTY
36321: LIST
36322: IN
36323: IFFALSE 36344
// points := [ 120 , 30 , 80 ] ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_INT 120
36332: PUSH
36333: LD_INT 30
36335: PUSH
36336: LD_INT 80
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36344: LD_VAR 0 6
36348: PPUSH
36349: CALL_OW 264
36353: PUSH
36354: LD_INT 22
36356: PUSH
36357: EMPTY
36358: LIST
36359: IN
36360: IFFALSE 36381
// points := [ 40 , 1 , 1 ] ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_INT 40
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36381: LD_VAR 0 6
36385: PPUSH
36386: CALL_OW 264
36390: PUSH
36391: LD_INT 29
36393: PUSH
36394: EMPTY
36395: LIST
36396: IN
36397: IFFALSE 36418
// points := [ 70 , 200 , 400 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 70
36406: PUSH
36407: LD_INT 200
36409: PUSH
36410: LD_INT 400
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 264
36427: PUSH
36428: LD_INT 14
36430: PUSH
36431: LD_INT 53
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: IN
36438: IFFALSE 36459
// points := [ 40 , 10 , 20 ] ;
36440: LD_ADDR_VAR 0 9
36444: PUSH
36445: LD_INT 40
36447: PUSH
36448: LD_INT 10
36450: PUSH
36451: LD_INT 20
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36459: LD_VAR 0 6
36463: PPUSH
36464: CALL_OW 264
36468: PUSH
36469: LD_INT 9
36471: PUSH
36472: EMPTY
36473: LIST
36474: IN
36475: IFFALSE 36496
// points := [ 5 , 70 , 20 ] ;
36477: LD_ADDR_VAR 0 9
36481: PUSH
36482: LD_INT 5
36484: PUSH
36485: LD_INT 70
36487: PUSH
36488: LD_INT 20
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36496: LD_VAR 0 6
36500: PPUSH
36501: CALL_OW 264
36505: PUSH
36506: LD_INT 10
36508: PUSH
36509: EMPTY
36510: LIST
36511: IN
36512: IFFALSE 36533
// points := [ 35 , 110 , 70 ] ;
36514: LD_ADDR_VAR 0 9
36518: PUSH
36519: LD_INT 35
36521: PUSH
36522: LD_INT 110
36524: PUSH
36525: LD_INT 70
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36533: LD_VAR 0 6
36537: PPUSH
36538: CALL_OW 265
36542: PUSH
36543: LD_INT 25
36545: EQUAL
36546: IFFALSE 36567
// points := [ 80 , 65 , 100 ] ;
36548: LD_ADDR_VAR 0 9
36552: PUSH
36553: LD_INT 80
36555: PUSH
36556: LD_INT 65
36558: PUSH
36559: LD_INT 100
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36567: LD_VAR 0 6
36571: PPUSH
36572: CALL_OW 263
36576: PUSH
36577: LD_INT 1
36579: EQUAL
36580: IFFALSE 36615
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36582: LD_ADDR_VAR 0 10
36586: PUSH
36587: LD_VAR 0 10
36591: PUSH
36592: LD_VAR 0 6
36596: PPUSH
36597: CALL_OW 311
36601: PPUSH
36602: LD_INT 3
36604: PPUSH
36605: CALL_OW 259
36609: PUSH
36610: LD_INT 4
36612: MUL
36613: MUL
36614: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 263
36624: PUSH
36625: LD_INT 2
36627: EQUAL
36628: IFFALSE 36679
// begin j := IsControledBy ( i ) ;
36630: LD_ADDR_VAR 0 7
36634: PUSH
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 312
36644: ST_TO_ADDR
// if j then
36645: LD_VAR 0 7
36649: IFFALSE 36679
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36651: LD_ADDR_VAR 0 10
36655: PUSH
36656: LD_VAR 0 10
36660: PUSH
36661: LD_VAR 0 7
36665: PPUSH
36666: LD_INT 3
36668: PPUSH
36669: CALL_OW 259
36673: PUSH
36674: LD_INT 3
36676: MUL
36677: MUL
36678: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36679: LD_VAR 0 6
36683: PPUSH
36684: CALL_OW 264
36688: PUSH
36689: LD_INT 5
36691: PUSH
36692: LD_INT 6
36694: PUSH
36695: LD_INT 46
36697: PUSH
36698: LD_INT 44
36700: PUSH
36701: LD_INT 47
36703: PUSH
36704: LD_INT 45
36706: PUSH
36707: LD_INT 28
36709: PUSH
36710: LD_INT 7
36712: PUSH
36713: LD_INT 27
36715: PUSH
36716: LD_INT 29
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: IN
36731: PUSH
36732: LD_VAR 0 1
36736: PPUSH
36737: LD_INT 52
36739: PPUSH
36740: CALL_OW 321
36744: PUSH
36745: LD_INT 2
36747: EQUAL
36748: AND
36749: IFFALSE 36766
// bpoints := bpoints * 1.2 ;
36751: LD_ADDR_VAR 0 10
36755: PUSH
36756: LD_VAR 0 10
36760: PUSH
36761: LD_REAL  1.20000000000000E+0000
36764: MUL
36765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 264
36775: PUSH
36776: LD_INT 6
36778: PUSH
36779: LD_INT 46
36781: PUSH
36782: LD_INT 47
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: IN
36790: IFFALSE 36807
// bpoints := bpoints * 1.2 ;
36792: LD_ADDR_VAR 0 10
36796: PUSH
36797: LD_VAR 0 10
36801: PUSH
36802: LD_REAL  1.20000000000000E+0000
36805: MUL
36806: ST_TO_ADDR
// end ; unit_building :
36807: GO 36821
36809: LD_INT 3
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36820
36817: POP
// ; end ;
36818: GO 36821
36820: POP
// for j = 1 to 3 do
36821: LD_ADDR_VAR 0 7
36825: PUSH
36826: DOUBLE
36827: LD_INT 1
36829: DEC
36830: ST_TO_ADDR
36831: LD_INT 3
36833: PUSH
36834: FOR_TO
36835: IFFALSE 36888
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36837: LD_ADDR_VAR 0 5
36841: PUSH
36842: LD_VAR 0 5
36846: PPUSH
36847: LD_VAR 0 7
36851: PPUSH
36852: LD_VAR 0 5
36856: PUSH
36857: LD_VAR 0 7
36861: ARRAY
36862: PUSH
36863: LD_VAR 0 9
36867: PUSH
36868: LD_VAR 0 7
36872: ARRAY
36873: PUSH
36874: LD_VAR 0 10
36878: MUL
36879: PLUS
36880: PPUSH
36881: CALL_OW 1
36885: ST_TO_ADDR
36886: GO 36834
36888: POP
36889: POP
// end ;
36890: GO 35367
36892: POP
36893: POP
// result := Replace ( result , 4 , tmp ) ;
36894: LD_ADDR_VAR 0 5
36898: PUSH
36899: LD_VAR 0 5
36903: PPUSH
36904: LD_INT 4
36906: PPUSH
36907: LD_VAR 0 8
36911: PPUSH
36912: CALL_OW 1
36916: ST_TO_ADDR
// end ;
36917: LD_VAR 0 5
36921: RET
// export function DangerAtRange ( unit , range ) ; begin
36922: LD_INT 0
36924: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36925: LD_ADDR_VAR 0 3
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 255
36939: PPUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 250
36949: PPUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 251
36959: PPUSH
36960: LD_VAR 0 2
36964: PPUSH
36965: CALL 35219 0 4
36969: ST_TO_ADDR
// end ;
36970: LD_VAR 0 3
36974: RET
// export function DangerInArea ( side , area ) ; begin
36975: LD_INT 0
36977: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36978: LD_ADDR_VAR 0 3
36982: PUSH
36983: LD_VAR 0 2
36987: PPUSH
36988: LD_INT 81
36990: PUSH
36991: LD_VAR 0 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PPUSH
37000: CALL_OW 70
37004: ST_TO_ADDR
// end ;
37005: LD_VAR 0 3
37009: RET
// export function IsExtension ( b ) ; begin
37010: LD_INT 0
37012: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37013: LD_ADDR_VAR 0 2
37017: PUSH
37018: LD_VAR 0 1
37022: PUSH
37023: LD_INT 23
37025: PUSH
37026: LD_INT 20
37028: PUSH
37029: LD_INT 22
37031: PUSH
37032: LD_INT 17
37034: PUSH
37035: LD_INT 24
37037: PUSH
37038: LD_INT 21
37040: PUSH
37041: LD_INT 19
37043: PUSH
37044: LD_INT 16
37046: PUSH
37047: LD_INT 25
37049: PUSH
37050: LD_INT 18
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: IN
37065: ST_TO_ADDR
// end ;
37066: LD_VAR 0 2
37070: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37071: LD_INT 0
37073: PPUSH
37074: PPUSH
37075: PPUSH
// result := [ ] ;
37076: LD_ADDR_VAR 0 4
37080: PUSH
37081: EMPTY
37082: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 2
37092: PPUSH
37093: LD_INT 21
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PPUSH
37103: CALL_OW 70
37107: ST_TO_ADDR
// if not tmp then
37108: LD_VAR 0 5
37112: NOT
37113: IFFALSE 37117
// exit ;
37115: GO 37181
// if checkLink then
37117: LD_VAR 0 3
37121: IFFALSE 37171
// begin for i in tmp do
37123: LD_ADDR_VAR 0 6
37127: PUSH
37128: LD_VAR 0 5
37132: PUSH
37133: FOR_IN
37134: IFFALSE 37169
// if GetBase ( i ) <> base then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 274
37145: PUSH
37146: LD_VAR 0 1
37150: NONEQUAL
37151: IFFALSE 37167
// ComLinkToBase ( base , i ) ;
37153: LD_VAR 0 1
37157: PPUSH
37158: LD_VAR 0 6
37162: PPUSH
37163: CALL_OW 169
37167: GO 37133
37169: POP
37170: POP
// end ; result := tmp ;
37171: LD_ADDR_VAR 0 4
37175: PUSH
37176: LD_VAR 0 5
37180: ST_TO_ADDR
// end ;
37181: LD_VAR 0 4
37185: RET
// export function ComComplete ( units , b ) ; var i ; begin
37186: LD_INT 0
37188: PPUSH
37189: PPUSH
// if not units then
37190: LD_VAR 0 1
37194: NOT
37195: IFFALSE 37199
// exit ;
37197: GO 37289
// for i in units do
37199: LD_ADDR_VAR 0 4
37203: PUSH
37204: LD_VAR 0 1
37208: PUSH
37209: FOR_IN
37210: IFFALSE 37287
// if BuildingStatus ( b ) = bs_build then
37212: LD_VAR 0 2
37216: PPUSH
37217: CALL_OW 461
37221: PUSH
37222: LD_INT 1
37224: EQUAL
37225: IFFALSE 37285
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37227: LD_VAR 0 4
37231: PPUSH
37232: LD_STRING h
37234: PUSH
37235: LD_VAR 0 2
37239: PPUSH
37240: CALL_OW 250
37244: PUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL_OW 251
37254: PUSH
37255: LD_VAR 0 2
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: PPUSH
37281: CALL_OW 446
37285: GO 37209
37287: POP
37288: POP
// end ;
37289: LD_VAR 0 3
37293: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37294: LD_INT 0
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37302: LD_VAR 0 1
37306: NOT
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 263
37317: PUSH
37318: LD_INT 2
37320: NONEQUAL
37321: OR
37322: IFFALSE 37326
// exit ;
37324: GO 37642
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37326: LD_ADDR_VAR 0 6
37330: PUSH
37331: LD_INT 22
37333: PUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: CALL_OW 255
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 30
37353: PUSH
37354: LD_INT 36
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 34
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PPUSH
37380: CALL_OW 69
37384: ST_TO_ADDR
// if not tmp then
37385: LD_VAR 0 6
37389: NOT
37390: IFFALSE 37394
// exit ;
37392: GO 37642
// result := [ ] ;
37394: LD_ADDR_VAR 0 2
37398: PUSH
37399: EMPTY
37400: ST_TO_ADDR
// for i in tmp do
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_VAR 0 6
37410: PUSH
37411: FOR_IN
37412: IFFALSE 37483
// begin t := UnitsInside ( i ) ;
37414: LD_ADDR_VAR 0 4
37418: PUSH
37419: LD_VAR 0 3
37423: PPUSH
37424: CALL_OW 313
37428: ST_TO_ADDR
// if t then
37429: LD_VAR 0 4
37433: IFFALSE 37481
// for j in t do
37435: LD_ADDR_VAR 0 7
37439: PUSH
37440: LD_VAR 0 4
37444: PUSH
37445: FOR_IN
37446: IFFALSE 37479
// result := Replace ( result , result + 1 , j ) ;
37448: LD_ADDR_VAR 0 2
37452: PUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_VAR 0 2
37462: PUSH
37463: LD_INT 1
37465: PLUS
37466: PPUSH
37467: LD_VAR 0 7
37471: PPUSH
37472: CALL_OW 1
37476: ST_TO_ADDR
37477: GO 37445
37479: POP
37480: POP
// end ;
37481: GO 37411
37483: POP
37484: POP
// if not result then
37485: LD_VAR 0 2
37489: NOT
37490: IFFALSE 37494
// exit ;
37492: GO 37642
// mech := result [ 1 ] ;
37494: LD_ADDR_VAR 0 5
37498: PUSH
37499: LD_VAR 0 2
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: ST_TO_ADDR
// if result > 1 then
37508: LD_VAR 0 2
37512: PUSH
37513: LD_INT 1
37515: GREATER
37516: IFFALSE 37628
// begin for i = 2 to result do
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: DOUBLE
37524: LD_INT 2
37526: DEC
37527: ST_TO_ADDR
37528: LD_VAR 0 2
37532: PUSH
37533: FOR_TO
37534: IFFALSE 37626
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: LD_VAR 0 2
37545: PUSH
37546: LD_VAR 0 3
37550: ARRAY
37551: PPUSH
37552: LD_INT 3
37554: PPUSH
37555: CALL_OW 259
37559: PUSH
37560: LD_VAR 0 2
37564: PUSH
37565: LD_VAR 0 3
37569: ARRAY
37570: PPUSH
37571: CALL_OW 432
37575: MINUS
37576: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37577: LD_VAR 0 4
37581: PUSH
37582: LD_VAR 0 5
37586: PPUSH
37587: LD_INT 3
37589: PPUSH
37590: CALL_OW 259
37594: PUSH
37595: LD_VAR 0 5
37599: PPUSH
37600: CALL_OW 432
37604: MINUS
37605: GREATEREQUAL
37606: IFFALSE 37624
// mech := result [ i ] ;
37608: LD_ADDR_VAR 0 5
37612: PUSH
37613: LD_VAR 0 2
37617: PUSH
37618: LD_VAR 0 3
37622: ARRAY
37623: ST_TO_ADDR
// end ;
37624: GO 37533
37626: POP
37627: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37628: LD_VAR 0 1
37632: PPUSH
37633: LD_VAR 0 5
37637: PPUSH
37638: CALL_OW 135
// end ;
37642: LD_VAR 0 2
37646: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37647: LD_INT 0
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
37659: PPUSH
37660: PPUSH
37661: PPUSH
// result := [ ] ;
37662: LD_ADDR_VAR 0 7
37666: PUSH
37667: EMPTY
37668: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 266
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: IN
37689: NOT
37690: IFFALSE 37694
// exit ;
37692: GO 39328
// if name then
37694: LD_VAR 0 3
37698: IFFALSE 37714
// SetBName ( base_dep , name ) ;
37700: LD_VAR 0 1
37704: PPUSH
37705: LD_VAR 0 3
37709: PPUSH
37710: CALL_OW 500
// base := GetBase ( base_dep ) ;
37714: LD_ADDR_VAR 0 15
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 274
37728: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37729: LD_ADDR_VAR 0 16
37733: PUSH
37734: LD_VAR 0 1
37738: PPUSH
37739: CALL_OW 255
37743: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37744: LD_ADDR_VAR 0 17
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: CALL_OW 248
37758: ST_TO_ADDR
// if sources then
37759: LD_VAR 0 5
37763: IFFALSE 37810
// for i = 1 to 3 do
37765: LD_ADDR_VAR 0 8
37769: PUSH
37770: DOUBLE
37771: LD_INT 1
37773: DEC
37774: ST_TO_ADDR
37775: LD_INT 3
37777: PUSH
37778: FOR_TO
37779: IFFALSE 37808
// AddResourceType ( base , i , sources [ i ] ) ;
37781: LD_VAR 0 15
37785: PPUSH
37786: LD_VAR 0 8
37790: PPUSH
37791: LD_VAR 0 5
37795: PUSH
37796: LD_VAR 0 8
37800: ARRAY
37801: PPUSH
37802: CALL_OW 276
37806: GO 37778
37808: POP
37809: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37810: LD_ADDR_VAR 0 18
37814: PUSH
37815: LD_VAR 0 15
37819: PPUSH
37820: LD_VAR 0 2
37824: PPUSH
37825: LD_INT 1
37827: PPUSH
37828: CALL 37071 0 3
37832: ST_TO_ADDR
// InitHc ;
37833: CALL_OW 19
// InitUc ;
37837: CALL_OW 18
// uc_side := side ;
37841: LD_ADDR_OWVAR 20
37845: PUSH
37846: LD_VAR 0 16
37850: ST_TO_ADDR
// uc_nation := nation ;
37851: LD_ADDR_OWVAR 21
37855: PUSH
37856: LD_VAR 0 17
37860: ST_TO_ADDR
// if buildings then
37861: LD_VAR 0 18
37865: IFFALSE 39187
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37867: LD_ADDR_VAR 0 19
37871: PUSH
37872: LD_VAR 0 18
37876: PPUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 30
37882: PUSH
37883: LD_INT 29
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 30
37892: PUSH
37893: LD_INT 30
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: PPUSH
37905: CALL_OW 72
37909: ST_TO_ADDR
// if tmp then
37910: LD_VAR 0 19
37914: IFFALSE 37962
// for i in tmp do
37916: LD_ADDR_VAR 0 8
37920: PUSH
37921: LD_VAR 0 19
37925: PUSH
37926: FOR_IN
37927: IFFALSE 37960
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37929: LD_VAR 0 8
37933: PPUSH
37934: CALL_OW 250
37938: PPUSH
37939: LD_VAR 0 8
37943: PPUSH
37944: CALL_OW 251
37948: PPUSH
37949: LD_VAR 0 16
37953: PPUSH
37954: CALL_OW 441
37958: GO 37926
37960: POP
37961: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37962: LD_VAR 0 18
37966: PPUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 30
37972: PUSH
37973: LD_INT 32
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 30
37982: PUSH
37983: LD_INT 33
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: PPUSH
37995: CALL_OW 72
37999: IFFALSE 38087
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38001: LD_ADDR_VAR 0 8
38005: PUSH
38006: LD_VAR 0 18
38010: PPUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 30
38016: PUSH
38017: LD_INT 32
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 30
38026: PUSH
38027: LD_INT 33
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: PPUSH
38039: CALL_OW 72
38043: PUSH
38044: FOR_IN
38045: IFFALSE 38085
// begin if not GetBWeapon ( i ) then
38047: LD_VAR 0 8
38051: PPUSH
38052: CALL_OW 269
38056: NOT
38057: IFFALSE 38083
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38059: LD_VAR 0 8
38063: PPUSH
38064: LD_VAR 0 8
38068: PPUSH
38069: LD_VAR 0 2
38073: PPUSH
38074: CALL 39333 0 2
38078: PPUSH
38079: CALL_OW 431
// end ;
38083: GO 38044
38085: POP
38086: POP
// end ; for i = 1 to personel do
38087: LD_ADDR_VAR 0 8
38091: PUSH
38092: DOUBLE
38093: LD_INT 1
38095: DEC
38096: ST_TO_ADDR
38097: LD_VAR 0 6
38101: PUSH
38102: FOR_TO
38103: IFFALSE 39167
// begin if i > 4 then
38105: LD_VAR 0 8
38109: PUSH
38110: LD_INT 4
38112: GREATER
38113: IFFALSE 38117
// break ;
38115: GO 39167
// case i of 1 :
38117: LD_VAR 0 8
38121: PUSH
38122: LD_INT 1
38124: DOUBLE
38125: EQUAL
38126: IFTRUE 38130
38128: GO 38210
38130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38131: LD_ADDR_VAR 0 12
38135: PUSH
38136: LD_VAR 0 18
38140: PPUSH
38141: LD_INT 22
38143: PUSH
38144: LD_VAR 0 16
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 58
38155: PUSH
38156: EMPTY
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 30
38164: PUSH
38165: LD_INT 32
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 30
38174: PUSH
38175: LD_INT 4
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 30
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL_OW 72
38207: ST_TO_ADDR
38208: GO 38432
38210: LD_INT 2
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38280
38218: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38219: LD_ADDR_VAR 0 12
38223: PUSH
38224: LD_VAR 0 18
38228: PPUSH
38229: LD_INT 22
38231: PUSH
38232: LD_VAR 0 16
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 30
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 30
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PPUSH
38273: CALL_OW 72
38277: ST_TO_ADDR
38278: GO 38432
38280: LD_INT 3
38282: DOUBLE
38283: EQUAL
38284: IFTRUE 38288
38286: GO 38350
38288: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38289: LD_ADDR_VAR 0 12
38293: PUSH
38294: LD_VAR 0 18
38298: PPUSH
38299: LD_INT 22
38301: PUSH
38302: LD_VAR 0 16
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 30
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 30
38326: PUSH
38327: LD_INT 3
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PPUSH
38343: CALL_OW 72
38347: ST_TO_ADDR
38348: GO 38432
38350: LD_INT 4
38352: DOUBLE
38353: EQUAL
38354: IFTRUE 38358
38356: GO 38431
38358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38359: LD_ADDR_VAR 0 12
38363: PUSH
38364: LD_VAR 0 18
38368: PPUSH
38369: LD_INT 22
38371: PUSH
38372: LD_VAR 0 16
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 30
38386: PUSH
38387: LD_INT 6
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 30
38396: PUSH
38397: LD_INT 7
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 30
38406: PUSH
38407: LD_INT 8
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PPUSH
38424: CALL_OW 72
38428: ST_TO_ADDR
38429: GO 38432
38431: POP
// if i = 1 then
38432: LD_VAR 0 8
38436: PUSH
38437: LD_INT 1
38439: EQUAL
38440: IFFALSE 38551
// begin tmp := [ ] ;
38442: LD_ADDR_VAR 0 19
38446: PUSH
38447: EMPTY
38448: ST_TO_ADDR
// for j in f do
38449: LD_ADDR_VAR 0 9
38453: PUSH
38454: LD_VAR 0 12
38458: PUSH
38459: FOR_IN
38460: IFFALSE 38533
// if GetBType ( j ) = b_bunker then
38462: LD_VAR 0 9
38466: PPUSH
38467: CALL_OW 266
38471: PUSH
38472: LD_INT 32
38474: EQUAL
38475: IFFALSE 38502
// tmp := Insert ( tmp , 1 , j ) else
38477: LD_ADDR_VAR 0 19
38481: PUSH
38482: LD_VAR 0 19
38486: PPUSH
38487: LD_INT 1
38489: PPUSH
38490: LD_VAR 0 9
38494: PPUSH
38495: CALL_OW 2
38499: ST_TO_ADDR
38500: GO 38531
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38502: LD_ADDR_VAR 0 19
38506: PUSH
38507: LD_VAR 0 19
38511: PPUSH
38512: LD_VAR 0 19
38516: PUSH
38517: LD_INT 1
38519: PLUS
38520: PPUSH
38521: LD_VAR 0 9
38525: PPUSH
38526: CALL_OW 2
38530: ST_TO_ADDR
38531: GO 38459
38533: POP
38534: POP
// if tmp then
38535: LD_VAR 0 19
38539: IFFALSE 38551
// f := tmp ;
38541: LD_ADDR_VAR 0 12
38545: PUSH
38546: LD_VAR 0 19
38550: ST_TO_ADDR
// end ; x := personel [ i ] ;
38551: LD_ADDR_VAR 0 13
38555: PUSH
38556: LD_VAR 0 6
38560: PUSH
38561: LD_VAR 0 8
38565: ARRAY
38566: ST_TO_ADDR
// if x = - 1 then
38567: LD_VAR 0 13
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: EQUAL
38576: IFFALSE 38785
// begin for j in f do
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: LD_VAR 0 12
38587: PUSH
38588: FOR_IN
38589: IFFALSE 38781
// repeat InitHc ;
38591: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38595: LD_VAR 0 9
38599: PPUSH
38600: CALL_OW 266
38604: PUSH
38605: LD_INT 5
38607: EQUAL
38608: IFFALSE 38678
// begin if UnitsInside ( j ) < 3 then
38610: LD_VAR 0 9
38614: PPUSH
38615: CALL_OW 313
38619: PUSH
38620: LD_INT 3
38622: LESS
38623: IFFALSE 38659
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38625: LD_INT 0
38627: PPUSH
38628: LD_INT 5
38630: PUSH
38631: LD_INT 8
38633: PUSH
38634: LD_INT 9
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: LD_VAR 0 17
38646: ARRAY
38647: PPUSH
38648: LD_VAR 0 4
38652: PPUSH
38653: CALL_OW 380
38657: GO 38676
// PrepareHuman ( false , i , skill ) ;
38659: LD_INT 0
38661: PPUSH
38662: LD_VAR 0 8
38666: PPUSH
38667: LD_VAR 0 4
38671: PPUSH
38672: CALL_OW 380
// end else
38676: GO 38695
// PrepareHuman ( false , i , skill ) ;
38678: LD_INT 0
38680: PPUSH
38681: LD_VAR 0 8
38685: PPUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: CALL_OW 380
// un := CreateHuman ;
38695: LD_ADDR_VAR 0 14
38699: PUSH
38700: CALL_OW 44
38704: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38705: LD_ADDR_VAR 0 7
38709: PUSH
38710: LD_VAR 0 7
38714: PPUSH
38715: LD_INT 1
38717: PPUSH
38718: LD_VAR 0 14
38722: PPUSH
38723: CALL_OW 2
38727: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38728: LD_VAR 0 14
38732: PPUSH
38733: LD_VAR 0 9
38737: PPUSH
38738: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38742: LD_VAR 0 9
38746: PPUSH
38747: CALL_OW 313
38751: PUSH
38752: LD_INT 6
38754: EQUAL
38755: PUSH
38756: LD_VAR 0 9
38760: PPUSH
38761: CALL_OW 266
38765: PUSH
38766: LD_INT 32
38768: PUSH
38769: LD_INT 31
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: IN
38776: OR
38777: IFFALSE 38591
38779: GO 38588
38781: POP
38782: POP
// end else
38783: GO 39165
// for j = 1 to x do
38785: LD_ADDR_VAR 0 9
38789: PUSH
38790: DOUBLE
38791: LD_INT 1
38793: DEC
38794: ST_TO_ADDR
38795: LD_VAR 0 13
38799: PUSH
38800: FOR_TO
38801: IFFALSE 39163
// begin InitHc ;
38803: CALL_OW 19
// if not f then
38807: LD_VAR 0 12
38811: NOT
38812: IFFALSE 38901
// begin PrepareHuman ( false , i , skill ) ;
38814: LD_INT 0
38816: PPUSH
38817: LD_VAR 0 8
38821: PPUSH
38822: LD_VAR 0 4
38826: PPUSH
38827: CALL_OW 380
// un := CreateHuman ;
38831: LD_ADDR_VAR 0 14
38835: PUSH
38836: CALL_OW 44
38840: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38841: LD_ADDR_VAR 0 7
38845: PUSH
38846: LD_VAR 0 7
38850: PPUSH
38851: LD_INT 1
38853: PPUSH
38854: LD_VAR 0 14
38858: PPUSH
38859: CALL_OW 2
38863: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38864: LD_VAR 0 14
38868: PPUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL_OW 250
38878: PPUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 251
38888: PPUSH
38889: LD_INT 10
38891: PPUSH
38892: LD_INT 0
38894: PPUSH
38895: CALL_OW 50
// continue ;
38899: GO 38800
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38901: LD_VAR 0 12
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PPUSH
38910: CALL_OW 313
38914: PUSH
38915: LD_VAR 0 12
38919: PUSH
38920: LD_INT 1
38922: ARRAY
38923: PPUSH
38924: CALL_OW 266
38928: PUSH
38929: LD_INT 32
38931: PUSH
38932: LD_INT 31
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: IN
38939: AND
38940: PUSH
38941: LD_VAR 0 12
38945: PUSH
38946: LD_INT 1
38948: ARRAY
38949: PPUSH
38950: CALL_OW 313
38954: PUSH
38955: LD_INT 6
38957: EQUAL
38958: OR
38959: IFFALSE 38979
// f := Delete ( f , 1 ) ;
38961: LD_ADDR_VAR 0 12
38965: PUSH
38966: LD_VAR 0 12
38970: PPUSH
38971: LD_INT 1
38973: PPUSH
38974: CALL_OW 3
38978: ST_TO_ADDR
// if not f then
38979: LD_VAR 0 12
38983: NOT
38984: IFFALSE 39002
// begin x := x + 2 ;
38986: LD_ADDR_VAR 0 13
38990: PUSH
38991: LD_VAR 0 13
38995: PUSH
38996: LD_INT 2
38998: PLUS
38999: ST_TO_ADDR
// continue ;
39000: GO 38800
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39002: LD_VAR 0 12
39006: PUSH
39007: LD_INT 1
39009: ARRAY
39010: PPUSH
39011: CALL_OW 266
39015: PUSH
39016: LD_INT 5
39018: EQUAL
39019: IFFALSE 39093
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39021: LD_VAR 0 12
39025: PUSH
39026: LD_INT 1
39028: ARRAY
39029: PPUSH
39030: CALL_OW 313
39034: PUSH
39035: LD_INT 3
39037: LESS
39038: IFFALSE 39074
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39040: LD_INT 0
39042: PPUSH
39043: LD_INT 5
39045: PUSH
39046: LD_INT 8
39048: PUSH
39049: LD_INT 9
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PUSH
39057: LD_VAR 0 17
39061: ARRAY
39062: PPUSH
39063: LD_VAR 0 4
39067: PPUSH
39068: CALL_OW 380
39072: GO 39091
// PrepareHuman ( false , i , skill ) ;
39074: LD_INT 0
39076: PPUSH
39077: LD_VAR 0 8
39081: PPUSH
39082: LD_VAR 0 4
39086: PPUSH
39087: CALL_OW 380
// end else
39091: GO 39110
// PrepareHuman ( false , i , skill ) ;
39093: LD_INT 0
39095: PPUSH
39096: LD_VAR 0 8
39100: PPUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: CALL_OW 380
// un := CreateHuman ;
39110: LD_ADDR_VAR 0 14
39114: PUSH
39115: CALL_OW 44
39119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39120: LD_ADDR_VAR 0 7
39124: PUSH
39125: LD_VAR 0 7
39129: PPUSH
39130: LD_INT 1
39132: PPUSH
39133: LD_VAR 0 14
39137: PPUSH
39138: CALL_OW 2
39142: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39143: LD_VAR 0 14
39147: PPUSH
39148: LD_VAR 0 12
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: PPUSH
39157: CALL_OW 52
// end ;
39161: GO 38800
39163: POP
39164: POP
// end ;
39165: GO 38102
39167: POP
39168: POP
// result := result ^ buildings ;
39169: LD_ADDR_VAR 0 7
39173: PUSH
39174: LD_VAR 0 7
39178: PUSH
39179: LD_VAR 0 18
39183: ADD
39184: ST_TO_ADDR
// end else
39185: GO 39328
// begin for i = 1 to personel do
39187: LD_ADDR_VAR 0 8
39191: PUSH
39192: DOUBLE
39193: LD_INT 1
39195: DEC
39196: ST_TO_ADDR
39197: LD_VAR 0 6
39201: PUSH
39202: FOR_TO
39203: IFFALSE 39326
// begin if i > 4 then
39205: LD_VAR 0 8
39209: PUSH
39210: LD_INT 4
39212: GREATER
39213: IFFALSE 39217
// break ;
39215: GO 39326
// x := personel [ i ] ;
39217: LD_ADDR_VAR 0 13
39221: PUSH
39222: LD_VAR 0 6
39226: PUSH
39227: LD_VAR 0 8
39231: ARRAY
39232: ST_TO_ADDR
// if x = - 1 then
39233: LD_VAR 0 13
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: EQUAL
39242: IFFALSE 39246
// continue ;
39244: GO 39202
// PrepareHuman ( false , i , skill ) ;
39246: LD_INT 0
39248: PPUSH
39249: LD_VAR 0 8
39253: PPUSH
39254: LD_VAR 0 4
39258: PPUSH
39259: CALL_OW 380
// un := CreateHuman ;
39263: LD_ADDR_VAR 0 14
39267: PUSH
39268: CALL_OW 44
39272: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39273: LD_VAR 0 14
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 250
39287: PPUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 251
39297: PPUSH
39298: LD_INT 10
39300: PPUSH
39301: LD_INT 0
39303: PPUSH
39304: CALL_OW 50
// result := result ^ un ;
39308: LD_ADDR_VAR 0 7
39312: PUSH
39313: LD_VAR 0 7
39317: PUSH
39318: LD_VAR 0 14
39322: ADD
39323: ST_TO_ADDR
// end ;
39324: GO 39202
39326: POP
39327: POP
// end ; end ;
39328: LD_VAR 0 7
39332: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39333: LD_INT 0
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
// result := false ;
39351: LD_ADDR_VAR 0 3
39355: PUSH
39356: LD_INT 0
39358: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39359: LD_VAR 0 1
39363: NOT
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 266
39374: PUSH
39375: LD_INT 32
39377: PUSH
39378: LD_INT 33
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: IN
39385: NOT
39386: OR
39387: IFFALSE 39391
// exit ;
39389: GO 40500
// nat := GetNation ( tower ) ;
39391: LD_ADDR_VAR 0 12
39395: PUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: CALL_OW 248
39405: ST_TO_ADDR
// side := GetSide ( tower ) ;
39406: LD_ADDR_VAR 0 16
39410: PUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 255
39420: ST_TO_ADDR
// x := GetX ( tower ) ;
39421: LD_ADDR_VAR 0 10
39425: PUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 250
39435: ST_TO_ADDR
// y := GetY ( tower ) ;
39436: LD_ADDR_VAR 0 11
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 251
39450: ST_TO_ADDR
// if not x or not y then
39451: LD_VAR 0 10
39455: NOT
39456: PUSH
39457: LD_VAR 0 11
39461: NOT
39462: OR
39463: IFFALSE 39467
// exit ;
39465: GO 40500
// weapon := 0 ;
39467: LD_ADDR_VAR 0 18
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// fac_list := [ ] ;
39475: LD_ADDR_VAR 0 17
39479: PUSH
39480: EMPTY
39481: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 274
39496: PPUSH
39497: LD_VAR 0 2
39501: PPUSH
39502: LD_INT 0
39504: PPUSH
39505: CALL 37071 0 3
39509: PPUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: CALL_OW 72
39524: ST_TO_ADDR
// if not factories then
39525: LD_VAR 0 6
39529: NOT
39530: IFFALSE 39534
// exit ;
39532: GO 40500
// for i in factories do
39534: LD_ADDR_VAR 0 8
39538: PUSH
39539: LD_VAR 0 6
39543: PUSH
39544: FOR_IN
39545: IFFALSE 39570
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39547: LD_ADDR_VAR 0 17
39551: PUSH
39552: LD_VAR 0 17
39556: PUSH
39557: LD_VAR 0 8
39561: PPUSH
39562: CALL_OW 478
39566: UNION
39567: ST_TO_ADDR
39568: GO 39544
39570: POP
39571: POP
// if not fac_list then
39572: LD_VAR 0 17
39576: NOT
39577: IFFALSE 39581
// exit ;
39579: GO 40500
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: LD_INT 9
39594: PUSH
39595: LD_INT 10
39597: PUSH
39598: LD_INT 6
39600: PUSH
39601: LD_INT 7
39603: PUSH
39604: LD_INT 11
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 27
39618: PUSH
39619: LD_INT 28
39621: PUSH
39622: LD_INT 26
39624: PUSH
39625: LD_INT 30
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 43
39636: PUSH
39637: LD_INT 44
39639: PUSH
39640: LD_INT 46
39642: PUSH
39643: LD_INT 45
39645: PUSH
39646: LD_INT 47
39648: PUSH
39649: LD_INT 49
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: PUSH
39665: LD_VAR 0 12
39669: ARRAY
39670: ST_TO_ADDR
// list := list isect fac_list ;
39671: LD_ADDR_VAR 0 5
39675: PUSH
39676: LD_VAR 0 5
39680: PUSH
39681: LD_VAR 0 17
39685: ISECT
39686: ST_TO_ADDR
// if not list then
39687: LD_VAR 0 5
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 40500
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39696: LD_VAR 0 12
39700: PUSH
39701: LD_INT 3
39703: EQUAL
39704: PUSH
39705: LD_INT 49
39707: PUSH
39708: LD_VAR 0 5
39712: IN
39713: AND
39714: PUSH
39715: LD_INT 31
39717: PPUSH
39718: LD_VAR 0 16
39722: PPUSH
39723: CALL_OW 321
39727: PUSH
39728: LD_INT 2
39730: EQUAL
39731: AND
39732: IFFALSE 39792
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39734: LD_INT 22
39736: PUSH
39737: LD_VAR 0 16
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 35
39748: PUSH
39749: LD_INT 49
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 91
39758: PUSH
39759: LD_VAR 0 1
39763: PUSH
39764: LD_INT 10
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PPUSH
39777: CALL_OW 69
39781: NOT
39782: IFFALSE 39792
// weapon := ru_time_lapser ;
39784: LD_ADDR_VAR 0 18
39788: PUSH
39789: LD_INT 49
39791: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39792: LD_VAR 0 12
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: IN
39807: PUSH
39808: LD_INT 11
39810: PUSH
39811: LD_VAR 0 5
39815: IN
39816: PUSH
39817: LD_INT 30
39819: PUSH
39820: LD_VAR 0 5
39824: IN
39825: OR
39826: AND
39827: PUSH
39828: LD_INT 6
39830: PPUSH
39831: LD_VAR 0 16
39835: PPUSH
39836: CALL_OW 321
39840: PUSH
39841: LD_INT 2
39843: EQUAL
39844: AND
39845: IFFALSE 40010
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39847: LD_INT 22
39849: PUSH
39850: LD_VAR 0 16
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 35
39864: PUSH
39865: LD_INT 11
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 35
39874: PUSH
39875: LD_INT 30
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 91
39889: PUSH
39890: LD_VAR 0 1
39894: PUSH
39895: LD_INT 18
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: PPUSH
39908: CALL_OW 69
39912: NOT
39913: PUSH
39914: LD_INT 22
39916: PUSH
39917: LD_VAR 0 16
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 30
39931: PUSH
39932: LD_INT 32
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 33
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 91
39956: PUSH
39957: LD_VAR 0 1
39961: PUSH
39962: LD_INT 12
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: PPUSH
39978: CALL_OW 69
39982: PUSH
39983: LD_INT 2
39985: GREATER
39986: AND
39987: IFFALSE 40010
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39989: LD_ADDR_VAR 0 18
39993: PUSH
39994: LD_INT 11
39996: PUSH
39997: LD_INT 30
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_VAR 0 12
40008: ARRAY
40009: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40010: LD_VAR 0 18
40014: NOT
40015: PUSH
40016: LD_INT 40
40018: PPUSH
40019: LD_VAR 0 16
40023: PPUSH
40024: CALL_OW 321
40028: PUSH
40029: LD_INT 2
40031: EQUAL
40032: AND
40033: PUSH
40034: LD_INT 7
40036: PUSH
40037: LD_VAR 0 5
40041: IN
40042: PUSH
40043: LD_INT 28
40045: PUSH
40046: LD_VAR 0 5
40050: IN
40051: OR
40052: PUSH
40053: LD_INT 45
40055: PUSH
40056: LD_VAR 0 5
40060: IN
40061: OR
40062: AND
40063: IFFALSE 40317
// begin hex := GetHexInfo ( x , y ) ;
40065: LD_ADDR_VAR 0 4
40069: PUSH
40070: LD_VAR 0 10
40074: PPUSH
40075: LD_VAR 0 11
40079: PPUSH
40080: CALL_OW 546
40084: ST_TO_ADDR
// if hex [ 1 ] then
40085: LD_VAR 0 4
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: IFFALSE 40097
// exit ;
40095: GO 40500
// height := hex [ 2 ] ;
40097: LD_ADDR_VAR 0 15
40101: PUSH
40102: LD_VAR 0 4
40106: PUSH
40107: LD_INT 2
40109: ARRAY
40110: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40111: LD_ADDR_VAR 0 14
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: LD_INT 5
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// for i in tmp do
40134: LD_ADDR_VAR 0 8
40138: PUSH
40139: LD_VAR 0 14
40143: PUSH
40144: FOR_IN
40145: IFFALSE 40315
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40147: LD_ADDR_VAR 0 9
40151: PUSH
40152: LD_VAR 0 10
40156: PPUSH
40157: LD_VAR 0 8
40161: PPUSH
40162: LD_INT 5
40164: PPUSH
40165: CALL_OW 272
40169: PUSH
40170: LD_VAR 0 11
40174: PPUSH
40175: LD_VAR 0 8
40179: PPUSH
40180: LD_INT 5
40182: PPUSH
40183: CALL_OW 273
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40192: LD_VAR 0 9
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 9
40205: PUSH
40206: LD_INT 2
40208: ARRAY
40209: PPUSH
40210: CALL_OW 488
40214: IFFALSE 40313
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40216: LD_ADDR_VAR 0 4
40220: PUSH
40221: LD_VAR 0 9
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PPUSH
40230: LD_VAR 0 9
40234: PUSH
40235: LD_INT 2
40237: ARRAY
40238: PPUSH
40239: CALL_OW 546
40243: ST_TO_ADDR
// if hex [ 1 ] then
40244: LD_VAR 0 4
40248: PUSH
40249: LD_INT 1
40251: ARRAY
40252: IFFALSE 40256
// continue ;
40254: GO 40144
// h := hex [ 2 ] ;
40256: LD_ADDR_VAR 0 13
40260: PUSH
40261: LD_VAR 0 4
40265: PUSH
40266: LD_INT 2
40268: ARRAY
40269: ST_TO_ADDR
// if h + 7 < height then
40270: LD_VAR 0 13
40274: PUSH
40275: LD_INT 7
40277: PLUS
40278: PUSH
40279: LD_VAR 0 15
40283: LESS
40284: IFFALSE 40313
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40286: LD_ADDR_VAR 0 18
40290: PUSH
40291: LD_INT 7
40293: PUSH
40294: LD_INT 28
40296: PUSH
40297: LD_INT 45
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: PUSH
40305: LD_VAR 0 12
40309: ARRAY
40310: ST_TO_ADDR
// break ;
40311: GO 40315
// end ; end ; end ;
40313: GO 40144
40315: POP
40316: POP
// end ; if not weapon then
40317: LD_VAR 0 18
40321: NOT
40322: IFFALSE 40382
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40324: LD_ADDR_VAR 0 5
40328: PUSH
40329: LD_VAR 0 5
40333: PUSH
40334: LD_INT 11
40336: PUSH
40337: LD_INT 30
40339: PUSH
40340: LD_INT 49
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: DIFF
40348: ST_TO_ADDR
// if not list then
40349: LD_VAR 0 5
40353: NOT
40354: IFFALSE 40358
// exit ;
40356: GO 40500
// weapon := list [ rand ( 1 , list ) ] ;
40358: LD_ADDR_VAR 0 18
40362: PUSH
40363: LD_VAR 0 5
40367: PUSH
40368: LD_INT 1
40370: PPUSH
40371: LD_VAR 0 5
40375: PPUSH
40376: CALL_OW 12
40380: ARRAY
40381: ST_TO_ADDR
// end ; if weapon then
40382: LD_VAR 0 18
40386: IFFALSE 40500
// begin tmp := CostOfWeapon ( weapon ) ;
40388: LD_ADDR_VAR 0 14
40392: PUSH
40393: LD_VAR 0 18
40397: PPUSH
40398: CALL_OW 451
40402: ST_TO_ADDR
// j := GetBase ( tower ) ;
40403: LD_ADDR_VAR 0 9
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 274
40417: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40418: LD_VAR 0 9
40422: PPUSH
40423: LD_INT 1
40425: PPUSH
40426: CALL_OW 275
40430: PUSH
40431: LD_VAR 0 14
40435: PUSH
40436: LD_INT 1
40438: ARRAY
40439: GREATEREQUAL
40440: PUSH
40441: LD_VAR 0 9
40445: PPUSH
40446: LD_INT 2
40448: PPUSH
40449: CALL_OW 275
40453: PUSH
40454: LD_VAR 0 14
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: GREATEREQUAL
40463: AND
40464: PUSH
40465: LD_VAR 0 9
40469: PPUSH
40470: LD_INT 3
40472: PPUSH
40473: CALL_OW 275
40477: PUSH
40478: LD_VAR 0 14
40482: PUSH
40483: LD_INT 3
40485: ARRAY
40486: GREATEREQUAL
40487: AND
40488: IFFALSE 40500
// result := weapon ;
40490: LD_ADDR_VAR 0 3
40494: PUSH
40495: LD_VAR 0 18
40499: ST_TO_ADDR
// end ; end ;
40500: LD_VAR 0 3
40504: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40505: LD_INT 0
40507: PPUSH
40508: PPUSH
// result := true ;
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_INT 1
40516: ST_TO_ADDR
// if array1 = array2 then
40517: LD_VAR 0 1
40521: PUSH
40522: LD_VAR 0 2
40526: EQUAL
40527: IFFALSE 40587
// begin for i = 1 to array1 do
40529: LD_ADDR_VAR 0 4
40533: PUSH
40534: DOUBLE
40535: LD_INT 1
40537: DEC
40538: ST_TO_ADDR
40539: LD_VAR 0 1
40543: PUSH
40544: FOR_TO
40545: IFFALSE 40583
// if array1 [ i ] <> array2 [ i ] then
40547: LD_VAR 0 1
40551: PUSH
40552: LD_VAR 0 4
40556: ARRAY
40557: PUSH
40558: LD_VAR 0 2
40562: PUSH
40563: LD_VAR 0 4
40567: ARRAY
40568: NONEQUAL
40569: IFFALSE 40581
// begin result := false ;
40571: LD_ADDR_VAR 0 3
40575: PUSH
40576: LD_INT 0
40578: ST_TO_ADDR
// break ;
40579: GO 40583
// end ;
40581: GO 40544
40583: POP
40584: POP
// end else
40585: GO 40595
// result := false ;
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_INT 0
40594: ST_TO_ADDR
// end ;
40595: LD_VAR 0 3
40599: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40600: LD_INT 0
40602: PPUSH
40603: PPUSH
// if not array1 or not array2 then
40604: LD_VAR 0 1
40608: NOT
40609: PUSH
40610: LD_VAR 0 2
40614: NOT
40615: OR
40616: IFFALSE 40620
// exit ;
40618: GO 40684
// result := true ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 1
40627: ST_TO_ADDR
// for i = 1 to array1 do
40628: LD_ADDR_VAR 0 4
40632: PUSH
40633: DOUBLE
40634: LD_INT 1
40636: DEC
40637: ST_TO_ADDR
40638: LD_VAR 0 1
40642: PUSH
40643: FOR_TO
40644: IFFALSE 40682
// if array1 [ i ] <> array2 [ i ] then
40646: LD_VAR 0 1
40650: PUSH
40651: LD_VAR 0 4
40655: ARRAY
40656: PUSH
40657: LD_VAR 0 2
40661: PUSH
40662: LD_VAR 0 4
40666: ARRAY
40667: NONEQUAL
40668: IFFALSE 40680
// begin result := false ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_INT 0
40677: ST_TO_ADDR
// break ;
40678: GO 40682
// end ;
40680: GO 40643
40682: POP
40683: POP
// end ;
40684: LD_VAR 0 3
40688: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40689: LD_INT 0
40691: PPUSH
40692: PPUSH
40693: PPUSH
// pom := GetBase ( fac ) ;
40694: LD_ADDR_VAR 0 5
40698: PUSH
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 274
40708: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 2
40718: PUSH
40719: LD_INT 1
40721: ARRAY
40722: PPUSH
40723: LD_VAR 0 2
40727: PUSH
40728: LD_INT 2
40730: ARRAY
40731: PPUSH
40732: LD_VAR 0 2
40736: PUSH
40737: LD_INT 3
40739: ARRAY
40740: PPUSH
40741: LD_VAR 0 2
40745: PUSH
40746: LD_INT 4
40748: ARRAY
40749: PPUSH
40750: CALL_OW 449
40754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40755: LD_ADDR_VAR 0 3
40759: PUSH
40760: LD_VAR 0 5
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: CALL_OW 275
40772: PUSH
40773: LD_VAR 0 4
40777: PUSH
40778: LD_INT 1
40780: ARRAY
40781: GREATEREQUAL
40782: PUSH
40783: LD_VAR 0 5
40787: PPUSH
40788: LD_INT 2
40790: PPUSH
40791: CALL_OW 275
40795: PUSH
40796: LD_VAR 0 4
40800: PUSH
40801: LD_INT 2
40803: ARRAY
40804: GREATEREQUAL
40805: AND
40806: PUSH
40807: LD_VAR 0 5
40811: PPUSH
40812: LD_INT 3
40814: PPUSH
40815: CALL_OW 275
40819: PUSH
40820: LD_VAR 0 4
40824: PUSH
40825: LD_INT 3
40827: ARRAY
40828: GREATEREQUAL
40829: AND
40830: ST_TO_ADDR
// end ;
40831: LD_VAR 0 3
40835: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40836: LD_INT 0
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
// pom := GetBase ( building ) ;
40842: LD_ADDR_VAR 0 3
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: CALL_OW 274
40856: ST_TO_ADDR
// if not pom then
40857: LD_VAR 0 3
40861: NOT
40862: IFFALSE 40866
// exit ;
40864: GO 41036
// btype := GetBType ( building ) ;
40866: LD_ADDR_VAR 0 5
40870: PUSH
40871: LD_VAR 0 1
40875: PPUSH
40876: CALL_OW 266
40880: ST_TO_ADDR
// if btype = b_armoury then
40881: LD_VAR 0 5
40885: PUSH
40886: LD_INT 4
40888: EQUAL
40889: IFFALSE 40899
// btype := b_barracks ;
40891: LD_ADDR_VAR 0 5
40895: PUSH
40896: LD_INT 5
40898: ST_TO_ADDR
// if btype = b_depot then
40899: LD_VAR 0 5
40903: PUSH
40904: LD_INT 0
40906: EQUAL
40907: IFFALSE 40917
// btype := b_warehouse ;
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: LD_INT 1
40916: ST_TO_ADDR
// if btype = b_workshop then
40917: LD_VAR 0 5
40921: PUSH
40922: LD_INT 2
40924: EQUAL
40925: IFFALSE 40935
// btype := b_factory ;
40927: LD_ADDR_VAR 0 5
40931: PUSH
40932: LD_INT 3
40934: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40935: LD_ADDR_VAR 0 4
40939: PUSH
40940: LD_VAR 0 5
40944: PPUSH
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 248
40954: PPUSH
40955: CALL_OW 450
40959: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40960: LD_ADDR_VAR 0 2
40964: PUSH
40965: LD_VAR 0 3
40969: PPUSH
40970: LD_INT 1
40972: PPUSH
40973: CALL_OW 275
40977: PUSH
40978: LD_VAR 0 4
40982: PUSH
40983: LD_INT 1
40985: ARRAY
40986: GREATEREQUAL
40987: PUSH
40988: LD_VAR 0 3
40992: PPUSH
40993: LD_INT 2
40995: PPUSH
40996: CALL_OW 275
41000: PUSH
41001: LD_VAR 0 4
41005: PUSH
41006: LD_INT 2
41008: ARRAY
41009: GREATEREQUAL
41010: AND
41011: PUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: LD_INT 3
41019: PPUSH
41020: CALL_OW 275
41024: PUSH
41025: LD_VAR 0 4
41029: PUSH
41030: LD_INT 3
41032: ARRAY
41033: GREATEREQUAL
41034: AND
41035: ST_TO_ADDR
// end ;
41036: LD_VAR 0 2
41040: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41041: LD_INT 0
41043: PPUSH
41044: PPUSH
41045: PPUSH
// pom := GetBase ( building ) ;
41046: LD_ADDR_VAR 0 4
41050: PUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 274
41060: ST_TO_ADDR
// if not pom then
41061: LD_VAR 0 4
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41171
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41070: LD_ADDR_VAR 0 5
41074: PUSH
41075: LD_VAR 0 2
41079: PPUSH
41080: LD_VAR 0 1
41084: PPUSH
41085: CALL_OW 248
41089: PPUSH
41090: CALL_OW 450
41094: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41095: LD_ADDR_VAR 0 3
41099: PUSH
41100: LD_VAR 0 4
41104: PPUSH
41105: LD_INT 1
41107: PPUSH
41108: CALL_OW 275
41112: PUSH
41113: LD_VAR 0 5
41117: PUSH
41118: LD_INT 1
41120: ARRAY
41121: GREATEREQUAL
41122: PUSH
41123: LD_VAR 0 4
41127: PPUSH
41128: LD_INT 2
41130: PPUSH
41131: CALL_OW 275
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 2
41143: ARRAY
41144: GREATEREQUAL
41145: AND
41146: PUSH
41147: LD_VAR 0 4
41151: PPUSH
41152: LD_INT 3
41154: PPUSH
41155: CALL_OW 275
41159: PUSH
41160: LD_VAR 0 5
41164: PUSH
41165: LD_INT 3
41167: ARRAY
41168: GREATEREQUAL
41169: AND
41170: ST_TO_ADDR
// end ;
41171: LD_VAR 0 3
41175: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41176: LD_INT 0
41178: PPUSH
41179: PPUSH
41180: PPUSH
41181: PPUSH
41182: PPUSH
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
// result := false ;
41189: LD_ADDR_VAR 0 8
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41197: LD_VAR 0 5
41201: NOT
41202: PUSH
41203: LD_VAR 0 1
41207: NOT
41208: OR
41209: PUSH
41210: LD_VAR 0 2
41214: NOT
41215: OR
41216: PUSH
41217: LD_VAR 0 3
41221: NOT
41222: OR
41223: IFFALSE 41227
// exit ;
41225: GO 42041
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41227: LD_ADDR_VAR 0 14
41231: PUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: LD_VAR 0 2
41241: PPUSH
41242: LD_VAR 0 3
41246: PPUSH
41247: LD_VAR 0 4
41251: PPUSH
41252: LD_VAR 0 5
41256: PUSH
41257: LD_INT 1
41259: ARRAY
41260: PPUSH
41261: CALL_OW 248
41265: PPUSH
41266: LD_INT 0
41268: PPUSH
41269: CALL 43278 0 6
41273: ST_TO_ADDR
// if not hexes then
41274: LD_VAR 0 14
41278: NOT
41279: IFFALSE 41283
// exit ;
41281: GO 42041
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41283: LD_ADDR_VAR 0 17
41287: PUSH
41288: LD_VAR 0 5
41292: PPUSH
41293: LD_INT 22
41295: PUSH
41296: LD_VAR 0 13
41300: PPUSH
41301: CALL_OW 255
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 30
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PPUSH
41342: CALL_OW 72
41346: ST_TO_ADDR
// for i = 1 to hexes do
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: DOUBLE
41353: LD_INT 1
41355: DEC
41356: ST_TO_ADDR
41357: LD_VAR 0 14
41361: PUSH
41362: FOR_TO
41363: IFFALSE 42039
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41365: LD_ADDR_VAR 0 13
41369: PUSH
41370: LD_VAR 0 14
41374: PUSH
41375: LD_VAR 0 9
41379: ARRAY
41380: PUSH
41381: LD_INT 1
41383: ARRAY
41384: PPUSH
41385: LD_VAR 0 14
41389: PUSH
41390: LD_VAR 0 9
41394: ARRAY
41395: PUSH
41396: LD_INT 2
41398: ARRAY
41399: PPUSH
41400: CALL_OW 428
41404: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41405: LD_VAR 0 14
41409: PUSH
41410: LD_VAR 0 9
41414: ARRAY
41415: PUSH
41416: LD_INT 1
41418: ARRAY
41419: PPUSH
41420: LD_VAR 0 14
41424: PUSH
41425: LD_VAR 0 9
41429: ARRAY
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: PPUSH
41435: CALL_OW 351
41439: PUSH
41440: LD_VAR 0 14
41444: PUSH
41445: LD_VAR 0 9
41449: ARRAY
41450: PUSH
41451: LD_INT 1
41453: ARRAY
41454: PPUSH
41455: LD_VAR 0 14
41459: PUSH
41460: LD_VAR 0 9
41464: ARRAY
41465: PUSH
41466: LD_INT 2
41468: ARRAY
41469: PPUSH
41470: CALL_OW 488
41474: NOT
41475: OR
41476: PUSH
41477: LD_VAR 0 13
41481: PPUSH
41482: CALL_OW 247
41486: PUSH
41487: LD_INT 3
41489: EQUAL
41490: OR
41491: IFFALSE 41497
// exit ;
41493: POP
41494: POP
41495: GO 42041
// if not tmp then
41497: LD_VAR 0 13
41501: NOT
41502: IFFALSE 41506
// continue ;
41504: GO 41362
// result := true ;
41506: LD_ADDR_VAR 0 8
41510: PUSH
41511: LD_INT 1
41513: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41514: LD_VAR 0 6
41518: PUSH
41519: LD_VAR 0 13
41523: PPUSH
41524: CALL_OW 247
41528: PUSH
41529: LD_INT 2
41531: EQUAL
41532: AND
41533: PUSH
41534: LD_VAR 0 13
41538: PPUSH
41539: CALL_OW 263
41543: PUSH
41544: LD_INT 1
41546: EQUAL
41547: AND
41548: IFFALSE 41712
// begin if IsDrivenBy ( tmp ) then
41550: LD_VAR 0 13
41554: PPUSH
41555: CALL_OW 311
41559: IFFALSE 41563
// continue ;
41561: GO 41362
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41563: LD_VAR 0 6
41567: PPUSH
41568: LD_INT 3
41570: PUSH
41571: LD_INT 60
41573: PUSH
41574: EMPTY
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: LD_INT 55
41586: PUSH
41587: EMPTY
41588: LIST
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PPUSH
41598: CALL_OW 72
41602: IFFALSE 41710
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41604: LD_ADDR_VAR 0 18
41608: PUSH
41609: LD_VAR 0 6
41613: PPUSH
41614: LD_INT 3
41616: PUSH
41617: LD_INT 60
41619: PUSH
41620: EMPTY
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: LD_INT 55
41632: PUSH
41633: EMPTY
41634: LIST
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PPUSH
41644: CALL_OW 72
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: ST_TO_ADDR
// if IsInUnit ( driver ) then
41653: LD_VAR 0 18
41657: PPUSH
41658: CALL_OW 310
41662: IFFALSE 41673
// ComExit ( driver ) ;
41664: LD_VAR 0 18
41668: PPUSH
41669: CALL 66406 0 1
// AddComEnterUnit ( driver , tmp ) ;
41673: LD_VAR 0 18
41677: PPUSH
41678: LD_VAR 0 13
41682: PPUSH
41683: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41687: LD_VAR 0 18
41691: PPUSH
41692: LD_VAR 0 7
41696: PPUSH
41697: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41701: LD_VAR 0 18
41705: PPUSH
41706: CALL_OW 181
// end ; continue ;
41710: GO 41362
// end ; if not cleaners or not tmp in cleaners then
41712: LD_VAR 0 6
41716: NOT
41717: PUSH
41718: LD_VAR 0 13
41722: PUSH
41723: LD_VAR 0 6
41727: IN
41728: NOT
41729: OR
41730: IFFALSE 42037
// begin if dep then
41732: LD_VAR 0 17
41736: IFFALSE 41872
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41738: LD_ADDR_VAR 0 16
41742: PUSH
41743: LD_VAR 0 17
41747: PUSH
41748: LD_INT 1
41750: ARRAY
41751: PPUSH
41752: CALL_OW 250
41756: PPUSH
41757: LD_VAR 0 17
41761: PUSH
41762: LD_INT 1
41764: ARRAY
41765: PPUSH
41766: CALL_OW 254
41770: PPUSH
41771: LD_INT 5
41773: PPUSH
41774: CALL_OW 272
41778: PUSH
41779: LD_VAR 0 17
41783: PUSH
41784: LD_INT 1
41786: ARRAY
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_VAR 0 17
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: PPUSH
41802: CALL_OW 254
41806: PPUSH
41807: LD_INT 5
41809: PPUSH
41810: CALL_OW 273
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41819: LD_VAR 0 16
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PPUSH
41828: LD_VAR 0 16
41832: PUSH
41833: LD_INT 2
41835: ARRAY
41836: PPUSH
41837: CALL_OW 488
41841: IFFALSE 41872
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41843: LD_VAR 0 13
41847: PPUSH
41848: LD_VAR 0 16
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: LD_VAR 0 16
41861: PUSH
41862: LD_INT 2
41864: ARRAY
41865: PPUSH
41866: CALL_OW 111
// continue ;
41870: GO 41362
// end ; end ; r := GetDir ( tmp ) ;
41872: LD_ADDR_VAR 0 15
41876: PUSH
41877: LD_VAR 0 13
41881: PPUSH
41882: CALL_OW 254
41886: ST_TO_ADDR
// if r = 5 then
41887: LD_VAR 0 15
41891: PUSH
41892: LD_INT 5
41894: EQUAL
41895: IFFALSE 41905
// r := 0 ;
41897: LD_ADDR_VAR 0 15
41901: PUSH
41902: LD_INT 0
41904: ST_TO_ADDR
// for j = r to 5 do
41905: LD_ADDR_VAR 0 10
41909: PUSH
41910: DOUBLE
41911: LD_VAR 0 15
41915: DEC
41916: ST_TO_ADDR
41917: LD_INT 5
41919: PUSH
41920: FOR_TO
41921: IFFALSE 42035
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41923: LD_ADDR_VAR 0 11
41927: PUSH
41928: LD_VAR 0 13
41932: PPUSH
41933: CALL_OW 250
41937: PPUSH
41938: LD_VAR 0 10
41942: PPUSH
41943: LD_INT 2
41945: PPUSH
41946: CALL_OW 272
41950: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41951: LD_ADDR_VAR 0 12
41955: PUSH
41956: LD_VAR 0 13
41960: PPUSH
41961: CALL_OW 251
41965: PPUSH
41966: LD_VAR 0 10
41970: PPUSH
41971: LD_INT 2
41973: PPUSH
41974: CALL_OW 273
41978: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41979: LD_VAR 0 11
41983: PPUSH
41984: LD_VAR 0 12
41988: PPUSH
41989: CALL_OW 488
41993: PUSH
41994: LD_VAR 0 11
41998: PPUSH
41999: LD_VAR 0 12
42003: PPUSH
42004: CALL_OW 428
42008: NOT
42009: AND
42010: IFFALSE 42033
// begin ComMoveXY ( tmp , _x , _y ) ;
42012: LD_VAR 0 13
42016: PPUSH
42017: LD_VAR 0 11
42021: PPUSH
42022: LD_VAR 0 12
42026: PPUSH
42027: CALL_OW 111
// break ;
42031: GO 42035
// end ; end ;
42033: GO 41920
42035: POP
42036: POP
// end ; end ;
42037: GO 41362
42039: POP
42040: POP
// end ;
42041: LD_VAR 0 8
42045: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42046: LD_INT 0
42048: PPUSH
// result := true ;
42049: LD_ADDR_VAR 0 3
42053: PUSH
42054: LD_INT 1
42056: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42057: LD_VAR 0 2
42061: PUSH
42062: LD_INT 24
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42076
42068: LD_INT 33
42070: DOUBLE
42071: EQUAL
42072: IFTRUE 42076
42074: GO 42101
42076: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42077: LD_ADDR_VAR 0 3
42081: PUSH
42082: LD_INT 32
42084: PPUSH
42085: LD_VAR 0 1
42089: PPUSH
42090: CALL_OW 321
42094: PUSH
42095: LD_INT 2
42097: EQUAL
42098: ST_TO_ADDR
42099: GO 42421
42101: LD_INT 20
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42134
42109: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 6
42117: PPUSH
42118: LD_VAR 0 1
42122: PPUSH
42123: CALL_OW 321
42127: PUSH
42128: LD_INT 2
42130: EQUAL
42131: ST_TO_ADDR
42132: GO 42421
42134: LD_INT 22
42136: DOUBLE
42137: EQUAL
42138: IFTRUE 42148
42140: LD_INT 36
42142: DOUBLE
42143: EQUAL
42144: IFTRUE 42148
42146: GO 42173
42148: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: LD_INT 15
42156: PPUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 321
42166: PUSH
42167: LD_INT 2
42169: EQUAL
42170: ST_TO_ADDR
42171: GO 42421
42173: LD_INT 30
42175: DOUBLE
42176: EQUAL
42177: IFTRUE 42181
42179: GO 42206
42181: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_INT 20
42189: PPUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 321
42199: PUSH
42200: LD_INT 2
42202: EQUAL
42203: ST_TO_ADDR
42204: GO 42421
42206: LD_INT 28
42208: DOUBLE
42209: EQUAL
42210: IFTRUE 42220
42212: LD_INT 21
42214: DOUBLE
42215: EQUAL
42216: IFTRUE 42220
42218: GO 42245
42220: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42221: LD_ADDR_VAR 0 3
42225: PUSH
42226: LD_INT 21
42228: PPUSH
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 321
42238: PUSH
42239: LD_INT 2
42241: EQUAL
42242: ST_TO_ADDR
42243: GO 42421
42245: LD_INT 16
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42280
42253: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_EXP 118
42263: PPUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: CALL_OW 321
42273: PUSH
42274: LD_INT 2
42276: EQUAL
42277: ST_TO_ADDR
42278: GO 42421
42280: LD_INT 19
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42294
42286: LD_INT 23
42288: DOUBLE
42289: EQUAL
42290: IFTRUE 42294
42292: GO 42321
42294: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_EXP 117
42304: PPUSH
42305: LD_VAR 0 1
42309: PPUSH
42310: CALL_OW 321
42314: PUSH
42315: LD_INT 2
42317: EQUAL
42318: ST_TO_ADDR
42319: GO 42421
42321: LD_INT 17
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42329
42327: GO 42354
42329: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 39
42337: PPUSH
42338: LD_VAR 0 1
42342: PPUSH
42343: CALL_OW 321
42347: PUSH
42348: LD_INT 2
42350: EQUAL
42351: ST_TO_ADDR
42352: GO 42421
42354: LD_INT 18
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42387
42362: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 40
42370: PPUSH
42371: LD_VAR 0 1
42375: PPUSH
42376: CALL_OW 321
42380: PUSH
42381: LD_INT 2
42383: EQUAL
42384: ST_TO_ADDR
42385: GO 42421
42387: LD_INT 27
42389: DOUBLE
42390: EQUAL
42391: IFTRUE 42395
42393: GO 42420
42395: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42396: LD_ADDR_VAR 0 3
42400: PUSH
42401: LD_INT 35
42403: PPUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 321
42413: PUSH
42414: LD_INT 2
42416: EQUAL
42417: ST_TO_ADDR
42418: GO 42421
42420: POP
// end ;
42421: LD_VAR 0 3
42425: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42426: LD_INT 0
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
// result := false ;
42439: LD_ADDR_VAR 0 6
42443: PUSH
42444: LD_INT 0
42446: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42447: LD_VAR 0 1
42451: NOT
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 266
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: IN
42473: NOT
42474: OR
42475: PUSH
42476: LD_VAR 0 2
42480: NOT
42481: OR
42482: PUSH
42483: LD_VAR 0 5
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 4
42502: PUSH
42503: LD_INT 5
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: IN
42514: NOT
42515: OR
42516: PUSH
42517: LD_VAR 0 3
42521: PPUSH
42522: LD_VAR 0 4
42526: PPUSH
42527: CALL_OW 488
42531: NOT
42532: OR
42533: IFFALSE 42537
// exit ;
42535: GO 43273
// side := GetSide ( depot ) ;
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_VAR 0 1
42546: PPUSH
42547: CALL_OW 255
42551: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42552: LD_VAR 0 9
42556: PPUSH
42557: LD_VAR 0 2
42561: PPUSH
42562: CALL 42046 0 2
42566: NOT
42567: IFFALSE 42571
// exit ;
42569: GO 43273
// pom := GetBase ( depot ) ;
42571: LD_ADDR_VAR 0 10
42575: PUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 274
42585: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42586: LD_ADDR_VAR 0 11
42590: PUSH
42591: LD_VAR 0 2
42595: PPUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 248
42605: PPUSH
42606: CALL_OW 450
42610: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42611: LD_VAR 0 10
42615: PPUSH
42616: LD_INT 1
42618: PPUSH
42619: CALL_OW 275
42623: PUSH
42624: LD_VAR 0 11
42628: PUSH
42629: LD_INT 1
42631: ARRAY
42632: GREATEREQUAL
42633: PUSH
42634: LD_VAR 0 10
42638: PPUSH
42639: LD_INT 2
42641: PPUSH
42642: CALL_OW 275
42646: PUSH
42647: LD_VAR 0 11
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: GREATEREQUAL
42656: AND
42657: PUSH
42658: LD_VAR 0 10
42662: PPUSH
42663: LD_INT 3
42665: PPUSH
42666: CALL_OW 275
42670: PUSH
42671: LD_VAR 0 11
42675: PUSH
42676: LD_INT 3
42678: ARRAY
42679: GREATEREQUAL
42680: AND
42681: NOT
42682: IFFALSE 42686
// exit ;
42684: GO 43273
// if GetBType ( depot ) = b_depot then
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 266
42695: PUSH
42696: LD_INT 0
42698: EQUAL
42699: IFFALSE 42711
// dist := 28 else
42701: LD_ADDR_VAR 0 14
42705: PUSH
42706: LD_INT 28
42708: ST_TO_ADDR
42709: GO 42719
// dist := 36 ;
42711: LD_ADDR_VAR 0 14
42715: PUSH
42716: LD_INT 36
42718: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42719: LD_VAR 0 1
42723: PPUSH
42724: LD_VAR 0 3
42728: PPUSH
42729: LD_VAR 0 4
42733: PPUSH
42734: CALL_OW 297
42738: PUSH
42739: LD_VAR 0 14
42743: GREATER
42744: IFFALSE 42748
// exit ;
42746: GO 43273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42748: LD_ADDR_VAR 0 12
42752: PUSH
42753: LD_VAR 0 2
42757: PPUSH
42758: LD_VAR 0 3
42762: PPUSH
42763: LD_VAR 0 4
42767: PPUSH
42768: LD_VAR 0 5
42772: PPUSH
42773: LD_VAR 0 1
42777: PPUSH
42778: CALL_OW 248
42782: PPUSH
42783: LD_INT 0
42785: PPUSH
42786: CALL 43278 0 6
42790: ST_TO_ADDR
// if not hexes then
42791: LD_VAR 0 12
42795: NOT
42796: IFFALSE 42800
// exit ;
42798: GO 43273
// hex := GetHexInfo ( x , y ) ;
42800: LD_ADDR_VAR 0 15
42804: PUSH
42805: LD_VAR 0 3
42809: PPUSH
42810: LD_VAR 0 4
42814: PPUSH
42815: CALL_OW 546
42819: ST_TO_ADDR
// if hex [ 1 ] then
42820: LD_VAR 0 15
42824: PUSH
42825: LD_INT 1
42827: ARRAY
42828: IFFALSE 42832
// exit ;
42830: GO 43273
// height := hex [ 2 ] ;
42832: LD_ADDR_VAR 0 13
42836: PUSH
42837: LD_VAR 0 15
42841: PUSH
42842: LD_INT 2
42844: ARRAY
42845: ST_TO_ADDR
// for i = 1 to hexes do
42846: LD_ADDR_VAR 0 7
42850: PUSH
42851: DOUBLE
42852: LD_INT 1
42854: DEC
42855: ST_TO_ADDR
42856: LD_VAR 0 12
42860: PUSH
42861: FOR_TO
42862: IFFALSE 43192
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42864: LD_VAR 0 12
42868: PUSH
42869: LD_VAR 0 7
42873: ARRAY
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_VAR 0 7
42888: ARRAY
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 488
42898: NOT
42899: PUSH
42900: LD_VAR 0 12
42904: PUSH
42905: LD_VAR 0 7
42909: ARRAY
42910: PUSH
42911: LD_INT 1
42913: ARRAY
42914: PPUSH
42915: LD_VAR 0 12
42919: PUSH
42920: LD_VAR 0 7
42924: ARRAY
42925: PUSH
42926: LD_INT 2
42928: ARRAY
42929: PPUSH
42930: CALL_OW 428
42934: PUSH
42935: LD_INT 0
42937: GREATER
42938: OR
42939: PUSH
42940: LD_VAR 0 12
42944: PUSH
42945: LD_VAR 0 7
42949: ARRAY
42950: PUSH
42951: LD_INT 1
42953: ARRAY
42954: PPUSH
42955: LD_VAR 0 12
42959: PUSH
42960: LD_VAR 0 7
42964: ARRAY
42965: PUSH
42966: LD_INT 2
42968: ARRAY
42969: PPUSH
42970: CALL_OW 351
42974: OR
42975: IFFALSE 42981
// exit ;
42977: POP
42978: POP
42979: GO 43273
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42981: LD_ADDR_VAR 0 8
42985: PUSH
42986: LD_VAR 0 12
42990: PUSH
42991: LD_VAR 0 7
42995: ARRAY
42996: PUSH
42997: LD_INT 1
42999: ARRAY
43000: PPUSH
43001: LD_VAR 0 12
43005: PUSH
43006: LD_VAR 0 7
43010: ARRAY
43011: PUSH
43012: LD_INT 2
43014: ARRAY
43015: PPUSH
43016: CALL_OW 546
43020: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43021: LD_VAR 0 8
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: PUSH
43030: LD_VAR 0 8
43034: PUSH
43035: LD_INT 2
43037: ARRAY
43038: PUSH
43039: LD_VAR 0 13
43043: PUSH
43044: LD_INT 2
43046: PLUS
43047: GREATER
43048: OR
43049: PUSH
43050: LD_VAR 0 8
43054: PUSH
43055: LD_INT 2
43057: ARRAY
43058: PUSH
43059: LD_VAR 0 13
43063: PUSH
43064: LD_INT 2
43066: MINUS
43067: LESS
43068: OR
43069: PUSH
43070: LD_VAR 0 8
43074: PUSH
43075: LD_INT 3
43077: ARRAY
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 8
43084: PUSH
43085: LD_INT 9
43087: PUSH
43088: LD_INT 10
43090: PUSH
43091: LD_INT 11
43093: PUSH
43094: LD_INT 12
43096: PUSH
43097: LD_INT 13
43099: PUSH
43100: LD_INT 16
43102: PUSH
43103: LD_INT 17
43105: PUSH
43106: LD_INT 18
43108: PUSH
43109: LD_INT 19
43111: PUSH
43112: LD_INT 20
43114: PUSH
43115: LD_INT 21
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: IN
43133: NOT
43134: OR
43135: PUSH
43136: LD_VAR 0 8
43140: PUSH
43141: LD_INT 5
43143: ARRAY
43144: NOT
43145: OR
43146: PUSH
43147: LD_VAR 0 8
43151: PUSH
43152: LD_INT 6
43154: ARRAY
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 7
43164: PUSH
43165: LD_INT 9
43167: PUSH
43168: LD_INT 10
43170: PUSH
43171: LD_INT 11
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: IN
43182: NOT
43183: OR
43184: IFFALSE 43190
// exit ;
43186: POP
43187: POP
43188: GO 43273
// end ;
43190: GO 42861
43192: POP
43193: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43194: LD_VAR 0 9
43198: PPUSH
43199: LD_VAR 0 3
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: LD_INT 20
43211: PPUSH
43212: CALL 35219 0 4
43216: PUSH
43217: LD_INT 4
43219: ARRAY
43220: IFFALSE 43224
// exit ;
43222: GO 43273
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43224: LD_VAR 0 2
43228: PUSH
43229: LD_INT 29
43231: PUSH
43232: LD_INT 30
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: IN
43239: PUSH
43240: LD_VAR 0 3
43244: PPUSH
43245: LD_VAR 0 4
43249: PPUSH
43250: LD_VAR 0 9
43254: PPUSH
43255: CALL_OW 440
43259: NOT
43260: AND
43261: IFFALSE 43265
// exit ;
43263: GO 43273
// result := true ;
43265: LD_ADDR_VAR 0 6
43269: PUSH
43270: LD_INT 1
43272: ST_TO_ADDR
// end ;
43273: LD_VAR 0 6
43277: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43278: LD_INT 0
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
// result = [ ] ;
43338: LD_ADDR_VAR 0 7
43342: PUSH
43343: EMPTY
43344: ST_TO_ADDR
// temp_list = [ ] ;
43345: LD_ADDR_VAR 0 9
43349: PUSH
43350: EMPTY
43351: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43352: LD_VAR 0 4
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: IN
43383: NOT
43384: PUSH
43385: LD_VAR 0 1
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: IN
43400: PUSH
43401: LD_VAR 0 5
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: IN
43420: NOT
43421: AND
43422: OR
43423: IFFALSE 43427
// exit ;
43425: GO 61818
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43427: LD_VAR 0 1
43431: PUSH
43432: LD_INT 6
43434: PUSH
43435: LD_INT 7
43437: PUSH
43438: LD_INT 8
43440: PUSH
43441: LD_INT 13
43443: PUSH
43444: LD_INT 12
43446: PUSH
43447: LD_INT 15
43449: PUSH
43450: LD_INT 11
43452: PUSH
43453: LD_INT 14
43455: PUSH
43456: LD_INT 10
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: IN
43470: IFFALSE 43480
// btype = b_lab ;
43472: LD_ADDR_VAR 0 1
43476: PUSH
43477: LD_INT 6
43479: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43480: LD_VAR 0 6
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: IN
43499: NOT
43500: PUSH
43501: LD_VAR 0 1
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 6
43520: PUSH
43521: LD_INT 36
43523: PUSH
43524: LD_INT 4
43526: PUSH
43527: LD_INT 5
43529: PUSH
43530: LD_INT 31
43532: PUSH
43533: LD_INT 32
43535: PUSH
43536: LD_INT 33
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: IN
43552: NOT
43553: PUSH
43554: LD_VAR 0 6
43558: PUSH
43559: LD_INT 1
43561: EQUAL
43562: AND
43563: OR
43564: PUSH
43565: LD_VAR 0 1
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 3
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: IN
43580: NOT
43581: PUSH
43582: LD_VAR 0 6
43586: PUSH
43587: LD_INT 2
43589: EQUAL
43590: AND
43591: OR
43592: IFFALSE 43602
// mode = 0 ;
43594: LD_ADDR_VAR 0 6
43598: PUSH
43599: LD_INT 0
43601: ST_TO_ADDR
// case mode of 0 :
43602: LD_VAR 0 6
43606: PUSH
43607: LD_INT 0
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 55068
43615: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43616: LD_ADDR_VAR 0 11
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43809: LD_ADDR_VAR 0 12
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44005: LD_ADDR_VAR 0 13
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: NEG
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44204: LD_ADDR_VAR 0 14
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44400: LD_ADDR_VAR 0 15
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44593: LD_ADDR_VAR 0 16
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44786: LD_ADDR_VAR 0 17
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45016: LD_ADDR_VAR 0 18
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45246: LD_ADDR_VAR 0 19
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45476: LD_ADDR_VAR 0 20
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45706: LD_ADDR_VAR 0 21
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45936: LD_ADDR_VAR 0 22
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46166: LD_ADDR_VAR 0 23
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 3
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46446: LD_ADDR_VAR 0 24
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46722: LD_ADDR_VAR 0 25
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46996: LD_ADDR_VAR 0 26
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47272: LD_ADDR_VAR 0 27
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 3
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47552: LD_ADDR_VAR 0 28
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 3
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47834: LD_ADDR_VAR 0 29
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 3
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48113: LD_ADDR_VAR 0 30
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48391: LD_ADDR_VAR 0 31
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 3
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48669: LD_ADDR_VAR 0 32
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 3
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48947: LD_ADDR_VAR 0 33
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49226: LD_ADDR_VAR 0 34
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49506: LD_ADDR_VAR 0 35
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49618: LD_ADDR_VAR 0 36
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49730: LD_ADDR_VAR 0 37
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49842: LD_ADDR_VAR 0 38
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49954: LD_ADDR_VAR 0 39
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50066: LD_ADDR_VAR 0 40
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50178: LD_ADDR_VAR 0 41
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50528: LD_ADDR_VAR 0 42
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50878: LD_ADDR_VAR 0 43
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: NEG
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51226: LD_ADDR_VAR 0 44
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 3
51535: NEG
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51576: LD_ADDR_VAR 0 45
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51926: LD_ADDR_VAR 0 46
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52274: LD_ADDR_VAR 0 47
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52425: LD_ADDR_VAR 0 48
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52572: LD_ADDR_VAR 0 49
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52716: LD_ADDR_VAR 0 50
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52860: LD_ADDR_VAR 0 51
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53007: LD_ADDR_VAR 0 52
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53158: LD_ADDR_VAR 0 53
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53388: LD_ADDR_VAR 0 54
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53618: LD_ADDR_VAR 0 55
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53848: LD_ADDR_VAR 0 56
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54078: LD_ADDR_VAR 0 57
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54308: LD_ADDR_VAR 0 58
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54538: LD_ADDR_VAR 0 59
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54626: LD_ADDR_VAR 0 60
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54714: LD_ADDR_VAR 0 61
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54802: LD_ADDR_VAR 0 62
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54890: LD_ADDR_VAR 0 63
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54978: LD_ADDR_VAR 0 64
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// end ; 1 :
55066: GO 60963
55068: LD_INT 1
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55076
55074: GO 57699
55076: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55077: LD_ADDR_VAR 0 11
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55121: LD_ADDR_VAR 0 12
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55162: LD_ADDR_VAR 0 13
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55202: LD_ADDR_VAR 0 14
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55243: LD_ADDR_VAR 0 15
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55287: LD_ADDR_VAR 0 16
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55333: LD_ADDR_VAR 0 17
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55377: LD_ADDR_VAR 0 18
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55418: LD_ADDR_VAR 0 19
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55458: LD_ADDR_VAR 0 20
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55499: LD_ADDR_VAR 0 21
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55543: LD_ADDR_VAR 0 22
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 3
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55589: LD_ADDR_VAR 0 23
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55633: LD_ADDR_VAR 0 24
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55674: LD_ADDR_VAR 0 25
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55714: LD_ADDR_VAR 0 26
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 4
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55755: LD_ADDR_VAR 0 27
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55799: LD_ADDR_VAR 0 28
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 4
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 4
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55845: LD_ADDR_VAR 0 29
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 4
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 5
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 5
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 4
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 6
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 6
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 5
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56000: LD_ADDR_VAR 0 30
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 4
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 5
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 5
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 5
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 6
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 6
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56143: LD_ADDR_VAR 0 31
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 5
56210: PUSH
56211: LD_INT 4
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 5
56220: PUSH
56221: LD_INT 5
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: LD_INT 5
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 6
56240: PUSH
56241: LD_INT 5
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 6
56250: PUSH
56251: LD_INT 6
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 5
56260: PUSH
56261: LD_INT 6
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56282: LD_ADDR_VAR 0 32
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 4
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 4
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 5
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 5
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 4
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 6
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 6
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 5
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56425: LD_ADDR_VAR 0 33
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 4
56477: NEG
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 5
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 5
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 6
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 6
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56580: LD_ADDR_VAR 0 34
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: LD_INT 4
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: NEG
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: LD_INT 5
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 5
56671: NEG
56672: PUSH
56673: LD_INT 4
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 5
56683: NEG
56684: PUSH
56685: LD_INT 5
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 5
56695: NEG
56696: PUSH
56697: LD_INT 6
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 6
56707: NEG
56708: PUSH
56709: LD_INT 5
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 6
56719: NEG
56720: PUSH
56721: LD_INT 6
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56743: LD_ADDR_VAR 0 41
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56787: LD_ADDR_VAR 0 42
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56828: LD_ADDR_VAR 0 43
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56868: LD_ADDR_VAR 0 44
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56909: LD_ADDR_VAR 0 45
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56953: LD_ADDR_VAR 0 46
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56999: LD_ADDR_VAR 0 47
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57032: LD_ADDR_VAR 0 48
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57063: LD_ADDR_VAR 0 49
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57092: LD_ADDR_VAR 0 50
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57121: LD_ADDR_VAR 0 51
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57152: LD_ADDR_VAR 0 52
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57185: LD_ADDR_VAR 0 53
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 3
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57229: LD_ADDR_VAR 0 54
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57270: LD_ADDR_VAR 0 55
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 3
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57310: LD_ADDR_VAR 0 56
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57351: LD_ADDR_VAR 0 57
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57395: LD_ADDR_VAR 0 58
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57441: LD_ADDR_VAR 0 59
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57485: LD_ADDR_VAR 0 60
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57526: LD_ADDR_VAR 0 61
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57566: LD_ADDR_VAR 0 62
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57607: LD_ADDR_VAR 0 63
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57651: LD_ADDR_VAR 0 64
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// end ; 2 :
57697: GO 60963
57699: LD_INT 2
57701: DOUBLE
57702: EQUAL
57703: IFTRUE 57707
57705: GO 60962
57707: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57708: LD_ADDR_VAR 0 29
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 5
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 5
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 4
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 4
57838: PUSH
57839: LD_INT 4
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 4
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 4
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 5
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 5
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 4
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 5
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 4
58047: NEG
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 4
58070: NEG
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 5
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: LD_INT 4
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 5
58153: NEG
58154: PUSH
58155: LD_INT 4
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 5
58165: NEG
58166: PUSH
58167: LD_INT 5
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 5
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58246: LD_ADDR_VAR 0 30
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: LD_INT 4
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: LD_INT 3
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 5
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 5
58283: PUSH
58284: LD_INT 5
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: LD_INT 4
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 5
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 4
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 5
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 4
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: NEG
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 4
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 4
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 5
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 4
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 4
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 5
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 5
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58793: LD_ADDR_VAR 0 31
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 5
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 5
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 4
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 4
59007: NEG
59008: PUSH
59009: LD_INT 5
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: LD_INT 4
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: NEG
59068: PUSH
59069: LD_INT 5
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 5
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 5
59091: NEG
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 4
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 4
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59343: LD_ADDR_VAR 0 32
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 5
59406: NEG
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 5
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 4
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: LD_INT 4
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 5
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 4
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 3
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 5
59775: PUSH
59776: LD_INT 4
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: LD_INT 5
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 4
59795: PUSH
59796: LD_INT 5
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: LD_INT 4
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: LD_INT 5
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59890: LD_ADDR_VAR 0 33
59894: PUSH
59895: LD_INT 4
59897: NEG
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: LD_INT 5
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 4
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 5
59957: NEG
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 5
59969: NEG
59970: PUSH
59971: LD_INT 5
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: LD_INT 5
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 5
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 3
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 4
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 4
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 4
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 5
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 4
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 5
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 4
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: LD_INT 5
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60428: LD_ADDR_VAR 0 34
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 5
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 4
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 4
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 5
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 5
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: LD_INT 4
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 5
60660: PUSH
60661: LD_INT 5
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: PUSH
60671: LD_INT 5
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 4
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 5
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: LD_INT 5
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 3
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 4
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 4
60813: NEG
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 5
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 5
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// end ; end ;
60960: GO 60963
60962: POP
// case btype of b_depot , b_warehouse :
60963: LD_VAR 0 1
60967: PUSH
60968: LD_INT 0
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 60982
60974: LD_INT 1
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 60982
60980: GO 61183
60982: POP
// case nation of nation_american :
60983: LD_VAR 0 5
60987: PUSH
60988: LD_INT 1
60990: DOUBLE
60991: EQUAL
60992: IFTRUE 60996
60994: GO 61052
60996: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60997: LD_ADDR_VAR 0 9
61001: PUSH
61002: LD_VAR 0 11
61006: PUSH
61007: LD_VAR 0 12
61011: PUSH
61012: LD_VAR 0 13
61016: PUSH
61017: LD_VAR 0 14
61021: PUSH
61022: LD_VAR 0 15
61026: PUSH
61027: LD_VAR 0 16
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: LD_VAR 0 4
61044: PUSH
61045: LD_INT 1
61047: PLUS
61048: ARRAY
61049: ST_TO_ADDR
61050: GO 61181
61052: LD_INT 2
61054: DOUBLE
61055: EQUAL
61056: IFTRUE 61060
61058: GO 61116
61060: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61061: LD_ADDR_VAR 0 9
61065: PUSH
61066: LD_VAR 0 17
61070: PUSH
61071: LD_VAR 0 18
61075: PUSH
61076: LD_VAR 0 19
61080: PUSH
61081: LD_VAR 0 20
61085: PUSH
61086: LD_VAR 0 21
61090: PUSH
61091: LD_VAR 0 22
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: PUSH
61104: LD_VAR 0 4
61108: PUSH
61109: LD_INT 1
61111: PLUS
61112: ARRAY
61113: ST_TO_ADDR
61114: GO 61181
61116: LD_INT 3
61118: DOUBLE
61119: EQUAL
61120: IFTRUE 61124
61122: GO 61180
61124: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61125: LD_ADDR_VAR 0 9
61129: PUSH
61130: LD_VAR 0 23
61134: PUSH
61135: LD_VAR 0 24
61139: PUSH
61140: LD_VAR 0 25
61144: PUSH
61145: LD_VAR 0 26
61149: PUSH
61150: LD_VAR 0 27
61154: PUSH
61155: LD_VAR 0 28
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: PUSH
61168: LD_VAR 0 4
61172: PUSH
61173: LD_INT 1
61175: PLUS
61176: ARRAY
61177: ST_TO_ADDR
61178: GO 61181
61180: POP
61181: GO 61736
61183: LD_INT 2
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61197
61189: LD_INT 3
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61197
61195: GO 61253
61197: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61198: LD_ADDR_VAR 0 9
61202: PUSH
61203: LD_VAR 0 29
61207: PUSH
61208: LD_VAR 0 30
61212: PUSH
61213: LD_VAR 0 31
61217: PUSH
61218: LD_VAR 0 32
61222: PUSH
61223: LD_VAR 0 33
61227: PUSH
61228: LD_VAR 0 34
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: PUSH
61241: LD_VAR 0 4
61245: PUSH
61246: LD_INT 1
61248: PLUS
61249: ARRAY
61250: ST_TO_ADDR
61251: GO 61736
61253: LD_INT 16
61255: DOUBLE
61256: EQUAL
61257: IFTRUE 61315
61259: LD_INT 17
61261: DOUBLE
61262: EQUAL
61263: IFTRUE 61315
61265: LD_INT 18
61267: DOUBLE
61268: EQUAL
61269: IFTRUE 61315
61271: LD_INT 19
61273: DOUBLE
61274: EQUAL
61275: IFTRUE 61315
61277: LD_INT 22
61279: DOUBLE
61280: EQUAL
61281: IFTRUE 61315
61283: LD_INT 20
61285: DOUBLE
61286: EQUAL
61287: IFTRUE 61315
61289: LD_INT 21
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61315
61295: LD_INT 23
61297: DOUBLE
61298: EQUAL
61299: IFTRUE 61315
61301: LD_INT 24
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61315
61307: LD_INT 25
61309: DOUBLE
61310: EQUAL
61311: IFTRUE 61315
61313: GO 61371
61315: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61316: LD_ADDR_VAR 0 9
61320: PUSH
61321: LD_VAR 0 35
61325: PUSH
61326: LD_VAR 0 36
61330: PUSH
61331: LD_VAR 0 37
61335: PUSH
61336: LD_VAR 0 38
61340: PUSH
61341: LD_VAR 0 39
61345: PUSH
61346: LD_VAR 0 40
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: PUSH
61359: LD_VAR 0 4
61363: PUSH
61364: LD_INT 1
61366: PLUS
61367: ARRAY
61368: ST_TO_ADDR
61369: GO 61736
61371: LD_INT 6
61373: DOUBLE
61374: EQUAL
61375: IFTRUE 61427
61377: LD_INT 7
61379: DOUBLE
61380: EQUAL
61381: IFTRUE 61427
61383: LD_INT 8
61385: DOUBLE
61386: EQUAL
61387: IFTRUE 61427
61389: LD_INT 13
61391: DOUBLE
61392: EQUAL
61393: IFTRUE 61427
61395: LD_INT 12
61397: DOUBLE
61398: EQUAL
61399: IFTRUE 61427
61401: LD_INT 15
61403: DOUBLE
61404: EQUAL
61405: IFTRUE 61427
61407: LD_INT 11
61409: DOUBLE
61410: EQUAL
61411: IFTRUE 61427
61413: LD_INT 14
61415: DOUBLE
61416: EQUAL
61417: IFTRUE 61427
61419: LD_INT 10
61421: DOUBLE
61422: EQUAL
61423: IFTRUE 61427
61425: GO 61483
61427: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61428: LD_ADDR_VAR 0 9
61432: PUSH
61433: LD_VAR 0 41
61437: PUSH
61438: LD_VAR 0 42
61442: PUSH
61443: LD_VAR 0 43
61447: PUSH
61448: LD_VAR 0 44
61452: PUSH
61453: LD_VAR 0 45
61457: PUSH
61458: LD_VAR 0 46
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: PUSH
61471: LD_VAR 0 4
61475: PUSH
61476: LD_INT 1
61478: PLUS
61479: ARRAY
61480: ST_TO_ADDR
61481: GO 61736
61483: LD_INT 36
61485: DOUBLE
61486: EQUAL
61487: IFTRUE 61491
61489: GO 61547
61491: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61492: LD_ADDR_VAR 0 9
61496: PUSH
61497: LD_VAR 0 47
61501: PUSH
61502: LD_VAR 0 48
61506: PUSH
61507: LD_VAR 0 49
61511: PUSH
61512: LD_VAR 0 50
61516: PUSH
61517: LD_VAR 0 51
61521: PUSH
61522: LD_VAR 0 52
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: PUSH
61535: LD_VAR 0 4
61539: PUSH
61540: LD_INT 1
61542: PLUS
61543: ARRAY
61544: ST_TO_ADDR
61545: GO 61736
61547: LD_INT 4
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61573
61553: LD_INT 5
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61573
61559: LD_INT 34
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61573
61565: LD_INT 37
61567: DOUBLE
61568: EQUAL
61569: IFTRUE 61573
61571: GO 61629
61573: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61574: LD_ADDR_VAR 0 9
61578: PUSH
61579: LD_VAR 0 53
61583: PUSH
61584: LD_VAR 0 54
61588: PUSH
61589: LD_VAR 0 55
61593: PUSH
61594: LD_VAR 0 56
61598: PUSH
61599: LD_VAR 0 57
61603: PUSH
61604: LD_VAR 0 58
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: PUSH
61617: LD_VAR 0 4
61621: PUSH
61622: LD_INT 1
61624: PLUS
61625: ARRAY
61626: ST_TO_ADDR
61627: GO 61736
61629: LD_INT 31
61631: DOUBLE
61632: EQUAL
61633: IFTRUE 61679
61635: LD_INT 32
61637: DOUBLE
61638: EQUAL
61639: IFTRUE 61679
61641: LD_INT 33
61643: DOUBLE
61644: EQUAL
61645: IFTRUE 61679
61647: LD_INT 27
61649: DOUBLE
61650: EQUAL
61651: IFTRUE 61679
61653: LD_INT 26
61655: DOUBLE
61656: EQUAL
61657: IFTRUE 61679
61659: LD_INT 28
61661: DOUBLE
61662: EQUAL
61663: IFTRUE 61679
61665: LD_INT 29
61667: DOUBLE
61668: EQUAL
61669: IFTRUE 61679
61671: LD_INT 30
61673: DOUBLE
61674: EQUAL
61675: IFTRUE 61679
61677: GO 61735
61679: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61680: LD_ADDR_VAR 0 9
61684: PUSH
61685: LD_VAR 0 59
61689: PUSH
61690: LD_VAR 0 60
61694: PUSH
61695: LD_VAR 0 61
61699: PUSH
61700: LD_VAR 0 62
61704: PUSH
61705: LD_VAR 0 63
61709: PUSH
61710: LD_VAR 0 64
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_VAR 0 4
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: ARRAY
61732: ST_TO_ADDR
61733: GO 61736
61735: POP
// temp_list2 = [ ] ;
61736: LD_ADDR_VAR 0 10
61740: PUSH
61741: EMPTY
61742: ST_TO_ADDR
// for i in temp_list do
61743: LD_ADDR_VAR 0 8
61747: PUSH
61748: LD_VAR 0 9
61752: PUSH
61753: FOR_IN
61754: IFFALSE 61806
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61756: LD_ADDR_VAR 0 10
61760: PUSH
61761: LD_VAR 0 10
61765: PUSH
61766: LD_VAR 0 8
61770: PUSH
61771: LD_INT 1
61773: ARRAY
61774: PUSH
61775: LD_VAR 0 2
61779: PLUS
61780: PUSH
61781: LD_VAR 0 8
61785: PUSH
61786: LD_INT 2
61788: ARRAY
61789: PUSH
61790: LD_VAR 0 3
61794: PLUS
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: ADD
61803: ST_TO_ADDR
61804: GO 61753
61806: POP
61807: POP
// result = temp_list2 ;
61808: LD_ADDR_VAR 0 7
61812: PUSH
61813: LD_VAR 0 10
61817: ST_TO_ADDR
// end ;
61818: LD_VAR 0 7
61822: RET
// export function EnemyInRange ( unit , dist ) ; begin
61823: LD_INT 0
61825: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61826: LD_ADDR_VAR 0 3
61830: PUSH
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 255
61840: PPUSH
61841: LD_VAR 0 1
61845: PPUSH
61846: CALL_OW 250
61850: PPUSH
61851: LD_VAR 0 1
61855: PPUSH
61856: CALL_OW 251
61860: PPUSH
61861: LD_VAR 0 2
61865: PPUSH
61866: CALL 35219 0 4
61870: PUSH
61871: LD_INT 4
61873: ARRAY
61874: ST_TO_ADDR
// end ;
61875: LD_VAR 0 3
61879: RET
// export function PlayerSeeMe ( unit ) ; begin
61880: LD_INT 0
61882: PPUSH
// result := See ( your_side , unit ) ;
61883: LD_ADDR_VAR 0 2
61887: PUSH
61888: LD_OWVAR 2
61892: PPUSH
61893: LD_VAR 0 1
61897: PPUSH
61898: CALL_OW 292
61902: ST_TO_ADDR
// end ;
61903: LD_VAR 0 2
61907: RET
// export function ReverseDir ( unit ) ; begin
61908: LD_INT 0
61910: PPUSH
// if not unit then
61911: LD_VAR 0 1
61915: NOT
61916: IFFALSE 61920
// exit ;
61918: GO 61943
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61920: LD_ADDR_VAR 0 2
61924: PUSH
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 254
61934: PUSH
61935: LD_INT 3
61937: PLUS
61938: PUSH
61939: LD_INT 6
61941: MOD
61942: ST_TO_ADDR
// end ;
61943: LD_VAR 0 2
61947: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61948: LD_INT 0
61950: PPUSH
61951: PPUSH
61952: PPUSH
61953: PPUSH
61954: PPUSH
// if not hexes then
61955: LD_VAR 0 2
61959: NOT
61960: IFFALSE 61964
// exit ;
61962: GO 62112
// dist := 9999 ;
61964: LD_ADDR_VAR 0 5
61968: PUSH
61969: LD_INT 9999
61971: ST_TO_ADDR
// for i = 1 to hexes do
61972: LD_ADDR_VAR 0 4
61976: PUSH
61977: DOUBLE
61978: LD_INT 1
61980: DEC
61981: ST_TO_ADDR
61982: LD_VAR 0 2
61986: PUSH
61987: FOR_TO
61988: IFFALSE 62100
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61990: LD_VAR 0 1
61994: PPUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_VAR 0 4
62004: ARRAY
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PPUSH
62010: LD_VAR 0 2
62014: PUSH
62015: LD_VAR 0 4
62019: ARRAY
62020: PUSH
62021: LD_INT 2
62023: ARRAY
62024: PPUSH
62025: CALL_OW 297
62029: PUSH
62030: LD_VAR 0 5
62034: LESS
62035: IFFALSE 62098
// begin hex := hexes [ i ] ;
62037: LD_ADDR_VAR 0 7
62041: PUSH
62042: LD_VAR 0 2
62046: PUSH
62047: LD_VAR 0 4
62051: ARRAY
62052: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62053: LD_ADDR_VAR 0 5
62057: PUSH
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_VAR 0 2
62067: PUSH
62068: LD_VAR 0 4
62072: ARRAY
62073: PUSH
62074: LD_INT 1
62076: ARRAY
62077: PPUSH
62078: LD_VAR 0 2
62082: PUSH
62083: LD_VAR 0 4
62087: ARRAY
62088: PUSH
62089: LD_INT 2
62091: ARRAY
62092: PPUSH
62093: CALL_OW 297
62097: ST_TO_ADDR
// end ; end ;
62098: GO 61987
62100: POP
62101: POP
// result := hex ;
62102: LD_ADDR_VAR 0 3
62106: PUSH
62107: LD_VAR 0 7
62111: ST_TO_ADDR
// end ;
62112: LD_VAR 0 3
62116: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62117: LD_INT 0
62119: PPUSH
62120: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62121: LD_VAR 0 1
62125: NOT
62126: PUSH
62127: LD_VAR 0 1
62131: PUSH
62132: LD_INT 21
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 23
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PPUSH
62156: CALL_OW 69
62160: IN
62161: NOT
62162: OR
62163: IFFALSE 62167
// exit ;
62165: GO 62214
// for i = 1 to 3 do
62167: LD_ADDR_VAR 0 3
62171: PUSH
62172: DOUBLE
62173: LD_INT 1
62175: DEC
62176: ST_TO_ADDR
62177: LD_INT 3
62179: PUSH
62180: FOR_TO
62181: IFFALSE 62212
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL_OW 250
62192: PPUSH
62193: LD_VAR 0 1
62197: PPUSH
62198: CALL_OW 251
62202: PPUSH
62203: LD_INT 1
62205: PPUSH
62206: CALL_OW 453
62210: GO 62180
62212: POP
62213: POP
// end ;
62214: LD_VAR 0 2
62218: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62219: LD_INT 0
62221: PPUSH
62222: PPUSH
62223: PPUSH
62224: PPUSH
62225: PPUSH
62226: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62227: LD_VAR 0 1
62231: NOT
62232: PUSH
62233: LD_VAR 0 2
62237: NOT
62238: OR
62239: PUSH
62240: LD_VAR 0 1
62244: PPUSH
62245: CALL_OW 314
62249: OR
62250: IFFALSE 62254
// exit ;
62252: GO 62695
// x := GetX ( enemy_unit ) ;
62254: LD_ADDR_VAR 0 7
62258: PUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: CALL_OW 250
62268: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62269: LD_ADDR_VAR 0 8
62273: PUSH
62274: LD_VAR 0 2
62278: PPUSH
62279: CALL_OW 251
62283: ST_TO_ADDR
// if not x or not y then
62284: LD_VAR 0 7
62288: NOT
62289: PUSH
62290: LD_VAR 0 8
62294: NOT
62295: OR
62296: IFFALSE 62300
// exit ;
62298: GO 62695
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62300: LD_ADDR_VAR 0 6
62304: PUSH
62305: LD_VAR 0 7
62309: PPUSH
62310: LD_INT 0
62312: PPUSH
62313: LD_INT 4
62315: PPUSH
62316: CALL_OW 272
62320: PUSH
62321: LD_VAR 0 8
62325: PPUSH
62326: LD_INT 0
62328: PPUSH
62329: LD_INT 4
62331: PPUSH
62332: CALL_OW 273
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_VAR 0 7
62345: PPUSH
62346: LD_INT 1
62348: PPUSH
62349: LD_INT 4
62351: PPUSH
62352: CALL_OW 272
62356: PUSH
62357: LD_VAR 0 8
62361: PPUSH
62362: LD_INT 1
62364: PPUSH
62365: LD_INT 4
62367: PPUSH
62368: CALL_OW 273
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_VAR 0 7
62381: PPUSH
62382: LD_INT 2
62384: PPUSH
62385: LD_INT 4
62387: PPUSH
62388: CALL_OW 272
62392: PUSH
62393: LD_VAR 0 8
62397: PPUSH
62398: LD_INT 2
62400: PPUSH
62401: LD_INT 4
62403: PPUSH
62404: CALL_OW 273
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_VAR 0 7
62417: PPUSH
62418: LD_INT 3
62420: PPUSH
62421: LD_INT 4
62423: PPUSH
62424: CALL_OW 272
62428: PUSH
62429: LD_VAR 0 8
62433: PPUSH
62434: LD_INT 3
62436: PPUSH
62437: LD_INT 4
62439: PPUSH
62440: CALL_OW 273
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_VAR 0 7
62453: PPUSH
62454: LD_INT 4
62456: PPUSH
62457: LD_INT 4
62459: PPUSH
62460: CALL_OW 272
62464: PUSH
62465: LD_VAR 0 8
62469: PPUSH
62470: LD_INT 4
62472: PPUSH
62473: LD_INT 4
62475: PPUSH
62476: CALL_OW 273
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_VAR 0 7
62489: PPUSH
62490: LD_INT 5
62492: PPUSH
62493: LD_INT 4
62495: PPUSH
62496: CALL_OW 272
62500: PUSH
62501: LD_VAR 0 8
62505: PPUSH
62506: LD_INT 5
62508: PPUSH
62509: LD_INT 4
62511: PPUSH
62512: CALL_OW 273
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// for i = tmp downto 1 do
62529: LD_ADDR_VAR 0 4
62533: PUSH
62534: DOUBLE
62535: LD_VAR 0 6
62539: INC
62540: ST_TO_ADDR
62541: LD_INT 1
62543: PUSH
62544: FOR_DOWNTO
62545: IFFALSE 62646
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62547: LD_VAR 0 6
62551: PUSH
62552: LD_VAR 0 4
62556: ARRAY
62557: PUSH
62558: LD_INT 1
62560: ARRAY
62561: PPUSH
62562: LD_VAR 0 6
62566: PUSH
62567: LD_VAR 0 4
62571: ARRAY
62572: PUSH
62573: LD_INT 2
62575: ARRAY
62576: PPUSH
62577: CALL_OW 488
62581: NOT
62582: PUSH
62583: LD_VAR 0 6
62587: PUSH
62588: LD_VAR 0 4
62592: ARRAY
62593: PUSH
62594: LD_INT 1
62596: ARRAY
62597: PPUSH
62598: LD_VAR 0 6
62602: PUSH
62603: LD_VAR 0 4
62607: ARRAY
62608: PUSH
62609: LD_INT 2
62611: ARRAY
62612: PPUSH
62613: CALL_OW 428
62617: PUSH
62618: LD_INT 0
62620: NONEQUAL
62621: OR
62622: IFFALSE 62644
// tmp := Delete ( tmp , i ) ;
62624: LD_ADDR_VAR 0 6
62628: PUSH
62629: LD_VAR 0 6
62633: PPUSH
62634: LD_VAR 0 4
62638: PPUSH
62639: CALL_OW 3
62643: ST_TO_ADDR
62644: GO 62544
62646: POP
62647: POP
// j := GetClosestHex ( unit , tmp ) ;
62648: LD_ADDR_VAR 0 5
62652: PUSH
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_VAR 0 6
62662: PPUSH
62663: CALL 61948 0 2
62667: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_VAR 0 5
62677: PUSH
62678: LD_INT 1
62680: ARRAY
62681: PPUSH
62682: LD_VAR 0 5
62686: PUSH
62687: LD_INT 2
62689: ARRAY
62690: PPUSH
62691: CALL_OW 111
// end ;
62695: LD_VAR 0 3
62699: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62700: LD_INT 0
62702: PPUSH
62703: PPUSH
62704: PPUSH
// uc_side = 0 ;
62705: LD_ADDR_OWVAR 20
62709: PUSH
62710: LD_INT 0
62712: ST_TO_ADDR
// uc_nation = 0 ;
62713: LD_ADDR_OWVAR 21
62717: PUSH
62718: LD_INT 0
62720: ST_TO_ADDR
// InitHc_All ( ) ;
62721: CALL_OW 584
// InitVc ;
62725: CALL_OW 20
// if mastodonts then
62729: LD_VAR 0 6
62733: IFFALSE 62800
// for i = 1 to mastodonts do
62735: LD_ADDR_VAR 0 11
62739: PUSH
62740: DOUBLE
62741: LD_INT 1
62743: DEC
62744: ST_TO_ADDR
62745: LD_VAR 0 6
62749: PUSH
62750: FOR_TO
62751: IFFALSE 62798
// begin vc_chassis := 31 ;
62753: LD_ADDR_OWVAR 37
62757: PUSH
62758: LD_INT 31
62760: ST_TO_ADDR
// vc_control := control_rider ;
62761: LD_ADDR_OWVAR 38
62765: PUSH
62766: LD_INT 4
62768: ST_TO_ADDR
// animal := CreateVehicle ;
62769: LD_ADDR_VAR 0 12
62773: PUSH
62774: CALL_OW 45
62778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62779: LD_VAR 0 12
62783: PPUSH
62784: LD_VAR 0 8
62788: PPUSH
62789: LD_INT 0
62791: PPUSH
62792: CALL 64935 0 3
// end ;
62796: GO 62750
62798: POP
62799: POP
// if horses then
62800: LD_VAR 0 5
62804: IFFALSE 62871
// for i = 1 to horses do
62806: LD_ADDR_VAR 0 11
62810: PUSH
62811: DOUBLE
62812: LD_INT 1
62814: DEC
62815: ST_TO_ADDR
62816: LD_VAR 0 5
62820: PUSH
62821: FOR_TO
62822: IFFALSE 62869
// begin hc_class := 21 ;
62824: LD_ADDR_OWVAR 28
62828: PUSH
62829: LD_INT 21
62831: ST_TO_ADDR
// hc_gallery :=  ;
62832: LD_ADDR_OWVAR 33
62836: PUSH
62837: LD_STRING 
62839: ST_TO_ADDR
// animal := CreateHuman ;
62840: LD_ADDR_VAR 0 12
62844: PUSH
62845: CALL_OW 44
62849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62850: LD_VAR 0 12
62854: PPUSH
62855: LD_VAR 0 8
62859: PPUSH
62860: LD_INT 0
62862: PPUSH
62863: CALL 64935 0 3
// end ;
62867: GO 62821
62869: POP
62870: POP
// if birds then
62871: LD_VAR 0 1
62875: IFFALSE 62942
// for i = 1 to birds do
62877: LD_ADDR_VAR 0 11
62881: PUSH
62882: DOUBLE
62883: LD_INT 1
62885: DEC
62886: ST_TO_ADDR
62887: LD_VAR 0 1
62891: PUSH
62892: FOR_TO
62893: IFFALSE 62940
// begin hc_class = 18 ;
62895: LD_ADDR_OWVAR 28
62899: PUSH
62900: LD_INT 18
62902: ST_TO_ADDR
// hc_gallery =  ;
62903: LD_ADDR_OWVAR 33
62907: PUSH
62908: LD_STRING 
62910: ST_TO_ADDR
// animal := CreateHuman ;
62911: LD_ADDR_VAR 0 12
62915: PUSH
62916: CALL_OW 44
62920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62921: LD_VAR 0 12
62925: PPUSH
62926: LD_VAR 0 8
62930: PPUSH
62931: LD_INT 0
62933: PPUSH
62934: CALL 64935 0 3
// end ;
62938: GO 62892
62940: POP
62941: POP
// if tigers then
62942: LD_VAR 0 2
62946: IFFALSE 63030
// for i = 1 to tigers do
62948: LD_ADDR_VAR 0 11
62952: PUSH
62953: DOUBLE
62954: LD_INT 1
62956: DEC
62957: ST_TO_ADDR
62958: LD_VAR 0 2
62962: PUSH
62963: FOR_TO
62964: IFFALSE 63028
// begin hc_class = class_tiger ;
62966: LD_ADDR_OWVAR 28
62970: PUSH
62971: LD_INT 14
62973: ST_TO_ADDR
// hc_gallery =  ;
62974: LD_ADDR_OWVAR 33
62978: PUSH
62979: LD_STRING 
62981: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62982: LD_ADDR_OWVAR 35
62986: PUSH
62987: LD_INT 7
62989: NEG
62990: PPUSH
62991: LD_INT 7
62993: PPUSH
62994: CALL_OW 12
62998: ST_TO_ADDR
// animal := CreateHuman ;
62999: LD_ADDR_VAR 0 12
63003: PUSH
63004: CALL_OW 44
63008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63009: LD_VAR 0 12
63013: PPUSH
63014: LD_VAR 0 8
63018: PPUSH
63019: LD_INT 0
63021: PPUSH
63022: CALL 64935 0 3
// end ;
63026: GO 62963
63028: POP
63029: POP
// if apemans then
63030: LD_VAR 0 3
63034: IFFALSE 63157
// for i = 1 to apemans do
63036: LD_ADDR_VAR 0 11
63040: PUSH
63041: DOUBLE
63042: LD_INT 1
63044: DEC
63045: ST_TO_ADDR
63046: LD_VAR 0 3
63050: PUSH
63051: FOR_TO
63052: IFFALSE 63155
// begin hc_class = class_apeman ;
63054: LD_ADDR_OWVAR 28
63058: PUSH
63059: LD_INT 12
63061: ST_TO_ADDR
// hc_gallery =  ;
63062: LD_ADDR_OWVAR 33
63066: PUSH
63067: LD_STRING 
63069: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63070: LD_ADDR_OWVAR 35
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PPUSH
63079: LD_INT 2
63081: PPUSH
63082: CALL_OW 12
63086: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63087: LD_ADDR_OWVAR 31
63091: PUSH
63092: LD_INT 1
63094: PPUSH
63095: LD_INT 3
63097: PPUSH
63098: CALL_OW 12
63102: PUSH
63103: LD_INT 1
63105: PPUSH
63106: LD_INT 3
63108: PPUSH
63109: CALL_OW 12
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// animal := CreateHuman ;
63126: LD_ADDR_VAR 0 12
63130: PUSH
63131: CALL_OW 44
63135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63136: LD_VAR 0 12
63140: PPUSH
63141: LD_VAR 0 8
63145: PPUSH
63146: LD_INT 0
63148: PPUSH
63149: CALL 64935 0 3
// end ;
63153: GO 63051
63155: POP
63156: POP
// if enchidnas then
63157: LD_VAR 0 4
63161: IFFALSE 63228
// for i = 1 to enchidnas do
63163: LD_ADDR_VAR 0 11
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_VAR 0 4
63177: PUSH
63178: FOR_TO
63179: IFFALSE 63226
// begin hc_class = 13 ;
63181: LD_ADDR_OWVAR 28
63185: PUSH
63186: LD_INT 13
63188: ST_TO_ADDR
// hc_gallery =  ;
63189: LD_ADDR_OWVAR 33
63193: PUSH
63194: LD_STRING 
63196: ST_TO_ADDR
// animal := CreateHuman ;
63197: LD_ADDR_VAR 0 12
63201: PUSH
63202: CALL_OW 44
63206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63207: LD_VAR 0 12
63211: PPUSH
63212: LD_VAR 0 8
63216: PPUSH
63217: LD_INT 0
63219: PPUSH
63220: CALL 64935 0 3
// end ;
63224: GO 63178
63226: POP
63227: POP
// if fishes then
63228: LD_VAR 0 7
63232: IFFALSE 63299
// for i = 1 to fishes do
63234: LD_ADDR_VAR 0 11
63238: PUSH
63239: DOUBLE
63240: LD_INT 1
63242: DEC
63243: ST_TO_ADDR
63244: LD_VAR 0 7
63248: PUSH
63249: FOR_TO
63250: IFFALSE 63297
// begin hc_class = 20 ;
63252: LD_ADDR_OWVAR 28
63256: PUSH
63257: LD_INT 20
63259: ST_TO_ADDR
// hc_gallery =  ;
63260: LD_ADDR_OWVAR 33
63264: PUSH
63265: LD_STRING 
63267: ST_TO_ADDR
// animal := CreateHuman ;
63268: LD_ADDR_VAR 0 12
63272: PUSH
63273: CALL_OW 44
63277: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63278: LD_VAR 0 12
63282: PPUSH
63283: LD_VAR 0 9
63287: PPUSH
63288: LD_INT 0
63290: PPUSH
63291: CALL 64935 0 3
// end ;
63295: GO 63249
63297: POP
63298: POP
// end ;
63299: LD_VAR 0 10
63303: RET
// export function WantHeal ( sci , unit ) ; begin
63304: LD_INT 0
63306: PPUSH
// if GetTaskList ( sci ) > 0 then
63307: LD_VAR 0 1
63311: PPUSH
63312: CALL_OW 437
63316: PUSH
63317: LD_INT 0
63319: GREATER
63320: IFFALSE 63390
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63322: LD_VAR 0 1
63326: PPUSH
63327: CALL_OW 437
63331: PUSH
63332: LD_INT 1
63334: ARRAY
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PUSH
63340: LD_STRING l
63342: EQUAL
63343: PUSH
63344: LD_VAR 0 1
63348: PPUSH
63349: CALL_OW 437
63353: PUSH
63354: LD_INT 1
63356: ARRAY
63357: PUSH
63358: LD_INT 4
63360: ARRAY
63361: PUSH
63362: LD_VAR 0 2
63366: EQUAL
63367: AND
63368: IFFALSE 63380
// result := true else
63370: LD_ADDR_VAR 0 3
63374: PUSH
63375: LD_INT 1
63377: ST_TO_ADDR
63378: GO 63388
// result := false ;
63380: LD_ADDR_VAR 0 3
63384: PUSH
63385: LD_INT 0
63387: ST_TO_ADDR
// end else
63388: GO 63398
// result := false ;
63390: LD_ADDR_VAR 0 3
63394: PUSH
63395: LD_INT 0
63397: ST_TO_ADDR
// end ;
63398: LD_VAR 0 3
63402: RET
// export function HealTarget ( sci ) ; begin
63403: LD_INT 0
63405: PPUSH
// if not sci then
63406: LD_VAR 0 1
63410: NOT
63411: IFFALSE 63415
// exit ;
63413: GO 63480
// result := 0 ;
63415: LD_ADDR_VAR 0 2
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
// if GetTaskList ( sci ) then
63423: LD_VAR 0 1
63427: PPUSH
63428: CALL_OW 437
63432: IFFALSE 63480
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63434: LD_VAR 0 1
63438: PPUSH
63439: CALL_OW 437
63443: PUSH
63444: LD_INT 1
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PUSH
63452: LD_STRING l
63454: EQUAL
63455: IFFALSE 63480
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63457: LD_ADDR_VAR 0 2
63461: PUSH
63462: LD_VAR 0 1
63466: PPUSH
63467: CALL_OW 437
63471: PUSH
63472: LD_INT 1
63474: ARRAY
63475: PUSH
63476: LD_INT 4
63478: ARRAY
63479: ST_TO_ADDR
// end ;
63480: LD_VAR 0 2
63484: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63485: LD_INT 0
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
// if not base_units then
63491: LD_VAR 0 1
63495: NOT
63496: IFFALSE 63500
// exit ;
63498: GO 63587
// result := false ;
63500: LD_ADDR_VAR 0 2
63504: PUSH
63505: LD_INT 0
63507: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63508: LD_ADDR_VAR 0 5
63512: PUSH
63513: LD_VAR 0 1
63517: PPUSH
63518: LD_INT 21
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PPUSH
63528: CALL_OW 72
63532: ST_TO_ADDR
// if not tmp then
63533: LD_VAR 0 5
63537: NOT
63538: IFFALSE 63542
// exit ;
63540: GO 63587
// for i in tmp do
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_VAR 0 5
63551: PUSH
63552: FOR_IN
63553: IFFALSE 63585
// begin result := EnemyInRange ( i , 22 ) ;
63555: LD_ADDR_VAR 0 2
63559: PUSH
63560: LD_VAR 0 3
63564: PPUSH
63565: LD_INT 22
63567: PPUSH
63568: CALL 61823 0 2
63572: ST_TO_ADDR
// if result then
63573: LD_VAR 0 2
63577: IFFALSE 63583
// exit ;
63579: POP
63580: POP
63581: GO 63587
// end ;
63583: GO 63552
63585: POP
63586: POP
// end ;
63587: LD_VAR 0 2
63591: RET
// export function FilterByTag ( units , tag ) ; begin
63592: LD_INT 0
63594: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63595: LD_ADDR_VAR 0 3
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_INT 120
63607: PUSH
63608: LD_VAR 0 2
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PPUSH
63617: CALL_OW 72
63621: ST_TO_ADDR
// end ;
63622: LD_VAR 0 3
63626: RET
// export function IsDriver ( un ) ; begin
63627: LD_INT 0
63629: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63630: LD_ADDR_VAR 0 2
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_INT 55
63642: PUSH
63643: EMPTY
63644: LIST
63645: PPUSH
63646: CALL_OW 69
63650: IN
63651: ST_TO_ADDR
// end ;
63652: LD_VAR 0 2
63656: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63657: LD_INT 0
63659: PPUSH
63660: PPUSH
// list := [ ] ;
63661: LD_ADDR_VAR 0 5
63665: PUSH
63666: EMPTY
63667: ST_TO_ADDR
// case d of 0 :
63668: LD_VAR 0 3
63672: PUSH
63673: LD_INT 0
63675: DOUBLE
63676: EQUAL
63677: IFTRUE 63681
63679: GO 63814
63681: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63682: LD_ADDR_VAR 0 5
63686: PUSH
63687: LD_VAR 0 1
63691: PUSH
63692: LD_INT 4
63694: MINUS
63695: PUSH
63696: LD_VAR 0 2
63700: PUSH
63701: LD_INT 4
63703: MINUS
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: LIST
63712: PUSH
63713: LD_VAR 0 1
63717: PUSH
63718: LD_INT 3
63720: MINUS
63721: PUSH
63722: LD_VAR 0 2
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: PUSH
63735: LD_VAR 0 1
63739: PUSH
63740: LD_INT 4
63742: PLUS
63743: PUSH
63744: LD_VAR 0 2
63748: PUSH
63749: LD_INT 4
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: PUSH
63757: LD_VAR 0 1
63761: PUSH
63762: LD_INT 3
63764: PLUS
63765: PUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_INT 3
63773: PLUS
63774: PUSH
63775: LD_INT 5
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_VAR 0 2
63792: PUSH
63793: LD_INT 4
63795: PLUS
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: LIST
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// end ; 1 :
63812: GO 64512
63814: LD_INT 1
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63822
63820: GO 63955
63822: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63823: LD_ADDR_VAR 0 5
63827: PUSH
63828: LD_VAR 0 1
63832: PUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 4
63840: MINUS
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 3
63857: MINUS
63858: PUSH
63859: LD_VAR 0 2
63863: PUSH
63864: LD_INT 3
63866: MINUS
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_INT 4
63883: MINUS
63884: PUSH
63885: LD_VAR 0 2
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_VAR 0 1
63902: PUSH
63903: LD_VAR 0 2
63907: PUSH
63908: LD_INT 3
63910: PLUS
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: PUSH
63920: LD_VAR 0 1
63924: PUSH
63925: LD_INT 4
63927: PLUS
63928: PUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_INT 4
63936: PLUS
63937: PUSH
63938: LD_INT 5
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: ST_TO_ADDR
// end ; 2 :
63953: GO 64512
63955: LD_INT 2
63957: DOUBLE
63958: EQUAL
63959: IFTRUE 63963
63961: GO 64092
63963: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_VAR 0 1
63973: PUSH
63974: LD_VAR 0 2
63978: PUSH
63979: LD_INT 3
63981: MINUS
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: PUSH
63991: LD_VAR 0 1
63995: PUSH
63996: LD_INT 4
63998: PLUS
63999: PUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: LD_VAR 0 1
64017: PUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_INT 4
64025: PLUS
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 3
64042: MINUS
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: PUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 4
64064: MINUS
64065: PUSH
64066: LD_VAR 0 2
64070: PUSH
64071: LD_INT 4
64073: MINUS
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// end ; 3 :
64090: GO 64512
64092: LD_INT 3
64094: DOUBLE
64095: EQUAL
64096: IFTRUE 64100
64098: GO 64233
64100: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64101: LD_ADDR_VAR 0 5
64105: PUSH
64106: LD_VAR 0 1
64110: PUSH
64111: LD_INT 3
64113: PLUS
64114: PUSH
64115: LD_VAR 0 2
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: PUSH
64128: LD_VAR 0 1
64132: PUSH
64133: LD_INT 4
64135: PLUS
64136: PUSH
64137: LD_VAR 0 2
64141: PUSH
64142: LD_INT 4
64144: PLUS
64145: PUSH
64146: LD_INT 5
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_INT 4
64161: MINUS
64162: PUSH
64163: LD_VAR 0 2
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_INT 4
64188: MINUS
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: LD_VAR 0 1
64202: PUSH
64203: LD_INT 3
64205: MINUS
64206: PUSH
64207: LD_VAR 0 2
64211: PUSH
64212: LD_INT 3
64214: MINUS
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// end ; 4 :
64231: GO 64512
64233: LD_INT 4
64235: DOUBLE
64236: EQUAL
64237: IFTRUE 64241
64239: GO 64374
64241: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64242: LD_ADDR_VAR 0 5
64246: PUSH
64247: LD_VAR 0 1
64251: PUSH
64252: LD_VAR 0 2
64256: PUSH
64257: LD_INT 4
64259: PLUS
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 3
64276: PLUS
64277: PUSH
64278: LD_VAR 0 2
64282: PUSH
64283: LD_INT 3
64285: PLUS
64286: PUSH
64287: LD_INT 5
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_INT 4
64302: PLUS
64303: PUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 4
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 3
64329: MINUS
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 1
64343: PUSH
64344: LD_INT 4
64346: MINUS
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: MINUS
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: ST_TO_ADDR
// end ; 5 :
64372: GO 64512
64374: LD_INT 5
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64382
64380: GO 64511
64382: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64383: LD_ADDR_VAR 0 5
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_INT 4
64395: MINUS
64396: PUSH
64397: LD_VAR 0 2
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: LIST
64409: PUSH
64410: LD_VAR 0 1
64414: PUSH
64415: LD_VAR 0 2
64419: PUSH
64420: LD_INT 4
64422: MINUS
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: LD_INT 4
64439: PLUS
64440: PUSH
64441: LD_VAR 0 2
64445: PUSH
64446: LD_INT 4
64448: PLUS
64449: PUSH
64450: LD_INT 5
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 3
64465: PLUS
64466: PUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 4
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: LD_INT 3
64492: PLUS
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: ST_TO_ADDR
// end ; end ;
64509: GO 64512
64511: POP
// result := list ;
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: LD_VAR 0 5
64521: ST_TO_ADDR
// end ;
64522: LD_VAR 0 4
64526: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64527: LD_INT 0
64529: PPUSH
64530: PPUSH
64531: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64532: LD_VAR 0 1
64536: NOT
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: IN
64561: NOT
64562: OR
64563: IFFALSE 64567
// exit ;
64565: GO 64659
// tmp := [ ] ;
64567: LD_ADDR_VAR 0 5
64571: PUSH
64572: EMPTY
64573: ST_TO_ADDR
// for i in units do
64574: LD_ADDR_VAR 0 4
64578: PUSH
64579: LD_VAR 0 1
64583: PUSH
64584: FOR_IN
64585: IFFALSE 64628
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64587: LD_ADDR_VAR 0 5
64591: PUSH
64592: LD_VAR 0 5
64596: PPUSH
64597: LD_VAR 0 5
64601: PUSH
64602: LD_INT 1
64604: PLUS
64605: PPUSH
64606: LD_VAR 0 4
64610: PPUSH
64611: LD_VAR 0 2
64615: PPUSH
64616: CALL_OW 259
64620: PPUSH
64621: CALL_OW 2
64625: ST_TO_ADDR
64626: GO 64584
64628: POP
64629: POP
// if not tmp then
64630: LD_VAR 0 5
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 64659
// result := SortListByListDesc ( units , tmp ) ;
64639: LD_ADDR_VAR 0 3
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 5
64653: PPUSH
64654: CALL_OW 77
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 3
64663: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64664: LD_INT 0
64666: PPUSH
64667: PPUSH
64668: PPUSH
// result := false ;
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// x := GetX ( building ) ;
64677: LD_ADDR_VAR 0 4
64681: PUSH
64682: LD_VAR 0 2
64686: PPUSH
64687: CALL_OW 250
64691: ST_TO_ADDR
// y := GetY ( building ) ;
64692: LD_ADDR_VAR 0 5
64696: PUSH
64697: LD_VAR 0 2
64701: PPUSH
64702: CALL_OW 251
64706: ST_TO_ADDR
// if not building or not x or not y then
64707: LD_VAR 0 2
64711: NOT
64712: PUSH
64713: LD_VAR 0 4
64717: NOT
64718: OR
64719: PUSH
64720: LD_VAR 0 5
64724: NOT
64725: OR
64726: IFFALSE 64730
// exit ;
64728: GO 64822
// if GetTaskList ( unit ) then
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 437
64739: IFFALSE 64822
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64741: LD_STRING e
64743: PUSH
64744: LD_VAR 0 1
64748: PPUSH
64749: CALL_OW 437
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: EQUAL
64762: PUSH
64763: LD_VAR 0 4
64767: PUSH
64768: LD_VAR 0 1
64772: PPUSH
64773: CALL_OW 437
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: EQUAL
64786: AND
64787: PUSH
64788: LD_VAR 0 5
64792: PUSH
64793: LD_VAR 0 1
64797: PPUSH
64798: CALL_OW 437
64802: PUSH
64803: LD_INT 1
64805: ARRAY
64806: PUSH
64807: LD_INT 3
64809: ARRAY
64810: EQUAL
64811: AND
64812: IFFALSE 64822
// result := true end ;
64814: LD_ADDR_VAR 0 3
64818: PUSH
64819: LD_INT 1
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 3
64826: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64827: LD_INT 0
64829: PPUSH
// result := false ;
64830: LD_ADDR_VAR 0 4
64834: PUSH
64835: LD_INT 0
64837: ST_TO_ADDR
// if GetTaskList ( unit ) then
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 437
64847: IFFALSE 64930
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64849: LD_STRING M
64851: PUSH
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 437
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PUSH
64866: LD_INT 1
64868: ARRAY
64869: EQUAL
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 437
64885: PUSH
64886: LD_INT 1
64888: ARRAY
64889: PUSH
64890: LD_INT 2
64892: ARRAY
64893: EQUAL
64894: AND
64895: PUSH
64896: LD_VAR 0 3
64900: PUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: CALL_OW 437
64910: PUSH
64911: LD_INT 1
64913: ARRAY
64914: PUSH
64915: LD_INT 3
64917: ARRAY
64918: EQUAL
64919: AND
64920: IFFALSE 64930
// result := true ;
64922: LD_ADDR_VAR 0 4
64926: PUSH
64927: LD_INT 1
64929: ST_TO_ADDR
// end ; end ;
64930: LD_VAR 0 4
64934: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64935: LD_INT 0
64937: PPUSH
64938: PPUSH
64939: PPUSH
64940: PPUSH
// if not unit or not area then
64941: LD_VAR 0 1
64945: NOT
64946: PUSH
64947: LD_VAR 0 2
64951: NOT
64952: OR
64953: IFFALSE 64957
// exit ;
64955: GO 65121
// tmp := AreaToList ( area , i ) ;
64957: LD_ADDR_VAR 0 6
64961: PUSH
64962: LD_VAR 0 2
64966: PPUSH
64967: LD_VAR 0 5
64971: PPUSH
64972: CALL_OW 517
64976: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64977: LD_ADDR_VAR 0 5
64981: PUSH
64982: DOUBLE
64983: LD_INT 1
64985: DEC
64986: ST_TO_ADDR
64987: LD_VAR 0 6
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65119
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64999: LD_ADDR_VAR 0 7
65003: PUSH
65004: LD_VAR 0 6
65008: PUSH
65009: LD_INT 1
65011: ARRAY
65012: PUSH
65013: LD_VAR 0 5
65017: ARRAY
65018: PUSH
65019: LD_VAR 0 6
65023: PUSH
65024: LD_INT 2
65026: ARRAY
65027: PUSH
65028: LD_VAR 0 5
65032: ARRAY
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65038: LD_VAR 0 7
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PPUSH
65047: LD_VAR 0 7
65051: PUSH
65052: LD_INT 2
65054: ARRAY
65055: PPUSH
65056: CALL_OW 428
65060: PUSH
65061: LD_INT 0
65063: EQUAL
65064: IFFALSE 65117
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65066: LD_VAR 0 1
65070: PPUSH
65071: LD_VAR 0 7
65075: PUSH
65076: LD_INT 1
65078: ARRAY
65079: PPUSH
65080: LD_VAR 0 7
65084: PUSH
65085: LD_INT 2
65087: ARRAY
65088: PPUSH
65089: LD_VAR 0 3
65093: PPUSH
65094: CALL_OW 48
// result := IsPlaced ( unit ) ;
65098: LD_ADDR_VAR 0 4
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 305
65112: ST_TO_ADDR
// exit ;
65113: POP
65114: POP
65115: GO 65121
// end ; end ;
65117: GO 64996
65119: POP
65120: POP
// end ;
65121: LD_VAR 0 4
65125: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65126: LD_INT 0
65128: PPUSH
65129: PPUSH
65130: PPUSH
// if not side or side > 8 then
65131: LD_VAR 0 1
65135: NOT
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 8
65144: GREATER
65145: OR
65146: IFFALSE 65150
// exit ;
65148: GO 65337
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65150: LD_ADDR_VAR 0 4
65154: PUSH
65155: LD_INT 22
65157: PUSH
65158: LD_VAR 0 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 21
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PPUSH
65181: CALL_OW 69
65185: ST_TO_ADDR
// if not tmp then
65186: LD_VAR 0 4
65190: NOT
65191: IFFALSE 65195
// exit ;
65193: GO 65337
// enable_addtolog := true ;
65195: LD_ADDR_OWVAR 81
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// AddToLog ( [ ) ;
65203: LD_STRING [
65205: PPUSH
65206: CALL_OW 561
// for i in tmp do
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 4
65219: PUSH
65220: FOR_IN
65221: IFFALSE 65328
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65223: LD_STRING [
65225: PUSH
65226: LD_VAR 0 3
65230: PPUSH
65231: CALL_OW 266
65235: STR
65236: PUSH
65237: LD_STRING , 
65239: STR
65240: PUSH
65241: LD_VAR 0 3
65245: PPUSH
65246: CALL_OW 250
65250: STR
65251: PUSH
65252: LD_STRING , 
65254: STR
65255: PUSH
65256: LD_VAR 0 3
65260: PPUSH
65261: CALL_OW 251
65265: STR
65266: PUSH
65267: LD_STRING , 
65269: STR
65270: PUSH
65271: LD_VAR 0 3
65275: PPUSH
65276: CALL_OW 254
65280: STR
65281: PUSH
65282: LD_STRING , 
65284: STR
65285: PUSH
65286: LD_VAR 0 3
65290: PPUSH
65291: LD_INT 1
65293: PPUSH
65294: CALL_OW 268
65298: STR
65299: PUSH
65300: LD_STRING , 
65302: STR
65303: PUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: LD_INT 2
65311: PPUSH
65312: CALL_OW 268
65316: STR
65317: PUSH
65318: LD_STRING ],
65320: STR
65321: PPUSH
65322: CALL_OW 561
// end ;
65326: GO 65220
65328: POP
65329: POP
// AddToLog ( ]; ) ;
65330: LD_STRING ];
65332: PPUSH
65333: CALL_OW 561
// end ;
65337: LD_VAR 0 2
65341: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65342: LD_INT 0
65344: PPUSH
65345: PPUSH
65346: PPUSH
65347: PPUSH
65348: PPUSH
// if not area or not rate or not max then
65349: LD_VAR 0 1
65353: NOT
65354: PUSH
65355: LD_VAR 0 2
65359: NOT
65360: OR
65361: PUSH
65362: LD_VAR 0 4
65366: NOT
65367: OR
65368: IFFALSE 65372
// exit ;
65370: GO 65561
// while 1 do
65372: LD_INT 1
65374: IFFALSE 65561
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65376: LD_ADDR_VAR 0 9
65380: PUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: LD_INT 1
65388: PPUSH
65389: CALL_OW 287
65393: PUSH
65394: LD_INT 10
65396: MUL
65397: ST_TO_ADDR
// r := rate / 10 ;
65398: LD_ADDR_VAR 0 7
65402: PUSH
65403: LD_VAR 0 2
65407: PUSH
65408: LD_INT 10
65410: DIVREAL
65411: ST_TO_ADDR
// time := 1 1$00 ;
65412: LD_ADDR_VAR 0 8
65416: PUSH
65417: LD_INT 2100
65419: ST_TO_ADDR
// if amount < min then
65420: LD_VAR 0 9
65424: PUSH
65425: LD_VAR 0 3
65429: LESS
65430: IFFALSE 65448
// r := r * 2 else
65432: LD_ADDR_VAR 0 7
65436: PUSH
65437: LD_VAR 0 7
65441: PUSH
65442: LD_INT 2
65444: MUL
65445: ST_TO_ADDR
65446: GO 65474
// if amount > max then
65448: LD_VAR 0 9
65452: PUSH
65453: LD_VAR 0 4
65457: GREATER
65458: IFFALSE 65474
// r := r / 2 ;
65460: LD_ADDR_VAR 0 7
65464: PUSH
65465: LD_VAR 0 7
65469: PUSH
65470: LD_INT 2
65472: DIVREAL
65473: ST_TO_ADDR
// time := time / r ;
65474: LD_ADDR_VAR 0 8
65478: PUSH
65479: LD_VAR 0 8
65483: PUSH
65484: LD_VAR 0 7
65488: DIVREAL
65489: ST_TO_ADDR
// if time < 0 then
65490: LD_VAR 0 8
65494: PUSH
65495: LD_INT 0
65497: LESS
65498: IFFALSE 65515
// time := time * - 1 ;
65500: LD_ADDR_VAR 0 8
65504: PUSH
65505: LD_VAR 0 8
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: MUL
65514: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65515: LD_VAR 0 8
65519: PUSH
65520: LD_INT 35
65522: PPUSH
65523: LD_INT 875
65525: PPUSH
65526: CALL_OW 12
65530: PLUS
65531: PPUSH
65532: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65536: LD_INT 1
65538: PPUSH
65539: LD_INT 5
65541: PPUSH
65542: CALL_OW 12
65546: PPUSH
65547: LD_VAR 0 1
65551: PPUSH
65552: LD_INT 1
65554: PPUSH
65555: CALL_OW 55
// end ;
65559: GO 65372
// end ;
65561: LD_VAR 0 5
65565: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65566: LD_INT 0
65568: PPUSH
65569: PPUSH
65570: PPUSH
65571: PPUSH
65572: PPUSH
65573: PPUSH
65574: PPUSH
65575: PPUSH
// if not turrets or not factories then
65576: LD_VAR 0 1
65580: NOT
65581: PUSH
65582: LD_VAR 0 2
65586: NOT
65587: OR
65588: IFFALSE 65592
// exit ;
65590: GO 65899
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65592: LD_ADDR_VAR 0 10
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: LD_INT 6
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 24
65634: PUSH
65635: LD_INT 25
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 23
65644: PUSH
65645: LD_INT 27
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 42
65658: PUSH
65659: LD_INT 43
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 44
65668: PUSH
65669: LD_INT 46
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 45
65678: PUSH
65679: LD_INT 47
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: LIST
65695: ST_TO_ADDR
// result := [ ] ;
65696: LD_ADDR_VAR 0 3
65700: PUSH
65701: EMPTY
65702: ST_TO_ADDR
// for i in turrets do
65703: LD_ADDR_VAR 0 4
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: FOR_IN
65714: IFFALSE 65897
// begin nat := GetNation ( i ) ;
65716: LD_ADDR_VAR 0 7
65720: PUSH
65721: LD_VAR 0 4
65725: PPUSH
65726: CALL_OW 248
65730: ST_TO_ADDR
// weapon := 0 ;
65731: LD_ADDR_VAR 0 8
65735: PUSH
65736: LD_INT 0
65738: ST_TO_ADDR
// if not nat then
65739: LD_VAR 0 7
65743: NOT
65744: IFFALSE 65748
// continue ;
65746: GO 65713
// for j in list [ nat ] do
65748: LD_ADDR_VAR 0 5
65752: PUSH
65753: LD_VAR 0 10
65757: PUSH
65758: LD_VAR 0 7
65762: ARRAY
65763: PUSH
65764: FOR_IN
65765: IFFALSE 65806
// if GetBWeapon ( i ) = j [ 1 ] then
65767: LD_VAR 0 4
65771: PPUSH
65772: CALL_OW 269
65776: PUSH
65777: LD_VAR 0 5
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: EQUAL
65786: IFFALSE 65804
// begin weapon := j [ 2 ] ;
65788: LD_ADDR_VAR 0 8
65792: PUSH
65793: LD_VAR 0 5
65797: PUSH
65798: LD_INT 2
65800: ARRAY
65801: ST_TO_ADDR
// break ;
65802: GO 65806
// end ;
65804: GO 65764
65806: POP
65807: POP
// if not weapon then
65808: LD_VAR 0 8
65812: NOT
65813: IFFALSE 65817
// continue ;
65815: GO 65713
// for k in factories do
65817: LD_ADDR_VAR 0 6
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: FOR_IN
65828: IFFALSE 65893
// begin weapons := AvailableWeaponList ( k ) ;
65830: LD_ADDR_VAR 0 9
65834: PUSH
65835: LD_VAR 0 6
65839: PPUSH
65840: CALL_OW 478
65844: ST_TO_ADDR
// if not weapons then
65845: LD_VAR 0 9
65849: NOT
65850: IFFALSE 65854
// continue ;
65852: GO 65827
// if weapon in weapons then
65854: LD_VAR 0 8
65858: PUSH
65859: LD_VAR 0 9
65863: IN
65864: IFFALSE 65891
// begin result := [ i , weapon ] ;
65866: LD_ADDR_VAR 0 3
65870: PUSH
65871: LD_VAR 0 4
65875: PUSH
65876: LD_VAR 0 8
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: ST_TO_ADDR
// exit ;
65885: POP
65886: POP
65887: POP
65888: POP
65889: GO 65899
// end ; end ;
65891: GO 65827
65893: POP
65894: POP
// end ;
65895: GO 65713
65897: POP
65898: POP
// end ;
65899: LD_VAR 0 3
65903: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65904: LD_INT 0
65906: PPUSH
// if not side or side > 8 then
65907: LD_VAR 0 3
65911: NOT
65912: PUSH
65913: LD_VAR 0 3
65917: PUSH
65918: LD_INT 8
65920: GREATER
65921: OR
65922: IFFALSE 65926
// exit ;
65924: GO 65985
// if not range then
65926: LD_VAR 0 4
65930: NOT
65931: IFFALSE 65942
// range := - 12 ;
65933: LD_ADDR_VAR 0 4
65937: PUSH
65938: LD_INT 12
65940: NEG
65941: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65942: LD_VAR 0 1
65946: PPUSH
65947: LD_VAR 0 2
65951: PPUSH
65952: LD_VAR 0 3
65956: PPUSH
65957: LD_VAR 0 4
65961: PPUSH
65962: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_VAR 0 2
65975: PPUSH
65976: LD_VAR 0 3
65980: PPUSH
65981: CALL_OW 331
// end ;
65985: LD_VAR 0 5
65989: RET
// export function Video ( mode ) ; begin
65990: LD_INT 0
65992: PPUSH
// ingame_video = mode ;
65993: LD_ADDR_OWVAR 52
65997: PUSH
65998: LD_VAR 0 1
66002: ST_TO_ADDR
// interface_hidden = mode ;
66003: LD_ADDR_OWVAR 54
66007: PUSH
66008: LD_VAR 0 1
66012: ST_TO_ADDR
// end ;
66013: LD_VAR 0 2
66017: RET
// export function Join ( array , element ) ; begin
66018: LD_INT 0
66020: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66021: LD_ADDR_VAR 0 3
66025: PUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: LD_VAR 0 1
66035: PUSH
66036: LD_INT 1
66038: PLUS
66039: PPUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: CALL_OW 1
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 3
66054: RET
// export function JoinUnion ( array , element ) ; begin
66055: LD_INT 0
66057: PPUSH
// result := array union element ;
66058: LD_ADDR_VAR 0 3
66062: PUSH
66063: LD_VAR 0 1
66067: PUSH
66068: LD_VAR 0 2
66072: UNION
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 3
66078: RET
// export function GetBehemoths ( side ) ; begin
66079: LD_INT 0
66081: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66082: LD_ADDR_VAR 0 2
66086: PUSH
66087: LD_INT 22
66089: PUSH
66090: LD_VAR 0 1
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 31
66101: PUSH
66102: LD_INT 25
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PPUSH
66113: CALL_OW 69
66117: ST_TO_ADDR
// end ;
66118: LD_VAR 0 2
66122: RET
// export function Shuffle ( array ) ; var i , index ; begin
66123: LD_INT 0
66125: PPUSH
66126: PPUSH
66127: PPUSH
// result := [ ] ;
66128: LD_ADDR_VAR 0 2
66132: PUSH
66133: EMPTY
66134: ST_TO_ADDR
// if not array then
66135: LD_VAR 0 1
66139: NOT
66140: IFFALSE 66144
// exit ;
66142: GO 66243
// Randomize ;
66144: CALL_OW 10
// for i = array downto 1 do
66148: LD_ADDR_VAR 0 3
66152: PUSH
66153: DOUBLE
66154: LD_VAR 0 1
66158: INC
66159: ST_TO_ADDR
66160: LD_INT 1
66162: PUSH
66163: FOR_DOWNTO
66164: IFFALSE 66241
// begin index := rand ( 1 , array ) ;
66166: LD_ADDR_VAR 0 4
66170: PUSH
66171: LD_INT 1
66173: PPUSH
66174: LD_VAR 0 1
66178: PPUSH
66179: CALL_OW 12
66183: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66184: LD_ADDR_VAR 0 2
66188: PUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: LD_VAR 0 2
66198: PUSH
66199: LD_INT 1
66201: PLUS
66202: PPUSH
66203: LD_VAR 0 1
66207: PUSH
66208: LD_VAR 0 4
66212: ARRAY
66213: PPUSH
66214: CALL_OW 2
66218: ST_TO_ADDR
// array := Delete ( array , index ) ;
66219: LD_ADDR_VAR 0 1
66223: PUSH
66224: LD_VAR 0 1
66228: PPUSH
66229: LD_VAR 0 4
66233: PPUSH
66234: CALL_OW 3
66238: ST_TO_ADDR
// end ;
66239: GO 66163
66241: POP
66242: POP
// end ;
66243: LD_VAR 0 2
66247: RET
// export function GetBaseMaterials ( base ) ; begin
66248: LD_INT 0
66250: PPUSH
// result := [ 0 , 0 , 0 ] ;
66251: LD_ADDR_VAR 0 2
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// if not base then
66270: LD_VAR 0 1
66274: NOT
66275: IFFALSE 66279
// exit ;
66277: GO 66328
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66279: LD_ADDR_VAR 0 2
66283: PUSH
66284: LD_VAR 0 1
66288: PPUSH
66289: LD_INT 1
66291: PPUSH
66292: CALL_OW 275
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_INT 2
66304: PPUSH
66305: CALL_OW 275
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: LD_INT 3
66317: PPUSH
66318: CALL_OW 275
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: LIST
66327: ST_TO_ADDR
// end ;
66328: LD_VAR 0 2
66332: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66333: LD_INT 0
66335: PPUSH
66336: PPUSH
// result := array ;
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: LD_VAR 0 1
66346: ST_TO_ADDR
// if size > 0 then
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 0
66354: GREATER
66355: IFFALSE 66401
// for i := array downto size do
66357: LD_ADDR_VAR 0 4
66361: PUSH
66362: DOUBLE
66363: LD_VAR 0 1
66367: INC
66368: ST_TO_ADDR
66369: LD_VAR 0 2
66373: PUSH
66374: FOR_DOWNTO
66375: IFFALSE 66399
// result := Delete ( result , result ) ;
66377: LD_ADDR_VAR 0 3
66381: PUSH
66382: LD_VAR 0 3
66386: PPUSH
66387: LD_VAR 0 3
66391: PPUSH
66392: CALL_OW 3
66396: ST_TO_ADDR
66397: GO 66374
66399: POP
66400: POP
// end ;
66401: LD_VAR 0 3
66405: RET
// export function ComExit ( unit ) ; var tmp ; begin
66406: LD_INT 0
66408: PPUSH
66409: PPUSH
// if not IsInUnit ( unit ) then
66410: LD_VAR 0 1
66414: PPUSH
66415: CALL_OW 310
66419: NOT
66420: IFFALSE 66424
// exit ;
66422: GO 66484
// tmp := IsInUnit ( unit ) ;
66424: LD_ADDR_VAR 0 3
66428: PUSH
66429: LD_VAR 0 1
66433: PPUSH
66434: CALL_OW 310
66438: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66439: LD_VAR 0 3
66443: PPUSH
66444: CALL_OW 247
66448: PUSH
66449: LD_INT 2
66451: EQUAL
66452: IFFALSE 66465
// ComExitVehicle ( unit ) else
66454: LD_VAR 0 1
66458: PPUSH
66459: CALL_OW 121
66463: GO 66474
// ComExitBuilding ( unit ) ;
66465: LD_VAR 0 1
66469: PPUSH
66470: CALL_OW 122
// result := tmp ;
66474: LD_ADDR_VAR 0 2
66478: PUSH
66479: LD_VAR 0 3
66483: ST_TO_ADDR
// end ;
66484: LD_VAR 0 2
66488: RET
// export function ComExitAll ( units ) ; var i ; begin
66489: LD_INT 0
66491: PPUSH
66492: PPUSH
// if not units then
66493: LD_VAR 0 1
66497: NOT
66498: IFFALSE 66502
// exit ;
66500: GO 66528
// for i in units do
66502: LD_ADDR_VAR 0 3
66506: PUSH
66507: LD_VAR 0 1
66511: PUSH
66512: FOR_IN
66513: IFFALSE 66526
// ComExit ( i ) ;
66515: LD_VAR 0 3
66519: PPUSH
66520: CALL 66406 0 1
66524: GO 66512
66526: POP
66527: POP
// end ;
66528: LD_VAR 0 2
66532: RET
// export function ResetHc ; begin
66533: LD_INT 0
66535: PPUSH
// InitHc ;
66536: CALL_OW 19
// hc_importance := 0 ;
66540: LD_ADDR_OWVAR 32
66544: PUSH
66545: LD_INT 0
66547: ST_TO_ADDR
// end ;
66548: LD_VAR 0 1
66552: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66553: LD_INT 0
66555: PPUSH
66556: PPUSH
66557: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66558: LD_ADDR_VAR 0 6
66562: PUSH
66563: LD_VAR 0 1
66567: PUSH
66568: LD_VAR 0 3
66572: PLUS
66573: PUSH
66574: LD_INT 2
66576: DIV
66577: ST_TO_ADDR
// if _x < 0 then
66578: LD_VAR 0 6
66582: PUSH
66583: LD_INT 0
66585: LESS
66586: IFFALSE 66603
// _x := _x * - 1 ;
66588: LD_ADDR_VAR 0 6
66592: PUSH
66593: LD_VAR 0 6
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: MUL
66602: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66603: LD_ADDR_VAR 0 7
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_VAR 0 4
66617: PLUS
66618: PUSH
66619: LD_INT 2
66621: DIV
66622: ST_TO_ADDR
// if _y < 0 then
66623: LD_VAR 0 7
66627: PUSH
66628: LD_INT 0
66630: LESS
66631: IFFALSE 66648
// _y := _y * - 1 ;
66633: LD_ADDR_VAR 0 7
66637: PUSH
66638: LD_VAR 0 7
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: MUL
66647: ST_TO_ADDR
// result := [ _x , _y ] ;
66648: LD_ADDR_VAR 0 5
66652: PUSH
66653: LD_VAR 0 6
66657: PUSH
66658: LD_VAR 0 7
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: ST_TO_ADDR
// end ;
66667: LD_VAR 0 5
66671: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66672: LD_INT 0
66674: PPUSH
66675: PPUSH
66676: PPUSH
66677: PPUSH
// task := GetTaskList ( unit ) ;
66678: LD_ADDR_VAR 0 7
66682: PUSH
66683: LD_VAR 0 1
66687: PPUSH
66688: CALL_OW 437
66692: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66693: LD_VAR 0 7
66697: NOT
66698: PUSH
66699: LD_VAR 0 1
66703: PPUSH
66704: LD_VAR 0 2
66708: PPUSH
66709: CALL_OW 308
66713: NOT
66714: AND
66715: IFFALSE 66719
// exit ;
66717: GO 66837
// if IsInArea ( unit , area ) then
66719: LD_VAR 0 1
66723: PPUSH
66724: LD_VAR 0 2
66728: PPUSH
66729: CALL_OW 308
66733: IFFALSE 66751
// begin ComMoveToArea ( unit , goAway ) ;
66735: LD_VAR 0 1
66739: PPUSH
66740: LD_VAR 0 3
66744: PPUSH
66745: CALL_OW 113
// exit ;
66749: GO 66837
// end ; if task [ 1 ] [ 1 ] <> M then
66751: LD_VAR 0 7
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PUSH
66760: LD_INT 1
66762: ARRAY
66763: PUSH
66764: LD_STRING M
66766: NONEQUAL
66767: IFFALSE 66771
// exit ;
66769: GO 66837
// x := task [ 1 ] [ 2 ] ;
66771: LD_ADDR_VAR 0 5
66775: PUSH
66776: LD_VAR 0 7
66780: PUSH
66781: LD_INT 1
66783: ARRAY
66784: PUSH
66785: LD_INT 2
66787: ARRAY
66788: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66789: LD_ADDR_VAR 0 6
66793: PUSH
66794: LD_VAR 0 7
66798: PUSH
66799: LD_INT 1
66801: ARRAY
66802: PUSH
66803: LD_INT 3
66805: ARRAY
66806: ST_TO_ADDR
// if InArea ( x , y , area ) then
66807: LD_VAR 0 5
66811: PPUSH
66812: LD_VAR 0 6
66816: PPUSH
66817: LD_VAR 0 2
66821: PPUSH
66822: CALL_OW 309
66826: IFFALSE 66837
// ComStop ( unit ) ;
66828: LD_VAR 0 1
66832: PPUSH
66833: CALL_OW 141
// end ;
66837: LD_VAR 0 4
66841: RET
// export function Abs ( value ) ; begin
66842: LD_INT 0
66844: PPUSH
// result := value ;
66845: LD_ADDR_VAR 0 2
66849: PUSH
66850: LD_VAR 0 1
66854: ST_TO_ADDR
// if value < 0 then
66855: LD_VAR 0 1
66859: PUSH
66860: LD_INT 0
66862: LESS
66863: IFFALSE 66880
// result := value * - 1 ;
66865: LD_ADDR_VAR 0 2
66869: PUSH
66870: LD_VAR 0 1
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: MUL
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 2
66884: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66885: LD_INT 0
66887: PPUSH
66888: PPUSH
66889: PPUSH
66890: PPUSH
66891: PPUSH
66892: PPUSH
66893: PPUSH
66894: PPUSH
// if not unit or not building then
66895: LD_VAR 0 1
66899: NOT
66900: PUSH
66901: LD_VAR 0 2
66905: NOT
66906: OR
66907: IFFALSE 66911
// exit ;
66909: GO 67137
// x := GetX ( building ) ;
66911: LD_ADDR_VAR 0 4
66915: PUSH
66916: LD_VAR 0 2
66920: PPUSH
66921: CALL_OW 250
66925: ST_TO_ADDR
// y := GetY ( building ) ;
66926: LD_ADDR_VAR 0 6
66930: PUSH
66931: LD_VAR 0 2
66935: PPUSH
66936: CALL_OW 251
66940: ST_TO_ADDR
// d := GetDir ( building ) ;
66941: LD_ADDR_VAR 0 8
66945: PUSH
66946: LD_VAR 0 2
66950: PPUSH
66951: CALL_OW 254
66955: ST_TO_ADDR
// r := 4 ;
66956: LD_ADDR_VAR 0 9
66960: PUSH
66961: LD_INT 4
66963: ST_TO_ADDR
// for i := 1 to 5 do
66964: LD_ADDR_VAR 0 10
66968: PUSH
66969: DOUBLE
66970: LD_INT 1
66972: DEC
66973: ST_TO_ADDR
66974: LD_INT 5
66976: PUSH
66977: FOR_TO
66978: IFFALSE 67135
// begin _x := ShiftX ( x , d , r + i ) ;
66980: LD_ADDR_VAR 0 5
66984: PUSH
66985: LD_VAR 0 4
66989: PPUSH
66990: LD_VAR 0 8
66994: PPUSH
66995: LD_VAR 0 9
66999: PUSH
67000: LD_VAR 0 10
67004: PLUS
67005: PPUSH
67006: CALL_OW 272
67010: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67011: LD_ADDR_VAR 0 7
67015: PUSH
67016: LD_VAR 0 6
67020: PPUSH
67021: LD_VAR 0 8
67025: PPUSH
67026: LD_VAR 0 9
67030: PUSH
67031: LD_VAR 0 10
67035: PLUS
67036: PPUSH
67037: CALL_OW 273
67041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67042: LD_VAR 0 5
67046: PPUSH
67047: LD_VAR 0 7
67051: PPUSH
67052: CALL_OW 488
67056: PUSH
67057: LD_VAR 0 5
67061: PPUSH
67062: LD_VAR 0 7
67066: PPUSH
67067: CALL_OW 428
67071: PPUSH
67072: CALL_OW 247
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: IN
67087: NOT
67088: AND
67089: IFFALSE 67133
// begin ComMoveXY ( unit , _x , _y ) ;
67091: LD_VAR 0 1
67095: PPUSH
67096: LD_VAR 0 5
67100: PPUSH
67101: LD_VAR 0 7
67105: PPUSH
67106: CALL_OW 111
// result := [ _x , _y ] ;
67110: LD_ADDR_VAR 0 3
67114: PUSH
67115: LD_VAR 0 5
67119: PUSH
67120: LD_VAR 0 7
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// exit ;
67129: POP
67130: POP
67131: GO 67137
// end ; end ;
67133: GO 66977
67135: POP
67136: POP
// end ;
67137: LD_VAR 0 3
67141: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67142: LD_INT 0
67144: PPUSH
67145: PPUSH
67146: PPUSH
// result := 0 ;
67147: LD_ADDR_VAR 0 3
67151: PUSH
67152: LD_INT 0
67154: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67155: LD_VAR 0 1
67159: PUSH
67160: LD_INT 0
67162: LESS
67163: PUSH
67164: LD_VAR 0 1
67168: PUSH
67169: LD_INT 8
67171: GREATER
67172: OR
67173: PUSH
67174: LD_VAR 0 2
67178: PUSH
67179: LD_INT 0
67181: LESS
67182: OR
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 8
67191: GREATER
67192: OR
67193: IFFALSE 67197
// exit ;
67195: GO 67272
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67197: LD_ADDR_VAR 0 4
67201: PUSH
67202: LD_INT 22
67204: PUSH
67205: LD_VAR 0 2
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PPUSH
67214: CALL_OW 69
67218: PUSH
67219: FOR_IN
67220: IFFALSE 67270
// begin un := UnitShoot ( i ) ;
67222: LD_ADDR_VAR 0 5
67226: PUSH
67227: LD_VAR 0 4
67231: PPUSH
67232: CALL_OW 504
67236: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67237: LD_VAR 0 5
67241: PPUSH
67242: CALL_OW 255
67246: PUSH
67247: LD_VAR 0 1
67251: EQUAL
67252: IFFALSE 67268
// begin result := un ;
67254: LD_ADDR_VAR 0 3
67258: PUSH
67259: LD_VAR 0 5
67263: ST_TO_ADDR
// exit ;
67264: POP
67265: POP
67266: GO 67272
// end ; end ;
67268: GO 67219
67270: POP
67271: POP
// end ;
67272: LD_VAR 0 3
67276: RET
// export function GetCargoBay ( units ) ; begin
67277: LD_INT 0
67279: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67280: LD_ADDR_VAR 0 2
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: LD_INT 2
67292: PUSH
67293: LD_INT 34
67295: PUSH
67296: LD_INT 12
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 34
67305: PUSH
67306: LD_INT 51
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 34
67315: PUSH
67316: LD_INT 32
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 34
67325: PUSH
67326: LD_EXP 106
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: PPUSH
67342: CALL_OW 72
67346: ST_TO_ADDR
// end ;
67347: LD_VAR 0 2
67351: RET
// export function Negate ( value ) ; begin
67352: LD_INT 0
67354: PPUSH
// result := not value ;
67355: LD_ADDR_VAR 0 2
67359: PUSH
67360: LD_VAR 0 1
67364: NOT
67365: ST_TO_ADDR
// end ;
67366: LD_VAR 0 2
67370: RET
// export function Inc ( value ) ; begin
67371: LD_INT 0
67373: PPUSH
// result := value + 1 ;
67374: LD_ADDR_VAR 0 2
67378: PUSH
67379: LD_VAR 0 1
67383: PUSH
67384: LD_INT 1
67386: PLUS
67387: ST_TO_ADDR
// end ;
67388: LD_VAR 0 2
67392: RET
// export function Dec ( value ) ; begin
67393: LD_INT 0
67395: PPUSH
// result := value - 1 ;
67396: LD_ADDR_VAR 0 2
67400: PUSH
67401: LD_VAR 0 1
67405: PUSH
67406: LD_INT 1
67408: MINUS
67409: ST_TO_ADDR
// end ;
67410: LD_VAR 0 2
67414: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67415: LD_INT 0
67417: PPUSH
67418: PPUSH
67419: PPUSH
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67425: LD_VAR 0 1
67429: PPUSH
67430: LD_VAR 0 2
67434: PPUSH
67435: CALL_OW 488
67439: NOT
67440: PUSH
67441: LD_VAR 0 3
67445: PPUSH
67446: LD_VAR 0 4
67450: PPUSH
67451: CALL_OW 488
67455: NOT
67456: OR
67457: IFFALSE 67470
// begin result := - 1 ;
67459: LD_ADDR_VAR 0 5
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: ST_TO_ADDR
// exit ;
67468: GO 67705
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67470: LD_ADDR_VAR 0 12
67474: PUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: LD_VAR 0 2
67484: PPUSH
67485: LD_VAR 0 3
67489: PPUSH
67490: LD_VAR 0 4
67494: PPUSH
67495: CALL 66553 0 4
67499: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67500: LD_ADDR_VAR 0 11
67504: PUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: LD_VAR 0 2
67514: PPUSH
67515: LD_VAR 0 12
67519: PUSH
67520: LD_INT 1
67522: ARRAY
67523: PPUSH
67524: LD_VAR 0 12
67528: PUSH
67529: LD_INT 2
67531: ARRAY
67532: PPUSH
67533: CALL_OW 298
67537: ST_TO_ADDR
// distance := 9999 ;
67538: LD_ADDR_VAR 0 10
67542: PUSH
67543: LD_INT 9999
67545: ST_TO_ADDR
// for i := 0 to 5 do
67546: LD_ADDR_VAR 0 6
67550: PUSH
67551: DOUBLE
67552: LD_INT 0
67554: DEC
67555: ST_TO_ADDR
67556: LD_INT 5
67558: PUSH
67559: FOR_TO
67560: IFFALSE 67703
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67562: LD_ADDR_VAR 0 7
67566: PUSH
67567: LD_VAR 0 1
67571: PPUSH
67572: LD_VAR 0 6
67576: PPUSH
67577: LD_VAR 0 11
67581: PPUSH
67582: CALL_OW 272
67586: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67587: LD_ADDR_VAR 0 8
67591: PUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: LD_VAR 0 6
67601: PPUSH
67602: LD_VAR 0 11
67606: PPUSH
67607: CALL_OW 273
67611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67612: LD_VAR 0 7
67616: PPUSH
67617: LD_VAR 0 8
67621: PPUSH
67622: CALL_OW 488
67626: NOT
67627: IFFALSE 67631
// continue ;
67629: GO 67559
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67631: LD_ADDR_VAR 0 9
67635: PUSH
67636: LD_VAR 0 12
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PPUSH
67645: LD_VAR 0 12
67649: PUSH
67650: LD_INT 2
67652: ARRAY
67653: PPUSH
67654: LD_VAR 0 7
67658: PPUSH
67659: LD_VAR 0 8
67663: PPUSH
67664: CALL_OW 298
67668: ST_TO_ADDR
// if tmp < distance then
67669: LD_VAR 0 9
67673: PUSH
67674: LD_VAR 0 10
67678: LESS
67679: IFFALSE 67701
// begin result := i ;
67681: LD_ADDR_VAR 0 5
67685: PUSH
67686: LD_VAR 0 6
67690: ST_TO_ADDR
// distance := tmp ;
67691: LD_ADDR_VAR 0 10
67695: PUSH
67696: LD_VAR 0 9
67700: ST_TO_ADDR
// end ; end ;
67701: GO 67559
67703: POP
67704: POP
// end ;
67705: LD_VAR 0 5
67709: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
// if not driver or not IsInUnit ( driver ) then
67714: LD_VAR 0 1
67718: NOT
67719: PUSH
67720: LD_VAR 0 1
67724: PPUSH
67725: CALL_OW 310
67729: NOT
67730: OR
67731: IFFALSE 67735
// exit ;
67733: GO 67825
// vehicle := IsInUnit ( driver ) ;
67735: LD_ADDR_VAR 0 3
67739: PUSH
67740: LD_VAR 0 1
67744: PPUSH
67745: CALL_OW 310
67749: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67750: LD_VAR 0 1
67754: PPUSH
67755: LD_STRING \
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: PUSH
67785: LD_STRING E
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_VAR 0 3
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PPUSH
67821: CALL_OW 446
// end ;
67825: LD_VAR 0 2
67829: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67830: LD_INT 0
67832: PPUSH
67833: PPUSH
// if not driver or not IsInUnit ( driver ) then
67834: LD_VAR 0 1
67838: NOT
67839: PUSH
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 310
67849: NOT
67850: OR
67851: IFFALSE 67855
// exit ;
67853: GO 67945
// vehicle := IsInUnit ( driver ) ;
67855: LD_ADDR_VAR 0 3
67859: PUSH
67860: LD_VAR 0 1
67864: PPUSH
67865: CALL_OW 310
67869: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67870: LD_VAR 0 1
67874: PPUSH
67875: LD_STRING \
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: PUSH
67905: LD_STRING E
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: LD_VAR 0 3
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PPUSH
67941: CALL_OW 447
// end ;
67945: LD_VAR 0 2
67949: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67950: LD_INT 0
67952: PPUSH
67953: PPUSH
67954: PPUSH
// tmp := [ ] ;
67955: LD_ADDR_VAR 0 5
67959: PUSH
67960: EMPTY
67961: ST_TO_ADDR
// for i in units do
67962: LD_ADDR_VAR 0 4
67966: PUSH
67967: LD_VAR 0 1
67971: PUSH
67972: FOR_IN
67973: IFFALSE 68011
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67975: LD_ADDR_VAR 0 5
67979: PUSH
67980: LD_VAR 0 5
67984: PPUSH
67985: LD_VAR 0 5
67989: PUSH
67990: LD_INT 1
67992: PLUS
67993: PPUSH
67994: LD_VAR 0 4
67998: PPUSH
67999: CALL_OW 256
68003: PPUSH
68004: CALL_OW 2
68008: ST_TO_ADDR
68009: GO 67972
68011: POP
68012: POP
// if not tmp then
68013: LD_VAR 0 5
68017: NOT
68018: IFFALSE 68022
// exit ;
68020: GO 68070
// if asc then
68022: LD_VAR 0 2
68026: IFFALSE 68050
// result := SortListByListAsc ( units , tmp ) else
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_VAR 0 5
68042: PPUSH
68043: CALL_OW 76
68047: ST_TO_ADDR
68048: GO 68070
// result := SortListByListDesc ( units , tmp ) ;
68050: LD_ADDR_VAR 0 3
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: LD_VAR 0 5
68064: PPUSH
68065: CALL_OW 77
68069: ST_TO_ADDR
// end ;
68070: LD_VAR 0 3
68074: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68075: LD_INT 0
68077: PPUSH
68078: PPUSH
// task := GetTaskList ( mech ) ;
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_VAR 0 1
68088: PPUSH
68089: CALL_OW 437
68093: ST_TO_ADDR
// if not task then
68094: LD_VAR 0 4
68098: NOT
68099: IFFALSE 68103
// exit ;
68101: GO 68145
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68103: LD_ADDR_VAR 0 3
68107: PUSH
68108: LD_VAR 0 4
68112: PUSH
68113: LD_INT 1
68115: ARRAY
68116: PUSH
68117: LD_INT 1
68119: ARRAY
68120: PUSH
68121: LD_STRING r
68123: EQUAL
68124: PUSH
68125: LD_VAR 0 4
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PUSH
68134: LD_INT 4
68136: ARRAY
68137: PUSH
68138: LD_VAR 0 2
68142: EQUAL
68143: AND
68144: ST_TO_ADDR
// end ;
68145: LD_VAR 0 3
68149: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68150: LD_INT 0
68152: PPUSH
// SetDir ( unit , d ) ;
68153: LD_VAR 0 1
68157: PPUSH
68158: LD_VAR 0 4
68162: PPUSH
68163: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68167: LD_VAR 0 1
68171: PPUSH
68172: LD_VAR 0 2
68176: PPUSH
68177: LD_VAR 0 3
68181: PPUSH
68182: LD_VAR 0 5
68186: PPUSH
68187: CALL_OW 48
// end ;
68191: LD_VAR 0 6
68195: RET
// export function ToNaturalNumber ( number ) ; begin
68196: LD_INT 0
68198: PPUSH
// result := number div 1 ;
68199: LD_ADDR_VAR 0 2
68203: PUSH
68204: LD_VAR 0 1
68208: PUSH
68209: LD_INT 1
68211: DIV
68212: ST_TO_ADDR
// if number < 0 then
68213: LD_VAR 0 1
68217: PUSH
68218: LD_INT 0
68220: LESS
68221: IFFALSE 68231
// result := 0 ;
68223: LD_ADDR_VAR 0 2
68227: PUSH
68228: LD_INT 0
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 2
68235: RET
// export function SortByClass ( units , class ) ; var un ; begin
68236: LD_INT 0
68238: PPUSH
68239: PPUSH
// if not units or not class then
68240: LD_VAR 0 1
68244: NOT
68245: PUSH
68246: LD_VAR 0 2
68250: NOT
68251: OR
68252: IFFALSE 68256
// exit ;
68254: GO 68351
// result := [ ] ;
68256: LD_ADDR_VAR 0 3
68260: PUSH
68261: EMPTY
68262: ST_TO_ADDR
// for un in units do
68263: LD_ADDR_VAR 0 4
68267: PUSH
68268: LD_VAR 0 1
68272: PUSH
68273: FOR_IN
68274: IFFALSE 68349
// if GetClass ( un ) = class then
68276: LD_VAR 0 4
68280: PPUSH
68281: CALL_OW 257
68285: PUSH
68286: LD_VAR 0 2
68290: EQUAL
68291: IFFALSE 68318
// result := Insert ( result , 1 , un ) else
68293: LD_ADDR_VAR 0 3
68297: PUSH
68298: LD_VAR 0 3
68302: PPUSH
68303: LD_INT 1
68305: PPUSH
68306: LD_VAR 0 4
68310: PPUSH
68311: CALL_OW 2
68315: ST_TO_ADDR
68316: GO 68347
// result := Replace ( result , result + 1 , un ) ;
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_VAR 0 3
68327: PPUSH
68328: LD_VAR 0 3
68332: PUSH
68333: LD_INT 1
68335: PLUS
68336: PPUSH
68337: LD_VAR 0 4
68341: PPUSH
68342: CALL_OW 1
68346: ST_TO_ADDR
68347: GO 68273
68349: POP
68350: POP
// end ;
68351: LD_VAR 0 3
68355: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68356: LD_INT 0
68358: PPUSH
68359: PPUSH
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
68364: PPUSH
// result := [ ] ;
68365: LD_ADDR_VAR 0 4
68369: PUSH
68370: EMPTY
68371: ST_TO_ADDR
// if x - r < 0 then
68372: LD_VAR 0 1
68376: PUSH
68377: LD_VAR 0 3
68381: MINUS
68382: PUSH
68383: LD_INT 0
68385: LESS
68386: IFFALSE 68398
// min_x := 0 else
68388: LD_ADDR_VAR 0 8
68392: PUSH
68393: LD_INT 0
68395: ST_TO_ADDR
68396: GO 68414
// min_x := x - r ;
68398: LD_ADDR_VAR 0 8
68402: PUSH
68403: LD_VAR 0 1
68407: PUSH
68408: LD_VAR 0 3
68412: MINUS
68413: ST_TO_ADDR
// if y - r < 0 then
68414: LD_VAR 0 2
68418: PUSH
68419: LD_VAR 0 3
68423: MINUS
68424: PUSH
68425: LD_INT 0
68427: LESS
68428: IFFALSE 68440
// min_y := 0 else
68430: LD_ADDR_VAR 0 7
68434: PUSH
68435: LD_INT 0
68437: ST_TO_ADDR
68438: GO 68456
// min_y := y - r ;
68440: LD_ADDR_VAR 0 7
68444: PUSH
68445: LD_VAR 0 2
68449: PUSH
68450: LD_VAR 0 3
68454: MINUS
68455: ST_TO_ADDR
// max_x := x + r ;
68456: LD_ADDR_VAR 0 9
68460: PUSH
68461: LD_VAR 0 1
68465: PUSH
68466: LD_VAR 0 3
68470: PLUS
68471: ST_TO_ADDR
// max_y := y + r ;
68472: LD_ADDR_VAR 0 10
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_VAR 0 3
68486: PLUS
68487: ST_TO_ADDR
// for _x = min_x to max_x do
68488: LD_ADDR_VAR 0 5
68492: PUSH
68493: DOUBLE
68494: LD_VAR 0 8
68498: DEC
68499: ST_TO_ADDR
68500: LD_VAR 0 9
68504: PUSH
68505: FOR_TO
68506: IFFALSE 68607
// for _y = min_y to max_y do
68508: LD_ADDR_VAR 0 6
68512: PUSH
68513: DOUBLE
68514: LD_VAR 0 7
68518: DEC
68519: ST_TO_ADDR
68520: LD_VAR 0 10
68524: PUSH
68525: FOR_TO
68526: IFFALSE 68603
// begin if not ValidHex ( _x , _y ) then
68528: LD_VAR 0 5
68532: PPUSH
68533: LD_VAR 0 6
68537: PPUSH
68538: CALL_OW 488
68542: NOT
68543: IFFALSE 68547
// continue ;
68545: GO 68525
// if GetResourceTypeXY ( _x , _y ) then
68547: LD_VAR 0 5
68551: PPUSH
68552: LD_VAR 0 6
68556: PPUSH
68557: CALL_OW 283
68561: IFFALSE 68601
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68563: LD_ADDR_VAR 0 4
68567: PUSH
68568: LD_VAR 0 4
68572: PPUSH
68573: LD_VAR 0 4
68577: PUSH
68578: LD_INT 1
68580: PLUS
68581: PPUSH
68582: LD_VAR 0 5
68586: PUSH
68587: LD_VAR 0 6
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PPUSH
68596: CALL_OW 1
68600: ST_TO_ADDR
// end ;
68601: GO 68525
68603: POP
68604: POP
68605: GO 68505
68607: POP
68608: POP
// end ;
68609: LD_VAR 0 4
68613: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
68618: PPUSH
68619: PPUSH
68620: PPUSH
68621: PPUSH
68622: PPUSH
68623: PPUSH
// if not units then
68624: LD_VAR 0 1
68628: NOT
68629: IFFALSE 68633
// exit ;
68631: GO 69058
// result := UnitFilter ( units , [ f_ok ] ) ;
68633: LD_ADDR_VAR 0 3
68637: PUSH
68638: LD_VAR 0 1
68642: PPUSH
68643: LD_INT 50
68645: PUSH
68646: EMPTY
68647: LIST
68648: PPUSH
68649: CALL_OW 72
68653: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68654: LD_ADDR_VAR 0 8
68658: PUSH
68659: LD_VAR 0 1
68663: PUSH
68664: LD_INT 1
68666: ARRAY
68667: PPUSH
68668: CALL_OW 255
68672: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68673: LD_ADDR_VAR 0 10
68677: PUSH
68678: LD_INT 29
68680: PUSH
68681: LD_EXP 109
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// if not result then
68690: LD_VAR 0 3
68694: NOT
68695: IFFALSE 68699
// exit ;
68697: GO 69058
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68699: LD_ADDR_VAR 0 5
68703: PUSH
68704: LD_INT 81
68706: PUSH
68707: LD_VAR 0 8
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PPUSH
68716: CALL_OW 69
68720: ST_TO_ADDR
// for i in result do
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: LD_VAR 0 3
68730: PUSH
68731: FOR_IN
68732: IFFALSE 69056
// begin tag := GetTag ( i ) + 1 ;
68734: LD_ADDR_VAR 0 9
68738: PUSH
68739: LD_VAR 0 4
68743: PPUSH
68744: CALL_OW 110
68748: PUSH
68749: LD_INT 1
68751: PLUS
68752: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68753: LD_ADDR_VAR 0 7
68757: PUSH
68758: LD_VAR 0 4
68762: PPUSH
68763: CALL_OW 250
68767: PPUSH
68768: LD_VAR 0 4
68772: PPUSH
68773: CALL_OW 251
68777: PPUSH
68778: LD_INT 6
68780: PPUSH
68781: CALL 68356 0 3
68785: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68786: LD_VAR 0 7
68790: PUSH
68791: LD_VAR 0 4
68795: PPUSH
68796: CALL_OW 264
68800: PUSH
68801: LD_VAR 0 10
68805: IN
68806: NOT
68807: AND
68808: IFFALSE 68847
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68810: LD_VAR 0 4
68814: PPUSH
68815: LD_VAR 0 7
68819: PUSH
68820: LD_INT 1
68822: ARRAY
68823: PUSH
68824: LD_INT 1
68826: ARRAY
68827: PPUSH
68828: LD_VAR 0 7
68832: PUSH
68833: LD_INT 1
68835: ARRAY
68836: PUSH
68837: LD_INT 2
68839: ARRAY
68840: PPUSH
68841: CALL_OW 116
68845: GO 69054
// if path > tag then
68847: LD_VAR 0 2
68851: PUSH
68852: LD_VAR 0 9
68856: GREATER
68857: IFFALSE 69024
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68859: LD_ADDR_VAR 0 6
68863: PUSH
68864: LD_VAR 0 5
68868: PPUSH
68869: LD_INT 91
68871: PUSH
68872: LD_VAR 0 4
68876: PUSH
68877: LD_INT 12
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: PPUSH
68885: CALL_OW 72
68889: ST_TO_ADDR
// if nearEnemy then
68890: LD_VAR 0 6
68894: IFFALSE 68922
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68896: LD_VAR 0 4
68900: PPUSH
68901: LD_VAR 0 6
68905: PPUSH
68906: LD_VAR 0 4
68910: PPUSH
68911: CALL_OW 74
68915: PPUSH
68916: CALL_OW 115
68920: GO 69022
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68922: LD_VAR 0 4
68926: PPUSH
68927: LD_VAR 0 2
68931: PUSH
68932: LD_VAR 0 9
68936: ARRAY
68937: PUSH
68938: LD_INT 1
68940: ARRAY
68941: PPUSH
68942: LD_VAR 0 2
68946: PUSH
68947: LD_VAR 0 9
68951: ARRAY
68952: PUSH
68953: LD_INT 2
68955: ARRAY
68956: PPUSH
68957: CALL_OW 297
68961: PUSH
68962: LD_INT 6
68964: GREATER
68965: IFFALSE 69008
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68967: LD_VAR 0 4
68971: PPUSH
68972: LD_VAR 0 2
68976: PUSH
68977: LD_VAR 0 9
68981: ARRAY
68982: PUSH
68983: LD_INT 1
68985: ARRAY
68986: PPUSH
68987: LD_VAR 0 2
68991: PUSH
68992: LD_VAR 0 9
68996: ARRAY
68997: PUSH
68998: LD_INT 2
69000: ARRAY
69001: PPUSH
69002: CALL_OW 114
69006: GO 69022
// SetTag ( i , tag ) ;
69008: LD_VAR 0 4
69012: PPUSH
69013: LD_VAR 0 9
69017: PPUSH
69018: CALL_OW 109
// end else
69022: GO 69054
// if enemy then
69024: LD_VAR 0 5
69028: IFFALSE 69054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69030: LD_VAR 0 4
69034: PPUSH
69035: LD_VAR 0 5
69039: PPUSH
69040: LD_VAR 0 4
69044: PPUSH
69045: CALL_OW 74
69049: PPUSH
69050: CALL_OW 115
// end ;
69054: GO 68731
69056: POP
69057: POP
// end ;
69058: LD_VAR 0 3
69062: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69063: LD_INT 0
69065: PPUSH
69066: PPUSH
69067: PPUSH
// if not unit or IsInUnit ( unit ) then
69068: LD_VAR 0 1
69072: NOT
69073: PUSH
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL_OW 310
69083: OR
69084: IFFALSE 69088
// exit ;
69086: GO 69179
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69088: LD_ADDR_VAR 0 4
69092: PUSH
69093: LD_VAR 0 1
69097: PPUSH
69098: CALL_OW 250
69102: PPUSH
69103: LD_VAR 0 2
69107: PPUSH
69108: LD_INT 1
69110: PPUSH
69111: CALL_OW 272
69115: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69116: LD_ADDR_VAR 0 5
69120: PUSH
69121: LD_VAR 0 1
69125: PPUSH
69126: CALL_OW 251
69130: PPUSH
69131: LD_VAR 0 2
69135: PPUSH
69136: LD_INT 1
69138: PPUSH
69139: CALL_OW 273
69143: ST_TO_ADDR
// if ValidHex ( x , y ) then
69144: LD_VAR 0 4
69148: PPUSH
69149: LD_VAR 0 5
69153: PPUSH
69154: CALL_OW 488
69158: IFFALSE 69179
// ComTurnXY ( unit , x , y ) ;
69160: LD_VAR 0 1
69164: PPUSH
69165: LD_VAR 0 4
69169: PPUSH
69170: LD_VAR 0 5
69174: PPUSH
69175: CALL_OW 118
// end ;
69179: LD_VAR 0 3
69183: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69184: LD_INT 0
69186: PPUSH
69187: PPUSH
// result := false ;
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_INT 0
69195: ST_TO_ADDR
// if not units then
69196: LD_VAR 0 2
69200: NOT
69201: IFFALSE 69205
// exit ;
69203: GO 69250
// for i in units do
69205: LD_ADDR_VAR 0 4
69209: PUSH
69210: LD_VAR 0 2
69214: PUSH
69215: FOR_IN
69216: IFFALSE 69248
// if See ( side , i ) then
69218: LD_VAR 0 1
69222: PPUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: CALL_OW 292
69232: IFFALSE 69246
// begin result := true ;
69234: LD_ADDR_VAR 0 3
69238: PUSH
69239: LD_INT 1
69241: ST_TO_ADDR
// exit ;
69242: POP
69243: POP
69244: GO 69250
// end ;
69246: GO 69215
69248: POP
69249: POP
// end ;
69250: LD_VAR 0 3
69254: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69255: LD_INT 0
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
// if not unit or not points then
69261: LD_VAR 0 1
69265: NOT
69266: PUSH
69267: LD_VAR 0 2
69271: NOT
69272: OR
69273: IFFALSE 69277
// exit ;
69275: GO 69367
// dist := 99999 ;
69277: LD_ADDR_VAR 0 5
69281: PUSH
69282: LD_INT 99999
69284: ST_TO_ADDR
// for i in points do
69285: LD_ADDR_VAR 0 4
69289: PUSH
69290: LD_VAR 0 2
69294: PUSH
69295: FOR_IN
69296: IFFALSE 69365
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69298: LD_ADDR_VAR 0 6
69302: PUSH
69303: LD_VAR 0 1
69307: PPUSH
69308: LD_VAR 0 4
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PPUSH
69317: LD_VAR 0 4
69321: PUSH
69322: LD_INT 2
69324: ARRAY
69325: PPUSH
69326: CALL_OW 297
69330: ST_TO_ADDR
// if tmpDist < dist then
69331: LD_VAR 0 6
69335: PUSH
69336: LD_VAR 0 5
69340: LESS
69341: IFFALSE 69363
// begin result := i ;
69343: LD_ADDR_VAR 0 3
69347: PUSH
69348: LD_VAR 0 4
69352: ST_TO_ADDR
// dist := tmpDist ;
69353: LD_ADDR_VAR 0 5
69357: PUSH
69358: LD_VAR 0 6
69362: ST_TO_ADDR
// end ; end ;
69363: GO 69295
69365: POP
69366: POP
// end ;
69367: LD_VAR 0 3
69371: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69372: LD_INT 0
69374: PPUSH
// uc_side := side ;
69375: LD_ADDR_OWVAR 20
69379: PUSH
69380: LD_VAR 0 1
69384: ST_TO_ADDR
// uc_nation := 3 ;
69385: LD_ADDR_OWVAR 21
69389: PUSH
69390: LD_INT 3
69392: ST_TO_ADDR
// vc_chassis := 25 ;
69393: LD_ADDR_OWVAR 37
69397: PUSH
69398: LD_INT 25
69400: ST_TO_ADDR
// vc_engine := engine_siberite ;
69401: LD_ADDR_OWVAR 39
69405: PUSH
69406: LD_INT 3
69408: ST_TO_ADDR
// vc_control := control_computer ;
69409: LD_ADDR_OWVAR 38
69413: PUSH
69414: LD_INT 3
69416: ST_TO_ADDR
// vc_weapon := 59 ;
69417: LD_ADDR_OWVAR 40
69421: PUSH
69422: LD_INT 59
69424: ST_TO_ADDR
// result := CreateVehicle ;
69425: LD_ADDR_VAR 0 5
69429: PUSH
69430: CALL_OW 45
69434: ST_TO_ADDR
// SetDir ( result , d ) ;
69435: LD_VAR 0 5
69439: PPUSH
69440: LD_VAR 0 4
69444: PPUSH
69445: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69449: LD_VAR 0 5
69453: PPUSH
69454: LD_VAR 0 2
69458: PPUSH
69459: LD_VAR 0 3
69463: PPUSH
69464: LD_INT 0
69466: PPUSH
69467: CALL_OW 48
// end ;
69471: LD_VAR 0 5
69475: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69476: LD_INT 0
69478: PPUSH
69479: PPUSH
69480: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69481: LD_ADDR_VAR 0 2
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: LD_INT 0
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69504: LD_VAR 0 1
69508: NOT
69509: PUSH
69510: LD_VAR 0 1
69514: PPUSH
69515: CALL_OW 264
69519: PUSH
69520: LD_INT 12
69522: PUSH
69523: LD_INT 51
69525: PUSH
69526: LD_INT 32
69528: PUSH
69529: LD_EXP 106
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: IN
69540: NOT
69541: OR
69542: IFFALSE 69546
// exit ;
69544: GO 69644
// for i := 1 to 3 do
69546: LD_ADDR_VAR 0 3
69550: PUSH
69551: DOUBLE
69552: LD_INT 1
69554: DEC
69555: ST_TO_ADDR
69556: LD_INT 3
69558: PUSH
69559: FOR_TO
69560: IFFALSE 69642
// begin tmp := GetCargo ( cargo , i ) ;
69562: LD_ADDR_VAR 0 4
69566: PUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: LD_VAR 0 3
69576: PPUSH
69577: CALL_OW 289
69581: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69582: LD_ADDR_VAR 0 2
69586: PUSH
69587: LD_VAR 0 2
69591: PPUSH
69592: LD_VAR 0 3
69596: PPUSH
69597: LD_VAR 0 4
69601: PPUSH
69602: CALL_OW 1
69606: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69607: LD_ADDR_VAR 0 2
69611: PUSH
69612: LD_VAR 0 2
69616: PPUSH
69617: LD_INT 4
69619: PPUSH
69620: LD_VAR 0 2
69624: PUSH
69625: LD_INT 4
69627: ARRAY
69628: PUSH
69629: LD_VAR 0 4
69633: PLUS
69634: PPUSH
69635: CALL_OW 1
69639: ST_TO_ADDR
// end ;
69640: GO 69559
69642: POP
69643: POP
// end ; end_of_file
69644: LD_VAR 0 2
69648: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69649: LD_VAR 0 1
69653: PUSH
69654: LD_INT 200
69656: DOUBLE
69657: GREATEREQUAL
69658: IFFALSE 69666
69660: LD_INT 299
69662: DOUBLE
69663: LESSEQUAL
69664: IFTRUE 69668
69666: GO 69700
69668: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69669: LD_VAR 0 1
69673: PPUSH
69674: LD_VAR 0 2
69678: PPUSH
69679: LD_VAR 0 3
69683: PPUSH
69684: LD_VAR 0 4
69688: PPUSH
69689: LD_VAR 0 5
69693: PPUSH
69694: CALL 10565 0 5
69698: GO 69777
69700: LD_INT 300
69702: DOUBLE
69703: GREATEREQUAL
69704: IFFALSE 69712
69706: LD_INT 399
69708: DOUBLE
69709: LESSEQUAL
69710: IFTRUE 69714
69712: GO 69776
69714: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69715: LD_VAR 0 1
69719: PPUSH
69720: LD_VAR 0 2
69724: PPUSH
69725: LD_VAR 0 3
69729: PPUSH
69730: LD_VAR 0 4
69734: PPUSH
69735: LD_VAR 0 5
69739: PPUSH
69740: LD_VAR 0 6
69744: PPUSH
69745: LD_VAR 0 7
69749: PPUSH
69750: LD_VAR 0 8
69754: PPUSH
69755: LD_VAR 0 9
69759: PPUSH
69760: LD_VAR 0 10
69764: PPUSH
69765: LD_VAR 0 11
69769: PPUSH
69770: CALL 27181 0 11
69774: GO 69777
69776: POP
// end ;
69777: PPOPN 11
69779: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69780: LD_VAR 0 1
69784: PPUSH
69785: LD_VAR 0 2
69789: PPUSH
69790: LD_VAR 0 3
69794: PPUSH
69795: LD_VAR 0 4
69799: PPUSH
69800: LD_VAR 0 5
69804: PPUSH
69805: CALL 10301 0 5
// end ; end_of_file
69809: PPOPN 5
69811: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69812: LD_VAR 0 1
69816: PPUSH
69817: LD_VAR 0 2
69821: PPUSH
69822: LD_VAR 0 3
69826: PPUSH
69827: LD_VAR 0 4
69831: PPUSH
69832: LD_VAR 0 5
69836: PPUSH
69837: LD_VAR 0 6
69841: PPUSH
69842: CALL 14874 0 6
// end ;
69846: PPOPN 6
69848: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69849: CALL 14849 0 0
// end ;
69853: PPOPN 1
69855: END
