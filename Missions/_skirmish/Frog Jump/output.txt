// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 63219 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 110
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// end ;
11035: LD_VAR 0 6
11039: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11040: LD_INT 0
11042: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11043: LD_VAR 0 1
11047: PUSH
11048: LD_INT 250
11050: EQUAL
11051: PUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL_OW 264
11061: PUSH
11062: LD_EXP 113
11066: EQUAL
11067: AND
11068: IFFALSE 11089
// MinerPlaceMine ( unit , x , y ) ;
11070: LD_VAR 0 2
11074: PPUSH
11075: LD_VAR 0 4
11079: PPUSH
11080: LD_VAR 0 5
11084: PPUSH
11085: CALL 13438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11089: LD_VAR 0 1
11093: PUSH
11094: LD_INT 251
11096: EQUAL
11097: PUSH
11098: LD_VAR 0 2
11102: PPUSH
11103: CALL_OW 264
11107: PUSH
11108: LD_EXP 113
11112: EQUAL
11113: AND
11114: IFFALSE 11135
// MinerDetonateMine ( unit , x , y ) ;
11116: LD_VAR 0 2
11120: PPUSH
11121: LD_VAR 0 4
11125: PPUSH
11126: LD_VAR 0 5
11130: PPUSH
11131: CALL 13715 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11135: LD_VAR 0 1
11139: PUSH
11140: LD_INT 252
11142: EQUAL
11143: PUSH
11144: LD_VAR 0 2
11148: PPUSH
11149: CALL_OW 264
11153: PUSH
11154: LD_EXP 113
11158: EQUAL
11159: AND
11160: IFFALSE 11181
// MinerCreateMinefield ( unit , x , y ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: LD_VAR 0 4
11171: PPUSH
11172: LD_VAR 0 5
11176: PPUSH
11177: CALL 14132 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11181: LD_VAR 0 1
11185: PUSH
11186: LD_INT 253
11188: EQUAL
11189: PUSH
11190: LD_VAR 0 2
11194: PPUSH
11195: CALL_OW 257
11199: PUSH
11200: LD_INT 5
11202: EQUAL
11203: AND
11204: IFFALSE 11225
// ComBinocular ( unit , x , y ) ;
11206: LD_VAR 0 2
11210: PPUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_VAR 0 5
11220: PPUSH
11221: CALL 14503 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11225: LD_VAR 0 1
11229: PUSH
11230: LD_INT 254
11232: EQUAL
11233: PUSH
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 264
11243: PUSH
11244: LD_EXP 108
11248: EQUAL
11249: AND
11250: PUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: CALL_OW 263
11260: PUSH
11261: LD_INT 3
11263: EQUAL
11264: AND
11265: IFFALSE 11281
// HackDestroyVehicle ( unit , selectedUnit ) ;
11267: LD_VAR 0 2
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: CALL 12798 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11281: LD_VAR 0 1
11285: PUSH
11286: LD_INT 255
11288: EQUAL
11289: PUSH
11290: LD_VAR 0 2
11294: PPUSH
11295: CALL_OW 264
11299: PUSH
11300: LD_INT 14
11302: PUSH
11303: LD_INT 53
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: IN
11310: AND
11311: PUSH
11312: LD_VAR 0 4
11316: PPUSH
11317: LD_VAR 0 5
11321: PPUSH
11322: CALL_OW 488
11326: AND
11327: IFFALSE 11351
// CutTreeXYR ( unit , x , y , 12 ) ;
11329: LD_VAR 0 2
11333: PPUSH
11334: LD_VAR 0 4
11338: PPUSH
11339: LD_VAR 0 5
11343: PPUSH
11344: LD_INT 12
11346: PPUSH
11347: CALL 11364 0 4
// end ;
11351: LD_VAR 0 6
11355: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
11356: LD_INT 0
11358: PPUSH
// end ;
11359: LD_VAR 0 4
11363: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11364: LD_INT 0
11366: PPUSH
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11375: LD_VAR 0 1
11379: NOT
11380: PUSH
11381: LD_VAR 0 2
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: CALL_OW 488
11395: NOT
11396: OR
11397: PUSH
11398: LD_VAR 0 4
11402: NOT
11403: OR
11404: IFFALSE 11408
// exit ;
11406: GO 11748
// list := [ ] ;
11408: LD_ADDR_VAR 0 13
11412: PUSH
11413: EMPTY
11414: ST_TO_ADDR
// if x - r < 0 then
11415: LD_VAR 0 2
11419: PUSH
11420: LD_VAR 0 4
11424: MINUS
11425: PUSH
11426: LD_INT 0
11428: LESS
11429: IFFALSE 11441
// min_x := 0 else
11431: LD_ADDR_VAR 0 7
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
11439: GO 11457
// min_x := x - r ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_VAR 0 2
11450: PUSH
11451: LD_VAR 0 4
11455: MINUS
11456: ST_TO_ADDR
// if y - r < 0 then
11457: LD_VAR 0 3
11461: PUSH
11462: LD_VAR 0 4
11466: MINUS
11467: PUSH
11468: LD_INT 0
11470: LESS
11471: IFFALSE 11483
// min_y := 0 else
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
11481: GO 11499
// min_y := y - r ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 3
11492: PUSH
11493: LD_VAR 0 4
11497: MINUS
11498: ST_TO_ADDR
// max_x := x + r ;
11499: LD_ADDR_VAR 0 9
11503: PUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: PLUS
11514: ST_TO_ADDR
// max_y := y + r ;
11515: LD_ADDR_VAR 0 10
11519: PUSH
11520: LD_VAR 0 3
11524: PUSH
11525: LD_VAR 0 4
11529: PLUS
11530: ST_TO_ADDR
// for _x = min_x to max_x do
11531: LD_ADDR_VAR 0 11
11535: PUSH
11536: DOUBLE
11537: LD_VAR 0 7
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 9
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11666
// for _y = min_y to max_y do
11551: LD_ADDR_VAR 0 12
11555: PUSH
11556: DOUBLE
11557: LD_VAR 0 8
11561: DEC
11562: ST_TO_ADDR
11563: LD_VAR 0 10
11567: PUSH
11568: FOR_TO
11569: IFFALSE 11662
// begin if not ValidHex ( _x , _y ) then
11571: LD_VAR 0 11
11575: PPUSH
11576: LD_VAR 0 12
11580: PPUSH
11581: CALL_OW 488
11585: NOT
11586: IFFALSE 11590
// continue ;
11588: GO 11568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11590: LD_VAR 0 11
11594: PPUSH
11595: LD_VAR 0 12
11599: PPUSH
11600: CALL_OW 351
11604: PUSH
11605: LD_VAR 0 11
11609: PPUSH
11610: LD_VAR 0 12
11614: PPUSH
11615: CALL_OW 554
11619: AND
11620: IFFALSE 11660
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11622: LD_ADDR_VAR 0 13
11626: PUSH
11627: LD_VAR 0 13
11631: PPUSH
11632: LD_VAR 0 13
11636: PUSH
11637: LD_INT 1
11639: PLUS
11640: PPUSH
11641: LD_VAR 0 11
11645: PUSH
11646: LD_VAR 0 12
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PPUSH
11655: CALL_OW 2
11659: ST_TO_ADDR
// end ;
11660: GO 11568
11662: POP
11663: POP
11664: GO 11548
11666: POP
11667: POP
// if not list then
11668: LD_VAR 0 13
11672: NOT
11673: IFFALSE 11677
// exit ;
11675: GO 11748
// for i in list do
11677: LD_ADDR_VAR 0 6
11681: PUSH
11682: LD_VAR 0 13
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11746
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_STRING M
11697: PUSH
11698: LD_VAR 0 6
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PUSH
11707: LD_VAR 0 6
11711: PUSH
11712: LD_INT 2
11714: ARRAY
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: LD_INT 0
11721: PUSH
11722: LD_INT 0
11724: PUSH
11725: LD_INT 0
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: PPUSH
11740: CALL_OW 447
11744: GO 11687
11746: POP
11747: POP
// end ;
11748: LD_VAR 0 5
11752: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11753: LD_EXP 38
11757: NOT
11758: IFFALSE 11808
11760: GO 11762
11762: DISABLE
// begin initHack := true ;
11763: LD_ADDR_EXP 38
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// hackTanks := [ ] ;
11771: LD_ADDR_EXP 39
11775: PUSH
11776: EMPTY
11777: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11778: LD_ADDR_EXP 40
11782: PUSH
11783: EMPTY
11784: ST_TO_ADDR
// hackLimit := 3 ;
11785: LD_ADDR_EXP 41
11789: PUSH
11790: LD_INT 3
11792: ST_TO_ADDR
// hackDist := 12 ;
11793: LD_ADDR_EXP 42
11797: PUSH
11798: LD_INT 12
11800: ST_TO_ADDR
// hackCounter := [ ] ;
11801: LD_ADDR_EXP 43
11805: PUSH
11806: EMPTY
11807: ST_TO_ADDR
// end ;
11808: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11809: LD_EXP 38
11813: PUSH
11814: LD_INT 34
11816: PUSH
11817: LD_EXP 108
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: AND
11831: IFFALSE 12086
11833: GO 11835
11835: DISABLE
11836: LD_INT 0
11838: PPUSH
11839: PPUSH
// begin enable ;
11840: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 34
11848: PUSH
11849: LD_EXP 108
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 69
11862: PUSH
11863: FOR_IN
11864: IFFALSE 12084
// begin if not i in hackTanks then
11866: LD_VAR 0 1
11870: PUSH
11871: LD_EXP 39
11875: IN
11876: NOT
11877: IFFALSE 11960
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11879: LD_ADDR_EXP 39
11883: PUSH
11884: LD_EXP 39
11888: PPUSH
11889: LD_EXP 39
11893: PUSH
11894: LD_INT 1
11896: PLUS
11897: PPUSH
11898: LD_VAR 0 1
11902: PPUSH
11903: CALL_OW 1
11907: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11908: LD_ADDR_EXP 40
11912: PUSH
11913: LD_EXP 40
11917: PPUSH
11918: LD_EXP 40
11922: PUSH
11923: LD_INT 1
11925: PLUS
11926: PPUSH
11927: EMPTY
11928: PPUSH
11929: CALL_OW 1
11933: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11934: LD_ADDR_EXP 43
11938: PUSH
11939: LD_EXP 43
11943: PPUSH
11944: LD_EXP 43
11948: PUSH
11949: LD_INT 1
11951: PLUS
11952: PPUSH
11953: EMPTY
11954: PPUSH
11955: CALL_OW 1
11959: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 302
11969: NOT
11970: IFFALSE 11983
// begin HackUnlinkAll ( i ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL 12089 0 1
// continue ;
11981: GO 11863
// end ; HackCheckCapturedStatus ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 12532 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11992: LD_ADDR_VAR 0 2
11996: PUSH
11997: LD_INT 81
11999: PUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 255
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 33
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 91
12026: PUSH
12027: LD_VAR 0 1
12031: PUSH
12032: LD_EXP 42
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 50
12044: PUSH
12045: EMPTY
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: ST_TO_ADDR
// if not tmp then
12059: LD_VAR 0 2
12063: NOT
12064: IFFALSE 12068
// continue ;
12066: GO 11863
// HackLink ( i , tmp ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL 12225 0 2
// end ;
12082: GO 11863
12084: POP
12085: POP
// end ;
12086: PPOPN 2
12088: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
12093: PPUSH
// if not hack in hackTanks then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 39
12103: IN
12104: NOT
12105: IFFALSE 12109
// exit ;
12107: GO 12220
// index := GetElementIndex ( hackTanks , hack ) ;
12109: LD_ADDR_VAR 0 4
12113: PUSH
12114: LD_EXP 39
12118: PPUSH
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL 33647 0 2
12128: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12129: LD_EXP 40
12133: PUSH
12134: LD_VAR 0 4
12138: ARRAY
12139: IFFALSE 12220
// begin for i in hackTanksCaptured [ index ] do
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_EXP 40
12150: PUSH
12151: LD_VAR 0 4
12155: ARRAY
12156: PUSH
12157: FOR_IN
12158: IFFALSE 12184
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 1
12167: ARRAY
12168: PPUSH
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 2
12176: ARRAY
12177: PPUSH
12178: CALL_OW 235
12182: GO 12157
12184: POP
12185: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12186: LD_ADDR_EXP 40
12190: PUSH
12191: LD_EXP 40
12195: PPUSH
12196: LD_VAR 0 4
12200: PPUSH
12201: EMPTY
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12208: LD_VAR 0 1
12212: PPUSH
12213: LD_INT 0
12215: PPUSH
12216: CALL_OW 505
// end ; end ;
12220: LD_VAR 0 2
12224: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
// if not hack in hackTanks or not vehicles then
12230: LD_VAR 0 1
12234: PUSH
12235: LD_EXP 39
12239: IN
12240: NOT
12241: PUSH
12242: LD_VAR 0 2
12246: NOT
12247: OR
12248: IFFALSE 12252
// exit ;
12250: GO 12527
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: LD_VAR 0 1
12261: PPUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL 34297 0 4
12277: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 39
12287: PPUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: CALL 33647 0 2
12297: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12298: LD_EXP 40
12302: PUSH
12303: LD_VAR 0 5
12307: ARRAY
12308: PUSH
12309: LD_EXP 41
12313: LESS
12314: IFFALSE 12503
// begin for i := 1 to vehicles do
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: DOUBLE
12322: LD_INT 1
12324: DEC
12325: ST_TO_ADDR
12326: LD_VAR 0 2
12330: PUSH
12331: FOR_TO
12332: IFFALSE 12501
// begin if hackTanksCaptured [ index ] = hackLimit then
12334: LD_EXP 40
12338: PUSH
12339: LD_VAR 0 5
12343: ARRAY
12344: PUSH
12345: LD_EXP 41
12349: EQUAL
12350: IFFALSE 12354
// break ;
12352: GO 12501
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12354: LD_ADDR_EXP 43
12358: PUSH
12359: LD_EXP 43
12363: PPUSH
12364: LD_VAR 0 5
12368: PPUSH
12369: LD_EXP 43
12373: PUSH
12374: LD_VAR 0 5
12378: ARRAY
12379: PUSH
12380: LD_INT 1
12382: PLUS
12383: PPUSH
12384: CALL_OW 1
12388: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12389: LD_ADDR_EXP 40
12393: PUSH
12394: LD_EXP 40
12398: PPUSH
12399: LD_VAR 0 5
12403: PUSH
12404: LD_EXP 40
12408: PUSH
12409: LD_VAR 0 5
12413: ARRAY
12414: PUSH
12415: LD_INT 1
12417: PLUS
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: LD_VAR 0 2
12427: PUSH
12428: LD_VAR 0 4
12432: ARRAY
12433: PUSH
12434: LD_VAR 0 2
12438: PUSH
12439: LD_VAR 0 4
12443: ARRAY
12444: PPUSH
12445: CALL_OW 255
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL 33862 0 3
12458: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12459: LD_VAR 0 2
12463: PUSH
12464: LD_VAR 0 4
12468: ARRAY
12469: PPUSH
12470: LD_VAR 0 1
12474: PPUSH
12475: CALL_OW 255
12479: PPUSH
12480: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12484: LD_VAR 0 2
12488: PUSH
12489: LD_VAR 0 4
12493: ARRAY
12494: PPUSH
12495: CALL_OW 141
// end ;
12499: GO 12331
12501: POP
12502: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: LD_EXP 40
12512: PUSH
12513: LD_VAR 0 5
12517: ARRAY
12518: PUSH
12519: LD_INT 0
12521: PLUS
12522: PPUSH
12523: CALL_OW 505
// end ;
12527: LD_VAR 0 3
12531: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
12536: PPUSH
12537: PPUSH
// if not hack in hackTanks then
12538: LD_VAR 0 1
12542: PUSH
12543: LD_EXP 39
12547: IN
12548: NOT
12549: IFFALSE 12553
// exit ;
12551: GO 12793
// index := GetElementIndex ( hackTanks , hack ) ;
12553: LD_ADDR_VAR 0 4
12557: PUSH
12558: LD_EXP 39
12562: PPUSH
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL 33647 0 2
12572: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12573: LD_ADDR_VAR 0 3
12577: PUSH
12578: DOUBLE
12579: LD_EXP 40
12583: PUSH
12584: LD_VAR 0 4
12588: ARRAY
12589: INC
12590: ST_TO_ADDR
12591: LD_INT 1
12593: PUSH
12594: FOR_DOWNTO
12595: IFFALSE 12767
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12597: LD_ADDR_VAR 0 5
12601: PUSH
12602: LD_EXP 40
12606: PUSH
12607: LD_VAR 0 4
12611: ARRAY
12612: PUSH
12613: LD_VAR 0 3
12617: ARRAY
12618: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12619: LD_VAR 0 5
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PPUSH
12628: CALL_OW 302
12632: NOT
12633: PUSH
12634: LD_VAR 0 5
12638: PUSH
12639: LD_INT 1
12641: ARRAY
12642: PPUSH
12643: CALL_OW 255
12647: PUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 255
12657: NONEQUAL
12658: OR
12659: IFFALSE 12765
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12661: LD_VAR 0 5
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PPUSH
12670: CALL_OW 305
12674: PUSH
12675: LD_VAR 0 5
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PPUSH
12684: CALL_OW 255
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 255
12698: EQUAL
12699: AND
12700: IFFALSE 12724
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12702: LD_VAR 0 5
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 5
12715: PUSH
12716: LD_INT 2
12718: ARRAY
12719: PPUSH
12720: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12724: LD_ADDR_EXP 40
12728: PUSH
12729: LD_EXP 40
12733: PPUSH
12734: LD_VAR 0 4
12738: PPUSH
12739: LD_EXP 40
12743: PUSH
12744: LD_VAR 0 4
12748: ARRAY
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 3
12759: PPUSH
12760: CALL_OW 1
12764: ST_TO_ADDR
// end ; end ;
12765: GO 12594
12767: POP
12768: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12769: LD_VAR 0 1
12773: PPUSH
12774: LD_EXP 40
12778: PUSH
12779: LD_VAR 0 4
12783: ARRAY
12784: PUSH
12785: LD_INT 0
12787: PLUS
12788: PPUSH
12789: CALL_OW 505
// end ;
12793: LD_VAR 0 2
12797: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12798: LD_INT 0
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// if not hack in hackTanks then
12804: LD_VAR 0 1
12808: PUSH
12809: LD_EXP 39
12813: IN
12814: NOT
12815: IFFALSE 12819
// exit ;
12817: GO 12904
// index := GetElementIndex ( hackTanks , hack ) ;
12819: LD_ADDR_VAR 0 5
12823: PUSH
12824: LD_EXP 39
12828: PPUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: CALL 33647 0 2
12838: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12839: LD_ADDR_VAR 0 4
12843: PUSH
12844: DOUBLE
12845: LD_INT 1
12847: DEC
12848: ST_TO_ADDR
12849: LD_EXP 40
12853: PUSH
12854: LD_VAR 0 5
12858: ARRAY
12859: PUSH
12860: FOR_TO
12861: IFFALSE 12902
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12863: LD_EXP 40
12867: PUSH
12868: LD_VAR 0 5
12872: ARRAY
12873: PUSH
12874: LD_VAR 0 4
12878: ARRAY
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_VAR 0 2
12888: EQUAL
12889: IFFALSE 12900
// KillUnit ( vehicle ) ;
12891: LD_VAR 0 2
12895: PPUSH
12896: CALL_OW 66
12900: GO 12860
12902: POP
12903: POP
// end ;
12904: LD_VAR 0 3
12908: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12909: LD_EXP 44
12913: NOT
12914: IFFALSE 12949
12916: GO 12918
12918: DISABLE
// begin initMiner := true ;
12919: LD_ADDR_EXP 44
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// minersList := [ ] ;
12927: LD_ADDR_EXP 45
12931: PUSH
12932: EMPTY
12933: ST_TO_ADDR
// minerMinesList := [ ] ;
12934: LD_ADDR_EXP 46
12938: PUSH
12939: EMPTY
12940: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12941: LD_ADDR_EXP 47
12945: PUSH
12946: LD_INT 5
12948: ST_TO_ADDR
// end ;
12949: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12950: LD_EXP 44
12954: PUSH
12955: LD_INT 34
12957: PUSH
12958: LD_EXP 113
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: AND
12972: IFFALSE 13435
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
// begin enable ;
12983: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12984: LD_ADDR_VAR 0 1
12988: PUSH
12989: LD_INT 34
12991: PUSH
12992: LD_EXP 113
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 69
13005: PUSH
13006: FOR_IN
13007: IFFALSE 13079
// begin if not i in minersList then
13009: LD_VAR 0 1
13013: PUSH
13014: LD_EXP 45
13018: IN
13019: NOT
13020: IFFALSE 13077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13022: LD_ADDR_EXP 45
13026: PUSH
13027: LD_EXP 45
13031: PPUSH
13032: LD_EXP 45
13036: PUSH
13037: LD_INT 1
13039: PLUS
13040: PPUSH
13041: LD_VAR 0 1
13045: PPUSH
13046: CALL_OW 1
13050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13051: LD_ADDR_EXP 46
13055: PUSH
13056: LD_EXP 46
13060: PPUSH
13061: LD_EXP 46
13065: PUSH
13066: LD_INT 1
13068: PLUS
13069: PPUSH
13070: EMPTY
13071: PPUSH
13072: CALL_OW 1
13076: ST_TO_ADDR
// end end ;
13077: GO 13006
13079: POP
13080: POP
// for i := minerMinesList downto 1 do
13081: LD_ADDR_VAR 0 1
13085: PUSH
13086: DOUBLE
13087: LD_EXP 46
13091: INC
13092: ST_TO_ADDR
13093: LD_INT 1
13095: PUSH
13096: FOR_DOWNTO
13097: IFFALSE 13433
// begin if IsLive ( minersList [ i ] ) then
13099: LD_EXP 45
13103: PUSH
13104: LD_VAR 0 1
13108: ARRAY
13109: PPUSH
13110: CALL_OW 300
13114: IFFALSE 13142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13116: LD_EXP 45
13120: PUSH
13121: LD_VAR 0 1
13125: ARRAY
13126: PPUSH
13127: LD_EXP 46
13131: PUSH
13132: LD_VAR 0 1
13136: ARRAY
13137: PPUSH
13138: CALL_OW 505
// if not minerMinesList [ i ] then
13142: LD_EXP 46
13146: PUSH
13147: LD_VAR 0 1
13151: ARRAY
13152: NOT
13153: IFFALSE 13157
// continue ;
13155: GO 13096
// for j := minerMinesList [ i ] downto 1 do
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: DOUBLE
13163: LD_EXP 46
13167: PUSH
13168: LD_VAR 0 1
13172: ARRAY
13173: INC
13174: ST_TO_ADDR
13175: LD_INT 1
13177: PUSH
13178: FOR_DOWNTO
13179: IFFALSE 13429
// begin side := GetSide ( minersList [ i ] ) ;
13181: LD_ADDR_VAR 0 3
13185: PUSH
13186: LD_EXP 45
13190: PUSH
13191: LD_VAR 0 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 255
13201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_EXP 46
13211: PUSH
13212: LD_VAR 0 1
13216: ARRAY
13217: PUSH
13218: LD_VAR 0 2
13222: ARRAY
13223: PUSH
13224: LD_INT 1
13226: ARRAY
13227: PPUSH
13228: LD_EXP 46
13232: PUSH
13233: LD_VAR 0 1
13237: ARRAY
13238: PUSH
13239: LD_VAR 0 2
13243: ARRAY
13244: PUSH
13245: LD_INT 2
13247: ARRAY
13248: PPUSH
13249: CALL_OW 428
13253: ST_TO_ADDR
// if not tmp then
13254: LD_VAR 0 4
13258: NOT
13259: IFFALSE 13263
// continue ;
13261: GO 13178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13263: LD_VAR 0 4
13267: PUSH
13268: LD_INT 81
13270: PUSH
13271: LD_VAR 0 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: IN
13285: PUSH
13286: LD_EXP 46
13290: PUSH
13291: LD_VAR 0 1
13295: ARRAY
13296: PUSH
13297: LD_VAR 0 2
13301: ARRAY
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_EXP 46
13311: PUSH
13312: LD_VAR 0 1
13316: ARRAY
13317: PUSH
13318: LD_VAR 0 2
13322: ARRAY
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: PPUSH
13328: CALL_OW 458
13332: AND
13333: IFFALSE 13427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13335: LD_EXP 46
13339: PUSH
13340: LD_VAR 0 1
13344: ARRAY
13345: PUSH
13346: LD_VAR 0 2
13350: ARRAY
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: LD_EXP 46
13360: PUSH
13361: LD_VAR 0 1
13365: ARRAY
13366: PUSH
13367: LD_VAR 0 2
13371: ARRAY
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13386: LD_ADDR_EXP 46
13390: PUSH
13391: LD_EXP 46
13395: PPUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: LD_EXP 46
13405: PUSH
13406: LD_VAR 0 1
13410: ARRAY
13411: PPUSH
13412: LD_VAR 0 2
13416: PPUSH
13417: CALL_OW 3
13421: PPUSH
13422: CALL_OW 1
13426: ST_TO_ADDR
// end ; end ;
13427: GO 13178
13429: POP
13430: POP
// end ;
13431: GO 13096
13433: POP
13434: POP
// end ;
13435: PPOPN 4
13437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
// result := false ;
13442: LD_ADDR_VAR 0 4
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 264
13459: PUSH
13460: LD_EXP 113
13464: EQUAL
13465: NOT
13466: IFFALSE 13470
// exit ;
13468: GO 13710
// index := GetElementIndex ( minersList , unit ) ;
13470: LD_ADDR_VAR 0 5
13474: PUSH
13475: LD_EXP 45
13479: PPUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL 33647 0 2
13489: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13490: LD_EXP 46
13494: PUSH
13495: LD_VAR 0 5
13499: ARRAY
13500: PUSH
13501: LD_EXP 47
13505: GREATEREQUAL
13506: IFFALSE 13510
// exit ;
13508: GO 13710
// ComMoveXY ( unit , x , y ) ;
13510: LD_VAR 0 1
13514: PPUSH
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13529: LD_INT 35
13531: PPUSH
13532: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13536: LD_VAR 0 1
13540: PPUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: CALL 64419 0 3
13555: NOT
13556: PUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 314
13566: AND
13567: IFFALSE 13571
// exit ;
13569: GO 13710
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13571: LD_VAR 0 2
13575: PPUSH
13576: LD_VAR 0 3
13580: PPUSH
13581: CALL_OW 428
13585: PUSH
13586: LD_VAR 0 1
13590: EQUAL
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 314
13601: NOT
13602: AND
13603: IFFALSE 13529
// PlaySoundXY ( x , y , PlantMine ) ;
13605: LD_VAR 0 2
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_STRING PlantMine
13617: PPUSH
13618: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13622: LD_VAR 0 2
13626: PPUSH
13627: LD_VAR 0 3
13631: PPUSH
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 255
13641: PPUSH
13642: LD_INT 0
13644: PPUSH
13645: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13649: LD_ADDR_EXP 46
13653: PUSH
13654: LD_EXP 46
13658: PPUSH
13659: LD_VAR 0 5
13663: PUSH
13664: LD_EXP 46
13668: PUSH
13669: LD_VAR 0 5
13673: ARRAY
13674: PUSH
13675: LD_INT 1
13677: PLUS
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: LD_VAR 0 2
13687: PUSH
13688: LD_VAR 0 3
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL 33862 0 3
13701: ST_TO_ADDR
// result := true ;
13702: LD_ADDR_VAR 0 4
13706: PUSH
13707: LD_INT 1
13709: ST_TO_ADDR
// end ;
13710: LD_VAR 0 4
13714: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13715: LD_INT 0
13717: PPUSH
13718: PPUSH
13719: PPUSH
// if not unit in minersList then
13720: LD_VAR 0 1
13724: PUSH
13725: LD_EXP 45
13729: IN
13730: NOT
13731: IFFALSE 13735
// exit ;
13733: GO 14127
// index := GetElementIndex ( minersList , unit ) ;
13735: LD_ADDR_VAR 0 6
13739: PUSH
13740: LD_EXP 45
13744: PPUSH
13745: LD_VAR 0 1
13749: PPUSH
13750: CALL 33647 0 2
13754: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: DOUBLE
13761: LD_EXP 46
13765: PUSH
13766: LD_VAR 0 6
13770: ARRAY
13771: INC
13772: ST_TO_ADDR
13773: LD_INT 1
13775: PUSH
13776: FOR_DOWNTO
13777: IFFALSE 13938
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13779: LD_EXP 46
13783: PUSH
13784: LD_VAR 0 6
13788: ARRAY
13789: PUSH
13790: LD_VAR 0 5
13794: ARRAY
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PUSH
13800: LD_VAR 0 2
13804: EQUAL
13805: PUSH
13806: LD_EXP 46
13810: PUSH
13811: LD_VAR 0 6
13815: ARRAY
13816: PUSH
13817: LD_VAR 0 5
13821: ARRAY
13822: PUSH
13823: LD_INT 2
13825: ARRAY
13826: PUSH
13827: LD_VAR 0 3
13831: EQUAL
13832: AND
13833: IFFALSE 13936
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13835: LD_EXP 46
13839: PUSH
13840: LD_VAR 0 6
13844: ARRAY
13845: PUSH
13846: LD_VAR 0 5
13850: ARRAY
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: LD_EXP 46
13860: PUSH
13861: LD_VAR 0 6
13865: ARRAY
13866: PUSH
13867: LD_VAR 0 5
13871: ARRAY
13872: PUSH
13873: LD_INT 2
13875: ARRAY
13876: PPUSH
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 255
13886: PPUSH
13887: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13891: LD_ADDR_EXP 46
13895: PUSH
13896: LD_EXP 46
13900: PPUSH
13901: LD_VAR 0 6
13905: PPUSH
13906: LD_EXP 46
13910: PUSH
13911: LD_VAR 0 6
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 5
13921: PPUSH
13922: CALL_OW 3
13926: PPUSH
13927: CALL_OW 1
13931: ST_TO_ADDR
// exit ;
13932: POP
13933: POP
13934: GO 14127
// end ; end ;
13936: GO 13776
13938: POP
13939: POP
// for i := minerMinesList [ index ] downto 1 do
13940: LD_ADDR_VAR 0 5
13944: PUSH
13945: DOUBLE
13946: LD_EXP 46
13950: PUSH
13951: LD_VAR 0 6
13955: ARRAY
13956: INC
13957: ST_TO_ADDR
13958: LD_INT 1
13960: PUSH
13961: FOR_DOWNTO
13962: IFFALSE 14125
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13964: LD_EXP 46
13968: PUSH
13969: LD_VAR 0 6
13973: ARRAY
13974: PUSH
13975: LD_VAR 0 5
13979: ARRAY
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_EXP 46
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PUSH
13996: LD_VAR 0 5
14000: ARRAY
14001: PUSH
14002: LD_INT 2
14004: ARRAY
14005: PPUSH
14006: LD_VAR 0 2
14010: PPUSH
14011: LD_VAR 0 3
14015: PPUSH
14016: CALL_OW 298
14020: PUSH
14021: LD_INT 6
14023: LESS
14024: IFFALSE 14123
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14026: LD_EXP 46
14030: PUSH
14031: LD_VAR 0 6
14035: ARRAY
14036: PUSH
14037: LD_VAR 0 5
14041: ARRAY
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: LD_EXP 46
14051: PUSH
14052: LD_VAR 0 6
14056: ARRAY
14057: PUSH
14058: LD_VAR 0 5
14062: ARRAY
14063: PUSH
14064: LD_INT 2
14066: ARRAY
14067: PPUSH
14068: LD_VAR 0 1
14072: PPUSH
14073: CALL_OW 255
14077: PPUSH
14078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14082: LD_ADDR_EXP 46
14086: PUSH
14087: LD_EXP 46
14091: PPUSH
14092: LD_VAR 0 6
14096: PPUSH
14097: LD_EXP 46
14101: PUSH
14102: LD_VAR 0 6
14106: ARRAY
14107: PPUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 3
14117: PPUSH
14118: CALL_OW 1
14122: ST_TO_ADDR
// end ; end ;
14123: GO 13961
14125: POP
14126: POP
// end ;
14127: LD_VAR 0 4
14131: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
14136: PPUSH
14137: PPUSH
14138: PPUSH
14139: PPUSH
14140: PPUSH
14141: PPUSH
14142: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 264
14152: PUSH
14153: LD_EXP 113
14157: EQUAL
14158: NOT
14159: PUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_EXP 45
14169: IN
14170: NOT
14171: OR
14172: IFFALSE 14176
// exit ;
14174: GO 14498
// index := GetElementIndex ( minersList , unit ) ;
14176: LD_ADDR_VAR 0 6
14180: PUSH
14181: LD_EXP 45
14185: PPUSH
14186: LD_VAR 0 1
14190: PPUSH
14191: CALL 33647 0 2
14195: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14196: LD_ADDR_VAR 0 8
14200: PUSH
14201: LD_EXP 47
14205: PUSH
14206: LD_EXP 46
14210: PUSH
14211: LD_VAR 0 6
14215: ARRAY
14216: MINUS
14217: ST_TO_ADDR
// if not minesFreeAmount then
14218: LD_VAR 0 8
14222: NOT
14223: IFFALSE 14227
// exit ;
14225: GO 14498
// tmp := [ ] ;
14227: LD_ADDR_VAR 0 7
14231: PUSH
14232: EMPTY
14233: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14234: LD_ADDR_VAR 0 5
14238: PUSH
14239: DOUBLE
14240: LD_INT 1
14242: DEC
14243: ST_TO_ADDR
14244: LD_VAR 0 8
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14445
// begin _d := rand ( 0 , 5 ) ;
14252: LD_ADDR_VAR 0 11
14256: PUSH
14257: LD_INT 0
14259: PPUSH
14260: LD_INT 5
14262: PPUSH
14263: CALL_OW 12
14267: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14268: LD_ADDR_VAR 0 12
14272: PUSH
14273: LD_INT 2
14275: PPUSH
14276: LD_INT 6
14278: PPUSH
14279: CALL_OW 12
14283: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14284: LD_ADDR_VAR 0 9
14288: PUSH
14289: LD_VAR 0 2
14293: PPUSH
14294: LD_VAR 0 11
14298: PPUSH
14299: LD_VAR 0 12
14303: PPUSH
14304: CALL_OW 272
14308: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14309: LD_ADDR_VAR 0 10
14313: PUSH
14314: LD_VAR 0 3
14318: PPUSH
14319: LD_VAR 0 11
14323: PPUSH
14324: LD_VAR 0 12
14328: PPUSH
14329: CALL_OW 273
14333: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14334: LD_VAR 0 9
14338: PPUSH
14339: LD_VAR 0 10
14343: PPUSH
14344: CALL_OW 488
14348: PUSH
14349: LD_VAR 0 9
14353: PUSH
14354: LD_VAR 0 10
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_VAR 0 7
14367: IN
14368: NOT
14369: AND
14370: PUSH
14371: LD_VAR 0 9
14375: PPUSH
14376: LD_VAR 0 10
14380: PPUSH
14381: CALL_OW 458
14385: NOT
14386: AND
14387: IFFALSE 14429
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14389: LD_ADDR_VAR 0 7
14393: PUSH
14394: LD_VAR 0 7
14398: PPUSH
14399: LD_VAR 0 7
14403: PUSH
14404: LD_INT 1
14406: PLUS
14407: PPUSH
14408: LD_VAR 0 9
14412: PUSH
14413: LD_VAR 0 10
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 1
14426: ST_TO_ADDR
14427: GO 14443
// i := i - 1 ;
14429: LD_ADDR_VAR 0 5
14433: PUSH
14434: LD_VAR 0 5
14438: PUSH
14439: LD_INT 1
14441: MINUS
14442: ST_TO_ADDR
// end ;
14443: GO 14249
14445: POP
14446: POP
// for i in tmp do
14447: LD_ADDR_VAR 0 5
14451: PUSH
14452: LD_VAR 0 7
14456: PUSH
14457: FOR_IN
14458: IFFALSE 14496
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14460: LD_VAR 0 1
14464: PPUSH
14465: LD_VAR 0 5
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_VAR 0 5
14478: PUSH
14479: LD_INT 2
14481: ARRAY
14482: PPUSH
14483: CALL 13438 0 3
14487: NOT
14488: IFFALSE 14494
// exit ;
14490: POP
14491: POP
14492: GO 14498
14494: GO 14457
14496: POP
14497: POP
// end ;
14498: LD_VAR 0 4
14502: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14503: LD_INT 0
14505: PPUSH
14506: PPUSH
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
// if not GetClass ( unit ) = class_sniper then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 257
14521: PUSH
14522: LD_INT 5
14524: EQUAL
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14918
// dist := 8 ;
14530: LD_ADDR_VAR 0 5
14534: PUSH
14535: LD_INT 8
14537: ST_TO_ADDR
// viewRange := 12 ;
14538: LD_ADDR_VAR 0 7
14542: PUSH
14543: LD_INT 12
14545: ST_TO_ADDR
// side := GetSide ( unit ) ;
14546: LD_ADDR_VAR 0 6
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 255
14560: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14561: LD_INT 61
14563: PPUSH
14564: LD_VAR 0 6
14568: PPUSH
14569: CALL_OW 321
14573: PUSH
14574: LD_INT 2
14576: EQUAL
14577: IFFALSE 14587
// viewRange := 16 ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_INT 16
14586: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14587: LD_VAR 0 1
14591: PPUSH
14592: LD_VAR 0 2
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: CALL_OW 297
14606: PUSH
14607: LD_VAR 0 5
14611: GREATER
14612: IFFALSE 14691
// begin ComMoveXY ( unit , x , y ) ;
14614: LD_VAR 0 1
14618: PPUSH
14619: LD_VAR 0 2
14623: PPUSH
14624: LD_VAR 0 3
14628: PPUSH
14629: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14633: LD_INT 35
14635: PPUSH
14636: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_VAR 0 2
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL 64419 0 3
14659: NOT
14660: IFFALSE 14664
// exit ;
14662: GO 14918
// until GetDistUnitXY ( unit , x , y ) < dist ;
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: LESS
14689: IFFALSE 14633
// end ; ComTurnXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 118
// wait ( 5 ) ;
14710: LD_INT 5
14712: PPUSH
14713: CALL_OW 67
// _d := GetDir ( unit ) ;
14717: LD_ADDR_VAR 0 10
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: CALL_OW 254
14731: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14732: LD_ADDR_VAR 0 8
14736: PUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 250
14746: PPUSH
14747: LD_VAR 0 10
14751: PPUSH
14752: LD_VAR 0 5
14756: PPUSH
14757: CALL_OW 272
14761: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14762: LD_ADDR_VAR 0 9
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 251
14776: PPUSH
14777: LD_VAR 0 10
14781: PPUSH
14782: LD_VAR 0 5
14786: PPUSH
14787: CALL_OW 273
14791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14792: LD_VAR 0 8
14796: PPUSH
14797: LD_VAR 0 9
14801: PPUSH
14802: CALL_OW 488
14806: NOT
14807: IFFALSE 14811
// exit ;
14809: GO 14918
// ComAnimCustom ( unit , 1 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14823: LD_VAR 0 8
14827: PPUSH
14828: LD_VAR 0 9
14832: PPUSH
14833: LD_VAR 0 6
14837: PPUSH
14838: LD_VAR 0 7
14842: PPUSH
14843: CALL_OW 330
// repeat wait ( 1 ) ;
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 316
14863: PUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 314
14873: OR
14874: PUSH
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL_OW 302
14884: NOT
14885: OR
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: OR
14897: IFFALSE 14847
// RemoveSeeing ( _x , _y , side ) ;
14899: LD_VAR 0 8
14903: PPUSH
14904: LD_VAR 0 9
14908: PPUSH
14909: LD_VAR 0 6
14913: PPUSH
14914: CALL_OW 331
// end ; end_of_file
14918: LD_VAR 0 4
14922: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14923: LD_INT 0
14925: PPUSH
// if p2 = 100 then
14926: LD_VAR 0 2
14930: PUSH
14931: LD_INT 100
14933: EQUAL
14934: IFFALSE 15937
// begin if not StreamModeActive then
14936: LD_EXP 48
14940: NOT
14941: IFFALSE 14951
// StreamModeActive := true ;
14943: LD_ADDR_EXP 48
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// if p3 = 0 then
14951: LD_VAR 0 3
14955: PUSH
14956: LD_INT 0
14958: EQUAL
14959: IFFALSE 14965
// InitStreamMode ;
14961: CALL 16097 0 0
// if p3 = 1 then
14965: LD_VAR 0 3
14969: PUSH
14970: LD_INT 1
14972: EQUAL
14973: IFFALSE 14983
// sRocket := true ;
14975: LD_ADDR_EXP 53
14979: PUSH
14980: LD_INT 1
14982: ST_TO_ADDR
// if p3 = 2 then
14983: LD_VAR 0 3
14987: PUSH
14988: LD_INT 2
14990: EQUAL
14991: IFFALSE 15001
// sSpeed := true ;
14993: LD_ADDR_EXP 52
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if p3 = 3 then
15001: LD_VAR 0 3
15005: PUSH
15006: LD_INT 3
15008: EQUAL
15009: IFFALSE 15019
// sEngine := true ;
15011: LD_ADDR_EXP 54
15015: PUSH
15016: LD_INT 1
15018: ST_TO_ADDR
// if p3 = 4 then
15019: LD_VAR 0 3
15023: PUSH
15024: LD_INT 4
15026: EQUAL
15027: IFFALSE 15037
// sSpec := true ;
15029: LD_ADDR_EXP 51
15033: PUSH
15034: LD_INT 1
15036: ST_TO_ADDR
// if p3 = 5 then
15037: LD_VAR 0 3
15041: PUSH
15042: LD_INT 5
15044: EQUAL
15045: IFFALSE 15055
// sLevel := true ;
15047: LD_ADDR_EXP 55
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// if p3 = 6 then
15055: LD_VAR 0 3
15059: PUSH
15060: LD_INT 6
15062: EQUAL
15063: IFFALSE 15073
// sArmoury := true ;
15065: LD_ADDR_EXP 56
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// if p3 = 7 then
15073: LD_VAR 0 3
15077: PUSH
15078: LD_INT 7
15080: EQUAL
15081: IFFALSE 15091
// sRadar := true ;
15083: LD_ADDR_EXP 57
15087: PUSH
15088: LD_INT 1
15090: ST_TO_ADDR
// if p3 = 8 then
15091: LD_VAR 0 3
15095: PUSH
15096: LD_INT 8
15098: EQUAL
15099: IFFALSE 15109
// sBunker := true ;
15101: LD_ADDR_EXP 58
15105: PUSH
15106: LD_INT 1
15108: ST_TO_ADDR
// if p3 = 9 then
15109: LD_VAR 0 3
15113: PUSH
15114: LD_INT 9
15116: EQUAL
15117: IFFALSE 15127
// sHack := true ;
15119: LD_ADDR_EXP 59
15123: PUSH
15124: LD_INT 1
15126: ST_TO_ADDR
// if p3 = 10 then
15127: LD_VAR 0 3
15131: PUSH
15132: LD_INT 10
15134: EQUAL
15135: IFFALSE 15145
// sFire := true ;
15137: LD_ADDR_EXP 60
15141: PUSH
15142: LD_INT 1
15144: ST_TO_ADDR
// if p3 = 11 then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_INT 11
15152: EQUAL
15153: IFFALSE 15163
// sRefresh := true ;
15155: LD_ADDR_EXP 61
15159: PUSH
15160: LD_INT 1
15162: ST_TO_ADDR
// if p3 = 12 then
15163: LD_VAR 0 3
15167: PUSH
15168: LD_INT 12
15170: EQUAL
15171: IFFALSE 15181
// sExp := true ;
15173: LD_ADDR_EXP 62
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// if p3 = 13 then
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 13
15188: EQUAL
15189: IFFALSE 15199
// sDepot := true ;
15191: LD_ADDR_EXP 63
15195: PUSH
15196: LD_INT 1
15198: ST_TO_ADDR
// if p3 = 14 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 14
15206: EQUAL
15207: IFFALSE 15217
// sFlag := true ;
15209: LD_ADDR_EXP 64
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 15 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 15
15224: EQUAL
15225: IFFALSE 15235
// sKamikadze := true ;
15227: LD_ADDR_EXP 72
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 16 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 16
15242: EQUAL
15243: IFFALSE 15253
// sTroll := true ;
15245: LD_ADDR_EXP 73
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 17 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 17
15260: EQUAL
15261: IFFALSE 15271
// sSlow := true ;
15263: LD_ADDR_EXP 74
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 18 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 18
15278: EQUAL
15279: IFFALSE 15289
// sLack := true ;
15281: LD_ADDR_EXP 75
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 19 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 19
15296: EQUAL
15297: IFFALSE 15307
// sTank := true ;
15299: LD_ADDR_EXP 77
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 20 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 20
15314: EQUAL
15315: IFFALSE 15325
// sRemote := true ;
15317: LD_ADDR_EXP 78
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 21 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 21
15332: EQUAL
15333: IFFALSE 15343
// sPowell := true ;
15335: LD_ADDR_EXP 79
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 22 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 22
15350: EQUAL
15351: IFFALSE 15361
// sTeleport := true ;
15353: LD_ADDR_EXP 82
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 23 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 23
15368: EQUAL
15369: IFFALSE 15379
// sOilTower := true ;
15371: LD_ADDR_EXP 84
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 24 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 24
15386: EQUAL
15387: IFFALSE 15397
// sShovel := true ;
15389: LD_ADDR_EXP 85
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 25 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 25
15404: EQUAL
15405: IFFALSE 15415
// sSheik := true ;
15407: LD_ADDR_EXP 86
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 26 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 26
15422: EQUAL
15423: IFFALSE 15433
// sEarthquake := true ;
15425: LD_ADDR_EXP 88
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 27 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 27
15440: EQUAL
15441: IFFALSE 15451
// sAI := true ;
15443: LD_ADDR_EXP 89
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 28 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 28
15458: EQUAL
15459: IFFALSE 15469
// sCargo := true ;
15461: LD_ADDR_EXP 92
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 29 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 29
15476: EQUAL
15477: IFFALSE 15487
// sDLaser := true ;
15479: LD_ADDR_EXP 93
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 30 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 30
15494: EQUAL
15495: IFFALSE 15505
// sExchange := true ;
15497: LD_ADDR_EXP 94
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 31 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 31
15512: EQUAL
15513: IFFALSE 15523
// sFac := true ;
15515: LD_ADDR_EXP 95
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 32 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 32
15530: EQUAL
15531: IFFALSE 15541
// sPower := true ;
15533: LD_ADDR_EXP 96
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 33 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 33
15548: EQUAL
15549: IFFALSE 15559
// sRandom := true ;
15551: LD_ADDR_EXP 97
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 34 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 34
15566: EQUAL
15567: IFFALSE 15577
// sShield := true ;
15569: LD_ADDR_EXP 98
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 35 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 35
15584: EQUAL
15585: IFFALSE 15595
// sTime := true ;
15587: LD_ADDR_EXP 99
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 36 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 36
15602: EQUAL
15603: IFFALSE 15613
// sTools := true ;
15605: LD_ADDR_EXP 100
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 101 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 101
15620: EQUAL
15621: IFFALSE 15631
// sSold := true ;
15623: LD_ADDR_EXP 65
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 102 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 102
15638: EQUAL
15639: IFFALSE 15649
// sDiff := true ;
15641: LD_ADDR_EXP 66
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 103 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 103
15656: EQUAL
15657: IFFALSE 15667
// sFog := true ;
15659: LD_ADDR_EXP 69
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 104 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 104
15674: EQUAL
15675: IFFALSE 15685
// sReset := true ;
15677: LD_ADDR_EXP 70
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 105 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 105
15692: EQUAL
15693: IFFALSE 15703
// sSun := true ;
15695: LD_ADDR_EXP 71
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 106 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 106
15710: EQUAL
15711: IFFALSE 15721
// sTiger := true ;
15713: LD_ADDR_EXP 67
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 107 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 107
15728: EQUAL
15729: IFFALSE 15739
// sBomb := true ;
15731: LD_ADDR_EXP 68
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 108 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 108
15746: EQUAL
15747: IFFALSE 15757
// sWound := true ;
15749: LD_ADDR_EXP 76
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 109 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 109
15764: EQUAL
15765: IFFALSE 15775
// sBetray := true ;
15767: LD_ADDR_EXP 80
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 110 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 110
15782: EQUAL
15783: IFFALSE 15793
// sContamin := true ;
15785: LD_ADDR_EXP 81
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 111 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 111
15800: EQUAL
15801: IFFALSE 15811
// sOil := true ;
15803: LD_ADDR_EXP 83
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 112 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 112
15818: EQUAL
15819: IFFALSE 15829
// sStu := true ;
15821: LD_ADDR_EXP 87
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 113 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 113
15836: EQUAL
15837: IFFALSE 15847
// sBazooka := true ;
15839: LD_ADDR_EXP 90
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 114 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 114
15854: EQUAL
15855: IFFALSE 15865
// sMortar := true ;
15857: LD_ADDR_EXP 91
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 115 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 115
15872: EQUAL
15873: IFFALSE 15883
// sRanger := true ;
15875: LD_ADDR_EXP 101
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 116 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 116
15890: EQUAL
15891: IFFALSE 15901
// sComputer := true ;
15893: LD_ADDR_EXP 102
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 117 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 117
15908: EQUAL
15909: IFFALSE 15919
// s30 := true ;
15911: LD_ADDR_EXP 103
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 118 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 118
15926: EQUAL
15927: IFFALSE 15937
// s60 := true ;
15929: LD_ADDR_EXP 104
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// end ; if p2 = 101 then
15937: LD_VAR 0 2
15941: PUSH
15942: LD_INT 101
15944: EQUAL
15945: IFFALSE 16073
// begin case p3 of 1 :
15947: LD_VAR 0 3
15951: PUSH
15952: LD_INT 1
15954: DOUBLE
15955: EQUAL
15956: IFTRUE 15960
15958: GO 15967
15960: POP
// hHackUnlimitedResources ; 2 :
15961: CALL 27669 0 0
15965: GO 16073
15967: LD_INT 2
15969: DOUBLE
15970: EQUAL
15971: IFTRUE 15975
15973: GO 15982
15975: POP
// hHackSetLevel10 ; 3 :
15976: CALL 27802 0 0
15980: GO 16073
15982: LD_INT 3
15984: DOUBLE
15985: EQUAL
15986: IFTRUE 15990
15988: GO 15997
15990: POP
// hHackSetLevel10YourUnits ; 4 :
15991: CALL 27887 0 0
15995: GO 16073
15997: LD_INT 4
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16012
16005: POP
// hHackInvincible ; 5 :
16006: CALL 28335 0 0
16010: GO 16073
16012: LD_INT 5
16014: DOUBLE
16015: EQUAL
16016: IFTRUE 16020
16018: GO 16027
16020: POP
// hHackInvisible ; 6 :
16021: CALL 28446 0 0
16025: GO 16073
16027: LD_INT 6
16029: DOUBLE
16030: EQUAL
16031: IFTRUE 16035
16033: GO 16042
16035: POP
// hHackChangeYourSide ; 7 :
16036: CALL 28503 0 0
16040: GO 16073
16042: LD_INT 7
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16057
16050: POP
// hHackChangeUnitSide ; 8 :
16051: CALL 28545 0 0
16055: GO 16073
16057: LD_INT 8
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16072
16065: POP
// hHackFog ; end ;
16066: CALL 28646 0 0
16070: GO 16073
16072: POP
// end ; end ;
16073: LD_VAR 0 7
16077: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16078: GO 16080
16080: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16081: LD_STRING initStreamRollete();
16083: PPUSH
16084: CALL_OW 559
// InitStreamMode ;
16088: CALL 16097 0 0
// DefineStreamItems ( ) ;
16092: CALL 16561 0 0
// end ;
16096: END
// function InitStreamMode ; begin
16097: LD_INT 0
16099: PPUSH
// streamModeActive := false ;
16100: LD_ADDR_EXP 48
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
// normalCounter := 36 ;
16108: LD_ADDR_EXP 49
16112: PUSH
16113: LD_INT 36
16115: ST_TO_ADDR
// hardcoreCounter := 16 ;
16116: LD_ADDR_EXP 50
16120: PUSH
16121: LD_INT 16
16123: ST_TO_ADDR
// sRocket := false ;
16124: LD_ADDR_EXP 53
16128: PUSH
16129: LD_INT 0
16131: ST_TO_ADDR
// sSpeed := false ;
16132: LD_ADDR_EXP 52
16136: PUSH
16137: LD_INT 0
16139: ST_TO_ADDR
// sEngine := false ;
16140: LD_ADDR_EXP 54
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// sSpec := false ;
16148: LD_ADDR_EXP 51
16152: PUSH
16153: LD_INT 0
16155: ST_TO_ADDR
// sLevel := false ;
16156: LD_ADDR_EXP 55
16160: PUSH
16161: LD_INT 0
16163: ST_TO_ADDR
// sArmoury := false ;
16164: LD_ADDR_EXP 56
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// sRadar := false ;
16172: LD_ADDR_EXP 57
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// sBunker := false ;
16180: LD_ADDR_EXP 58
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// sHack := false ;
16188: LD_ADDR_EXP 59
16192: PUSH
16193: LD_INT 0
16195: ST_TO_ADDR
// sFire := false ;
16196: LD_ADDR_EXP 60
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// sRefresh := false ;
16204: LD_ADDR_EXP 61
16208: PUSH
16209: LD_INT 0
16211: ST_TO_ADDR
// sExp := false ;
16212: LD_ADDR_EXP 62
16216: PUSH
16217: LD_INT 0
16219: ST_TO_ADDR
// sDepot := false ;
16220: LD_ADDR_EXP 63
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// sFlag := false ;
16228: LD_ADDR_EXP 64
16232: PUSH
16233: LD_INT 0
16235: ST_TO_ADDR
// sKamikadze := false ;
16236: LD_ADDR_EXP 72
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// sTroll := false ;
16244: LD_ADDR_EXP 73
16248: PUSH
16249: LD_INT 0
16251: ST_TO_ADDR
// sSlow := false ;
16252: LD_ADDR_EXP 74
16256: PUSH
16257: LD_INT 0
16259: ST_TO_ADDR
// sLack := false ;
16260: LD_ADDR_EXP 75
16264: PUSH
16265: LD_INT 0
16267: ST_TO_ADDR
// sTank := false ;
16268: LD_ADDR_EXP 77
16272: PUSH
16273: LD_INT 0
16275: ST_TO_ADDR
// sRemote := false ;
16276: LD_ADDR_EXP 78
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
// sPowell := false ;
16284: LD_ADDR_EXP 79
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// sTeleport := false ;
16292: LD_ADDR_EXP 82
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// sOilTower := false ;
16300: LD_ADDR_EXP 84
16304: PUSH
16305: LD_INT 0
16307: ST_TO_ADDR
// sShovel := false ;
16308: LD_ADDR_EXP 85
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// sSheik := false ;
16316: LD_ADDR_EXP 86
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// sEarthquake := false ;
16324: LD_ADDR_EXP 88
16328: PUSH
16329: LD_INT 0
16331: ST_TO_ADDR
// sAI := false ;
16332: LD_ADDR_EXP 89
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// sCargo := false ;
16340: LD_ADDR_EXP 92
16344: PUSH
16345: LD_INT 0
16347: ST_TO_ADDR
// sDLaser := false ;
16348: LD_ADDR_EXP 93
16352: PUSH
16353: LD_INT 0
16355: ST_TO_ADDR
// sExchange := false ;
16356: LD_ADDR_EXP 94
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// sFac := false ;
16364: LD_ADDR_EXP 95
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// sPower := false ;
16372: LD_ADDR_EXP 96
16376: PUSH
16377: LD_INT 0
16379: ST_TO_ADDR
// sRandom := false ;
16380: LD_ADDR_EXP 97
16384: PUSH
16385: LD_INT 0
16387: ST_TO_ADDR
// sShield := false ;
16388: LD_ADDR_EXP 98
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// sTime := false ;
16396: LD_ADDR_EXP 99
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// sTools := false ;
16404: LD_ADDR_EXP 100
16408: PUSH
16409: LD_INT 0
16411: ST_TO_ADDR
// sSold := false ;
16412: LD_ADDR_EXP 65
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// sDiff := false ;
16420: LD_ADDR_EXP 66
16424: PUSH
16425: LD_INT 0
16427: ST_TO_ADDR
// sFog := false ;
16428: LD_ADDR_EXP 69
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
// sReset := false ;
16436: LD_ADDR_EXP 70
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// sSun := false ;
16444: LD_ADDR_EXP 71
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// sTiger := false ;
16452: LD_ADDR_EXP 67
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// sBomb := false ;
16460: LD_ADDR_EXP 68
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// sWound := false ;
16468: LD_ADDR_EXP 76
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// sBetray := false ;
16476: LD_ADDR_EXP 80
16480: PUSH
16481: LD_INT 0
16483: ST_TO_ADDR
// sContamin := false ;
16484: LD_ADDR_EXP 81
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// sOil := false ;
16492: LD_ADDR_EXP 83
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// sStu := false ;
16500: LD_ADDR_EXP 87
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// sBazooka := false ;
16508: LD_ADDR_EXP 90
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// sMortar := false ;
16516: LD_ADDR_EXP 91
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// sRanger := false ;
16524: LD_ADDR_EXP 101
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// sComputer := false ;
16532: LD_ADDR_EXP 102
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// s30 := false ;
16540: LD_ADDR_EXP 103
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// s60 := false ;
16548: LD_ADDR_EXP 104
16552: PUSH
16553: LD_INT 0
16555: ST_TO_ADDR
// end ;
16556: LD_VAR 0 1
16560: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16561: LD_INT 0
16563: PPUSH
16564: PPUSH
16565: PPUSH
16566: PPUSH
16567: PPUSH
// result := [ ] ;
16568: LD_ADDR_VAR 0 1
16572: PUSH
16573: EMPTY
16574: ST_TO_ADDR
// if campaign_id = 1 then
16575: LD_OWVAR 69
16579: PUSH
16580: LD_INT 1
16582: EQUAL
16583: IFFALSE 19749
// begin case mission_number of 1 :
16585: LD_OWVAR 70
16589: PUSH
16590: LD_INT 1
16592: DOUBLE
16593: EQUAL
16594: IFTRUE 16598
16596: GO 16674
16598: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: LD_INT 4
16609: PUSH
16610: LD_INT 11
16612: PUSH
16613: LD_INT 12
16615: PUSH
16616: LD_INT 15
16618: PUSH
16619: LD_INT 16
16621: PUSH
16622: LD_INT 22
16624: PUSH
16625: LD_INT 23
16627: PUSH
16628: LD_INT 26
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 101
16644: PUSH
16645: LD_INT 102
16647: PUSH
16648: LD_INT 106
16650: PUSH
16651: LD_INT 116
16653: PUSH
16654: LD_INT 117
16656: PUSH
16657: LD_INT 118
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: ST_TO_ADDR
16672: GO 19747
16674: LD_INT 2
16676: DOUBLE
16677: EQUAL
16678: IFTRUE 16682
16680: GO 16766
16682: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16683: LD_ADDR_VAR 0 1
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: LD_INT 11
16696: PUSH
16697: LD_INT 12
16699: PUSH
16700: LD_INT 15
16702: PUSH
16703: LD_INT 16
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_INT 23
16711: PUSH
16712: LD_INT 26
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 101
16728: PUSH
16729: LD_INT 102
16731: PUSH
16732: LD_INT 105
16734: PUSH
16735: LD_INT 106
16737: PUSH
16738: LD_INT 108
16740: PUSH
16741: LD_INT 116
16743: PUSH
16744: LD_INT 117
16746: PUSH
16747: LD_INT 118
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: ST_TO_ADDR
16764: GO 19747
16766: LD_INT 3
16768: DOUBLE
16769: EQUAL
16770: IFTRUE 16774
16772: GO 16862
16774: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16775: LD_ADDR_VAR 0 1
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: LD_INT 4
16785: PUSH
16786: LD_INT 5
16788: PUSH
16789: LD_INT 11
16791: PUSH
16792: LD_INT 12
16794: PUSH
16795: LD_INT 15
16797: PUSH
16798: LD_INT 16
16800: PUSH
16801: LD_INT 22
16803: PUSH
16804: LD_INT 26
16806: PUSH
16807: LD_INT 36
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 101
16824: PUSH
16825: LD_INT 102
16827: PUSH
16828: LD_INT 105
16830: PUSH
16831: LD_INT 106
16833: PUSH
16834: LD_INT 108
16836: PUSH
16837: LD_INT 116
16839: PUSH
16840: LD_INT 117
16842: PUSH
16843: LD_INT 118
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: ST_TO_ADDR
16860: GO 19747
16862: LD_INT 4
16864: DOUBLE
16865: EQUAL
16866: IFTRUE 16870
16868: GO 16966
16870: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16871: LD_ADDR_VAR 0 1
16875: PUSH
16876: LD_INT 2
16878: PUSH
16879: LD_INT 4
16881: PUSH
16882: LD_INT 5
16884: PUSH
16885: LD_INT 8
16887: PUSH
16888: LD_INT 11
16890: PUSH
16891: LD_INT 12
16893: PUSH
16894: LD_INT 15
16896: PUSH
16897: LD_INT 16
16899: PUSH
16900: LD_INT 22
16902: PUSH
16903: LD_INT 23
16905: PUSH
16906: LD_INT 26
16908: PUSH
16909: LD_INT 36
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 101
16928: PUSH
16929: LD_INT 102
16931: PUSH
16932: LD_INT 105
16934: PUSH
16935: LD_INT 106
16937: PUSH
16938: LD_INT 108
16940: PUSH
16941: LD_INT 116
16943: PUSH
16944: LD_INT 117
16946: PUSH
16947: LD_INT 118
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: ST_TO_ADDR
16964: GO 19747
16966: LD_INT 5
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 17086
16974: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_INT 2
16982: PUSH
16983: LD_INT 4
16985: PUSH
16986: LD_INT 5
16988: PUSH
16989: LD_INT 6
16991: PUSH
16992: LD_INT 8
16994: PUSH
16995: LD_INT 11
16997: PUSH
16998: LD_INT 12
17000: PUSH
17001: LD_INT 15
17003: PUSH
17004: LD_INT 16
17006: PUSH
17007: LD_INT 22
17009: PUSH
17010: LD_INT 23
17012: PUSH
17013: LD_INT 25
17015: PUSH
17016: LD_INT 26
17018: PUSH
17019: LD_INT 36
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 101
17040: PUSH
17041: LD_INT 102
17043: PUSH
17044: LD_INT 105
17046: PUSH
17047: LD_INT 106
17049: PUSH
17050: LD_INT 108
17052: PUSH
17053: LD_INT 109
17055: PUSH
17056: LD_INT 112
17058: PUSH
17059: LD_INT 116
17061: PUSH
17062: LD_INT 117
17064: PUSH
17065: LD_INT 118
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
17084: GO 19747
17086: LD_INT 6
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17226
17094: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 4
17105: PUSH
17106: LD_INT 5
17108: PUSH
17109: LD_INT 6
17111: PUSH
17112: LD_INT 8
17114: PUSH
17115: LD_INT 11
17117: PUSH
17118: LD_INT 12
17120: PUSH
17121: LD_INT 15
17123: PUSH
17124: LD_INT 16
17126: PUSH
17127: LD_INT 20
17129: PUSH
17130: LD_INT 21
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_INT 23
17138: PUSH
17139: LD_INT 25
17141: PUSH
17142: LD_INT 26
17144: PUSH
17145: LD_INT 30
17147: PUSH
17148: LD_INT 31
17150: PUSH
17151: LD_INT 32
17153: PUSH
17154: LD_INT 36
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 101
17180: PUSH
17181: LD_INT 102
17183: PUSH
17184: LD_INT 105
17186: PUSH
17187: LD_INT 106
17189: PUSH
17190: LD_INT 108
17192: PUSH
17193: LD_INT 109
17195: PUSH
17196: LD_INT 112
17198: PUSH
17199: LD_INT 116
17201: PUSH
17202: LD_INT 117
17204: PUSH
17205: LD_INT 118
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: ST_TO_ADDR
17224: GO 19747
17226: LD_INT 7
17228: DOUBLE
17229: EQUAL
17230: IFTRUE 17234
17232: GO 17346
17234: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17235: LD_ADDR_VAR 0 1
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: LD_INT 5
17248: PUSH
17249: LD_INT 7
17251: PUSH
17252: LD_INT 11
17254: PUSH
17255: LD_INT 12
17257: PUSH
17258: LD_INT 15
17260: PUSH
17261: LD_INT 16
17263: PUSH
17264: LD_INT 20
17266: PUSH
17267: LD_INT 21
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_INT 23
17275: PUSH
17276: LD_INT 25
17278: PUSH
17279: LD_INT 26
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 101
17300: PUSH
17301: LD_INT 102
17303: PUSH
17304: LD_INT 103
17306: PUSH
17307: LD_INT 105
17309: PUSH
17310: LD_INT 106
17312: PUSH
17313: LD_INT 108
17315: PUSH
17316: LD_INT 112
17318: PUSH
17319: LD_INT 116
17321: PUSH
17322: LD_INT 117
17324: PUSH
17325: LD_INT 118
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: ST_TO_ADDR
17344: GO 19747
17346: LD_INT 8
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17494
17354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17355: LD_ADDR_VAR 0 1
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 4
17365: PUSH
17366: LD_INT 5
17368: PUSH
17369: LD_INT 6
17371: PUSH
17372: LD_INT 7
17374: PUSH
17375: LD_INT 8
17377: PUSH
17378: LD_INT 11
17380: PUSH
17381: LD_INT 12
17383: PUSH
17384: LD_INT 15
17386: PUSH
17387: LD_INT 16
17389: PUSH
17390: LD_INT 20
17392: PUSH
17393: LD_INT 21
17395: PUSH
17396: LD_INT 22
17398: PUSH
17399: LD_INT 23
17401: PUSH
17402: LD_INT 25
17404: PUSH
17405: LD_INT 26
17407: PUSH
17408: LD_INT 30
17410: PUSH
17411: LD_INT 31
17413: PUSH
17414: LD_INT 32
17416: PUSH
17417: LD_INT 36
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 101
17444: PUSH
17445: LD_INT 102
17447: PUSH
17448: LD_INT 103
17450: PUSH
17451: LD_INT 105
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 108
17459: PUSH
17460: LD_INT 109
17462: PUSH
17463: LD_INT 112
17465: PUSH
17466: LD_INT 116
17468: PUSH
17469: LD_INT 117
17471: PUSH
17472: LD_INT 118
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: ST_TO_ADDR
17492: GO 19747
17494: LD_INT 9
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17650
17502: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17503: LD_ADDR_VAR 0 1
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 4
17513: PUSH
17514: LD_INT 5
17516: PUSH
17517: LD_INT 6
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: LD_INT 8
17525: PUSH
17526: LD_INT 11
17528: PUSH
17529: LD_INT 12
17531: PUSH
17532: LD_INT 15
17534: PUSH
17535: LD_INT 16
17537: PUSH
17538: LD_INT 20
17540: PUSH
17541: LD_INT 21
17543: PUSH
17544: LD_INT 22
17546: PUSH
17547: LD_INT 23
17549: PUSH
17550: LD_INT 25
17552: PUSH
17553: LD_INT 26
17555: PUSH
17556: LD_INT 28
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: LD_INT 31
17564: PUSH
17565: LD_INT 32
17567: PUSH
17568: LD_INT 36
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 101
17596: PUSH
17597: LD_INT 102
17599: PUSH
17600: LD_INT 103
17602: PUSH
17603: LD_INT 105
17605: PUSH
17606: LD_INT 106
17608: PUSH
17609: LD_INT 108
17611: PUSH
17612: LD_INT 109
17614: PUSH
17615: LD_INT 112
17617: PUSH
17618: LD_INT 114
17620: PUSH
17621: LD_INT 116
17623: PUSH
17624: LD_INT 117
17626: PUSH
17627: LD_INT 118
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: ST_TO_ADDR
17648: GO 19747
17650: LD_INT 10
17652: DOUBLE
17653: EQUAL
17654: IFTRUE 17658
17656: GO 17854
17658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17659: LD_ADDR_VAR 0 1
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 4
17669: PUSH
17670: LD_INT 5
17672: PUSH
17673: LD_INT 6
17675: PUSH
17676: LD_INT 7
17678: PUSH
17679: LD_INT 8
17681: PUSH
17682: LD_INT 9
17684: PUSH
17685: LD_INT 10
17687: PUSH
17688: LD_INT 11
17690: PUSH
17691: LD_INT 12
17693: PUSH
17694: LD_INT 13
17696: PUSH
17697: LD_INT 14
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 17
17708: PUSH
17709: LD_INT 18
17711: PUSH
17712: LD_INT 19
17714: PUSH
17715: LD_INT 20
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_INT 23
17726: PUSH
17727: LD_INT 24
17729: PUSH
17730: LD_INT 25
17732: PUSH
17733: LD_INT 26
17735: PUSH
17736: LD_INT 28
17738: PUSH
17739: LD_INT 30
17741: PUSH
17742: LD_INT 31
17744: PUSH
17745: LD_INT 32
17747: PUSH
17748: LD_INT 36
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 101
17784: PUSH
17785: LD_INT 102
17787: PUSH
17788: LD_INT 103
17790: PUSH
17791: LD_INT 104
17793: PUSH
17794: LD_INT 105
17796: PUSH
17797: LD_INT 106
17799: PUSH
17800: LD_INT 107
17802: PUSH
17803: LD_INT 108
17805: PUSH
17806: LD_INT 109
17808: PUSH
17809: LD_INT 110
17811: PUSH
17812: LD_INT 111
17814: PUSH
17815: LD_INT 112
17817: PUSH
17818: LD_INT 114
17820: PUSH
17821: LD_INT 116
17823: PUSH
17824: LD_INT 117
17826: PUSH
17827: LD_INT 118
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: ST_TO_ADDR
17852: GO 19747
17854: LD_INT 11
17856: DOUBLE
17857: EQUAL
17858: IFTRUE 17862
17860: GO 18066
17862: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17863: LD_ADDR_VAR 0 1
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: LD_INT 4
17876: PUSH
17877: LD_INT 5
17879: PUSH
17880: LD_INT 6
17882: PUSH
17883: LD_INT 7
17885: PUSH
17886: LD_INT 8
17888: PUSH
17889: LD_INT 9
17891: PUSH
17892: LD_INT 10
17894: PUSH
17895: LD_INT 11
17897: PUSH
17898: LD_INT 12
17900: PUSH
17901: LD_INT 13
17903: PUSH
17904: LD_INT 14
17906: PUSH
17907: LD_INT 15
17909: PUSH
17910: LD_INT 16
17912: PUSH
17913: LD_INT 17
17915: PUSH
17916: LD_INT 18
17918: PUSH
17919: LD_INT 19
17921: PUSH
17922: LD_INT 20
17924: PUSH
17925: LD_INT 21
17927: PUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 23
17933: PUSH
17934: LD_INT 24
17936: PUSH
17937: LD_INT 25
17939: PUSH
17940: LD_INT 26
17942: PUSH
17943: LD_INT 28
17945: PUSH
17946: LD_INT 30
17948: PUSH
17949: LD_INT 31
17951: PUSH
17952: LD_INT 32
17954: PUSH
17955: LD_INT 34
17957: PUSH
17958: LD_INT 36
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 101
17996: PUSH
17997: LD_INT 102
17999: PUSH
18000: LD_INT 103
18002: PUSH
18003: LD_INT 104
18005: PUSH
18006: LD_INT 105
18008: PUSH
18009: LD_INT 106
18011: PUSH
18012: LD_INT 107
18014: PUSH
18015: LD_INT 108
18017: PUSH
18018: LD_INT 109
18020: PUSH
18021: LD_INT 110
18023: PUSH
18024: LD_INT 111
18026: PUSH
18027: LD_INT 112
18029: PUSH
18030: LD_INT 114
18032: PUSH
18033: LD_INT 116
18035: PUSH
18036: LD_INT 117
18038: PUSH
18039: LD_INT 118
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: ST_TO_ADDR
18064: GO 19747
18066: LD_INT 12
18068: DOUBLE
18069: EQUAL
18070: IFTRUE 18074
18072: GO 18294
18074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18075: LD_ADDR_VAR 0 1
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: LD_INT 4
18091: PUSH
18092: LD_INT 5
18094: PUSH
18095: LD_INT 6
18097: PUSH
18098: LD_INT 7
18100: PUSH
18101: LD_INT 8
18103: PUSH
18104: LD_INT 9
18106: PUSH
18107: LD_INT 10
18109: PUSH
18110: LD_INT 11
18112: PUSH
18113: LD_INT 12
18115: PUSH
18116: LD_INT 13
18118: PUSH
18119: LD_INT 14
18121: PUSH
18122: LD_INT 15
18124: PUSH
18125: LD_INT 16
18127: PUSH
18128: LD_INT 17
18130: PUSH
18131: LD_INT 18
18133: PUSH
18134: LD_INT 19
18136: PUSH
18137: LD_INT 20
18139: PUSH
18140: LD_INT 21
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_INT 23
18148: PUSH
18149: LD_INT 24
18151: PUSH
18152: LD_INT 25
18154: PUSH
18155: LD_INT 26
18157: PUSH
18158: LD_INT 27
18160: PUSH
18161: LD_INT 28
18163: PUSH
18164: LD_INT 30
18166: PUSH
18167: LD_INT 31
18169: PUSH
18170: LD_INT 32
18172: PUSH
18173: LD_INT 33
18175: PUSH
18176: LD_INT 34
18178: PUSH
18179: LD_INT 36
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 101
18220: PUSH
18221: LD_INT 102
18223: PUSH
18224: LD_INT 103
18226: PUSH
18227: LD_INT 104
18229: PUSH
18230: LD_INT 105
18232: PUSH
18233: LD_INT 106
18235: PUSH
18236: LD_INT 107
18238: PUSH
18239: LD_INT 108
18241: PUSH
18242: LD_INT 109
18244: PUSH
18245: LD_INT 110
18247: PUSH
18248: LD_INT 111
18250: PUSH
18251: LD_INT 112
18253: PUSH
18254: LD_INT 113
18256: PUSH
18257: LD_INT 114
18259: PUSH
18260: LD_INT 116
18262: PUSH
18263: LD_INT 117
18265: PUSH
18266: LD_INT 118
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: ST_TO_ADDR
18292: GO 19747
18294: LD_INT 13
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18510
18302: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18303: LD_ADDR_VAR 0 1
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: LD_INT 8
18325: PUSH
18326: LD_INT 9
18328: PUSH
18329: LD_INT 10
18331: PUSH
18332: LD_INT 11
18334: PUSH
18335: LD_INT 12
18337: PUSH
18338: LD_INT 14
18340: PUSH
18341: LD_INT 15
18343: PUSH
18344: LD_INT 16
18346: PUSH
18347: LD_INT 17
18349: PUSH
18350: LD_INT 18
18352: PUSH
18353: LD_INT 19
18355: PUSH
18356: LD_INT 20
18358: PUSH
18359: LD_INT 21
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_INT 23
18367: PUSH
18368: LD_INT 24
18370: PUSH
18371: LD_INT 25
18373: PUSH
18374: LD_INT 26
18376: PUSH
18377: LD_INT 27
18379: PUSH
18380: LD_INT 28
18382: PUSH
18383: LD_INT 30
18385: PUSH
18386: LD_INT 31
18388: PUSH
18389: LD_INT 32
18391: PUSH
18392: LD_INT 33
18394: PUSH
18395: LD_INT 34
18397: PUSH
18398: LD_INT 36
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 101
18436: PUSH
18437: LD_INT 102
18439: PUSH
18440: LD_INT 103
18442: PUSH
18443: LD_INT 104
18445: PUSH
18446: LD_INT 105
18448: PUSH
18449: LD_INT 106
18451: PUSH
18452: LD_INT 107
18454: PUSH
18455: LD_INT 108
18457: PUSH
18458: LD_INT 109
18460: PUSH
18461: LD_INT 110
18463: PUSH
18464: LD_INT 111
18466: PUSH
18467: LD_INT 112
18469: PUSH
18470: LD_INT 113
18472: PUSH
18473: LD_INT 114
18475: PUSH
18476: LD_INT 116
18478: PUSH
18479: LD_INT 117
18481: PUSH
18482: LD_INT 118
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: ST_TO_ADDR
18508: GO 19747
18510: LD_INT 14
18512: DOUBLE
18513: EQUAL
18514: IFTRUE 18518
18516: GO 18742
18518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 3
18532: PUSH
18533: LD_INT 4
18535: PUSH
18536: LD_INT 5
18538: PUSH
18539: LD_INT 6
18541: PUSH
18542: LD_INT 7
18544: PUSH
18545: LD_INT 8
18547: PUSH
18548: LD_INT 9
18550: PUSH
18551: LD_INT 10
18553: PUSH
18554: LD_INT 11
18556: PUSH
18557: LD_INT 12
18559: PUSH
18560: LD_INT 13
18562: PUSH
18563: LD_INT 14
18565: PUSH
18566: LD_INT 15
18568: PUSH
18569: LD_INT 16
18571: PUSH
18572: LD_INT 17
18574: PUSH
18575: LD_INT 18
18577: PUSH
18578: LD_INT 19
18580: PUSH
18581: LD_INT 20
18583: PUSH
18584: LD_INT 21
18586: PUSH
18587: LD_INT 22
18589: PUSH
18590: LD_INT 23
18592: PUSH
18593: LD_INT 24
18595: PUSH
18596: LD_INT 25
18598: PUSH
18599: LD_INT 26
18601: PUSH
18602: LD_INT 27
18604: PUSH
18605: LD_INT 28
18607: PUSH
18608: LD_INT 29
18610: PUSH
18611: LD_INT 30
18613: PUSH
18614: LD_INT 31
18616: PUSH
18617: LD_INT 32
18619: PUSH
18620: LD_INT 33
18622: PUSH
18623: LD_INT 34
18625: PUSH
18626: LD_INT 36
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 101
18668: PUSH
18669: LD_INT 102
18671: PUSH
18672: LD_INT 103
18674: PUSH
18675: LD_INT 104
18677: PUSH
18678: LD_INT 105
18680: PUSH
18681: LD_INT 106
18683: PUSH
18684: LD_INT 107
18686: PUSH
18687: LD_INT 108
18689: PUSH
18690: LD_INT 109
18692: PUSH
18693: LD_INT 110
18695: PUSH
18696: LD_INT 111
18698: PUSH
18699: LD_INT 112
18701: PUSH
18702: LD_INT 113
18704: PUSH
18705: LD_INT 114
18707: PUSH
18708: LD_INT 116
18710: PUSH
18711: LD_INT 117
18713: PUSH
18714: LD_INT 118
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: ST_TO_ADDR
18740: GO 19747
18742: LD_INT 15
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18974
18750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: LD_INT 2
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: LD_INT 4
18767: PUSH
18768: LD_INT 5
18770: PUSH
18771: LD_INT 6
18773: PUSH
18774: LD_INT 7
18776: PUSH
18777: LD_INT 8
18779: PUSH
18780: LD_INT 9
18782: PUSH
18783: LD_INT 10
18785: PUSH
18786: LD_INT 11
18788: PUSH
18789: LD_INT 12
18791: PUSH
18792: LD_INT 13
18794: PUSH
18795: LD_INT 14
18797: PUSH
18798: LD_INT 15
18800: PUSH
18801: LD_INT 16
18803: PUSH
18804: LD_INT 17
18806: PUSH
18807: LD_INT 18
18809: PUSH
18810: LD_INT 19
18812: PUSH
18813: LD_INT 20
18815: PUSH
18816: LD_INT 21
18818: PUSH
18819: LD_INT 22
18821: PUSH
18822: LD_INT 23
18824: PUSH
18825: LD_INT 24
18827: PUSH
18828: LD_INT 25
18830: PUSH
18831: LD_INT 26
18833: PUSH
18834: LD_INT 27
18836: PUSH
18837: LD_INT 28
18839: PUSH
18840: LD_INT 29
18842: PUSH
18843: LD_INT 30
18845: PUSH
18846: LD_INT 31
18848: PUSH
18849: LD_INT 32
18851: PUSH
18852: LD_INT 33
18854: PUSH
18855: LD_INT 34
18857: PUSH
18858: LD_INT 36
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 101
18900: PUSH
18901: LD_INT 102
18903: PUSH
18904: LD_INT 103
18906: PUSH
18907: LD_INT 104
18909: PUSH
18910: LD_INT 105
18912: PUSH
18913: LD_INT 106
18915: PUSH
18916: LD_INT 107
18918: PUSH
18919: LD_INT 108
18921: PUSH
18922: LD_INT 109
18924: PUSH
18925: LD_INT 110
18927: PUSH
18928: LD_INT 111
18930: PUSH
18931: LD_INT 112
18933: PUSH
18934: LD_INT 113
18936: PUSH
18937: LD_INT 114
18939: PUSH
18940: LD_INT 116
18942: PUSH
18943: LD_INT 117
18945: PUSH
18946: LD_INT 118
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: ST_TO_ADDR
18972: GO 19747
18974: LD_INT 16
18976: DOUBLE
18977: EQUAL
18978: IFTRUE 18982
18980: GO 19118
18982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18983: LD_ADDR_VAR 0 1
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 4
18993: PUSH
18994: LD_INT 5
18996: PUSH
18997: LD_INT 7
18999: PUSH
19000: LD_INT 11
19002: PUSH
19003: LD_INT 12
19005: PUSH
19006: LD_INT 15
19008: PUSH
19009: LD_INT 16
19011: PUSH
19012: LD_INT 20
19014: PUSH
19015: LD_INT 21
19017: PUSH
19018: LD_INT 22
19020: PUSH
19021: LD_INT 23
19023: PUSH
19024: LD_INT 25
19026: PUSH
19027: LD_INT 26
19029: PUSH
19030: LD_INT 30
19032: PUSH
19033: LD_INT 31
19035: PUSH
19036: LD_INT 32
19038: PUSH
19039: LD_INT 33
19041: PUSH
19042: LD_INT 34
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 101
19068: PUSH
19069: LD_INT 102
19071: PUSH
19072: LD_INT 103
19074: PUSH
19075: LD_INT 106
19077: PUSH
19078: LD_INT 108
19080: PUSH
19081: LD_INT 112
19083: PUSH
19084: LD_INT 113
19086: PUSH
19087: LD_INT 114
19089: PUSH
19090: LD_INT 116
19092: PUSH
19093: LD_INT 117
19095: PUSH
19096: LD_INT 118
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: ST_TO_ADDR
19116: GO 19747
19118: LD_INT 17
19120: DOUBLE
19121: EQUAL
19122: IFTRUE 19126
19124: GO 19350
19126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19127: LD_ADDR_VAR 0 1
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 3
19140: PUSH
19141: LD_INT 4
19143: PUSH
19144: LD_INT 5
19146: PUSH
19147: LD_INT 6
19149: PUSH
19150: LD_INT 7
19152: PUSH
19153: LD_INT 8
19155: PUSH
19156: LD_INT 9
19158: PUSH
19159: LD_INT 10
19161: PUSH
19162: LD_INT 11
19164: PUSH
19165: LD_INT 12
19167: PUSH
19168: LD_INT 13
19170: PUSH
19171: LD_INT 14
19173: PUSH
19174: LD_INT 15
19176: PUSH
19177: LD_INT 16
19179: PUSH
19180: LD_INT 17
19182: PUSH
19183: LD_INT 18
19185: PUSH
19186: LD_INT 19
19188: PUSH
19189: LD_INT 20
19191: PUSH
19192: LD_INT 21
19194: PUSH
19195: LD_INT 22
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 24
19203: PUSH
19204: LD_INT 25
19206: PUSH
19207: LD_INT 26
19209: PUSH
19210: LD_INT 27
19212: PUSH
19213: LD_INT 28
19215: PUSH
19216: LD_INT 29
19218: PUSH
19219: LD_INT 30
19221: PUSH
19222: LD_INT 31
19224: PUSH
19225: LD_INT 32
19227: PUSH
19228: LD_INT 33
19230: PUSH
19231: LD_INT 34
19233: PUSH
19234: LD_INT 36
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 101
19276: PUSH
19277: LD_INT 102
19279: PUSH
19280: LD_INT 103
19282: PUSH
19283: LD_INT 104
19285: PUSH
19286: LD_INT 105
19288: PUSH
19289: LD_INT 106
19291: PUSH
19292: LD_INT 107
19294: PUSH
19295: LD_INT 108
19297: PUSH
19298: LD_INT 109
19300: PUSH
19301: LD_INT 110
19303: PUSH
19304: LD_INT 111
19306: PUSH
19307: LD_INT 112
19309: PUSH
19310: LD_INT 113
19312: PUSH
19313: LD_INT 114
19315: PUSH
19316: LD_INT 116
19318: PUSH
19319: LD_INT 117
19321: PUSH
19322: LD_INT 118
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: ST_TO_ADDR
19348: GO 19747
19350: LD_INT 18
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19506
19358: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: LD_INT 4
19369: PUSH
19370: LD_INT 5
19372: PUSH
19373: LD_INT 7
19375: PUSH
19376: LD_INT 11
19378: PUSH
19379: LD_INT 12
19381: PUSH
19382: LD_INT 15
19384: PUSH
19385: LD_INT 16
19387: PUSH
19388: LD_INT 20
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 22
19396: PUSH
19397: LD_INT 23
19399: PUSH
19400: LD_INT 25
19402: PUSH
19403: LD_INT 26
19405: PUSH
19406: LD_INT 30
19408: PUSH
19409: LD_INT 31
19411: PUSH
19412: LD_INT 32
19414: PUSH
19415: LD_INT 33
19417: PUSH
19418: LD_INT 34
19420: PUSH
19421: LD_INT 35
19423: PUSH
19424: LD_INT 36
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 101
19452: PUSH
19453: LD_INT 102
19455: PUSH
19456: LD_INT 103
19458: PUSH
19459: LD_INT 106
19461: PUSH
19462: LD_INT 108
19464: PUSH
19465: LD_INT 112
19467: PUSH
19468: LD_INT 113
19470: PUSH
19471: LD_INT 114
19473: PUSH
19474: LD_INT 115
19476: PUSH
19477: LD_INT 116
19479: PUSH
19480: LD_INT 117
19482: PUSH
19483: LD_INT 118
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: ST_TO_ADDR
19504: GO 19747
19506: LD_INT 19
19508: DOUBLE
19509: EQUAL
19510: IFTRUE 19514
19512: GO 19746
19514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19515: LD_ADDR_VAR 0 1
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 3
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: LD_INT 5
19534: PUSH
19535: LD_INT 6
19537: PUSH
19538: LD_INT 7
19540: PUSH
19541: LD_INT 8
19543: PUSH
19544: LD_INT 9
19546: PUSH
19547: LD_INT 10
19549: PUSH
19550: LD_INT 11
19552: PUSH
19553: LD_INT 12
19555: PUSH
19556: LD_INT 13
19558: PUSH
19559: LD_INT 14
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 17
19570: PUSH
19571: LD_INT 18
19573: PUSH
19574: LD_INT 19
19576: PUSH
19577: LD_INT 20
19579: PUSH
19580: LD_INT 21
19582: PUSH
19583: LD_INT 22
19585: PUSH
19586: LD_INT 23
19588: PUSH
19589: LD_INT 24
19591: PUSH
19592: LD_INT 25
19594: PUSH
19595: LD_INT 26
19597: PUSH
19598: LD_INT 27
19600: PUSH
19601: LD_INT 28
19603: PUSH
19604: LD_INT 29
19606: PUSH
19607: LD_INT 30
19609: PUSH
19610: LD_INT 31
19612: PUSH
19613: LD_INT 32
19615: PUSH
19616: LD_INT 33
19618: PUSH
19619: LD_INT 34
19621: PUSH
19622: LD_INT 35
19624: PUSH
19625: LD_INT 36
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 101
19668: PUSH
19669: LD_INT 102
19671: PUSH
19672: LD_INT 103
19674: PUSH
19675: LD_INT 104
19677: PUSH
19678: LD_INT 105
19680: PUSH
19681: LD_INT 106
19683: PUSH
19684: LD_INT 107
19686: PUSH
19687: LD_INT 108
19689: PUSH
19690: LD_INT 109
19692: PUSH
19693: LD_INT 110
19695: PUSH
19696: LD_INT 111
19698: PUSH
19699: LD_INT 112
19701: PUSH
19702: LD_INT 113
19704: PUSH
19705: LD_INT 114
19707: PUSH
19708: LD_INT 115
19710: PUSH
19711: LD_INT 116
19713: PUSH
19714: LD_INT 117
19716: PUSH
19717: LD_INT 118
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: ST_TO_ADDR
19744: GO 19747
19746: POP
// end else
19747: GO 19978
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19749: LD_ADDR_VAR 0 1
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 3
19762: PUSH
19763: LD_INT 4
19765: PUSH
19766: LD_INT 5
19768: PUSH
19769: LD_INT 6
19771: PUSH
19772: LD_INT 7
19774: PUSH
19775: LD_INT 8
19777: PUSH
19778: LD_INT 9
19780: PUSH
19781: LD_INT 10
19783: PUSH
19784: LD_INT 11
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 13
19792: PUSH
19793: LD_INT 14
19795: PUSH
19796: LD_INT 15
19798: PUSH
19799: LD_INT 16
19801: PUSH
19802: LD_INT 17
19804: PUSH
19805: LD_INT 18
19807: PUSH
19808: LD_INT 19
19810: PUSH
19811: LD_INT 20
19813: PUSH
19814: LD_INT 21
19816: PUSH
19817: LD_INT 22
19819: PUSH
19820: LD_INT 23
19822: PUSH
19823: LD_INT 24
19825: PUSH
19826: LD_INT 25
19828: PUSH
19829: LD_INT 26
19831: PUSH
19832: LD_INT 27
19834: PUSH
19835: LD_INT 28
19837: PUSH
19838: LD_INT 29
19840: PUSH
19841: LD_INT 30
19843: PUSH
19844: LD_INT 31
19846: PUSH
19847: LD_INT 32
19849: PUSH
19850: LD_INT 33
19852: PUSH
19853: LD_INT 34
19855: PUSH
19856: LD_INT 35
19858: PUSH
19859: LD_INT 36
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 101
19902: PUSH
19903: LD_INT 102
19905: PUSH
19906: LD_INT 103
19908: PUSH
19909: LD_INT 104
19911: PUSH
19912: LD_INT 105
19914: PUSH
19915: LD_INT 106
19917: PUSH
19918: LD_INT 107
19920: PUSH
19921: LD_INT 108
19923: PUSH
19924: LD_INT 109
19926: PUSH
19927: LD_INT 110
19929: PUSH
19930: LD_INT 111
19932: PUSH
19933: LD_INT 112
19935: PUSH
19936: LD_INT 113
19938: PUSH
19939: LD_INT 114
19941: PUSH
19942: LD_INT 115
19944: PUSH
19945: LD_INT 116
19947: PUSH
19948: LD_INT 117
19950: PUSH
19951: LD_INT 118
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: ST_TO_ADDR
// if result then
19978: LD_VAR 0 1
19982: IFFALSE 20271
// begin normal :=  ;
19984: LD_ADDR_VAR 0 3
19988: PUSH
19989: LD_STRING 
19991: ST_TO_ADDR
// hardcore :=  ;
19992: LD_ADDR_VAR 0 4
19996: PUSH
19997: LD_STRING 
19999: ST_TO_ADDR
// for i = 1 to normalCounter do
20000: LD_ADDR_VAR 0 5
20004: PUSH
20005: DOUBLE
20006: LD_INT 1
20008: DEC
20009: ST_TO_ADDR
20010: LD_EXP 49
20014: PUSH
20015: FOR_TO
20016: IFFALSE 20117
// begin tmp := 0 ;
20018: LD_ADDR_VAR 0 2
20022: PUSH
20023: LD_STRING 0
20025: ST_TO_ADDR
// if result [ 1 ] then
20026: LD_VAR 0 1
20030: PUSH
20031: LD_INT 1
20033: ARRAY
20034: IFFALSE 20099
// if result [ 1 ] [ 1 ] = i then
20036: LD_VAR 0 1
20040: PUSH
20041: LD_INT 1
20043: ARRAY
20044: PUSH
20045: LD_INT 1
20047: ARRAY
20048: PUSH
20049: LD_VAR 0 5
20053: EQUAL
20054: IFFALSE 20099
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: LD_VAR 0 1
20073: PUSH
20074: LD_INT 1
20076: ARRAY
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: CALL_OW 3
20085: PPUSH
20086: CALL_OW 1
20090: ST_TO_ADDR
// tmp := 1 ;
20091: LD_ADDR_VAR 0 2
20095: PUSH
20096: LD_STRING 1
20098: ST_TO_ADDR
// end ; normal := normal & tmp ;
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_VAR 0 3
20108: PUSH
20109: LD_VAR 0 2
20113: STR
20114: ST_TO_ADDR
// end ;
20115: GO 20015
20117: POP
20118: POP
// for i = 1 to hardcoreCounter do
20119: LD_ADDR_VAR 0 5
20123: PUSH
20124: DOUBLE
20125: LD_INT 1
20127: DEC
20128: ST_TO_ADDR
20129: LD_EXP 50
20133: PUSH
20134: FOR_TO
20135: IFFALSE 20240
// begin tmp := 0 ;
20137: LD_ADDR_VAR 0 2
20141: PUSH
20142: LD_STRING 0
20144: ST_TO_ADDR
// if result [ 2 ] then
20145: LD_VAR 0 1
20149: PUSH
20150: LD_INT 2
20152: ARRAY
20153: IFFALSE 20222
// if result [ 2 ] [ 1 ] = 100 + i then
20155: LD_VAR 0 1
20159: PUSH
20160: LD_INT 2
20162: ARRAY
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PUSH
20168: LD_INT 100
20170: PUSH
20171: LD_VAR 0 5
20175: PLUS
20176: EQUAL
20177: IFFALSE 20222
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20179: LD_ADDR_VAR 0 1
20183: PUSH
20184: LD_VAR 0 1
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: LD_VAR 0 1
20196: PUSH
20197: LD_INT 2
20199: ARRAY
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: CALL_OW 3
20208: PPUSH
20209: CALL_OW 1
20213: ST_TO_ADDR
// tmp := 1 ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_STRING 1
20221: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20222: LD_ADDR_VAR 0 4
20226: PUSH
20227: LD_VAR 0 4
20231: PUSH
20232: LD_VAR 0 2
20236: STR
20237: ST_TO_ADDR
// end ;
20238: GO 20134
20240: POP
20241: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20242: LD_STRING getStreamItemsFromMission("
20244: PUSH
20245: LD_VAR 0 3
20249: STR
20250: PUSH
20251: LD_STRING ","
20253: STR
20254: PUSH
20255: LD_VAR 0 4
20259: STR
20260: PUSH
20261: LD_STRING ")
20263: STR
20264: PPUSH
20265: CALL_OW 559
// end else
20269: GO 20278
// ToLua ( getStreamItemsFromMission("","") ) ;
20271: LD_STRING getStreamItemsFromMission("","")
20273: PPUSH
20274: CALL_OW 559
// end ;
20278: LD_VAR 0 1
20282: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20283: LD_EXP 48
20287: PUSH
20288: LD_EXP 53
20292: AND
20293: IFFALSE 20417
20295: GO 20297
20297: DISABLE
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
// begin enable ;
20302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20303: LD_ADDR_VAR 0 2
20307: PUSH
20308: LD_INT 22
20310: PUSH
20311: LD_OWVAR 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 2
20322: PUSH
20323: LD_INT 34
20325: PUSH
20326: LD_INT 7
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 34
20335: PUSH
20336: LD_INT 45
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 34
20345: PUSH
20346: LD_INT 28
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 34
20355: PUSH
20356: LD_INT 47
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: ST_TO_ADDR
// if not tmp then
20379: LD_VAR 0 2
20383: NOT
20384: IFFALSE 20388
// exit ;
20386: GO 20417
// for i in tmp do
20388: LD_ADDR_VAR 0 1
20392: PUSH
20393: LD_VAR 0 2
20397: PUSH
20398: FOR_IN
20399: IFFALSE 20415
// begin SetLives ( i , 0 ) ;
20401: LD_VAR 0 1
20405: PPUSH
20406: LD_INT 0
20408: PPUSH
20409: CALL_OW 234
// end ;
20413: GO 20398
20415: POP
20416: POP
// end ;
20417: PPOPN 2
20419: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20420: LD_EXP 48
20424: PUSH
20425: LD_EXP 54
20429: AND
20430: IFFALSE 20514
20432: GO 20434
20434: DISABLE
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
// begin enable ;
20439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_OWVAR 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 32
20459: PUSH
20460: LD_INT 3
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 2
20480: NOT
20481: IFFALSE 20485
// exit ;
20483: GO 20514
// for i in tmp do
20485: LD_ADDR_VAR 0 1
20489: PUSH
20490: LD_VAR 0 2
20494: PUSH
20495: FOR_IN
20496: IFFALSE 20512
// begin SetLives ( i , 0 ) ;
20498: LD_VAR 0 1
20502: PPUSH
20503: LD_INT 0
20505: PPUSH
20506: CALL_OW 234
// end ;
20510: GO 20495
20512: POP
20513: POP
// end ;
20514: PPOPN 2
20516: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20517: LD_EXP 48
20521: PUSH
20522: LD_EXP 51
20526: AND
20527: IFFALSE 20620
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
// begin enable ;
20535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20536: LD_ADDR_VAR 0 1
20540: PUSH
20541: LD_INT 22
20543: PUSH
20544: LD_OWVAR 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: LD_INT 25
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 25
20568: PUSH
20569: LD_INT 9
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 25
20578: PUSH
20579: LD_INT 8
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PPUSH
20596: CALL_OW 69
20600: PUSH
20601: FOR_IN
20602: IFFALSE 20618
// begin SetClass ( i , 1 ) ;
20604: LD_VAR 0 1
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: CALL_OW 336
// end ;
20616: GO 20601
20618: POP
20619: POP
// end ;
20620: PPOPN 1
20622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20623: LD_EXP 48
20627: PUSH
20628: LD_EXP 52
20632: AND
20633: PUSH
20634: LD_OWVAR 65
20638: PUSH
20639: LD_INT 7
20641: LESS
20642: AND
20643: IFFALSE 20657
20645: GO 20647
20647: DISABLE
// begin enable ;
20648: ENABLE
// game_speed := 7 ;
20649: LD_ADDR_OWVAR 65
20653: PUSH
20654: LD_INT 7
20656: ST_TO_ADDR
// end ;
20657: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20658: LD_EXP 48
20662: PUSH
20663: LD_EXP 55
20667: AND
20668: IFFALSE 20870
20670: GO 20672
20672: DISABLE
20673: LD_INT 0
20675: PPUSH
20676: PPUSH
20677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20678: LD_ADDR_VAR 0 3
20682: PUSH
20683: LD_INT 81
20685: PUSH
20686: LD_OWVAR 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: ST_TO_ADDR
// if not tmp then
20714: LD_VAR 0 3
20718: NOT
20719: IFFALSE 20723
// exit ;
20721: GO 20870
// if tmp > 5 then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 5
20730: GREATER
20731: IFFALSE 20743
// k := 5 else
20733: LD_ADDR_VAR 0 2
20737: PUSH
20738: LD_INT 5
20740: ST_TO_ADDR
20741: GO 20753
// k := tmp ;
20743: LD_ADDR_VAR 0 2
20747: PUSH
20748: LD_VAR 0 3
20752: ST_TO_ADDR
// for i := 1 to k do
20753: LD_ADDR_VAR 0 1
20757: PUSH
20758: DOUBLE
20759: LD_INT 1
20761: DEC
20762: ST_TO_ADDR
20763: LD_VAR 0 2
20767: PUSH
20768: FOR_TO
20769: IFFALSE 20868
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20771: LD_VAR 0 3
20775: PUSH
20776: LD_VAR 0 1
20780: ARRAY
20781: PPUSH
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 4
20789: MOD
20790: PUSH
20791: LD_INT 1
20793: PLUS
20794: PPUSH
20795: CALL_OW 259
20799: PUSH
20800: LD_INT 10
20802: LESS
20803: IFFALSE 20866
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20805: LD_VAR 0 3
20809: PUSH
20810: LD_VAR 0 1
20814: ARRAY
20815: PPUSH
20816: LD_VAR 0 1
20820: PUSH
20821: LD_INT 4
20823: MOD
20824: PUSH
20825: LD_INT 1
20827: PLUS
20828: PPUSH
20829: LD_VAR 0 3
20833: PUSH
20834: LD_VAR 0 1
20838: ARRAY
20839: PPUSH
20840: LD_VAR 0 1
20844: PUSH
20845: LD_INT 4
20847: MOD
20848: PUSH
20849: LD_INT 1
20851: PLUS
20852: PPUSH
20853: CALL_OW 259
20857: PUSH
20858: LD_INT 1
20860: PLUS
20861: PPUSH
20862: CALL_OW 237
20866: GO 20768
20868: POP
20869: POP
// end ;
20870: PPOPN 3
20872: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20873: LD_EXP 48
20877: PUSH
20878: LD_EXP 56
20882: AND
20883: IFFALSE 20903
20885: GO 20887
20887: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20888: LD_INT 4
20890: PPUSH
20891: LD_OWVAR 2
20895: PPUSH
20896: LD_INT 0
20898: PPUSH
20899: CALL_OW 324
20903: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20904: LD_EXP 48
20908: PUSH
20909: LD_EXP 85
20913: AND
20914: IFFALSE 20934
20916: GO 20918
20918: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20919: LD_INT 19
20921: PPUSH
20922: LD_OWVAR 2
20926: PPUSH
20927: LD_INT 0
20929: PPUSH
20930: CALL_OW 324
20934: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20935: LD_EXP 48
20939: PUSH
20940: LD_EXP 57
20944: AND
20945: IFFALSE 21047
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
// begin enable ;
20954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20955: LD_ADDR_VAR 0 2
20959: PUSH
20960: LD_INT 22
20962: PUSH
20963: LD_OWVAR 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 34
20977: PUSH
20978: LD_INT 11
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 34
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: ST_TO_ADDR
// if not tmp then
21009: LD_VAR 0 2
21013: NOT
21014: IFFALSE 21018
// exit ;
21016: GO 21047
// for i in tmp do
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: LD_VAR 0 2
21027: PUSH
21028: FOR_IN
21029: IFFALSE 21045
// begin SetLives ( i , 0 ) ;
21031: LD_VAR 0 1
21035: PPUSH
21036: LD_INT 0
21038: PPUSH
21039: CALL_OW 234
// end ;
21043: GO 21028
21045: POP
21046: POP
// end ;
21047: PPOPN 2
21049: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21050: LD_EXP 48
21054: PUSH
21055: LD_EXP 58
21059: AND
21060: IFFALSE 21080
21062: GO 21064
21064: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21065: LD_INT 32
21067: PPUSH
21068: LD_OWVAR 2
21072: PPUSH
21073: LD_INT 0
21075: PPUSH
21076: CALL_OW 324
21080: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21081: LD_EXP 48
21085: PUSH
21086: LD_EXP 59
21090: AND
21091: IFFALSE 21272
21093: GO 21095
21095: DISABLE
21096: LD_INT 0
21098: PPUSH
21099: PPUSH
21100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21101: LD_ADDR_VAR 0 2
21105: PUSH
21106: LD_INT 22
21108: PUSH
21109: LD_OWVAR 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 33
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 69
21136: ST_TO_ADDR
// if not tmp then
21137: LD_VAR 0 2
21141: NOT
21142: IFFALSE 21146
// exit ;
21144: GO 21272
// side := 0 ;
21146: LD_ADDR_VAR 0 3
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// for i := 1 to 8 do
21154: LD_ADDR_VAR 0 1
21158: PUSH
21159: DOUBLE
21160: LD_INT 1
21162: DEC
21163: ST_TO_ADDR
21164: LD_INT 8
21166: PUSH
21167: FOR_TO
21168: IFFALSE 21216
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21170: LD_OWVAR 2
21174: PUSH
21175: LD_VAR 0 1
21179: NONEQUAL
21180: PUSH
21181: LD_OWVAR 2
21185: PPUSH
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL_OW 81
21195: PUSH
21196: LD_INT 2
21198: EQUAL
21199: AND
21200: IFFALSE 21214
// begin side := i ;
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_VAR 0 1
21211: ST_TO_ADDR
// break ;
21212: GO 21216
// end ;
21214: GO 21167
21216: POP
21217: POP
// if not side then
21218: LD_VAR 0 3
21222: NOT
21223: IFFALSE 21227
// exit ;
21225: GO 21272
// for i := 1 to tmp do
21227: LD_ADDR_VAR 0 1
21231: PUSH
21232: DOUBLE
21233: LD_INT 1
21235: DEC
21236: ST_TO_ADDR
21237: LD_VAR 0 2
21241: PUSH
21242: FOR_TO
21243: IFFALSE 21270
// if Prob ( 60 ) then
21245: LD_INT 60
21247: PPUSH
21248: CALL_OW 13
21252: IFFALSE 21268
// SetSide ( i , side ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: LD_VAR 0 3
21263: PPUSH
21264: CALL_OW 235
21268: GO 21242
21270: POP
21271: POP
// end ;
21272: PPOPN 3
21274: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21275: LD_EXP 48
21279: PUSH
21280: LD_EXP 61
21284: AND
21285: IFFALSE 21404
21287: GO 21289
21289: DISABLE
21290: LD_INT 0
21292: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21293: LD_ADDR_VAR 0 1
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_OWVAR 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 21
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 23
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21402
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 257
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 2
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 4
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: IN
21378: IFFALSE 21400
// SetClass ( un , rand ( 1 , 4 ) ) ;
21380: LD_VAR 0 1
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: LD_INT 4
21390: PPUSH
21391: CALL_OW 12
21395: PPUSH
21396: CALL_OW 336
21400: GO 21347
21402: POP
21403: POP
// end ;
21404: PPOPN 1
21406: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21407: LD_EXP 48
21411: PUSH
21412: LD_EXP 60
21416: AND
21417: IFFALSE 21496
21419: GO 21421
21421: DISABLE
21422: LD_INT 0
21424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21425: LD_ADDR_VAR 0 1
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_OWVAR 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 21
21444: PUSH
21445: LD_INT 3
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: ST_TO_ADDR
// if not tmp then
21461: LD_VAR 0 1
21465: NOT
21466: IFFALSE 21470
// exit ;
21468: GO 21496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21470: LD_VAR 0 1
21474: PUSH
21475: LD_INT 1
21477: PPUSH
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL_OW 12
21487: ARRAY
21488: PPUSH
21489: LD_INT 100
21491: PPUSH
21492: CALL_OW 234
// end ;
21496: PPOPN 1
21498: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21499: LD_EXP 48
21503: PUSH
21504: LD_EXP 62
21508: AND
21509: IFFALSE 21607
21511: GO 21513
21513: DISABLE
21514: LD_INT 0
21516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21517: LD_ADDR_VAR 0 1
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_OWVAR 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 21
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 69
21552: ST_TO_ADDR
// if not tmp then
21553: LD_VAR 0 1
21557: NOT
21558: IFFALSE 21562
// exit ;
21560: GO 21607
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21562: LD_VAR 0 1
21566: PUSH
21567: LD_INT 1
21569: PPUSH
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 12
21579: ARRAY
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_INT 4
21586: PPUSH
21587: CALL_OW 12
21591: PPUSH
21592: LD_INT 3000
21594: PPUSH
21595: LD_INT 9000
21597: PPUSH
21598: CALL_OW 12
21602: PPUSH
21603: CALL_OW 492
// end ;
21607: PPOPN 1
21609: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21610: LD_EXP 48
21614: PUSH
21615: LD_EXP 63
21619: AND
21620: IFFALSE 21640
21622: GO 21624
21624: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21625: LD_INT 1
21627: PPUSH
21628: LD_OWVAR 2
21632: PPUSH
21633: LD_INT 0
21635: PPUSH
21636: CALL_OW 324
21640: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21641: LD_EXP 48
21645: PUSH
21646: LD_EXP 64
21650: AND
21651: IFFALSE 21734
21653: GO 21655
21655: DISABLE
21656: LD_INT 0
21658: PPUSH
21659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_INT 22
21667: PUSH
21668: LD_OWVAR 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 21
21679: PUSH
21680: LD_INT 3
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: ST_TO_ADDR
// if not tmp then
21696: LD_VAR 0 2
21700: NOT
21701: IFFALSE 21705
// exit ;
21703: GO 21734
// for i in tmp do
21705: LD_ADDR_VAR 0 1
21709: PUSH
21710: LD_VAR 0 2
21714: PUSH
21715: FOR_IN
21716: IFFALSE 21732
// SetBLevel ( i , 10 ) ;
21718: LD_VAR 0 1
21722: PPUSH
21723: LD_INT 10
21725: PPUSH
21726: CALL_OW 241
21730: GO 21715
21732: POP
21733: POP
// end ;
21734: PPOPN 2
21736: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21737: LD_EXP 48
21741: PUSH
21742: LD_EXP 65
21746: AND
21747: IFFALSE 21858
21749: GO 21751
21751: DISABLE
21752: LD_INT 0
21754: PPUSH
21755: PPUSH
21756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: LD_INT 22
21764: PUSH
21765: LD_OWVAR 2
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PPUSH
21788: CALL_OW 69
21792: ST_TO_ADDR
// if not tmp then
21793: LD_VAR 0 3
21797: NOT
21798: IFFALSE 21802
// exit ;
21800: GO 21858
// un := tmp [ rand ( 1 , tmp ) ] ;
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: LD_VAR 0 3
21811: PUSH
21812: LD_INT 1
21814: PPUSH
21815: LD_VAR 0 3
21819: PPUSH
21820: CALL_OW 12
21824: ARRAY
21825: ST_TO_ADDR
// if Crawls ( un ) then
21826: LD_VAR 0 2
21830: PPUSH
21831: CALL_OW 318
21835: IFFALSE 21846
// ComWalk ( un ) ;
21837: LD_VAR 0 2
21841: PPUSH
21842: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_INT 5
21853: PPUSH
21854: CALL_OW 336
// end ;
21858: PPOPN 3
21860: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21861: LD_EXP 48
21865: PUSH
21866: LD_EXP 66
21870: AND
21871: PUSH
21872: LD_OWVAR 67
21876: PUSH
21877: LD_INT 4
21879: LESS
21880: AND
21881: IFFALSE 21900
21883: GO 21885
21885: DISABLE
// begin Difficulty := Difficulty + 1 ;
21886: LD_ADDR_OWVAR 67
21890: PUSH
21891: LD_OWVAR 67
21895: PUSH
21896: LD_INT 1
21898: PLUS
21899: ST_TO_ADDR
// end ;
21900: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21901: LD_EXP 48
21905: PUSH
21906: LD_EXP 67
21910: AND
21911: IFFALSE 22014
21913: GO 21915
21915: DISABLE
21916: LD_INT 0
21918: PPUSH
// begin for i := 1 to 5 do
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: DOUBLE
21925: LD_INT 1
21927: DEC
21928: ST_TO_ADDR
21929: LD_INT 5
21931: PUSH
21932: FOR_TO
21933: IFFALSE 22012
// begin uc_nation := nation_nature ;
21935: LD_ADDR_OWVAR 21
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// uc_side := 0 ;
21943: LD_ADDR_OWVAR 20
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21951: LD_ADDR_OWVAR 29
21955: PUSH
21956: LD_INT 12
21958: PUSH
21959: LD_INT 12
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: ST_TO_ADDR
// hc_agressivity := 20 ;
21966: LD_ADDR_OWVAR 35
21970: PUSH
21971: LD_INT 20
21973: ST_TO_ADDR
// hc_class := class_tiger ;
21974: LD_ADDR_OWVAR 28
21978: PUSH
21979: LD_INT 14
21981: ST_TO_ADDR
// hc_gallery :=  ;
21982: LD_ADDR_OWVAR 33
21986: PUSH
21987: LD_STRING 
21989: ST_TO_ADDR
// hc_name :=  ;
21990: LD_ADDR_OWVAR 26
21994: PUSH
21995: LD_STRING 
21997: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21998: CALL_OW 44
22002: PPUSH
22003: LD_INT 0
22005: PPUSH
22006: CALL_OW 51
// end ;
22010: GO 21932
22012: POP
22013: POP
// end ;
22014: PPOPN 1
22016: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22017: LD_EXP 48
22021: PUSH
22022: LD_EXP 68
22026: AND
22027: IFFALSE 22036
22029: GO 22031
22031: DISABLE
// StreamSibBomb ;
22032: CALL 22037 0 0
22036: END
// export function StreamSibBomb ; var i , x , y ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
// result := false ;
22043: LD_ADDR_VAR 0 1
22047: PUSH
22048: LD_INT 0
22050: ST_TO_ADDR
// for i := 1 to 16 do
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: DOUBLE
22057: LD_INT 1
22059: DEC
22060: ST_TO_ADDR
22061: LD_INT 16
22063: PUSH
22064: FOR_TO
22065: IFFALSE 22264
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22067: LD_ADDR_VAR 0 3
22071: PUSH
22072: LD_INT 10
22074: PUSH
22075: LD_INT 20
22077: PUSH
22078: LD_INT 30
22080: PUSH
22081: LD_INT 40
22083: PUSH
22084: LD_INT 50
22086: PUSH
22087: LD_INT 60
22089: PUSH
22090: LD_INT 70
22092: PUSH
22093: LD_INT 80
22095: PUSH
22096: LD_INT 90
22098: PUSH
22099: LD_INT 100
22101: PUSH
22102: LD_INT 110
22104: PUSH
22105: LD_INT 120
22107: PUSH
22108: LD_INT 130
22110: PUSH
22111: LD_INT 140
22113: PUSH
22114: LD_INT 150
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: PPUSH
22137: LD_INT 15
22139: PPUSH
22140: CALL_OW 12
22144: ARRAY
22145: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22146: LD_ADDR_VAR 0 4
22150: PUSH
22151: LD_INT 10
22153: PUSH
22154: LD_INT 20
22156: PUSH
22157: LD_INT 30
22159: PUSH
22160: LD_INT 40
22162: PUSH
22163: LD_INT 50
22165: PUSH
22166: LD_INT 60
22168: PUSH
22169: LD_INT 70
22171: PUSH
22172: LD_INT 80
22174: PUSH
22175: LD_INT 90
22177: PUSH
22178: LD_INT 100
22180: PUSH
22181: LD_INT 110
22183: PUSH
22184: LD_INT 120
22186: PUSH
22187: LD_INT 130
22189: PUSH
22190: LD_INT 140
22192: PUSH
22193: LD_INT 150
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PPUSH
22216: LD_INT 15
22218: PPUSH
22219: CALL_OW 12
22223: ARRAY
22224: ST_TO_ADDR
// if ValidHex ( x , y ) then
22225: LD_VAR 0 3
22229: PPUSH
22230: LD_VAR 0 4
22234: PPUSH
22235: CALL_OW 488
22239: IFFALSE 22262
// begin result := [ x , y ] ;
22241: LD_ADDR_VAR 0 1
22245: PUSH
22246: LD_VAR 0 3
22250: PUSH
22251: LD_VAR 0 4
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// break ;
22260: GO 22264
// end ; end ;
22262: GO 22064
22264: POP
22265: POP
// if result then
22266: LD_VAR 0 1
22270: IFFALSE 22330
// begin ToLua ( playSibBomb() ) ;
22272: LD_STRING playSibBomb()
22274: PPUSH
22275: CALL_OW 559
// wait ( 0 0$14 ) ;
22279: LD_INT 490
22281: PPUSH
22282: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22286: LD_VAR 0 1
22290: PUSH
22291: LD_INT 1
22293: ARRAY
22294: PPUSH
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 2
22302: ARRAY
22303: PPUSH
22304: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22308: LD_VAR 0 1
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 1
22321: PUSH
22322: LD_INT 2
22324: ARRAY
22325: PPUSH
22326: CALL_OW 429
// end ; end ;
22330: LD_VAR 0 1
22334: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22335: LD_EXP 48
22339: PUSH
22340: LD_EXP 70
22344: AND
22345: IFFALSE 22357
22347: GO 22349
22349: DISABLE
// YouLost (  ) ;
22350: LD_STRING 
22352: PPUSH
22353: CALL_OW 104
22357: END
// every 0 0$1 trigger StreamModeActive and sFog do
22358: LD_EXP 48
22362: PUSH
22363: LD_EXP 69
22367: AND
22368: IFFALSE 22382
22370: GO 22372
22372: DISABLE
// FogOff ( your_side ) ;
22373: LD_OWVAR 2
22377: PPUSH
22378: CALL_OW 344
22382: END
// every 0 0$1 trigger StreamModeActive and sSun do
22383: LD_EXP 48
22387: PUSH
22388: LD_EXP 71
22392: AND
22393: IFFALSE 22421
22395: GO 22397
22397: DISABLE
// begin solar_recharge_percent := 0 ;
22398: LD_ADDR_OWVAR 79
22402: PUSH
22403: LD_INT 0
22405: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22406: LD_INT 10500
22408: PPUSH
22409: CALL_OW 67
// solar_recharge_percent := 100 ;
22413: LD_ADDR_OWVAR 79
22417: PUSH
22418: LD_INT 100
22420: ST_TO_ADDR
// end ;
22421: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22422: LD_EXP 48
22426: PUSH
22427: LD_EXP 72
22431: AND
22432: IFFALSE 22671
22434: GO 22436
22436: DISABLE
22437: LD_INT 0
22439: PPUSH
22440: PPUSH
22441: PPUSH
// begin tmp := [ ] ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: EMPTY
22448: ST_TO_ADDR
// for i := 1 to 6 do
22449: LD_ADDR_VAR 0 1
22453: PUSH
22454: DOUBLE
22455: LD_INT 1
22457: DEC
22458: ST_TO_ADDR
22459: LD_INT 6
22461: PUSH
22462: FOR_TO
22463: IFFALSE 22568
// begin uc_nation := nation_nature ;
22465: LD_ADDR_OWVAR 21
22469: PUSH
22470: LD_INT 0
22472: ST_TO_ADDR
// uc_side := 0 ;
22473: LD_ADDR_OWVAR 20
22477: PUSH
22478: LD_INT 0
22480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22481: LD_ADDR_OWVAR 29
22485: PUSH
22486: LD_INT 12
22488: PUSH
22489: LD_INT 12
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: ST_TO_ADDR
// hc_agressivity := 20 ;
22496: LD_ADDR_OWVAR 35
22500: PUSH
22501: LD_INT 20
22503: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22504: LD_ADDR_OWVAR 28
22508: PUSH
22509: LD_INT 17
22511: ST_TO_ADDR
// hc_gallery :=  ;
22512: LD_ADDR_OWVAR 33
22516: PUSH
22517: LD_STRING 
22519: ST_TO_ADDR
// hc_name :=  ;
22520: LD_ADDR_OWVAR 26
22524: PUSH
22525: LD_STRING 
22527: ST_TO_ADDR
// un := CreateHuman ;
22528: LD_ADDR_VAR 0 2
22532: PUSH
22533: CALL_OW 44
22537: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22538: LD_VAR 0 2
22542: PPUSH
22543: LD_INT 1
22545: PPUSH
22546: CALL_OW 51
// tmp := tmp ^ un ;
22550: LD_ADDR_VAR 0 3
22554: PUSH
22555: LD_VAR 0 3
22559: PUSH
22560: LD_VAR 0 2
22564: ADD
22565: ST_TO_ADDR
// end ;
22566: GO 22462
22568: POP
22569: POP
// repeat wait ( 0 0$1 ) ;
22570: LD_INT 35
22572: PPUSH
22573: CALL_OW 67
// for un in tmp do
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_VAR 0 3
22586: PUSH
22587: FOR_IN
22588: IFFALSE 22662
// begin if IsDead ( un ) then
22590: LD_VAR 0 2
22594: PPUSH
22595: CALL_OW 301
22599: IFFALSE 22619
// begin tmp := tmp diff un ;
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: LD_VAR 0 3
22610: PUSH
22611: LD_VAR 0 2
22615: DIFF
22616: ST_TO_ADDR
// continue ;
22617: GO 22587
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22619: LD_VAR 0 2
22623: PPUSH
22624: LD_INT 3
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: PPUSH
22646: LD_VAR 0 2
22650: PPUSH
22651: CALL_OW 74
22655: PPUSH
22656: CALL_OW 115
// end ;
22660: GO 22587
22662: POP
22663: POP
// until not tmp ;
22664: LD_VAR 0 3
22668: NOT
22669: IFFALSE 22570
// end ;
22671: PPOPN 3
22673: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22674: LD_EXP 48
22678: PUSH
22679: LD_EXP 73
22683: AND
22684: IFFALSE 22738
22686: GO 22688
22688: DISABLE
// begin ToLua ( displayTroll(); ) ;
22689: LD_STRING displayTroll();
22691: PPUSH
22692: CALL_OW 559
// wait ( 3 3$00 ) ;
22696: LD_INT 6300
22698: PPUSH
22699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22703: LD_STRING hideTroll();
22705: PPUSH
22706: CALL_OW 559
// wait ( 1 1$00 ) ;
22710: LD_INT 2100
22712: PPUSH
22713: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22717: LD_STRING displayTroll();
22719: PPUSH
22720: CALL_OW 559
// wait ( 1 1$00 ) ;
22724: LD_INT 2100
22726: PPUSH
22727: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22731: LD_STRING hideTroll();
22733: PPUSH
22734: CALL_OW 559
// end ;
22738: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22739: LD_EXP 48
22743: PUSH
22744: LD_EXP 74
22748: AND
22749: IFFALSE 22812
22751: GO 22753
22753: DISABLE
22754: LD_INT 0
22756: PPUSH
// begin p := 0 ;
22757: LD_ADDR_VAR 0 1
22761: PUSH
22762: LD_INT 0
22764: ST_TO_ADDR
// repeat game_speed := 1 ;
22765: LD_ADDR_OWVAR 65
22769: PUSH
22770: LD_INT 1
22772: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22773: LD_INT 35
22775: PPUSH
22776: CALL_OW 67
// p := p + 1 ;
22780: LD_ADDR_VAR 0 1
22784: PUSH
22785: LD_VAR 0 1
22789: PUSH
22790: LD_INT 1
22792: PLUS
22793: ST_TO_ADDR
// until p >= 60 ;
22794: LD_VAR 0 1
22798: PUSH
22799: LD_INT 60
22801: GREATEREQUAL
22802: IFFALSE 22765
// game_speed := 4 ;
22804: LD_ADDR_OWVAR 65
22808: PUSH
22809: LD_INT 4
22811: ST_TO_ADDR
// end ;
22812: PPOPN 1
22814: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22815: LD_EXP 48
22819: PUSH
22820: LD_EXP 75
22824: AND
22825: IFFALSE 22971
22827: GO 22829
22829: DISABLE
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22834: LD_ADDR_VAR 0 1
22838: PUSH
22839: LD_INT 22
22841: PUSH
22842: LD_OWVAR 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 30
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 30
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: LIST
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: ST_TO_ADDR
// if not depot then
22888: LD_VAR 0 1
22892: NOT
22893: IFFALSE 22897
// exit ;
22895: GO 22971
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22897: LD_ADDR_VAR 0 2
22901: PUSH
22902: LD_VAR 0 1
22906: PUSH
22907: LD_INT 1
22909: PPUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 12
22919: ARRAY
22920: PPUSH
22921: CALL_OW 274
22925: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22926: LD_VAR 0 2
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: LD_INT 0
22936: PPUSH
22937: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22941: LD_VAR 0 2
22945: PPUSH
22946: LD_INT 2
22948: PPUSH
22949: LD_INT 0
22951: PPUSH
22952: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22956: LD_VAR 0 2
22960: PPUSH
22961: LD_INT 3
22963: PPUSH
22964: LD_INT 0
22966: PPUSH
22967: CALL_OW 277
// end ;
22971: PPOPN 2
22973: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22974: LD_EXP 48
22978: PUSH
22979: LD_EXP 76
22983: AND
22984: IFFALSE 23081
22986: GO 22988
22988: DISABLE
22989: LD_INT 0
22991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22992: LD_ADDR_VAR 0 1
22996: PUSH
22997: LD_INT 22
22999: PUSH
23000: LD_OWVAR 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 21
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 3
23021: PUSH
23022: LD_INT 23
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PPUSH
23041: CALL_OW 69
23045: ST_TO_ADDR
// if not tmp then
23046: LD_VAR 0 1
23050: NOT
23051: IFFALSE 23055
// exit ;
23053: GO 23081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23055: LD_VAR 0 1
23059: PUSH
23060: LD_INT 1
23062: PPUSH
23063: LD_VAR 0 1
23067: PPUSH
23068: CALL_OW 12
23072: ARRAY
23073: PPUSH
23074: LD_INT 200
23076: PPUSH
23077: CALL_OW 234
// end ;
23081: PPOPN 1
23083: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23084: LD_EXP 48
23088: PUSH
23089: LD_EXP 77
23093: AND
23094: IFFALSE 23173
23096: GO 23098
23098: DISABLE
23099: LD_INT 0
23101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23102: LD_ADDR_VAR 0 1
23106: PUSH
23107: LD_INT 22
23109: PUSH
23110: LD_OWVAR 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 21
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 69
23137: ST_TO_ADDR
// if not tmp then
23138: LD_VAR 0 1
23142: NOT
23143: IFFALSE 23147
// exit ;
23145: GO 23173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23147: LD_VAR 0 1
23151: PUSH
23152: LD_INT 1
23154: PPUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 12
23164: ARRAY
23165: PPUSH
23166: LD_INT 60
23168: PPUSH
23169: CALL_OW 234
// end ;
23173: PPOPN 1
23175: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23176: LD_EXP 48
23180: PUSH
23181: LD_EXP 78
23185: AND
23186: IFFALSE 23285
23188: GO 23190
23190: DISABLE
23191: LD_INT 0
23193: PPUSH
23194: PPUSH
// begin enable ;
23195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23196: LD_ADDR_VAR 0 1
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_OWVAR 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 61
23215: PUSH
23216: EMPTY
23217: LIST
23218: PUSH
23219: LD_INT 33
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: PPUSH
23234: CALL_OW 69
23238: ST_TO_ADDR
// if not tmp then
23239: LD_VAR 0 1
23243: NOT
23244: IFFALSE 23248
// exit ;
23246: GO 23285
// for i in tmp do
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_VAR 0 1
23257: PUSH
23258: FOR_IN
23259: IFFALSE 23283
// if IsControledBy ( i ) then
23261: LD_VAR 0 2
23265: PPUSH
23266: CALL_OW 312
23270: IFFALSE 23281
// ComUnlink ( i ) ;
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 136
23281: GO 23258
23283: POP
23284: POP
// end ;
23285: PPOPN 2
23287: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23288: LD_EXP 48
23292: PUSH
23293: LD_EXP 79
23297: AND
23298: IFFALSE 23438
23300: GO 23302
23302: DISABLE
23303: LD_INT 0
23305: PPUSH
23306: PPUSH
// begin ToLua ( displayPowell(); ) ;
23307: LD_STRING displayPowell();
23309: PPUSH
23310: CALL_OW 559
// uc_side := 0 ;
23314: LD_ADDR_OWVAR 20
23318: PUSH
23319: LD_INT 0
23321: ST_TO_ADDR
// uc_nation := 2 ;
23322: LD_ADDR_OWVAR 21
23326: PUSH
23327: LD_INT 2
23329: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23330: LD_ADDR_OWVAR 37
23334: PUSH
23335: LD_INT 14
23337: ST_TO_ADDR
// vc_engine := engine_siberite ;
23338: LD_ADDR_OWVAR 39
23342: PUSH
23343: LD_INT 3
23345: ST_TO_ADDR
// vc_control := control_apeman ;
23346: LD_ADDR_OWVAR 38
23350: PUSH
23351: LD_INT 5
23353: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23354: LD_ADDR_OWVAR 40
23358: PUSH
23359: LD_INT 29
23361: ST_TO_ADDR
// un := CreateVehicle ;
23362: LD_ADDR_VAR 0 2
23366: PUSH
23367: CALL_OW 45
23371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23372: LD_VAR 0 2
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23384: LD_INT 35
23386: PPUSH
23387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_INT 22
23398: PUSH
23399: LD_OWVAR 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PPUSH
23408: CALL_OW 69
23412: PPUSH
23413: LD_VAR 0 2
23417: PPUSH
23418: CALL_OW 74
23422: PPUSH
23423: CALL_OW 115
// until IsDead ( un ) ;
23427: LD_VAR 0 2
23431: PPUSH
23432: CALL_OW 301
23436: IFFALSE 23384
// end ;
23438: PPOPN 2
23440: END
// every 0 0$1 trigger StreamModeActive and sStu do
23441: LD_EXP 48
23445: PUSH
23446: LD_EXP 87
23450: AND
23451: IFFALSE 23467
23453: GO 23455
23455: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23456: LD_STRING displayStucuk();
23458: PPUSH
23459: CALL_OW 559
// ResetFog ;
23463: CALL_OW 335
// end ;
23467: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23468: LD_EXP 48
23472: PUSH
23473: LD_EXP 80
23477: AND
23478: IFFALSE 23619
23480: GO 23482
23482: DISABLE
23483: LD_INT 0
23485: PPUSH
23486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_INT 22
23494: PUSH
23495: LD_OWVAR 2
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 21
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: ST_TO_ADDR
// if not tmp then
23523: LD_VAR 0 2
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 23619
// un := tmp [ rand ( 1 , tmp ) ] ;
23532: LD_ADDR_VAR 0 1
23536: PUSH
23537: LD_VAR 0 2
23541: PUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_VAR 0 2
23549: PPUSH
23550: CALL_OW 12
23554: ARRAY
23555: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23556: LD_VAR 0 1
23560: PPUSH
23561: LD_INT 0
23563: PPUSH
23564: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23568: LD_VAR 0 1
23572: PPUSH
23573: LD_OWVAR 3
23577: PUSH
23578: LD_VAR 0 1
23582: DIFF
23583: PPUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 74
23593: PPUSH
23594: CALL_OW 115
// wait ( 0 0$20 ) ;
23598: LD_INT 700
23600: PPUSH
23601: CALL_OW 67
// SetSide ( un , your_side ) ;
23605: LD_VAR 0 1
23609: PPUSH
23610: LD_OWVAR 2
23614: PPUSH
23615: CALL_OW 235
// end ;
23619: PPOPN 2
23621: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23622: LD_EXP 48
23626: PUSH
23627: LD_EXP 81
23631: AND
23632: IFFALSE 23738
23634: GO 23636
23636: DISABLE
23637: LD_INT 0
23639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23640: LD_ADDR_VAR 0 1
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 30
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PPUSH
23689: CALL_OW 69
23693: ST_TO_ADDR
// if not depot then
23694: LD_VAR 0 1
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23738
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23703: LD_VAR 0 1
23707: PUSH
23708: LD_INT 1
23710: ARRAY
23711: PPUSH
23712: CALL_OW 250
23716: PPUSH
23717: LD_VAR 0 1
23721: PUSH
23722: LD_INT 1
23724: ARRAY
23725: PPUSH
23726: CALL_OW 251
23730: PPUSH
23731: LD_INT 70
23733: PPUSH
23734: CALL_OW 495
// end ;
23738: PPOPN 1
23740: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23741: LD_EXP 48
23745: PUSH
23746: LD_EXP 82
23750: AND
23751: IFFALSE 23962
23753: GO 23755
23755: DISABLE
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23763: LD_ADDR_VAR 0 5
23767: PUSH
23768: LD_INT 22
23770: PUSH
23771: LD_OWVAR 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 21
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: ST_TO_ADDR
// if not tmp then
23799: LD_VAR 0 5
23803: NOT
23804: IFFALSE 23808
// exit ;
23806: GO 23962
// for i in tmp do
23808: LD_ADDR_VAR 0 1
23812: PUSH
23813: LD_VAR 0 5
23817: PUSH
23818: FOR_IN
23819: IFFALSE 23960
// begin d := rand ( 0 , 5 ) ;
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: LD_INT 0
23828: PPUSH
23829: LD_INT 5
23831: PPUSH
23832: CALL_OW 12
23836: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23837: LD_ADDR_VAR 0 2
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 250
23851: PPUSH
23852: LD_VAR 0 4
23856: PPUSH
23857: LD_INT 3
23859: PPUSH
23860: LD_INT 12
23862: PPUSH
23863: CALL_OW 12
23867: PPUSH
23868: CALL_OW 272
23872: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 251
23887: PPUSH
23888: LD_VAR 0 4
23892: PPUSH
23893: LD_INT 3
23895: PPUSH
23896: LD_INT 12
23898: PPUSH
23899: CALL_OW 12
23903: PPUSH
23904: CALL_OW 273
23908: ST_TO_ADDR
// if ValidHex ( x , y ) then
23909: LD_VAR 0 2
23913: PPUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: CALL_OW 488
23923: IFFALSE 23958
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_VAR 0 2
23934: PPUSH
23935: LD_VAR 0 3
23939: PPUSH
23940: LD_INT 3
23942: PPUSH
23943: LD_INT 6
23945: PPUSH
23946: CALL_OW 12
23950: PPUSH
23951: LD_INT 1
23953: PPUSH
23954: CALL_OW 483
// end ;
23958: GO 23818
23960: POP
23961: POP
// end ;
23962: PPOPN 5
23964: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23965: LD_EXP 48
23969: PUSH
23970: LD_EXP 83
23974: AND
23975: IFFALSE 24069
23977: GO 23979
23979: DISABLE
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23984: LD_ADDR_VAR 0 2
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_OWVAR 2
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 32
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 21
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: PPUSH
24026: CALL_OW 69
24030: ST_TO_ADDR
// if not tmp then
24031: LD_VAR 0 2
24035: NOT
24036: IFFALSE 24040
// exit ;
24038: GO 24069
// for i in tmp do
24040: LD_ADDR_VAR 0 1
24044: PUSH
24045: LD_VAR 0 2
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24067
// SetFuel ( i , 0 ) ;
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_INT 0
24060: PPUSH
24061: CALL_OW 240
24065: GO 24050
24067: POP
24068: POP
// end ;
24069: PPOPN 2
24071: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24072: LD_EXP 48
24076: PUSH
24077: LD_EXP 84
24081: AND
24082: IFFALSE 24148
24084: GO 24086
24086: DISABLE
24087: LD_INT 0
24089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24090: LD_ADDR_VAR 0 1
24094: PUSH
24095: LD_INT 22
24097: PUSH
24098: LD_OWVAR 2
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 30
24109: PUSH
24110: LD_INT 29
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PPUSH
24121: CALL_OW 69
24125: ST_TO_ADDR
// if not tmp then
24126: LD_VAR 0 1
24130: NOT
24131: IFFALSE 24135
// exit ;
24133: GO 24148
// DestroyUnit ( tmp [ 1 ] ) ;
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: PPUSH
24144: CALL_OW 65
// end ;
24148: PPOPN 1
24150: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24151: LD_EXP 48
24155: PUSH
24156: LD_EXP 86
24160: AND
24161: IFFALSE 24290
24163: GO 24165
24165: DISABLE
24166: LD_INT 0
24168: PPUSH
// begin uc_side := 0 ;
24169: LD_ADDR_OWVAR 20
24173: PUSH
24174: LD_INT 0
24176: ST_TO_ADDR
// uc_nation := nation_arabian ;
24177: LD_ADDR_OWVAR 21
24181: PUSH
24182: LD_INT 2
24184: ST_TO_ADDR
// hc_gallery :=  ;
24185: LD_ADDR_OWVAR 33
24189: PUSH
24190: LD_STRING 
24192: ST_TO_ADDR
// hc_name :=  ;
24193: LD_ADDR_OWVAR 26
24197: PUSH
24198: LD_STRING 
24200: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24201: LD_INT 1
24203: PPUSH
24204: LD_INT 11
24206: PPUSH
24207: LD_INT 10
24209: PPUSH
24210: CALL_OW 380
// un := CreateHuman ;
24214: LD_ADDR_VAR 0 1
24218: PUSH
24219: CALL_OW 44
24223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24224: LD_VAR 0 1
24228: PPUSH
24229: LD_INT 1
24231: PPUSH
24232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24236: LD_INT 35
24238: PPUSH
24239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24243: LD_VAR 0 1
24247: PPUSH
24248: LD_INT 22
24250: PUSH
24251: LD_OWVAR 2
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 69
24264: PPUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 74
24274: PPUSH
24275: CALL_OW 115
// until IsDead ( un ) ;
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL_OW 301
24288: IFFALSE 24236
// end ;
24290: PPOPN 1
24292: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24293: LD_EXP 48
24297: PUSH
24298: LD_EXP 88
24302: AND
24303: IFFALSE 24315
24305: GO 24307
24307: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24308: LD_STRING earthquake(getX(game), 0, 32)
24310: PPUSH
24311: CALL_OW 559
24315: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24316: LD_EXP 48
24320: PUSH
24321: LD_EXP 89
24325: AND
24326: IFFALSE 24417
24328: GO 24330
24330: DISABLE
24331: LD_INT 0
24333: PPUSH
// begin enable ;
24334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24335: LD_ADDR_VAR 0 1
24339: PUSH
24340: LD_INT 22
24342: PUSH
24343: LD_OWVAR 2
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 21
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 33
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 69
24381: ST_TO_ADDR
// if not tmp then
24382: LD_VAR 0 1
24386: NOT
24387: IFFALSE 24391
// exit ;
24389: GO 24417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24391: LD_VAR 0 1
24395: PUSH
24396: LD_INT 1
24398: PPUSH
24399: LD_VAR 0 1
24403: PPUSH
24404: CALL_OW 12
24408: ARRAY
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL_OW 234
// end ;
24417: PPOPN 1
24419: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24420: LD_EXP 48
24424: PUSH
24425: LD_EXP 90
24429: AND
24430: IFFALSE 24571
24432: GO 24434
24434: DISABLE
24435: LD_INT 0
24437: PPUSH
24438: PPUSH
24439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24440: LD_ADDR_VAR 0 3
24444: PUSH
24445: LD_INT 22
24447: PUSH
24448: LD_OWVAR 2
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 25
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: ST_TO_ADDR
// if not tmp then
24476: LD_VAR 0 3
24480: NOT
24481: IFFALSE 24485
// exit ;
24483: GO 24571
// un := tmp [ rand ( 1 , tmp ) ] ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_VAR 0 3
24494: PUSH
24495: LD_INT 1
24497: PPUSH
24498: LD_VAR 0 3
24502: PPUSH
24503: CALL_OW 12
24507: ARRAY
24508: ST_TO_ADDR
// if Crawls ( un ) then
24509: LD_VAR 0 2
24513: PPUSH
24514: CALL_OW 318
24518: IFFALSE 24529
// ComWalk ( un ) ;
24520: LD_VAR 0 2
24524: PPUSH
24525: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_INT 9
24536: PPUSH
24537: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24541: LD_INT 28
24543: PPUSH
24544: LD_OWVAR 2
24548: PPUSH
24549: LD_INT 2
24551: PPUSH
24552: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24556: LD_INT 29
24558: PPUSH
24559: LD_OWVAR 2
24563: PPUSH
24564: LD_INT 2
24566: PPUSH
24567: CALL_OW 322
// end ;
24571: PPOPN 3
24573: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24574: LD_EXP 48
24578: PUSH
24579: LD_EXP 91
24583: AND
24584: IFFALSE 24695
24586: GO 24588
24588: DISABLE
24589: LD_INT 0
24591: PPUSH
24592: PPUSH
24593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_INT 22
24601: PUSH
24602: LD_OWVAR 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 25
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PPUSH
24625: CALL_OW 69
24629: ST_TO_ADDR
// if not tmp then
24630: LD_VAR 0 3
24634: NOT
24635: IFFALSE 24639
// exit ;
24637: GO 24695
// un := tmp [ rand ( 1 , tmp ) ] ;
24639: LD_ADDR_VAR 0 2
24643: PUSH
24644: LD_VAR 0 3
24648: PUSH
24649: LD_INT 1
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: CALL_OW 12
24661: ARRAY
24662: ST_TO_ADDR
// if Crawls ( un ) then
24663: LD_VAR 0 2
24667: PPUSH
24668: CALL_OW 318
24672: IFFALSE 24683
// ComWalk ( un ) ;
24674: LD_VAR 0 2
24678: PPUSH
24679: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_INT 8
24690: PPUSH
24691: CALL_OW 336
// end ;
24695: PPOPN 3
24697: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24698: LD_EXP 48
24702: PUSH
24703: LD_EXP 92
24707: AND
24708: IFFALSE 24852
24710: GO 24712
24712: DISABLE
24713: LD_INT 0
24715: PPUSH
24716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24717: LD_ADDR_VAR 0 2
24721: PUSH
24722: LD_INT 22
24724: PUSH
24725: LD_OWVAR 2
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 21
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: LD_INT 34
24749: PUSH
24750: LD_INT 12
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 34
24759: PUSH
24760: LD_INT 51
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 34
24769: PUSH
24770: LD_INT 32
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: LIST
24787: PPUSH
24788: CALL_OW 69
24792: ST_TO_ADDR
// if not tmp then
24793: LD_VAR 0 2
24797: NOT
24798: IFFALSE 24802
// exit ;
24800: GO 24852
// for i in tmp do
24802: LD_ADDR_VAR 0 1
24806: PUSH
24807: LD_VAR 0 2
24811: PUSH
24812: FOR_IN
24813: IFFALSE 24850
// if GetCargo ( i , mat_artifact ) = 0 then
24815: LD_VAR 0 1
24819: PPUSH
24820: LD_INT 4
24822: PPUSH
24823: CALL_OW 289
24827: PUSH
24828: LD_INT 0
24830: EQUAL
24831: IFFALSE 24848
// SetCargo ( i , mat_siberit , 100 ) ;
24833: LD_VAR 0 1
24837: PPUSH
24838: LD_INT 3
24840: PPUSH
24841: LD_INT 100
24843: PPUSH
24844: CALL_OW 290
24848: GO 24812
24850: POP
24851: POP
// end ;
24852: PPOPN 2
24854: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24855: LD_EXP 48
24859: PUSH
24860: LD_EXP 93
24864: AND
24865: IFFALSE 25048
24867: GO 24869
24869: DISABLE
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24874: LD_ADDR_VAR 0 2
24878: PUSH
24879: LD_INT 22
24881: PUSH
24882: LD_OWVAR 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: ST_TO_ADDR
// if not tmp then
24896: LD_VAR 0 2
24900: NOT
24901: IFFALSE 24905
// exit ;
24903: GO 25048
// for i := 1 to 2 do
24905: LD_ADDR_VAR 0 1
24909: PUSH
24910: DOUBLE
24911: LD_INT 1
24913: DEC
24914: ST_TO_ADDR
24915: LD_INT 2
24917: PUSH
24918: FOR_TO
24919: IFFALSE 25046
// begin uc_side := your_side ;
24921: LD_ADDR_OWVAR 20
24925: PUSH
24926: LD_OWVAR 2
24930: ST_TO_ADDR
// uc_nation := nation_american ;
24931: LD_ADDR_OWVAR 21
24935: PUSH
24936: LD_INT 1
24938: ST_TO_ADDR
// vc_chassis := us_morphling ;
24939: LD_ADDR_OWVAR 37
24943: PUSH
24944: LD_INT 5
24946: ST_TO_ADDR
// vc_engine := engine_siberite ;
24947: LD_ADDR_OWVAR 39
24951: PUSH
24952: LD_INT 3
24954: ST_TO_ADDR
// vc_control := control_computer ;
24955: LD_ADDR_OWVAR 38
24959: PUSH
24960: LD_INT 3
24962: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24963: LD_ADDR_OWVAR 40
24967: PUSH
24968: LD_INT 10
24970: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24971: LD_VAR 0 2
24975: PUSH
24976: LD_INT 1
24978: ARRAY
24979: PPUSH
24980: CALL_OW 310
24984: NOT
24985: IFFALSE 25032
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24987: CALL_OW 45
24991: PPUSH
24992: LD_VAR 0 2
24996: PUSH
24997: LD_INT 1
24999: ARRAY
25000: PPUSH
25001: CALL_OW 250
25005: PPUSH
25006: LD_VAR 0 2
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: CALL_OW 251
25019: PPUSH
25020: LD_INT 12
25022: PPUSH
25023: LD_INT 1
25025: PPUSH
25026: CALL_OW 50
25030: GO 25044
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25032: CALL_OW 45
25036: PPUSH
25037: LD_INT 1
25039: PPUSH
25040: CALL_OW 51
// end ;
25044: GO 24918
25046: POP
25047: POP
// end ;
25048: PPOPN 2
25050: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25051: LD_EXP 48
25055: PUSH
25056: LD_EXP 94
25060: AND
25061: IFFALSE 25283
25063: GO 25065
25065: DISABLE
25066: LD_INT 0
25068: PPUSH
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25074: LD_ADDR_VAR 0 6
25078: PUSH
25079: LD_INT 22
25081: PUSH
25082: LD_OWVAR 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 21
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 3
25103: PUSH
25104: LD_INT 23
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: ST_TO_ADDR
// if not tmp then
25128: LD_VAR 0 6
25132: NOT
25133: IFFALSE 25137
// exit ;
25135: GO 25283
// s1 := rand ( 1 , 4 ) ;
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: LD_INT 1
25144: PPUSH
25145: LD_INT 4
25147: PPUSH
25148: CALL_OW 12
25152: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25153: LD_ADDR_VAR 0 4
25157: PUSH
25158: LD_VAR 0 6
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: PPUSH
25167: LD_VAR 0 2
25171: PPUSH
25172: CALL_OW 259
25176: ST_TO_ADDR
// if s1 = 1 then
25177: LD_VAR 0 2
25181: PUSH
25182: LD_INT 1
25184: EQUAL
25185: IFFALSE 25205
// s2 := rand ( 2 , 4 ) else
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_INT 2
25194: PPUSH
25195: LD_INT 4
25197: PPUSH
25198: CALL_OW 12
25202: ST_TO_ADDR
25203: GO 25213
// s2 := 1 ;
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 1
25212: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25213: LD_ADDR_VAR 0 5
25217: PUSH
25218: LD_VAR 0 6
25222: PUSH
25223: LD_INT 1
25225: ARRAY
25226: PPUSH
25227: LD_VAR 0 3
25231: PPUSH
25232: CALL_OW 259
25236: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25237: LD_VAR 0 6
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 5
25255: PPUSH
25256: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25260: LD_VAR 0 6
25264: PUSH
25265: LD_INT 1
25267: ARRAY
25268: PPUSH
25269: LD_VAR 0 3
25273: PPUSH
25274: LD_VAR 0 4
25278: PPUSH
25279: CALL_OW 237
// end ;
25283: PPOPN 6
25285: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25286: LD_EXP 48
25290: PUSH
25291: LD_EXP 95
25295: AND
25296: IFFALSE 25375
25298: GO 25300
25300: DISABLE
25301: LD_INT 0
25303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_OWVAR 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 30
25323: PUSH
25324: LD_INT 3
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PPUSH
25335: CALL_OW 69
25339: ST_TO_ADDR
// if not tmp then
25340: LD_VAR 0 1
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 25375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25349: LD_VAR 0 1
25353: PUSH
25354: LD_INT 1
25356: PPUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 12
25366: ARRAY
25367: PPUSH
25368: LD_INT 1
25370: PPUSH
25371: CALL_OW 234
// end ;
25375: PPOPN 1
25377: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25378: LD_EXP 48
25382: PUSH
25383: LD_EXP 96
25387: AND
25388: IFFALSE 25500
25390: GO 25392
25392: DISABLE
25393: LD_INT 0
25395: PPUSH
25396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25397: LD_ADDR_VAR 0 2
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_OWVAR 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 30
25419: PUSH
25420: LD_INT 27
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 30
25429: PUSH
25430: LD_INT 26
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 30
25439: PUSH
25440: LD_INT 28
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: ST_TO_ADDR
// if not tmp then
25462: LD_VAR 0 2
25466: NOT
25467: IFFALSE 25471
// exit ;
25469: GO 25500
// for i in tmp do
25471: LD_ADDR_VAR 0 1
25475: PUSH
25476: LD_VAR 0 2
25480: PUSH
25481: FOR_IN
25482: IFFALSE 25498
// SetLives ( i , 1 ) ;
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_INT 1
25491: PPUSH
25492: CALL_OW 234
25496: GO 25481
25498: POP
25499: POP
// end ;
25500: PPOPN 2
25502: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25503: LD_EXP 48
25507: PUSH
25508: LD_EXP 97
25512: AND
25513: IFFALSE 25800
25515: GO 25517
25517: DISABLE
25518: LD_INT 0
25520: PPUSH
25521: PPUSH
25522: PPUSH
// begin i := rand ( 1 , 7 ) ;
25523: LD_ADDR_VAR 0 1
25527: PUSH
25528: LD_INT 1
25530: PPUSH
25531: LD_INT 7
25533: PPUSH
25534: CALL_OW 12
25538: ST_TO_ADDR
// case i of 1 :
25539: LD_VAR 0 1
25543: PUSH
25544: LD_INT 1
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25562
25552: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25553: LD_STRING earthquake(getX(game), 0, 32)
25555: PPUSH
25556: CALL_OW 559
25560: GO 25800
25562: LD_INT 2
25564: DOUBLE
25565: EQUAL
25566: IFTRUE 25570
25568: GO 25584
25570: POP
// begin ToLua ( displayStucuk(); ) ;
25571: LD_STRING displayStucuk();
25573: PPUSH
25574: CALL_OW 559
// ResetFog ;
25578: CALL_OW 335
// end ; 3 :
25582: GO 25800
25584: LD_INT 3
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25696
25592: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25593: LD_ADDR_VAR 0 2
25597: PUSH
25598: LD_INT 22
25600: PUSH
25601: LD_OWVAR 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 25
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PPUSH
25624: CALL_OW 69
25628: ST_TO_ADDR
// if not tmp then
25629: LD_VAR 0 2
25633: NOT
25634: IFFALSE 25638
// exit ;
25636: GO 25800
// un := tmp [ rand ( 1 , tmp ) ] ;
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: LD_INT 1
25650: PPUSH
25651: LD_VAR 0 2
25655: PPUSH
25656: CALL_OW 12
25660: ARRAY
25661: ST_TO_ADDR
// if Crawls ( un ) then
25662: LD_VAR 0 3
25666: PPUSH
25667: CALL_OW 318
25671: IFFALSE 25682
// ComWalk ( un ) ;
25673: LD_VAR 0 3
25677: PPUSH
25678: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25682: LD_VAR 0 3
25686: PPUSH
25687: LD_INT 8
25689: PPUSH
25690: CALL_OW 336
// end ; 4 :
25694: GO 25800
25696: LD_INT 4
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25778
25704: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25705: LD_ADDR_VAR 0 2
25709: PUSH
25710: LD_INT 22
25712: PUSH
25713: LD_OWVAR 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 30
25724: PUSH
25725: LD_INT 29
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: ST_TO_ADDR
// if not tmp then
25741: LD_VAR 0 2
25745: NOT
25746: IFFALSE 25750
// exit ;
25748: GO 25800
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25750: LD_VAR 0 2
25754: PUSH
25755: LD_INT 1
25757: ARRAY
25758: PPUSH
25759: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25763: LD_VAR 0 2
25767: PUSH
25768: LD_INT 1
25770: ARRAY
25771: PPUSH
25772: CALL_OW 65
// end ; 5 .. 7 :
25776: GO 25800
25778: LD_INT 5
25780: DOUBLE
25781: GREATEREQUAL
25782: IFFALSE 25790
25784: LD_INT 7
25786: DOUBLE
25787: LESSEQUAL
25788: IFTRUE 25792
25790: GO 25799
25792: POP
// StreamSibBomb ; end ;
25793: CALL 22037 0 0
25797: GO 25800
25799: POP
// end ;
25800: PPOPN 3
25802: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25803: LD_EXP 48
25807: PUSH
25808: LD_EXP 98
25812: AND
25813: IFFALSE 25969
25815: GO 25817
25817: DISABLE
25818: LD_INT 0
25820: PPUSH
25821: PPUSH
25822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 81
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 21
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PPUSH
25872: CALL_OW 69
25876: ST_TO_ADDR
// if not tmp then
25877: LD_VAR 0 2
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 25969
// p := 0 ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 0
25893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25894: LD_INT 35
25896: PPUSH
25897: CALL_OW 67
// p := p + 1 ;
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_VAR 0 3
25910: PUSH
25911: LD_INT 1
25913: PLUS
25914: ST_TO_ADDR
// for i in tmp do
25915: LD_ADDR_VAR 0 1
25919: PUSH
25920: LD_VAR 0 2
25924: PUSH
25925: FOR_IN
25926: IFFALSE 25957
// if GetLives ( i ) < 1000 then
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 256
25937: PUSH
25938: LD_INT 1000
25940: LESS
25941: IFFALSE 25955
// SetLives ( i , 1000 ) ;
25943: LD_VAR 0 1
25947: PPUSH
25948: LD_INT 1000
25950: PPUSH
25951: CALL_OW 234
25955: GO 25925
25957: POP
25958: POP
// until p > 20 ;
25959: LD_VAR 0 3
25963: PUSH
25964: LD_INT 20
25966: GREATER
25967: IFFALSE 25894
// end ;
25969: PPOPN 3
25971: END
// every 0 0$1 trigger StreamModeActive and sTime do
25972: LD_EXP 48
25976: PUSH
25977: LD_EXP 99
25981: AND
25982: IFFALSE 26017
25984: GO 25986
25986: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25987: LD_INT 28
25989: PPUSH
25990: LD_OWVAR 2
25994: PPUSH
25995: LD_INT 2
25997: PPUSH
25998: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26002: LD_INT 30
26004: PPUSH
26005: LD_OWVAR 2
26009: PPUSH
26010: LD_INT 2
26012: PPUSH
26013: CALL_OW 322
// end ;
26017: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26018: LD_EXP 48
26022: PUSH
26023: LD_EXP 100
26027: AND
26028: IFFALSE 26149
26030: GO 26032
26032: DISABLE
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26037: LD_ADDR_VAR 0 2
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: LD_INT 23
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: ST_TO_ADDR
// if not tmp then
26091: LD_VAR 0 2
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26149
// for i in tmp do
26100: LD_ADDR_VAR 0 1
26104: PUSH
26105: LD_VAR 0 2
26109: PUSH
26110: FOR_IN
26111: IFFALSE 26147
// begin if Crawls ( i ) then
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 318
26122: IFFALSE 26133
// ComWalk ( i ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: CALL_OW 138
// SetClass ( i , 2 ) ;
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_INT 2
26140: PPUSH
26141: CALL_OW 336
// end ;
26145: GO 26110
26147: POP
26148: POP
// end ;
26149: PPOPN 2
26151: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26152: LD_EXP 48
26156: PUSH
26157: LD_EXP 101
26161: AND
26162: IFFALSE 26450
26164: GO 26166
26166: DISABLE
26167: LD_INT 0
26169: PPUSH
26170: PPUSH
26171: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26172: LD_OWVAR 2
26176: PPUSH
26177: LD_INT 9
26179: PPUSH
26180: LD_INT 1
26182: PPUSH
26183: LD_INT 1
26185: PPUSH
26186: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26190: LD_INT 9
26192: PPUSH
26193: LD_OWVAR 2
26197: PPUSH
26198: CALL_OW 343
// uc_side := 9 ;
26202: LD_ADDR_OWVAR 20
26206: PUSH
26207: LD_INT 9
26209: ST_TO_ADDR
// uc_nation := 2 ;
26210: LD_ADDR_OWVAR 21
26214: PUSH
26215: LD_INT 2
26217: ST_TO_ADDR
// hc_name := Dark Warrior ;
26218: LD_ADDR_OWVAR 26
26222: PUSH
26223: LD_STRING Dark Warrior
26225: ST_TO_ADDR
// hc_gallery :=  ;
26226: LD_ADDR_OWVAR 33
26230: PUSH
26231: LD_STRING 
26233: ST_TO_ADDR
// hc_noskilllimit := true ;
26234: LD_ADDR_OWVAR 76
26238: PUSH
26239: LD_INT 1
26241: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26242: LD_ADDR_OWVAR 31
26246: PUSH
26247: LD_INT 30
26249: PUSH
26250: LD_INT 30
26252: PUSH
26253: LD_INT 30
26255: PUSH
26256: LD_INT 30
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: ST_TO_ADDR
// un := CreateHuman ;
26265: LD_ADDR_VAR 0 3
26269: PUSH
26270: CALL_OW 44
26274: ST_TO_ADDR
// hc_noskilllimit := false ;
26275: LD_ADDR_OWVAR 76
26279: PUSH
26280: LD_INT 0
26282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26283: LD_VAR 0 3
26287: PPUSH
26288: LD_INT 1
26290: PPUSH
26291: CALL_OW 51
// ToLua ( playRanger() ) ;
26295: LD_STRING playRanger()
26297: PPUSH
26298: CALL_OW 559
// p := 0 ;
26302: LD_ADDR_VAR 0 2
26306: PUSH
26307: LD_INT 0
26309: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26310: LD_INT 35
26312: PPUSH
26313: CALL_OW 67
// p := p + 1 ;
26317: LD_ADDR_VAR 0 2
26321: PUSH
26322: LD_VAR 0 2
26326: PUSH
26327: LD_INT 1
26329: PLUS
26330: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26331: LD_VAR 0 3
26335: PPUSH
26336: CALL_OW 256
26340: PUSH
26341: LD_INT 1000
26343: LESS
26344: IFFALSE 26358
// SetLives ( un , 1000 ) ;
26346: LD_VAR 0 3
26350: PPUSH
26351: LD_INT 1000
26353: PPUSH
26354: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26358: LD_VAR 0 3
26362: PPUSH
26363: LD_INT 81
26365: PUSH
26366: LD_OWVAR 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 91
26377: PUSH
26378: LD_VAR 0 3
26382: PUSH
26383: LD_INT 30
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PPUSH
26395: CALL_OW 69
26399: PPUSH
26400: LD_VAR 0 3
26404: PPUSH
26405: CALL_OW 74
26409: PPUSH
26410: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26414: LD_VAR 0 2
26418: PUSH
26419: LD_INT 80
26421: GREATER
26422: PUSH
26423: LD_VAR 0 3
26427: PPUSH
26428: CALL_OW 301
26432: OR
26433: IFFALSE 26310
// if un then
26435: LD_VAR 0 3
26439: IFFALSE 26450
// RemoveUnit ( un ) ;
26441: LD_VAR 0 3
26445: PPUSH
26446: CALL_OW 64
// end ;
26450: PPOPN 3
26452: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26453: LD_EXP 102
26457: IFFALSE 26573
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
26465: PPUSH
26466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26467: LD_ADDR_VAR 0 2
26471: PUSH
26472: LD_INT 81
26474: PUSH
26475: LD_OWVAR 2
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 21
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PPUSH
26498: CALL_OW 69
26502: ST_TO_ADDR
// if not tmp then
26503: LD_VAR 0 2
26507: NOT
26508: IFFALSE 26512
// exit ;
26510: GO 26573
// ToLua ( playComputer() ) ;
26512: LD_STRING playComputer()
26514: PPUSH
26515: CALL_OW 559
// for i in tmp do
26519: LD_ADDR_VAR 0 1
26523: PUSH
26524: LD_VAR 0 2
26528: PUSH
26529: FOR_IN
26530: IFFALSE 26571
// for j := 1 to 4 do
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: DOUBLE
26538: LD_INT 1
26540: DEC
26541: ST_TO_ADDR
26542: LD_INT 4
26544: PUSH
26545: FOR_TO
26546: IFFALSE 26567
// SetSkill ( i , j , 10 ) ;
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_VAR 0 3
26557: PPUSH
26558: LD_INT 10
26560: PPUSH
26561: CALL_OW 237
26565: GO 26545
26567: POP
26568: POP
26569: GO 26529
26571: POP
26572: POP
// end ;
26573: PPOPN 3
26575: END
// every 0 0$1 trigger s30 do var i , tmp ;
26576: LD_EXP 103
26580: IFFALSE 26649
26582: GO 26584
26584: DISABLE
26585: LD_INT 0
26587: PPUSH
26588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26589: LD_ADDR_VAR 0 2
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: ST_TO_ADDR
// if not tmp then
26611: LD_VAR 0 2
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26649
// for i in tmp do
26620: LD_ADDR_VAR 0 1
26624: PUSH
26625: LD_VAR 0 2
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26647
// SetLives ( i , 300 ) ;
26633: LD_VAR 0 1
26637: PPUSH
26638: LD_INT 300
26640: PPUSH
26641: CALL_OW 234
26645: GO 26630
26647: POP
26648: POP
// end ;
26649: PPOPN 2
26651: END
// every 0 0$1 trigger s60 do var i , tmp ;
26652: LD_EXP 104
26656: IFFALSE 26725
26658: GO 26660
26660: DISABLE
26661: LD_INT 0
26663: PPUSH
26664: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26665: LD_ADDR_VAR 0 2
26669: PUSH
26670: LD_INT 22
26672: PUSH
26673: LD_OWVAR 2
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 69
26686: ST_TO_ADDR
// if not tmp then
26687: LD_VAR 0 2
26691: NOT
26692: IFFALSE 26696
// exit ;
26694: GO 26725
// for i in tmp do
26696: LD_ADDR_VAR 0 1
26700: PUSH
26701: LD_VAR 0 2
26705: PUSH
26706: FOR_IN
26707: IFFALSE 26723
// SetLives ( i , 600 ) ;
26709: LD_VAR 0 1
26713: PPUSH
26714: LD_INT 600
26716: PPUSH
26717: CALL_OW 234
26721: GO 26706
26723: POP
26724: POP
// end ;
26725: PPOPN 2
26727: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26728: LD_INT 0
26730: PPUSH
// case cmd of 301 :
26731: LD_VAR 0 1
26735: PUSH
26736: LD_INT 301
26738: DOUBLE
26739: EQUAL
26740: IFTRUE 26744
26742: GO 26776
26744: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26745: LD_VAR 0 6
26749: PPUSH
26750: LD_VAR 0 7
26754: PPUSH
26755: LD_VAR 0 8
26759: PPUSH
26760: LD_VAR 0 4
26764: PPUSH
26765: LD_VAR 0 5
26769: PPUSH
26770: CALL 27977 0 5
26774: GO 26897
26776: LD_INT 302
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26821
26784: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26785: LD_VAR 0 6
26789: PPUSH
26790: LD_VAR 0 7
26794: PPUSH
26795: LD_VAR 0 8
26799: PPUSH
26800: LD_VAR 0 9
26804: PPUSH
26805: LD_VAR 0 4
26809: PPUSH
26810: LD_VAR 0 5
26814: PPUSH
26815: CALL 28068 0 6
26819: GO 26897
26821: LD_INT 303
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26829
26827: GO 26866
26829: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26830: LD_VAR 0 6
26834: PPUSH
26835: LD_VAR 0 7
26839: PPUSH
26840: LD_VAR 0 8
26844: PPUSH
26845: LD_VAR 0 9
26849: PPUSH
26850: LD_VAR 0 4
26854: PPUSH
26855: LD_VAR 0 5
26859: PPUSH
26860: CALL 26902 0 6
26864: GO 26897
26866: LD_INT 304
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26896
26874: POP
// hHackTeleport ( unit , x , y ) ; end ;
26875: LD_VAR 0 2
26879: PPUSH
26880: LD_VAR 0 4
26884: PPUSH
26885: LD_VAR 0 5
26889: PPUSH
26890: CALL 28661 0 3
26894: GO 26897
26896: POP
// end ;
26897: LD_VAR 0 12
26901: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26902: LD_INT 0
26904: PPUSH
26905: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26906: LD_VAR 0 1
26910: PUSH
26911: LD_INT 1
26913: LESS
26914: PUSH
26915: LD_VAR 0 1
26919: PUSH
26920: LD_INT 3
26922: GREATER
26923: OR
26924: PUSH
26925: LD_VAR 0 5
26929: PPUSH
26930: LD_VAR 0 6
26934: PPUSH
26935: CALL_OW 428
26939: OR
26940: IFFALSE 26944
// exit ;
26942: GO 27664
// uc_side := your_side ;
26944: LD_ADDR_OWVAR 20
26948: PUSH
26949: LD_OWVAR 2
26953: ST_TO_ADDR
// uc_nation := nation ;
26954: LD_ADDR_OWVAR 21
26958: PUSH
26959: LD_VAR 0 1
26963: ST_TO_ADDR
// bc_level = 1 ;
26964: LD_ADDR_OWVAR 43
26968: PUSH
26969: LD_INT 1
26971: ST_TO_ADDR
// case btype of 1 :
26972: LD_VAR 0 2
26976: PUSH
26977: LD_INT 1
26979: DOUBLE
26980: EQUAL
26981: IFTRUE 26985
26983: GO 26996
26985: POP
// bc_type := b_depot ; 2 :
26986: LD_ADDR_OWVAR 42
26990: PUSH
26991: LD_INT 0
26993: ST_TO_ADDR
26994: GO 27608
26996: LD_INT 2
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 27015
27004: POP
// bc_type := b_warehouse ; 3 :
27005: LD_ADDR_OWVAR 42
27009: PUSH
27010: LD_INT 1
27012: ST_TO_ADDR
27013: GO 27608
27015: LD_INT 3
27017: DOUBLE
27018: EQUAL
27019: IFTRUE 27023
27021: GO 27034
27023: POP
// bc_type := b_lab ; 4 .. 9 :
27024: LD_ADDR_OWVAR 42
27028: PUSH
27029: LD_INT 6
27031: ST_TO_ADDR
27032: GO 27608
27034: LD_INT 4
27036: DOUBLE
27037: GREATEREQUAL
27038: IFFALSE 27046
27040: LD_INT 9
27042: DOUBLE
27043: LESSEQUAL
27044: IFTRUE 27048
27046: GO 27100
27048: POP
// begin bc_type := b_lab_half ;
27049: LD_ADDR_OWVAR 42
27053: PUSH
27054: LD_INT 7
27056: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27057: LD_ADDR_OWVAR 44
27061: PUSH
27062: LD_INT 10
27064: PUSH
27065: LD_INT 11
27067: PUSH
27068: LD_INT 12
27070: PUSH
27071: LD_INT 15
27073: PUSH
27074: LD_INT 14
27076: PUSH
27077: LD_INT 13
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_INT 3
27095: MINUS
27096: ARRAY
27097: ST_TO_ADDR
// end ; 10 .. 13 :
27098: GO 27608
27100: LD_INT 10
27102: DOUBLE
27103: GREATEREQUAL
27104: IFFALSE 27112
27106: LD_INT 13
27108: DOUBLE
27109: LESSEQUAL
27110: IFTRUE 27114
27112: GO 27191
27114: POP
// begin bc_type := b_lab_full ;
27115: LD_ADDR_OWVAR 42
27119: PUSH
27120: LD_INT 8
27122: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27123: LD_ADDR_OWVAR 44
27127: PUSH
27128: LD_INT 10
27130: PUSH
27131: LD_INT 12
27133: PUSH
27134: LD_INT 14
27136: PUSH
27137: LD_INT 13
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: PUSH
27146: LD_VAR 0 2
27150: PUSH
27151: LD_INT 9
27153: MINUS
27154: ARRAY
27155: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27156: LD_ADDR_OWVAR 45
27160: PUSH
27161: LD_INT 11
27163: PUSH
27164: LD_INT 15
27166: PUSH
27167: LD_INT 12
27169: PUSH
27170: LD_INT 15
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: PUSH
27179: LD_VAR 0 2
27183: PUSH
27184: LD_INT 9
27186: MINUS
27187: ARRAY
27188: ST_TO_ADDR
// end ; 14 :
27189: GO 27608
27191: LD_INT 14
27193: DOUBLE
27194: EQUAL
27195: IFTRUE 27199
27197: GO 27210
27199: POP
// bc_type := b_workshop ; 15 :
27200: LD_ADDR_OWVAR 42
27204: PUSH
27205: LD_INT 2
27207: ST_TO_ADDR
27208: GO 27608
27210: LD_INT 15
27212: DOUBLE
27213: EQUAL
27214: IFTRUE 27218
27216: GO 27229
27218: POP
// bc_type := b_factory ; 16 :
27219: LD_ADDR_OWVAR 42
27223: PUSH
27224: LD_INT 3
27226: ST_TO_ADDR
27227: GO 27608
27229: LD_INT 16
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27248
27237: POP
// bc_type := b_ext_gun ; 17 :
27238: LD_ADDR_OWVAR 42
27242: PUSH
27243: LD_INT 17
27245: ST_TO_ADDR
27246: GO 27608
27248: LD_INT 17
27250: DOUBLE
27251: EQUAL
27252: IFTRUE 27256
27254: GO 27284
27256: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27257: LD_ADDR_OWVAR 42
27261: PUSH
27262: LD_INT 19
27264: PUSH
27265: LD_INT 23
27267: PUSH
27268: LD_INT 19
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: PUSH
27276: LD_VAR 0 1
27280: ARRAY
27281: ST_TO_ADDR
27282: GO 27608
27284: LD_INT 18
27286: DOUBLE
27287: EQUAL
27288: IFTRUE 27292
27290: GO 27303
27292: POP
// bc_type := b_ext_radar ; 19 :
27293: LD_ADDR_OWVAR 42
27297: PUSH
27298: LD_INT 20
27300: ST_TO_ADDR
27301: GO 27608
27303: LD_INT 19
27305: DOUBLE
27306: EQUAL
27307: IFTRUE 27311
27309: GO 27322
27311: POP
// bc_type := b_ext_radio ; 20 :
27312: LD_ADDR_OWVAR 42
27316: PUSH
27317: LD_INT 22
27319: ST_TO_ADDR
27320: GO 27608
27322: LD_INT 20
27324: DOUBLE
27325: EQUAL
27326: IFTRUE 27330
27328: GO 27341
27330: POP
// bc_type := b_ext_siberium ; 21 :
27331: LD_ADDR_OWVAR 42
27335: PUSH
27336: LD_INT 21
27338: ST_TO_ADDR
27339: GO 27608
27341: LD_INT 21
27343: DOUBLE
27344: EQUAL
27345: IFTRUE 27349
27347: GO 27360
27349: POP
// bc_type := b_ext_computer ; 22 :
27350: LD_ADDR_OWVAR 42
27354: PUSH
27355: LD_INT 24
27357: ST_TO_ADDR
27358: GO 27608
27360: LD_INT 22
27362: DOUBLE
27363: EQUAL
27364: IFTRUE 27368
27366: GO 27379
27368: POP
// bc_type := b_ext_track ; 23 :
27369: LD_ADDR_OWVAR 42
27373: PUSH
27374: LD_INT 16
27376: ST_TO_ADDR
27377: GO 27608
27379: LD_INT 23
27381: DOUBLE
27382: EQUAL
27383: IFTRUE 27387
27385: GO 27398
27387: POP
// bc_type := b_ext_laser ; 24 :
27388: LD_ADDR_OWVAR 42
27392: PUSH
27393: LD_INT 25
27395: ST_TO_ADDR
27396: GO 27608
27398: LD_INT 24
27400: DOUBLE
27401: EQUAL
27402: IFTRUE 27406
27404: GO 27417
27406: POP
// bc_type := b_control_tower ; 25 :
27407: LD_ADDR_OWVAR 42
27411: PUSH
27412: LD_INT 36
27414: ST_TO_ADDR
27415: GO 27608
27417: LD_INT 25
27419: DOUBLE
27420: EQUAL
27421: IFTRUE 27425
27423: GO 27436
27425: POP
// bc_type := b_breastwork ; 26 :
27426: LD_ADDR_OWVAR 42
27430: PUSH
27431: LD_INT 31
27433: ST_TO_ADDR
27434: GO 27608
27436: LD_INT 26
27438: DOUBLE
27439: EQUAL
27440: IFTRUE 27444
27442: GO 27455
27444: POP
// bc_type := b_bunker ; 27 :
27445: LD_ADDR_OWVAR 42
27449: PUSH
27450: LD_INT 32
27452: ST_TO_ADDR
27453: GO 27608
27455: LD_INT 27
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27474
27463: POP
// bc_type := b_turret ; 28 :
27464: LD_ADDR_OWVAR 42
27468: PUSH
27469: LD_INT 33
27471: ST_TO_ADDR
27472: GO 27608
27474: LD_INT 28
27476: DOUBLE
27477: EQUAL
27478: IFTRUE 27482
27480: GO 27493
27482: POP
// bc_type := b_armoury ; 29 :
27483: LD_ADDR_OWVAR 42
27487: PUSH
27488: LD_INT 4
27490: ST_TO_ADDR
27491: GO 27608
27493: LD_INT 29
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27501
27499: GO 27512
27501: POP
// bc_type := b_barracks ; 30 :
27502: LD_ADDR_OWVAR 42
27506: PUSH
27507: LD_INT 5
27509: ST_TO_ADDR
27510: GO 27608
27512: LD_INT 30
27514: DOUBLE
27515: EQUAL
27516: IFTRUE 27520
27518: GO 27531
27520: POP
// bc_type := b_solar_power ; 31 :
27521: LD_ADDR_OWVAR 42
27525: PUSH
27526: LD_INT 27
27528: ST_TO_ADDR
27529: GO 27608
27531: LD_INT 31
27533: DOUBLE
27534: EQUAL
27535: IFTRUE 27539
27537: GO 27550
27539: POP
// bc_type := b_oil_power ; 32 :
27540: LD_ADDR_OWVAR 42
27544: PUSH
27545: LD_INT 26
27547: ST_TO_ADDR
27548: GO 27608
27550: LD_INT 32
27552: DOUBLE
27553: EQUAL
27554: IFTRUE 27558
27556: GO 27569
27558: POP
// bc_type := b_siberite_power ; 33 :
27559: LD_ADDR_OWVAR 42
27563: PUSH
27564: LD_INT 28
27566: ST_TO_ADDR
27567: GO 27608
27569: LD_INT 33
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 27588
27577: POP
// bc_type := b_oil_mine ; 34 :
27578: LD_ADDR_OWVAR 42
27582: PUSH
27583: LD_INT 29
27585: ST_TO_ADDR
27586: GO 27608
27588: LD_INT 34
27590: DOUBLE
27591: EQUAL
27592: IFTRUE 27596
27594: GO 27607
27596: POP
// bc_type := b_siberite_mine ; end ;
27597: LD_ADDR_OWVAR 42
27601: PUSH
27602: LD_INT 30
27604: ST_TO_ADDR
27605: GO 27608
27607: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27608: LD_ADDR_VAR 0 8
27612: PUSH
27613: LD_VAR 0 5
27617: PPUSH
27618: LD_VAR 0 6
27622: PPUSH
27623: LD_VAR 0 3
27627: PPUSH
27628: CALL_OW 47
27632: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27633: LD_OWVAR 42
27637: PUSH
27638: LD_INT 32
27640: PUSH
27641: LD_INT 33
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: IN
27648: IFFALSE 27664
// PlaceWeaponTurret ( b , weapon ) ;
27650: LD_VAR 0 8
27654: PPUSH
27655: LD_VAR 0 4
27659: PPUSH
27660: CALL_OW 431
// end ;
27664: LD_VAR 0 7
27668: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27669: LD_INT 0
27671: PPUSH
27672: PPUSH
27673: PPUSH
27674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27675: LD_ADDR_VAR 0 4
27679: PUSH
27680: LD_INT 22
27682: PUSH
27683: LD_OWVAR 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 30
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 30
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 69
27728: ST_TO_ADDR
// if not tmp then
27729: LD_VAR 0 4
27733: NOT
27734: IFFALSE 27738
// exit ;
27736: GO 27797
// for i in tmp do
27738: LD_ADDR_VAR 0 2
27742: PUSH
27743: LD_VAR 0 4
27747: PUSH
27748: FOR_IN
27749: IFFALSE 27795
// for j = 1 to 3 do
27751: LD_ADDR_VAR 0 3
27755: PUSH
27756: DOUBLE
27757: LD_INT 1
27759: DEC
27760: ST_TO_ADDR
27761: LD_INT 3
27763: PUSH
27764: FOR_TO
27765: IFFALSE 27791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27767: LD_VAR 0 2
27771: PPUSH
27772: CALL_OW 274
27776: PPUSH
27777: LD_VAR 0 3
27781: PPUSH
27782: LD_INT 99999
27784: PPUSH
27785: CALL_OW 277
27789: GO 27764
27791: POP
27792: POP
27793: GO 27748
27795: POP
27796: POP
// end ;
27797: LD_VAR 0 1
27801: RET
// export function hHackSetLevel10 ; var i , j ; begin
27802: LD_INT 0
27804: PPUSH
27805: PPUSH
27806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27807: LD_ADDR_VAR 0 2
27811: PUSH
27812: LD_INT 21
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PPUSH
27822: CALL_OW 69
27826: PUSH
27827: FOR_IN
27828: IFFALSE 27880
// if IsSelected ( i ) then
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 306
27839: IFFALSE 27878
// begin for j := 1 to 4 do
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: DOUBLE
27847: LD_INT 1
27849: DEC
27850: ST_TO_ADDR
27851: LD_INT 4
27853: PUSH
27854: FOR_TO
27855: IFFALSE 27876
// SetSkill ( i , j , 10 ) ;
27857: LD_VAR 0 2
27861: PPUSH
27862: LD_VAR 0 3
27866: PPUSH
27867: LD_INT 10
27869: PPUSH
27870: CALL_OW 237
27874: GO 27854
27876: POP
27877: POP
// end ;
27878: GO 27827
27880: POP
27881: POP
// end ;
27882: LD_VAR 0 1
27886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27887: LD_INT 0
27889: PPUSH
27890: PPUSH
27891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 21
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PPUSH
27923: CALL_OW 69
27927: PUSH
27928: FOR_IN
27929: IFFALSE 27970
// begin for j := 1 to 4 do
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: DOUBLE
27937: LD_INT 1
27939: DEC
27940: ST_TO_ADDR
27941: LD_INT 4
27943: PUSH
27944: FOR_TO
27945: IFFALSE 27966
// SetSkill ( i , j , 10 ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: LD_VAR 0 3
27956: PPUSH
27957: LD_INT 10
27959: PPUSH
27960: CALL_OW 237
27964: GO 27944
27966: POP
27967: POP
// end ;
27968: GO 27928
27970: POP
27971: POP
// end ;
27972: LD_VAR 0 1
27976: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27977: LD_INT 0
27979: PPUSH
// uc_side := your_side ;
27980: LD_ADDR_OWVAR 20
27984: PUSH
27985: LD_OWVAR 2
27989: ST_TO_ADDR
// uc_nation := nation ;
27990: LD_ADDR_OWVAR 21
27994: PUSH
27995: LD_VAR 0 1
27999: ST_TO_ADDR
// InitHc ;
28000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28004: LD_INT 0
28006: PPUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: LD_VAR 0 3
28016: PPUSH
28017: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28021: LD_VAR 0 4
28025: PPUSH
28026: LD_VAR 0 5
28030: PPUSH
28031: CALL_OW 428
28035: PUSH
28036: LD_INT 0
28038: EQUAL
28039: IFFALSE 28063
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28041: CALL_OW 44
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_VAR 0 5
28055: PPUSH
28056: LD_INT 1
28058: PPUSH
28059: CALL_OW 48
// end ;
28063: LD_VAR 0 6
28067: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28068: LD_INT 0
28070: PPUSH
28071: PPUSH
// uc_side := your_side ;
28072: LD_ADDR_OWVAR 20
28076: PUSH
28077: LD_OWVAR 2
28081: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28082: LD_VAR 0 1
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 3
28095: PUSH
28096: LD_INT 4
28098: PUSH
28099: LD_INT 5
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: IN
28109: IFFALSE 28121
// uc_nation := nation_american else
28111: LD_ADDR_OWVAR 21
28115: PUSH
28116: LD_INT 1
28118: ST_TO_ADDR
28119: GO 28164
// if chassis in [ 11 , 12 , 13 , 14 ] then
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 11
28128: PUSH
28129: LD_INT 12
28131: PUSH
28132: LD_INT 13
28134: PUSH
28135: LD_INT 14
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: IN
28144: IFFALSE 28156
// uc_nation := nation_arabian else
28146: LD_ADDR_OWVAR 21
28150: PUSH
28151: LD_INT 2
28153: ST_TO_ADDR
28154: GO 28164
// uc_nation := nation_russian ;
28156: LD_ADDR_OWVAR 21
28160: PUSH
28161: LD_INT 3
28163: ST_TO_ADDR
// vc_chassis := chassis ;
28164: LD_ADDR_OWVAR 37
28168: PUSH
28169: LD_VAR 0 1
28173: ST_TO_ADDR
// vc_engine := engine ;
28174: LD_ADDR_OWVAR 39
28178: PUSH
28179: LD_VAR 0 2
28183: ST_TO_ADDR
// vc_control := control ;
28184: LD_ADDR_OWVAR 38
28188: PUSH
28189: LD_VAR 0 3
28193: ST_TO_ADDR
// vc_weapon := weapon ;
28194: LD_ADDR_OWVAR 40
28198: PUSH
28199: LD_VAR 0 4
28203: ST_TO_ADDR
// un := CreateVehicle ;
28204: LD_ADDR_VAR 0 8
28208: PUSH
28209: CALL_OW 45
28213: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28214: LD_VAR 0 8
28218: PPUSH
28219: LD_INT 0
28221: PPUSH
28222: LD_INT 5
28224: PPUSH
28225: CALL_OW 12
28229: PPUSH
28230: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28234: LD_VAR 0 8
28238: PPUSH
28239: LD_VAR 0 5
28243: PPUSH
28244: LD_VAR 0 6
28248: PPUSH
28249: LD_INT 1
28251: PPUSH
28252: CALL_OW 48
// end ;
28256: LD_VAR 0 7
28260: RET
// export hInvincible ; every 1 do
28261: GO 28263
28263: DISABLE
// hInvincible := [ ] ;
28264: LD_ADDR_EXP 105
28268: PUSH
28269: EMPTY
28270: ST_TO_ADDR
28271: END
// every 10 do var i ;
28272: GO 28274
28274: DISABLE
28275: LD_INT 0
28277: PPUSH
// begin enable ;
28278: ENABLE
// if not hInvincible then
28279: LD_EXP 105
28283: NOT
28284: IFFALSE 28288
// exit ;
28286: GO 28332
// for i in hInvincible do
28288: LD_ADDR_VAR 0 1
28292: PUSH
28293: LD_EXP 105
28297: PUSH
28298: FOR_IN
28299: IFFALSE 28330
// if GetLives ( i ) < 1000 then
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 256
28310: PUSH
28311: LD_INT 1000
28313: LESS
28314: IFFALSE 28328
// SetLives ( i , 1000 ) ;
28316: LD_VAR 0 1
28320: PPUSH
28321: LD_INT 1000
28323: PPUSH
28324: CALL_OW 234
28328: GO 28298
28330: POP
28331: POP
// end ;
28332: PPOPN 1
28334: END
// export function hHackInvincible ; var i ; begin
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28339: LD_ADDR_VAR 0 2
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: LD_INT 21
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 21
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 69
28376: PUSH
28377: FOR_IN
28378: IFFALSE 28439
// if IsSelected ( i ) then
28380: LD_VAR 0 2
28384: PPUSH
28385: CALL_OW 306
28389: IFFALSE 28437
// begin if i in hInvincible then
28391: LD_VAR 0 2
28395: PUSH
28396: LD_EXP 105
28400: IN
28401: IFFALSE 28421
// hInvincible := hInvincible diff i else
28403: LD_ADDR_EXP 105
28407: PUSH
28408: LD_EXP 105
28412: PUSH
28413: LD_VAR 0 2
28417: DIFF
28418: ST_TO_ADDR
28419: GO 28437
// hInvincible := hInvincible union i ;
28421: LD_ADDR_EXP 105
28425: PUSH
28426: LD_EXP 105
28430: PUSH
28431: LD_VAR 0 2
28435: UNION
28436: ST_TO_ADDR
// end ;
28437: GO 28377
28439: POP
28440: POP
// end ;
28441: LD_VAR 0 1
28445: RET
// export function hHackInvisible ; var i , j ; begin
28446: LD_INT 0
28448: PPUSH
28449: PPUSH
28450: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_INT 21
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 69
28470: PUSH
28471: FOR_IN
28472: IFFALSE 28496
// if IsSelected ( i ) then
28474: LD_VAR 0 2
28478: PPUSH
28479: CALL_OW 306
28483: IFFALSE 28494
// ComForceInvisible ( i ) ;
28485: LD_VAR 0 2
28489: PPUSH
28490: CALL_OW 496
28494: GO 28471
28496: POP
28497: POP
// end ;
28498: LD_VAR 0 1
28502: RET
// export function hHackChangeYourSide ; begin
28503: LD_INT 0
28505: PPUSH
// if your_side = 8 then
28506: LD_OWVAR 2
28510: PUSH
28511: LD_INT 8
28513: EQUAL
28514: IFFALSE 28526
// your_side := 0 else
28516: LD_ADDR_OWVAR 2
28520: PUSH
28521: LD_INT 0
28523: ST_TO_ADDR
28524: GO 28540
// your_side := your_side + 1 ;
28526: LD_ADDR_OWVAR 2
28530: PUSH
28531: LD_OWVAR 2
28535: PUSH
28536: LD_INT 1
28538: PLUS
28539: ST_TO_ADDR
// end ;
28540: LD_VAR 0 1
28544: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
// for i in all_units do
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_OWVAR 3
28559: PUSH
28560: FOR_IN
28561: IFFALSE 28639
// if IsSelected ( i ) then
28563: LD_VAR 0 2
28567: PPUSH
28568: CALL_OW 306
28572: IFFALSE 28637
// begin j := GetSide ( i ) ;
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: LD_VAR 0 2
28583: PPUSH
28584: CALL_OW 255
28588: ST_TO_ADDR
// if j = 8 then
28589: LD_VAR 0 3
28593: PUSH
28594: LD_INT 8
28596: EQUAL
28597: IFFALSE 28609
// j := 0 else
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_INT 0
28606: ST_TO_ADDR
28607: GO 28623
// j := j + 1 ;
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: LD_VAR 0 3
28618: PUSH
28619: LD_INT 1
28621: PLUS
28622: ST_TO_ADDR
// SetSide ( i , j ) ;
28623: LD_VAR 0 2
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: CALL_OW 235
// end ;
28637: GO 28560
28639: POP
28640: POP
// end ;
28641: LD_VAR 0 1
28645: RET
// export function hHackFog ; begin
28646: LD_INT 0
28648: PPUSH
// FogOff ( true ) ;
28649: LD_INT 1
28651: PPUSH
28652: CALL_OW 344
// end ;
28656: LD_VAR 0 1
28660: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28661: LD_INT 0
28663: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_VAR 0 2
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: LD_INT 1
28681: PPUSH
28682: LD_INT 1
28684: PPUSH
28685: CALL_OW 483
// CenterOnXY ( x , y ) ;
28689: LD_VAR 0 2
28693: PPUSH
28694: LD_VAR 0 3
28698: PPUSH
28699: CALL_OW 84
// end ; end_of_file end_of_file
28703: LD_VAR 0 4
28707: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
28708: LD_INT 0
28710: PPUSH
// ar_miner := 81 ;
28711: LD_ADDR_EXP 113
28715: PUSH
28716: LD_INT 81
28718: ST_TO_ADDR
// ar_crane := 88 ;
28719: LD_ADDR_EXP 112
28723: PUSH
28724: LD_INT 88
28726: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28727: LD_ADDR_EXP 107
28731: PUSH
28732: LD_INT 89
28734: ST_TO_ADDR
// us_hack := 99 ;
28735: LD_ADDR_EXP 108
28739: PUSH
28740: LD_INT 99
28742: ST_TO_ADDR
// us_artillery := 97 ;
28743: LD_ADDR_EXP 109
28747: PUSH
28748: LD_INT 97
28750: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28751: LD_ADDR_EXP 110
28755: PUSH
28756: LD_INT 91
28758: ST_TO_ADDR
// ar_mortar := 92 ;
28759: LD_ADDR_EXP 111
28763: PUSH
28764: LD_INT 92
28766: ST_TO_ADDR
// ru_radar := 98 ;
28767: LD_ADDR_EXP 106
28771: PUSH
28772: LD_INT 98
28774: ST_TO_ADDR
// tech_Artillery := 80 ;
28775: LD_ADDR_EXP 114
28779: PUSH
28780: LD_INT 80
28782: ST_TO_ADDR
// tech_RadMat := 81 ;
28783: LD_ADDR_EXP 115
28787: PUSH
28788: LD_INT 81
28790: ST_TO_ADDR
// tech_BasicTools := 82 ;
28791: LD_ADDR_EXP 116
28795: PUSH
28796: LD_INT 82
28798: ST_TO_ADDR
// tech_Cargo := 83 ;
28799: LD_ADDR_EXP 117
28803: PUSH
28804: LD_INT 83
28806: ST_TO_ADDR
// tech_Track := 84 ;
28807: LD_ADDR_EXP 118
28811: PUSH
28812: LD_INT 84
28814: ST_TO_ADDR
// tech_Crane := 85 ;
28815: LD_ADDR_EXP 119
28819: PUSH
28820: LD_INT 85
28822: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28823: LD_ADDR_EXP 120
28827: PUSH
28828: LD_INT 86
28830: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28831: LD_ADDR_EXP 121
28835: PUSH
28836: LD_INT 87
28838: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
28839: LD_ADDR_EXP 122
28843: PUSH
28844: LD_INT 88
28846: ST_TO_ADDR
// class_mastodont := 31 ;
28847: LD_ADDR_EXP 123
28851: PUSH
28852: LD_INT 31
28854: ST_TO_ADDR
// class_horse := 21 ;
28855: LD_ADDR_EXP 124
28859: PUSH
28860: LD_INT 21
28862: ST_TO_ADDR
// end ;
28863: LD_VAR 0 1
28867: RET
// every 1 do
28868: GO 28870
28870: DISABLE
// InitGlobalVariables ; end_of_file
28871: CALL 28708 0 0
28875: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
// if exist_mode then
28880: LD_VAR 0 2
28884: IFFALSE 28909
// unit := CreateCharacter ( prefix & ident ) else
28886: LD_ADDR_VAR 0 5
28890: PUSH
28891: LD_VAR 0 3
28895: PUSH
28896: LD_VAR 0 1
28900: STR
28901: PPUSH
28902: CALL_OW 34
28906: ST_TO_ADDR
28907: GO 28924
// unit := NewCharacter ( ident ) ;
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 25
28923: ST_TO_ADDR
// result := unit ;
28924: LD_ADDR_VAR 0 4
28928: PUSH
28929: LD_VAR 0 5
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 4
28938: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
// if not side or not nation then
28943: LD_VAR 0 1
28947: NOT
28948: PUSH
28949: LD_VAR 0 2
28953: NOT
28954: OR
28955: IFFALSE 28959
// exit ;
28957: GO 29727
// case nation of nation_american :
28959: LD_VAR 0 2
28963: PUSH
28964: LD_INT 1
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 29186
28972: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28973: LD_ADDR_VAR 0 4
28977: PUSH
28978: LD_INT 35
28980: PUSH
28981: LD_INT 45
28983: PUSH
28984: LD_INT 46
28986: PUSH
28987: LD_INT 47
28989: PUSH
28990: LD_INT 82
28992: PUSH
28993: LD_INT 83
28995: PUSH
28996: LD_INT 84
28998: PUSH
28999: LD_INT 85
29001: PUSH
29002: LD_INT 86
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 6
29013: PUSH
29014: LD_INT 15
29016: PUSH
29017: LD_INT 16
29019: PUSH
29020: LD_INT 7
29022: PUSH
29023: LD_INT 12
29025: PUSH
29026: LD_INT 13
29028: PUSH
29029: LD_INT 10
29031: PUSH
29032: LD_INT 14
29034: PUSH
29035: LD_INT 20
29037: PUSH
29038: LD_INT 21
29040: PUSH
29041: LD_INT 22
29043: PUSH
29044: LD_INT 25
29046: PUSH
29047: LD_INT 32
29049: PUSH
29050: LD_INT 27
29052: PUSH
29053: LD_INT 36
29055: PUSH
29056: LD_INT 69
29058: PUSH
29059: LD_INT 39
29061: PUSH
29062: LD_INT 34
29064: PUSH
29065: LD_INT 40
29067: PUSH
29068: LD_INT 48
29070: PUSH
29071: LD_INT 49
29073: PUSH
29074: LD_INT 50
29076: PUSH
29077: LD_INT 51
29079: PUSH
29080: LD_INT 52
29082: PUSH
29083: LD_INT 53
29085: PUSH
29086: LD_INT 54
29088: PUSH
29089: LD_INT 55
29091: PUSH
29092: LD_INT 56
29094: PUSH
29095: LD_INT 57
29097: PUSH
29098: LD_INT 58
29100: PUSH
29101: LD_INT 59
29103: PUSH
29104: LD_INT 60
29106: PUSH
29107: LD_INT 61
29109: PUSH
29110: LD_INT 62
29112: PUSH
29113: LD_INT 80
29115: PUSH
29116: LD_INT 82
29118: PUSH
29119: LD_INT 83
29121: PUSH
29122: LD_INT 84
29124: PUSH
29125: LD_INT 85
29127: PUSH
29128: LD_INT 86
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29651
29186: LD_INT 2
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29420
29194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29195: LD_ADDR_VAR 0 4
29199: PUSH
29200: LD_INT 35
29202: PUSH
29203: LD_INT 45
29205: PUSH
29206: LD_INT 46
29208: PUSH
29209: LD_INT 47
29211: PUSH
29212: LD_INT 82
29214: PUSH
29215: LD_INT 83
29217: PUSH
29218: LD_INT 84
29220: PUSH
29221: LD_INT 85
29223: PUSH
29224: LD_INT 87
29226: PUSH
29227: LD_INT 70
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 11
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 4
29241: PUSH
29242: LD_INT 5
29244: PUSH
29245: LD_INT 6
29247: PUSH
29248: LD_INT 15
29250: PUSH
29251: LD_INT 18
29253: PUSH
29254: LD_INT 7
29256: PUSH
29257: LD_INT 17
29259: PUSH
29260: LD_INT 8
29262: PUSH
29263: LD_INT 20
29265: PUSH
29266: LD_INT 21
29268: PUSH
29269: LD_INT 22
29271: PUSH
29272: LD_INT 72
29274: PUSH
29275: LD_INT 26
29277: PUSH
29278: LD_INT 69
29280: PUSH
29281: LD_INT 39
29283: PUSH
29284: LD_INT 40
29286: PUSH
29287: LD_INT 41
29289: PUSH
29290: LD_INT 42
29292: PUSH
29293: LD_INT 43
29295: PUSH
29296: LD_INT 48
29298: PUSH
29299: LD_INT 49
29301: PUSH
29302: LD_INT 50
29304: PUSH
29305: LD_INT 51
29307: PUSH
29308: LD_INT 52
29310: PUSH
29311: LD_INT 53
29313: PUSH
29314: LD_INT 54
29316: PUSH
29317: LD_INT 55
29319: PUSH
29320: LD_INT 56
29322: PUSH
29323: LD_INT 60
29325: PUSH
29326: LD_INT 61
29328: PUSH
29329: LD_INT 62
29331: PUSH
29332: LD_INT 66
29334: PUSH
29335: LD_INT 67
29337: PUSH
29338: LD_INT 68
29340: PUSH
29341: LD_INT 81
29343: PUSH
29344: LD_INT 82
29346: PUSH
29347: LD_INT 83
29349: PUSH
29350: LD_INT 84
29352: PUSH
29353: LD_INT 85
29355: PUSH
29356: LD_INT 87
29358: PUSH
29359: LD_INT 88
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
29418: GO 29651
29420: LD_INT 3
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29650
29428: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29429: LD_ADDR_VAR 0 4
29433: PUSH
29434: LD_INT 46
29436: PUSH
29437: LD_INT 47
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 82
29448: PUSH
29449: LD_INT 83
29451: PUSH
29452: LD_INT 84
29454: PUSH
29455: LD_INT 85
29457: PUSH
29458: LD_INT 86
29460: PUSH
29461: LD_INT 11
29463: PUSH
29464: LD_INT 9
29466: PUSH
29467: LD_INT 20
29469: PUSH
29470: LD_INT 19
29472: PUSH
29473: LD_INT 21
29475: PUSH
29476: LD_INT 24
29478: PUSH
29479: LD_INT 22
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 28
29487: PUSH
29488: LD_INT 29
29490: PUSH
29491: LD_INT 30
29493: PUSH
29494: LD_INT 31
29496: PUSH
29497: LD_INT 37
29499: PUSH
29500: LD_INT 38
29502: PUSH
29503: LD_INT 32
29505: PUSH
29506: LD_INT 27
29508: PUSH
29509: LD_INT 33
29511: PUSH
29512: LD_INT 69
29514: PUSH
29515: LD_INT 39
29517: PUSH
29518: LD_INT 34
29520: PUSH
29521: LD_INT 40
29523: PUSH
29524: LD_INT 71
29526: PUSH
29527: LD_INT 23
29529: PUSH
29530: LD_INT 44
29532: PUSH
29533: LD_INT 48
29535: PUSH
29536: LD_INT 49
29538: PUSH
29539: LD_INT 50
29541: PUSH
29542: LD_INT 51
29544: PUSH
29545: LD_INT 52
29547: PUSH
29548: LD_INT 53
29550: PUSH
29551: LD_INT 54
29553: PUSH
29554: LD_INT 55
29556: PUSH
29557: LD_INT 56
29559: PUSH
29560: LD_INT 57
29562: PUSH
29563: LD_INT 58
29565: PUSH
29566: LD_INT 59
29568: PUSH
29569: LD_INT 63
29571: PUSH
29572: LD_INT 64
29574: PUSH
29575: LD_INT 65
29577: PUSH
29578: LD_INT 82
29580: PUSH
29581: LD_INT 83
29583: PUSH
29584: LD_INT 84
29586: PUSH
29587: LD_INT 85
29589: PUSH
29590: LD_INT 86
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: ST_TO_ADDR
29648: GO 29651
29650: POP
// if state > - 1 and state < 3 then
29651: LD_VAR 0 3
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: GREATER
29660: PUSH
29661: LD_VAR 0 3
29665: PUSH
29666: LD_INT 3
29668: LESS
29669: AND
29670: IFFALSE 29727
// for i in result do
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_VAR 0 4
29681: PUSH
29682: FOR_IN
29683: IFFALSE 29725
// if GetTech ( i , side ) <> state then
29685: LD_VAR 0 5
29689: PPUSH
29690: LD_VAR 0 1
29694: PPUSH
29695: CALL_OW 321
29699: PUSH
29700: LD_VAR 0 3
29704: NONEQUAL
29705: IFFALSE 29723
// result := result diff i ;
29707: LD_ADDR_VAR 0 4
29711: PUSH
29712: LD_VAR 0 4
29716: PUSH
29717: LD_VAR 0 5
29721: DIFF
29722: ST_TO_ADDR
29723: GO 29682
29725: POP
29726: POP
// end ;
29727: LD_VAR 0 4
29731: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29732: LD_INT 0
29734: PPUSH
29735: PPUSH
29736: PPUSH
// result := true ;
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_INT 1
29744: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29745: LD_ADDR_VAR 0 5
29749: PUSH
29750: LD_VAR 0 2
29754: PPUSH
29755: CALL_OW 480
29759: ST_TO_ADDR
// if not tmp then
29760: LD_VAR 0 5
29764: NOT
29765: IFFALSE 29769
// exit ;
29767: GO 29818
// for i in tmp do
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_VAR 0 5
29778: PUSH
29779: FOR_IN
29780: IFFALSE 29816
// if GetTech ( i , side ) <> state_researched then
29782: LD_VAR 0 4
29786: PPUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 321
29796: PUSH
29797: LD_INT 2
29799: NONEQUAL
29800: IFFALSE 29814
// begin result := false ;
29802: LD_ADDR_VAR 0 3
29806: PUSH
29807: LD_INT 0
29809: ST_TO_ADDR
// exit ;
29810: POP
29811: POP
29812: GO 29818
// end ;
29814: GO 29779
29816: POP
29817: POP
// end ;
29818: LD_VAR 0 3
29822: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29838: LD_VAR 0 1
29842: NOT
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 257
29853: PUSH
29854: LD_INT 9
29856: NONEQUAL
29857: OR
29858: IFFALSE 29862
// exit ;
29860: GO 30435
// side := GetSide ( unit ) ;
29862: LD_ADDR_VAR 0 9
29866: PUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 255
29876: ST_TO_ADDR
// tech_space := tech_spacanom ;
29877: LD_ADDR_VAR 0 12
29881: PUSH
29882: LD_INT 29
29884: ST_TO_ADDR
// tech_time := tech_taurad ;
29885: LD_ADDR_VAR 0 13
29889: PUSH
29890: LD_INT 28
29892: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29893: LD_ADDR_VAR 0 11
29897: PUSH
29898: LD_VAR 0 1
29902: PPUSH
29903: CALL_OW 310
29907: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29908: LD_VAR 0 11
29912: PPUSH
29913: CALL_OW 247
29917: PUSH
29918: LD_INT 2
29920: EQUAL
29921: IFFALSE 29925
// exit ;
29923: GO 30435
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29925: LD_ADDR_VAR 0 8
29929: PUSH
29930: LD_INT 81
29932: PUSH
29933: LD_VAR 0 9
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: LD_INT 21
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: ST_TO_ADDR
// if not tmp then
29968: LD_VAR 0 8
29972: NOT
29973: IFFALSE 29977
// exit ;
29975: GO 30435
// if in_unit then
29977: LD_VAR 0 11
29981: IFFALSE 30005
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29983: LD_ADDR_VAR 0 10
29987: PUSH
29988: LD_VAR 0 8
29992: PPUSH
29993: LD_VAR 0 11
29997: PPUSH
29998: CALL_OW 74
30002: ST_TO_ADDR
30003: GO 30025
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30005: LD_ADDR_VAR 0 10
30009: PUSH
30010: LD_VAR 0 8
30014: PPUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: CALL_OW 74
30024: ST_TO_ADDR
// if not enemy then
30025: LD_VAR 0 10
30029: NOT
30030: IFFALSE 30034
// exit ;
30032: GO 30435
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30034: LD_VAR 0 11
30038: PUSH
30039: LD_VAR 0 11
30043: PPUSH
30044: LD_VAR 0 10
30048: PPUSH
30049: CALL_OW 296
30053: PUSH
30054: LD_INT 13
30056: GREATER
30057: AND
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: LD_VAR 0 10
30068: PPUSH
30069: CALL_OW 296
30073: PUSH
30074: LD_INT 12
30076: GREATER
30077: OR
30078: IFFALSE 30082
// exit ;
30080: GO 30435
// missile := [ 1 ] ;
30082: LD_ADDR_VAR 0 14
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30093: LD_VAR 0 9
30097: PPUSH
30098: LD_VAR 0 12
30102: PPUSH
30103: CALL_OW 325
30107: IFFALSE 30136
// missile := Insert ( missile , missile + 1 , 2 ) ;
30109: LD_ADDR_VAR 0 14
30113: PUSH
30114: LD_VAR 0 14
30118: PPUSH
30119: LD_VAR 0 14
30123: PUSH
30124: LD_INT 1
30126: PLUS
30127: PPUSH
30128: LD_INT 2
30130: PPUSH
30131: CALL_OW 2
30135: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30136: LD_VAR 0 9
30140: PPUSH
30141: LD_VAR 0 13
30145: PPUSH
30146: CALL_OW 325
30150: PUSH
30151: LD_VAR 0 10
30155: PPUSH
30156: CALL_OW 255
30160: PPUSH
30161: LD_VAR 0 13
30165: PPUSH
30166: CALL_OW 325
30170: NOT
30171: AND
30172: IFFALSE 30201
// missile := Insert ( missile , missile + 1 , 3 ) ;
30174: LD_ADDR_VAR 0 14
30178: PUSH
30179: LD_VAR 0 14
30183: PPUSH
30184: LD_VAR 0 14
30188: PUSH
30189: LD_INT 1
30191: PLUS
30192: PPUSH
30193: LD_INT 3
30195: PPUSH
30196: CALL_OW 2
30200: ST_TO_ADDR
// if missile < 2 then
30201: LD_VAR 0 14
30205: PUSH
30206: LD_INT 2
30208: LESS
30209: IFFALSE 30213
// exit ;
30211: GO 30435
// x := GetX ( enemy ) ;
30213: LD_ADDR_VAR 0 4
30217: PUSH
30218: LD_VAR 0 10
30222: PPUSH
30223: CALL_OW 250
30227: ST_TO_ADDR
// y := GetY ( enemy ) ;
30228: LD_ADDR_VAR 0 5
30232: PUSH
30233: LD_VAR 0 10
30237: PPUSH
30238: CALL_OW 251
30242: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30243: LD_ADDR_VAR 0 6
30247: PUSH
30248: LD_VAR 0 4
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PPUSH
30257: LD_INT 1
30259: PPUSH
30260: CALL_OW 12
30264: PLUS
30265: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30266: LD_ADDR_VAR 0 7
30270: PUSH
30271: LD_VAR 0 5
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PPUSH
30280: LD_INT 1
30282: PPUSH
30283: CALL_OW 12
30287: PLUS
30288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30289: LD_VAR 0 6
30293: PPUSH
30294: LD_VAR 0 7
30298: PPUSH
30299: CALL_OW 488
30303: NOT
30304: IFFALSE 30326
// begin _x := x ;
30306: LD_ADDR_VAR 0 6
30310: PUSH
30311: LD_VAR 0 4
30315: ST_TO_ADDR
// _y := y ;
30316: LD_ADDR_VAR 0 7
30320: PUSH
30321: LD_VAR 0 5
30325: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_INT 1
30333: PPUSH
30334: LD_VAR 0 14
30338: PPUSH
30339: CALL_OW 12
30343: ST_TO_ADDR
// case i of 1 :
30344: LD_VAR 0 3
30348: PUSH
30349: LD_INT 1
30351: DOUBLE
30352: EQUAL
30353: IFTRUE 30357
30355: GO 30374
30357: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30358: LD_VAR 0 1
30362: PPUSH
30363: LD_VAR 0 10
30367: PPUSH
30368: CALL_OW 115
30372: GO 30435
30374: LD_INT 2
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30404
30382: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30383: LD_VAR 0 1
30387: PPUSH
30388: LD_VAR 0 6
30392: PPUSH
30393: LD_VAR 0 7
30397: PPUSH
30398: CALL_OW 153
30402: GO 30435
30404: LD_INT 3
30406: DOUBLE
30407: EQUAL
30408: IFTRUE 30412
30410: GO 30434
30412: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30413: LD_VAR 0 1
30417: PPUSH
30418: LD_VAR 0 6
30422: PPUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: CALL_OW 154
30432: GO 30435
30434: POP
// end ;
30435: LD_VAR 0 2
30439: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30440: LD_INT 0
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
30446: PPUSH
30447: PPUSH
// if not unit or not building then
30448: LD_VAR 0 1
30452: NOT
30453: PUSH
30454: LD_VAR 0 2
30458: NOT
30459: OR
30460: IFFALSE 30464
// exit ;
30462: GO 30622
// x := GetX ( building ) ;
30464: LD_ADDR_VAR 0 5
30468: PUSH
30469: LD_VAR 0 2
30473: PPUSH
30474: CALL_OW 250
30478: ST_TO_ADDR
// y := GetY ( building ) ;
30479: LD_ADDR_VAR 0 6
30483: PUSH
30484: LD_VAR 0 2
30488: PPUSH
30489: CALL_OW 251
30493: ST_TO_ADDR
// for i = 0 to 5 do
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: DOUBLE
30500: LD_INT 0
30502: DEC
30503: ST_TO_ADDR
30504: LD_INT 5
30506: PUSH
30507: FOR_TO
30508: IFFALSE 30620
// begin _x := ShiftX ( x , i , 3 ) ;
30510: LD_ADDR_VAR 0 7
30514: PUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: LD_VAR 0 4
30524: PPUSH
30525: LD_INT 3
30527: PPUSH
30528: CALL_OW 272
30532: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30533: LD_ADDR_VAR 0 8
30537: PUSH
30538: LD_VAR 0 6
30542: PPUSH
30543: LD_VAR 0 4
30547: PPUSH
30548: LD_INT 3
30550: PPUSH
30551: CALL_OW 273
30555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30556: LD_VAR 0 7
30560: PPUSH
30561: LD_VAR 0 8
30565: PPUSH
30566: CALL_OW 488
30570: NOT
30571: IFFALSE 30575
// continue ;
30573: GO 30507
// if HexInfo ( _x , _y ) = 0 then
30575: LD_VAR 0 7
30579: PPUSH
30580: LD_VAR 0 8
30584: PPUSH
30585: CALL_OW 428
30589: PUSH
30590: LD_INT 0
30592: EQUAL
30593: IFFALSE 30618
// begin ComMoveXY ( unit , _x , _y ) ;
30595: LD_VAR 0 1
30599: PPUSH
30600: LD_VAR 0 7
30604: PPUSH
30605: LD_VAR 0 8
30609: PPUSH
30610: CALL_OW 111
// exit ;
30614: POP
30615: POP
30616: GO 30622
// end ; end ;
30618: GO 30507
30620: POP
30621: POP
// end ;
30622: LD_VAR 0 3
30626: RET
// export function ScanBase ( side , base_area ) ; begin
30627: LD_INT 0
30629: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_VAR 0 2
30639: PPUSH
30640: LD_INT 81
30642: PUSH
30643: LD_VAR 0 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PPUSH
30652: CALL_OW 70
30656: ST_TO_ADDR
// end ;
30657: LD_VAR 0 3
30661: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
// result := false ;
30668: LD_ADDR_VAR 0 2
30672: PUSH
30673: LD_INT 0
30675: ST_TO_ADDR
// side := GetSide ( unit ) ;
30676: LD_ADDR_VAR 0 3
30680: PUSH
30681: LD_VAR 0 1
30685: PPUSH
30686: CALL_OW 255
30690: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30691: LD_ADDR_VAR 0 4
30695: PUSH
30696: LD_VAR 0 1
30700: PPUSH
30701: CALL_OW 248
30705: ST_TO_ADDR
// case nat of 1 :
30706: LD_VAR 0 4
30710: PUSH
30711: LD_INT 1
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30730
30719: POP
// tech := tech_lassight ; 2 :
30720: LD_ADDR_VAR 0 5
30724: PUSH
30725: LD_INT 12
30727: ST_TO_ADDR
30728: GO 30769
30730: LD_INT 2
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30749
30738: POP
// tech := tech_mortar ; 3 :
30739: LD_ADDR_VAR 0 5
30743: PUSH
30744: LD_INT 41
30746: ST_TO_ADDR
30747: GO 30769
30749: LD_INT 3
30751: DOUBLE
30752: EQUAL
30753: IFTRUE 30757
30755: GO 30768
30757: POP
// tech := tech_bazooka ; end ;
30758: LD_ADDR_VAR 0 5
30762: PUSH
30763: LD_INT 44
30765: ST_TO_ADDR
30766: GO 30769
30768: POP
// if Researched ( side , tech ) then
30769: LD_VAR 0 3
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 325
30783: IFFALSE 30810
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30785: LD_ADDR_VAR 0 2
30789: PUSH
30790: LD_INT 5
30792: PUSH
30793: LD_INT 8
30795: PUSH
30796: LD_INT 9
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: PUSH
30804: LD_VAR 0 4
30808: ARRAY
30809: ST_TO_ADDR
// end ;
30810: LD_VAR 0 2
30814: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30815: LD_INT 0
30817: PPUSH
30818: PPUSH
30819: PPUSH
// if not mines then
30820: LD_VAR 0 2
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 30973
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30829: LD_ADDR_VAR 0 5
30833: PUSH
30834: LD_INT 81
30836: PUSH
30837: LD_VAR 0 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 21
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PPUSH
30867: CALL_OW 69
30871: ST_TO_ADDR
// for i in mines do
30872: LD_ADDR_VAR 0 4
30876: PUSH
30877: LD_VAR 0 2
30881: PUSH
30882: FOR_IN
30883: IFFALSE 30971
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30885: LD_VAR 0 4
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: PPUSH
30894: LD_VAR 0 4
30898: PUSH
30899: LD_INT 2
30901: ARRAY
30902: PPUSH
30903: CALL_OW 458
30907: NOT
30908: IFFALSE 30912
// continue ;
30910: GO 30882
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30912: LD_VAR 0 4
30916: PUSH
30917: LD_INT 1
30919: ARRAY
30920: PPUSH
30921: LD_VAR 0 4
30925: PUSH
30926: LD_INT 2
30928: ARRAY
30929: PPUSH
30930: CALL_OW 428
30934: PUSH
30935: LD_VAR 0 5
30939: IN
30940: IFFALSE 30969
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30942: LD_VAR 0 4
30946: PUSH
30947: LD_INT 1
30949: ARRAY
30950: PPUSH
30951: LD_VAR 0 4
30955: PUSH
30956: LD_INT 2
30958: ARRAY
30959: PPUSH
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 456
// end ;
30969: GO 30882
30971: POP
30972: POP
// end ;
30973: LD_VAR 0 3
30977: RET
// export function Count ( array ) ; var i ; begin
30978: LD_INT 0
30980: PPUSH
30981: PPUSH
// result := 0 ;
30982: LD_ADDR_VAR 0 2
30986: PUSH
30987: LD_INT 0
30989: ST_TO_ADDR
// for i in array do
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_VAR 0 1
30999: PUSH
31000: FOR_IN
31001: IFFALSE 31025
// if i then
31003: LD_VAR 0 3
31007: IFFALSE 31023
// result := result + 1 ;
31009: LD_ADDR_VAR 0 2
31013: PUSH
31014: LD_VAR 0 2
31018: PUSH
31019: LD_INT 1
31021: PLUS
31022: ST_TO_ADDR
31023: GO 31000
31025: POP
31026: POP
// end ;
31027: LD_VAR 0 2
31031: RET
// export function IsEmpty ( building ) ; begin
31032: LD_INT 0
31034: PPUSH
// if not building then
31035: LD_VAR 0 1
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31087
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31044: LD_ADDR_VAR 0 2
31048: PUSH
31049: LD_VAR 0 1
31053: PUSH
31054: LD_INT 22
31056: PUSH
31057: LD_VAR 0 1
31061: PPUSH
31062: CALL_OW 255
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 58
31073: PUSH
31074: EMPTY
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PPUSH
31081: CALL_OW 69
31085: IN
31086: ST_TO_ADDR
// end ;
31087: LD_VAR 0 2
31091: RET
// export function IsNotFull ( building ) ; begin
31092: LD_INT 0
31094: PPUSH
// if not building then
31095: LD_VAR 0 1
31099: NOT
31100: IFFALSE 31104
// exit ;
31102: GO 31123
// result := UnitsInside ( building ) < 6 ;
31104: LD_ADDR_VAR 0 2
31108: PUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 313
31118: PUSH
31119: LD_INT 6
31121: LESS
31122: ST_TO_ADDR
// end ;
31123: LD_VAR 0 2
31127: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31128: LD_INT 0
31130: PPUSH
31131: PPUSH
31132: PPUSH
31133: PPUSH
// tmp := [ ] ;
31134: LD_ADDR_VAR 0 3
31138: PUSH
31139: EMPTY
31140: ST_TO_ADDR
// list := [ ] ;
31141: LD_ADDR_VAR 0 5
31145: PUSH
31146: EMPTY
31147: ST_TO_ADDR
// for i = 16 to 25 do
31148: LD_ADDR_VAR 0 4
31152: PUSH
31153: DOUBLE
31154: LD_INT 16
31156: DEC
31157: ST_TO_ADDR
31158: LD_INT 25
31160: PUSH
31161: FOR_TO
31162: IFFALSE 31235
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_VAR 0 3
31173: PUSH
31174: LD_INT 22
31176: PUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 255
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 91
31193: PUSH
31194: LD_VAR 0 1
31198: PUSH
31199: LD_INT 6
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 30
31209: PUSH
31210: LD_VAR 0 4
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: PPUSH
31227: CALL_OW 69
31231: ADD
31232: ST_TO_ADDR
31233: GO 31161
31235: POP
31236: POP
// for i = 1 to tmp do
31237: LD_ADDR_VAR 0 4
31241: PUSH
31242: DOUBLE
31243: LD_INT 1
31245: DEC
31246: ST_TO_ADDR
31247: LD_VAR 0 3
31251: PUSH
31252: FOR_TO
31253: IFFALSE 31341
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_VAR 0 5
31264: PUSH
31265: LD_VAR 0 3
31269: PUSH
31270: LD_VAR 0 4
31274: ARRAY
31275: PPUSH
31276: CALL_OW 266
31280: PUSH
31281: LD_VAR 0 3
31285: PUSH
31286: LD_VAR 0 4
31290: ARRAY
31291: PPUSH
31292: CALL_OW 250
31296: PUSH
31297: LD_VAR 0 3
31301: PUSH
31302: LD_VAR 0 4
31306: ARRAY
31307: PPUSH
31308: CALL_OW 251
31312: PUSH
31313: LD_VAR 0 3
31317: PUSH
31318: LD_VAR 0 4
31322: ARRAY
31323: PPUSH
31324: CALL_OW 254
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: ADD
31338: ST_TO_ADDR
31339: GO 31252
31341: POP
31342: POP
// result := list ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_VAR 0 5
31352: ST_TO_ADDR
// end ;
31353: LD_VAR 0 2
31357: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31358: LD_INT 0
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
// if not factory then
31367: LD_VAR 0 1
31371: NOT
31372: IFFALSE 31376
// exit ;
31374: GO 31969
// if control = control_apeman then
31376: LD_VAR 0 4
31380: PUSH
31381: LD_INT 5
31383: EQUAL
31384: IFFALSE 31493
// begin tmp := UnitsInside ( factory ) ;
31386: LD_ADDR_VAR 0 8
31390: PUSH
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 313
31400: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31401: LD_VAR 0 8
31405: PPUSH
31406: LD_INT 25
31408: PUSH
31409: LD_INT 12
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PPUSH
31416: CALL_OW 72
31420: NOT
31421: IFFALSE 31431
// control := control_manual ;
31423: LD_ADDR_VAR 0 4
31427: PUSH
31428: LD_INT 1
31430: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31431: LD_ADDR_VAR 0 8
31435: PUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL 31128 0 1
31445: ST_TO_ADDR
// if tmp then
31446: LD_VAR 0 8
31450: IFFALSE 31493
// begin for i in tmp do
31452: LD_ADDR_VAR 0 7
31456: PUSH
31457: LD_VAR 0 8
31461: PUSH
31462: FOR_IN
31463: IFFALSE 31491
// if i [ 1 ] = b_ext_radio then
31465: LD_VAR 0 7
31469: PUSH
31470: LD_INT 1
31472: ARRAY
31473: PUSH
31474: LD_INT 22
31476: EQUAL
31477: IFFALSE 31489
// begin control := control_remote ;
31479: LD_ADDR_VAR 0 4
31483: PUSH
31484: LD_INT 2
31486: ST_TO_ADDR
// break ;
31487: GO 31491
// end ;
31489: GO 31462
31491: POP
31492: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: LD_VAR 0 4
31512: PPUSH
31513: LD_VAR 0 5
31517: PPUSH
31518: CALL_OW 448
31522: IFFALSE 31557
// begin result := [ chassis , engine , control , weapon ] ;
31524: LD_ADDR_VAR 0 6
31528: PUSH
31529: LD_VAR 0 2
31533: PUSH
31534: LD_VAR 0 3
31538: PUSH
31539: LD_VAR 0 4
31543: PUSH
31544: LD_VAR 0 5
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: ST_TO_ADDR
// exit ;
31555: GO 31969
// end ; _chassis := AvailableChassisList ( factory ) ;
31557: LD_ADDR_VAR 0 9
31561: PUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 475
31571: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31572: LD_ADDR_VAR 0 11
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 476
31586: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31587: LD_ADDR_VAR 0 12
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 477
31601: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31602: LD_ADDR_VAR 0 10
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 478
31616: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31617: LD_VAR 0 9
31621: NOT
31622: PUSH
31623: LD_VAR 0 11
31627: NOT
31628: OR
31629: PUSH
31630: LD_VAR 0 12
31634: NOT
31635: OR
31636: PUSH
31637: LD_VAR 0 10
31641: NOT
31642: OR
31643: IFFALSE 31678
// begin result := [ chassis , engine , control , weapon ] ;
31645: LD_ADDR_VAR 0 6
31649: PUSH
31650: LD_VAR 0 2
31654: PUSH
31655: LD_VAR 0 3
31659: PUSH
31660: LD_VAR 0 4
31664: PUSH
31665: LD_VAR 0 5
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
// exit ;
31676: GO 31969
// end ; if not chassis in _chassis then
31678: LD_VAR 0 2
31682: PUSH
31683: LD_VAR 0 9
31687: IN
31688: NOT
31689: IFFALSE 31715
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: LD_VAR 0 9
31700: PUSH
31701: LD_INT 1
31703: PPUSH
31704: LD_VAR 0 9
31708: PPUSH
31709: CALL_OW 12
31713: ARRAY
31714: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_VAR 0 3
31724: PPUSH
31725: CALL 31974 0 2
31729: NOT
31730: IFFALSE 31789
// repeat engine := _engine [ 1 ] ;
31732: LD_ADDR_VAR 0 3
31736: PUSH
31737: LD_VAR 0 11
31741: PUSH
31742: LD_INT 1
31744: ARRAY
31745: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31746: LD_ADDR_VAR 0 11
31750: PUSH
31751: LD_VAR 0 11
31755: PPUSH
31756: LD_INT 1
31758: PPUSH
31759: CALL_OW 3
31763: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31764: LD_VAR 0 2
31768: PPUSH
31769: LD_VAR 0 3
31773: PPUSH
31774: CALL 31974 0 2
31778: PUSH
31779: LD_VAR 0 11
31783: PUSH
31784: EMPTY
31785: EQUAL
31786: OR
31787: IFFALSE 31732
// if not control in _control then
31789: LD_VAR 0 4
31793: PUSH
31794: LD_VAR 0 12
31798: IN
31799: NOT
31800: IFFALSE 31826
// control := _control [ rand ( 1 , _control ) ] ;
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: LD_VAR 0 12
31811: PUSH
31812: LD_INT 1
31814: PPUSH
31815: LD_VAR 0 12
31819: PPUSH
31820: CALL_OW 12
31824: ARRAY
31825: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31826: LD_VAR 0 2
31830: PPUSH
31831: LD_VAR 0 5
31835: PPUSH
31836: CALL 32194 0 2
31840: NOT
31841: IFFALSE 31900
// repeat weapon := _weapon [ 1 ] ;
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_VAR 0 10
31852: PUSH
31853: LD_INT 1
31855: ARRAY
31856: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31857: LD_ADDR_VAR 0 10
31861: PUSH
31862: LD_VAR 0 10
31866: PPUSH
31867: LD_INT 1
31869: PPUSH
31870: CALL_OW 3
31874: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31875: LD_VAR 0 2
31879: PPUSH
31880: LD_VAR 0 5
31884: PPUSH
31885: CALL 32194 0 2
31889: PUSH
31890: LD_VAR 0 10
31894: PUSH
31895: EMPTY
31896: EQUAL
31897: OR
31898: IFFALSE 31843
// result := [ ] ;
31900: LD_ADDR_VAR 0 6
31904: PUSH
31905: EMPTY
31906: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31907: LD_VAR 0 1
31911: PPUSH
31912: LD_VAR 0 2
31916: PPUSH
31917: LD_VAR 0 3
31921: PPUSH
31922: LD_VAR 0 4
31926: PPUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: CALL_OW 448
31936: IFFALSE 31969
// result := [ chassis , engine , control , weapon ] ;
31938: LD_ADDR_VAR 0 6
31942: PUSH
31943: LD_VAR 0 2
31947: PUSH
31948: LD_VAR 0 3
31952: PUSH
31953: LD_VAR 0 4
31957: PUSH
31958: LD_VAR 0 5
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// end ;
31969: LD_VAR 0 6
31973: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31974: LD_INT 0
31976: PPUSH
// if not chassis or not engine then
31977: LD_VAR 0 1
31981: NOT
31982: PUSH
31983: LD_VAR 0 2
31987: NOT
31988: OR
31989: IFFALSE 31993
// exit ;
31991: GO 32189
// case engine of engine_solar :
31993: LD_VAR 0 2
31997: PUSH
31998: LD_INT 2
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32044
32006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32007: LD_ADDR_VAR 0 3
32011: PUSH
32012: LD_INT 11
32014: PUSH
32015: LD_INT 12
32017: PUSH
32018: LD_INT 13
32020: PUSH
32021: LD_INT 14
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 32173
32044: LD_INT 1
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32114
32052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 11
32060: PUSH
32061: LD_INT 12
32063: PUSH
32064: LD_INT 13
32066: PUSH
32067: LD_INT 14
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 4
32081: PUSH
32082: LD_INT 5
32084: PUSH
32085: LD_INT 21
32087: PUSH
32088: LD_INT 23
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_INT 24
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 32173
32114: LD_INT 3
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32172
32122: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_INT 13
32130: PUSH
32131: LD_INT 14
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 5
32145: PUSH
32146: LD_INT 21
32148: PUSH
32149: LD_INT 22
32151: PUSH
32152: LD_INT 23
32154: PUSH
32155: LD_INT 24
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: ST_TO_ADDR
32170: GO 32173
32172: POP
// result := ( chassis in result ) ;
32173: LD_ADDR_VAR 0 3
32177: PUSH
32178: LD_VAR 0 1
32182: PUSH
32183: LD_VAR 0 3
32187: IN
32188: ST_TO_ADDR
// end ;
32189: LD_VAR 0 3
32193: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32194: LD_INT 0
32196: PPUSH
// if not chassis or not weapon then
32197: LD_VAR 0 1
32201: NOT
32202: PUSH
32203: LD_VAR 0 2
32207: NOT
32208: OR
32209: IFFALSE 32213
// exit ;
32211: GO 33275
// case weapon of us_machine_gun :
32213: LD_VAR 0 2
32217: PUSH
32218: LD_INT 2
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32256
32226: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 5
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: ST_TO_ADDR
32254: GO 33259
32256: LD_INT 3
32258: DOUBLE
32259: EQUAL
32260: IFTRUE 32264
32262: GO 32294
32264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: LD_INT 4
32281: PUSH
32282: LD_INT 5
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
32292: GO 33259
32294: LD_INT 11
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32332
32302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32303: LD_ADDR_VAR 0 3
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 3
32316: PUSH
32317: LD_INT 4
32319: PUSH
32320: LD_INT 5
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
32330: GO 33259
32332: LD_INT 4
32334: DOUBLE
32335: EQUAL
32336: IFTRUE 32340
32338: GO 32366
32340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32341: LD_ADDR_VAR 0 3
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: LD_INT 4
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: ST_TO_ADDR
32364: GO 33259
32366: LD_INT 5
32368: DOUBLE
32369: EQUAL
32370: IFTRUE 32374
32372: GO 32400
32374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32375: LD_ADDR_VAR 0 3
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: LD_INT 5
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: ST_TO_ADDR
32398: GO 33259
32400: LD_INT 9
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 32434
32408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32409: LD_ADDR_VAR 0 3
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 4
32422: PUSH
32423: LD_INT 5
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
32432: GO 33259
32434: LD_INT 7
32436: DOUBLE
32437: EQUAL
32438: IFTRUE 32442
32440: GO 32468
32442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: ST_TO_ADDR
32466: GO 33259
32468: LD_INT 12
32470: DOUBLE
32471: EQUAL
32472: IFTRUE 32476
32474: GO 32502
32476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32477: LD_ADDR_VAR 0 3
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: LD_INT 4
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: ST_TO_ADDR
32500: GO 33259
32502: LD_INT 13
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 32536
32510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32511: LD_ADDR_VAR 0 3
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: LD_INT 3
32521: PUSH
32522: LD_INT 4
32524: PUSH
32525: LD_INT 5
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: ST_TO_ADDR
32534: GO 33259
32536: LD_INT 14
32538: DOUBLE
32539: EQUAL
32540: IFTRUE 32544
32542: GO 32562
32544: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: LD_INT 5
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: ST_TO_ADDR
32560: GO 33259
32562: LD_INT 6
32564: DOUBLE
32565: EQUAL
32566: IFTRUE 32570
32568: GO 32588
32570: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32571: LD_ADDR_VAR 0 3
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: LD_INT 5
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: ST_TO_ADDR
32586: GO 33259
32588: LD_INT 10
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32614
32596: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 33259
32614: LD_INT 22
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32648
32622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 11
32630: PUSH
32631: LD_INT 12
32633: PUSH
32634: LD_INT 13
32636: PUSH
32637: LD_INT 14
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
32646: GO 33259
32648: LD_INT 23
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32682
32656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 11
32664: PUSH
32665: LD_INT 12
32667: PUSH
32668: LD_INT 13
32670: PUSH
32671: LD_INT 14
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 33259
32682: LD_INT 24
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32716
32690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 11
32698: PUSH
32699: LD_INT 12
32701: PUSH
32702: LD_INT 13
32704: PUSH
32705: LD_INT 14
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 33259
32716: LD_INT 30
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32750
32724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 11
32732: PUSH
32733: LD_INT 12
32735: PUSH
32736: LD_INT 13
32738: PUSH
32739: LD_INT 14
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 33259
32750: LD_INT 25
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32776
32758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_INT 13
32766: PUSH
32767: LD_INT 14
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 33259
32776: LD_INT 27
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32802
32784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 13
32792: PUSH
32793: LD_INT 14
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: ST_TO_ADDR
32800: GO 33259
32802: LD_EXP 111
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32838
32812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32813: LD_ADDR_VAR 0 3
32817: PUSH
32818: LD_INT 11
32820: PUSH
32821: LD_INT 12
32823: PUSH
32824: LD_INT 13
32826: PUSH
32827: LD_INT 14
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
32836: GO 33259
32838: LD_INT 28
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32846
32844: GO 32864
32846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_INT 13
32854: PUSH
32855: LD_INT 14
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: ST_TO_ADDR
32862: GO 33259
32864: LD_INT 29
32866: DOUBLE
32867: EQUAL
32868: IFTRUE 32872
32870: GO 32890
32872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: LD_INT 13
32880: PUSH
32881: LD_INT 14
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: ST_TO_ADDR
32888: GO 33259
32890: LD_INT 31
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32916
32898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_INT 13
32906: PUSH
32907: LD_INT 14
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33259
32916: LD_INT 26
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32942
32924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 13
32932: PUSH
32933: LD_INT 14
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: ST_TO_ADDR
32940: GO 33259
32942: LD_INT 42
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32976
32950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_INT 21
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: LD_INT 23
32964: PUSH
32965: LD_INT 24
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
32974: GO 33259
32976: LD_INT 43
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 33010
32984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 21
32992: PUSH
32993: LD_INT 22
32995: PUSH
32996: LD_INT 23
32998: PUSH
32999: LD_INT 24
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: ST_TO_ADDR
33008: GO 33259
33010: LD_INT 44
33012: DOUBLE
33013: EQUAL
33014: IFTRUE 33018
33016: GO 33044
33018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_INT 21
33026: PUSH
33027: LD_INT 22
33029: PUSH
33030: LD_INT 23
33032: PUSH
33033: LD_INT 24
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: ST_TO_ADDR
33042: GO 33259
33044: LD_INT 45
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33078
33052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33053: LD_ADDR_VAR 0 3
33057: PUSH
33058: LD_INT 21
33060: PUSH
33061: LD_INT 22
33063: PUSH
33064: LD_INT 23
33066: PUSH
33067: LD_INT 24
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
33076: GO 33259
33078: LD_INT 49
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33112
33086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_INT 21
33094: PUSH
33095: LD_INT 22
33097: PUSH
33098: LD_INT 23
33100: PUSH
33101: LD_INT 24
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
33110: GO 33259
33112: LD_INT 51
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33146
33120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 21
33128: PUSH
33129: LD_INT 22
33131: PUSH
33132: LD_INT 23
33134: PUSH
33135: LD_INT 24
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
33144: GO 33259
33146: LD_INT 52
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33180
33154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 21
33162: PUSH
33163: LD_INT 22
33165: PUSH
33166: LD_INT 23
33168: PUSH
33169: LD_INT 24
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: ST_TO_ADDR
33178: GO 33259
33180: LD_INT 53
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33206
33188: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33189: LD_ADDR_VAR 0 3
33193: PUSH
33194: LD_INT 23
33196: PUSH
33197: LD_INT 24
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: ST_TO_ADDR
33204: GO 33259
33206: LD_INT 46
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33232
33214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_INT 23
33222: PUSH
33223: LD_INT 24
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33259
33232: LD_INT 47
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33258
33240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 23
33248: PUSH
33249: LD_INT 24
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: ST_TO_ADDR
33256: GO 33259
33258: POP
// result := ( chassis in result ) ;
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_VAR 0 1
33268: PUSH
33269: LD_VAR 0 3
33273: IN
33274: ST_TO_ADDR
// end ;
33275: LD_VAR 0 3
33279: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33280: LD_INT 0
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
// result := array ;
33289: LD_ADDR_VAR 0 5
33293: PUSH
33294: LD_VAR 0 1
33298: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33299: LD_VAR 0 1
33303: NOT
33304: PUSH
33305: LD_VAR 0 2
33309: NOT
33310: OR
33311: PUSH
33312: LD_VAR 0 3
33316: NOT
33317: OR
33318: PUSH
33319: LD_VAR 0 2
33323: PUSH
33324: LD_VAR 0 1
33328: GREATER
33329: OR
33330: PUSH
33331: LD_VAR 0 3
33335: PUSH
33336: LD_VAR 0 1
33340: GREATER
33341: OR
33342: IFFALSE 33346
// exit ;
33344: GO 33642
// if direction then
33346: LD_VAR 0 4
33350: IFFALSE 33414
// begin d := 1 ;
33352: LD_ADDR_VAR 0 9
33356: PUSH
33357: LD_INT 1
33359: ST_TO_ADDR
// if i_from > i_to then
33360: LD_VAR 0 2
33364: PUSH
33365: LD_VAR 0 3
33369: GREATER
33370: IFFALSE 33396
// length := ( array - i_from ) + i_to else
33372: LD_ADDR_VAR 0 11
33376: PUSH
33377: LD_VAR 0 1
33381: PUSH
33382: LD_VAR 0 2
33386: MINUS
33387: PUSH
33388: LD_VAR 0 3
33392: PLUS
33393: ST_TO_ADDR
33394: GO 33412
// length := i_to - i_from ;
33396: LD_ADDR_VAR 0 11
33400: PUSH
33401: LD_VAR 0 3
33405: PUSH
33406: LD_VAR 0 2
33410: MINUS
33411: ST_TO_ADDR
// end else
33412: GO 33475
// begin d := - 1 ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: ST_TO_ADDR
// if i_from > i_to then
33423: LD_VAR 0 2
33427: PUSH
33428: LD_VAR 0 3
33432: GREATER
33433: IFFALSE 33453
// length := i_from - i_to else
33435: LD_ADDR_VAR 0 11
33439: PUSH
33440: LD_VAR 0 2
33444: PUSH
33445: LD_VAR 0 3
33449: MINUS
33450: ST_TO_ADDR
33451: GO 33475
// length := ( array - i_to ) + i_from ;
33453: LD_ADDR_VAR 0 11
33457: PUSH
33458: LD_VAR 0 1
33462: PUSH
33463: LD_VAR 0 3
33467: MINUS
33468: PUSH
33469: LD_VAR 0 2
33473: PLUS
33474: ST_TO_ADDR
// end ; if not length then
33475: LD_VAR 0 11
33479: NOT
33480: IFFALSE 33484
// exit ;
33482: GO 33642
// tmp := array ;
33484: LD_ADDR_VAR 0 10
33488: PUSH
33489: LD_VAR 0 1
33493: ST_TO_ADDR
// for i = 1 to length do
33494: LD_ADDR_VAR 0 6
33498: PUSH
33499: DOUBLE
33500: LD_INT 1
33502: DEC
33503: ST_TO_ADDR
33504: LD_VAR 0 11
33508: PUSH
33509: FOR_TO
33510: IFFALSE 33630
// begin for j = 1 to array do
33512: LD_ADDR_VAR 0 7
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_VAR 0 1
33526: PUSH
33527: FOR_TO
33528: IFFALSE 33616
// begin k := j + d ;
33530: LD_ADDR_VAR 0 8
33534: PUSH
33535: LD_VAR 0 7
33539: PUSH
33540: LD_VAR 0 9
33544: PLUS
33545: ST_TO_ADDR
// if k > array then
33546: LD_VAR 0 8
33550: PUSH
33551: LD_VAR 0 1
33555: GREATER
33556: IFFALSE 33566
// k := 1 ;
33558: LD_ADDR_VAR 0 8
33562: PUSH
33563: LD_INT 1
33565: ST_TO_ADDR
// if not k then
33566: LD_VAR 0 8
33570: NOT
33571: IFFALSE 33583
// k := array ;
33573: LD_ADDR_VAR 0 8
33577: PUSH
33578: LD_VAR 0 1
33582: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33583: LD_ADDR_VAR 0 10
33587: PUSH
33588: LD_VAR 0 10
33592: PPUSH
33593: LD_VAR 0 8
33597: PPUSH
33598: LD_VAR 0 1
33602: PUSH
33603: LD_VAR 0 7
33607: ARRAY
33608: PPUSH
33609: CALL_OW 1
33613: ST_TO_ADDR
// end ;
33614: GO 33527
33616: POP
33617: POP
// array := tmp ;
33618: LD_ADDR_VAR 0 1
33622: PUSH
33623: LD_VAR 0 10
33627: ST_TO_ADDR
// end ;
33628: GO 33509
33630: POP
33631: POP
// result := array ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_VAR 0 1
33641: ST_TO_ADDR
// end ;
33642: LD_VAR 0 5
33646: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33647: LD_INT 0
33649: PPUSH
33650: PPUSH
// result := 0 ;
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 0
33658: ST_TO_ADDR
// if not array or not value in array then
33659: LD_VAR 0 1
33663: NOT
33664: PUSH
33665: LD_VAR 0 2
33669: PUSH
33670: LD_VAR 0 1
33674: IN
33675: NOT
33676: OR
33677: IFFALSE 33681
// exit ;
33679: GO 33735
// for i = 1 to array do
33681: LD_ADDR_VAR 0 4
33685: PUSH
33686: DOUBLE
33687: LD_INT 1
33689: DEC
33690: ST_TO_ADDR
33691: LD_VAR 0 1
33695: PUSH
33696: FOR_TO
33697: IFFALSE 33733
// if value = array [ i ] then
33699: LD_VAR 0 2
33703: PUSH
33704: LD_VAR 0 1
33708: PUSH
33709: LD_VAR 0 4
33713: ARRAY
33714: EQUAL
33715: IFFALSE 33731
// begin result := i ;
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: LD_VAR 0 4
33726: ST_TO_ADDR
// exit ;
33727: POP
33728: POP
33729: GO 33735
// end ;
33731: GO 33696
33733: POP
33734: POP
// end ;
33735: LD_VAR 0 3
33739: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33740: LD_INT 0
33742: PPUSH
// vc_chassis := chassis ;
33743: LD_ADDR_OWVAR 37
33747: PUSH
33748: LD_VAR 0 1
33752: ST_TO_ADDR
// vc_engine := engine ;
33753: LD_ADDR_OWVAR 39
33757: PUSH
33758: LD_VAR 0 2
33762: ST_TO_ADDR
// vc_control := control ;
33763: LD_ADDR_OWVAR 38
33767: PUSH
33768: LD_VAR 0 3
33772: ST_TO_ADDR
// vc_weapon := weapon ;
33773: LD_ADDR_OWVAR 40
33777: PUSH
33778: LD_VAR 0 4
33782: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33783: LD_ADDR_OWVAR 41
33787: PUSH
33788: LD_VAR 0 5
33792: ST_TO_ADDR
// end ;
33793: LD_VAR 0 6
33797: RET
// export function WantPlant ( unit ) ; var task ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
// result := false ;
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_INT 0
33809: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 437
33824: ST_TO_ADDR
// if task then
33825: LD_VAR 0 3
33829: IFFALSE 33857
// if task [ 1 ] [ 1 ] = p then
33831: LD_VAR 0 3
33835: PUSH
33836: LD_INT 1
33838: ARRAY
33839: PUSH
33840: LD_INT 1
33842: ARRAY
33843: PUSH
33844: LD_STRING p
33846: EQUAL
33847: IFFALSE 33857
// result := true ;
33849: LD_ADDR_VAR 0 2
33853: PUSH
33854: LD_INT 1
33856: ST_TO_ADDR
// end ;
33857: LD_VAR 0 2
33861: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33862: LD_INT 0
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
// if pos < 1 then
33868: LD_VAR 0 2
33872: PUSH
33873: LD_INT 1
33875: LESS
33876: IFFALSE 33880
// exit ;
33878: GO 34183
// if pos = 1 then
33880: LD_VAR 0 2
33884: PUSH
33885: LD_INT 1
33887: EQUAL
33888: IFFALSE 33921
// result := Replace ( arr , pos [ 1 ] , value ) else
33890: LD_ADDR_VAR 0 4
33894: PUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: LD_VAR 0 2
33904: PUSH
33905: LD_INT 1
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 3
33913: PPUSH
33914: CALL_OW 1
33918: ST_TO_ADDR
33919: GO 34183
// begin tmp := arr ;
33921: LD_ADDR_VAR 0 6
33925: PUSH
33926: LD_VAR 0 1
33930: ST_TO_ADDR
// s_arr := [ tmp ] ;
33931: LD_ADDR_VAR 0 7
33935: PUSH
33936: LD_VAR 0 6
33940: PUSH
33941: EMPTY
33942: LIST
33943: ST_TO_ADDR
// for i = 1 to pos - 1 do
33944: LD_ADDR_VAR 0 5
33948: PUSH
33949: DOUBLE
33950: LD_INT 1
33952: DEC
33953: ST_TO_ADDR
33954: LD_VAR 0 2
33958: PUSH
33959: LD_INT 1
33961: MINUS
33962: PUSH
33963: FOR_TO
33964: IFFALSE 34009
// begin tmp := tmp [ pos [ i ] ] ;
33966: LD_ADDR_VAR 0 6
33970: PUSH
33971: LD_VAR 0 6
33975: PUSH
33976: LD_VAR 0 2
33980: PUSH
33981: LD_VAR 0 5
33985: ARRAY
33986: ARRAY
33987: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33988: LD_ADDR_VAR 0 7
33992: PUSH
33993: LD_VAR 0 7
33997: PUSH
33998: LD_VAR 0 6
34002: PUSH
34003: EMPTY
34004: LIST
34005: ADD
34006: ST_TO_ADDR
// end ;
34007: GO 33963
34009: POP
34010: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34011: LD_ADDR_VAR 0 6
34015: PUSH
34016: LD_VAR 0 6
34020: PPUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 2
34030: ARRAY
34031: PPUSH
34032: LD_VAR 0 3
34036: PPUSH
34037: CALL_OW 1
34041: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34042: LD_ADDR_VAR 0 7
34046: PUSH
34047: LD_VAR 0 7
34051: PPUSH
34052: LD_VAR 0 7
34056: PPUSH
34057: LD_VAR 0 6
34061: PPUSH
34062: CALL_OW 1
34066: ST_TO_ADDR
// for i = s_arr downto 2 do
34067: LD_ADDR_VAR 0 5
34071: PUSH
34072: DOUBLE
34073: LD_VAR 0 7
34077: INC
34078: ST_TO_ADDR
34079: LD_INT 2
34081: PUSH
34082: FOR_DOWNTO
34083: IFFALSE 34167
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34085: LD_ADDR_VAR 0 6
34089: PUSH
34090: LD_VAR 0 7
34094: PUSH
34095: LD_VAR 0 5
34099: PUSH
34100: LD_INT 1
34102: MINUS
34103: ARRAY
34104: PPUSH
34105: LD_VAR 0 2
34109: PUSH
34110: LD_VAR 0 5
34114: PUSH
34115: LD_INT 1
34117: MINUS
34118: ARRAY
34119: PPUSH
34120: LD_VAR 0 7
34124: PUSH
34125: LD_VAR 0 5
34129: ARRAY
34130: PPUSH
34131: CALL_OW 1
34135: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34136: LD_ADDR_VAR 0 7
34140: PUSH
34141: LD_VAR 0 7
34145: PPUSH
34146: LD_VAR 0 5
34150: PUSH
34151: LD_INT 1
34153: MINUS
34154: PPUSH
34155: LD_VAR 0 6
34159: PPUSH
34160: CALL_OW 1
34164: ST_TO_ADDR
// end ;
34165: GO 34082
34167: POP
34168: POP
// result := s_arr [ 1 ] ;
34169: LD_ADDR_VAR 0 4
34173: PUSH
34174: LD_VAR 0 7
34178: PUSH
34179: LD_INT 1
34181: ARRAY
34182: ST_TO_ADDR
// end ; end ;
34183: LD_VAR 0 4
34187: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34188: LD_INT 0
34190: PPUSH
34191: PPUSH
// if not list then
34192: LD_VAR 0 1
34196: NOT
34197: IFFALSE 34201
// exit ;
34199: GO 34292
// i := list [ pos1 ] ;
34201: LD_ADDR_VAR 0 5
34205: PUSH
34206: LD_VAR 0 1
34210: PUSH
34211: LD_VAR 0 2
34215: ARRAY
34216: ST_TO_ADDR
// if not i then
34217: LD_VAR 0 5
34221: NOT
34222: IFFALSE 34226
// exit ;
34224: GO 34292
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34226: LD_ADDR_VAR 0 1
34230: PUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 1
34245: PUSH
34246: LD_VAR 0 3
34250: ARRAY
34251: PPUSH
34252: CALL_OW 1
34256: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34257: LD_ADDR_VAR 0 1
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: LD_VAR 0 3
34271: PPUSH
34272: LD_VAR 0 5
34276: PPUSH
34277: CALL_OW 1
34281: ST_TO_ADDR
// result := list ;
34282: LD_ADDR_VAR 0 4
34286: PUSH
34287: LD_VAR 0 1
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 4
34296: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34297: LD_INT 0
34299: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34300: LD_ADDR_VAR 0 5
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 250
34314: PPUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 251
34324: PPUSH
34325: LD_VAR 0 2
34329: PPUSH
34330: LD_VAR 0 3
34334: PPUSH
34335: LD_VAR 0 4
34339: PPUSH
34340: CALL 34350 0 5
34344: ST_TO_ADDR
// end ;
34345: LD_VAR 0 5
34349: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if not list then
34356: LD_VAR 0 3
34360: NOT
34361: IFFALSE 34365
// exit ;
34363: GO 34753
// result := [ ] ;
34365: LD_ADDR_VAR 0 6
34369: PUSH
34370: EMPTY
34371: ST_TO_ADDR
// for i in list do
34372: LD_ADDR_VAR 0 7
34376: PUSH
34377: LD_VAR 0 3
34381: PUSH
34382: FOR_IN
34383: IFFALSE 34585
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34385: LD_ADDR_VAR 0 9
34389: PUSH
34390: LD_VAR 0 7
34394: PPUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: LD_VAR 0 2
34404: PPUSH
34405: CALL_OW 297
34409: ST_TO_ADDR
// if not result then
34410: LD_VAR 0 6
34414: NOT
34415: IFFALSE 34441
// result := [ [ i , tmp ] ] else
34417: LD_ADDR_VAR 0 6
34421: PUSH
34422: LD_VAR 0 7
34426: PUSH
34427: LD_VAR 0 9
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: ST_TO_ADDR
34439: GO 34583
// begin if result [ result ] [ 2 ] < tmp then
34441: LD_VAR 0 6
34445: PUSH
34446: LD_VAR 0 6
34450: ARRAY
34451: PUSH
34452: LD_INT 2
34454: ARRAY
34455: PUSH
34456: LD_VAR 0 9
34460: LESS
34461: IFFALSE 34503
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34463: LD_ADDR_VAR 0 6
34467: PUSH
34468: LD_VAR 0 6
34472: PPUSH
34473: LD_VAR 0 6
34477: PUSH
34478: LD_INT 1
34480: PLUS
34481: PPUSH
34482: LD_VAR 0 7
34486: PUSH
34487: LD_VAR 0 9
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 2
34500: ST_TO_ADDR
34501: GO 34583
// for j = 1 to result do
34503: LD_ADDR_VAR 0 8
34507: PUSH
34508: DOUBLE
34509: LD_INT 1
34511: DEC
34512: ST_TO_ADDR
34513: LD_VAR 0 6
34517: PUSH
34518: FOR_TO
34519: IFFALSE 34581
// begin if tmp < result [ j ] [ 2 ] then
34521: LD_VAR 0 9
34525: PUSH
34526: LD_VAR 0 6
34530: PUSH
34531: LD_VAR 0 8
34535: ARRAY
34536: PUSH
34537: LD_INT 2
34539: ARRAY
34540: LESS
34541: IFFALSE 34579
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34543: LD_ADDR_VAR 0 6
34547: PUSH
34548: LD_VAR 0 6
34552: PPUSH
34553: LD_VAR 0 8
34557: PPUSH
34558: LD_VAR 0 7
34562: PUSH
34563: LD_VAR 0 9
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PPUSH
34572: CALL_OW 2
34576: ST_TO_ADDR
// break ;
34577: GO 34581
// end ; end ;
34579: GO 34518
34581: POP
34582: POP
// end ; end ;
34583: GO 34382
34585: POP
34586: POP
// if result and not asc then
34587: LD_VAR 0 6
34591: PUSH
34592: LD_VAR 0 4
34596: NOT
34597: AND
34598: IFFALSE 34673
// begin tmp := result ;
34600: LD_ADDR_VAR 0 9
34604: PUSH
34605: LD_VAR 0 6
34609: ST_TO_ADDR
// for i = tmp downto 1 do
34610: LD_ADDR_VAR 0 7
34614: PUSH
34615: DOUBLE
34616: LD_VAR 0 9
34620: INC
34621: ST_TO_ADDR
34622: LD_INT 1
34624: PUSH
34625: FOR_DOWNTO
34626: IFFALSE 34671
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 6
34637: PPUSH
34638: LD_VAR 0 9
34642: PUSH
34643: LD_VAR 0 7
34647: MINUS
34648: PUSH
34649: LD_INT 1
34651: PLUS
34652: PPUSH
34653: LD_VAR 0 9
34657: PUSH
34658: LD_VAR 0 7
34662: ARRAY
34663: PPUSH
34664: CALL_OW 1
34668: ST_TO_ADDR
34669: GO 34625
34671: POP
34672: POP
// end ; tmp := [ ] ;
34673: LD_ADDR_VAR 0 9
34677: PUSH
34678: EMPTY
34679: ST_TO_ADDR
// if mode then
34680: LD_VAR 0 5
34684: IFFALSE 34753
// begin for i = 1 to result do
34686: LD_ADDR_VAR 0 7
34690: PUSH
34691: DOUBLE
34692: LD_INT 1
34694: DEC
34695: ST_TO_ADDR
34696: LD_VAR 0 6
34700: PUSH
34701: FOR_TO
34702: IFFALSE 34741
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34704: LD_ADDR_VAR 0 9
34708: PUSH
34709: LD_VAR 0 9
34713: PPUSH
34714: LD_VAR 0 7
34718: PPUSH
34719: LD_VAR 0 6
34723: PUSH
34724: LD_VAR 0 7
34728: ARRAY
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: PPUSH
34734: CALL_OW 1
34738: ST_TO_ADDR
34739: GO 34701
34741: POP
34742: POP
// result := tmp ;
34743: LD_ADDR_VAR 0 6
34747: PUSH
34748: LD_VAR 0 9
34752: ST_TO_ADDR
// end ; end ;
34753: LD_VAR 0 6
34757: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34758: LD_INT 0
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34766: LD_ADDR_VAR 0 5
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: EMPTY
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: ST_TO_ADDR
// if not x or not y then
34788: LD_VAR 0 2
34792: NOT
34793: PUSH
34794: LD_VAR 0 3
34798: NOT
34799: OR
34800: IFFALSE 34804
// exit ;
34802: GO 36456
// if not range then
34804: LD_VAR 0 4
34808: NOT
34809: IFFALSE 34819
// range := 10 ;
34811: LD_ADDR_VAR 0 4
34815: PUSH
34816: LD_INT 10
34818: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34819: LD_ADDR_VAR 0 8
34823: PUSH
34824: LD_INT 81
34826: PUSH
34827: LD_VAR 0 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 92
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 3
34848: PUSH
34849: LD_VAR 0 4
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: LD_INT 21
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: PPUSH
34882: CALL_OW 69
34886: ST_TO_ADDR
// if not tmp then
34887: LD_VAR 0 8
34891: NOT
34892: IFFALSE 34896
// exit ;
34894: GO 36456
// for i in tmp do
34896: LD_ADDR_VAR 0 6
34900: PUSH
34901: LD_VAR 0 8
34905: PUSH
34906: FOR_IN
34907: IFFALSE 36431
// begin points := [ 0 , 0 , 0 ] ;
34909: LD_ADDR_VAR 0 9
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: ST_TO_ADDR
// bpoints := 1 ;
34928: LD_ADDR_VAR 0 10
34932: PUSH
34933: LD_INT 1
34935: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34936: LD_VAR 0 6
34940: PPUSH
34941: CALL_OW 247
34945: PUSH
34946: LD_INT 1
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 35532
34954: POP
// begin if GetClass ( i ) = 1 then
34955: LD_VAR 0 6
34959: PPUSH
34960: CALL_OW 257
34964: PUSH
34965: LD_INT 1
34967: EQUAL
34968: IFFALSE 34989
// points := [ 10 , 5 , 3 ] ;
34970: LD_ADDR_VAR 0 9
34974: PUSH
34975: LD_INT 10
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34989: LD_VAR 0 6
34993: PPUSH
34994: CALL_OW 257
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: IN
35013: IFFALSE 35034
// points := [ 3 , 2 , 1 ] ;
35015: LD_ADDR_VAR 0 9
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35034: LD_VAR 0 6
35038: PPUSH
35039: CALL_OW 257
35043: PUSH
35044: LD_INT 5
35046: EQUAL
35047: IFFALSE 35068
// points := [ 130 , 5 , 2 ] ;
35049: LD_ADDR_VAR 0 9
35053: PUSH
35054: LD_INT 130
35056: PUSH
35057: LD_INT 5
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35068: LD_VAR 0 6
35072: PPUSH
35073: CALL_OW 257
35077: PUSH
35078: LD_INT 8
35080: EQUAL
35081: IFFALSE 35102
// points := [ 35 , 35 , 30 ] ;
35083: LD_ADDR_VAR 0 9
35087: PUSH
35088: LD_INT 35
35090: PUSH
35091: LD_INT 35
35093: PUSH
35094: LD_INT 30
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35102: LD_VAR 0 6
35106: PPUSH
35107: CALL_OW 257
35111: PUSH
35112: LD_INT 9
35114: EQUAL
35115: IFFALSE 35136
// points := [ 20 , 55 , 40 ] ;
35117: LD_ADDR_VAR 0 9
35121: PUSH
35122: LD_INT 20
35124: PUSH
35125: LD_INT 55
35127: PUSH
35128: LD_INT 40
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35136: LD_VAR 0 6
35140: PPUSH
35141: CALL_OW 257
35145: PUSH
35146: LD_INT 12
35148: PUSH
35149: LD_INT 16
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: IN
35156: IFFALSE 35177
// points := [ 5 , 3 , 2 ] ;
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_INT 5
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35177: LD_VAR 0 6
35181: PPUSH
35182: CALL_OW 257
35186: PUSH
35187: LD_INT 17
35189: EQUAL
35190: IFFALSE 35211
// points := [ 100 , 50 , 75 ] ;
35192: LD_ADDR_VAR 0 9
35196: PUSH
35197: LD_INT 100
35199: PUSH
35200: LD_INT 50
35202: PUSH
35203: LD_INT 75
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35211: LD_VAR 0 6
35215: PPUSH
35216: CALL_OW 257
35220: PUSH
35221: LD_INT 15
35223: EQUAL
35224: IFFALSE 35245
// points := [ 10 , 5 , 3 ] ;
35226: LD_ADDR_VAR 0 9
35230: PUSH
35231: LD_INT 10
35233: PUSH
35234: LD_INT 5
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35245: LD_VAR 0 6
35249: PPUSH
35250: CALL_OW 257
35254: PUSH
35255: LD_INT 14
35257: EQUAL
35258: IFFALSE 35279
// points := [ 10 , 0 , 0 ] ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_INT 10
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL_OW 257
35288: PUSH
35289: LD_INT 11
35291: EQUAL
35292: IFFALSE 35313
// points := [ 30 , 10 , 5 ] ;
35294: LD_ADDR_VAR 0 9
35298: PUSH
35299: LD_INT 30
35301: PUSH
35302: LD_INT 10
35304: PUSH
35305: LD_INT 5
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35313: LD_VAR 0 1
35317: PPUSH
35318: LD_INT 5
35320: PPUSH
35321: CALL_OW 321
35325: PUSH
35326: LD_INT 2
35328: EQUAL
35329: IFFALSE 35346
// bpoints := bpoints * 1.8 ;
35331: LD_ADDR_VAR 0 10
35335: PUSH
35336: LD_VAR 0 10
35340: PUSH
35341: LD_REAL  1.80000000000000E+0000
35344: MUL
35345: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35346: LD_VAR 0 6
35350: PPUSH
35351: CALL_OW 257
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: IN
35374: PUSH
35375: LD_VAR 0 1
35379: PPUSH
35380: LD_INT 51
35382: PPUSH
35383: CALL_OW 321
35387: PUSH
35388: LD_INT 2
35390: EQUAL
35391: AND
35392: IFFALSE 35409
// bpoints := bpoints * 1.2 ;
35394: LD_ADDR_VAR 0 10
35398: PUSH
35399: LD_VAR 0 10
35403: PUSH
35404: LD_REAL  1.20000000000000E+0000
35407: MUL
35408: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35409: LD_VAR 0 6
35413: PPUSH
35414: CALL_OW 257
35418: PUSH
35419: LD_INT 5
35421: PUSH
35422: LD_INT 7
35424: PUSH
35425: LD_INT 9
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: IN
35433: PUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: LD_INT 52
35441: PPUSH
35442: CALL_OW 321
35446: PUSH
35447: LD_INT 2
35449: EQUAL
35450: AND
35451: IFFALSE 35468
// bpoints := bpoints * 1.5 ;
35453: LD_ADDR_VAR 0 10
35457: PUSH
35458: LD_VAR 0 10
35462: PUSH
35463: LD_REAL  1.50000000000000E+0000
35466: MUL
35467: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35468: LD_VAR 0 1
35472: PPUSH
35473: LD_INT 66
35475: PPUSH
35476: CALL_OW 321
35480: PUSH
35481: LD_INT 2
35483: EQUAL
35484: IFFALSE 35501
// bpoints := bpoints * 1.1 ;
35486: LD_ADDR_VAR 0 10
35490: PUSH
35491: LD_VAR 0 10
35495: PUSH
35496: LD_REAL  1.10000000000000E+0000
35499: MUL
35500: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35501: LD_ADDR_VAR 0 10
35505: PUSH
35506: LD_VAR 0 10
35510: PUSH
35511: LD_VAR 0 6
35515: PPUSH
35516: LD_INT 1
35518: PPUSH
35519: CALL_OW 259
35523: PUSH
35524: LD_REAL  1.15000000000000E+0000
35527: MUL
35528: MUL
35529: ST_TO_ADDR
// end ; unit_vehicle :
35530: GO 36360
35532: LD_INT 2
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35540
35538: GO 36348
35540: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35541: LD_VAR 0 6
35545: PPUSH
35546: CALL_OW 264
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 42
35556: PUSH
35557: LD_INT 24
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: IN
35565: IFFALSE 35586
// points := [ 25 , 5 , 3 ] ;
35567: LD_ADDR_VAR 0 9
35571: PUSH
35572: LD_INT 25
35574: PUSH
35575: LD_INT 5
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35586: LD_VAR 0 6
35590: PPUSH
35591: CALL_OW 264
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: LD_INT 43
35601: PUSH
35602: LD_INT 25
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: IN
35610: IFFALSE 35631
// points := [ 40 , 15 , 5 ] ;
35612: LD_ADDR_VAR 0 9
35616: PUSH
35617: LD_INT 40
35619: PUSH
35620: LD_INT 15
35622: PUSH
35623: LD_INT 5
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35631: LD_VAR 0 6
35635: PPUSH
35636: CALL_OW 264
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: LD_INT 23
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: IN
35651: IFFALSE 35672
// points := [ 7 , 25 , 8 ] ;
35653: LD_ADDR_VAR 0 9
35657: PUSH
35658: LD_INT 7
35660: PUSH
35661: LD_INT 25
35663: PUSH
35664: LD_INT 8
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35672: LD_VAR 0 6
35676: PPUSH
35677: CALL_OW 264
35681: PUSH
35682: LD_INT 5
35684: PUSH
35685: LD_INT 27
35687: PUSH
35688: LD_INT 44
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: IN
35696: IFFALSE 35717
// points := [ 14 , 50 , 16 ] ;
35698: LD_ADDR_VAR 0 9
35702: PUSH
35703: LD_INT 14
35705: PUSH
35706: LD_INT 50
35708: PUSH
35709: LD_INT 16
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35717: LD_VAR 0 6
35721: PPUSH
35722: CALL_OW 264
35726: PUSH
35727: LD_INT 6
35729: PUSH
35730: LD_INT 46
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: IN
35737: IFFALSE 35758
// points := [ 32 , 120 , 70 ] ;
35739: LD_ADDR_VAR 0 9
35743: PUSH
35744: LD_INT 32
35746: PUSH
35747: LD_INT 120
35749: PUSH
35750: LD_INT 70
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35758: LD_VAR 0 6
35762: PPUSH
35763: CALL_OW 264
35767: PUSH
35768: LD_INT 7
35770: PUSH
35771: LD_INT 28
35773: PUSH
35774: LD_INT 45
35776: PUSH
35777: LD_EXP 111
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: IN
35788: IFFALSE 35809
// points := [ 35 , 20 , 45 ] ;
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_INT 35
35797: PUSH
35798: LD_INT 20
35800: PUSH
35801: LD_INT 45
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35809: LD_VAR 0 6
35813: PPUSH
35814: CALL_OW 264
35818: PUSH
35819: LD_INT 47
35821: PUSH
35822: EMPTY
35823: LIST
35824: IN
35825: IFFALSE 35846
// points := [ 67 , 45 , 75 ] ;
35827: LD_ADDR_VAR 0 9
35831: PUSH
35832: LD_INT 67
35834: PUSH
35835: LD_INT 45
35837: PUSH
35838: LD_INT 75
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35846: LD_VAR 0 6
35850: PPUSH
35851: CALL_OW 264
35855: PUSH
35856: LD_INT 26
35858: PUSH
35859: EMPTY
35860: LIST
35861: IN
35862: IFFALSE 35883
// points := [ 120 , 30 , 80 ] ;
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_INT 120
35871: PUSH
35872: LD_INT 30
35874: PUSH
35875: LD_INT 80
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35883: LD_VAR 0 6
35887: PPUSH
35888: CALL_OW 264
35892: PUSH
35893: LD_INT 22
35895: PUSH
35896: EMPTY
35897: LIST
35898: IN
35899: IFFALSE 35920
// points := [ 40 , 1 , 1 ] ;
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_INT 40
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 29
35932: PUSH
35933: EMPTY
35934: LIST
35935: IN
35936: IFFALSE 35957
// points := [ 70 , 200 , 400 ] ;
35938: LD_ADDR_VAR 0 9
35942: PUSH
35943: LD_INT 70
35945: PUSH
35946: LD_INT 200
35948: PUSH
35949: LD_INT 400
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35957: LD_VAR 0 6
35961: PPUSH
35962: CALL_OW 264
35966: PUSH
35967: LD_INT 14
35969: PUSH
35970: LD_INT 53
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: IN
35977: IFFALSE 35998
// points := [ 40 , 10 , 20 ] ;
35979: LD_ADDR_VAR 0 9
35983: PUSH
35984: LD_INT 40
35986: PUSH
35987: LD_INT 10
35989: PUSH
35990: LD_INT 20
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35998: LD_VAR 0 6
36002: PPUSH
36003: CALL_OW 264
36007: PUSH
36008: LD_INT 9
36010: PUSH
36011: EMPTY
36012: LIST
36013: IN
36014: IFFALSE 36035
// points := [ 5 , 70 , 20 ] ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: LD_INT 70
36026: PUSH
36027: LD_INT 20
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36035: LD_VAR 0 6
36039: PPUSH
36040: CALL_OW 264
36044: PUSH
36045: LD_INT 10
36047: PUSH
36048: EMPTY
36049: LIST
36050: IN
36051: IFFALSE 36072
// points := [ 35 , 110 , 70 ] ;
36053: LD_ADDR_VAR 0 9
36057: PUSH
36058: LD_INT 35
36060: PUSH
36061: LD_INT 110
36063: PUSH
36064: LD_INT 70
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36072: LD_VAR 0 6
36076: PPUSH
36077: CALL_OW 265
36081: PUSH
36082: LD_INT 25
36084: EQUAL
36085: IFFALSE 36106
// points := [ 80 , 65 , 100 ] ;
36087: LD_ADDR_VAR 0 9
36091: PUSH
36092: LD_INT 80
36094: PUSH
36095: LD_INT 65
36097: PUSH
36098: LD_INT 100
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36106: LD_VAR 0 6
36110: PPUSH
36111: CALL_OW 263
36115: PUSH
36116: LD_INT 1
36118: EQUAL
36119: IFFALSE 36154
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 10
36130: PUSH
36131: LD_VAR 0 6
36135: PPUSH
36136: CALL_OW 311
36140: PPUSH
36141: LD_INT 3
36143: PPUSH
36144: CALL_OW 259
36148: PUSH
36149: LD_INT 4
36151: MUL
36152: MUL
36153: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36154: LD_VAR 0 6
36158: PPUSH
36159: CALL_OW 263
36163: PUSH
36164: LD_INT 2
36166: EQUAL
36167: IFFALSE 36218
// begin j := IsControledBy ( i ) ;
36169: LD_ADDR_VAR 0 7
36173: PUSH
36174: LD_VAR 0 6
36178: PPUSH
36179: CALL_OW 312
36183: ST_TO_ADDR
// if j then
36184: LD_VAR 0 7
36188: IFFALSE 36218
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36190: LD_ADDR_VAR 0 10
36194: PUSH
36195: LD_VAR 0 10
36199: PUSH
36200: LD_VAR 0 7
36204: PPUSH
36205: LD_INT 3
36207: PPUSH
36208: CALL_OW 259
36212: PUSH
36213: LD_INT 3
36215: MUL
36216: MUL
36217: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36218: LD_VAR 0 6
36222: PPUSH
36223: CALL_OW 264
36227: PUSH
36228: LD_INT 5
36230: PUSH
36231: LD_INT 6
36233: PUSH
36234: LD_INT 46
36236: PUSH
36237: LD_INT 44
36239: PUSH
36240: LD_INT 47
36242: PUSH
36243: LD_INT 45
36245: PUSH
36246: LD_INT 28
36248: PUSH
36249: LD_INT 7
36251: PUSH
36252: LD_INT 27
36254: PUSH
36255: LD_INT 29
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: IN
36270: PUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: LD_INT 52
36278: PPUSH
36279: CALL_OW 321
36283: PUSH
36284: LD_INT 2
36286: EQUAL
36287: AND
36288: IFFALSE 36305
// bpoints := bpoints * 1.2 ;
36290: LD_ADDR_VAR 0 10
36294: PUSH
36295: LD_VAR 0 10
36299: PUSH
36300: LD_REAL  1.20000000000000E+0000
36303: MUL
36304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36305: LD_VAR 0 6
36309: PPUSH
36310: CALL_OW 264
36314: PUSH
36315: LD_INT 6
36317: PUSH
36318: LD_INT 46
36320: PUSH
36321: LD_INT 47
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: IN
36329: IFFALSE 36346
// bpoints := bpoints * 1.2 ;
36331: LD_ADDR_VAR 0 10
36335: PUSH
36336: LD_VAR 0 10
36340: PUSH
36341: LD_REAL  1.20000000000000E+0000
36344: MUL
36345: ST_TO_ADDR
// end ; unit_building :
36346: GO 36360
36348: LD_INT 3
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36359
36356: POP
// ; end ;
36357: GO 36360
36359: POP
// for j = 1 to 3 do
36360: LD_ADDR_VAR 0 7
36364: PUSH
36365: DOUBLE
36366: LD_INT 1
36368: DEC
36369: ST_TO_ADDR
36370: LD_INT 3
36372: PUSH
36373: FOR_TO
36374: IFFALSE 36427
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36376: LD_ADDR_VAR 0 5
36380: PUSH
36381: LD_VAR 0 5
36385: PPUSH
36386: LD_VAR 0 7
36390: PPUSH
36391: LD_VAR 0 5
36395: PUSH
36396: LD_VAR 0 7
36400: ARRAY
36401: PUSH
36402: LD_VAR 0 9
36406: PUSH
36407: LD_VAR 0 7
36411: ARRAY
36412: PUSH
36413: LD_VAR 0 10
36417: MUL
36418: PLUS
36419: PPUSH
36420: CALL_OW 1
36424: ST_TO_ADDR
36425: GO 36373
36427: POP
36428: POP
// end ;
36429: GO 34906
36431: POP
36432: POP
// result := Replace ( result , 4 , tmp ) ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_VAR 0 5
36442: PPUSH
36443: LD_INT 4
36445: PPUSH
36446: LD_VAR 0 8
36450: PPUSH
36451: CALL_OW 1
36455: ST_TO_ADDR
// end ;
36456: LD_VAR 0 5
36460: RET
// export function DangerAtRange ( unit , range ) ; begin
36461: LD_INT 0
36463: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 255
36478: PPUSH
36479: LD_VAR 0 1
36483: PPUSH
36484: CALL_OW 250
36488: PPUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 251
36498: PPUSH
36499: LD_VAR 0 2
36503: PPUSH
36504: CALL 34758 0 4
36508: ST_TO_ADDR
// end ;
36509: LD_VAR 0 3
36513: RET
// export function DangerInArea ( side , area ) ; begin
36514: LD_INT 0
36516: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36517: LD_ADDR_VAR 0 3
36521: PUSH
36522: LD_VAR 0 2
36526: PPUSH
36527: LD_INT 81
36529: PUSH
36530: LD_VAR 0 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PPUSH
36539: CALL_OW 70
36543: ST_TO_ADDR
// end ;
36544: LD_VAR 0 3
36548: RET
// export function IsExtension ( b ) ; begin
36549: LD_INT 0
36551: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_INT 23
36564: PUSH
36565: LD_INT 20
36567: PUSH
36568: LD_INT 22
36570: PUSH
36571: LD_INT 17
36573: PUSH
36574: LD_INT 24
36576: PUSH
36577: LD_INT 21
36579: PUSH
36580: LD_INT 19
36582: PUSH
36583: LD_INT 16
36585: PUSH
36586: LD_INT 25
36588: PUSH
36589: LD_INT 18
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: IN
36604: ST_TO_ADDR
// end ;
36605: LD_VAR 0 2
36609: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36610: LD_INT 0
36612: PPUSH
36613: PPUSH
36614: PPUSH
// result := [ ] ;
36615: LD_ADDR_VAR 0 4
36619: PUSH
36620: EMPTY
36621: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_INT 21
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL_OW 70
36646: ST_TO_ADDR
// if not tmp then
36647: LD_VAR 0 5
36651: NOT
36652: IFFALSE 36656
// exit ;
36654: GO 36720
// if checkLink then
36656: LD_VAR 0 3
36660: IFFALSE 36710
// begin for i in tmp do
36662: LD_ADDR_VAR 0 6
36666: PUSH
36667: LD_VAR 0 5
36671: PUSH
36672: FOR_IN
36673: IFFALSE 36708
// if GetBase ( i ) <> base then
36675: LD_VAR 0 6
36679: PPUSH
36680: CALL_OW 274
36684: PUSH
36685: LD_VAR 0 1
36689: NONEQUAL
36690: IFFALSE 36706
// ComLinkToBase ( base , i ) ;
36692: LD_VAR 0 1
36696: PPUSH
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 169
36706: GO 36672
36708: POP
36709: POP
// end ; result := tmp ;
36710: LD_ADDR_VAR 0 4
36714: PUSH
36715: LD_VAR 0 5
36719: ST_TO_ADDR
// end ;
36720: LD_VAR 0 4
36724: RET
// export function ComComplete ( units , b ) ; var i ; begin
36725: LD_INT 0
36727: PPUSH
36728: PPUSH
// if not units then
36729: LD_VAR 0 1
36733: NOT
36734: IFFALSE 36738
// exit ;
36736: GO 36828
// for i in units do
36738: LD_ADDR_VAR 0 4
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: FOR_IN
36749: IFFALSE 36826
// if BuildingStatus ( b ) = bs_build then
36751: LD_VAR 0 2
36755: PPUSH
36756: CALL_OW 461
36760: PUSH
36761: LD_INT 1
36763: EQUAL
36764: IFFALSE 36824
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36766: LD_VAR 0 4
36770: PPUSH
36771: LD_STRING h
36773: PUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: CALL_OW 250
36783: PUSH
36784: LD_VAR 0 2
36788: PPUSH
36789: CALL_OW 251
36793: PUSH
36794: LD_VAR 0 2
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: PUSH
36817: EMPTY
36818: LIST
36819: PPUSH
36820: CALL_OW 446
36824: GO 36748
36826: POP
36827: POP
// end ;
36828: LD_VAR 0 3
36832: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36833: LD_INT 0
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
36839: PPUSH
36840: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36841: LD_VAR 0 1
36845: NOT
36846: PUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 263
36856: PUSH
36857: LD_INT 2
36859: NONEQUAL
36860: OR
36861: IFFALSE 36865
// exit ;
36863: GO 37181
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36865: LD_ADDR_VAR 0 6
36869: PUSH
36870: LD_INT 22
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 255
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: LD_INT 30
36892: PUSH
36893: LD_INT 36
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 34
36902: PUSH
36903: LD_INT 31
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 69
36923: ST_TO_ADDR
// if not tmp then
36924: LD_VAR 0 6
36928: NOT
36929: IFFALSE 36933
// exit ;
36931: GO 37181
// result := [ ] ;
36933: LD_ADDR_VAR 0 2
36937: PUSH
36938: EMPTY
36939: ST_TO_ADDR
// for i in tmp do
36940: LD_ADDR_VAR 0 3
36944: PUSH
36945: LD_VAR 0 6
36949: PUSH
36950: FOR_IN
36951: IFFALSE 37022
// begin t := UnitsInside ( i ) ;
36953: LD_ADDR_VAR 0 4
36957: PUSH
36958: LD_VAR 0 3
36962: PPUSH
36963: CALL_OW 313
36967: ST_TO_ADDR
// if t then
36968: LD_VAR 0 4
36972: IFFALSE 37020
// for j in t do
36974: LD_ADDR_VAR 0 7
36978: PUSH
36979: LD_VAR 0 4
36983: PUSH
36984: FOR_IN
36985: IFFALSE 37018
// result := Replace ( result , result + 1 , j ) ;
36987: LD_ADDR_VAR 0 2
36991: PUSH
36992: LD_VAR 0 2
36996: PPUSH
36997: LD_VAR 0 2
37001: PUSH
37002: LD_INT 1
37004: PLUS
37005: PPUSH
37006: LD_VAR 0 7
37010: PPUSH
37011: CALL_OW 1
37015: ST_TO_ADDR
37016: GO 36984
37018: POP
37019: POP
// end ;
37020: GO 36950
37022: POP
37023: POP
// if not result then
37024: LD_VAR 0 2
37028: NOT
37029: IFFALSE 37033
// exit ;
37031: GO 37181
// mech := result [ 1 ] ;
37033: LD_ADDR_VAR 0 5
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: ST_TO_ADDR
// if result > 1 then
37047: LD_VAR 0 2
37051: PUSH
37052: LD_INT 1
37054: GREATER
37055: IFFALSE 37167
// begin for i = 2 to result do
37057: LD_ADDR_VAR 0 3
37061: PUSH
37062: DOUBLE
37063: LD_INT 2
37065: DEC
37066: ST_TO_ADDR
37067: LD_VAR 0 2
37071: PUSH
37072: FOR_TO
37073: IFFALSE 37165
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37075: LD_ADDR_VAR 0 4
37079: PUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_VAR 0 3
37089: ARRAY
37090: PPUSH
37091: LD_INT 3
37093: PPUSH
37094: CALL_OW 259
37098: PUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_VAR 0 3
37108: ARRAY
37109: PPUSH
37110: CALL_OW 432
37114: MINUS
37115: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37116: LD_VAR 0 4
37120: PUSH
37121: LD_VAR 0 5
37125: PPUSH
37126: LD_INT 3
37128: PPUSH
37129: CALL_OW 259
37133: PUSH
37134: LD_VAR 0 5
37138: PPUSH
37139: CALL_OW 432
37143: MINUS
37144: GREATEREQUAL
37145: IFFALSE 37163
// mech := result [ i ] ;
37147: LD_ADDR_VAR 0 5
37151: PUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_VAR 0 3
37161: ARRAY
37162: ST_TO_ADDR
// end ;
37163: GO 37072
37165: POP
37166: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37167: LD_VAR 0 1
37171: PPUSH
37172: LD_VAR 0 5
37176: PPUSH
37177: CALL_OW 135
// end ;
37181: LD_VAR 0 2
37185: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37186: LD_INT 0
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
// result := [ ] ;
37201: LD_ADDR_VAR 0 7
37205: PUSH
37206: EMPTY
37207: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL_OW 266
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: IN
37228: NOT
37229: IFFALSE 37233
// exit ;
37231: GO 38867
// if name then
37233: LD_VAR 0 3
37237: IFFALSE 37253
// SetBName ( base_dep , name ) ;
37239: LD_VAR 0 1
37243: PPUSH
37244: LD_VAR 0 3
37248: PPUSH
37249: CALL_OW 500
// base := GetBase ( base_dep ) ;
37253: LD_ADDR_VAR 0 15
37257: PUSH
37258: LD_VAR 0 1
37262: PPUSH
37263: CALL_OW 274
37267: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37268: LD_ADDR_VAR 0 16
37272: PUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 255
37282: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37283: LD_ADDR_VAR 0 17
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 248
37297: ST_TO_ADDR
// if sources then
37298: LD_VAR 0 5
37302: IFFALSE 37349
// for i = 1 to 3 do
37304: LD_ADDR_VAR 0 8
37308: PUSH
37309: DOUBLE
37310: LD_INT 1
37312: DEC
37313: ST_TO_ADDR
37314: LD_INT 3
37316: PUSH
37317: FOR_TO
37318: IFFALSE 37347
// AddResourceType ( base , i , sources [ i ] ) ;
37320: LD_VAR 0 15
37324: PPUSH
37325: LD_VAR 0 8
37329: PPUSH
37330: LD_VAR 0 5
37334: PUSH
37335: LD_VAR 0 8
37339: ARRAY
37340: PPUSH
37341: CALL_OW 276
37345: GO 37317
37347: POP
37348: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37349: LD_ADDR_VAR 0 18
37353: PUSH
37354: LD_VAR 0 15
37358: PPUSH
37359: LD_VAR 0 2
37363: PPUSH
37364: LD_INT 1
37366: PPUSH
37367: CALL 36610 0 3
37371: ST_TO_ADDR
// InitHc ;
37372: CALL_OW 19
// InitUc ;
37376: CALL_OW 18
// uc_side := side ;
37380: LD_ADDR_OWVAR 20
37384: PUSH
37385: LD_VAR 0 16
37389: ST_TO_ADDR
// uc_nation := nation ;
37390: LD_ADDR_OWVAR 21
37394: PUSH
37395: LD_VAR 0 17
37399: ST_TO_ADDR
// if buildings then
37400: LD_VAR 0 18
37404: IFFALSE 38726
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37406: LD_ADDR_VAR 0 19
37410: PUSH
37411: LD_VAR 0 18
37415: PPUSH
37416: LD_INT 2
37418: PUSH
37419: LD_INT 30
37421: PUSH
37422: LD_INT 29
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 30
37431: PUSH
37432: LD_INT 30
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: PPUSH
37444: CALL_OW 72
37448: ST_TO_ADDR
// if tmp then
37449: LD_VAR 0 19
37453: IFFALSE 37501
// for i in tmp do
37455: LD_ADDR_VAR 0 8
37459: PUSH
37460: LD_VAR 0 19
37464: PUSH
37465: FOR_IN
37466: IFFALSE 37499
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37468: LD_VAR 0 8
37472: PPUSH
37473: CALL_OW 250
37477: PPUSH
37478: LD_VAR 0 8
37482: PPUSH
37483: CALL_OW 251
37487: PPUSH
37488: LD_VAR 0 16
37492: PPUSH
37493: CALL_OW 441
37497: GO 37465
37499: POP
37500: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37501: LD_VAR 0 18
37505: PPUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 30
37511: PUSH
37512: LD_INT 32
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 30
37521: PUSH
37522: LD_INT 33
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: PPUSH
37534: CALL_OW 72
37538: IFFALSE 37626
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37540: LD_ADDR_VAR 0 8
37544: PUSH
37545: LD_VAR 0 18
37549: PPUSH
37550: LD_INT 2
37552: PUSH
37553: LD_INT 30
37555: PUSH
37556: LD_INT 32
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 30
37565: PUSH
37566: LD_INT 33
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: PPUSH
37578: CALL_OW 72
37582: PUSH
37583: FOR_IN
37584: IFFALSE 37624
// begin if not GetBWeapon ( i ) then
37586: LD_VAR 0 8
37590: PPUSH
37591: CALL_OW 269
37595: NOT
37596: IFFALSE 37622
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37598: LD_VAR 0 8
37602: PPUSH
37603: LD_VAR 0 8
37607: PPUSH
37608: LD_VAR 0 2
37612: PPUSH
37613: CALL 38872 0 2
37617: PPUSH
37618: CALL_OW 431
// end ;
37622: GO 37583
37624: POP
37625: POP
// end ; for i = 1 to personel do
37626: LD_ADDR_VAR 0 8
37630: PUSH
37631: DOUBLE
37632: LD_INT 1
37634: DEC
37635: ST_TO_ADDR
37636: LD_VAR 0 6
37640: PUSH
37641: FOR_TO
37642: IFFALSE 38706
// begin if i > 4 then
37644: LD_VAR 0 8
37648: PUSH
37649: LD_INT 4
37651: GREATER
37652: IFFALSE 37656
// break ;
37654: GO 38706
// case i of 1 :
37656: LD_VAR 0 8
37660: PUSH
37661: LD_INT 1
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37749
37669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37670: LD_ADDR_VAR 0 12
37674: PUSH
37675: LD_VAR 0 18
37679: PPUSH
37680: LD_INT 22
37682: PUSH
37683: LD_VAR 0 16
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 58
37694: PUSH
37695: EMPTY
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 30
37703: PUSH
37704: LD_INT 32
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 30
37713: PUSH
37714: LD_INT 4
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 5
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: PPUSH
37742: CALL_OW 72
37746: ST_TO_ADDR
37747: GO 37971
37749: LD_INT 2
37751: DOUBLE
37752: EQUAL
37753: IFTRUE 37757
37755: GO 37819
37757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37758: LD_ADDR_VAR 0 12
37762: PUSH
37763: LD_VAR 0 18
37767: PPUSH
37768: LD_INT 22
37770: PUSH
37771: LD_VAR 0 16
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 30
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 30
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PPUSH
37812: CALL_OW 72
37816: ST_TO_ADDR
37817: GO 37971
37819: LD_INT 3
37821: DOUBLE
37822: EQUAL
37823: IFTRUE 37827
37825: GO 37889
37827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37828: LD_ADDR_VAR 0 12
37832: PUSH
37833: LD_VAR 0 18
37837: PPUSH
37838: LD_INT 22
37840: PUSH
37841: LD_VAR 0 16
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 30
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 30
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PPUSH
37882: CALL_OW 72
37886: ST_TO_ADDR
37887: GO 37971
37889: LD_INT 4
37891: DOUBLE
37892: EQUAL
37893: IFTRUE 37897
37895: GO 37970
37897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37898: LD_ADDR_VAR 0 12
37902: PUSH
37903: LD_VAR 0 18
37907: PPUSH
37908: LD_INT 22
37910: PUSH
37911: LD_VAR 0 16
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 30
37925: PUSH
37926: LD_INT 6
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 30
37935: PUSH
37936: LD_INT 7
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 30
37945: PUSH
37946: LD_INT 8
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PPUSH
37963: CALL_OW 72
37967: ST_TO_ADDR
37968: GO 37971
37970: POP
// if i = 1 then
37971: LD_VAR 0 8
37975: PUSH
37976: LD_INT 1
37978: EQUAL
37979: IFFALSE 38090
// begin tmp := [ ] ;
37981: LD_ADDR_VAR 0 19
37985: PUSH
37986: EMPTY
37987: ST_TO_ADDR
// for j in f do
37988: LD_ADDR_VAR 0 9
37992: PUSH
37993: LD_VAR 0 12
37997: PUSH
37998: FOR_IN
37999: IFFALSE 38072
// if GetBType ( j ) = b_bunker then
38001: LD_VAR 0 9
38005: PPUSH
38006: CALL_OW 266
38010: PUSH
38011: LD_INT 32
38013: EQUAL
38014: IFFALSE 38041
// tmp := Insert ( tmp , 1 , j ) else
38016: LD_ADDR_VAR 0 19
38020: PUSH
38021: LD_VAR 0 19
38025: PPUSH
38026: LD_INT 1
38028: PPUSH
38029: LD_VAR 0 9
38033: PPUSH
38034: CALL_OW 2
38038: ST_TO_ADDR
38039: GO 38070
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38041: LD_ADDR_VAR 0 19
38045: PUSH
38046: LD_VAR 0 19
38050: PPUSH
38051: LD_VAR 0 19
38055: PUSH
38056: LD_INT 1
38058: PLUS
38059: PPUSH
38060: LD_VAR 0 9
38064: PPUSH
38065: CALL_OW 2
38069: ST_TO_ADDR
38070: GO 37998
38072: POP
38073: POP
// if tmp then
38074: LD_VAR 0 19
38078: IFFALSE 38090
// f := tmp ;
38080: LD_ADDR_VAR 0 12
38084: PUSH
38085: LD_VAR 0 19
38089: ST_TO_ADDR
// end ; x := personel [ i ] ;
38090: LD_ADDR_VAR 0 13
38094: PUSH
38095: LD_VAR 0 6
38099: PUSH
38100: LD_VAR 0 8
38104: ARRAY
38105: ST_TO_ADDR
// if x = - 1 then
38106: LD_VAR 0 13
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: EQUAL
38115: IFFALSE 38324
// begin for j in f do
38117: LD_ADDR_VAR 0 9
38121: PUSH
38122: LD_VAR 0 12
38126: PUSH
38127: FOR_IN
38128: IFFALSE 38320
// repeat InitHc ;
38130: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38134: LD_VAR 0 9
38138: PPUSH
38139: CALL_OW 266
38143: PUSH
38144: LD_INT 5
38146: EQUAL
38147: IFFALSE 38217
// begin if UnitsInside ( j ) < 3 then
38149: LD_VAR 0 9
38153: PPUSH
38154: CALL_OW 313
38158: PUSH
38159: LD_INT 3
38161: LESS
38162: IFFALSE 38198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38164: LD_INT 0
38166: PPUSH
38167: LD_INT 5
38169: PUSH
38170: LD_INT 8
38172: PUSH
38173: LD_INT 9
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: PUSH
38181: LD_VAR 0 17
38185: ARRAY
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: CALL_OW 380
38196: GO 38215
// PrepareHuman ( false , i , skill ) ;
38198: LD_INT 0
38200: PPUSH
38201: LD_VAR 0 8
38205: PPUSH
38206: LD_VAR 0 4
38210: PPUSH
38211: CALL_OW 380
// end else
38215: GO 38234
// PrepareHuman ( false , i , skill ) ;
38217: LD_INT 0
38219: PPUSH
38220: LD_VAR 0 8
38224: PPUSH
38225: LD_VAR 0 4
38229: PPUSH
38230: CALL_OW 380
// un := CreateHuman ;
38234: LD_ADDR_VAR 0 14
38238: PUSH
38239: CALL_OW 44
38243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38244: LD_ADDR_VAR 0 7
38248: PUSH
38249: LD_VAR 0 7
38253: PPUSH
38254: LD_INT 1
38256: PPUSH
38257: LD_VAR 0 14
38261: PPUSH
38262: CALL_OW 2
38266: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38267: LD_VAR 0 14
38271: PPUSH
38272: LD_VAR 0 9
38276: PPUSH
38277: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38281: LD_VAR 0 9
38285: PPUSH
38286: CALL_OW 313
38290: PUSH
38291: LD_INT 6
38293: EQUAL
38294: PUSH
38295: LD_VAR 0 9
38299: PPUSH
38300: CALL_OW 266
38304: PUSH
38305: LD_INT 32
38307: PUSH
38308: LD_INT 31
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: IN
38315: OR
38316: IFFALSE 38130
38318: GO 38127
38320: POP
38321: POP
// end else
38322: GO 38704
// for j = 1 to x do
38324: LD_ADDR_VAR 0 9
38328: PUSH
38329: DOUBLE
38330: LD_INT 1
38332: DEC
38333: ST_TO_ADDR
38334: LD_VAR 0 13
38338: PUSH
38339: FOR_TO
38340: IFFALSE 38702
// begin InitHc ;
38342: CALL_OW 19
// if not f then
38346: LD_VAR 0 12
38350: NOT
38351: IFFALSE 38440
// begin PrepareHuman ( false , i , skill ) ;
38353: LD_INT 0
38355: PPUSH
38356: LD_VAR 0 8
38360: PPUSH
38361: LD_VAR 0 4
38365: PPUSH
38366: CALL_OW 380
// un := CreateHuman ;
38370: LD_ADDR_VAR 0 14
38374: PUSH
38375: CALL_OW 44
38379: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38380: LD_ADDR_VAR 0 7
38384: PUSH
38385: LD_VAR 0 7
38389: PPUSH
38390: LD_INT 1
38392: PPUSH
38393: LD_VAR 0 14
38397: PPUSH
38398: CALL_OW 2
38402: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38403: LD_VAR 0 14
38407: PPUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 250
38417: PPUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 251
38427: PPUSH
38428: LD_INT 10
38430: PPUSH
38431: LD_INT 0
38433: PPUSH
38434: CALL_OW 50
// continue ;
38438: GO 38339
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38440: LD_VAR 0 12
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: PPUSH
38449: CALL_OW 313
38453: PUSH
38454: LD_VAR 0 12
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PPUSH
38463: CALL_OW 266
38467: PUSH
38468: LD_INT 32
38470: PUSH
38471: LD_INT 31
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: IN
38478: AND
38479: PUSH
38480: LD_VAR 0 12
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PPUSH
38489: CALL_OW 313
38493: PUSH
38494: LD_INT 6
38496: EQUAL
38497: OR
38498: IFFALSE 38518
// f := Delete ( f , 1 ) ;
38500: LD_ADDR_VAR 0 12
38504: PUSH
38505: LD_VAR 0 12
38509: PPUSH
38510: LD_INT 1
38512: PPUSH
38513: CALL_OW 3
38517: ST_TO_ADDR
// if not f then
38518: LD_VAR 0 12
38522: NOT
38523: IFFALSE 38541
// begin x := x + 2 ;
38525: LD_ADDR_VAR 0 13
38529: PUSH
38530: LD_VAR 0 13
38534: PUSH
38535: LD_INT 2
38537: PLUS
38538: ST_TO_ADDR
// continue ;
38539: GO 38339
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38541: LD_VAR 0 12
38545: PUSH
38546: LD_INT 1
38548: ARRAY
38549: PPUSH
38550: CALL_OW 266
38554: PUSH
38555: LD_INT 5
38557: EQUAL
38558: IFFALSE 38632
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38560: LD_VAR 0 12
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: CALL_OW 313
38573: PUSH
38574: LD_INT 3
38576: LESS
38577: IFFALSE 38613
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38579: LD_INT 0
38581: PPUSH
38582: LD_INT 5
38584: PUSH
38585: LD_INT 8
38587: PUSH
38588: LD_INT 9
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_VAR 0 17
38600: ARRAY
38601: PPUSH
38602: LD_VAR 0 4
38606: PPUSH
38607: CALL_OW 380
38611: GO 38630
// PrepareHuman ( false , i , skill ) ;
38613: LD_INT 0
38615: PPUSH
38616: LD_VAR 0 8
38620: PPUSH
38621: LD_VAR 0 4
38625: PPUSH
38626: CALL_OW 380
// end else
38630: GO 38649
// PrepareHuman ( false , i , skill ) ;
38632: LD_INT 0
38634: PPUSH
38635: LD_VAR 0 8
38639: PPUSH
38640: LD_VAR 0 4
38644: PPUSH
38645: CALL_OW 380
// un := CreateHuman ;
38649: LD_ADDR_VAR 0 14
38653: PUSH
38654: CALL_OW 44
38658: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38659: LD_ADDR_VAR 0 7
38663: PUSH
38664: LD_VAR 0 7
38668: PPUSH
38669: LD_INT 1
38671: PPUSH
38672: LD_VAR 0 14
38676: PPUSH
38677: CALL_OW 2
38681: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38682: LD_VAR 0 14
38686: PPUSH
38687: LD_VAR 0 12
38691: PUSH
38692: LD_INT 1
38694: ARRAY
38695: PPUSH
38696: CALL_OW 52
// end ;
38700: GO 38339
38702: POP
38703: POP
// end ;
38704: GO 37641
38706: POP
38707: POP
// result := result ^ buildings ;
38708: LD_ADDR_VAR 0 7
38712: PUSH
38713: LD_VAR 0 7
38717: PUSH
38718: LD_VAR 0 18
38722: ADD
38723: ST_TO_ADDR
// end else
38724: GO 38867
// begin for i = 1 to personel do
38726: LD_ADDR_VAR 0 8
38730: PUSH
38731: DOUBLE
38732: LD_INT 1
38734: DEC
38735: ST_TO_ADDR
38736: LD_VAR 0 6
38740: PUSH
38741: FOR_TO
38742: IFFALSE 38865
// begin if i > 4 then
38744: LD_VAR 0 8
38748: PUSH
38749: LD_INT 4
38751: GREATER
38752: IFFALSE 38756
// break ;
38754: GO 38865
// x := personel [ i ] ;
38756: LD_ADDR_VAR 0 13
38760: PUSH
38761: LD_VAR 0 6
38765: PUSH
38766: LD_VAR 0 8
38770: ARRAY
38771: ST_TO_ADDR
// if x = - 1 then
38772: LD_VAR 0 13
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: EQUAL
38781: IFFALSE 38785
// continue ;
38783: GO 38741
// PrepareHuman ( false , i , skill ) ;
38785: LD_INT 0
38787: PPUSH
38788: LD_VAR 0 8
38792: PPUSH
38793: LD_VAR 0 4
38797: PPUSH
38798: CALL_OW 380
// un := CreateHuman ;
38802: LD_ADDR_VAR 0 14
38806: PUSH
38807: CALL_OW 44
38811: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38812: LD_VAR 0 14
38816: PPUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 250
38826: PPUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 251
38836: PPUSH
38837: LD_INT 10
38839: PPUSH
38840: LD_INT 0
38842: PPUSH
38843: CALL_OW 50
// result := result ^ un ;
38847: LD_ADDR_VAR 0 7
38851: PUSH
38852: LD_VAR 0 7
38856: PUSH
38857: LD_VAR 0 14
38861: ADD
38862: ST_TO_ADDR
// end ;
38863: GO 38741
38865: POP
38866: POP
// end ; end ;
38867: LD_VAR 0 7
38871: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38872: LD_INT 0
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
// result := false ;
38890: LD_ADDR_VAR 0 3
38894: PUSH
38895: LD_INT 0
38897: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38898: LD_VAR 0 1
38902: NOT
38903: PUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 266
38913: PUSH
38914: LD_INT 32
38916: PUSH
38917: LD_INT 33
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: IN
38924: NOT
38925: OR
38926: IFFALSE 38930
// exit ;
38928: GO 40039
// nat := GetNation ( tower ) ;
38930: LD_ADDR_VAR 0 12
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: CALL_OW 248
38944: ST_TO_ADDR
// side := GetSide ( tower ) ;
38945: LD_ADDR_VAR 0 16
38949: PUSH
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 255
38959: ST_TO_ADDR
// x := GetX ( tower ) ;
38960: LD_ADDR_VAR 0 10
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 250
38974: ST_TO_ADDR
// y := GetY ( tower ) ;
38975: LD_ADDR_VAR 0 11
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: CALL_OW 251
38989: ST_TO_ADDR
// if not x or not y then
38990: LD_VAR 0 10
38994: NOT
38995: PUSH
38996: LD_VAR 0 11
39000: NOT
39001: OR
39002: IFFALSE 39006
// exit ;
39004: GO 40039
// weapon := 0 ;
39006: LD_ADDR_VAR 0 18
39010: PUSH
39011: LD_INT 0
39013: ST_TO_ADDR
// fac_list := [ ] ;
39014: LD_ADDR_VAR 0 17
39018: PUSH
39019: EMPTY
39020: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39021: LD_ADDR_VAR 0 6
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 274
39035: PPUSH
39036: LD_VAR 0 2
39040: PPUSH
39041: LD_INT 0
39043: PPUSH
39044: CALL 36610 0 3
39048: PPUSH
39049: LD_INT 30
39051: PUSH
39052: LD_INT 3
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PPUSH
39059: CALL_OW 72
39063: ST_TO_ADDR
// if not factories then
39064: LD_VAR 0 6
39068: NOT
39069: IFFALSE 39073
// exit ;
39071: GO 40039
// for i in factories do
39073: LD_ADDR_VAR 0 8
39077: PUSH
39078: LD_VAR 0 6
39082: PUSH
39083: FOR_IN
39084: IFFALSE 39109
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39086: LD_ADDR_VAR 0 17
39090: PUSH
39091: LD_VAR 0 17
39095: PUSH
39096: LD_VAR 0 8
39100: PPUSH
39101: CALL_OW 478
39105: UNION
39106: ST_TO_ADDR
39107: GO 39083
39109: POP
39110: POP
// if not fac_list then
39111: LD_VAR 0 17
39115: NOT
39116: IFFALSE 39120
// exit ;
39118: GO 40039
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39120: LD_ADDR_VAR 0 5
39124: PUSH
39125: LD_INT 4
39127: PUSH
39128: LD_INT 5
39130: PUSH
39131: LD_INT 9
39133: PUSH
39134: LD_INT 10
39136: PUSH
39137: LD_INT 6
39139: PUSH
39140: LD_INT 7
39142: PUSH
39143: LD_INT 11
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 27
39157: PUSH
39158: LD_INT 28
39160: PUSH
39161: LD_INT 26
39163: PUSH
39164: LD_INT 30
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 43
39175: PUSH
39176: LD_INT 44
39178: PUSH
39179: LD_INT 46
39181: PUSH
39182: LD_INT 45
39184: PUSH
39185: LD_INT 47
39187: PUSH
39188: LD_INT 49
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: PUSH
39204: LD_VAR 0 12
39208: ARRAY
39209: ST_TO_ADDR
// list := list isect fac_list ;
39210: LD_ADDR_VAR 0 5
39214: PUSH
39215: LD_VAR 0 5
39219: PUSH
39220: LD_VAR 0 17
39224: ISECT
39225: ST_TO_ADDR
// if not list then
39226: LD_VAR 0 5
39230: NOT
39231: IFFALSE 39235
// exit ;
39233: GO 40039
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39235: LD_VAR 0 12
39239: PUSH
39240: LD_INT 3
39242: EQUAL
39243: PUSH
39244: LD_INT 49
39246: PUSH
39247: LD_VAR 0 5
39251: IN
39252: AND
39253: PUSH
39254: LD_INT 31
39256: PPUSH
39257: LD_VAR 0 16
39261: PPUSH
39262: CALL_OW 321
39266: PUSH
39267: LD_INT 2
39269: EQUAL
39270: AND
39271: IFFALSE 39331
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39273: LD_INT 22
39275: PUSH
39276: LD_VAR 0 16
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 35
39287: PUSH
39288: LD_INT 49
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 91
39297: PUSH
39298: LD_VAR 0 1
39302: PUSH
39303: LD_INT 10
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 69
39320: NOT
39321: IFFALSE 39331
// weapon := ru_time_lapser ;
39323: LD_ADDR_VAR 0 18
39327: PUSH
39328: LD_INT 49
39330: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39331: LD_VAR 0 12
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: IN
39346: PUSH
39347: LD_INT 11
39349: PUSH
39350: LD_VAR 0 5
39354: IN
39355: PUSH
39356: LD_INT 30
39358: PUSH
39359: LD_VAR 0 5
39363: IN
39364: OR
39365: AND
39366: PUSH
39367: LD_INT 6
39369: PPUSH
39370: LD_VAR 0 16
39374: PPUSH
39375: CALL_OW 321
39379: PUSH
39380: LD_INT 2
39382: EQUAL
39383: AND
39384: IFFALSE 39549
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39386: LD_INT 22
39388: PUSH
39389: LD_VAR 0 16
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 35
39403: PUSH
39404: LD_INT 11
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 35
39413: PUSH
39414: LD_INT 30
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 91
39428: PUSH
39429: LD_VAR 0 1
39433: PUSH
39434: LD_INT 18
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PPUSH
39447: CALL_OW 69
39451: NOT
39452: PUSH
39453: LD_INT 22
39455: PUSH
39456: LD_VAR 0 16
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 30
39470: PUSH
39471: LD_INT 32
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 30
39480: PUSH
39481: LD_INT 33
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 91
39495: PUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_INT 12
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: PPUSH
39517: CALL_OW 69
39521: PUSH
39522: LD_INT 2
39524: GREATER
39525: AND
39526: IFFALSE 39549
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39528: LD_ADDR_VAR 0 18
39532: PUSH
39533: LD_INT 11
39535: PUSH
39536: LD_INT 30
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_VAR 0 12
39547: ARRAY
39548: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39549: LD_VAR 0 18
39553: NOT
39554: PUSH
39555: LD_INT 40
39557: PPUSH
39558: LD_VAR 0 16
39562: PPUSH
39563: CALL_OW 321
39567: PUSH
39568: LD_INT 2
39570: EQUAL
39571: AND
39572: PUSH
39573: LD_INT 7
39575: PUSH
39576: LD_VAR 0 5
39580: IN
39581: PUSH
39582: LD_INT 28
39584: PUSH
39585: LD_VAR 0 5
39589: IN
39590: OR
39591: PUSH
39592: LD_INT 45
39594: PUSH
39595: LD_VAR 0 5
39599: IN
39600: OR
39601: AND
39602: IFFALSE 39856
// begin hex := GetHexInfo ( x , y ) ;
39604: LD_ADDR_VAR 0 4
39608: PUSH
39609: LD_VAR 0 10
39613: PPUSH
39614: LD_VAR 0 11
39618: PPUSH
39619: CALL_OW 546
39623: ST_TO_ADDR
// if hex [ 1 ] then
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: IFFALSE 39636
// exit ;
39634: GO 40039
// height := hex [ 2 ] ;
39636: LD_ADDR_VAR 0 15
39640: PUSH
39641: LD_VAR 0 4
39645: PUSH
39646: LD_INT 2
39648: ARRAY
39649: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39650: LD_ADDR_VAR 0 14
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 5
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
// for i in tmp do
39673: LD_ADDR_VAR 0 8
39677: PUSH
39678: LD_VAR 0 14
39682: PUSH
39683: FOR_IN
39684: IFFALSE 39854
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39686: LD_ADDR_VAR 0 9
39690: PUSH
39691: LD_VAR 0 10
39695: PPUSH
39696: LD_VAR 0 8
39700: PPUSH
39701: LD_INT 5
39703: PPUSH
39704: CALL_OW 272
39708: PUSH
39709: LD_VAR 0 11
39713: PPUSH
39714: LD_VAR 0 8
39718: PPUSH
39719: LD_INT 5
39721: PPUSH
39722: CALL_OW 273
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39731: LD_VAR 0 9
39735: PUSH
39736: LD_INT 1
39738: ARRAY
39739: PPUSH
39740: LD_VAR 0 9
39744: PUSH
39745: LD_INT 2
39747: ARRAY
39748: PPUSH
39749: CALL_OW 488
39753: IFFALSE 39852
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39755: LD_ADDR_VAR 0 4
39759: PUSH
39760: LD_VAR 0 9
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: PPUSH
39769: LD_VAR 0 9
39773: PUSH
39774: LD_INT 2
39776: ARRAY
39777: PPUSH
39778: CALL_OW 546
39782: ST_TO_ADDR
// if hex [ 1 ] then
39783: LD_VAR 0 4
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: IFFALSE 39795
// continue ;
39793: GO 39683
// h := hex [ 2 ] ;
39795: LD_ADDR_VAR 0 13
39799: PUSH
39800: LD_VAR 0 4
39804: PUSH
39805: LD_INT 2
39807: ARRAY
39808: ST_TO_ADDR
// if h + 7 < height then
39809: LD_VAR 0 13
39813: PUSH
39814: LD_INT 7
39816: PLUS
39817: PUSH
39818: LD_VAR 0 15
39822: LESS
39823: IFFALSE 39852
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39825: LD_ADDR_VAR 0 18
39829: PUSH
39830: LD_INT 7
39832: PUSH
39833: LD_INT 28
39835: PUSH
39836: LD_INT 45
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: LD_VAR 0 12
39848: ARRAY
39849: ST_TO_ADDR
// break ;
39850: GO 39854
// end ; end ; end ;
39852: GO 39683
39854: POP
39855: POP
// end ; if not weapon then
39856: LD_VAR 0 18
39860: NOT
39861: IFFALSE 39921
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39863: LD_ADDR_VAR 0 5
39867: PUSH
39868: LD_VAR 0 5
39872: PUSH
39873: LD_INT 11
39875: PUSH
39876: LD_INT 30
39878: PUSH
39879: LD_INT 49
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: DIFF
39887: ST_TO_ADDR
// if not list then
39888: LD_VAR 0 5
39892: NOT
39893: IFFALSE 39897
// exit ;
39895: GO 40039
// weapon := list [ rand ( 1 , list ) ] ;
39897: LD_ADDR_VAR 0 18
39901: PUSH
39902: LD_VAR 0 5
39906: PUSH
39907: LD_INT 1
39909: PPUSH
39910: LD_VAR 0 5
39914: PPUSH
39915: CALL_OW 12
39919: ARRAY
39920: ST_TO_ADDR
// end ; if weapon then
39921: LD_VAR 0 18
39925: IFFALSE 40039
// begin tmp := CostOfWeapon ( weapon ) ;
39927: LD_ADDR_VAR 0 14
39931: PUSH
39932: LD_VAR 0 18
39936: PPUSH
39937: CALL_OW 451
39941: ST_TO_ADDR
// j := GetBase ( tower ) ;
39942: LD_ADDR_VAR 0 9
39946: PUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 274
39956: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39957: LD_VAR 0 9
39961: PPUSH
39962: LD_INT 1
39964: PPUSH
39965: CALL_OW 275
39969: PUSH
39970: LD_VAR 0 14
39974: PUSH
39975: LD_INT 1
39977: ARRAY
39978: GREATEREQUAL
39979: PUSH
39980: LD_VAR 0 9
39984: PPUSH
39985: LD_INT 2
39987: PPUSH
39988: CALL_OW 275
39992: PUSH
39993: LD_VAR 0 14
39997: PUSH
39998: LD_INT 2
40000: ARRAY
40001: GREATEREQUAL
40002: AND
40003: PUSH
40004: LD_VAR 0 9
40008: PPUSH
40009: LD_INT 3
40011: PPUSH
40012: CALL_OW 275
40016: PUSH
40017: LD_VAR 0 14
40021: PUSH
40022: LD_INT 3
40024: ARRAY
40025: GREATEREQUAL
40026: AND
40027: IFFALSE 40039
// result := weapon ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_VAR 0 18
40038: ST_TO_ADDR
// end ; end ;
40039: LD_VAR 0 3
40043: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40044: LD_INT 0
40046: PPUSH
40047: PPUSH
// result := true ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 1
40055: ST_TO_ADDR
// if array1 = array2 then
40056: LD_VAR 0 1
40060: PUSH
40061: LD_VAR 0 2
40065: EQUAL
40066: IFFALSE 40126
// begin for i = 1 to array1 do
40068: LD_ADDR_VAR 0 4
40072: PUSH
40073: DOUBLE
40074: LD_INT 1
40076: DEC
40077: ST_TO_ADDR
40078: LD_VAR 0 1
40082: PUSH
40083: FOR_TO
40084: IFFALSE 40122
// if array1 [ i ] <> array2 [ i ] then
40086: LD_VAR 0 1
40090: PUSH
40091: LD_VAR 0 4
40095: ARRAY
40096: PUSH
40097: LD_VAR 0 2
40101: PUSH
40102: LD_VAR 0 4
40106: ARRAY
40107: NONEQUAL
40108: IFFALSE 40120
// begin result := false ;
40110: LD_ADDR_VAR 0 3
40114: PUSH
40115: LD_INT 0
40117: ST_TO_ADDR
// break ;
40118: GO 40122
// end ;
40120: GO 40083
40122: POP
40123: POP
// end else
40124: GO 40134
// result := false ;
40126: LD_ADDR_VAR 0 3
40130: PUSH
40131: LD_INT 0
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 3
40138: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
// if not array1 or not array2 then
40143: LD_VAR 0 1
40147: NOT
40148: PUSH
40149: LD_VAR 0 2
40153: NOT
40154: OR
40155: IFFALSE 40159
// exit ;
40157: GO 40223
// result := true ;
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_INT 1
40166: ST_TO_ADDR
// for i = 1 to array1 do
40167: LD_ADDR_VAR 0 4
40171: PUSH
40172: DOUBLE
40173: LD_INT 1
40175: DEC
40176: ST_TO_ADDR
40177: LD_VAR 0 1
40181: PUSH
40182: FOR_TO
40183: IFFALSE 40221
// if array1 [ i ] <> array2 [ i ] then
40185: LD_VAR 0 1
40189: PUSH
40190: LD_VAR 0 4
40194: ARRAY
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_VAR 0 4
40205: ARRAY
40206: NONEQUAL
40207: IFFALSE 40219
// begin result := false ;
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 0
40216: ST_TO_ADDR
// break ;
40217: GO 40221
// end ;
40219: GO 40182
40221: POP
40222: POP
// end ;
40223: LD_VAR 0 3
40227: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40228: LD_INT 0
40230: PPUSH
40231: PPUSH
40232: PPUSH
// pom := GetBase ( fac ) ;
40233: LD_ADDR_VAR 0 5
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 274
40247: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40248: LD_ADDR_VAR 0 4
40252: PUSH
40253: LD_VAR 0 2
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 2
40266: PUSH
40267: LD_INT 2
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 2
40275: PUSH
40276: LD_INT 3
40278: ARRAY
40279: PPUSH
40280: LD_VAR 0 2
40284: PUSH
40285: LD_INT 4
40287: ARRAY
40288: PPUSH
40289: CALL_OW 449
40293: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40294: LD_ADDR_VAR 0 3
40298: PUSH
40299: LD_VAR 0 5
40303: PPUSH
40304: LD_INT 1
40306: PPUSH
40307: CALL_OW 275
40311: PUSH
40312: LD_VAR 0 4
40316: PUSH
40317: LD_INT 1
40319: ARRAY
40320: GREATEREQUAL
40321: PUSH
40322: LD_VAR 0 5
40326: PPUSH
40327: LD_INT 2
40329: PPUSH
40330: CALL_OW 275
40334: PUSH
40335: LD_VAR 0 4
40339: PUSH
40340: LD_INT 2
40342: ARRAY
40343: GREATEREQUAL
40344: AND
40345: PUSH
40346: LD_VAR 0 5
40350: PPUSH
40351: LD_INT 3
40353: PPUSH
40354: CALL_OW 275
40358: PUSH
40359: LD_VAR 0 4
40363: PUSH
40364: LD_INT 3
40366: ARRAY
40367: GREATEREQUAL
40368: AND
40369: ST_TO_ADDR
// end ;
40370: LD_VAR 0 3
40374: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40375: LD_INT 0
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
// pom := GetBase ( building ) ;
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_VAR 0 1
40390: PPUSH
40391: CALL_OW 274
40395: ST_TO_ADDR
// if not pom then
40396: LD_VAR 0 3
40400: NOT
40401: IFFALSE 40405
// exit ;
40403: GO 40575
// btype := GetBType ( building ) ;
40405: LD_ADDR_VAR 0 5
40409: PUSH
40410: LD_VAR 0 1
40414: PPUSH
40415: CALL_OW 266
40419: ST_TO_ADDR
// if btype = b_armoury then
40420: LD_VAR 0 5
40424: PUSH
40425: LD_INT 4
40427: EQUAL
40428: IFFALSE 40438
// btype := b_barracks ;
40430: LD_ADDR_VAR 0 5
40434: PUSH
40435: LD_INT 5
40437: ST_TO_ADDR
// if btype = b_depot then
40438: LD_VAR 0 5
40442: PUSH
40443: LD_INT 0
40445: EQUAL
40446: IFFALSE 40456
// btype := b_warehouse ;
40448: LD_ADDR_VAR 0 5
40452: PUSH
40453: LD_INT 1
40455: ST_TO_ADDR
// if btype = b_workshop then
40456: LD_VAR 0 5
40460: PUSH
40461: LD_INT 2
40463: EQUAL
40464: IFFALSE 40474
// btype := b_factory ;
40466: LD_ADDR_VAR 0 5
40470: PUSH
40471: LD_INT 3
40473: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40474: LD_ADDR_VAR 0 4
40478: PUSH
40479: LD_VAR 0 5
40483: PPUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 248
40493: PPUSH
40494: CALL_OW 450
40498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40499: LD_ADDR_VAR 0 2
40503: PUSH
40504: LD_VAR 0 3
40508: PPUSH
40509: LD_INT 1
40511: PPUSH
40512: CALL_OW 275
40516: PUSH
40517: LD_VAR 0 4
40521: PUSH
40522: LD_INT 1
40524: ARRAY
40525: GREATEREQUAL
40526: PUSH
40527: LD_VAR 0 3
40531: PPUSH
40532: LD_INT 2
40534: PPUSH
40535: CALL_OW 275
40539: PUSH
40540: LD_VAR 0 4
40544: PUSH
40545: LD_INT 2
40547: ARRAY
40548: GREATEREQUAL
40549: AND
40550: PUSH
40551: LD_VAR 0 3
40555: PPUSH
40556: LD_INT 3
40558: PPUSH
40559: CALL_OW 275
40563: PUSH
40564: LD_VAR 0 4
40568: PUSH
40569: LD_INT 3
40571: ARRAY
40572: GREATEREQUAL
40573: AND
40574: ST_TO_ADDR
// end ;
40575: LD_VAR 0 2
40579: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40580: LD_INT 0
40582: PPUSH
40583: PPUSH
40584: PPUSH
// pom := GetBase ( building ) ;
40585: LD_ADDR_VAR 0 4
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 274
40599: ST_TO_ADDR
// if not pom then
40600: LD_VAR 0 4
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 40710
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 2
40618: PPUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 248
40628: PPUSH
40629: CALL_OW 450
40633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40634: LD_ADDR_VAR 0 3
40638: PUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: LD_INT 1
40646: PPUSH
40647: CALL_OW 275
40651: PUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_INT 1
40659: ARRAY
40660: GREATEREQUAL
40661: PUSH
40662: LD_VAR 0 4
40666: PPUSH
40667: LD_INT 2
40669: PPUSH
40670: CALL_OW 275
40674: PUSH
40675: LD_VAR 0 5
40679: PUSH
40680: LD_INT 2
40682: ARRAY
40683: GREATEREQUAL
40684: AND
40685: PUSH
40686: LD_VAR 0 4
40690: PPUSH
40691: LD_INT 3
40693: PPUSH
40694: CALL_OW 275
40698: PUSH
40699: LD_VAR 0 5
40703: PUSH
40704: LD_INT 3
40706: ARRAY
40707: GREATEREQUAL
40708: AND
40709: ST_TO_ADDR
// end ;
40710: LD_VAR 0 3
40714: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40715: LD_INT 0
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
// result := false ;
40728: LD_ADDR_VAR 0 8
40732: PUSH
40733: LD_INT 0
40735: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40736: LD_VAR 0 5
40740: NOT
40741: PUSH
40742: LD_VAR 0 1
40746: NOT
40747: OR
40748: PUSH
40749: LD_VAR 0 2
40753: NOT
40754: OR
40755: PUSH
40756: LD_VAR 0 3
40760: NOT
40761: OR
40762: IFFALSE 40766
// exit ;
40764: GO 41580
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40766: LD_ADDR_VAR 0 14
40770: PUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: LD_VAR 0 2
40780: PPUSH
40781: LD_VAR 0 3
40785: PPUSH
40786: LD_VAR 0 4
40790: PPUSH
40791: LD_VAR 0 5
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: CALL_OW 248
40804: PPUSH
40805: LD_INT 0
40807: PPUSH
40808: CALL 42817 0 6
40812: ST_TO_ADDR
// if not hexes then
40813: LD_VAR 0 14
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 41580
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40822: LD_ADDR_VAR 0 17
40826: PUSH
40827: LD_VAR 0 5
40831: PPUSH
40832: LD_INT 22
40834: PUSH
40835: LD_VAR 0 13
40839: PPUSH
40840: CALL_OW 255
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 30
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PPUSH
40881: CALL_OW 72
40885: ST_TO_ADDR
// for i = 1 to hexes do
40886: LD_ADDR_VAR 0 9
40890: PUSH
40891: DOUBLE
40892: LD_INT 1
40894: DEC
40895: ST_TO_ADDR
40896: LD_VAR 0 14
40900: PUSH
40901: FOR_TO
40902: IFFALSE 41578
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40904: LD_ADDR_VAR 0 13
40908: PUSH
40909: LD_VAR 0 14
40913: PUSH
40914: LD_VAR 0 9
40918: ARRAY
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: PPUSH
40924: LD_VAR 0 14
40928: PUSH
40929: LD_VAR 0 9
40933: ARRAY
40934: PUSH
40935: LD_INT 2
40937: ARRAY
40938: PPUSH
40939: CALL_OW 428
40943: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40944: LD_VAR 0 14
40948: PUSH
40949: LD_VAR 0 9
40953: ARRAY
40954: PUSH
40955: LD_INT 1
40957: ARRAY
40958: PPUSH
40959: LD_VAR 0 14
40963: PUSH
40964: LD_VAR 0 9
40968: ARRAY
40969: PUSH
40970: LD_INT 2
40972: ARRAY
40973: PPUSH
40974: CALL_OW 351
40978: PUSH
40979: LD_VAR 0 14
40983: PUSH
40984: LD_VAR 0 9
40988: ARRAY
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PPUSH
40994: LD_VAR 0 14
40998: PUSH
40999: LD_VAR 0 9
41003: ARRAY
41004: PUSH
41005: LD_INT 2
41007: ARRAY
41008: PPUSH
41009: CALL_OW 488
41013: NOT
41014: OR
41015: PUSH
41016: LD_VAR 0 13
41020: PPUSH
41021: CALL_OW 247
41025: PUSH
41026: LD_INT 3
41028: EQUAL
41029: OR
41030: IFFALSE 41036
// exit ;
41032: POP
41033: POP
41034: GO 41580
// if not tmp then
41036: LD_VAR 0 13
41040: NOT
41041: IFFALSE 41045
// continue ;
41043: GO 40901
// result := true ;
41045: LD_ADDR_VAR 0 8
41049: PUSH
41050: LD_INT 1
41052: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41053: LD_VAR 0 6
41057: PUSH
41058: LD_VAR 0 13
41062: PPUSH
41063: CALL_OW 247
41067: PUSH
41068: LD_INT 2
41070: EQUAL
41071: AND
41072: PUSH
41073: LD_VAR 0 13
41077: PPUSH
41078: CALL_OW 263
41082: PUSH
41083: LD_INT 1
41085: EQUAL
41086: AND
41087: IFFALSE 41251
// begin if IsDrivenBy ( tmp ) then
41089: LD_VAR 0 13
41093: PPUSH
41094: CALL_OW 311
41098: IFFALSE 41102
// continue ;
41100: GO 40901
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41102: LD_VAR 0 6
41106: PPUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 60
41112: PUSH
41113: EMPTY
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: PUSH
41123: LD_INT 55
41125: PUSH
41126: EMPTY
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 72
41141: IFFALSE 41249
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41143: LD_ADDR_VAR 0 18
41147: PUSH
41148: LD_VAR 0 6
41152: PPUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 60
41158: PUSH
41159: EMPTY
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: LD_INT 55
41171: PUSH
41172: EMPTY
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PPUSH
41183: CALL_OW 72
41187: PUSH
41188: LD_INT 1
41190: ARRAY
41191: ST_TO_ADDR
// if IsInUnit ( driver ) then
41192: LD_VAR 0 18
41196: PPUSH
41197: CALL_OW 310
41201: IFFALSE 41212
// ComExit ( driver ) ;
41203: LD_VAR 0 18
41207: PPUSH
41208: CALL 66001 0 1
// AddComEnterUnit ( driver , tmp ) ;
41212: LD_VAR 0 18
41216: PPUSH
41217: LD_VAR 0 13
41221: PPUSH
41222: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41226: LD_VAR 0 18
41230: PPUSH
41231: LD_VAR 0 7
41235: PPUSH
41236: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41240: LD_VAR 0 18
41244: PPUSH
41245: CALL_OW 181
// end ; continue ;
41249: GO 40901
// end ; if not cleaners or not tmp in cleaners then
41251: LD_VAR 0 6
41255: NOT
41256: PUSH
41257: LD_VAR 0 13
41261: PUSH
41262: LD_VAR 0 6
41266: IN
41267: NOT
41268: OR
41269: IFFALSE 41576
// begin if dep then
41271: LD_VAR 0 17
41275: IFFALSE 41411
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41277: LD_ADDR_VAR 0 16
41281: PUSH
41282: LD_VAR 0 17
41286: PUSH
41287: LD_INT 1
41289: ARRAY
41290: PPUSH
41291: CALL_OW 250
41295: PPUSH
41296: LD_VAR 0 17
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PPUSH
41305: CALL_OW 254
41309: PPUSH
41310: LD_INT 5
41312: PPUSH
41313: CALL_OW 272
41317: PUSH
41318: LD_VAR 0 17
41322: PUSH
41323: LD_INT 1
41325: ARRAY
41326: PPUSH
41327: CALL_OW 251
41331: PPUSH
41332: LD_VAR 0 17
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: PPUSH
41341: CALL_OW 254
41345: PPUSH
41346: LD_INT 5
41348: PPUSH
41349: CALL_OW 273
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41358: LD_VAR 0 16
41362: PUSH
41363: LD_INT 1
41365: ARRAY
41366: PPUSH
41367: LD_VAR 0 16
41371: PUSH
41372: LD_INT 2
41374: ARRAY
41375: PPUSH
41376: CALL_OW 488
41380: IFFALSE 41411
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41382: LD_VAR 0 13
41386: PPUSH
41387: LD_VAR 0 16
41391: PUSH
41392: LD_INT 1
41394: ARRAY
41395: PPUSH
41396: LD_VAR 0 16
41400: PUSH
41401: LD_INT 2
41403: ARRAY
41404: PPUSH
41405: CALL_OW 111
// continue ;
41409: GO 40901
// end ; end ; r := GetDir ( tmp ) ;
41411: LD_ADDR_VAR 0 15
41415: PUSH
41416: LD_VAR 0 13
41420: PPUSH
41421: CALL_OW 254
41425: ST_TO_ADDR
// if r = 5 then
41426: LD_VAR 0 15
41430: PUSH
41431: LD_INT 5
41433: EQUAL
41434: IFFALSE 41444
// r := 0 ;
41436: LD_ADDR_VAR 0 15
41440: PUSH
41441: LD_INT 0
41443: ST_TO_ADDR
// for j = r to 5 do
41444: LD_ADDR_VAR 0 10
41448: PUSH
41449: DOUBLE
41450: LD_VAR 0 15
41454: DEC
41455: ST_TO_ADDR
41456: LD_INT 5
41458: PUSH
41459: FOR_TO
41460: IFFALSE 41574
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41462: LD_ADDR_VAR 0 11
41466: PUSH
41467: LD_VAR 0 13
41471: PPUSH
41472: CALL_OW 250
41476: PPUSH
41477: LD_VAR 0 10
41481: PPUSH
41482: LD_INT 2
41484: PPUSH
41485: CALL_OW 272
41489: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41490: LD_ADDR_VAR 0 12
41494: PUSH
41495: LD_VAR 0 13
41499: PPUSH
41500: CALL_OW 251
41504: PPUSH
41505: LD_VAR 0 10
41509: PPUSH
41510: LD_INT 2
41512: PPUSH
41513: CALL_OW 273
41517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41518: LD_VAR 0 11
41522: PPUSH
41523: LD_VAR 0 12
41527: PPUSH
41528: CALL_OW 488
41532: PUSH
41533: LD_VAR 0 11
41537: PPUSH
41538: LD_VAR 0 12
41542: PPUSH
41543: CALL_OW 428
41547: NOT
41548: AND
41549: IFFALSE 41572
// begin ComMoveXY ( tmp , _x , _y ) ;
41551: LD_VAR 0 13
41555: PPUSH
41556: LD_VAR 0 11
41560: PPUSH
41561: LD_VAR 0 12
41565: PPUSH
41566: CALL_OW 111
// break ;
41570: GO 41574
// end ; end ;
41572: GO 41459
41574: POP
41575: POP
// end ; end ;
41576: GO 40901
41578: POP
41579: POP
// end ;
41580: LD_VAR 0 8
41584: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41585: LD_INT 0
41587: PPUSH
// result := true ;
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 1
41595: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41596: LD_VAR 0 2
41600: PUSH
41601: LD_INT 24
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41615
41607: LD_INT 33
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41615
41613: GO 41640
41615: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41616: LD_ADDR_VAR 0 3
41620: PUSH
41621: LD_INT 32
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 321
41633: PUSH
41634: LD_INT 2
41636: EQUAL
41637: ST_TO_ADDR
41638: GO 41960
41640: LD_INT 20
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41648
41646: GO 41673
41648: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_INT 6
41656: PPUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 321
41666: PUSH
41667: LD_INT 2
41669: EQUAL
41670: ST_TO_ADDR
41671: GO 41960
41673: LD_INT 22
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41687
41679: LD_INT 36
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41687
41685: GO 41712
41687: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41688: LD_ADDR_VAR 0 3
41692: PUSH
41693: LD_INT 15
41695: PPUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 321
41705: PUSH
41706: LD_INT 2
41708: EQUAL
41709: ST_TO_ADDR
41710: GO 41960
41712: LD_INT 30
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41745
41720: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 20
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 321
41738: PUSH
41739: LD_INT 2
41741: EQUAL
41742: ST_TO_ADDR
41743: GO 41960
41745: LD_INT 28
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41759
41751: LD_INT 21
41753: DOUBLE
41754: EQUAL
41755: IFTRUE 41759
41757: GO 41784
41759: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41760: LD_ADDR_VAR 0 3
41764: PUSH
41765: LD_INT 21
41767: PPUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: CALL_OW 321
41777: PUSH
41778: LD_INT 2
41780: EQUAL
41781: ST_TO_ADDR
41782: GO 41960
41784: LD_INT 16
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41792
41790: GO 41819
41792: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41793: LD_ADDR_VAR 0 3
41797: PUSH
41798: LD_EXP 118
41802: PPUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 321
41812: PUSH
41813: LD_INT 2
41815: EQUAL
41816: ST_TO_ADDR
41817: GO 41960
41819: LD_INT 19
41821: DOUBLE
41822: EQUAL
41823: IFTRUE 41833
41825: LD_INT 23
41827: DOUBLE
41828: EQUAL
41829: IFTRUE 41833
41831: GO 41860
41833: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_EXP 117
41843: PPUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 321
41853: PUSH
41854: LD_INT 2
41856: EQUAL
41857: ST_TO_ADDR
41858: GO 41960
41860: LD_INT 17
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41893
41868: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 39
41876: PPUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 321
41886: PUSH
41887: LD_INT 2
41889: EQUAL
41890: ST_TO_ADDR
41891: GO 41960
41893: LD_INT 18
41895: DOUBLE
41896: EQUAL
41897: IFTRUE 41901
41899: GO 41926
41901: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41902: LD_ADDR_VAR 0 3
41906: PUSH
41907: LD_INT 40
41909: PPUSH
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 321
41919: PUSH
41920: LD_INT 2
41922: EQUAL
41923: ST_TO_ADDR
41924: GO 41960
41926: LD_INT 27
41928: DOUBLE
41929: EQUAL
41930: IFTRUE 41934
41932: GO 41959
41934: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_INT 35
41942: PPUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: CALL_OW 321
41952: PUSH
41953: LD_INT 2
41955: EQUAL
41956: ST_TO_ADDR
41957: GO 41960
41959: POP
// end ;
41960: LD_VAR 0 3
41964: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41965: LD_INT 0
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
// result := false ;
41978: LD_ADDR_VAR 0 6
41982: PUSH
41983: LD_INT 0
41985: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41986: LD_VAR 0 1
41990: NOT
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 266
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: IN
42012: NOT
42013: OR
42014: PUSH
42015: LD_VAR 0 2
42019: NOT
42020: OR
42021: PUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: IN
42053: NOT
42054: OR
42055: PUSH
42056: LD_VAR 0 3
42060: PPUSH
42061: LD_VAR 0 4
42065: PPUSH
42066: CALL_OW 488
42070: NOT
42071: OR
42072: IFFALSE 42076
// exit ;
42074: GO 42812
// side := GetSide ( depot ) ;
42076: LD_ADDR_VAR 0 9
42080: PUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 255
42090: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42091: LD_VAR 0 9
42095: PPUSH
42096: LD_VAR 0 2
42100: PPUSH
42101: CALL 41585 0 2
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42812
// pom := GetBase ( depot ) ;
42110: LD_ADDR_VAR 0 10
42114: PUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: CALL_OW 274
42124: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42125: LD_ADDR_VAR 0 11
42129: PUSH
42130: LD_VAR 0 2
42134: PPUSH
42135: LD_VAR 0 1
42139: PPUSH
42140: CALL_OW 248
42144: PPUSH
42145: CALL_OW 450
42149: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42150: LD_VAR 0 10
42154: PPUSH
42155: LD_INT 1
42157: PPUSH
42158: CALL_OW 275
42162: PUSH
42163: LD_VAR 0 11
42167: PUSH
42168: LD_INT 1
42170: ARRAY
42171: GREATEREQUAL
42172: PUSH
42173: LD_VAR 0 10
42177: PPUSH
42178: LD_INT 2
42180: PPUSH
42181: CALL_OW 275
42185: PUSH
42186: LD_VAR 0 11
42190: PUSH
42191: LD_INT 2
42193: ARRAY
42194: GREATEREQUAL
42195: AND
42196: PUSH
42197: LD_VAR 0 10
42201: PPUSH
42202: LD_INT 3
42204: PPUSH
42205: CALL_OW 275
42209: PUSH
42210: LD_VAR 0 11
42214: PUSH
42215: LD_INT 3
42217: ARRAY
42218: GREATEREQUAL
42219: AND
42220: NOT
42221: IFFALSE 42225
// exit ;
42223: GO 42812
// if GetBType ( depot ) = b_depot then
42225: LD_VAR 0 1
42229: PPUSH
42230: CALL_OW 266
42234: PUSH
42235: LD_INT 0
42237: EQUAL
42238: IFFALSE 42250
// dist := 28 else
42240: LD_ADDR_VAR 0 14
42244: PUSH
42245: LD_INT 28
42247: ST_TO_ADDR
42248: GO 42258
// dist := 36 ;
42250: LD_ADDR_VAR 0 14
42254: PUSH
42255: LD_INT 36
42257: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42258: LD_VAR 0 1
42262: PPUSH
42263: LD_VAR 0 3
42267: PPUSH
42268: LD_VAR 0 4
42272: PPUSH
42273: CALL_OW 297
42277: PUSH
42278: LD_VAR 0 14
42282: GREATER
42283: IFFALSE 42287
// exit ;
42285: GO 42812
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42287: LD_ADDR_VAR 0 12
42291: PUSH
42292: LD_VAR 0 2
42296: PPUSH
42297: LD_VAR 0 3
42301: PPUSH
42302: LD_VAR 0 4
42306: PPUSH
42307: LD_VAR 0 5
42311: PPUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 248
42321: PPUSH
42322: LD_INT 0
42324: PPUSH
42325: CALL 42817 0 6
42329: ST_TO_ADDR
// if not hexes then
42330: LD_VAR 0 12
42334: NOT
42335: IFFALSE 42339
// exit ;
42337: GO 42812
// hex := GetHexInfo ( x , y ) ;
42339: LD_ADDR_VAR 0 15
42343: PUSH
42344: LD_VAR 0 3
42348: PPUSH
42349: LD_VAR 0 4
42353: PPUSH
42354: CALL_OW 546
42358: ST_TO_ADDR
// if hex [ 1 ] then
42359: LD_VAR 0 15
42363: PUSH
42364: LD_INT 1
42366: ARRAY
42367: IFFALSE 42371
// exit ;
42369: GO 42812
// height := hex [ 2 ] ;
42371: LD_ADDR_VAR 0 13
42375: PUSH
42376: LD_VAR 0 15
42380: PUSH
42381: LD_INT 2
42383: ARRAY
42384: ST_TO_ADDR
// for i = 1 to hexes do
42385: LD_ADDR_VAR 0 7
42389: PUSH
42390: DOUBLE
42391: LD_INT 1
42393: DEC
42394: ST_TO_ADDR
42395: LD_VAR 0 12
42399: PUSH
42400: FOR_TO
42401: IFFALSE 42731
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42403: LD_VAR 0 12
42407: PUSH
42408: LD_VAR 0 7
42412: ARRAY
42413: PUSH
42414: LD_INT 1
42416: ARRAY
42417: PPUSH
42418: LD_VAR 0 12
42422: PUSH
42423: LD_VAR 0 7
42427: ARRAY
42428: PUSH
42429: LD_INT 2
42431: ARRAY
42432: PPUSH
42433: CALL_OW 488
42437: NOT
42438: PUSH
42439: LD_VAR 0 12
42443: PUSH
42444: LD_VAR 0 7
42448: ARRAY
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: PPUSH
42454: LD_VAR 0 12
42458: PUSH
42459: LD_VAR 0 7
42463: ARRAY
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: PPUSH
42469: CALL_OW 428
42473: PUSH
42474: LD_INT 0
42476: GREATER
42477: OR
42478: PUSH
42479: LD_VAR 0 12
42483: PUSH
42484: LD_VAR 0 7
42488: ARRAY
42489: PUSH
42490: LD_INT 1
42492: ARRAY
42493: PPUSH
42494: LD_VAR 0 12
42498: PUSH
42499: LD_VAR 0 7
42503: ARRAY
42504: PUSH
42505: LD_INT 2
42507: ARRAY
42508: PPUSH
42509: CALL_OW 351
42513: OR
42514: IFFALSE 42520
// exit ;
42516: POP
42517: POP
42518: GO 42812
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42520: LD_ADDR_VAR 0 8
42524: PUSH
42525: LD_VAR 0 12
42529: PUSH
42530: LD_VAR 0 7
42534: ARRAY
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PPUSH
42540: LD_VAR 0 12
42544: PUSH
42545: LD_VAR 0 7
42549: ARRAY
42550: PUSH
42551: LD_INT 2
42553: ARRAY
42554: PPUSH
42555: CALL_OW 546
42559: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42560: LD_VAR 0 8
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PUSH
42569: LD_VAR 0 8
42573: PUSH
42574: LD_INT 2
42576: ARRAY
42577: PUSH
42578: LD_VAR 0 13
42582: PUSH
42583: LD_INT 2
42585: PLUS
42586: GREATER
42587: OR
42588: PUSH
42589: LD_VAR 0 8
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PUSH
42598: LD_VAR 0 13
42602: PUSH
42603: LD_INT 2
42605: MINUS
42606: LESS
42607: OR
42608: PUSH
42609: LD_VAR 0 8
42613: PUSH
42614: LD_INT 3
42616: ARRAY
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 8
42623: PUSH
42624: LD_INT 9
42626: PUSH
42627: LD_INT 10
42629: PUSH
42630: LD_INT 11
42632: PUSH
42633: LD_INT 12
42635: PUSH
42636: LD_INT 13
42638: PUSH
42639: LD_INT 16
42641: PUSH
42642: LD_INT 17
42644: PUSH
42645: LD_INT 18
42647: PUSH
42648: LD_INT 19
42650: PUSH
42651: LD_INT 20
42653: PUSH
42654: LD_INT 21
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: IN
42672: NOT
42673: OR
42674: PUSH
42675: LD_VAR 0 8
42679: PUSH
42680: LD_INT 5
42682: ARRAY
42683: NOT
42684: OR
42685: PUSH
42686: LD_VAR 0 8
42690: PUSH
42691: LD_INT 6
42693: ARRAY
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 7
42703: PUSH
42704: LD_INT 9
42706: PUSH
42707: LD_INT 10
42709: PUSH
42710: LD_INT 11
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: IN
42721: NOT
42722: OR
42723: IFFALSE 42729
// exit ;
42725: POP
42726: POP
42727: GO 42812
// end ;
42729: GO 42400
42731: POP
42732: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42733: LD_VAR 0 9
42737: PPUSH
42738: LD_VAR 0 3
42742: PPUSH
42743: LD_VAR 0 4
42747: PPUSH
42748: LD_INT 20
42750: PPUSH
42751: CALL 34758 0 4
42755: PUSH
42756: LD_INT 4
42758: ARRAY
42759: IFFALSE 42763
// exit ;
42761: GO 42812
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42763: LD_VAR 0 2
42767: PUSH
42768: LD_INT 29
42770: PUSH
42771: LD_INT 30
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: IN
42778: PUSH
42779: LD_VAR 0 3
42783: PPUSH
42784: LD_VAR 0 4
42788: PPUSH
42789: LD_VAR 0 9
42793: PPUSH
42794: CALL_OW 440
42798: NOT
42799: AND
42800: IFFALSE 42804
// exit ;
42802: GO 42812
// result := true ;
42804: LD_ADDR_VAR 0 6
42808: PUSH
42809: LD_INT 1
42811: ST_TO_ADDR
// end ;
42812: LD_VAR 0 6
42816: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42817: LD_INT 0
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
// result = [ ] ;
42877: LD_ADDR_VAR 0 7
42881: PUSH
42882: EMPTY
42883: ST_TO_ADDR
// temp_list = [ ] ;
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: EMPTY
42890: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42891: LD_VAR 0 4
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 4
42910: PUSH
42911: LD_INT 5
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: IN
42922: NOT
42923: PUSH
42924: LD_VAR 0 1
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: IN
42939: PUSH
42940: LD_VAR 0 5
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 3
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: IN
42959: NOT
42960: AND
42961: OR
42962: IFFALSE 42966
// exit ;
42964: GO 61357
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42966: LD_VAR 0 1
42970: PUSH
42971: LD_INT 6
42973: PUSH
42974: LD_INT 7
42976: PUSH
42977: LD_INT 8
42979: PUSH
42980: LD_INT 13
42982: PUSH
42983: LD_INT 12
42985: PUSH
42986: LD_INT 15
42988: PUSH
42989: LD_INT 11
42991: PUSH
42992: LD_INT 14
42994: PUSH
42995: LD_INT 10
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: IN
43009: IFFALSE 43019
// btype = b_lab ;
43011: LD_ADDR_VAR 0 1
43015: PUSH
43016: LD_INT 6
43018: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43019: LD_VAR 0 6
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: IN
43038: NOT
43039: PUSH
43040: LD_VAR 0 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 6
43059: PUSH
43060: LD_INT 36
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: LD_INT 5
43068: PUSH
43069: LD_INT 31
43071: PUSH
43072: LD_INT 32
43074: PUSH
43075: LD_INT 33
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: IN
43091: NOT
43092: PUSH
43093: LD_VAR 0 6
43097: PUSH
43098: LD_INT 1
43100: EQUAL
43101: AND
43102: OR
43103: PUSH
43104: LD_VAR 0 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: IN
43119: NOT
43120: PUSH
43121: LD_VAR 0 6
43125: PUSH
43126: LD_INT 2
43128: EQUAL
43129: AND
43130: OR
43131: IFFALSE 43141
// mode = 0 ;
43133: LD_ADDR_VAR 0 6
43137: PUSH
43138: LD_INT 0
43140: ST_TO_ADDR
// case mode of 0 :
43141: LD_VAR 0 6
43145: PUSH
43146: LD_INT 0
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 54607
43154: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43155: LD_ADDR_VAR 0 11
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 3
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43348: LD_ADDR_VAR 0 12
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43544: LD_ADDR_VAR 0 13
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: LD_INT 3
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: NEG
43716: PUSH
43717: LD_INT 3
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43743: LD_ADDR_VAR 0 14
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 3
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43939: LD_ADDR_VAR 0 15
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44132: LD_ADDR_VAR 0 16
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44325: LD_ADDR_VAR 0 17
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44555: LD_ADDR_VAR 0 18
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44785: LD_ADDR_VAR 0 19
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45015: LD_ADDR_VAR 0 20
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45245: LD_ADDR_VAR 0 21
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45475: LD_ADDR_VAR 0 22
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45705: LD_ADDR_VAR 0 23
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45985: LD_ADDR_VAR 0 24
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46261: LD_ADDR_VAR 0 25
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46535: LD_ADDR_VAR 0 26
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46811: LD_ADDR_VAR 0 27
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47091: LD_ADDR_VAR 0 28
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47373: LD_ADDR_VAR 0 29
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 3
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47652: LD_ADDR_VAR 0 30
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47930: LD_ADDR_VAR 0 31
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48208: LD_ADDR_VAR 0 32
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48486: LD_ADDR_VAR 0 33
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 3
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48765: LD_ADDR_VAR 0 34
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49045: LD_ADDR_VAR 0 35
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49157: LD_ADDR_VAR 0 36
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49269: LD_ADDR_VAR 0 37
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49381: LD_ADDR_VAR 0 38
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49493: LD_ADDR_VAR 0 39
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49605: LD_ADDR_VAR 0 40
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49717: LD_ADDR_VAR 0 41
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50067: LD_ADDR_VAR 0 42
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 3
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50417: LD_ADDR_VAR 0 43
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 3
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50765: LD_ADDR_VAR 0 44
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51115: LD_ADDR_VAR 0 45
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51465: LD_ADDR_VAR 0 46
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 3
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51813: LD_ADDR_VAR 0 47
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51964: LD_ADDR_VAR 0 48
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52111: LD_ADDR_VAR 0 49
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52255: LD_ADDR_VAR 0 50
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52399: LD_ADDR_VAR 0 51
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52546: LD_ADDR_VAR 0 52
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52697: LD_ADDR_VAR 0 53
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52927: LD_ADDR_VAR 0 54
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53157: LD_ADDR_VAR 0 55
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53387: LD_ADDR_VAR 0 56
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53617: LD_ADDR_VAR 0 57
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53847: LD_ADDR_VAR 0 58
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54077: LD_ADDR_VAR 0 59
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54165: LD_ADDR_VAR 0 60
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54253: LD_ADDR_VAR 0 61
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54341: LD_ADDR_VAR 0 62
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54429: LD_ADDR_VAR 0 63
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54517: LD_ADDR_VAR 0 64
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// end ; 1 :
54605: GO 60502
54607: LD_INT 1
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54615
54613: GO 57238
54615: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54616: LD_ADDR_VAR 0 11
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54660: LD_ADDR_VAR 0 12
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54701: LD_ADDR_VAR 0 13
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54741: LD_ADDR_VAR 0 14
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54782: LD_ADDR_VAR 0 15
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54826: LD_ADDR_VAR 0 16
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54872: LD_ADDR_VAR 0 17
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54916: LD_ADDR_VAR 0 18
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54957: LD_ADDR_VAR 0 19
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54997: LD_ADDR_VAR 0 20
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55038: LD_ADDR_VAR 0 21
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 3
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55082: LD_ADDR_VAR 0 22
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55128: LD_ADDR_VAR 0 23
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55172: LD_ADDR_VAR 0 24
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55213: LD_ADDR_VAR 0 25
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 4
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: LD_INT 4
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: LIST
55252: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55253: LD_ADDR_VAR 0 26
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55294: LD_ADDR_VAR 0 27
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55338: LD_ADDR_VAR 0 28
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: LD_INT 4
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 4
55369: NEG
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55384: LD_ADDR_VAR 0 29
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 4
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 4
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 5
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 6
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 6
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 5
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55539: LD_ADDR_VAR 0 30
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 4
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 5
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 5
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 6
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 6
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55682: LD_ADDR_VAR 0 31
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 4
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: LD_INT 4
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: LD_INT 4
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: LD_INT 4
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 5
55759: PUSH
55760: LD_INT 5
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: PUSH
55770: LD_INT 5
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 6
55779: PUSH
55780: LD_INT 5
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 6
55789: PUSH
55790: LD_INT 6
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: LD_INT 6
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55821: LD_ADDR_VAR 0 32
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 5
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 5
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 6
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 6
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 5
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55964: LD_ADDR_VAR 0 33
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 4
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 5
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 5
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 5
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 6
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 6
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56119: LD_ADDR_VAR 0 34
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: LD_INT 4
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: NEG
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: LD_INT 5
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 5
56210: NEG
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 5
56222: NEG
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 5
56234: NEG
56235: PUSH
56236: LD_INT 6
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 6
56246: NEG
56247: PUSH
56248: LD_INT 5
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 6
56258: NEG
56259: PUSH
56260: LD_INT 6
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56282: LD_ADDR_VAR 0 41
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56326: LD_ADDR_VAR 0 42
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56367: LD_ADDR_VAR 0 43
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56407: LD_ADDR_VAR 0 44
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56448: LD_ADDR_VAR 0 45
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56492: LD_ADDR_VAR 0 46
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56538: LD_ADDR_VAR 0 47
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56571: LD_ADDR_VAR 0 48
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56602: LD_ADDR_VAR 0 49
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56631: LD_ADDR_VAR 0 50
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56660: LD_ADDR_VAR 0 51
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56691: LD_ADDR_VAR 0 52
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56724: LD_ADDR_VAR 0 53
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56768: LD_ADDR_VAR 0 54
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56809: LD_ADDR_VAR 0 55
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56849: LD_ADDR_VAR 0 56
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56890: LD_ADDR_VAR 0 57
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56934: LD_ADDR_VAR 0 58
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56980: LD_ADDR_VAR 0 59
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57024: LD_ADDR_VAR 0 60
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57065: LD_ADDR_VAR 0 61
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57105: LD_ADDR_VAR 0 62
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57146: LD_ADDR_VAR 0 63
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57190: LD_ADDR_VAR 0 64
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// end ; 2 :
57236: GO 60502
57238: LD_INT 2
57240: DOUBLE
57241: EQUAL
57242: IFTRUE 57246
57244: GO 60501
57246: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57247: LD_ADDR_VAR 0 29
57251: PUSH
57252: LD_INT 4
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 5
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 5
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 4
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 4
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 5
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 5
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 5
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 4
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 4
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: NEG
57633: PUSH
57634: LD_INT 4
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 4
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 5
57704: NEG
57705: PUSH
57706: LD_INT 5
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 5
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 5
57728: NEG
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57785: LD_ADDR_VAR 0 30
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 4
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 5
57812: PUSH
57813: LD_INT 4
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: LD_INT 5
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 5
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 4
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 5
58031: NEG
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 5
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 5
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 4
58149: NEG
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: LD_INT 4
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 4
58173: NEG
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 5
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 5
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 5
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58332: LD_ADDR_VAR 0 31
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 4
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 4
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 4
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: LD_INT 4
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 4
58546: NEG
58547: PUSH
58548: LD_INT 5
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 4
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 5
58594: NEG
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 5
58606: NEG
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: LD_INT 5
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: NEG
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 5
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58882: LD_ADDR_VAR 0 32
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 5
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 5
58968: NEG
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 4
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 4
59051: NEG
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: NEG
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 4
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 5
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 4
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 4
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 5
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 5
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 5
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: LD_INT 5
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: LD_INT 4
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 5
59364: PUSH
59365: LD_INT 3
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59429: LD_ADDR_VAR 0 33
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 4
59448: NEG
59449: PUSH
59450: LD_INT 5
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 5
59508: NEG
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: LD_INT 5
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 5
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 5
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 3
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 4
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 4
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 4
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 5
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 5
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59967: LD_ADDR_VAR 0 34
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 4
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 4
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 5
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 4
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 4
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 5
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 5
60199: PUSH
60200: LD_INT 5
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 5
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 4
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 5
60408: NEG
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 5
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// end ; end ;
60499: GO 60502
60501: POP
// case btype of b_depot , b_warehouse :
60502: LD_VAR 0 1
60506: PUSH
60507: LD_INT 0
60509: DOUBLE
60510: EQUAL
60511: IFTRUE 60521
60513: LD_INT 1
60515: DOUBLE
60516: EQUAL
60517: IFTRUE 60521
60519: GO 60722
60521: POP
// case nation of nation_american :
60522: LD_VAR 0 5
60526: PUSH
60527: LD_INT 1
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60535
60533: GO 60591
60535: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60536: LD_ADDR_VAR 0 9
60540: PUSH
60541: LD_VAR 0 11
60545: PUSH
60546: LD_VAR 0 12
60550: PUSH
60551: LD_VAR 0 13
60555: PUSH
60556: LD_VAR 0 14
60560: PUSH
60561: LD_VAR 0 15
60565: PUSH
60566: LD_VAR 0 16
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: LD_VAR 0 4
60583: PUSH
60584: LD_INT 1
60586: PLUS
60587: ARRAY
60588: ST_TO_ADDR
60589: GO 60720
60591: LD_INT 2
60593: DOUBLE
60594: EQUAL
60595: IFTRUE 60599
60597: GO 60655
60599: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60600: LD_ADDR_VAR 0 9
60604: PUSH
60605: LD_VAR 0 17
60609: PUSH
60610: LD_VAR 0 18
60614: PUSH
60615: LD_VAR 0 19
60619: PUSH
60620: LD_VAR 0 20
60624: PUSH
60625: LD_VAR 0 21
60629: PUSH
60630: LD_VAR 0 22
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: PUSH
60643: LD_VAR 0 4
60647: PUSH
60648: LD_INT 1
60650: PLUS
60651: ARRAY
60652: ST_TO_ADDR
60653: GO 60720
60655: LD_INT 3
60657: DOUBLE
60658: EQUAL
60659: IFTRUE 60663
60661: GO 60719
60663: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60664: LD_ADDR_VAR 0 9
60668: PUSH
60669: LD_VAR 0 23
60673: PUSH
60674: LD_VAR 0 24
60678: PUSH
60679: LD_VAR 0 25
60683: PUSH
60684: LD_VAR 0 26
60688: PUSH
60689: LD_VAR 0 27
60693: PUSH
60694: LD_VAR 0 28
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: PUSH
60707: LD_VAR 0 4
60711: PUSH
60712: LD_INT 1
60714: PLUS
60715: ARRAY
60716: ST_TO_ADDR
60717: GO 60720
60719: POP
60720: GO 61275
60722: LD_INT 2
60724: DOUBLE
60725: EQUAL
60726: IFTRUE 60736
60728: LD_INT 3
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60736
60734: GO 60792
60736: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60737: LD_ADDR_VAR 0 9
60741: PUSH
60742: LD_VAR 0 29
60746: PUSH
60747: LD_VAR 0 30
60751: PUSH
60752: LD_VAR 0 31
60756: PUSH
60757: LD_VAR 0 32
60761: PUSH
60762: LD_VAR 0 33
60766: PUSH
60767: LD_VAR 0 34
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: PUSH
60780: LD_VAR 0 4
60784: PUSH
60785: LD_INT 1
60787: PLUS
60788: ARRAY
60789: ST_TO_ADDR
60790: GO 61275
60792: LD_INT 16
60794: DOUBLE
60795: EQUAL
60796: IFTRUE 60854
60798: LD_INT 17
60800: DOUBLE
60801: EQUAL
60802: IFTRUE 60854
60804: LD_INT 18
60806: DOUBLE
60807: EQUAL
60808: IFTRUE 60854
60810: LD_INT 19
60812: DOUBLE
60813: EQUAL
60814: IFTRUE 60854
60816: LD_INT 22
60818: DOUBLE
60819: EQUAL
60820: IFTRUE 60854
60822: LD_INT 20
60824: DOUBLE
60825: EQUAL
60826: IFTRUE 60854
60828: LD_INT 21
60830: DOUBLE
60831: EQUAL
60832: IFTRUE 60854
60834: LD_INT 23
60836: DOUBLE
60837: EQUAL
60838: IFTRUE 60854
60840: LD_INT 24
60842: DOUBLE
60843: EQUAL
60844: IFTRUE 60854
60846: LD_INT 25
60848: DOUBLE
60849: EQUAL
60850: IFTRUE 60854
60852: GO 60910
60854: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60855: LD_ADDR_VAR 0 9
60859: PUSH
60860: LD_VAR 0 35
60864: PUSH
60865: LD_VAR 0 36
60869: PUSH
60870: LD_VAR 0 37
60874: PUSH
60875: LD_VAR 0 38
60879: PUSH
60880: LD_VAR 0 39
60884: PUSH
60885: LD_VAR 0 40
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: PUSH
60898: LD_VAR 0 4
60902: PUSH
60903: LD_INT 1
60905: PLUS
60906: ARRAY
60907: ST_TO_ADDR
60908: GO 61275
60910: LD_INT 6
60912: DOUBLE
60913: EQUAL
60914: IFTRUE 60966
60916: LD_INT 7
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60966
60922: LD_INT 8
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60966
60928: LD_INT 13
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60966
60934: LD_INT 12
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60966
60940: LD_INT 15
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60966
60946: LD_INT 11
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60966
60952: LD_INT 14
60954: DOUBLE
60955: EQUAL
60956: IFTRUE 60966
60958: LD_INT 10
60960: DOUBLE
60961: EQUAL
60962: IFTRUE 60966
60964: GO 61022
60966: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60967: LD_ADDR_VAR 0 9
60971: PUSH
60972: LD_VAR 0 41
60976: PUSH
60977: LD_VAR 0 42
60981: PUSH
60982: LD_VAR 0 43
60986: PUSH
60987: LD_VAR 0 44
60991: PUSH
60992: LD_VAR 0 45
60996: PUSH
60997: LD_VAR 0 46
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: PUSH
61010: LD_VAR 0 4
61014: PUSH
61015: LD_INT 1
61017: PLUS
61018: ARRAY
61019: ST_TO_ADDR
61020: GO 61275
61022: LD_INT 36
61024: DOUBLE
61025: EQUAL
61026: IFTRUE 61030
61028: GO 61086
61030: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61031: LD_ADDR_VAR 0 9
61035: PUSH
61036: LD_VAR 0 47
61040: PUSH
61041: LD_VAR 0 48
61045: PUSH
61046: LD_VAR 0 49
61050: PUSH
61051: LD_VAR 0 50
61055: PUSH
61056: LD_VAR 0 51
61060: PUSH
61061: LD_VAR 0 52
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: PUSH
61074: LD_VAR 0 4
61078: PUSH
61079: LD_INT 1
61081: PLUS
61082: ARRAY
61083: ST_TO_ADDR
61084: GO 61275
61086: LD_INT 4
61088: DOUBLE
61089: EQUAL
61090: IFTRUE 61112
61092: LD_INT 5
61094: DOUBLE
61095: EQUAL
61096: IFTRUE 61112
61098: LD_INT 34
61100: DOUBLE
61101: EQUAL
61102: IFTRUE 61112
61104: LD_INT 37
61106: DOUBLE
61107: EQUAL
61108: IFTRUE 61112
61110: GO 61168
61112: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61113: LD_ADDR_VAR 0 9
61117: PUSH
61118: LD_VAR 0 53
61122: PUSH
61123: LD_VAR 0 54
61127: PUSH
61128: LD_VAR 0 55
61132: PUSH
61133: LD_VAR 0 56
61137: PUSH
61138: LD_VAR 0 57
61142: PUSH
61143: LD_VAR 0 58
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: LD_VAR 0 4
61160: PUSH
61161: LD_INT 1
61163: PLUS
61164: ARRAY
61165: ST_TO_ADDR
61166: GO 61275
61168: LD_INT 31
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61218
61174: LD_INT 32
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61218
61180: LD_INT 33
61182: DOUBLE
61183: EQUAL
61184: IFTRUE 61218
61186: LD_INT 27
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61218
61192: LD_INT 26
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61218
61198: LD_INT 28
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61218
61204: LD_INT 29
61206: DOUBLE
61207: EQUAL
61208: IFTRUE 61218
61210: LD_INT 30
61212: DOUBLE
61213: EQUAL
61214: IFTRUE 61218
61216: GO 61274
61218: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61219: LD_ADDR_VAR 0 9
61223: PUSH
61224: LD_VAR 0 59
61228: PUSH
61229: LD_VAR 0 60
61233: PUSH
61234: LD_VAR 0 61
61238: PUSH
61239: LD_VAR 0 62
61243: PUSH
61244: LD_VAR 0 63
61248: PUSH
61249: LD_VAR 0 64
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: LD_VAR 0 4
61266: PUSH
61267: LD_INT 1
61269: PLUS
61270: ARRAY
61271: ST_TO_ADDR
61272: GO 61275
61274: POP
// temp_list2 = [ ] ;
61275: LD_ADDR_VAR 0 10
61279: PUSH
61280: EMPTY
61281: ST_TO_ADDR
// for i in temp_list do
61282: LD_ADDR_VAR 0 8
61286: PUSH
61287: LD_VAR 0 9
61291: PUSH
61292: FOR_IN
61293: IFFALSE 61345
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61295: LD_ADDR_VAR 0 10
61299: PUSH
61300: LD_VAR 0 10
61304: PUSH
61305: LD_VAR 0 8
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PUSH
61314: LD_VAR 0 2
61318: PLUS
61319: PUSH
61320: LD_VAR 0 8
61324: PUSH
61325: LD_INT 2
61327: ARRAY
61328: PUSH
61329: LD_VAR 0 3
61333: PLUS
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: EMPTY
61340: LIST
61341: ADD
61342: ST_TO_ADDR
61343: GO 61292
61345: POP
61346: POP
// result = temp_list2 ;
61347: LD_ADDR_VAR 0 7
61351: PUSH
61352: LD_VAR 0 10
61356: ST_TO_ADDR
// end ;
61357: LD_VAR 0 7
61361: RET
// export function EnemyInRange ( unit , dist ) ; begin
61362: LD_INT 0
61364: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61365: LD_ADDR_VAR 0 3
61369: PUSH
61370: LD_VAR 0 1
61374: PPUSH
61375: CALL_OW 255
61379: PPUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL_OW 250
61389: PPUSH
61390: LD_VAR 0 1
61394: PPUSH
61395: CALL_OW 251
61399: PPUSH
61400: LD_VAR 0 2
61404: PPUSH
61405: CALL 34758 0 4
61409: PUSH
61410: LD_INT 4
61412: ARRAY
61413: ST_TO_ADDR
// end ;
61414: LD_VAR 0 3
61418: RET
// export function PlayerSeeMe ( unit ) ; begin
61419: LD_INT 0
61421: PPUSH
// result := See ( your_side , unit ) ;
61422: LD_ADDR_VAR 0 2
61426: PUSH
61427: LD_OWVAR 2
61431: PPUSH
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 292
61441: ST_TO_ADDR
// end ;
61442: LD_VAR 0 2
61446: RET
// export function ReverseDir ( unit ) ; begin
61447: LD_INT 0
61449: PPUSH
// if not unit then
61450: LD_VAR 0 1
61454: NOT
61455: IFFALSE 61459
// exit ;
61457: GO 61482
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61459: LD_ADDR_VAR 0 2
61463: PUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 254
61473: PUSH
61474: LD_INT 3
61476: PLUS
61477: PUSH
61478: LD_INT 6
61480: MOD
61481: ST_TO_ADDR
// end ;
61482: LD_VAR 0 2
61486: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61487: LD_INT 0
61489: PPUSH
61490: PPUSH
61491: PPUSH
61492: PPUSH
61493: PPUSH
// if not hexes then
61494: LD_VAR 0 2
61498: NOT
61499: IFFALSE 61503
// exit ;
61501: GO 61651
// dist := 9999 ;
61503: LD_ADDR_VAR 0 5
61507: PUSH
61508: LD_INT 9999
61510: ST_TO_ADDR
// for i = 1 to hexes do
61511: LD_ADDR_VAR 0 4
61515: PUSH
61516: DOUBLE
61517: LD_INT 1
61519: DEC
61520: ST_TO_ADDR
61521: LD_VAR 0 2
61525: PUSH
61526: FOR_TO
61527: IFFALSE 61639
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61529: LD_VAR 0 1
61533: PPUSH
61534: LD_VAR 0 2
61538: PUSH
61539: LD_VAR 0 4
61543: ARRAY
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: PPUSH
61549: LD_VAR 0 2
61553: PUSH
61554: LD_VAR 0 4
61558: ARRAY
61559: PUSH
61560: LD_INT 2
61562: ARRAY
61563: PPUSH
61564: CALL_OW 297
61568: PUSH
61569: LD_VAR 0 5
61573: LESS
61574: IFFALSE 61637
// begin hex := hexes [ i ] ;
61576: LD_ADDR_VAR 0 7
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_VAR 0 4
61590: ARRAY
61591: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61592: LD_ADDR_VAR 0 5
61596: PUSH
61597: LD_VAR 0 1
61601: PPUSH
61602: LD_VAR 0 2
61606: PUSH
61607: LD_VAR 0 4
61611: ARRAY
61612: PUSH
61613: LD_INT 1
61615: ARRAY
61616: PPUSH
61617: LD_VAR 0 2
61621: PUSH
61622: LD_VAR 0 4
61626: ARRAY
61627: PUSH
61628: LD_INT 2
61630: ARRAY
61631: PPUSH
61632: CALL_OW 297
61636: ST_TO_ADDR
// end ; end ;
61637: GO 61526
61639: POP
61640: POP
// result := hex ;
61641: LD_ADDR_VAR 0 3
61645: PUSH
61646: LD_VAR 0 7
61650: ST_TO_ADDR
// end ;
61651: LD_VAR 0 3
61655: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61656: LD_INT 0
61658: PPUSH
61659: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61660: LD_VAR 0 1
61664: NOT
61665: PUSH
61666: LD_VAR 0 1
61670: PUSH
61671: LD_INT 21
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 23
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PPUSH
61695: CALL_OW 69
61699: IN
61700: NOT
61701: OR
61702: IFFALSE 61706
// exit ;
61704: GO 61753
// for i = 1 to 3 do
61706: LD_ADDR_VAR 0 3
61710: PUSH
61711: DOUBLE
61712: LD_INT 1
61714: DEC
61715: ST_TO_ADDR
61716: LD_INT 3
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61751
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61722: LD_VAR 0 1
61726: PPUSH
61727: CALL_OW 250
61731: PPUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: CALL_OW 251
61741: PPUSH
61742: LD_INT 1
61744: PPUSH
61745: CALL_OW 453
61749: GO 61719
61751: POP
61752: POP
// end ;
61753: LD_VAR 0 2
61757: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61758: LD_INT 0
61760: PPUSH
61761: PPUSH
61762: PPUSH
61763: PPUSH
61764: PPUSH
61765: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61766: LD_VAR 0 1
61770: NOT
61771: PUSH
61772: LD_VAR 0 2
61776: NOT
61777: OR
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 314
61788: OR
61789: IFFALSE 61793
// exit ;
61791: GO 62234
// x := GetX ( enemy_unit ) ;
61793: LD_ADDR_VAR 0 7
61797: PUSH
61798: LD_VAR 0 2
61802: PPUSH
61803: CALL_OW 250
61807: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61808: LD_ADDR_VAR 0 8
61812: PUSH
61813: LD_VAR 0 2
61817: PPUSH
61818: CALL_OW 251
61822: ST_TO_ADDR
// if not x or not y then
61823: LD_VAR 0 7
61827: NOT
61828: PUSH
61829: LD_VAR 0 8
61833: NOT
61834: OR
61835: IFFALSE 61839
// exit ;
61837: GO 62234
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61839: LD_ADDR_VAR 0 6
61843: PUSH
61844: LD_VAR 0 7
61848: PPUSH
61849: LD_INT 0
61851: PPUSH
61852: LD_INT 4
61854: PPUSH
61855: CALL_OW 272
61859: PUSH
61860: LD_VAR 0 8
61864: PPUSH
61865: LD_INT 0
61867: PPUSH
61868: LD_INT 4
61870: PPUSH
61871: CALL_OW 273
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_VAR 0 7
61884: PPUSH
61885: LD_INT 1
61887: PPUSH
61888: LD_INT 4
61890: PPUSH
61891: CALL_OW 272
61895: PUSH
61896: LD_VAR 0 8
61900: PPUSH
61901: LD_INT 1
61903: PPUSH
61904: LD_INT 4
61906: PPUSH
61907: CALL_OW 273
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 7
61920: PPUSH
61921: LD_INT 2
61923: PPUSH
61924: LD_INT 4
61926: PPUSH
61927: CALL_OW 272
61931: PUSH
61932: LD_VAR 0 8
61936: PPUSH
61937: LD_INT 2
61939: PPUSH
61940: LD_INT 4
61942: PPUSH
61943: CALL_OW 273
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_VAR 0 7
61956: PPUSH
61957: LD_INT 3
61959: PPUSH
61960: LD_INT 4
61962: PPUSH
61963: CALL_OW 272
61967: PUSH
61968: LD_VAR 0 8
61972: PPUSH
61973: LD_INT 3
61975: PPUSH
61976: LD_INT 4
61978: PPUSH
61979: CALL_OW 273
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_VAR 0 7
61992: PPUSH
61993: LD_INT 4
61995: PPUSH
61996: LD_INT 4
61998: PPUSH
61999: CALL_OW 272
62003: PUSH
62004: LD_VAR 0 8
62008: PPUSH
62009: LD_INT 4
62011: PPUSH
62012: LD_INT 4
62014: PPUSH
62015: CALL_OW 273
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 7
62028: PPUSH
62029: LD_INT 5
62031: PPUSH
62032: LD_INT 4
62034: PPUSH
62035: CALL_OW 272
62039: PUSH
62040: LD_VAR 0 8
62044: PPUSH
62045: LD_INT 5
62047: PPUSH
62048: LD_INT 4
62050: PPUSH
62051: CALL_OW 273
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: ST_TO_ADDR
// for i = tmp downto 1 do
62068: LD_ADDR_VAR 0 4
62072: PUSH
62073: DOUBLE
62074: LD_VAR 0 6
62078: INC
62079: ST_TO_ADDR
62080: LD_INT 1
62082: PUSH
62083: FOR_DOWNTO
62084: IFFALSE 62185
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62086: LD_VAR 0 6
62090: PUSH
62091: LD_VAR 0 4
62095: ARRAY
62096: PUSH
62097: LD_INT 1
62099: ARRAY
62100: PPUSH
62101: LD_VAR 0 6
62105: PUSH
62106: LD_VAR 0 4
62110: ARRAY
62111: PUSH
62112: LD_INT 2
62114: ARRAY
62115: PPUSH
62116: CALL_OW 488
62120: NOT
62121: PUSH
62122: LD_VAR 0 6
62126: PUSH
62127: LD_VAR 0 4
62131: ARRAY
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PPUSH
62137: LD_VAR 0 6
62141: PUSH
62142: LD_VAR 0 4
62146: ARRAY
62147: PUSH
62148: LD_INT 2
62150: ARRAY
62151: PPUSH
62152: CALL_OW 428
62156: PUSH
62157: LD_INT 0
62159: NONEQUAL
62160: OR
62161: IFFALSE 62183
// tmp := Delete ( tmp , i ) ;
62163: LD_ADDR_VAR 0 6
62167: PUSH
62168: LD_VAR 0 6
62172: PPUSH
62173: LD_VAR 0 4
62177: PPUSH
62178: CALL_OW 3
62182: ST_TO_ADDR
62183: GO 62083
62185: POP
62186: POP
// j := GetClosestHex ( unit , tmp ) ;
62187: LD_ADDR_VAR 0 5
62191: PUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: LD_VAR 0 6
62201: PPUSH
62202: CALL 61487 0 2
62206: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62207: LD_VAR 0 1
62211: PPUSH
62212: LD_VAR 0 5
62216: PUSH
62217: LD_INT 1
62219: ARRAY
62220: PPUSH
62221: LD_VAR 0 5
62225: PUSH
62226: LD_INT 2
62228: ARRAY
62229: PPUSH
62230: CALL_OW 111
// end ;
62234: LD_VAR 0 3
62238: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62239: LD_INT 0
62241: PPUSH
62242: PPUSH
62243: PPUSH
// uc_side = 0 ;
62244: LD_ADDR_OWVAR 20
62248: PUSH
62249: LD_INT 0
62251: ST_TO_ADDR
// uc_nation = 0 ;
62252: LD_ADDR_OWVAR 21
62256: PUSH
62257: LD_INT 0
62259: ST_TO_ADDR
// InitHc_All ( ) ;
62260: CALL_OW 584
// InitVc ;
62264: CALL_OW 20
// if mastodonts then
62268: LD_VAR 0 6
62272: IFFALSE 62339
// for i = 1 to mastodonts do
62274: LD_ADDR_VAR 0 11
62278: PUSH
62279: DOUBLE
62280: LD_INT 1
62282: DEC
62283: ST_TO_ADDR
62284: LD_VAR 0 6
62288: PUSH
62289: FOR_TO
62290: IFFALSE 62337
// begin vc_chassis := 31 ;
62292: LD_ADDR_OWVAR 37
62296: PUSH
62297: LD_INT 31
62299: ST_TO_ADDR
// vc_control := control_rider ;
62300: LD_ADDR_OWVAR 38
62304: PUSH
62305: LD_INT 4
62307: ST_TO_ADDR
// animal := CreateVehicle ;
62308: LD_ADDR_VAR 0 12
62312: PUSH
62313: CALL_OW 45
62317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62318: LD_VAR 0 12
62322: PPUSH
62323: LD_VAR 0 8
62327: PPUSH
62328: LD_INT 0
62330: PPUSH
62331: CALL 64527 0 3
// end ;
62335: GO 62289
62337: POP
62338: POP
// if horses then
62339: LD_VAR 0 5
62343: IFFALSE 62410
// for i = 1 to horses do
62345: LD_ADDR_VAR 0 11
62349: PUSH
62350: DOUBLE
62351: LD_INT 1
62353: DEC
62354: ST_TO_ADDR
62355: LD_VAR 0 5
62359: PUSH
62360: FOR_TO
62361: IFFALSE 62408
// begin hc_class := 21 ;
62363: LD_ADDR_OWVAR 28
62367: PUSH
62368: LD_INT 21
62370: ST_TO_ADDR
// hc_gallery :=  ;
62371: LD_ADDR_OWVAR 33
62375: PUSH
62376: LD_STRING 
62378: ST_TO_ADDR
// animal := CreateHuman ;
62379: LD_ADDR_VAR 0 12
62383: PUSH
62384: CALL_OW 44
62388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62389: LD_VAR 0 12
62393: PPUSH
62394: LD_VAR 0 8
62398: PPUSH
62399: LD_INT 0
62401: PPUSH
62402: CALL 64527 0 3
// end ;
62406: GO 62360
62408: POP
62409: POP
// if birds then
62410: LD_VAR 0 1
62414: IFFALSE 62481
// for i = 1 to birds do
62416: LD_ADDR_VAR 0 11
62420: PUSH
62421: DOUBLE
62422: LD_INT 1
62424: DEC
62425: ST_TO_ADDR
62426: LD_VAR 0 1
62430: PUSH
62431: FOR_TO
62432: IFFALSE 62479
// begin hc_class = 18 ;
62434: LD_ADDR_OWVAR 28
62438: PUSH
62439: LD_INT 18
62441: ST_TO_ADDR
// hc_gallery =  ;
62442: LD_ADDR_OWVAR 33
62446: PUSH
62447: LD_STRING 
62449: ST_TO_ADDR
// animal := CreateHuman ;
62450: LD_ADDR_VAR 0 12
62454: PUSH
62455: CALL_OW 44
62459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62460: LD_VAR 0 12
62464: PPUSH
62465: LD_VAR 0 8
62469: PPUSH
62470: LD_INT 0
62472: PPUSH
62473: CALL 64527 0 3
// end ;
62477: GO 62431
62479: POP
62480: POP
// if tigers then
62481: LD_VAR 0 2
62485: IFFALSE 62569
// for i = 1 to tigers do
62487: LD_ADDR_VAR 0 11
62491: PUSH
62492: DOUBLE
62493: LD_INT 1
62495: DEC
62496: ST_TO_ADDR
62497: LD_VAR 0 2
62501: PUSH
62502: FOR_TO
62503: IFFALSE 62567
// begin hc_class = class_tiger ;
62505: LD_ADDR_OWVAR 28
62509: PUSH
62510: LD_INT 14
62512: ST_TO_ADDR
// hc_gallery =  ;
62513: LD_ADDR_OWVAR 33
62517: PUSH
62518: LD_STRING 
62520: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62521: LD_ADDR_OWVAR 35
62525: PUSH
62526: LD_INT 7
62528: NEG
62529: PPUSH
62530: LD_INT 7
62532: PPUSH
62533: CALL_OW 12
62537: ST_TO_ADDR
// animal := CreateHuman ;
62538: LD_ADDR_VAR 0 12
62542: PUSH
62543: CALL_OW 44
62547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62548: LD_VAR 0 12
62552: PPUSH
62553: LD_VAR 0 8
62557: PPUSH
62558: LD_INT 0
62560: PPUSH
62561: CALL 64527 0 3
// end ;
62565: GO 62502
62567: POP
62568: POP
// if apemans then
62569: LD_VAR 0 3
62573: IFFALSE 62696
// for i = 1 to apemans do
62575: LD_ADDR_VAR 0 11
62579: PUSH
62580: DOUBLE
62581: LD_INT 1
62583: DEC
62584: ST_TO_ADDR
62585: LD_VAR 0 3
62589: PUSH
62590: FOR_TO
62591: IFFALSE 62694
// begin hc_class = class_apeman ;
62593: LD_ADDR_OWVAR 28
62597: PUSH
62598: LD_INT 12
62600: ST_TO_ADDR
// hc_gallery =  ;
62601: LD_ADDR_OWVAR 33
62605: PUSH
62606: LD_STRING 
62608: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62609: LD_ADDR_OWVAR 35
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PPUSH
62618: LD_INT 2
62620: PPUSH
62621: CALL_OW 12
62625: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62626: LD_ADDR_OWVAR 31
62630: PUSH
62631: LD_INT 1
62633: PPUSH
62634: LD_INT 3
62636: PPUSH
62637: CALL_OW 12
62641: PUSH
62642: LD_INT 1
62644: PPUSH
62645: LD_INT 3
62647: PPUSH
62648: CALL_OW 12
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: ST_TO_ADDR
// animal := CreateHuman ;
62665: LD_ADDR_VAR 0 12
62669: PUSH
62670: CALL_OW 44
62674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62675: LD_VAR 0 12
62679: PPUSH
62680: LD_VAR 0 8
62684: PPUSH
62685: LD_INT 0
62687: PPUSH
62688: CALL 64527 0 3
// end ;
62692: GO 62590
62694: POP
62695: POP
// if enchidnas then
62696: LD_VAR 0 4
62700: IFFALSE 62767
// for i = 1 to enchidnas do
62702: LD_ADDR_VAR 0 11
62706: PUSH
62707: DOUBLE
62708: LD_INT 1
62710: DEC
62711: ST_TO_ADDR
62712: LD_VAR 0 4
62716: PUSH
62717: FOR_TO
62718: IFFALSE 62765
// begin hc_class = 13 ;
62720: LD_ADDR_OWVAR 28
62724: PUSH
62725: LD_INT 13
62727: ST_TO_ADDR
// hc_gallery =  ;
62728: LD_ADDR_OWVAR 33
62732: PUSH
62733: LD_STRING 
62735: ST_TO_ADDR
// animal := CreateHuman ;
62736: LD_ADDR_VAR 0 12
62740: PUSH
62741: CALL_OW 44
62745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62746: LD_VAR 0 12
62750: PPUSH
62751: LD_VAR 0 8
62755: PPUSH
62756: LD_INT 0
62758: PPUSH
62759: CALL 64527 0 3
// end ;
62763: GO 62717
62765: POP
62766: POP
// if fishes then
62767: LD_VAR 0 7
62771: IFFALSE 62838
// for i = 1 to fishes do
62773: LD_ADDR_VAR 0 11
62777: PUSH
62778: DOUBLE
62779: LD_INT 1
62781: DEC
62782: ST_TO_ADDR
62783: LD_VAR 0 7
62787: PUSH
62788: FOR_TO
62789: IFFALSE 62836
// begin hc_class = 20 ;
62791: LD_ADDR_OWVAR 28
62795: PUSH
62796: LD_INT 20
62798: ST_TO_ADDR
// hc_gallery =  ;
62799: LD_ADDR_OWVAR 33
62803: PUSH
62804: LD_STRING 
62806: ST_TO_ADDR
// animal := CreateHuman ;
62807: LD_ADDR_VAR 0 12
62811: PUSH
62812: CALL_OW 44
62816: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62817: LD_VAR 0 12
62821: PPUSH
62822: LD_VAR 0 9
62826: PPUSH
62827: LD_INT 0
62829: PPUSH
62830: CALL 64527 0 3
// end ;
62834: GO 62788
62836: POP
62837: POP
// end ;
62838: LD_VAR 0 10
62842: RET
// export function WantHeal ( sci , unit ) ; begin
62843: LD_INT 0
62845: PPUSH
// if GetTaskList ( sci ) > 0 then
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 437
62855: PUSH
62856: LD_INT 0
62858: GREATER
62859: IFFALSE 62929
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 437
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: PUSH
62879: LD_STRING l
62881: EQUAL
62882: PUSH
62883: LD_VAR 0 1
62887: PPUSH
62888: CALL_OW 437
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: LD_INT 4
62899: ARRAY
62900: PUSH
62901: LD_VAR 0 2
62905: EQUAL
62906: AND
62907: IFFALSE 62919
// result := true else
62909: LD_ADDR_VAR 0 3
62913: PUSH
62914: LD_INT 1
62916: ST_TO_ADDR
62917: GO 62927
// result := false ;
62919: LD_ADDR_VAR 0 3
62923: PUSH
62924: LD_INT 0
62926: ST_TO_ADDR
// end else
62927: GO 62937
// result := false ;
62929: LD_ADDR_VAR 0 3
62933: PUSH
62934: LD_INT 0
62936: ST_TO_ADDR
// end ;
62937: LD_VAR 0 3
62941: RET
// export function HealTarget ( sci ) ; begin
62942: LD_INT 0
62944: PPUSH
// if not sci then
62945: LD_VAR 0 1
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 63019
// result := 0 ;
62954: LD_ADDR_VAR 0 2
62958: PUSH
62959: LD_INT 0
62961: ST_TO_ADDR
// if GetTaskList ( sci ) then
62962: LD_VAR 0 1
62966: PPUSH
62967: CALL_OW 437
62971: IFFALSE 63019
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62973: LD_VAR 0 1
62977: PPUSH
62978: CALL_OW 437
62982: PUSH
62983: LD_INT 1
62985: ARRAY
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PUSH
62991: LD_STRING l
62993: EQUAL
62994: IFFALSE 63019
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62996: LD_ADDR_VAR 0 2
63000: PUSH
63001: LD_VAR 0 1
63005: PPUSH
63006: CALL_OW 437
63010: PUSH
63011: LD_INT 1
63013: ARRAY
63014: PUSH
63015: LD_INT 4
63017: ARRAY
63018: ST_TO_ADDR
// end ;
63019: LD_VAR 0 2
63023: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63024: LD_INT 0
63026: PPUSH
63027: PPUSH
63028: PPUSH
63029: PPUSH
// if not base_units then
63030: LD_VAR 0 1
63034: NOT
63035: IFFALSE 63039
// exit ;
63037: GO 63126
// result := false ;
63039: LD_ADDR_VAR 0 2
63043: PUSH
63044: LD_INT 0
63046: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63047: LD_ADDR_VAR 0 5
63051: PUSH
63052: LD_VAR 0 1
63056: PPUSH
63057: LD_INT 21
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PPUSH
63067: CALL_OW 72
63071: ST_TO_ADDR
// if not tmp then
63072: LD_VAR 0 5
63076: NOT
63077: IFFALSE 63081
// exit ;
63079: GO 63126
// for i in tmp do
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: LD_VAR 0 5
63090: PUSH
63091: FOR_IN
63092: IFFALSE 63124
// begin result := EnemyInRange ( i , 22 ) ;
63094: LD_ADDR_VAR 0 2
63098: PUSH
63099: LD_VAR 0 3
63103: PPUSH
63104: LD_INT 22
63106: PPUSH
63107: CALL 61362 0 2
63111: ST_TO_ADDR
// if result then
63112: LD_VAR 0 2
63116: IFFALSE 63122
// exit ;
63118: POP
63119: POP
63120: GO 63126
// end ;
63122: GO 63091
63124: POP
63125: POP
// end ;
63126: LD_VAR 0 2
63130: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63131: LD_INT 0
63133: PPUSH
63134: PPUSH
// if not units then
63135: LD_VAR 0 1
63139: NOT
63140: IFFALSE 63144
// exit ;
63142: GO 63214
// result := [ ] ;
63144: LD_ADDR_VAR 0 3
63148: PUSH
63149: EMPTY
63150: ST_TO_ADDR
// for i in units do
63151: LD_ADDR_VAR 0 4
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: FOR_IN
63162: IFFALSE 63212
// if GetTag ( i ) = tag then
63164: LD_VAR 0 4
63168: PPUSH
63169: CALL_OW 110
63173: PUSH
63174: LD_VAR 0 2
63178: EQUAL
63179: IFFALSE 63210
// result := Replace ( result , result + 1 , i ) ;
63181: LD_ADDR_VAR 0 3
63185: PUSH
63186: LD_VAR 0 3
63190: PPUSH
63191: LD_VAR 0 3
63195: PUSH
63196: LD_INT 1
63198: PLUS
63199: PPUSH
63200: LD_VAR 0 4
63204: PPUSH
63205: CALL_OW 1
63209: ST_TO_ADDR
63210: GO 63161
63212: POP
63213: POP
// end ;
63214: LD_VAR 0 3
63218: RET
// export function IsDriver ( un ) ; begin
63219: LD_INT 0
63221: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63222: LD_ADDR_VAR 0 2
63226: PUSH
63227: LD_VAR 0 1
63231: PUSH
63232: LD_INT 55
63234: PUSH
63235: EMPTY
63236: LIST
63237: PPUSH
63238: CALL_OW 69
63242: IN
63243: ST_TO_ADDR
// end ;
63244: LD_VAR 0 2
63248: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63249: LD_INT 0
63251: PPUSH
63252: PPUSH
// list := [ ] ;
63253: LD_ADDR_VAR 0 5
63257: PUSH
63258: EMPTY
63259: ST_TO_ADDR
// case d of 0 :
63260: LD_VAR 0 3
63264: PUSH
63265: LD_INT 0
63267: DOUBLE
63268: EQUAL
63269: IFTRUE 63273
63271: GO 63406
63273: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63274: LD_ADDR_VAR 0 5
63278: PUSH
63279: LD_VAR 0 1
63283: PUSH
63284: LD_INT 4
63286: MINUS
63287: PUSH
63288: LD_VAR 0 2
63292: PUSH
63293: LD_INT 4
63295: MINUS
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: LD_VAR 0 1
63309: PUSH
63310: LD_INT 3
63312: MINUS
63313: PUSH
63314: LD_VAR 0 2
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_INT 4
63334: PLUS
63335: PUSH
63336: LD_VAR 0 2
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: PUSH
63349: LD_VAR 0 1
63353: PUSH
63354: LD_INT 3
63356: PLUS
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: LD_INT 3
63365: PLUS
63366: PUSH
63367: LD_INT 5
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: PUSH
63375: LD_VAR 0 1
63379: PUSH
63380: LD_VAR 0 2
63384: PUSH
63385: LD_INT 4
63387: PLUS
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// end ; 1 :
63404: GO 64104
63406: LD_INT 1
63408: DOUBLE
63409: EQUAL
63410: IFTRUE 63414
63412: GO 63547
63414: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63415: LD_ADDR_VAR 0 5
63419: PUSH
63420: LD_VAR 0 1
63424: PUSH
63425: LD_VAR 0 2
63429: PUSH
63430: LD_INT 4
63432: MINUS
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_INT 3
63449: MINUS
63450: PUSH
63451: LD_VAR 0 2
63455: PUSH
63456: LD_INT 3
63458: MINUS
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: PUSH
63468: LD_VAR 0 1
63472: PUSH
63473: LD_INT 4
63475: MINUS
63476: PUSH
63477: LD_VAR 0 2
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: PUSH
63490: LD_VAR 0 1
63494: PUSH
63495: LD_VAR 0 2
63499: PUSH
63500: LD_INT 3
63502: PLUS
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: LD_INT 4
63519: PLUS
63520: PUSH
63521: LD_VAR 0 2
63525: PUSH
63526: LD_INT 4
63528: PLUS
63529: PUSH
63530: LD_INT 5
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: ST_TO_ADDR
// end ; 2 :
63545: GO 64104
63547: LD_INT 2
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63555
63553: GO 63684
63555: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63556: LD_ADDR_VAR 0 5
63560: PUSH
63561: LD_VAR 0 1
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: LD_INT 3
63573: MINUS
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: PUSH
63583: LD_VAR 0 1
63587: PUSH
63588: LD_INT 4
63590: PLUS
63591: PUSH
63592: LD_VAR 0 2
63596: PUSH
63597: LD_INT 4
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: LD_VAR 0 1
63609: PUSH
63610: LD_VAR 0 2
63614: PUSH
63615: LD_INT 4
63617: PLUS
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_VAR 0 1
63631: PUSH
63632: LD_INT 3
63634: MINUS
63635: PUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: PUSH
63649: LD_VAR 0 1
63653: PUSH
63654: LD_INT 4
63656: MINUS
63657: PUSH
63658: LD_VAR 0 2
63662: PUSH
63663: LD_INT 4
63665: MINUS
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: ST_TO_ADDR
// end ; 3 :
63682: GO 64104
63684: LD_INT 3
63686: DOUBLE
63687: EQUAL
63688: IFTRUE 63692
63690: GO 63825
63692: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63693: LD_ADDR_VAR 0 5
63697: PUSH
63698: LD_VAR 0 1
63702: PUSH
63703: LD_INT 3
63705: PLUS
63706: PUSH
63707: LD_VAR 0 2
63711: PUSH
63712: LD_INT 4
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: LIST
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: LD_INT 4
63727: PLUS
63728: PUSH
63729: LD_VAR 0 2
63733: PUSH
63734: LD_INT 4
63736: PLUS
63737: PUSH
63738: LD_INT 5
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: PUSH
63746: LD_VAR 0 1
63750: PUSH
63751: LD_INT 4
63753: MINUS
63754: PUSH
63755: LD_VAR 0 2
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 1
63772: PUSH
63773: LD_VAR 0 2
63777: PUSH
63778: LD_INT 4
63780: MINUS
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PUSH
63790: LD_VAR 0 1
63794: PUSH
63795: LD_INT 3
63797: MINUS
63798: PUSH
63799: LD_VAR 0 2
63803: PUSH
63804: LD_INT 3
63806: MINUS
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// end ; 4 :
63823: GO 64104
63825: LD_INT 4
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63833
63831: GO 63966
63833: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63834: LD_ADDR_VAR 0 5
63838: PUSH
63839: LD_VAR 0 1
63843: PUSH
63844: LD_VAR 0 2
63848: PUSH
63849: LD_INT 4
63851: PLUS
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: PUSH
63861: LD_VAR 0 1
63865: PUSH
63866: LD_INT 3
63868: PLUS
63869: PUSH
63870: LD_VAR 0 2
63874: PUSH
63875: LD_INT 3
63877: PLUS
63878: PUSH
63879: LD_INT 5
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: PUSH
63887: LD_VAR 0 1
63891: PUSH
63892: LD_INT 4
63894: PLUS
63895: PUSH
63896: LD_VAR 0 2
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: PUSH
63909: LD_VAR 0 1
63913: PUSH
63914: LD_VAR 0 2
63918: PUSH
63919: LD_INT 3
63921: MINUS
63922: PUSH
63923: LD_INT 3
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: LD_VAR 0 1
63935: PUSH
63936: LD_INT 4
63938: MINUS
63939: PUSH
63940: LD_VAR 0 2
63944: PUSH
63945: LD_INT 4
63947: MINUS
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: ST_TO_ADDR
// end ; 5 :
63964: GO 64104
63966: LD_INT 5
63968: DOUBLE
63969: EQUAL
63970: IFTRUE 63974
63972: GO 64103
63974: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63975: LD_ADDR_VAR 0 5
63979: PUSH
63980: LD_VAR 0 1
63984: PUSH
63985: LD_INT 4
63987: MINUS
63988: PUSH
63989: LD_VAR 0 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: LIST
64001: PUSH
64002: LD_VAR 0 1
64006: PUSH
64007: LD_VAR 0 2
64011: PUSH
64012: LD_INT 4
64014: MINUS
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: PUSH
64024: LD_VAR 0 1
64028: PUSH
64029: LD_INT 4
64031: PLUS
64032: PUSH
64033: LD_VAR 0 2
64037: PUSH
64038: LD_INT 4
64040: PLUS
64041: PUSH
64042: LD_INT 5
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: PUSH
64050: LD_VAR 0 1
64054: PUSH
64055: LD_INT 3
64057: PLUS
64058: PUSH
64059: LD_VAR 0 2
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: LD_VAR 0 1
64076: PUSH
64077: LD_VAR 0 2
64081: PUSH
64082: LD_INT 3
64084: PLUS
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// end ; end ;
64101: GO 64104
64103: POP
// result := list ;
64104: LD_ADDR_VAR 0 4
64108: PUSH
64109: LD_VAR 0 5
64113: ST_TO_ADDR
// end ;
64114: LD_VAR 0 4
64118: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
64123: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64124: LD_VAR 0 1
64128: NOT
64129: PUSH
64130: LD_VAR 0 2
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: LD_INT 4
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: IN
64153: NOT
64154: OR
64155: IFFALSE 64159
// exit ;
64157: GO 64251
// tmp := [ ] ;
64159: LD_ADDR_VAR 0 5
64163: PUSH
64164: EMPTY
64165: ST_TO_ADDR
// for i in units do
64166: LD_ADDR_VAR 0 4
64170: PUSH
64171: LD_VAR 0 1
64175: PUSH
64176: FOR_IN
64177: IFFALSE 64220
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64179: LD_ADDR_VAR 0 5
64183: PUSH
64184: LD_VAR 0 5
64188: PPUSH
64189: LD_VAR 0 5
64193: PUSH
64194: LD_INT 1
64196: PLUS
64197: PPUSH
64198: LD_VAR 0 4
64202: PPUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: CALL_OW 259
64212: PPUSH
64213: CALL_OW 2
64217: ST_TO_ADDR
64218: GO 64176
64220: POP
64221: POP
// if not tmp then
64222: LD_VAR 0 5
64226: NOT
64227: IFFALSE 64231
// exit ;
64229: GO 64251
// result := SortListByListDesc ( units , tmp ) ;
64231: LD_ADDR_VAR 0 3
64235: PUSH
64236: LD_VAR 0 1
64240: PPUSH
64241: LD_VAR 0 5
64245: PPUSH
64246: CALL_OW 77
64250: ST_TO_ADDR
// end ;
64251: LD_VAR 0 3
64255: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64256: LD_INT 0
64258: PPUSH
64259: PPUSH
64260: PPUSH
// result := false ;
64261: LD_ADDR_VAR 0 3
64265: PUSH
64266: LD_INT 0
64268: ST_TO_ADDR
// x := GetX ( building ) ;
64269: LD_ADDR_VAR 0 4
64273: PUSH
64274: LD_VAR 0 2
64278: PPUSH
64279: CALL_OW 250
64283: ST_TO_ADDR
// y := GetY ( building ) ;
64284: LD_ADDR_VAR 0 5
64288: PUSH
64289: LD_VAR 0 2
64293: PPUSH
64294: CALL_OW 251
64298: ST_TO_ADDR
// if not building or not x or not y then
64299: LD_VAR 0 2
64303: NOT
64304: PUSH
64305: LD_VAR 0 4
64309: NOT
64310: OR
64311: PUSH
64312: LD_VAR 0 5
64316: NOT
64317: OR
64318: IFFALSE 64322
// exit ;
64320: GO 64414
// if GetTaskList ( unit ) then
64322: LD_VAR 0 1
64326: PPUSH
64327: CALL_OW 437
64331: IFFALSE 64414
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64333: LD_STRING e
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 437
64345: PUSH
64346: LD_INT 1
64348: ARRAY
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: EQUAL
64354: PUSH
64355: LD_VAR 0 4
64359: PUSH
64360: LD_VAR 0 1
64364: PPUSH
64365: CALL_OW 437
64369: PUSH
64370: LD_INT 1
64372: ARRAY
64373: PUSH
64374: LD_INT 2
64376: ARRAY
64377: EQUAL
64378: AND
64379: PUSH
64380: LD_VAR 0 5
64384: PUSH
64385: LD_VAR 0 1
64389: PPUSH
64390: CALL_OW 437
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: PUSH
64399: LD_INT 3
64401: ARRAY
64402: EQUAL
64403: AND
64404: IFFALSE 64414
// result := true end ;
64406: LD_ADDR_VAR 0 3
64410: PUSH
64411: LD_INT 1
64413: ST_TO_ADDR
// end ;
64414: LD_VAR 0 3
64418: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64419: LD_INT 0
64421: PPUSH
// result := false ;
64422: LD_ADDR_VAR 0 4
64426: PUSH
64427: LD_INT 0
64429: ST_TO_ADDR
// if GetTaskList ( unit ) then
64430: LD_VAR 0 1
64434: PPUSH
64435: CALL_OW 437
64439: IFFALSE 64522
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64441: LD_STRING M
64443: PUSH
64444: LD_VAR 0 1
64448: PPUSH
64449: CALL_OW 437
64453: PUSH
64454: LD_INT 1
64456: ARRAY
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: EQUAL
64462: PUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_VAR 0 1
64472: PPUSH
64473: CALL_OW 437
64477: PUSH
64478: LD_INT 1
64480: ARRAY
64481: PUSH
64482: LD_INT 2
64484: ARRAY
64485: EQUAL
64486: AND
64487: PUSH
64488: LD_VAR 0 3
64492: PUSH
64493: LD_VAR 0 1
64497: PPUSH
64498: CALL_OW 437
64502: PUSH
64503: LD_INT 1
64505: ARRAY
64506: PUSH
64507: LD_INT 3
64509: ARRAY
64510: EQUAL
64511: AND
64512: IFFALSE 64522
// result := true ;
64514: LD_ADDR_VAR 0 4
64518: PUSH
64519: LD_INT 1
64521: ST_TO_ADDR
// end ; end ;
64522: LD_VAR 0 4
64526: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64527: LD_INT 0
64529: PPUSH
64530: PPUSH
64531: PPUSH
64532: PPUSH
// if not unit or not area then
64533: LD_VAR 0 1
64537: NOT
64538: PUSH
64539: LD_VAR 0 2
64543: NOT
64544: OR
64545: IFFALSE 64549
// exit ;
64547: GO 64713
// tmp := AreaToList ( area , i ) ;
64549: LD_ADDR_VAR 0 6
64553: PUSH
64554: LD_VAR 0 2
64558: PPUSH
64559: LD_VAR 0 5
64563: PPUSH
64564: CALL_OW 517
64568: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64569: LD_ADDR_VAR 0 5
64573: PUSH
64574: DOUBLE
64575: LD_INT 1
64577: DEC
64578: ST_TO_ADDR
64579: LD_VAR 0 6
64583: PUSH
64584: LD_INT 1
64586: ARRAY
64587: PUSH
64588: FOR_TO
64589: IFFALSE 64711
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64591: LD_ADDR_VAR 0 7
64595: PUSH
64596: LD_VAR 0 6
64600: PUSH
64601: LD_INT 1
64603: ARRAY
64604: PUSH
64605: LD_VAR 0 5
64609: ARRAY
64610: PUSH
64611: LD_VAR 0 6
64615: PUSH
64616: LD_INT 2
64618: ARRAY
64619: PUSH
64620: LD_VAR 0 5
64624: ARRAY
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64630: LD_VAR 0 7
64634: PUSH
64635: LD_INT 1
64637: ARRAY
64638: PPUSH
64639: LD_VAR 0 7
64643: PUSH
64644: LD_INT 2
64646: ARRAY
64647: PPUSH
64648: CALL_OW 428
64652: PUSH
64653: LD_INT 0
64655: EQUAL
64656: IFFALSE 64709
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64658: LD_VAR 0 1
64662: PPUSH
64663: LD_VAR 0 7
64667: PUSH
64668: LD_INT 1
64670: ARRAY
64671: PPUSH
64672: LD_VAR 0 7
64676: PUSH
64677: LD_INT 2
64679: ARRAY
64680: PPUSH
64681: LD_VAR 0 3
64685: PPUSH
64686: CALL_OW 48
// result := IsPlaced ( unit ) ;
64690: LD_ADDR_VAR 0 4
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 305
64704: ST_TO_ADDR
// exit ;
64705: POP
64706: POP
64707: GO 64713
// end ; end ;
64709: GO 64588
64711: POP
64712: POP
// end ;
64713: LD_VAR 0 4
64717: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64718: LD_INT 0
64720: PPUSH
64721: PPUSH
64722: PPUSH
// if not side or side > 8 then
64723: LD_VAR 0 1
64727: NOT
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_INT 8
64736: GREATER
64737: OR
64738: IFFALSE 64742
// exit ;
64740: GO 64929
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64742: LD_ADDR_VAR 0 4
64746: PUSH
64747: LD_INT 22
64749: PUSH
64750: LD_VAR 0 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 21
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PPUSH
64773: CALL_OW 69
64777: ST_TO_ADDR
// if not tmp then
64778: LD_VAR 0 4
64782: NOT
64783: IFFALSE 64787
// exit ;
64785: GO 64929
// enable_addtolog := true ;
64787: LD_ADDR_OWVAR 81
64791: PUSH
64792: LD_INT 1
64794: ST_TO_ADDR
// AddToLog ( [ ) ;
64795: LD_STRING [
64797: PPUSH
64798: CALL_OW 561
// for i in tmp do
64802: LD_ADDR_VAR 0 3
64806: PUSH
64807: LD_VAR 0 4
64811: PUSH
64812: FOR_IN
64813: IFFALSE 64920
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64815: LD_STRING [
64817: PUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: CALL_OW 266
64827: STR
64828: PUSH
64829: LD_STRING , 
64831: STR
64832: PUSH
64833: LD_VAR 0 3
64837: PPUSH
64838: CALL_OW 250
64842: STR
64843: PUSH
64844: LD_STRING , 
64846: STR
64847: PUSH
64848: LD_VAR 0 3
64852: PPUSH
64853: CALL_OW 251
64857: STR
64858: PUSH
64859: LD_STRING , 
64861: STR
64862: PUSH
64863: LD_VAR 0 3
64867: PPUSH
64868: CALL_OW 254
64872: STR
64873: PUSH
64874: LD_STRING , 
64876: STR
64877: PUSH
64878: LD_VAR 0 3
64882: PPUSH
64883: LD_INT 1
64885: PPUSH
64886: CALL_OW 268
64890: STR
64891: PUSH
64892: LD_STRING , 
64894: STR
64895: PUSH
64896: LD_VAR 0 3
64900: PPUSH
64901: LD_INT 2
64903: PPUSH
64904: CALL_OW 268
64908: STR
64909: PUSH
64910: LD_STRING ],
64912: STR
64913: PPUSH
64914: CALL_OW 561
// end ;
64918: GO 64812
64920: POP
64921: POP
// AddToLog ( ]; ) ;
64922: LD_STRING ];
64924: PPUSH
64925: CALL_OW 561
// end ;
64929: LD_VAR 0 2
64933: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64934: LD_INT 0
64936: PPUSH
64937: PPUSH
64938: PPUSH
64939: PPUSH
64940: PPUSH
// if not area or not rate or not max then
64941: LD_VAR 0 1
64945: NOT
64946: PUSH
64947: LD_VAR 0 2
64951: NOT
64952: OR
64953: PUSH
64954: LD_VAR 0 4
64958: NOT
64959: OR
64960: IFFALSE 64964
// exit ;
64962: GO 65156
// while 1 do
64964: LD_INT 1
64966: IFFALSE 65156
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64968: LD_ADDR_VAR 0 9
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: LD_INT 1
64980: PPUSH
64981: CALL_OW 287
64985: PUSH
64986: LD_INT 10
64988: MUL
64989: ST_TO_ADDR
// r := rate / 10 ;
64990: LD_ADDR_VAR 0 7
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_INT 10
65002: DIVREAL
65003: ST_TO_ADDR
// time := 1 1$00 ;
65004: LD_ADDR_VAR 0 8
65008: PUSH
65009: LD_INT 2100
65011: ST_TO_ADDR
// if amount < min then
65012: LD_VAR 0 9
65016: PUSH
65017: LD_VAR 0 3
65021: LESS
65022: IFFALSE 65040
// r := r * 2 else
65024: LD_ADDR_VAR 0 7
65028: PUSH
65029: LD_VAR 0 7
65033: PUSH
65034: LD_INT 2
65036: MUL
65037: ST_TO_ADDR
65038: GO 65066
// if amount > max then
65040: LD_VAR 0 9
65044: PUSH
65045: LD_VAR 0 4
65049: GREATER
65050: IFFALSE 65066
// r := r / 2 ;
65052: LD_ADDR_VAR 0 7
65056: PUSH
65057: LD_VAR 0 7
65061: PUSH
65062: LD_INT 2
65064: DIVREAL
65065: ST_TO_ADDR
// time := time / r ;
65066: LD_ADDR_VAR 0 8
65070: PUSH
65071: LD_VAR 0 8
65075: PUSH
65076: LD_VAR 0 7
65080: DIVREAL
65081: ST_TO_ADDR
// if time < 0 then
65082: LD_VAR 0 8
65086: PUSH
65087: LD_INT 0
65089: LESS
65090: IFFALSE 65107
// time := time * - 1 ;
65092: LD_ADDR_VAR 0 8
65096: PUSH
65097: LD_VAR 0 8
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: MUL
65106: ST_TO_ADDR
// wait ( time ) ;
65107: LD_VAR 0 8
65111: PPUSH
65112: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65116: LD_INT 35
65118: PPUSH
65119: LD_INT 875
65121: PPUSH
65122: CALL_OW 12
65126: PPUSH
65127: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65131: LD_INT 1
65133: PPUSH
65134: LD_INT 5
65136: PPUSH
65137: CALL_OW 12
65141: PPUSH
65142: LD_VAR 0 1
65146: PPUSH
65147: LD_INT 1
65149: PPUSH
65150: CALL_OW 55
// end ;
65154: GO 64964
// end ;
65156: LD_VAR 0 5
65160: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65161: LD_INT 0
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
65167: PPUSH
65168: PPUSH
65169: PPUSH
65170: PPUSH
// if not turrets or not factories then
65171: LD_VAR 0 1
65175: NOT
65176: PUSH
65177: LD_VAR 0 2
65181: NOT
65182: OR
65183: IFFALSE 65187
// exit ;
65185: GO 65494
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65187: LD_ADDR_VAR 0 10
65191: PUSH
65192: LD_INT 5
65194: PUSH
65195: LD_INT 6
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: LD_INT 4
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: LD_INT 5
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 24
65229: PUSH
65230: LD_INT 25
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 23
65239: PUSH
65240: LD_INT 27
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 42
65253: PUSH
65254: LD_INT 43
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 44
65263: PUSH
65264: LD_INT 46
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 45
65273: PUSH
65274: LD_INT 47
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: LIST
65290: ST_TO_ADDR
// result := [ ] ;
65291: LD_ADDR_VAR 0 3
65295: PUSH
65296: EMPTY
65297: ST_TO_ADDR
// for i in turrets do
65298: LD_ADDR_VAR 0 4
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: FOR_IN
65309: IFFALSE 65492
// begin nat := GetNation ( i ) ;
65311: LD_ADDR_VAR 0 7
65315: PUSH
65316: LD_VAR 0 4
65320: PPUSH
65321: CALL_OW 248
65325: ST_TO_ADDR
// weapon := 0 ;
65326: LD_ADDR_VAR 0 8
65330: PUSH
65331: LD_INT 0
65333: ST_TO_ADDR
// if not nat then
65334: LD_VAR 0 7
65338: NOT
65339: IFFALSE 65343
// continue ;
65341: GO 65308
// for j in list [ nat ] do
65343: LD_ADDR_VAR 0 5
65347: PUSH
65348: LD_VAR 0 10
65352: PUSH
65353: LD_VAR 0 7
65357: ARRAY
65358: PUSH
65359: FOR_IN
65360: IFFALSE 65401
// if GetBWeapon ( i ) = j [ 1 ] then
65362: LD_VAR 0 4
65366: PPUSH
65367: CALL_OW 269
65371: PUSH
65372: LD_VAR 0 5
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: EQUAL
65381: IFFALSE 65399
// begin weapon := j [ 2 ] ;
65383: LD_ADDR_VAR 0 8
65387: PUSH
65388: LD_VAR 0 5
65392: PUSH
65393: LD_INT 2
65395: ARRAY
65396: ST_TO_ADDR
// break ;
65397: GO 65401
// end ;
65399: GO 65359
65401: POP
65402: POP
// if not weapon then
65403: LD_VAR 0 8
65407: NOT
65408: IFFALSE 65412
// continue ;
65410: GO 65308
// for k in factories do
65412: LD_ADDR_VAR 0 6
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: FOR_IN
65423: IFFALSE 65488
// begin weapons := AvailableWeaponList ( k ) ;
65425: LD_ADDR_VAR 0 9
65429: PUSH
65430: LD_VAR 0 6
65434: PPUSH
65435: CALL_OW 478
65439: ST_TO_ADDR
// if not weapons then
65440: LD_VAR 0 9
65444: NOT
65445: IFFALSE 65449
// continue ;
65447: GO 65422
// if weapon in weapons then
65449: LD_VAR 0 8
65453: PUSH
65454: LD_VAR 0 9
65458: IN
65459: IFFALSE 65486
// begin result := [ i , weapon ] ;
65461: LD_ADDR_VAR 0 3
65465: PUSH
65466: LD_VAR 0 4
65470: PUSH
65471: LD_VAR 0 8
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: ST_TO_ADDR
// exit ;
65480: POP
65481: POP
65482: POP
65483: POP
65484: GO 65494
// end ; end ;
65486: GO 65422
65488: POP
65489: POP
// end ;
65490: GO 65308
65492: POP
65493: POP
// end ;
65494: LD_VAR 0 3
65498: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65499: LD_INT 0
65501: PPUSH
// if not side or side > 8 then
65502: LD_VAR 0 3
65506: NOT
65507: PUSH
65508: LD_VAR 0 3
65512: PUSH
65513: LD_INT 8
65515: GREATER
65516: OR
65517: IFFALSE 65521
// exit ;
65519: GO 65580
// if not range then
65521: LD_VAR 0 4
65525: NOT
65526: IFFALSE 65537
// range := - 12 ;
65528: LD_ADDR_VAR 0 4
65532: PUSH
65533: LD_INT 12
65535: NEG
65536: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65537: LD_VAR 0 1
65541: PPUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: LD_VAR 0 3
65551: PPUSH
65552: LD_VAR 0 4
65556: PPUSH
65557: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65561: LD_VAR 0 1
65565: PPUSH
65566: LD_VAR 0 2
65570: PPUSH
65571: LD_VAR 0 3
65575: PPUSH
65576: CALL_OW 331
// end ;
65580: LD_VAR 0 5
65584: RET
// export function Video ( mode ) ; begin
65585: LD_INT 0
65587: PPUSH
// ingame_video = mode ;
65588: LD_ADDR_OWVAR 52
65592: PUSH
65593: LD_VAR 0 1
65597: ST_TO_ADDR
// interface_hidden = mode ;
65598: LD_ADDR_OWVAR 54
65602: PUSH
65603: LD_VAR 0 1
65607: ST_TO_ADDR
// end ;
65608: LD_VAR 0 2
65612: RET
// export function Join ( array , element ) ; begin
65613: LD_INT 0
65615: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_VAR 0 1
65625: PPUSH
65626: LD_VAR 0 1
65630: PUSH
65631: LD_INT 1
65633: PLUS
65634: PPUSH
65635: LD_VAR 0 2
65639: PPUSH
65640: CALL_OW 1
65644: ST_TO_ADDR
// end ;
65645: LD_VAR 0 3
65649: RET
// export function JoinUnion ( array , element ) ; begin
65650: LD_INT 0
65652: PPUSH
// result := array union element ;
65653: LD_ADDR_VAR 0 3
65657: PUSH
65658: LD_VAR 0 1
65662: PUSH
65663: LD_VAR 0 2
65667: UNION
65668: ST_TO_ADDR
// end ;
65669: LD_VAR 0 3
65673: RET
// export function GetBehemoths ( side ) ; begin
65674: LD_INT 0
65676: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: LD_INT 22
65684: PUSH
65685: LD_VAR 0 1
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 31
65696: PUSH
65697: LD_INT 25
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PPUSH
65708: CALL_OW 69
65712: ST_TO_ADDR
// end ;
65713: LD_VAR 0 2
65717: RET
// export function Shuffle ( array ) ; var i , index ; begin
65718: LD_INT 0
65720: PPUSH
65721: PPUSH
65722: PPUSH
// result := [ ] ;
65723: LD_ADDR_VAR 0 2
65727: PUSH
65728: EMPTY
65729: ST_TO_ADDR
// if not array then
65730: LD_VAR 0 1
65734: NOT
65735: IFFALSE 65739
// exit ;
65737: GO 65838
// Randomize ;
65739: CALL_OW 10
// for i = array downto 1 do
65743: LD_ADDR_VAR 0 3
65747: PUSH
65748: DOUBLE
65749: LD_VAR 0 1
65753: INC
65754: ST_TO_ADDR
65755: LD_INT 1
65757: PUSH
65758: FOR_DOWNTO
65759: IFFALSE 65836
// begin index := rand ( 1 , array ) ;
65761: LD_ADDR_VAR 0 4
65765: PUSH
65766: LD_INT 1
65768: PPUSH
65769: LD_VAR 0 1
65773: PPUSH
65774: CALL_OW 12
65778: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65779: LD_ADDR_VAR 0 2
65783: PUSH
65784: LD_VAR 0 2
65788: PPUSH
65789: LD_VAR 0 2
65793: PUSH
65794: LD_INT 1
65796: PLUS
65797: PPUSH
65798: LD_VAR 0 1
65802: PUSH
65803: LD_VAR 0 4
65807: ARRAY
65808: PPUSH
65809: CALL_OW 2
65813: ST_TO_ADDR
// array := Delete ( array , index ) ;
65814: LD_ADDR_VAR 0 1
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: LD_VAR 0 4
65828: PPUSH
65829: CALL_OW 3
65833: ST_TO_ADDR
// end ;
65834: GO 65758
65836: POP
65837: POP
// end ;
65838: LD_VAR 0 2
65842: RET
// export function GetBaseMaterials ( base ) ; begin
65843: LD_INT 0
65845: PPUSH
// result := [ 0 , 0 , 0 ] ;
65846: LD_ADDR_VAR 0 2
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// if not base then
65865: LD_VAR 0 1
65869: NOT
65870: IFFALSE 65874
// exit ;
65872: GO 65923
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65874: LD_ADDR_VAR 0 2
65878: PUSH
65879: LD_VAR 0 1
65883: PPUSH
65884: LD_INT 1
65886: PPUSH
65887: CALL_OW 275
65891: PUSH
65892: LD_VAR 0 1
65896: PPUSH
65897: LD_INT 2
65899: PPUSH
65900: CALL_OW 275
65904: PUSH
65905: LD_VAR 0 1
65909: PPUSH
65910: LD_INT 3
65912: PPUSH
65913: CALL_OW 275
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// end ;
65923: LD_VAR 0 2
65927: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65928: LD_INT 0
65930: PPUSH
65931: PPUSH
// result := array ;
65932: LD_ADDR_VAR 0 3
65936: PUSH
65937: LD_VAR 0 1
65941: ST_TO_ADDR
// if size > 0 then
65942: LD_VAR 0 2
65946: PUSH
65947: LD_INT 0
65949: GREATER
65950: IFFALSE 65996
// for i := array downto size do
65952: LD_ADDR_VAR 0 4
65956: PUSH
65957: DOUBLE
65958: LD_VAR 0 1
65962: INC
65963: ST_TO_ADDR
65964: LD_VAR 0 2
65968: PUSH
65969: FOR_DOWNTO
65970: IFFALSE 65994
// result := Delete ( result , result ) ;
65972: LD_ADDR_VAR 0 3
65976: PUSH
65977: LD_VAR 0 3
65981: PPUSH
65982: LD_VAR 0 3
65986: PPUSH
65987: CALL_OW 3
65991: ST_TO_ADDR
65992: GO 65969
65994: POP
65995: POP
// end ;
65996: LD_VAR 0 3
66000: RET
// export function ComExit ( unit ) ; var tmp ; begin
66001: LD_INT 0
66003: PPUSH
66004: PPUSH
// if not IsInUnit ( unit ) then
66005: LD_VAR 0 1
66009: PPUSH
66010: CALL_OW 310
66014: NOT
66015: IFFALSE 66019
// exit ;
66017: GO 66079
// tmp := IsInUnit ( unit ) ;
66019: LD_ADDR_VAR 0 3
66023: PUSH
66024: LD_VAR 0 1
66028: PPUSH
66029: CALL_OW 310
66033: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66034: LD_VAR 0 3
66038: PPUSH
66039: CALL_OW 247
66043: PUSH
66044: LD_INT 2
66046: EQUAL
66047: IFFALSE 66060
// ComExitVehicle ( unit ) else
66049: LD_VAR 0 1
66053: PPUSH
66054: CALL_OW 121
66058: GO 66069
// ComExitBuilding ( unit ) ;
66060: LD_VAR 0 1
66064: PPUSH
66065: CALL_OW 122
// result := tmp ;
66069: LD_ADDR_VAR 0 2
66073: PUSH
66074: LD_VAR 0 3
66078: ST_TO_ADDR
// end ;
66079: LD_VAR 0 2
66083: RET
// export function ComExitAll ( units ) ; var i ; begin
66084: LD_INT 0
66086: PPUSH
66087: PPUSH
// if not units then
66088: LD_VAR 0 1
66092: NOT
66093: IFFALSE 66097
// exit ;
66095: GO 66123
// for i in units do
66097: LD_ADDR_VAR 0 3
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: FOR_IN
66108: IFFALSE 66121
// ComExit ( i ) ;
66110: LD_VAR 0 3
66114: PPUSH
66115: CALL 66001 0 1
66119: GO 66107
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 2
66127: RET
// export function ResetHc ; begin
66128: LD_INT 0
66130: PPUSH
// InitHc ;
66131: CALL_OW 19
// hc_importance := 0 ;
66135: LD_ADDR_OWVAR 32
66139: PUSH
66140: LD_INT 0
66142: ST_TO_ADDR
// end ;
66143: LD_VAR 0 1
66147: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66148: LD_INT 0
66150: PPUSH
66151: PPUSH
66152: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66153: LD_ADDR_VAR 0 6
66157: PUSH
66158: LD_VAR 0 1
66162: PUSH
66163: LD_VAR 0 3
66167: PLUS
66168: PUSH
66169: LD_INT 2
66171: DIV
66172: ST_TO_ADDR
// if _x < 0 then
66173: LD_VAR 0 6
66177: PUSH
66178: LD_INT 0
66180: LESS
66181: IFFALSE 66198
// _x := _x * - 1 ;
66183: LD_ADDR_VAR 0 6
66187: PUSH
66188: LD_VAR 0 6
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: MUL
66197: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66198: LD_ADDR_VAR 0 7
66202: PUSH
66203: LD_VAR 0 2
66207: PUSH
66208: LD_VAR 0 4
66212: PLUS
66213: PUSH
66214: LD_INT 2
66216: DIV
66217: ST_TO_ADDR
// if _y < 0 then
66218: LD_VAR 0 7
66222: PUSH
66223: LD_INT 0
66225: LESS
66226: IFFALSE 66243
// _y := _y * - 1 ;
66228: LD_ADDR_VAR 0 7
66232: PUSH
66233: LD_VAR 0 7
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: MUL
66242: ST_TO_ADDR
// result := [ _x , _y ] ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: LD_VAR 0 6
66252: PUSH
66253: LD_VAR 0 7
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// end ;
66262: LD_VAR 0 5
66266: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66267: LD_INT 0
66269: PPUSH
66270: PPUSH
66271: PPUSH
66272: PPUSH
// task := GetTaskList ( unit ) ;
66273: LD_ADDR_VAR 0 7
66277: PUSH
66278: LD_VAR 0 1
66282: PPUSH
66283: CALL_OW 437
66287: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66288: LD_VAR 0 7
66292: NOT
66293: PUSH
66294: LD_VAR 0 1
66298: PPUSH
66299: LD_VAR 0 2
66303: PPUSH
66304: CALL_OW 308
66308: NOT
66309: AND
66310: IFFALSE 66314
// exit ;
66312: GO 66432
// if IsInArea ( unit , area ) then
66314: LD_VAR 0 1
66318: PPUSH
66319: LD_VAR 0 2
66323: PPUSH
66324: CALL_OW 308
66328: IFFALSE 66346
// begin ComMoveToArea ( unit , goAway ) ;
66330: LD_VAR 0 1
66334: PPUSH
66335: LD_VAR 0 3
66339: PPUSH
66340: CALL_OW 113
// exit ;
66344: GO 66432
// end ; if task [ 1 ] [ 1 ] <> M then
66346: LD_VAR 0 7
66350: PUSH
66351: LD_INT 1
66353: ARRAY
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_STRING M
66361: NONEQUAL
66362: IFFALSE 66366
// exit ;
66364: GO 66432
// x := task [ 1 ] [ 2 ] ;
66366: LD_ADDR_VAR 0 5
66370: PUSH
66371: LD_VAR 0 7
66375: PUSH
66376: LD_INT 1
66378: ARRAY
66379: PUSH
66380: LD_INT 2
66382: ARRAY
66383: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66384: LD_ADDR_VAR 0 6
66388: PUSH
66389: LD_VAR 0 7
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PUSH
66398: LD_INT 3
66400: ARRAY
66401: ST_TO_ADDR
// if InArea ( x , y , area ) then
66402: LD_VAR 0 5
66406: PPUSH
66407: LD_VAR 0 6
66411: PPUSH
66412: LD_VAR 0 2
66416: PPUSH
66417: CALL_OW 309
66421: IFFALSE 66432
// ComStop ( unit ) ;
66423: LD_VAR 0 1
66427: PPUSH
66428: CALL_OW 141
// end ;
66432: LD_VAR 0 4
66436: RET
// export function Abs ( value ) ; begin
66437: LD_INT 0
66439: PPUSH
// result := value ;
66440: LD_ADDR_VAR 0 2
66444: PUSH
66445: LD_VAR 0 1
66449: ST_TO_ADDR
// if value < 0 then
66450: LD_VAR 0 1
66454: PUSH
66455: LD_INT 0
66457: LESS
66458: IFFALSE 66475
// result := value * - 1 ;
66460: LD_ADDR_VAR 0 2
66464: PUSH
66465: LD_VAR 0 1
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: MUL
66474: ST_TO_ADDR
// end ;
66475: LD_VAR 0 2
66479: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66480: LD_INT 0
66482: PPUSH
66483: PPUSH
66484: PPUSH
66485: PPUSH
66486: PPUSH
66487: PPUSH
66488: PPUSH
66489: PPUSH
// if not unit or not building then
66490: LD_VAR 0 1
66494: NOT
66495: PUSH
66496: LD_VAR 0 2
66500: NOT
66501: OR
66502: IFFALSE 66506
// exit ;
66504: GO 66732
// x := GetX ( building ) ;
66506: LD_ADDR_VAR 0 4
66510: PUSH
66511: LD_VAR 0 2
66515: PPUSH
66516: CALL_OW 250
66520: ST_TO_ADDR
// y := GetY ( building ) ;
66521: LD_ADDR_VAR 0 6
66525: PUSH
66526: LD_VAR 0 2
66530: PPUSH
66531: CALL_OW 251
66535: ST_TO_ADDR
// d := GetDir ( building ) ;
66536: LD_ADDR_VAR 0 8
66540: PUSH
66541: LD_VAR 0 2
66545: PPUSH
66546: CALL_OW 254
66550: ST_TO_ADDR
// r := 4 ;
66551: LD_ADDR_VAR 0 9
66555: PUSH
66556: LD_INT 4
66558: ST_TO_ADDR
// for i := 1 to 5 do
66559: LD_ADDR_VAR 0 10
66563: PUSH
66564: DOUBLE
66565: LD_INT 1
66567: DEC
66568: ST_TO_ADDR
66569: LD_INT 5
66571: PUSH
66572: FOR_TO
66573: IFFALSE 66730
// begin _x := ShiftX ( x , d , r + i ) ;
66575: LD_ADDR_VAR 0 5
66579: PUSH
66580: LD_VAR 0 4
66584: PPUSH
66585: LD_VAR 0 8
66589: PPUSH
66590: LD_VAR 0 9
66594: PUSH
66595: LD_VAR 0 10
66599: PLUS
66600: PPUSH
66601: CALL_OW 272
66605: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66606: LD_ADDR_VAR 0 7
66610: PUSH
66611: LD_VAR 0 6
66615: PPUSH
66616: LD_VAR 0 8
66620: PPUSH
66621: LD_VAR 0 9
66625: PUSH
66626: LD_VAR 0 10
66630: PLUS
66631: PPUSH
66632: CALL_OW 273
66636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66637: LD_VAR 0 5
66641: PPUSH
66642: LD_VAR 0 7
66646: PPUSH
66647: CALL_OW 488
66651: PUSH
66652: LD_VAR 0 5
66656: PPUSH
66657: LD_VAR 0 7
66661: PPUSH
66662: CALL_OW 428
66666: PPUSH
66667: CALL_OW 247
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: LD_INT 2
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: IN
66682: NOT
66683: AND
66684: IFFALSE 66728
// begin ComMoveXY ( unit , _x , _y ) ;
66686: LD_VAR 0 1
66690: PPUSH
66691: LD_VAR 0 5
66695: PPUSH
66696: LD_VAR 0 7
66700: PPUSH
66701: CALL_OW 111
// result := [ _x , _y ] ;
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: LD_VAR 0 5
66714: PUSH
66715: LD_VAR 0 7
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// exit ;
66724: POP
66725: POP
66726: GO 66732
// end ; end ;
66728: GO 66572
66730: POP
66731: POP
// end ;
66732: LD_VAR 0 3
66736: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66737: LD_INT 0
66739: PPUSH
66740: PPUSH
66741: PPUSH
// result := 0 ;
66742: LD_ADDR_VAR 0 3
66746: PUSH
66747: LD_INT 0
66749: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66750: LD_VAR 0 1
66754: PUSH
66755: LD_INT 0
66757: LESS
66758: PUSH
66759: LD_VAR 0 1
66763: PUSH
66764: LD_INT 8
66766: GREATER
66767: OR
66768: PUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 0
66776: LESS
66777: OR
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 8
66786: GREATER
66787: OR
66788: IFFALSE 66792
// exit ;
66790: GO 66867
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66792: LD_ADDR_VAR 0 4
66796: PUSH
66797: LD_INT 22
66799: PUSH
66800: LD_VAR 0 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PPUSH
66809: CALL_OW 69
66813: PUSH
66814: FOR_IN
66815: IFFALSE 66865
// begin un := UnitShoot ( i ) ;
66817: LD_ADDR_VAR 0 5
66821: PUSH
66822: LD_VAR 0 4
66826: PPUSH
66827: CALL_OW 504
66831: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66832: LD_VAR 0 5
66836: PPUSH
66837: CALL_OW 255
66841: PUSH
66842: LD_VAR 0 1
66846: EQUAL
66847: IFFALSE 66863
// begin result := un ;
66849: LD_ADDR_VAR 0 3
66853: PUSH
66854: LD_VAR 0 5
66858: ST_TO_ADDR
// exit ;
66859: POP
66860: POP
66861: GO 66867
// end ; end ;
66863: GO 66814
66865: POP
66866: POP
// end ;
66867: LD_VAR 0 3
66871: RET
// export function GetCargoBay ( units ) ; begin
66872: LD_INT 0
66874: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66875: LD_ADDR_VAR 0 2
66879: PUSH
66880: LD_VAR 0 1
66884: PPUSH
66885: LD_INT 2
66887: PUSH
66888: LD_INT 34
66890: PUSH
66891: LD_INT 12
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 34
66900: PUSH
66901: LD_INT 51
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 34
66910: PUSH
66911: LD_INT 32
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 34
66920: PUSH
66921: LD_EXP 107
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: PPUSH
66937: CALL_OW 72
66941: ST_TO_ADDR
// end ;
66942: LD_VAR 0 2
66946: RET
// export function Negate ( value ) ; begin
66947: LD_INT 0
66949: PPUSH
// result := not value ;
66950: LD_ADDR_VAR 0 2
66954: PUSH
66955: LD_VAR 0 1
66959: NOT
66960: ST_TO_ADDR
// end ;
66961: LD_VAR 0 2
66965: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66966: LD_INT 0
66968: PPUSH
// if x1 = x2 then
66969: LD_VAR 0 1
66973: PUSH
66974: LD_VAR 0 3
66978: EQUAL
66979: IFFALSE 67013
// begin if y1 > y2 then
66981: LD_VAR 0 2
66985: PUSH
66986: LD_VAR 0 4
66990: GREATER
66991: IFFALSE 67003
// result := 0 else
66993: LD_ADDR_VAR 0 5
66997: PUSH
66998: LD_INT 0
67000: ST_TO_ADDR
67001: GO 67011
// result := 3 ;
67003: LD_ADDR_VAR 0 5
67007: PUSH
67008: LD_INT 3
67010: ST_TO_ADDR
// exit ;
67011: GO 67099
// end ; if y1 = y2 then
67013: LD_VAR 0 2
67017: PUSH
67018: LD_VAR 0 4
67022: EQUAL
67023: IFFALSE 67057
// begin if x1 > x2 then
67025: LD_VAR 0 1
67029: PUSH
67030: LD_VAR 0 3
67034: GREATER
67035: IFFALSE 67047
// result := 1 else
67037: LD_ADDR_VAR 0 5
67041: PUSH
67042: LD_INT 1
67044: ST_TO_ADDR
67045: GO 67055
// result := 4 ;
67047: LD_ADDR_VAR 0 5
67051: PUSH
67052: LD_INT 4
67054: ST_TO_ADDR
// exit ;
67055: GO 67099
// end ; if x1 > x2 and y1 > y2 then
67057: LD_VAR 0 1
67061: PUSH
67062: LD_VAR 0 3
67066: GREATER
67067: PUSH
67068: LD_VAR 0 2
67072: PUSH
67073: LD_VAR 0 4
67077: GREATER
67078: AND
67079: IFFALSE 67091
// result := 2 else
67081: LD_ADDR_VAR 0 5
67085: PUSH
67086: LD_INT 2
67088: ST_TO_ADDR
67089: GO 67099
// result := 5 ;
67091: LD_ADDR_VAR 0 5
67095: PUSH
67096: LD_INT 5
67098: ST_TO_ADDR
// end ;
67099: LD_VAR 0 5
67103: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67104: LD_INT 0
67106: PPUSH
67107: PPUSH
// if not driver or not IsInUnit ( driver ) then
67108: LD_VAR 0 1
67112: NOT
67113: PUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: CALL_OW 310
67123: NOT
67124: OR
67125: IFFALSE 67129
// exit ;
67127: GO 67219
// vehicle := IsInUnit ( driver ) ;
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 310
67143: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_STRING \
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: PUSH
67179: LD_STRING E
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_VAR 0 3
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PPUSH
67215: CALL_OW 446
// end ;
67219: LD_VAR 0 2
67223: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
// if not driver or not IsInUnit ( driver ) then
67228: LD_VAR 0 1
67232: NOT
67233: PUSH
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 310
67243: NOT
67244: OR
67245: IFFALSE 67249
// exit ;
67247: GO 67339
// vehicle := IsInUnit ( driver ) ;
67249: LD_ADDR_VAR 0 3
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL_OW 310
67263: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67264: LD_VAR 0 1
67268: PPUSH
67269: LD_STRING \
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: PUSH
67299: LD_STRING E
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_VAR 0 3
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PPUSH
67335: CALL_OW 447
// end ;
67339: LD_VAR 0 2
67343: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
67348: PPUSH
// tmp := [ ] ;
67349: LD_ADDR_VAR 0 5
67353: PUSH
67354: EMPTY
67355: ST_TO_ADDR
// for i in units do
67356: LD_ADDR_VAR 0 4
67360: PUSH
67361: LD_VAR 0 1
67365: PUSH
67366: FOR_IN
67367: IFFALSE 67405
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67369: LD_ADDR_VAR 0 5
67373: PUSH
67374: LD_VAR 0 5
67378: PPUSH
67379: LD_VAR 0 5
67383: PUSH
67384: LD_INT 1
67386: PLUS
67387: PPUSH
67388: LD_VAR 0 4
67392: PPUSH
67393: CALL_OW 256
67397: PPUSH
67398: CALL_OW 2
67402: ST_TO_ADDR
67403: GO 67366
67405: POP
67406: POP
// if not tmp then
67407: LD_VAR 0 5
67411: NOT
67412: IFFALSE 67416
// exit ;
67414: GO 67464
// if asc then
67416: LD_VAR 0 2
67420: IFFALSE 67444
// result := SortListByListAsc ( units , tmp ) else
67422: LD_ADDR_VAR 0 3
67426: PUSH
67427: LD_VAR 0 1
67431: PPUSH
67432: LD_VAR 0 5
67436: PPUSH
67437: CALL_OW 76
67441: ST_TO_ADDR
67442: GO 67464
// result := SortListByListDesc ( units , tmp ) ;
67444: LD_ADDR_VAR 0 3
67448: PUSH
67449: LD_VAR 0 1
67453: PPUSH
67454: LD_VAR 0 5
67458: PPUSH
67459: CALL_OW 77
67463: ST_TO_ADDR
// end ;
67464: LD_VAR 0 3
67468: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
// task := GetTaskList ( mech ) ;
67473: LD_ADDR_VAR 0 4
67477: PUSH
67478: LD_VAR 0 1
67482: PPUSH
67483: CALL_OW 437
67487: ST_TO_ADDR
// if not task then
67488: LD_VAR 0 4
67492: NOT
67493: IFFALSE 67497
// exit ;
67495: GO 67539
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67497: LD_ADDR_VAR 0 3
67501: PUSH
67502: LD_VAR 0 4
67506: PUSH
67507: LD_INT 1
67509: ARRAY
67510: PUSH
67511: LD_INT 1
67513: ARRAY
67514: PUSH
67515: LD_STRING r
67517: EQUAL
67518: PUSH
67519: LD_VAR 0 4
67523: PUSH
67524: LD_INT 1
67526: ARRAY
67527: PUSH
67528: LD_INT 4
67530: ARRAY
67531: PUSH
67532: LD_VAR 0 2
67536: EQUAL
67537: AND
67538: ST_TO_ADDR
// end ;
67539: LD_VAR 0 3
67543: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67544: LD_INT 0
67546: PPUSH
// SetDir ( unit , d ) ;
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_VAR 0 4
67556: PPUSH
67557: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67561: LD_VAR 0 1
67565: PPUSH
67566: LD_VAR 0 2
67570: PPUSH
67571: LD_VAR 0 3
67575: PPUSH
67576: LD_VAR 0 5
67580: PPUSH
67581: CALL_OW 48
// end ;
67585: LD_VAR 0 6
67589: RET
// export function ToNaturalNumber ( number ) ; begin
67590: LD_INT 0
67592: PPUSH
// result := number div 1 ;
67593: LD_ADDR_VAR 0 2
67597: PUSH
67598: LD_VAR 0 1
67602: PUSH
67603: LD_INT 1
67605: DIV
67606: ST_TO_ADDR
// if number < 0 then
67607: LD_VAR 0 1
67611: PUSH
67612: LD_INT 0
67614: LESS
67615: IFFALSE 67625
// result := 0 ;
67617: LD_ADDR_VAR 0 2
67621: PUSH
67622: LD_INT 0
67624: ST_TO_ADDR
// end ;
67625: LD_VAR 0 2
67629: RET
// export function SortByClass ( units , class ) ; var un ; begin
67630: LD_INT 0
67632: PPUSH
67633: PPUSH
// if not units or not class then
67634: LD_VAR 0 1
67638: NOT
67639: PUSH
67640: LD_VAR 0 2
67644: NOT
67645: OR
67646: IFFALSE 67650
// exit ;
67648: GO 67745
// result := [ ] ;
67650: LD_ADDR_VAR 0 3
67654: PUSH
67655: EMPTY
67656: ST_TO_ADDR
// for un in units do
67657: LD_ADDR_VAR 0 4
67661: PUSH
67662: LD_VAR 0 1
67666: PUSH
67667: FOR_IN
67668: IFFALSE 67743
// if GetClass ( un ) = class then
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL_OW 257
67679: PUSH
67680: LD_VAR 0 2
67684: EQUAL
67685: IFFALSE 67712
// result := Insert ( result , 1 , un ) else
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_VAR 0 3
67696: PPUSH
67697: LD_INT 1
67699: PPUSH
67700: LD_VAR 0 4
67704: PPUSH
67705: CALL_OW 2
67709: ST_TO_ADDR
67710: GO 67741
// result := Replace ( result , result + 1 , un ) ;
67712: LD_ADDR_VAR 0 3
67716: PUSH
67717: LD_VAR 0 3
67721: PPUSH
67722: LD_VAR 0 3
67726: PUSH
67727: LD_INT 1
67729: PLUS
67730: PPUSH
67731: LD_VAR 0 4
67735: PPUSH
67736: CALL_OW 1
67740: ST_TO_ADDR
67741: GO 67667
67743: POP
67744: POP
// end ;
67745: LD_VAR 0 3
67749: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67750: LD_INT 0
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
67758: PPUSH
// result := [ ] ;
67759: LD_ADDR_VAR 0 4
67763: PUSH
67764: EMPTY
67765: ST_TO_ADDR
// if x - r < 0 then
67766: LD_VAR 0 1
67770: PUSH
67771: LD_VAR 0 3
67775: MINUS
67776: PUSH
67777: LD_INT 0
67779: LESS
67780: IFFALSE 67792
// min_x := 0 else
67782: LD_ADDR_VAR 0 8
67786: PUSH
67787: LD_INT 0
67789: ST_TO_ADDR
67790: GO 67808
// min_x := x - r ;
67792: LD_ADDR_VAR 0 8
67796: PUSH
67797: LD_VAR 0 1
67801: PUSH
67802: LD_VAR 0 3
67806: MINUS
67807: ST_TO_ADDR
// if y - r < 0 then
67808: LD_VAR 0 2
67812: PUSH
67813: LD_VAR 0 3
67817: MINUS
67818: PUSH
67819: LD_INT 0
67821: LESS
67822: IFFALSE 67834
// min_y := 0 else
67824: LD_ADDR_VAR 0 7
67828: PUSH
67829: LD_INT 0
67831: ST_TO_ADDR
67832: GO 67850
// min_y := y - r ;
67834: LD_ADDR_VAR 0 7
67838: PUSH
67839: LD_VAR 0 2
67843: PUSH
67844: LD_VAR 0 3
67848: MINUS
67849: ST_TO_ADDR
// max_x := x + r ;
67850: LD_ADDR_VAR 0 9
67854: PUSH
67855: LD_VAR 0 1
67859: PUSH
67860: LD_VAR 0 3
67864: PLUS
67865: ST_TO_ADDR
// max_y := y + r ;
67866: LD_ADDR_VAR 0 10
67870: PUSH
67871: LD_VAR 0 2
67875: PUSH
67876: LD_VAR 0 3
67880: PLUS
67881: ST_TO_ADDR
// for _x = min_x to max_x do
67882: LD_ADDR_VAR 0 5
67886: PUSH
67887: DOUBLE
67888: LD_VAR 0 8
67892: DEC
67893: ST_TO_ADDR
67894: LD_VAR 0 9
67898: PUSH
67899: FOR_TO
67900: IFFALSE 68001
// for _y = min_y to max_y do
67902: LD_ADDR_VAR 0 6
67906: PUSH
67907: DOUBLE
67908: LD_VAR 0 7
67912: DEC
67913: ST_TO_ADDR
67914: LD_VAR 0 10
67918: PUSH
67919: FOR_TO
67920: IFFALSE 67997
// begin if not ValidHex ( _x , _y ) then
67922: LD_VAR 0 5
67926: PPUSH
67927: LD_VAR 0 6
67931: PPUSH
67932: CALL_OW 488
67936: NOT
67937: IFFALSE 67941
// continue ;
67939: GO 67919
// if GetResourceTypeXY ( _x , _y ) then
67941: LD_VAR 0 5
67945: PPUSH
67946: LD_VAR 0 6
67950: PPUSH
67951: CALL_OW 283
67955: IFFALSE 67995
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67957: LD_ADDR_VAR 0 4
67961: PUSH
67962: LD_VAR 0 4
67966: PPUSH
67967: LD_VAR 0 4
67971: PUSH
67972: LD_INT 1
67974: PLUS
67975: PPUSH
67976: LD_VAR 0 5
67980: PUSH
67981: LD_VAR 0 6
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PPUSH
67990: CALL_OW 1
67994: ST_TO_ADDR
// end ;
67995: GO 67919
67997: POP
67998: POP
67999: GO 67899
68001: POP
68002: POP
// end ;
68003: LD_VAR 0 4
68007: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
68013: PPUSH
68014: PPUSH
68015: PPUSH
// if not units then
68016: LD_VAR 0 1
68020: NOT
68021: IFFALSE 68025
// exit ;
68023: GO 68426
// result := UnitFilter ( units , [ f_ok ] ) ;
68025: LD_ADDR_VAR 0 3
68029: PUSH
68030: LD_VAR 0 1
68034: PPUSH
68035: LD_INT 50
68037: PUSH
68038: EMPTY
68039: LIST
68040: PPUSH
68041: CALL_OW 72
68045: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68046: LD_ADDR_VAR 0 7
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_INT 1
68058: ARRAY
68059: PPUSH
68060: CALL_OW 255
68064: ST_TO_ADDR
// if not result then
68065: LD_VAR 0 3
68069: NOT
68070: IFFALSE 68074
// exit ;
68072: GO 68426
// for i in result do
68074: LD_ADDR_VAR 0 4
68078: PUSH
68079: LD_VAR 0 3
68083: PUSH
68084: FOR_IN
68085: IFFALSE 68424
// begin tag := GetTag ( i ) + 1 ;
68087: LD_ADDR_VAR 0 8
68091: PUSH
68092: LD_VAR 0 4
68096: PPUSH
68097: CALL_OW 110
68101: PUSH
68102: LD_INT 1
68104: PLUS
68105: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68106: LD_ADDR_VAR 0 6
68110: PUSH
68111: LD_VAR 0 4
68115: PPUSH
68116: CALL_OW 250
68120: PPUSH
68121: LD_VAR 0 4
68125: PPUSH
68126: CALL_OW 251
68130: PPUSH
68131: LD_INT 6
68133: PPUSH
68134: CALL 67750 0 3
68138: ST_TO_ADDR
// if cr then
68139: LD_VAR 0 6
68143: IFFALSE 68182
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68145: LD_VAR 0 4
68149: PPUSH
68150: LD_VAR 0 6
68154: PUSH
68155: LD_INT 1
68157: ARRAY
68158: PUSH
68159: LD_INT 1
68161: ARRAY
68162: PPUSH
68163: LD_VAR 0 6
68167: PUSH
68168: LD_INT 1
68170: ARRAY
68171: PUSH
68172: LD_INT 2
68174: ARRAY
68175: PPUSH
68176: CALL_OW 116
68180: GO 68422
// if path > tag then
68182: LD_VAR 0 2
68186: PUSH
68187: LD_VAR 0 8
68191: GREATER
68192: IFFALSE 68370
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
68194: LD_ADDR_VAR 0 5
68198: PUSH
68199: LD_INT 81
68201: PUSH
68202: LD_VAR 0 7
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 91
68213: PUSH
68214: LD_VAR 0 4
68218: PUSH
68219: LD_INT 12
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PPUSH
68231: CALL_OW 69
68235: ST_TO_ADDR
// if enemy then
68236: LD_VAR 0 5
68240: IFFALSE 68268
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68242: LD_VAR 0 4
68246: PPUSH
68247: LD_VAR 0 5
68251: PPUSH
68252: LD_VAR 0 4
68256: PPUSH
68257: CALL_OW 74
68261: PPUSH
68262: CALL_OW 115
68266: GO 68368
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68268: LD_VAR 0 4
68272: PPUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_VAR 0 8
68282: ARRAY
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PPUSH
68288: LD_VAR 0 2
68292: PUSH
68293: LD_VAR 0 8
68297: ARRAY
68298: PUSH
68299: LD_INT 2
68301: ARRAY
68302: PPUSH
68303: CALL_OW 297
68307: PUSH
68308: LD_INT 6
68310: GREATER
68311: IFFALSE 68354
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68313: LD_VAR 0 4
68317: PPUSH
68318: LD_VAR 0 2
68322: PUSH
68323: LD_VAR 0 8
68327: ARRAY
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: PPUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_VAR 0 8
68342: ARRAY
68343: PUSH
68344: LD_INT 2
68346: ARRAY
68347: PPUSH
68348: CALL_OW 114
68352: GO 68368
// SetTag ( i , tag ) ;
68354: LD_VAR 0 4
68358: PPUSH
68359: LD_VAR 0 8
68363: PPUSH
68364: CALL_OW 109
// end else
68368: GO 68422
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68370: LD_ADDR_VAR 0 5
68374: PUSH
68375: LD_INT 81
68377: PUSH
68378: LD_VAR 0 7
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PPUSH
68387: CALL_OW 69
68391: ST_TO_ADDR
// if enemy then
68392: LD_VAR 0 5
68396: IFFALSE 68422
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68398: LD_VAR 0 4
68402: PPUSH
68403: LD_VAR 0 5
68407: PPUSH
68408: LD_VAR 0 4
68412: PPUSH
68413: CALL_OW 74
68417: PPUSH
68418: CALL_OW 115
// end ; end ;
68422: GO 68084
68424: POP
68425: POP
// end ; end_of_file
68426: LD_VAR 0 3
68430: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68431: LD_VAR 0 1
68435: PUSH
68436: LD_INT 200
68438: DOUBLE
68439: GREATEREQUAL
68440: IFFALSE 68448
68442: LD_INT 299
68444: DOUBLE
68445: LESSEQUAL
68446: IFTRUE 68450
68448: GO 68482
68450: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68451: LD_VAR 0 1
68455: PPUSH
68456: LD_VAR 0 2
68460: PPUSH
68461: LD_VAR 0 3
68465: PPUSH
68466: LD_VAR 0 4
68470: PPUSH
68471: LD_VAR 0 5
68475: PPUSH
68476: CALL 11040 0 5
68480: GO 68559
68482: LD_INT 300
68484: DOUBLE
68485: GREATEREQUAL
68486: IFFALSE 68494
68488: LD_INT 399
68490: DOUBLE
68491: LESSEQUAL
68492: IFTRUE 68496
68494: GO 68558
68496: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68497: LD_VAR 0 1
68501: PPUSH
68502: LD_VAR 0 2
68506: PPUSH
68507: LD_VAR 0 3
68511: PPUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: LD_VAR 0 5
68521: PPUSH
68522: LD_VAR 0 6
68526: PPUSH
68527: LD_VAR 0 7
68531: PPUSH
68532: LD_VAR 0 8
68536: PPUSH
68537: LD_VAR 0 9
68541: PPUSH
68542: LD_VAR 0 10
68546: PPUSH
68547: LD_VAR 0 11
68551: PPUSH
68552: CALL 26728 0 11
68556: GO 68559
68558: POP
// end ;
68559: PPOPN 11
68561: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68562: LD_VAR 0 1
68566: PPUSH
68567: LD_VAR 0 2
68571: PPUSH
68572: LD_VAR 0 3
68576: PPUSH
68577: LD_VAR 0 4
68581: PPUSH
68582: LD_VAR 0 5
68586: PPUSH
68587: CALL 11032 0 5
// end ; end_of_file
68591: PPOPN 5
68593: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68594: LD_VAR 0 1
68598: PPUSH
68599: LD_VAR 0 2
68603: PPUSH
68604: LD_VAR 0 3
68608: PPUSH
68609: LD_VAR 0 4
68613: PPUSH
68614: LD_VAR 0 5
68618: PPUSH
68619: LD_VAR 0 6
68623: PPUSH
68624: CALL 14923 0 6
// end ;
68628: PPOPN 6
68630: END
