// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9980 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9355 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9800 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38270 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 70217 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10346 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10226 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63145 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10322 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10330 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 65222 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9270
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9260
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: PUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: LD_VAR 0 4
8975: PPUSH
8976: CALL_OW 546
8980: PUSH
8981: LD_INT 6
8983: ARRAY
8984: PUSH
8985: LD_INT 3
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: LD_INT 5
8993: PUSH
8994: LD_INT 6
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: IN
9003: OR
9004: IFFALSE 9008
// exit ;
9006: GO 9270
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9008: LD_ADDR_VAR 0 9
9012: PUSH
9013: LD_EXP 30
9017: PPUSH
9018: CALL_OW 250
9022: PPUSH
9023: LD_EXP 30
9027: PPUSH
9028: CALL_OW 251
9032: PPUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 298
9047: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9048: LD_ADDR_VAR 0 10
9052: PUSH
9053: LD_VAR 0 9
9057: PPUSH
9058: CALL 8039 0 1
9062: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9063: LD_VAR 0 10
9067: PUSH
9068: LD_OWVAR 2
9072: PPUSH
9073: CALL 5639 0 1
9077: GREATER
9078: IFFALSE 9092
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9080: LD_STRING ArtFrogJumpCost
9082: PPUSH
9083: LD_INT 2
9085: PPUSH
9086: CALL_OW 338
// exit ;
9090: GO 9270
// end ; SetSibResources ( your_side , cost ) ;
9092: LD_OWVAR 2
9096: PPUSH
9097: LD_VAR 0 10
9101: PPUSH
9102: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_VAR 0 4
9115: PPUSH
9116: LD_INT 6
9118: PPUSH
9119: LD_INT 5
9121: NEG
9122: PPUSH
9123: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9127: LD_VAR 0 3
9131: PPUSH
9132: LD_VAR 0 4
9136: PPUSH
9137: LD_INT 6
9139: PPUSH
9140: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9144: LD_EXP 30
9148: PPUSH
9149: LD_VAR 0 3
9153: PPUSH
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 0
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9169: LD_VAR 0 3
9173: PPUSH
9174: LD_VAR 0 4
9178: PPUSH
9179: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9183: LD_ADDR_EXP 30
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// player_artifact_researched := false ;
9191: LD_ADDR_EXP 22
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9199: LD_OWVAR 2
9203: PPUSH
9204: LD_EXP 20
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 7
9216: PPUSH
9217: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9221: LD_OWVAR 2
9225: PPUSH
9226: LD_EXP 21
9230: PPUSH
9231: LD_INT 0
9233: PPUSH
9234: LD_VAR 0 7
9238: PPUSH
9239: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9243: LD_EXP 26
9247: PPUSH
9248: CALL_OW 67
// player_artifact_researched := true ;
9252: LD_ADDR_EXP 22
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// end ; if debug then
9260: LD_EXP 6
9264: IFFALSE 9270
// DebugArtifact ;
9266: CALL 7803 0 0
// end ;
9270: PPOPN 10
9272: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 255
9282: PUSH
9283: LD_OWVAR 2
9287: EQUAL
9288: IFFALSE 9327
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9290: LD_OWVAR 2
9294: PPUSH
9295: LD_EXP 25
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 468
// player_artifact_ready := true ;
9312: LD_ADDR_EXP 29
9316: PUSH
9317: LD_INT 1
9319: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9320: LD_STRING ArtFrogJump
9322: PPUSH
9323: CALL_OW 339
// end ; end ;
9327: PPOPN 1
9329: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9330: LD_OWVAR 2
9334: PPUSH
9335: LD_EXP 25
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 468
// end ;
9352: PPOPN 2
9354: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9355: LD_INT 0
9357: PPUSH
9358: PPUSH
9359: PPUSH
9360: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_INT 81
9368: PUSH
9369: LD_INT 7
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 34
9378: PUSH
9379: LD_INT 48
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 69
9394: PUSH
9395: LD_INT 81
9397: PUSH
9398: LD_INT 7
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 30
9407: PUSH
9408: LD_INT 28
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 69
9423: ADD
9424: PUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 7
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 30
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: ADD
9454: PUSH
9455: LD_INT 81
9457: PUSH
9458: LD_INT 7
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 21
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 69
9483: ADD
9484: PUSH
9485: LD_INT 81
9487: PUSH
9488: LD_INT 7
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 30
9497: PUSH
9498: LD_INT 34
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: ADD
9514: PUSH
9515: LD_INT 81
9517: PUSH
9518: LD_INT 7
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 35
9527: PUSH
9528: LD_INT 49
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: ADD
9544: PUSH
9545: LD_INT 81
9547: PUSH
9548: LD_INT 7
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 35
9557: PUSH
9558: LD_INT 47
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 69
9573: ADD
9574: PUSH
9575: LD_INT 81
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 34
9587: PUSH
9588: LD_INT 47
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 69
9603: ADD
9604: PUSH
9605: LD_INT 81
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 31
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: ADD
9634: PUSH
9635: LD_INT 81
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: LD_INT 3
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: ADD
9664: ST_TO_ADDR
// if not tmp then
9665: LD_VAR 0 3
9669: NOT
9670: IFFALSE 9674
// exit ;
9672: GO 9795
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9674: LD_VAR 0 3
9678: PPUSH
9679: LD_INT 34
9681: PUSH
9682: LD_INT 48
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PPUSH
9689: CALL_OW 72
9693: IFFALSE 9726
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_INT 34
9707: PUSH
9708: LD_INT 48
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 72
9719: PUSH
9720: LD_INT 1
9722: ARRAY
9723: ST_TO_ADDR
9724: GO 9750
// un := tmp [ rand ( 1 , tmp ) ] ;
9726: LD_ADDR_VAR 0 4
9730: PUSH
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 1
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: CALL_OW 12
9748: ARRAY
9749: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9750: LD_EXP 10
9754: NOT
9755: IFFALSE 9786
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9757: LD_ADDR_EXP 10
9761: PUSH
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 250
9771: PUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 251
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: ST_TO_ADDR
// KillUnit ( un ) ;
9786: LD_VAR 0 4
9790: PPUSH
9791: CALL_OW 66
// end ;
9795: LD_VAR 0 1
9799: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9806: LD_ADDR_VAR 0 4
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 33
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// if not tmp then
9840: LD_VAR 0 4
9844: NOT
9845: IFFALSE 9849
// exit ;
9847: GO 9975
// un := tmp [ rand ( 1 , tmp ) ] ;
9849: LD_ADDR_VAR 0 3
9853: PUSH
9854: LD_VAR 0 4
9858: PUSH
9859: LD_INT 1
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 12
9871: ARRAY
9872: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9873: LD_VAR 0 3
9877: PPUSH
9878: CALL_OW 264
9882: PUSH
9883: LD_INT 48
9885: EQUAL
9886: IFFALSE 9905
// ComAttackPlace ( un , 194 , 19 ) else
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 194
9895: PPUSH
9896: LD_INT 19
9898: PPUSH
9899: CALL_OW 116
9903: GO 9939
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 81
9912: PUSH
9913: LD_INT 7
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: CALL_OW 74
9934: PPUSH
9935: CALL_OW 115
// if not alliance_used_artifact_2 then
9939: LD_EXP 11
9943: NOT
9944: IFFALSE 9975
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9946: LD_ADDR_EXP 11
9950: PUSH
9951: LD_VAR 0 3
9955: PPUSH
9956: CALL_OW 250
9960: PUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: CALL_OW 251
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: ST_TO_ADDR
// end ; end_of_file
9975: LD_VAR 0 1
9979: RET
// export function DebugMode ; var i , j , b ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
9984: PPUSH
9985: PPUSH
// enable_addtolog = true ;
9986: LD_ADDR_OWVAR 81
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// FogOff ( 6 ) ;
9994: LD_INT 6
9996: PPUSH
9997: CALL_OW 344
// uc_side = 6 ;
10001: LD_ADDR_OWVAR 20
10005: PUSH
10006: LD_INT 6
10008: ST_TO_ADDR
// uc_nation = 3 ;
10009: LD_ADDR_OWVAR 21
10013: PUSH
10014: LD_INT 3
10016: ST_TO_ADDR
// bc_level = 10 ;
10017: LD_ADDR_OWVAR 43
10021: PUSH
10022: LD_INT 10
10024: ST_TO_ADDR
// bc_type := b_lab_full ;
10025: LD_ADDR_OWVAR 42
10029: PUSH
10030: LD_INT 8
10032: ST_TO_ADDR
// bc_kind1 := 11 ;
10033: LD_ADDR_OWVAR 44
10037: PUSH
10038: LD_INT 11
10040: ST_TO_ADDR
// bc_kind2 := 12 ;
10041: LD_ADDR_OWVAR 45
10045: PUSH
10046: LD_INT 12
10048: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10049: LD_INT 189
10051: PPUSH
10052: LD_INT 20
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 47
// bc_type := b_warehouse ;
10062: LD_ADDR_OWVAR 42
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_INT 201
10077: PPUSH
10078: LD_INT 22
10080: PPUSH
10081: LD_INT 4
10083: PPUSH
10084: CALL_OW 47
10088: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10089: LD_VAR 0 4
10093: PPUSH
10094: CALL_OW 274
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_INT 10000
10104: PPUSH
10105: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10109: LD_VAR 0 4
10113: PPUSH
10114: CALL_OW 274
10118: PPUSH
10119: LD_INT 2
10121: PPUSH
10122: LD_INT 10000
10124: PPUSH
10125: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 274
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: LD_INT 10000
10144: PPUSH
10145: CALL_OW 277
// bc_type := b_siberite_power ;
10149: LD_ADDR_OWVAR 42
10153: PUSH
10154: LD_INT 28
10156: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: LD_INT 216
10164: PPUSH
10165: LD_INT 16
10167: PPUSH
10168: LD_INT 4
10170: PPUSH
10171: CALL_OW 47
10175: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10176: LD_ADDR_VAR 0 4
10180: PUSH
10181: LD_INT 219
10183: PPUSH
10184: LD_INT 16
10186: PPUSH
10187: LD_INT 4
10189: PPUSH
10190: CALL_OW 47
10194: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10195: LD_INT 55
10197: PPUSH
10198: LD_INT 6
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10208: LD_INT 56
10210: PPUSH
10211: LD_INT 6
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 322
// end ; end_of_file
10221: LD_VAR 0 1
10225: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 264
10241: PUSH
10242: LD_INT 91
10244: EQUAL
10245: IFFALSE 10317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10247: LD_INT 68
10249: PPUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 255
10259: PPUSH
10260: CALL_OW 321
10264: PUSH
10265: LD_INT 2
10267: EQUAL
10268: IFFALSE 10280
// eff := 70 else
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 70
10277: ST_TO_ADDR
10278: GO 10288
// eff := 30 ;
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: LD_INT 30
10287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 250
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 251
10307: PPUSH
10308: LD_VAR 0 4
10312: PPUSH
10313: CALL_OW 495
// end ; end ;
10317: LD_VAR 0 2
10321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10322: LD_INT 0
10324: PPUSH
// end ;
10325: LD_VAR 0 4
10329: RET
// export function SOS_Command ( cmd ) ; begin
10330: LD_INT 0
10332: PPUSH
// end ;
10333: LD_VAR 0 2
10337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10338: LD_INT 0
10340: PPUSH
// end ;
10341: LD_VAR 0 6
10345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
// if not vehicle or not factory then
10350: LD_VAR 0 1
10354: NOT
10355: PUSH
10356: LD_VAR 0 2
10360: NOT
10361: OR
10362: IFFALSE 10366
// exit ;
10364: GO 10597
// if factoryWaypoints >= factory then
10366: LD_EXP 104
10370: PUSH
10371: LD_VAR 0 2
10375: GREATEREQUAL
10376: IFFALSE 10597
// if factoryWaypoints [ factory ] then
10378: LD_EXP 104
10382: PUSH
10383: LD_VAR 0 2
10387: ARRAY
10388: IFFALSE 10597
// begin if GetControl ( vehicle ) = control_manual then
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 263
10399: PUSH
10400: LD_INT 1
10402: EQUAL
10403: IFFALSE 10484
// begin driver := IsDrivenBy ( vehicle ) ;
10405: LD_ADDR_VAR 0 4
10409: PUSH
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 311
10419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10420: LD_VAR 0 4
10424: PPUSH
10425: LD_EXP 104
10429: PUSH
10430: LD_VAR 0 2
10434: ARRAY
10435: PUSH
10436: LD_INT 3
10438: ARRAY
10439: PPUSH
10440: LD_EXP 104
10444: PUSH
10445: LD_VAR 0 2
10449: ARRAY
10450: PUSH
10451: LD_INT 4
10453: ARRAY
10454: PPUSH
10455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10468: LD_VAR 0 4
10472: PPUSH
10473: LD_VAR 0 2
10477: PPUSH
10478: CALL_OW 180
// end else
10482: GO 10597
// if GetControl ( vehicle ) = control_remote then
10484: LD_VAR 0 1
10488: PPUSH
10489: CALL_OW 263
10493: PUSH
10494: LD_INT 2
10496: EQUAL
10497: IFFALSE 10558
// begin wait ( 0 0$2 ) ;
10499: LD_INT 70
10501: PPUSH
10502: CALL_OW 67
// if Connect ( vehicle ) then
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL 38270 0 1
10515: IFFALSE 10556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10517: LD_VAR 0 1
10521: PPUSH
10522: LD_EXP 104
10526: PUSH
10527: LD_VAR 0 2
10531: ARRAY
10532: PUSH
10533: LD_INT 3
10535: ARRAY
10536: PPUSH
10537: LD_EXP 104
10541: PUSH
10542: LD_VAR 0 2
10546: ARRAY
10547: PUSH
10548: LD_INT 4
10550: ARRAY
10551: PPUSH
10552: CALL_OW 171
// end else
10556: GO 10597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10558: LD_VAR 0 1
10562: PPUSH
10563: LD_EXP 104
10567: PUSH
10568: LD_VAR 0 2
10572: ARRAY
10573: PUSH
10574: LD_INT 3
10576: ARRAY
10577: PPUSH
10578: LD_EXP 104
10582: PUSH
10583: LD_VAR 0 2
10587: ARRAY
10588: PUSH
10589: LD_INT 4
10591: ARRAY
10592: PPUSH
10593: CALL_OW 171
// end ; end ;
10597: LD_VAR 0 3
10601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10602: LD_INT 0
10604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10605: LD_VAR 0 1
10609: PUSH
10610: LD_INT 250
10612: EQUAL
10613: PUSH
10614: LD_VAR 0 2
10618: PPUSH
10619: CALL_OW 264
10623: PUSH
10624: LD_INT 81
10626: EQUAL
10627: AND
10628: IFFALSE 10649
// MinerPlaceMine ( unit , x , y ) ;
10630: LD_VAR 0 2
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL 13034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 251
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PPUSH
10663: CALL_OW 264
10667: PUSH
10668: LD_INT 81
10670: EQUAL
10671: AND
10672: IFFALSE 10693
// MinerDetonateMine ( unit , x , y ) ;
10674: LD_VAR 0 2
10678: PPUSH
10679: LD_VAR 0 4
10683: PPUSH
10684: LD_VAR 0 5
10688: PPUSH
10689: CALL 13309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 252
10700: EQUAL
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 264
10711: PUSH
10712: LD_INT 81
10714: EQUAL
10715: AND
10716: IFFALSE 10737
// MinerCreateMinefield ( unit , x , y ) ;
10718: LD_VAR 0 2
10722: PPUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: LD_VAR 0 5
10732: PPUSH
10733: CALL 13726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10737: LD_VAR 0 1
10741: PUSH
10742: LD_INT 253
10744: EQUAL
10745: PUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 257
10755: PUSH
10756: LD_INT 5
10758: EQUAL
10759: AND
10760: IFFALSE 10781
// ComBinocular ( unit , x , y ) ;
10762: LD_VAR 0 2
10766: PPUSH
10767: LD_VAR 0 4
10771: PPUSH
10772: LD_VAR 0 5
10776: PPUSH
10777: CALL 14095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10781: LD_VAR 0 1
10785: PUSH
10786: LD_INT 254
10788: EQUAL
10789: PUSH
10790: LD_VAR 0 2
10794: PPUSH
10795: CALL_OW 264
10799: PUSH
10800: LD_INT 99
10802: EQUAL
10803: AND
10804: PUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 263
10814: PUSH
10815: LD_INT 3
10817: EQUAL
10818: AND
10819: IFFALSE 10835
// HackDestroyVehicle ( unit , selectedUnit ) ;
10821: LD_VAR 0 2
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: CALL 12398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10835: LD_VAR 0 1
10839: PUSH
10840: LD_INT 255
10842: EQUAL
10843: PUSH
10844: LD_VAR 0 2
10848: PPUSH
10849: CALL_OW 264
10853: PUSH
10854: LD_INT 14
10856: PUSH
10857: LD_INT 53
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: IN
10864: AND
10865: PUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_VAR 0 5
10875: PPUSH
10876: CALL_OW 488
10880: AND
10881: IFFALSE 10905
// CutTreeXYR ( unit , x , y , 12 ) ;
10883: LD_VAR 0 2
10887: PPUSH
10888: LD_VAR 0 4
10892: PPUSH
10893: LD_VAR 0 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL 10968 0 4
// if cmd = 256 then
10905: LD_VAR 0 1
10909: PUSH
10910: LD_INT 256
10912: EQUAL
10913: IFFALSE 10934
// SetFactoryWaypoint ( unit , x , y ) ;
10915: LD_VAR 0 2
10919: PPUSH
10920: LD_VAR 0 4
10924: PPUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: CALL 28853 0 3
// if cmd = 257 then
10934: LD_VAR 0 1
10938: PUSH
10939: LD_INT 257
10941: EQUAL
10942: IFFALSE 10963
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: LD_VAR 0 5
10958: PPUSH
10959: CALL 29215 0 3
// end ;
10963: LD_VAR 0 6
10967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10979: LD_VAR 0 1
10983: NOT
10984: PUSH
10985: LD_VAR 0 2
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: CALL_OW 488
10999: NOT
11000: OR
11001: PUSH
11002: LD_VAR 0 4
11006: NOT
11007: OR
11008: IFFALSE 11012
// exit ;
11010: GO 11352
// list := [ ] ;
11012: LD_ADDR_VAR 0 13
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// if x - r < 0 then
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 4
11028: MINUS
11029: PUSH
11030: LD_INT 0
11032: LESS
11033: IFFALSE 11045
// min_x := 0 else
11035: LD_ADDR_VAR 0 7
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
11043: GO 11061
// min_x := x - r ;
11045: LD_ADDR_VAR 0 7
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_VAR 0 4
11059: MINUS
11060: ST_TO_ADDR
// if y - r < 0 then
11061: LD_VAR 0 3
11065: PUSH
11066: LD_VAR 0 4
11070: MINUS
11071: PUSH
11072: LD_INT 0
11074: LESS
11075: IFFALSE 11087
// min_y := 0 else
11077: LD_ADDR_VAR 0 8
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
11085: GO 11103
// min_y := y - r ;
11087: LD_ADDR_VAR 0 8
11091: PUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 4
11101: MINUS
11102: ST_TO_ADDR
// max_x := x + r ;
11103: LD_ADDR_VAR 0 9
11107: PUSH
11108: LD_VAR 0 2
11112: PUSH
11113: LD_VAR 0 4
11117: PLUS
11118: ST_TO_ADDR
// max_y := y + r ;
11119: LD_ADDR_VAR 0 10
11123: PUSH
11124: LD_VAR 0 3
11128: PUSH
11129: LD_VAR 0 4
11133: PLUS
11134: ST_TO_ADDR
// for _x = min_x to max_x do
11135: LD_ADDR_VAR 0 11
11139: PUSH
11140: DOUBLE
11141: LD_VAR 0 7
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 9
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11270
// for _y = min_y to max_y do
11155: LD_ADDR_VAR 0 12
11159: PUSH
11160: DOUBLE
11161: LD_VAR 0 8
11165: DEC
11166: ST_TO_ADDR
11167: LD_VAR 0 10
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11266
// begin if not ValidHex ( _x , _y ) then
11175: LD_VAR 0 11
11179: PPUSH
11180: LD_VAR 0 12
11184: PPUSH
11185: CALL_OW 488
11189: NOT
11190: IFFALSE 11194
// continue ;
11192: GO 11172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11194: LD_VAR 0 11
11198: PPUSH
11199: LD_VAR 0 12
11203: PPUSH
11204: CALL_OW 351
11208: PUSH
11209: LD_VAR 0 11
11213: PPUSH
11214: LD_VAR 0 12
11218: PPUSH
11219: CALL_OW 554
11223: AND
11224: IFFALSE 11264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11226: LD_ADDR_VAR 0 13
11230: PUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: LD_VAR 0 13
11240: PUSH
11241: LD_INT 1
11243: PLUS
11244: PPUSH
11245: LD_VAR 0 11
11249: PUSH
11250: LD_VAR 0 12
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 2
11263: ST_TO_ADDR
// end ;
11264: GO 11172
11266: POP
11267: POP
11268: GO 11152
11270: POP
11271: POP
// if not list then
11272: LD_VAR 0 13
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11352
// for i in list do
11281: LD_ADDR_VAR 0 6
11285: PUSH
11286: LD_VAR 0 13
11290: PUSH
11291: FOR_IN
11292: IFFALSE 11350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: LD_STRING M
11301: PUSH
11302: LD_VAR 0 6
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_VAR 0 6
11315: PUSH
11316: LD_INT 2
11318: ARRAY
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: LD_INT 0
11325: PUSH
11326: LD_INT 0
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: PPUSH
11344: CALL_OW 447
11348: GO 11291
11350: POP
11351: POP
// end ;
11352: LD_VAR 0 5
11356: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11357: LD_EXP 36
11361: NOT
11362: IFFALSE 11412
11364: GO 11366
11366: DISABLE
// begin initHack := true ;
11367: LD_ADDR_EXP 36
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// hackTanks := [ ] ;
11375: LD_ADDR_EXP 37
11379: PUSH
11380: EMPTY
11381: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11382: LD_ADDR_EXP 38
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// hackLimit := 3 ;
11389: LD_ADDR_EXP 39
11393: PUSH
11394: LD_INT 3
11396: ST_TO_ADDR
// hackDist := 12 ;
11397: LD_ADDR_EXP 40
11401: PUSH
11402: LD_INT 12
11404: ST_TO_ADDR
// hackCounter := [ ] ;
11405: LD_ADDR_EXP 41
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// end ;
11412: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11413: LD_EXP 36
11417: PUSH
11418: LD_INT 34
11420: PUSH
11421: LD_INT 99
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: AND
11433: IFFALSE 11686
11435: GO 11437
11437: DISABLE
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
// begin enable ;
11442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_INT 34
11450: PUSH
11451: LD_INT 99
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11684
// begin if not i in hackTanks then
11466: LD_VAR 0 1
11470: PUSH
11471: LD_EXP 37
11475: IN
11476: NOT
11477: IFFALSE 11560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11479: LD_ADDR_EXP 37
11483: PUSH
11484: LD_EXP 37
11488: PPUSH
11489: LD_EXP 37
11493: PUSH
11494: LD_INT 1
11496: PLUS
11497: PPUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: CALL_OW 1
11507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11508: LD_ADDR_EXP 38
11512: PUSH
11513: LD_EXP 38
11517: PPUSH
11518: LD_EXP 38
11522: PUSH
11523: LD_INT 1
11525: PLUS
11526: PPUSH
11527: EMPTY
11528: PPUSH
11529: CALL_OW 1
11533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11534: LD_ADDR_EXP 41
11538: PUSH
11539: LD_EXP 41
11543: PPUSH
11544: LD_EXP 41
11548: PUSH
11549: LD_INT 1
11551: PLUS
11552: PPUSH
11553: EMPTY
11554: PPUSH
11555: CALL_OW 1
11559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 302
11569: NOT
11570: IFFALSE 11583
// begin HackUnlinkAll ( i ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 11689 0 1
// continue ;
11581: GO 11463
// end ; HackCheckCapturedStatus ( i ) ;
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL 12132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11592: LD_ADDR_VAR 0 2
11596: PUSH
11597: LD_INT 81
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 255
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 33
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 91
11626: PUSH
11627: LD_VAR 0 1
11631: PUSH
11632: LD_EXP 40
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 50
11644: PUSH
11645: EMPTY
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// continue ;
11666: GO 11463
// HackLink ( i , tmp ) ;
11668: LD_VAR 0 1
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL 11825 0 2
// end ;
11682: GO 11463
11684: POP
11685: POP
// end ;
11686: PPOPN 2
11688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if not hack in hackTanks then
11694: LD_VAR 0 1
11698: PUSH
11699: LD_EXP 37
11703: IN
11704: NOT
11705: IFFALSE 11709
// exit ;
11707: GO 11820
// index := GetElementIndex ( hackTanks , hack ) ;
11709: LD_ADDR_VAR 0 4
11713: PUSH
11714: LD_EXP 37
11718: PPUSH
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL 35086 0 2
11728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11729: LD_EXP 38
11733: PUSH
11734: LD_VAR 0 4
11738: ARRAY
11739: IFFALSE 11820
// begin for i in hackTanksCaptured [ index ] do
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_EXP 38
11750: PUSH
11751: LD_VAR 0 4
11755: ARRAY
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 1
11767: ARRAY
11768: PPUSH
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: PPUSH
11778: CALL_OW 235
11782: GO 11757
11784: POP
11785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11786: LD_ADDR_EXP 38
11790: PUSH
11791: LD_EXP 38
11795: PPUSH
11796: LD_VAR 0 4
11800: PPUSH
11801: EMPTY
11802: PPUSH
11803: CALL_OW 1
11807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_INT 0
11815: PPUSH
11816: CALL_OW 505
// end ; end ;
11820: LD_VAR 0 2
11824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11825: LD_INT 0
11827: PPUSH
11828: PPUSH
11829: PPUSH
// if not hack in hackTanks or not vehicles then
11830: LD_VAR 0 1
11834: PUSH
11835: LD_EXP 37
11839: IN
11840: NOT
11841: PUSH
11842: LD_VAR 0 2
11846: NOT
11847: OR
11848: IFFALSE 11852
// exit ;
11850: GO 12127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL 35736 0 4
11877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11878: LD_ADDR_VAR 0 5
11882: PUSH
11883: LD_EXP 37
11887: PPUSH
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL 35086 0 2
11897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11898: LD_EXP 38
11902: PUSH
11903: LD_VAR 0 5
11907: ARRAY
11908: PUSH
11909: LD_EXP 39
11913: LESS
11914: IFFALSE 12103
// begin for i := 1 to vehicles do
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_VAR 0 2
11930: PUSH
11931: FOR_TO
11932: IFFALSE 12101
// begin if hackTanksCaptured [ index ] = hackLimit then
11934: LD_EXP 38
11938: PUSH
11939: LD_VAR 0 5
11943: ARRAY
11944: PUSH
11945: LD_EXP 39
11949: EQUAL
11950: IFFALSE 11954
// break ;
11952: GO 12101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11954: LD_ADDR_EXP 41
11958: PUSH
11959: LD_EXP 41
11963: PPUSH
11964: LD_VAR 0 5
11968: PPUSH
11969: LD_EXP 41
11973: PUSH
11974: LD_VAR 0 5
11978: ARRAY
11979: PUSH
11980: LD_INT 1
11982: PLUS
11983: PPUSH
11984: CALL_OW 1
11988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11989: LD_ADDR_EXP 38
11993: PUSH
11994: LD_EXP 38
11998: PPUSH
11999: LD_VAR 0 5
12003: PUSH
12004: LD_EXP 38
12008: PUSH
12009: LD_VAR 0 5
12013: ARRAY
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: LD_VAR 0 2
12027: PUSH
12028: LD_VAR 0 4
12032: ARRAY
12033: PUSH
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: PPUSH
12045: CALL_OW 255
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL 35301 0 3
12058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12059: LD_VAR 0 2
12063: PUSH
12064: LD_VAR 0 4
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 255
12079: PPUSH
12080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12084: LD_VAR 0 2
12088: PUSH
12089: LD_VAR 0 4
12093: ARRAY
12094: PPUSH
12095: CALL_OW 141
// end ;
12099: GO 11931
12101: POP
12102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_EXP 38
12112: PUSH
12113: LD_VAR 0 5
12117: ARRAY
12118: PUSH
12119: LD_INT 0
12121: PLUS
12122: PPUSH
12123: CALL_OW 505
// end ;
12127: LD_VAR 0 3
12131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
// if not hack in hackTanks then
12138: LD_VAR 0 1
12142: PUSH
12143: LD_EXP 37
12147: IN
12148: NOT
12149: IFFALSE 12153
// exit ;
12151: GO 12393
// index := GetElementIndex ( hackTanks , hack ) ;
12153: LD_ADDR_VAR 0 4
12157: PUSH
12158: LD_EXP 37
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL 35086 0 2
12172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12173: LD_ADDR_VAR 0 3
12177: PUSH
12178: DOUBLE
12179: LD_EXP 38
12183: PUSH
12184: LD_VAR 0 4
12188: ARRAY
12189: INC
12190: ST_TO_ADDR
12191: LD_INT 1
12193: PUSH
12194: FOR_DOWNTO
12195: IFFALSE 12367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12197: LD_ADDR_VAR 0 5
12201: PUSH
12202: LD_EXP 38
12206: PUSH
12207: LD_VAR 0 4
12211: ARRAY
12212: PUSH
12213: LD_VAR 0 3
12217: ARRAY
12218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12219: LD_VAR 0 5
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: CALL_OW 302
12232: NOT
12233: PUSH
12234: LD_VAR 0 5
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PPUSH
12243: CALL_OW 255
12247: PUSH
12248: LD_VAR 0 1
12252: PPUSH
12253: CALL_OW 255
12257: NONEQUAL
12258: OR
12259: IFFALSE 12365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12261: LD_VAR 0 5
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PPUSH
12270: CALL_OW 305
12274: PUSH
12275: LD_VAR 0 5
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: CALL_OW 255
12288: PUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 255
12298: EQUAL
12299: AND
12300: IFFALSE 12324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12302: LD_VAR 0 5
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 5
12315: PUSH
12316: LD_INT 2
12318: ARRAY
12319: PPUSH
12320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12324: LD_ADDR_EXP 38
12328: PUSH
12329: LD_EXP 38
12333: PPUSH
12334: LD_VAR 0 4
12338: PPUSH
12339: LD_EXP 38
12343: PUSH
12344: LD_VAR 0 4
12348: ARRAY
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: CALL_OW 3
12359: PPUSH
12360: CALL_OW 1
12364: ST_TO_ADDR
// end ; end ;
12365: GO 12194
12367: POP
12368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_EXP 38
12378: PUSH
12379: LD_VAR 0 4
12383: ARRAY
12384: PUSH
12385: LD_INT 0
12387: PLUS
12388: PPUSH
12389: CALL_OW 505
// end ;
12393: LD_VAR 0 2
12397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12398: LD_INT 0
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
// if not hack in hackTanks then
12404: LD_VAR 0 1
12408: PUSH
12409: LD_EXP 37
12413: IN
12414: NOT
12415: IFFALSE 12419
// exit ;
12417: GO 12504
// index := GetElementIndex ( hackTanks , hack ) ;
12419: LD_ADDR_VAR 0 5
12423: PUSH
12424: LD_EXP 37
12428: PPUSH
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL 35086 0 2
12438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: DOUBLE
12445: LD_INT 1
12447: DEC
12448: ST_TO_ADDR
12449: LD_EXP 38
12453: PUSH
12454: LD_VAR 0 5
12458: ARRAY
12459: PUSH
12460: FOR_TO
12461: IFFALSE 12502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12463: LD_EXP 38
12467: PUSH
12468: LD_VAR 0 5
12472: ARRAY
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PUSH
12484: LD_VAR 0 2
12488: EQUAL
12489: IFFALSE 12500
// KillUnit ( vehicle ) ;
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 66
12500: GO 12460
12502: POP
12503: POP
// end ;
12504: LD_VAR 0 3
12508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12509: LD_EXP 42
12513: NOT
12514: IFFALSE 12549
12516: GO 12518
12518: DISABLE
// begin initMiner := true ;
12519: LD_ADDR_EXP 42
12523: PUSH
12524: LD_INT 1
12526: ST_TO_ADDR
// minersList := [ ] ;
12527: LD_ADDR_EXP 43
12531: PUSH
12532: EMPTY
12533: ST_TO_ADDR
// minerMinesList := [ ] ;
12534: LD_ADDR_EXP 44
12538: PUSH
12539: EMPTY
12540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12541: LD_ADDR_EXP 45
12545: PUSH
12546: LD_INT 5
12548: ST_TO_ADDR
// end ;
12549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12550: LD_EXP 42
12554: PUSH
12555: LD_INT 34
12557: PUSH
12558: LD_INT 81
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: AND
12570: IFFALSE 13031
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
// begin enable ;
12581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12582: LD_ADDR_VAR 0 1
12586: PUSH
12587: LD_INT 34
12589: PUSH
12590: LD_INT 81
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12675
// begin if not i in minersList then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_EXP 43
12614: IN
12615: NOT
12616: IFFALSE 12673
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12618: LD_ADDR_EXP 43
12622: PUSH
12623: LD_EXP 43
12627: PPUSH
12628: LD_EXP 43
12632: PUSH
12633: LD_INT 1
12635: PLUS
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 1
12646: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12647: LD_ADDR_EXP 44
12651: PUSH
12652: LD_EXP 44
12656: PPUSH
12657: LD_EXP 44
12661: PUSH
12662: LD_INT 1
12664: PLUS
12665: PPUSH
12666: EMPTY
12667: PPUSH
12668: CALL_OW 1
12672: ST_TO_ADDR
// end end ;
12673: GO 12602
12675: POP
12676: POP
// for i := minerMinesList downto 1 do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: DOUBLE
12683: LD_EXP 44
12687: INC
12688: ST_TO_ADDR
12689: LD_INT 1
12691: PUSH
12692: FOR_DOWNTO
12693: IFFALSE 13029
// begin if IsLive ( minersList [ i ] ) then
12695: LD_EXP 43
12699: PUSH
12700: LD_VAR 0 1
12704: ARRAY
12705: PPUSH
12706: CALL_OW 300
12710: IFFALSE 12738
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12712: LD_EXP 43
12716: PUSH
12717: LD_VAR 0 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 44
12727: PUSH
12728: LD_VAR 0 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 505
// if not minerMinesList [ i ] then
12738: LD_EXP 44
12742: PUSH
12743: LD_VAR 0 1
12747: ARRAY
12748: NOT
12749: IFFALSE 12753
// continue ;
12751: GO 12692
// for j := minerMinesList [ i ] downto 1 do
12753: LD_ADDR_VAR 0 2
12757: PUSH
12758: DOUBLE
12759: LD_EXP 44
12763: PUSH
12764: LD_VAR 0 1
12768: ARRAY
12769: INC
12770: ST_TO_ADDR
12771: LD_INT 1
12773: PUSH
12774: FOR_DOWNTO
12775: IFFALSE 13025
// begin side := GetSide ( minersList [ i ] ) ;
12777: LD_ADDR_VAR 0 3
12781: PUSH
12782: LD_EXP 43
12786: PUSH
12787: LD_VAR 0 1
12791: ARRAY
12792: PPUSH
12793: CALL_OW 255
12797: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_EXP 44
12807: PUSH
12808: LD_VAR 0 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 2
12818: ARRAY
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: LD_EXP 44
12828: PUSH
12829: LD_VAR 0 1
12833: ARRAY
12834: PUSH
12835: LD_VAR 0 2
12839: ARRAY
12840: PUSH
12841: LD_INT 2
12843: ARRAY
12844: PPUSH
12845: CALL_OW 428
12849: ST_TO_ADDR
// if not tmp then
12850: LD_VAR 0 4
12854: NOT
12855: IFFALSE 12859
// continue ;
12857: GO 12774
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12859: LD_VAR 0 4
12863: PUSH
12864: LD_INT 81
12866: PUSH
12867: LD_VAR 0 3
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: IN
12881: PUSH
12882: LD_EXP 44
12886: PUSH
12887: LD_VAR 0 1
12891: ARRAY
12892: PUSH
12893: LD_VAR 0 2
12897: ARRAY
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_EXP 44
12907: PUSH
12908: LD_VAR 0 1
12912: ARRAY
12913: PUSH
12914: LD_VAR 0 2
12918: ARRAY
12919: PUSH
12920: LD_INT 2
12922: ARRAY
12923: PPUSH
12924: CALL_OW 458
12928: AND
12929: IFFALSE 13023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12931: LD_EXP 44
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 2
12946: ARRAY
12947: PUSH
12948: LD_INT 1
12950: ARRAY
12951: PPUSH
12952: LD_EXP 44
12956: PUSH
12957: LD_VAR 0 1
12961: ARRAY
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PUSH
12969: LD_INT 2
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12982: LD_ADDR_EXP 44
12986: PUSH
12987: LD_EXP 44
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: LD_EXP 44
13001: PUSH
13002: LD_VAR 0 1
13006: ARRAY
13007: PPUSH
13008: LD_VAR 0 2
13012: PPUSH
13013: CALL_OW 3
13017: PPUSH
13018: CALL_OW 1
13022: ST_TO_ADDR
// end ; end ;
13023: GO 12774
13025: POP
13026: POP
// end ;
13027: GO 12692
13029: POP
13030: POP
// end ;
13031: PPOPN 4
13033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
// result := false ;
13038: LD_ADDR_VAR 0 4
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 264
13055: PUSH
13056: LD_INT 81
13058: EQUAL
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13304
// index := GetElementIndex ( minersList , unit ) ;
13064: LD_ADDR_VAR 0 5
13068: PUSH
13069: LD_EXP 43
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL 35086 0 2
13083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13084: LD_EXP 44
13088: PUSH
13089: LD_VAR 0 5
13093: ARRAY
13094: PUSH
13095: LD_EXP 45
13099: GREATEREQUAL
13100: IFFALSE 13104
// exit ;
13102: GO 13304
// ComMoveXY ( unit , x , y ) ;
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13123: LD_INT 35
13125: PPUSH
13126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: CALL 66422 0 3
13149: NOT
13150: PUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 314
13160: AND
13161: IFFALSE 13165
// exit ;
13163: GO 13304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13165: LD_VAR 0 2
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: CALL_OW 428
13179: PUSH
13180: LD_VAR 0 1
13184: EQUAL
13185: PUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 314
13195: NOT
13196: AND
13197: IFFALSE 13123
// PlaySoundXY ( x , y , PlantMine ) ;
13199: LD_VAR 0 2
13203: PPUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_STRING PlantMine
13211: PPUSH
13212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 255
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13243: LD_ADDR_EXP 44
13247: PUSH
13248: LD_EXP 44
13252: PPUSH
13253: LD_VAR 0 5
13257: PUSH
13258: LD_EXP 44
13262: PUSH
13263: LD_VAR 0 5
13267: ARRAY
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL 35301 0 3
13295: ST_TO_ADDR
// result := true ;
13296: LD_ADDR_VAR 0 4
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// end ;
13304: LD_VAR 0 4
13308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// if not unit in minersList then
13314: LD_VAR 0 1
13318: PUSH
13319: LD_EXP 43
13323: IN
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 13721
// index := GetElementIndex ( minersList , unit ) ;
13329: LD_ADDR_VAR 0 6
13333: PUSH
13334: LD_EXP 43
13338: PPUSH
13339: LD_VAR 0 1
13343: PPUSH
13344: CALL 35086 0 2
13348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13349: LD_ADDR_VAR 0 5
13353: PUSH
13354: DOUBLE
13355: LD_EXP 44
13359: PUSH
13360: LD_VAR 0 6
13364: ARRAY
13365: INC
13366: ST_TO_ADDR
13367: LD_INT 1
13369: PUSH
13370: FOR_DOWNTO
13371: IFFALSE 13532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13373: LD_EXP 44
13377: PUSH
13378: LD_VAR 0 6
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 5
13388: ARRAY
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PUSH
13394: LD_VAR 0 2
13398: EQUAL
13399: PUSH
13400: LD_EXP 44
13404: PUSH
13405: LD_VAR 0 6
13409: ARRAY
13410: PUSH
13411: LD_VAR 0 5
13415: ARRAY
13416: PUSH
13417: LD_INT 2
13419: ARRAY
13420: PUSH
13421: LD_VAR 0 3
13425: EQUAL
13426: AND
13427: IFFALSE 13530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13429: LD_EXP 44
13433: PUSH
13434: LD_VAR 0 6
13438: ARRAY
13439: PUSH
13440: LD_VAR 0 5
13444: ARRAY
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: LD_EXP 44
13454: PUSH
13455: LD_VAR 0 6
13459: ARRAY
13460: PUSH
13461: LD_VAR 0 5
13465: ARRAY
13466: PUSH
13467: LD_INT 2
13469: ARRAY
13470: PPUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 255
13480: PPUSH
13481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13485: LD_ADDR_EXP 44
13489: PUSH
13490: LD_EXP 44
13494: PPUSH
13495: LD_VAR 0 6
13499: PPUSH
13500: LD_EXP 44
13504: PUSH
13505: LD_VAR 0 6
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 5
13515: PPUSH
13516: CALL_OW 3
13520: PPUSH
13521: CALL_OW 1
13525: ST_TO_ADDR
// exit ;
13526: POP
13527: POP
13528: GO 13721
// end ; end ;
13530: GO 13370
13532: POP
13533: POP
// for i := minerMinesList [ index ] downto 1 do
13534: LD_ADDR_VAR 0 5
13538: PUSH
13539: DOUBLE
13540: LD_EXP 44
13544: PUSH
13545: LD_VAR 0 6
13549: ARRAY
13550: INC
13551: ST_TO_ADDR
13552: LD_INT 1
13554: PUSH
13555: FOR_DOWNTO
13556: IFFALSE 13719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13558: LD_EXP 44
13562: PUSH
13563: LD_VAR 0 6
13567: ARRAY
13568: PUSH
13569: LD_VAR 0 5
13573: ARRAY
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: PPUSH
13579: LD_EXP 44
13583: PUSH
13584: LD_VAR 0 6
13588: ARRAY
13589: PUSH
13590: LD_VAR 0 5
13594: ARRAY
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: PPUSH
13600: LD_VAR 0 2
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: CALL_OW 298
13614: PUSH
13615: LD_INT 6
13617: LESS
13618: IFFALSE 13717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13620: LD_EXP 44
13624: PUSH
13625: LD_VAR 0 6
13629: ARRAY
13630: PUSH
13631: LD_VAR 0 5
13635: ARRAY
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_EXP 44
13645: PUSH
13646: LD_VAR 0 6
13650: ARRAY
13651: PUSH
13652: LD_VAR 0 5
13656: ARRAY
13657: PUSH
13658: LD_INT 2
13660: ARRAY
13661: PPUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: CALL_OW 255
13671: PPUSH
13672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13676: LD_ADDR_EXP 44
13680: PUSH
13681: LD_EXP 44
13685: PPUSH
13686: LD_VAR 0 6
13690: PPUSH
13691: LD_EXP 44
13695: PUSH
13696: LD_VAR 0 6
13700: ARRAY
13701: PPUSH
13702: LD_VAR 0 5
13706: PPUSH
13707: CALL_OW 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// end ; end ;
13717: GO 13555
13719: POP
13720: POP
// end ;
13721: LD_VAR 0 4
13725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 81
13749: EQUAL
13750: NOT
13751: PUSH
13752: LD_VAR 0 1
13756: PUSH
13757: LD_EXP 43
13761: IN
13762: NOT
13763: OR
13764: IFFALSE 13768
// exit ;
13766: GO 14090
// index := GetElementIndex ( minersList , unit ) ;
13768: LD_ADDR_VAR 0 6
13772: PUSH
13773: LD_EXP 43
13777: PPUSH
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL 35086 0 2
13787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13788: LD_ADDR_VAR 0 8
13792: PUSH
13793: LD_EXP 45
13797: PUSH
13798: LD_EXP 44
13802: PUSH
13803: LD_VAR 0 6
13807: ARRAY
13808: MINUS
13809: ST_TO_ADDR
// if not minesFreeAmount then
13810: LD_VAR 0 8
13814: NOT
13815: IFFALSE 13819
// exit ;
13817: GO 14090
// tmp := [ ] ;
13819: LD_ADDR_VAR 0 7
13823: PUSH
13824: EMPTY
13825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13826: LD_ADDR_VAR 0 5
13830: PUSH
13831: DOUBLE
13832: LD_INT 1
13834: DEC
13835: ST_TO_ADDR
13836: LD_VAR 0 8
13840: PUSH
13841: FOR_TO
13842: IFFALSE 14037
// begin _d := rand ( 0 , 5 ) ;
13844: LD_ADDR_VAR 0 11
13848: PUSH
13849: LD_INT 0
13851: PPUSH
13852: LD_INT 5
13854: PPUSH
13855: CALL_OW 12
13859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13860: LD_ADDR_VAR 0 12
13864: PUSH
13865: LD_INT 2
13867: PPUSH
13868: LD_INT 6
13870: PPUSH
13871: CALL_OW 12
13875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13876: LD_ADDR_VAR 0 9
13880: PUSH
13881: LD_VAR 0 2
13885: PPUSH
13886: LD_VAR 0 11
13890: PPUSH
13891: LD_VAR 0 12
13895: PPUSH
13896: CALL_OW 272
13900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13901: LD_ADDR_VAR 0 10
13905: PUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: LD_VAR 0 11
13915: PPUSH
13916: LD_VAR 0 12
13920: PPUSH
13921: CALL_OW 273
13925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13926: LD_VAR 0 9
13930: PPUSH
13931: LD_VAR 0 10
13935: PPUSH
13936: CALL_OW 488
13940: PUSH
13941: LD_VAR 0 9
13945: PUSH
13946: LD_VAR 0 10
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_VAR 0 7
13959: IN
13960: NOT
13961: AND
13962: PUSH
13963: LD_VAR 0 9
13967: PPUSH
13968: LD_VAR 0 10
13972: PPUSH
13973: CALL_OW 458
13977: NOT
13978: AND
13979: IFFALSE 14021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13981: LD_ADDR_VAR 0 7
13985: PUSH
13986: LD_VAR 0 7
13990: PPUSH
13991: LD_VAR 0 7
13995: PUSH
13996: LD_INT 1
13998: PLUS
13999: PPUSH
14000: LD_VAR 0 9
14004: PUSH
14005: LD_VAR 0 10
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 1
14018: ST_TO_ADDR
14019: GO 14035
// i := i - 1 ;
14021: LD_ADDR_VAR 0 5
14025: PUSH
14026: LD_VAR 0 5
14030: PUSH
14031: LD_INT 1
14033: MINUS
14034: ST_TO_ADDR
// end ;
14035: GO 13841
14037: POP
14038: POP
// for i in tmp do
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: LD_VAR 0 7
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: LD_VAR 0 5
14070: PUSH
14071: LD_INT 2
14073: ARRAY
14074: PPUSH
14075: CALL 13034 0 3
14079: NOT
14080: IFFALSE 14086
// exit ;
14082: POP
14083: POP
14084: GO 14090
14086: GO 14049
14088: POP
14089: POP
// end ;
14090: LD_VAR 0 4
14094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14095: LD_INT 0
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// if not GetClass ( unit ) = class_sniper then
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 257
14113: PUSH
14114: LD_INT 5
14116: EQUAL
14117: NOT
14118: IFFALSE 14122
// exit ;
14120: GO 14510
// dist := 8 ;
14122: LD_ADDR_VAR 0 5
14126: PUSH
14127: LD_INT 8
14129: ST_TO_ADDR
// viewRange := 12 ;
14130: LD_ADDR_VAR 0 7
14134: PUSH
14135: LD_INT 12
14137: ST_TO_ADDR
// side := GetSide ( unit ) ;
14138: LD_ADDR_VAR 0 6
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 255
14152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14153: LD_INT 61
14155: PPUSH
14156: LD_VAR 0 6
14160: PPUSH
14161: CALL_OW 321
14165: PUSH
14166: LD_INT 2
14168: EQUAL
14169: IFFALSE 14179
// viewRange := 16 ;
14171: LD_ADDR_VAR 0 7
14175: PUSH
14176: LD_INT 16
14178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14179: LD_VAR 0 1
14183: PPUSH
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: CALL_OW 297
14198: PUSH
14199: LD_VAR 0 5
14203: GREATER
14204: IFFALSE 14283
// begin ComMoveXY ( unit , x , y ) ;
14206: LD_VAR 0 1
14210: PPUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14225: LD_INT 35
14227: PPUSH
14228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_VAR 0 2
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: CALL 66422 0 3
14251: NOT
14252: IFFALSE 14256
// exit ;
14254: GO 14510
// until GetDistUnitXY ( unit , x , y ) < dist ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 297
14275: PUSH
14276: LD_VAR 0 5
14280: LESS
14281: IFFALSE 14225
// end ; ComTurnXY ( unit , x , y ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 118
// wait ( 5 ) ;
14302: LD_INT 5
14304: PPUSH
14305: CALL_OW 67
// _d := GetDir ( unit ) ;
14309: LD_ADDR_VAR 0 10
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 254
14323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14324: LD_ADDR_VAR 0 8
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 250
14338: PPUSH
14339: LD_VAR 0 10
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: CALL_OW 272
14353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14354: LD_ADDR_VAR 0 9
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 251
14368: PPUSH
14369: LD_VAR 0 10
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL_OW 273
14383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14384: LD_VAR 0 8
14388: PPUSH
14389: LD_VAR 0 9
14393: PPUSH
14394: CALL_OW 488
14398: NOT
14399: IFFALSE 14403
// exit ;
14401: GO 14510
// ComAnimCustom ( unit , 1 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14415: LD_VAR 0 8
14419: PPUSH
14420: LD_VAR 0 9
14424: PPUSH
14425: LD_VAR 0 6
14429: PPUSH
14430: LD_VAR 0 7
14434: PPUSH
14435: CALL_OW 330
// repeat wait ( 1 ) ;
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 316
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 314
14465: OR
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 302
14476: NOT
14477: OR
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 301
14488: OR
14489: IFFALSE 14439
// RemoveSeeing ( _x , _y , side ) ;
14491: LD_VAR 0 8
14495: PPUSH
14496: LD_VAR 0 9
14500: PPUSH
14501: LD_VAR 0 6
14505: PPUSH
14506: CALL_OW 331
// end ; end_of_file
14510: LD_VAR 0 4
14514: RET
// every 0 0$1 do
14515: GO 14517
14517: DISABLE
// begin enable ;
14518: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14519: LD_STRING updateTimer(
14521: PUSH
14522: LD_OWVAR 1
14526: STR
14527: PUSH
14528: LD_STRING );
14530: STR
14531: PPUSH
14532: CALL_OW 559
// end ;
14536: END
// export function SOS_MapStart ( ) ; begin
14537: LD_INT 0
14539: PPUSH
// if streamModeActive then
14540: LD_EXP 46
14544: IFFALSE 14553
// DefineStreamItems ( true ) ;
14546: LD_INT 1
14548: PPUSH
14549: CALL 16207 0 1
// UpdateFactoryWaypoints ( ) ;
14553: CALL 29068 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14557: CALL 29325 0 0
// end ;
14561: LD_VAR 0 1
14565: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14566: LD_INT 0
14568: PPUSH
// if p2 = hack_mode then
14569: LD_VAR 0 2
14573: PUSH
14574: LD_INT 100
14576: EQUAL
14577: IFFALSE 15580
// begin if not StreamModeActive then
14579: LD_EXP 46
14583: NOT
14584: IFFALSE 14594
// StreamModeActive := true ;
14586: LD_ADDR_EXP 46
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// if p3 = 0 then
14594: LD_VAR 0 3
14598: PUSH
14599: LD_INT 0
14601: EQUAL
14602: IFFALSE 14608
// InitStreamMode ;
14604: CALL 15743 0 0
// if p3 = 1 then
14608: LD_VAR 0 3
14612: PUSH
14613: LD_INT 1
14615: EQUAL
14616: IFFALSE 14626
// sRocket := true ;
14618: LD_ADDR_EXP 51
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// if p3 = 2 then
14626: LD_VAR 0 3
14630: PUSH
14631: LD_INT 2
14633: EQUAL
14634: IFFALSE 14644
// sSpeed := true ;
14636: LD_ADDR_EXP 50
14640: PUSH
14641: LD_INT 1
14643: ST_TO_ADDR
// if p3 = 3 then
14644: LD_VAR 0 3
14648: PUSH
14649: LD_INT 3
14651: EQUAL
14652: IFFALSE 14662
// sEngine := true ;
14654: LD_ADDR_EXP 52
14658: PUSH
14659: LD_INT 1
14661: ST_TO_ADDR
// if p3 = 4 then
14662: LD_VAR 0 3
14666: PUSH
14667: LD_INT 4
14669: EQUAL
14670: IFFALSE 14680
// sSpec := true ;
14672: LD_ADDR_EXP 49
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// if p3 = 5 then
14680: LD_VAR 0 3
14684: PUSH
14685: LD_INT 5
14687: EQUAL
14688: IFFALSE 14698
// sLevel := true ;
14690: LD_ADDR_EXP 53
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if p3 = 6 then
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 6
14705: EQUAL
14706: IFFALSE 14716
// sArmoury := true ;
14708: LD_ADDR_EXP 54
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// if p3 = 7 then
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 7
14723: EQUAL
14724: IFFALSE 14734
// sRadar := true ;
14726: LD_ADDR_EXP 55
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// if p3 = 8 then
14734: LD_VAR 0 3
14738: PUSH
14739: LD_INT 8
14741: EQUAL
14742: IFFALSE 14752
// sBunker := true ;
14744: LD_ADDR_EXP 56
14748: PUSH
14749: LD_INT 1
14751: ST_TO_ADDR
// if p3 = 9 then
14752: LD_VAR 0 3
14756: PUSH
14757: LD_INT 9
14759: EQUAL
14760: IFFALSE 14770
// sHack := true ;
14762: LD_ADDR_EXP 57
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// if p3 = 10 then
14770: LD_VAR 0 3
14774: PUSH
14775: LD_INT 10
14777: EQUAL
14778: IFFALSE 14788
// sFire := true ;
14780: LD_ADDR_EXP 58
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// if p3 = 11 then
14788: LD_VAR 0 3
14792: PUSH
14793: LD_INT 11
14795: EQUAL
14796: IFFALSE 14806
// sRefresh := true ;
14798: LD_ADDR_EXP 59
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if p3 = 12 then
14806: LD_VAR 0 3
14810: PUSH
14811: LD_INT 12
14813: EQUAL
14814: IFFALSE 14824
// sExp := true ;
14816: LD_ADDR_EXP 60
14820: PUSH
14821: LD_INT 1
14823: ST_TO_ADDR
// if p3 = 13 then
14824: LD_VAR 0 3
14828: PUSH
14829: LD_INT 13
14831: EQUAL
14832: IFFALSE 14842
// sDepot := true ;
14834: LD_ADDR_EXP 61
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
// if p3 = 14 then
14842: LD_VAR 0 3
14846: PUSH
14847: LD_INT 14
14849: EQUAL
14850: IFFALSE 14860
// sFlag := true ;
14852: LD_ADDR_EXP 62
14856: PUSH
14857: LD_INT 1
14859: ST_TO_ADDR
// if p3 = 15 then
14860: LD_VAR 0 3
14864: PUSH
14865: LD_INT 15
14867: EQUAL
14868: IFFALSE 14878
// sKamikadze := true ;
14870: LD_ADDR_EXP 70
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if p3 = 16 then
14878: LD_VAR 0 3
14882: PUSH
14883: LD_INT 16
14885: EQUAL
14886: IFFALSE 14896
// sTroll := true ;
14888: LD_ADDR_EXP 71
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// if p3 = 17 then
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 17
14903: EQUAL
14904: IFFALSE 14914
// sSlow := true ;
14906: LD_ADDR_EXP 72
14910: PUSH
14911: LD_INT 1
14913: ST_TO_ADDR
// if p3 = 18 then
14914: LD_VAR 0 3
14918: PUSH
14919: LD_INT 18
14921: EQUAL
14922: IFFALSE 14932
// sLack := true ;
14924: LD_ADDR_EXP 73
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// if p3 = 19 then
14932: LD_VAR 0 3
14936: PUSH
14937: LD_INT 19
14939: EQUAL
14940: IFFALSE 14950
// sTank := true ;
14942: LD_ADDR_EXP 75
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// if p3 = 20 then
14950: LD_VAR 0 3
14954: PUSH
14955: LD_INT 20
14957: EQUAL
14958: IFFALSE 14968
// sRemote := true ;
14960: LD_ADDR_EXP 76
14964: PUSH
14965: LD_INT 1
14967: ST_TO_ADDR
// if p3 = 21 then
14968: LD_VAR 0 3
14972: PUSH
14973: LD_INT 21
14975: EQUAL
14976: IFFALSE 14986
// sPowell := true ;
14978: LD_ADDR_EXP 77
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// if p3 = 22 then
14986: LD_VAR 0 3
14990: PUSH
14991: LD_INT 22
14993: EQUAL
14994: IFFALSE 15004
// sTeleport := true ;
14996: LD_ADDR_EXP 80
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// if p3 = 23 then
15004: LD_VAR 0 3
15008: PUSH
15009: LD_INT 23
15011: EQUAL
15012: IFFALSE 15022
// sOilTower := true ;
15014: LD_ADDR_EXP 82
15018: PUSH
15019: LD_INT 1
15021: ST_TO_ADDR
// if p3 = 24 then
15022: LD_VAR 0 3
15026: PUSH
15027: LD_INT 24
15029: EQUAL
15030: IFFALSE 15040
// sShovel := true ;
15032: LD_ADDR_EXP 83
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// if p3 = 25 then
15040: LD_VAR 0 3
15044: PUSH
15045: LD_INT 25
15047: EQUAL
15048: IFFALSE 15058
// sSheik := true ;
15050: LD_ADDR_EXP 84
15054: PUSH
15055: LD_INT 1
15057: ST_TO_ADDR
// if p3 = 26 then
15058: LD_VAR 0 3
15062: PUSH
15063: LD_INT 26
15065: EQUAL
15066: IFFALSE 15076
// sEarthquake := true ;
15068: LD_ADDR_EXP 86
15072: PUSH
15073: LD_INT 1
15075: ST_TO_ADDR
// if p3 = 27 then
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 27
15083: EQUAL
15084: IFFALSE 15094
// sAI := true ;
15086: LD_ADDR_EXP 87
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// if p3 = 28 then
15094: LD_VAR 0 3
15098: PUSH
15099: LD_INT 28
15101: EQUAL
15102: IFFALSE 15112
// sCargo := true ;
15104: LD_ADDR_EXP 90
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// if p3 = 29 then
15112: LD_VAR 0 3
15116: PUSH
15117: LD_INT 29
15119: EQUAL
15120: IFFALSE 15130
// sDLaser := true ;
15122: LD_ADDR_EXP 91
15126: PUSH
15127: LD_INT 1
15129: ST_TO_ADDR
// if p3 = 30 then
15130: LD_VAR 0 3
15134: PUSH
15135: LD_INT 30
15137: EQUAL
15138: IFFALSE 15148
// sExchange := true ;
15140: LD_ADDR_EXP 92
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// if p3 = 31 then
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 31
15155: EQUAL
15156: IFFALSE 15166
// sFac := true ;
15158: LD_ADDR_EXP 93
15162: PUSH
15163: LD_INT 1
15165: ST_TO_ADDR
// if p3 = 32 then
15166: LD_VAR 0 3
15170: PUSH
15171: LD_INT 32
15173: EQUAL
15174: IFFALSE 15184
// sPower := true ;
15176: LD_ADDR_EXP 94
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// if p3 = 33 then
15184: LD_VAR 0 3
15188: PUSH
15189: LD_INT 33
15191: EQUAL
15192: IFFALSE 15202
// sRandom := true ;
15194: LD_ADDR_EXP 95
15198: PUSH
15199: LD_INT 1
15201: ST_TO_ADDR
// if p3 = 34 then
15202: LD_VAR 0 3
15206: PUSH
15207: LD_INT 34
15209: EQUAL
15210: IFFALSE 15220
// sShield := true ;
15212: LD_ADDR_EXP 96
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// if p3 = 35 then
15220: LD_VAR 0 3
15224: PUSH
15225: LD_INT 35
15227: EQUAL
15228: IFFALSE 15238
// sTime := true ;
15230: LD_ADDR_EXP 97
15234: PUSH
15235: LD_INT 1
15237: ST_TO_ADDR
// if p3 = 36 then
15238: LD_VAR 0 3
15242: PUSH
15243: LD_INT 36
15245: EQUAL
15246: IFFALSE 15256
// sTools := true ;
15248: LD_ADDR_EXP 98
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// if p3 = 101 then
15256: LD_VAR 0 3
15260: PUSH
15261: LD_INT 101
15263: EQUAL
15264: IFFALSE 15274
// sSold := true ;
15266: LD_ADDR_EXP 63
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if p3 = 102 then
15274: LD_VAR 0 3
15278: PUSH
15279: LD_INT 102
15281: EQUAL
15282: IFFALSE 15292
// sDiff := true ;
15284: LD_ADDR_EXP 64
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// if p3 = 103 then
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 103
15299: EQUAL
15300: IFFALSE 15310
// sFog := true ;
15302: LD_ADDR_EXP 67
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// if p3 = 104 then
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 104
15317: EQUAL
15318: IFFALSE 15328
// sReset := true ;
15320: LD_ADDR_EXP 68
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// if p3 = 105 then
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 105
15335: EQUAL
15336: IFFALSE 15346
// sSun := true ;
15338: LD_ADDR_EXP 69
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// if p3 = 106 then
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 106
15353: EQUAL
15354: IFFALSE 15364
// sTiger := true ;
15356: LD_ADDR_EXP 65
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// if p3 = 107 then
15364: LD_VAR 0 3
15368: PUSH
15369: LD_INT 107
15371: EQUAL
15372: IFFALSE 15382
// sBomb := true ;
15374: LD_ADDR_EXP 66
15378: PUSH
15379: LD_INT 1
15381: ST_TO_ADDR
// if p3 = 108 then
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 108
15389: EQUAL
15390: IFFALSE 15400
// sWound := true ;
15392: LD_ADDR_EXP 74
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// if p3 = 109 then
15400: LD_VAR 0 3
15404: PUSH
15405: LD_INT 109
15407: EQUAL
15408: IFFALSE 15418
// sBetray := true ;
15410: LD_ADDR_EXP 78
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 110 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 110
15425: EQUAL
15426: IFFALSE 15436
// sContamin := true ;
15428: LD_ADDR_EXP 79
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// if p3 = 111 then
15436: LD_VAR 0 3
15440: PUSH
15441: LD_INT 111
15443: EQUAL
15444: IFFALSE 15454
// sOil := true ;
15446: LD_ADDR_EXP 81
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if p3 = 112 then
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 112
15461: EQUAL
15462: IFFALSE 15472
// sStu := true ;
15464: LD_ADDR_EXP 85
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// if p3 = 113 then
15472: LD_VAR 0 3
15476: PUSH
15477: LD_INT 113
15479: EQUAL
15480: IFFALSE 15490
// sBazooka := true ;
15482: LD_ADDR_EXP 88
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// if p3 = 114 then
15490: LD_VAR 0 3
15494: PUSH
15495: LD_INT 114
15497: EQUAL
15498: IFFALSE 15508
// sMortar := true ;
15500: LD_ADDR_EXP 89
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// if p3 = 115 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 115
15515: EQUAL
15516: IFFALSE 15526
// sRanger := true ;
15518: LD_ADDR_EXP 99
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// if p3 = 116 then
15526: LD_VAR 0 3
15530: PUSH
15531: LD_INT 116
15533: EQUAL
15534: IFFALSE 15544
// sComputer := true ;
15536: LD_ADDR_EXP 100
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// if p3 = 117 then
15544: LD_VAR 0 3
15548: PUSH
15549: LD_INT 117
15551: EQUAL
15552: IFFALSE 15562
// s30 := true ;
15554: LD_ADDR_EXP 101
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// if p3 = 118 then
15562: LD_VAR 0 3
15566: PUSH
15567: LD_INT 118
15569: EQUAL
15570: IFFALSE 15580
// s60 := true ;
15572: LD_ADDR_EXP 102
15576: PUSH
15577: LD_INT 1
15579: ST_TO_ADDR
// end ; if p2 = stream_mode then
15580: LD_VAR 0 2
15584: PUSH
15585: LD_INT 101
15587: EQUAL
15588: IFFALSE 15716
// begin case p3 of 1 :
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 1
15597: DOUBLE
15598: EQUAL
15599: IFTRUE 15603
15601: GO 15610
15603: POP
// hHackUnlimitedResources ; 2 :
15604: CALL 27814 0 0
15608: GO 15716
15610: LD_INT 2
15612: DOUBLE
15613: EQUAL
15614: IFTRUE 15618
15616: GO 15625
15618: POP
// hHackSetLevel10 ; 3 :
15619: CALL 27947 0 0
15623: GO 15716
15625: LD_INT 3
15627: DOUBLE
15628: EQUAL
15629: IFTRUE 15633
15631: GO 15640
15633: POP
// hHackSetLevel10YourUnits ; 4 :
15634: CALL 28032 0 0
15638: GO 15716
15640: LD_INT 4
15642: DOUBLE
15643: EQUAL
15644: IFTRUE 15648
15646: GO 15655
15648: POP
// hHackInvincible ; 5 :
15649: CALL 28480 0 0
15653: GO 15716
15655: LD_INT 5
15657: DOUBLE
15658: EQUAL
15659: IFTRUE 15663
15661: GO 15670
15663: POP
// hHackInvisible ; 6 :
15664: CALL 28591 0 0
15668: GO 15716
15670: LD_INT 6
15672: DOUBLE
15673: EQUAL
15674: IFTRUE 15678
15676: GO 15685
15678: POP
// hHackChangeYourSide ; 7 :
15679: CALL 28648 0 0
15683: GO 15716
15685: LD_INT 7
15687: DOUBLE
15688: EQUAL
15689: IFTRUE 15693
15691: GO 15700
15693: POP
// hHackChangeUnitSide ; 8 :
15694: CALL 28690 0 0
15698: GO 15716
15700: LD_INT 8
15702: DOUBLE
15703: EQUAL
15704: IFTRUE 15708
15706: GO 15715
15708: POP
// hHackFog ; end ;
15709: CALL 28791 0 0
15713: GO 15716
15715: POP
// end ; end ;
15716: LD_VAR 0 7
15720: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15721: GO 15723
15723: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15724: LD_STRING initStreamRollete();
15726: PPUSH
15727: CALL_OW 559
// InitStreamMode ;
15731: CALL 15743 0 0
// DefineStreamItems ( false ) ;
15735: LD_INT 0
15737: PPUSH
15738: CALL 16207 0 1
// end ;
15742: END
// function InitStreamMode ; begin
15743: LD_INT 0
15745: PPUSH
// streamModeActive := false ;
15746: LD_ADDR_EXP 46
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// normalCounter := 36 ;
15754: LD_ADDR_EXP 47
15758: PUSH
15759: LD_INT 36
15761: ST_TO_ADDR
// hardcoreCounter := 18 ;
15762: LD_ADDR_EXP 48
15766: PUSH
15767: LD_INT 18
15769: ST_TO_ADDR
// sRocket := false ;
15770: LD_ADDR_EXP 51
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// sSpeed := false ;
15778: LD_ADDR_EXP 50
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// sEngine := false ;
15786: LD_ADDR_EXP 52
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// sSpec := false ;
15794: LD_ADDR_EXP 49
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// sLevel := false ;
15802: LD_ADDR_EXP 53
15806: PUSH
15807: LD_INT 0
15809: ST_TO_ADDR
// sArmoury := false ;
15810: LD_ADDR_EXP 54
15814: PUSH
15815: LD_INT 0
15817: ST_TO_ADDR
// sRadar := false ;
15818: LD_ADDR_EXP 55
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// sBunker := false ;
15826: LD_ADDR_EXP 56
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// sHack := false ;
15834: LD_ADDR_EXP 57
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// sFire := false ;
15842: LD_ADDR_EXP 58
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// sRefresh := false ;
15850: LD_ADDR_EXP 59
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// sExp := false ;
15858: LD_ADDR_EXP 60
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// sDepot := false ;
15866: LD_ADDR_EXP 61
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// sFlag := false ;
15874: LD_ADDR_EXP 62
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// sKamikadze := false ;
15882: LD_ADDR_EXP 70
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// sTroll := false ;
15890: LD_ADDR_EXP 71
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// sSlow := false ;
15898: LD_ADDR_EXP 72
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sLack := false ;
15906: LD_ADDR_EXP 73
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sTank := false ;
15914: LD_ADDR_EXP 75
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sRemote := false ;
15922: LD_ADDR_EXP 76
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sPowell := false ;
15930: LD_ADDR_EXP 77
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sTeleport := false ;
15938: LD_ADDR_EXP 80
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sOilTower := false ;
15946: LD_ADDR_EXP 82
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sShovel := false ;
15954: LD_ADDR_EXP 83
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sSheik := false ;
15962: LD_ADDR_EXP 84
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// sEarthquake := false ;
15970: LD_ADDR_EXP 86
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// sAI := false ;
15978: LD_ADDR_EXP 87
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// sCargo := false ;
15986: LD_ADDR_EXP 90
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// sDLaser := false ;
15994: LD_ADDR_EXP 91
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// sExchange := false ;
16002: LD_ADDR_EXP 92
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// sFac := false ;
16010: LD_ADDR_EXP 93
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// sPower := false ;
16018: LD_ADDR_EXP 94
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// sRandom := false ;
16026: LD_ADDR_EXP 95
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// sShield := false ;
16034: LD_ADDR_EXP 96
16038: PUSH
16039: LD_INT 0
16041: ST_TO_ADDR
// sTime := false ;
16042: LD_ADDR_EXP 97
16046: PUSH
16047: LD_INT 0
16049: ST_TO_ADDR
// sTools := false ;
16050: LD_ADDR_EXP 98
16054: PUSH
16055: LD_INT 0
16057: ST_TO_ADDR
// sSold := false ;
16058: LD_ADDR_EXP 63
16062: PUSH
16063: LD_INT 0
16065: ST_TO_ADDR
// sDiff := false ;
16066: LD_ADDR_EXP 64
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// sFog := false ;
16074: LD_ADDR_EXP 67
16078: PUSH
16079: LD_INT 0
16081: ST_TO_ADDR
// sReset := false ;
16082: LD_ADDR_EXP 68
16086: PUSH
16087: LD_INT 0
16089: ST_TO_ADDR
// sSun := false ;
16090: LD_ADDR_EXP 69
16094: PUSH
16095: LD_INT 0
16097: ST_TO_ADDR
// sTiger := false ;
16098: LD_ADDR_EXP 65
16102: PUSH
16103: LD_INT 0
16105: ST_TO_ADDR
// sBomb := false ;
16106: LD_ADDR_EXP 66
16110: PUSH
16111: LD_INT 0
16113: ST_TO_ADDR
// sWound := false ;
16114: LD_ADDR_EXP 74
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// sBetray := false ;
16122: LD_ADDR_EXP 78
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
// sContamin := false ;
16130: LD_ADDR_EXP 79
16134: PUSH
16135: LD_INT 0
16137: ST_TO_ADDR
// sOil := false ;
16138: LD_ADDR_EXP 81
16142: PUSH
16143: LD_INT 0
16145: ST_TO_ADDR
// sStu := false ;
16146: LD_ADDR_EXP 85
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
// sBazooka := false ;
16154: LD_ADDR_EXP 88
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// sMortar := false ;
16162: LD_ADDR_EXP 89
16166: PUSH
16167: LD_INT 0
16169: ST_TO_ADDR
// sRanger := false ;
16170: LD_ADDR_EXP 99
16174: PUSH
16175: LD_INT 0
16177: ST_TO_ADDR
// sComputer := false ;
16178: LD_ADDR_EXP 100
16182: PUSH
16183: LD_INT 0
16185: ST_TO_ADDR
// s30 := false ;
16186: LD_ADDR_EXP 101
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// s60 := false ;
16194: LD_ADDR_EXP 102
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
// end ;
16202: LD_VAR 0 1
16206: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
// result := [ ] ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: EMPTY
16222: ST_TO_ADDR
// if campaign_id = 1 then
16223: LD_OWVAR 69
16227: PUSH
16228: LD_INT 1
16230: EQUAL
16231: IFFALSE 19397
// begin case mission_number of 1 :
16233: LD_OWVAR 70
16237: PUSH
16238: LD_INT 1
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16322
16246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 4
16257: PUSH
16258: LD_INT 11
16260: PUSH
16261: LD_INT 12
16263: PUSH
16264: LD_INT 15
16266: PUSH
16267: LD_INT 16
16269: PUSH
16270: LD_INT 22
16272: PUSH
16273: LD_INT 23
16275: PUSH
16276: LD_INT 26
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 101
16292: PUSH
16293: LD_INT 102
16295: PUSH
16296: LD_INT 106
16298: PUSH
16299: LD_INT 116
16301: PUSH
16302: LD_INT 117
16304: PUSH
16305: LD_INT 118
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: ST_TO_ADDR
16320: GO 19395
16322: LD_INT 2
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16414
16330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 4
16341: PUSH
16342: LD_INT 11
16344: PUSH
16345: LD_INT 12
16347: PUSH
16348: LD_INT 15
16350: PUSH
16351: LD_INT 16
16353: PUSH
16354: LD_INT 22
16356: PUSH
16357: LD_INT 23
16359: PUSH
16360: LD_INT 26
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 101
16376: PUSH
16377: LD_INT 102
16379: PUSH
16380: LD_INT 105
16382: PUSH
16383: LD_INT 106
16385: PUSH
16386: LD_INT 108
16388: PUSH
16389: LD_INT 116
16391: PUSH
16392: LD_INT 117
16394: PUSH
16395: LD_INT 118
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: ST_TO_ADDR
16412: GO 19395
16414: LD_INT 3
16416: DOUBLE
16417: EQUAL
16418: IFTRUE 16422
16420: GO 16510
16422: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16423: LD_ADDR_VAR 0 2
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 4
16433: PUSH
16434: LD_INT 5
16436: PUSH
16437: LD_INT 11
16439: PUSH
16440: LD_INT 12
16442: PUSH
16443: LD_INT 15
16445: PUSH
16446: LD_INT 16
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_INT 26
16454: PUSH
16455: LD_INT 36
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 101
16472: PUSH
16473: LD_INT 102
16475: PUSH
16476: LD_INT 105
16478: PUSH
16479: LD_INT 106
16481: PUSH
16482: LD_INT 108
16484: PUSH
16485: LD_INT 116
16487: PUSH
16488: LD_INT 117
16490: PUSH
16491: LD_INT 118
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: ST_TO_ADDR
16508: GO 19395
16510: LD_INT 4
16512: DOUBLE
16513: EQUAL
16514: IFTRUE 16518
16516: GO 16614
16518: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: LD_INT 4
16529: PUSH
16530: LD_INT 5
16532: PUSH
16533: LD_INT 8
16535: PUSH
16536: LD_INT 11
16538: PUSH
16539: LD_INT 12
16541: PUSH
16542: LD_INT 15
16544: PUSH
16545: LD_INT 16
16547: PUSH
16548: LD_INT 22
16550: PUSH
16551: LD_INT 23
16553: PUSH
16554: LD_INT 26
16556: PUSH
16557: LD_INT 36
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 101
16576: PUSH
16577: LD_INT 102
16579: PUSH
16580: LD_INT 105
16582: PUSH
16583: LD_INT 106
16585: PUSH
16586: LD_INT 108
16588: PUSH
16589: LD_INT 116
16591: PUSH
16592: LD_INT 117
16594: PUSH
16595: LD_INT 118
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: ST_TO_ADDR
16612: GO 19395
16614: LD_INT 5
16616: DOUBLE
16617: EQUAL
16618: IFTRUE 16622
16620: GO 16734
16622: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16623: LD_ADDR_VAR 0 2
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 4
16633: PUSH
16634: LD_INT 5
16636: PUSH
16637: LD_INT 6
16639: PUSH
16640: LD_INT 8
16642: PUSH
16643: LD_INT 11
16645: PUSH
16646: LD_INT 12
16648: PUSH
16649: LD_INT 15
16651: PUSH
16652: LD_INT 16
16654: PUSH
16655: LD_INT 22
16657: PUSH
16658: LD_INT 23
16660: PUSH
16661: LD_INT 25
16663: PUSH
16664: LD_INT 26
16666: PUSH
16667: LD_INT 36
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 101
16688: PUSH
16689: LD_INT 102
16691: PUSH
16692: LD_INT 105
16694: PUSH
16695: LD_INT 106
16697: PUSH
16698: LD_INT 108
16700: PUSH
16701: LD_INT 109
16703: PUSH
16704: LD_INT 112
16706: PUSH
16707: LD_INT 116
16709: PUSH
16710: LD_INT 117
16712: PUSH
16713: LD_INT 118
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ST_TO_ADDR
16732: GO 19395
16734: LD_INT 6
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16874
16742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16743: LD_ADDR_VAR 0 2
16747: PUSH
16748: LD_INT 2
16750: PUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: LD_INT 6
16759: PUSH
16760: LD_INT 8
16762: PUSH
16763: LD_INT 11
16765: PUSH
16766: LD_INT 12
16768: PUSH
16769: LD_INT 15
16771: PUSH
16772: LD_INT 16
16774: PUSH
16775: LD_INT 20
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 22
16783: PUSH
16784: LD_INT 23
16786: PUSH
16787: LD_INT 25
16789: PUSH
16790: LD_INT 26
16792: PUSH
16793: LD_INT 30
16795: PUSH
16796: LD_INT 31
16798: PUSH
16799: LD_INT 32
16801: PUSH
16802: LD_INT 36
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 101
16828: PUSH
16829: LD_INT 102
16831: PUSH
16832: LD_INT 105
16834: PUSH
16835: LD_INT 106
16837: PUSH
16838: LD_INT 108
16840: PUSH
16841: LD_INT 109
16843: PUSH
16844: LD_INT 112
16846: PUSH
16847: LD_INT 116
16849: PUSH
16850: LD_INT 117
16852: PUSH
16853: LD_INT 118
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: ST_TO_ADDR
16872: GO 19395
16874: LD_INT 7
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 16994
16882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16883: LD_ADDR_VAR 0 2
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 4
16893: PUSH
16894: LD_INT 5
16896: PUSH
16897: LD_INT 7
16899: PUSH
16900: LD_INT 11
16902: PUSH
16903: LD_INT 12
16905: PUSH
16906: LD_INT 15
16908: PUSH
16909: LD_INT 16
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 23
16923: PUSH
16924: LD_INT 25
16926: PUSH
16927: LD_INT 26
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 101
16948: PUSH
16949: LD_INT 102
16951: PUSH
16952: LD_INT 103
16954: PUSH
16955: LD_INT 105
16957: PUSH
16958: LD_INT 106
16960: PUSH
16961: LD_INT 108
16963: PUSH
16964: LD_INT 112
16966: PUSH
16967: LD_INT 116
16969: PUSH
16970: LD_INT 117
16972: PUSH
16973: LD_INT 118
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: ST_TO_ADDR
16992: GO 19395
16994: LD_INT 8
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17142
17002: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 4
17013: PUSH
17014: LD_INT 5
17016: PUSH
17017: LD_INT 6
17019: PUSH
17020: LD_INT 7
17022: PUSH
17023: LD_INT 8
17025: PUSH
17026: LD_INT 11
17028: PUSH
17029: LD_INT 12
17031: PUSH
17032: LD_INT 15
17034: PUSH
17035: LD_INT 16
17037: PUSH
17038: LD_INT 20
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 23
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 26
17055: PUSH
17056: LD_INT 30
17058: PUSH
17059: LD_INT 31
17061: PUSH
17062: LD_INT 32
17064: PUSH
17065: LD_INT 36
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 101
17092: PUSH
17093: LD_INT 102
17095: PUSH
17096: LD_INT 103
17098: PUSH
17099: LD_INT 105
17101: PUSH
17102: LD_INT 106
17104: PUSH
17105: LD_INT 108
17107: PUSH
17108: LD_INT 109
17110: PUSH
17111: LD_INT 112
17113: PUSH
17114: LD_INT 116
17116: PUSH
17117: LD_INT 117
17119: PUSH
17120: LD_INT 118
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: ST_TO_ADDR
17140: GO 19395
17142: LD_INT 9
17144: DOUBLE
17145: EQUAL
17146: IFTRUE 17150
17148: GO 17298
17150: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17151: LD_ADDR_VAR 0 2
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: LD_INT 5
17164: PUSH
17165: LD_INT 6
17167: PUSH
17168: LD_INT 7
17170: PUSH
17171: LD_INT 8
17173: PUSH
17174: LD_INT 11
17176: PUSH
17177: LD_INT 12
17179: PUSH
17180: LD_INT 15
17182: PUSH
17183: LD_INT 16
17185: PUSH
17186: LD_INT 20
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_INT 23
17197: PUSH
17198: LD_INT 25
17200: PUSH
17201: LD_INT 26
17203: PUSH
17204: LD_INT 28
17206: PUSH
17207: LD_INT 30
17209: PUSH
17210: LD_INT 31
17212: PUSH
17213: LD_INT 32
17215: PUSH
17216: LD_INT 36
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 101
17244: PUSH
17245: LD_INT 102
17247: PUSH
17248: LD_INT 103
17250: PUSH
17251: LD_INT 105
17253: PUSH
17254: LD_INT 106
17256: PUSH
17257: LD_INT 108
17259: PUSH
17260: LD_INT 109
17262: PUSH
17263: LD_INT 112
17265: PUSH
17266: LD_INT 114
17268: PUSH
17269: LD_INT 116
17271: PUSH
17272: LD_INT 117
17274: PUSH
17275: LD_INT 118
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
17296: GO 19395
17298: LD_INT 10
17300: DOUBLE
17301: EQUAL
17302: IFTRUE 17306
17304: GO 17502
17306: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17307: LD_ADDR_VAR 0 2
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 4
17317: PUSH
17318: LD_INT 5
17320: PUSH
17321: LD_INT 6
17323: PUSH
17324: LD_INT 7
17326: PUSH
17327: LD_INT 8
17329: PUSH
17330: LD_INT 9
17332: PUSH
17333: LD_INT 10
17335: PUSH
17336: LD_INT 11
17338: PUSH
17339: LD_INT 12
17341: PUSH
17342: LD_INT 13
17344: PUSH
17345: LD_INT 14
17347: PUSH
17348: LD_INT 15
17350: PUSH
17351: LD_INT 16
17353: PUSH
17354: LD_INT 17
17356: PUSH
17357: LD_INT 18
17359: PUSH
17360: LD_INT 19
17362: PUSH
17363: LD_INT 20
17365: PUSH
17366: LD_INT 21
17368: PUSH
17369: LD_INT 22
17371: PUSH
17372: LD_INT 23
17374: PUSH
17375: LD_INT 24
17377: PUSH
17378: LD_INT 25
17380: PUSH
17381: LD_INT 26
17383: PUSH
17384: LD_INT 28
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 31
17392: PUSH
17393: LD_INT 32
17395: PUSH
17396: LD_INT 36
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 101
17432: PUSH
17433: LD_INT 102
17435: PUSH
17436: LD_INT 103
17438: PUSH
17439: LD_INT 104
17441: PUSH
17442: LD_INT 105
17444: PUSH
17445: LD_INT 106
17447: PUSH
17448: LD_INT 107
17450: PUSH
17451: LD_INT 108
17453: PUSH
17454: LD_INT 109
17456: PUSH
17457: LD_INT 110
17459: PUSH
17460: LD_INT 111
17462: PUSH
17463: LD_INT 112
17465: PUSH
17466: LD_INT 114
17468: PUSH
17469: LD_INT 116
17471: PUSH
17472: LD_INT 117
17474: PUSH
17475: LD_INT 118
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: ST_TO_ADDR
17500: GO 19395
17502: LD_INT 11
17504: DOUBLE
17505: EQUAL
17506: IFTRUE 17510
17508: GO 17714
17510: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: LD_INT 3
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: LD_INT 5
17527: PUSH
17528: LD_INT 6
17530: PUSH
17531: LD_INT 7
17533: PUSH
17534: LD_INT 8
17536: PUSH
17537: LD_INT 9
17539: PUSH
17540: LD_INT 10
17542: PUSH
17543: LD_INT 11
17545: PUSH
17546: LD_INT 12
17548: PUSH
17549: LD_INT 13
17551: PUSH
17552: LD_INT 14
17554: PUSH
17555: LD_INT 15
17557: PUSH
17558: LD_INT 16
17560: PUSH
17561: LD_INT 17
17563: PUSH
17564: LD_INT 18
17566: PUSH
17567: LD_INT 19
17569: PUSH
17570: LD_INT 20
17572: PUSH
17573: LD_INT 21
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_INT 23
17581: PUSH
17582: LD_INT 24
17584: PUSH
17585: LD_INT 25
17587: PUSH
17588: LD_INT 26
17590: PUSH
17591: LD_INT 28
17593: PUSH
17594: LD_INT 30
17596: PUSH
17597: LD_INT 31
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: LD_INT 34
17605: PUSH
17606: LD_INT 36
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 101
17644: PUSH
17645: LD_INT 102
17647: PUSH
17648: LD_INT 103
17650: PUSH
17651: LD_INT 104
17653: PUSH
17654: LD_INT 105
17656: PUSH
17657: LD_INT 106
17659: PUSH
17660: LD_INT 107
17662: PUSH
17663: LD_INT 108
17665: PUSH
17666: LD_INT 109
17668: PUSH
17669: LD_INT 110
17671: PUSH
17672: LD_INT 111
17674: PUSH
17675: LD_INT 112
17677: PUSH
17678: LD_INT 114
17680: PUSH
17681: LD_INT 116
17683: PUSH
17684: LD_INT 117
17686: PUSH
17687: LD_INT 118
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: ST_TO_ADDR
17712: GO 19395
17714: LD_INT 12
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17942
17722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: LD_INT 4
17739: PUSH
17740: LD_INT 5
17742: PUSH
17743: LD_INT 6
17745: PUSH
17746: LD_INT 7
17748: PUSH
17749: LD_INT 8
17751: PUSH
17752: LD_INT 9
17754: PUSH
17755: LD_INT 10
17757: PUSH
17758: LD_INT 11
17760: PUSH
17761: LD_INT 12
17763: PUSH
17764: LD_INT 13
17766: PUSH
17767: LD_INT 14
17769: PUSH
17770: LD_INT 15
17772: PUSH
17773: LD_INT 16
17775: PUSH
17776: LD_INT 17
17778: PUSH
17779: LD_INT 18
17781: PUSH
17782: LD_INT 19
17784: PUSH
17785: LD_INT 20
17787: PUSH
17788: LD_INT 21
17790: PUSH
17791: LD_INT 22
17793: PUSH
17794: LD_INT 23
17796: PUSH
17797: LD_INT 24
17799: PUSH
17800: LD_INT 25
17802: PUSH
17803: LD_INT 26
17805: PUSH
17806: LD_INT 27
17808: PUSH
17809: LD_INT 28
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: LD_INT 31
17817: PUSH
17818: LD_INT 32
17820: PUSH
17821: LD_INT 33
17823: PUSH
17824: LD_INT 34
17826: PUSH
17827: LD_INT 36
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 101
17868: PUSH
17869: LD_INT 102
17871: PUSH
17872: LD_INT 103
17874: PUSH
17875: LD_INT 104
17877: PUSH
17878: LD_INT 105
17880: PUSH
17881: LD_INT 106
17883: PUSH
17884: LD_INT 107
17886: PUSH
17887: LD_INT 108
17889: PUSH
17890: LD_INT 109
17892: PUSH
17893: LD_INT 110
17895: PUSH
17896: LD_INT 111
17898: PUSH
17899: LD_INT 112
17901: PUSH
17902: LD_INT 113
17904: PUSH
17905: LD_INT 114
17907: PUSH
17908: LD_INT 116
17910: PUSH
17911: LD_INT 117
17913: PUSH
17914: LD_INT 118
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: ST_TO_ADDR
17940: GO 19395
17942: LD_INT 13
17944: DOUBLE
17945: EQUAL
17946: IFTRUE 17950
17948: GO 18158
17950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17951: LD_ADDR_VAR 0 2
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: LD_INT 4
17967: PUSH
17968: LD_INT 5
17970: PUSH
17971: LD_INT 8
17973: PUSH
17974: LD_INT 9
17976: PUSH
17977: LD_INT 10
17979: PUSH
17980: LD_INT 11
17982: PUSH
17983: LD_INT 12
17985: PUSH
17986: LD_INT 14
17988: PUSH
17989: LD_INT 15
17991: PUSH
17992: LD_INT 16
17994: PUSH
17995: LD_INT 17
17997: PUSH
17998: LD_INT 18
18000: PUSH
18001: LD_INT 19
18003: PUSH
18004: LD_INT 20
18006: PUSH
18007: LD_INT 21
18009: PUSH
18010: LD_INT 22
18012: PUSH
18013: LD_INT 23
18015: PUSH
18016: LD_INT 24
18018: PUSH
18019: LD_INT 25
18021: PUSH
18022: LD_INT 26
18024: PUSH
18025: LD_INT 27
18027: PUSH
18028: LD_INT 28
18030: PUSH
18031: LD_INT 30
18033: PUSH
18034: LD_INT 31
18036: PUSH
18037: LD_INT 32
18039: PUSH
18040: LD_INT 33
18042: PUSH
18043: LD_INT 34
18045: PUSH
18046: LD_INT 36
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 101
18084: PUSH
18085: LD_INT 102
18087: PUSH
18088: LD_INT 103
18090: PUSH
18091: LD_INT 104
18093: PUSH
18094: LD_INT 105
18096: PUSH
18097: LD_INT 106
18099: PUSH
18100: LD_INT 107
18102: PUSH
18103: LD_INT 108
18105: PUSH
18106: LD_INT 109
18108: PUSH
18109: LD_INT 110
18111: PUSH
18112: LD_INT 111
18114: PUSH
18115: LD_INT 112
18117: PUSH
18118: LD_INT 113
18120: PUSH
18121: LD_INT 114
18123: PUSH
18124: LD_INT 116
18126: PUSH
18127: LD_INT 117
18129: PUSH
18130: LD_INT 118
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: ST_TO_ADDR
18156: GO 19395
18158: LD_INT 14
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18390
18166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: LD_INT 3
18180: PUSH
18181: LD_INT 4
18183: PUSH
18184: LD_INT 5
18186: PUSH
18187: LD_INT 6
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: LD_INT 8
18195: PUSH
18196: LD_INT 9
18198: PUSH
18199: LD_INT 10
18201: PUSH
18202: LD_INT 11
18204: PUSH
18205: LD_INT 12
18207: PUSH
18208: LD_INT 13
18210: PUSH
18211: LD_INT 14
18213: PUSH
18214: LD_INT 15
18216: PUSH
18217: LD_INT 16
18219: PUSH
18220: LD_INT 17
18222: PUSH
18223: LD_INT 18
18225: PUSH
18226: LD_INT 19
18228: PUSH
18229: LD_INT 20
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_INT 23
18240: PUSH
18241: LD_INT 24
18243: PUSH
18244: LD_INT 25
18246: PUSH
18247: LD_INT 26
18249: PUSH
18250: LD_INT 27
18252: PUSH
18253: LD_INT 28
18255: PUSH
18256: LD_INT 29
18258: PUSH
18259: LD_INT 30
18261: PUSH
18262: LD_INT 31
18264: PUSH
18265: LD_INT 32
18267: PUSH
18268: LD_INT 33
18270: PUSH
18271: LD_INT 34
18273: PUSH
18274: LD_INT 36
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 101
18316: PUSH
18317: LD_INT 102
18319: PUSH
18320: LD_INT 103
18322: PUSH
18323: LD_INT 104
18325: PUSH
18326: LD_INT 105
18328: PUSH
18329: LD_INT 106
18331: PUSH
18332: LD_INT 107
18334: PUSH
18335: LD_INT 108
18337: PUSH
18338: LD_INT 109
18340: PUSH
18341: LD_INT 110
18343: PUSH
18344: LD_INT 111
18346: PUSH
18347: LD_INT 112
18349: PUSH
18350: LD_INT 113
18352: PUSH
18353: LD_INT 114
18355: PUSH
18356: LD_INT 116
18358: PUSH
18359: LD_INT 117
18361: PUSH
18362: LD_INT 118
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: ST_TO_ADDR
18388: GO 19395
18390: LD_INT 15
18392: DOUBLE
18393: EQUAL
18394: IFTRUE 18398
18396: GO 18622
18398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 2
18409: PUSH
18410: LD_INT 3
18412: PUSH
18413: LD_INT 4
18415: PUSH
18416: LD_INT 5
18418: PUSH
18419: LD_INT 6
18421: PUSH
18422: LD_INT 7
18424: PUSH
18425: LD_INT 8
18427: PUSH
18428: LD_INT 9
18430: PUSH
18431: LD_INT 10
18433: PUSH
18434: LD_INT 11
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: LD_INT 13
18442: PUSH
18443: LD_INT 14
18445: PUSH
18446: LD_INT 15
18448: PUSH
18449: LD_INT 16
18451: PUSH
18452: LD_INT 17
18454: PUSH
18455: LD_INT 18
18457: PUSH
18458: LD_INT 19
18460: PUSH
18461: LD_INT 20
18463: PUSH
18464: LD_INT 21
18466: PUSH
18467: LD_INT 22
18469: PUSH
18470: LD_INT 23
18472: PUSH
18473: LD_INT 24
18475: PUSH
18476: LD_INT 25
18478: PUSH
18479: LD_INT 26
18481: PUSH
18482: LD_INT 27
18484: PUSH
18485: LD_INT 28
18487: PUSH
18488: LD_INT 29
18490: PUSH
18491: LD_INT 30
18493: PUSH
18494: LD_INT 31
18496: PUSH
18497: LD_INT 32
18499: PUSH
18500: LD_INT 33
18502: PUSH
18503: LD_INT 34
18505: PUSH
18506: LD_INT 36
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 101
18548: PUSH
18549: LD_INT 102
18551: PUSH
18552: LD_INT 103
18554: PUSH
18555: LD_INT 104
18557: PUSH
18558: LD_INT 105
18560: PUSH
18561: LD_INT 106
18563: PUSH
18564: LD_INT 107
18566: PUSH
18567: LD_INT 108
18569: PUSH
18570: LD_INT 109
18572: PUSH
18573: LD_INT 110
18575: PUSH
18576: LD_INT 111
18578: PUSH
18579: LD_INT 112
18581: PUSH
18582: LD_INT 113
18584: PUSH
18585: LD_INT 114
18587: PUSH
18588: LD_INT 116
18590: PUSH
18591: LD_INT 117
18593: PUSH
18594: LD_INT 118
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: ST_TO_ADDR
18620: GO 19395
18622: LD_INT 16
18624: DOUBLE
18625: EQUAL
18626: IFTRUE 18630
18628: GO 18766
18630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18631: LD_ADDR_VAR 0 2
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 4
18641: PUSH
18642: LD_INT 5
18644: PUSH
18645: LD_INT 7
18647: PUSH
18648: LD_INT 11
18650: PUSH
18651: LD_INT 12
18653: PUSH
18654: LD_INT 15
18656: PUSH
18657: LD_INT 16
18659: PUSH
18660: LD_INT 20
18662: PUSH
18663: LD_INT 21
18665: PUSH
18666: LD_INT 22
18668: PUSH
18669: LD_INT 23
18671: PUSH
18672: LD_INT 25
18674: PUSH
18675: LD_INT 26
18677: PUSH
18678: LD_INT 30
18680: PUSH
18681: LD_INT 31
18683: PUSH
18684: LD_INT 32
18686: PUSH
18687: LD_INT 33
18689: PUSH
18690: LD_INT 34
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 101
18716: PUSH
18717: LD_INT 102
18719: PUSH
18720: LD_INT 103
18722: PUSH
18723: LD_INT 106
18725: PUSH
18726: LD_INT 108
18728: PUSH
18729: LD_INT 112
18731: PUSH
18732: LD_INT 113
18734: PUSH
18735: LD_INT 114
18737: PUSH
18738: LD_INT 116
18740: PUSH
18741: LD_INT 117
18743: PUSH
18744: LD_INT 118
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: ST_TO_ADDR
18764: GO 19395
18766: LD_INT 17
18768: DOUBLE
18769: EQUAL
18770: IFTRUE 18774
18772: GO 18998
18774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18775: LD_ADDR_VAR 0 2
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 3
18788: PUSH
18789: LD_INT 4
18791: PUSH
18792: LD_INT 5
18794: PUSH
18795: LD_INT 6
18797: PUSH
18798: LD_INT 7
18800: PUSH
18801: LD_INT 8
18803: PUSH
18804: LD_INT 9
18806: PUSH
18807: LD_INT 10
18809: PUSH
18810: LD_INT 11
18812: PUSH
18813: LD_INT 12
18815: PUSH
18816: LD_INT 13
18818: PUSH
18819: LD_INT 14
18821: PUSH
18822: LD_INT 15
18824: PUSH
18825: LD_INT 16
18827: PUSH
18828: LD_INT 17
18830: PUSH
18831: LD_INT 18
18833: PUSH
18834: LD_INT 19
18836: PUSH
18837: LD_INT 20
18839: PUSH
18840: LD_INT 21
18842: PUSH
18843: LD_INT 22
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 24
18851: PUSH
18852: LD_INT 25
18854: PUSH
18855: LD_INT 26
18857: PUSH
18858: LD_INT 27
18860: PUSH
18861: LD_INT 28
18863: PUSH
18864: LD_INT 29
18866: PUSH
18867: LD_INT 30
18869: PUSH
18870: LD_INT 31
18872: PUSH
18873: LD_INT 32
18875: PUSH
18876: LD_INT 33
18878: PUSH
18879: LD_INT 34
18881: PUSH
18882: LD_INT 36
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 101
18924: PUSH
18925: LD_INT 102
18927: PUSH
18928: LD_INT 103
18930: PUSH
18931: LD_INT 104
18933: PUSH
18934: LD_INT 105
18936: PUSH
18937: LD_INT 106
18939: PUSH
18940: LD_INT 107
18942: PUSH
18943: LD_INT 108
18945: PUSH
18946: LD_INT 109
18948: PUSH
18949: LD_INT 110
18951: PUSH
18952: LD_INT 111
18954: PUSH
18955: LD_INT 112
18957: PUSH
18958: LD_INT 113
18960: PUSH
18961: LD_INT 114
18963: PUSH
18964: LD_INT 116
18966: PUSH
18967: LD_INT 117
18969: PUSH
18970: LD_INT 118
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: ST_TO_ADDR
18996: GO 19395
18998: LD_INT 18
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19154
19006: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: LD_INT 2
19014: PUSH
19015: LD_INT 4
19017: PUSH
19018: LD_INT 5
19020: PUSH
19021: LD_INT 7
19023: PUSH
19024: LD_INT 11
19026: PUSH
19027: LD_INT 12
19029: PUSH
19030: LD_INT 15
19032: PUSH
19033: LD_INT 16
19035: PUSH
19036: LD_INT 20
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 22
19044: PUSH
19045: LD_INT 23
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 26
19053: PUSH
19054: LD_INT 30
19056: PUSH
19057: LD_INT 31
19059: PUSH
19060: LD_INT 32
19062: PUSH
19063: LD_INT 33
19065: PUSH
19066: LD_INT 34
19068: PUSH
19069: LD_INT 35
19071: PUSH
19072: LD_INT 36
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 101
19100: PUSH
19101: LD_INT 102
19103: PUSH
19104: LD_INT 103
19106: PUSH
19107: LD_INT 106
19109: PUSH
19110: LD_INT 108
19112: PUSH
19113: LD_INT 112
19115: PUSH
19116: LD_INT 113
19118: PUSH
19119: LD_INT 114
19121: PUSH
19122: LD_INT 115
19124: PUSH
19125: LD_INT 116
19127: PUSH
19128: LD_INT 117
19130: PUSH
19131: LD_INT 118
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: ST_TO_ADDR
19152: GO 19395
19154: LD_INT 19
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19394
19162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19163: LD_ADDR_VAR 0 2
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: LD_INT 5
19182: PUSH
19183: LD_INT 6
19185: PUSH
19186: LD_INT 7
19188: PUSH
19189: LD_INT 8
19191: PUSH
19192: LD_INT 9
19194: PUSH
19195: LD_INT 10
19197: PUSH
19198: LD_INT 11
19200: PUSH
19201: LD_INT 12
19203: PUSH
19204: LD_INT 13
19206: PUSH
19207: LD_INT 14
19209: PUSH
19210: LD_INT 15
19212: PUSH
19213: LD_INT 16
19215: PUSH
19216: LD_INT 17
19218: PUSH
19219: LD_INT 18
19221: PUSH
19222: LD_INT 19
19224: PUSH
19225: LD_INT 20
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 22
19233: PUSH
19234: LD_INT 23
19236: PUSH
19237: LD_INT 24
19239: PUSH
19240: LD_INT 25
19242: PUSH
19243: LD_INT 26
19245: PUSH
19246: LD_INT 27
19248: PUSH
19249: LD_INT 28
19251: PUSH
19252: LD_INT 29
19254: PUSH
19255: LD_INT 30
19257: PUSH
19258: LD_INT 31
19260: PUSH
19261: LD_INT 32
19263: PUSH
19264: LD_INT 33
19266: PUSH
19267: LD_INT 34
19269: PUSH
19270: LD_INT 35
19272: PUSH
19273: LD_INT 36
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 101
19316: PUSH
19317: LD_INT 102
19319: PUSH
19320: LD_INT 103
19322: PUSH
19323: LD_INT 104
19325: PUSH
19326: LD_INT 105
19328: PUSH
19329: LD_INT 106
19331: PUSH
19332: LD_INT 107
19334: PUSH
19335: LD_INT 108
19337: PUSH
19338: LD_INT 109
19340: PUSH
19341: LD_INT 110
19343: PUSH
19344: LD_INT 111
19346: PUSH
19347: LD_INT 112
19349: PUSH
19350: LD_INT 113
19352: PUSH
19353: LD_INT 114
19355: PUSH
19356: LD_INT 115
19358: PUSH
19359: LD_INT 116
19361: PUSH
19362: LD_INT 117
19364: PUSH
19365: LD_INT 118
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: ST_TO_ADDR
19392: GO 19395
19394: POP
// end else
19395: GO 19626
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 4
19413: PUSH
19414: LD_INT 5
19416: PUSH
19417: LD_INT 6
19419: PUSH
19420: LD_INT 7
19422: PUSH
19423: LD_INT 8
19425: PUSH
19426: LD_INT 9
19428: PUSH
19429: LD_INT 10
19431: PUSH
19432: LD_INT 11
19434: PUSH
19435: LD_INT 12
19437: PUSH
19438: LD_INT 13
19440: PUSH
19441: LD_INT 14
19443: PUSH
19444: LD_INT 15
19446: PUSH
19447: LD_INT 16
19449: PUSH
19450: LD_INT 17
19452: PUSH
19453: LD_INT 18
19455: PUSH
19456: LD_INT 19
19458: PUSH
19459: LD_INT 20
19461: PUSH
19462: LD_INT 21
19464: PUSH
19465: LD_INT 22
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 24
19473: PUSH
19474: LD_INT 25
19476: PUSH
19477: LD_INT 26
19479: PUSH
19480: LD_INT 27
19482: PUSH
19483: LD_INT 28
19485: PUSH
19486: LD_INT 29
19488: PUSH
19489: LD_INT 30
19491: PUSH
19492: LD_INT 31
19494: PUSH
19495: LD_INT 32
19497: PUSH
19498: LD_INT 33
19500: PUSH
19501: LD_INT 34
19503: PUSH
19504: LD_INT 35
19506: PUSH
19507: LD_INT 36
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 101
19550: PUSH
19551: LD_INT 102
19553: PUSH
19554: LD_INT 103
19556: PUSH
19557: LD_INT 104
19559: PUSH
19560: LD_INT 105
19562: PUSH
19563: LD_INT 106
19565: PUSH
19566: LD_INT 107
19568: PUSH
19569: LD_INT 108
19571: PUSH
19572: LD_INT 109
19574: PUSH
19575: LD_INT 110
19577: PUSH
19578: LD_INT 111
19580: PUSH
19581: LD_INT 112
19583: PUSH
19584: LD_INT 113
19586: PUSH
19587: LD_INT 114
19589: PUSH
19590: LD_INT 115
19592: PUSH
19593: LD_INT 116
19595: PUSH
19596: LD_INT 117
19598: PUSH
19599: LD_INT 118
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
// if result then
19626: LD_VAR 0 2
19630: IFFALSE 20416
// begin normal :=  ;
19632: LD_ADDR_VAR 0 5
19636: PUSH
19637: LD_STRING 
19639: ST_TO_ADDR
// hardcore :=  ;
19640: LD_ADDR_VAR 0 6
19644: PUSH
19645: LD_STRING 
19647: ST_TO_ADDR
// active :=  ;
19648: LD_ADDR_VAR 0 7
19652: PUSH
19653: LD_STRING 
19655: ST_TO_ADDR
// for i = 1 to normalCounter do
19656: LD_ADDR_VAR 0 8
19660: PUSH
19661: DOUBLE
19662: LD_INT 1
19664: DEC
19665: ST_TO_ADDR
19666: LD_EXP 47
19670: PUSH
19671: FOR_TO
19672: IFFALSE 19773
// begin tmp := 0 ;
19674: LD_ADDR_VAR 0 3
19678: PUSH
19679: LD_STRING 0
19681: ST_TO_ADDR
// if result [ 1 ] then
19682: LD_VAR 0 2
19686: PUSH
19687: LD_INT 1
19689: ARRAY
19690: IFFALSE 19755
// if result [ 1 ] [ 1 ] = i then
19692: LD_VAR 0 2
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: PUSH
19701: LD_INT 1
19703: ARRAY
19704: PUSH
19705: LD_VAR 0 8
19709: EQUAL
19710: IFFALSE 19755
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19712: LD_ADDR_VAR 0 2
19716: PUSH
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: LD_VAR 0 2
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: PPUSH
19734: LD_INT 1
19736: PPUSH
19737: CALL_OW 3
19741: PPUSH
19742: CALL_OW 1
19746: ST_TO_ADDR
// tmp := 1 ;
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: LD_STRING 1
19754: ST_TO_ADDR
// end ; normal := normal & tmp ;
19755: LD_ADDR_VAR 0 5
19759: PUSH
19760: LD_VAR 0 5
19764: PUSH
19765: LD_VAR 0 3
19769: STR
19770: ST_TO_ADDR
// end ;
19771: GO 19671
19773: POP
19774: POP
// for i = 1 to hardcoreCounter do
19775: LD_ADDR_VAR 0 8
19779: PUSH
19780: DOUBLE
19781: LD_INT 1
19783: DEC
19784: ST_TO_ADDR
19785: LD_EXP 48
19789: PUSH
19790: FOR_TO
19791: IFFALSE 19896
// begin tmp := 0 ;
19793: LD_ADDR_VAR 0 3
19797: PUSH
19798: LD_STRING 0
19800: ST_TO_ADDR
// if result [ 2 ] then
19801: LD_VAR 0 2
19805: PUSH
19806: LD_INT 2
19808: ARRAY
19809: IFFALSE 19878
// if result [ 2 ] [ 1 ] = 100 + i then
19811: LD_VAR 0 2
19815: PUSH
19816: LD_INT 2
19818: ARRAY
19819: PUSH
19820: LD_INT 1
19822: ARRAY
19823: PUSH
19824: LD_INT 100
19826: PUSH
19827: LD_VAR 0 8
19831: PLUS
19832: EQUAL
19833: IFFALSE 19878
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: LD_INT 2
19847: PPUSH
19848: LD_VAR 0 2
19852: PUSH
19853: LD_INT 2
19855: ARRAY
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 3
19864: PPUSH
19865: CALL_OW 1
19869: ST_TO_ADDR
// tmp := 1 ;
19870: LD_ADDR_VAR 0 3
19874: PUSH
19875: LD_STRING 1
19877: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19878: LD_ADDR_VAR 0 6
19882: PUSH
19883: LD_VAR 0 6
19887: PUSH
19888: LD_VAR 0 3
19892: STR
19893: ST_TO_ADDR
// end ;
19894: GO 19790
19896: POP
19897: POP
// if isGameLoad then
19898: LD_VAR 0 1
19902: IFFALSE 20377
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_EXP 51
19913: PUSH
19914: LD_EXP 50
19918: PUSH
19919: LD_EXP 52
19923: PUSH
19924: LD_EXP 49
19928: PUSH
19929: LD_EXP 53
19933: PUSH
19934: LD_EXP 54
19938: PUSH
19939: LD_EXP 55
19943: PUSH
19944: LD_EXP 56
19948: PUSH
19949: LD_EXP 57
19953: PUSH
19954: LD_EXP 58
19958: PUSH
19959: LD_EXP 59
19963: PUSH
19964: LD_EXP 60
19968: PUSH
19969: LD_EXP 61
19973: PUSH
19974: LD_EXP 62
19978: PUSH
19979: LD_EXP 70
19983: PUSH
19984: LD_EXP 71
19988: PUSH
19989: LD_EXP 72
19993: PUSH
19994: LD_EXP 73
19998: PUSH
19999: LD_EXP 75
20003: PUSH
20004: LD_EXP 76
20008: PUSH
20009: LD_EXP 77
20013: PUSH
20014: LD_EXP 80
20018: PUSH
20019: LD_EXP 82
20023: PUSH
20024: LD_EXP 83
20028: PUSH
20029: LD_EXP 84
20033: PUSH
20034: LD_EXP 86
20038: PUSH
20039: LD_EXP 87
20043: PUSH
20044: LD_EXP 90
20048: PUSH
20049: LD_EXP 91
20053: PUSH
20054: LD_EXP 92
20058: PUSH
20059: LD_EXP 93
20063: PUSH
20064: LD_EXP 94
20068: PUSH
20069: LD_EXP 95
20073: PUSH
20074: LD_EXP 96
20078: PUSH
20079: LD_EXP 97
20083: PUSH
20084: LD_EXP 98
20088: PUSH
20089: LD_EXP 63
20093: PUSH
20094: LD_EXP 64
20098: PUSH
20099: LD_EXP 67
20103: PUSH
20104: LD_EXP 68
20108: PUSH
20109: LD_EXP 69
20113: PUSH
20114: LD_EXP 65
20118: PUSH
20119: LD_EXP 66
20123: PUSH
20124: LD_EXP 74
20128: PUSH
20129: LD_EXP 78
20133: PUSH
20134: LD_EXP 79
20138: PUSH
20139: LD_EXP 81
20143: PUSH
20144: LD_EXP 85
20148: PUSH
20149: LD_EXP 88
20153: PUSH
20154: LD_EXP 89
20158: PUSH
20159: LD_EXP 99
20163: PUSH
20164: LD_EXP 100
20168: PUSH
20169: LD_EXP 101
20173: PUSH
20174: LD_EXP 102
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: ST_TO_ADDR
// tmp :=  ;
20235: LD_ADDR_VAR 0 3
20239: PUSH
20240: LD_STRING 
20242: ST_TO_ADDR
// for i = 1 to normalCounter do
20243: LD_ADDR_VAR 0 8
20247: PUSH
20248: DOUBLE
20249: LD_INT 1
20251: DEC
20252: ST_TO_ADDR
20253: LD_EXP 47
20257: PUSH
20258: FOR_TO
20259: IFFALSE 20295
// begin if flags [ i ] then
20261: LD_VAR 0 4
20265: PUSH
20266: LD_VAR 0 8
20270: ARRAY
20271: IFFALSE 20293
// tmp := tmp & i & ; ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_VAR 0 3
20282: PUSH
20283: LD_VAR 0 8
20287: STR
20288: PUSH
20289: LD_STRING ;
20291: STR
20292: ST_TO_ADDR
// end ;
20293: GO 20258
20295: POP
20296: POP
// for i = 1 to hardcoreCounter do
20297: LD_ADDR_VAR 0 8
20301: PUSH
20302: DOUBLE
20303: LD_INT 1
20305: DEC
20306: ST_TO_ADDR
20307: LD_EXP 48
20311: PUSH
20312: FOR_TO
20313: IFFALSE 20359
// begin if flags [ normalCounter + i ] then
20315: LD_VAR 0 4
20319: PUSH
20320: LD_EXP 47
20324: PUSH
20325: LD_VAR 0 8
20329: PLUS
20330: ARRAY
20331: IFFALSE 20357
// tmp := tmp & ( 100 + i ) & ; ;
20333: LD_ADDR_VAR 0 3
20337: PUSH
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 100
20345: PUSH
20346: LD_VAR 0 8
20350: PLUS
20351: STR
20352: PUSH
20353: LD_STRING ;
20355: STR
20356: ST_TO_ADDR
// end ;
20357: GO 20312
20359: POP
20360: POP
// if tmp then
20361: LD_VAR 0 3
20365: IFFALSE 20377
// active := tmp ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_VAR 0 3
20376: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20377: LD_STRING getStreamItemsFromMission("
20379: PUSH
20380: LD_VAR 0 5
20384: STR
20385: PUSH
20386: LD_STRING ","
20388: STR
20389: PUSH
20390: LD_VAR 0 6
20394: STR
20395: PUSH
20396: LD_STRING ","
20398: STR
20399: PUSH
20400: LD_VAR 0 7
20404: STR
20405: PUSH
20406: LD_STRING ")
20408: STR
20409: PPUSH
20410: CALL_OW 559
// end else
20414: GO 20423
// ToLua ( getStreamItemsFromMission("","","") ) ;
20416: LD_STRING getStreamItemsFromMission("","","")
20418: PPUSH
20419: CALL_OW 559
// end ;
20423: LD_VAR 0 2
20427: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20428: LD_EXP 46
20432: PUSH
20433: LD_EXP 51
20437: AND
20438: IFFALSE 20562
20440: GO 20442
20442: DISABLE
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
// begin enable ;
20447: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_INT 22
20455: PUSH
20456: LD_OWVAR 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 34
20470: PUSH
20471: LD_INT 7
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 34
20480: PUSH
20481: LD_INT 45
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 34
20490: PUSH
20491: LD_INT 28
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 34
20500: PUSH
20501: LD_INT 47
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PPUSH
20519: CALL_OW 69
20523: ST_TO_ADDR
// if not tmp then
20524: LD_VAR 0 2
20528: NOT
20529: IFFALSE 20533
// exit ;
20531: GO 20562
// for i in tmp do
20533: LD_ADDR_VAR 0 1
20537: PUSH
20538: LD_VAR 0 2
20542: PUSH
20543: FOR_IN
20544: IFFALSE 20560
// begin SetLives ( i , 0 ) ;
20546: LD_VAR 0 1
20550: PPUSH
20551: LD_INT 0
20553: PPUSH
20554: CALL_OW 234
// end ;
20558: GO 20543
20560: POP
20561: POP
// end ;
20562: PPOPN 2
20564: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20565: LD_EXP 46
20569: PUSH
20570: LD_EXP 52
20574: AND
20575: IFFALSE 20659
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
20583: PPUSH
// begin enable ;
20584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 32
20604: PUSH
20605: LD_INT 3
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PPUSH
20616: CALL_OW 69
20620: ST_TO_ADDR
// if not tmp then
20621: LD_VAR 0 2
20625: NOT
20626: IFFALSE 20630
// exit ;
20628: GO 20659
// for i in tmp do
20630: LD_ADDR_VAR 0 1
20634: PUSH
20635: LD_VAR 0 2
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20657
// begin SetLives ( i , 0 ) ;
20643: LD_VAR 0 1
20647: PPUSH
20648: LD_INT 0
20650: PPUSH
20651: CALL_OW 234
// end ;
20655: GO 20640
20657: POP
20658: POP
// end ;
20659: PPOPN 2
20661: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20662: LD_EXP 46
20666: PUSH
20667: LD_EXP 49
20671: AND
20672: IFFALSE 20765
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
// begin enable ;
20680: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_OWVAR 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 25
20703: PUSH
20704: LD_INT 5
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 25
20713: PUSH
20714: LD_INT 9
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 25
20723: PUSH
20724: LD_INT 8
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PUSH
20746: FOR_IN
20747: IFFALSE 20763
// begin SetClass ( i , 1 ) ;
20749: LD_VAR 0 1
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: CALL_OW 336
// end ;
20761: GO 20746
20763: POP
20764: POP
// end ;
20765: PPOPN 1
20767: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20768: LD_EXP 46
20772: PUSH
20773: LD_EXP 50
20777: AND
20778: PUSH
20779: LD_OWVAR 65
20783: PUSH
20784: LD_INT 7
20786: LESS
20787: AND
20788: IFFALSE 20802
20790: GO 20792
20792: DISABLE
// begin enable ;
20793: ENABLE
// game_speed := 7 ;
20794: LD_ADDR_OWVAR 65
20798: PUSH
20799: LD_INT 7
20801: ST_TO_ADDR
// end ;
20802: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20803: LD_EXP 46
20807: PUSH
20808: LD_EXP 53
20812: AND
20813: IFFALSE 21015
20815: GO 20817
20817: DISABLE
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
20822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20823: LD_ADDR_VAR 0 3
20827: PUSH
20828: LD_INT 81
20830: PUSH
20831: LD_OWVAR 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: ST_TO_ADDR
// if not tmp then
20859: LD_VAR 0 3
20863: NOT
20864: IFFALSE 20868
// exit ;
20866: GO 21015
// if tmp > 5 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 5
20875: GREATER
20876: IFFALSE 20888
// k := 5 else
20878: LD_ADDR_VAR 0 2
20882: PUSH
20883: LD_INT 5
20885: ST_TO_ADDR
20886: GO 20898
// k := tmp ;
20888: LD_ADDR_VAR 0 2
20892: PUSH
20893: LD_VAR 0 3
20897: ST_TO_ADDR
// for i := 1 to k do
20898: LD_ADDR_VAR 0 1
20902: PUSH
20903: DOUBLE
20904: LD_INT 1
20906: DEC
20907: ST_TO_ADDR
20908: LD_VAR 0 2
20912: PUSH
20913: FOR_TO
20914: IFFALSE 21013
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20916: LD_VAR 0 3
20920: PUSH
20921: LD_VAR 0 1
20925: ARRAY
20926: PPUSH
20927: LD_VAR 0 1
20931: PUSH
20932: LD_INT 4
20934: MOD
20935: PUSH
20936: LD_INT 1
20938: PLUS
20939: PPUSH
20940: CALL_OW 259
20944: PUSH
20945: LD_INT 10
20947: LESS
20948: IFFALSE 21011
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20950: LD_VAR 0 3
20954: PUSH
20955: LD_VAR 0 1
20959: ARRAY
20960: PPUSH
20961: LD_VAR 0 1
20965: PUSH
20966: LD_INT 4
20968: MOD
20969: PUSH
20970: LD_INT 1
20972: PLUS
20973: PPUSH
20974: LD_VAR 0 3
20978: PUSH
20979: LD_VAR 0 1
20983: ARRAY
20984: PPUSH
20985: LD_VAR 0 1
20989: PUSH
20990: LD_INT 4
20992: MOD
20993: PUSH
20994: LD_INT 1
20996: PLUS
20997: PPUSH
20998: CALL_OW 259
21002: PUSH
21003: LD_INT 1
21005: PLUS
21006: PPUSH
21007: CALL_OW 237
21011: GO 20913
21013: POP
21014: POP
// end ;
21015: PPOPN 3
21017: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21018: LD_EXP 46
21022: PUSH
21023: LD_EXP 54
21027: AND
21028: IFFALSE 21048
21030: GO 21032
21032: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21033: LD_INT 4
21035: PPUSH
21036: LD_OWVAR 2
21040: PPUSH
21041: LD_INT 0
21043: PPUSH
21044: CALL_OW 324
21048: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21049: LD_EXP 46
21053: PUSH
21054: LD_EXP 83
21058: AND
21059: IFFALSE 21079
21061: GO 21063
21063: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21064: LD_INT 19
21066: PPUSH
21067: LD_OWVAR 2
21071: PPUSH
21072: LD_INT 0
21074: PPUSH
21075: CALL_OW 324
21079: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21080: LD_EXP 46
21084: PUSH
21085: LD_EXP 55
21089: AND
21090: IFFALSE 21192
21092: GO 21094
21094: DISABLE
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
// begin enable ;
21099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 22
21107: PUSH
21108: LD_OWVAR 2
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 34
21122: PUSH
21123: LD_INT 11
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 34
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: ST_TO_ADDR
// if not tmp then
21154: LD_VAR 0 2
21158: NOT
21159: IFFALSE 21163
// exit ;
21161: GO 21192
// for i in tmp do
21163: LD_ADDR_VAR 0 1
21167: PUSH
21168: LD_VAR 0 2
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21190
// begin SetLives ( i , 0 ) ;
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_INT 0
21183: PPUSH
21184: CALL_OW 234
// end ;
21188: GO 21173
21190: POP
21191: POP
// end ;
21192: PPOPN 2
21194: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21195: LD_EXP 46
21199: PUSH
21200: LD_EXP 56
21204: AND
21205: IFFALSE 21225
21207: GO 21209
21209: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21210: LD_INT 32
21212: PPUSH
21213: LD_OWVAR 2
21217: PPUSH
21218: LD_INT 0
21220: PPUSH
21221: CALL_OW 324
21225: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21226: LD_EXP 46
21230: PUSH
21231: LD_EXP 57
21235: AND
21236: IFFALSE 21417
21238: GO 21240
21240: DISABLE
21241: LD_INT 0
21243: PPUSH
21244: PPUSH
21245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_OWVAR 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 33
21265: PUSH
21266: LD_INT 3
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PPUSH
21277: CALL_OW 69
21281: ST_TO_ADDR
// if not tmp then
21282: LD_VAR 0 2
21286: NOT
21287: IFFALSE 21291
// exit ;
21289: GO 21417
// side := 0 ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
// for i := 1 to 8 do
21299: LD_ADDR_VAR 0 1
21303: PUSH
21304: DOUBLE
21305: LD_INT 1
21307: DEC
21308: ST_TO_ADDR
21309: LD_INT 8
21311: PUSH
21312: FOR_TO
21313: IFFALSE 21361
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21315: LD_OWVAR 2
21319: PUSH
21320: LD_VAR 0 1
21324: NONEQUAL
21325: PUSH
21326: LD_OWVAR 2
21330: PPUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 81
21340: PUSH
21341: LD_INT 2
21343: EQUAL
21344: AND
21345: IFFALSE 21359
// begin side := i ;
21347: LD_ADDR_VAR 0 3
21351: PUSH
21352: LD_VAR 0 1
21356: ST_TO_ADDR
// break ;
21357: GO 21361
// end ;
21359: GO 21312
21361: POP
21362: POP
// if not side then
21363: LD_VAR 0 3
21367: NOT
21368: IFFALSE 21372
// exit ;
21370: GO 21417
// for i := 1 to tmp do
21372: LD_ADDR_VAR 0 1
21376: PUSH
21377: DOUBLE
21378: LD_INT 1
21380: DEC
21381: ST_TO_ADDR
21382: LD_VAR 0 2
21386: PUSH
21387: FOR_TO
21388: IFFALSE 21415
// if Prob ( 60 ) then
21390: LD_INT 60
21392: PPUSH
21393: CALL_OW 13
21397: IFFALSE 21413
// SetSide ( i , side ) ;
21399: LD_VAR 0 1
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: CALL_OW 235
21413: GO 21387
21415: POP
21416: POP
// end ;
21417: PPOPN 3
21419: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21420: LD_EXP 46
21424: PUSH
21425: LD_EXP 59
21429: AND
21430: IFFALSE 21549
21432: GO 21434
21434: DISABLE
21435: LD_INT 0
21437: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21438: LD_ADDR_VAR 0 1
21442: PUSH
21443: LD_INT 22
21445: PUSH
21446: LD_OWVAR 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 21
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 3
21467: PUSH
21468: LD_INT 23
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 69
21491: PUSH
21492: FOR_IN
21493: IFFALSE 21547
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21495: LD_VAR 0 1
21499: PPUSH
21500: CALL_OW 257
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: LD_INT 4
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: IN
21523: IFFALSE 21545
// SetClass ( un , rand ( 1 , 4 ) ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: LD_INT 4
21535: PPUSH
21536: CALL_OW 12
21540: PPUSH
21541: CALL_OW 336
21545: GO 21492
21547: POP
21548: POP
// end ;
21549: PPOPN 1
21551: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21552: LD_EXP 46
21556: PUSH
21557: LD_EXP 58
21561: AND
21562: IFFALSE 21641
21564: GO 21566
21566: DISABLE
21567: LD_INT 0
21569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21570: LD_ADDR_VAR 0 1
21574: PUSH
21575: LD_INT 22
21577: PUSH
21578: LD_OWVAR 2
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 21
21589: PUSH
21590: LD_INT 3
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: ST_TO_ADDR
// if not tmp then
21606: LD_VAR 0 1
21610: NOT
21611: IFFALSE 21615
// exit ;
21613: GO 21641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 1
21622: PPUSH
21623: LD_VAR 0 1
21627: PPUSH
21628: CALL_OW 12
21632: ARRAY
21633: PPUSH
21634: LD_INT 100
21636: PPUSH
21637: CALL_OW 234
// end ;
21641: PPOPN 1
21643: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21644: LD_EXP 46
21648: PUSH
21649: LD_EXP 60
21653: AND
21654: IFFALSE 21752
21656: GO 21658
21658: DISABLE
21659: LD_INT 0
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21662: LD_ADDR_VAR 0 1
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 21
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 1
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21752
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21707: LD_VAR 0 1
21711: PUSH
21712: LD_INT 1
21714: PPUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 12
21724: ARRAY
21725: PPUSH
21726: LD_INT 1
21728: PPUSH
21729: LD_INT 4
21731: PPUSH
21732: CALL_OW 12
21736: PPUSH
21737: LD_INT 3000
21739: PPUSH
21740: LD_INT 9000
21742: PPUSH
21743: CALL_OW 12
21747: PPUSH
21748: CALL_OW 492
// end ;
21752: PPOPN 1
21754: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21755: LD_EXP 46
21759: PUSH
21760: LD_EXP 61
21764: AND
21765: IFFALSE 21785
21767: GO 21769
21769: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21770: LD_INT 1
21772: PPUSH
21773: LD_OWVAR 2
21777: PPUSH
21778: LD_INT 0
21780: PPUSH
21781: CALL_OW 324
21785: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21786: LD_EXP 46
21790: PUSH
21791: LD_EXP 62
21795: AND
21796: IFFALSE 21879
21798: GO 21800
21800: DISABLE
21801: LD_INT 0
21803: PPUSH
21804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_OWVAR 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 21
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: ST_TO_ADDR
// if not tmp then
21841: LD_VAR 0 2
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 21879
// for i in tmp do
21850: LD_ADDR_VAR 0 1
21854: PUSH
21855: LD_VAR 0 2
21859: PUSH
21860: FOR_IN
21861: IFFALSE 21877
// SetBLevel ( i , 10 ) ;
21863: LD_VAR 0 1
21867: PPUSH
21868: LD_INT 10
21870: PPUSH
21871: CALL_OW 241
21875: GO 21860
21877: POP
21878: POP
// end ;
21879: PPOPN 2
21881: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21882: LD_EXP 46
21886: PUSH
21887: LD_EXP 63
21891: AND
21892: IFFALSE 22003
21894: GO 21896
21896: DISABLE
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
21901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_OWVAR 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 25
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PPUSH
21933: CALL_OW 69
21937: ST_TO_ADDR
// if not tmp then
21938: LD_VAR 0 3
21942: NOT
21943: IFFALSE 21947
// exit ;
21945: GO 22003
// un := tmp [ rand ( 1 , tmp ) ] ;
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_VAR 0 3
21956: PUSH
21957: LD_INT 1
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: CALL_OW 12
21969: ARRAY
21970: ST_TO_ADDR
// if Crawls ( un ) then
21971: LD_VAR 0 2
21975: PPUSH
21976: CALL_OW 318
21980: IFFALSE 21991
// ComWalk ( un ) ;
21982: LD_VAR 0 2
21986: PPUSH
21987: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_INT 5
21998: PPUSH
21999: CALL_OW 336
// end ;
22003: PPOPN 3
22005: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22006: LD_EXP 46
22010: PUSH
22011: LD_EXP 64
22015: AND
22016: PUSH
22017: LD_OWVAR 67
22021: PUSH
22022: LD_INT 4
22024: LESS
22025: AND
22026: IFFALSE 22045
22028: GO 22030
22030: DISABLE
// begin Difficulty := Difficulty + 1 ;
22031: LD_ADDR_OWVAR 67
22035: PUSH
22036: LD_OWVAR 67
22040: PUSH
22041: LD_INT 1
22043: PLUS
22044: ST_TO_ADDR
// end ;
22045: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22046: LD_EXP 46
22050: PUSH
22051: LD_EXP 65
22055: AND
22056: IFFALSE 22159
22058: GO 22060
22060: DISABLE
22061: LD_INT 0
22063: PPUSH
// begin for i := 1 to 5 do
22064: LD_ADDR_VAR 0 1
22068: PUSH
22069: DOUBLE
22070: LD_INT 1
22072: DEC
22073: ST_TO_ADDR
22074: LD_INT 5
22076: PUSH
22077: FOR_TO
22078: IFFALSE 22157
// begin uc_nation := nation_nature ;
22080: LD_ADDR_OWVAR 21
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// uc_side := 0 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22096: LD_ADDR_OWVAR 29
22100: PUSH
22101: LD_INT 12
22103: PUSH
22104: LD_INT 12
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: ST_TO_ADDR
// hc_agressivity := 20 ;
22111: LD_ADDR_OWVAR 35
22115: PUSH
22116: LD_INT 20
22118: ST_TO_ADDR
// hc_class := class_tiger ;
22119: LD_ADDR_OWVAR 28
22123: PUSH
22124: LD_INT 14
22126: ST_TO_ADDR
// hc_gallery :=  ;
22127: LD_ADDR_OWVAR 33
22131: PUSH
22132: LD_STRING 
22134: ST_TO_ADDR
// hc_name :=  ;
22135: LD_ADDR_OWVAR 26
22139: PUSH
22140: LD_STRING 
22142: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22143: CALL_OW 44
22147: PPUSH
22148: LD_INT 0
22150: PPUSH
22151: CALL_OW 51
// end ;
22155: GO 22077
22157: POP
22158: POP
// end ;
22159: PPOPN 1
22161: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22162: LD_EXP 46
22166: PUSH
22167: LD_EXP 66
22171: AND
22172: IFFALSE 22181
22174: GO 22176
22176: DISABLE
// StreamSibBomb ;
22177: CALL 22182 0 0
22181: END
// export function StreamSibBomb ; var i , x , y ; begin
22182: LD_INT 0
22184: PPUSH
22185: PPUSH
22186: PPUSH
22187: PPUSH
// result := false ;
22188: LD_ADDR_VAR 0 1
22192: PUSH
22193: LD_INT 0
22195: ST_TO_ADDR
// for i := 1 to 16 do
22196: LD_ADDR_VAR 0 2
22200: PUSH
22201: DOUBLE
22202: LD_INT 1
22204: DEC
22205: ST_TO_ADDR
22206: LD_INT 16
22208: PUSH
22209: FOR_TO
22210: IFFALSE 22409
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22212: LD_ADDR_VAR 0 3
22216: PUSH
22217: LD_INT 10
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 30
22225: PUSH
22226: LD_INT 40
22228: PUSH
22229: LD_INT 50
22231: PUSH
22232: LD_INT 60
22234: PUSH
22235: LD_INT 70
22237: PUSH
22238: LD_INT 80
22240: PUSH
22241: LD_INT 90
22243: PUSH
22244: LD_INT 100
22246: PUSH
22247: LD_INT 110
22249: PUSH
22250: LD_INT 120
22252: PUSH
22253: LD_INT 130
22255: PUSH
22256: LD_INT 140
22258: PUSH
22259: LD_INT 150
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PPUSH
22282: LD_INT 15
22284: PPUSH
22285: CALL_OW 12
22289: ARRAY
22290: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_INT 10
22298: PUSH
22299: LD_INT 20
22301: PUSH
22302: LD_INT 30
22304: PUSH
22305: LD_INT 40
22307: PUSH
22308: LD_INT 50
22310: PUSH
22311: LD_INT 60
22313: PUSH
22314: LD_INT 70
22316: PUSH
22317: LD_INT 80
22319: PUSH
22320: LD_INT 90
22322: PUSH
22323: LD_INT 100
22325: PUSH
22326: LD_INT 110
22328: PUSH
22329: LD_INT 120
22331: PUSH
22332: LD_INT 130
22334: PUSH
22335: LD_INT 140
22337: PUSH
22338: LD_INT 150
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_INT 15
22363: PPUSH
22364: CALL_OW 12
22368: ARRAY
22369: ST_TO_ADDR
// if ValidHex ( x , y ) then
22370: LD_VAR 0 3
22374: PPUSH
22375: LD_VAR 0 4
22379: PPUSH
22380: CALL_OW 488
22384: IFFALSE 22407
// begin result := [ x , y ] ;
22386: LD_ADDR_VAR 0 1
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 4
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: ST_TO_ADDR
// break ;
22405: GO 22409
// end ; end ;
22407: GO 22209
22409: POP
22410: POP
// if result then
22411: LD_VAR 0 1
22415: IFFALSE 22475
// begin ToLua ( playSibBomb() ) ;
22417: LD_STRING playSibBomb()
22419: PPUSH
22420: CALL_OW 559
// wait ( 0 0$14 ) ;
22424: LD_INT 490
22426: PPUSH
22427: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22431: LD_VAR 0 1
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 1
22444: PUSH
22445: LD_INT 2
22447: ARRAY
22448: PPUSH
22449: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22453: LD_VAR 0 1
22457: PUSH
22458: LD_INT 1
22460: ARRAY
22461: PPUSH
22462: LD_VAR 0 1
22466: PUSH
22467: LD_INT 2
22469: ARRAY
22470: PPUSH
22471: CALL_OW 429
// end ; end ;
22475: LD_VAR 0 1
22479: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22480: LD_EXP 46
22484: PUSH
22485: LD_EXP 68
22489: AND
22490: IFFALSE 22502
22492: GO 22494
22494: DISABLE
// YouLost (  ) ;
22495: LD_STRING 
22497: PPUSH
22498: CALL_OW 104
22502: END
// every 0 0$1 trigger StreamModeActive and sFog do
22503: LD_EXP 46
22507: PUSH
22508: LD_EXP 67
22512: AND
22513: IFFALSE 22527
22515: GO 22517
22517: DISABLE
// FogOff ( your_side ) ;
22518: LD_OWVAR 2
22522: PPUSH
22523: CALL_OW 344
22527: END
// every 0 0$1 trigger StreamModeActive and sSun do
22528: LD_EXP 46
22532: PUSH
22533: LD_EXP 69
22537: AND
22538: IFFALSE 22566
22540: GO 22542
22542: DISABLE
// begin solar_recharge_percent := 0 ;
22543: LD_ADDR_OWVAR 79
22547: PUSH
22548: LD_INT 0
22550: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22551: LD_INT 10500
22553: PPUSH
22554: CALL_OW 67
// solar_recharge_percent := 100 ;
22558: LD_ADDR_OWVAR 79
22562: PUSH
22563: LD_INT 100
22565: ST_TO_ADDR
// end ;
22566: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22567: LD_EXP 46
22571: PUSH
22572: LD_EXP 70
22576: AND
22577: IFFALSE 22816
22579: GO 22581
22581: DISABLE
22582: LD_INT 0
22584: PPUSH
22585: PPUSH
22586: PPUSH
// begin tmp := [ ] ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: EMPTY
22593: ST_TO_ADDR
// for i := 1 to 6 do
22594: LD_ADDR_VAR 0 1
22598: PUSH
22599: DOUBLE
22600: LD_INT 1
22602: DEC
22603: ST_TO_ADDR
22604: LD_INT 6
22606: PUSH
22607: FOR_TO
22608: IFFALSE 22713
// begin uc_nation := nation_nature ;
22610: LD_ADDR_OWVAR 21
22614: PUSH
22615: LD_INT 0
22617: ST_TO_ADDR
// uc_side := 0 ;
22618: LD_ADDR_OWVAR 20
22622: PUSH
22623: LD_INT 0
22625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22626: LD_ADDR_OWVAR 29
22630: PUSH
22631: LD_INT 12
22633: PUSH
22634: LD_INT 12
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// hc_agressivity := 20 ;
22641: LD_ADDR_OWVAR 35
22645: PUSH
22646: LD_INT 20
22648: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22649: LD_ADDR_OWVAR 28
22653: PUSH
22654: LD_INT 17
22656: ST_TO_ADDR
// hc_gallery :=  ;
22657: LD_ADDR_OWVAR 33
22661: PUSH
22662: LD_STRING 
22664: ST_TO_ADDR
// hc_name :=  ;
22665: LD_ADDR_OWVAR 26
22669: PUSH
22670: LD_STRING 
22672: ST_TO_ADDR
// un := CreateHuman ;
22673: LD_ADDR_VAR 0 2
22677: PUSH
22678: CALL_OW 44
22682: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22683: LD_VAR 0 2
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: CALL_OW 51
// tmp := tmp ^ un ;
22695: LD_ADDR_VAR 0 3
22699: PUSH
22700: LD_VAR 0 3
22704: PUSH
22705: LD_VAR 0 2
22709: ADD
22710: ST_TO_ADDR
// end ;
22711: GO 22607
22713: POP
22714: POP
// repeat wait ( 0 0$1 ) ;
22715: LD_INT 35
22717: PPUSH
22718: CALL_OW 67
// for un in tmp do
22722: LD_ADDR_VAR 0 2
22726: PUSH
22727: LD_VAR 0 3
22731: PUSH
22732: FOR_IN
22733: IFFALSE 22807
// begin if IsDead ( un ) then
22735: LD_VAR 0 2
22739: PPUSH
22740: CALL_OW 301
22744: IFFALSE 22764
// begin tmp := tmp diff un ;
22746: LD_ADDR_VAR 0 3
22750: PUSH
22751: LD_VAR 0 3
22755: PUSH
22756: LD_VAR 0 2
22760: DIFF
22761: ST_TO_ADDR
// continue ;
22762: GO 22732
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22764: LD_VAR 0 2
22768: PPUSH
22769: LD_INT 3
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PPUSH
22786: CALL_OW 69
22790: PPUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: CALL_OW 74
22800: PPUSH
22801: CALL_OW 115
// end ;
22805: GO 22732
22807: POP
22808: POP
// until not tmp ;
22809: LD_VAR 0 3
22813: NOT
22814: IFFALSE 22715
// end ;
22816: PPOPN 3
22818: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22819: LD_EXP 46
22823: PUSH
22824: LD_EXP 71
22828: AND
22829: IFFALSE 22883
22831: GO 22833
22833: DISABLE
// begin ToLua ( displayTroll(); ) ;
22834: LD_STRING displayTroll();
22836: PPUSH
22837: CALL_OW 559
// wait ( 3 3$00 ) ;
22841: LD_INT 6300
22843: PPUSH
22844: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22848: LD_STRING hideTroll();
22850: PPUSH
22851: CALL_OW 559
// wait ( 1 1$00 ) ;
22855: LD_INT 2100
22857: PPUSH
22858: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22862: LD_STRING displayTroll();
22864: PPUSH
22865: CALL_OW 559
// wait ( 1 1$00 ) ;
22869: LD_INT 2100
22871: PPUSH
22872: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22876: LD_STRING hideTroll();
22878: PPUSH
22879: CALL_OW 559
// end ;
22883: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22884: LD_EXP 46
22888: PUSH
22889: LD_EXP 72
22893: AND
22894: IFFALSE 22957
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
// begin p := 0 ;
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: LD_INT 0
22909: ST_TO_ADDR
// repeat game_speed := 1 ;
22910: LD_ADDR_OWVAR 65
22914: PUSH
22915: LD_INT 1
22917: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22918: LD_INT 35
22920: PPUSH
22921: CALL_OW 67
// p := p + 1 ;
22925: LD_ADDR_VAR 0 1
22929: PUSH
22930: LD_VAR 0 1
22934: PUSH
22935: LD_INT 1
22937: PLUS
22938: ST_TO_ADDR
// until p >= 60 ;
22939: LD_VAR 0 1
22943: PUSH
22944: LD_INT 60
22946: GREATEREQUAL
22947: IFFALSE 22910
// game_speed := 4 ;
22949: LD_ADDR_OWVAR 65
22953: PUSH
22954: LD_INT 4
22956: ST_TO_ADDR
// end ;
22957: PPOPN 1
22959: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22960: LD_EXP 46
22964: PUSH
22965: LD_EXP 73
22969: AND
22970: IFFALSE 23116
22972: GO 22974
22974: DISABLE
22975: LD_INT 0
22977: PPUSH
22978: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22979: LD_ADDR_VAR 0 1
22983: PUSH
22984: LD_INT 22
22986: PUSH
22987: LD_OWVAR 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: LD_INT 30
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PPUSH
23028: CALL_OW 69
23032: ST_TO_ADDR
// if not depot then
23033: LD_VAR 0 1
23037: NOT
23038: IFFALSE 23042
// exit ;
23040: GO 23116
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23042: LD_ADDR_VAR 0 2
23046: PUSH
23047: LD_VAR 0 1
23051: PUSH
23052: LD_INT 1
23054: PPUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 12
23064: ARRAY
23065: PPUSH
23066: CALL_OW 274
23070: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23071: LD_VAR 0 2
23075: PPUSH
23076: LD_INT 1
23078: PPUSH
23079: LD_INT 0
23081: PPUSH
23082: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23086: LD_VAR 0 2
23090: PPUSH
23091: LD_INT 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 3
23108: PPUSH
23109: LD_INT 0
23111: PPUSH
23112: CALL_OW 277
// end ;
23116: PPOPN 2
23118: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23119: LD_EXP 46
23123: PUSH
23124: LD_EXP 74
23128: AND
23129: IFFALSE 23226
23131: GO 23133
23133: DISABLE
23134: LD_INT 0
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23137: LD_ADDR_VAR 0 1
23141: PUSH
23142: LD_INT 22
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: LD_INT 23
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: LIST
23185: PPUSH
23186: CALL_OW 69
23190: ST_TO_ADDR
// if not tmp then
23191: LD_VAR 0 1
23195: NOT
23196: IFFALSE 23200
// exit ;
23198: GO 23226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23200: LD_VAR 0 1
23204: PUSH
23205: LD_INT 1
23207: PPUSH
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL_OW 12
23217: ARRAY
23218: PPUSH
23219: LD_INT 200
23221: PPUSH
23222: CALL_OW 234
// end ;
23226: PPOPN 1
23228: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23229: LD_EXP 46
23233: PUSH
23234: LD_EXP 75
23238: AND
23239: IFFALSE 23318
23241: GO 23243
23243: DISABLE
23244: LD_INT 0
23246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_INT 22
23254: PUSH
23255: LD_OWVAR 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 21
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: ST_TO_ADDR
// if not tmp then
23283: LD_VAR 0 1
23287: NOT
23288: IFFALSE 23292
// exit ;
23290: GO 23318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23292: LD_VAR 0 1
23296: PUSH
23297: LD_INT 1
23299: PPUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 12
23309: ARRAY
23310: PPUSH
23311: LD_INT 60
23313: PPUSH
23314: CALL_OW 234
// end ;
23318: PPOPN 1
23320: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23321: LD_EXP 46
23325: PUSH
23326: LD_EXP 76
23330: AND
23331: IFFALSE 23430
23333: GO 23335
23335: DISABLE
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
// begin enable ;
23340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_OWVAR 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 61
23360: PUSH
23361: EMPTY
23362: LIST
23363: PUSH
23364: LD_INT 33
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: PPUSH
23379: CALL_OW 69
23383: ST_TO_ADDR
// if not tmp then
23384: LD_VAR 0 1
23388: NOT
23389: IFFALSE 23393
// exit ;
23391: GO 23430
// for i in tmp do
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_VAR 0 1
23402: PUSH
23403: FOR_IN
23404: IFFALSE 23428
// if IsControledBy ( i ) then
23406: LD_VAR 0 2
23410: PPUSH
23411: CALL_OW 312
23415: IFFALSE 23426
// ComUnlink ( i ) ;
23417: LD_VAR 0 2
23421: PPUSH
23422: CALL_OW 136
23426: GO 23403
23428: POP
23429: POP
// end ;
23430: PPOPN 2
23432: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23433: LD_EXP 46
23437: PUSH
23438: LD_EXP 77
23442: AND
23443: IFFALSE 23583
23445: GO 23447
23447: DISABLE
23448: LD_INT 0
23450: PPUSH
23451: PPUSH
// begin ToLua ( displayPowell(); ) ;
23452: LD_STRING displayPowell();
23454: PPUSH
23455: CALL_OW 559
// uc_side := 0 ;
23459: LD_ADDR_OWVAR 20
23463: PUSH
23464: LD_INT 0
23466: ST_TO_ADDR
// uc_nation := 2 ;
23467: LD_ADDR_OWVAR 21
23471: PUSH
23472: LD_INT 2
23474: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23475: LD_ADDR_OWVAR 37
23479: PUSH
23480: LD_INT 14
23482: ST_TO_ADDR
// vc_engine := engine_siberite ;
23483: LD_ADDR_OWVAR 39
23487: PUSH
23488: LD_INT 3
23490: ST_TO_ADDR
// vc_control := control_apeman ;
23491: LD_ADDR_OWVAR 38
23495: PUSH
23496: LD_INT 5
23498: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23499: LD_ADDR_OWVAR 40
23503: PUSH
23504: LD_INT 29
23506: ST_TO_ADDR
// un := CreateVehicle ;
23507: LD_ADDR_VAR 0 2
23511: PUSH
23512: CALL_OW 45
23516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23517: LD_VAR 0 2
23521: PPUSH
23522: LD_INT 1
23524: PPUSH
23525: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23529: LD_INT 35
23531: PPUSH
23532: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23536: LD_VAR 0 2
23540: PPUSH
23541: LD_INT 22
23543: PUSH
23544: LD_OWVAR 2
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PPUSH
23553: CALL_OW 69
23557: PPUSH
23558: LD_VAR 0 2
23562: PPUSH
23563: CALL_OW 74
23567: PPUSH
23568: CALL_OW 115
// until IsDead ( un ) ;
23572: LD_VAR 0 2
23576: PPUSH
23577: CALL_OW 301
23581: IFFALSE 23529
// end ;
23583: PPOPN 2
23585: END
// every 0 0$1 trigger StreamModeActive and sStu do
23586: LD_EXP 46
23590: PUSH
23591: LD_EXP 85
23595: AND
23596: IFFALSE 23612
23598: GO 23600
23600: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23601: LD_STRING displayStucuk();
23603: PPUSH
23604: CALL_OW 559
// ResetFog ;
23608: CALL_OW 335
// end ;
23612: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23613: LD_EXP 46
23617: PUSH
23618: LD_EXP 78
23622: AND
23623: IFFALSE 23764
23625: GO 23627
23627: DISABLE
23628: LD_INT 0
23630: PPUSH
23631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_OWVAR 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// if not tmp then
23668: LD_VAR 0 2
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23764
// un := tmp [ rand ( 1 , tmp ) ] ;
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_VAR 0 2
23686: PUSH
23687: LD_INT 1
23689: PPUSH
23690: LD_VAR 0 2
23694: PPUSH
23695: CALL_OW 12
23699: ARRAY
23700: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_INT 0
23708: PPUSH
23709: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_OWVAR 3
23722: PUSH
23723: LD_VAR 0 1
23727: DIFF
23728: PPUSH
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 74
23738: PPUSH
23739: CALL_OW 115
// wait ( 0 0$20 ) ;
23743: LD_INT 700
23745: PPUSH
23746: CALL_OW 67
// SetSide ( un , your_side ) ;
23750: LD_VAR 0 1
23754: PPUSH
23755: LD_OWVAR 2
23759: PPUSH
23760: CALL_OW 235
// end ;
23764: PPOPN 2
23766: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23767: LD_EXP 46
23771: PUSH
23772: LD_EXP 79
23776: AND
23777: IFFALSE 23883
23779: GO 23781
23781: DISABLE
23782: LD_INT 0
23784: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23785: LD_ADDR_VAR 0 1
23789: PUSH
23790: LD_INT 22
23792: PUSH
23793: LD_OWVAR 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 30
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 30
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: ST_TO_ADDR
// if not depot then
23839: LD_VAR 0 1
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23883
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23848: LD_VAR 0 1
23852: PUSH
23853: LD_INT 1
23855: ARRAY
23856: PPUSH
23857: CALL_OW 250
23861: PPUSH
23862: LD_VAR 0 1
23866: PUSH
23867: LD_INT 1
23869: ARRAY
23870: PPUSH
23871: CALL_OW 251
23875: PPUSH
23876: LD_INT 70
23878: PPUSH
23879: CALL_OW 495
// end ;
23883: PPOPN 1
23885: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23886: LD_EXP 46
23890: PUSH
23891: LD_EXP 80
23895: AND
23896: IFFALSE 24107
23898: GO 23900
23900: DISABLE
23901: LD_INT 0
23903: PPUSH
23904: PPUSH
23905: PPUSH
23906: PPUSH
23907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23908: LD_ADDR_VAR 0 5
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_OWVAR 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 69
23943: ST_TO_ADDR
// if not tmp then
23944: LD_VAR 0 5
23948: NOT
23949: IFFALSE 23953
// exit ;
23951: GO 24107
// for i in tmp do
23953: LD_ADDR_VAR 0 1
23957: PUSH
23958: LD_VAR 0 5
23962: PUSH
23963: FOR_IN
23964: IFFALSE 24105
// begin d := rand ( 0 , 5 ) ;
23966: LD_ADDR_VAR 0 4
23970: PUSH
23971: LD_INT 0
23973: PPUSH
23974: LD_INT 5
23976: PPUSH
23977: CALL_OW 12
23981: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23982: LD_ADDR_VAR 0 2
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL_OW 250
23996: PPUSH
23997: LD_VAR 0 4
24001: PPUSH
24002: LD_INT 3
24004: PPUSH
24005: LD_INT 12
24007: PPUSH
24008: CALL_OW 12
24012: PPUSH
24013: CALL_OW 272
24017: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24018: LD_ADDR_VAR 0 3
24022: PUSH
24023: LD_VAR 0 1
24027: PPUSH
24028: CALL_OW 251
24032: PPUSH
24033: LD_VAR 0 4
24037: PPUSH
24038: LD_INT 3
24040: PPUSH
24041: LD_INT 12
24043: PPUSH
24044: CALL_OW 12
24048: PPUSH
24049: CALL_OW 273
24053: ST_TO_ADDR
// if ValidHex ( x , y ) then
24054: LD_VAR 0 2
24058: PPUSH
24059: LD_VAR 0 3
24063: PPUSH
24064: CALL_OW 488
24068: IFFALSE 24103
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24070: LD_VAR 0 1
24074: PPUSH
24075: LD_VAR 0 2
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_INT 3
24087: PPUSH
24088: LD_INT 6
24090: PPUSH
24091: CALL_OW 12
24095: PPUSH
24096: LD_INT 1
24098: PPUSH
24099: CALL_OW 483
// end ;
24103: GO 23963
24105: POP
24106: POP
// end ;
24107: PPOPN 5
24109: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24110: LD_EXP 46
24114: PUSH
24115: LD_EXP 81
24119: AND
24120: IFFALSE 24214
24122: GO 24124
24124: DISABLE
24125: LD_INT 0
24127: PPUSH
24128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24129: LD_ADDR_VAR 0 2
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_OWVAR 2
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 32
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: PPUSH
24171: CALL_OW 69
24175: ST_TO_ADDR
// if not tmp then
24176: LD_VAR 0 2
24180: NOT
24181: IFFALSE 24185
// exit ;
24183: GO 24214
// for i in tmp do
24185: LD_ADDR_VAR 0 1
24189: PUSH
24190: LD_VAR 0 2
24194: PUSH
24195: FOR_IN
24196: IFFALSE 24212
// SetFuel ( i , 0 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_INT 0
24205: PPUSH
24206: CALL_OW 240
24210: GO 24195
24212: POP
24213: POP
// end ;
24214: PPOPN 2
24216: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24217: LD_EXP 46
24221: PUSH
24222: LD_EXP 82
24226: AND
24227: IFFALSE 24293
24229: GO 24231
24231: DISABLE
24232: LD_INT 0
24234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24235: LD_ADDR_VAR 0 1
24239: PUSH
24240: LD_INT 22
24242: PUSH
24243: LD_OWVAR 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 30
24254: PUSH
24255: LD_INT 29
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: ST_TO_ADDR
// if not tmp then
24271: LD_VAR 0 1
24275: NOT
24276: IFFALSE 24280
// exit ;
24278: GO 24293
// DestroyUnit ( tmp [ 1 ] ) ;
24280: LD_VAR 0 1
24284: PUSH
24285: LD_INT 1
24287: ARRAY
24288: PPUSH
24289: CALL_OW 65
// end ;
24293: PPOPN 1
24295: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24296: LD_EXP 46
24300: PUSH
24301: LD_EXP 84
24305: AND
24306: IFFALSE 24435
24308: GO 24310
24310: DISABLE
24311: LD_INT 0
24313: PPUSH
// begin uc_side := 0 ;
24314: LD_ADDR_OWVAR 20
24318: PUSH
24319: LD_INT 0
24321: ST_TO_ADDR
// uc_nation := nation_arabian ;
24322: LD_ADDR_OWVAR 21
24326: PUSH
24327: LD_INT 2
24329: ST_TO_ADDR
// hc_gallery :=  ;
24330: LD_ADDR_OWVAR 33
24334: PUSH
24335: LD_STRING 
24337: ST_TO_ADDR
// hc_name :=  ;
24338: LD_ADDR_OWVAR 26
24342: PUSH
24343: LD_STRING 
24345: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24346: LD_INT 1
24348: PPUSH
24349: LD_INT 11
24351: PPUSH
24352: LD_INT 10
24354: PPUSH
24355: CALL_OW 380
// un := CreateHuman ;
24359: LD_ADDR_VAR 0 1
24363: PUSH
24364: CALL_OW 44
24368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24369: LD_VAR 0 1
24373: PPUSH
24374: LD_INT 1
24376: PPUSH
24377: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24381: LD_INT 35
24383: PPUSH
24384: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24388: LD_VAR 0 1
24392: PPUSH
24393: LD_INT 22
24395: PUSH
24396: LD_OWVAR 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PPUSH
24405: CALL_OW 69
24409: PPUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 74
24419: PPUSH
24420: CALL_OW 115
// until IsDead ( un ) ;
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 301
24433: IFFALSE 24381
// end ;
24435: PPOPN 1
24437: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24438: LD_EXP 46
24442: PUSH
24443: LD_EXP 86
24447: AND
24448: IFFALSE 24460
24450: GO 24452
24452: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24453: LD_STRING earthquake(getX(game), 0, 32)
24455: PPUSH
24456: CALL_OW 559
24460: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24461: LD_EXP 46
24465: PUSH
24466: LD_EXP 87
24470: AND
24471: IFFALSE 24562
24473: GO 24475
24475: DISABLE
24476: LD_INT 0
24478: PPUSH
// begin enable ;
24479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24480: LD_ADDR_VAR 0 1
24484: PUSH
24485: LD_INT 22
24487: PUSH
24488: LD_OWVAR 2
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 21
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 33
24509: PUSH
24510: LD_INT 3
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: PPUSH
24522: CALL_OW 69
24526: ST_TO_ADDR
// if not tmp then
24527: LD_VAR 0 1
24531: NOT
24532: IFFALSE 24536
// exit ;
24534: GO 24562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24536: LD_VAR 0 1
24540: PUSH
24541: LD_INT 1
24543: PPUSH
24544: LD_VAR 0 1
24548: PPUSH
24549: CALL_OW 12
24553: ARRAY
24554: PPUSH
24555: LD_INT 1
24557: PPUSH
24558: CALL_OW 234
// end ;
24562: PPOPN 1
24564: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24565: LD_EXP 46
24569: PUSH
24570: LD_EXP 88
24574: AND
24575: IFFALSE 24716
24577: GO 24579
24579: DISABLE
24580: LD_INT 0
24582: PPUSH
24583: PPUSH
24584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 22
24592: PUSH
24593: LD_OWVAR 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 25
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PPUSH
24616: CALL_OW 69
24620: ST_TO_ADDR
// if not tmp then
24621: LD_VAR 0 3
24625: NOT
24626: IFFALSE 24630
// exit ;
24628: GO 24716
// un := tmp [ rand ( 1 , tmp ) ] ;
24630: LD_ADDR_VAR 0 2
24634: PUSH
24635: LD_VAR 0 3
24639: PUSH
24640: LD_INT 1
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: CALL_OW 12
24652: ARRAY
24653: ST_TO_ADDR
// if Crawls ( un ) then
24654: LD_VAR 0 2
24658: PPUSH
24659: CALL_OW 318
24663: IFFALSE 24674
// ComWalk ( un ) ;
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_INT 9
24681: PPUSH
24682: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24686: LD_INT 28
24688: PPUSH
24689: LD_OWVAR 2
24693: PPUSH
24694: LD_INT 2
24696: PPUSH
24697: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24701: LD_INT 29
24703: PPUSH
24704: LD_OWVAR 2
24708: PPUSH
24709: LD_INT 2
24711: PPUSH
24712: CALL_OW 322
// end ;
24716: PPOPN 3
24718: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24719: LD_EXP 46
24723: PUSH
24724: LD_EXP 89
24728: AND
24729: IFFALSE 24840
24731: GO 24733
24733: DISABLE
24734: LD_INT 0
24736: PPUSH
24737: PPUSH
24738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: LD_INT 22
24746: PUSH
24747: LD_OWVAR 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 25
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PPUSH
24770: CALL_OW 69
24774: ST_TO_ADDR
// if not tmp then
24775: LD_VAR 0 3
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 24840
// un := tmp [ rand ( 1 , tmp ) ] ;
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_VAR 0 3
24793: PUSH
24794: LD_INT 1
24796: PPUSH
24797: LD_VAR 0 3
24801: PPUSH
24802: CALL_OW 12
24806: ARRAY
24807: ST_TO_ADDR
// if Crawls ( un ) then
24808: LD_VAR 0 2
24812: PPUSH
24813: CALL_OW 318
24817: IFFALSE 24828
// ComWalk ( un ) ;
24819: LD_VAR 0 2
24823: PPUSH
24824: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24828: LD_VAR 0 2
24832: PPUSH
24833: LD_INT 8
24835: PPUSH
24836: CALL_OW 336
// end ;
24840: PPOPN 3
24842: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24843: LD_EXP 46
24847: PUSH
24848: LD_EXP 90
24852: AND
24853: IFFALSE 24997
24855: GO 24857
24857: DISABLE
24858: LD_INT 0
24860: PPUSH
24861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24862: LD_ADDR_VAR 0 2
24866: PUSH
24867: LD_INT 22
24869: PUSH
24870: LD_OWVAR 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: LD_INT 34
24894: PUSH
24895: LD_INT 12
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 34
24904: PUSH
24905: LD_INT 51
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 34
24914: PUSH
24915: LD_INT 32
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: ST_TO_ADDR
// if not tmp then
24938: LD_VAR 0 2
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 24997
// for i in tmp do
24947: LD_ADDR_VAR 0 1
24951: PUSH
24952: LD_VAR 0 2
24956: PUSH
24957: FOR_IN
24958: IFFALSE 24995
// if GetCargo ( i , mat_artifact ) = 0 then
24960: LD_VAR 0 1
24964: PPUSH
24965: LD_INT 4
24967: PPUSH
24968: CALL_OW 289
24972: PUSH
24973: LD_INT 0
24975: EQUAL
24976: IFFALSE 24993
// SetCargo ( i , mat_siberit , 100 ) ;
24978: LD_VAR 0 1
24982: PPUSH
24983: LD_INT 3
24985: PPUSH
24986: LD_INT 100
24988: PPUSH
24989: CALL_OW 290
24993: GO 24957
24995: POP
24996: POP
// end ;
24997: PPOPN 2
24999: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25000: LD_EXP 46
25004: PUSH
25005: LD_EXP 91
25009: AND
25010: IFFALSE 25193
25012: GO 25014
25014: DISABLE
25015: LD_INT 0
25017: PPUSH
25018: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_OWVAR 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PPUSH
25036: CALL_OW 69
25040: ST_TO_ADDR
// if not tmp then
25041: LD_VAR 0 2
25045: NOT
25046: IFFALSE 25050
// exit ;
25048: GO 25193
// for i := 1 to 2 do
25050: LD_ADDR_VAR 0 1
25054: PUSH
25055: DOUBLE
25056: LD_INT 1
25058: DEC
25059: ST_TO_ADDR
25060: LD_INT 2
25062: PUSH
25063: FOR_TO
25064: IFFALSE 25191
// begin uc_side := your_side ;
25066: LD_ADDR_OWVAR 20
25070: PUSH
25071: LD_OWVAR 2
25075: ST_TO_ADDR
// uc_nation := nation_american ;
25076: LD_ADDR_OWVAR 21
25080: PUSH
25081: LD_INT 1
25083: ST_TO_ADDR
// vc_chassis := us_morphling ;
25084: LD_ADDR_OWVAR 37
25088: PUSH
25089: LD_INT 5
25091: ST_TO_ADDR
// vc_engine := engine_siberite ;
25092: LD_ADDR_OWVAR 39
25096: PUSH
25097: LD_INT 3
25099: ST_TO_ADDR
// vc_control := control_computer ;
25100: LD_ADDR_OWVAR 38
25104: PUSH
25105: LD_INT 3
25107: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25108: LD_ADDR_OWVAR 40
25112: PUSH
25113: LD_INT 10
25115: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25116: LD_VAR 0 2
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: PPUSH
25125: CALL_OW 310
25129: NOT
25130: IFFALSE 25177
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25132: CALL_OW 45
25136: PPUSH
25137: LD_VAR 0 2
25141: PUSH
25142: LD_INT 1
25144: ARRAY
25145: PPUSH
25146: CALL_OW 250
25150: PPUSH
25151: LD_VAR 0 2
25155: PUSH
25156: LD_INT 1
25158: ARRAY
25159: PPUSH
25160: CALL_OW 251
25164: PPUSH
25165: LD_INT 12
25167: PPUSH
25168: LD_INT 1
25170: PPUSH
25171: CALL_OW 50
25175: GO 25189
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25177: CALL_OW 45
25181: PPUSH
25182: LD_INT 1
25184: PPUSH
25185: CALL_OW 51
// end ;
25189: GO 25063
25191: POP
25192: POP
// end ;
25193: PPOPN 2
25195: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25196: LD_EXP 46
25200: PUSH
25201: LD_EXP 92
25205: AND
25206: IFFALSE 25428
25208: GO 25210
25210: DISABLE
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25219: LD_ADDR_VAR 0 6
25223: PUSH
25224: LD_INT 22
25226: PUSH
25227: LD_OWVAR 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 21
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: LD_INT 23
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: PPUSH
25268: CALL_OW 69
25272: ST_TO_ADDR
// if not tmp then
25273: LD_VAR 0 6
25277: NOT
25278: IFFALSE 25282
// exit ;
25280: GO 25428
// s1 := rand ( 1 , 4 ) ;
25282: LD_ADDR_VAR 0 2
25286: PUSH
25287: LD_INT 1
25289: PPUSH
25290: LD_INT 4
25292: PPUSH
25293: CALL_OW 12
25297: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25298: LD_ADDR_VAR 0 4
25302: PUSH
25303: LD_VAR 0 6
25307: PUSH
25308: LD_INT 1
25310: ARRAY
25311: PPUSH
25312: LD_VAR 0 2
25316: PPUSH
25317: CALL_OW 259
25321: ST_TO_ADDR
// if s1 = 1 then
25322: LD_VAR 0 2
25326: PUSH
25327: LD_INT 1
25329: EQUAL
25330: IFFALSE 25350
// s2 := rand ( 2 , 4 ) else
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: LD_INT 2
25339: PPUSH
25340: LD_INT 4
25342: PPUSH
25343: CALL_OW 12
25347: ST_TO_ADDR
25348: GO 25358
// s2 := 1 ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_INT 1
25357: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25358: LD_ADDR_VAR 0 5
25362: PUSH
25363: LD_VAR 0 6
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PPUSH
25372: LD_VAR 0 3
25376: PPUSH
25377: CALL_OW 259
25381: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25382: LD_VAR 0 6
25386: PUSH
25387: LD_INT 1
25389: ARRAY
25390: PPUSH
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_VAR 0 5
25400: PPUSH
25401: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25405: LD_VAR 0 6
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PPUSH
25414: LD_VAR 0 3
25418: PPUSH
25419: LD_VAR 0 4
25423: PPUSH
25424: CALL_OW 237
// end ;
25428: PPOPN 6
25430: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25431: LD_EXP 46
25435: PUSH
25436: LD_EXP 93
25440: AND
25441: IFFALSE 25520
25443: GO 25445
25445: DISABLE
25446: LD_INT 0
25448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: LD_INT 22
25456: PUSH
25457: LD_OWVAR 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 30
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PPUSH
25480: CALL_OW 69
25484: ST_TO_ADDR
// if not tmp then
25485: LD_VAR 0 1
25489: NOT
25490: IFFALSE 25494
// exit ;
25492: GO 25520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25494: LD_VAR 0 1
25498: PUSH
25499: LD_INT 1
25501: PPUSH
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 12
25511: ARRAY
25512: PPUSH
25513: LD_INT 1
25515: PPUSH
25516: CALL_OW 234
// end ;
25520: PPOPN 1
25522: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25523: LD_EXP 46
25527: PUSH
25528: LD_EXP 94
25532: AND
25533: IFFALSE 25645
25535: GO 25537
25537: DISABLE
25538: LD_INT 0
25540: PPUSH
25541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25542: LD_ADDR_VAR 0 2
25546: PUSH
25547: LD_INT 22
25549: PUSH
25550: LD_OWVAR 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 30
25564: PUSH
25565: LD_INT 27
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 30
25574: PUSH
25575: LD_INT 26
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 28
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PPUSH
25602: CALL_OW 69
25606: ST_TO_ADDR
// if not tmp then
25607: LD_VAR 0 2
25611: NOT
25612: IFFALSE 25616
// exit ;
25614: GO 25645
// for i in tmp do
25616: LD_ADDR_VAR 0 1
25620: PUSH
25621: LD_VAR 0 2
25625: PUSH
25626: FOR_IN
25627: IFFALSE 25643
// SetLives ( i , 1 ) ;
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_INT 1
25636: PPUSH
25637: CALL_OW 234
25641: GO 25626
25643: POP
25644: POP
// end ;
25645: PPOPN 2
25647: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25648: LD_EXP 46
25652: PUSH
25653: LD_EXP 95
25657: AND
25658: IFFALSE 25945
25660: GO 25662
25662: DISABLE
25663: LD_INT 0
25665: PPUSH
25666: PPUSH
25667: PPUSH
// begin i := rand ( 1 , 7 ) ;
25668: LD_ADDR_VAR 0 1
25672: PUSH
25673: LD_INT 1
25675: PPUSH
25676: LD_INT 7
25678: PPUSH
25679: CALL_OW 12
25683: ST_TO_ADDR
// case i of 1 :
25684: LD_VAR 0 1
25688: PUSH
25689: LD_INT 1
25691: DOUBLE
25692: EQUAL
25693: IFTRUE 25697
25695: GO 25707
25697: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25698: LD_STRING earthquake(getX(game), 0, 32)
25700: PPUSH
25701: CALL_OW 559
25705: GO 25945
25707: LD_INT 2
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25729
25715: POP
// begin ToLua ( displayStucuk(); ) ;
25716: LD_STRING displayStucuk();
25718: PPUSH
25719: CALL_OW 559
// ResetFog ;
25723: CALL_OW 335
// end ; 3 :
25727: GO 25945
25729: LD_INT 3
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25737
25735: GO 25841
25737: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25738: LD_ADDR_VAR 0 2
25742: PUSH
25743: LD_INT 22
25745: PUSH
25746: LD_OWVAR 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 25
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL_OW 69
25773: ST_TO_ADDR
// if not tmp then
25774: LD_VAR 0 2
25778: NOT
25779: IFFALSE 25783
// exit ;
25781: GO 25945
// un := tmp [ rand ( 1 , tmp ) ] ;
25783: LD_ADDR_VAR 0 3
25787: PUSH
25788: LD_VAR 0 2
25792: PUSH
25793: LD_INT 1
25795: PPUSH
25796: LD_VAR 0 2
25800: PPUSH
25801: CALL_OW 12
25805: ARRAY
25806: ST_TO_ADDR
// if Crawls ( un ) then
25807: LD_VAR 0 3
25811: PPUSH
25812: CALL_OW 318
25816: IFFALSE 25827
// ComWalk ( un ) ;
25818: LD_VAR 0 3
25822: PPUSH
25823: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25827: LD_VAR 0 3
25831: PPUSH
25832: LD_INT 8
25834: PPUSH
25835: CALL_OW 336
// end ; 4 :
25839: GO 25945
25841: LD_INT 4
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 25923
25849: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25850: LD_ADDR_VAR 0 2
25854: PUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 30
25869: PUSH
25870: LD_INT 29
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PPUSH
25881: CALL_OW 69
25885: ST_TO_ADDR
// if not tmp then
25886: LD_VAR 0 2
25890: NOT
25891: IFFALSE 25895
// exit ;
25893: GO 25945
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25895: LD_VAR 0 2
25899: PUSH
25900: LD_INT 1
25902: ARRAY
25903: PPUSH
25904: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25908: LD_VAR 0 2
25912: PUSH
25913: LD_INT 1
25915: ARRAY
25916: PPUSH
25917: CALL_OW 65
// end ; 5 .. 7 :
25921: GO 25945
25923: LD_INT 5
25925: DOUBLE
25926: GREATEREQUAL
25927: IFFALSE 25935
25929: LD_INT 7
25931: DOUBLE
25932: LESSEQUAL
25933: IFTRUE 25937
25935: GO 25944
25937: POP
// StreamSibBomb ; end ;
25938: CALL 22182 0 0
25942: GO 25945
25944: POP
// end ;
25945: PPOPN 3
25947: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25948: LD_EXP 46
25952: PUSH
25953: LD_EXP 96
25957: AND
25958: IFFALSE 26114
25960: GO 25962
25962: DISABLE
25963: LD_INT 0
25965: PPUSH
25966: PPUSH
25967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25968: LD_ADDR_VAR 0 2
25972: PUSH
25973: LD_INT 81
25975: PUSH
25976: LD_OWVAR 2
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 21
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 21
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PPUSH
26017: CALL_OW 69
26021: ST_TO_ADDR
// if not tmp then
26022: LD_VAR 0 2
26026: NOT
26027: IFFALSE 26031
// exit ;
26029: GO 26114
// p := 0 ;
26031: LD_ADDR_VAR 0 3
26035: PUSH
26036: LD_INT 0
26038: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26039: LD_INT 35
26041: PPUSH
26042: CALL_OW 67
// p := p + 1 ;
26046: LD_ADDR_VAR 0 3
26050: PUSH
26051: LD_VAR 0 3
26055: PUSH
26056: LD_INT 1
26058: PLUS
26059: ST_TO_ADDR
// for i in tmp do
26060: LD_ADDR_VAR 0 1
26064: PUSH
26065: LD_VAR 0 2
26069: PUSH
26070: FOR_IN
26071: IFFALSE 26102
// if GetLives ( i ) < 1000 then
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 256
26082: PUSH
26083: LD_INT 1000
26085: LESS
26086: IFFALSE 26100
// SetLives ( i , 1000 ) ;
26088: LD_VAR 0 1
26092: PPUSH
26093: LD_INT 1000
26095: PPUSH
26096: CALL_OW 234
26100: GO 26070
26102: POP
26103: POP
// until p > 20 ;
26104: LD_VAR 0 3
26108: PUSH
26109: LD_INT 20
26111: GREATER
26112: IFFALSE 26039
// end ;
26114: PPOPN 3
26116: END
// every 0 0$1 trigger StreamModeActive and sTime do
26117: LD_EXP 46
26121: PUSH
26122: LD_EXP 97
26126: AND
26127: IFFALSE 26162
26129: GO 26131
26131: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26132: LD_INT 28
26134: PPUSH
26135: LD_OWVAR 2
26139: PPUSH
26140: LD_INT 2
26142: PPUSH
26143: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26147: LD_INT 30
26149: PPUSH
26150: LD_OWVAR 2
26154: PPUSH
26155: LD_INT 2
26157: PPUSH
26158: CALL_OW 322
// end ;
26162: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26163: LD_EXP 46
26167: PUSH
26168: LD_EXP 98
26172: AND
26173: IFFALSE 26294
26175: GO 26177
26177: DISABLE
26178: LD_INT 0
26180: PPUSH
26181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26182: LD_ADDR_VAR 0 2
26186: PUSH
26187: LD_INT 22
26189: PUSH
26190: LD_OWVAR 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 21
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 3
26211: PUSH
26212: LD_INT 23
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: ST_TO_ADDR
// if not tmp then
26236: LD_VAR 0 2
26240: NOT
26241: IFFALSE 26245
// exit ;
26243: GO 26294
// for i in tmp do
26245: LD_ADDR_VAR 0 1
26249: PUSH
26250: LD_VAR 0 2
26254: PUSH
26255: FOR_IN
26256: IFFALSE 26292
// begin if Crawls ( i ) then
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 318
26267: IFFALSE 26278
// ComWalk ( i ) ;
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 138
// SetClass ( i , 2 ) ;
26278: LD_VAR 0 1
26282: PPUSH
26283: LD_INT 2
26285: PPUSH
26286: CALL_OW 336
// end ;
26290: GO 26255
26292: POP
26293: POP
// end ;
26294: PPOPN 2
26296: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26297: LD_EXP 46
26301: PUSH
26302: LD_EXP 99
26306: AND
26307: IFFALSE 26595
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
26315: PPUSH
26316: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26317: LD_OWVAR 2
26321: PPUSH
26322: LD_INT 9
26324: PPUSH
26325: LD_INT 1
26327: PPUSH
26328: LD_INT 1
26330: PPUSH
26331: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26335: LD_INT 9
26337: PPUSH
26338: LD_OWVAR 2
26342: PPUSH
26343: CALL_OW 343
// uc_side := 9 ;
26347: LD_ADDR_OWVAR 20
26351: PUSH
26352: LD_INT 9
26354: ST_TO_ADDR
// uc_nation := 2 ;
26355: LD_ADDR_OWVAR 21
26359: PUSH
26360: LD_INT 2
26362: ST_TO_ADDR
// hc_name := Dark Warrior ;
26363: LD_ADDR_OWVAR 26
26367: PUSH
26368: LD_STRING Dark Warrior
26370: ST_TO_ADDR
// hc_gallery :=  ;
26371: LD_ADDR_OWVAR 33
26375: PUSH
26376: LD_STRING 
26378: ST_TO_ADDR
// hc_noskilllimit := true ;
26379: LD_ADDR_OWVAR 76
26383: PUSH
26384: LD_INT 1
26386: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26387: LD_ADDR_OWVAR 31
26391: PUSH
26392: LD_INT 30
26394: PUSH
26395: LD_INT 30
26397: PUSH
26398: LD_INT 30
26400: PUSH
26401: LD_INT 30
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// un := CreateHuman ;
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: CALL_OW 44
26419: ST_TO_ADDR
// hc_noskilllimit := false ;
26420: LD_ADDR_OWVAR 76
26424: PUSH
26425: LD_INT 0
26427: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26428: LD_VAR 0 3
26432: PPUSH
26433: LD_INT 1
26435: PPUSH
26436: CALL_OW 51
// ToLua ( playRanger() ) ;
26440: LD_STRING playRanger()
26442: PPUSH
26443: CALL_OW 559
// p := 0 ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 0
26454: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26455: LD_INT 35
26457: PPUSH
26458: CALL_OW 67
// p := p + 1 ;
26462: LD_ADDR_VAR 0 2
26466: PUSH
26467: LD_VAR 0 2
26471: PUSH
26472: LD_INT 1
26474: PLUS
26475: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26476: LD_VAR 0 3
26480: PPUSH
26481: CALL_OW 256
26485: PUSH
26486: LD_INT 1000
26488: LESS
26489: IFFALSE 26503
// SetLives ( un , 1000 ) ;
26491: LD_VAR 0 3
26495: PPUSH
26496: LD_INT 1000
26498: PPUSH
26499: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26503: LD_VAR 0 3
26507: PPUSH
26508: LD_INT 81
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 91
26522: PUSH
26523: LD_VAR 0 3
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PPUSH
26540: CALL_OW 69
26544: PPUSH
26545: LD_VAR 0 3
26549: PPUSH
26550: CALL_OW 74
26554: PPUSH
26555: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26559: LD_VAR 0 2
26563: PUSH
26564: LD_INT 80
26566: GREATER
26567: PUSH
26568: LD_VAR 0 3
26572: PPUSH
26573: CALL_OW 301
26577: OR
26578: IFFALSE 26455
// if un then
26580: LD_VAR 0 3
26584: IFFALSE 26595
// RemoveUnit ( un ) ;
26586: LD_VAR 0 3
26590: PPUSH
26591: CALL_OW 64
// end ;
26595: PPOPN 3
26597: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26598: LD_EXP 100
26602: IFFALSE 26718
26604: GO 26606
26606: DISABLE
26607: LD_INT 0
26609: PPUSH
26610: PPUSH
26611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26612: LD_ADDR_VAR 0 2
26616: PUSH
26617: LD_INT 81
26619: PUSH
26620: LD_OWVAR 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PPUSH
26643: CALL_OW 69
26647: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26648: LD_STRING playComputer()
26650: PPUSH
26651: CALL_OW 559
// if not tmp then
26655: LD_VAR 0 2
26659: NOT
26660: IFFALSE 26664
// exit ;
26662: GO 26718
// for i in tmp do
26664: LD_ADDR_VAR 0 1
26668: PUSH
26669: LD_VAR 0 2
26673: PUSH
26674: FOR_IN
26675: IFFALSE 26716
// for j := 1 to 4 do
26677: LD_ADDR_VAR 0 3
26681: PUSH
26682: DOUBLE
26683: LD_INT 1
26685: DEC
26686: ST_TO_ADDR
26687: LD_INT 4
26689: PUSH
26690: FOR_TO
26691: IFFALSE 26712
// SetSkill ( i , j , 10 ) ;
26693: LD_VAR 0 1
26697: PPUSH
26698: LD_VAR 0 3
26702: PPUSH
26703: LD_INT 10
26705: PPUSH
26706: CALL_OW 237
26710: GO 26690
26712: POP
26713: POP
26714: GO 26674
26716: POP
26717: POP
// end ;
26718: PPOPN 3
26720: END
// every 0 0$1 trigger s30 do var i , tmp ;
26721: LD_EXP 101
26725: IFFALSE 26794
26727: GO 26729
26729: DISABLE
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26734: LD_ADDR_VAR 0 2
26738: PUSH
26739: LD_INT 22
26741: PUSH
26742: LD_OWVAR 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 69
26755: ST_TO_ADDR
// if not tmp then
26756: LD_VAR 0 2
26760: NOT
26761: IFFALSE 26765
// exit ;
26763: GO 26794
// for i in tmp do
26765: LD_ADDR_VAR 0 1
26769: PUSH
26770: LD_VAR 0 2
26774: PUSH
26775: FOR_IN
26776: IFFALSE 26792
// SetLives ( i , 300 ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: LD_INT 300
26785: PPUSH
26786: CALL_OW 234
26790: GO 26775
26792: POP
26793: POP
// end ;
26794: PPOPN 2
26796: END
// every 0 0$1 trigger s60 do var i , tmp ;
26797: LD_EXP 102
26801: IFFALSE 26870
26803: GO 26805
26805: DISABLE
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26810: LD_ADDR_VAR 0 2
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_OWVAR 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PPUSH
26827: CALL_OW 69
26831: ST_TO_ADDR
// if not tmp then
26832: LD_VAR 0 2
26836: NOT
26837: IFFALSE 26841
// exit ;
26839: GO 26870
// for i in tmp do
26841: LD_ADDR_VAR 0 1
26845: PUSH
26846: LD_VAR 0 2
26850: PUSH
26851: FOR_IN
26852: IFFALSE 26868
// SetLives ( i , 600 ) ;
26854: LD_VAR 0 1
26858: PPUSH
26859: LD_INT 600
26861: PPUSH
26862: CALL_OW 234
26866: GO 26851
26868: POP
26869: POP
// end ;
26870: PPOPN 2
26872: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26873: LD_INT 0
26875: PPUSH
// case cmd of 301 :
26876: LD_VAR 0 1
26880: PUSH
26881: LD_INT 301
26883: DOUBLE
26884: EQUAL
26885: IFTRUE 26889
26887: GO 26921
26889: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26890: LD_VAR 0 6
26894: PPUSH
26895: LD_VAR 0 7
26899: PPUSH
26900: LD_VAR 0 8
26904: PPUSH
26905: LD_VAR 0 4
26909: PPUSH
26910: LD_VAR 0 5
26914: PPUSH
26915: CALL 28122 0 5
26919: GO 27042
26921: LD_INT 302
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26966
26929: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26930: LD_VAR 0 6
26934: PPUSH
26935: LD_VAR 0 7
26939: PPUSH
26940: LD_VAR 0 8
26944: PPUSH
26945: LD_VAR 0 9
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL 28213 0 6
26964: GO 27042
26966: LD_INT 303
26968: DOUBLE
26969: EQUAL
26970: IFTRUE 26974
26972: GO 27011
26974: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26975: LD_VAR 0 6
26979: PPUSH
26980: LD_VAR 0 7
26984: PPUSH
26985: LD_VAR 0 8
26989: PPUSH
26990: LD_VAR 0 9
26994: PPUSH
26995: LD_VAR 0 4
26999: PPUSH
27000: LD_VAR 0 5
27004: PPUSH
27005: CALL 27047 0 6
27009: GO 27042
27011: LD_INT 304
27013: DOUBLE
27014: EQUAL
27015: IFTRUE 27019
27017: GO 27041
27019: POP
// hHackTeleport ( unit , x , y ) ; end ;
27020: LD_VAR 0 2
27024: PPUSH
27025: LD_VAR 0 4
27029: PPUSH
27030: LD_VAR 0 5
27034: PPUSH
27035: CALL 28806 0 3
27039: GO 27042
27041: POP
// end ;
27042: LD_VAR 0 12
27046: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27047: LD_INT 0
27049: PPUSH
27050: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 1
27058: LESS
27059: PUSH
27060: LD_VAR 0 1
27064: PUSH
27065: LD_INT 3
27067: GREATER
27068: OR
27069: PUSH
27070: LD_VAR 0 5
27074: PPUSH
27075: LD_VAR 0 6
27079: PPUSH
27080: CALL_OW 428
27084: OR
27085: IFFALSE 27089
// exit ;
27087: GO 27809
// uc_side := your_side ;
27089: LD_ADDR_OWVAR 20
27093: PUSH
27094: LD_OWVAR 2
27098: ST_TO_ADDR
// uc_nation := nation ;
27099: LD_ADDR_OWVAR 21
27103: PUSH
27104: LD_VAR 0 1
27108: ST_TO_ADDR
// bc_level = 1 ;
27109: LD_ADDR_OWVAR 43
27113: PUSH
27114: LD_INT 1
27116: ST_TO_ADDR
// case btype of 1 :
27117: LD_VAR 0 2
27121: PUSH
27122: LD_INT 1
27124: DOUBLE
27125: EQUAL
27126: IFTRUE 27130
27128: GO 27141
27130: POP
// bc_type := b_depot ; 2 :
27131: LD_ADDR_OWVAR 42
27135: PUSH
27136: LD_INT 0
27138: ST_TO_ADDR
27139: GO 27753
27141: LD_INT 2
27143: DOUBLE
27144: EQUAL
27145: IFTRUE 27149
27147: GO 27160
27149: POP
// bc_type := b_warehouse ; 3 :
27150: LD_ADDR_OWVAR 42
27154: PUSH
27155: LD_INT 1
27157: ST_TO_ADDR
27158: GO 27753
27160: LD_INT 3
27162: DOUBLE
27163: EQUAL
27164: IFTRUE 27168
27166: GO 27179
27168: POP
// bc_type := b_lab ; 4 .. 9 :
27169: LD_ADDR_OWVAR 42
27173: PUSH
27174: LD_INT 6
27176: ST_TO_ADDR
27177: GO 27753
27179: LD_INT 4
27181: DOUBLE
27182: GREATEREQUAL
27183: IFFALSE 27191
27185: LD_INT 9
27187: DOUBLE
27188: LESSEQUAL
27189: IFTRUE 27193
27191: GO 27245
27193: POP
// begin bc_type := b_lab_half ;
27194: LD_ADDR_OWVAR 42
27198: PUSH
27199: LD_INT 7
27201: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27202: LD_ADDR_OWVAR 44
27206: PUSH
27207: LD_INT 10
27209: PUSH
27210: LD_INT 11
27212: PUSH
27213: LD_INT 12
27215: PUSH
27216: LD_INT 15
27218: PUSH
27219: LD_INT 14
27221: PUSH
27222: LD_INT 13
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: PUSH
27233: LD_VAR 0 2
27237: PUSH
27238: LD_INT 3
27240: MINUS
27241: ARRAY
27242: ST_TO_ADDR
// end ; 10 .. 13 :
27243: GO 27753
27245: LD_INT 10
27247: DOUBLE
27248: GREATEREQUAL
27249: IFFALSE 27257
27251: LD_INT 13
27253: DOUBLE
27254: LESSEQUAL
27255: IFTRUE 27259
27257: GO 27336
27259: POP
// begin bc_type := b_lab_full ;
27260: LD_ADDR_OWVAR 42
27264: PUSH
27265: LD_INT 8
27267: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27268: LD_ADDR_OWVAR 44
27272: PUSH
27273: LD_INT 10
27275: PUSH
27276: LD_INT 12
27278: PUSH
27279: LD_INT 14
27281: PUSH
27282: LD_INT 13
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: PUSH
27291: LD_VAR 0 2
27295: PUSH
27296: LD_INT 9
27298: MINUS
27299: ARRAY
27300: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27301: LD_ADDR_OWVAR 45
27305: PUSH
27306: LD_INT 11
27308: PUSH
27309: LD_INT 15
27311: PUSH
27312: LD_INT 12
27314: PUSH
27315: LD_INT 15
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: PUSH
27324: LD_VAR 0 2
27328: PUSH
27329: LD_INT 9
27331: MINUS
27332: ARRAY
27333: ST_TO_ADDR
// end ; 14 :
27334: GO 27753
27336: LD_INT 14
27338: DOUBLE
27339: EQUAL
27340: IFTRUE 27344
27342: GO 27355
27344: POP
// bc_type := b_workshop ; 15 :
27345: LD_ADDR_OWVAR 42
27349: PUSH
27350: LD_INT 2
27352: ST_TO_ADDR
27353: GO 27753
27355: LD_INT 15
27357: DOUBLE
27358: EQUAL
27359: IFTRUE 27363
27361: GO 27374
27363: POP
// bc_type := b_factory ; 16 :
27364: LD_ADDR_OWVAR 42
27368: PUSH
27369: LD_INT 3
27371: ST_TO_ADDR
27372: GO 27753
27374: LD_INT 16
27376: DOUBLE
27377: EQUAL
27378: IFTRUE 27382
27380: GO 27393
27382: POP
// bc_type := b_ext_gun ; 17 :
27383: LD_ADDR_OWVAR 42
27387: PUSH
27388: LD_INT 17
27390: ST_TO_ADDR
27391: GO 27753
27393: LD_INT 17
27395: DOUBLE
27396: EQUAL
27397: IFTRUE 27401
27399: GO 27429
27401: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27402: LD_ADDR_OWVAR 42
27406: PUSH
27407: LD_INT 19
27409: PUSH
27410: LD_INT 23
27412: PUSH
27413: LD_INT 19
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: PUSH
27421: LD_VAR 0 1
27425: ARRAY
27426: ST_TO_ADDR
27427: GO 27753
27429: LD_INT 18
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27448
27437: POP
// bc_type := b_ext_radar ; 19 :
27438: LD_ADDR_OWVAR 42
27442: PUSH
27443: LD_INT 20
27445: ST_TO_ADDR
27446: GO 27753
27448: LD_INT 19
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27456
27454: GO 27467
27456: POP
// bc_type := b_ext_radio ; 20 :
27457: LD_ADDR_OWVAR 42
27461: PUSH
27462: LD_INT 22
27464: ST_TO_ADDR
27465: GO 27753
27467: LD_INT 20
27469: DOUBLE
27470: EQUAL
27471: IFTRUE 27475
27473: GO 27486
27475: POP
// bc_type := b_ext_siberium ; 21 :
27476: LD_ADDR_OWVAR 42
27480: PUSH
27481: LD_INT 21
27483: ST_TO_ADDR
27484: GO 27753
27486: LD_INT 21
27488: DOUBLE
27489: EQUAL
27490: IFTRUE 27494
27492: GO 27505
27494: POP
// bc_type := b_ext_computer ; 22 :
27495: LD_ADDR_OWVAR 42
27499: PUSH
27500: LD_INT 24
27502: ST_TO_ADDR
27503: GO 27753
27505: LD_INT 22
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27513
27511: GO 27524
27513: POP
// bc_type := b_ext_track ; 23 :
27514: LD_ADDR_OWVAR 42
27518: PUSH
27519: LD_INT 16
27521: ST_TO_ADDR
27522: GO 27753
27524: LD_INT 23
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27532
27530: GO 27543
27532: POP
// bc_type := b_ext_laser ; 24 :
27533: LD_ADDR_OWVAR 42
27537: PUSH
27538: LD_INT 25
27540: ST_TO_ADDR
27541: GO 27753
27543: LD_INT 24
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27562
27551: POP
// bc_type := b_control_tower ; 25 :
27552: LD_ADDR_OWVAR 42
27556: PUSH
27557: LD_INT 36
27559: ST_TO_ADDR
27560: GO 27753
27562: LD_INT 25
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27570
27568: GO 27581
27570: POP
// bc_type := b_breastwork ; 26 :
27571: LD_ADDR_OWVAR 42
27575: PUSH
27576: LD_INT 31
27578: ST_TO_ADDR
27579: GO 27753
27581: LD_INT 26
27583: DOUBLE
27584: EQUAL
27585: IFTRUE 27589
27587: GO 27600
27589: POP
// bc_type := b_bunker ; 27 :
27590: LD_ADDR_OWVAR 42
27594: PUSH
27595: LD_INT 32
27597: ST_TO_ADDR
27598: GO 27753
27600: LD_INT 27
27602: DOUBLE
27603: EQUAL
27604: IFTRUE 27608
27606: GO 27619
27608: POP
// bc_type := b_turret ; 28 :
27609: LD_ADDR_OWVAR 42
27613: PUSH
27614: LD_INT 33
27616: ST_TO_ADDR
27617: GO 27753
27619: LD_INT 28
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27638
27627: POP
// bc_type := b_armoury ; 29 :
27628: LD_ADDR_OWVAR 42
27632: PUSH
27633: LD_INT 4
27635: ST_TO_ADDR
27636: GO 27753
27638: LD_INT 29
27640: DOUBLE
27641: EQUAL
27642: IFTRUE 27646
27644: GO 27657
27646: POP
// bc_type := b_barracks ; 30 :
27647: LD_ADDR_OWVAR 42
27651: PUSH
27652: LD_INT 5
27654: ST_TO_ADDR
27655: GO 27753
27657: LD_INT 30
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27665
27663: GO 27676
27665: POP
// bc_type := b_solar_power ; 31 :
27666: LD_ADDR_OWVAR 42
27670: PUSH
27671: LD_INT 27
27673: ST_TO_ADDR
27674: GO 27753
27676: LD_INT 31
27678: DOUBLE
27679: EQUAL
27680: IFTRUE 27684
27682: GO 27695
27684: POP
// bc_type := b_oil_power ; 32 :
27685: LD_ADDR_OWVAR 42
27689: PUSH
27690: LD_INT 26
27692: ST_TO_ADDR
27693: GO 27753
27695: LD_INT 32
27697: DOUBLE
27698: EQUAL
27699: IFTRUE 27703
27701: GO 27714
27703: POP
// bc_type := b_siberite_power ; 33 :
27704: LD_ADDR_OWVAR 42
27708: PUSH
27709: LD_INT 28
27711: ST_TO_ADDR
27712: GO 27753
27714: LD_INT 33
27716: DOUBLE
27717: EQUAL
27718: IFTRUE 27722
27720: GO 27733
27722: POP
// bc_type := b_oil_mine ; 34 :
27723: LD_ADDR_OWVAR 42
27727: PUSH
27728: LD_INT 29
27730: ST_TO_ADDR
27731: GO 27753
27733: LD_INT 34
27735: DOUBLE
27736: EQUAL
27737: IFTRUE 27741
27739: GO 27752
27741: POP
// bc_type := b_siberite_mine ; end ;
27742: LD_ADDR_OWVAR 42
27746: PUSH
27747: LD_INT 30
27749: ST_TO_ADDR
27750: GO 27753
27752: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27753: LD_ADDR_VAR 0 8
27757: PUSH
27758: LD_VAR 0 5
27762: PPUSH
27763: LD_VAR 0 6
27767: PPUSH
27768: LD_VAR 0 3
27772: PPUSH
27773: CALL_OW 47
27777: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27778: LD_OWVAR 42
27782: PUSH
27783: LD_INT 32
27785: PUSH
27786: LD_INT 33
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: IN
27793: IFFALSE 27809
// PlaceWeaponTurret ( b , weapon ) ;
27795: LD_VAR 0 8
27799: PPUSH
27800: LD_VAR 0 4
27804: PPUSH
27805: CALL_OW 431
// end ;
27809: LD_VAR 0 7
27813: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27814: LD_INT 0
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_INT 22
27827: PUSH
27828: LD_OWVAR 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: LD_INT 30
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 30
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PPUSH
27869: CALL_OW 69
27873: ST_TO_ADDR
// if not tmp then
27874: LD_VAR 0 4
27878: NOT
27879: IFFALSE 27883
// exit ;
27881: GO 27942
// for i in tmp do
27883: LD_ADDR_VAR 0 2
27887: PUSH
27888: LD_VAR 0 4
27892: PUSH
27893: FOR_IN
27894: IFFALSE 27940
// for j = 1 to 3 do
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: DOUBLE
27902: LD_INT 1
27904: DEC
27905: ST_TO_ADDR
27906: LD_INT 3
27908: PUSH
27909: FOR_TO
27910: IFFALSE 27936
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27912: LD_VAR 0 2
27916: PPUSH
27917: CALL_OW 274
27921: PPUSH
27922: LD_VAR 0 3
27926: PPUSH
27927: LD_INT 99999
27929: PPUSH
27930: CALL_OW 277
27934: GO 27909
27936: POP
27937: POP
27938: GO 27893
27940: POP
27941: POP
// end ;
27942: LD_VAR 0 1
27946: RET
// export function hHackSetLevel10 ; var i , j ; begin
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
27951: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27952: LD_ADDR_VAR 0 2
27956: PUSH
27957: LD_INT 21
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PPUSH
27967: CALL_OW 69
27971: PUSH
27972: FOR_IN
27973: IFFALSE 28025
// if IsSelected ( i ) then
27975: LD_VAR 0 2
27979: PPUSH
27980: CALL_OW 306
27984: IFFALSE 28023
// begin for j := 1 to 4 do
27986: LD_ADDR_VAR 0 3
27990: PUSH
27991: DOUBLE
27992: LD_INT 1
27994: DEC
27995: ST_TO_ADDR
27996: LD_INT 4
27998: PUSH
27999: FOR_TO
28000: IFFALSE 28021
// SetSkill ( i , j , 10 ) ;
28002: LD_VAR 0 2
28006: PPUSH
28007: LD_VAR 0 3
28011: PPUSH
28012: LD_INT 10
28014: PPUSH
28015: CALL_OW 237
28019: GO 27999
28021: POP
28022: POP
// end ;
28023: GO 27972
28025: POP
28026: POP
// end ;
28027: LD_VAR 0 1
28031: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28037: LD_ADDR_VAR 0 2
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 21
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: PUSH
28073: FOR_IN
28074: IFFALSE 28115
// begin for j := 1 to 4 do
28076: LD_ADDR_VAR 0 3
28080: PUSH
28081: DOUBLE
28082: LD_INT 1
28084: DEC
28085: ST_TO_ADDR
28086: LD_INT 4
28088: PUSH
28089: FOR_TO
28090: IFFALSE 28111
// SetSkill ( i , j , 10 ) ;
28092: LD_VAR 0 2
28096: PPUSH
28097: LD_VAR 0 3
28101: PPUSH
28102: LD_INT 10
28104: PPUSH
28105: CALL_OW 237
28109: GO 28089
28111: POP
28112: POP
// end ;
28113: GO 28073
28115: POP
28116: POP
// end ;
28117: LD_VAR 0 1
28121: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28122: LD_INT 0
28124: PPUSH
// uc_side := your_side ;
28125: LD_ADDR_OWVAR 20
28129: PUSH
28130: LD_OWVAR 2
28134: ST_TO_ADDR
// uc_nation := nation ;
28135: LD_ADDR_OWVAR 21
28139: PUSH
28140: LD_VAR 0 1
28144: ST_TO_ADDR
// InitHc ;
28145: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28149: LD_INT 0
28151: PPUSH
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_VAR 0 3
28161: PPUSH
28162: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28166: LD_VAR 0 4
28170: PPUSH
28171: LD_VAR 0 5
28175: PPUSH
28176: CALL_OW 428
28180: PUSH
28181: LD_INT 0
28183: EQUAL
28184: IFFALSE 28208
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28186: CALL_OW 44
28190: PPUSH
28191: LD_VAR 0 4
28195: PPUSH
28196: LD_VAR 0 5
28200: PPUSH
28201: LD_INT 1
28203: PPUSH
28204: CALL_OW 48
// end ;
28208: LD_VAR 0 6
28212: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28213: LD_INT 0
28215: PPUSH
28216: PPUSH
// uc_side := your_side ;
28217: LD_ADDR_OWVAR 20
28221: PUSH
28222: LD_OWVAR 2
28226: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28227: LD_VAR 0 1
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: LD_INT 4
28243: PUSH
28244: LD_INT 5
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: IN
28254: IFFALSE 28266
// uc_nation := nation_american else
28256: LD_ADDR_OWVAR 21
28260: PUSH
28261: LD_INT 1
28263: ST_TO_ADDR
28264: GO 28309
// if chassis in [ 11 , 12 , 13 , 14 ] then
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 11
28273: PUSH
28274: LD_INT 12
28276: PUSH
28277: LD_INT 13
28279: PUSH
28280: LD_INT 14
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: IN
28289: IFFALSE 28301
// uc_nation := nation_arabian else
28291: LD_ADDR_OWVAR 21
28295: PUSH
28296: LD_INT 2
28298: ST_TO_ADDR
28299: GO 28309
// uc_nation := nation_russian ;
28301: LD_ADDR_OWVAR 21
28305: PUSH
28306: LD_INT 3
28308: ST_TO_ADDR
// vc_chassis := chassis ;
28309: LD_ADDR_OWVAR 37
28313: PUSH
28314: LD_VAR 0 1
28318: ST_TO_ADDR
// vc_engine := engine ;
28319: LD_ADDR_OWVAR 39
28323: PUSH
28324: LD_VAR 0 2
28328: ST_TO_ADDR
// vc_control := control ;
28329: LD_ADDR_OWVAR 38
28333: PUSH
28334: LD_VAR 0 3
28338: ST_TO_ADDR
// vc_weapon := weapon ;
28339: LD_ADDR_OWVAR 40
28343: PUSH
28344: LD_VAR 0 4
28348: ST_TO_ADDR
// un := CreateVehicle ;
28349: LD_ADDR_VAR 0 8
28353: PUSH
28354: CALL_OW 45
28358: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28359: LD_VAR 0 8
28363: PPUSH
28364: LD_INT 0
28366: PPUSH
28367: LD_INT 5
28369: PPUSH
28370: CALL_OW 12
28374: PPUSH
28375: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28379: LD_VAR 0 8
28383: PPUSH
28384: LD_VAR 0 5
28388: PPUSH
28389: LD_VAR 0 6
28393: PPUSH
28394: LD_INT 1
28396: PPUSH
28397: CALL_OW 48
// end ;
28401: LD_VAR 0 7
28405: RET
// export hInvincible ; every 1 do
28406: GO 28408
28408: DISABLE
// hInvincible := [ ] ;
28409: LD_ADDR_EXP 103
28413: PUSH
28414: EMPTY
28415: ST_TO_ADDR
28416: END
// every 10 do var i ;
28417: GO 28419
28419: DISABLE
28420: LD_INT 0
28422: PPUSH
// begin enable ;
28423: ENABLE
// if not hInvincible then
28424: LD_EXP 103
28428: NOT
28429: IFFALSE 28433
// exit ;
28431: GO 28477
// for i in hInvincible do
28433: LD_ADDR_VAR 0 1
28437: PUSH
28438: LD_EXP 103
28442: PUSH
28443: FOR_IN
28444: IFFALSE 28475
// if GetLives ( i ) < 1000 then
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 256
28455: PUSH
28456: LD_INT 1000
28458: LESS
28459: IFFALSE 28473
// SetLives ( i , 1000 ) ;
28461: LD_VAR 0 1
28465: PPUSH
28466: LD_INT 1000
28468: PPUSH
28469: CALL_OW 234
28473: GO 28443
28475: POP
28476: POP
// end ;
28477: PPOPN 1
28479: END
// export function hHackInvincible ; var i ; begin
28480: LD_INT 0
28482: PPUSH
28483: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28484: LD_ADDR_VAR 0 2
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: LD_INT 21
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 21
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: PUSH
28522: FOR_IN
28523: IFFALSE 28584
// if IsSelected ( i ) then
28525: LD_VAR 0 2
28529: PPUSH
28530: CALL_OW 306
28534: IFFALSE 28582
// begin if i in hInvincible then
28536: LD_VAR 0 2
28540: PUSH
28541: LD_EXP 103
28545: IN
28546: IFFALSE 28566
// hInvincible := hInvincible diff i else
28548: LD_ADDR_EXP 103
28552: PUSH
28553: LD_EXP 103
28557: PUSH
28558: LD_VAR 0 2
28562: DIFF
28563: ST_TO_ADDR
28564: GO 28582
// hInvincible := hInvincible union i ;
28566: LD_ADDR_EXP 103
28570: PUSH
28571: LD_EXP 103
28575: PUSH
28576: LD_VAR 0 2
28580: UNION
28581: ST_TO_ADDR
// end ;
28582: GO 28522
28584: POP
28585: POP
// end ;
28586: LD_VAR 0 1
28590: RET
// export function hHackInvisible ; var i , j ; begin
28591: LD_INT 0
28593: PPUSH
28594: PPUSH
28595: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28596: LD_ADDR_VAR 0 2
28600: PUSH
28601: LD_INT 21
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 69
28615: PUSH
28616: FOR_IN
28617: IFFALSE 28641
// if IsSelected ( i ) then
28619: LD_VAR 0 2
28623: PPUSH
28624: CALL_OW 306
28628: IFFALSE 28639
// ComForceInvisible ( i ) ;
28630: LD_VAR 0 2
28634: PPUSH
28635: CALL_OW 496
28639: GO 28616
28641: POP
28642: POP
// end ;
28643: LD_VAR 0 1
28647: RET
// export function hHackChangeYourSide ; begin
28648: LD_INT 0
28650: PPUSH
// if your_side = 8 then
28651: LD_OWVAR 2
28655: PUSH
28656: LD_INT 8
28658: EQUAL
28659: IFFALSE 28671
// your_side := 0 else
28661: LD_ADDR_OWVAR 2
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
28669: GO 28685
// your_side := your_side + 1 ;
28671: LD_ADDR_OWVAR 2
28675: PUSH
28676: LD_OWVAR 2
28680: PUSH
28681: LD_INT 1
28683: PLUS
28684: ST_TO_ADDR
// end ;
28685: LD_VAR 0 1
28689: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
28694: PPUSH
// for i in all_units do
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_OWVAR 3
28704: PUSH
28705: FOR_IN
28706: IFFALSE 28784
// if IsSelected ( i ) then
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 306
28717: IFFALSE 28782
// begin j := GetSide ( i ) ;
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_VAR 0 2
28728: PPUSH
28729: CALL_OW 255
28733: ST_TO_ADDR
// if j = 8 then
28734: LD_VAR 0 3
28738: PUSH
28739: LD_INT 8
28741: EQUAL
28742: IFFALSE 28754
// j := 0 else
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 0
28751: ST_TO_ADDR
28752: GO 28768
// j := j + 1 ;
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_VAR 0 3
28763: PUSH
28764: LD_INT 1
28766: PLUS
28767: ST_TO_ADDR
// SetSide ( i , j ) ;
28768: LD_VAR 0 2
28772: PPUSH
28773: LD_VAR 0 3
28777: PPUSH
28778: CALL_OW 235
// end ;
28782: GO 28705
28784: POP
28785: POP
// end ;
28786: LD_VAR 0 1
28790: RET
// export function hHackFog ; begin
28791: LD_INT 0
28793: PPUSH
// FogOff ( true ) ;
28794: LD_INT 1
28796: PPUSH
28797: CALL_OW 344
// end ;
28801: LD_VAR 0 1
28805: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28806: LD_INT 0
28808: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_VAR 0 2
28818: PPUSH
28819: LD_VAR 0 3
28823: PPUSH
28824: LD_INT 1
28826: PPUSH
28827: LD_INT 1
28829: PPUSH
28830: CALL_OW 483
// CenterOnXY ( x , y ) ;
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_VAR 0 3
28843: PPUSH
28844: CALL_OW 84
// end ;
28848: LD_VAR 0 4
28852: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28853: LD_INT 0
28855: PPUSH
28856: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28857: LD_VAR 0 1
28861: NOT
28862: PUSH
28863: LD_VAR 0 2
28867: PPUSH
28868: LD_VAR 0 3
28872: PPUSH
28873: CALL_OW 488
28877: NOT
28878: OR
28879: PUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 266
28889: PUSH
28890: LD_INT 3
28892: NONEQUAL
28893: PUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 247
28903: PUSH
28904: LD_INT 1
28906: EQUAL
28907: NOT
28908: AND
28909: OR
28910: IFFALSE 28914
// exit ;
28912: GO 29063
// if GetType ( factory ) = unit_human then
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 247
28923: PUSH
28924: LD_INT 1
28926: EQUAL
28927: IFFALSE 28944
// factory := IsInUnit ( factory ) ;
28929: LD_ADDR_VAR 0 1
28933: PUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 310
28943: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 266
28953: PUSH
28954: LD_INT 3
28956: NONEQUAL
28957: IFFALSE 28961
// exit ;
28959: GO 29063
// if HexInfo ( x , y ) = factory then
28961: LD_VAR 0 2
28965: PPUSH
28966: LD_VAR 0 3
28970: PPUSH
28971: CALL_OW 428
28975: PUSH
28976: LD_VAR 0 1
28980: EQUAL
28981: IFFALSE 29008
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28983: LD_ADDR_EXP 104
28987: PUSH
28988: LD_EXP 104
28992: PPUSH
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_INT 0
29000: PPUSH
29001: CALL_OW 1
29005: ST_TO_ADDR
29006: GO 29059
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29008: LD_ADDR_EXP 104
29012: PUSH
29013: LD_EXP 104
29017: PPUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 255
29032: PUSH
29033: LD_VAR 0 1
29037: PUSH
29038: LD_VAR 0 2
29042: PUSH
29043: LD_VAR 0 3
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 1
29058: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29059: CALL 29068 0 0
// end ;
29063: LD_VAR 0 4
29067: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29068: LD_INT 0
29070: PPUSH
29071: PPUSH
29072: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29073: LD_STRING resetFactoryWaypoint();
29075: PPUSH
29076: CALL_OW 559
// if factoryWaypoints then
29080: LD_EXP 104
29084: IFFALSE 29210
// begin list := PrepareArray ( factoryWaypoints ) ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_EXP 104
29095: PPUSH
29096: CALL 71371 0 1
29100: ST_TO_ADDR
// for i := 1 to list do
29101: LD_ADDR_VAR 0 2
29105: PUSH
29106: DOUBLE
29107: LD_INT 1
29109: DEC
29110: ST_TO_ADDR
29111: LD_VAR 0 3
29115: PUSH
29116: FOR_TO
29117: IFFALSE 29208
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29119: LD_STRING setFactoryWaypointXY(
29121: PUSH
29122: LD_VAR 0 3
29126: PUSH
29127: LD_VAR 0 2
29131: ARRAY
29132: PUSH
29133: LD_INT 1
29135: ARRAY
29136: STR
29137: PUSH
29138: LD_STRING ,
29140: STR
29141: PUSH
29142: LD_VAR 0 3
29146: PUSH
29147: LD_VAR 0 2
29151: ARRAY
29152: PUSH
29153: LD_INT 2
29155: ARRAY
29156: STR
29157: PUSH
29158: LD_STRING ,
29160: STR
29161: PUSH
29162: LD_VAR 0 3
29166: PUSH
29167: LD_VAR 0 2
29171: ARRAY
29172: PUSH
29173: LD_INT 3
29175: ARRAY
29176: STR
29177: PUSH
29178: LD_STRING ,
29180: STR
29181: PUSH
29182: LD_VAR 0 3
29186: PUSH
29187: LD_VAR 0 2
29191: ARRAY
29192: PUSH
29193: LD_INT 4
29195: ARRAY
29196: STR
29197: PUSH
29198: LD_STRING )
29200: STR
29201: PPUSH
29202: CALL_OW 559
29206: GO 29116
29208: POP
29209: POP
// end ; end ;
29210: LD_VAR 0 1
29214: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29215: LD_INT 0
29217: PPUSH
// if HexInfo ( x , y ) = warehouse then
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL_OW 428
29232: PUSH
29233: LD_VAR 0 1
29237: EQUAL
29238: IFFALSE 29265
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29240: LD_ADDR_EXP 105
29244: PUSH
29245: LD_EXP 105
29249: PPUSH
29250: LD_VAR 0 1
29254: PPUSH
29255: LD_INT 0
29257: PPUSH
29258: CALL_OW 1
29262: ST_TO_ADDR
29263: GO 29316
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29265: LD_ADDR_EXP 105
29269: PUSH
29270: LD_EXP 105
29274: PPUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 1
29284: PPUSH
29285: CALL_OW 255
29289: PUSH
29290: LD_VAR 0 1
29294: PUSH
29295: LD_VAR 0 2
29299: PUSH
29300: LD_VAR 0 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 1
29315: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29316: CALL 29325 0 0
// end ;
29320: LD_VAR 0 4
29324: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
29329: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29330: LD_STRING resetWarehouseGatheringPoints();
29332: PPUSH
29333: CALL_OW 559
// if warehouseGatheringPoints then
29337: LD_EXP 105
29341: IFFALSE 29467
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_EXP 105
29352: PPUSH
29353: CALL 71371 0 1
29357: ST_TO_ADDR
// for i := 1 to list do
29358: LD_ADDR_VAR 0 2
29362: PUSH
29363: DOUBLE
29364: LD_INT 1
29366: DEC
29367: ST_TO_ADDR
29368: LD_VAR 0 3
29372: PUSH
29373: FOR_TO
29374: IFFALSE 29465
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29376: LD_STRING setWarehouseGatheringPointXY(
29378: PUSH
29379: LD_VAR 0 3
29383: PUSH
29384: LD_VAR 0 2
29388: ARRAY
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: STR
29394: PUSH
29395: LD_STRING ,
29397: STR
29398: PUSH
29399: LD_VAR 0 3
29403: PUSH
29404: LD_VAR 0 2
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: STR
29414: PUSH
29415: LD_STRING ,
29417: STR
29418: PUSH
29419: LD_VAR 0 3
29423: PUSH
29424: LD_VAR 0 2
29428: ARRAY
29429: PUSH
29430: LD_INT 3
29432: ARRAY
29433: STR
29434: PUSH
29435: LD_STRING ,
29437: STR
29438: PUSH
29439: LD_VAR 0 3
29443: PUSH
29444: LD_VAR 0 2
29448: ARRAY
29449: PUSH
29450: LD_INT 4
29452: ARRAY
29453: STR
29454: PUSH
29455: LD_STRING )
29457: STR
29458: PPUSH
29459: CALL_OW 559
29463: GO 29373
29465: POP
29466: POP
// end ; end ;
29467: LD_VAR 0 1
29471: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29472: LD_EXP 105
29476: IFFALSE 30161
29478: GO 29480
29480: DISABLE
29481: LD_INT 0
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// begin enable ;
29492: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_EXP 105
29502: PPUSH
29503: CALL 71371 0 1
29507: ST_TO_ADDR
// if not list then
29508: LD_VAR 0 3
29512: NOT
29513: IFFALSE 29517
// exit ;
29515: GO 30161
// for i := 1 to list do
29517: LD_ADDR_VAR 0 1
29521: PUSH
29522: DOUBLE
29523: LD_INT 1
29525: DEC
29526: ST_TO_ADDR
29527: LD_VAR 0 3
29531: PUSH
29532: FOR_TO
29533: IFFALSE 30159
// begin depot := list [ i ] [ 2 ] ;
29535: LD_ADDR_VAR 0 8
29539: PUSH
29540: LD_VAR 0 3
29544: PUSH
29545: LD_VAR 0 1
29549: ARRAY
29550: PUSH
29551: LD_INT 2
29553: ARRAY
29554: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29555: LD_ADDR_VAR 0 5
29559: PUSH
29560: LD_VAR 0 3
29564: PUSH
29565: LD_VAR 0 1
29569: ARRAY
29570: PUSH
29571: LD_INT 1
29573: ARRAY
29574: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29575: LD_VAR 0 8
29579: PPUSH
29580: CALL_OW 301
29584: PUSH
29585: LD_VAR 0 5
29589: PUSH
29590: LD_VAR 0 8
29594: PPUSH
29595: CALL_OW 255
29599: NONEQUAL
29600: OR
29601: IFFALSE 29630
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29603: LD_ADDR_EXP 105
29607: PUSH
29608: LD_EXP 105
29612: PPUSH
29613: LD_VAR 0 8
29617: PPUSH
29618: LD_INT 0
29620: PPUSH
29621: CALL_OW 1
29625: ST_TO_ADDR
// exit ;
29626: POP
29627: POP
29628: GO 30161
// end ; x := list [ i ] [ 3 ] ;
29630: LD_ADDR_VAR 0 6
29634: PUSH
29635: LD_VAR 0 3
29639: PUSH
29640: LD_VAR 0 1
29644: ARRAY
29645: PUSH
29646: LD_INT 3
29648: ARRAY
29649: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29650: LD_ADDR_VAR 0 7
29654: PUSH
29655: LD_VAR 0 3
29659: PUSH
29660: LD_VAR 0 1
29664: ARRAY
29665: PUSH
29666: LD_INT 4
29668: ARRAY
29669: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29670: LD_ADDR_VAR 0 9
29674: PUSH
29675: LD_VAR 0 6
29679: PPUSH
29680: LD_VAR 0 7
29684: PPUSH
29685: LD_INT 16
29687: PPUSH
29688: CALL 69959 0 3
29692: ST_TO_ADDR
// if not cratesNearbyPoint then
29693: LD_VAR 0 9
29697: NOT
29698: IFFALSE 29704
// exit ;
29700: POP
29701: POP
29702: GO 30161
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29704: LD_ADDR_VAR 0 4
29708: PUSH
29709: LD_INT 22
29711: PUSH
29712: LD_VAR 0 5
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: LD_INT 60
29726: PUSH
29727: EMPTY
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 91
29736: PUSH
29737: LD_VAR 0 8
29741: PUSH
29742: LD_INT 6
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: LD_INT 25
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 25
29765: PUSH
29766: LD_INT 16
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: PPUSH
29784: CALL_OW 69
29788: PUSH
29789: LD_VAR 0 8
29793: PPUSH
29794: CALL_OW 313
29798: PPUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 60
29804: PUSH
29805: EMPTY
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: LD_INT 25
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 25
29827: PUSH
29828: LD_INT 16
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 72
29848: UNION
29849: ST_TO_ADDR
// if tmp then
29850: LD_VAR 0 4
29854: IFFALSE 29934
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29856: LD_ADDR_VAR 0 4
29860: PUSH
29861: LD_VAR 0 4
29865: PPUSH
29866: LD_INT 3
29868: PPUSH
29869: CALL 67928 0 2
29873: ST_TO_ADDR
// for j in tmp do
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_VAR 0 4
29883: PUSH
29884: FOR_IN
29885: IFFALSE 29928
// begin if IsInUnit ( j ) then
29887: LD_VAR 0 2
29891: PPUSH
29892: CALL_OW 310
29896: IFFALSE 29907
// ComExit ( j ) ;
29898: LD_VAR 0 2
29902: PPUSH
29903: CALL 68011 0 1
// AddComCollect ( j , x , y ) ;
29907: LD_VAR 0 2
29911: PPUSH
29912: LD_VAR 0 6
29916: PPUSH
29917: LD_VAR 0 7
29921: PPUSH
29922: CALL_OW 177
// end ;
29926: GO 29884
29928: POP
29929: POP
// exit ;
29930: POP
29931: POP
29932: GO 30161
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29934: LD_ADDR_VAR 0 4
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_VAR 0 5
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 91
29953: PUSH
29954: LD_VAR 0 8
29958: PUSH
29959: LD_INT 8
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 34
29972: PUSH
29973: LD_INT 12
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 34
29982: PUSH
29983: LD_INT 51
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 34
29992: PUSH
29993: LD_INT 32
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 34
30002: PUSH
30003: LD_INT 89
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: LIST
30021: PPUSH
30022: CALL_OW 69
30026: ST_TO_ADDR
// if tmp then
30027: LD_VAR 0 4
30031: IFFALSE 30157
// begin for j in tmp do
30033: LD_ADDR_VAR 0 2
30037: PUSH
30038: LD_VAR 0 4
30042: PUSH
30043: FOR_IN
30044: IFFALSE 30155
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30046: LD_VAR 0 2
30050: PPUSH
30051: CALL_OW 262
30055: PUSH
30056: LD_INT 3
30058: EQUAL
30059: PUSH
30060: LD_VAR 0 2
30064: PPUSH
30065: CALL_OW 261
30069: PUSH
30070: LD_INT 20
30072: GREATER
30073: OR
30074: PUSH
30075: LD_VAR 0 2
30079: PPUSH
30080: CALL_OW 314
30084: NOT
30085: AND
30086: PUSH
30087: LD_VAR 0 2
30091: PPUSH
30092: CALL_OW 263
30096: PUSH
30097: LD_INT 1
30099: NONEQUAL
30100: PUSH
30101: LD_VAR 0 2
30105: PPUSH
30106: CALL_OW 311
30110: OR
30111: AND
30112: IFFALSE 30153
// begin ComCollect ( j , x , y ) ;
30114: LD_VAR 0 2
30118: PPUSH
30119: LD_VAR 0 6
30123: PPUSH
30124: LD_VAR 0 7
30128: PPUSH
30129: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30133: LD_VAR 0 2
30137: PPUSH
30138: LD_VAR 0 8
30142: PPUSH
30143: CALL_OW 172
// exit ;
30147: POP
30148: POP
30149: POP
30150: POP
30151: GO 30161
// end ;
30153: GO 30043
30155: POP
30156: POP
// end ; end ;
30157: GO 29532
30159: POP
30160: POP
// end ; end_of_file end_of_file
30161: PPOPN 9
30163: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
// if exist_mode then
30168: LD_VAR 0 2
30172: IFFALSE 30197
// unit := CreateCharacter ( prefix & ident ) else
30174: LD_ADDR_VAR 0 5
30178: PUSH
30179: LD_VAR 0 3
30183: PUSH
30184: LD_VAR 0 1
30188: STR
30189: PPUSH
30190: CALL_OW 34
30194: ST_TO_ADDR
30195: GO 30212
// unit := NewCharacter ( ident ) ;
30197: LD_ADDR_VAR 0 5
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 25
30211: ST_TO_ADDR
// result := unit ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 5
30221: ST_TO_ADDR
// end ;
30222: LD_VAR 0 4
30226: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30227: LD_INT 0
30229: PPUSH
30230: PPUSH
// if not side or not nation then
30231: LD_VAR 0 1
30235: NOT
30236: PUSH
30237: LD_VAR 0 2
30241: NOT
30242: OR
30243: IFFALSE 30247
// exit ;
30245: GO 31015
// case nation of nation_american :
30247: LD_VAR 0 2
30251: PUSH
30252: LD_INT 1
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30474
30260: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30261: LD_ADDR_VAR 0 4
30265: PUSH
30266: LD_INT 35
30268: PUSH
30269: LD_INT 45
30271: PUSH
30272: LD_INT 46
30274: PUSH
30275: LD_INT 47
30277: PUSH
30278: LD_INT 82
30280: PUSH
30281: LD_INT 83
30283: PUSH
30284: LD_INT 84
30286: PUSH
30287: LD_INT 85
30289: PUSH
30290: LD_INT 86
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 6
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: LD_INT 16
30307: PUSH
30308: LD_INT 7
30310: PUSH
30311: LD_INT 12
30313: PUSH
30314: LD_INT 13
30316: PUSH
30317: LD_INT 10
30319: PUSH
30320: LD_INT 14
30322: PUSH
30323: LD_INT 20
30325: PUSH
30326: LD_INT 21
30328: PUSH
30329: LD_INT 22
30331: PUSH
30332: LD_INT 25
30334: PUSH
30335: LD_INT 32
30337: PUSH
30338: LD_INT 27
30340: PUSH
30341: LD_INT 36
30343: PUSH
30344: LD_INT 69
30346: PUSH
30347: LD_INT 39
30349: PUSH
30350: LD_INT 34
30352: PUSH
30353: LD_INT 40
30355: PUSH
30356: LD_INT 48
30358: PUSH
30359: LD_INT 49
30361: PUSH
30362: LD_INT 50
30364: PUSH
30365: LD_INT 51
30367: PUSH
30368: LD_INT 52
30370: PUSH
30371: LD_INT 53
30373: PUSH
30374: LD_INT 54
30376: PUSH
30377: LD_INT 55
30379: PUSH
30380: LD_INT 56
30382: PUSH
30383: LD_INT 57
30385: PUSH
30386: LD_INT 58
30388: PUSH
30389: LD_INT 59
30391: PUSH
30392: LD_INT 60
30394: PUSH
30395: LD_INT 61
30397: PUSH
30398: LD_INT 62
30400: PUSH
30401: LD_INT 80
30403: PUSH
30404: LD_INT 82
30406: PUSH
30407: LD_INT 83
30409: PUSH
30410: LD_INT 84
30412: PUSH
30413: LD_INT 85
30415: PUSH
30416: LD_INT 86
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: ST_TO_ADDR
30472: GO 30939
30474: LD_INT 2
30476: DOUBLE
30477: EQUAL
30478: IFTRUE 30482
30480: GO 30708
30482: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: LD_INT 35
30490: PUSH
30491: LD_INT 45
30493: PUSH
30494: LD_INT 46
30496: PUSH
30497: LD_INT 47
30499: PUSH
30500: LD_INT 82
30502: PUSH
30503: LD_INT 83
30505: PUSH
30506: LD_INT 84
30508: PUSH
30509: LD_INT 85
30511: PUSH
30512: LD_INT 87
30514: PUSH
30515: LD_INT 70
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 11
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: LD_INT 4
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 6
30535: PUSH
30536: LD_INT 15
30538: PUSH
30539: LD_INT 18
30541: PUSH
30542: LD_INT 7
30544: PUSH
30545: LD_INT 17
30547: PUSH
30548: LD_INT 8
30550: PUSH
30551: LD_INT 20
30553: PUSH
30554: LD_INT 21
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_INT 72
30562: PUSH
30563: LD_INT 26
30565: PUSH
30566: LD_INT 69
30568: PUSH
30569: LD_INT 39
30571: PUSH
30572: LD_INT 40
30574: PUSH
30575: LD_INT 41
30577: PUSH
30578: LD_INT 42
30580: PUSH
30581: LD_INT 43
30583: PUSH
30584: LD_INT 48
30586: PUSH
30587: LD_INT 49
30589: PUSH
30590: LD_INT 50
30592: PUSH
30593: LD_INT 51
30595: PUSH
30596: LD_INT 52
30598: PUSH
30599: LD_INT 53
30601: PUSH
30602: LD_INT 54
30604: PUSH
30605: LD_INT 55
30607: PUSH
30608: LD_INT 56
30610: PUSH
30611: LD_INT 60
30613: PUSH
30614: LD_INT 61
30616: PUSH
30617: LD_INT 62
30619: PUSH
30620: LD_INT 66
30622: PUSH
30623: LD_INT 67
30625: PUSH
30626: LD_INT 68
30628: PUSH
30629: LD_INT 81
30631: PUSH
30632: LD_INT 82
30634: PUSH
30635: LD_INT 83
30637: PUSH
30638: LD_INT 84
30640: PUSH
30641: LD_INT 85
30643: PUSH
30644: LD_INT 87
30646: PUSH
30647: LD_INT 88
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
30706: GO 30939
30708: LD_INT 3
30710: DOUBLE
30711: EQUAL
30712: IFTRUE 30716
30714: GO 30938
30716: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30717: LD_ADDR_VAR 0 4
30721: PUSH
30722: LD_INT 46
30724: PUSH
30725: LD_INT 47
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 82
30736: PUSH
30737: LD_INT 83
30739: PUSH
30740: LD_INT 84
30742: PUSH
30743: LD_INT 85
30745: PUSH
30746: LD_INT 86
30748: PUSH
30749: LD_INT 11
30751: PUSH
30752: LD_INT 9
30754: PUSH
30755: LD_INT 20
30757: PUSH
30758: LD_INT 19
30760: PUSH
30761: LD_INT 21
30763: PUSH
30764: LD_INT 24
30766: PUSH
30767: LD_INT 22
30769: PUSH
30770: LD_INT 25
30772: PUSH
30773: LD_INT 28
30775: PUSH
30776: LD_INT 29
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 31
30784: PUSH
30785: LD_INT 37
30787: PUSH
30788: LD_INT 38
30790: PUSH
30791: LD_INT 32
30793: PUSH
30794: LD_INT 27
30796: PUSH
30797: LD_INT 33
30799: PUSH
30800: LD_INT 69
30802: PUSH
30803: LD_INT 39
30805: PUSH
30806: LD_INT 34
30808: PUSH
30809: LD_INT 40
30811: PUSH
30812: LD_INT 71
30814: PUSH
30815: LD_INT 23
30817: PUSH
30818: LD_INT 44
30820: PUSH
30821: LD_INT 48
30823: PUSH
30824: LD_INT 49
30826: PUSH
30827: LD_INT 50
30829: PUSH
30830: LD_INT 51
30832: PUSH
30833: LD_INT 52
30835: PUSH
30836: LD_INT 53
30838: PUSH
30839: LD_INT 54
30841: PUSH
30842: LD_INT 55
30844: PUSH
30845: LD_INT 56
30847: PUSH
30848: LD_INT 57
30850: PUSH
30851: LD_INT 58
30853: PUSH
30854: LD_INT 59
30856: PUSH
30857: LD_INT 63
30859: PUSH
30860: LD_INT 64
30862: PUSH
30863: LD_INT 65
30865: PUSH
30866: LD_INT 82
30868: PUSH
30869: LD_INT 83
30871: PUSH
30872: LD_INT 84
30874: PUSH
30875: LD_INT 85
30877: PUSH
30878: LD_INT 86
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
30936: GO 30939
30938: POP
// if state > - 1 and state < 3 then
30939: LD_VAR 0 3
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: GREATER
30948: PUSH
30949: LD_VAR 0 3
30953: PUSH
30954: LD_INT 3
30956: LESS
30957: AND
30958: IFFALSE 31015
// for i in result do
30960: LD_ADDR_VAR 0 5
30964: PUSH
30965: LD_VAR 0 4
30969: PUSH
30970: FOR_IN
30971: IFFALSE 31013
// if GetTech ( i , side ) <> state then
30973: LD_VAR 0 5
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 321
30987: PUSH
30988: LD_VAR 0 3
30992: NONEQUAL
30993: IFFALSE 31011
// result := result diff i ;
30995: LD_ADDR_VAR 0 4
30999: PUSH
31000: LD_VAR 0 4
31004: PUSH
31005: LD_VAR 0 5
31009: DIFF
31010: ST_TO_ADDR
31011: GO 30970
31013: POP
31014: POP
// end ;
31015: LD_VAR 0 4
31019: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31020: LD_INT 0
31022: PPUSH
31023: PPUSH
31024: PPUSH
// result := true ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_INT 1
31032: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31033: LD_ADDR_VAR 0 5
31037: PUSH
31038: LD_VAR 0 2
31042: PPUSH
31043: CALL_OW 480
31047: ST_TO_ADDR
// if not tmp then
31048: LD_VAR 0 5
31052: NOT
31053: IFFALSE 31057
// exit ;
31055: GO 31106
// for i in tmp do
31057: LD_ADDR_VAR 0 4
31061: PUSH
31062: LD_VAR 0 5
31066: PUSH
31067: FOR_IN
31068: IFFALSE 31104
// if GetTech ( i , side ) <> state_researched then
31070: LD_VAR 0 4
31074: PPUSH
31075: LD_VAR 0 1
31079: PPUSH
31080: CALL_OW 321
31084: PUSH
31085: LD_INT 2
31087: NONEQUAL
31088: IFFALSE 31102
// begin result := false ;
31090: LD_ADDR_VAR 0 3
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// exit ;
31098: POP
31099: POP
31100: GO 31106
// end ;
31102: GO 31067
31104: POP
31105: POP
// end ;
31106: LD_VAR 0 3
31110: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31111: LD_INT 0
31113: PPUSH
31114: PPUSH
31115: PPUSH
31116: PPUSH
31117: PPUSH
31118: PPUSH
31119: PPUSH
31120: PPUSH
31121: PPUSH
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31126: LD_VAR 0 1
31130: NOT
31131: PUSH
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 257
31141: PUSH
31142: LD_INT 9
31144: NONEQUAL
31145: OR
31146: IFFALSE 31150
// exit ;
31148: GO 31723
// side := GetSide ( unit ) ;
31150: LD_ADDR_VAR 0 9
31154: PUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 255
31164: ST_TO_ADDR
// tech_space := tech_spacanom ;
31165: LD_ADDR_VAR 0 12
31169: PUSH
31170: LD_INT 29
31172: ST_TO_ADDR
// tech_time := tech_taurad ;
31173: LD_ADDR_VAR 0 13
31177: PUSH
31178: LD_INT 28
31180: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31181: LD_ADDR_VAR 0 11
31185: PUSH
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 310
31195: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31196: LD_VAR 0 11
31200: PPUSH
31201: CALL_OW 247
31205: PUSH
31206: LD_INT 2
31208: EQUAL
31209: IFFALSE 31213
// exit ;
31211: GO 31723
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31213: LD_ADDR_VAR 0 8
31217: PUSH
31218: LD_INT 81
31220: PUSH
31221: LD_VAR 0 9
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: LD_INT 21
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PPUSH
31251: CALL_OW 69
31255: ST_TO_ADDR
// if not tmp then
31256: LD_VAR 0 8
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 31723
// if in_unit then
31265: LD_VAR 0 11
31269: IFFALSE 31293
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31271: LD_ADDR_VAR 0 10
31275: PUSH
31276: LD_VAR 0 8
31280: PPUSH
31281: LD_VAR 0 11
31285: PPUSH
31286: CALL_OW 74
31290: ST_TO_ADDR
31291: GO 31313
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31293: LD_ADDR_VAR 0 10
31297: PUSH
31298: LD_VAR 0 8
31302: PPUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: CALL_OW 74
31312: ST_TO_ADDR
// if not enemy then
31313: LD_VAR 0 10
31317: NOT
31318: IFFALSE 31322
// exit ;
31320: GO 31723
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31322: LD_VAR 0 11
31326: PUSH
31327: LD_VAR 0 11
31331: PPUSH
31332: LD_VAR 0 10
31336: PPUSH
31337: CALL_OW 296
31341: PUSH
31342: LD_INT 13
31344: GREATER
31345: AND
31346: PUSH
31347: LD_VAR 0 1
31351: PPUSH
31352: LD_VAR 0 10
31356: PPUSH
31357: CALL_OW 296
31361: PUSH
31362: LD_INT 12
31364: GREATER
31365: OR
31366: IFFALSE 31370
// exit ;
31368: GO 31723
// missile := [ 1 ] ;
31370: LD_ADDR_VAR 0 14
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31381: LD_VAR 0 9
31385: PPUSH
31386: LD_VAR 0 12
31390: PPUSH
31391: CALL_OW 325
31395: IFFALSE 31424
// missile := Replace ( missile , missile + 1 , 2 ) ;
31397: LD_ADDR_VAR 0 14
31401: PUSH
31402: LD_VAR 0 14
31406: PPUSH
31407: LD_VAR 0 14
31411: PUSH
31412: LD_INT 1
31414: PLUS
31415: PPUSH
31416: LD_INT 2
31418: PPUSH
31419: CALL_OW 1
31423: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31424: LD_VAR 0 9
31428: PPUSH
31429: LD_VAR 0 13
31433: PPUSH
31434: CALL_OW 325
31438: PUSH
31439: LD_VAR 0 10
31443: PPUSH
31444: CALL_OW 255
31448: PPUSH
31449: LD_VAR 0 13
31453: PPUSH
31454: CALL_OW 325
31458: NOT
31459: AND
31460: IFFALSE 31489
// missile := Replace ( missile , missile + 1 , 3 ) ;
31462: LD_ADDR_VAR 0 14
31466: PUSH
31467: LD_VAR 0 14
31471: PPUSH
31472: LD_VAR 0 14
31476: PUSH
31477: LD_INT 1
31479: PLUS
31480: PPUSH
31481: LD_INT 3
31483: PPUSH
31484: CALL_OW 1
31488: ST_TO_ADDR
// if missile < 2 then
31489: LD_VAR 0 14
31493: PUSH
31494: LD_INT 2
31496: LESS
31497: IFFALSE 31501
// exit ;
31499: GO 31723
// x := GetX ( enemy ) ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_VAR 0 10
31510: PPUSH
31511: CALL_OW 250
31515: ST_TO_ADDR
// y := GetY ( enemy ) ;
31516: LD_ADDR_VAR 0 5
31520: PUSH
31521: LD_VAR 0 10
31525: PPUSH
31526: CALL_OW 251
31530: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31531: LD_ADDR_VAR 0 6
31535: PUSH
31536: LD_VAR 0 4
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PPUSH
31545: LD_INT 1
31547: PPUSH
31548: CALL_OW 12
31552: PLUS
31553: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31554: LD_ADDR_VAR 0 7
31558: PUSH
31559: LD_VAR 0 5
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PPUSH
31568: LD_INT 1
31570: PPUSH
31571: CALL_OW 12
31575: PLUS
31576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31577: LD_VAR 0 6
31581: PPUSH
31582: LD_VAR 0 7
31586: PPUSH
31587: CALL_OW 488
31591: NOT
31592: IFFALSE 31614
// begin _x := x ;
31594: LD_ADDR_VAR 0 6
31598: PUSH
31599: LD_VAR 0 4
31603: ST_TO_ADDR
// _y := y ;
31604: LD_ADDR_VAR 0 7
31608: PUSH
31609: LD_VAR 0 5
31613: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31614: LD_ADDR_VAR 0 3
31618: PUSH
31619: LD_INT 1
31621: PPUSH
31622: LD_VAR 0 14
31626: PPUSH
31627: CALL_OW 12
31631: ST_TO_ADDR
// case i of 1 :
31632: LD_VAR 0 3
31636: PUSH
31637: LD_INT 1
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31662
31645: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31646: LD_VAR 0 1
31650: PPUSH
31651: LD_VAR 0 10
31655: PPUSH
31656: CALL_OW 115
31660: GO 31723
31662: LD_INT 2
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 31692
31670: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31671: LD_VAR 0 1
31675: PPUSH
31676: LD_VAR 0 6
31680: PPUSH
31681: LD_VAR 0 7
31685: PPUSH
31686: CALL_OW 153
31690: GO 31723
31692: LD_INT 3
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31722
31700: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31701: LD_VAR 0 1
31705: PPUSH
31706: LD_VAR 0 6
31710: PPUSH
31711: LD_VAR 0 7
31715: PPUSH
31716: CALL_OW 154
31720: GO 31723
31722: POP
// end ;
31723: LD_VAR 0 2
31727: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31728: LD_INT 0
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
31735: PPUSH
// if not unit or not building then
31736: LD_VAR 0 1
31740: NOT
31741: PUSH
31742: LD_VAR 0 2
31746: NOT
31747: OR
31748: IFFALSE 31752
// exit ;
31750: GO 31910
// x := GetX ( building ) ;
31752: LD_ADDR_VAR 0 5
31756: PUSH
31757: LD_VAR 0 2
31761: PPUSH
31762: CALL_OW 250
31766: ST_TO_ADDR
// y := GetY ( building ) ;
31767: LD_ADDR_VAR 0 6
31771: PUSH
31772: LD_VAR 0 2
31776: PPUSH
31777: CALL_OW 251
31781: ST_TO_ADDR
// for i = 0 to 5 do
31782: LD_ADDR_VAR 0 4
31786: PUSH
31787: DOUBLE
31788: LD_INT 0
31790: DEC
31791: ST_TO_ADDR
31792: LD_INT 5
31794: PUSH
31795: FOR_TO
31796: IFFALSE 31908
// begin _x := ShiftX ( x , i , 3 ) ;
31798: LD_ADDR_VAR 0 7
31802: PUSH
31803: LD_VAR 0 5
31807: PPUSH
31808: LD_VAR 0 4
31812: PPUSH
31813: LD_INT 3
31815: PPUSH
31816: CALL_OW 272
31820: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31821: LD_ADDR_VAR 0 8
31825: PUSH
31826: LD_VAR 0 6
31830: PPUSH
31831: LD_VAR 0 4
31835: PPUSH
31836: LD_INT 3
31838: PPUSH
31839: CALL_OW 273
31843: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31844: LD_VAR 0 7
31848: PPUSH
31849: LD_VAR 0 8
31853: PPUSH
31854: CALL_OW 488
31858: NOT
31859: IFFALSE 31863
// continue ;
31861: GO 31795
// if HexInfo ( _x , _y ) = 0 then
31863: LD_VAR 0 7
31867: PPUSH
31868: LD_VAR 0 8
31872: PPUSH
31873: CALL_OW 428
31877: PUSH
31878: LD_INT 0
31880: EQUAL
31881: IFFALSE 31906
// begin ComMoveXY ( unit , _x , _y ) ;
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_VAR 0 7
31892: PPUSH
31893: LD_VAR 0 8
31897: PPUSH
31898: CALL_OW 111
// exit ;
31902: POP
31903: POP
31904: GO 31910
// end ; end ;
31906: GO 31795
31908: POP
31909: POP
// end ;
31910: LD_VAR 0 3
31914: RET
// export function ScanBase ( side , base_area ) ; begin
31915: LD_INT 0
31917: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31918: LD_ADDR_VAR 0 3
31922: PUSH
31923: LD_VAR 0 2
31927: PPUSH
31928: LD_INT 81
31930: PUSH
31931: LD_VAR 0 1
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL_OW 70
31944: ST_TO_ADDR
// end ;
31945: LD_VAR 0 3
31949: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
// result := false ;
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_INT 0
31963: ST_TO_ADDR
// side := GetSide ( unit ) ;
31964: LD_ADDR_VAR 0 3
31968: PUSH
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 255
31978: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31979: LD_ADDR_VAR 0 4
31983: PUSH
31984: LD_VAR 0 1
31988: PPUSH
31989: CALL_OW 248
31993: ST_TO_ADDR
// case nat of 1 :
31994: LD_VAR 0 4
31998: PUSH
31999: LD_INT 1
32001: DOUBLE
32002: EQUAL
32003: IFTRUE 32007
32005: GO 32018
32007: POP
// tech := tech_lassight ; 2 :
32008: LD_ADDR_VAR 0 5
32012: PUSH
32013: LD_INT 12
32015: ST_TO_ADDR
32016: GO 32057
32018: LD_INT 2
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32037
32026: POP
// tech := tech_mortar ; 3 :
32027: LD_ADDR_VAR 0 5
32031: PUSH
32032: LD_INT 41
32034: ST_TO_ADDR
32035: GO 32057
32037: LD_INT 3
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32056
32045: POP
// tech := tech_bazooka ; end ;
32046: LD_ADDR_VAR 0 5
32050: PUSH
32051: LD_INT 44
32053: ST_TO_ADDR
32054: GO 32057
32056: POP
// if Researched ( side , tech ) then
32057: LD_VAR 0 3
32061: PPUSH
32062: LD_VAR 0 5
32066: PPUSH
32067: CALL_OW 325
32071: IFFALSE 32098
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32073: LD_ADDR_VAR 0 2
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: LD_INT 8
32083: PUSH
32084: LD_INT 9
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: PUSH
32092: LD_VAR 0 4
32096: ARRAY
32097: ST_TO_ADDR
// end ;
32098: LD_VAR 0 2
32102: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32103: LD_INT 0
32105: PPUSH
32106: PPUSH
32107: PPUSH
// if not mines then
32108: LD_VAR 0 2
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32261
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_INT 81
32124: PUSH
32125: LD_VAR 0 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: LD_INT 21
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PPUSH
32155: CALL_OW 69
32159: ST_TO_ADDR
// for i in mines do
32160: LD_ADDR_VAR 0 4
32164: PUSH
32165: LD_VAR 0 2
32169: PUSH
32170: FOR_IN
32171: IFFALSE 32259
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32173: LD_VAR 0 4
32177: PUSH
32178: LD_INT 1
32180: ARRAY
32181: PPUSH
32182: LD_VAR 0 4
32186: PUSH
32187: LD_INT 2
32189: ARRAY
32190: PPUSH
32191: CALL_OW 458
32195: NOT
32196: IFFALSE 32200
// continue ;
32198: GO 32170
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32200: LD_VAR 0 4
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: PPUSH
32209: LD_VAR 0 4
32213: PUSH
32214: LD_INT 2
32216: ARRAY
32217: PPUSH
32218: CALL_OW 428
32222: PUSH
32223: LD_VAR 0 5
32227: IN
32228: IFFALSE 32257
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32230: LD_VAR 0 4
32234: PUSH
32235: LD_INT 1
32237: ARRAY
32238: PPUSH
32239: LD_VAR 0 4
32243: PUSH
32244: LD_INT 2
32246: ARRAY
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 456
// end ;
32257: GO 32170
32259: POP
32260: POP
// end ;
32261: LD_VAR 0 3
32265: RET
// export function Count ( array ) ; var i ; begin
32266: LD_INT 0
32268: PPUSH
32269: PPUSH
// result := 0 ;
32270: LD_ADDR_VAR 0 2
32274: PUSH
32275: LD_INT 0
32277: ST_TO_ADDR
// for i in array do
32278: LD_ADDR_VAR 0 3
32282: PUSH
32283: LD_VAR 0 1
32287: PUSH
32288: FOR_IN
32289: IFFALSE 32313
// if i then
32291: LD_VAR 0 3
32295: IFFALSE 32311
// result := result + 1 ;
32297: LD_ADDR_VAR 0 2
32301: PUSH
32302: LD_VAR 0 2
32306: PUSH
32307: LD_INT 1
32309: PLUS
32310: ST_TO_ADDR
32311: GO 32288
32313: POP
32314: POP
// end ;
32315: LD_VAR 0 2
32319: RET
// export function IsEmpty ( building ) ; begin
32320: LD_INT 0
32322: PPUSH
// if not building then
32323: LD_VAR 0 1
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32375
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_VAR 0 1
32341: PUSH
32342: LD_INT 22
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 255
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 58
32361: PUSH
32362: EMPTY
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PPUSH
32369: CALL_OW 69
32373: IN
32374: ST_TO_ADDR
// end ;
32375: LD_VAR 0 2
32379: RET
// export function IsNotFull ( building ) ; var places ; begin
32380: LD_INT 0
32382: PPUSH
32383: PPUSH
// if not building then
32384: LD_VAR 0 1
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32564
// result := false ;
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_INT 0
32400: ST_TO_ADDR
// places := 0 ;
32401: LD_ADDR_VAR 0 3
32405: PUSH
32406: LD_INT 0
32408: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 266
32418: PUSH
32419: LD_INT 0
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32481
32425: LD_INT 1
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32481
32431: LD_INT 6
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32481
32437: LD_INT 7
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32481
32443: LD_INT 8
32445: DOUBLE
32446: EQUAL
32447: IFTRUE 32481
32449: LD_INT 4
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32481
32455: LD_INT 5
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32481
32461: LD_INT 2
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32481
32467: LD_INT 3
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32481
32473: LD_INT 35
32475: DOUBLE
32476: EQUAL
32477: IFTRUE 32481
32479: GO 32492
32481: POP
// places := 6 ; b_bunker , b_breastwork :
32482: LD_ADDR_VAR 0 3
32486: PUSH
32487: LD_INT 6
32489: ST_TO_ADDR
32490: GO 32537
32492: LD_INT 32
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32506
32498: LD_INT 31
32500: DOUBLE
32501: EQUAL
32502: IFTRUE 32506
32504: GO 32517
32506: POP
// places := 1 ; b_control_tower :
32507: LD_ADDR_VAR 0 3
32511: PUSH
32512: LD_INT 1
32514: ST_TO_ADDR
32515: GO 32537
32517: LD_INT 36
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32536
32525: POP
// places := 3 ; end ;
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 3
32533: ST_TO_ADDR
32534: GO 32537
32536: POP
// if places then
32537: LD_VAR 0 3
32541: IFFALSE 32564
// result := UnitsInside ( building ) < places ;
32543: LD_ADDR_VAR 0 2
32547: PUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 313
32557: PUSH
32558: LD_VAR 0 3
32562: LESS
32563: ST_TO_ADDR
// end ;
32564: LD_VAR 0 2
32568: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32569: LD_INT 0
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
// tmp := [ ] ;
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: EMPTY
32581: ST_TO_ADDR
// list := [ ] ;
32582: LD_ADDR_VAR 0 5
32586: PUSH
32587: EMPTY
32588: ST_TO_ADDR
// for i = 16 to 25 do
32589: LD_ADDR_VAR 0 4
32593: PUSH
32594: DOUBLE
32595: LD_INT 16
32597: DEC
32598: ST_TO_ADDR
32599: LD_INT 25
32601: PUSH
32602: FOR_TO
32603: IFFALSE 32676
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: LD_VAR 0 3
32614: PUSH
32615: LD_INT 22
32617: PUSH
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 255
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 91
32634: PUSH
32635: LD_VAR 0 1
32639: PUSH
32640: LD_INT 6
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 30
32650: PUSH
32651: LD_VAR 0 4
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: PPUSH
32668: CALL_OW 69
32672: ADD
32673: ST_TO_ADDR
32674: GO 32602
32676: POP
32677: POP
// for i = 1 to tmp do
32678: LD_ADDR_VAR 0 4
32682: PUSH
32683: DOUBLE
32684: LD_INT 1
32686: DEC
32687: ST_TO_ADDR
32688: LD_VAR 0 3
32692: PUSH
32693: FOR_TO
32694: IFFALSE 32782
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 5
32705: PUSH
32706: LD_VAR 0 3
32710: PUSH
32711: LD_VAR 0 4
32715: ARRAY
32716: PPUSH
32717: CALL_OW 266
32721: PUSH
32722: LD_VAR 0 3
32726: PUSH
32727: LD_VAR 0 4
32731: ARRAY
32732: PPUSH
32733: CALL_OW 250
32737: PUSH
32738: LD_VAR 0 3
32742: PUSH
32743: LD_VAR 0 4
32747: ARRAY
32748: PPUSH
32749: CALL_OW 251
32753: PUSH
32754: LD_VAR 0 3
32758: PUSH
32759: LD_VAR 0 4
32763: ARRAY
32764: PPUSH
32765: CALL_OW 254
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: ADD
32779: ST_TO_ADDR
32780: GO 32693
32782: POP
32783: POP
// result := list ;
32784: LD_ADDR_VAR 0 2
32788: PUSH
32789: LD_VAR 0 5
32793: ST_TO_ADDR
// end ;
32794: LD_VAR 0 2
32798: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32799: LD_INT 0
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
// if not factory then
32808: LD_VAR 0 1
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 33410
// if control = control_apeman then
32817: LD_VAR 0 4
32821: PUSH
32822: LD_INT 5
32824: EQUAL
32825: IFFALSE 32934
// begin tmp := UnitsInside ( factory ) ;
32827: LD_ADDR_VAR 0 8
32831: PUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: CALL_OW 313
32841: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32842: LD_VAR 0 8
32846: PPUSH
32847: LD_INT 25
32849: PUSH
32850: LD_INT 12
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PPUSH
32857: CALL_OW 72
32861: NOT
32862: IFFALSE 32872
// control := control_manual ;
32864: LD_ADDR_VAR 0 4
32868: PUSH
32869: LD_INT 1
32871: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32872: LD_ADDR_VAR 0 8
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL 32569 0 1
32886: ST_TO_ADDR
// if tmp then
32887: LD_VAR 0 8
32891: IFFALSE 32934
// begin for i in tmp do
32893: LD_ADDR_VAR 0 7
32897: PUSH
32898: LD_VAR 0 8
32902: PUSH
32903: FOR_IN
32904: IFFALSE 32932
// if i [ 1 ] = b_ext_radio then
32906: LD_VAR 0 7
32910: PUSH
32911: LD_INT 1
32913: ARRAY
32914: PUSH
32915: LD_INT 22
32917: EQUAL
32918: IFFALSE 32930
// begin control := control_remote ;
32920: LD_ADDR_VAR 0 4
32924: PUSH
32925: LD_INT 2
32927: ST_TO_ADDR
// break ;
32928: GO 32932
// end ;
32930: GO 32903
32932: POP
32933: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32934: LD_VAR 0 1
32938: PPUSH
32939: LD_VAR 0 2
32943: PPUSH
32944: LD_VAR 0 3
32948: PPUSH
32949: LD_VAR 0 4
32953: PPUSH
32954: LD_VAR 0 5
32958: PPUSH
32959: CALL_OW 448
32963: IFFALSE 32998
// begin result := [ chassis , engine , control , weapon ] ;
32965: LD_ADDR_VAR 0 6
32969: PUSH
32970: LD_VAR 0 2
32974: PUSH
32975: LD_VAR 0 3
32979: PUSH
32980: LD_VAR 0 4
32984: PUSH
32985: LD_VAR 0 5
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
// exit ;
32996: GO 33410
// end ; _chassis := AvailableChassisList ( factory ) ;
32998: LD_ADDR_VAR 0 9
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 475
33012: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33013: LD_ADDR_VAR 0 11
33017: PUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 476
33027: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33028: LD_ADDR_VAR 0 12
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 477
33042: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33043: LD_ADDR_VAR 0 10
33047: PUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 478
33057: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33058: LD_VAR 0 9
33062: NOT
33063: PUSH
33064: LD_VAR 0 11
33068: NOT
33069: OR
33070: PUSH
33071: LD_VAR 0 12
33075: NOT
33076: OR
33077: PUSH
33078: LD_VAR 0 10
33082: NOT
33083: OR
33084: IFFALSE 33119
// begin result := [ chassis , engine , control , weapon ] ;
33086: LD_ADDR_VAR 0 6
33090: PUSH
33091: LD_VAR 0 2
33095: PUSH
33096: LD_VAR 0 3
33100: PUSH
33101: LD_VAR 0 4
33105: PUSH
33106: LD_VAR 0 5
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// exit ;
33117: GO 33410
// end ; if not chassis in _chassis then
33119: LD_VAR 0 2
33123: PUSH
33124: LD_VAR 0 9
33128: IN
33129: NOT
33130: IFFALSE 33156
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33132: LD_ADDR_VAR 0 2
33136: PUSH
33137: LD_VAR 0 9
33141: PUSH
33142: LD_INT 1
33144: PPUSH
33145: LD_VAR 0 9
33149: PPUSH
33150: CALL_OW 12
33154: ARRAY
33155: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33156: LD_VAR 0 2
33160: PPUSH
33161: LD_VAR 0 3
33165: PPUSH
33166: CALL 33415 0 2
33170: NOT
33171: IFFALSE 33230
// repeat engine := _engine [ 1 ] ;
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_VAR 0 11
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33187: LD_ADDR_VAR 0 11
33191: PUSH
33192: LD_VAR 0 11
33196: PPUSH
33197: LD_INT 1
33199: PPUSH
33200: CALL_OW 3
33204: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 3
33214: PPUSH
33215: CALL 33415 0 2
33219: PUSH
33220: LD_VAR 0 11
33224: PUSH
33225: EMPTY
33226: EQUAL
33227: OR
33228: IFFALSE 33173
// if not control in _control then
33230: LD_VAR 0 4
33234: PUSH
33235: LD_VAR 0 12
33239: IN
33240: NOT
33241: IFFALSE 33267
// control := _control [ rand ( 1 , _control ) ] ;
33243: LD_ADDR_VAR 0 4
33247: PUSH
33248: LD_VAR 0 12
33252: PUSH
33253: LD_INT 1
33255: PPUSH
33256: LD_VAR 0 12
33260: PPUSH
33261: CALL_OW 12
33265: ARRAY
33266: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33267: LD_VAR 0 2
33271: PPUSH
33272: LD_VAR 0 5
33276: PPUSH
33277: CALL 33635 0 2
33281: NOT
33282: IFFALSE 33341
// repeat weapon := _weapon [ 1 ] ;
33284: LD_ADDR_VAR 0 5
33288: PUSH
33289: LD_VAR 0 10
33293: PUSH
33294: LD_INT 1
33296: ARRAY
33297: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33298: LD_ADDR_VAR 0 10
33302: PUSH
33303: LD_VAR 0 10
33307: PPUSH
33308: LD_INT 1
33310: PPUSH
33311: CALL_OW 3
33315: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33316: LD_VAR 0 2
33320: PPUSH
33321: LD_VAR 0 5
33325: PPUSH
33326: CALL 33635 0 2
33330: PUSH
33331: LD_VAR 0 10
33335: PUSH
33336: EMPTY
33337: EQUAL
33338: OR
33339: IFFALSE 33284
// result := [ ] ;
33341: LD_ADDR_VAR 0 6
33345: PUSH
33346: EMPTY
33347: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_VAR 0 4
33367: PPUSH
33368: LD_VAR 0 5
33372: PPUSH
33373: CALL_OW 448
33377: IFFALSE 33410
// result := [ chassis , engine , control , weapon ] ;
33379: LD_ADDR_VAR 0 6
33383: PUSH
33384: LD_VAR 0 2
33388: PUSH
33389: LD_VAR 0 3
33393: PUSH
33394: LD_VAR 0 4
33398: PUSH
33399: LD_VAR 0 5
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
// end ;
33410: LD_VAR 0 6
33414: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33415: LD_INT 0
33417: PPUSH
// if not chassis or not engine then
33418: LD_VAR 0 1
33422: NOT
33423: PUSH
33424: LD_VAR 0 2
33428: NOT
33429: OR
33430: IFFALSE 33434
// exit ;
33432: GO 33630
// case engine of engine_solar :
33434: LD_VAR 0 2
33438: PUSH
33439: LD_INT 2
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33485
33447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33448: LD_ADDR_VAR 0 3
33452: PUSH
33453: LD_INT 11
33455: PUSH
33456: LD_INT 12
33458: PUSH
33459: LD_INT 13
33461: PUSH
33462: LD_INT 14
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: ST_TO_ADDR
33483: GO 33614
33485: LD_INT 1
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33493
33491: GO 33555
33493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 11
33501: PUSH
33502: LD_INT 12
33504: PUSH
33505: LD_INT 13
33507: PUSH
33508: LD_INT 14
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: LD_INT 4
33522: PUSH
33523: LD_INT 5
33525: PUSH
33526: LD_INT 21
33528: PUSH
33529: LD_INT 23
33531: PUSH
33532: LD_INT 22
33534: PUSH
33535: LD_INT 24
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: ST_TO_ADDR
33553: GO 33614
33555: LD_INT 3
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33613
33563: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33564: LD_ADDR_VAR 0 3
33568: PUSH
33569: LD_INT 13
33571: PUSH
33572: LD_INT 14
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: LD_INT 4
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 21
33589: PUSH
33590: LD_INT 22
33592: PUSH
33593: LD_INT 23
33595: PUSH
33596: LD_INT 24
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
33611: GO 33614
33613: POP
// result := ( chassis in result ) ;
33614: LD_ADDR_VAR 0 3
33618: PUSH
33619: LD_VAR 0 1
33623: PUSH
33624: LD_VAR 0 3
33628: IN
33629: ST_TO_ADDR
// end ;
33630: LD_VAR 0 3
33634: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33635: LD_INT 0
33637: PPUSH
// if not chassis or not weapon then
33638: LD_VAR 0 1
33642: NOT
33643: PUSH
33644: LD_VAR 0 2
33648: NOT
33649: OR
33650: IFFALSE 33654
// exit ;
33652: GO 34714
// case weapon of us_machine_gun :
33654: LD_VAR 0 2
33658: PUSH
33659: LD_INT 2
33661: DOUBLE
33662: EQUAL
33663: IFTRUE 33667
33665: GO 33697
33667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 4
33684: PUSH
33685: LD_INT 5
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: ST_TO_ADDR
33695: GO 34698
33697: LD_INT 3
33699: DOUBLE
33700: EQUAL
33701: IFTRUE 33705
33703: GO 33735
33705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33706: LD_ADDR_VAR 0 3
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 3
33719: PUSH
33720: LD_INT 4
33722: PUSH
33723: LD_INT 5
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: ST_TO_ADDR
33733: GO 34698
33735: LD_INT 11
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33773
33743: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33744: LD_ADDR_VAR 0 3
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 4
33760: PUSH
33761: LD_INT 5
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
33771: GO 34698
33773: LD_INT 4
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33807
33781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33782: LD_ADDR_VAR 0 3
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: LD_INT 5
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
33805: GO 34698
33807: LD_INT 5
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33841
33815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33816: LD_ADDR_VAR 0 3
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: ST_TO_ADDR
33839: GO 34698
33841: LD_INT 9
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33875
33849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 3
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: LD_INT 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
33873: GO 34698
33875: LD_INT 7
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33909
33883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 3
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: LD_INT 5
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
33907: GO 34698
33909: LD_INT 12
33911: DOUBLE
33912: EQUAL
33913: IFTRUE 33917
33915: GO 33943
33917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: LD_INT 4
33931: PUSH
33932: LD_INT 5
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: ST_TO_ADDR
33941: GO 34698
33943: LD_INT 13
33945: DOUBLE
33946: EQUAL
33947: IFTRUE 33951
33949: GO 33977
33951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33952: LD_ADDR_VAR 0 3
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: LD_INT 4
33965: PUSH
33966: LD_INT 5
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
33975: GO 34698
33977: LD_INT 14
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33985
33983: GO 34003
33985: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_INT 4
33993: PUSH
33994: LD_INT 5
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: ST_TO_ADDR
34001: GO 34698
34003: LD_INT 6
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34029
34011: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: ST_TO_ADDR
34027: GO 34698
34029: LD_INT 10
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34037
34035: GO 34055
34037: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: LD_INT 5
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: ST_TO_ADDR
34053: GO 34698
34055: LD_INT 22
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34089
34063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_INT 11
34071: PUSH
34072: LD_INT 12
34074: PUSH
34075: LD_INT 13
34077: PUSH
34078: LD_INT 14
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 34698
34089: LD_INT 23
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34123
34097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 11
34105: PUSH
34106: LD_INT 12
34108: PUSH
34109: LD_INT 13
34111: PUSH
34112: LD_INT 14
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
34121: GO 34698
34123: LD_INT 24
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34157
34131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_INT 11
34139: PUSH
34140: LD_INT 12
34142: PUSH
34143: LD_INT 13
34145: PUSH
34146: LD_INT 14
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
34155: GO 34698
34157: LD_INT 30
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34191
34165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_INT 11
34173: PUSH
34174: LD_INT 12
34176: PUSH
34177: LD_INT 13
34179: PUSH
34180: LD_INT 14
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
34189: GO 34698
34191: LD_INT 25
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34199
34197: GO 34217
34199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34200: LD_ADDR_VAR 0 3
34204: PUSH
34205: LD_INT 13
34207: PUSH
34208: LD_INT 14
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: ST_TO_ADDR
34215: GO 34698
34217: LD_INT 27
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34243
34225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_INT 13
34233: PUSH
34234: LD_INT 14
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 34698
34243: LD_INT 92
34245: DOUBLE
34246: EQUAL
34247: IFTRUE 34251
34249: GO 34277
34251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34252: LD_ADDR_VAR 0 3
34256: PUSH
34257: LD_INT 11
34259: PUSH
34260: LD_INT 12
34262: PUSH
34263: LD_INT 13
34265: PUSH
34266: LD_INT 14
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: ST_TO_ADDR
34275: GO 34698
34277: LD_INT 28
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34303
34285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34286: LD_ADDR_VAR 0 3
34290: PUSH
34291: LD_INT 13
34293: PUSH
34294: LD_INT 14
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: ST_TO_ADDR
34301: GO 34698
34303: LD_INT 29
34305: DOUBLE
34306: EQUAL
34307: IFTRUE 34311
34309: GO 34329
34311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34312: LD_ADDR_VAR 0 3
34316: PUSH
34317: LD_INT 13
34319: PUSH
34320: LD_INT 14
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: ST_TO_ADDR
34327: GO 34698
34329: LD_INT 31
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34337
34335: GO 34355
34337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_INT 13
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: ST_TO_ADDR
34353: GO 34698
34355: LD_INT 26
34357: DOUBLE
34358: EQUAL
34359: IFTRUE 34363
34361: GO 34381
34363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34364: LD_ADDR_VAR 0 3
34368: PUSH
34369: LD_INT 13
34371: PUSH
34372: LD_INT 14
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: ST_TO_ADDR
34379: GO 34698
34381: LD_INT 42
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34415
34389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 21
34397: PUSH
34398: LD_INT 22
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
34413: GO 34698
34415: LD_INT 43
34417: DOUBLE
34418: EQUAL
34419: IFTRUE 34423
34421: GO 34449
34423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 21
34431: PUSH
34432: LD_INT 22
34434: PUSH
34435: LD_INT 23
34437: PUSH
34438: LD_INT 24
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
34447: GO 34698
34449: LD_INT 44
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34483
34457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 21
34465: PUSH
34466: LD_INT 22
34468: PUSH
34469: LD_INT 23
34471: PUSH
34472: LD_INT 24
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
34481: GO 34698
34483: LD_INT 45
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34517
34491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_INT 21
34499: PUSH
34500: LD_INT 22
34502: PUSH
34503: LD_INT 23
34505: PUSH
34506: LD_INT 24
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
34515: GO 34698
34517: LD_INT 49
34519: DOUBLE
34520: EQUAL
34521: IFTRUE 34525
34523: GO 34551
34525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_INT 21
34533: PUSH
34534: LD_INT 22
34536: PUSH
34537: LD_INT 23
34539: PUSH
34540: LD_INT 24
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
34549: GO 34698
34551: LD_INT 51
34553: DOUBLE
34554: EQUAL
34555: IFTRUE 34559
34557: GO 34585
34559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34560: LD_ADDR_VAR 0 3
34564: PUSH
34565: LD_INT 21
34567: PUSH
34568: LD_INT 22
34570: PUSH
34571: LD_INT 23
34573: PUSH
34574: LD_INT 24
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
34583: GO 34698
34585: LD_INT 52
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 34619
34593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34594: LD_ADDR_VAR 0 3
34598: PUSH
34599: LD_INT 21
34601: PUSH
34602: LD_INT 22
34604: PUSH
34605: LD_INT 23
34607: PUSH
34608: LD_INT 24
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 34698
34619: LD_INT 53
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34645
34627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_INT 23
34635: PUSH
34636: LD_INT 24
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 34698
34645: LD_INT 46
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34671
34653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 23
34661: PUSH
34662: LD_INT 24
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: ST_TO_ADDR
34669: GO 34698
34671: LD_INT 47
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34697
34679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 23
34687: PUSH
34688: LD_INT 24
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: ST_TO_ADDR
34695: GO 34698
34697: POP
// result := ( chassis in result ) ;
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_VAR 0 1
34707: PUSH
34708: LD_VAR 0 3
34712: IN
34713: ST_TO_ADDR
// end ;
34714: LD_VAR 0 3
34718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
// result := array ;
34728: LD_ADDR_VAR 0 5
34732: PUSH
34733: LD_VAR 0 1
34737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34738: LD_VAR 0 1
34742: NOT
34743: PUSH
34744: LD_VAR 0 2
34748: NOT
34749: OR
34750: PUSH
34751: LD_VAR 0 3
34755: NOT
34756: OR
34757: PUSH
34758: LD_VAR 0 2
34762: PUSH
34763: LD_VAR 0 1
34767: GREATER
34768: OR
34769: PUSH
34770: LD_VAR 0 3
34774: PUSH
34775: LD_VAR 0 1
34779: GREATER
34780: OR
34781: IFFALSE 34785
// exit ;
34783: GO 35081
// if direction then
34785: LD_VAR 0 4
34789: IFFALSE 34853
// begin d := 1 ;
34791: LD_ADDR_VAR 0 9
34795: PUSH
34796: LD_INT 1
34798: ST_TO_ADDR
// if i_from > i_to then
34799: LD_VAR 0 2
34803: PUSH
34804: LD_VAR 0 3
34808: GREATER
34809: IFFALSE 34835
// length := ( array - i_from ) + i_to else
34811: LD_ADDR_VAR 0 11
34815: PUSH
34816: LD_VAR 0 1
34820: PUSH
34821: LD_VAR 0 2
34825: MINUS
34826: PUSH
34827: LD_VAR 0 3
34831: PLUS
34832: ST_TO_ADDR
34833: GO 34851
// length := i_to - i_from ;
34835: LD_ADDR_VAR 0 11
34839: PUSH
34840: LD_VAR 0 3
34844: PUSH
34845: LD_VAR 0 2
34849: MINUS
34850: ST_TO_ADDR
// end else
34851: GO 34914
// begin d := - 1 ;
34853: LD_ADDR_VAR 0 9
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: ST_TO_ADDR
// if i_from > i_to then
34862: LD_VAR 0 2
34866: PUSH
34867: LD_VAR 0 3
34871: GREATER
34872: IFFALSE 34892
// length := i_from - i_to else
34874: LD_ADDR_VAR 0 11
34878: PUSH
34879: LD_VAR 0 2
34883: PUSH
34884: LD_VAR 0 3
34888: MINUS
34889: ST_TO_ADDR
34890: GO 34914
// length := ( array - i_to ) + i_from ;
34892: LD_ADDR_VAR 0 11
34896: PUSH
34897: LD_VAR 0 1
34901: PUSH
34902: LD_VAR 0 3
34906: MINUS
34907: PUSH
34908: LD_VAR 0 2
34912: PLUS
34913: ST_TO_ADDR
// end ; if not length then
34914: LD_VAR 0 11
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35081
// tmp := array ;
34923: LD_ADDR_VAR 0 10
34927: PUSH
34928: LD_VAR 0 1
34932: ST_TO_ADDR
// for i = 1 to length do
34933: LD_ADDR_VAR 0 6
34937: PUSH
34938: DOUBLE
34939: LD_INT 1
34941: DEC
34942: ST_TO_ADDR
34943: LD_VAR 0 11
34947: PUSH
34948: FOR_TO
34949: IFFALSE 35069
// begin for j = 1 to array do
34951: LD_ADDR_VAR 0 7
34955: PUSH
34956: DOUBLE
34957: LD_INT 1
34959: DEC
34960: ST_TO_ADDR
34961: LD_VAR 0 1
34965: PUSH
34966: FOR_TO
34967: IFFALSE 35055
// begin k := j + d ;
34969: LD_ADDR_VAR 0 8
34973: PUSH
34974: LD_VAR 0 7
34978: PUSH
34979: LD_VAR 0 9
34983: PLUS
34984: ST_TO_ADDR
// if k > array then
34985: LD_VAR 0 8
34989: PUSH
34990: LD_VAR 0 1
34994: GREATER
34995: IFFALSE 35005
// k := 1 ;
34997: LD_ADDR_VAR 0 8
35001: PUSH
35002: LD_INT 1
35004: ST_TO_ADDR
// if not k then
35005: LD_VAR 0 8
35009: NOT
35010: IFFALSE 35022
// k := array ;
35012: LD_ADDR_VAR 0 8
35016: PUSH
35017: LD_VAR 0 1
35021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35022: LD_ADDR_VAR 0 10
35026: PUSH
35027: LD_VAR 0 10
35031: PPUSH
35032: LD_VAR 0 8
35036: PPUSH
35037: LD_VAR 0 1
35041: PUSH
35042: LD_VAR 0 7
35046: ARRAY
35047: PPUSH
35048: CALL_OW 1
35052: ST_TO_ADDR
// end ;
35053: GO 34966
35055: POP
35056: POP
// array := tmp ;
35057: LD_ADDR_VAR 0 1
35061: PUSH
35062: LD_VAR 0 10
35066: ST_TO_ADDR
// end ;
35067: GO 34948
35069: POP
35070: POP
// result := array ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_VAR 0 1
35080: ST_TO_ADDR
// end ;
35081: LD_VAR 0 5
35085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
// result := 0 ;
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_INT 0
35097: ST_TO_ADDR
// if not array or not value in array then
35098: LD_VAR 0 1
35102: NOT
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: LD_VAR 0 1
35113: IN
35114: NOT
35115: OR
35116: IFFALSE 35120
// exit ;
35118: GO 35174
// for i = 1 to array do
35120: LD_ADDR_VAR 0 4
35124: PUSH
35125: DOUBLE
35126: LD_INT 1
35128: DEC
35129: ST_TO_ADDR
35130: LD_VAR 0 1
35134: PUSH
35135: FOR_TO
35136: IFFALSE 35172
// if value = array [ i ] then
35138: LD_VAR 0 2
35142: PUSH
35143: LD_VAR 0 1
35147: PUSH
35148: LD_VAR 0 4
35152: ARRAY
35153: EQUAL
35154: IFFALSE 35170
// begin result := i ;
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_VAR 0 4
35165: ST_TO_ADDR
// exit ;
35166: POP
35167: POP
35168: GO 35174
// end ;
35170: GO 35135
35172: POP
35173: POP
// end ;
35174: LD_VAR 0 3
35178: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35179: LD_INT 0
35181: PPUSH
// vc_chassis := chassis ;
35182: LD_ADDR_OWVAR 37
35186: PUSH
35187: LD_VAR 0 1
35191: ST_TO_ADDR
// vc_engine := engine ;
35192: LD_ADDR_OWVAR 39
35196: PUSH
35197: LD_VAR 0 2
35201: ST_TO_ADDR
// vc_control := control ;
35202: LD_ADDR_OWVAR 38
35206: PUSH
35207: LD_VAR 0 3
35211: ST_TO_ADDR
// vc_weapon := weapon ;
35212: LD_ADDR_OWVAR 40
35216: PUSH
35217: LD_VAR 0 4
35221: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35222: LD_ADDR_OWVAR 41
35226: PUSH
35227: LD_VAR 0 5
35231: ST_TO_ADDR
// end ;
35232: LD_VAR 0 6
35236: RET
// export function WantPlant ( unit ) ; var task ; begin
35237: LD_INT 0
35239: PPUSH
35240: PPUSH
// result := false ;
35241: LD_ADDR_VAR 0 2
35245: PUSH
35246: LD_INT 0
35248: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35249: LD_ADDR_VAR 0 3
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 437
35263: ST_TO_ADDR
// if task then
35264: LD_VAR 0 3
35268: IFFALSE 35296
// if task [ 1 ] [ 1 ] = p then
35270: LD_VAR 0 3
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PUSH
35279: LD_INT 1
35281: ARRAY
35282: PUSH
35283: LD_STRING p
35285: EQUAL
35286: IFFALSE 35296
// result := true ;
35288: LD_ADDR_VAR 0 2
35292: PUSH
35293: LD_INT 1
35295: ST_TO_ADDR
// end ;
35296: LD_VAR 0 2
35300: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35301: LD_INT 0
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
// if pos < 1 then
35307: LD_VAR 0 2
35311: PUSH
35312: LD_INT 1
35314: LESS
35315: IFFALSE 35319
// exit ;
35317: GO 35622
// if pos = 1 then
35319: LD_VAR 0 2
35323: PUSH
35324: LD_INT 1
35326: EQUAL
35327: IFFALSE 35360
// result := Replace ( arr , pos [ 1 ] , value ) else
35329: LD_ADDR_VAR 0 4
35333: PUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: LD_VAR 0 2
35343: PUSH
35344: LD_INT 1
35346: ARRAY
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: CALL_OW 1
35357: ST_TO_ADDR
35358: GO 35622
// begin tmp := arr ;
35360: LD_ADDR_VAR 0 6
35364: PUSH
35365: LD_VAR 0 1
35369: ST_TO_ADDR
// s_arr := [ tmp ] ;
35370: LD_ADDR_VAR 0 7
35374: PUSH
35375: LD_VAR 0 6
35379: PUSH
35380: EMPTY
35381: LIST
35382: ST_TO_ADDR
// for i = 1 to pos - 1 do
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: DOUBLE
35389: LD_INT 1
35391: DEC
35392: ST_TO_ADDR
35393: LD_VAR 0 2
35397: PUSH
35398: LD_INT 1
35400: MINUS
35401: PUSH
35402: FOR_TO
35403: IFFALSE 35448
// begin tmp := tmp [ pos [ i ] ] ;
35405: LD_ADDR_VAR 0 6
35409: PUSH
35410: LD_VAR 0 6
35414: PUSH
35415: LD_VAR 0 2
35419: PUSH
35420: LD_VAR 0 5
35424: ARRAY
35425: ARRAY
35426: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35427: LD_ADDR_VAR 0 7
35431: PUSH
35432: LD_VAR 0 7
35436: PUSH
35437: LD_VAR 0 6
35441: PUSH
35442: EMPTY
35443: LIST
35444: ADD
35445: ST_TO_ADDR
// end ;
35446: GO 35402
35448: POP
35449: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35450: LD_ADDR_VAR 0 6
35454: PUSH
35455: LD_VAR 0 6
35459: PPUSH
35460: LD_VAR 0 2
35464: PUSH
35465: LD_VAR 0 2
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 3
35475: PPUSH
35476: CALL_OW 1
35480: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35481: LD_ADDR_VAR 0 7
35485: PUSH
35486: LD_VAR 0 7
35490: PPUSH
35491: LD_VAR 0 7
35495: PPUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: CALL_OW 1
35505: ST_TO_ADDR
// for i = s_arr downto 2 do
35506: LD_ADDR_VAR 0 5
35510: PUSH
35511: DOUBLE
35512: LD_VAR 0 7
35516: INC
35517: ST_TO_ADDR
35518: LD_INT 2
35520: PUSH
35521: FOR_DOWNTO
35522: IFFALSE 35606
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35524: LD_ADDR_VAR 0 6
35528: PUSH
35529: LD_VAR 0 7
35533: PUSH
35534: LD_VAR 0 5
35538: PUSH
35539: LD_INT 1
35541: MINUS
35542: ARRAY
35543: PPUSH
35544: LD_VAR 0 2
35548: PUSH
35549: LD_VAR 0 5
35553: PUSH
35554: LD_INT 1
35556: MINUS
35557: ARRAY
35558: PPUSH
35559: LD_VAR 0 7
35563: PUSH
35564: LD_VAR 0 5
35568: ARRAY
35569: PPUSH
35570: CALL_OW 1
35574: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35575: LD_ADDR_VAR 0 7
35579: PUSH
35580: LD_VAR 0 7
35584: PPUSH
35585: LD_VAR 0 5
35589: PUSH
35590: LD_INT 1
35592: MINUS
35593: PPUSH
35594: LD_VAR 0 6
35598: PPUSH
35599: CALL_OW 1
35603: ST_TO_ADDR
// end ;
35604: GO 35521
35606: POP
35607: POP
// result := s_arr [ 1 ] ;
35608: LD_ADDR_VAR 0 4
35612: PUSH
35613: LD_VAR 0 7
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: ST_TO_ADDR
// end ; end ;
35622: LD_VAR 0 4
35626: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
// if not list then
35631: LD_VAR 0 1
35635: NOT
35636: IFFALSE 35640
// exit ;
35638: GO 35731
// i := list [ pos1 ] ;
35640: LD_ADDR_VAR 0 5
35644: PUSH
35645: LD_VAR 0 1
35649: PUSH
35650: LD_VAR 0 2
35654: ARRAY
35655: ST_TO_ADDR
// if not i then
35656: LD_VAR 0 5
35660: NOT
35661: IFFALSE 35665
// exit ;
35663: GO 35731
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35665: LD_ADDR_VAR 0 1
35669: PUSH
35670: LD_VAR 0 1
35674: PPUSH
35675: LD_VAR 0 2
35679: PPUSH
35680: LD_VAR 0 1
35684: PUSH
35685: LD_VAR 0 3
35689: ARRAY
35690: PPUSH
35691: CALL_OW 1
35695: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35696: LD_ADDR_VAR 0 1
35700: PUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: LD_VAR 0 3
35710: PPUSH
35711: LD_VAR 0 5
35715: PPUSH
35716: CALL_OW 1
35720: ST_TO_ADDR
// result := list ;
35721: LD_ADDR_VAR 0 4
35725: PUSH
35726: LD_VAR 0 1
35730: ST_TO_ADDR
// end ;
35731: LD_VAR 0 4
35735: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35736: LD_INT 0
35738: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35739: LD_ADDR_VAR 0 5
35743: PUSH
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 250
35753: PPUSH
35754: LD_VAR 0 1
35758: PPUSH
35759: CALL_OW 251
35763: PPUSH
35764: LD_VAR 0 2
35768: PPUSH
35769: LD_VAR 0 3
35773: PPUSH
35774: LD_VAR 0 4
35778: PPUSH
35779: CALL 35789 0 5
35783: ST_TO_ADDR
// end ;
35784: LD_VAR 0 5
35788: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35789: LD_INT 0
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
// if not list then
35795: LD_VAR 0 3
35799: NOT
35800: IFFALSE 35804
// exit ;
35802: GO 36192
// result := [ ] ;
35804: LD_ADDR_VAR 0 6
35808: PUSH
35809: EMPTY
35810: ST_TO_ADDR
// for i in list do
35811: LD_ADDR_VAR 0 7
35815: PUSH
35816: LD_VAR 0 3
35820: PUSH
35821: FOR_IN
35822: IFFALSE 36024
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35824: LD_ADDR_VAR 0 9
35828: PUSH
35829: LD_VAR 0 7
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: LD_VAR 0 2
35843: PPUSH
35844: CALL_OW 297
35848: ST_TO_ADDR
// if not result then
35849: LD_VAR 0 6
35853: NOT
35854: IFFALSE 35880
// result := [ [ i , tmp ] ] else
35856: LD_ADDR_VAR 0 6
35860: PUSH
35861: LD_VAR 0 7
35865: PUSH
35866: LD_VAR 0 9
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: ST_TO_ADDR
35878: GO 36022
// begin if result [ result ] [ 2 ] < tmp then
35880: LD_VAR 0 6
35884: PUSH
35885: LD_VAR 0 6
35889: ARRAY
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: PUSH
35895: LD_VAR 0 9
35899: LESS
35900: IFFALSE 35942
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35902: LD_ADDR_VAR 0 6
35906: PUSH
35907: LD_VAR 0 6
35911: PPUSH
35912: LD_VAR 0 6
35916: PUSH
35917: LD_INT 1
35919: PLUS
35920: PPUSH
35921: LD_VAR 0 7
35925: PUSH
35926: LD_VAR 0 9
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PPUSH
35935: CALL_OW 2
35939: ST_TO_ADDR
35940: GO 36022
// for j = 1 to result do
35942: LD_ADDR_VAR 0 8
35946: PUSH
35947: DOUBLE
35948: LD_INT 1
35950: DEC
35951: ST_TO_ADDR
35952: LD_VAR 0 6
35956: PUSH
35957: FOR_TO
35958: IFFALSE 36020
// begin if tmp < result [ j ] [ 2 ] then
35960: LD_VAR 0 9
35964: PUSH
35965: LD_VAR 0 6
35969: PUSH
35970: LD_VAR 0 8
35974: ARRAY
35975: PUSH
35976: LD_INT 2
35978: ARRAY
35979: LESS
35980: IFFALSE 36018
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35982: LD_ADDR_VAR 0 6
35986: PUSH
35987: LD_VAR 0 6
35991: PPUSH
35992: LD_VAR 0 8
35996: PPUSH
35997: LD_VAR 0 7
36001: PUSH
36002: LD_VAR 0 9
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 2
36015: ST_TO_ADDR
// break ;
36016: GO 36020
// end ; end ;
36018: GO 35957
36020: POP
36021: POP
// end ; end ;
36022: GO 35821
36024: POP
36025: POP
// if result and not asc then
36026: LD_VAR 0 6
36030: PUSH
36031: LD_VAR 0 4
36035: NOT
36036: AND
36037: IFFALSE 36112
// begin tmp := result ;
36039: LD_ADDR_VAR 0 9
36043: PUSH
36044: LD_VAR 0 6
36048: ST_TO_ADDR
// for i = tmp downto 1 do
36049: LD_ADDR_VAR 0 7
36053: PUSH
36054: DOUBLE
36055: LD_VAR 0 9
36059: INC
36060: ST_TO_ADDR
36061: LD_INT 1
36063: PUSH
36064: FOR_DOWNTO
36065: IFFALSE 36110
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36067: LD_ADDR_VAR 0 6
36071: PUSH
36072: LD_VAR 0 6
36076: PPUSH
36077: LD_VAR 0 9
36081: PUSH
36082: LD_VAR 0 7
36086: MINUS
36087: PUSH
36088: LD_INT 1
36090: PLUS
36091: PPUSH
36092: LD_VAR 0 9
36096: PUSH
36097: LD_VAR 0 7
36101: ARRAY
36102: PPUSH
36103: CALL_OW 1
36107: ST_TO_ADDR
36108: GO 36064
36110: POP
36111: POP
// end ; tmp := [ ] ;
36112: LD_ADDR_VAR 0 9
36116: PUSH
36117: EMPTY
36118: ST_TO_ADDR
// if mode then
36119: LD_VAR 0 5
36123: IFFALSE 36192
// begin for i = 1 to result do
36125: LD_ADDR_VAR 0 7
36129: PUSH
36130: DOUBLE
36131: LD_INT 1
36133: DEC
36134: ST_TO_ADDR
36135: LD_VAR 0 6
36139: PUSH
36140: FOR_TO
36141: IFFALSE 36180
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36143: LD_ADDR_VAR 0 9
36147: PUSH
36148: LD_VAR 0 9
36152: PPUSH
36153: LD_VAR 0 7
36157: PPUSH
36158: LD_VAR 0 6
36162: PUSH
36163: LD_VAR 0 7
36167: ARRAY
36168: PUSH
36169: LD_INT 1
36171: ARRAY
36172: PPUSH
36173: CALL_OW 1
36177: ST_TO_ADDR
36178: GO 36140
36180: POP
36181: POP
// result := tmp ;
36182: LD_ADDR_VAR 0 6
36186: PUSH
36187: LD_VAR 0 9
36191: ST_TO_ADDR
// end ; end ;
36192: LD_VAR 0 6
36196: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36197: LD_INT 0
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36205: LD_ADDR_VAR 0 5
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: EMPTY
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// if not x or not y then
36227: LD_VAR 0 2
36231: NOT
36232: PUSH
36233: LD_VAR 0 3
36237: NOT
36238: OR
36239: IFFALSE 36243
// exit ;
36241: GO 37893
// if not range then
36243: LD_VAR 0 4
36247: NOT
36248: IFFALSE 36258
// range := 10 ;
36250: LD_ADDR_VAR 0 4
36254: PUSH
36255: LD_INT 10
36257: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36258: LD_ADDR_VAR 0 8
36262: PUSH
36263: LD_INT 81
36265: PUSH
36266: LD_VAR 0 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 92
36277: PUSH
36278: LD_VAR 0 2
36282: PUSH
36283: LD_VAR 0 3
36287: PUSH
36288: LD_VAR 0 4
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 3
36301: PUSH
36302: LD_INT 21
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: PPUSH
36321: CALL_OW 69
36325: ST_TO_ADDR
// if not tmp then
36326: LD_VAR 0 8
36330: NOT
36331: IFFALSE 36335
// exit ;
36333: GO 37893
// for i in tmp do
36335: LD_ADDR_VAR 0 6
36339: PUSH
36340: LD_VAR 0 8
36344: PUSH
36345: FOR_IN
36346: IFFALSE 37868
// begin points := [ 0 , 0 , 0 ] ;
36348: LD_ADDR_VAR 0 9
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// bpoints := 1 ;
36367: LD_ADDR_VAR 0 10
36371: PUSH
36372: LD_INT 1
36374: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36375: LD_VAR 0 6
36379: PPUSH
36380: CALL_OW 247
36384: PUSH
36385: LD_INT 1
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 36971
36393: POP
// begin if GetClass ( i ) = 1 then
36394: LD_VAR 0 6
36398: PPUSH
36399: CALL_OW 257
36403: PUSH
36404: LD_INT 1
36406: EQUAL
36407: IFFALSE 36428
// points := [ 10 , 5 , 3 ] ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_INT 10
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: LD_INT 3
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36428: LD_VAR 0 6
36432: PPUSH
36433: CALL_OW 257
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: LD_INT 4
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: IN
36452: IFFALSE 36473
// points := [ 3 , 2 , 1 ] ;
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 257
36482: PUSH
36483: LD_INT 5
36485: EQUAL
36486: IFFALSE 36507
// points := [ 130 , 5 , 2 ] ;
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: LD_INT 130
36495: PUSH
36496: LD_INT 5
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36507: LD_VAR 0 6
36511: PPUSH
36512: CALL_OW 257
36516: PUSH
36517: LD_INT 8
36519: EQUAL
36520: IFFALSE 36541
// points := [ 35 , 35 , 30 ] ;
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_INT 35
36529: PUSH
36530: LD_INT 35
36532: PUSH
36533: LD_INT 30
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 257
36550: PUSH
36551: LD_INT 9
36553: EQUAL
36554: IFFALSE 36575
// points := [ 20 , 55 , 40 ] ;
36556: LD_ADDR_VAR 0 9
36560: PUSH
36561: LD_INT 20
36563: PUSH
36564: LD_INT 55
36566: PUSH
36567: LD_INT 40
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36575: LD_VAR 0 6
36579: PPUSH
36580: CALL_OW 257
36584: PUSH
36585: LD_INT 12
36587: PUSH
36588: LD_INT 16
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: IN
36595: IFFALSE 36616
// points := [ 5 , 3 , 2 ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: LD_INT 5
36604: PUSH
36605: LD_INT 3
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 257
36625: PUSH
36626: LD_INT 17
36628: EQUAL
36629: IFFALSE 36650
// points := [ 100 , 50 , 75 ] ;
36631: LD_ADDR_VAR 0 9
36635: PUSH
36636: LD_INT 100
36638: PUSH
36639: LD_INT 50
36641: PUSH
36642: LD_INT 75
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36650: LD_VAR 0 6
36654: PPUSH
36655: CALL_OW 257
36659: PUSH
36660: LD_INT 15
36662: EQUAL
36663: IFFALSE 36684
// points := [ 10 , 5 , 3 ] ;
36665: LD_ADDR_VAR 0 9
36669: PUSH
36670: LD_INT 10
36672: PUSH
36673: LD_INT 5
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36684: LD_VAR 0 6
36688: PPUSH
36689: CALL_OW 257
36693: PUSH
36694: LD_INT 14
36696: EQUAL
36697: IFFALSE 36718
// points := [ 10 , 0 , 0 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 10
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 257
36727: PUSH
36728: LD_INT 11
36730: EQUAL
36731: IFFALSE 36752
// points := [ 30 , 10 , 5 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 30
36740: PUSH
36741: LD_INT 10
36743: PUSH
36744: LD_INT 5
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36752: LD_VAR 0 1
36756: PPUSH
36757: LD_INT 5
36759: PPUSH
36760: CALL_OW 321
36764: PUSH
36765: LD_INT 2
36767: EQUAL
36768: IFFALSE 36785
// bpoints := bpoints * 1.8 ;
36770: LD_ADDR_VAR 0 10
36774: PUSH
36775: LD_VAR 0 10
36779: PUSH
36780: LD_REAL  1.80000000000000E+0000
36783: MUL
36784: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36785: LD_VAR 0 6
36789: PPUSH
36790: CALL_OW 257
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 3
36803: PUSH
36804: LD_INT 4
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: IN
36813: PUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: LD_INT 51
36821: PPUSH
36822: CALL_OW 321
36826: PUSH
36827: LD_INT 2
36829: EQUAL
36830: AND
36831: IFFALSE 36848
// bpoints := bpoints * 1.2 ;
36833: LD_ADDR_VAR 0 10
36837: PUSH
36838: LD_VAR 0 10
36842: PUSH
36843: LD_REAL  1.20000000000000E+0000
36846: MUL
36847: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36848: LD_VAR 0 6
36852: PPUSH
36853: CALL_OW 257
36857: PUSH
36858: LD_INT 5
36860: PUSH
36861: LD_INT 7
36863: PUSH
36864: LD_INT 9
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: IN
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: LD_INT 52
36880: PPUSH
36881: CALL_OW 321
36885: PUSH
36886: LD_INT 2
36888: EQUAL
36889: AND
36890: IFFALSE 36907
// bpoints := bpoints * 1.5 ;
36892: LD_ADDR_VAR 0 10
36896: PUSH
36897: LD_VAR 0 10
36901: PUSH
36902: LD_REAL  1.50000000000000E+0000
36905: MUL
36906: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36907: LD_VAR 0 1
36911: PPUSH
36912: LD_INT 66
36914: PPUSH
36915: CALL_OW 321
36919: PUSH
36920: LD_INT 2
36922: EQUAL
36923: IFFALSE 36940
// bpoints := bpoints * 1.1 ;
36925: LD_ADDR_VAR 0 10
36929: PUSH
36930: LD_VAR 0 10
36934: PUSH
36935: LD_REAL  1.10000000000000E+0000
36938: MUL
36939: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36940: LD_ADDR_VAR 0 10
36944: PUSH
36945: LD_VAR 0 10
36949: PUSH
36950: LD_VAR 0 6
36954: PPUSH
36955: LD_INT 1
36957: PPUSH
36958: CALL_OW 259
36962: PUSH
36963: LD_REAL  1.15000000000000E+0000
36966: MUL
36967: MUL
36968: ST_TO_ADDR
// end ; unit_vehicle :
36969: GO 37797
36971: LD_INT 2
36973: DOUBLE
36974: EQUAL
36975: IFTRUE 36979
36977: GO 37785
36979: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36980: LD_VAR 0 6
36984: PPUSH
36985: CALL_OW 264
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 42
36995: PUSH
36996: LD_INT 24
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: IN
37004: IFFALSE 37025
// points := [ 25 , 5 , 3 ] ;
37006: LD_ADDR_VAR 0 9
37010: PUSH
37011: LD_INT 25
37013: PUSH
37014: LD_INT 5
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37025: LD_VAR 0 6
37029: PPUSH
37030: CALL_OW 264
37034: PUSH
37035: LD_INT 4
37037: PUSH
37038: LD_INT 43
37040: PUSH
37041: LD_INT 25
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: IN
37049: IFFALSE 37070
// points := [ 40 , 15 , 5 ] ;
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_INT 40
37058: PUSH
37059: LD_INT 15
37061: PUSH
37062: LD_INT 5
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37070: LD_VAR 0 6
37074: PPUSH
37075: CALL_OW 264
37079: PUSH
37080: LD_INT 3
37082: PUSH
37083: LD_INT 23
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: IN
37090: IFFALSE 37111
// points := [ 7 , 25 , 8 ] ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: LD_INT 7
37099: PUSH
37100: LD_INT 25
37102: PUSH
37103: LD_INT 8
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37111: LD_VAR 0 6
37115: PPUSH
37116: CALL_OW 264
37120: PUSH
37121: LD_INT 5
37123: PUSH
37124: LD_INT 27
37126: PUSH
37127: LD_INT 44
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: IN
37135: IFFALSE 37156
// points := [ 14 , 50 , 16 ] ;
37137: LD_ADDR_VAR 0 9
37141: PUSH
37142: LD_INT 14
37144: PUSH
37145: LD_INT 50
37147: PUSH
37148: LD_INT 16
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37156: LD_VAR 0 6
37160: PPUSH
37161: CALL_OW 264
37165: PUSH
37166: LD_INT 6
37168: PUSH
37169: LD_INT 46
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: IN
37176: IFFALSE 37197
// points := [ 32 , 120 , 70 ] ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_INT 32
37185: PUSH
37186: LD_INT 120
37188: PUSH
37189: LD_INT 70
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37197: LD_VAR 0 6
37201: PPUSH
37202: CALL_OW 264
37206: PUSH
37207: LD_INT 7
37209: PUSH
37210: LD_INT 28
37212: PUSH
37213: LD_INT 45
37215: PUSH
37216: LD_INT 92
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: IN
37225: IFFALSE 37246
// points := [ 35 , 20 , 45 ] ;
37227: LD_ADDR_VAR 0 9
37231: PUSH
37232: LD_INT 35
37234: PUSH
37235: LD_INT 20
37237: PUSH
37238: LD_INT 45
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37246: LD_VAR 0 6
37250: PPUSH
37251: CALL_OW 264
37255: PUSH
37256: LD_INT 47
37258: PUSH
37259: EMPTY
37260: LIST
37261: IN
37262: IFFALSE 37283
// points := [ 67 , 45 , 75 ] ;
37264: LD_ADDR_VAR 0 9
37268: PUSH
37269: LD_INT 67
37271: PUSH
37272: LD_INT 45
37274: PUSH
37275: LD_INT 75
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37283: LD_VAR 0 6
37287: PPUSH
37288: CALL_OW 264
37292: PUSH
37293: LD_INT 26
37295: PUSH
37296: EMPTY
37297: LIST
37298: IN
37299: IFFALSE 37320
// points := [ 120 , 30 , 80 ] ;
37301: LD_ADDR_VAR 0 9
37305: PUSH
37306: LD_INT 120
37308: PUSH
37309: LD_INT 30
37311: PUSH
37312: LD_INT 80
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37320: LD_VAR 0 6
37324: PPUSH
37325: CALL_OW 264
37329: PUSH
37330: LD_INT 22
37332: PUSH
37333: EMPTY
37334: LIST
37335: IN
37336: IFFALSE 37357
// points := [ 40 , 1 , 1 ] ;
37338: LD_ADDR_VAR 0 9
37342: PUSH
37343: LD_INT 40
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37357: LD_VAR 0 6
37361: PPUSH
37362: CALL_OW 264
37366: PUSH
37367: LD_INT 29
37369: PUSH
37370: EMPTY
37371: LIST
37372: IN
37373: IFFALSE 37394
// points := [ 70 , 200 , 400 ] ;
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_INT 70
37382: PUSH
37383: LD_INT 200
37385: PUSH
37386: LD_INT 400
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 264
37403: PUSH
37404: LD_INT 14
37406: PUSH
37407: LD_INT 53
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: IN
37414: IFFALSE 37435
// points := [ 40 , 10 , 20 ] ;
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: LD_INT 40
37423: PUSH
37424: LD_INT 10
37426: PUSH
37427: LD_INT 20
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37435: LD_VAR 0 6
37439: PPUSH
37440: CALL_OW 264
37444: PUSH
37445: LD_INT 9
37447: PUSH
37448: EMPTY
37449: LIST
37450: IN
37451: IFFALSE 37472
// points := [ 5 , 70 , 20 ] ;
37453: LD_ADDR_VAR 0 9
37457: PUSH
37458: LD_INT 5
37460: PUSH
37461: LD_INT 70
37463: PUSH
37464: LD_INT 20
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37472: LD_VAR 0 6
37476: PPUSH
37477: CALL_OW 264
37481: PUSH
37482: LD_INT 10
37484: PUSH
37485: EMPTY
37486: LIST
37487: IN
37488: IFFALSE 37509
// points := [ 35 , 110 , 70 ] ;
37490: LD_ADDR_VAR 0 9
37494: PUSH
37495: LD_INT 35
37497: PUSH
37498: LD_INT 110
37500: PUSH
37501: LD_INT 70
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37509: LD_VAR 0 6
37513: PPUSH
37514: CALL_OW 265
37518: PUSH
37519: LD_INT 25
37521: EQUAL
37522: IFFALSE 37543
// points := [ 80 , 65 , 100 ] ;
37524: LD_ADDR_VAR 0 9
37528: PUSH
37529: LD_INT 80
37531: PUSH
37532: LD_INT 65
37534: PUSH
37535: LD_INT 100
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37543: LD_VAR 0 6
37547: PPUSH
37548: CALL_OW 263
37552: PUSH
37553: LD_INT 1
37555: EQUAL
37556: IFFALSE 37591
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37558: LD_ADDR_VAR 0 10
37562: PUSH
37563: LD_VAR 0 10
37567: PUSH
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 311
37577: PPUSH
37578: LD_INT 3
37580: PPUSH
37581: CALL_OW 259
37585: PUSH
37586: LD_INT 4
37588: MUL
37589: MUL
37590: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37591: LD_VAR 0 6
37595: PPUSH
37596: CALL_OW 263
37600: PUSH
37601: LD_INT 2
37603: EQUAL
37604: IFFALSE 37655
// begin j := IsControledBy ( i ) ;
37606: LD_ADDR_VAR 0 7
37610: PUSH
37611: LD_VAR 0 6
37615: PPUSH
37616: CALL_OW 312
37620: ST_TO_ADDR
// if j then
37621: LD_VAR 0 7
37625: IFFALSE 37655
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37627: LD_ADDR_VAR 0 10
37631: PUSH
37632: LD_VAR 0 10
37636: PUSH
37637: LD_VAR 0 7
37641: PPUSH
37642: LD_INT 3
37644: PPUSH
37645: CALL_OW 259
37649: PUSH
37650: LD_INT 3
37652: MUL
37653: MUL
37654: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 264
37664: PUSH
37665: LD_INT 5
37667: PUSH
37668: LD_INT 6
37670: PUSH
37671: LD_INT 46
37673: PUSH
37674: LD_INT 44
37676: PUSH
37677: LD_INT 47
37679: PUSH
37680: LD_INT 45
37682: PUSH
37683: LD_INT 28
37685: PUSH
37686: LD_INT 7
37688: PUSH
37689: LD_INT 27
37691: PUSH
37692: LD_INT 29
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: IN
37707: PUSH
37708: LD_VAR 0 1
37712: PPUSH
37713: LD_INT 52
37715: PPUSH
37716: CALL_OW 321
37720: PUSH
37721: LD_INT 2
37723: EQUAL
37724: AND
37725: IFFALSE 37742
// bpoints := bpoints * 1.2 ;
37727: LD_ADDR_VAR 0 10
37731: PUSH
37732: LD_VAR 0 10
37736: PUSH
37737: LD_REAL  1.20000000000000E+0000
37740: MUL
37741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37742: LD_VAR 0 6
37746: PPUSH
37747: CALL_OW 264
37751: PUSH
37752: LD_INT 6
37754: PUSH
37755: LD_INT 46
37757: PUSH
37758: LD_INT 47
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: IN
37766: IFFALSE 37783
// bpoints := bpoints * 1.2 ;
37768: LD_ADDR_VAR 0 10
37772: PUSH
37773: LD_VAR 0 10
37777: PUSH
37778: LD_REAL  1.20000000000000E+0000
37781: MUL
37782: ST_TO_ADDR
// end ; unit_building :
37783: GO 37797
37785: LD_INT 3
37787: DOUBLE
37788: EQUAL
37789: IFTRUE 37793
37791: GO 37796
37793: POP
// ; end ;
37794: GO 37797
37796: POP
// for j = 1 to 3 do
37797: LD_ADDR_VAR 0 7
37801: PUSH
37802: DOUBLE
37803: LD_INT 1
37805: DEC
37806: ST_TO_ADDR
37807: LD_INT 3
37809: PUSH
37810: FOR_TO
37811: IFFALSE 37864
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37813: LD_ADDR_VAR 0 5
37817: PUSH
37818: LD_VAR 0 5
37822: PPUSH
37823: LD_VAR 0 7
37827: PPUSH
37828: LD_VAR 0 5
37832: PUSH
37833: LD_VAR 0 7
37837: ARRAY
37838: PUSH
37839: LD_VAR 0 9
37843: PUSH
37844: LD_VAR 0 7
37848: ARRAY
37849: PUSH
37850: LD_VAR 0 10
37854: MUL
37855: PLUS
37856: PPUSH
37857: CALL_OW 1
37861: ST_TO_ADDR
37862: GO 37810
37864: POP
37865: POP
// end ;
37866: GO 36345
37868: POP
37869: POP
// result := Replace ( result , 4 , tmp ) ;
37870: LD_ADDR_VAR 0 5
37874: PUSH
37875: LD_VAR 0 5
37879: PPUSH
37880: LD_INT 4
37882: PPUSH
37883: LD_VAR 0 8
37887: PPUSH
37888: CALL_OW 1
37892: ST_TO_ADDR
// end ;
37893: LD_VAR 0 5
37897: RET
// export function DangerAtRange ( unit , range ) ; begin
37898: LD_INT 0
37900: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 255
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 250
37925: PPUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 251
37935: PPUSH
37936: LD_VAR 0 2
37940: PPUSH
37941: CALL 36197 0 4
37945: ST_TO_ADDR
// end ;
37946: LD_VAR 0 3
37950: RET
// export function DangerInArea ( side , area ) ; begin
37951: LD_INT 0
37953: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_VAR 0 2
37963: PPUSH
37964: LD_INT 81
37966: PUSH
37967: LD_VAR 0 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PPUSH
37976: CALL_OW 70
37980: ST_TO_ADDR
// end ;
37981: LD_VAR 0 3
37985: RET
// export function IsExtension ( b ) ; begin
37986: LD_INT 0
37988: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37989: LD_ADDR_VAR 0 2
37993: PUSH
37994: LD_VAR 0 1
37998: PUSH
37999: LD_INT 23
38001: PUSH
38002: LD_INT 20
38004: PUSH
38005: LD_INT 22
38007: PUSH
38008: LD_INT 17
38010: PUSH
38011: LD_INT 24
38013: PUSH
38014: LD_INT 21
38016: PUSH
38017: LD_INT 19
38019: PUSH
38020: LD_INT 16
38022: PUSH
38023: LD_INT 25
38025: PUSH
38026: LD_INT 18
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: IN
38041: ST_TO_ADDR
// end ;
38042: LD_VAR 0 2
38046: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38047: LD_INT 0
38049: PPUSH
38050: PPUSH
38051: PPUSH
// result := [ ] ;
38052: LD_ADDR_VAR 0 4
38056: PUSH
38057: EMPTY
38058: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38059: LD_ADDR_VAR 0 5
38063: PUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: LD_INT 21
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PPUSH
38079: CALL_OW 70
38083: ST_TO_ADDR
// if not tmp then
38084: LD_VAR 0 5
38088: NOT
38089: IFFALSE 38093
// exit ;
38091: GO 38157
// if checkLink then
38093: LD_VAR 0 3
38097: IFFALSE 38147
// begin for i in tmp do
38099: LD_ADDR_VAR 0 6
38103: PUSH
38104: LD_VAR 0 5
38108: PUSH
38109: FOR_IN
38110: IFFALSE 38145
// if GetBase ( i ) <> base then
38112: LD_VAR 0 6
38116: PPUSH
38117: CALL_OW 274
38121: PUSH
38122: LD_VAR 0 1
38126: NONEQUAL
38127: IFFALSE 38143
// ComLinkToBase ( base , i ) ;
38129: LD_VAR 0 1
38133: PPUSH
38134: LD_VAR 0 6
38138: PPUSH
38139: CALL_OW 169
38143: GO 38109
38145: POP
38146: POP
// end ; result := tmp ;
38147: LD_ADDR_VAR 0 4
38151: PUSH
38152: LD_VAR 0 5
38156: ST_TO_ADDR
// end ;
38157: LD_VAR 0 4
38161: RET
// export function ComComplete ( units , b ) ; var i ; begin
38162: LD_INT 0
38164: PPUSH
38165: PPUSH
// if not units then
38166: LD_VAR 0 1
38170: NOT
38171: IFFALSE 38175
// exit ;
38173: GO 38265
// for i in units do
38175: LD_ADDR_VAR 0 4
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: FOR_IN
38186: IFFALSE 38263
// if BuildingStatus ( b ) = bs_build then
38188: LD_VAR 0 2
38192: PPUSH
38193: CALL_OW 461
38197: PUSH
38198: LD_INT 1
38200: EQUAL
38201: IFFALSE 38261
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38203: LD_VAR 0 4
38207: PPUSH
38208: LD_STRING h
38210: PUSH
38211: LD_VAR 0 2
38215: PPUSH
38216: CALL_OW 250
38220: PUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: CALL_OW 251
38230: PUSH
38231: LD_VAR 0 2
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: PPUSH
38257: CALL_OW 446
38261: GO 38185
38263: POP
38264: POP
// end ;
38265: LD_VAR 0 3
38269: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38270: LD_INT 0
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38278: LD_VAR 0 1
38282: NOT
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 263
38293: PUSH
38294: LD_INT 2
38296: NONEQUAL
38297: OR
38298: IFFALSE 38302
// exit ;
38300: GO 38618
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38302: LD_ADDR_VAR 0 6
38306: PUSH
38307: LD_INT 22
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 255
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 30
38329: PUSH
38330: LD_INT 36
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 34
38339: PUSH
38340: LD_INT 31
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 69
38360: ST_TO_ADDR
// if not tmp then
38361: LD_VAR 0 6
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38618
// result := [ ] ;
38370: LD_ADDR_VAR 0 2
38374: PUSH
38375: EMPTY
38376: ST_TO_ADDR
// for i in tmp do
38377: LD_ADDR_VAR 0 3
38381: PUSH
38382: LD_VAR 0 6
38386: PUSH
38387: FOR_IN
38388: IFFALSE 38459
// begin t := UnitsInside ( i ) ;
38390: LD_ADDR_VAR 0 4
38394: PUSH
38395: LD_VAR 0 3
38399: PPUSH
38400: CALL_OW 313
38404: ST_TO_ADDR
// if t then
38405: LD_VAR 0 4
38409: IFFALSE 38457
// for j in t do
38411: LD_ADDR_VAR 0 7
38415: PUSH
38416: LD_VAR 0 4
38420: PUSH
38421: FOR_IN
38422: IFFALSE 38455
// result := Replace ( result , result + 1 , j ) ;
38424: LD_ADDR_VAR 0 2
38428: PUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 1
38441: PLUS
38442: PPUSH
38443: LD_VAR 0 7
38447: PPUSH
38448: CALL_OW 1
38452: ST_TO_ADDR
38453: GO 38421
38455: POP
38456: POP
// end ;
38457: GO 38387
38459: POP
38460: POP
// if not result then
38461: LD_VAR 0 2
38465: NOT
38466: IFFALSE 38470
// exit ;
38468: GO 38618
// mech := result [ 1 ] ;
38470: LD_ADDR_VAR 0 5
38474: PUSH
38475: LD_VAR 0 2
38479: PUSH
38480: LD_INT 1
38482: ARRAY
38483: ST_TO_ADDR
// if result > 1 then
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 1
38491: GREATER
38492: IFFALSE 38604
// begin for i = 2 to result do
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: DOUBLE
38500: LD_INT 2
38502: DEC
38503: ST_TO_ADDR
38504: LD_VAR 0 2
38508: PUSH
38509: FOR_TO
38510: IFFALSE 38602
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38512: LD_ADDR_VAR 0 4
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: LD_VAR 0 3
38526: ARRAY
38527: PPUSH
38528: LD_INT 3
38530: PPUSH
38531: CALL_OW 259
38535: PUSH
38536: LD_VAR 0 2
38540: PUSH
38541: LD_VAR 0 3
38545: ARRAY
38546: PPUSH
38547: CALL_OW 432
38551: MINUS
38552: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38553: LD_VAR 0 4
38557: PUSH
38558: LD_VAR 0 5
38562: PPUSH
38563: LD_INT 3
38565: PPUSH
38566: CALL_OW 259
38570: PUSH
38571: LD_VAR 0 5
38575: PPUSH
38576: CALL_OW 432
38580: MINUS
38581: GREATEREQUAL
38582: IFFALSE 38600
// mech := result [ i ] ;
38584: LD_ADDR_VAR 0 5
38588: PUSH
38589: LD_VAR 0 2
38593: PUSH
38594: LD_VAR 0 3
38598: ARRAY
38599: ST_TO_ADDR
// end ;
38600: GO 38509
38602: POP
38603: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38604: LD_VAR 0 1
38608: PPUSH
38609: LD_VAR 0 5
38613: PPUSH
38614: CALL_OW 135
// end ;
38618: LD_VAR 0 2
38622: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38623: LD_INT 0
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
// result := [ ] ;
38638: LD_ADDR_VAR 0 7
38642: PUSH
38643: EMPTY
38644: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 266
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: IN
38665: NOT
38666: IFFALSE 38670
// exit ;
38668: GO 40304
// if name then
38670: LD_VAR 0 3
38674: IFFALSE 38690
// SetBName ( base_dep , name ) ;
38676: LD_VAR 0 1
38680: PPUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: CALL_OW 500
// base := GetBase ( base_dep ) ;
38690: LD_ADDR_VAR 0 15
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 274
38704: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38705: LD_ADDR_VAR 0 16
38709: PUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 255
38719: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38720: LD_ADDR_VAR 0 17
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 248
38734: ST_TO_ADDR
// if sources then
38735: LD_VAR 0 5
38739: IFFALSE 38786
// for i = 1 to 3 do
38741: LD_ADDR_VAR 0 8
38745: PUSH
38746: DOUBLE
38747: LD_INT 1
38749: DEC
38750: ST_TO_ADDR
38751: LD_INT 3
38753: PUSH
38754: FOR_TO
38755: IFFALSE 38784
// AddResourceType ( base , i , sources [ i ] ) ;
38757: LD_VAR 0 15
38761: PPUSH
38762: LD_VAR 0 8
38766: PPUSH
38767: LD_VAR 0 5
38771: PUSH
38772: LD_VAR 0 8
38776: ARRAY
38777: PPUSH
38778: CALL_OW 276
38782: GO 38754
38784: POP
38785: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38786: LD_ADDR_VAR 0 18
38790: PUSH
38791: LD_VAR 0 15
38795: PPUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: LD_INT 1
38803: PPUSH
38804: CALL 38047 0 3
38808: ST_TO_ADDR
// InitHc ;
38809: CALL_OW 19
// InitUc ;
38813: CALL_OW 18
// uc_side := side ;
38817: LD_ADDR_OWVAR 20
38821: PUSH
38822: LD_VAR 0 16
38826: ST_TO_ADDR
// uc_nation := nation ;
38827: LD_ADDR_OWVAR 21
38831: PUSH
38832: LD_VAR 0 17
38836: ST_TO_ADDR
// if buildings then
38837: LD_VAR 0 18
38841: IFFALSE 40163
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38843: LD_ADDR_VAR 0 19
38847: PUSH
38848: LD_VAR 0 18
38852: PPUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 30
38858: PUSH
38859: LD_INT 29
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 72
38885: ST_TO_ADDR
// if tmp then
38886: LD_VAR 0 19
38890: IFFALSE 38938
// for i in tmp do
38892: LD_ADDR_VAR 0 8
38896: PUSH
38897: LD_VAR 0 19
38901: PUSH
38902: FOR_IN
38903: IFFALSE 38936
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38905: LD_VAR 0 8
38909: PPUSH
38910: CALL_OW 250
38914: PPUSH
38915: LD_VAR 0 8
38919: PPUSH
38920: CALL_OW 251
38924: PPUSH
38925: LD_VAR 0 16
38929: PPUSH
38930: CALL_OW 441
38934: GO 38902
38936: POP
38937: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38938: LD_VAR 0 18
38942: PPUSH
38943: LD_INT 2
38945: PUSH
38946: LD_INT 30
38948: PUSH
38949: LD_INT 32
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 30
38958: PUSH
38959: LD_INT 33
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PPUSH
38971: CALL_OW 72
38975: IFFALSE 39063
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38977: LD_ADDR_VAR 0 8
38981: PUSH
38982: LD_VAR 0 18
38986: PPUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 30
38992: PUSH
38993: LD_INT 32
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 30
39002: PUSH
39003: LD_INT 33
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PPUSH
39015: CALL_OW 72
39019: PUSH
39020: FOR_IN
39021: IFFALSE 39061
// begin if not GetBWeapon ( i ) then
39023: LD_VAR 0 8
39027: PPUSH
39028: CALL_OW 269
39032: NOT
39033: IFFALSE 39059
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39035: LD_VAR 0 8
39039: PPUSH
39040: LD_VAR 0 8
39044: PPUSH
39045: LD_VAR 0 2
39049: PPUSH
39050: CALL 40309 0 2
39054: PPUSH
39055: CALL_OW 431
// end ;
39059: GO 39020
39061: POP
39062: POP
// end ; for i = 1 to personel do
39063: LD_ADDR_VAR 0 8
39067: PUSH
39068: DOUBLE
39069: LD_INT 1
39071: DEC
39072: ST_TO_ADDR
39073: LD_VAR 0 6
39077: PUSH
39078: FOR_TO
39079: IFFALSE 40143
// begin if i > 4 then
39081: LD_VAR 0 8
39085: PUSH
39086: LD_INT 4
39088: GREATER
39089: IFFALSE 39093
// break ;
39091: GO 40143
// case i of 1 :
39093: LD_VAR 0 8
39097: PUSH
39098: LD_INT 1
39100: DOUBLE
39101: EQUAL
39102: IFTRUE 39106
39104: GO 39186
39106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39107: LD_ADDR_VAR 0 12
39111: PUSH
39112: LD_VAR 0 18
39116: PPUSH
39117: LD_INT 22
39119: PUSH
39120: LD_VAR 0 16
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 58
39131: PUSH
39132: EMPTY
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 30
39140: PUSH
39141: LD_INT 32
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 30
39150: PUSH
39151: LD_INT 4
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 30
39160: PUSH
39161: LD_INT 5
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: PPUSH
39179: CALL_OW 72
39183: ST_TO_ADDR
39184: GO 39408
39186: LD_INT 2
39188: DOUBLE
39189: EQUAL
39190: IFTRUE 39194
39192: GO 39256
39194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39195: LD_ADDR_VAR 0 12
39199: PUSH
39200: LD_VAR 0 18
39204: PPUSH
39205: LD_INT 22
39207: PUSH
39208: LD_VAR 0 16
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 30
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 30
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PPUSH
39249: CALL_OW 72
39253: ST_TO_ADDR
39254: GO 39408
39256: LD_INT 3
39258: DOUBLE
39259: EQUAL
39260: IFTRUE 39264
39262: GO 39326
39264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39265: LD_ADDR_VAR 0 12
39269: PUSH
39270: LD_VAR 0 18
39274: PPUSH
39275: LD_INT 22
39277: PUSH
39278: LD_VAR 0 16
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 30
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 30
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL_OW 72
39323: ST_TO_ADDR
39324: GO 39408
39326: LD_INT 4
39328: DOUBLE
39329: EQUAL
39330: IFTRUE 39334
39332: GO 39407
39334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39335: LD_ADDR_VAR 0 12
39339: PUSH
39340: LD_VAR 0 18
39344: PPUSH
39345: LD_INT 22
39347: PUSH
39348: LD_VAR 0 16
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: LD_INT 30
39362: PUSH
39363: LD_INT 6
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 30
39372: PUSH
39373: LD_INT 7
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 30
39382: PUSH
39383: LD_INT 8
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PPUSH
39400: CALL_OW 72
39404: ST_TO_ADDR
39405: GO 39408
39407: POP
// if i = 1 then
39408: LD_VAR 0 8
39412: PUSH
39413: LD_INT 1
39415: EQUAL
39416: IFFALSE 39527
// begin tmp := [ ] ;
39418: LD_ADDR_VAR 0 19
39422: PUSH
39423: EMPTY
39424: ST_TO_ADDR
// for j in f do
39425: LD_ADDR_VAR 0 9
39429: PUSH
39430: LD_VAR 0 12
39434: PUSH
39435: FOR_IN
39436: IFFALSE 39509
// if GetBType ( j ) = b_bunker then
39438: LD_VAR 0 9
39442: PPUSH
39443: CALL_OW 266
39447: PUSH
39448: LD_INT 32
39450: EQUAL
39451: IFFALSE 39478
// tmp := Insert ( tmp , 1 , j ) else
39453: LD_ADDR_VAR 0 19
39457: PUSH
39458: LD_VAR 0 19
39462: PPUSH
39463: LD_INT 1
39465: PPUSH
39466: LD_VAR 0 9
39470: PPUSH
39471: CALL_OW 2
39475: ST_TO_ADDR
39476: GO 39507
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39478: LD_ADDR_VAR 0 19
39482: PUSH
39483: LD_VAR 0 19
39487: PPUSH
39488: LD_VAR 0 19
39492: PUSH
39493: LD_INT 1
39495: PLUS
39496: PPUSH
39497: LD_VAR 0 9
39501: PPUSH
39502: CALL_OW 2
39506: ST_TO_ADDR
39507: GO 39435
39509: POP
39510: POP
// if tmp then
39511: LD_VAR 0 19
39515: IFFALSE 39527
// f := tmp ;
39517: LD_ADDR_VAR 0 12
39521: PUSH
39522: LD_VAR 0 19
39526: ST_TO_ADDR
// end ; x := personel [ i ] ;
39527: LD_ADDR_VAR 0 13
39531: PUSH
39532: LD_VAR 0 6
39536: PUSH
39537: LD_VAR 0 8
39541: ARRAY
39542: ST_TO_ADDR
// if x = - 1 then
39543: LD_VAR 0 13
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: EQUAL
39552: IFFALSE 39761
// begin for j in f do
39554: LD_ADDR_VAR 0 9
39558: PUSH
39559: LD_VAR 0 12
39563: PUSH
39564: FOR_IN
39565: IFFALSE 39757
// repeat InitHc ;
39567: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39571: LD_VAR 0 9
39575: PPUSH
39576: CALL_OW 266
39580: PUSH
39581: LD_INT 5
39583: EQUAL
39584: IFFALSE 39654
// begin if UnitsInside ( j ) < 3 then
39586: LD_VAR 0 9
39590: PPUSH
39591: CALL_OW 313
39595: PUSH
39596: LD_INT 3
39598: LESS
39599: IFFALSE 39635
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39601: LD_INT 0
39603: PPUSH
39604: LD_INT 5
39606: PUSH
39607: LD_INT 8
39609: PUSH
39610: LD_INT 9
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: LD_VAR 0 17
39622: ARRAY
39623: PPUSH
39624: LD_VAR 0 4
39628: PPUSH
39629: CALL_OW 380
39633: GO 39652
// PrepareHuman ( false , i , skill ) ;
39635: LD_INT 0
39637: PPUSH
39638: LD_VAR 0 8
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: CALL_OW 380
// end else
39652: GO 39671
// PrepareHuman ( false , i , skill ) ;
39654: LD_INT 0
39656: PPUSH
39657: LD_VAR 0 8
39661: PPUSH
39662: LD_VAR 0 4
39666: PPUSH
39667: CALL_OW 380
// un := CreateHuman ;
39671: LD_ADDR_VAR 0 14
39675: PUSH
39676: CALL_OW 44
39680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39681: LD_ADDR_VAR 0 7
39685: PUSH
39686: LD_VAR 0 7
39690: PPUSH
39691: LD_INT 1
39693: PPUSH
39694: LD_VAR 0 14
39698: PPUSH
39699: CALL_OW 2
39703: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39704: LD_VAR 0 14
39708: PPUSH
39709: LD_VAR 0 9
39713: PPUSH
39714: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39718: LD_VAR 0 9
39722: PPUSH
39723: CALL_OW 313
39727: PUSH
39728: LD_INT 6
39730: EQUAL
39731: PUSH
39732: LD_VAR 0 9
39736: PPUSH
39737: CALL_OW 266
39741: PUSH
39742: LD_INT 32
39744: PUSH
39745: LD_INT 31
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: IN
39752: OR
39753: IFFALSE 39567
39755: GO 39564
39757: POP
39758: POP
// end else
39759: GO 40141
// for j = 1 to x do
39761: LD_ADDR_VAR 0 9
39765: PUSH
39766: DOUBLE
39767: LD_INT 1
39769: DEC
39770: ST_TO_ADDR
39771: LD_VAR 0 13
39775: PUSH
39776: FOR_TO
39777: IFFALSE 40139
// begin InitHc ;
39779: CALL_OW 19
// if not f then
39783: LD_VAR 0 12
39787: NOT
39788: IFFALSE 39877
// begin PrepareHuman ( false , i , skill ) ;
39790: LD_INT 0
39792: PPUSH
39793: LD_VAR 0 8
39797: PPUSH
39798: LD_VAR 0 4
39802: PPUSH
39803: CALL_OW 380
// un := CreateHuman ;
39807: LD_ADDR_VAR 0 14
39811: PUSH
39812: CALL_OW 44
39816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39817: LD_ADDR_VAR 0 7
39821: PUSH
39822: LD_VAR 0 7
39826: PPUSH
39827: LD_INT 1
39829: PPUSH
39830: LD_VAR 0 14
39834: PPUSH
39835: CALL_OW 2
39839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39840: LD_VAR 0 14
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 250
39854: PPUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 251
39864: PPUSH
39865: LD_INT 10
39867: PPUSH
39868: LD_INT 0
39870: PPUSH
39871: CALL_OW 50
// continue ;
39875: GO 39776
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39877: LD_VAR 0 12
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: CALL_OW 313
39890: PUSH
39891: LD_VAR 0 12
39895: PUSH
39896: LD_INT 1
39898: ARRAY
39899: PPUSH
39900: CALL_OW 266
39904: PUSH
39905: LD_INT 32
39907: PUSH
39908: LD_INT 31
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: IN
39915: AND
39916: PUSH
39917: LD_VAR 0 12
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PPUSH
39926: CALL_OW 313
39930: PUSH
39931: LD_INT 6
39933: EQUAL
39934: OR
39935: IFFALSE 39955
// f := Delete ( f , 1 ) ;
39937: LD_ADDR_VAR 0 12
39941: PUSH
39942: LD_VAR 0 12
39946: PPUSH
39947: LD_INT 1
39949: PPUSH
39950: CALL_OW 3
39954: ST_TO_ADDR
// if not f then
39955: LD_VAR 0 12
39959: NOT
39960: IFFALSE 39978
// begin x := x + 2 ;
39962: LD_ADDR_VAR 0 13
39966: PUSH
39967: LD_VAR 0 13
39971: PUSH
39972: LD_INT 2
39974: PLUS
39975: ST_TO_ADDR
// continue ;
39976: GO 39776
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39978: LD_VAR 0 12
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: PPUSH
39987: CALL_OW 266
39991: PUSH
39992: LD_INT 5
39994: EQUAL
39995: IFFALSE 40069
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39997: LD_VAR 0 12
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: PPUSH
40006: CALL_OW 313
40010: PUSH
40011: LD_INT 3
40013: LESS
40014: IFFALSE 40050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40016: LD_INT 0
40018: PPUSH
40019: LD_INT 5
40021: PUSH
40022: LD_INT 8
40024: PUSH
40025: LD_INT 9
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: PUSH
40033: LD_VAR 0 17
40037: ARRAY
40038: PPUSH
40039: LD_VAR 0 4
40043: PPUSH
40044: CALL_OW 380
40048: GO 40067
// PrepareHuman ( false , i , skill ) ;
40050: LD_INT 0
40052: PPUSH
40053: LD_VAR 0 8
40057: PPUSH
40058: LD_VAR 0 4
40062: PPUSH
40063: CALL_OW 380
// end else
40067: GO 40086
// PrepareHuman ( false , i , skill ) ;
40069: LD_INT 0
40071: PPUSH
40072: LD_VAR 0 8
40076: PPUSH
40077: LD_VAR 0 4
40081: PPUSH
40082: CALL_OW 380
// un := CreateHuman ;
40086: LD_ADDR_VAR 0 14
40090: PUSH
40091: CALL_OW 44
40095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40096: LD_ADDR_VAR 0 7
40100: PUSH
40101: LD_VAR 0 7
40105: PPUSH
40106: LD_INT 1
40108: PPUSH
40109: LD_VAR 0 14
40113: PPUSH
40114: CALL_OW 2
40118: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40119: LD_VAR 0 14
40123: PPUSH
40124: LD_VAR 0 12
40128: PUSH
40129: LD_INT 1
40131: ARRAY
40132: PPUSH
40133: CALL_OW 52
// end ;
40137: GO 39776
40139: POP
40140: POP
// end ;
40141: GO 39078
40143: POP
40144: POP
// result := result ^ buildings ;
40145: LD_ADDR_VAR 0 7
40149: PUSH
40150: LD_VAR 0 7
40154: PUSH
40155: LD_VAR 0 18
40159: ADD
40160: ST_TO_ADDR
// end else
40161: GO 40304
// begin for i = 1 to personel do
40163: LD_ADDR_VAR 0 8
40167: PUSH
40168: DOUBLE
40169: LD_INT 1
40171: DEC
40172: ST_TO_ADDR
40173: LD_VAR 0 6
40177: PUSH
40178: FOR_TO
40179: IFFALSE 40302
// begin if i > 4 then
40181: LD_VAR 0 8
40185: PUSH
40186: LD_INT 4
40188: GREATER
40189: IFFALSE 40193
// break ;
40191: GO 40302
// x := personel [ i ] ;
40193: LD_ADDR_VAR 0 13
40197: PUSH
40198: LD_VAR 0 6
40202: PUSH
40203: LD_VAR 0 8
40207: ARRAY
40208: ST_TO_ADDR
// if x = - 1 then
40209: LD_VAR 0 13
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: EQUAL
40218: IFFALSE 40222
// continue ;
40220: GO 40178
// PrepareHuman ( false , i , skill ) ;
40222: LD_INT 0
40224: PPUSH
40225: LD_VAR 0 8
40229: PPUSH
40230: LD_VAR 0 4
40234: PPUSH
40235: CALL_OW 380
// un := CreateHuman ;
40239: LD_ADDR_VAR 0 14
40243: PUSH
40244: CALL_OW 44
40248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40249: LD_VAR 0 14
40253: PPUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 250
40263: PPUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 251
40273: PPUSH
40274: LD_INT 10
40276: PPUSH
40277: LD_INT 0
40279: PPUSH
40280: CALL_OW 50
// result := result ^ un ;
40284: LD_ADDR_VAR 0 7
40288: PUSH
40289: LD_VAR 0 7
40293: PUSH
40294: LD_VAR 0 14
40298: ADD
40299: ST_TO_ADDR
// end ;
40300: GO 40178
40302: POP
40303: POP
// end ; end ;
40304: LD_VAR 0 7
40308: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40309: LD_INT 0
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
// result := false ;
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_INT 0
40334: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40335: LD_VAR 0 1
40339: NOT
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: CALL_OW 266
40350: PUSH
40351: LD_INT 32
40353: PUSH
40354: LD_INT 33
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: IN
40361: NOT
40362: OR
40363: IFFALSE 40367
// exit ;
40365: GO 41476
// nat := GetNation ( tower ) ;
40367: LD_ADDR_VAR 0 12
40371: PUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: CALL_OW 248
40381: ST_TO_ADDR
// side := GetSide ( tower ) ;
40382: LD_ADDR_VAR 0 16
40386: PUSH
40387: LD_VAR 0 1
40391: PPUSH
40392: CALL_OW 255
40396: ST_TO_ADDR
// x := GetX ( tower ) ;
40397: LD_ADDR_VAR 0 10
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 250
40411: ST_TO_ADDR
// y := GetY ( tower ) ;
40412: LD_ADDR_VAR 0 11
40416: PUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL_OW 251
40426: ST_TO_ADDR
// if not x or not y then
40427: LD_VAR 0 10
40431: NOT
40432: PUSH
40433: LD_VAR 0 11
40437: NOT
40438: OR
40439: IFFALSE 40443
// exit ;
40441: GO 41476
// weapon := 0 ;
40443: LD_ADDR_VAR 0 18
40447: PUSH
40448: LD_INT 0
40450: ST_TO_ADDR
// fac_list := [ ] ;
40451: LD_ADDR_VAR 0 17
40455: PUSH
40456: EMPTY
40457: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40458: LD_ADDR_VAR 0 6
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 274
40472: PPUSH
40473: LD_VAR 0 2
40477: PPUSH
40478: LD_INT 0
40480: PPUSH
40481: CALL 38047 0 3
40485: PPUSH
40486: LD_INT 30
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PPUSH
40496: CALL_OW 72
40500: ST_TO_ADDR
// if not factories then
40501: LD_VAR 0 6
40505: NOT
40506: IFFALSE 40510
// exit ;
40508: GO 41476
// for i in factories do
40510: LD_ADDR_VAR 0 8
40514: PUSH
40515: LD_VAR 0 6
40519: PUSH
40520: FOR_IN
40521: IFFALSE 40546
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40523: LD_ADDR_VAR 0 17
40527: PUSH
40528: LD_VAR 0 17
40532: PUSH
40533: LD_VAR 0 8
40537: PPUSH
40538: CALL_OW 478
40542: UNION
40543: ST_TO_ADDR
40544: GO 40520
40546: POP
40547: POP
// if not fac_list then
40548: LD_VAR 0 17
40552: NOT
40553: IFFALSE 40557
// exit ;
40555: GO 41476
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40557: LD_ADDR_VAR 0 5
40561: PUSH
40562: LD_INT 4
40564: PUSH
40565: LD_INT 5
40567: PUSH
40568: LD_INT 9
40570: PUSH
40571: LD_INT 10
40573: PUSH
40574: LD_INT 6
40576: PUSH
40577: LD_INT 7
40579: PUSH
40580: LD_INT 11
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 27
40594: PUSH
40595: LD_INT 28
40597: PUSH
40598: LD_INT 26
40600: PUSH
40601: LD_INT 30
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 43
40612: PUSH
40613: LD_INT 44
40615: PUSH
40616: LD_INT 46
40618: PUSH
40619: LD_INT 45
40621: PUSH
40622: LD_INT 47
40624: PUSH
40625: LD_INT 49
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: PUSH
40641: LD_VAR 0 12
40645: ARRAY
40646: ST_TO_ADDR
// list := list isect fac_list ;
40647: LD_ADDR_VAR 0 5
40651: PUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_VAR 0 17
40661: ISECT
40662: ST_TO_ADDR
// if not list then
40663: LD_VAR 0 5
40667: NOT
40668: IFFALSE 40672
// exit ;
40670: GO 41476
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40672: LD_VAR 0 12
40676: PUSH
40677: LD_INT 3
40679: EQUAL
40680: PUSH
40681: LD_INT 49
40683: PUSH
40684: LD_VAR 0 5
40688: IN
40689: AND
40690: PUSH
40691: LD_INT 31
40693: PPUSH
40694: LD_VAR 0 16
40698: PPUSH
40699: CALL_OW 321
40703: PUSH
40704: LD_INT 2
40706: EQUAL
40707: AND
40708: IFFALSE 40768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40710: LD_INT 22
40712: PUSH
40713: LD_VAR 0 16
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 35
40724: PUSH
40725: LD_INT 49
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 91
40734: PUSH
40735: LD_VAR 0 1
40739: PUSH
40740: LD_INT 10
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: PPUSH
40753: CALL_OW 69
40757: NOT
40758: IFFALSE 40768
// weapon := ru_time_lapser ;
40760: LD_ADDR_VAR 0 18
40764: PUSH
40765: LD_INT 49
40767: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40768: LD_VAR 0 12
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: IN
40783: PUSH
40784: LD_INT 11
40786: PUSH
40787: LD_VAR 0 5
40791: IN
40792: PUSH
40793: LD_INT 30
40795: PUSH
40796: LD_VAR 0 5
40800: IN
40801: OR
40802: AND
40803: PUSH
40804: LD_INT 6
40806: PPUSH
40807: LD_VAR 0 16
40811: PPUSH
40812: CALL_OW 321
40816: PUSH
40817: LD_INT 2
40819: EQUAL
40820: AND
40821: IFFALSE 40986
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40823: LD_INT 22
40825: PUSH
40826: LD_VAR 0 16
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 35
40840: PUSH
40841: LD_INT 11
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 35
40850: PUSH
40851: LD_INT 30
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 91
40865: PUSH
40866: LD_VAR 0 1
40870: PUSH
40871: LD_INT 18
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: PPUSH
40884: CALL_OW 69
40888: NOT
40889: PUSH
40890: LD_INT 22
40892: PUSH
40893: LD_VAR 0 16
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 30
40907: PUSH
40908: LD_INT 32
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 30
40917: PUSH
40918: LD_INT 33
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 91
40932: PUSH
40933: LD_VAR 0 1
40937: PUSH
40938: LD_INT 12
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: PPUSH
40954: CALL_OW 69
40958: PUSH
40959: LD_INT 2
40961: GREATER
40962: AND
40963: IFFALSE 40986
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40965: LD_ADDR_VAR 0 18
40969: PUSH
40970: LD_INT 11
40972: PUSH
40973: LD_INT 30
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_VAR 0 12
40984: ARRAY
40985: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40986: LD_VAR 0 18
40990: NOT
40991: PUSH
40992: LD_INT 40
40994: PPUSH
40995: LD_VAR 0 16
40999: PPUSH
41000: CALL_OW 321
41004: PUSH
41005: LD_INT 2
41007: EQUAL
41008: AND
41009: PUSH
41010: LD_INT 7
41012: PUSH
41013: LD_VAR 0 5
41017: IN
41018: PUSH
41019: LD_INT 28
41021: PUSH
41022: LD_VAR 0 5
41026: IN
41027: OR
41028: PUSH
41029: LD_INT 45
41031: PUSH
41032: LD_VAR 0 5
41036: IN
41037: OR
41038: AND
41039: IFFALSE 41293
// begin hex := GetHexInfo ( x , y ) ;
41041: LD_ADDR_VAR 0 4
41045: PUSH
41046: LD_VAR 0 10
41050: PPUSH
41051: LD_VAR 0 11
41055: PPUSH
41056: CALL_OW 546
41060: ST_TO_ADDR
// if hex [ 1 ] then
41061: LD_VAR 0 4
41065: PUSH
41066: LD_INT 1
41068: ARRAY
41069: IFFALSE 41073
// exit ;
41071: GO 41476
// height := hex [ 2 ] ;
41073: LD_ADDR_VAR 0 15
41077: PUSH
41078: LD_VAR 0 4
41082: PUSH
41083: LD_INT 2
41085: ARRAY
41086: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41087: LD_ADDR_VAR 0 14
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: LD_INT 5
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: ST_TO_ADDR
// for i in tmp do
41110: LD_ADDR_VAR 0 8
41114: PUSH
41115: LD_VAR 0 14
41119: PUSH
41120: FOR_IN
41121: IFFALSE 41291
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_VAR 0 10
41132: PPUSH
41133: LD_VAR 0 8
41137: PPUSH
41138: LD_INT 5
41140: PPUSH
41141: CALL_OW 272
41145: PUSH
41146: LD_VAR 0 11
41150: PPUSH
41151: LD_VAR 0 8
41155: PPUSH
41156: LD_INT 5
41158: PPUSH
41159: CALL_OW 273
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41168: LD_VAR 0 9
41172: PUSH
41173: LD_INT 1
41175: ARRAY
41176: PPUSH
41177: LD_VAR 0 9
41181: PUSH
41182: LD_INT 2
41184: ARRAY
41185: PPUSH
41186: CALL_OW 488
41190: IFFALSE 41289
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41192: LD_ADDR_VAR 0 4
41196: PUSH
41197: LD_VAR 0 9
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: PPUSH
41206: LD_VAR 0 9
41210: PUSH
41211: LD_INT 2
41213: ARRAY
41214: PPUSH
41215: CALL_OW 546
41219: ST_TO_ADDR
// if hex [ 1 ] then
41220: LD_VAR 0 4
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: IFFALSE 41232
// continue ;
41230: GO 41120
// h := hex [ 2 ] ;
41232: LD_ADDR_VAR 0 13
41236: PUSH
41237: LD_VAR 0 4
41241: PUSH
41242: LD_INT 2
41244: ARRAY
41245: ST_TO_ADDR
// if h + 7 < height then
41246: LD_VAR 0 13
41250: PUSH
41251: LD_INT 7
41253: PLUS
41254: PUSH
41255: LD_VAR 0 15
41259: LESS
41260: IFFALSE 41289
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41262: LD_ADDR_VAR 0 18
41266: PUSH
41267: LD_INT 7
41269: PUSH
41270: LD_INT 28
41272: PUSH
41273: LD_INT 45
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: PUSH
41281: LD_VAR 0 12
41285: ARRAY
41286: ST_TO_ADDR
// break ;
41287: GO 41291
// end ; end ; end ;
41289: GO 41120
41291: POP
41292: POP
// end ; if not weapon then
41293: LD_VAR 0 18
41297: NOT
41298: IFFALSE 41358
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41300: LD_ADDR_VAR 0 5
41304: PUSH
41305: LD_VAR 0 5
41309: PUSH
41310: LD_INT 11
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: LD_INT 49
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: DIFF
41324: ST_TO_ADDR
// if not list then
41325: LD_VAR 0 5
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 41476
// weapon := list [ rand ( 1 , list ) ] ;
41334: LD_ADDR_VAR 0 18
41338: PUSH
41339: LD_VAR 0 5
41343: PUSH
41344: LD_INT 1
41346: PPUSH
41347: LD_VAR 0 5
41351: PPUSH
41352: CALL_OW 12
41356: ARRAY
41357: ST_TO_ADDR
// end ; if weapon then
41358: LD_VAR 0 18
41362: IFFALSE 41476
// begin tmp := CostOfWeapon ( weapon ) ;
41364: LD_ADDR_VAR 0 14
41368: PUSH
41369: LD_VAR 0 18
41373: PPUSH
41374: CALL_OW 451
41378: ST_TO_ADDR
// j := GetBase ( tower ) ;
41379: LD_ADDR_VAR 0 9
41383: PUSH
41384: LD_VAR 0 1
41388: PPUSH
41389: CALL_OW 274
41393: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41394: LD_VAR 0 9
41398: PPUSH
41399: LD_INT 1
41401: PPUSH
41402: CALL_OW 275
41406: PUSH
41407: LD_VAR 0 14
41411: PUSH
41412: LD_INT 1
41414: ARRAY
41415: GREATEREQUAL
41416: PUSH
41417: LD_VAR 0 9
41421: PPUSH
41422: LD_INT 2
41424: PPUSH
41425: CALL_OW 275
41429: PUSH
41430: LD_VAR 0 14
41434: PUSH
41435: LD_INT 2
41437: ARRAY
41438: GREATEREQUAL
41439: AND
41440: PUSH
41441: LD_VAR 0 9
41445: PPUSH
41446: LD_INT 3
41448: PPUSH
41449: CALL_OW 275
41453: PUSH
41454: LD_VAR 0 14
41458: PUSH
41459: LD_INT 3
41461: ARRAY
41462: GREATEREQUAL
41463: AND
41464: IFFALSE 41476
// result := weapon ;
41466: LD_ADDR_VAR 0 3
41470: PUSH
41471: LD_VAR 0 18
41475: ST_TO_ADDR
// end ; end ;
41476: LD_VAR 0 3
41480: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// result := true ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_INT 1
41492: ST_TO_ADDR
// if array1 = array2 then
41493: LD_VAR 0 1
41497: PUSH
41498: LD_VAR 0 2
41502: EQUAL
41503: IFFALSE 41563
// begin for i = 1 to array1 do
41505: LD_ADDR_VAR 0 4
41509: PUSH
41510: DOUBLE
41511: LD_INT 1
41513: DEC
41514: ST_TO_ADDR
41515: LD_VAR 0 1
41519: PUSH
41520: FOR_TO
41521: IFFALSE 41559
// if array1 [ i ] <> array2 [ i ] then
41523: LD_VAR 0 1
41527: PUSH
41528: LD_VAR 0 4
41532: ARRAY
41533: PUSH
41534: LD_VAR 0 2
41538: PUSH
41539: LD_VAR 0 4
41543: ARRAY
41544: NONEQUAL
41545: IFFALSE 41557
// begin result := false ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_INT 0
41554: ST_TO_ADDR
// break ;
41555: GO 41559
// end ;
41557: GO 41520
41559: POP
41560: POP
// end else
41561: GO 41571
// result := false ;
41563: LD_ADDR_VAR 0 3
41567: PUSH
41568: LD_INT 0
41570: ST_TO_ADDR
// end ;
41571: LD_VAR 0 3
41575: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41576: LD_INT 0
41578: PPUSH
41579: PPUSH
// if not array1 or not array2 then
41580: LD_VAR 0 1
41584: NOT
41585: PUSH
41586: LD_VAR 0 2
41590: NOT
41591: OR
41592: IFFALSE 41596
// exit ;
41594: GO 41660
// result := true ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_INT 1
41603: ST_TO_ADDR
// for i = 1 to array1 do
41604: LD_ADDR_VAR 0 4
41608: PUSH
41609: DOUBLE
41610: LD_INT 1
41612: DEC
41613: ST_TO_ADDR
41614: LD_VAR 0 1
41618: PUSH
41619: FOR_TO
41620: IFFALSE 41658
// if array1 [ i ] <> array2 [ i ] then
41622: LD_VAR 0 1
41626: PUSH
41627: LD_VAR 0 4
41631: ARRAY
41632: PUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_VAR 0 4
41642: ARRAY
41643: NONEQUAL
41644: IFFALSE 41656
// begin result := false ;
41646: LD_ADDR_VAR 0 3
41650: PUSH
41651: LD_INT 0
41653: ST_TO_ADDR
// break ;
41654: GO 41658
// end ;
41656: GO 41619
41658: POP
41659: POP
// end ;
41660: LD_VAR 0 3
41664: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41665: LD_INT 0
41667: PPUSH
41668: PPUSH
41669: PPUSH
// pom := GetBase ( fac ) ;
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 274
41684: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41685: LD_ADDR_VAR 0 4
41689: PUSH
41690: LD_VAR 0 2
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: PPUSH
41699: LD_VAR 0 2
41703: PUSH
41704: LD_INT 2
41706: ARRAY
41707: PPUSH
41708: LD_VAR 0 2
41712: PUSH
41713: LD_INT 3
41715: ARRAY
41716: PPUSH
41717: LD_VAR 0 2
41721: PUSH
41722: LD_INT 4
41724: ARRAY
41725: PPUSH
41726: CALL_OW 449
41730: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41731: LD_ADDR_VAR 0 3
41735: PUSH
41736: LD_VAR 0 5
41740: PPUSH
41741: LD_INT 1
41743: PPUSH
41744: CALL_OW 275
41748: PUSH
41749: LD_VAR 0 4
41753: PUSH
41754: LD_INT 1
41756: ARRAY
41757: GREATEREQUAL
41758: PUSH
41759: LD_VAR 0 5
41763: PPUSH
41764: LD_INT 2
41766: PPUSH
41767: CALL_OW 275
41771: PUSH
41772: LD_VAR 0 4
41776: PUSH
41777: LD_INT 2
41779: ARRAY
41780: GREATEREQUAL
41781: AND
41782: PUSH
41783: LD_VAR 0 5
41787: PPUSH
41788: LD_INT 3
41790: PPUSH
41791: CALL_OW 275
41795: PUSH
41796: LD_VAR 0 4
41800: PUSH
41801: LD_INT 3
41803: ARRAY
41804: GREATEREQUAL
41805: AND
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 3
41811: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41812: LD_INT 0
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
// pom := GetBase ( building ) ;
41818: LD_ADDR_VAR 0 3
41822: PUSH
41823: LD_VAR 0 1
41827: PPUSH
41828: CALL_OW 274
41832: ST_TO_ADDR
// if not pom then
41833: LD_VAR 0 3
41837: NOT
41838: IFFALSE 41842
// exit ;
41840: GO 42012
// btype := GetBType ( building ) ;
41842: LD_ADDR_VAR 0 5
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 266
41856: ST_TO_ADDR
// if btype = b_armoury then
41857: LD_VAR 0 5
41861: PUSH
41862: LD_INT 4
41864: EQUAL
41865: IFFALSE 41875
// btype := b_barracks ;
41867: LD_ADDR_VAR 0 5
41871: PUSH
41872: LD_INT 5
41874: ST_TO_ADDR
// if btype = b_depot then
41875: LD_VAR 0 5
41879: PUSH
41880: LD_INT 0
41882: EQUAL
41883: IFFALSE 41893
// btype := b_warehouse ;
41885: LD_ADDR_VAR 0 5
41889: PUSH
41890: LD_INT 1
41892: ST_TO_ADDR
// if btype = b_workshop then
41893: LD_VAR 0 5
41897: PUSH
41898: LD_INT 2
41900: EQUAL
41901: IFFALSE 41911
// btype := b_factory ;
41903: LD_ADDR_VAR 0 5
41907: PUSH
41908: LD_INT 3
41910: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41911: LD_ADDR_VAR 0 4
41915: PUSH
41916: LD_VAR 0 5
41920: PPUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 248
41930: PPUSH
41931: CALL_OW 450
41935: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41936: LD_ADDR_VAR 0 2
41940: PUSH
41941: LD_VAR 0 3
41945: PPUSH
41946: LD_INT 1
41948: PPUSH
41949: CALL_OW 275
41953: PUSH
41954: LD_VAR 0 4
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: GREATEREQUAL
41963: PUSH
41964: LD_VAR 0 3
41968: PPUSH
41969: LD_INT 2
41971: PPUSH
41972: CALL_OW 275
41976: PUSH
41977: LD_VAR 0 4
41981: PUSH
41982: LD_INT 2
41984: ARRAY
41985: GREATEREQUAL
41986: AND
41987: PUSH
41988: LD_VAR 0 3
41992: PPUSH
41993: LD_INT 3
41995: PPUSH
41996: CALL_OW 275
42000: PUSH
42001: LD_VAR 0 4
42005: PUSH
42006: LD_INT 3
42008: ARRAY
42009: GREATEREQUAL
42010: AND
42011: ST_TO_ADDR
// end ;
42012: LD_VAR 0 2
42016: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42017: LD_INT 0
42019: PPUSH
42020: PPUSH
42021: PPUSH
// pom := GetBase ( building ) ;
42022: LD_ADDR_VAR 0 4
42026: PUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: CALL_OW 274
42036: ST_TO_ADDR
// if not pom then
42037: LD_VAR 0 4
42041: NOT
42042: IFFALSE 42046
// exit ;
42044: GO 42147
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42046: LD_ADDR_VAR 0 5
42050: PUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: LD_VAR 0 1
42060: PPUSH
42061: CALL_OW 248
42065: PPUSH
42066: CALL_OW 450
42070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_VAR 0 4
42080: PPUSH
42081: LD_INT 1
42083: PPUSH
42084: CALL_OW 275
42088: PUSH
42089: LD_VAR 0 5
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: GREATEREQUAL
42098: PUSH
42099: LD_VAR 0 4
42103: PPUSH
42104: LD_INT 2
42106: PPUSH
42107: CALL_OW 275
42111: PUSH
42112: LD_VAR 0 5
42116: PUSH
42117: LD_INT 2
42119: ARRAY
42120: GREATEREQUAL
42121: AND
42122: PUSH
42123: LD_VAR 0 4
42127: PPUSH
42128: LD_INT 3
42130: PPUSH
42131: CALL_OW 275
42135: PUSH
42136: LD_VAR 0 5
42140: PUSH
42141: LD_INT 3
42143: ARRAY
42144: GREATEREQUAL
42145: AND
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 3
42151: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
// result := false ;
42165: LD_ADDR_VAR 0 8
42169: PUSH
42170: LD_INT 0
42172: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42173: LD_VAR 0 5
42177: NOT
42178: PUSH
42179: LD_VAR 0 1
42183: NOT
42184: OR
42185: PUSH
42186: LD_VAR 0 2
42190: NOT
42191: OR
42192: PUSH
42193: LD_VAR 0 3
42197: NOT
42198: OR
42199: IFFALSE 42203
// exit ;
42201: GO 43017
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42203: LD_ADDR_VAR 0 14
42207: PUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: LD_VAR 0 2
42217: PPUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_VAR 0 4
42227: PPUSH
42228: LD_VAR 0 5
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: PPUSH
42237: CALL_OW 248
42241: PPUSH
42242: LD_INT 0
42244: PPUSH
42245: CALL 44250 0 6
42249: ST_TO_ADDR
// if not hexes then
42250: LD_VAR 0 14
42254: NOT
42255: IFFALSE 42259
// exit ;
42257: GO 43017
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42259: LD_ADDR_VAR 0 17
42263: PUSH
42264: LD_VAR 0 5
42268: PPUSH
42269: LD_INT 22
42271: PUSH
42272: LD_VAR 0 13
42276: PPUSH
42277: CALL_OW 255
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 30
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 30
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PPUSH
42318: CALL_OW 72
42322: ST_TO_ADDR
// for i = 1 to hexes do
42323: LD_ADDR_VAR 0 9
42327: PUSH
42328: DOUBLE
42329: LD_INT 1
42331: DEC
42332: ST_TO_ADDR
42333: LD_VAR 0 14
42337: PUSH
42338: FOR_TO
42339: IFFALSE 43015
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42341: LD_ADDR_VAR 0 13
42345: PUSH
42346: LD_VAR 0 14
42350: PUSH
42351: LD_VAR 0 9
42355: ARRAY
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_VAR 0 14
42365: PUSH
42366: LD_VAR 0 9
42370: ARRAY
42371: PUSH
42372: LD_INT 2
42374: ARRAY
42375: PPUSH
42376: CALL_OW 428
42380: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42381: LD_VAR 0 14
42385: PUSH
42386: LD_VAR 0 9
42390: ARRAY
42391: PUSH
42392: LD_INT 1
42394: ARRAY
42395: PPUSH
42396: LD_VAR 0 14
42400: PUSH
42401: LD_VAR 0 9
42405: ARRAY
42406: PUSH
42407: LD_INT 2
42409: ARRAY
42410: PPUSH
42411: CALL_OW 351
42415: PUSH
42416: LD_VAR 0 14
42420: PUSH
42421: LD_VAR 0 9
42425: ARRAY
42426: PUSH
42427: LD_INT 1
42429: ARRAY
42430: PPUSH
42431: LD_VAR 0 14
42435: PUSH
42436: LD_VAR 0 9
42440: ARRAY
42441: PUSH
42442: LD_INT 2
42444: ARRAY
42445: PPUSH
42446: CALL_OW 488
42450: NOT
42451: OR
42452: PUSH
42453: LD_VAR 0 13
42457: PPUSH
42458: CALL_OW 247
42462: PUSH
42463: LD_INT 3
42465: EQUAL
42466: OR
42467: IFFALSE 42473
// exit ;
42469: POP
42470: POP
42471: GO 43017
// if not tmp then
42473: LD_VAR 0 13
42477: NOT
42478: IFFALSE 42482
// continue ;
42480: GO 42338
// result := true ;
42482: LD_ADDR_VAR 0 8
42486: PUSH
42487: LD_INT 1
42489: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42490: LD_VAR 0 6
42494: PUSH
42495: LD_VAR 0 13
42499: PPUSH
42500: CALL_OW 247
42504: PUSH
42505: LD_INT 2
42507: EQUAL
42508: AND
42509: PUSH
42510: LD_VAR 0 13
42514: PPUSH
42515: CALL_OW 263
42519: PUSH
42520: LD_INT 1
42522: EQUAL
42523: AND
42524: IFFALSE 42688
// begin if IsDrivenBy ( tmp ) then
42526: LD_VAR 0 13
42530: PPUSH
42531: CALL_OW 311
42535: IFFALSE 42539
// continue ;
42537: GO 42338
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42539: LD_VAR 0 6
42543: PPUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 60
42549: PUSH
42550: EMPTY
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 55
42562: PUSH
42563: EMPTY
42564: LIST
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PPUSH
42574: CALL_OW 72
42578: IFFALSE 42686
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42580: LD_ADDR_VAR 0 18
42584: PUSH
42585: LD_VAR 0 6
42589: PPUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 60
42595: PUSH
42596: EMPTY
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: LD_INT 55
42608: PUSH
42609: EMPTY
42610: LIST
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PPUSH
42620: CALL_OW 72
42624: PUSH
42625: LD_INT 1
42627: ARRAY
42628: ST_TO_ADDR
// if IsInUnit ( driver ) then
42629: LD_VAR 0 18
42633: PPUSH
42634: CALL_OW 310
42638: IFFALSE 42649
// ComExit ( driver ) ;
42640: LD_VAR 0 18
42644: PPUSH
42645: CALL 68011 0 1
// AddComEnterUnit ( driver , tmp ) ;
42649: LD_VAR 0 18
42653: PPUSH
42654: LD_VAR 0 13
42658: PPUSH
42659: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42663: LD_VAR 0 18
42667: PPUSH
42668: LD_VAR 0 7
42672: PPUSH
42673: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42677: LD_VAR 0 18
42681: PPUSH
42682: CALL_OW 181
// end ; continue ;
42686: GO 42338
// end ; if not cleaners or not tmp in cleaners then
42688: LD_VAR 0 6
42692: NOT
42693: PUSH
42694: LD_VAR 0 13
42698: PUSH
42699: LD_VAR 0 6
42703: IN
42704: NOT
42705: OR
42706: IFFALSE 43013
// begin if dep then
42708: LD_VAR 0 17
42712: IFFALSE 42848
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42714: LD_ADDR_VAR 0 16
42718: PUSH
42719: LD_VAR 0 17
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PPUSH
42728: CALL_OW 250
42732: PPUSH
42733: LD_VAR 0 17
42737: PUSH
42738: LD_INT 1
42740: ARRAY
42741: PPUSH
42742: CALL_OW 254
42746: PPUSH
42747: LD_INT 5
42749: PPUSH
42750: CALL_OW 272
42754: PUSH
42755: LD_VAR 0 17
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: PPUSH
42764: CALL_OW 251
42768: PPUSH
42769: LD_VAR 0 17
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: PPUSH
42778: CALL_OW 254
42782: PPUSH
42783: LD_INT 5
42785: PPUSH
42786: CALL_OW 273
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42795: LD_VAR 0 16
42799: PUSH
42800: LD_INT 1
42802: ARRAY
42803: PPUSH
42804: LD_VAR 0 16
42808: PUSH
42809: LD_INT 2
42811: ARRAY
42812: PPUSH
42813: CALL_OW 488
42817: IFFALSE 42848
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42819: LD_VAR 0 13
42823: PPUSH
42824: LD_VAR 0 16
42828: PUSH
42829: LD_INT 1
42831: ARRAY
42832: PPUSH
42833: LD_VAR 0 16
42837: PUSH
42838: LD_INT 2
42840: ARRAY
42841: PPUSH
42842: CALL_OW 111
// continue ;
42846: GO 42338
// end ; end ; r := GetDir ( tmp ) ;
42848: LD_ADDR_VAR 0 15
42852: PUSH
42853: LD_VAR 0 13
42857: PPUSH
42858: CALL_OW 254
42862: ST_TO_ADDR
// if r = 5 then
42863: LD_VAR 0 15
42867: PUSH
42868: LD_INT 5
42870: EQUAL
42871: IFFALSE 42881
// r := 0 ;
42873: LD_ADDR_VAR 0 15
42877: PUSH
42878: LD_INT 0
42880: ST_TO_ADDR
// for j = r to 5 do
42881: LD_ADDR_VAR 0 10
42885: PUSH
42886: DOUBLE
42887: LD_VAR 0 15
42891: DEC
42892: ST_TO_ADDR
42893: LD_INT 5
42895: PUSH
42896: FOR_TO
42897: IFFALSE 43011
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42899: LD_ADDR_VAR 0 11
42903: PUSH
42904: LD_VAR 0 13
42908: PPUSH
42909: CALL_OW 250
42913: PPUSH
42914: LD_VAR 0 10
42918: PPUSH
42919: LD_INT 2
42921: PPUSH
42922: CALL_OW 272
42926: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42927: LD_ADDR_VAR 0 12
42931: PUSH
42932: LD_VAR 0 13
42936: PPUSH
42937: CALL_OW 251
42941: PPUSH
42942: LD_VAR 0 10
42946: PPUSH
42947: LD_INT 2
42949: PPUSH
42950: CALL_OW 273
42954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42955: LD_VAR 0 11
42959: PPUSH
42960: LD_VAR 0 12
42964: PPUSH
42965: CALL_OW 488
42969: PUSH
42970: LD_VAR 0 11
42974: PPUSH
42975: LD_VAR 0 12
42979: PPUSH
42980: CALL_OW 428
42984: NOT
42985: AND
42986: IFFALSE 43009
// begin ComMoveXY ( tmp , _x , _y ) ;
42988: LD_VAR 0 13
42992: PPUSH
42993: LD_VAR 0 11
42997: PPUSH
42998: LD_VAR 0 12
43002: PPUSH
43003: CALL_OW 111
// break ;
43007: GO 43011
// end ; end ;
43009: GO 42896
43011: POP
43012: POP
// end ; end ;
43013: GO 42338
43015: POP
43016: POP
// end ;
43017: LD_VAR 0 8
43021: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43022: LD_INT 0
43024: PPUSH
// result := true ;
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 1
43032: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43033: LD_VAR 0 2
43037: PUSH
43038: LD_INT 24
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43052
43044: LD_INT 33
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43052
43050: GO 43077
43052: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43053: LD_ADDR_VAR 0 3
43057: PUSH
43058: LD_INT 32
43060: PPUSH
43061: LD_VAR 0 1
43065: PPUSH
43066: CALL_OW 321
43070: PUSH
43071: LD_INT 2
43073: EQUAL
43074: ST_TO_ADDR
43075: GO 43393
43077: LD_INT 20
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43110
43085: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 6
43093: PPUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 321
43103: PUSH
43104: LD_INT 2
43106: EQUAL
43107: ST_TO_ADDR
43108: GO 43393
43110: LD_INT 22
43112: DOUBLE
43113: EQUAL
43114: IFTRUE 43124
43116: LD_INT 36
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43149
43124: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 15
43132: PPUSH
43133: LD_VAR 0 1
43137: PPUSH
43138: CALL_OW 321
43142: PUSH
43143: LD_INT 2
43145: EQUAL
43146: ST_TO_ADDR
43147: GO 43393
43149: LD_INT 30
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43157
43155: GO 43182
43157: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_INT 20
43165: PPUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: CALL_OW 321
43175: PUSH
43176: LD_INT 2
43178: EQUAL
43179: ST_TO_ADDR
43180: GO 43393
43182: LD_INT 28
43184: DOUBLE
43185: EQUAL
43186: IFTRUE 43196
43188: LD_INT 21
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43221
43196: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: LD_INT 21
43204: PPUSH
43205: LD_VAR 0 1
43209: PPUSH
43210: CALL_OW 321
43214: PUSH
43215: LD_INT 2
43217: EQUAL
43218: ST_TO_ADDR
43219: GO 43393
43221: LD_INT 16
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43254
43229: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: LD_INT 84
43237: PPUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 321
43247: PUSH
43248: LD_INT 2
43250: EQUAL
43251: ST_TO_ADDR
43252: GO 43393
43254: LD_INT 19
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43268
43260: LD_INT 23
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43293
43268: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_INT 83
43276: PPUSH
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 321
43286: PUSH
43287: LD_INT 2
43289: EQUAL
43290: ST_TO_ADDR
43291: GO 43393
43293: LD_INT 17
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43301
43299: GO 43326
43301: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_INT 39
43309: PPUSH
43310: LD_VAR 0 1
43314: PPUSH
43315: CALL_OW 321
43319: PUSH
43320: LD_INT 2
43322: EQUAL
43323: ST_TO_ADDR
43324: GO 43393
43326: LD_INT 18
43328: DOUBLE
43329: EQUAL
43330: IFTRUE 43334
43332: GO 43359
43334: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43335: LD_ADDR_VAR 0 3
43339: PUSH
43340: LD_INT 40
43342: PPUSH
43343: LD_VAR 0 1
43347: PPUSH
43348: CALL_OW 321
43352: PUSH
43353: LD_INT 2
43355: EQUAL
43356: ST_TO_ADDR
43357: GO 43393
43359: LD_INT 27
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43392
43367: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 35
43375: PPUSH
43376: LD_VAR 0 1
43380: PPUSH
43381: CALL_OW 321
43385: PUSH
43386: LD_INT 2
43388: EQUAL
43389: ST_TO_ADDR
43390: GO 43393
43392: POP
// end ;
43393: LD_VAR 0 3
43397: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43398: LD_INT 0
43400: PPUSH
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
// result := false ;
43411: LD_ADDR_VAR 0 6
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43419: LD_VAR 0 1
43423: NOT
43424: PUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 266
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: IN
43445: NOT
43446: OR
43447: PUSH
43448: LD_VAR 0 2
43452: NOT
43453: OR
43454: PUSH
43455: LD_VAR 0 5
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: IN
43486: NOT
43487: OR
43488: PUSH
43489: LD_VAR 0 3
43493: PPUSH
43494: LD_VAR 0 4
43498: PPUSH
43499: CALL_OW 488
43503: NOT
43504: OR
43505: IFFALSE 43509
// exit ;
43507: GO 44245
// side := GetSide ( depot ) ;
43509: LD_ADDR_VAR 0 9
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 255
43523: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43524: LD_VAR 0 9
43528: PPUSH
43529: LD_VAR 0 2
43533: PPUSH
43534: CALL 43022 0 2
43538: NOT
43539: IFFALSE 43543
// exit ;
43541: GO 44245
// pom := GetBase ( depot ) ;
43543: LD_ADDR_VAR 0 10
43547: PUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 274
43557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43558: LD_ADDR_VAR 0 11
43562: PUSH
43563: LD_VAR 0 2
43567: PPUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 248
43577: PPUSH
43578: CALL_OW 450
43582: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43583: LD_VAR 0 10
43587: PPUSH
43588: LD_INT 1
43590: PPUSH
43591: CALL_OW 275
43595: PUSH
43596: LD_VAR 0 11
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: GREATEREQUAL
43605: PUSH
43606: LD_VAR 0 10
43610: PPUSH
43611: LD_INT 2
43613: PPUSH
43614: CALL_OW 275
43618: PUSH
43619: LD_VAR 0 11
43623: PUSH
43624: LD_INT 2
43626: ARRAY
43627: GREATEREQUAL
43628: AND
43629: PUSH
43630: LD_VAR 0 10
43634: PPUSH
43635: LD_INT 3
43637: PPUSH
43638: CALL_OW 275
43642: PUSH
43643: LD_VAR 0 11
43647: PUSH
43648: LD_INT 3
43650: ARRAY
43651: GREATEREQUAL
43652: AND
43653: NOT
43654: IFFALSE 43658
// exit ;
43656: GO 44245
// if GetBType ( depot ) = b_depot then
43658: LD_VAR 0 1
43662: PPUSH
43663: CALL_OW 266
43667: PUSH
43668: LD_INT 0
43670: EQUAL
43671: IFFALSE 43683
// dist := 28 else
43673: LD_ADDR_VAR 0 14
43677: PUSH
43678: LD_INT 28
43680: ST_TO_ADDR
43681: GO 43691
// dist := 36 ;
43683: LD_ADDR_VAR 0 14
43687: PUSH
43688: LD_INT 36
43690: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43691: LD_VAR 0 1
43695: PPUSH
43696: LD_VAR 0 3
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: CALL_OW 297
43710: PUSH
43711: LD_VAR 0 14
43715: GREATER
43716: IFFALSE 43720
// exit ;
43718: GO 44245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43720: LD_ADDR_VAR 0 12
43724: PUSH
43725: LD_VAR 0 2
43729: PPUSH
43730: LD_VAR 0 3
43734: PPUSH
43735: LD_VAR 0 4
43739: PPUSH
43740: LD_VAR 0 5
43744: PPUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 248
43754: PPUSH
43755: LD_INT 0
43757: PPUSH
43758: CALL 44250 0 6
43762: ST_TO_ADDR
// if not hexes then
43763: LD_VAR 0 12
43767: NOT
43768: IFFALSE 43772
// exit ;
43770: GO 44245
// hex := GetHexInfo ( x , y ) ;
43772: LD_ADDR_VAR 0 15
43776: PUSH
43777: LD_VAR 0 3
43781: PPUSH
43782: LD_VAR 0 4
43786: PPUSH
43787: CALL_OW 546
43791: ST_TO_ADDR
// if hex [ 1 ] then
43792: LD_VAR 0 15
43796: PUSH
43797: LD_INT 1
43799: ARRAY
43800: IFFALSE 43804
// exit ;
43802: GO 44245
// height := hex [ 2 ] ;
43804: LD_ADDR_VAR 0 13
43808: PUSH
43809: LD_VAR 0 15
43813: PUSH
43814: LD_INT 2
43816: ARRAY
43817: ST_TO_ADDR
// for i = 1 to hexes do
43818: LD_ADDR_VAR 0 7
43822: PUSH
43823: DOUBLE
43824: LD_INT 1
43826: DEC
43827: ST_TO_ADDR
43828: LD_VAR 0 12
43832: PUSH
43833: FOR_TO
43834: IFFALSE 44164
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43836: LD_VAR 0 12
43840: PUSH
43841: LD_VAR 0 7
43845: ARRAY
43846: PUSH
43847: LD_INT 1
43849: ARRAY
43850: PPUSH
43851: LD_VAR 0 12
43855: PUSH
43856: LD_VAR 0 7
43860: ARRAY
43861: PUSH
43862: LD_INT 2
43864: ARRAY
43865: PPUSH
43866: CALL_OW 488
43870: NOT
43871: PUSH
43872: LD_VAR 0 12
43876: PUSH
43877: LD_VAR 0 7
43881: ARRAY
43882: PUSH
43883: LD_INT 1
43885: ARRAY
43886: PPUSH
43887: LD_VAR 0 12
43891: PUSH
43892: LD_VAR 0 7
43896: ARRAY
43897: PUSH
43898: LD_INT 2
43900: ARRAY
43901: PPUSH
43902: CALL_OW 428
43906: PUSH
43907: LD_INT 0
43909: GREATER
43910: OR
43911: PUSH
43912: LD_VAR 0 12
43916: PUSH
43917: LD_VAR 0 7
43921: ARRAY
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: PPUSH
43927: LD_VAR 0 12
43931: PUSH
43932: LD_VAR 0 7
43936: ARRAY
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: PPUSH
43942: CALL_OW 351
43946: OR
43947: IFFALSE 43953
// exit ;
43949: POP
43950: POP
43951: GO 44245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43953: LD_ADDR_VAR 0 8
43957: PUSH
43958: LD_VAR 0 12
43962: PUSH
43963: LD_VAR 0 7
43967: ARRAY
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: PPUSH
43973: LD_VAR 0 12
43977: PUSH
43978: LD_VAR 0 7
43982: ARRAY
43983: PUSH
43984: LD_INT 2
43986: ARRAY
43987: PPUSH
43988: CALL_OW 546
43992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43993: LD_VAR 0 8
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: PUSH
44002: LD_VAR 0 8
44006: PUSH
44007: LD_INT 2
44009: ARRAY
44010: PUSH
44011: LD_VAR 0 13
44015: PUSH
44016: LD_INT 2
44018: PLUS
44019: GREATER
44020: OR
44021: PUSH
44022: LD_VAR 0 8
44026: PUSH
44027: LD_INT 2
44029: ARRAY
44030: PUSH
44031: LD_VAR 0 13
44035: PUSH
44036: LD_INT 2
44038: MINUS
44039: LESS
44040: OR
44041: PUSH
44042: LD_VAR 0 8
44046: PUSH
44047: LD_INT 3
44049: ARRAY
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 8
44056: PUSH
44057: LD_INT 9
44059: PUSH
44060: LD_INT 10
44062: PUSH
44063: LD_INT 11
44065: PUSH
44066: LD_INT 12
44068: PUSH
44069: LD_INT 13
44071: PUSH
44072: LD_INT 16
44074: PUSH
44075: LD_INT 17
44077: PUSH
44078: LD_INT 18
44080: PUSH
44081: LD_INT 19
44083: PUSH
44084: LD_INT 20
44086: PUSH
44087: LD_INT 21
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: IN
44105: NOT
44106: OR
44107: PUSH
44108: LD_VAR 0 8
44112: PUSH
44113: LD_INT 5
44115: ARRAY
44116: NOT
44117: OR
44118: PUSH
44119: LD_VAR 0 8
44123: PUSH
44124: LD_INT 6
44126: ARRAY
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 7
44136: PUSH
44137: LD_INT 9
44139: PUSH
44140: LD_INT 10
44142: PUSH
44143: LD_INT 11
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: IN
44154: NOT
44155: OR
44156: IFFALSE 44162
// exit ;
44158: POP
44159: POP
44160: GO 44245
// end ;
44162: GO 43833
44164: POP
44165: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44166: LD_VAR 0 9
44170: PPUSH
44171: LD_VAR 0 3
44175: PPUSH
44176: LD_VAR 0 4
44180: PPUSH
44181: LD_INT 20
44183: PPUSH
44184: CALL 36197 0 4
44188: PUSH
44189: LD_INT 4
44191: ARRAY
44192: IFFALSE 44196
// exit ;
44194: GO 44245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44196: LD_VAR 0 2
44200: PUSH
44201: LD_INT 29
44203: PUSH
44204: LD_INT 30
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: IN
44211: PUSH
44212: LD_VAR 0 3
44216: PPUSH
44217: LD_VAR 0 4
44221: PPUSH
44222: LD_VAR 0 9
44226: PPUSH
44227: CALL_OW 440
44231: NOT
44232: AND
44233: IFFALSE 44237
// exit ;
44235: GO 44245
// result := true ;
44237: LD_ADDR_VAR 0 6
44241: PUSH
44242: LD_INT 1
44244: ST_TO_ADDR
// end ;
44245: LD_VAR 0 6
44249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44250: LD_INT 0
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
44309: PPUSH
// result = [ ] ;
44310: LD_ADDR_VAR 0 7
44314: PUSH
44315: EMPTY
44316: ST_TO_ADDR
// temp_list = [ ] ;
44317: LD_ADDR_VAR 0 9
44321: PUSH
44322: EMPTY
44323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44324: LD_VAR 0 4
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: LD_INT 4
44343: PUSH
44344: LD_INT 5
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: IN
44355: NOT
44356: PUSH
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: IN
44372: PUSH
44373: LD_VAR 0 5
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: IN
44392: NOT
44393: AND
44394: OR
44395: IFFALSE 44399
// exit ;
44397: GO 62790
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44399: LD_VAR 0 1
44403: PUSH
44404: LD_INT 6
44406: PUSH
44407: LD_INT 7
44409: PUSH
44410: LD_INT 8
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 12
44418: PUSH
44419: LD_INT 15
44421: PUSH
44422: LD_INT 11
44424: PUSH
44425: LD_INT 14
44427: PUSH
44428: LD_INT 10
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: IN
44442: IFFALSE 44452
// btype = b_lab ;
44444: LD_ADDR_VAR 0 1
44448: PUSH
44449: LD_INT 6
44451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44452: LD_VAR 0 6
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: IN
44471: NOT
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 6
44492: PUSH
44493: LD_INT 36
44495: PUSH
44496: LD_INT 4
44498: PUSH
44499: LD_INT 5
44501: PUSH
44502: LD_INT 31
44504: PUSH
44505: LD_INT 32
44507: PUSH
44508: LD_INT 33
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: IN
44524: NOT
44525: PUSH
44526: LD_VAR 0 6
44530: PUSH
44531: LD_INT 1
44533: EQUAL
44534: AND
44535: OR
44536: PUSH
44537: LD_VAR 0 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: IN
44552: NOT
44553: PUSH
44554: LD_VAR 0 6
44558: PUSH
44559: LD_INT 2
44561: EQUAL
44562: AND
44563: OR
44564: IFFALSE 44574
// mode = 0 ;
44566: LD_ADDR_VAR 0 6
44570: PUSH
44571: LD_INT 0
44573: ST_TO_ADDR
// case mode of 0 :
44574: LD_VAR 0 6
44578: PUSH
44579: LD_INT 0
44581: DOUBLE
44582: EQUAL
44583: IFTRUE 44587
44585: GO 56040
44587: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44588: LD_ADDR_VAR 0 11
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 3
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44781: LD_ADDR_VAR 0 12
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44977: LD_ADDR_VAR 0 13
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45176: LD_ADDR_VAR 0 14
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 3
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45372: LD_ADDR_VAR 0 15
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45565: LD_ADDR_VAR 0 16
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: LD_INT 3
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45758: LD_ADDR_VAR 0 17
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45988: LD_ADDR_VAR 0 18
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46218: LD_ADDR_VAR 0 19
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 20
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46678: LD_ADDR_VAR 0 21
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46908: LD_ADDR_VAR 0 22
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47138: LD_ADDR_VAR 0 23
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 3
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47418: LD_ADDR_VAR 0 24
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47694: LD_ADDR_VAR 0 25
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47968: LD_ADDR_VAR 0 26
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48244: LD_ADDR_VAR 0 27
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48524: LD_ADDR_VAR 0 28
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 3
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48806: LD_ADDR_VAR 0 29
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 2
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49085: LD_ADDR_VAR 0 30
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49363: LD_ADDR_VAR 0 31
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49641: LD_ADDR_VAR 0 32
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49919: LD_ADDR_VAR 0 33
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50198: LD_ADDR_VAR 0 34
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50478: LD_ADDR_VAR 0 35
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50590: LD_ADDR_VAR 0 36
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50702: LD_ADDR_VAR 0 37
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50814: LD_ADDR_VAR 0 38
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50926: LD_ADDR_VAR 0 39
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51038: LD_ADDR_VAR 0 40
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51150: LD_ADDR_VAR 0 41
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51500: LD_ADDR_VAR 0 42
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51850: LD_ADDR_VAR 0 43
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52198: LD_ADDR_VAR 0 44
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: LD_INT 3
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 3
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52548: LD_ADDR_VAR 0 45
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 3
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52898: LD_ADDR_VAR 0 46
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53246: LD_ADDR_VAR 0 47
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53397: LD_ADDR_VAR 0 48
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53544: LD_ADDR_VAR 0 49
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53688: LD_ADDR_VAR 0 50
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53832: LD_ADDR_VAR 0 51
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53979: LD_ADDR_VAR 0 52
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54130: LD_ADDR_VAR 0 53
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54360: LD_ADDR_VAR 0 54
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54590: LD_ADDR_VAR 0 55
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54820: LD_ADDR_VAR 0 56
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55050: LD_ADDR_VAR 0 57
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55280: LD_ADDR_VAR 0 58
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55510: LD_ADDR_VAR 0 59
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55598: LD_ADDR_VAR 0 60
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55686: LD_ADDR_VAR 0 61
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55774: LD_ADDR_VAR 0 62
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55862: LD_ADDR_VAR 0 63
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55950: LD_ADDR_VAR 0 64
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// end ; 1 :
56038: GO 61935
56040: LD_INT 1
56042: DOUBLE
56043: EQUAL
56044: IFTRUE 56048
56046: GO 58671
56048: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56049: LD_ADDR_VAR 0 11
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56093: LD_ADDR_VAR 0 12
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56134: LD_ADDR_VAR 0 13
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56174: LD_ADDR_VAR 0 14
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56215: LD_ADDR_VAR 0 15
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56259: LD_ADDR_VAR 0 16
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56305: LD_ADDR_VAR 0 17
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 3
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56349: LD_ADDR_VAR 0 18
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56390: LD_ADDR_VAR 0 19
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56430: LD_ADDR_VAR 0 20
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56471: LD_ADDR_VAR 0 21
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56515: LD_ADDR_VAR 0 22
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56561: LD_ADDR_VAR 0 23
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56605: LD_ADDR_VAR 0 24
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 4
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56646: LD_ADDR_VAR 0 25
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 4
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56686: LD_ADDR_VAR 0 26
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56727: LD_ADDR_VAR 0 27
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56771: LD_ADDR_VAR 0 28
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 4
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56817: LD_ADDR_VAR 0 29
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 4
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 5
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 6
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 6
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 5
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56972: LD_ADDR_VAR 0 30
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 4
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 4
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 5
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 6
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 6
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57115: LD_ADDR_VAR 0 31
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 5
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 5
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 4
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 6
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 6
57222: PUSH
57223: LD_INT 6
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 5
57232: PUSH
57233: LD_INT 6
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57254: LD_ADDR_VAR 0 32
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 5
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 5
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 6
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 6
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 5
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57397: LD_ADDR_VAR 0 33
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 5
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 5
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 6
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 6
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57552: LD_ADDR_VAR 0 34
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 4
57619: NEG
57620: PUSH
57621: LD_INT 4
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: LD_INT 5
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 5
57643: NEG
57644: PUSH
57645: LD_INT 4
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 5
57655: NEG
57656: PUSH
57657: LD_INT 5
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 5
57667: NEG
57668: PUSH
57669: LD_INT 6
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 6
57679: NEG
57680: PUSH
57681: LD_INT 5
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 6
57691: NEG
57692: PUSH
57693: LD_INT 6
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57715: LD_ADDR_VAR 0 41
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57759: LD_ADDR_VAR 0 42
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57800: LD_ADDR_VAR 0 43
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57840: LD_ADDR_VAR 0 44
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57881: LD_ADDR_VAR 0 45
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57925: LD_ADDR_VAR 0 46
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57971: LD_ADDR_VAR 0 47
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58004: LD_ADDR_VAR 0 48
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58035: LD_ADDR_VAR 0 49
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58064: LD_ADDR_VAR 0 50
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58093: LD_ADDR_VAR 0 51
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58124: LD_ADDR_VAR 0 52
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58157: LD_ADDR_VAR 0 53
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58201: LD_ADDR_VAR 0 54
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58242: LD_ADDR_VAR 0 55
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58282: LD_ADDR_VAR 0 56
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58323: LD_ADDR_VAR 0 57
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58367: LD_ADDR_VAR 0 58
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58413: LD_ADDR_VAR 0 59
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58457: LD_ADDR_VAR 0 60
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58498: LD_ADDR_VAR 0 61
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58538: LD_ADDR_VAR 0 62
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58579: LD_ADDR_VAR 0 63
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58623: LD_ADDR_VAR 0 64
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: LIST
58668: ST_TO_ADDR
// end ; 2 :
58669: GO 61935
58671: LD_INT 2
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 61934
58679: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58680: LD_ADDR_VAR 0 29
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 5
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 5
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 4
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 5
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 5
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 4
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 5
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: LD_INT 4
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: NEG
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: LD_INT 4
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 5
59137: NEG
59138: PUSH
59139: LD_INT 5
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: LD_INT 5
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 5
59161: NEG
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59218: LD_ADDR_VAR 0 30
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: LD_INT 3
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: LD_INT 5
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 4
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 5
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 5
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: NEG
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 4
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 5
59475: NEG
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 5
59487: NEG
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 4
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 3
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 4
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 5
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59765: LD_ADDR_VAR 0 31
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 4
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 5
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 5
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 5
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 4
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 4
59979: NEG
59980: PUSH
59981: LD_INT 5
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: NEG
60016: PUSH
60017: LD_INT 3
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: NEG
60028: PUSH
60029: LD_INT 4
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 5
60039: NEG
60040: PUSH
60041: LD_INT 5
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 5
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 5
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 4
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 4
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 5
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 5
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60315: LD_ADDR_VAR 0 32
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 4
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 5
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 5
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 5
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: LD_INT 3
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: LD_INT 4
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: NEG
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 5
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 4
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 5
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 3
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 5
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 5
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 5
60757: PUSH
60758: LD_INT 5
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 4
60767: PUSH
60768: LD_INT 5
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 5
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 5
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60862: LD_ADDR_VAR 0 33
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: LD_INT 5
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: LD_INT 4
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: NEG
60930: PUSH
60931: LD_INT 4
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: LD_INT 5
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 5
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 5
60965: NEG
60966: PUSH
60967: LD_INT 3
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 4
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 4
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 4
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 5
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 5
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 4
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 4
61192: PUSH
61193: LD_INT 3
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 4
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 4
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 5
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 5
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 5
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61400: LD_ADDR_VAR 0 34
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 5
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 4
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 3
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 4
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 5
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 5
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 4
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: LD_INT 4
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: LD_INT 5
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: PUSH
61643: LD_INT 5
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: LD_INT 4
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 5
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 5
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 4
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 4
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 4
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 4
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 3
61808: NEG
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 4
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 5
61841: NEG
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 5
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// end ; end ;
61932: GO 61935
61934: POP
// case btype of b_depot , b_warehouse :
61935: LD_VAR 0 1
61939: PUSH
61940: LD_INT 0
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61954
61946: LD_INT 1
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61954
61952: GO 62155
61954: POP
// case nation of nation_american :
61955: LD_VAR 0 5
61959: PUSH
61960: LD_INT 1
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61968
61966: GO 62024
61968: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61969: LD_ADDR_VAR 0 9
61973: PUSH
61974: LD_VAR 0 11
61978: PUSH
61979: LD_VAR 0 12
61983: PUSH
61984: LD_VAR 0 13
61988: PUSH
61989: LD_VAR 0 14
61993: PUSH
61994: LD_VAR 0 15
61998: PUSH
61999: LD_VAR 0 16
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 4
62016: PUSH
62017: LD_INT 1
62019: PLUS
62020: ARRAY
62021: ST_TO_ADDR
62022: GO 62153
62024: LD_INT 2
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62032
62030: GO 62088
62032: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62033: LD_ADDR_VAR 0 9
62037: PUSH
62038: LD_VAR 0 17
62042: PUSH
62043: LD_VAR 0 18
62047: PUSH
62048: LD_VAR 0 19
62052: PUSH
62053: LD_VAR 0 20
62057: PUSH
62058: LD_VAR 0 21
62062: PUSH
62063: LD_VAR 0 22
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: PUSH
62076: LD_VAR 0 4
62080: PUSH
62081: LD_INT 1
62083: PLUS
62084: ARRAY
62085: ST_TO_ADDR
62086: GO 62153
62088: LD_INT 3
62090: DOUBLE
62091: EQUAL
62092: IFTRUE 62096
62094: GO 62152
62096: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62097: LD_ADDR_VAR 0 9
62101: PUSH
62102: LD_VAR 0 23
62106: PUSH
62107: LD_VAR 0 24
62111: PUSH
62112: LD_VAR 0 25
62116: PUSH
62117: LD_VAR 0 26
62121: PUSH
62122: LD_VAR 0 27
62126: PUSH
62127: LD_VAR 0 28
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: LD_VAR 0 4
62144: PUSH
62145: LD_INT 1
62147: PLUS
62148: ARRAY
62149: ST_TO_ADDR
62150: GO 62153
62152: POP
62153: GO 62708
62155: LD_INT 2
62157: DOUBLE
62158: EQUAL
62159: IFTRUE 62169
62161: LD_INT 3
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62169
62167: GO 62225
62169: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62170: LD_ADDR_VAR 0 9
62174: PUSH
62175: LD_VAR 0 29
62179: PUSH
62180: LD_VAR 0 30
62184: PUSH
62185: LD_VAR 0 31
62189: PUSH
62190: LD_VAR 0 32
62194: PUSH
62195: LD_VAR 0 33
62199: PUSH
62200: LD_VAR 0 34
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: PUSH
62213: LD_VAR 0 4
62217: PUSH
62218: LD_INT 1
62220: PLUS
62221: ARRAY
62222: ST_TO_ADDR
62223: GO 62708
62225: LD_INT 16
62227: DOUBLE
62228: EQUAL
62229: IFTRUE 62287
62231: LD_INT 17
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62287
62237: LD_INT 18
62239: DOUBLE
62240: EQUAL
62241: IFTRUE 62287
62243: LD_INT 19
62245: DOUBLE
62246: EQUAL
62247: IFTRUE 62287
62249: LD_INT 22
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62287
62255: LD_INT 20
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62287
62261: LD_INT 21
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62287
62267: LD_INT 23
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62287
62273: LD_INT 24
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62287
62279: LD_INT 25
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62287
62285: GO 62343
62287: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62288: LD_ADDR_VAR 0 9
62292: PUSH
62293: LD_VAR 0 35
62297: PUSH
62298: LD_VAR 0 36
62302: PUSH
62303: LD_VAR 0 37
62307: PUSH
62308: LD_VAR 0 38
62312: PUSH
62313: LD_VAR 0 39
62317: PUSH
62318: LD_VAR 0 40
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 4
62335: PUSH
62336: LD_INT 1
62338: PLUS
62339: ARRAY
62340: ST_TO_ADDR
62341: GO 62708
62343: LD_INT 6
62345: DOUBLE
62346: EQUAL
62347: IFTRUE 62399
62349: LD_INT 7
62351: DOUBLE
62352: EQUAL
62353: IFTRUE 62399
62355: LD_INT 8
62357: DOUBLE
62358: EQUAL
62359: IFTRUE 62399
62361: LD_INT 13
62363: DOUBLE
62364: EQUAL
62365: IFTRUE 62399
62367: LD_INT 12
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62399
62373: LD_INT 15
62375: DOUBLE
62376: EQUAL
62377: IFTRUE 62399
62379: LD_INT 11
62381: DOUBLE
62382: EQUAL
62383: IFTRUE 62399
62385: LD_INT 14
62387: DOUBLE
62388: EQUAL
62389: IFTRUE 62399
62391: LD_INT 10
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62455
62399: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62400: LD_ADDR_VAR 0 9
62404: PUSH
62405: LD_VAR 0 41
62409: PUSH
62410: LD_VAR 0 42
62414: PUSH
62415: LD_VAR 0 43
62419: PUSH
62420: LD_VAR 0 44
62424: PUSH
62425: LD_VAR 0 45
62429: PUSH
62430: LD_VAR 0 46
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 4
62447: PUSH
62448: LD_INT 1
62450: PLUS
62451: ARRAY
62452: ST_TO_ADDR
62453: GO 62708
62455: LD_INT 36
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62463
62461: GO 62519
62463: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62464: LD_ADDR_VAR 0 9
62468: PUSH
62469: LD_VAR 0 47
62473: PUSH
62474: LD_VAR 0 48
62478: PUSH
62479: LD_VAR 0 49
62483: PUSH
62484: LD_VAR 0 50
62488: PUSH
62489: LD_VAR 0 51
62493: PUSH
62494: LD_VAR 0 52
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 4
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: ARRAY
62516: ST_TO_ADDR
62517: GO 62708
62519: LD_INT 4
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62545
62525: LD_INT 5
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62545
62531: LD_INT 34
62533: DOUBLE
62534: EQUAL
62535: IFTRUE 62545
62537: LD_INT 37
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62545
62543: GO 62601
62545: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62546: LD_ADDR_VAR 0 9
62550: PUSH
62551: LD_VAR 0 53
62555: PUSH
62556: LD_VAR 0 54
62560: PUSH
62561: LD_VAR 0 55
62565: PUSH
62566: LD_VAR 0 56
62570: PUSH
62571: LD_VAR 0 57
62575: PUSH
62576: LD_VAR 0 58
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: PUSH
62589: LD_VAR 0 4
62593: PUSH
62594: LD_INT 1
62596: PLUS
62597: ARRAY
62598: ST_TO_ADDR
62599: GO 62708
62601: LD_INT 31
62603: DOUBLE
62604: EQUAL
62605: IFTRUE 62651
62607: LD_INT 32
62609: DOUBLE
62610: EQUAL
62611: IFTRUE 62651
62613: LD_INT 33
62615: DOUBLE
62616: EQUAL
62617: IFTRUE 62651
62619: LD_INT 27
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62651
62625: LD_INT 26
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62651
62631: LD_INT 28
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62651
62637: LD_INT 29
62639: DOUBLE
62640: EQUAL
62641: IFTRUE 62651
62643: LD_INT 30
62645: DOUBLE
62646: EQUAL
62647: IFTRUE 62651
62649: GO 62707
62651: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62652: LD_ADDR_VAR 0 9
62656: PUSH
62657: LD_VAR 0 59
62661: PUSH
62662: LD_VAR 0 60
62666: PUSH
62667: LD_VAR 0 61
62671: PUSH
62672: LD_VAR 0 62
62676: PUSH
62677: LD_VAR 0 63
62681: PUSH
62682: LD_VAR 0 64
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: LD_VAR 0 4
62699: PUSH
62700: LD_INT 1
62702: PLUS
62703: ARRAY
62704: ST_TO_ADDR
62705: GO 62708
62707: POP
// temp_list2 = [ ] ;
62708: LD_ADDR_VAR 0 10
62712: PUSH
62713: EMPTY
62714: ST_TO_ADDR
// for i in temp_list do
62715: LD_ADDR_VAR 0 8
62719: PUSH
62720: LD_VAR 0 9
62724: PUSH
62725: FOR_IN
62726: IFFALSE 62778
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62728: LD_ADDR_VAR 0 10
62732: PUSH
62733: LD_VAR 0 10
62737: PUSH
62738: LD_VAR 0 8
62742: PUSH
62743: LD_INT 1
62745: ARRAY
62746: PUSH
62747: LD_VAR 0 2
62751: PLUS
62752: PUSH
62753: LD_VAR 0 8
62757: PUSH
62758: LD_INT 2
62760: ARRAY
62761: PUSH
62762: LD_VAR 0 3
62766: PLUS
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: ADD
62775: ST_TO_ADDR
62776: GO 62725
62778: POP
62779: POP
// result = temp_list2 ;
62780: LD_ADDR_VAR 0 7
62784: PUSH
62785: LD_VAR 0 10
62789: ST_TO_ADDR
// end ;
62790: LD_VAR 0 7
62794: RET
// export function EnemyInRange ( unit , dist ) ; begin
62795: LD_INT 0
62797: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 255
62812: PPUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: CALL_OW 250
62822: PPUSH
62823: LD_VAR 0 1
62827: PPUSH
62828: CALL_OW 251
62832: PPUSH
62833: LD_VAR 0 2
62837: PPUSH
62838: CALL 36197 0 4
62842: PUSH
62843: LD_INT 4
62845: ARRAY
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 3
62851: RET
// export function PlayerSeeMe ( unit ) ; begin
62852: LD_INT 0
62854: PPUSH
// result := See ( your_side , unit ) ;
62855: LD_ADDR_VAR 0 2
62859: PUSH
62860: LD_OWVAR 2
62864: PPUSH
62865: LD_VAR 0 1
62869: PPUSH
62870: CALL_OW 292
62874: ST_TO_ADDR
// end ;
62875: LD_VAR 0 2
62879: RET
// export function ReverseDir ( unit ) ; begin
62880: LD_INT 0
62882: PPUSH
// if not unit then
62883: LD_VAR 0 1
62887: NOT
62888: IFFALSE 62892
// exit ;
62890: GO 62915
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62892: LD_ADDR_VAR 0 2
62896: PUSH
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 254
62906: PUSH
62907: LD_INT 3
62909: PLUS
62910: PUSH
62911: LD_INT 6
62913: MOD
62914: ST_TO_ADDR
// end ;
62915: LD_VAR 0 2
62919: RET
// export function ReverseArray ( array ) ; var i ; begin
62920: LD_INT 0
62922: PPUSH
62923: PPUSH
// if not array then
62924: LD_VAR 0 1
62928: NOT
62929: IFFALSE 62933
// exit ;
62931: GO 62988
// result := [ ] ;
62933: LD_ADDR_VAR 0 2
62937: PUSH
62938: EMPTY
62939: ST_TO_ADDR
// for i := array downto 1 do
62940: LD_ADDR_VAR 0 3
62944: PUSH
62945: DOUBLE
62946: LD_VAR 0 1
62950: INC
62951: ST_TO_ADDR
62952: LD_INT 1
62954: PUSH
62955: FOR_DOWNTO
62956: IFFALSE 62986
// result := Join ( result , array [ i ] ) ;
62958: LD_ADDR_VAR 0 2
62962: PUSH
62963: LD_VAR 0 2
62967: PPUSH
62968: LD_VAR 0 1
62972: PUSH
62973: LD_VAR 0 3
62977: ARRAY
62978: PPUSH
62979: CALL 67613 0 2
62983: ST_TO_ADDR
62984: GO 62955
62986: POP
62987: POP
// end ;
62988: LD_VAR 0 2
62992: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
62997: PPUSH
62998: PPUSH
62999: PPUSH
63000: PPUSH
// if not unit or not hexes then
63001: LD_VAR 0 1
63005: NOT
63006: PUSH
63007: LD_VAR 0 2
63011: NOT
63012: OR
63013: IFFALSE 63017
// exit ;
63015: GO 63140
// dist := 9999 ;
63017: LD_ADDR_VAR 0 5
63021: PUSH
63022: LD_INT 9999
63024: ST_TO_ADDR
// for i = 1 to hexes do
63025: LD_ADDR_VAR 0 4
63029: PUSH
63030: DOUBLE
63031: LD_INT 1
63033: DEC
63034: ST_TO_ADDR
63035: LD_VAR 0 2
63039: PUSH
63040: FOR_TO
63041: IFFALSE 63128
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63043: LD_ADDR_VAR 0 6
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_VAR 0 2
63057: PUSH
63058: LD_VAR 0 4
63062: ARRAY
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: PPUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_VAR 0 4
63077: ARRAY
63078: PUSH
63079: LD_INT 2
63081: ARRAY
63082: PPUSH
63083: CALL_OW 297
63087: ST_TO_ADDR
// if tdist < dist then
63088: LD_VAR 0 6
63092: PUSH
63093: LD_VAR 0 5
63097: LESS
63098: IFFALSE 63126
// begin hex := hexes [ i ] ;
63100: LD_ADDR_VAR 0 8
63104: PUSH
63105: LD_VAR 0 2
63109: PUSH
63110: LD_VAR 0 4
63114: ARRAY
63115: ST_TO_ADDR
// dist := tdist ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: LD_VAR 0 6
63125: ST_TO_ADDR
// end ; end ;
63126: GO 63040
63128: POP
63129: POP
// result := hex ;
63130: LD_ADDR_VAR 0 3
63134: PUSH
63135: LD_VAR 0 8
63139: ST_TO_ADDR
// end ;
63140: LD_VAR 0 3
63144: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63145: LD_INT 0
63147: PPUSH
63148: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63149: LD_VAR 0 1
63153: NOT
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: LD_INT 21
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 23
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PPUSH
63184: CALL_OW 69
63188: IN
63189: NOT
63190: OR
63191: IFFALSE 63195
// exit ;
63193: GO 63242
// for i = 1 to 3 do
63195: LD_ADDR_VAR 0 3
63199: PUSH
63200: DOUBLE
63201: LD_INT 1
63203: DEC
63204: ST_TO_ADDR
63205: LD_INT 3
63207: PUSH
63208: FOR_TO
63209: IFFALSE 63240
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63211: LD_VAR 0 1
63215: PPUSH
63216: CALL_OW 250
63220: PPUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 251
63230: PPUSH
63231: LD_INT 1
63233: PPUSH
63234: CALL_OW 453
63238: GO 63208
63240: POP
63241: POP
// end ;
63242: LD_VAR 0 2
63246: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63247: LD_INT 0
63249: PPUSH
63250: PPUSH
63251: PPUSH
63252: PPUSH
63253: PPUSH
63254: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63255: LD_VAR 0 1
63259: NOT
63260: PUSH
63261: LD_VAR 0 2
63265: NOT
63266: OR
63267: PUSH
63268: LD_VAR 0 1
63272: PPUSH
63273: CALL_OW 314
63277: OR
63278: IFFALSE 63282
// exit ;
63280: GO 63723
// x := GetX ( enemy_unit ) ;
63282: LD_ADDR_VAR 0 7
63286: PUSH
63287: LD_VAR 0 2
63291: PPUSH
63292: CALL_OW 250
63296: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63297: LD_ADDR_VAR 0 8
63301: PUSH
63302: LD_VAR 0 2
63306: PPUSH
63307: CALL_OW 251
63311: ST_TO_ADDR
// if not x or not y then
63312: LD_VAR 0 7
63316: NOT
63317: PUSH
63318: LD_VAR 0 8
63322: NOT
63323: OR
63324: IFFALSE 63328
// exit ;
63326: GO 63723
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63328: LD_ADDR_VAR 0 6
63332: PUSH
63333: LD_VAR 0 7
63337: PPUSH
63338: LD_INT 0
63340: PPUSH
63341: LD_INT 4
63343: PPUSH
63344: CALL_OW 272
63348: PUSH
63349: LD_VAR 0 8
63353: PPUSH
63354: LD_INT 0
63356: PPUSH
63357: LD_INT 4
63359: PPUSH
63360: CALL_OW 273
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_VAR 0 7
63373: PPUSH
63374: LD_INT 1
63376: PPUSH
63377: LD_INT 4
63379: PPUSH
63380: CALL_OW 272
63384: PUSH
63385: LD_VAR 0 8
63389: PPUSH
63390: LD_INT 1
63392: PPUSH
63393: LD_INT 4
63395: PPUSH
63396: CALL_OW 273
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_VAR 0 7
63409: PPUSH
63410: LD_INT 2
63412: PPUSH
63413: LD_INT 4
63415: PPUSH
63416: CALL_OW 272
63420: PUSH
63421: LD_VAR 0 8
63425: PPUSH
63426: LD_INT 2
63428: PPUSH
63429: LD_INT 4
63431: PPUSH
63432: CALL_OW 273
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_VAR 0 7
63445: PPUSH
63446: LD_INT 3
63448: PPUSH
63449: LD_INT 4
63451: PPUSH
63452: CALL_OW 272
63456: PUSH
63457: LD_VAR 0 8
63461: PPUSH
63462: LD_INT 3
63464: PPUSH
63465: LD_INT 4
63467: PPUSH
63468: CALL_OW 273
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_VAR 0 7
63481: PPUSH
63482: LD_INT 4
63484: PPUSH
63485: LD_INT 4
63487: PPUSH
63488: CALL_OW 272
63492: PUSH
63493: LD_VAR 0 8
63497: PPUSH
63498: LD_INT 4
63500: PPUSH
63501: LD_INT 4
63503: PPUSH
63504: CALL_OW 273
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_VAR 0 7
63517: PPUSH
63518: LD_INT 5
63520: PPUSH
63521: LD_INT 4
63523: PPUSH
63524: CALL_OW 272
63528: PUSH
63529: LD_VAR 0 8
63533: PPUSH
63534: LD_INT 5
63536: PPUSH
63537: LD_INT 4
63539: PPUSH
63540: CALL_OW 273
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// for i = tmp downto 1 do
63557: LD_ADDR_VAR 0 4
63561: PUSH
63562: DOUBLE
63563: LD_VAR 0 6
63567: INC
63568: ST_TO_ADDR
63569: LD_INT 1
63571: PUSH
63572: FOR_DOWNTO
63573: IFFALSE 63674
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63575: LD_VAR 0 6
63579: PUSH
63580: LD_VAR 0 4
63584: ARRAY
63585: PUSH
63586: LD_INT 1
63588: ARRAY
63589: PPUSH
63590: LD_VAR 0 6
63594: PUSH
63595: LD_VAR 0 4
63599: ARRAY
63600: PUSH
63601: LD_INT 2
63603: ARRAY
63604: PPUSH
63605: CALL_OW 488
63609: NOT
63610: PUSH
63611: LD_VAR 0 6
63615: PUSH
63616: LD_VAR 0 4
63620: ARRAY
63621: PUSH
63622: LD_INT 1
63624: ARRAY
63625: PPUSH
63626: LD_VAR 0 6
63630: PUSH
63631: LD_VAR 0 4
63635: ARRAY
63636: PUSH
63637: LD_INT 2
63639: ARRAY
63640: PPUSH
63641: CALL_OW 428
63645: PUSH
63646: LD_INT 0
63648: NONEQUAL
63649: OR
63650: IFFALSE 63672
// tmp := Delete ( tmp , i ) ;
63652: LD_ADDR_VAR 0 6
63656: PUSH
63657: LD_VAR 0 6
63661: PPUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: CALL_OW 3
63671: ST_TO_ADDR
63672: GO 63572
63674: POP
63675: POP
// j := GetClosestHex ( unit , tmp ) ;
63676: LD_ADDR_VAR 0 5
63680: PUSH
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_VAR 0 6
63690: PPUSH
63691: CALL 62993 0 2
63695: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63696: LD_VAR 0 1
63700: PPUSH
63701: LD_VAR 0 5
63705: PUSH
63706: LD_INT 1
63708: ARRAY
63709: PPUSH
63710: LD_VAR 0 5
63714: PUSH
63715: LD_INT 2
63717: ARRAY
63718: PPUSH
63719: CALL_OW 111
// end ;
63723: LD_VAR 0 3
63727: RET
// export function PrepareApemanSoldier ( ) ; begin
63728: LD_INT 0
63730: PPUSH
// uc_nation := 0 ;
63731: LD_ADDR_OWVAR 21
63735: PUSH
63736: LD_INT 0
63738: ST_TO_ADDR
// hc_sex := sex_male ;
63739: LD_ADDR_OWVAR 27
63743: PUSH
63744: LD_INT 1
63746: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63747: LD_ADDR_OWVAR 28
63751: PUSH
63752: LD_INT 15
63754: ST_TO_ADDR
// hc_gallery :=  ;
63755: LD_ADDR_OWVAR 33
63759: PUSH
63760: LD_STRING 
63762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63763: LD_ADDR_OWVAR 31
63767: PUSH
63768: LD_INT 0
63770: PPUSH
63771: LD_INT 3
63773: PPUSH
63774: CALL_OW 12
63778: PUSH
63779: LD_INT 0
63781: PPUSH
63782: LD_INT 3
63784: PPUSH
63785: CALL_OW 12
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: ST_TO_ADDR
// end ;
63802: LD_VAR 0 1
63806: RET
// export function PrepareApemanEngineer ( ) ; begin
63807: LD_INT 0
63809: PPUSH
// uc_nation := 0 ;
63810: LD_ADDR_OWVAR 21
63814: PUSH
63815: LD_INT 0
63817: ST_TO_ADDR
// hc_sex := sex_male ;
63818: LD_ADDR_OWVAR 27
63822: PUSH
63823: LD_INT 1
63825: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63826: LD_ADDR_OWVAR 28
63830: PUSH
63831: LD_INT 16
63833: ST_TO_ADDR
// hc_gallery :=  ;
63834: LD_ADDR_OWVAR 33
63838: PUSH
63839: LD_STRING 
63841: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63842: LD_ADDR_OWVAR 31
63846: PUSH
63847: LD_INT 0
63849: PPUSH
63850: LD_INT 3
63852: PPUSH
63853: CALL_OW 12
63857: PUSH
63858: LD_INT 0
63860: PPUSH
63861: LD_INT 3
63863: PPUSH
63864: CALL_OW 12
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// end ;
63881: LD_VAR 0 1
63885: RET
// export function PrepareApeman ( agressivity ) ; begin
63886: LD_INT 0
63888: PPUSH
// uc_side := 0 ;
63889: LD_ADDR_OWVAR 20
63893: PUSH
63894: LD_INT 0
63896: ST_TO_ADDR
// uc_nation := 0 ;
63897: LD_ADDR_OWVAR 21
63901: PUSH
63902: LD_INT 0
63904: ST_TO_ADDR
// hc_sex := sex_male ;
63905: LD_ADDR_OWVAR 27
63909: PUSH
63910: LD_INT 1
63912: ST_TO_ADDR
// hc_class := class_apeman ;
63913: LD_ADDR_OWVAR 28
63917: PUSH
63918: LD_INT 12
63920: ST_TO_ADDR
// hc_gallery :=  ;
63921: LD_ADDR_OWVAR 33
63925: PUSH
63926: LD_STRING 
63928: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63929: LD_ADDR_OWVAR 35
63933: PUSH
63934: LD_VAR 0 1
63938: NEG
63939: PPUSH
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 12
63949: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63950: LD_ADDR_OWVAR 31
63954: PUSH
63955: LD_INT 0
63957: PPUSH
63958: LD_INT 3
63960: PPUSH
63961: CALL_OW 12
63965: PUSH
63966: LD_INT 0
63968: PPUSH
63969: LD_INT 3
63971: PPUSH
63972: CALL_OW 12
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// end ;
63989: LD_VAR 0 2
63993: RET
// export function PrepareTiger ( agressivity ) ; begin
63994: LD_INT 0
63996: PPUSH
// uc_side := 0 ;
63997: LD_ADDR_OWVAR 20
64001: PUSH
64002: LD_INT 0
64004: ST_TO_ADDR
// uc_nation := 0 ;
64005: LD_ADDR_OWVAR 21
64009: PUSH
64010: LD_INT 0
64012: ST_TO_ADDR
// hc_class := class_tiger ;
64013: LD_ADDR_OWVAR 28
64017: PUSH
64018: LD_INT 14
64020: ST_TO_ADDR
// hc_gallery :=  ;
64021: LD_ADDR_OWVAR 33
64025: PUSH
64026: LD_STRING 
64028: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64029: LD_ADDR_OWVAR 35
64033: PUSH
64034: LD_VAR 0 1
64038: NEG
64039: PPUSH
64040: LD_VAR 0 1
64044: PPUSH
64045: CALL_OW 12
64049: ST_TO_ADDR
// end ;
64050: LD_VAR 0 2
64054: RET
// export function PrepareEnchidna ( ) ; begin
64055: LD_INT 0
64057: PPUSH
// uc_side := 0 ;
64058: LD_ADDR_OWVAR 20
64062: PUSH
64063: LD_INT 0
64065: ST_TO_ADDR
// uc_nation := 0 ;
64066: LD_ADDR_OWVAR 21
64070: PUSH
64071: LD_INT 0
64073: ST_TO_ADDR
// hc_class := class_baggie ;
64074: LD_ADDR_OWVAR 28
64078: PUSH
64079: LD_INT 13
64081: ST_TO_ADDR
// hc_gallery :=  ;
64082: LD_ADDR_OWVAR 33
64086: PUSH
64087: LD_STRING 
64089: ST_TO_ADDR
// end ;
64090: LD_VAR 0 1
64094: RET
// export function PrepareFrog ( ) ; begin
64095: LD_INT 0
64097: PPUSH
// uc_side := 0 ;
64098: LD_ADDR_OWVAR 20
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
// uc_nation := 0 ;
64106: LD_ADDR_OWVAR 21
64110: PUSH
64111: LD_INT 0
64113: ST_TO_ADDR
// hc_class := class_frog ;
64114: LD_ADDR_OWVAR 28
64118: PUSH
64119: LD_INT 19
64121: ST_TO_ADDR
// hc_gallery :=  ;
64122: LD_ADDR_OWVAR 33
64126: PUSH
64127: LD_STRING 
64129: ST_TO_ADDR
// end ;
64130: LD_VAR 0 1
64134: RET
// export function PrepareFish ( ) ; begin
64135: LD_INT 0
64137: PPUSH
// uc_side := 0 ;
64138: LD_ADDR_OWVAR 20
64142: PUSH
64143: LD_INT 0
64145: ST_TO_ADDR
// uc_nation := 0 ;
64146: LD_ADDR_OWVAR 21
64150: PUSH
64151: LD_INT 0
64153: ST_TO_ADDR
// hc_class := class_fish ;
64154: LD_ADDR_OWVAR 28
64158: PUSH
64159: LD_INT 20
64161: ST_TO_ADDR
// hc_gallery :=  ;
64162: LD_ADDR_OWVAR 33
64166: PUSH
64167: LD_STRING 
64169: ST_TO_ADDR
// end ;
64170: LD_VAR 0 1
64174: RET
// export function PrepareBird ( ) ; begin
64175: LD_INT 0
64177: PPUSH
// uc_side := 0 ;
64178: LD_ADDR_OWVAR 20
64182: PUSH
64183: LD_INT 0
64185: ST_TO_ADDR
// uc_nation := 0 ;
64186: LD_ADDR_OWVAR 21
64190: PUSH
64191: LD_INT 0
64193: ST_TO_ADDR
// hc_class := class_phororhacos ;
64194: LD_ADDR_OWVAR 28
64198: PUSH
64199: LD_INT 18
64201: ST_TO_ADDR
// hc_gallery :=  ;
64202: LD_ADDR_OWVAR 33
64206: PUSH
64207: LD_STRING 
64209: ST_TO_ADDR
// end ;
64210: LD_VAR 0 1
64214: RET
// export function PrepareHorse ( ) ; begin
64215: LD_INT 0
64217: PPUSH
// uc_side := 0 ;
64218: LD_ADDR_OWVAR 20
64222: PUSH
64223: LD_INT 0
64225: ST_TO_ADDR
// uc_nation := 0 ;
64226: LD_ADDR_OWVAR 21
64230: PUSH
64231: LD_INT 0
64233: ST_TO_ADDR
// hc_class := class_horse ;
64234: LD_ADDR_OWVAR 28
64238: PUSH
64239: LD_INT 21
64241: ST_TO_ADDR
// hc_gallery :=  ;
64242: LD_ADDR_OWVAR 33
64246: PUSH
64247: LD_STRING 
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 1
64254: RET
// export function PrepareMastodont ( ) ; begin
64255: LD_INT 0
64257: PPUSH
// uc_side := 0 ;
64258: LD_ADDR_OWVAR 20
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// uc_nation := 0 ;
64266: LD_ADDR_OWVAR 21
64270: PUSH
64271: LD_INT 0
64273: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64274: LD_ADDR_OWVAR 37
64278: PUSH
64279: LD_INT 31
64281: ST_TO_ADDR
// vc_control := control_rider ;
64282: LD_ADDR_OWVAR 38
64286: PUSH
64287: LD_INT 4
64289: ST_TO_ADDR
// end ;
64290: LD_VAR 0 1
64294: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64295: LD_INT 0
64297: PPUSH
64298: PPUSH
64299: PPUSH
// uc_side = 0 ;
64300: LD_ADDR_OWVAR 20
64304: PUSH
64305: LD_INT 0
64307: ST_TO_ADDR
// uc_nation = 0 ;
64308: LD_ADDR_OWVAR 21
64312: PUSH
64313: LD_INT 0
64315: ST_TO_ADDR
// InitHc_All ( ) ;
64316: CALL_OW 584
// InitVc ;
64320: CALL_OW 20
// if mastodonts then
64324: LD_VAR 0 6
64328: IFFALSE 64395
// for i = 1 to mastodonts do
64330: LD_ADDR_VAR 0 11
64334: PUSH
64335: DOUBLE
64336: LD_INT 1
64338: DEC
64339: ST_TO_ADDR
64340: LD_VAR 0 6
64344: PUSH
64345: FOR_TO
64346: IFFALSE 64393
// begin vc_chassis := 31 ;
64348: LD_ADDR_OWVAR 37
64352: PUSH
64353: LD_INT 31
64355: ST_TO_ADDR
// vc_control := control_rider ;
64356: LD_ADDR_OWVAR 38
64360: PUSH
64361: LD_INT 4
64363: ST_TO_ADDR
// animal := CreateVehicle ;
64364: LD_ADDR_VAR 0 12
64368: PUSH
64369: CALL_OW 45
64373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64374: LD_VAR 0 12
64378: PPUSH
64379: LD_VAR 0 8
64383: PPUSH
64384: LD_INT 0
64386: PPUSH
64387: CALL 66530 0 3
// end ;
64391: GO 64345
64393: POP
64394: POP
// if horses then
64395: LD_VAR 0 5
64399: IFFALSE 64466
// for i = 1 to horses do
64401: LD_ADDR_VAR 0 11
64405: PUSH
64406: DOUBLE
64407: LD_INT 1
64409: DEC
64410: ST_TO_ADDR
64411: LD_VAR 0 5
64415: PUSH
64416: FOR_TO
64417: IFFALSE 64464
// begin hc_class := 21 ;
64419: LD_ADDR_OWVAR 28
64423: PUSH
64424: LD_INT 21
64426: ST_TO_ADDR
// hc_gallery :=  ;
64427: LD_ADDR_OWVAR 33
64431: PUSH
64432: LD_STRING 
64434: ST_TO_ADDR
// animal := CreateHuman ;
64435: LD_ADDR_VAR 0 12
64439: PUSH
64440: CALL_OW 44
64444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64445: LD_VAR 0 12
64449: PPUSH
64450: LD_VAR 0 8
64454: PPUSH
64455: LD_INT 0
64457: PPUSH
64458: CALL 66530 0 3
// end ;
64462: GO 64416
64464: POP
64465: POP
// if birds then
64466: LD_VAR 0 1
64470: IFFALSE 64537
// for i = 1 to birds do
64472: LD_ADDR_VAR 0 11
64476: PUSH
64477: DOUBLE
64478: LD_INT 1
64480: DEC
64481: ST_TO_ADDR
64482: LD_VAR 0 1
64486: PUSH
64487: FOR_TO
64488: IFFALSE 64535
// begin hc_class = 18 ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 18
64497: ST_TO_ADDR
// hc_gallery =  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// animal := CreateHuman ;
64506: LD_ADDR_VAR 0 12
64510: PUSH
64511: CALL_OW 44
64515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64516: LD_VAR 0 12
64520: PPUSH
64521: LD_VAR 0 8
64525: PPUSH
64526: LD_INT 0
64528: PPUSH
64529: CALL 66530 0 3
// end ;
64533: GO 64487
64535: POP
64536: POP
// if tigers then
64537: LD_VAR 0 2
64541: IFFALSE 64625
// for i = 1 to tigers do
64543: LD_ADDR_VAR 0 11
64547: PUSH
64548: DOUBLE
64549: LD_INT 1
64551: DEC
64552: ST_TO_ADDR
64553: LD_VAR 0 2
64557: PUSH
64558: FOR_TO
64559: IFFALSE 64623
// begin hc_class = class_tiger ;
64561: LD_ADDR_OWVAR 28
64565: PUSH
64566: LD_INT 14
64568: ST_TO_ADDR
// hc_gallery =  ;
64569: LD_ADDR_OWVAR 33
64573: PUSH
64574: LD_STRING 
64576: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64577: LD_ADDR_OWVAR 35
64581: PUSH
64582: LD_INT 7
64584: NEG
64585: PPUSH
64586: LD_INT 7
64588: PPUSH
64589: CALL_OW 12
64593: ST_TO_ADDR
// animal := CreateHuman ;
64594: LD_ADDR_VAR 0 12
64598: PUSH
64599: CALL_OW 44
64603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64604: LD_VAR 0 12
64608: PPUSH
64609: LD_VAR 0 8
64613: PPUSH
64614: LD_INT 0
64616: PPUSH
64617: CALL 66530 0 3
// end ;
64621: GO 64558
64623: POP
64624: POP
// if apemans then
64625: LD_VAR 0 3
64629: IFFALSE 64752
// for i = 1 to apemans do
64631: LD_ADDR_VAR 0 11
64635: PUSH
64636: DOUBLE
64637: LD_INT 1
64639: DEC
64640: ST_TO_ADDR
64641: LD_VAR 0 3
64645: PUSH
64646: FOR_TO
64647: IFFALSE 64750
// begin hc_class = class_apeman ;
64649: LD_ADDR_OWVAR 28
64653: PUSH
64654: LD_INT 12
64656: ST_TO_ADDR
// hc_gallery =  ;
64657: LD_ADDR_OWVAR 33
64661: PUSH
64662: LD_STRING 
64664: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64665: LD_ADDR_OWVAR 35
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PPUSH
64674: LD_INT 2
64676: PPUSH
64677: CALL_OW 12
64681: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64682: LD_ADDR_OWVAR 31
64686: PUSH
64687: LD_INT 1
64689: PPUSH
64690: LD_INT 3
64692: PPUSH
64693: CALL_OW 12
64697: PUSH
64698: LD_INT 1
64700: PPUSH
64701: LD_INT 3
64703: PPUSH
64704: CALL_OW 12
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: ST_TO_ADDR
// animal := CreateHuman ;
64721: LD_ADDR_VAR 0 12
64725: PUSH
64726: CALL_OW 44
64730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64731: LD_VAR 0 12
64735: PPUSH
64736: LD_VAR 0 8
64740: PPUSH
64741: LD_INT 0
64743: PPUSH
64744: CALL 66530 0 3
// end ;
64748: GO 64646
64750: POP
64751: POP
// if enchidnas then
64752: LD_VAR 0 4
64756: IFFALSE 64823
// for i = 1 to enchidnas do
64758: LD_ADDR_VAR 0 11
64762: PUSH
64763: DOUBLE
64764: LD_INT 1
64766: DEC
64767: ST_TO_ADDR
64768: LD_VAR 0 4
64772: PUSH
64773: FOR_TO
64774: IFFALSE 64821
// begin hc_class = 13 ;
64776: LD_ADDR_OWVAR 28
64780: PUSH
64781: LD_INT 13
64783: ST_TO_ADDR
// hc_gallery =  ;
64784: LD_ADDR_OWVAR 33
64788: PUSH
64789: LD_STRING 
64791: ST_TO_ADDR
// animal := CreateHuman ;
64792: LD_ADDR_VAR 0 12
64796: PUSH
64797: CALL_OW 44
64801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64802: LD_VAR 0 12
64806: PPUSH
64807: LD_VAR 0 8
64811: PPUSH
64812: LD_INT 0
64814: PPUSH
64815: CALL 66530 0 3
// end ;
64819: GO 64773
64821: POP
64822: POP
// if fishes then
64823: LD_VAR 0 7
64827: IFFALSE 64894
// for i = 1 to fishes do
64829: LD_ADDR_VAR 0 11
64833: PUSH
64834: DOUBLE
64835: LD_INT 1
64837: DEC
64838: ST_TO_ADDR
64839: LD_VAR 0 7
64843: PUSH
64844: FOR_TO
64845: IFFALSE 64892
// begin hc_class = 20 ;
64847: LD_ADDR_OWVAR 28
64851: PUSH
64852: LD_INT 20
64854: ST_TO_ADDR
// hc_gallery =  ;
64855: LD_ADDR_OWVAR 33
64859: PUSH
64860: LD_STRING 
64862: ST_TO_ADDR
// animal := CreateHuman ;
64863: LD_ADDR_VAR 0 12
64867: PUSH
64868: CALL_OW 44
64872: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64873: LD_VAR 0 12
64877: PPUSH
64878: LD_VAR 0 9
64882: PPUSH
64883: LD_INT 0
64885: PPUSH
64886: CALL 66530 0 3
// end ;
64890: GO 64844
64892: POP
64893: POP
// end ;
64894: LD_VAR 0 10
64898: RET
// export function WantHeal ( sci , unit ) ; begin
64899: LD_INT 0
64901: PPUSH
// if GetTaskList ( sci ) > 0 then
64902: LD_VAR 0 1
64906: PPUSH
64907: CALL_OW 437
64911: PUSH
64912: LD_INT 0
64914: GREATER
64915: IFFALSE 64985
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 437
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PUSH
64935: LD_STRING l
64937: EQUAL
64938: PUSH
64939: LD_VAR 0 1
64943: PPUSH
64944: CALL_OW 437
64948: PUSH
64949: LD_INT 1
64951: ARRAY
64952: PUSH
64953: LD_INT 4
64955: ARRAY
64956: PUSH
64957: LD_VAR 0 2
64961: EQUAL
64962: AND
64963: IFFALSE 64975
// result := true else
64965: LD_ADDR_VAR 0 3
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
64973: GO 64983
// result := false ;
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: LD_INT 0
64982: ST_TO_ADDR
// end else
64983: GO 64993
// result := false ;
64985: LD_ADDR_VAR 0 3
64989: PUSH
64990: LD_INT 0
64992: ST_TO_ADDR
// end ;
64993: LD_VAR 0 3
64997: RET
// export function HealTarget ( sci ) ; begin
64998: LD_INT 0
65000: PPUSH
// if not sci then
65001: LD_VAR 0 1
65005: NOT
65006: IFFALSE 65010
// exit ;
65008: GO 65075
// result := 0 ;
65010: LD_ADDR_VAR 0 2
65014: PUSH
65015: LD_INT 0
65017: ST_TO_ADDR
// if GetTaskList ( sci ) then
65018: LD_VAR 0 1
65022: PPUSH
65023: CALL_OW 437
65027: IFFALSE 65075
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65029: LD_VAR 0 1
65033: PPUSH
65034: CALL_OW 437
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PUSH
65047: LD_STRING l
65049: EQUAL
65050: IFFALSE 65075
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65052: LD_ADDR_VAR 0 2
65056: PUSH
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL_OW 437
65066: PUSH
65067: LD_INT 1
65069: ARRAY
65070: PUSH
65071: LD_INT 4
65073: ARRAY
65074: ST_TO_ADDR
// end ;
65075: LD_VAR 0 2
65079: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65080: LD_INT 0
65082: PPUSH
65083: PPUSH
65084: PPUSH
65085: PPUSH
// if not base_units then
65086: LD_VAR 0 1
65090: NOT
65091: IFFALSE 65095
// exit ;
65093: GO 65182
// result := false ;
65095: LD_ADDR_VAR 0 2
65099: PUSH
65100: LD_INT 0
65102: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65103: LD_ADDR_VAR 0 5
65107: PUSH
65108: LD_VAR 0 1
65112: PPUSH
65113: LD_INT 21
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PPUSH
65123: CALL_OW 72
65127: ST_TO_ADDR
// if not tmp then
65128: LD_VAR 0 5
65132: NOT
65133: IFFALSE 65137
// exit ;
65135: GO 65182
// for i in tmp do
65137: LD_ADDR_VAR 0 3
65141: PUSH
65142: LD_VAR 0 5
65146: PUSH
65147: FOR_IN
65148: IFFALSE 65180
// begin result := EnemyInRange ( i , 22 ) ;
65150: LD_ADDR_VAR 0 2
65154: PUSH
65155: LD_VAR 0 3
65159: PPUSH
65160: LD_INT 22
65162: PPUSH
65163: CALL 62795 0 2
65167: ST_TO_ADDR
// if result then
65168: LD_VAR 0 2
65172: IFFALSE 65178
// exit ;
65174: POP
65175: POP
65176: GO 65182
// end ;
65178: GO 65147
65180: POP
65181: POP
// end ;
65182: LD_VAR 0 2
65186: RET
// export function FilterByTag ( units , tag ) ; begin
65187: LD_INT 0
65189: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65190: LD_ADDR_VAR 0 3
65194: PUSH
65195: LD_VAR 0 1
65199: PPUSH
65200: LD_INT 120
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PPUSH
65212: CALL_OW 72
65216: ST_TO_ADDR
// end ;
65217: LD_VAR 0 3
65221: RET
// export function IsDriver ( un ) ; begin
65222: LD_INT 0
65224: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65225: LD_ADDR_VAR 0 2
65229: PUSH
65230: LD_VAR 0 1
65234: PUSH
65235: LD_INT 55
65237: PUSH
65238: EMPTY
65239: LIST
65240: PPUSH
65241: CALL_OW 69
65245: IN
65246: ST_TO_ADDR
// end ;
65247: LD_VAR 0 2
65251: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65252: LD_INT 0
65254: PPUSH
65255: PPUSH
// list := [ ] ;
65256: LD_ADDR_VAR 0 5
65260: PUSH
65261: EMPTY
65262: ST_TO_ADDR
// case d of 0 :
65263: LD_VAR 0 3
65267: PUSH
65268: LD_INT 0
65270: DOUBLE
65271: EQUAL
65272: IFTRUE 65276
65274: GO 65409
65276: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65277: LD_ADDR_VAR 0 5
65281: PUSH
65282: LD_VAR 0 1
65286: PUSH
65287: LD_INT 4
65289: MINUS
65290: PUSH
65291: LD_VAR 0 2
65295: PUSH
65296: LD_INT 4
65298: MINUS
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: LD_VAR 0 1
65312: PUSH
65313: LD_INT 3
65315: MINUS
65316: PUSH
65317: LD_VAR 0 2
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: PUSH
65330: LD_VAR 0 1
65334: PUSH
65335: LD_INT 4
65337: PLUS
65338: PUSH
65339: LD_VAR 0 2
65343: PUSH
65344: LD_INT 4
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: PUSH
65352: LD_VAR 0 1
65356: PUSH
65357: LD_INT 3
65359: PLUS
65360: PUSH
65361: LD_VAR 0 2
65365: PUSH
65366: LD_INT 3
65368: PLUS
65369: PUSH
65370: LD_INT 5
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: PUSH
65378: LD_VAR 0 1
65382: PUSH
65383: LD_VAR 0 2
65387: PUSH
65388: LD_INT 4
65390: PLUS
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: ST_TO_ADDR
// end ; 1 :
65407: GO 66107
65409: LD_INT 1
65411: DOUBLE
65412: EQUAL
65413: IFTRUE 65417
65415: GO 65550
65417: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65418: LD_ADDR_VAR 0 5
65422: PUSH
65423: LD_VAR 0 1
65427: PUSH
65428: LD_VAR 0 2
65432: PUSH
65433: LD_INT 4
65435: MINUS
65436: PUSH
65437: LD_INT 3
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: LIST
65444: PUSH
65445: LD_VAR 0 1
65449: PUSH
65450: LD_INT 3
65452: MINUS
65453: PUSH
65454: LD_VAR 0 2
65458: PUSH
65459: LD_INT 3
65461: MINUS
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: PUSH
65471: LD_VAR 0 1
65475: PUSH
65476: LD_INT 4
65478: MINUS
65479: PUSH
65480: LD_VAR 0 2
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: PUSH
65493: LD_VAR 0 1
65497: PUSH
65498: LD_VAR 0 2
65502: PUSH
65503: LD_INT 3
65505: PLUS
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 4
65522: PLUS
65523: PUSH
65524: LD_VAR 0 2
65528: PUSH
65529: LD_INT 4
65531: PLUS
65532: PUSH
65533: LD_INT 5
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: ST_TO_ADDR
// end ; 2 :
65548: GO 66107
65550: LD_INT 2
65552: DOUBLE
65553: EQUAL
65554: IFTRUE 65558
65556: GO 65687
65558: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65559: LD_ADDR_VAR 0 5
65563: PUSH
65564: LD_VAR 0 1
65568: PUSH
65569: LD_VAR 0 2
65573: PUSH
65574: LD_INT 3
65576: MINUS
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: LD_INT 4
65593: PLUS
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: LIST
65607: PUSH
65608: LD_VAR 0 1
65612: PUSH
65613: LD_VAR 0 2
65617: PUSH
65618: LD_INT 4
65620: PLUS
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: PUSH
65630: LD_VAR 0 1
65634: PUSH
65635: LD_INT 3
65637: MINUS
65638: PUSH
65639: LD_VAR 0 2
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: PUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_INT 4
65659: MINUS
65660: PUSH
65661: LD_VAR 0 2
65665: PUSH
65666: LD_INT 4
65668: MINUS
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// end ; 3 :
65685: GO 66107
65687: LD_INT 3
65689: DOUBLE
65690: EQUAL
65691: IFTRUE 65695
65693: GO 65828
65695: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65696: LD_ADDR_VAR 0 5
65700: PUSH
65701: LD_VAR 0 1
65705: PUSH
65706: LD_INT 3
65708: PLUS
65709: PUSH
65710: LD_VAR 0 2
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: PUSH
65723: LD_VAR 0 1
65727: PUSH
65728: LD_INT 4
65730: PLUS
65731: PUSH
65732: LD_VAR 0 2
65736: PUSH
65737: LD_INT 4
65739: PLUS
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: LIST
65748: PUSH
65749: LD_VAR 0 1
65753: PUSH
65754: LD_INT 4
65756: MINUS
65757: PUSH
65758: LD_VAR 0 2
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: PUSH
65771: LD_VAR 0 1
65775: PUSH
65776: LD_VAR 0 2
65780: PUSH
65781: LD_INT 4
65783: MINUS
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 3
65800: MINUS
65801: PUSH
65802: LD_VAR 0 2
65806: PUSH
65807: LD_INT 3
65809: MINUS
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// end ; 4 :
65826: GO 66107
65828: LD_INT 4
65830: DOUBLE
65831: EQUAL
65832: IFTRUE 65836
65834: GO 65969
65836: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65837: LD_ADDR_VAR 0 5
65841: PUSH
65842: LD_VAR 0 1
65846: PUSH
65847: LD_VAR 0 2
65851: PUSH
65852: LD_INT 4
65854: PLUS
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: PUSH
65864: LD_VAR 0 1
65868: PUSH
65869: LD_INT 3
65871: PLUS
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_INT 3
65880: PLUS
65881: PUSH
65882: LD_INT 5
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: LD_VAR 0 1
65894: PUSH
65895: LD_INT 4
65897: PLUS
65898: PUSH
65899: LD_VAR 0 2
65903: PUSH
65904: LD_INT 4
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: PUSH
65912: LD_VAR 0 1
65916: PUSH
65917: LD_VAR 0 2
65921: PUSH
65922: LD_INT 3
65924: MINUS
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_INT 4
65941: MINUS
65942: PUSH
65943: LD_VAR 0 2
65947: PUSH
65948: LD_INT 4
65950: MINUS
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// end ; 5 :
65967: GO 66107
65969: LD_INT 5
65971: DOUBLE
65972: EQUAL
65973: IFTRUE 65977
65975: GO 66106
65977: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65978: LD_ADDR_VAR 0 5
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_INT 4
65990: MINUS
65991: PUSH
65992: LD_VAR 0 2
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: PUSH
66005: LD_VAR 0 1
66009: PUSH
66010: LD_VAR 0 2
66014: PUSH
66015: LD_INT 4
66017: MINUS
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: PUSH
66027: LD_VAR 0 1
66031: PUSH
66032: LD_INT 4
66034: PLUS
66035: PUSH
66036: LD_VAR 0 2
66040: PUSH
66041: LD_INT 4
66043: PLUS
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: PUSH
66053: LD_VAR 0 1
66057: PUSH
66058: LD_INT 3
66060: PLUS
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: LIST
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: LD_VAR 0 2
66084: PUSH
66085: LD_INT 3
66087: PLUS
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: ST_TO_ADDR
// end ; end ;
66104: GO 66107
66106: POP
// result := list ;
66107: LD_ADDR_VAR 0 4
66111: PUSH
66112: LD_VAR 0 5
66116: ST_TO_ADDR
// end ;
66117: LD_VAR 0 4
66121: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66122: LD_INT 0
66124: PPUSH
66125: PPUSH
66126: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66127: LD_VAR 0 1
66131: NOT
66132: PUSH
66133: LD_VAR 0 2
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: LD_INT 3
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: IN
66156: NOT
66157: OR
66158: IFFALSE 66162
// exit ;
66160: GO 66254
// tmp := [ ] ;
66162: LD_ADDR_VAR 0 5
66166: PUSH
66167: EMPTY
66168: ST_TO_ADDR
// for i in units do
66169: LD_ADDR_VAR 0 4
66173: PUSH
66174: LD_VAR 0 1
66178: PUSH
66179: FOR_IN
66180: IFFALSE 66223
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66182: LD_ADDR_VAR 0 5
66186: PUSH
66187: LD_VAR 0 5
66191: PPUSH
66192: LD_VAR 0 5
66196: PUSH
66197: LD_INT 1
66199: PLUS
66200: PPUSH
66201: LD_VAR 0 4
66205: PPUSH
66206: LD_VAR 0 2
66210: PPUSH
66211: CALL_OW 259
66215: PPUSH
66216: CALL_OW 2
66220: ST_TO_ADDR
66221: GO 66179
66223: POP
66224: POP
// if not tmp then
66225: LD_VAR 0 5
66229: NOT
66230: IFFALSE 66234
// exit ;
66232: GO 66254
// result := SortListByListDesc ( units , tmp ) ;
66234: LD_ADDR_VAR 0 3
66238: PUSH
66239: LD_VAR 0 1
66243: PPUSH
66244: LD_VAR 0 5
66248: PPUSH
66249: CALL_OW 77
66253: ST_TO_ADDR
// end ;
66254: LD_VAR 0 3
66258: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
66263: PPUSH
// result := false ;
66264: LD_ADDR_VAR 0 3
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
// x := GetX ( building ) ;
66272: LD_ADDR_VAR 0 4
66276: PUSH
66277: LD_VAR 0 2
66281: PPUSH
66282: CALL_OW 250
66286: ST_TO_ADDR
// y := GetY ( building ) ;
66287: LD_ADDR_VAR 0 5
66291: PUSH
66292: LD_VAR 0 2
66296: PPUSH
66297: CALL_OW 251
66301: ST_TO_ADDR
// if not building or not x or not y then
66302: LD_VAR 0 2
66306: NOT
66307: PUSH
66308: LD_VAR 0 4
66312: NOT
66313: OR
66314: PUSH
66315: LD_VAR 0 5
66319: NOT
66320: OR
66321: IFFALSE 66325
// exit ;
66323: GO 66417
// if GetTaskList ( unit ) then
66325: LD_VAR 0 1
66329: PPUSH
66330: CALL_OW 437
66334: IFFALSE 66417
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66336: LD_STRING e
66338: PUSH
66339: LD_VAR 0 1
66343: PPUSH
66344: CALL_OW 437
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: PUSH
66353: LD_INT 1
66355: ARRAY
66356: EQUAL
66357: PUSH
66358: LD_VAR 0 4
66362: PUSH
66363: LD_VAR 0 1
66367: PPUSH
66368: CALL_OW 437
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PUSH
66377: LD_INT 2
66379: ARRAY
66380: EQUAL
66381: AND
66382: PUSH
66383: LD_VAR 0 5
66387: PUSH
66388: LD_VAR 0 1
66392: PPUSH
66393: CALL_OW 437
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PUSH
66402: LD_INT 3
66404: ARRAY
66405: EQUAL
66406: AND
66407: IFFALSE 66417
// result := true end ;
66409: LD_ADDR_VAR 0 3
66413: PUSH
66414: LD_INT 1
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 3
66421: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66422: LD_INT 0
66424: PPUSH
// result := false ;
66425: LD_ADDR_VAR 0 4
66429: PUSH
66430: LD_INT 0
66432: ST_TO_ADDR
// if GetTaskList ( unit ) then
66433: LD_VAR 0 1
66437: PPUSH
66438: CALL_OW 437
66442: IFFALSE 66525
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66444: LD_STRING M
66446: PUSH
66447: LD_VAR 0 1
66451: PPUSH
66452: CALL_OW 437
66456: PUSH
66457: LD_INT 1
66459: ARRAY
66460: PUSH
66461: LD_INT 1
66463: ARRAY
66464: EQUAL
66465: PUSH
66466: LD_VAR 0 2
66470: PUSH
66471: LD_VAR 0 1
66475: PPUSH
66476: CALL_OW 437
66480: PUSH
66481: LD_INT 1
66483: ARRAY
66484: PUSH
66485: LD_INT 2
66487: ARRAY
66488: EQUAL
66489: AND
66490: PUSH
66491: LD_VAR 0 3
66495: PUSH
66496: LD_VAR 0 1
66500: PPUSH
66501: CALL_OW 437
66505: PUSH
66506: LD_INT 1
66508: ARRAY
66509: PUSH
66510: LD_INT 3
66512: ARRAY
66513: EQUAL
66514: AND
66515: IFFALSE 66525
// result := true ;
66517: LD_ADDR_VAR 0 4
66521: PUSH
66522: LD_INT 1
66524: ST_TO_ADDR
// end ; end ;
66525: LD_VAR 0 4
66529: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66530: LD_INT 0
66532: PPUSH
66533: PPUSH
66534: PPUSH
66535: PPUSH
// if not unit or not area then
66536: LD_VAR 0 1
66540: NOT
66541: PUSH
66542: LD_VAR 0 2
66546: NOT
66547: OR
66548: IFFALSE 66552
// exit ;
66550: GO 66716
// tmp := AreaToList ( area , i ) ;
66552: LD_ADDR_VAR 0 6
66556: PUSH
66557: LD_VAR 0 2
66561: PPUSH
66562: LD_VAR 0 5
66566: PPUSH
66567: CALL_OW 517
66571: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66572: LD_ADDR_VAR 0 5
66576: PUSH
66577: DOUBLE
66578: LD_INT 1
66580: DEC
66581: ST_TO_ADDR
66582: LD_VAR 0 6
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PUSH
66591: FOR_TO
66592: IFFALSE 66714
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66594: LD_ADDR_VAR 0 7
66598: PUSH
66599: LD_VAR 0 6
66603: PUSH
66604: LD_INT 1
66606: ARRAY
66607: PUSH
66608: LD_VAR 0 5
66612: ARRAY
66613: PUSH
66614: LD_VAR 0 6
66618: PUSH
66619: LD_INT 2
66621: ARRAY
66622: PUSH
66623: LD_VAR 0 5
66627: ARRAY
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66633: LD_VAR 0 7
66637: PUSH
66638: LD_INT 1
66640: ARRAY
66641: PPUSH
66642: LD_VAR 0 7
66646: PUSH
66647: LD_INT 2
66649: ARRAY
66650: PPUSH
66651: CALL_OW 428
66655: PUSH
66656: LD_INT 0
66658: EQUAL
66659: IFFALSE 66712
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66661: LD_VAR 0 1
66665: PPUSH
66666: LD_VAR 0 7
66670: PUSH
66671: LD_INT 1
66673: ARRAY
66674: PPUSH
66675: LD_VAR 0 7
66679: PUSH
66680: LD_INT 2
66682: ARRAY
66683: PPUSH
66684: LD_VAR 0 3
66688: PPUSH
66689: CALL_OW 48
// result := IsPlaced ( unit ) ;
66693: LD_ADDR_VAR 0 4
66697: PUSH
66698: LD_VAR 0 1
66702: PPUSH
66703: CALL_OW 305
66707: ST_TO_ADDR
// exit ;
66708: POP
66709: POP
66710: GO 66716
// end ; end ;
66712: GO 66591
66714: POP
66715: POP
// end ;
66716: LD_VAR 0 4
66720: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66721: LD_INT 0
66723: PPUSH
66724: PPUSH
66725: PPUSH
// if not side or side > 8 then
66726: LD_VAR 0 1
66730: NOT
66731: PUSH
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 8
66739: GREATER
66740: OR
66741: IFFALSE 66745
// exit ;
66743: GO 66932
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66745: LD_ADDR_VAR 0 4
66749: PUSH
66750: LD_INT 22
66752: PUSH
66753: LD_VAR 0 1
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 21
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PPUSH
66776: CALL_OW 69
66780: ST_TO_ADDR
// if not tmp then
66781: LD_VAR 0 4
66785: NOT
66786: IFFALSE 66790
// exit ;
66788: GO 66932
// enable_addtolog := true ;
66790: LD_ADDR_OWVAR 81
66794: PUSH
66795: LD_INT 1
66797: ST_TO_ADDR
// AddToLog ( [ ) ;
66798: LD_STRING [
66800: PPUSH
66801: CALL_OW 561
// for i in tmp do
66805: LD_ADDR_VAR 0 3
66809: PUSH
66810: LD_VAR 0 4
66814: PUSH
66815: FOR_IN
66816: IFFALSE 66923
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66818: LD_STRING [
66820: PUSH
66821: LD_VAR 0 3
66825: PPUSH
66826: CALL_OW 266
66830: STR
66831: PUSH
66832: LD_STRING , 
66834: STR
66835: PUSH
66836: LD_VAR 0 3
66840: PPUSH
66841: CALL_OW 250
66845: STR
66846: PUSH
66847: LD_STRING , 
66849: STR
66850: PUSH
66851: LD_VAR 0 3
66855: PPUSH
66856: CALL_OW 251
66860: STR
66861: PUSH
66862: LD_STRING , 
66864: STR
66865: PUSH
66866: LD_VAR 0 3
66870: PPUSH
66871: CALL_OW 254
66875: STR
66876: PUSH
66877: LD_STRING , 
66879: STR
66880: PUSH
66881: LD_VAR 0 3
66885: PPUSH
66886: LD_INT 1
66888: PPUSH
66889: CALL_OW 268
66893: STR
66894: PUSH
66895: LD_STRING , 
66897: STR
66898: PUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: LD_INT 2
66906: PPUSH
66907: CALL_OW 268
66911: STR
66912: PUSH
66913: LD_STRING ],
66915: STR
66916: PPUSH
66917: CALL_OW 561
// end ;
66921: GO 66815
66923: POP
66924: POP
// AddToLog ( ]; ) ;
66925: LD_STRING ];
66927: PPUSH
66928: CALL_OW 561
// end ;
66932: LD_VAR 0 2
66936: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66937: LD_INT 0
66939: PPUSH
66940: PPUSH
66941: PPUSH
66942: PPUSH
66943: PPUSH
// if not area or not rate or not max then
66944: LD_VAR 0 1
66948: NOT
66949: PUSH
66950: LD_VAR 0 2
66954: NOT
66955: OR
66956: PUSH
66957: LD_VAR 0 4
66961: NOT
66962: OR
66963: IFFALSE 66967
// exit ;
66965: GO 67156
// while 1 do
66967: LD_INT 1
66969: IFFALSE 67156
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66971: LD_ADDR_VAR 0 9
66975: PUSH
66976: LD_VAR 0 1
66980: PPUSH
66981: LD_INT 1
66983: PPUSH
66984: CALL_OW 287
66988: PUSH
66989: LD_INT 10
66991: MUL
66992: ST_TO_ADDR
// r := rate / 10 ;
66993: LD_ADDR_VAR 0 7
66997: PUSH
66998: LD_VAR 0 2
67002: PUSH
67003: LD_INT 10
67005: DIVREAL
67006: ST_TO_ADDR
// time := 1 1$00 ;
67007: LD_ADDR_VAR 0 8
67011: PUSH
67012: LD_INT 2100
67014: ST_TO_ADDR
// if amount < min then
67015: LD_VAR 0 9
67019: PUSH
67020: LD_VAR 0 3
67024: LESS
67025: IFFALSE 67043
// r := r * 2 else
67027: LD_ADDR_VAR 0 7
67031: PUSH
67032: LD_VAR 0 7
67036: PUSH
67037: LD_INT 2
67039: MUL
67040: ST_TO_ADDR
67041: GO 67069
// if amount > max then
67043: LD_VAR 0 9
67047: PUSH
67048: LD_VAR 0 4
67052: GREATER
67053: IFFALSE 67069
// r := r / 2 ;
67055: LD_ADDR_VAR 0 7
67059: PUSH
67060: LD_VAR 0 7
67064: PUSH
67065: LD_INT 2
67067: DIVREAL
67068: ST_TO_ADDR
// time := time / r ;
67069: LD_ADDR_VAR 0 8
67073: PUSH
67074: LD_VAR 0 8
67078: PUSH
67079: LD_VAR 0 7
67083: DIVREAL
67084: ST_TO_ADDR
// if time < 0 then
67085: LD_VAR 0 8
67089: PUSH
67090: LD_INT 0
67092: LESS
67093: IFFALSE 67110
// time := time * - 1 ;
67095: LD_ADDR_VAR 0 8
67099: PUSH
67100: LD_VAR 0 8
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: MUL
67109: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67110: LD_VAR 0 8
67114: PUSH
67115: LD_INT 35
67117: PPUSH
67118: LD_INT 875
67120: PPUSH
67121: CALL_OW 12
67125: PLUS
67126: PPUSH
67127: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67131: LD_INT 1
67133: PPUSH
67134: LD_INT 5
67136: PPUSH
67137: CALL_OW 12
67141: PPUSH
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_INT 1
67149: PPUSH
67150: CALL_OW 55
// end ;
67154: GO 66967
// end ;
67156: LD_VAR 0 5
67160: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67161: LD_INT 0
67163: PPUSH
67164: PPUSH
67165: PPUSH
67166: PPUSH
67167: PPUSH
67168: PPUSH
67169: PPUSH
67170: PPUSH
// if not turrets or not factories then
67171: LD_VAR 0 1
67175: NOT
67176: PUSH
67177: LD_VAR 0 2
67181: NOT
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67494
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67187: LD_ADDR_VAR 0 10
67191: PUSH
67192: LD_INT 5
67194: PUSH
67195: LD_INT 6
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: LD_INT 4
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: LD_INT 5
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 24
67229: PUSH
67230: LD_INT 25
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 23
67239: PUSH
67240: LD_INT 27
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 42
67253: PUSH
67254: LD_INT 43
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 44
67263: PUSH
67264: LD_INT 46
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 45
67273: PUSH
67274: LD_INT 47
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// result := [ ] ;
67291: LD_ADDR_VAR 0 3
67295: PUSH
67296: EMPTY
67297: ST_TO_ADDR
// for i in turrets do
67298: LD_ADDR_VAR 0 4
67302: PUSH
67303: LD_VAR 0 1
67307: PUSH
67308: FOR_IN
67309: IFFALSE 67492
// begin nat := GetNation ( i ) ;
67311: LD_ADDR_VAR 0 7
67315: PUSH
67316: LD_VAR 0 4
67320: PPUSH
67321: CALL_OW 248
67325: ST_TO_ADDR
// weapon := 0 ;
67326: LD_ADDR_VAR 0 8
67330: PUSH
67331: LD_INT 0
67333: ST_TO_ADDR
// if not nat then
67334: LD_VAR 0 7
67338: NOT
67339: IFFALSE 67343
// continue ;
67341: GO 67308
// for j in list [ nat ] do
67343: LD_ADDR_VAR 0 5
67347: PUSH
67348: LD_VAR 0 10
67352: PUSH
67353: LD_VAR 0 7
67357: ARRAY
67358: PUSH
67359: FOR_IN
67360: IFFALSE 67401
// if GetBWeapon ( i ) = j [ 1 ] then
67362: LD_VAR 0 4
67366: PPUSH
67367: CALL_OW 269
67371: PUSH
67372: LD_VAR 0 5
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: EQUAL
67381: IFFALSE 67399
// begin weapon := j [ 2 ] ;
67383: LD_ADDR_VAR 0 8
67387: PUSH
67388: LD_VAR 0 5
67392: PUSH
67393: LD_INT 2
67395: ARRAY
67396: ST_TO_ADDR
// break ;
67397: GO 67401
// end ;
67399: GO 67359
67401: POP
67402: POP
// if not weapon then
67403: LD_VAR 0 8
67407: NOT
67408: IFFALSE 67412
// continue ;
67410: GO 67308
// for k in factories do
67412: LD_ADDR_VAR 0 6
67416: PUSH
67417: LD_VAR 0 2
67421: PUSH
67422: FOR_IN
67423: IFFALSE 67488
// begin weapons := AvailableWeaponList ( k ) ;
67425: LD_ADDR_VAR 0 9
67429: PUSH
67430: LD_VAR 0 6
67434: PPUSH
67435: CALL_OW 478
67439: ST_TO_ADDR
// if not weapons then
67440: LD_VAR 0 9
67444: NOT
67445: IFFALSE 67449
// continue ;
67447: GO 67422
// if weapon in weapons then
67449: LD_VAR 0 8
67453: PUSH
67454: LD_VAR 0 9
67458: IN
67459: IFFALSE 67486
// begin result := [ i , weapon ] ;
67461: LD_ADDR_VAR 0 3
67465: PUSH
67466: LD_VAR 0 4
67470: PUSH
67471: LD_VAR 0 8
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: ST_TO_ADDR
// exit ;
67480: POP
67481: POP
67482: POP
67483: POP
67484: GO 67494
// end ; end ;
67486: GO 67422
67488: POP
67489: POP
// end ;
67490: GO 67308
67492: POP
67493: POP
// end ;
67494: LD_VAR 0 3
67498: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67499: LD_INT 0
67501: PPUSH
// if not side or side > 8 then
67502: LD_VAR 0 3
67506: NOT
67507: PUSH
67508: LD_VAR 0 3
67512: PUSH
67513: LD_INT 8
67515: GREATER
67516: OR
67517: IFFALSE 67521
// exit ;
67519: GO 67580
// if not range then
67521: LD_VAR 0 4
67525: NOT
67526: IFFALSE 67537
// range := - 12 ;
67528: LD_ADDR_VAR 0 4
67532: PUSH
67533: LD_INT 12
67535: NEG
67536: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67537: LD_VAR 0 1
67541: PPUSH
67542: LD_VAR 0 2
67546: PPUSH
67547: LD_VAR 0 3
67551: PPUSH
67552: LD_VAR 0 4
67556: PPUSH
67557: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67561: LD_VAR 0 1
67565: PPUSH
67566: LD_VAR 0 2
67570: PPUSH
67571: LD_VAR 0 3
67575: PPUSH
67576: CALL_OW 331
// end ;
67580: LD_VAR 0 5
67584: RET
// export function Video ( mode ) ; begin
67585: LD_INT 0
67587: PPUSH
// ingame_video = mode ;
67588: LD_ADDR_OWVAR 52
67592: PUSH
67593: LD_VAR 0 1
67597: ST_TO_ADDR
// interface_hidden = mode ;
67598: LD_ADDR_OWVAR 54
67602: PUSH
67603: LD_VAR 0 1
67607: ST_TO_ADDR
// end ;
67608: LD_VAR 0 2
67612: RET
// export function Join ( array , element ) ; begin
67613: LD_INT 0
67615: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67616: LD_ADDR_VAR 0 3
67620: PUSH
67621: LD_VAR 0 1
67625: PPUSH
67626: LD_VAR 0 1
67630: PUSH
67631: LD_INT 1
67633: PLUS
67634: PPUSH
67635: LD_VAR 0 2
67639: PPUSH
67640: CALL_OW 1
67644: ST_TO_ADDR
// end ;
67645: LD_VAR 0 3
67649: RET
// export function JoinUnion ( array , element ) ; begin
67650: LD_INT 0
67652: PPUSH
// result := array union element ;
67653: LD_ADDR_VAR 0 3
67657: PUSH
67658: LD_VAR 0 1
67662: PUSH
67663: LD_VAR 0 2
67667: UNION
67668: ST_TO_ADDR
// end ;
67669: LD_VAR 0 3
67673: RET
// export function GetBehemoths ( side ) ; begin
67674: LD_INT 0
67676: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67677: LD_ADDR_VAR 0 2
67681: PUSH
67682: LD_INT 22
67684: PUSH
67685: LD_VAR 0 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 31
67696: PUSH
67697: LD_INT 25
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PPUSH
67708: CALL_OW 69
67712: ST_TO_ADDR
// end ;
67713: LD_VAR 0 2
67717: RET
// export function Shuffle ( array ) ; var i , index ; begin
67718: LD_INT 0
67720: PPUSH
67721: PPUSH
67722: PPUSH
// result := [ ] ;
67723: LD_ADDR_VAR 0 2
67727: PUSH
67728: EMPTY
67729: ST_TO_ADDR
// if not array then
67730: LD_VAR 0 1
67734: NOT
67735: IFFALSE 67739
// exit ;
67737: GO 67838
// Randomize ;
67739: CALL_OW 10
// for i = array downto 1 do
67743: LD_ADDR_VAR 0 3
67747: PUSH
67748: DOUBLE
67749: LD_VAR 0 1
67753: INC
67754: ST_TO_ADDR
67755: LD_INT 1
67757: PUSH
67758: FOR_DOWNTO
67759: IFFALSE 67836
// begin index := rand ( 1 , array ) ;
67761: LD_ADDR_VAR 0 4
67765: PUSH
67766: LD_INT 1
67768: PPUSH
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 12
67778: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67779: LD_ADDR_VAR 0 2
67783: PUSH
67784: LD_VAR 0 2
67788: PPUSH
67789: LD_VAR 0 2
67793: PUSH
67794: LD_INT 1
67796: PLUS
67797: PPUSH
67798: LD_VAR 0 1
67802: PUSH
67803: LD_VAR 0 4
67807: ARRAY
67808: PPUSH
67809: CALL_OW 2
67813: ST_TO_ADDR
// array := Delete ( array , index ) ;
67814: LD_ADDR_VAR 0 1
67818: PUSH
67819: LD_VAR 0 1
67823: PPUSH
67824: LD_VAR 0 4
67828: PPUSH
67829: CALL_OW 3
67833: ST_TO_ADDR
// end ;
67834: GO 67758
67836: POP
67837: POP
// end ;
67838: LD_VAR 0 2
67842: RET
// export function GetBaseMaterials ( base ) ; begin
67843: LD_INT 0
67845: PPUSH
// result := [ 0 , 0 , 0 ] ;
67846: LD_ADDR_VAR 0 2
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: ST_TO_ADDR
// if not base then
67865: LD_VAR 0 1
67869: NOT
67870: IFFALSE 67874
// exit ;
67872: GO 67923
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67874: LD_ADDR_VAR 0 2
67878: PUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: LD_INT 1
67886: PPUSH
67887: CALL_OW 275
67891: PUSH
67892: LD_VAR 0 1
67896: PPUSH
67897: LD_INT 2
67899: PPUSH
67900: CALL_OW 275
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_INT 3
67912: PPUSH
67913: CALL_OW 275
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: ST_TO_ADDR
// end ;
67923: LD_VAR 0 2
67927: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67928: LD_INT 0
67930: PPUSH
67931: PPUSH
// result := array ;
67932: LD_ADDR_VAR 0 3
67936: PUSH
67937: LD_VAR 0 1
67941: ST_TO_ADDR
// if size >= result then
67942: LD_VAR 0 2
67946: PUSH
67947: LD_VAR 0 3
67951: GREATEREQUAL
67952: IFFALSE 67956
// exit ;
67954: GO 68006
// if size then
67956: LD_VAR 0 2
67960: IFFALSE 68006
// for i := array downto size do
67962: LD_ADDR_VAR 0 4
67966: PUSH
67967: DOUBLE
67968: LD_VAR 0 1
67972: INC
67973: ST_TO_ADDR
67974: LD_VAR 0 2
67978: PUSH
67979: FOR_DOWNTO
67980: IFFALSE 68004
// result := Delete ( result , result ) ;
67982: LD_ADDR_VAR 0 3
67986: PUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: LD_VAR 0 3
67996: PPUSH
67997: CALL_OW 3
68001: ST_TO_ADDR
68002: GO 67979
68004: POP
68005: POP
// end ;
68006: LD_VAR 0 3
68010: RET
// export function ComExit ( unit ) ; var tmp ; begin
68011: LD_INT 0
68013: PPUSH
68014: PPUSH
// if not IsInUnit ( unit ) then
68015: LD_VAR 0 1
68019: PPUSH
68020: CALL_OW 310
68024: NOT
68025: IFFALSE 68029
// exit ;
68027: GO 68089
// tmp := IsInUnit ( unit ) ;
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 310
68043: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68044: LD_VAR 0 3
68048: PPUSH
68049: CALL_OW 247
68053: PUSH
68054: LD_INT 2
68056: EQUAL
68057: IFFALSE 68070
// ComExitVehicle ( unit ) else
68059: LD_VAR 0 1
68063: PPUSH
68064: CALL_OW 121
68068: GO 68079
// ComExitBuilding ( unit ) ;
68070: LD_VAR 0 1
68074: PPUSH
68075: CALL_OW 122
// result := tmp ;
68079: LD_ADDR_VAR 0 2
68083: PUSH
68084: LD_VAR 0 3
68088: ST_TO_ADDR
// end ;
68089: LD_VAR 0 2
68093: RET
// export function ComExitAll ( units ) ; var i ; begin
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
// if not units then
68098: LD_VAR 0 1
68102: NOT
68103: IFFALSE 68107
// exit ;
68105: GO 68133
// for i in units do
68107: LD_ADDR_VAR 0 3
68111: PUSH
68112: LD_VAR 0 1
68116: PUSH
68117: FOR_IN
68118: IFFALSE 68131
// ComExit ( i ) ;
68120: LD_VAR 0 3
68124: PPUSH
68125: CALL 68011 0 1
68129: GO 68117
68131: POP
68132: POP
// end ;
68133: LD_VAR 0 2
68137: RET
// export function ResetHc ; begin
68138: LD_INT 0
68140: PPUSH
// InitHc ;
68141: CALL_OW 19
// hc_importance := 0 ;
68145: LD_ADDR_OWVAR 32
68149: PUSH
68150: LD_INT 0
68152: ST_TO_ADDR
// end ;
68153: LD_VAR 0 1
68157: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68158: LD_INT 0
68160: PPUSH
68161: PPUSH
68162: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68163: LD_ADDR_VAR 0 6
68167: PUSH
68168: LD_VAR 0 1
68172: PUSH
68173: LD_VAR 0 3
68177: PLUS
68178: PUSH
68179: LD_INT 2
68181: DIV
68182: ST_TO_ADDR
// if _x < 0 then
68183: LD_VAR 0 6
68187: PUSH
68188: LD_INT 0
68190: LESS
68191: IFFALSE 68208
// _x := _x * - 1 ;
68193: LD_ADDR_VAR 0 6
68197: PUSH
68198: LD_VAR 0 6
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: MUL
68207: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68208: LD_ADDR_VAR 0 7
68212: PUSH
68213: LD_VAR 0 2
68217: PUSH
68218: LD_VAR 0 4
68222: PLUS
68223: PUSH
68224: LD_INT 2
68226: DIV
68227: ST_TO_ADDR
// if _y < 0 then
68228: LD_VAR 0 7
68232: PUSH
68233: LD_INT 0
68235: LESS
68236: IFFALSE 68253
// _y := _y * - 1 ;
68238: LD_ADDR_VAR 0 7
68242: PUSH
68243: LD_VAR 0 7
68247: PUSH
68248: LD_INT 1
68250: NEG
68251: MUL
68252: ST_TO_ADDR
// result := [ _x , _y ] ;
68253: LD_ADDR_VAR 0 5
68257: PUSH
68258: LD_VAR 0 6
68262: PUSH
68263: LD_VAR 0 7
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// end ;
68272: LD_VAR 0 5
68276: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68277: LD_INT 0
68279: PPUSH
68280: PPUSH
68281: PPUSH
68282: PPUSH
// task := GetTaskList ( unit ) ;
68283: LD_ADDR_VAR 0 7
68287: PUSH
68288: LD_VAR 0 1
68292: PPUSH
68293: CALL_OW 437
68297: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68298: LD_VAR 0 7
68302: NOT
68303: PUSH
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_VAR 0 2
68313: PPUSH
68314: CALL_OW 308
68318: NOT
68319: AND
68320: IFFALSE 68324
// exit ;
68322: GO 68442
// if IsInArea ( unit , area ) then
68324: LD_VAR 0 1
68328: PPUSH
68329: LD_VAR 0 2
68333: PPUSH
68334: CALL_OW 308
68338: IFFALSE 68356
// begin ComMoveToArea ( unit , goAway ) ;
68340: LD_VAR 0 1
68344: PPUSH
68345: LD_VAR 0 3
68349: PPUSH
68350: CALL_OW 113
// exit ;
68354: GO 68442
// end ; if task [ 1 ] [ 1 ] <> M then
68356: LD_VAR 0 7
68360: PUSH
68361: LD_INT 1
68363: ARRAY
68364: PUSH
68365: LD_INT 1
68367: ARRAY
68368: PUSH
68369: LD_STRING M
68371: NONEQUAL
68372: IFFALSE 68376
// exit ;
68374: GO 68442
// x := task [ 1 ] [ 2 ] ;
68376: LD_ADDR_VAR 0 5
68380: PUSH
68381: LD_VAR 0 7
68385: PUSH
68386: LD_INT 1
68388: ARRAY
68389: PUSH
68390: LD_INT 2
68392: ARRAY
68393: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68394: LD_ADDR_VAR 0 6
68398: PUSH
68399: LD_VAR 0 7
68403: PUSH
68404: LD_INT 1
68406: ARRAY
68407: PUSH
68408: LD_INT 3
68410: ARRAY
68411: ST_TO_ADDR
// if InArea ( x , y , area ) then
68412: LD_VAR 0 5
68416: PPUSH
68417: LD_VAR 0 6
68421: PPUSH
68422: LD_VAR 0 2
68426: PPUSH
68427: CALL_OW 309
68431: IFFALSE 68442
// ComStop ( unit ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 141
// end ;
68442: LD_VAR 0 4
68446: RET
// export function Abs ( value ) ; begin
68447: LD_INT 0
68449: PPUSH
// result := value ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_VAR 0 1
68459: ST_TO_ADDR
// if value < 0 then
68460: LD_VAR 0 1
68464: PUSH
68465: LD_INT 0
68467: LESS
68468: IFFALSE 68485
// result := value * - 1 ;
68470: LD_ADDR_VAR 0 2
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: MUL
68484: ST_TO_ADDR
// end ;
68485: LD_VAR 0 2
68489: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68490: LD_INT 0
68492: PPUSH
68493: PPUSH
68494: PPUSH
68495: PPUSH
68496: PPUSH
68497: PPUSH
68498: PPUSH
68499: PPUSH
// if not unit or not building then
68500: LD_VAR 0 1
68504: NOT
68505: PUSH
68506: LD_VAR 0 2
68510: NOT
68511: OR
68512: IFFALSE 68516
// exit ;
68514: GO 68742
// x := GetX ( building ) ;
68516: LD_ADDR_VAR 0 4
68520: PUSH
68521: LD_VAR 0 2
68525: PPUSH
68526: CALL_OW 250
68530: ST_TO_ADDR
// y := GetY ( building ) ;
68531: LD_ADDR_VAR 0 6
68535: PUSH
68536: LD_VAR 0 2
68540: PPUSH
68541: CALL_OW 251
68545: ST_TO_ADDR
// d := GetDir ( building ) ;
68546: LD_ADDR_VAR 0 8
68550: PUSH
68551: LD_VAR 0 2
68555: PPUSH
68556: CALL_OW 254
68560: ST_TO_ADDR
// r := 4 ;
68561: LD_ADDR_VAR 0 9
68565: PUSH
68566: LD_INT 4
68568: ST_TO_ADDR
// for i := 1 to 5 do
68569: LD_ADDR_VAR 0 10
68573: PUSH
68574: DOUBLE
68575: LD_INT 1
68577: DEC
68578: ST_TO_ADDR
68579: LD_INT 5
68581: PUSH
68582: FOR_TO
68583: IFFALSE 68740
// begin _x := ShiftX ( x , d , r + i ) ;
68585: LD_ADDR_VAR 0 5
68589: PUSH
68590: LD_VAR 0 4
68594: PPUSH
68595: LD_VAR 0 8
68599: PPUSH
68600: LD_VAR 0 9
68604: PUSH
68605: LD_VAR 0 10
68609: PLUS
68610: PPUSH
68611: CALL_OW 272
68615: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68616: LD_ADDR_VAR 0 7
68620: PUSH
68621: LD_VAR 0 6
68625: PPUSH
68626: LD_VAR 0 8
68630: PPUSH
68631: LD_VAR 0 9
68635: PUSH
68636: LD_VAR 0 10
68640: PLUS
68641: PPUSH
68642: CALL_OW 273
68646: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68647: LD_VAR 0 5
68651: PPUSH
68652: LD_VAR 0 7
68656: PPUSH
68657: CALL_OW 488
68661: PUSH
68662: LD_VAR 0 5
68666: PPUSH
68667: LD_VAR 0 7
68671: PPUSH
68672: CALL_OW 428
68676: PPUSH
68677: CALL_OW 247
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: IN
68692: NOT
68693: AND
68694: IFFALSE 68738
// begin ComMoveXY ( unit , _x , _y ) ;
68696: LD_VAR 0 1
68700: PPUSH
68701: LD_VAR 0 5
68705: PPUSH
68706: LD_VAR 0 7
68710: PPUSH
68711: CALL_OW 111
// result := [ _x , _y ] ;
68715: LD_ADDR_VAR 0 3
68719: PUSH
68720: LD_VAR 0 5
68724: PUSH
68725: LD_VAR 0 7
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// exit ;
68734: POP
68735: POP
68736: GO 68742
// end ; end ;
68738: GO 68582
68740: POP
68741: POP
// end ;
68742: LD_VAR 0 3
68746: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68747: LD_INT 0
68749: PPUSH
68750: PPUSH
68751: PPUSH
// result := 0 ;
68752: LD_ADDR_VAR 0 3
68756: PUSH
68757: LD_INT 0
68759: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68760: LD_VAR 0 1
68764: PUSH
68765: LD_INT 0
68767: LESS
68768: PUSH
68769: LD_VAR 0 1
68773: PUSH
68774: LD_INT 8
68776: GREATER
68777: OR
68778: PUSH
68779: LD_VAR 0 2
68783: PUSH
68784: LD_INT 0
68786: LESS
68787: OR
68788: PUSH
68789: LD_VAR 0 2
68793: PUSH
68794: LD_INT 8
68796: GREATER
68797: OR
68798: IFFALSE 68802
// exit ;
68800: GO 68877
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68802: LD_ADDR_VAR 0 4
68806: PUSH
68807: LD_INT 22
68809: PUSH
68810: LD_VAR 0 2
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PPUSH
68819: CALL_OW 69
68823: PUSH
68824: FOR_IN
68825: IFFALSE 68875
// begin un := UnitShoot ( i ) ;
68827: LD_ADDR_VAR 0 5
68831: PUSH
68832: LD_VAR 0 4
68836: PPUSH
68837: CALL_OW 504
68841: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68842: LD_VAR 0 5
68846: PPUSH
68847: CALL_OW 255
68851: PUSH
68852: LD_VAR 0 1
68856: EQUAL
68857: IFFALSE 68873
// begin result := un ;
68859: LD_ADDR_VAR 0 3
68863: PUSH
68864: LD_VAR 0 5
68868: ST_TO_ADDR
// exit ;
68869: POP
68870: POP
68871: GO 68877
// end ; end ;
68873: GO 68824
68875: POP
68876: POP
// end ;
68877: LD_VAR 0 3
68881: RET
// export function GetCargoBay ( units ) ; begin
68882: LD_INT 0
68884: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68885: LD_ADDR_VAR 0 2
68889: PUSH
68890: LD_VAR 0 1
68894: PPUSH
68895: LD_INT 2
68897: PUSH
68898: LD_INT 34
68900: PUSH
68901: LD_INT 12
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 34
68910: PUSH
68911: LD_INT 51
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 34
68920: PUSH
68921: LD_INT 32
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 34
68930: PUSH
68931: LD_INT 89
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: PPUSH
68945: CALL_OW 72
68949: ST_TO_ADDR
// end ;
68950: LD_VAR 0 2
68954: RET
// export function Negate ( value ) ; begin
68955: LD_INT 0
68957: PPUSH
// result := not value ;
68958: LD_ADDR_VAR 0 2
68962: PUSH
68963: LD_VAR 0 1
68967: NOT
68968: ST_TO_ADDR
// end ;
68969: LD_VAR 0 2
68973: RET
// export function Inc ( value ) ; begin
68974: LD_INT 0
68976: PPUSH
// result := value + 1 ;
68977: LD_ADDR_VAR 0 2
68981: PUSH
68982: LD_VAR 0 1
68986: PUSH
68987: LD_INT 1
68989: PLUS
68990: ST_TO_ADDR
// end ;
68991: LD_VAR 0 2
68995: RET
// export function Dec ( value ) ; begin
68996: LD_INT 0
68998: PPUSH
// result := value - 1 ;
68999: LD_ADDR_VAR 0 2
69003: PUSH
69004: LD_VAR 0 1
69008: PUSH
69009: LD_INT 1
69011: MINUS
69012: ST_TO_ADDR
// end ;
69013: LD_VAR 0 2
69017: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69018: LD_INT 0
69020: PPUSH
69021: PPUSH
69022: PPUSH
69023: PPUSH
69024: PPUSH
69025: PPUSH
69026: PPUSH
69027: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69028: LD_VAR 0 1
69032: PPUSH
69033: LD_VAR 0 2
69037: PPUSH
69038: CALL_OW 488
69042: NOT
69043: PUSH
69044: LD_VAR 0 3
69048: PPUSH
69049: LD_VAR 0 4
69053: PPUSH
69054: CALL_OW 488
69058: NOT
69059: OR
69060: IFFALSE 69073
// begin result := - 1 ;
69062: LD_ADDR_VAR 0 5
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: ST_TO_ADDR
// exit ;
69071: GO 69308
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69073: LD_ADDR_VAR 0 12
69077: PUSH
69078: LD_VAR 0 1
69082: PPUSH
69083: LD_VAR 0 2
69087: PPUSH
69088: LD_VAR 0 3
69092: PPUSH
69093: LD_VAR 0 4
69097: PPUSH
69098: CALL 68158 0 4
69102: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69103: LD_ADDR_VAR 0 11
69107: PUSH
69108: LD_VAR 0 1
69112: PPUSH
69113: LD_VAR 0 2
69117: PPUSH
69118: LD_VAR 0 12
69122: PUSH
69123: LD_INT 1
69125: ARRAY
69126: PPUSH
69127: LD_VAR 0 12
69131: PUSH
69132: LD_INT 2
69134: ARRAY
69135: PPUSH
69136: CALL_OW 298
69140: ST_TO_ADDR
// distance := 9999 ;
69141: LD_ADDR_VAR 0 10
69145: PUSH
69146: LD_INT 9999
69148: ST_TO_ADDR
// for i := 0 to 5 do
69149: LD_ADDR_VAR 0 6
69153: PUSH
69154: DOUBLE
69155: LD_INT 0
69157: DEC
69158: ST_TO_ADDR
69159: LD_INT 5
69161: PUSH
69162: FOR_TO
69163: IFFALSE 69306
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69165: LD_ADDR_VAR 0 7
69169: PUSH
69170: LD_VAR 0 1
69174: PPUSH
69175: LD_VAR 0 6
69179: PPUSH
69180: LD_VAR 0 11
69184: PPUSH
69185: CALL_OW 272
69189: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69190: LD_ADDR_VAR 0 8
69194: PUSH
69195: LD_VAR 0 2
69199: PPUSH
69200: LD_VAR 0 6
69204: PPUSH
69205: LD_VAR 0 11
69209: PPUSH
69210: CALL_OW 273
69214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69215: LD_VAR 0 7
69219: PPUSH
69220: LD_VAR 0 8
69224: PPUSH
69225: CALL_OW 488
69229: NOT
69230: IFFALSE 69234
// continue ;
69232: GO 69162
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69234: LD_ADDR_VAR 0 9
69238: PUSH
69239: LD_VAR 0 12
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PPUSH
69248: LD_VAR 0 12
69252: PUSH
69253: LD_INT 2
69255: ARRAY
69256: PPUSH
69257: LD_VAR 0 7
69261: PPUSH
69262: LD_VAR 0 8
69266: PPUSH
69267: CALL_OW 298
69271: ST_TO_ADDR
// if tmp < distance then
69272: LD_VAR 0 9
69276: PUSH
69277: LD_VAR 0 10
69281: LESS
69282: IFFALSE 69304
// begin result := i ;
69284: LD_ADDR_VAR 0 5
69288: PUSH
69289: LD_VAR 0 6
69293: ST_TO_ADDR
// distance := tmp ;
69294: LD_ADDR_VAR 0 10
69298: PUSH
69299: LD_VAR 0 9
69303: ST_TO_ADDR
// end ; end ;
69304: GO 69162
69306: POP
69307: POP
// end ;
69308: LD_VAR 0 5
69312: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69313: LD_INT 0
69315: PPUSH
69316: PPUSH
// if not driver or not IsInUnit ( driver ) then
69317: LD_VAR 0 1
69321: NOT
69322: PUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: CALL_OW 310
69332: NOT
69333: OR
69334: IFFALSE 69338
// exit ;
69336: GO 69428
// vehicle := IsInUnit ( driver ) ;
69338: LD_ADDR_VAR 0 3
69342: PUSH
69343: LD_VAR 0 1
69347: PPUSH
69348: CALL_OW 310
69352: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69353: LD_VAR 0 1
69357: PPUSH
69358: LD_STRING \
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: PUSH
69388: LD_STRING E
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: LD_VAR 0 3
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PPUSH
69424: CALL_OW 446
// end ;
69428: LD_VAR 0 2
69432: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69433: LD_INT 0
69435: PPUSH
69436: PPUSH
// if not driver or not IsInUnit ( driver ) then
69437: LD_VAR 0 1
69441: NOT
69442: PUSH
69443: LD_VAR 0 1
69447: PPUSH
69448: CALL_OW 310
69452: NOT
69453: OR
69454: IFFALSE 69458
// exit ;
69456: GO 69548
// vehicle := IsInUnit ( driver ) ;
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 1
69467: PPUSH
69468: CALL_OW 310
69472: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69473: LD_VAR 0 1
69477: PPUSH
69478: LD_STRING \
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_INT 0
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: LD_STRING E
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: LD_VAR 0 3
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PPUSH
69544: CALL_OW 447
// end ;
69548: LD_VAR 0 2
69552: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69553: LD_INT 0
69555: PPUSH
69556: PPUSH
69557: PPUSH
// tmp := [ ] ;
69558: LD_ADDR_VAR 0 5
69562: PUSH
69563: EMPTY
69564: ST_TO_ADDR
// for i in units do
69565: LD_ADDR_VAR 0 4
69569: PUSH
69570: LD_VAR 0 1
69574: PUSH
69575: FOR_IN
69576: IFFALSE 69614
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69578: LD_ADDR_VAR 0 5
69582: PUSH
69583: LD_VAR 0 5
69587: PPUSH
69588: LD_VAR 0 5
69592: PUSH
69593: LD_INT 1
69595: PLUS
69596: PPUSH
69597: LD_VAR 0 4
69601: PPUSH
69602: CALL_OW 256
69606: PPUSH
69607: CALL_OW 2
69611: ST_TO_ADDR
69612: GO 69575
69614: POP
69615: POP
// if not tmp then
69616: LD_VAR 0 5
69620: NOT
69621: IFFALSE 69625
// exit ;
69623: GO 69673
// if asc then
69625: LD_VAR 0 2
69629: IFFALSE 69653
// result := SortListByListAsc ( units , tmp ) else
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_VAR 0 1
69640: PPUSH
69641: LD_VAR 0 5
69645: PPUSH
69646: CALL_OW 76
69650: ST_TO_ADDR
69651: GO 69673
// result := SortListByListDesc ( units , tmp ) ;
69653: LD_ADDR_VAR 0 3
69657: PUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: LD_VAR 0 5
69667: PPUSH
69668: CALL_OW 77
69672: ST_TO_ADDR
// end ;
69673: LD_VAR 0 3
69677: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69678: LD_INT 0
69680: PPUSH
69681: PPUSH
// task := GetTaskList ( mech ) ;
69682: LD_ADDR_VAR 0 4
69686: PUSH
69687: LD_VAR 0 1
69691: PPUSH
69692: CALL_OW 437
69696: ST_TO_ADDR
// if not task then
69697: LD_VAR 0 4
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 69748
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69706: LD_ADDR_VAR 0 3
69710: PUSH
69711: LD_VAR 0 4
69715: PUSH
69716: LD_INT 1
69718: ARRAY
69719: PUSH
69720: LD_INT 1
69722: ARRAY
69723: PUSH
69724: LD_STRING r
69726: EQUAL
69727: PUSH
69728: LD_VAR 0 4
69732: PUSH
69733: LD_INT 1
69735: ARRAY
69736: PUSH
69737: LD_INT 4
69739: ARRAY
69740: PUSH
69741: LD_VAR 0 2
69745: EQUAL
69746: AND
69747: ST_TO_ADDR
// end ;
69748: LD_VAR 0 3
69752: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69753: LD_INT 0
69755: PPUSH
// SetDir ( unit , d ) ;
69756: LD_VAR 0 1
69760: PPUSH
69761: LD_VAR 0 4
69765: PPUSH
69766: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69770: LD_VAR 0 1
69774: PPUSH
69775: LD_VAR 0 2
69779: PPUSH
69780: LD_VAR 0 3
69784: PPUSH
69785: LD_VAR 0 5
69789: PPUSH
69790: CALL_OW 48
// end ;
69794: LD_VAR 0 6
69798: RET
// export function ToNaturalNumber ( number ) ; begin
69799: LD_INT 0
69801: PPUSH
// result := number div 1 ;
69802: LD_ADDR_VAR 0 2
69806: PUSH
69807: LD_VAR 0 1
69811: PUSH
69812: LD_INT 1
69814: DIV
69815: ST_TO_ADDR
// if number < 0 then
69816: LD_VAR 0 1
69820: PUSH
69821: LD_INT 0
69823: LESS
69824: IFFALSE 69834
// result := 0 ;
69826: LD_ADDR_VAR 0 2
69830: PUSH
69831: LD_INT 0
69833: ST_TO_ADDR
// end ;
69834: LD_VAR 0 2
69838: RET
// export function SortByClass ( units , class ) ; var un ; begin
69839: LD_INT 0
69841: PPUSH
69842: PPUSH
// if not units or not class then
69843: LD_VAR 0 1
69847: NOT
69848: PUSH
69849: LD_VAR 0 2
69853: NOT
69854: OR
69855: IFFALSE 69859
// exit ;
69857: GO 69954
// result := [ ] ;
69859: LD_ADDR_VAR 0 3
69863: PUSH
69864: EMPTY
69865: ST_TO_ADDR
// for un in units do
69866: LD_ADDR_VAR 0 4
69870: PUSH
69871: LD_VAR 0 1
69875: PUSH
69876: FOR_IN
69877: IFFALSE 69952
// if GetClass ( un ) = class then
69879: LD_VAR 0 4
69883: PPUSH
69884: CALL_OW 257
69888: PUSH
69889: LD_VAR 0 2
69893: EQUAL
69894: IFFALSE 69921
// result := Insert ( result , 1 , un ) else
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: LD_VAR 0 3
69905: PPUSH
69906: LD_INT 1
69908: PPUSH
69909: LD_VAR 0 4
69913: PPUSH
69914: CALL_OW 2
69918: ST_TO_ADDR
69919: GO 69950
// result := Replace ( result , result + 1 , un ) ;
69921: LD_ADDR_VAR 0 3
69925: PUSH
69926: LD_VAR 0 3
69930: PPUSH
69931: LD_VAR 0 3
69935: PUSH
69936: LD_INT 1
69938: PLUS
69939: PPUSH
69940: LD_VAR 0 4
69944: PPUSH
69945: CALL_OW 1
69949: ST_TO_ADDR
69950: GO 69876
69952: POP
69953: POP
// end ;
69954: LD_VAR 0 3
69958: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69959: LD_INT 0
69961: PPUSH
69962: PPUSH
69963: PPUSH
69964: PPUSH
69965: PPUSH
69966: PPUSH
69967: PPUSH
// result := [ ] ;
69968: LD_ADDR_VAR 0 4
69972: PUSH
69973: EMPTY
69974: ST_TO_ADDR
// if x - r < 0 then
69975: LD_VAR 0 1
69979: PUSH
69980: LD_VAR 0 3
69984: MINUS
69985: PUSH
69986: LD_INT 0
69988: LESS
69989: IFFALSE 70001
// min_x := 0 else
69991: LD_ADDR_VAR 0 8
69995: PUSH
69996: LD_INT 0
69998: ST_TO_ADDR
69999: GO 70017
// min_x := x - r ;
70001: LD_ADDR_VAR 0 8
70005: PUSH
70006: LD_VAR 0 1
70010: PUSH
70011: LD_VAR 0 3
70015: MINUS
70016: ST_TO_ADDR
// if y - r < 0 then
70017: LD_VAR 0 2
70021: PUSH
70022: LD_VAR 0 3
70026: MINUS
70027: PUSH
70028: LD_INT 0
70030: LESS
70031: IFFALSE 70043
// min_y := 0 else
70033: LD_ADDR_VAR 0 7
70037: PUSH
70038: LD_INT 0
70040: ST_TO_ADDR
70041: GO 70059
// min_y := y - r ;
70043: LD_ADDR_VAR 0 7
70047: PUSH
70048: LD_VAR 0 2
70052: PUSH
70053: LD_VAR 0 3
70057: MINUS
70058: ST_TO_ADDR
// max_x := x + r ;
70059: LD_ADDR_VAR 0 9
70063: PUSH
70064: LD_VAR 0 1
70068: PUSH
70069: LD_VAR 0 3
70073: PLUS
70074: ST_TO_ADDR
// max_y := y + r ;
70075: LD_ADDR_VAR 0 10
70079: PUSH
70080: LD_VAR 0 2
70084: PUSH
70085: LD_VAR 0 3
70089: PLUS
70090: ST_TO_ADDR
// for _x = min_x to max_x do
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: DOUBLE
70097: LD_VAR 0 8
70101: DEC
70102: ST_TO_ADDR
70103: LD_VAR 0 9
70107: PUSH
70108: FOR_TO
70109: IFFALSE 70210
// for _y = min_y to max_y do
70111: LD_ADDR_VAR 0 6
70115: PUSH
70116: DOUBLE
70117: LD_VAR 0 7
70121: DEC
70122: ST_TO_ADDR
70123: LD_VAR 0 10
70127: PUSH
70128: FOR_TO
70129: IFFALSE 70206
// begin if not ValidHex ( _x , _y ) then
70131: LD_VAR 0 5
70135: PPUSH
70136: LD_VAR 0 6
70140: PPUSH
70141: CALL_OW 488
70145: NOT
70146: IFFALSE 70150
// continue ;
70148: GO 70128
// if GetResourceTypeXY ( _x , _y ) then
70150: LD_VAR 0 5
70154: PPUSH
70155: LD_VAR 0 6
70159: PPUSH
70160: CALL_OW 283
70164: IFFALSE 70204
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70166: LD_ADDR_VAR 0 4
70170: PUSH
70171: LD_VAR 0 4
70175: PPUSH
70176: LD_VAR 0 4
70180: PUSH
70181: LD_INT 1
70183: PLUS
70184: PPUSH
70185: LD_VAR 0 5
70189: PUSH
70190: LD_VAR 0 6
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PPUSH
70199: CALL_OW 1
70203: ST_TO_ADDR
// end ;
70204: GO 70128
70206: POP
70207: POP
70208: GO 70108
70210: POP
70211: POP
// end ;
70212: LD_VAR 0 4
70216: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70217: LD_INT 0
70219: PPUSH
70220: PPUSH
70221: PPUSH
70222: PPUSH
70223: PPUSH
70224: PPUSH
70225: PPUSH
70226: PPUSH
// if not units then
70227: LD_VAR 0 1
70231: NOT
70232: IFFALSE 70236
// exit ;
70234: GO 70760
// result := UnitFilter ( units , [ f_ok ] ) ;
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_INT 50
70248: PUSH
70249: EMPTY
70250: LIST
70251: PPUSH
70252: CALL_OW 72
70256: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70257: LD_ADDR_VAR 0 8
70261: PUSH
70262: LD_VAR 0 1
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: PPUSH
70271: CALL_OW 255
70275: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70276: LD_ADDR_VAR 0 10
70280: PUSH
70281: LD_INT 29
70283: PUSH
70284: LD_INT 91
70286: PUSH
70287: LD_INT 49
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: ST_TO_ADDR
// if not result then
70295: LD_VAR 0 3
70299: NOT
70300: IFFALSE 70304
// exit ;
70302: GO 70760
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70304: LD_ADDR_VAR 0 5
70308: PUSH
70309: LD_INT 81
70311: PUSH
70312: LD_VAR 0 8
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 69
70325: ST_TO_ADDR
// for i in result do
70326: LD_ADDR_VAR 0 4
70330: PUSH
70331: LD_VAR 0 3
70335: PUSH
70336: FOR_IN
70337: IFFALSE 70758
// begin tag := GetTag ( i ) + 1 ;
70339: LD_ADDR_VAR 0 9
70343: PUSH
70344: LD_VAR 0 4
70348: PPUSH
70349: CALL_OW 110
70353: PUSH
70354: LD_INT 1
70356: PLUS
70357: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70358: LD_ADDR_VAR 0 7
70362: PUSH
70363: LD_VAR 0 4
70367: PPUSH
70368: CALL_OW 250
70372: PPUSH
70373: LD_VAR 0 4
70377: PPUSH
70378: CALL_OW 251
70382: PPUSH
70383: LD_INT 6
70385: PPUSH
70386: CALL 69959 0 3
70390: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70391: LD_VAR 0 4
70395: PPUSH
70396: CALL_OW 247
70400: PUSH
70401: LD_INT 2
70403: EQUAL
70404: PUSH
70405: LD_VAR 0 7
70409: AND
70410: PUSH
70411: LD_VAR 0 4
70415: PPUSH
70416: CALL_OW 264
70420: PUSH
70421: LD_VAR 0 10
70425: IN
70426: NOT
70427: AND
70428: IFFALSE 70467
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70430: LD_VAR 0 4
70434: PPUSH
70435: LD_VAR 0 7
70439: PUSH
70440: LD_INT 1
70442: ARRAY
70443: PUSH
70444: LD_INT 1
70446: ARRAY
70447: PPUSH
70448: LD_VAR 0 7
70452: PUSH
70453: LD_INT 1
70455: ARRAY
70456: PUSH
70457: LD_INT 2
70459: ARRAY
70460: PPUSH
70461: CALL_OW 116
70465: GO 70756
// if path > tag then
70467: LD_VAR 0 2
70471: PUSH
70472: LD_VAR 0 9
70476: GREATER
70477: IFFALSE 70685
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70479: LD_ADDR_VAR 0 6
70483: PUSH
70484: LD_VAR 0 5
70488: PPUSH
70489: LD_INT 91
70491: PUSH
70492: LD_VAR 0 4
70496: PUSH
70497: LD_INT 8
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: PPUSH
70505: CALL_OW 72
70509: ST_TO_ADDR
// if nearEnemy then
70510: LD_VAR 0 6
70514: IFFALSE 70583
// begin if GetWeapon ( i ) = ru_time_lapser then
70516: LD_VAR 0 4
70520: PPUSH
70521: CALL_OW 264
70525: PUSH
70526: LD_INT 49
70528: EQUAL
70529: IFFALSE 70557
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70531: LD_VAR 0 4
70535: PPUSH
70536: LD_VAR 0 6
70540: PPUSH
70541: LD_VAR 0 4
70545: PPUSH
70546: CALL_OW 74
70550: PPUSH
70551: CALL_OW 112
70555: GO 70581
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70557: LD_VAR 0 4
70561: PPUSH
70562: LD_VAR 0 6
70566: PPUSH
70567: LD_VAR 0 4
70571: PPUSH
70572: CALL_OW 74
70576: PPUSH
70577: CALL_OW 115
// end else
70581: GO 70683
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70583: LD_VAR 0 4
70587: PPUSH
70588: LD_VAR 0 2
70592: PUSH
70593: LD_VAR 0 9
70597: ARRAY
70598: PUSH
70599: LD_INT 1
70601: ARRAY
70602: PPUSH
70603: LD_VAR 0 2
70607: PUSH
70608: LD_VAR 0 9
70612: ARRAY
70613: PUSH
70614: LD_INT 2
70616: ARRAY
70617: PPUSH
70618: CALL_OW 297
70622: PUSH
70623: LD_INT 6
70625: GREATER
70626: IFFALSE 70669
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70628: LD_VAR 0 4
70632: PPUSH
70633: LD_VAR 0 2
70637: PUSH
70638: LD_VAR 0 9
70642: ARRAY
70643: PUSH
70644: LD_INT 1
70646: ARRAY
70647: PPUSH
70648: LD_VAR 0 2
70652: PUSH
70653: LD_VAR 0 9
70657: ARRAY
70658: PUSH
70659: LD_INT 2
70661: ARRAY
70662: PPUSH
70663: CALL_OW 114
70667: GO 70683
// SetTag ( i , tag ) ;
70669: LD_VAR 0 4
70673: PPUSH
70674: LD_VAR 0 9
70678: PPUSH
70679: CALL_OW 109
// end else
70683: GO 70756
// if enemy then
70685: LD_VAR 0 5
70689: IFFALSE 70756
// begin if GetWeapon ( i ) = ru_time_lapser then
70691: LD_VAR 0 4
70695: PPUSH
70696: CALL_OW 264
70700: PUSH
70701: LD_INT 49
70703: EQUAL
70704: IFFALSE 70732
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70706: LD_VAR 0 4
70710: PPUSH
70711: LD_VAR 0 5
70715: PPUSH
70716: LD_VAR 0 4
70720: PPUSH
70721: CALL_OW 74
70725: PPUSH
70726: CALL_OW 112
70730: GO 70756
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70732: LD_VAR 0 4
70736: PPUSH
70737: LD_VAR 0 5
70741: PPUSH
70742: LD_VAR 0 4
70746: PPUSH
70747: CALL_OW 74
70751: PPUSH
70752: CALL_OW 115
// end ; end ;
70756: GO 70336
70758: POP
70759: POP
// end ;
70760: LD_VAR 0 3
70764: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70765: LD_INT 0
70767: PPUSH
70768: PPUSH
70769: PPUSH
// if not unit or IsInUnit ( unit ) then
70770: LD_VAR 0 1
70774: NOT
70775: PUSH
70776: LD_VAR 0 1
70780: PPUSH
70781: CALL_OW 310
70785: OR
70786: IFFALSE 70790
// exit ;
70788: GO 70881
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70790: LD_ADDR_VAR 0 4
70794: PUSH
70795: LD_VAR 0 1
70799: PPUSH
70800: CALL_OW 250
70804: PPUSH
70805: LD_VAR 0 2
70809: PPUSH
70810: LD_INT 1
70812: PPUSH
70813: CALL_OW 272
70817: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70818: LD_ADDR_VAR 0 5
70822: PUSH
70823: LD_VAR 0 1
70827: PPUSH
70828: CALL_OW 251
70832: PPUSH
70833: LD_VAR 0 2
70837: PPUSH
70838: LD_INT 1
70840: PPUSH
70841: CALL_OW 273
70845: ST_TO_ADDR
// if ValidHex ( x , y ) then
70846: LD_VAR 0 4
70850: PPUSH
70851: LD_VAR 0 5
70855: PPUSH
70856: CALL_OW 488
70860: IFFALSE 70881
// ComTurnXY ( unit , x , y ) ;
70862: LD_VAR 0 1
70866: PPUSH
70867: LD_VAR 0 4
70871: PPUSH
70872: LD_VAR 0 5
70876: PPUSH
70877: CALL_OW 118
// end ;
70881: LD_VAR 0 3
70885: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70886: LD_INT 0
70888: PPUSH
70889: PPUSH
// result := false ;
70890: LD_ADDR_VAR 0 3
70894: PUSH
70895: LD_INT 0
70897: ST_TO_ADDR
// if not units then
70898: LD_VAR 0 2
70902: NOT
70903: IFFALSE 70907
// exit ;
70905: GO 70952
// for i in units do
70907: LD_ADDR_VAR 0 4
70911: PUSH
70912: LD_VAR 0 2
70916: PUSH
70917: FOR_IN
70918: IFFALSE 70950
// if See ( side , i ) then
70920: LD_VAR 0 1
70924: PPUSH
70925: LD_VAR 0 4
70929: PPUSH
70930: CALL_OW 292
70934: IFFALSE 70948
// begin result := true ;
70936: LD_ADDR_VAR 0 3
70940: PUSH
70941: LD_INT 1
70943: ST_TO_ADDR
// exit ;
70944: POP
70945: POP
70946: GO 70952
// end ;
70948: GO 70917
70950: POP
70951: POP
// end ;
70952: LD_VAR 0 3
70956: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
// if not unit or not points then
70963: LD_VAR 0 1
70967: NOT
70968: PUSH
70969: LD_VAR 0 2
70973: NOT
70974: OR
70975: IFFALSE 70979
// exit ;
70977: GO 71069
// dist := 99999 ;
70979: LD_ADDR_VAR 0 5
70983: PUSH
70984: LD_INT 99999
70986: ST_TO_ADDR
// for i in points do
70987: LD_ADDR_VAR 0 4
70991: PUSH
70992: LD_VAR 0 2
70996: PUSH
70997: FOR_IN
70998: IFFALSE 71067
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71000: LD_ADDR_VAR 0 6
71004: PUSH
71005: LD_VAR 0 1
71009: PPUSH
71010: LD_VAR 0 4
71014: PUSH
71015: LD_INT 1
71017: ARRAY
71018: PPUSH
71019: LD_VAR 0 4
71023: PUSH
71024: LD_INT 2
71026: ARRAY
71027: PPUSH
71028: CALL_OW 297
71032: ST_TO_ADDR
// if tmpDist < dist then
71033: LD_VAR 0 6
71037: PUSH
71038: LD_VAR 0 5
71042: LESS
71043: IFFALSE 71065
// begin result := i ;
71045: LD_ADDR_VAR 0 3
71049: PUSH
71050: LD_VAR 0 4
71054: ST_TO_ADDR
// dist := tmpDist ;
71055: LD_ADDR_VAR 0 5
71059: PUSH
71060: LD_VAR 0 6
71064: ST_TO_ADDR
// end ; end ;
71065: GO 70997
71067: POP
71068: POP
// end ;
71069: LD_VAR 0 3
71073: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71074: LD_INT 0
71076: PPUSH
// uc_side := side ;
71077: LD_ADDR_OWVAR 20
71081: PUSH
71082: LD_VAR 0 1
71086: ST_TO_ADDR
// uc_nation := 3 ;
71087: LD_ADDR_OWVAR 21
71091: PUSH
71092: LD_INT 3
71094: ST_TO_ADDR
// vc_chassis := 25 ;
71095: LD_ADDR_OWVAR 37
71099: PUSH
71100: LD_INT 25
71102: ST_TO_ADDR
// vc_engine := engine_siberite ;
71103: LD_ADDR_OWVAR 39
71107: PUSH
71108: LD_INT 3
71110: ST_TO_ADDR
// vc_control := control_computer ;
71111: LD_ADDR_OWVAR 38
71115: PUSH
71116: LD_INT 3
71118: ST_TO_ADDR
// vc_weapon := 59 ;
71119: LD_ADDR_OWVAR 40
71123: PUSH
71124: LD_INT 59
71126: ST_TO_ADDR
// result := CreateVehicle ;
71127: LD_ADDR_VAR 0 5
71131: PUSH
71132: CALL_OW 45
71136: ST_TO_ADDR
// SetDir ( result , d ) ;
71137: LD_VAR 0 5
71141: PPUSH
71142: LD_VAR 0 4
71146: PPUSH
71147: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71151: LD_VAR 0 5
71155: PPUSH
71156: LD_VAR 0 2
71160: PPUSH
71161: LD_VAR 0 3
71165: PPUSH
71166: LD_INT 0
71168: PPUSH
71169: CALL_OW 48
// end ;
71173: LD_VAR 0 5
71177: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71178: LD_INT 0
71180: PPUSH
71181: PPUSH
71182: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71183: LD_ADDR_VAR 0 2
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71206: LD_VAR 0 1
71210: NOT
71211: PUSH
71212: LD_VAR 0 1
71216: PPUSH
71217: CALL_OW 264
71221: PUSH
71222: LD_INT 12
71224: PUSH
71225: LD_INT 51
71227: PUSH
71228: LD_INT 32
71230: PUSH
71231: LD_INT 89
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: IN
71240: NOT
71241: OR
71242: IFFALSE 71246
// exit ;
71244: GO 71344
// for i := 1 to 3 do
71246: LD_ADDR_VAR 0 3
71250: PUSH
71251: DOUBLE
71252: LD_INT 1
71254: DEC
71255: ST_TO_ADDR
71256: LD_INT 3
71258: PUSH
71259: FOR_TO
71260: IFFALSE 71342
// begin tmp := GetCargo ( cargo , i ) ;
71262: LD_ADDR_VAR 0 4
71266: PUSH
71267: LD_VAR 0 1
71271: PPUSH
71272: LD_VAR 0 3
71276: PPUSH
71277: CALL_OW 289
71281: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71282: LD_ADDR_VAR 0 2
71286: PUSH
71287: LD_VAR 0 2
71291: PPUSH
71292: LD_VAR 0 3
71296: PPUSH
71297: LD_VAR 0 4
71301: PPUSH
71302: CALL_OW 1
71306: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71307: LD_ADDR_VAR 0 2
71311: PUSH
71312: LD_VAR 0 2
71316: PPUSH
71317: LD_INT 4
71319: PPUSH
71320: LD_VAR 0 2
71324: PUSH
71325: LD_INT 4
71327: ARRAY
71328: PUSH
71329: LD_VAR 0 4
71333: PLUS
71334: PPUSH
71335: CALL_OW 1
71339: ST_TO_ADDR
// end ;
71340: GO 71259
71342: POP
71343: POP
// end ;
71344: LD_VAR 0 2
71348: RET
// export function Length ( array ) ; begin
71349: LD_INT 0
71351: PPUSH
// result := array + 0 ;
71352: LD_ADDR_VAR 0 2
71356: PUSH
71357: LD_VAR 0 1
71361: PUSH
71362: LD_INT 0
71364: PLUS
71365: ST_TO_ADDR
// end ;
71366: LD_VAR 0 2
71370: RET
// export function PrepareArray ( array ) ; begin
71371: LD_INT 0
71373: PPUSH
// result := array diff 0 ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: LD_VAR 0 1
71383: PUSH
71384: LD_INT 0
71386: DIFF
71387: ST_TO_ADDR
// if not result [ 1 ] then
71388: LD_VAR 0 2
71392: PUSH
71393: LD_INT 1
71395: ARRAY
71396: NOT
71397: IFFALSE 71417
// result := Delete ( result , 1 ) ;
71399: LD_ADDR_VAR 0 2
71403: PUSH
71404: LD_VAR 0 2
71408: PPUSH
71409: LD_INT 1
71411: PPUSH
71412: CALL_OW 3
71416: ST_TO_ADDR
// end ;
71417: LD_VAR 0 2
71421: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71422: LD_INT 0
71424: PPUSH
71425: PPUSH
71426: PPUSH
71427: PPUSH
// sibRocketRange := 25 ;
71428: LD_ADDR_VAR 0 6
71432: PUSH
71433: LD_INT 25
71435: ST_TO_ADDR
// result := false ;
71436: LD_ADDR_VAR 0 4
71440: PUSH
71441: LD_INT 0
71443: ST_TO_ADDR
// for i := 0 to 5 do
71444: LD_ADDR_VAR 0 5
71448: PUSH
71449: DOUBLE
71450: LD_INT 0
71452: DEC
71453: ST_TO_ADDR
71454: LD_INT 5
71456: PUSH
71457: FOR_TO
71458: IFFALSE 71525
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71460: LD_VAR 0 1
71464: PPUSH
71465: LD_VAR 0 5
71469: PPUSH
71470: LD_VAR 0 6
71474: PPUSH
71475: CALL_OW 272
71479: PPUSH
71480: LD_VAR 0 2
71484: PPUSH
71485: LD_VAR 0 5
71489: PPUSH
71490: LD_VAR 0 6
71494: PPUSH
71495: CALL_OW 273
71499: PPUSH
71500: LD_VAR 0 3
71504: PPUSH
71505: CALL_OW 309
71509: IFFALSE 71523
// begin result := true ;
71511: LD_ADDR_VAR 0 4
71515: PUSH
71516: LD_INT 1
71518: ST_TO_ADDR
// exit ;
71519: POP
71520: POP
71521: GO 71527
// end ;
71523: GO 71457
71525: POP
71526: POP
// end ;
71527: LD_VAR 0 4
71531: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71532: LD_INT 0
71534: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_VAR 0 2
71544: PPUSH
71545: LD_INT 0
71547: PPUSH
71548: LD_INT 0
71550: PPUSH
71551: LD_INT 1
71553: PPUSH
71554: LD_INT 0
71556: PPUSH
71557: CALL_OW 587
// end ; end_of_file
71561: LD_VAR 0 3
71565: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71566: LD_VAR 0 1
71570: PUSH
71571: LD_INT 200
71573: DOUBLE
71574: GREATEREQUAL
71575: IFFALSE 71583
71577: LD_INT 299
71579: DOUBLE
71580: LESSEQUAL
71581: IFTRUE 71585
71583: GO 71617
71585: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71586: LD_VAR 0 1
71590: PPUSH
71591: LD_VAR 0 2
71595: PPUSH
71596: LD_VAR 0 3
71600: PPUSH
71601: LD_VAR 0 4
71605: PPUSH
71606: LD_VAR 0 5
71610: PPUSH
71611: CALL 10602 0 5
71615: GO 71694
71617: LD_INT 300
71619: DOUBLE
71620: GREATEREQUAL
71621: IFFALSE 71629
71623: LD_INT 399
71625: DOUBLE
71626: LESSEQUAL
71627: IFTRUE 71631
71629: GO 71693
71631: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 2
71641: PPUSH
71642: LD_VAR 0 3
71646: PPUSH
71647: LD_VAR 0 4
71651: PPUSH
71652: LD_VAR 0 5
71656: PPUSH
71657: LD_VAR 0 6
71661: PPUSH
71662: LD_VAR 0 7
71666: PPUSH
71667: LD_VAR 0 8
71671: PPUSH
71672: LD_VAR 0 9
71676: PPUSH
71677: LD_VAR 0 10
71681: PPUSH
71682: LD_VAR 0 11
71686: PPUSH
71687: CALL 26873 0 11
71691: GO 71694
71693: POP
// end ;
71694: PPOPN 11
71696: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71697: LD_VAR 0 1
71701: PPUSH
71702: LD_VAR 0 2
71706: PPUSH
71707: LD_VAR 0 3
71711: PPUSH
71712: LD_VAR 0 4
71716: PPUSH
71717: LD_VAR 0 5
71721: PPUSH
71722: CALL 10338 0 5
// end ; end_of_file
71726: PPOPN 5
71728: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71729: LD_VAR 0 1
71733: PPUSH
71734: LD_VAR 0 2
71738: PPUSH
71739: LD_VAR 0 3
71743: PPUSH
71744: LD_VAR 0 4
71748: PPUSH
71749: LD_VAR 0 5
71753: PPUSH
71754: LD_VAR 0 6
71758: PPUSH
71759: CALL 14566 0 6
// end ;
71763: PPOPN 6
71765: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71766: LD_INT 0
71768: PPUSH
// begin if not units then
71769: LD_VAR 0 1
71773: NOT
71774: IFFALSE 71778
// exit ;
71776: GO 71778
// end ;
71778: PPOPN 7
71780: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71781: CALL 14537 0 0
// end ;
71785: PPOPN 1
71787: END
