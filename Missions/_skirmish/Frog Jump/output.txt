// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9941 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9316 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9761 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38231 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 70105 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10307 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10187 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63033 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10283 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10291 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 65110 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9231
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9221
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: IFFALSE 8969
// exit ;
8967: GO 9231
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_EXP 30
8978: PPUSH
8979: CALL_OW 250
8983: PPUSH
8984: LD_EXP 30
8988: PPUSH
8989: CALL_OW 251
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_VAR 0 4
9003: PPUSH
9004: CALL_OW 298
9008: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9009: LD_ADDR_VAR 0 10
9013: PUSH
9014: LD_VAR 0 9
9018: PPUSH
9019: CALL 8039 0 1
9023: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9024: LD_VAR 0 10
9028: PUSH
9029: LD_OWVAR 2
9033: PPUSH
9034: CALL 5639 0 1
9038: GREATER
9039: IFFALSE 9053
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9041: LD_STRING ArtFrogJumpCost
9043: PPUSH
9044: LD_INT 2
9046: PPUSH
9047: CALL_OW 338
// exit ;
9051: GO 9231
// end ; SetSibResources ( your_side , cost ) ;
9053: LD_OWVAR 2
9057: PPUSH
9058: LD_VAR 0 10
9062: PPUSH
9063: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_VAR 0 4
9076: PPUSH
9077: LD_INT 6
9079: PPUSH
9080: LD_INT 5
9082: NEG
9083: PPUSH
9084: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9088: LD_VAR 0 3
9092: PPUSH
9093: LD_VAR 0 4
9097: PPUSH
9098: LD_INT 6
9100: PPUSH
9101: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9105: LD_EXP 30
9109: PPUSH
9110: LD_VAR 0 3
9114: PPUSH
9115: LD_VAR 0 4
9119: PPUSH
9120: LD_INT 0
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9130: LD_VAR 0 3
9134: PPUSH
9135: LD_VAR 0 4
9139: PPUSH
9140: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9144: LD_ADDR_EXP 30
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// player_artifact_researched := false ;
9152: LD_ADDR_EXP 22
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9160: LD_OWVAR 2
9164: PPUSH
9165: LD_EXP 20
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_VAR 0 7
9177: PPUSH
9178: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9182: LD_OWVAR 2
9186: PPUSH
9187: LD_EXP 21
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: LD_VAR 0 7
9199: PPUSH
9200: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9204: LD_EXP 26
9208: PPUSH
9209: CALL_OW 67
// player_artifact_researched := true ;
9213: LD_ADDR_EXP 22
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// end ; if debug then
9221: LD_EXP 6
9225: IFFALSE 9231
// DebugArtifact ;
9227: CALL 7803 0 0
// end ;
9231: PPOPN 10
9233: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 255
9243: PUSH
9244: LD_OWVAR 2
9248: EQUAL
9249: IFFALSE 9288
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9251: LD_OWVAR 2
9255: PPUSH
9256: LD_EXP 25
9260: PPUSH
9261: LD_INT 0
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 468
// player_artifact_ready := true ;
9273: LD_ADDR_EXP 29
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9281: LD_STRING ArtFrogJump
9283: PPUSH
9284: CALL_OW 339
// end ; end ;
9288: PPOPN 1
9290: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9291: LD_OWVAR 2
9295: PPUSH
9296: LD_EXP 25
9300: PPUSH
9301: LD_INT 2
9303: PPUSH
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 468
// end ;
9313: PPOPN 2
9315: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
9320: PPUSH
9321: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9322: LD_ADDR_VAR 0 3
9326: PUSH
9327: LD_INT 81
9329: PUSH
9330: LD_INT 7
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 34
9339: PUSH
9340: LD_INT 48
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: PUSH
9356: LD_INT 81
9358: PUSH
9359: LD_INT 7
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 30
9368: PUSH
9369: LD_INT 28
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: ADD
9385: PUSH
9386: LD_INT 81
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 30
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PPUSH
9410: CALL_OW 69
9414: ADD
9415: PUSH
9416: LD_INT 81
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 30
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 69
9444: ADD
9445: PUSH
9446: LD_INT 81
9448: PUSH
9449: LD_INT 7
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 30
9458: PUSH
9459: LD_INT 34
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: ADD
9475: PUSH
9476: LD_INT 81
9478: PUSH
9479: LD_INT 7
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 35
9488: PUSH
9489: LD_INT 49
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ADD
9505: PUSH
9506: LD_INT 81
9508: PUSH
9509: LD_INT 7
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 35
9518: PUSH
9519: LD_INT 47
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ADD
9535: PUSH
9536: LD_INT 81
9538: PUSH
9539: LD_INT 7
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 47
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 69
9564: ADD
9565: PUSH
9566: LD_INT 81
9568: PUSH
9569: LD_INT 7
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 69
9594: ADD
9595: PUSH
9596: LD_INT 81
9598: PUSH
9599: LD_INT 7
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: LD_INT 3
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: ADD
9625: ST_TO_ADDR
// if not tmp then
9626: LD_VAR 0 3
9630: NOT
9631: IFFALSE 9635
// exit ;
9633: GO 9756
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 34
9642: PUSH
9643: LD_INT 48
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 72
9654: IFFALSE 9687
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9656: LD_ADDR_VAR 0 4
9660: PUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 48
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 72
9680: PUSH
9681: LD_INT 1
9683: ARRAY
9684: ST_TO_ADDR
9685: GO 9711
// un := tmp [ rand ( 1 , tmp ) ] ;
9687: LD_ADDR_VAR 0 4
9691: PUSH
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: PPUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: CALL_OW 12
9709: ARRAY
9710: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9711: LD_EXP 10
9715: NOT
9716: IFFALSE 9747
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9718: LD_ADDR_EXP 10
9722: PUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL_OW 250
9732: PUSH
9733: LD_VAR 0 4
9737: PPUSH
9738: CALL_OW 251
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: ST_TO_ADDR
// KillUnit ( un ) ;
9747: LD_VAR 0 4
9751: PPUSH
9752: CALL_OW 66
// end ;
9756: LD_VAR 0 1
9760: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9767: LD_ADDR_VAR 0 4
9771: PUSH
9772: LD_INT 22
9774: PUSH
9775: LD_INT 6
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 33
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: ST_TO_ADDR
// if not tmp then
9801: LD_VAR 0 4
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 9936
// un := tmp [ rand ( 1 , tmp ) ] ;
9810: LD_ADDR_VAR 0 3
9814: PUSH
9815: LD_VAR 0 4
9819: PUSH
9820: LD_INT 1
9822: PPUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: CALL_OW 12
9832: ARRAY
9833: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9834: LD_VAR 0 3
9838: PPUSH
9839: CALL_OW 264
9843: PUSH
9844: LD_INT 48
9846: EQUAL
9847: IFFALSE 9866
// ComAttackPlace ( un , 194 , 19 ) else
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 194
9856: PPUSH
9857: LD_INT 19
9859: PPUSH
9860: CALL_OW 116
9864: GO 9900
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 81
9873: PUSH
9874: LD_INT 7
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_VAR 0 3
9890: PPUSH
9891: CALL_OW 74
9895: PPUSH
9896: CALL_OW 115
// if not alliance_used_artifact_2 then
9900: LD_EXP 11
9904: NOT
9905: IFFALSE 9936
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9907: LD_ADDR_EXP 11
9911: PUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: CALL_OW 250
9921: PUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: CALL_OW 251
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// end ; end_of_file
9936: LD_VAR 0 1
9940: RET
// export function DebugMode ; var i , j , b ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
// enable_addtolog = true ;
9947: LD_ADDR_OWVAR 81
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// FogOff ( 6 ) ;
9955: LD_INT 6
9957: PPUSH
9958: CALL_OW 344
// uc_side = 6 ;
9962: LD_ADDR_OWVAR 20
9966: PUSH
9967: LD_INT 6
9969: ST_TO_ADDR
// uc_nation = 3 ;
9970: LD_ADDR_OWVAR 21
9974: PUSH
9975: LD_INT 3
9977: ST_TO_ADDR
// bc_level = 10 ;
9978: LD_ADDR_OWVAR 43
9982: PUSH
9983: LD_INT 10
9985: ST_TO_ADDR
// bc_type := b_lab_full ;
9986: LD_ADDR_OWVAR 42
9990: PUSH
9991: LD_INT 8
9993: ST_TO_ADDR
// bc_kind1 := 11 ;
9994: LD_ADDR_OWVAR 44
9998: PUSH
9999: LD_INT 11
10001: ST_TO_ADDR
// bc_kind2 := 12 ;
10002: LD_ADDR_OWVAR 45
10006: PUSH
10007: LD_INT 12
10009: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10010: LD_INT 189
10012: PPUSH
10013: LD_INT 20
10015: PPUSH
10016: LD_INT 1
10018: PPUSH
10019: CALL_OW 47
// bc_type := b_warehouse ;
10023: LD_ADDR_OWVAR 42
10027: PUSH
10028: LD_INT 1
10030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10031: LD_ADDR_VAR 0 4
10035: PUSH
10036: LD_INT 201
10038: PPUSH
10039: LD_INT 22
10041: PPUSH
10042: LD_INT 4
10044: PPUSH
10045: CALL_OW 47
10049: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10050: LD_VAR 0 4
10054: PPUSH
10055: CALL_OW 274
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: LD_INT 10000
10065: PPUSH
10066: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10070: LD_VAR 0 4
10074: PPUSH
10075: CALL_OW 274
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: LD_INT 10000
10085: PPUSH
10086: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: CALL_OW 274
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: LD_INT 10000
10105: PPUSH
10106: CALL_OW 277
// bc_type := b_siberite_power ;
10110: LD_ADDR_OWVAR 42
10114: PUSH
10115: LD_INT 28
10117: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10118: LD_ADDR_VAR 0 4
10122: PUSH
10123: LD_INT 216
10125: PPUSH
10126: LD_INT 16
10128: PPUSH
10129: LD_INT 4
10131: PPUSH
10132: CALL_OW 47
10136: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10137: LD_ADDR_VAR 0 4
10141: PUSH
10142: LD_INT 219
10144: PPUSH
10145: LD_INT 16
10147: PPUSH
10148: LD_INT 4
10150: PPUSH
10151: CALL_OW 47
10155: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10156: LD_INT 55
10158: PPUSH
10159: LD_INT 6
10161: PPUSH
10162: LD_INT 2
10164: PPUSH
10165: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10169: LD_INT 56
10171: PPUSH
10172: LD_INT 6
10174: PPUSH
10175: LD_INT 2
10177: PPUSH
10178: CALL_OW 322
// end ; end_of_file
10182: LD_VAR 0 1
10186: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10187: LD_INT 0
10189: PPUSH
10190: PPUSH
10191: PPUSH
10192: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 91
10205: EQUAL
10206: IFFALSE 10278
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10208: LD_INT 68
10210: PPUSH
10211: LD_VAR 0 1
10215: PPUSH
10216: CALL_OW 255
10220: PPUSH
10221: CALL_OW 321
10225: PUSH
10226: LD_INT 2
10228: EQUAL
10229: IFFALSE 10241
// eff := 70 else
10231: LD_ADDR_VAR 0 4
10235: PUSH
10236: LD_INT 70
10238: ST_TO_ADDR
10239: GO 10249
// eff := 30 ;
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: LD_INT 30
10248: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 250
10258: PPUSH
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 251
10268: PPUSH
10269: LD_VAR 0 4
10273: PPUSH
10274: CALL_OW 495
// end ; end ;
10278: LD_VAR 0 2
10282: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10283: LD_INT 0
10285: PPUSH
// end ;
10286: LD_VAR 0 4
10290: RET
// export function SOS_Command ( cmd ) ; begin
10291: LD_INT 0
10293: PPUSH
// end ;
10294: LD_VAR 0 2
10298: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10299: LD_INT 0
10301: PPUSH
// end ;
10302: LD_VAR 0 6
10306: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10307: LD_INT 0
10309: PPUSH
10310: PPUSH
// if not vehicle or not factory then
10311: LD_VAR 0 1
10315: NOT
10316: PUSH
10317: LD_VAR 0 2
10321: NOT
10322: OR
10323: IFFALSE 10327
// exit ;
10325: GO 10558
// if factoryWaypoints >= factory then
10327: LD_EXP 104
10331: PUSH
10332: LD_VAR 0 2
10336: GREATEREQUAL
10337: IFFALSE 10558
// if factoryWaypoints [ factory ] then
10339: LD_EXP 104
10343: PUSH
10344: LD_VAR 0 2
10348: ARRAY
10349: IFFALSE 10558
// begin if GetControl ( vehicle ) = control_manual then
10351: LD_VAR 0 1
10355: PPUSH
10356: CALL_OW 263
10360: PUSH
10361: LD_INT 1
10363: EQUAL
10364: IFFALSE 10445
// begin driver := IsDrivenBy ( vehicle ) ;
10366: LD_ADDR_VAR 0 4
10370: PUSH
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL_OW 311
10380: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10381: LD_VAR 0 4
10385: PPUSH
10386: LD_EXP 104
10390: PUSH
10391: LD_VAR 0 2
10395: ARRAY
10396: PUSH
10397: LD_INT 3
10399: ARRAY
10400: PPUSH
10401: LD_EXP 104
10405: PUSH
10406: LD_VAR 0 2
10410: ARRAY
10411: PUSH
10412: LD_INT 4
10414: ARRAY
10415: PPUSH
10416: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10420: LD_VAR 0 4
10424: PPUSH
10425: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10429: LD_VAR 0 4
10433: PPUSH
10434: LD_VAR 0 2
10438: PPUSH
10439: CALL_OW 180
// end else
10443: GO 10558
// if GetControl ( vehicle ) = control_remote then
10445: LD_VAR 0 1
10449: PPUSH
10450: CALL_OW 263
10454: PUSH
10455: LD_INT 2
10457: EQUAL
10458: IFFALSE 10519
// begin wait ( 0 0$2 ) ;
10460: LD_INT 70
10462: PPUSH
10463: CALL_OW 67
// if Connect ( vehicle ) then
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL 38231 0 1
10476: IFFALSE 10517
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10478: LD_VAR 0 1
10482: PPUSH
10483: LD_EXP 104
10487: PUSH
10488: LD_VAR 0 2
10492: ARRAY
10493: PUSH
10494: LD_INT 3
10496: ARRAY
10497: PPUSH
10498: LD_EXP 104
10502: PUSH
10503: LD_VAR 0 2
10507: ARRAY
10508: PUSH
10509: LD_INT 4
10511: ARRAY
10512: PPUSH
10513: CALL_OW 171
// end else
10517: GO 10558
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10519: LD_VAR 0 1
10523: PPUSH
10524: LD_EXP 104
10528: PUSH
10529: LD_VAR 0 2
10533: ARRAY
10534: PUSH
10535: LD_INT 3
10537: ARRAY
10538: PPUSH
10539: LD_EXP 104
10543: PUSH
10544: LD_VAR 0 2
10548: ARRAY
10549: PUSH
10550: LD_INT 4
10552: ARRAY
10553: PPUSH
10554: CALL_OW 171
// end ; end ;
10558: LD_VAR 0 3
10562: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10563: LD_INT 0
10565: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10566: LD_VAR 0 1
10570: PUSH
10571: LD_INT 250
10573: EQUAL
10574: PUSH
10575: LD_VAR 0 2
10579: PPUSH
10580: CALL_OW 264
10584: PUSH
10585: LD_INT 81
10587: EQUAL
10588: AND
10589: IFFALSE 10610
// MinerPlaceMine ( unit , x , y ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: LD_VAR 0 5
10605: PPUSH
10606: CALL 12995 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_INT 251
10617: EQUAL
10618: PUSH
10619: LD_VAR 0 2
10623: PPUSH
10624: CALL_OW 264
10628: PUSH
10629: LD_INT 81
10631: EQUAL
10632: AND
10633: IFFALSE 10654
// MinerDetonateMine ( unit , x , y ) ;
10635: LD_VAR 0 2
10639: PPUSH
10640: LD_VAR 0 4
10644: PPUSH
10645: LD_VAR 0 5
10649: PPUSH
10650: CALL 13270 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10654: LD_VAR 0 1
10658: PUSH
10659: LD_INT 252
10661: EQUAL
10662: PUSH
10663: LD_VAR 0 2
10667: PPUSH
10668: CALL_OW 264
10672: PUSH
10673: LD_INT 81
10675: EQUAL
10676: AND
10677: IFFALSE 10698
// MinerCreateMinefield ( unit , x , y ) ;
10679: LD_VAR 0 2
10683: PPUSH
10684: LD_VAR 0 4
10688: PPUSH
10689: LD_VAR 0 5
10693: PPUSH
10694: CALL 13687 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10698: LD_VAR 0 1
10702: PUSH
10703: LD_INT 253
10705: EQUAL
10706: PUSH
10707: LD_VAR 0 2
10711: PPUSH
10712: CALL_OW 257
10716: PUSH
10717: LD_INT 5
10719: EQUAL
10720: AND
10721: IFFALSE 10742
// ComBinocular ( unit , x , y ) ;
10723: LD_VAR 0 2
10727: PPUSH
10728: LD_VAR 0 4
10732: PPUSH
10733: LD_VAR 0 5
10737: PPUSH
10738: CALL 14056 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10742: LD_VAR 0 1
10746: PUSH
10747: LD_INT 254
10749: EQUAL
10750: PUSH
10751: LD_VAR 0 2
10755: PPUSH
10756: CALL_OW 264
10760: PUSH
10761: LD_INT 99
10763: EQUAL
10764: AND
10765: PUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: CALL_OW 263
10775: PUSH
10776: LD_INT 3
10778: EQUAL
10779: AND
10780: IFFALSE 10796
// HackDestroyVehicle ( unit , selectedUnit ) ;
10782: LD_VAR 0 2
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL 12359 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10796: LD_VAR 0 1
10800: PUSH
10801: LD_INT 255
10803: EQUAL
10804: PUSH
10805: LD_VAR 0 2
10809: PPUSH
10810: CALL_OW 264
10814: PUSH
10815: LD_INT 14
10817: PUSH
10818: LD_INT 53
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: IN
10825: AND
10826: PUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: LD_VAR 0 5
10836: PPUSH
10837: CALL_OW 488
10841: AND
10842: IFFALSE 10866
// CutTreeXYR ( unit , x , y , 12 ) ;
10844: LD_VAR 0 2
10848: PPUSH
10849: LD_VAR 0 4
10853: PPUSH
10854: LD_VAR 0 5
10858: PPUSH
10859: LD_INT 12
10861: PPUSH
10862: CALL 10929 0 4
// if cmd = 256 then
10866: LD_VAR 0 1
10870: PUSH
10871: LD_INT 256
10873: EQUAL
10874: IFFALSE 10895
// SetFactoryWaypoint ( unit , x , y ) ;
10876: LD_VAR 0 2
10880: PPUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: LD_VAR 0 5
10890: PPUSH
10891: CALL 28814 0 3
// if cmd = 257 then
10895: LD_VAR 0 1
10899: PUSH
10900: LD_INT 257
10902: EQUAL
10903: IFFALSE 10924
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: LD_VAR 0 4
10914: PPUSH
10915: LD_VAR 0 5
10919: PPUSH
10920: CALL 29176 0 3
// end ;
10924: LD_VAR 0 6
10928: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10929: LD_INT 0
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
10935: PPUSH
10936: PPUSH
10937: PPUSH
10938: PPUSH
10939: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10940: LD_VAR 0 1
10944: NOT
10945: PUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: CALL_OW 488
10960: NOT
10961: OR
10962: PUSH
10963: LD_VAR 0 4
10967: NOT
10968: OR
10969: IFFALSE 10973
// exit ;
10971: GO 11313
// list := [ ] ;
10973: LD_ADDR_VAR 0 13
10977: PUSH
10978: EMPTY
10979: ST_TO_ADDR
// if x - r < 0 then
10980: LD_VAR 0 2
10984: PUSH
10985: LD_VAR 0 4
10989: MINUS
10990: PUSH
10991: LD_INT 0
10993: LESS
10994: IFFALSE 11006
// min_x := 0 else
10996: LD_ADDR_VAR 0 7
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
11004: GO 11022
// min_x := x - r ;
11006: LD_ADDR_VAR 0 7
11010: PUSH
11011: LD_VAR 0 2
11015: PUSH
11016: LD_VAR 0 4
11020: MINUS
11021: ST_TO_ADDR
// if y - r < 0 then
11022: LD_VAR 0 3
11026: PUSH
11027: LD_VAR 0 4
11031: MINUS
11032: PUSH
11033: LD_INT 0
11035: LESS
11036: IFFALSE 11048
// min_y := 0 else
11038: LD_ADDR_VAR 0 8
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
11046: GO 11064
// min_y := y - r ;
11048: LD_ADDR_VAR 0 8
11052: PUSH
11053: LD_VAR 0 3
11057: PUSH
11058: LD_VAR 0 4
11062: MINUS
11063: ST_TO_ADDR
// max_x := x + r ;
11064: LD_ADDR_VAR 0 9
11068: PUSH
11069: LD_VAR 0 2
11073: PUSH
11074: LD_VAR 0 4
11078: PLUS
11079: ST_TO_ADDR
// max_y := y + r ;
11080: LD_ADDR_VAR 0 10
11084: PUSH
11085: LD_VAR 0 3
11089: PUSH
11090: LD_VAR 0 4
11094: PLUS
11095: ST_TO_ADDR
// for _x = min_x to max_x do
11096: LD_ADDR_VAR 0 11
11100: PUSH
11101: DOUBLE
11102: LD_VAR 0 7
11106: DEC
11107: ST_TO_ADDR
11108: LD_VAR 0 9
11112: PUSH
11113: FOR_TO
11114: IFFALSE 11231
// for _y = min_y to max_y do
11116: LD_ADDR_VAR 0 12
11120: PUSH
11121: DOUBLE
11122: LD_VAR 0 8
11126: DEC
11127: ST_TO_ADDR
11128: LD_VAR 0 10
11132: PUSH
11133: FOR_TO
11134: IFFALSE 11227
// begin if not ValidHex ( _x , _y ) then
11136: LD_VAR 0 11
11140: PPUSH
11141: LD_VAR 0 12
11145: PPUSH
11146: CALL_OW 488
11150: NOT
11151: IFFALSE 11155
// continue ;
11153: GO 11133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11155: LD_VAR 0 11
11159: PPUSH
11160: LD_VAR 0 12
11164: PPUSH
11165: CALL_OW 351
11169: PUSH
11170: LD_VAR 0 11
11174: PPUSH
11175: LD_VAR 0 12
11179: PPUSH
11180: CALL_OW 554
11184: AND
11185: IFFALSE 11225
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11187: LD_ADDR_VAR 0 13
11191: PUSH
11192: LD_VAR 0 13
11196: PPUSH
11197: LD_VAR 0 13
11201: PUSH
11202: LD_INT 1
11204: PLUS
11205: PPUSH
11206: LD_VAR 0 11
11210: PUSH
11211: LD_VAR 0 12
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PPUSH
11220: CALL_OW 2
11224: ST_TO_ADDR
// end ;
11225: GO 11133
11227: POP
11228: POP
11229: GO 11113
11231: POP
11232: POP
// if not list then
11233: LD_VAR 0 13
11237: NOT
11238: IFFALSE 11242
// exit ;
11240: GO 11313
// for i in list do
11242: LD_ADDR_VAR 0 6
11246: PUSH
11247: LD_VAR 0 13
11251: PUSH
11252: FOR_IN
11253: IFFALSE 11311
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11255: LD_VAR 0 1
11259: PPUSH
11260: LD_STRING M
11262: PUSH
11263: LD_VAR 0 6
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PUSH
11272: LD_VAR 0 6
11276: PUSH
11277: LD_INT 2
11279: ARRAY
11280: PUSH
11281: LD_INT 0
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: LD_INT 0
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: PPUSH
11305: CALL_OW 447
11309: GO 11252
11311: POP
11312: POP
// end ;
11313: LD_VAR 0 5
11317: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11318: LD_EXP 36
11322: NOT
11323: IFFALSE 11373
11325: GO 11327
11327: DISABLE
// begin initHack := true ;
11328: LD_ADDR_EXP 36
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// hackTanks := [ ] ;
11336: LD_ADDR_EXP 37
11340: PUSH
11341: EMPTY
11342: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11343: LD_ADDR_EXP 38
11347: PUSH
11348: EMPTY
11349: ST_TO_ADDR
// hackLimit := 3 ;
11350: LD_ADDR_EXP 39
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// hackDist := 12 ;
11358: LD_ADDR_EXP 40
11362: PUSH
11363: LD_INT 12
11365: ST_TO_ADDR
// hackCounter := [ ] ;
11366: LD_ADDR_EXP 41
11370: PUSH
11371: EMPTY
11372: ST_TO_ADDR
// end ;
11373: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11374: LD_EXP 36
11378: PUSH
11379: LD_INT 34
11381: PUSH
11382: LD_INT 99
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: AND
11394: IFFALSE 11647
11396: GO 11398
11398: DISABLE
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
// begin enable ;
11403: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11404: LD_ADDR_VAR 0 1
11408: PUSH
11409: LD_INT 34
11411: PUSH
11412: LD_INT 99
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PUSH
11424: FOR_IN
11425: IFFALSE 11645
// begin if not i in hackTanks then
11427: LD_VAR 0 1
11431: PUSH
11432: LD_EXP 37
11436: IN
11437: NOT
11438: IFFALSE 11521
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11440: LD_ADDR_EXP 37
11444: PUSH
11445: LD_EXP 37
11449: PPUSH
11450: LD_EXP 37
11454: PUSH
11455: LD_INT 1
11457: PLUS
11458: PPUSH
11459: LD_VAR 0 1
11463: PPUSH
11464: CALL_OW 1
11468: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11469: LD_ADDR_EXP 38
11473: PUSH
11474: LD_EXP 38
11478: PPUSH
11479: LD_EXP 38
11483: PUSH
11484: LD_INT 1
11486: PLUS
11487: PPUSH
11488: EMPTY
11489: PPUSH
11490: CALL_OW 1
11494: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11495: LD_ADDR_EXP 41
11499: PUSH
11500: LD_EXP 41
11504: PPUSH
11505: LD_EXP 41
11509: PUSH
11510: LD_INT 1
11512: PLUS
11513: PPUSH
11514: EMPTY
11515: PPUSH
11516: CALL_OW 1
11520: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 302
11530: NOT
11531: IFFALSE 11544
// begin HackUnlinkAll ( i ) ;
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL 11650 0 1
// continue ;
11542: GO 11424
// end ; HackCheckCapturedStatus ( i ) ;
11544: LD_VAR 0 1
11548: PPUSH
11549: CALL 12093 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11553: LD_ADDR_VAR 0 2
11557: PUSH
11558: LD_INT 81
11560: PUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 255
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 33
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_VAR 0 1
11592: PUSH
11593: LD_EXP 40
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 50
11605: PUSH
11606: EMPTY
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PPUSH
11615: CALL_OW 69
11619: ST_TO_ADDR
// if not tmp then
11620: LD_VAR 0 2
11624: NOT
11625: IFFALSE 11629
// continue ;
11627: GO 11424
// HackLink ( i , tmp ) ;
11629: LD_VAR 0 1
11633: PPUSH
11634: LD_VAR 0 2
11638: PPUSH
11639: CALL 11786 0 2
// end ;
11643: GO 11424
11645: POP
11646: POP
// end ;
11647: PPOPN 2
11649: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11650: LD_INT 0
11652: PPUSH
11653: PPUSH
11654: PPUSH
// if not hack in hackTanks then
11655: LD_VAR 0 1
11659: PUSH
11660: LD_EXP 37
11664: IN
11665: NOT
11666: IFFALSE 11670
// exit ;
11668: GO 11781
// index := GetElementIndex ( hackTanks , hack ) ;
11670: LD_ADDR_VAR 0 4
11674: PUSH
11675: LD_EXP 37
11679: PPUSH
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL 35047 0 2
11689: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11690: LD_EXP 38
11694: PUSH
11695: LD_VAR 0 4
11699: ARRAY
11700: IFFALSE 11781
// begin for i in hackTanksCaptured [ index ] do
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: LD_EXP 38
11711: PUSH
11712: LD_VAR 0 4
11716: ARRAY
11717: PUSH
11718: FOR_IN
11719: IFFALSE 11745
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 1
11728: ARRAY
11729: PPUSH
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 2
11737: ARRAY
11738: PPUSH
11739: CALL_OW 235
11743: GO 11718
11745: POP
11746: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11747: LD_ADDR_EXP 38
11751: PUSH
11752: LD_EXP 38
11756: PPUSH
11757: LD_VAR 0 4
11761: PPUSH
11762: EMPTY
11763: PPUSH
11764: CALL_OW 1
11768: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 505
// end ; end ;
11781: LD_VAR 0 2
11785: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11786: LD_INT 0
11788: PPUSH
11789: PPUSH
11790: PPUSH
// if not hack in hackTanks or not vehicles then
11791: LD_VAR 0 1
11795: PUSH
11796: LD_EXP 37
11800: IN
11801: NOT
11802: PUSH
11803: LD_VAR 0 2
11807: NOT
11808: OR
11809: IFFALSE 11813
// exit ;
11811: GO 12088
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: LD_VAR 0 1
11822: PPUSH
11823: LD_VAR 0 2
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL 35697 0 4
11838: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11839: LD_ADDR_VAR 0 5
11843: PUSH
11844: LD_EXP 37
11848: PPUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL 35047 0 2
11858: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11859: LD_EXP 38
11863: PUSH
11864: LD_VAR 0 5
11868: ARRAY
11869: PUSH
11870: LD_EXP 39
11874: LESS
11875: IFFALSE 12064
// begin for i := 1 to vehicles do
11877: LD_ADDR_VAR 0 4
11881: PUSH
11882: DOUBLE
11883: LD_INT 1
11885: DEC
11886: ST_TO_ADDR
11887: LD_VAR 0 2
11891: PUSH
11892: FOR_TO
11893: IFFALSE 12062
// begin if hackTanksCaptured [ index ] = hackLimit then
11895: LD_EXP 38
11899: PUSH
11900: LD_VAR 0 5
11904: ARRAY
11905: PUSH
11906: LD_EXP 39
11910: EQUAL
11911: IFFALSE 11915
// break ;
11913: GO 12062
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11915: LD_ADDR_EXP 41
11919: PUSH
11920: LD_EXP 41
11924: PPUSH
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_EXP 41
11934: PUSH
11935: LD_VAR 0 5
11939: ARRAY
11940: PUSH
11941: LD_INT 1
11943: PLUS
11944: PPUSH
11945: CALL_OW 1
11949: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11950: LD_ADDR_EXP 38
11954: PUSH
11955: LD_EXP 38
11959: PPUSH
11960: LD_VAR 0 5
11964: PUSH
11965: LD_EXP 38
11969: PUSH
11970: LD_VAR 0 5
11974: ARRAY
11975: PUSH
11976: LD_INT 1
11978: PLUS
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PPUSH
11984: LD_VAR 0 2
11988: PUSH
11989: LD_VAR 0 4
11993: ARRAY
11994: PUSH
11995: LD_VAR 0 2
11999: PUSH
12000: LD_VAR 0 4
12004: ARRAY
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL 35262 0 3
12019: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12020: LD_VAR 0 2
12024: PUSH
12025: LD_VAR 0 4
12029: ARRAY
12030: PPUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 255
12040: PPUSH
12041: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12045: LD_VAR 0 2
12049: PUSH
12050: LD_VAR 0 4
12054: ARRAY
12055: PPUSH
12056: CALL_OW 141
// end ;
12060: GO 11892
12062: POP
12063: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12064: LD_VAR 0 1
12068: PPUSH
12069: LD_EXP 38
12073: PUSH
12074: LD_VAR 0 5
12078: ARRAY
12079: PUSH
12080: LD_INT 0
12082: PLUS
12083: PPUSH
12084: CALL_OW 505
// end ;
12088: LD_VAR 0 3
12092: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
12097: PPUSH
12098: PPUSH
// if not hack in hackTanks then
12099: LD_VAR 0 1
12103: PUSH
12104: LD_EXP 37
12108: IN
12109: NOT
12110: IFFALSE 12114
// exit ;
12112: GO 12354
// index := GetElementIndex ( hackTanks , hack ) ;
12114: LD_ADDR_VAR 0 4
12118: PUSH
12119: LD_EXP 37
12123: PPUSH
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL 35047 0 2
12133: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12134: LD_ADDR_VAR 0 3
12138: PUSH
12139: DOUBLE
12140: LD_EXP 38
12144: PUSH
12145: LD_VAR 0 4
12149: ARRAY
12150: INC
12151: ST_TO_ADDR
12152: LD_INT 1
12154: PUSH
12155: FOR_DOWNTO
12156: IFFALSE 12328
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_EXP 38
12167: PUSH
12168: LD_VAR 0 4
12172: ARRAY
12173: PUSH
12174: LD_VAR 0 3
12178: ARRAY
12179: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12180: LD_VAR 0 5
12184: PUSH
12185: LD_INT 1
12187: ARRAY
12188: PPUSH
12189: CALL_OW 302
12193: NOT
12194: PUSH
12195: LD_VAR 0 5
12199: PUSH
12200: LD_INT 1
12202: ARRAY
12203: PPUSH
12204: CALL_OW 255
12208: PUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 255
12218: NONEQUAL
12219: OR
12220: IFFALSE 12326
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12222: LD_VAR 0 5
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: CALL_OW 305
12235: PUSH
12236: LD_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: CALL_OW 255
12249: PUSH
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL_OW 255
12259: EQUAL
12260: AND
12261: IFFALSE 12285
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12263: LD_VAR 0 5
12267: PUSH
12268: LD_INT 1
12270: ARRAY
12271: PPUSH
12272: LD_VAR 0 5
12276: PUSH
12277: LD_INT 2
12279: ARRAY
12280: PPUSH
12281: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12285: LD_ADDR_EXP 38
12289: PUSH
12290: LD_EXP 38
12294: PPUSH
12295: LD_VAR 0 4
12299: PPUSH
12300: LD_EXP 38
12304: PUSH
12305: LD_VAR 0 4
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 3
12315: PPUSH
12316: CALL_OW 3
12320: PPUSH
12321: CALL_OW 1
12325: ST_TO_ADDR
// end ; end ;
12326: GO 12155
12328: POP
12329: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12330: LD_VAR 0 1
12334: PPUSH
12335: LD_EXP 38
12339: PUSH
12340: LD_VAR 0 4
12344: ARRAY
12345: PUSH
12346: LD_INT 0
12348: PLUS
12349: PPUSH
12350: CALL_OW 505
// end ;
12354: LD_VAR 0 2
12358: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
12363: PPUSH
12364: PPUSH
// if not hack in hackTanks then
12365: LD_VAR 0 1
12369: PUSH
12370: LD_EXP 37
12374: IN
12375: NOT
12376: IFFALSE 12380
// exit ;
12378: GO 12465
// index := GetElementIndex ( hackTanks , hack ) ;
12380: LD_ADDR_VAR 0 5
12384: PUSH
12385: LD_EXP 37
12389: PPUSH
12390: LD_VAR 0 1
12394: PPUSH
12395: CALL 35047 0 2
12399: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12400: LD_ADDR_VAR 0 4
12404: PUSH
12405: DOUBLE
12406: LD_INT 1
12408: DEC
12409: ST_TO_ADDR
12410: LD_EXP 38
12414: PUSH
12415: LD_VAR 0 5
12419: ARRAY
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12463
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12424: LD_EXP 38
12428: PUSH
12429: LD_VAR 0 5
12433: ARRAY
12434: PUSH
12435: LD_VAR 0 4
12439: ARRAY
12440: PUSH
12441: LD_INT 1
12443: ARRAY
12444: PUSH
12445: LD_VAR 0 2
12449: EQUAL
12450: IFFALSE 12461
// KillUnit ( vehicle ) ;
12452: LD_VAR 0 2
12456: PPUSH
12457: CALL_OW 66
12461: GO 12421
12463: POP
12464: POP
// end ;
12465: LD_VAR 0 3
12469: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12470: LD_EXP 42
12474: NOT
12475: IFFALSE 12510
12477: GO 12479
12479: DISABLE
// begin initMiner := true ;
12480: LD_ADDR_EXP 42
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// minersList := [ ] ;
12488: LD_ADDR_EXP 43
12492: PUSH
12493: EMPTY
12494: ST_TO_ADDR
// minerMinesList := [ ] ;
12495: LD_ADDR_EXP 44
12499: PUSH
12500: EMPTY
12501: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12502: LD_ADDR_EXP 45
12506: PUSH
12507: LD_INT 5
12509: ST_TO_ADDR
// end ;
12510: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12511: LD_EXP 42
12515: PUSH
12516: LD_INT 34
12518: PUSH
12519: LD_INT 81
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: AND
12531: IFFALSE 12992
12533: GO 12535
12535: DISABLE
12536: LD_INT 0
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
// begin enable ;
12542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12543: LD_ADDR_VAR 0 1
12547: PUSH
12548: LD_INT 34
12550: PUSH
12551: LD_INT 81
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 69
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12636
// begin if not i in minersList then
12566: LD_VAR 0 1
12570: PUSH
12571: LD_EXP 43
12575: IN
12576: NOT
12577: IFFALSE 12634
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12579: LD_ADDR_EXP 43
12583: PUSH
12584: LD_EXP 43
12588: PPUSH
12589: LD_EXP 43
12593: PUSH
12594: LD_INT 1
12596: PLUS
12597: PPUSH
12598: LD_VAR 0 1
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12608: LD_ADDR_EXP 44
12612: PUSH
12613: LD_EXP 44
12617: PPUSH
12618: LD_EXP 44
12622: PUSH
12623: LD_INT 1
12625: PLUS
12626: PPUSH
12627: EMPTY
12628: PPUSH
12629: CALL_OW 1
12633: ST_TO_ADDR
// end end ;
12634: GO 12563
12636: POP
12637: POP
// for i := minerMinesList downto 1 do
12638: LD_ADDR_VAR 0 1
12642: PUSH
12643: DOUBLE
12644: LD_EXP 44
12648: INC
12649: ST_TO_ADDR
12650: LD_INT 1
12652: PUSH
12653: FOR_DOWNTO
12654: IFFALSE 12990
// begin if IsLive ( minersList [ i ] ) then
12656: LD_EXP 43
12660: PUSH
12661: LD_VAR 0 1
12665: ARRAY
12666: PPUSH
12667: CALL_OW 300
12671: IFFALSE 12699
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12673: LD_EXP 43
12677: PUSH
12678: LD_VAR 0 1
12682: ARRAY
12683: PPUSH
12684: LD_EXP 44
12688: PUSH
12689: LD_VAR 0 1
12693: ARRAY
12694: PPUSH
12695: CALL_OW 505
// if not minerMinesList [ i ] then
12699: LD_EXP 44
12703: PUSH
12704: LD_VAR 0 1
12708: ARRAY
12709: NOT
12710: IFFALSE 12714
// continue ;
12712: GO 12653
// for j := minerMinesList [ i ] downto 1 do
12714: LD_ADDR_VAR 0 2
12718: PUSH
12719: DOUBLE
12720: LD_EXP 44
12724: PUSH
12725: LD_VAR 0 1
12729: ARRAY
12730: INC
12731: ST_TO_ADDR
12732: LD_INT 1
12734: PUSH
12735: FOR_DOWNTO
12736: IFFALSE 12986
// begin side := GetSide ( minersList [ i ] ) ;
12738: LD_ADDR_VAR 0 3
12742: PUSH
12743: LD_EXP 43
12747: PUSH
12748: LD_VAR 0 1
12752: ARRAY
12753: PPUSH
12754: CALL_OW 255
12758: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12759: LD_ADDR_VAR 0 4
12763: PUSH
12764: LD_EXP 44
12768: PUSH
12769: LD_VAR 0 1
12773: ARRAY
12774: PUSH
12775: LD_VAR 0 2
12779: ARRAY
12780: PUSH
12781: LD_INT 1
12783: ARRAY
12784: PPUSH
12785: LD_EXP 44
12789: PUSH
12790: LD_VAR 0 1
12794: ARRAY
12795: PUSH
12796: LD_VAR 0 2
12800: ARRAY
12801: PUSH
12802: LD_INT 2
12804: ARRAY
12805: PPUSH
12806: CALL_OW 428
12810: ST_TO_ADDR
// if not tmp then
12811: LD_VAR 0 4
12815: NOT
12816: IFFALSE 12820
// continue ;
12818: GO 12735
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12820: LD_VAR 0 4
12824: PUSH
12825: LD_INT 81
12827: PUSH
12828: LD_VAR 0 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: IN
12842: PUSH
12843: LD_EXP 44
12847: PUSH
12848: LD_VAR 0 1
12852: ARRAY
12853: PUSH
12854: LD_VAR 0 2
12858: ARRAY
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: LD_EXP 44
12868: PUSH
12869: LD_VAR 0 1
12873: ARRAY
12874: PUSH
12875: LD_VAR 0 2
12879: ARRAY
12880: PUSH
12881: LD_INT 2
12883: ARRAY
12884: PPUSH
12885: CALL_OW 458
12889: AND
12890: IFFALSE 12984
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12892: LD_EXP 44
12896: PUSH
12897: LD_VAR 0 1
12901: ARRAY
12902: PUSH
12903: LD_VAR 0 2
12907: ARRAY
12908: PUSH
12909: LD_INT 1
12911: ARRAY
12912: PPUSH
12913: LD_EXP 44
12917: PUSH
12918: LD_VAR 0 1
12922: ARRAY
12923: PUSH
12924: LD_VAR 0 2
12928: ARRAY
12929: PUSH
12930: LD_INT 2
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12943: LD_ADDR_EXP 44
12947: PUSH
12948: LD_EXP 44
12952: PPUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: LD_EXP 44
12962: PUSH
12963: LD_VAR 0 1
12967: ARRAY
12968: PPUSH
12969: LD_VAR 0 2
12973: PPUSH
12974: CALL_OW 3
12978: PPUSH
12979: CALL_OW 1
12983: ST_TO_ADDR
// end ; end ;
12984: GO 12735
12986: POP
12987: POP
// end ;
12988: GO 12653
12990: POP
12991: POP
// end ;
12992: PPOPN 4
12994: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12995: LD_INT 0
12997: PPUSH
12998: PPUSH
// result := false ;
12999: LD_ADDR_VAR 0 4
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13007: LD_VAR 0 1
13011: PPUSH
13012: CALL_OW 264
13016: PUSH
13017: LD_INT 81
13019: EQUAL
13020: NOT
13021: IFFALSE 13025
// exit ;
13023: GO 13265
// index := GetElementIndex ( minersList , unit ) ;
13025: LD_ADDR_VAR 0 5
13029: PUSH
13030: LD_EXP 43
13034: PPUSH
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL 35047 0 2
13044: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13045: LD_EXP 44
13049: PUSH
13050: LD_VAR 0 5
13054: ARRAY
13055: PUSH
13056: LD_EXP 45
13060: GREATEREQUAL
13061: IFFALSE 13065
// exit ;
13063: GO 13265
// ComMoveXY ( unit , x , y ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13084: LD_INT 35
13086: PPUSH
13087: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13091: LD_VAR 0 1
13095: PPUSH
13096: LD_VAR 0 2
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: CALL 66310 0 3
13110: NOT
13111: PUSH
13112: LD_VAR 0 1
13116: PPUSH
13117: CALL_OW 314
13121: AND
13122: IFFALSE 13126
// exit ;
13124: GO 13265
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13126: LD_VAR 0 2
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: CALL_OW 428
13140: PUSH
13141: LD_VAR 0 1
13145: EQUAL
13146: PUSH
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 314
13156: NOT
13157: AND
13158: IFFALSE 13084
// PlaySoundXY ( x , y , PlantMine ) ;
13160: LD_VAR 0 2
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_STRING PlantMine
13172: PPUSH
13173: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13177: LD_VAR 0 2
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 255
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13204: LD_ADDR_EXP 44
13208: PUSH
13209: LD_EXP 44
13213: PPUSH
13214: LD_VAR 0 5
13218: PUSH
13219: LD_EXP 44
13223: PUSH
13224: LD_VAR 0 5
13228: ARRAY
13229: PUSH
13230: LD_INT 1
13232: PLUS
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: LD_VAR 0 2
13242: PUSH
13243: LD_VAR 0 3
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL 35262 0 3
13256: ST_TO_ADDR
// result := true ;
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_INT 1
13264: ST_TO_ADDR
// end ;
13265: LD_VAR 0 4
13269: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13270: LD_INT 0
13272: PPUSH
13273: PPUSH
13274: PPUSH
// if not unit in minersList then
13275: LD_VAR 0 1
13279: PUSH
13280: LD_EXP 43
13284: IN
13285: NOT
13286: IFFALSE 13290
// exit ;
13288: GO 13682
// index := GetElementIndex ( minersList , unit ) ;
13290: LD_ADDR_VAR 0 6
13294: PUSH
13295: LD_EXP 43
13299: PPUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL 35047 0 2
13309: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13310: LD_ADDR_VAR 0 5
13314: PUSH
13315: DOUBLE
13316: LD_EXP 44
13320: PUSH
13321: LD_VAR 0 6
13325: ARRAY
13326: INC
13327: ST_TO_ADDR
13328: LD_INT 1
13330: PUSH
13331: FOR_DOWNTO
13332: IFFALSE 13493
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13334: LD_EXP 44
13338: PUSH
13339: LD_VAR 0 6
13343: ARRAY
13344: PUSH
13345: LD_VAR 0 5
13349: ARRAY
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PUSH
13355: LD_VAR 0 2
13359: EQUAL
13360: PUSH
13361: LD_EXP 44
13365: PUSH
13366: LD_VAR 0 6
13370: ARRAY
13371: PUSH
13372: LD_VAR 0 5
13376: ARRAY
13377: PUSH
13378: LD_INT 2
13380: ARRAY
13381: PUSH
13382: LD_VAR 0 3
13386: EQUAL
13387: AND
13388: IFFALSE 13491
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13390: LD_EXP 44
13394: PUSH
13395: LD_VAR 0 6
13399: ARRAY
13400: PUSH
13401: LD_VAR 0 5
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_EXP 44
13415: PUSH
13416: LD_VAR 0 6
13420: ARRAY
13421: PUSH
13422: LD_VAR 0 5
13426: ARRAY
13427: PUSH
13428: LD_INT 2
13430: ARRAY
13431: PPUSH
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 255
13441: PPUSH
13442: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13446: LD_ADDR_EXP 44
13450: PUSH
13451: LD_EXP 44
13455: PPUSH
13456: LD_VAR 0 6
13460: PPUSH
13461: LD_EXP 44
13465: PUSH
13466: LD_VAR 0 6
13470: ARRAY
13471: PPUSH
13472: LD_VAR 0 5
13476: PPUSH
13477: CALL_OW 3
13481: PPUSH
13482: CALL_OW 1
13486: ST_TO_ADDR
// exit ;
13487: POP
13488: POP
13489: GO 13682
// end ; end ;
13491: GO 13331
13493: POP
13494: POP
// for i := minerMinesList [ index ] downto 1 do
13495: LD_ADDR_VAR 0 5
13499: PUSH
13500: DOUBLE
13501: LD_EXP 44
13505: PUSH
13506: LD_VAR 0 6
13510: ARRAY
13511: INC
13512: ST_TO_ADDR
13513: LD_INT 1
13515: PUSH
13516: FOR_DOWNTO
13517: IFFALSE 13680
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13519: LD_EXP 44
13523: PUSH
13524: LD_VAR 0 6
13528: ARRAY
13529: PUSH
13530: LD_VAR 0 5
13534: ARRAY
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: LD_EXP 44
13544: PUSH
13545: LD_VAR 0 6
13549: ARRAY
13550: PUSH
13551: LD_VAR 0 5
13555: ARRAY
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: CALL_OW 298
13575: PUSH
13576: LD_INT 6
13578: LESS
13579: IFFALSE 13678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13581: LD_EXP 44
13585: PUSH
13586: LD_VAR 0 6
13590: ARRAY
13591: PUSH
13592: LD_VAR 0 5
13596: ARRAY
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: LD_EXP 44
13606: PUSH
13607: LD_VAR 0 6
13611: ARRAY
13612: PUSH
13613: LD_VAR 0 5
13617: ARRAY
13618: PUSH
13619: LD_INT 2
13621: ARRAY
13622: PPUSH
13623: LD_VAR 0 1
13627: PPUSH
13628: CALL_OW 255
13632: PPUSH
13633: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13637: LD_ADDR_EXP 44
13641: PUSH
13642: LD_EXP 44
13646: PPUSH
13647: LD_VAR 0 6
13651: PPUSH
13652: LD_EXP 44
13656: PUSH
13657: LD_VAR 0 6
13661: ARRAY
13662: PPUSH
13663: LD_VAR 0 5
13667: PPUSH
13668: CALL_OW 3
13672: PPUSH
13673: CALL_OW 1
13677: ST_TO_ADDR
// end ; end ;
13678: GO 13516
13680: POP
13681: POP
// end ;
13682: LD_VAR 0 4
13686: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13687: LD_INT 0
13689: PPUSH
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 264
13707: PUSH
13708: LD_INT 81
13710: EQUAL
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PUSH
13718: LD_EXP 43
13722: IN
13723: NOT
13724: OR
13725: IFFALSE 13729
// exit ;
13727: GO 14051
// index := GetElementIndex ( minersList , unit ) ;
13729: LD_ADDR_VAR 0 6
13733: PUSH
13734: LD_EXP 43
13738: PPUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL 35047 0 2
13748: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13749: LD_ADDR_VAR 0 8
13753: PUSH
13754: LD_EXP 45
13758: PUSH
13759: LD_EXP 44
13763: PUSH
13764: LD_VAR 0 6
13768: ARRAY
13769: MINUS
13770: ST_TO_ADDR
// if not minesFreeAmount then
13771: LD_VAR 0 8
13775: NOT
13776: IFFALSE 13780
// exit ;
13778: GO 14051
// tmp := [ ] ;
13780: LD_ADDR_VAR 0 7
13784: PUSH
13785: EMPTY
13786: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13787: LD_ADDR_VAR 0 5
13791: PUSH
13792: DOUBLE
13793: LD_INT 1
13795: DEC
13796: ST_TO_ADDR
13797: LD_VAR 0 8
13801: PUSH
13802: FOR_TO
13803: IFFALSE 13998
// begin _d := rand ( 0 , 5 ) ;
13805: LD_ADDR_VAR 0 11
13809: PUSH
13810: LD_INT 0
13812: PPUSH
13813: LD_INT 5
13815: PPUSH
13816: CALL_OW 12
13820: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13821: LD_ADDR_VAR 0 12
13825: PUSH
13826: LD_INT 2
13828: PPUSH
13829: LD_INT 6
13831: PPUSH
13832: CALL_OW 12
13836: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13837: LD_ADDR_VAR 0 9
13841: PUSH
13842: LD_VAR 0 2
13846: PPUSH
13847: LD_VAR 0 11
13851: PPUSH
13852: LD_VAR 0 12
13856: PPUSH
13857: CALL_OW 272
13861: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13862: LD_ADDR_VAR 0 10
13866: PUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_VAR 0 11
13876: PPUSH
13877: LD_VAR 0 12
13881: PPUSH
13882: CALL_OW 273
13886: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13887: LD_VAR 0 9
13891: PPUSH
13892: LD_VAR 0 10
13896: PPUSH
13897: CALL_OW 488
13901: PUSH
13902: LD_VAR 0 9
13906: PUSH
13907: LD_VAR 0 10
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_VAR 0 7
13920: IN
13921: NOT
13922: AND
13923: PUSH
13924: LD_VAR 0 9
13928: PPUSH
13929: LD_VAR 0 10
13933: PPUSH
13934: CALL_OW 458
13938: NOT
13939: AND
13940: IFFALSE 13982
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13942: LD_ADDR_VAR 0 7
13946: PUSH
13947: LD_VAR 0 7
13951: PPUSH
13952: LD_VAR 0 7
13956: PUSH
13957: LD_INT 1
13959: PLUS
13960: PPUSH
13961: LD_VAR 0 9
13965: PUSH
13966: LD_VAR 0 10
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PPUSH
13975: CALL_OW 1
13979: ST_TO_ADDR
13980: GO 13996
// i := i - 1 ;
13982: LD_ADDR_VAR 0 5
13986: PUSH
13987: LD_VAR 0 5
13991: PUSH
13992: LD_INT 1
13994: MINUS
13995: ST_TO_ADDR
// end ;
13996: GO 13802
13998: POP
13999: POP
// for i in tmp do
14000: LD_ADDR_VAR 0 5
14004: PUSH
14005: LD_VAR 0 7
14009: PUSH
14010: FOR_IN
14011: IFFALSE 14049
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14013: LD_VAR 0 1
14017: PPUSH
14018: LD_VAR 0 5
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: LD_VAR 0 5
14031: PUSH
14032: LD_INT 2
14034: ARRAY
14035: PPUSH
14036: CALL 12995 0 3
14040: NOT
14041: IFFALSE 14047
// exit ;
14043: POP
14044: POP
14045: GO 14051
14047: GO 14010
14049: POP
14050: POP
// end ;
14051: LD_VAR 0 4
14055: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14056: LD_INT 0
14058: PPUSH
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
14063: PPUSH
14064: PPUSH
// if not GetClass ( unit ) = class_sniper then
14065: LD_VAR 0 1
14069: PPUSH
14070: CALL_OW 257
14074: PUSH
14075: LD_INT 5
14077: EQUAL
14078: NOT
14079: IFFALSE 14083
// exit ;
14081: GO 14471
// dist := 8 ;
14083: LD_ADDR_VAR 0 5
14087: PUSH
14088: LD_INT 8
14090: ST_TO_ADDR
// viewRange := 12 ;
14091: LD_ADDR_VAR 0 7
14095: PUSH
14096: LD_INT 12
14098: ST_TO_ADDR
// side := GetSide ( unit ) ;
14099: LD_ADDR_VAR 0 6
14103: PUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 255
14113: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14114: LD_INT 61
14116: PPUSH
14117: LD_VAR 0 6
14121: PPUSH
14122: CALL_OW 321
14126: PUSH
14127: LD_INT 2
14129: EQUAL
14130: IFFALSE 14140
// viewRange := 16 ;
14132: LD_ADDR_VAR 0 7
14136: PUSH
14137: LD_INT 16
14139: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_VAR 0 2
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: CALL_OW 297
14159: PUSH
14160: LD_VAR 0 5
14164: GREATER
14165: IFFALSE 14244
// begin ComMoveXY ( unit , x , y ) ;
14167: LD_VAR 0 1
14171: PPUSH
14172: LD_VAR 0 2
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14186: LD_INT 35
14188: PPUSH
14189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14193: LD_VAR 0 1
14197: PPUSH
14198: LD_VAR 0 2
14202: PPUSH
14203: LD_VAR 0 3
14207: PPUSH
14208: CALL 66310 0 3
14212: NOT
14213: IFFALSE 14217
// exit ;
14215: GO 14471
// until GetDistUnitXY ( unit , x , y ) < dist ;
14217: LD_VAR 0 1
14221: PPUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: LD_VAR 0 3
14231: PPUSH
14232: CALL_OW 297
14236: PUSH
14237: LD_VAR 0 5
14241: LESS
14242: IFFALSE 14186
// end ; ComTurnXY ( unit , x , y ) ;
14244: LD_VAR 0 1
14248: PPUSH
14249: LD_VAR 0 2
14253: PPUSH
14254: LD_VAR 0 3
14258: PPUSH
14259: CALL_OW 118
// wait ( 5 ) ;
14263: LD_INT 5
14265: PPUSH
14266: CALL_OW 67
// _d := GetDir ( unit ) ;
14270: LD_ADDR_VAR 0 10
14274: PUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 254
14284: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14285: LD_ADDR_VAR 0 8
14289: PUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 250
14299: PPUSH
14300: LD_VAR 0 10
14304: PPUSH
14305: LD_VAR 0 5
14309: PPUSH
14310: CALL_OW 272
14314: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14315: LD_ADDR_VAR 0 9
14319: PUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 251
14329: PPUSH
14330: LD_VAR 0 10
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 273
14344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14345: LD_VAR 0 8
14349: PPUSH
14350: LD_VAR 0 9
14354: PPUSH
14355: CALL_OW 488
14359: NOT
14360: IFFALSE 14364
// exit ;
14362: GO 14471
// ComAnimCustom ( unit , 1 ) ;
14364: LD_VAR 0 1
14368: PPUSH
14369: LD_INT 1
14371: PPUSH
14372: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14376: LD_VAR 0 8
14380: PPUSH
14381: LD_VAR 0 9
14385: PPUSH
14386: LD_VAR 0 6
14390: PPUSH
14391: LD_VAR 0 7
14395: PPUSH
14396: CALL_OW 330
// repeat wait ( 1 ) ;
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14407: LD_VAR 0 1
14411: PPUSH
14412: CALL_OW 316
14416: PUSH
14417: LD_VAR 0 1
14421: PPUSH
14422: CALL_OW 314
14426: OR
14427: PUSH
14428: LD_VAR 0 1
14432: PPUSH
14433: CALL_OW 302
14437: NOT
14438: OR
14439: PUSH
14440: LD_VAR 0 1
14444: PPUSH
14445: CALL_OW 301
14449: OR
14450: IFFALSE 14400
// RemoveSeeing ( _x , _y , side ) ;
14452: LD_VAR 0 8
14456: PPUSH
14457: LD_VAR 0 9
14461: PPUSH
14462: LD_VAR 0 6
14466: PPUSH
14467: CALL_OW 331
// end ; end_of_file
14471: LD_VAR 0 4
14475: RET
// every 0 0$1 do
14476: GO 14478
14478: DISABLE
// begin enable ;
14479: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14480: LD_STRING updateTimer(
14482: PUSH
14483: LD_OWVAR 1
14487: STR
14488: PUSH
14489: LD_STRING );
14491: STR
14492: PPUSH
14493: CALL_OW 559
// end ;
14497: END
// export function SOS_MapStart ( ) ; begin
14498: LD_INT 0
14500: PPUSH
// if streamModeActive then
14501: LD_EXP 46
14505: IFFALSE 14514
// DefineStreamItems ( true ) ;
14507: LD_INT 1
14509: PPUSH
14510: CALL 16168 0 1
// UpdateFactoryWaypoints ( ) ;
14514: CALL 29029 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14518: CALL 29286 0 0
// end ;
14522: LD_VAR 0 1
14526: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14527: LD_INT 0
14529: PPUSH
// if p2 = 100 then
14530: LD_VAR 0 2
14534: PUSH
14535: LD_INT 100
14537: EQUAL
14538: IFFALSE 15541
// begin if not StreamModeActive then
14540: LD_EXP 46
14544: NOT
14545: IFFALSE 14555
// StreamModeActive := true ;
14547: LD_ADDR_EXP 46
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// if p3 = 0 then
14555: LD_VAR 0 3
14559: PUSH
14560: LD_INT 0
14562: EQUAL
14563: IFFALSE 14569
// InitStreamMode ;
14565: CALL 15704 0 0
// if p3 = 1 then
14569: LD_VAR 0 3
14573: PUSH
14574: LD_INT 1
14576: EQUAL
14577: IFFALSE 14587
// sRocket := true ;
14579: LD_ADDR_EXP 51
14583: PUSH
14584: LD_INT 1
14586: ST_TO_ADDR
// if p3 = 2 then
14587: LD_VAR 0 3
14591: PUSH
14592: LD_INT 2
14594: EQUAL
14595: IFFALSE 14605
// sSpeed := true ;
14597: LD_ADDR_EXP 50
14601: PUSH
14602: LD_INT 1
14604: ST_TO_ADDR
// if p3 = 3 then
14605: LD_VAR 0 3
14609: PUSH
14610: LD_INT 3
14612: EQUAL
14613: IFFALSE 14623
// sEngine := true ;
14615: LD_ADDR_EXP 52
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// if p3 = 4 then
14623: LD_VAR 0 3
14627: PUSH
14628: LD_INT 4
14630: EQUAL
14631: IFFALSE 14641
// sSpec := true ;
14633: LD_ADDR_EXP 49
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// if p3 = 5 then
14641: LD_VAR 0 3
14645: PUSH
14646: LD_INT 5
14648: EQUAL
14649: IFFALSE 14659
// sLevel := true ;
14651: LD_ADDR_EXP 53
14655: PUSH
14656: LD_INT 1
14658: ST_TO_ADDR
// if p3 = 6 then
14659: LD_VAR 0 3
14663: PUSH
14664: LD_INT 6
14666: EQUAL
14667: IFFALSE 14677
// sArmoury := true ;
14669: LD_ADDR_EXP 54
14673: PUSH
14674: LD_INT 1
14676: ST_TO_ADDR
// if p3 = 7 then
14677: LD_VAR 0 3
14681: PUSH
14682: LD_INT 7
14684: EQUAL
14685: IFFALSE 14695
// sRadar := true ;
14687: LD_ADDR_EXP 55
14691: PUSH
14692: LD_INT 1
14694: ST_TO_ADDR
// if p3 = 8 then
14695: LD_VAR 0 3
14699: PUSH
14700: LD_INT 8
14702: EQUAL
14703: IFFALSE 14713
// sBunker := true ;
14705: LD_ADDR_EXP 56
14709: PUSH
14710: LD_INT 1
14712: ST_TO_ADDR
// if p3 = 9 then
14713: LD_VAR 0 3
14717: PUSH
14718: LD_INT 9
14720: EQUAL
14721: IFFALSE 14731
// sHack := true ;
14723: LD_ADDR_EXP 57
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// if p3 = 10 then
14731: LD_VAR 0 3
14735: PUSH
14736: LD_INT 10
14738: EQUAL
14739: IFFALSE 14749
// sFire := true ;
14741: LD_ADDR_EXP 58
14745: PUSH
14746: LD_INT 1
14748: ST_TO_ADDR
// if p3 = 11 then
14749: LD_VAR 0 3
14753: PUSH
14754: LD_INT 11
14756: EQUAL
14757: IFFALSE 14767
// sRefresh := true ;
14759: LD_ADDR_EXP 59
14763: PUSH
14764: LD_INT 1
14766: ST_TO_ADDR
// if p3 = 12 then
14767: LD_VAR 0 3
14771: PUSH
14772: LD_INT 12
14774: EQUAL
14775: IFFALSE 14785
// sExp := true ;
14777: LD_ADDR_EXP 60
14781: PUSH
14782: LD_INT 1
14784: ST_TO_ADDR
// if p3 = 13 then
14785: LD_VAR 0 3
14789: PUSH
14790: LD_INT 13
14792: EQUAL
14793: IFFALSE 14803
// sDepot := true ;
14795: LD_ADDR_EXP 61
14799: PUSH
14800: LD_INT 1
14802: ST_TO_ADDR
// if p3 = 14 then
14803: LD_VAR 0 3
14807: PUSH
14808: LD_INT 14
14810: EQUAL
14811: IFFALSE 14821
// sFlag := true ;
14813: LD_ADDR_EXP 62
14817: PUSH
14818: LD_INT 1
14820: ST_TO_ADDR
// if p3 = 15 then
14821: LD_VAR 0 3
14825: PUSH
14826: LD_INT 15
14828: EQUAL
14829: IFFALSE 14839
// sKamikadze := true ;
14831: LD_ADDR_EXP 70
14835: PUSH
14836: LD_INT 1
14838: ST_TO_ADDR
// if p3 = 16 then
14839: LD_VAR 0 3
14843: PUSH
14844: LD_INT 16
14846: EQUAL
14847: IFFALSE 14857
// sTroll := true ;
14849: LD_ADDR_EXP 71
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// if p3 = 17 then
14857: LD_VAR 0 3
14861: PUSH
14862: LD_INT 17
14864: EQUAL
14865: IFFALSE 14875
// sSlow := true ;
14867: LD_ADDR_EXP 72
14871: PUSH
14872: LD_INT 1
14874: ST_TO_ADDR
// if p3 = 18 then
14875: LD_VAR 0 3
14879: PUSH
14880: LD_INT 18
14882: EQUAL
14883: IFFALSE 14893
// sLack := true ;
14885: LD_ADDR_EXP 73
14889: PUSH
14890: LD_INT 1
14892: ST_TO_ADDR
// if p3 = 19 then
14893: LD_VAR 0 3
14897: PUSH
14898: LD_INT 19
14900: EQUAL
14901: IFFALSE 14911
// sTank := true ;
14903: LD_ADDR_EXP 75
14907: PUSH
14908: LD_INT 1
14910: ST_TO_ADDR
// if p3 = 20 then
14911: LD_VAR 0 3
14915: PUSH
14916: LD_INT 20
14918: EQUAL
14919: IFFALSE 14929
// sRemote := true ;
14921: LD_ADDR_EXP 76
14925: PUSH
14926: LD_INT 1
14928: ST_TO_ADDR
// if p3 = 21 then
14929: LD_VAR 0 3
14933: PUSH
14934: LD_INT 21
14936: EQUAL
14937: IFFALSE 14947
// sPowell := true ;
14939: LD_ADDR_EXP 77
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// if p3 = 22 then
14947: LD_VAR 0 3
14951: PUSH
14952: LD_INT 22
14954: EQUAL
14955: IFFALSE 14965
// sTeleport := true ;
14957: LD_ADDR_EXP 80
14961: PUSH
14962: LD_INT 1
14964: ST_TO_ADDR
// if p3 = 23 then
14965: LD_VAR 0 3
14969: PUSH
14970: LD_INT 23
14972: EQUAL
14973: IFFALSE 14983
// sOilTower := true ;
14975: LD_ADDR_EXP 82
14979: PUSH
14980: LD_INT 1
14982: ST_TO_ADDR
// if p3 = 24 then
14983: LD_VAR 0 3
14987: PUSH
14988: LD_INT 24
14990: EQUAL
14991: IFFALSE 15001
// sShovel := true ;
14993: LD_ADDR_EXP 83
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if p3 = 25 then
15001: LD_VAR 0 3
15005: PUSH
15006: LD_INT 25
15008: EQUAL
15009: IFFALSE 15019
// sSheik := true ;
15011: LD_ADDR_EXP 84
15015: PUSH
15016: LD_INT 1
15018: ST_TO_ADDR
// if p3 = 26 then
15019: LD_VAR 0 3
15023: PUSH
15024: LD_INT 26
15026: EQUAL
15027: IFFALSE 15037
// sEarthquake := true ;
15029: LD_ADDR_EXP 86
15033: PUSH
15034: LD_INT 1
15036: ST_TO_ADDR
// if p3 = 27 then
15037: LD_VAR 0 3
15041: PUSH
15042: LD_INT 27
15044: EQUAL
15045: IFFALSE 15055
// sAI := true ;
15047: LD_ADDR_EXP 87
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// if p3 = 28 then
15055: LD_VAR 0 3
15059: PUSH
15060: LD_INT 28
15062: EQUAL
15063: IFFALSE 15073
// sCargo := true ;
15065: LD_ADDR_EXP 90
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// if p3 = 29 then
15073: LD_VAR 0 3
15077: PUSH
15078: LD_INT 29
15080: EQUAL
15081: IFFALSE 15091
// sDLaser := true ;
15083: LD_ADDR_EXP 91
15087: PUSH
15088: LD_INT 1
15090: ST_TO_ADDR
// if p3 = 30 then
15091: LD_VAR 0 3
15095: PUSH
15096: LD_INT 30
15098: EQUAL
15099: IFFALSE 15109
// sExchange := true ;
15101: LD_ADDR_EXP 92
15105: PUSH
15106: LD_INT 1
15108: ST_TO_ADDR
// if p3 = 31 then
15109: LD_VAR 0 3
15113: PUSH
15114: LD_INT 31
15116: EQUAL
15117: IFFALSE 15127
// sFac := true ;
15119: LD_ADDR_EXP 93
15123: PUSH
15124: LD_INT 1
15126: ST_TO_ADDR
// if p3 = 32 then
15127: LD_VAR 0 3
15131: PUSH
15132: LD_INT 32
15134: EQUAL
15135: IFFALSE 15145
// sPower := true ;
15137: LD_ADDR_EXP 94
15141: PUSH
15142: LD_INT 1
15144: ST_TO_ADDR
// if p3 = 33 then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_INT 33
15152: EQUAL
15153: IFFALSE 15163
// sRandom := true ;
15155: LD_ADDR_EXP 95
15159: PUSH
15160: LD_INT 1
15162: ST_TO_ADDR
// if p3 = 34 then
15163: LD_VAR 0 3
15167: PUSH
15168: LD_INT 34
15170: EQUAL
15171: IFFALSE 15181
// sShield := true ;
15173: LD_ADDR_EXP 96
15177: PUSH
15178: LD_INT 1
15180: ST_TO_ADDR
// if p3 = 35 then
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 35
15188: EQUAL
15189: IFFALSE 15199
// sTime := true ;
15191: LD_ADDR_EXP 97
15195: PUSH
15196: LD_INT 1
15198: ST_TO_ADDR
// if p3 = 36 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 36
15206: EQUAL
15207: IFFALSE 15217
// sTools := true ;
15209: LD_ADDR_EXP 98
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 101 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 101
15224: EQUAL
15225: IFFALSE 15235
// sSold := true ;
15227: LD_ADDR_EXP 63
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 102 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 102
15242: EQUAL
15243: IFFALSE 15253
// sDiff := true ;
15245: LD_ADDR_EXP 64
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 103 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 103
15260: EQUAL
15261: IFFALSE 15271
// sFog := true ;
15263: LD_ADDR_EXP 67
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 104 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 104
15278: EQUAL
15279: IFFALSE 15289
// sReset := true ;
15281: LD_ADDR_EXP 68
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 105 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 105
15296: EQUAL
15297: IFFALSE 15307
// sSun := true ;
15299: LD_ADDR_EXP 69
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 106 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 106
15314: EQUAL
15315: IFFALSE 15325
// sTiger := true ;
15317: LD_ADDR_EXP 65
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 107 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 107
15332: EQUAL
15333: IFFALSE 15343
// sBomb := true ;
15335: LD_ADDR_EXP 66
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 108 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 108
15350: EQUAL
15351: IFFALSE 15361
// sWound := true ;
15353: LD_ADDR_EXP 74
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 109 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 109
15368: EQUAL
15369: IFFALSE 15379
// sBetray := true ;
15371: LD_ADDR_EXP 78
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 110 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 110
15386: EQUAL
15387: IFFALSE 15397
// sContamin := true ;
15389: LD_ADDR_EXP 79
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 111 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 111
15404: EQUAL
15405: IFFALSE 15415
// sOil := true ;
15407: LD_ADDR_EXP 81
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 112 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 112
15422: EQUAL
15423: IFFALSE 15433
// sStu := true ;
15425: LD_ADDR_EXP 85
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 113 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 113
15440: EQUAL
15441: IFFALSE 15451
// sBazooka := true ;
15443: LD_ADDR_EXP 88
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 114 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 114
15458: EQUAL
15459: IFFALSE 15469
// sMortar := true ;
15461: LD_ADDR_EXP 89
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 115 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 115
15476: EQUAL
15477: IFFALSE 15487
// sRanger := true ;
15479: LD_ADDR_EXP 99
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 116 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 116
15494: EQUAL
15495: IFFALSE 15505
// sComputer := true ;
15497: LD_ADDR_EXP 100
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 117 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 117
15512: EQUAL
15513: IFFALSE 15523
// s30 := true ;
15515: LD_ADDR_EXP 101
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 118 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 118
15530: EQUAL
15531: IFFALSE 15541
// s60 := true ;
15533: LD_ADDR_EXP 102
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// end ; if p2 = 101 then
15541: LD_VAR 0 2
15545: PUSH
15546: LD_INT 101
15548: EQUAL
15549: IFFALSE 15677
// begin case p3 of 1 :
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 1
15558: DOUBLE
15559: EQUAL
15560: IFTRUE 15564
15562: GO 15571
15564: POP
// hHackUnlimitedResources ; 2 :
15565: CALL 27775 0 0
15569: GO 15677
15571: LD_INT 2
15573: DOUBLE
15574: EQUAL
15575: IFTRUE 15579
15577: GO 15586
15579: POP
// hHackSetLevel10 ; 3 :
15580: CALL 27908 0 0
15584: GO 15677
15586: LD_INT 3
15588: DOUBLE
15589: EQUAL
15590: IFTRUE 15594
15592: GO 15601
15594: POP
// hHackSetLevel10YourUnits ; 4 :
15595: CALL 27993 0 0
15599: GO 15677
15601: LD_INT 4
15603: DOUBLE
15604: EQUAL
15605: IFTRUE 15609
15607: GO 15616
15609: POP
// hHackInvincible ; 5 :
15610: CALL 28441 0 0
15614: GO 15677
15616: LD_INT 5
15618: DOUBLE
15619: EQUAL
15620: IFTRUE 15624
15622: GO 15631
15624: POP
// hHackInvisible ; 6 :
15625: CALL 28552 0 0
15629: GO 15677
15631: LD_INT 6
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15646
15639: POP
// hHackChangeYourSide ; 7 :
15640: CALL 28609 0 0
15644: GO 15677
15646: LD_INT 7
15648: DOUBLE
15649: EQUAL
15650: IFTRUE 15654
15652: GO 15661
15654: POP
// hHackChangeUnitSide ; 8 :
15655: CALL 28651 0 0
15659: GO 15677
15661: LD_INT 8
15663: DOUBLE
15664: EQUAL
15665: IFTRUE 15669
15667: GO 15676
15669: POP
// hHackFog ; end ;
15670: CALL 28752 0 0
15674: GO 15677
15676: POP
// end ; end ;
15677: LD_VAR 0 7
15681: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15682: GO 15684
15684: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15685: LD_STRING initStreamRollete();
15687: PPUSH
15688: CALL_OW 559
// InitStreamMode ;
15692: CALL 15704 0 0
// DefineStreamItems ( false ) ;
15696: LD_INT 0
15698: PPUSH
15699: CALL 16168 0 1
// end ;
15703: END
// function InitStreamMode ; begin
15704: LD_INT 0
15706: PPUSH
// streamModeActive := false ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// normalCounter := 36 ;
15715: LD_ADDR_EXP 47
15719: PUSH
15720: LD_INT 36
15722: ST_TO_ADDR
// hardcoreCounter := 18 ;
15723: LD_ADDR_EXP 48
15727: PUSH
15728: LD_INT 18
15730: ST_TO_ADDR
// sRocket := false ;
15731: LD_ADDR_EXP 51
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// sSpeed := false ;
15739: LD_ADDR_EXP 50
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// sEngine := false ;
15747: LD_ADDR_EXP 52
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// sSpec := false ;
15755: LD_ADDR_EXP 49
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// sLevel := false ;
15763: LD_ADDR_EXP 53
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// sArmoury := false ;
15771: LD_ADDR_EXP 54
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// sRadar := false ;
15779: LD_ADDR_EXP 55
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// sBunker := false ;
15787: LD_ADDR_EXP 56
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// sHack := false ;
15795: LD_ADDR_EXP 57
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// sFire := false ;
15803: LD_ADDR_EXP 58
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// sRefresh := false ;
15811: LD_ADDR_EXP 59
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// sExp := false ;
15819: LD_ADDR_EXP 60
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// sDepot := false ;
15827: LD_ADDR_EXP 61
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// sFlag := false ;
15835: LD_ADDR_EXP 62
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// sKamikadze := false ;
15843: LD_ADDR_EXP 70
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// sTroll := false ;
15851: LD_ADDR_EXP 71
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// sSlow := false ;
15859: LD_ADDR_EXP 72
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
// sLack := false ;
15867: LD_ADDR_EXP 73
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// sTank := false ;
15875: LD_ADDR_EXP 75
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// sRemote := false ;
15883: LD_ADDR_EXP 76
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// sPowell := false ;
15891: LD_ADDR_EXP 77
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// sTeleport := false ;
15899: LD_ADDR_EXP 80
15903: PUSH
15904: LD_INT 0
15906: ST_TO_ADDR
// sOilTower := false ;
15907: LD_ADDR_EXP 82
15911: PUSH
15912: LD_INT 0
15914: ST_TO_ADDR
// sShovel := false ;
15915: LD_ADDR_EXP 83
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sSheik := false ;
15923: LD_ADDR_EXP 84
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sEarthquake := false ;
15931: LD_ADDR_EXP 86
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sAI := false ;
15939: LD_ADDR_EXP 87
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sCargo := false ;
15947: LD_ADDR_EXP 90
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sDLaser := false ;
15955: LD_ADDR_EXP 91
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// sExchange := false ;
15963: LD_ADDR_EXP 92
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// sFac := false ;
15971: LD_ADDR_EXP 93
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// sPower := false ;
15979: LD_ADDR_EXP 94
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// sRandom := false ;
15987: LD_ADDR_EXP 95
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// sShield := false ;
15995: LD_ADDR_EXP 96
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// sTime := false ;
16003: LD_ADDR_EXP 97
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// sTools := false ;
16011: LD_ADDR_EXP 98
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sSold := false ;
16019: LD_ADDR_EXP 63
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sDiff := false ;
16027: LD_ADDR_EXP 64
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sFog := false ;
16035: LD_ADDR_EXP 67
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// sReset := false ;
16043: LD_ADDR_EXP 68
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// sSun := false ;
16051: LD_ADDR_EXP 69
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// sTiger := false ;
16059: LD_ADDR_EXP 65
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// sBomb := false ;
16067: LD_ADDR_EXP 66
16071: PUSH
16072: LD_INT 0
16074: ST_TO_ADDR
// sWound := false ;
16075: LD_ADDR_EXP 74
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// sBetray := false ;
16083: LD_ADDR_EXP 78
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// sContamin := false ;
16091: LD_ADDR_EXP 79
16095: PUSH
16096: LD_INT 0
16098: ST_TO_ADDR
// sOil := false ;
16099: LD_ADDR_EXP 81
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// sStu := false ;
16107: LD_ADDR_EXP 85
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// sBazooka := false ;
16115: LD_ADDR_EXP 88
16119: PUSH
16120: LD_INT 0
16122: ST_TO_ADDR
// sMortar := false ;
16123: LD_ADDR_EXP 89
16127: PUSH
16128: LD_INT 0
16130: ST_TO_ADDR
// sRanger := false ;
16131: LD_ADDR_EXP 99
16135: PUSH
16136: LD_INT 0
16138: ST_TO_ADDR
// sComputer := false ;
16139: LD_ADDR_EXP 100
16143: PUSH
16144: LD_INT 0
16146: ST_TO_ADDR
// s30 := false ;
16147: LD_ADDR_EXP 101
16151: PUSH
16152: LD_INT 0
16154: ST_TO_ADDR
// s60 := false ;
16155: LD_ADDR_EXP 102
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// end ;
16163: LD_VAR 0 1
16167: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
16174: PPUSH
16175: PPUSH
16176: PPUSH
// result := [ ] ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: EMPTY
16183: ST_TO_ADDR
// if campaign_id = 1 then
16184: LD_OWVAR 69
16188: PUSH
16189: LD_INT 1
16191: EQUAL
16192: IFFALSE 19358
// begin case mission_number of 1 :
16194: LD_OWVAR 70
16198: PUSH
16199: LD_INT 1
16201: DOUBLE
16202: EQUAL
16203: IFTRUE 16207
16205: GO 16283
16207: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 4
16218: PUSH
16219: LD_INT 11
16221: PUSH
16222: LD_INT 12
16224: PUSH
16225: LD_INT 15
16227: PUSH
16228: LD_INT 16
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_INT 23
16236: PUSH
16237: LD_INT 26
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 101
16253: PUSH
16254: LD_INT 102
16256: PUSH
16257: LD_INT 106
16259: PUSH
16260: LD_INT 116
16262: PUSH
16263: LD_INT 117
16265: PUSH
16266: LD_INT 118
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: ST_TO_ADDR
16281: GO 19356
16283: LD_INT 2
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16375
16291: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_INT 2
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 11
16305: PUSH
16306: LD_INT 12
16308: PUSH
16309: LD_INT 15
16311: PUSH
16312: LD_INT 16
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_INT 23
16320: PUSH
16321: LD_INT 26
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 101
16337: PUSH
16338: LD_INT 102
16340: PUSH
16341: LD_INT 105
16343: PUSH
16344: LD_INT 106
16346: PUSH
16347: LD_INT 108
16349: PUSH
16350: LD_INT 116
16352: PUSH
16353: LD_INT 117
16355: PUSH
16356: LD_INT 118
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: ST_TO_ADDR
16373: GO 19356
16375: LD_INT 3
16377: DOUBLE
16378: EQUAL
16379: IFTRUE 16383
16381: GO 16471
16383: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16384: LD_ADDR_VAR 0 2
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: LD_INT 11
16400: PUSH
16401: LD_INT 12
16403: PUSH
16404: LD_INT 15
16406: PUSH
16407: LD_INT 16
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_INT 26
16415: PUSH
16416: LD_INT 36
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 101
16433: PUSH
16434: LD_INT 102
16436: PUSH
16437: LD_INT 105
16439: PUSH
16440: LD_INT 106
16442: PUSH
16443: LD_INT 108
16445: PUSH
16446: LD_INT 116
16448: PUSH
16449: LD_INT 117
16451: PUSH
16452: LD_INT 118
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: ST_TO_ADDR
16469: GO 19356
16471: LD_INT 4
16473: DOUBLE
16474: EQUAL
16475: IFTRUE 16479
16477: GO 16575
16479: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 4
16490: PUSH
16491: LD_INT 5
16493: PUSH
16494: LD_INT 8
16496: PUSH
16497: LD_INT 11
16499: PUSH
16500: LD_INT 12
16502: PUSH
16503: LD_INT 15
16505: PUSH
16506: LD_INT 16
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_INT 23
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: LD_INT 36
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 101
16537: PUSH
16538: LD_INT 102
16540: PUSH
16541: LD_INT 105
16543: PUSH
16544: LD_INT 106
16546: PUSH
16547: LD_INT 108
16549: PUSH
16550: LD_INT 116
16552: PUSH
16553: LD_INT 117
16555: PUSH
16556: LD_INT 118
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: ST_TO_ADDR
16573: GO 19356
16575: LD_INT 5
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16695
16583: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: LD_INT 6
16600: PUSH
16601: LD_INT 8
16603: PUSH
16604: LD_INT 11
16606: PUSH
16607: LD_INT 12
16609: PUSH
16610: LD_INT 15
16612: PUSH
16613: LD_INT 16
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 23
16621: PUSH
16622: LD_INT 25
16624: PUSH
16625: LD_INT 26
16627: PUSH
16628: LD_INT 36
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 101
16649: PUSH
16650: LD_INT 102
16652: PUSH
16653: LD_INT 105
16655: PUSH
16656: LD_INT 106
16658: PUSH
16659: LD_INT 108
16661: PUSH
16662: LD_INT 109
16664: PUSH
16665: LD_INT 112
16667: PUSH
16668: LD_INT 116
16670: PUSH
16671: LD_INT 117
16673: PUSH
16674: LD_INT 118
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: ST_TO_ADDR
16693: GO 19356
16695: LD_INT 6
16697: DOUBLE
16698: EQUAL
16699: IFTRUE 16703
16701: GO 16835
16703: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16704: LD_ADDR_VAR 0 2
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: LD_INT 4
16714: PUSH
16715: LD_INT 5
16717: PUSH
16718: LD_INT 6
16720: PUSH
16721: LD_INT 8
16723: PUSH
16724: LD_INT 11
16726: PUSH
16727: LD_INT 12
16729: PUSH
16730: LD_INT 15
16732: PUSH
16733: LD_INT 16
16735: PUSH
16736: LD_INT 20
16738: PUSH
16739: LD_INT 21
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_INT 23
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 26
16753: PUSH
16754: LD_INT 30
16756: PUSH
16757: LD_INT 31
16759: PUSH
16760: LD_INT 32
16762: PUSH
16763: LD_INT 36
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 101
16789: PUSH
16790: LD_INT 102
16792: PUSH
16793: LD_INT 105
16795: PUSH
16796: LD_INT 106
16798: PUSH
16799: LD_INT 108
16801: PUSH
16802: LD_INT 109
16804: PUSH
16805: LD_INT 112
16807: PUSH
16808: LD_INT 116
16810: PUSH
16811: LD_INT 117
16813: PUSH
16814: LD_INT 118
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: ST_TO_ADDR
16833: GO 19356
16835: LD_INT 7
16837: DOUBLE
16838: EQUAL
16839: IFTRUE 16843
16841: GO 16955
16843: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: LD_INT 4
16854: PUSH
16855: LD_INT 5
16857: PUSH
16858: LD_INT 7
16860: PUSH
16861: LD_INT 11
16863: PUSH
16864: LD_INT 12
16866: PUSH
16867: LD_INT 15
16869: PUSH
16870: LD_INT 16
16872: PUSH
16873: LD_INT 20
16875: PUSH
16876: LD_INT 21
16878: PUSH
16879: LD_INT 22
16881: PUSH
16882: LD_INT 23
16884: PUSH
16885: LD_INT 25
16887: PUSH
16888: LD_INT 26
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 101
16909: PUSH
16910: LD_INT 102
16912: PUSH
16913: LD_INT 103
16915: PUSH
16916: LD_INT 105
16918: PUSH
16919: LD_INT 106
16921: PUSH
16922: LD_INT 108
16924: PUSH
16925: LD_INT 112
16927: PUSH
16928: LD_INT 116
16930: PUSH
16931: LD_INT 117
16933: PUSH
16934: LD_INT 118
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: ST_TO_ADDR
16953: GO 19356
16955: LD_INT 8
16957: DOUBLE
16958: EQUAL
16959: IFTRUE 16963
16961: GO 17103
16963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16964: LD_ADDR_VAR 0 2
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 4
16974: PUSH
16975: LD_INT 5
16977: PUSH
16978: LD_INT 6
16980: PUSH
16981: LD_INT 7
16983: PUSH
16984: LD_INT 8
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: LD_INT 12
16992: PUSH
16993: LD_INT 15
16995: PUSH
16996: LD_INT 16
16998: PUSH
16999: LD_INT 20
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_INT 23
17010: PUSH
17011: LD_INT 25
17013: PUSH
17014: LD_INT 26
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 31
17022: PUSH
17023: LD_INT 32
17025: PUSH
17026: LD_INT 36
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 101
17053: PUSH
17054: LD_INT 102
17056: PUSH
17057: LD_INT 103
17059: PUSH
17060: LD_INT 105
17062: PUSH
17063: LD_INT 106
17065: PUSH
17066: LD_INT 108
17068: PUSH
17069: LD_INT 109
17071: PUSH
17072: LD_INT 112
17074: PUSH
17075: LD_INT 116
17077: PUSH
17078: LD_INT 117
17080: PUSH
17081: LD_INT 118
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: ST_TO_ADDR
17101: GO 19356
17103: LD_INT 9
17105: DOUBLE
17106: EQUAL
17107: IFTRUE 17111
17109: GO 17259
17111: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 7
17131: PUSH
17132: LD_INT 8
17134: PUSH
17135: LD_INT 11
17137: PUSH
17138: LD_INT 12
17140: PUSH
17141: LD_INT 15
17143: PUSH
17144: LD_INT 16
17146: PUSH
17147: LD_INT 20
17149: PUSH
17150: LD_INT 21
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_INT 23
17158: PUSH
17159: LD_INT 25
17161: PUSH
17162: LD_INT 26
17164: PUSH
17165: LD_INT 28
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: LD_INT 31
17173: PUSH
17174: LD_INT 32
17176: PUSH
17177: LD_INT 36
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 101
17205: PUSH
17206: LD_INT 102
17208: PUSH
17209: LD_INT 103
17211: PUSH
17212: LD_INT 105
17214: PUSH
17215: LD_INT 106
17217: PUSH
17218: LD_INT 108
17220: PUSH
17221: LD_INT 109
17223: PUSH
17224: LD_INT 112
17226: PUSH
17227: LD_INT 114
17229: PUSH
17230: LD_INT 116
17232: PUSH
17233: LD_INT 117
17235: PUSH
17236: LD_INT 118
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: ST_TO_ADDR
17257: GO 19356
17259: LD_INT 10
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17463
17267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17268: LD_ADDR_VAR 0 2
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: LD_INT 4
17278: PUSH
17279: LD_INT 5
17281: PUSH
17282: LD_INT 6
17284: PUSH
17285: LD_INT 7
17287: PUSH
17288: LD_INT 8
17290: PUSH
17291: LD_INT 9
17293: PUSH
17294: LD_INT 10
17296: PUSH
17297: LD_INT 11
17299: PUSH
17300: LD_INT 12
17302: PUSH
17303: LD_INT 13
17305: PUSH
17306: LD_INT 14
17308: PUSH
17309: LD_INT 15
17311: PUSH
17312: LD_INT 16
17314: PUSH
17315: LD_INT 17
17317: PUSH
17318: LD_INT 18
17320: PUSH
17321: LD_INT 19
17323: PUSH
17324: LD_INT 20
17326: PUSH
17327: LD_INT 21
17329: PUSH
17330: LD_INT 22
17332: PUSH
17333: LD_INT 23
17335: PUSH
17336: LD_INT 24
17338: PUSH
17339: LD_INT 25
17341: PUSH
17342: LD_INT 26
17344: PUSH
17345: LD_INT 28
17347: PUSH
17348: LD_INT 30
17350: PUSH
17351: LD_INT 31
17353: PUSH
17354: LD_INT 32
17356: PUSH
17357: LD_INT 36
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 101
17393: PUSH
17394: LD_INT 102
17396: PUSH
17397: LD_INT 103
17399: PUSH
17400: LD_INT 104
17402: PUSH
17403: LD_INT 105
17405: PUSH
17406: LD_INT 106
17408: PUSH
17409: LD_INT 107
17411: PUSH
17412: LD_INT 108
17414: PUSH
17415: LD_INT 109
17417: PUSH
17418: LD_INT 110
17420: PUSH
17421: LD_INT 111
17423: PUSH
17424: LD_INT 112
17426: PUSH
17427: LD_INT 114
17429: PUSH
17430: LD_INT 116
17432: PUSH
17433: LD_INT 117
17435: PUSH
17436: LD_INT 118
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: ST_TO_ADDR
17461: GO 19356
17463: LD_INT 11
17465: DOUBLE
17466: EQUAL
17467: IFTRUE 17471
17469: GO 17675
17471: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 3
17482: PUSH
17483: LD_INT 4
17485: PUSH
17486: LD_INT 5
17488: PUSH
17489: LD_INT 6
17491: PUSH
17492: LD_INT 7
17494: PUSH
17495: LD_INT 8
17497: PUSH
17498: LD_INT 9
17500: PUSH
17501: LD_INT 10
17503: PUSH
17504: LD_INT 11
17506: PUSH
17507: LD_INT 12
17509: PUSH
17510: LD_INT 13
17512: PUSH
17513: LD_INT 14
17515: PUSH
17516: LD_INT 15
17518: PUSH
17519: LD_INT 16
17521: PUSH
17522: LD_INT 17
17524: PUSH
17525: LD_INT 18
17527: PUSH
17528: LD_INT 19
17530: PUSH
17531: LD_INT 20
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_INT 23
17542: PUSH
17543: LD_INT 24
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 26
17551: PUSH
17552: LD_INT 28
17554: PUSH
17555: LD_INT 30
17557: PUSH
17558: LD_INT 31
17560: PUSH
17561: LD_INT 32
17563: PUSH
17564: LD_INT 34
17566: PUSH
17567: LD_INT 36
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 101
17605: PUSH
17606: LD_INT 102
17608: PUSH
17609: LD_INT 103
17611: PUSH
17612: LD_INT 104
17614: PUSH
17615: LD_INT 105
17617: PUSH
17618: LD_INT 106
17620: PUSH
17621: LD_INT 107
17623: PUSH
17624: LD_INT 108
17626: PUSH
17627: LD_INT 109
17629: PUSH
17630: LD_INT 110
17632: PUSH
17633: LD_INT 111
17635: PUSH
17636: LD_INT 112
17638: PUSH
17639: LD_INT 114
17641: PUSH
17642: LD_INT 116
17644: PUSH
17645: LD_INT 117
17647: PUSH
17648: LD_INT 118
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: ST_TO_ADDR
17673: GO 19356
17675: LD_INT 12
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17903
17683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: LD_INT 4
17700: PUSH
17701: LD_INT 5
17703: PUSH
17704: LD_INT 6
17706: PUSH
17707: LD_INT 7
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 14
17730: PUSH
17731: LD_INT 15
17733: PUSH
17734: LD_INT 16
17736: PUSH
17737: LD_INT 17
17739: PUSH
17740: LD_INT 18
17742: PUSH
17743: LD_INT 19
17745: PUSH
17746: LD_INT 20
17748: PUSH
17749: LD_INT 21
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_INT 23
17757: PUSH
17758: LD_INT 24
17760: PUSH
17761: LD_INT 25
17763: PUSH
17764: LD_INT 26
17766: PUSH
17767: LD_INT 27
17769: PUSH
17770: LD_INT 28
17772: PUSH
17773: LD_INT 30
17775: PUSH
17776: LD_INT 31
17778: PUSH
17779: LD_INT 32
17781: PUSH
17782: LD_INT 33
17784: PUSH
17785: LD_INT 34
17787: PUSH
17788: LD_INT 36
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 101
17829: PUSH
17830: LD_INT 102
17832: PUSH
17833: LD_INT 103
17835: PUSH
17836: LD_INT 104
17838: PUSH
17839: LD_INT 105
17841: PUSH
17842: LD_INT 106
17844: PUSH
17845: LD_INT 107
17847: PUSH
17848: LD_INT 108
17850: PUSH
17851: LD_INT 109
17853: PUSH
17854: LD_INT 110
17856: PUSH
17857: LD_INT 111
17859: PUSH
17860: LD_INT 112
17862: PUSH
17863: LD_INT 113
17865: PUSH
17866: LD_INT 114
17868: PUSH
17869: LD_INT 116
17871: PUSH
17872: LD_INT 117
17874: PUSH
17875: LD_INT 118
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: ST_TO_ADDR
17901: GO 19356
17903: LD_INT 13
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 18119
17911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17912: LD_ADDR_VAR 0 2
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: LD_INT 4
17928: PUSH
17929: LD_INT 5
17931: PUSH
17932: LD_INT 8
17934: PUSH
17935: LD_INT 9
17937: PUSH
17938: LD_INT 10
17940: PUSH
17941: LD_INT 11
17943: PUSH
17944: LD_INT 12
17946: PUSH
17947: LD_INT 14
17949: PUSH
17950: LD_INT 15
17952: PUSH
17953: LD_INT 16
17955: PUSH
17956: LD_INT 17
17958: PUSH
17959: LD_INT 18
17961: PUSH
17962: LD_INT 19
17964: PUSH
17965: LD_INT 20
17967: PUSH
17968: LD_INT 21
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_INT 23
17976: PUSH
17977: LD_INT 24
17979: PUSH
17980: LD_INT 25
17982: PUSH
17983: LD_INT 26
17985: PUSH
17986: LD_INT 27
17988: PUSH
17989: LD_INT 28
17991: PUSH
17992: LD_INT 30
17994: PUSH
17995: LD_INT 31
17997: PUSH
17998: LD_INT 32
18000: PUSH
18001: LD_INT 33
18003: PUSH
18004: LD_INT 34
18006: PUSH
18007: LD_INT 36
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 101
18045: PUSH
18046: LD_INT 102
18048: PUSH
18049: LD_INT 103
18051: PUSH
18052: LD_INT 104
18054: PUSH
18055: LD_INT 105
18057: PUSH
18058: LD_INT 106
18060: PUSH
18061: LD_INT 107
18063: PUSH
18064: LD_INT 108
18066: PUSH
18067: LD_INT 109
18069: PUSH
18070: LD_INT 110
18072: PUSH
18073: LD_INT 111
18075: PUSH
18076: LD_INT 112
18078: PUSH
18079: LD_INT 113
18081: PUSH
18082: LD_INT 114
18084: PUSH
18085: LD_INT 116
18087: PUSH
18088: LD_INT 117
18090: PUSH
18091: LD_INT 118
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: ST_TO_ADDR
18117: GO 19356
18119: LD_INT 14
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18351
18127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18128: LD_ADDR_VAR 0 2
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: LD_INT 4
18144: PUSH
18145: LD_INT 5
18147: PUSH
18148: LD_INT 6
18150: PUSH
18151: LD_INT 7
18153: PUSH
18154: LD_INT 8
18156: PUSH
18157: LD_INT 9
18159: PUSH
18160: LD_INT 10
18162: PUSH
18163: LD_INT 11
18165: PUSH
18166: LD_INT 12
18168: PUSH
18169: LD_INT 13
18171: PUSH
18172: LD_INT 14
18174: PUSH
18175: LD_INT 15
18177: PUSH
18178: LD_INT 16
18180: PUSH
18181: LD_INT 17
18183: PUSH
18184: LD_INT 18
18186: PUSH
18187: LD_INT 19
18189: PUSH
18190: LD_INT 20
18192: PUSH
18193: LD_INT 21
18195: PUSH
18196: LD_INT 22
18198: PUSH
18199: LD_INT 23
18201: PUSH
18202: LD_INT 24
18204: PUSH
18205: LD_INT 25
18207: PUSH
18208: LD_INT 26
18210: PUSH
18211: LD_INT 27
18213: PUSH
18214: LD_INT 28
18216: PUSH
18217: LD_INT 29
18219: PUSH
18220: LD_INT 30
18222: PUSH
18223: LD_INT 31
18225: PUSH
18226: LD_INT 32
18228: PUSH
18229: LD_INT 33
18231: PUSH
18232: LD_INT 34
18234: PUSH
18235: LD_INT 36
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 101
18277: PUSH
18278: LD_INT 102
18280: PUSH
18281: LD_INT 103
18283: PUSH
18284: LD_INT 104
18286: PUSH
18287: LD_INT 105
18289: PUSH
18290: LD_INT 106
18292: PUSH
18293: LD_INT 107
18295: PUSH
18296: LD_INT 108
18298: PUSH
18299: LD_INT 109
18301: PUSH
18302: LD_INT 110
18304: PUSH
18305: LD_INT 111
18307: PUSH
18308: LD_INT 112
18310: PUSH
18311: LD_INT 113
18313: PUSH
18314: LD_INT 114
18316: PUSH
18317: LD_INT 116
18319: PUSH
18320: LD_INT 117
18322: PUSH
18323: LD_INT 118
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: ST_TO_ADDR
18349: GO 19356
18351: LD_INT 15
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18583
18359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: LD_INT 2
18370: PUSH
18371: LD_INT 3
18373: PUSH
18374: LD_INT 4
18376: PUSH
18377: LD_INT 5
18379: PUSH
18380: LD_INT 6
18382: PUSH
18383: LD_INT 7
18385: PUSH
18386: LD_INT 8
18388: PUSH
18389: LD_INT 9
18391: PUSH
18392: LD_INT 10
18394: PUSH
18395: LD_INT 11
18397: PUSH
18398: LD_INT 12
18400: PUSH
18401: LD_INT 13
18403: PUSH
18404: LD_INT 14
18406: PUSH
18407: LD_INT 15
18409: PUSH
18410: LD_INT 16
18412: PUSH
18413: LD_INT 17
18415: PUSH
18416: LD_INT 18
18418: PUSH
18419: LD_INT 19
18421: PUSH
18422: LD_INT 20
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 22
18430: PUSH
18431: LD_INT 23
18433: PUSH
18434: LD_INT 24
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 27
18445: PUSH
18446: LD_INT 28
18448: PUSH
18449: LD_INT 29
18451: PUSH
18452: LD_INT 30
18454: PUSH
18455: LD_INT 31
18457: PUSH
18458: LD_INT 32
18460: PUSH
18461: LD_INT 33
18463: PUSH
18464: LD_INT 34
18466: PUSH
18467: LD_INT 36
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 101
18509: PUSH
18510: LD_INT 102
18512: PUSH
18513: LD_INT 103
18515: PUSH
18516: LD_INT 104
18518: PUSH
18519: LD_INT 105
18521: PUSH
18522: LD_INT 106
18524: PUSH
18525: LD_INT 107
18527: PUSH
18528: LD_INT 108
18530: PUSH
18531: LD_INT 109
18533: PUSH
18534: LD_INT 110
18536: PUSH
18537: LD_INT 111
18539: PUSH
18540: LD_INT 112
18542: PUSH
18543: LD_INT 113
18545: PUSH
18546: LD_INT 114
18548: PUSH
18549: LD_INT 116
18551: PUSH
18552: LD_INT 117
18554: PUSH
18555: LD_INT 118
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: ST_TO_ADDR
18581: GO 19356
18583: LD_INT 16
18585: DOUBLE
18586: EQUAL
18587: IFTRUE 18591
18589: GO 18727
18591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18592: LD_ADDR_VAR 0 2
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: LD_INT 4
18602: PUSH
18603: LD_INT 5
18605: PUSH
18606: LD_INT 7
18608: PUSH
18609: LD_INT 11
18611: PUSH
18612: LD_INT 12
18614: PUSH
18615: LD_INT 15
18617: PUSH
18618: LD_INT 16
18620: PUSH
18621: LD_INT 20
18623: PUSH
18624: LD_INT 21
18626: PUSH
18627: LD_INT 22
18629: PUSH
18630: LD_INT 23
18632: PUSH
18633: LD_INT 25
18635: PUSH
18636: LD_INT 26
18638: PUSH
18639: LD_INT 30
18641: PUSH
18642: LD_INT 31
18644: PUSH
18645: LD_INT 32
18647: PUSH
18648: LD_INT 33
18650: PUSH
18651: LD_INT 34
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 101
18677: PUSH
18678: LD_INT 102
18680: PUSH
18681: LD_INT 103
18683: PUSH
18684: LD_INT 106
18686: PUSH
18687: LD_INT 108
18689: PUSH
18690: LD_INT 112
18692: PUSH
18693: LD_INT 113
18695: PUSH
18696: LD_INT 114
18698: PUSH
18699: LD_INT 116
18701: PUSH
18702: LD_INT 117
18704: PUSH
18705: LD_INT 118
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: ST_TO_ADDR
18725: GO 19356
18727: LD_INT 17
18729: DOUBLE
18730: EQUAL
18731: IFTRUE 18735
18733: GO 18959
18735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18736: LD_ADDR_VAR 0 2
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 4
18752: PUSH
18753: LD_INT 5
18755: PUSH
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: LD_INT 9
18767: PUSH
18768: LD_INT 10
18770: PUSH
18771: LD_INT 11
18773: PUSH
18774: LD_INT 12
18776: PUSH
18777: LD_INT 13
18779: PUSH
18780: LD_INT 14
18782: PUSH
18783: LD_INT 15
18785: PUSH
18786: LD_INT 16
18788: PUSH
18789: LD_INT 17
18791: PUSH
18792: LD_INT 18
18794: PUSH
18795: LD_INT 19
18797: PUSH
18798: LD_INT 20
18800: PUSH
18801: LD_INT 21
18803: PUSH
18804: LD_INT 22
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 24
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 26
18818: PUSH
18819: LD_INT 27
18821: PUSH
18822: LD_INT 28
18824: PUSH
18825: LD_INT 29
18827: PUSH
18828: LD_INT 30
18830: PUSH
18831: LD_INT 31
18833: PUSH
18834: LD_INT 32
18836: PUSH
18837: LD_INT 33
18839: PUSH
18840: LD_INT 34
18842: PUSH
18843: LD_INT 36
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 101
18885: PUSH
18886: LD_INT 102
18888: PUSH
18889: LD_INT 103
18891: PUSH
18892: LD_INT 104
18894: PUSH
18895: LD_INT 105
18897: PUSH
18898: LD_INT 106
18900: PUSH
18901: LD_INT 107
18903: PUSH
18904: LD_INT 108
18906: PUSH
18907: LD_INT 109
18909: PUSH
18910: LD_INT 110
18912: PUSH
18913: LD_INT 111
18915: PUSH
18916: LD_INT 112
18918: PUSH
18919: LD_INT 113
18921: PUSH
18922: LD_INT 114
18924: PUSH
18925: LD_INT 116
18927: PUSH
18928: LD_INT 117
18930: PUSH
18931: LD_INT 118
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: ST_TO_ADDR
18957: GO 19356
18959: LD_INT 18
18961: DOUBLE
18962: EQUAL
18963: IFTRUE 18967
18965: GO 19115
18967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18968: LD_ADDR_VAR 0 2
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: LD_INT 5
18981: PUSH
18982: LD_INT 7
18984: PUSH
18985: LD_INT 11
18987: PUSH
18988: LD_INT 12
18990: PUSH
18991: LD_INT 15
18993: PUSH
18994: LD_INT 16
18996: PUSH
18997: LD_INT 20
18999: PUSH
19000: LD_INT 21
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_INT 23
19008: PUSH
19009: LD_INT 25
19011: PUSH
19012: LD_INT 26
19014: PUSH
19015: LD_INT 30
19017: PUSH
19018: LD_INT 31
19020: PUSH
19021: LD_INT 32
19023: PUSH
19024: LD_INT 33
19026: PUSH
19027: LD_INT 34
19029: PUSH
19030: LD_INT 35
19032: PUSH
19033: LD_INT 36
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 101
19061: PUSH
19062: LD_INT 102
19064: PUSH
19065: LD_INT 103
19067: PUSH
19068: LD_INT 106
19070: PUSH
19071: LD_INT 108
19073: PUSH
19074: LD_INT 112
19076: PUSH
19077: LD_INT 113
19079: PUSH
19080: LD_INT 114
19082: PUSH
19083: LD_INT 115
19085: PUSH
19086: LD_INT 116
19088: PUSH
19089: LD_INT 117
19091: PUSH
19092: LD_INT 118
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: ST_TO_ADDR
19113: GO 19356
19115: LD_INT 19
19117: DOUBLE
19118: EQUAL
19119: IFTRUE 19123
19121: GO 19355
19123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19124: LD_ADDR_VAR 0 2
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: LD_INT 3
19137: PUSH
19138: LD_INT 4
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: LD_INT 6
19146: PUSH
19147: LD_INT 7
19149: PUSH
19150: LD_INT 8
19152: PUSH
19153: LD_INT 9
19155: PUSH
19156: LD_INT 10
19158: PUSH
19159: LD_INT 11
19161: PUSH
19162: LD_INT 12
19164: PUSH
19165: LD_INT 13
19167: PUSH
19168: LD_INT 14
19170: PUSH
19171: LD_INT 15
19173: PUSH
19174: LD_INT 16
19176: PUSH
19177: LD_INT 17
19179: PUSH
19180: LD_INT 18
19182: PUSH
19183: LD_INT 19
19185: PUSH
19186: LD_INT 20
19188: PUSH
19189: LD_INT 21
19191: PUSH
19192: LD_INT 22
19194: PUSH
19195: LD_INT 23
19197: PUSH
19198: LD_INT 24
19200: PUSH
19201: LD_INT 25
19203: PUSH
19204: LD_INT 26
19206: PUSH
19207: LD_INT 27
19209: PUSH
19210: LD_INT 28
19212: PUSH
19213: LD_INT 29
19215: PUSH
19216: LD_INT 30
19218: PUSH
19219: LD_INT 31
19221: PUSH
19222: LD_INT 32
19224: PUSH
19225: LD_INT 33
19227: PUSH
19228: LD_INT 34
19230: PUSH
19231: LD_INT 35
19233: PUSH
19234: LD_INT 36
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 101
19277: PUSH
19278: LD_INT 102
19280: PUSH
19281: LD_INT 103
19283: PUSH
19284: LD_INT 104
19286: PUSH
19287: LD_INT 105
19289: PUSH
19290: LD_INT 106
19292: PUSH
19293: LD_INT 107
19295: PUSH
19296: LD_INT 108
19298: PUSH
19299: LD_INT 109
19301: PUSH
19302: LD_INT 110
19304: PUSH
19305: LD_INT 111
19307: PUSH
19308: LD_INT 112
19310: PUSH
19311: LD_INT 113
19313: PUSH
19314: LD_INT 114
19316: PUSH
19317: LD_INT 115
19319: PUSH
19320: LD_INT 116
19322: PUSH
19323: LD_INT 117
19325: PUSH
19326: LD_INT 118
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: ST_TO_ADDR
19353: GO 19356
19355: POP
// end else
19356: GO 19587
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 3
19371: PUSH
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: LD_INT 6
19380: PUSH
19381: LD_INT 7
19383: PUSH
19384: LD_INT 8
19386: PUSH
19387: LD_INT 9
19389: PUSH
19390: LD_INT 10
19392: PUSH
19393: LD_INT 11
19395: PUSH
19396: LD_INT 12
19398: PUSH
19399: LD_INT 13
19401: PUSH
19402: LD_INT 14
19404: PUSH
19405: LD_INT 15
19407: PUSH
19408: LD_INT 16
19410: PUSH
19411: LD_INT 17
19413: PUSH
19414: LD_INT 18
19416: PUSH
19417: LD_INT 19
19419: PUSH
19420: LD_INT 20
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 23
19431: PUSH
19432: LD_INT 24
19434: PUSH
19435: LD_INT 25
19437: PUSH
19438: LD_INT 26
19440: PUSH
19441: LD_INT 27
19443: PUSH
19444: LD_INT 28
19446: PUSH
19447: LD_INT 29
19449: PUSH
19450: LD_INT 30
19452: PUSH
19453: LD_INT 31
19455: PUSH
19456: LD_INT 32
19458: PUSH
19459: LD_INT 33
19461: PUSH
19462: LD_INT 34
19464: PUSH
19465: LD_INT 35
19467: PUSH
19468: LD_INT 36
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 101
19511: PUSH
19512: LD_INT 102
19514: PUSH
19515: LD_INT 103
19517: PUSH
19518: LD_INT 104
19520: PUSH
19521: LD_INT 105
19523: PUSH
19524: LD_INT 106
19526: PUSH
19527: LD_INT 107
19529: PUSH
19530: LD_INT 108
19532: PUSH
19533: LD_INT 109
19535: PUSH
19536: LD_INT 110
19538: PUSH
19539: LD_INT 111
19541: PUSH
19542: LD_INT 112
19544: PUSH
19545: LD_INT 113
19547: PUSH
19548: LD_INT 114
19550: PUSH
19551: LD_INT 115
19553: PUSH
19554: LD_INT 116
19556: PUSH
19557: LD_INT 117
19559: PUSH
19560: LD_INT 118
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: ST_TO_ADDR
// if result then
19587: LD_VAR 0 2
19591: IFFALSE 20377
// begin normal :=  ;
19593: LD_ADDR_VAR 0 5
19597: PUSH
19598: LD_STRING 
19600: ST_TO_ADDR
// hardcore :=  ;
19601: LD_ADDR_VAR 0 6
19605: PUSH
19606: LD_STRING 
19608: ST_TO_ADDR
// active :=  ;
19609: LD_ADDR_VAR 0 7
19613: PUSH
19614: LD_STRING 
19616: ST_TO_ADDR
// for i = 1 to normalCounter do
19617: LD_ADDR_VAR 0 8
19621: PUSH
19622: DOUBLE
19623: LD_INT 1
19625: DEC
19626: ST_TO_ADDR
19627: LD_EXP 47
19631: PUSH
19632: FOR_TO
19633: IFFALSE 19734
// begin tmp := 0 ;
19635: LD_ADDR_VAR 0 3
19639: PUSH
19640: LD_STRING 0
19642: ST_TO_ADDR
// if result [ 1 ] then
19643: LD_VAR 0 2
19647: PUSH
19648: LD_INT 1
19650: ARRAY
19651: IFFALSE 19716
// if result [ 1 ] [ 1 ] = i then
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PUSH
19662: LD_INT 1
19664: ARRAY
19665: PUSH
19666: LD_VAR 0 8
19670: EQUAL
19671: IFFALSE 19716
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 2
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 2
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 3
19702: PPUSH
19703: CALL_OW 1
19707: ST_TO_ADDR
// tmp := 1 ;
19708: LD_ADDR_VAR 0 3
19712: PUSH
19713: LD_STRING 1
19715: ST_TO_ADDR
// end ; normal := normal & tmp ;
19716: LD_ADDR_VAR 0 5
19720: PUSH
19721: LD_VAR 0 5
19725: PUSH
19726: LD_VAR 0 3
19730: STR
19731: ST_TO_ADDR
// end ;
19732: GO 19632
19734: POP
19735: POP
// for i = 1 to hardcoreCounter do
19736: LD_ADDR_VAR 0 8
19740: PUSH
19741: DOUBLE
19742: LD_INT 1
19744: DEC
19745: ST_TO_ADDR
19746: LD_EXP 48
19750: PUSH
19751: FOR_TO
19752: IFFALSE 19857
// begin tmp := 0 ;
19754: LD_ADDR_VAR 0 3
19758: PUSH
19759: LD_STRING 0
19761: ST_TO_ADDR
// if result [ 2 ] then
19762: LD_VAR 0 2
19766: PUSH
19767: LD_INT 2
19769: ARRAY
19770: IFFALSE 19839
// if result [ 2 ] [ 1 ] = 100 + i then
19772: LD_VAR 0 2
19776: PUSH
19777: LD_INT 2
19779: ARRAY
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PUSH
19785: LD_INT 100
19787: PUSH
19788: LD_VAR 0 8
19792: PLUS
19793: EQUAL
19794: IFFALSE 19839
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19796: LD_ADDR_VAR 0 2
19800: PUSH
19801: LD_VAR 0 2
19805: PPUSH
19806: LD_INT 2
19808: PPUSH
19809: LD_VAR 0 2
19813: PUSH
19814: LD_INT 2
19816: ARRAY
19817: PPUSH
19818: LD_INT 1
19820: PPUSH
19821: CALL_OW 3
19825: PPUSH
19826: CALL_OW 1
19830: ST_TO_ADDR
// tmp := 1 ;
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_STRING 1
19838: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19839: LD_ADDR_VAR 0 6
19843: PUSH
19844: LD_VAR 0 6
19848: PUSH
19849: LD_VAR 0 3
19853: STR
19854: ST_TO_ADDR
// end ;
19855: GO 19751
19857: POP
19858: POP
// if isGameLoad then
19859: LD_VAR 0 1
19863: IFFALSE 20338
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19865: LD_ADDR_VAR 0 4
19869: PUSH
19870: LD_EXP 51
19874: PUSH
19875: LD_EXP 50
19879: PUSH
19880: LD_EXP 52
19884: PUSH
19885: LD_EXP 49
19889: PUSH
19890: LD_EXP 53
19894: PUSH
19895: LD_EXP 54
19899: PUSH
19900: LD_EXP 55
19904: PUSH
19905: LD_EXP 56
19909: PUSH
19910: LD_EXP 57
19914: PUSH
19915: LD_EXP 58
19919: PUSH
19920: LD_EXP 59
19924: PUSH
19925: LD_EXP 60
19929: PUSH
19930: LD_EXP 61
19934: PUSH
19935: LD_EXP 62
19939: PUSH
19940: LD_EXP 70
19944: PUSH
19945: LD_EXP 71
19949: PUSH
19950: LD_EXP 72
19954: PUSH
19955: LD_EXP 73
19959: PUSH
19960: LD_EXP 75
19964: PUSH
19965: LD_EXP 76
19969: PUSH
19970: LD_EXP 77
19974: PUSH
19975: LD_EXP 80
19979: PUSH
19980: LD_EXP 82
19984: PUSH
19985: LD_EXP 83
19989: PUSH
19990: LD_EXP 84
19994: PUSH
19995: LD_EXP 86
19999: PUSH
20000: LD_EXP 87
20004: PUSH
20005: LD_EXP 90
20009: PUSH
20010: LD_EXP 91
20014: PUSH
20015: LD_EXP 92
20019: PUSH
20020: LD_EXP 93
20024: PUSH
20025: LD_EXP 94
20029: PUSH
20030: LD_EXP 95
20034: PUSH
20035: LD_EXP 96
20039: PUSH
20040: LD_EXP 97
20044: PUSH
20045: LD_EXP 98
20049: PUSH
20050: LD_EXP 63
20054: PUSH
20055: LD_EXP 64
20059: PUSH
20060: LD_EXP 67
20064: PUSH
20065: LD_EXP 68
20069: PUSH
20070: LD_EXP 69
20074: PUSH
20075: LD_EXP 65
20079: PUSH
20080: LD_EXP 66
20084: PUSH
20085: LD_EXP 74
20089: PUSH
20090: LD_EXP 78
20094: PUSH
20095: LD_EXP 79
20099: PUSH
20100: LD_EXP 81
20104: PUSH
20105: LD_EXP 85
20109: PUSH
20110: LD_EXP 88
20114: PUSH
20115: LD_EXP 89
20119: PUSH
20120: LD_EXP 99
20124: PUSH
20125: LD_EXP 100
20129: PUSH
20130: LD_EXP 101
20134: PUSH
20135: LD_EXP 102
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: ST_TO_ADDR
// tmp :=  ;
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_STRING 
20203: ST_TO_ADDR
// for i = 1 to normalCounter do
20204: LD_ADDR_VAR 0 8
20208: PUSH
20209: DOUBLE
20210: LD_INT 1
20212: DEC
20213: ST_TO_ADDR
20214: LD_EXP 47
20218: PUSH
20219: FOR_TO
20220: IFFALSE 20256
// begin if flags [ i ] then
20222: LD_VAR 0 4
20226: PUSH
20227: LD_VAR 0 8
20231: ARRAY
20232: IFFALSE 20254
// tmp := tmp & i & ; ;
20234: LD_ADDR_VAR 0 3
20238: PUSH
20239: LD_VAR 0 3
20243: PUSH
20244: LD_VAR 0 8
20248: STR
20249: PUSH
20250: LD_STRING ;
20252: STR
20253: ST_TO_ADDR
// end ;
20254: GO 20219
20256: POP
20257: POP
// for i = 1 to hardcoreCounter do
20258: LD_ADDR_VAR 0 8
20262: PUSH
20263: DOUBLE
20264: LD_INT 1
20266: DEC
20267: ST_TO_ADDR
20268: LD_EXP 48
20272: PUSH
20273: FOR_TO
20274: IFFALSE 20320
// begin if flags [ normalCounter + i ] then
20276: LD_VAR 0 4
20280: PUSH
20281: LD_EXP 47
20285: PUSH
20286: LD_VAR 0 8
20290: PLUS
20291: ARRAY
20292: IFFALSE 20318
// tmp := tmp & ( 100 + i ) & ; ;
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 100
20306: PUSH
20307: LD_VAR 0 8
20311: PLUS
20312: STR
20313: PUSH
20314: LD_STRING ;
20316: STR
20317: ST_TO_ADDR
// end ;
20318: GO 20273
20320: POP
20321: POP
// if tmp then
20322: LD_VAR 0 3
20326: IFFALSE 20338
// active := tmp ;
20328: LD_ADDR_VAR 0 7
20332: PUSH
20333: LD_VAR 0 3
20337: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20338: LD_STRING getStreamItemsFromMission("
20340: PUSH
20341: LD_VAR 0 5
20345: STR
20346: PUSH
20347: LD_STRING ","
20349: STR
20350: PUSH
20351: LD_VAR 0 6
20355: STR
20356: PUSH
20357: LD_STRING ","
20359: STR
20360: PUSH
20361: LD_VAR 0 7
20365: STR
20366: PUSH
20367: LD_STRING ")
20369: STR
20370: PPUSH
20371: CALL_OW 559
// end else
20375: GO 20384
// ToLua ( getStreamItemsFromMission("","","") ) ;
20377: LD_STRING getStreamItemsFromMission("","","")
20379: PPUSH
20380: CALL_OW 559
// end ;
20384: LD_VAR 0 2
20388: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20389: LD_EXP 46
20393: PUSH
20394: LD_EXP 51
20398: AND
20399: IFFALSE 20523
20401: GO 20403
20403: DISABLE
20404: LD_INT 0
20406: PPUSH
20407: PPUSH
// begin enable ;
20408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20409: LD_ADDR_VAR 0 2
20413: PUSH
20414: LD_INT 22
20416: PUSH
20417: LD_OWVAR 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: LD_INT 34
20431: PUSH
20432: LD_INT 7
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 34
20441: PUSH
20442: LD_INT 45
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 34
20451: PUSH
20452: LD_INT 28
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 34
20461: PUSH
20462: LD_INT 47
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 69
20484: ST_TO_ADDR
// if not tmp then
20485: LD_VAR 0 2
20489: NOT
20490: IFFALSE 20494
// exit ;
20492: GO 20523
// for i in tmp do
20494: LD_ADDR_VAR 0 1
20498: PUSH
20499: LD_VAR 0 2
20503: PUSH
20504: FOR_IN
20505: IFFALSE 20521
// begin SetLives ( i , 0 ) ;
20507: LD_VAR 0 1
20511: PPUSH
20512: LD_INT 0
20514: PPUSH
20515: CALL_OW 234
// end ;
20519: GO 20504
20521: POP
20522: POP
// end ;
20523: PPOPN 2
20525: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20526: LD_EXP 46
20530: PUSH
20531: LD_EXP 52
20535: AND
20536: IFFALSE 20620
20538: GO 20540
20540: DISABLE
20541: LD_INT 0
20543: PPUSH
20544: PPUSH
// begin enable ;
20545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20546: LD_ADDR_VAR 0 2
20550: PUSH
20551: LD_INT 22
20553: PUSH
20554: LD_OWVAR 2
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 32
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PPUSH
20577: CALL_OW 69
20581: ST_TO_ADDR
// if not tmp then
20582: LD_VAR 0 2
20586: NOT
20587: IFFALSE 20591
// exit ;
20589: GO 20620
// for i in tmp do
20591: LD_ADDR_VAR 0 1
20595: PUSH
20596: LD_VAR 0 2
20600: PUSH
20601: FOR_IN
20602: IFFALSE 20618
// begin SetLives ( i , 0 ) ;
20604: LD_VAR 0 1
20608: PPUSH
20609: LD_INT 0
20611: PPUSH
20612: CALL_OW 234
// end ;
20616: GO 20601
20618: POP
20619: POP
// end ;
20620: PPOPN 2
20622: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20623: LD_EXP 46
20627: PUSH
20628: LD_EXP 49
20632: AND
20633: IFFALSE 20726
20635: GO 20637
20637: DISABLE
20638: LD_INT 0
20640: PPUSH
// begin enable ;
20641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20642: LD_ADDR_VAR 0 1
20646: PUSH
20647: LD_INT 22
20649: PUSH
20650: LD_OWVAR 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 25
20664: PUSH
20665: LD_INT 5
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 25
20674: PUSH
20675: LD_INT 9
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 25
20684: PUSH
20685: LD_INT 8
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: PUSH
20707: FOR_IN
20708: IFFALSE 20724
// begin SetClass ( i , 1 ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: CALL_OW 336
// end ;
20722: GO 20707
20724: POP
20725: POP
// end ;
20726: PPOPN 1
20728: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20729: LD_EXP 46
20733: PUSH
20734: LD_EXP 50
20738: AND
20739: PUSH
20740: LD_OWVAR 65
20744: PUSH
20745: LD_INT 7
20747: LESS
20748: AND
20749: IFFALSE 20763
20751: GO 20753
20753: DISABLE
// begin enable ;
20754: ENABLE
// game_speed := 7 ;
20755: LD_ADDR_OWVAR 65
20759: PUSH
20760: LD_INT 7
20762: ST_TO_ADDR
// end ;
20763: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20764: LD_EXP 46
20768: PUSH
20769: LD_EXP 53
20773: AND
20774: IFFALSE 20976
20776: GO 20778
20778: DISABLE
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
20783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20784: LD_ADDR_VAR 0 3
20788: PUSH
20789: LD_INT 81
20791: PUSH
20792: LD_OWVAR 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: ST_TO_ADDR
// if not tmp then
20820: LD_VAR 0 3
20824: NOT
20825: IFFALSE 20829
// exit ;
20827: GO 20976
// if tmp > 5 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 5
20836: GREATER
20837: IFFALSE 20849
// k := 5 else
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_INT 5
20846: ST_TO_ADDR
20847: GO 20859
// k := tmp ;
20849: LD_ADDR_VAR 0 2
20853: PUSH
20854: LD_VAR 0 3
20858: ST_TO_ADDR
// for i := 1 to k do
20859: LD_ADDR_VAR 0 1
20863: PUSH
20864: DOUBLE
20865: LD_INT 1
20867: DEC
20868: ST_TO_ADDR
20869: LD_VAR 0 2
20873: PUSH
20874: FOR_TO
20875: IFFALSE 20974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_VAR 0 1
20886: ARRAY
20887: PPUSH
20888: LD_VAR 0 1
20892: PUSH
20893: LD_INT 4
20895: MOD
20896: PUSH
20897: LD_INT 1
20899: PLUS
20900: PPUSH
20901: CALL_OW 259
20905: PUSH
20906: LD_INT 10
20908: LESS
20909: IFFALSE 20972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20911: LD_VAR 0 3
20915: PUSH
20916: LD_VAR 0 1
20920: ARRAY
20921: PPUSH
20922: LD_VAR 0 1
20926: PUSH
20927: LD_INT 4
20929: MOD
20930: PUSH
20931: LD_INT 1
20933: PLUS
20934: PPUSH
20935: LD_VAR 0 3
20939: PUSH
20940: LD_VAR 0 1
20944: ARRAY
20945: PPUSH
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 4
20953: MOD
20954: PUSH
20955: LD_INT 1
20957: PLUS
20958: PPUSH
20959: CALL_OW 259
20963: PUSH
20964: LD_INT 1
20966: PLUS
20967: PPUSH
20968: CALL_OW 237
20972: GO 20874
20974: POP
20975: POP
// end ;
20976: PPOPN 3
20978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20979: LD_EXP 46
20983: PUSH
20984: LD_EXP 54
20988: AND
20989: IFFALSE 21009
20991: GO 20993
20993: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20994: LD_INT 4
20996: PPUSH
20997: LD_OWVAR 2
21001: PPUSH
21002: LD_INT 0
21004: PPUSH
21005: CALL_OW 324
21009: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21010: LD_EXP 46
21014: PUSH
21015: LD_EXP 83
21019: AND
21020: IFFALSE 21040
21022: GO 21024
21024: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21025: LD_INT 19
21027: PPUSH
21028: LD_OWVAR 2
21032: PPUSH
21033: LD_INT 0
21035: PPUSH
21036: CALL_OW 324
21040: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21041: LD_EXP 46
21045: PUSH
21046: LD_EXP 55
21050: AND
21051: IFFALSE 21153
21053: GO 21055
21055: DISABLE
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
// begin enable ;
21060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 34
21083: PUSH
21084: LD_INT 11
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 34
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PPUSH
21110: CALL_OW 69
21114: ST_TO_ADDR
// if not tmp then
21115: LD_VAR 0 2
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21153
// for i in tmp do
21124: LD_ADDR_VAR 0 1
21128: PUSH
21129: LD_VAR 0 2
21133: PUSH
21134: FOR_IN
21135: IFFALSE 21151
// begin SetLives ( i , 0 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 0
21144: PPUSH
21145: CALL_OW 234
// end ;
21149: GO 21134
21151: POP
21152: POP
// end ;
21153: PPOPN 2
21155: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21156: LD_EXP 46
21160: PUSH
21161: LD_EXP 56
21165: AND
21166: IFFALSE 21186
21168: GO 21170
21170: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21171: LD_INT 32
21173: PPUSH
21174: LD_OWVAR 2
21178: PPUSH
21179: LD_INT 0
21181: PPUSH
21182: CALL_OW 324
21186: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21187: LD_EXP 46
21191: PUSH
21192: LD_EXP 57
21196: AND
21197: IFFALSE 21378
21199: GO 21201
21201: DISABLE
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
21206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21207: LD_ADDR_VAR 0 2
21211: PUSH
21212: LD_INT 22
21214: PUSH
21215: LD_OWVAR 2
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 33
21226: PUSH
21227: LD_INT 3
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: ST_TO_ADDR
// if not tmp then
21243: LD_VAR 0 2
21247: NOT
21248: IFFALSE 21252
// exit ;
21250: GO 21378
// side := 0 ;
21252: LD_ADDR_VAR 0 3
21256: PUSH
21257: LD_INT 0
21259: ST_TO_ADDR
// for i := 1 to 8 do
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: DOUBLE
21266: LD_INT 1
21268: DEC
21269: ST_TO_ADDR
21270: LD_INT 8
21272: PUSH
21273: FOR_TO
21274: IFFALSE 21322
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21276: LD_OWVAR 2
21280: PUSH
21281: LD_VAR 0 1
21285: NONEQUAL
21286: PUSH
21287: LD_OWVAR 2
21291: PPUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 81
21301: PUSH
21302: LD_INT 2
21304: EQUAL
21305: AND
21306: IFFALSE 21320
// begin side := i ;
21308: LD_ADDR_VAR 0 3
21312: PUSH
21313: LD_VAR 0 1
21317: ST_TO_ADDR
// break ;
21318: GO 21322
// end ;
21320: GO 21273
21322: POP
21323: POP
// if not side then
21324: LD_VAR 0 3
21328: NOT
21329: IFFALSE 21333
// exit ;
21331: GO 21378
// for i := 1 to tmp do
21333: LD_ADDR_VAR 0 1
21337: PUSH
21338: DOUBLE
21339: LD_INT 1
21341: DEC
21342: ST_TO_ADDR
21343: LD_VAR 0 2
21347: PUSH
21348: FOR_TO
21349: IFFALSE 21376
// if Prob ( 60 ) then
21351: LD_INT 60
21353: PPUSH
21354: CALL_OW 13
21358: IFFALSE 21374
// SetSide ( i , side ) ;
21360: LD_VAR 0 1
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: CALL_OW 235
21374: GO 21348
21376: POP
21377: POP
// end ;
21378: PPOPN 3
21380: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21381: LD_EXP 46
21385: PUSH
21386: LD_EXP 59
21390: AND
21391: IFFALSE 21510
21393: GO 21395
21395: DISABLE
21396: LD_INT 0
21398: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21399: LD_ADDR_VAR 0 1
21403: PUSH
21404: LD_INT 22
21406: PUSH
21407: LD_OWVAR 2
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: LD_INT 23
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 69
21452: PUSH
21453: FOR_IN
21454: IFFALSE 21508
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL_OW 257
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: LD_INT 4
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: IN
21484: IFFALSE 21506
// SetClass ( un , rand ( 1 , 4 ) ) ;
21486: LD_VAR 0 1
21490: PPUSH
21491: LD_INT 1
21493: PPUSH
21494: LD_INT 4
21496: PPUSH
21497: CALL_OW 12
21501: PPUSH
21502: CALL_OW 336
21506: GO 21453
21508: POP
21509: POP
// end ;
21510: PPOPN 1
21512: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21513: LD_EXP 46
21517: PUSH
21518: LD_EXP 58
21522: AND
21523: IFFALSE 21602
21525: GO 21527
21527: DISABLE
21528: LD_INT 0
21530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21531: LD_ADDR_VAR 0 1
21535: PUSH
21536: LD_INT 22
21538: PUSH
21539: LD_OWVAR 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 21
21550: PUSH
21551: LD_INT 3
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PPUSH
21562: CALL_OW 69
21566: ST_TO_ADDR
// if not tmp then
21567: LD_VAR 0 1
21571: NOT
21572: IFFALSE 21576
// exit ;
21574: GO 21602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21576: LD_VAR 0 1
21580: PUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 12
21593: ARRAY
21594: PPUSH
21595: LD_INT 100
21597: PPUSH
21598: CALL_OW 234
// end ;
21602: PPOPN 1
21604: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21605: LD_EXP 46
21609: PUSH
21610: LD_EXP 60
21614: AND
21615: IFFALSE 21713
21617: GO 21619
21619: DISABLE
21620: LD_INT 0
21622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21623: LD_ADDR_VAR 0 1
21627: PUSH
21628: LD_INT 22
21630: PUSH
21631: LD_OWVAR 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 21
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PPUSH
21654: CALL_OW 69
21658: ST_TO_ADDR
// if not tmp then
21659: LD_VAR 0 1
21663: NOT
21664: IFFALSE 21668
// exit ;
21666: GO 21713
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21668: LD_VAR 0 1
21672: PUSH
21673: LD_INT 1
21675: PPUSH
21676: LD_VAR 0 1
21680: PPUSH
21681: CALL_OW 12
21685: ARRAY
21686: PPUSH
21687: LD_INT 1
21689: PPUSH
21690: LD_INT 4
21692: PPUSH
21693: CALL_OW 12
21697: PPUSH
21698: LD_INT 3000
21700: PPUSH
21701: LD_INT 9000
21703: PPUSH
21704: CALL_OW 12
21708: PPUSH
21709: CALL_OW 492
// end ;
21713: PPOPN 1
21715: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21716: LD_EXP 46
21720: PUSH
21721: LD_EXP 61
21725: AND
21726: IFFALSE 21746
21728: GO 21730
21730: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21731: LD_INT 1
21733: PPUSH
21734: LD_OWVAR 2
21738: PPUSH
21739: LD_INT 0
21741: PPUSH
21742: CALL_OW 324
21746: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21747: LD_EXP 46
21751: PUSH
21752: LD_EXP 62
21756: AND
21757: IFFALSE 21840
21759: GO 21761
21761: DISABLE
21762: LD_INT 0
21764: PPUSH
21765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_OWVAR 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 21
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PPUSH
21797: CALL_OW 69
21801: ST_TO_ADDR
// if not tmp then
21802: LD_VAR 0 2
21806: NOT
21807: IFFALSE 21811
// exit ;
21809: GO 21840
// for i in tmp do
21811: LD_ADDR_VAR 0 1
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: FOR_IN
21822: IFFALSE 21838
// SetBLevel ( i , 10 ) ;
21824: LD_VAR 0 1
21828: PPUSH
21829: LD_INT 10
21831: PPUSH
21832: CALL_OW 241
21836: GO 21821
21838: POP
21839: POP
// end ;
21840: PPOPN 2
21842: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21843: LD_EXP 46
21847: PUSH
21848: LD_EXP 63
21852: AND
21853: IFFALSE 21964
21855: GO 21857
21857: DISABLE
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21863: LD_ADDR_VAR 0 3
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_OWVAR 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 25
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: ST_TO_ADDR
// if not tmp then
21899: LD_VAR 0 3
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 21964
// un := tmp [ rand ( 1 , tmp ) ] ;
21908: LD_ADDR_VAR 0 2
21912: PUSH
21913: LD_VAR 0 3
21917: PUSH
21918: LD_INT 1
21920: PPUSH
21921: LD_VAR 0 3
21925: PPUSH
21926: CALL_OW 12
21930: ARRAY
21931: ST_TO_ADDR
// if Crawls ( un ) then
21932: LD_VAR 0 2
21936: PPUSH
21937: CALL_OW 318
21941: IFFALSE 21952
// ComWalk ( un ) ;
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21952: LD_VAR 0 2
21956: PPUSH
21957: LD_INT 5
21959: PPUSH
21960: CALL_OW 336
// end ;
21964: PPOPN 3
21966: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21967: LD_EXP 46
21971: PUSH
21972: LD_EXP 64
21976: AND
21977: PUSH
21978: LD_OWVAR 67
21982: PUSH
21983: LD_INT 4
21985: LESS
21986: AND
21987: IFFALSE 22006
21989: GO 21991
21991: DISABLE
// begin Difficulty := Difficulty + 1 ;
21992: LD_ADDR_OWVAR 67
21996: PUSH
21997: LD_OWVAR 67
22001: PUSH
22002: LD_INT 1
22004: PLUS
22005: ST_TO_ADDR
// end ;
22006: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22007: LD_EXP 46
22011: PUSH
22012: LD_EXP 65
22016: AND
22017: IFFALSE 22120
22019: GO 22021
22021: DISABLE
22022: LD_INT 0
22024: PPUSH
// begin for i := 1 to 5 do
22025: LD_ADDR_VAR 0 1
22029: PUSH
22030: DOUBLE
22031: LD_INT 1
22033: DEC
22034: ST_TO_ADDR
22035: LD_INT 5
22037: PUSH
22038: FOR_TO
22039: IFFALSE 22118
// begin uc_nation := nation_nature ;
22041: LD_ADDR_OWVAR 21
22045: PUSH
22046: LD_INT 0
22048: ST_TO_ADDR
// uc_side := 0 ;
22049: LD_ADDR_OWVAR 20
22053: PUSH
22054: LD_INT 0
22056: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22057: LD_ADDR_OWVAR 29
22061: PUSH
22062: LD_INT 12
22064: PUSH
22065: LD_INT 12
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: ST_TO_ADDR
// hc_agressivity := 20 ;
22072: LD_ADDR_OWVAR 35
22076: PUSH
22077: LD_INT 20
22079: ST_TO_ADDR
// hc_class := class_tiger ;
22080: LD_ADDR_OWVAR 28
22084: PUSH
22085: LD_INT 14
22087: ST_TO_ADDR
// hc_gallery :=  ;
22088: LD_ADDR_OWVAR 33
22092: PUSH
22093: LD_STRING 
22095: ST_TO_ADDR
// hc_name :=  ;
22096: LD_ADDR_OWVAR 26
22100: PUSH
22101: LD_STRING 
22103: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22104: CALL_OW 44
22108: PPUSH
22109: LD_INT 0
22111: PPUSH
22112: CALL_OW 51
// end ;
22116: GO 22038
22118: POP
22119: POP
// end ;
22120: PPOPN 1
22122: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22123: LD_EXP 46
22127: PUSH
22128: LD_EXP 66
22132: AND
22133: IFFALSE 22142
22135: GO 22137
22137: DISABLE
// StreamSibBomb ;
22138: CALL 22143 0 0
22142: END
// export function StreamSibBomb ; var i , x , y ; begin
22143: LD_INT 0
22145: PPUSH
22146: PPUSH
22147: PPUSH
22148: PPUSH
// result := false ;
22149: LD_ADDR_VAR 0 1
22153: PUSH
22154: LD_INT 0
22156: ST_TO_ADDR
// for i := 1 to 16 do
22157: LD_ADDR_VAR 0 2
22161: PUSH
22162: DOUBLE
22163: LD_INT 1
22165: DEC
22166: ST_TO_ADDR
22167: LD_INT 16
22169: PUSH
22170: FOR_TO
22171: IFFALSE 22370
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22173: LD_ADDR_VAR 0 3
22177: PUSH
22178: LD_INT 10
22180: PUSH
22181: LD_INT 20
22183: PUSH
22184: LD_INT 30
22186: PUSH
22187: LD_INT 40
22189: PUSH
22190: LD_INT 50
22192: PUSH
22193: LD_INT 60
22195: PUSH
22196: LD_INT 70
22198: PUSH
22199: LD_INT 80
22201: PUSH
22202: LD_INT 90
22204: PUSH
22205: LD_INT 100
22207: PUSH
22208: LD_INT 110
22210: PUSH
22211: LD_INT 120
22213: PUSH
22214: LD_INT 130
22216: PUSH
22217: LD_INT 140
22219: PUSH
22220: LD_INT 150
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PPUSH
22243: LD_INT 15
22245: PPUSH
22246: CALL_OW 12
22250: ARRAY
22251: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22252: LD_ADDR_VAR 0 4
22256: PUSH
22257: LD_INT 10
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 30
22265: PUSH
22266: LD_INT 40
22268: PUSH
22269: LD_INT 50
22271: PUSH
22272: LD_INT 60
22274: PUSH
22275: LD_INT 70
22277: PUSH
22278: LD_INT 80
22280: PUSH
22281: LD_INT 90
22283: PUSH
22284: LD_INT 100
22286: PUSH
22287: LD_INT 110
22289: PUSH
22290: LD_INT 120
22292: PUSH
22293: LD_INT 130
22295: PUSH
22296: LD_INT 140
22298: PUSH
22299: LD_INT 150
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: PPUSH
22322: LD_INT 15
22324: PPUSH
22325: CALL_OW 12
22329: ARRAY
22330: ST_TO_ADDR
// if ValidHex ( x , y ) then
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_VAR 0 4
22340: PPUSH
22341: CALL_OW 488
22345: IFFALSE 22368
// begin result := [ x , y ] ;
22347: LD_ADDR_VAR 0 1
22351: PUSH
22352: LD_VAR 0 3
22356: PUSH
22357: LD_VAR 0 4
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: ST_TO_ADDR
// break ;
22366: GO 22370
// end ; end ;
22368: GO 22170
22370: POP
22371: POP
// if result then
22372: LD_VAR 0 1
22376: IFFALSE 22436
// begin ToLua ( playSibBomb() ) ;
22378: LD_STRING playSibBomb()
22380: PPUSH
22381: CALL_OW 559
// wait ( 0 0$14 ) ;
22385: LD_INT 490
22387: PPUSH
22388: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22392: LD_VAR 0 1
22396: PUSH
22397: LD_INT 1
22399: ARRAY
22400: PPUSH
22401: LD_VAR 0 1
22405: PUSH
22406: LD_INT 2
22408: ARRAY
22409: PPUSH
22410: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22414: LD_VAR 0 1
22418: PUSH
22419: LD_INT 1
22421: ARRAY
22422: PPUSH
22423: LD_VAR 0 1
22427: PUSH
22428: LD_INT 2
22430: ARRAY
22431: PPUSH
22432: CALL_OW 429
// end ; end ;
22436: LD_VAR 0 1
22440: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22441: LD_EXP 46
22445: PUSH
22446: LD_EXP 68
22450: AND
22451: IFFALSE 22463
22453: GO 22455
22455: DISABLE
// YouLost (  ) ;
22456: LD_STRING 
22458: PPUSH
22459: CALL_OW 104
22463: END
// every 0 0$1 trigger StreamModeActive and sFog do
22464: LD_EXP 46
22468: PUSH
22469: LD_EXP 67
22473: AND
22474: IFFALSE 22488
22476: GO 22478
22478: DISABLE
// FogOff ( your_side ) ;
22479: LD_OWVAR 2
22483: PPUSH
22484: CALL_OW 344
22488: END
// every 0 0$1 trigger StreamModeActive and sSun do
22489: LD_EXP 46
22493: PUSH
22494: LD_EXP 69
22498: AND
22499: IFFALSE 22527
22501: GO 22503
22503: DISABLE
// begin solar_recharge_percent := 0 ;
22504: LD_ADDR_OWVAR 79
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22512: LD_INT 10500
22514: PPUSH
22515: CALL_OW 67
// solar_recharge_percent := 100 ;
22519: LD_ADDR_OWVAR 79
22523: PUSH
22524: LD_INT 100
22526: ST_TO_ADDR
// end ;
22527: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22528: LD_EXP 46
22532: PUSH
22533: LD_EXP 70
22537: AND
22538: IFFALSE 22777
22540: GO 22542
22542: DISABLE
22543: LD_INT 0
22545: PPUSH
22546: PPUSH
22547: PPUSH
// begin tmp := [ ] ;
22548: LD_ADDR_VAR 0 3
22552: PUSH
22553: EMPTY
22554: ST_TO_ADDR
// for i := 1 to 6 do
22555: LD_ADDR_VAR 0 1
22559: PUSH
22560: DOUBLE
22561: LD_INT 1
22563: DEC
22564: ST_TO_ADDR
22565: LD_INT 6
22567: PUSH
22568: FOR_TO
22569: IFFALSE 22674
// begin uc_nation := nation_nature ;
22571: LD_ADDR_OWVAR 21
22575: PUSH
22576: LD_INT 0
22578: ST_TO_ADDR
// uc_side := 0 ;
22579: LD_ADDR_OWVAR 20
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22587: LD_ADDR_OWVAR 29
22591: PUSH
22592: LD_INT 12
22594: PUSH
22595: LD_INT 12
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: ST_TO_ADDR
// hc_agressivity := 20 ;
22602: LD_ADDR_OWVAR 35
22606: PUSH
22607: LD_INT 20
22609: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22610: LD_ADDR_OWVAR 28
22614: PUSH
22615: LD_INT 17
22617: ST_TO_ADDR
// hc_gallery :=  ;
22618: LD_ADDR_OWVAR 33
22622: PUSH
22623: LD_STRING 
22625: ST_TO_ADDR
// hc_name :=  ;
22626: LD_ADDR_OWVAR 26
22630: PUSH
22631: LD_STRING 
22633: ST_TO_ADDR
// un := CreateHuman ;
22634: LD_ADDR_VAR 0 2
22638: PUSH
22639: CALL_OW 44
22643: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22644: LD_VAR 0 2
22648: PPUSH
22649: LD_INT 1
22651: PPUSH
22652: CALL_OW 51
// tmp := tmp ^ un ;
22656: LD_ADDR_VAR 0 3
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: LD_VAR 0 2
22670: ADD
22671: ST_TO_ADDR
// end ;
22672: GO 22568
22674: POP
22675: POP
// repeat wait ( 0 0$1 ) ;
22676: LD_INT 35
22678: PPUSH
22679: CALL_OW 67
// for un in tmp do
22683: LD_ADDR_VAR 0 2
22687: PUSH
22688: LD_VAR 0 3
22692: PUSH
22693: FOR_IN
22694: IFFALSE 22768
// begin if IsDead ( un ) then
22696: LD_VAR 0 2
22700: PPUSH
22701: CALL_OW 301
22705: IFFALSE 22725
// begin tmp := tmp diff un ;
22707: LD_ADDR_VAR 0 3
22711: PUSH
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 2
22721: DIFF
22722: ST_TO_ADDR
// continue ;
22723: GO 22693
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22725: LD_VAR 0 2
22729: PPUSH
22730: LD_INT 3
22732: PUSH
22733: LD_INT 22
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PPUSH
22747: CALL_OW 69
22751: PPUSH
22752: LD_VAR 0 2
22756: PPUSH
22757: CALL_OW 74
22761: PPUSH
22762: CALL_OW 115
// end ;
22766: GO 22693
22768: POP
22769: POP
// until not tmp ;
22770: LD_VAR 0 3
22774: NOT
22775: IFFALSE 22676
// end ;
22777: PPOPN 3
22779: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22780: LD_EXP 46
22784: PUSH
22785: LD_EXP 71
22789: AND
22790: IFFALSE 22844
22792: GO 22794
22794: DISABLE
// begin ToLua ( displayTroll(); ) ;
22795: LD_STRING displayTroll();
22797: PPUSH
22798: CALL_OW 559
// wait ( 3 3$00 ) ;
22802: LD_INT 6300
22804: PPUSH
22805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22809: LD_STRING hideTroll();
22811: PPUSH
22812: CALL_OW 559
// wait ( 1 1$00 ) ;
22816: LD_INT 2100
22818: PPUSH
22819: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22823: LD_STRING displayTroll();
22825: PPUSH
22826: CALL_OW 559
// wait ( 1 1$00 ) ;
22830: LD_INT 2100
22832: PPUSH
22833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22837: LD_STRING hideTroll();
22839: PPUSH
22840: CALL_OW 559
// end ;
22844: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22845: LD_EXP 46
22849: PUSH
22850: LD_EXP 72
22854: AND
22855: IFFALSE 22918
22857: GO 22859
22859: DISABLE
22860: LD_INT 0
22862: PPUSH
// begin p := 0 ;
22863: LD_ADDR_VAR 0 1
22867: PUSH
22868: LD_INT 0
22870: ST_TO_ADDR
// repeat game_speed := 1 ;
22871: LD_ADDR_OWVAR 65
22875: PUSH
22876: LD_INT 1
22878: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22879: LD_INT 35
22881: PPUSH
22882: CALL_OW 67
// p := p + 1 ;
22886: LD_ADDR_VAR 0 1
22890: PUSH
22891: LD_VAR 0 1
22895: PUSH
22896: LD_INT 1
22898: PLUS
22899: ST_TO_ADDR
// until p >= 60 ;
22900: LD_VAR 0 1
22904: PUSH
22905: LD_INT 60
22907: GREATEREQUAL
22908: IFFALSE 22871
// game_speed := 4 ;
22910: LD_ADDR_OWVAR 65
22914: PUSH
22915: LD_INT 4
22917: ST_TO_ADDR
// end ;
22918: PPOPN 1
22920: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22921: LD_EXP 46
22925: PUSH
22926: LD_EXP 73
22930: AND
22931: IFFALSE 23077
22933: GO 22935
22935: DISABLE
22936: LD_INT 0
22938: PPUSH
22939: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22940: LD_ADDR_VAR 0 1
22944: PUSH
22945: LD_INT 22
22947: PUSH
22948: LD_OWVAR 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 30
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 30
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: ST_TO_ADDR
// if not depot then
22994: LD_VAR 0 1
22998: NOT
22999: IFFALSE 23003
// exit ;
23001: GO 23077
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23003: LD_ADDR_VAR 0 2
23007: PUSH
23008: LD_VAR 0 1
23012: PUSH
23013: LD_INT 1
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 12
23025: ARRAY
23026: PPUSH
23027: CALL_OW 274
23031: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23032: LD_VAR 0 2
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 0
23042: PPUSH
23043: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23047: LD_VAR 0 2
23051: PPUSH
23052: LD_INT 2
23054: PPUSH
23055: LD_INT 0
23057: PPUSH
23058: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23062: LD_VAR 0 2
23066: PPUSH
23067: LD_INT 3
23069: PPUSH
23070: LD_INT 0
23072: PPUSH
23073: CALL_OW 277
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23080: LD_EXP 46
23084: PUSH
23085: LD_EXP 74
23089: AND
23090: IFFALSE 23187
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: LD_INT 22
23105: PUSH
23106: LD_OWVAR 2
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 3
23127: PUSH
23128: LD_INT 23
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: PPUSH
23147: CALL_OW 69
23151: ST_TO_ADDR
// if not tmp then
23152: LD_VAR 0 1
23156: NOT
23157: IFFALSE 23161
// exit ;
23159: GO 23187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23161: LD_VAR 0 1
23165: PUSH
23166: LD_INT 1
23168: PPUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 12
23178: ARRAY
23179: PPUSH
23180: LD_INT 200
23182: PPUSH
23183: CALL_OW 234
// end ;
23187: PPOPN 1
23189: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23190: LD_EXP 46
23194: PUSH
23195: LD_EXP 75
23199: AND
23200: IFFALSE 23279
23202: GO 23204
23204: DISABLE
23205: LD_INT 0
23207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23208: LD_ADDR_VAR 0 1
23212: PUSH
23213: LD_INT 22
23215: PUSH
23216: LD_OWVAR 2
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: ST_TO_ADDR
// if not tmp then
23244: LD_VAR 0 1
23248: NOT
23249: IFFALSE 23253
// exit ;
23251: GO 23279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23253: LD_VAR 0 1
23257: PUSH
23258: LD_INT 1
23260: PPUSH
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 12
23270: ARRAY
23271: PPUSH
23272: LD_INT 60
23274: PPUSH
23275: CALL_OW 234
// end ;
23279: PPOPN 1
23281: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23282: LD_EXP 46
23286: PUSH
23287: LD_EXP 76
23291: AND
23292: IFFALSE 23391
23294: GO 23296
23296: DISABLE
23297: LD_INT 0
23299: PPUSH
23300: PPUSH
// begin enable ;
23301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23302: LD_ADDR_VAR 0 1
23306: PUSH
23307: LD_INT 22
23309: PUSH
23310: LD_OWVAR 2
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 61
23321: PUSH
23322: EMPTY
23323: LIST
23324: PUSH
23325: LD_INT 33
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: PPUSH
23340: CALL_OW 69
23344: ST_TO_ADDR
// if not tmp then
23345: LD_VAR 0 1
23349: NOT
23350: IFFALSE 23354
// exit ;
23352: GO 23391
// for i in tmp do
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_VAR 0 1
23363: PUSH
23364: FOR_IN
23365: IFFALSE 23389
// if IsControledBy ( i ) then
23367: LD_VAR 0 2
23371: PPUSH
23372: CALL_OW 312
23376: IFFALSE 23387
// ComUnlink ( i ) ;
23378: LD_VAR 0 2
23382: PPUSH
23383: CALL_OW 136
23387: GO 23364
23389: POP
23390: POP
// end ;
23391: PPOPN 2
23393: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23394: LD_EXP 46
23398: PUSH
23399: LD_EXP 77
23403: AND
23404: IFFALSE 23544
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
// begin ToLua ( displayPowell(); ) ;
23413: LD_STRING displayPowell();
23415: PPUSH
23416: CALL_OW 559
// uc_side := 0 ;
23420: LD_ADDR_OWVAR 20
23424: PUSH
23425: LD_INT 0
23427: ST_TO_ADDR
// uc_nation := 2 ;
23428: LD_ADDR_OWVAR 21
23432: PUSH
23433: LD_INT 2
23435: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23436: LD_ADDR_OWVAR 37
23440: PUSH
23441: LD_INT 14
23443: ST_TO_ADDR
// vc_engine := engine_siberite ;
23444: LD_ADDR_OWVAR 39
23448: PUSH
23449: LD_INT 3
23451: ST_TO_ADDR
// vc_control := control_apeman ;
23452: LD_ADDR_OWVAR 38
23456: PUSH
23457: LD_INT 5
23459: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23460: LD_ADDR_OWVAR 40
23464: PUSH
23465: LD_INT 29
23467: ST_TO_ADDR
// un := CreateVehicle ;
23468: LD_ADDR_VAR 0 2
23472: PUSH
23473: CALL_OW 45
23477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23478: LD_VAR 0 2
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23490: LD_INT 35
23492: PPUSH
23493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23497: LD_VAR 0 2
23501: PPUSH
23502: LD_INT 22
23504: PUSH
23505: LD_OWVAR 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PPUSH
23514: CALL_OW 69
23518: PPUSH
23519: LD_VAR 0 2
23523: PPUSH
23524: CALL_OW 74
23528: PPUSH
23529: CALL_OW 115
// until IsDead ( un ) ;
23533: LD_VAR 0 2
23537: PPUSH
23538: CALL_OW 301
23542: IFFALSE 23490
// end ;
23544: PPOPN 2
23546: END
// every 0 0$1 trigger StreamModeActive and sStu do
23547: LD_EXP 46
23551: PUSH
23552: LD_EXP 85
23556: AND
23557: IFFALSE 23573
23559: GO 23561
23561: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23562: LD_STRING displayStucuk();
23564: PPUSH
23565: CALL_OW 559
// ResetFog ;
23569: CALL_OW 335
// end ;
23573: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23574: LD_EXP 46
23578: PUSH
23579: LD_EXP 78
23583: AND
23584: IFFALSE 23725
23586: GO 23588
23588: DISABLE
23589: LD_INT 0
23591: PPUSH
23592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23593: LD_ADDR_VAR 0 2
23597: PUSH
23598: LD_INT 22
23600: PUSH
23601: LD_OWVAR 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 21
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: ST_TO_ADDR
// if not tmp then
23629: LD_VAR 0 2
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 23725
// un := tmp [ rand ( 1 , tmp ) ] ;
23638: LD_ADDR_VAR 0 1
23642: PUSH
23643: LD_VAR 0 2
23647: PUSH
23648: LD_INT 1
23650: PPUSH
23651: LD_VAR 0 2
23655: PPUSH
23656: CALL_OW 12
23660: ARRAY
23661: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23662: LD_VAR 0 1
23666: PPUSH
23667: LD_INT 0
23669: PPUSH
23670: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_OWVAR 3
23683: PUSH
23684: LD_VAR 0 1
23688: DIFF
23689: PPUSH
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 74
23699: PPUSH
23700: CALL_OW 115
// wait ( 0 0$20 ) ;
23704: LD_INT 700
23706: PPUSH
23707: CALL_OW 67
// SetSide ( un , your_side ) ;
23711: LD_VAR 0 1
23715: PPUSH
23716: LD_OWVAR 2
23720: PPUSH
23721: CALL_OW 235
// end ;
23725: PPOPN 2
23727: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23728: LD_EXP 46
23732: PUSH
23733: LD_EXP 79
23737: AND
23738: IFFALSE 23844
23740: GO 23742
23742: DISABLE
23743: LD_INT 0
23745: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23746: LD_ADDR_VAR 0 1
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: LD_OWVAR 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 30
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 30
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 69
23799: ST_TO_ADDR
// if not depot then
23800: LD_VAR 0 1
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 23844
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23809: LD_VAR 0 1
23813: PUSH
23814: LD_INT 1
23816: ARRAY
23817: PPUSH
23818: CALL_OW 250
23822: PPUSH
23823: LD_VAR 0 1
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: CALL_OW 251
23836: PPUSH
23837: LD_INT 70
23839: PPUSH
23840: CALL_OW 495
// end ;
23844: PPOPN 1
23846: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23847: LD_EXP 46
23851: PUSH
23852: LD_EXP 80
23856: AND
23857: IFFALSE 24068
23859: GO 23861
23861: DISABLE
23862: LD_INT 0
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23869: LD_ADDR_VAR 0 5
23873: PUSH
23874: LD_INT 22
23876: PUSH
23877: LD_OWVAR 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 21
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PPUSH
23900: CALL_OW 69
23904: ST_TO_ADDR
// if not tmp then
23905: LD_VAR 0 5
23909: NOT
23910: IFFALSE 23914
// exit ;
23912: GO 24068
// for i in tmp do
23914: LD_ADDR_VAR 0 1
23918: PUSH
23919: LD_VAR 0 5
23923: PUSH
23924: FOR_IN
23925: IFFALSE 24066
// begin d := rand ( 0 , 5 ) ;
23927: LD_ADDR_VAR 0 4
23931: PUSH
23932: LD_INT 0
23934: PPUSH
23935: LD_INT 5
23937: PPUSH
23938: CALL_OW 12
23942: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 250
23957: PPUSH
23958: LD_VAR 0 4
23962: PPUSH
23963: LD_INT 3
23965: PPUSH
23966: LD_INT 12
23968: PPUSH
23969: CALL_OW 12
23973: PPUSH
23974: CALL_OW 272
23978: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23979: LD_ADDR_VAR 0 3
23983: PUSH
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 251
23993: PPUSH
23994: LD_VAR 0 4
23998: PPUSH
23999: LD_INT 3
24001: PPUSH
24002: LD_INT 12
24004: PPUSH
24005: CALL_OW 12
24009: PPUSH
24010: CALL_OW 273
24014: ST_TO_ADDR
// if ValidHex ( x , y ) then
24015: LD_VAR 0 2
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: CALL_OW 488
24029: IFFALSE 24064
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24031: LD_VAR 0 1
24035: PPUSH
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_VAR 0 3
24045: PPUSH
24046: LD_INT 3
24048: PPUSH
24049: LD_INT 6
24051: PPUSH
24052: CALL_OW 12
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 483
// end ;
24064: GO 23924
24066: POP
24067: POP
// end ;
24068: PPOPN 5
24070: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24071: LD_EXP 46
24075: PUSH
24076: LD_EXP 81
24080: AND
24081: IFFALSE 24175
24083: GO 24085
24085: DISABLE
24086: LD_INT 0
24088: PPUSH
24089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24090: LD_ADDR_VAR 0 2
24094: PUSH
24095: LD_INT 22
24097: PUSH
24098: LD_OWVAR 2
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 32
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 21
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// if not tmp then
24137: LD_VAR 0 2
24141: NOT
24142: IFFALSE 24146
// exit ;
24144: GO 24175
// for i in tmp do
24146: LD_ADDR_VAR 0 1
24150: PUSH
24151: LD_VAR 0 2
24155: PUSH
24156: FOR_IN
24157: IFFALSE 24173
// SetFuel ( i , 0 ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: CALL_OW 240
24171: GO 24156
24173: POP
24174: POP
// end ;
24175: PPOPN 2
24177: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24178: LD_EXP 46
24182: PUSH
24183: LD_EXP 82
24187: AND
24188: IFFALSE 24254
24190: GO 24192
24192: DISABLE
24193: LD_INT 0
24195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24196: LD_ADDR_VAR 0 1
24200: PUSH
24201: LD_INT 22
24203: PUSH
24204: LD_OWVAR 2
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 30
24215: PUSH
24216: LD_INT 29
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PPUSH
24227: CALL_OW 69
24231: ST_TO_ADDR
// if not tmp then
24232: LD_VAR 0 1
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24254
// DestroyUnit ( tmp [ 1 ] ) ;
24241: LD_VAR 0 1
24245: PUSH
24246: LD_INT 1
24248: ARRAY
24249: PPUSH
24250: CALL_OW 65
// end ;
24254: PPOPN 1
24256: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24257: LD_EXP 46
24261: PUSH
24262: LD_EXP 84
24266: AND
24267: IFFALSE 24396
24269: GO 24271
24271: DISABLE
24272: LD_INT 0
24274: PPUSH
// begin uc_side := 0 ;
24275: LD_ADDR_OWVAR 20
24279: PUSH
24280: LD_INT 0
24282: ST_TO_ADDR
// uc_nation := nation_arabian ;
24283: LD_ADDR_OWVAR 21
24287: PUSH
24288: LD_INT 2
24290: ST_TO_ADDR
// hc_gallery :=  ;
24291: LD_ADDR_OWVAR 33
24295: PUSH
24296: LD_STRING 
24298: ST_TO_ADDR
// hc_name :=  ;
24299: LD_ADDR_OWVAR 26
24303: PUSH
24304: LD_STRING 
24306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24307: LD_INT 1
24309: PPUSH
24310: LD_INT 11
24312: PPUSH
24313: LD_INT 10
24315: PPUSH
24316: CALL_OW 380
// un := CreateHuman ;
24320: LD_ADDR_VAR 0 1
24324: PUSH
24325: CALL_OW 44
24329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24330: LD_VAR 0 1
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24342: LD_INT 35
24344: PPUSH
24345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24349: LD_VAR 0 1
24353: PPUSH
24354: LD_INT 22
24356: PUSH
24357: LD_OWVAR 2
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PPUSH
24366: CALL_OW 69
24370: PPUSH
24371: LD_VAR 0 1
24375: PPUSH
24376: CALL_OW 74
24380: PPUSH
24381: CALL_OW 115
// until IsDead ( un ) ;
24385: LD_VAR 0 1
24389: PPUSH
24390: CALL_OW 301
24394: IFFALSE 24342
// end ;
24396: PPOPN 1
24398: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24399: LD_EXP 46
24403: PUSH
24404: LD_EXP 86
24408: AND
24409: IFFALSE 24421
24411: GO 24413
24413: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24414: LD_STRING earthquake(getX(game), 0, 32)
24416: PPUSH
24417: CALL_OW 559
24421: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24422: LD_EXP 46
24426: PUSH
24427: LD_EXP 87
24431: AND
24432: IFFALSE 24523
24434: GO 24436
24436: DISABLE
24437: LD_INT 0
24439: PPUSH
// begin enable ;
24440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24441: LD_ADDR_VAR 0 1
24445: PUSH
24446: LD_INT 22
24448: PUSH
24449: LD_OWVAR 2
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 21
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 33
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: PPUSH
24483: CALL_OW 69
24487: ST_TO_ADDR
// if not tmp then
24488: LD_VAR 0 1
24492: NOT
24493: IFFALSE 24497
// exit ;
24495: GO 24523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 1
24504: PPUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 12
24514: ARRAY
24515: PPUSH
24516: LD_INT 1
24518: PPUSH
24519: CALL_OW 234
// end ;
24523: PPOPN 1
24525: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24526: LD_EXP 46
24530: PUSH
24531: LD_EXP 88
24535: AND
24536: IFFALSE 24677
24538: GO 24540
24540: DISABLE
24541: LD_INT 0
24543: PPUSH
24544: PPUSH
24545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_OWVAR 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 25
24565: PUSH
24566: LD_INT 1
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PPUSH
24577: CALL_OW 69
24581: ST_TO_ADDR
// if not tmp then
24582: LD_VAR 0 3
24586: NOT
24587: IFFALSE 24591
// exit ;
24589: GO 24677
// un := tmp [ rand ( 1 , tmp ) ] ;
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_VAR 0 3
24600: PUSH
24601: LD_INT 1
24603: PPUSH
24604: LD_VAR 0 3
24608: PPUSH
24609: CALL_OW 12
24613: ARRAY
24614: ST_TO_ADDR
// if Crawls ( un ) then
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 318
24624: IFFALSE 24635
// ComWalk ( un ) ;
24626: LD_VAR 0 2
24630: PPUSH
24631: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24635: LD_VAR 0 2
24639: PPUSH
24640: LD_INT 9
24642: PPUSH
24643: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24647: LD_INT 28
24649: PPUSH
24650: LD_OWVAR 2
24654: PPUSH
24655: LD_INT 2
24657: PPUSH
24658: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24662: LD_INT 29
24664: PPUSH
24665: LD_OWVAR 2
24669: PPUSH
24670: LD_INT 2
24672: PPUSH
24673: CALL_OW 322
// end ;
24677: PPOPN 3
24679: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24680: LD_EXP 46
24684: PUSH
24685: LD_EXP 89
24689: AND
24690: IFFALSE 24801
24692: GO 24694
24694: DISABLE
24695: LD_INT 0
24697: PPUSH
24698: PPUSH
24699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24700: LD_ADDR_VAR 0 3
24704: PUSH
24705: LD_INT 22
24707: PUSH
24708: LD_OWVAR 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 25
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 69
24735: ST_TO_ADDR
// if not tmp then
24736: LD_VAR 0 3
24740: NOT
24741: IFFALSE 24745
// exit ;
24743: GO 24801
// un := tmp [ rand ( 1 , tmp ) ] ;
24745: LD_ADDR_VAR 0 2
24749: PUSH
24750: LD_VAR 0 3
24754: PUSH
24755: LD_INT 1
24757: PPUSH
24758: LD_VAR 0 3
24762: PPUSH
24763: CALL_OW 12
24767: ARRAY
24768: ST_TO_ADDR
// if Crawls ( un ) then
24769: LD_VAR 0 2
24773: PPUSH
24774: CALL_OW 318
24778: IFFALSE 24789
// ComWalk ( un ) ;
24780: LD_VAR 0 2
24784: PPUSH
24785: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24789: LD_VAR 0 2
24793: PPUSH
24794: LD_INT 8
24796: PPUSH
24797: CALL_OW 336
// end ;
24801: PPOPN 3
24803: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24804: LD_EXP 46
24808: PUSH
24809: LD_EXP 90
24813: AND
24814: IFFALSE 24958
24816: GO 24818
24818: DISABLE
24819: LD_INT 0
24821: PPUSH
24822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 21
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 12
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 51
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 32
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24958
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24956
// if GetCargo ( i , mat_artifact ) = 0 then
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 4
24928: PPUSH
24929: CALL_OW 289
24933: PUSH
24934: LD_INT 0
24936: EQUAL
24937: IFFALSE 24954
// SetCargo ( i , mat_siberit , 100 ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_INT 3
24946: PPUSH
24947: LD_INT 100
24949: PPUSH
24950: CALL_OW 290
24954: GO 24918
24956: POP
24957: POP
// end ;
24958: PPOPN 2
24960: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24961: LD_EXP 46
24965: PUSH
24966: LD_EXP 91
24970: AND
24971: IFFALSE 25154
24973: GO 24975
24975: DISABLE
24976: LD_INT 0
24978: PPUSH
24979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: LD_INT 22
24987: PUSH
24988: LD_OWVAR 2
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PPUSH
24997: CALL_OW 69
25001: ST_TO_ADDR
// if not tmp then
25002: LD_VAR 0 2
25006: NOT
25007: IFFALSE 25011
// exit ;
25009: GO 25154
// for i := 1 to 2 do
25011: LD_ADDR_VAR 0 1
25015: PUSH
25016: DOUBLE
25017: LD_INT 1
25019: DEC
25020: ST_TO_ADDR
25021: LD_INT 2
25023: PUSH
25024: FOR_TO
25025: IFFALSE 25152
// begin uc_side := your_side ;
25027: LD_ADDR_OWVAR 20
25031: PUSH
25032: LD_OWVAR 2
25036: ST_TO_ADDR
// uc_nation := nation_american ;
25037: LD_ADDR_OWVAR 21
25041: PUSH
25042: LD_INT 1
25044: ST_TO_ADDR
// vc_chassis := us_morphling ;
25045: LD_ADDR_OWVAR 37
25049: PUSH
25050: LD_INT 5
25052: ST_TO_ADDR
// vc_engine := engine_siberite ;
25053: LD_ADDR_OWVAR 39
25057: PUSH
25058: LD_INT 3
25060: ST_TO_ADDR
// vc_control := control_computer ;
25061: LD_ADDR_OWVAR 38
25065: PUSH
25066: LD_INT 3
25068: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25069: LD_ADDR_OWVAR 40
25073: PUSH
25074: LD_INT 10
25076: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25077: LD_VAR 0 2
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: CALL_OW 310
25090: NOT
25091: IFFALSE 25138
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25093: CALL_OW 45
25097: PPUSH
25098: LD_VAR 0 2
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: PPUSH
25107: CALL_OW 250
25111: PPUSH
25112: LD_VAR 0 2
25116: PUSH
25117: LD_INT 1
25119: ARRAY
25120: PPUSH
25121: CALL_OW 251
25125: PPUSH
25126: LD_INT 12
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 50
25136: GO 25150
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25138: CALL_OW 45
25142: PPUSH
25143: LD_INT 1
25145: PPUSH
25146: CALL_OW 51
// end ;
25150: GO 25024
25152: POP
25153: POP
// end ;
25154: PPOPN 2
25156: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25157: LD_EXP 46
25161: PUSH
25162: LD_EXP 92
25166: AND
25167: IFFALSE 25389
25169: GO 25171
25171: DISABLE
25172: LD_INT 0
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25180: LD_ADDR_VAR 0 6
25184: PUSH
25185: LD_INT 22
25187: PUSH
25188: LD_OWVAR 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: LD_INT 23
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 6
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 25389
// s1 := rand ( 1 , 4 ) ;
25243: LD_ADDR_VAR 0 2
25247: PUSH
25248: LD_INT 1
25250: PPUSH
25251: LD_INT 4
25253: PPUSH
25254: CALL_OW 12
25258: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25259: LD_ADDR_VAR 0 4
25263: PUSH
25264: LD_VAR 0 6
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_VAR 0 2
25277: PPUSH
25278: CALL_OW 259
25282: ST_TO_ADDR
// if s1 = 1 then
25283: LD_VAR 0 2
25287: PUSH
25288: LD_INT 1
25290: EQUAL
25291: IFFALSE 25311
// s2 := rand ( 2 , 4 ) else
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 2
25300: PPUSH
25301: LD_INT 4
25303: PPUSH
25304: CALL_OW 12
25308: ST_TO_ADDR
25309: GO 25319
// s2 := 1 ;
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: LD_INT 1
25318: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25319: LD_ADDR_VAR 0 5
25323: PUSH
25324: LD_VAR 0 6
25328: PUSH
25329: LD_INT 1
25331: ARRAY
25332: PPUSH
25333: LD_VAR 0 3
25337: PPUSH
25338: CALL_OW 259
25342: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25343: LD_VAR 0 6
25347: PUSH
25348: LD_INT 1
25350: ARRAY
25351: PPUSH
25352: LD_VAR 0 2
25356: PPUSH
25357: LD_VAR 0 5
25361: PPUSH
25362: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25366: LD_VAR 0 6
25370: PUSH
25371: LD_INT 1
25373: ARRAY
25374: PPUSH
25375: LD_VAR 0 3
25379: PPUSH
25380: LD_VAR 0 4
25384: PPUSH
25385: CALL_OW 237
// end ;
25389: PPOPN 6
25391: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25392: LD_EXP 46
25396: PUSH
25397: LD_EXP 93
25401: AND
25402: IFFALSE 25481
25404: GO 25406
25406: DISABLE
25407: LD_INT 0
25409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: LD_INT 22
25417: PUSH
25418: LD_OWVAR 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 30
25429: PUSH
25430: LD_INT 3
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PPUSH
25441: CALL_OW 69
25445: ST_TO_ADDR
// if not tmp then
25446: LD_VAR 0 1
25450: NOT
25451: IFFALSE 25455
// exit ;
25453: GO 25481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25455: LD_VAR 0 1
25459: PUSH
25460: LD_INT 1
25462: PPUSH
25463: LD_VAR 0 1
25467: PPUSH
25468: CALL_OW 12
25472: ARRAY
25473: PPUSH
25474: LD_INT 1
25476: PPUSH
25477: CALL_OW 234
// end ;
25481: PPOPN 1
25483: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25484: LD_EXP 46
25488: PUSH
25489: LD_EXP 94
25493: AND
25494: IFFALSE 25606
25496: GO 25498
25498: DISABLE
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_INT 22
25510: PUSH
25511: LD_OWVAR 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: LD_INT 30
25525: PUSH
25526: LD_INT 27
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 30
25535: PUSH
25536: LD_INT 26
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 30
25545: PUSH
25546: LD_INT 28
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: ST_TO_ADDR
// if not tmp then
25568: LD_VAR 0 2
25572: NOT
25573: IFFALSE 25577
// exit ;
25575: GO 25606
// for i in tmp do
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 2
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25604
// SetLives ( i , 1 ) ;
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: CALL_OW 234
25602: GO 25587
25604: POP
25605: POP
// end ;
25606: PPOPN 2
25608: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25609: LD_EXP 46
25613: PUSH
25614: LD_EXP 95
25618: AND
25619: IFFALSE 25906
25621: GO 25623
25623: DISABLE
25624: LD_INT 0
25626: PPUSH
25627: PPUSH
25628: PPUSH
// begin i := rand ( 1 , 7 ) ;
25629: LD_ADDR_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_INT 7
25639: PPUSH
25640: CALL_OW 12
25644: ST_TO_ADDR
// case i of 1 :
25645: LD_VAR 0 1
25649: PUSH
25650: LD_INT 1
25652: DOUBLE
25653: EQUAL
25654: IFTRUE 25658
25656: GO 25668
25658: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25659: LD_STRING earthquake(getX(game), 0, 32)
25661: PPUSH
25662: CALL_OW 559
25666: GO 25906
25668: LD_INT 2
25670: DOUBLE
25671: EQUAL
25672: IFTRUE 25676
25674: GO 25690
25676: POP
// begin ToLua ( displayStucuk(); ) ;
25677: LD_STRING displayStucuk();
25679: PPUSH
25680: CALL_OW 559
// ResetFog ;
25684: CALL_OW 335
// end ; 3 :
25688: GO 25906
25690: LD_INT 3
25692: DOUBLE
25693: EQUAL
25694: IFTRUE 25698
25696: GO 25802
25698: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25699: LD_ADDR_VAR 0 2
25703: PUSH
25704: LD_INT 22
25706: PUSH
25707: LD_OWVAR 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 25
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PPUSH
25730: CALL_OW 69
25734: ST_TO_ADDR
// if not tmp then
25735: LD_VAR 0 2
25739: NOT
25740: IFFALSE 25744
// exit ;
25742: GO 25906
// un := tmp [ rand ( 1 , tmp ) ] ;
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_VAR 0 2
25753: PUSH
25754: LD_INT 1
25756: PPUSH
25757: LD_VAR 0 2
25761: PPUSH
25762: CALL_OW 12
25766: ARRAY
25767: ST_TO_ADDR
// if Crawls ( un ) then
25768: LD_VAR 0 3
25772: PPUSH
25773: CALL_OW 318
25777: IFFALSE 25788
// ComWalk ( un ) ;
25779: LD_VAR 0 3
25783: PPUSH
25784: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25788: LD_VAR 0 3
25792: PPUSH
25793: LD_INT 8
25795: PPUSH
25796: CALL_OW 336
// end ; 4 :
25800: GO 25906
25802: LD_INT 4
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25810
25808: GO 25884
25810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25811: LD_ADDR_VAR 0 2
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_OWVAR 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 30
25830: PUSH
25831: LD_INT 29
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 69
25846: ST_TO_ADDR
// if not tmp then
25847: LD_VAR 0 2
25851: NOT
25852: IFFALSE 25856
// exit ;
25854: GO 25906
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25856: LD_VAR 0 2
25860: PUSH
25861: LD_INT 1
25863: ARRAY
25864: PPUSH
25865: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25869: LD_VAR 0 2
25873: PUSH
25874: LD_INT 1
25876: ARRAY
25877: PPUSH
25878: CALL_OW 65
// end ; 5 .. 7 :
25882: GO 25906
25884: LD_INT 5
25886: DOUBLE
25887: GREATEREQUAL
25888: IFFALSE 25896
25890: LD_INT 7
25892: DOUBLE
25893: LESSEQUAL
25894: IFTRUE 25898
25896: GO 25905
25898: POP
// StreamSibBomb ; end ;
25899: CALL 22143 0 0
25903: GO 25906
25905: POP
// end ;
25906: PPOPN 3
25908: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25909: LD_EXP 46
25913: PUSH
25914: LD_EXP 96
25918: AND
25919: IFFALSE 26075
25921: GO 25923
25923: DISABLE
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
25928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25929: LD_ADDR_VAR 0 2
25933: PUSH
25934: LD_INT 81
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: LD_INT 21
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 21
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PPUSH
25978: CALL_OW 69
25982: ST_TO_ADDR
// if not tmp then
25983: LD_VAR 0 2
25987: NOT
25988: IFFALSE 25992
// exit ;
25990: GO 26075
// p := 0 ;
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 0
25999: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26000: LD_INT 35
26002: PPUSH
26003: CALL_OW 67
// p := p + 1 ;
26007: LD_ADDR_VAR 0 3
26011: PUSH
26012: LD_VAR 0 3
26016: PUSH
26017: LD_INT 1
26019: PLUS
26020: ST_TO_ADDR
// for i in tmp do
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_VAR 0 2
26030: PUSH
26031: FOR_IN
26032: IFFALSE 26063
// if GetLives ( i ) < 1000 then
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 256
26043: PUSH
26044: LD_INT 1000
26046: LESS
26047: IFFALSE 26061
// SetLives ( i , 1000 ) ;
26049: LD_VAR 0 1
26053: PPUSH
26054: LD_INT 1000
26056: PPUSH
26057: CALL_OW 234
26061: GO 26031
26063: POP
26064: POP
// until p > 20 ;
26065: LD_VAR 0 3
26069: PUSH
26070: LD_INT 20
26072: GREATER
26073: IFFALSE 26000
// end ;
26075: PPOPN 3
26077: END
// every 0 0$1 trigger StreamModeActive and sTime do
26078: LD_EXP 46
26082: PUSH
26083: LD_EXP 97
26087: AND
26088: IFFALSE 26123
26090: GO 26092
26092: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26093: LD_INT 28
26095: PPUSH
26096: LD_OWVAR 2
26100: PPUSH
26101: LD_INT 2
26103: PPUSH
26104: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26108: LD_INT 30
26110: PPUSH
26111: LD_OWVAR 2
26115: PPUSH
26116: LD_INT 2
26118: PPUSH
26119: CALL_OW 322
// end ;
26123: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26124: LD_EXP 46
26128: PUSH
26129: LD_EXP 98
26133: AND
26134: IFFALSE 26255
26136: GO 26138
26138: DISABLE
26139: LD_INT 0
26141: PPUSH
26142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26143: LD_ADDR_VAR 0 2
26147: PUSH
26148: LD_INT 22
26150: PUSH
26151: LD_OWVAR 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 21
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: LD_INT 23
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: PPUSH
26192: CALL_OW 69
26196: ST_TO_ADDR
// if not tmp then
26197: LD_VAR 0 2
26201: NOT
26202: IFFALSE 26206
// exit ;
26204: GO 26255
// for i in tmp do
26206: LD_ADDR_VAR 0 1
26210: PUSH
26211: LD_VAR 0 2
26215: PUSH
26216: FOR_IN
26217: IFFALSE 26253
// begin if Crawls ( i ) then
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 318
26228: IFFALSE 26239
// ComWalk ( i ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 138
// SetClass ( i , 2 ) ;
26239: LD_VAR 0 1
26243: PPUSH
26244: LD_INT 2
26246: PPUSH
26247: CALL_OW 336
// end ;
26251: GO 26216
26253: POP
26254: POP
// end ;
26255: PPOPN 2
26257: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26258: LD_EXP 46
26262: PUSH
26263: LD_EXP 99
26267: AND
26268: IFFALSE 26556
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26278: LD_OWVAR 2
26282: PPUSH
26283: LD_INT 9
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: LD_INT 1
26291: PPUSH
26292: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26296: LD_INT 9
26298: PPUSH
26299: LD_OWVAR 2
26303: PPUSH
26304: CALL_OW 343
// uc_side := 9 ;
26308: LD_ADDR_OWVAR 20
26312: PUSH
26313: LD_INT 9
26315: ST_TO_ADDR
// uc_nation := 2 ;
26316: LD_ADDR_OWVAR 21
26320: PUSH
26321: LD_INT 2
26323: ST_TO_ADDR
// hc_name := Dark Warrior ;
26324: LD_ADDR_OWVAR 26
26328: PUSH
26329: LD_STRING Dark Warrior
26331: ST_TO_ADDR
// hc_gallery :=  ;
26332: LD_ADDR_OWVAR 33
26336: PUSH
26337: LD_STRING 
26339: ST_TO_ADDR
// hc_noskilllimit := true ;
26340: LD_ADDR_OWVAR 76
26344: PUSH
26345: LD_INT 1
26347: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26348: LD_ADDR_OWVAR 31
26352: PUSH
26353: LD_INT 30
26355: PUSH
26356: LD_INT 30
26358: PUSH
26359: LD_INT 30
26361: PUSH
26362: LD_INT 30
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: ST_TO_ADDR
// un := CreateHuman ;
26371: LD_ADDR_VAR 0 3
26375: PUSH
26376: CALL_OW 44
26380: ST_TO_ADDR
// hc_noskilllimit := false ;
26381: LD_ADDR_OWVAR 76
26385: PUSH
26386: LD_INT 0
26388: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26389: LD_VAR 0 3
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: CALL_OW 51
// ToLua ( playRanger() ) ;
26401: LD_STRING playRanger()
26403: PPUSH
26404: CALL_OW 559
// p := 0 ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_INT 0
26415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26416: LD_INT 35
26418: PPUSH
26419: CALL_OW 67
// p := p + 1 ;
26423: LD_ADDR_VAR 0 2
26427: PUSH
26428: LD_VAR 0 2
26432: PUSH
26433: LD_INT 1
26435: PLUS
26436: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26437: LD_VAR 0 3
26441: PPUSH
26442: CALL_OW 256
26446: PUSH
26447: LD_INT 1000
26449: LESS
26450: IFFALSE 26464
// SetLives ( un , 1000 ) ;
26452: LD_VAR 0 3
26456: PPUSH
26457: LD_INT 1000
26459: PPUSH
26460: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26464: LD_VAR 0 3
26468: PPUSH
26469: LD_INT 81
26471: PUSH
26472: LD_OWVAR 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 91
26483: PUSH
26484: LD_VAR 0 3
26488: PUSH
26489: LD_INT 30
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PPUSH
26501: CALL_OW 69
26505: PPUSH
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 74
26515: PPUSH
26516: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26520: LD_VAR 0 2
26524: PUSH
26525: LD_INT 80
26527: GREATER
26528: PUSH
26529: LD_VAR 0 3
26533: PPUSH
26534: CALL_OW 301
26538: OR
26539: IFFALSE 26416
// if un then
26541: LD_VAR 0 3
26545: IFFALSE 26556
// RemoveUnit ( un ) ;
26547: LD_VAR 0 3
26551: PPUSH
26552: CALL_OW 64
// end ;
26556: PPOPN 3
26558: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26559: LD_EXP 100
26563: IFFALSE 26679
26565: GO 26567
26567: DISABLE
26568: LD_INT 0
26570: PPUSH
26571: PPUSH
26572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26573: LD_ADDR_VAR 0 2
26577: PUSH
26578: LD_INT 81
26580: PUSH
26581: LD_OWVAR 2
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 21
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26609: LD_STRING playComputer()
26611: PPUSH
26612: CALL_OW 559
// if not tmp then
26616: LD_VAR 0 2
26620: NOT
26621: IFFALSE 26625
// exit ;
26623: GO 26679
// for i in tmp do
26625: LD_ADDR_VAR 0 1
26629: PUSH
26630: LD_VAR 0 2
26634: PUSH
26635: FOR_IN
26636: IFFALSE 26677
// for j := 1 to 4 do
26638: LD_ADDR_VAR 0 3
26642: PUSH
26643: DOUBLE
26644: LD_INT 1
26646: DEC
26647: ST_TO_ADDR
26648: LD_INT 4
26650: PUSH
26651: FOR_TO
26652: IFFALSE 26673
// SetSkill ( i , j , 10 ) ;
26654: LD_VAR 0 1
26658: PPUSH
26659: LD_VAR 0 3
26663: PPUSH
26664: LD_INT 10
26666: PPUSH
26667: CALL_OW 237
26671: GO 26651
26673: POP
26674: POP
26675: GO 26635
26677: POP
26678: POP
// end ;
26679: PPOPN 3
26681: END
// every 0 0$1 trigger s30 do var i , tmp ;
26682: LD_EXP 101
26686: IFFALSE 26755
26688: GO 26690
26690: DISABLE
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26695: LD_ADDR_VAR 0 2
26699: PUSH
26700: LD_INT 22
26702: PUSH
26703: LD_OWVAR 2
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 69
26716: ST_TO_ADDR
// if not tmp then
26717: LD_VAR 0 2
26721: NOT
26722: IFFALSE 26726
// exit ;
26724: GO 26755
// for i in tmp do
26726: LD_ADDR_VAR 0 1
26730: PUSH
26731: LD_VAR 0 2
26735: PUSH
26736: FOR_IN
26737: IFFALSE 26753
// SetLives ( i , 300 ) ;
26739: LD_VAR 0 1
26743: PPUSH
26744: LD_INT 300
26746: PPUSH
26747: CALL_OW 234
26751: GO 26736
26753: POP
26754: POP
// end ;
26755: PPOPN 2
26757: END
// every 0 0$1 trigger s60 do var i , tmp ;
26758: LD_EXP 102
26762: IFFALSE 26831
26764: GO 26766
26766: DISABLE
26767: LD_INT 0
26769: PPUSH
26770: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26771: LD_ADDR_VAR 0 2
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_OWVAR 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: ST_TO_ADDR
// if not tmp then
26793: LD_VAR 0 2
26797: NOT
26798: IFFALSE 26802
// exit ;
26800: GO 26831
// for i in tmp do
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: LD_VAR 0 2
26811: PUSH
26812: FOR_IN
26813: IFFALSE 26829
// SetLives ( i , 600 ) ;
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_INT 600
26822: PPUSH
26823: CALL_OW 234
26827: GO 26812
26829: POP
26830: POP
// end ;
26831: PPOPN 2
26833: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26834: LD_INT 0
26836: PPUSH
// case cmd of 301 :
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 301
26844: DOUBLE
26845: EQUAL
26846: IFTRUE 26850
26848: GO 26882
26850: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26851: LD_VAR 0 6
26855: PPUSH
26856: LD_VAR 0 7
26860: PPUSH
26861: LD_VAR 0 8
26865: PPUSH
26866: LD_VAR 0 4
26870: PPUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: CALL 28083 0 5
26880: GO 27003
26882: LD_INT 302
26884: DOUBLE
26885: EQUAL
26886: IFTRUE 26890
26888: GO 26927
26890: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26891: LD_VAR 0 6
26895: PPUSH
26896: LD_VAR 0 7
26900: PPUSH
26901: LD_VAR 0 8
26905: PPUSH
26906: LD_VAR 0 9
26910: PPUSH
26911: LD_VAR 0 4
26915: PPUSH
26916: LD_VAR 0 5
26920: PPUSH
26921: CALL 28174 0 6
26925: GO 27003
26927: LD_INT 303
26929: DOUBLE
26930: EQUAL
26931: IFTRUE 26935
26933: GO 26972
26935: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26936: LD_VAR 0 6
26940: PPUSH
26941: LD_VAR 0 7
26945: PPUSH
26946: LD_VAR 0 8
26950: PPUSH
26951: LD_VAR 0 9
26955: PPUSH
26956: LD_VAR 0 4
26960: PPUSH
26961: LD_VAR 0 5
26965: PPUSH
26966: CALL 27008 0 6
26970: GO 27003
26972: LD_INT 304
26974: DOUBLE
26975: EQUAL
26976: IFTRUE 26980
26978: GO 27002
26980: POP
// hHackTeleport ( unit , x , y ) ; end ;
26981: LD_VAR 0 2
26985: PPUSH
26986: LD_VAR 0 4
26990: PPUSH
26991: LD_VAR 0 5
26995: PPUSH
26996: CALL 28767 0 3
27000: GO 27003
27002: POP
// end ;
27003: LD_VAR 0 12
27007: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27008: LD_INT 0
27010: PPUSH
27011: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27012: LD_VAR 0 1
27016: PUSH
27017: LD_INT 1
27019: LESS
27020: PUSH
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 3
27028: GREATER
27029: OR
27030: PUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: LD_VAR 0 6
27040: PPUSH
27041: CALL_OW 428
27045: OR
27046: IFFALSE 27050
// exit ;
27048: GO 27770
// uc_side := your_side ;
27050: LD_ADDR_OWVAR 20
27054: PUSH
27055: LD_OWVAR 2
27059: ST_TO_ADDR
// uc_nation := nation ;
27060: LD_ADDR_OWVAR 21
27064: PUSH
27065: LD_VAR 0 1
27069: ST_TO_ADDR
// bc_level = 1 ;
27070: LD_ADDR_OWVAR 43
27074: PUSH
27075: LD_INT 1
27077: ST_TO_ADDR
// case btype of 1 :
27078: LD_VAR 0 2
27082: PUSH
27083: LD_INT 1
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27102
27091: POP
// bc_type := b_depot ; 2 :
27092: LD_ADDR_OWVAR 42
27096: PUSH
27097: LD_INT 0
27099: ST_TO_ADDR
27100: GO 27714
27102: LD_INT 2
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27121
27110: POP
// bc_type := b_warehouse ; 3 :
27111: LD_ADDR_OWVAR 42
27115: PUSH
27116: LD_INT 1
27118: ST_TO_ADDR
27119: GO 27714
27121: LD_INT 3
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27140
27129: POP
// bc_type := b_lab ; 4 .. 9 :
27130: LD_ADDR_OWVAR 42
27134: PUSH
27135: LD_INT 6
27137: ST_TO_ADDR
27138: GO 27714
27140: LD_INT 4
27142: DOUBLE
27143: GREATEREQUAL
27144: IFFALSE 27152
27146: LD_INT 9
27148: DOUBLE
27149: LESSEQUAL
27150: IFTRUE 27154
27152: GO 27206
27154: POP
// begin bc_type := b_lab_half ;
27155: LD_ADDR_OWVAR 42
27159: PUSH
27160: LD_INT 7
27162: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27163: LD_ADDR_OWVAR 44
27167: PUSH
27168: LD_INT 10
27170: PUSH
27171: LD_INT 11
27173: PUSH
27174: LD_INT 12
27176: PUSH
27177: LD_INT 15
27179: PUSH
27180: LD_INT 14
27182: PUSH
27183: LD_INT 13
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: PUSH
27194: LD_VAR 0 2
27198: PUSH
27199: LD_INT 3
27201: MINUS
27202: ARRAY
27203: ST_TO_ADDR
// end ; 10 .. 13 :
27204: GO 27714
27206: LD_INT 10
27208: DOUBLE
27209: GREATEREQUAL
27210: IFFALSE 27218
27212: LD_INT 13
27214: DOUBLE
27215: LESSEQUAL
27216: IFTRUE 27220
27218: GO 27297
27220: POP
// begin bc_type := b_lab_full ;
27221: LD_ADDR_OWVAR 42
27225: PUSH
27226: LD_INT 8
27228: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27229: LD_ADDR_OWVAR 44
27233: PUSH
27234: LD_INT 10
27236: PUSH
27237: LD_INT 12
27239: PUSH
27240: LD_INT 14
27242: PUSH
27243: LD_INT 13
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: PUSH
27252: LD_VAR 0 2
27256: PUSH
27257: LD_INT 9
27259: MINUS
27260: ARRAY
27261: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27262: LD_ADDR_OWVAR 45
27266: PUSH
27267: LD_INT 11
27269: PUSH
27270: LD_INT 15
27272: PUSH
27273: LD_INT 12
27275: PUSH
27276: LD_INT 15
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: PUSH
27285: LD_VAR 0 2
27289: PUSH
27290: LD_INT 9
27292: MINUS
27293: ARRAY
27294: ST_TO_ADDR
// end ; 14 :
27295: GO 27714
27297: LD_INT 14
27299: DOUBLE
27300: EQUAL
27301: IFTRUE 27305
27303: GO 27316
27305: POP
// bc_type := b_workshop ; 15 :
27306: LD_ADDR_OWVAR 42
27310: PUSH
27311: LD_INT 2
27313: ST_TO_ADDR
27314: GO 27714
27316: LD_INT 15
27318: DOUBLE
27319: EQUAL
27320: IFTRUE 27324
27322: GO 27335
27324: POP
// bc_type := b_factory ; 16 :
27325: LD_ADDR_OWVAR 42
27329: PUSH
27330: LD_INT 3
27332: ST_TO_ADDR
27333: GO 27714
27335: LD_INT 16
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27354
27343: POP
// bc_type := b_ext_gun ; 17 :
27344: LD_ADDR_OWVAR 42
27348: PUSH
27349: LD_INT 17
27351: ST_TO_ADDR
27352: GO 27714
27354: LD_INT 17
27356: DOUBLE
27357: EQUAL
27358: IFTRUE 27362
27360: GO 27390
27362: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27363: LD_ADDR_OWVAR 42
27367: PUSH
27368: LD_INT 19
27370: PUSH
27371: LD_INT 23
27373: PUSH
27374: LD_INT 19
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: PUSH
27382: LD_VAR 0 1
27386: ARRAY
27387: ST_TO_ADDR
27388: GO 27714
27390: LD_INT 18
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27398
27396: GO 27409
27398: POP
// bc_type := b_ext_radar ; 19 :
27399: LD_ADDR_OWVAR 42
27403: PUSH
27404: LD_INT 20
27406: ST_TO_ADDR
27407: GO 27714
27409: LD_INT 19
27411: DOUBLE
27412: EQUAL
27413: IFTRUE 27417
27415: GO 27428
27417: POP
// bc_type := b_ext_radio ; 20 :
27418: LD_ADDR_OWVAR 42
27422: PUSH
27423: LD_INT 22
27425: ST_TO_ADDR
27426: GO 27714
27428: LD_INT 20
27430: DOUBLE
27431: EQUAL
27432: IFTRUE 27436
27434: GO 27447
27436: POP
// bc_type := b_ext_siberium ; 21 :
27437: LD_ADDR_OWVAR 42
27441: PUSH
27442: LD_INT 21
27444: ST_TO_ADDR
27445: GO 27714
27447: LD_INT 21
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27466
27455: POP
// bc_type := b_ext_computer ; 22 :
27456: LD_ADDR_OWVAR 42
27460: PUSH
27461: LD_INT 24
27463: ST_TO_ADDR
27464: GO 27714
27466: LD_INT 22
27468: DOUBLE
27469: EQUAL
27470: IFTRUE 27474
27472: GO 27485
27474: POP
// bc_type := b_ext_track ; 23 :
27475: LD_ADDR_OWVAR 42
27479: PUSH
27480: LD_INT 16
27482: ST_TO_ADDR
27483: GO 27714
27485: LD_INT 23
27487: DOUBLE
27488: EQUAL
27489: IFTRUE 27493
27491: GO 27504
27493: POP
// bc_type := b_ext_laser ; 24 :
27494: LD_ADDR_OWVAR 42
27498: PUSH
27499: LD_INT 25
27501: ST_TO_ADDR
27502: GO 27714
27504: LD_INT 24
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27523
27512: POP
// bc_type := b_control_tower ; 25 :
27513: LD_ADDR_OWVAR 42
27517: PUSH
27518: LD_INT 36
27520: ST_TO_ADDR
27521: GO 27714
27523: LD_INT 25
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27542
27531: POP
// bc_type := b_breastwork ; 26 :
27532: LD_ADDR_OWVAR 42
27536: PUSH
27537: LD_INT 31
27539: ST_TO_ADDR
27540: GO 27714
27542: LD_INT 26
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27561
27550: POP
// bc_type := b_bunker ; 27 :
27551: LD_ADDR_OWVAR 42
27555: PUSH
27556: LD_INT 32
27558: ST_TO_ADDR
27559: GO 27714
27561: LD_INT 27
27563: DOUBLE
27564: EQUAL
27565: IFTRUE 27569
27567: GO 27580
27569: POP
// bc_type := b_turret ; 28 :
27570: LD_ADDR_OWVAR 42
27574: PUSH
27575: LD_INT 33
27577: ST_TO_ADDR
27578: GO 27714
27580: LD_INT 28
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27588
27586: GO 27599
27588: POP
// bc_type := b_armoury ; 29 :
27589: LD_ADDR_OWVAR 42
27593: PUSH
27594: LD_INT 4
27596: ST_TO_ADDR
27597: GO 27714
27599: LD_INT 29
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27618
27607: POP
// bc_type := b_barracks ; 30 :
27608: LD_ADDR_OWVAR 42
27612: PUSH
27613: LD_INT 5
27615: ST_TO_ADDR
27616: GO 27714
27618: LD_INT 30
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27637
27626: POP
// bc_type := b_solar_power ; 31 :
27627: LD_ADDR_OWVAR 42
27631: PUSH
27632: LD_INT 27
27634: ST_TO_ADDR
27635: GO 27714
27637: LD_INT 31
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27645
27643: GO 27656
27645: POP
// bc_type := b_oil_power ; 32 :
27646: LD_ADDR_OWVAR 42
27650: PUSH
27651: LD_INT 26
27653: ST_TO_ADDR
27654: GO 27714
27656: LD_INT 32
27658: DOUBLE
27659: EQUAL
27660: IFTRUE 27664
27662: GO 27675
27664: POP
// bc_type := b_siberite_power ; 33 :
27665: LD_ADDR_OWVAR 42
27669: PUSH
27670: LD_INT 28
27672: ST_TO_ADDR
27673: GO 27714
27675: LD_INT 33
27677: DOUBLE
27678: EQUAL
27679: IFTRUE 27683
27681: GO 27694
27683: POP
// bc_type := b_oil_mine ; 34 :
27684: LD_ADDR_OWVAR 42
27688: PUSH
27689: LD_INT 29
27691: ST_TO_ADDR
27692: GO 27714
27694: LD_INT 34
27696: DOUBLE
27697: EQUAL
27698: IFTRUE 27702
27700: GO 27713
27702: POP
// bc_type := b_siberite_mine ; end ;
27703: LD_ADDR_OWVAR 42
27707: PUSH
27708: LD_INT 30
27710: ST_TO_ADDR
27711: GO 27714
27713: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27714: LD_ADDR_VAR 0 8
27718: PUSH
27719: LD_VAR 0 5
27723: PPUSH
27724: LD_VAR 0 6
27728: PPUSH
27729: LD_VAR 0 3
27733: PPUSH
27734: CALL_OW 47
27738: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27739: LD_OWVAR 42
27743: PUSH
27744: LD_INT 32
27746: PUSH
27747: LD_INT 33
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: IN
27754: IFFALSE 27770
// PlaceWeaponTurret ( b , weapon ) ;
27756: LD_VAR 0 8
27760: PPUSH
27761: LD_VAR 0 4
27765: PPUSH
27766: CALL_OW 431
// end ;
27770: LD_VAR 0 7
27774: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27775: LD_INT 0
27777: PPUSH
27778: PPUSH
27779: PPUSH
27780: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27781: LD_ADDR_VAR 0 4
27785: PUSH
27786: LD_INT 22
27788: PUSH
27789: LD_OWVAR 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 30
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: ST_TO_ADDR
// if not tmp then
27835: LD_VAR 0 4
27839: NOT
27840: IFFALSE 27844
// exit ;
27842: GO 27903
// for i in tmp do
27844: LD_ADDR_VAR 0 2
27848: PUSH
27849: LD_VAR 0 4
27853: PUSH
27854: FOR_IN
27855: IFFALSE 27901
// for j = 1 to 3 do
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: DOUBLE
27863: LD_INT 1
27865: DEC
27866: ST_TO_ADDR
27867: LD_INT 3
27869: PUSH
27870: FOR_TO
27871: IFFALSE 27897
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27873: LD_VAR 0 2
27877: PPUSH
27878: CALL_OW 274
27882: PPUSH
27883: LD_VAR 0 3
27887: PPUSH
27888: LD_INT 99999
27890: PPUSH
27891: CALL_OW 277
27895: GO 27870
27897: POP
27898: POP
27899: GO 27854
27901: POP
27902: POP
// end ;
27903: LD_VAR 0 1
27907: RET
// export function hHackSetLevel10 ; var i , j ; begin
27908: LD_INT 0
27910: PPUSH
27911: PPUSH
27912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27913: LD_ADDR_VAR 0 2
27917: PUSH
27918: LD_INT 21
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: PUSH
27933: FOR_IN
27934: IFFALSE 27986
// if IsSelected ( i ) then
27936: LD_VAR 0 2
27940: PPUSH
27941: CALL_OW 306
27945: IFFALSE 27984
// begin for j := 1 to 4 do
27947: LD_ADDR_VAR 0 3
27951: PUSH
27952: DOUBLE
27953: LD_INT 1
27955: DEC
27956: ST_TO_ADDR
27957: LD_INT 4
27959: PUSH
27960: FOR_TO
27961: IFFALSE 27982
// SetSkill ( i , j , 10 ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: LD_VAR 0 3
27972: PPUSH
27973: LD_INT 10
27975: PPUSH
27976: CALL_OW 237
27980: GO 27960
27982: POP
27983: POP
// end ;
27984: GO 27933
27986: POP
27987: POP
// end ;
27988: LD_VAR 0 1
27992: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27993: LD_INT 0
27995: PPUSH
27996: PPUSH
27997: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27998: LD_ADDR_VAR 0 2
28002: PUSH
28003: LD_INT 22
28005: PUSH
28006: LD_OWVAR 2
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 21
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PPUSH
28029: CALL_OW 69
28033: PUSH
28034: FOR_IN
28035: IFFALSE 28076
// begin for j := 1 to 4 do
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: DOUBLE
28043: LD_INT 1
28045: DEC
28046: ST_TO_ADDR
28047: LD_INT 4
28049: PUSH
28050: FOR_TO
28051: IFFALSE 28072
// SetSkill ( i , j , 10 ) ;
28053: LD_VAR 0 2
28057: PPUSH
28058: LD_VAR 0 3
28062: PPUSH
28063: LD_INT 10
28065: PPUSH
28066: CALL_OW 237
28070: GO 28050
28072: POP
28073: POP
// end ;
28074: GO 28034
28076: POP
28077: POP
// end ;
28078: LD_VAR 0 1
28082: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28083: LD_INT 0
28085: PPUSH
// uc_side := your_side ;
28086: LD_ADDR_OWVAR 20
28090: PUSH
28091: LD_OWVAR 2
28095: ST_TO_ADDR
// uc_nation := nation ;
28096: LD_ADDR_OWVAR 21
28100: PUSH
28101: LD_VAR 0 1
28105: ST_TO_ADDR
// InitHc ;
28106: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28110: LD_INT 0
28112: PPUSH
28113: LD_VAR 0 2
28117: PPUSH
28118: LD_VAR 0 3
28122: PPUSH
28123: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28127: LD_VAR 0 4
28131: PPUSH
28132: LD_VAR 0 5
28136: PPUSH
28137: CALL_OW 428
28141: PUSH
28142: LD_INT 0
28144: EQUAL
28145: IFFALSE 28169
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28147: CALL_OW 44
28151: PPUSH
28152: LD_VAR 0 4
28156: PPUSH
28157: LD_VAR 0 5
28161: PPUSH
28162: LD_INT 1
28164: PPUSH
28165: CALL_OW 48
// end ;
28169: LD_VAR 0 6
28173: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28174: LD_INT 0
28176: PPUSH
28177: PPUSH
// uc_side := your_side ;
28178: LD_ADDR_OWVAR 20
28182: PUSH
28183: LD_OWVAR 2
28187: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28188: LD_VAR 0 1
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 4
28204: PUSH
28205: LD_INT 5
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: IN
28215: IFFALSE 28227
// uc_nation := nation_american else
28217: LD_ADDR_OWVAR 21
28221: PUSH
28222: LD_INT 1
28224: ST_TO_ADDR
28225: GO 28270
// if chassis in [ 11 , 12 , 13 , 14 ] then
28227: LD_VAR 0 1
28231: PUSH
28232: LD_INT 11
28234: PUSH
28235: LD_INT 12
28237: PUSH
28238: LD_INT 13
28240: PUSH
28241: LD_INT 14
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: IN
28250: IFFALSE 28262
// uc_nation := nation_arabian else
28252: LD_ADDR_OWVAR 21
28256: PUSH
28257: LD_INT 2
28259: ST_TO_ADDR
28260: GO 28270
// uc_nation := nation_russian ;
28262: LD_ADDR_OWVAR 21
28266: PUSH
28267: LD_INT 3
28269: ST_TO_ADDR
// vc_chassis := chassis ;
28270: LD_ADDR_OWVAR 37
28274: PUSH
28275: LD_VAR 0 1
28279: ST_TO_ADDR
// vc_engine := engine ;
28280: LD_ADDR_OWVAR 39
28284: PUSH
28285: LD_VAR 0 2
28289: ST_TO_ADDR
// vc_control := control ;
28290: LD_ADDR_OWVAR 38
28294: PUSH
28295: LD_VAR 0 3
28299: ST_TO_ADDR
// vc_weapon := weapon ;
28300: LD_ADDR_OWVAR 40
28304: PUSH
28305: LD_VAR 0 4
28309: ST_TO_ADDR
// un := CreateVehicle ;
28310: LD_ADDR_VAR 0 8
28314: PUSH
28315: CALL_OW 45
28319: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28320: LD_VAR 0 8
28324: PPUSH
28325: LD_INT 0
28327: PPUSH
28328: LD_INT 5
28330: PPUSH
28331: CALL_OW 12
28335: PPUSH
28336: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28340: LD_VAR 0 8
28344: PPUSH
28345: LD_VAR 0 5
28349: PPUSH
28350: LD_VAR 0 6
28354: PPUSH
28355: LD_INT 1
28357: PPUSH
28358: CALL_OW 48
// end ;
28362: LD_VAR 0 7
28366: RET
// export hInvincible ; every 1 do
28367: GO 28369
28369: DISABLE
// hInvincible := [ ] ;
28370: LD_ADDR_EXP 103
28374: PUSH
28375: EMPTY
28376: ST_TO_ADDR
28377: END
// every 10 do var i ;
28378: GO 28380
28380: DISABLE
28381: LD_INT 0
28383: PPUSH
// begin enable ;
28384: ENABLE
// if not hInvincible then
28385: LD_EXP 103
28389: NOT
28390: IFFALSE 28394
// exit ;
28392: GO 28438
// for i in hInvincible do
28394: LD_ADDR_VAR 0 1
28398: PUSH
28399: LD_EXP 103
28403: PUSH
28404: FOR_IN
28405: IFFALSE 28436
// if GetLives ( i ) < 1000 then
28407: LD_VAR 0 1
28411: PPUSH
28412: CALL_OW 256
28416: PUSH
28417: LD_INT 1000
28419: LESS
28420: IFFALSE 28434
// SetLives ( i , 1000 ) ;
28422: LD_VAR 0 1
28426: PPUSH
28427: LD_INT 1000
28429: PPUSH
28430: CALL_OW 234
28434: GO 28404
28436: POP
28437: POP
// end ;
28438: PPOPN 1
28440: END
// export function hHackInvincible ; var i ; begin
28441: LD_INT 0
28443: PPUSH
28444: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: LD_INT 21
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 21
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PPUSH
28478: CALL_OW 69
28482: PUSH
28483: FOR_IN
28484: IFFALSE 28545
// if IsSelected ( i ) then
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 306
28495: IFFALSE 28543
// begin if i in hInvincible then
28497: LD_VAR 0 2
28501: PUSH
28502: LD_EXP 103
28506: IN
28507: IFFALSE 28527
// hInvincible := hInvincible diff i else
28509: LD_ADDR_EXP 103
28513: PUSH
28514: LD_EXP 103
28518: PUSH
28519: LD_VAR 0 2
28523: DIFF
28524: ST_TO_ADDR
28525: GO 28543
// hInvincible := hInvincible union i ;
28527: LD_ADDR_EXP 103
28531: PUSH
28532: LD_EXP 103
28536: PUSH
28537: LD_VAR 0 2
28541: UNION
28542: ST_TO_ADDR
// end ;
28543: GO 28483
28545: POP
28546: POP
// end ;
28547: LD_VAR 0 1
28551: RET
// export function hHackInvisible ; var i , j ; begin
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
28556: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28557: LD_ADDR_VAR 0 2
28561: PUSH
28562: LD_INT 21
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PPUSH
28572: CALL_OW 69
28576: PUSH
28577: FOR_IN
28578: IFFALSE 28602
// if IsSelected ( i ) then
28580: LD_VAR 0 2
28584: PPUSH
28585: CALL_OW 306
28589: IFFALSE 28600
// ComForceInvisible ( i ) ;
28591: LD_VAR 0 2
28595: PPUSH
28596: CALL_OW 496
28600: GO 28577
28602: POP
28603: POP
// end ;
28604: LD_VAR 0 1
28608: RET
// export function hHackChangeYourSide ; begin
28609: LD_INT 0
28611: PPUSH
// if your_side = 8 then
28612: LD_OWVAR 2
28616: PUSH
28617: LD_INT 8
28619: EQUAL
28620: IFFALSE 28632
// your_side := 0 else
28622: LD_ADDR_OWVAR 2
28626: PUSH
28627: LD_INT 0
28629: ST_TO_ADDR
28630: GO 28646
// your_side := your_side + 1 ;
28632: LD_ADDR_OWVAR 2
28636: PUSH
28637: LD_OWVAR 2
28641: PUSH
28642: LD_INT 1
28644: PLUS
28645: ST_TO_ADDR
// end ;
28646: LD_VAR 0 1
28650: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28651: LD_INT 0
28653: PPUSH
28654: PPUSH
28655: PPUSH
// for i in all_units do
28656: LD_ADDR_VAR 0 2
28660: PUSH
28661: LD_OWVAR 3
28665: PUSH
28666: FOR_IN
28667: IFFALSE 28745
// if IsSelected ( i ) then
28669: LD_VAR 0 2
28673: PPUSH
28674: CALL_OW 306
28678: IFFALSE 28743
// begin j := GetSide ( i ) ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_VAR 0 2
28689: PPUSH
28690: CALL_OW 255
28694: ST_TO_ADDR
// if j = 8 then
28695: LD_VAR 0 3
28699: PUSH
28700: LD_INT 8
28702: EQUAL
28703: IFFALSE 28715
// j := 0 else
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_INT 0
28712: ST_TO_ADDR
28713: GO 28729
// j := j + 1 ;
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_VAR 0 3
28724: PUSH
28725: LD_INT 1
28727: PLUS
28728: ST_TO_ADDR
// SetSide ( i , j ) ;
28729: LD_VAR 0 2
28733: PPUSH
28734: LD_VAR 0 3
28738: PPUSH
28739: CALL_OW 235
// end ;
28743: GO 28666
28745: POP
28746: POP
// end ;
28747: LD_VAR 0 1
28751: RET
// export function hHackFog ; begin
28752: LD_INT 0
28754: PPUSH
// FogOff ( true ) ;
28755: LD_INT 1
28757: PPUSH
28758: CALL_OW 344
// end ;
28762: LD_VAR 0 1
28766: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28767: LD_INT 0
28769: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28770: LD_VAR 0 1
28774: PPUSH
28775: LD_VAR 0 2
28779: PPUSH
28780: LD_VAR 0 3
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: LD_INT 1
28790: PPUSH
28791: CALL_OW 483
// CenterOnXY ( x , y ) ;
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_VAR 0 3
28804: PPUSH
28805: CALL_OW 84
// end ;
28809: LD_VAR 0 4
28813: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28814: LD_INT 0
28816: PPUSH
28817: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28818: LD_VAR 0 1
28822: NOT
28823: PUSH
28824: LD_VAR 0 2
28828: PPUSH
28829: LD_VAR 0 3
28833: PPUSH
28834: CALL_OW 488
28838: NOT
28839: OR
28840: PUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 266
28850: PUSH
28851: LD_INT 3
28853: NONEQUAL
28854: PUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 247
28864: PUSH
28865: LD_INT 1
28867: EQUAL
28868: NOT
28869: AND
28870: OR
28871: IFFALSE 28875
// exit ;
28873: GO 29024
// if GetType ( factory ) = unit_human then
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 247
28884: PUSH
28885: LD_INT 1
28887: EQUAL
28888: IFFALSE 28905
// factory := IsInUnit ( factory ) ;
28890: LD_ADDR_VAR 0 1
28894: PUSH
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL_OW 310
28904: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 266
28914: PUSH
28915: LD_INT 3
28917: NONEQUAL
28918: IFFALSE 28922
// exit ;
28920: GO 29024
// if HexInfo ( x , y ) = factory then
28922: LD_VAR 0 2
28926: PPUSH
28927: LD_VAR 0 3
28931: PPUSH
28932: CALL_OW 428
28936: PUSH
28937: LD_VAR 0 1
28941: EQUAL
28942: IFFALSE 28969
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28944: LD_ADDR_EXP 104
28948: PUSH
28949: LD_EXP 104
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: LD_INT 0
28961: PPUSH
28962: CALL_OW 1
28966: ST_TO_ADDR
28967: GO 29020
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28969: LD_ADDR_EXP 104
28973: PUSH
28974: LD_EXP 104
28978: PPUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 255
28993: PUSH
28994: LD_VAR 0 1
28998: PUSH
28999: LD_VAR 0 2
29003: PUSH
29004: LD_VAR 0 3
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 1
29019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29020: CALL 29029 0 0
// end ;
29024: LD_VAR 0 4
29028: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29029: LD_INT 0
29031: PPUSH
29032: PPUSH
29033: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29034: LD_STRING resetFactoryWaypoint();
29036: PPUSH
29037: CALL_OW 559
// if factoryWaypoints then
29041: LD_EXP 104
29045: IFFALSE 29171
// begin list := PrepareArray ( factoryWaypoints ) ;
29047: LD_ADDR_VAR 0 3
29051: PUSH
29052: LD_EXP 104
29056: PPUSH
29057: CALL 71259 0 1
29061: ST_TO_ADDR
// for i := 1 to list do
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_VAR 0 3
29076: PUSH
29077: FOR_TO
29078: IFFALSE 29169
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29080: LD_STRING setFactoryWaypointXY(
29082: PUSH
29083: LD_VAR 0 3
29087: PUSH
29088: LD_VAR 0 2
29092: ARRAY
29093: PUSH
29094: LD_INT 1
29096: ARRAY
29097: STR
29098: PUSH
29099: LD_STRING ,
29101: STR
29102: PUSH
29103: LD_VAR 0 3
29107: PUSH
29108: LD_VAR 0 2
29112: ARRAY
29113: PUSH
29114: LD_INT 2
29116: ARRAY
29117: STR
29118: PUSH
29119: LD_STRING ,
29121: STR
29122: PUSH
29123: LD_VAR 0 3
29127: PUSH
29128: LD_VAR 0 2
29132: ARRAY
29133: PUSH
29134: LD_INT 3
29136: ARRAY
29137: STR
29138: PUSH
29139: LD_STRING ,
29141: STR
29142: PUSH
29143: LD_VAR 0 3
29147: PUSH
29148: LD_VAR 0 2
29152: ARRAY
29153: PUSH
29154: LD_INT 4
29156: ARRAY
29157: STR
29158: PUSH
29159: LD_STRING )
29161: STR
29162: PPUSH
29163: CALL_OW 559
29167: GO 29077
29169: POP
29170: POP
// end ; end ;
29171: LD_VAR 0 1
29175: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29176: LD_INT 0
29178: PPUSH
// if HexInfo ( x , y ) = warehouse then
29179: LD_VAR 0 2
29183: PPUSH
29184: LD_VAR 0 3
29188: PPUSH
29189: CALL_OW 428
29193: PUSH
29194: LD_VAR 0 1
29198: EQUAL
29199: IFFALSE 29226
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29201: LD_ADDR_EXP 105
29205: PUSH
29206: LD_EXP 105
29210: PPUSH
29211: LD_VAR 0 1
29215: PPUSH
29216: LD_INT 0
29218: PPUSH
29219: CALL_OW 1
29223: ST_TO_ADDR
29224: GO 29277
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29226: LD_ADDR_EXP 105
29230: PUSH
29231: LD_EXP 105
29235: PPUSH
29236: LD_VAR 0 1
29240: PPUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 255
29250: PUSH
29251: LD_VAR 0 1
29255: PUSH
29256: LD_VAR 0 2
29260: PUSH
29261: LD_VAR 0 3
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 1
29276: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29277: CALL 29286 0 0
// end ;
29281: LD_VAR 0 4
29285: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29286: LD_INT 0
29288: PPUSH
29289: PPUSH
29290: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29291: LD_STRING resetWarehouseGatheringPoints();
29293: PPUSH
29294: CALL_OW 559
// if warehouseGatheringPoints then
29298: LD_EXP 105
29302: IFFALSE 29428
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_EXP 105
29313: PPUSH
29314: CALL 71259 0 1
29318: ST_TO_ADDR
// for i := 1 to list do
29319: LD_ADDR_VAR 0 2
29323: PUSH
29324: DOUBLE
29325: LD_INT 1
29327: DEC
29328: ST_TO_ADDR
29329: LD_VAR 0 3
29333: PUSH
29334: FOR_TO
29335: IFFALSE 29426
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29337: LD_STRING setWarehouseGatheringPointXY(
29339: PUSH
29340: LD_VAR 0 3
29344: PUSH
29345: LD_VAR 0 2
29349: ARRAY
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: STR
29355: PUSH
29356: LD_STRING ,
29358: STR
29359: PUSH
29360: LD_VAR 0 3
29364: PUSH
29365: LD_VAR 0 2
29369: ARRAY
29370: PUSH
29371: LD_INT 2
29373: ARRAY
29374: STR
29375: PUSH
29376: LD_STRING ,
29378: STR
29379: PUSH
29380: LD_VAR 0 3
29384: PUSH
29385: LD_VAR 0 2
29389: ARRAY
29390: PUSH
29391: LD_INT 3
29393: ARRAY
29394: STR
29395: PUSH
29396: LD_STRING ,
29398: STR
29399: PUSH
29400: LD_VAR 0 3
29404: PUSH
29405: LD_VAR 0 2
29409: ARRAY
29410: PUSH
29411: LD_INT 4
29413: ARRAY
29414: STR
29415: PUSH
29416: LD_STRING )
29418: STR
29419: PPUSH
29420: CALL_OW 559
29424: GO 29334
29426: POP
29427: POP
// end ; end ;
29428: LD_VAR 0 1
29432: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29433: LD_EXP 105
29437: IFFALSE 30122
29439: GO 29441
29441: DISABLE
29442: LD_INT 0
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
// begin enable ;
29453: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29454: LD_ADDR_VAR 0 3
29458: PUSH
29459: LD_EXP 105
29463: PPUSH
29464: CALL 71259 0 1
29468: ST_TO_ADDR
// if not list then
29469: LD_VAR 0 3
29473: NOT
29474: IFFALSE 29478
// exit ;
29476: GO 30122
// for i := 1 to list do
29478: LD_ADDR_VAR 0 1
29482: PUSH
29483: DOUBLE
29484: LD_INT 1
29486: DEC
29487: ST_TO_ADDR
29488: LD_VAR 0 3
29492: PUSH
29493: FOR_TO
29494: IFFALSE 30120
// begin depot := list [ i ] [ 2 ] ;
29496: LD_ADDR_VAR 0 8
29500: PUSH
29501: LD_VAR 0 3
29505: PUSH
29506: LD_VAR 0 1
29510: ARRAY
29511: PUSH
29512: LD_INT 2
29514: ARRAY
29515: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29516: LD_ADDR_VAR 0 5
29520: PUSH
29521: LD_VAR 0 3
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PUSH
29532: LD_INT 1
29534: ARRAY
29535: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29536: LD_VAR 0 8
29540: PPUSH
29541: CALL_OW 301
29545: PUSH
29546: LD_VAR 0 5
29550: PUSH
29551: LD_VAR 0 8
29555: PPUSH
29556: CALL_OW 255
29560: NONEQUAL
29561: OR
29562: IFFALSE 29591
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29564: LD_ADDR_EXP 105
29568: PUSH
29569: LD_EXP 105
29573: PPUSH
29574: LD_VAR 0 8
29578: PPUSH
29579: LD_INT 0
29581: PPUSH
29582: CALL_OW 1
29586: ST_TO_ADDR
// exit ;
29587: POP
29588: POP
29589: GO 30122
// end ; x := list [ i ] [ 3 ] ;
29591: LD_ADDR_VAR 0 6
29595: PUSH
29596: LD_VAR 0 3
29600: PUSH
29601: LD_VAR 0 1
29605: ARRAY
29606: PUSH
29607: LD_INT 3
29609: ARRAY
29610: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29611: LD_ADDR_VAR 0 7
29615: PUSH
29616: LD_VAR 0 3
29620: PUSH
29621: LD_VAR 0 1
29625: ARRAY
29626: PUSH
29627: LD_INT 4
29629: ARRAY
29630: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29631: LD_ADDR_VAR 0 9
29635: PUSH
29636: LD_VAR 0 6
29640: PPUSH
29641: LD_VAR 0 7
29645: PPUSH
29646: LD_INT 16
29648: PPUSH
29649: CALL 69847 0 3
29653: ST_TO_ADDR
// if not cratesNearbyPoint then
29654: LD_VAR 0 9
29658: NOT
29659: IFFALSE 29665
// exit ;
29661: POP
29662: POP
29663: GO 30122
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29665: LD_ADDR_VAR 0 4
29669: PUSH
29670: LD_INT 22
29672: PUSH
29673: LD_VAR 0 5
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: PUSH
29685: LD_INT 60
29687: PUSH
29688: EMPTY
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 91
29697: PUSH
29698: LD_VAR 0 8
29702: PUSH
29703: LD_INT 6
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 25
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 25
29726: PUSH
29727: LD_INT 16
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: PPUSH
29745: CALL_OW 69
29749: PUSH
29750: LD_VAR 0 8
29754: PPUSH
29755: CALL_OW 313
29759: PPUSH
29760: LD_INT 3
29762: PUSH
29763: LD_INT 60
29765: PUSH
29766: EMPTY
29767: LIST
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: LD_INT 25
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 25
29788: PUSH
29789: LD_INT 16
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 72
29809: UNION
29810: ST_TO_ADDR
// if tmp then
29811: LD_VAR 0 4
29815: IFFALSE 29895
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29817: LD_ADDR_VAR 0 4
29821: PUSH
29822: LD_VAR 0 4
29826: PPUSH
29827: LD_INT 3
29829: PPUSH
29830: CALL 67816 0 2
29834: ST_TO_ADDR
// for j in tmp do
29835: LD_ADDR_VAR 0 2
29839: PUSH
29840: LD_VAR 0 4
29844: PUSH
29845: FOR_IN
29846: IFFALSE 29889
// begin if IsInUnit ( j ) then
29848: LD_VAR 0 2
29852: PPUSH
29853: CALL_OW 310
29857: IFFALSE 29868
// ComExit ( j ) ;
29859: LD_VAR 0 2
29863: PPUSH
29864: CALL 67899 0 1
// AddComCollect ( j , x , y ) ;
29868: LD_VAR 0 2
29872: PPUSH
29873: LD_VAR 0 6
29877: PPUSH
29878: LD_VAR 0 7
29882: PPUSH
29883: CALL_OW 177
// end ;
29887: GO 29845
29889: POP
29890: POP
// exit ;
29891: POP
29892: POP
29893: GO 30122
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29895: LD_ADDR_VAR 0 4
29899: PUSH
29900: LD_INT 22
29902: PUSH
29903: LD_VAR 0 5
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 91
29914: PUSH
29915: LD_VAR 0 8
29919: PUSH
29920: LD_INT 8
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 34
29933: PUSH
29934: LD_INT 12
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 34
29943: PUSH
29944: LD_INT 51
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 34
29953: PUSH
29954: LD_INT 32
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 34
29963: PUSH
29964: LD_INT 89
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: PPUSH
29983: CALL_OW 69
29987: ST_TO_ADDR
// if tmp then
29988: LD_VAR 0 4
29992: IFFALSE 30118
// begin for j in tmp do
29994: LD_ADDR_VAR 0 2
29998: PUSH
29999: LD_VAR 0 4
30003: PUSH
30004: FOR_IN
30005: IFFALSE 30116
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30007: LD_VAR 0 2
30011: PPUSH
30012: CALL_OW 262
30016: PUSH
30017: LD_INT 3
30019: EQUAL
30020: PUSH
30021: LD_VAR 0 2
30025: PPUSH
30026: CALL_OW 261
30030: PUSH
30031: LD_INT 20
30033: GREATER
30034: OR
30035: PUSH
30036: LD_VAR 0 2
30040: PPUSH
30041: CALL_OW 314
30045: NOT
30046: AND
30047: PUSH
30048: LD_VAR 0 2
30052: PPUSH
30053: CALL_OW 263
30057: PUSH
30058: LD_INT 1
30060: NONEQUAL
30061: PUSH
30062: LD_VAR 0 2
30066: PPUSH
30067: CALL_OW 311
30071: OR
30072: AND
30073: IFFALSE 30114
// begin ComCollect ( j , x , y ) ;
30075: LD_VAR 0 2
30079: PPUSH
30080: LD_VAR 0 6
30084: PPUSH
30085: LD_VAR 0 7
30089: PPUSH
30090: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30094: LD_VAR 0 2
30098: PPUSH
30099: LD_VAR 0 8
30103: PPUSH
30104: CALL_OW 172
// exit ;
30108: POP
30109: POP
30110: POP
30111: POP
30112: GO 30122
// end ;
30114: GO 30004
30116: POP
30117: POP
// end ; end ;
30118: GO 29493
30120: POP
30121: POP
// end ; end_of_file end_of_file
30122: PPOPN 9
30124: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
// if exist_mode then
30129: LD_VAR 0 2
30133: IFFALSE 30158
// unit := CreateCharacter ( prefix & ident ) else
30135: LD_ADDR_VAR 0 5
30139: PUSH
30140: LD_VAR 0 3
30144: PUSH
30145: LD_VAR 0 1
30149: STR
30150: PPUSH
30151: CALL_OW 34
30155: ST_TO_ADDR
30156: GO 30173
// unit := NewCharacter ( ident ) ;
30158: LD_ADDR_VAR 0 5
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 25
30172: ST_TO_ADDR
// result := unit ;
30173: LD_ADDR_VAR 0 4
30177: PUSH
30178: LD_VAR 0 5
30182: ST_TO_ADDR
// end ;
30183: LD_VAR 0 4
30187: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
// if not side or not nation then
30192: LD_VAR 0 1
30196: NOT
30197: PUSH
30198: LD_VAR 0 2
30202: NOT
30203: OR
30204: IFFALSE 30208
// exit ;
30206: GO 30976
// case nation of nation_american :
30208: LD_VAR 0 2
30212: PUSH
30213: LD_INT 1
30215: DOUBLE
30216: EQUAL
30217: IFTRUE 30221
30219: GO 30435
30221: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30222: LD_ADDR_VAR 0 4
30226: PUSH
30227: LD_INT 35
30229: PUSH
30230: LD_INT 45
30232: PUSH
30233: LD_INT 46
30235: PUSH
30236: LD_INT 47
30238: PUSH
30239: LD_INT 82
30241: PUSH
30242: LD_INT 83
30244: PUSH
30245: LD_INT 84
30247: PUSH
30248: LD_INT 85
30250: PUSH
30251: LD_INT 86
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 6
30262: PUSH
30263: LD_INT 15
30265: PUSH
30266: LD_INT 16
30268: PUSH
30269: LD_INT 7
30271: PUSH
30272: LD_INT 12
30274: PUSH
30275: LD_INT 13
30277: PUSH
30278: LD_INT 10
30280: PUSH
30281: LD_INT 14
30283: PUSH
30284: LD_INT 20
30286: PUSH
30287: LD_INT 21
30289: PUSH
30290: LD_INT 22
30292: PUSH
30293: LD_INT 25
30295: PUSH
30296: LD_INT 32
30298: PUSH
30299: LD_INT 27
30301: PUSH
30302: LD_INT 36
30304: PUSH
30305: LD_INT 69
30307: PUSH
30308: LD_INT 39
30310: PUSH
30311: LD_INT 34
30313: PUSH
30314: LD_INT 40
30316: PUSH
30317: LD_INT 48
30319: PUSH
30320: LD_INT 49
30322: PUSH
30323: LD_INT 50
30325: PUSH
30326: LD_INT 51
30328: PUSH
30329: LD_INT 52
30331: PUSH
30332: LD_INT 53
30334: PUSH
30335: LD_INT 54
30337: PUSH
30338: LD_INT 55
30340: PUSH
30341: LD_INT 56
30343: PUSH
30344: LD_INT 57
30346: PUSH
30347: LD_INT 58
30349: PUSH
30350: LD_INT 59
30352: PUSH
30353: LD_INT 60
30355: PUSH
30356: LD_INT 61
30358: PUSH
30359: LD_INT 62
30361: PUSH
30362: LD_INT 80
30364: PUSH
30365: LD_INT 82
30367: PUSH
30368: LD_INT 83
30370: PUSH
30371: LD_INT 84
30373: PUSH
30374: LD_INT 85
30376: PUSH
30377: LD_INT 86
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
30433: GO 30900
30435: LD_INT 2
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 30669
30443: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30444: LD_ADDR_VAR 0 4
30448: PUSH
30449: LD_INT 35
30451: PUSH
30452: LD_INT 45
30454: PUSH
30455: LD_INT 46
30457: PUSH
30458: LD_INT 47
30460: PUSH
30461: LD_INT 82
30463: PUSH
30464: LD_INT 83
30466: PUSH
30467: LD_INT 84
30469: PUSH
30470: LD_INT 85
30472: PUSH
30473: LD_INT 87
30475: PUSH
30476: LD_INT 70
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 11
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 4
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 6
30496: PUSH
30497: LD_INT 15
30499: PUSH
30500: LD_INT 18
30502: PUSH
30503: LD_INT 7
30505: PUSH
30506: LD_INT 17
30508: PUSH
30509: LD_INT 8
30511: PUSH
30512: LD_INT 20
30514: PUSH
30515: LD_INT 21
30517: PUSH
30518: LD_INT 22
30520: PUSH
30521: LD_INT 72
30523: PUSH
30524: LD_INT 26
30526: PUSH
30527: LD_INT 69
30529: PUSH
30530: LD_INT 39
30532: PUSH
30533: LD_INT 40
30535: PUSH
30536: LD_INT 41
30538: PUSH
30539: LD_INT 42
30541: PUSH
30542: LD_INT 43
30544: PUSH
30545: LD_INT 48
30547: PUSH
30548: LD_INT 49
30550: PUSH
30551: LD_INT 50
30553: PUSH
30554: LD_INT 51
30556: PUSH
30557: LD_INT 52
30559: PUSH
30560: LD_INT 53
30562: PUSH
30563: LD_INT 54
30565: PUSH
30566: LD_INT 55
30568: PUSH
30569: LD_INT 56
30571: PUSH
30572: LD_INT 60
30574: PUSH
30575: LD_INT 61
30577: PUSH
30578: LD_INT 62
30580: PUSH
30581: LD_INT 66
30583: PUSH
30584: LD_INT 67
30586: PUSH
30587: LD_INT 68
30589: PUSH
30590: LD_INT 81
30592: PUSH
30593: LD_INT 82
30595: PUSH
30596: LD_INT 83
30598: PUSH
30599: LD_INT 84
30601: PUSH
30602: LD_INT 85
30604: PUSH
30605: LD_INT 87
30607: PUSH
30608: LD_INT 88
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: ST_TO_ADDR
30667: GO 30900
30669: LD_INT 3
30671: DOUBLE
30672: EQUAL
30673: IFTRUE 30677
30675: GO 30899
30677: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30678: LD_ADDR_VAR 0 4
30682: PUSH
30683: LD_INT 46
30685: PUSH
30686: LD_INT 47
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 82
30697: PUSH
30698: LD_INT 83
30700: PUSH
30701: LD_INT 84
30703: PUSH
30704: LD_INT 85
30706: PUSH
30707: LD_INT 86
30709: PUSH
30710: LD_INT 11
30712: PUSH
30713: LD_INT 9
30715: PUSH
30716: LD_INT 20
30718: PUSH
30719: LD_INT 19
30721: PUSH
30722: LD_INT 21
30724: PUSH
30725: LD_INT 24
30727: PUSH
30728: LD_INT 22
30730: PUSH
30731: LD_INT 25
30733: PUSH
30734: LD_INT 28
30736: PUSH
30737: LD_INT 29
30739: PUSH
30740: LD_INT 30
30742: PUSH
30743: LD_INT 31
30745: PUSH
30746: LD_INT 37
30748: PUSH
30749: LD_INT 38
30751: PUSH
30752: LD_INT 32
30754: PUSH
30755: LD_INT 27
30757: PUSH
30758: LD_INT 33
30760: PUSH
30761: LD_INT 69
30763: PUSH
30764: LD_INT 39
30766: PUSH
30767: LD_INT 34
30769: PUSH
30770: LD_INT 40
30772: PUSH
30773: LD_INT 71
30775: PUSH
30776: LD_INT 23
30778: PUSH
30779: LD_INT 44
30781: PUSH
30782: LD_INT 48
30784: PUSH
30785: LD_INT 49
30787: PUSH
30788: LD_INT 50
30790: PUSH
30791: LD_INT 51
30793: PUSH
30794: LD_INT 52
30796: PUSH
30797: LD_INT 53
30799: PUSH
30800: LD_INT 54
30802: PUSH
30803: LD_INT 55
30805: PUSH
30806: LD_INT 56
30808: PUSH
30809: LD_INT 57
30811: PUSH
30812: LD_INT 58
30814: PUSH
30815: LD_INT 59
30817: PUSH
30818: LD_INT 63
30820: PUSH
30821: LD_INT 64
30823: PUSH
30824: LD_INT 65
30826: PUSH
30827: LD_INT 82
30829: PUSH
30830: LD_INT 83
30832: PUSH
30833: LD_INT 84
30835: PUSH
30836: LD_INT 85
30838: PUSH
30839: LD_INT 86
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: ST_TO_ADDR
30897: GO 30900
30899: POP
// if state > - 1 and state < 3 then
30900: LD_VAR 0 3
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: GREATER
30909: PUSH
30910: LD_VAR 0 3
30914: PUSH
30915: LD_INT 3
30917: LESS
30918: AND
30919: IFFALSE 30976
// for i in result do
30921: LD_ADDR_VAR 0 5
30925: PUSH
30926: LD_VAR 0 4
30930: PUSH
30931: FOR_IN
30932: IFFALSE 30974
// if GetTech ( i , side ) <> state then
30934: LD_VAR 0 5
30938: PPUSH
30939: LD_VAR 0 1
30943: PPUSH
30944: CALL_OW 321
30948: PUSH
30949: LD_VAR 0 3
30953: NONEQUAL
30954: IFFALSE 30972
// result := result diff i ;
30956: LD_ADDR_VAR 0 4
30960: PUSH
30961: LD_VAR 0 4
30965: PUSH
30966: LD_VAR 0 5
30970: DIFF
30971: ST_TO_ADDR
30972: GO 30931
30974: POP
30975: POP
// end ;
30976: LD_VAR 0 4
30980: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
30985: PPUSH
// result := true ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 1
30993: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30994: LD_ADDR_VAR 0 5
30998: PUSH
30999: LD_VAR 0 2
31003: PPUSH
31004: CALL_OW 480
31008: ST_TO_ADDR
// if not tmp then
31009: LD_VAR 0 5
31013: NOT
31014: IFFALSE 31018
// exit ;
31016: GO 31067
// for i in tmp do
31018: LD_ADDR_VAR 0 4
31022: PUSH
31023: LD_VAR 0 5
31027: PUSH
31028: FOR_IN
31029: IFFALSE 31065
// if GetTech ( i , side ) <> state_researched then
31031: LD_VAR 0 4
31035: PPUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 321
31045: PUSH
31046: LD_INT 2
31048: NONEQUAL
31049: IFFALSE 31063
// begin result := false ;
31051: LD_ADDR_VAR 0 3
31055: PUSH
31056: LD_INT 0
31058: ST_TO_ADDR
// exit ;
31059: POP
31060: POP
31061: GO 31067
// end ;
31063: GO 31028
31065: POP
31066: POP
// end ;
31067: LD_VAR 0 3
31071: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31087: LD_VAR 0 1
31091: NOT
31092: PUSH
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 257
31102: PUSH
31103: LD_INT 9
31105: NONEQUAL
31106: OR
31107: IFFALSE 31111
// exit ;
31109: GO 31684
// side := GetSide ( unit ) ;
31111: LD_ADDR_VAR 0 9
31115: PUSH
31116: LD_VAR 0 1
31120: PPUSH
31121: CALL_OW 255
31125: ST_TO_ADDR
// tech_space := tech_spacanom ;
31126: LD_ADDR_VAR 0 12
31130: PUSH
31131: LD_INT 29
31133: ST_TO_ADDR
// tech_time := tech_taurad ;
31134: LD_ADDR_VAR 0 13
31138: PUSH
31139: LD_INT 28
31141: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31142: LD_ADDR_VAR 0 11
31146: PUSH
31147: LD_VAR 0 1
31151: PPUSH
31152: CALL_OW 310
31156: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31157: LD_VAR 0 11
31161: PPUSH
31162: CALL_OW 247
31166: PUSH
31167: LD_INT 2
31169: EQUAL
31170: IFFALSE 31174
// exit ;
31172: GO 31684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31174: LD_ADDR_VAR 0 8
31178: PUSH
31179: LD_INT 81
31181: PUSH
31182: LD_VAR 0 9
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: LD_INT 21
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PPUSH
31212: CALL_OW 69
31216: ST_TO_ADDR
// if not tmp then
31217: LD_VAR 0 8
31221: NOT
31222: IFFALSE 31226
// exit ;
31224: GO 31684
// if in_unit then
31226: LD_VAR 0 11
31230: IFFALSE 31254
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31232: LD_ADDR_VAR 0 10
31236: PUSH
31237: LD_VAR 0 8
31241: PPUSH
31242: LD_VAR 0 11
31246: PPUSH
31247: CALL_OW 74
31251: ST_TO_ADDR
31252: GO 31274
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31254: LD_ADDR_VAR 0 10
31258: PUSH
31259: LD_VAR 0 8
31263: PPUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 74
31273: ST_TO_ADDR
// if not enemy then
31274: LD_VAR 0 10
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 31684
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31283: LD_VAR 0 11
31287: PUSH
31288: LD_VAR 0 11
31292: PPUSH
31293: LD_VAR 0 10
31297: PPUSH
31298: CALL_OW 296
31302: PUSH
31303: LD_INT 13
31305: GREATER
31306: AND
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: LD_VAR 0 10
31317: PPUSH
31318: CALL_OW 296
31322: PUSH
31323: LD_INT 12
31325: GREATER
31326: OR
31327: IFFALSE 31331
// exit ;
31329: GO 31684
// missile := [ 1 ] ;
31331: LD_ADDR_VAR 0 14
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31342: LD_VAR 0 9
31346: PPUSH
31347: LD_VAR 0 12
31351: PPUSH
31352: CALL_OW 325
31356: IFFALSE 31385
// missile := Replace ( missile , missile + 1 , 2 ) ;
31358: LD_ADDR_VAR 0 14
31362: PUSH
31363: LD_VAR 0 14
31367: PPUSH
31368: LD_VAR 0 14
31372: PUSH
31373: LD_INT 1
31375: PLUS
31376: PPUSH
31377: LD_INT 2
31379: PPUSH
31380: CALL_OW 1
31384: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31385: LD_VAR 0 9
31389: PPUSH
31390: LD_VAR 0 13
31394: PPUSH
31395: CALL_OW 325
31399: PUSH
31400: LD_VAR 0 10
31404: PPUSH
31405: CALL_OW 255
31409: PPUSH
31410: LD_VAR 0 13
31414: PPUSH
31415: CALL_OW 325
31419: NOT
31420: AND
31421: IFFALSE 31450
// missile := Replace ( missile , missile + 1 , 3 ) ;
31423: LD_ADDR_VAR 0 14
31427: PUSH
31428: LD_VAR 0 14
31432: PPUSH
31433: LD_VAR 0 14
31437: PUSH
31438: LD_INT 1
31440: PLUS
31441: PPUSH
31442: LD_INT 3
31444: PPUSH
31445: CALL_OW 1
31449: ST_TO_ADDR
// if missile < 2 then
31450: LD_VAR 0 14
31454: PUSH
31455: LD_INT 2
31457: LESS
31458: IFFALSE 31462
// exit ;
31460: GO 31684
// x := GetX ( enemy ) ;
31462: LD_ADDR_VAR 0 4
31466: PUSH
31467: LD_VAR 0 10
31471: PPUSH
31472: CALL_OW 250
31476: ST_TO_ADDR
// y := GetY ( enemy ) ;
31477: LD_ADDR_VAR 0 5
31481: PUSH
31482: LD_VAR 0 10
31486: PPUSH
31487: CALL_OW 251
31491: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31492: LD_ADDR_VAR 0 6
31496: PUSH
31497: LD_VAR 0 4
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL_OW 12
31513: PLUS
31514: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31515: LD_ADDR_VAR 0 7
31519: PUSH
31520: LD_VAR 0 5
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PPUSH
31529: LD_INT 1
31531: PPUSH
31532: CALL_OW 12
31536: PLUS
31537: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31538: LD_VAR 0 6
31542: PPUSH
31543: LD_VAR 0 7
31547: PPUSH
31548: CALL_OW 488
31552: NOT
31553: IFFALSE 31575
// begin _x := x ;
31555: LD_ADDR_VAR 0 6
31559: PUSH
31560: LD_VAR 0 4
31564: ST_TO_ADDR
// _y := y ;
31565: LD_ADDR_VAR 0 7
31569: PUSH
31570: LD_VAR 0 5
31574: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 1
31582: PPUSH
31583: LD_VAR 0 14
31587: PPUSH
31588: CALL_OW 12
31592: ST_TO_ADDR
// case i of 1 :
31593: LD_VAR 0 3
31597: PUSH
31598: LD_INT 1
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31623
31606: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_VAR 0 10
31616: PPUSH
31617: CALL_OW 115
31621: GO 31684
31623: LD_INT 2
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31653
31631: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31632: LD_VAR 0 1
31636: PPUSH
31637: LD_VAR 0 6
31641: PPUSH
31642: LD_VAR 0 7
31646: PPUSH
31647: CALL_OW 153
31651: GO 31684
31653: LD_INT 3
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31683
31661: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: LD_VAR 0 7
31676: PPUSH
31677: CALL_OW 154
31681: GO 31684
31683: POP
// end ;
31684: LD_VAR 0 2
31688: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31689: LD_INT 0
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
31696: PPUSH
// if not unit or not building then
31697: LD_VAR 0 1
31701: NOT
31702: PUSH
31703: LD_VAR 0 2
31707: NOT
31708: OR
31709: IFFALSE 31713
// exit ;
31711: GO 31871
// x := GetX ( building ) ;
31713: LD_ADDR_VAR 0 5
31717: PUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 250
31727: ST_TO_ADDR
// y := GetY ( building ) ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_VAR 0 2
31737: PPUSH
31738: CALL_OW 251
31742: ST_TO_ADDR
// for i = 0 to 5 do
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: DOUBLE
31749: LD_INT 0
31751: DEC
31752: ST_TO_ADDR
31753: LD_INT 5
31755: PUSH
31756: FOR_TO
31757: IFFALSE 31869
// begin _x := ShiftX ( x , i , 3 ) ;
31759: LD_ADDR_VAR 0 7
31763: PUSH
31764: LD_VAR 0 5
31768: PPUSH
31769: LD_VAR 0 4
31773: PPUSH
31774: LD_INT 3
31776: PPUSH
31777: CALL_OW 272
31781: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31782: LD_ADDR_VAR 0 8
31786: PUSH
31787: LD_VAR 0 6
31791: PPUSH
31792: LD_VAR 0 4
31796: PPUSH
31797: LD_INT 3
31799: PPUSH
31800: CALL_OW 273
31804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31805: LD_VAR 0 7
31809: PPUSH
31810: LD_VAR 0 8
31814: PPUSH
31815: CALL_OW 488
31819: NOT
31820: IFFALSE 31824
// continue ;
31822: GO 31756
// if HexInfo ( _x , _y ) = 0 then
31824: LD_VAR 0 7
31828: PPUSH
31829: LD_VAR 0 8
31833: PPUSH
31834: CALL_OW 428
31838: PUSH
31839: LD_INT 0
31841: EQUAL
31842: IFFALSE 31867
// begin ComMoveXY ( unit , _x , _y ) ;
31844: LD_VAR 0 1
31848: PPUSH
31849: LD_VAR 0 7
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: CALL_OW 111
// exit ;
31863: POP
31864: POP
31865: GO 31871
// end ; end ;
31867: GO 31756
31869: POP
31870: POP
// end ;
31871: LD_VAR 0 3
31875: RET
// export function ScanBase ( side , base_area ) ; begin
31876: LD_INT 0
31878: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_VAR 0 2
31888: PPUSH
31889: LD_INT 81
31891: PUSH
31892: LD_VAR 0 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PPUSH
31901: CALL_OW 70
31905: ST_TO_ADDR
// end ;
31906: LD_VAR 0 3
31910: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
// result := false ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: LD_INT 0
31924: ST_TO_ADDR
// side := GetSide ( unit ) ;
31925: LD_ADDR_VAR 0 3
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 255
31939: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: CALL_OW 248
31954: ST_TO_ADDR
// case nat of 1 :
31955: LD_VAR 0 4
31959: PUSH
31960: LD_INT 1
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 31979
31968: POP
// tech := tech_lassight ; 2 :
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_INT 12
31976: ST_TO_ADDR
31977: GO 32018
31979: LD_INT 2
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 31998
31987: POP
// tech := tech_mortar ; 3 :
31988: LD_ADDR_VAR 0 5
31992: PUSH
31993: LD_INT 41
31995: ST_TO_ADDR
31996: GO 32018
31998: LD_INT 3
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32017
32006: POP
// tech := tech_bazooka ; end ;
32007: LD_ADDR_VAR 0 5
32011: PUSH
32012: LD_INT 44
32014: ST_TO_ADDR
32015: GO 32018
32017: POP
// if Researched ( side , tech ) then
32018: LD_VAR 0 3
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: CALL_OW 325
32032: IFFALSE 32059
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32034: LD_ADDR_VAR 0 2
32038: PUSH
32039: LD_INT 5
32041: PUSH
32042: LD_INT 8
32044: PUSH
32045: LD_INT 9
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: LD_VAR 0 4
32057: ARRAY
32058: ST_TO_ADDR
// end ;
32059: LD_VAR 0 2
32063: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32064: LD_INT 0
32066: PPUSH
32067: PPUSH
32068: PPUSH
// if not mines then
32069: LD_VAR 0 2
32073: NOT
32074: IFFALSE 32078
// exit ;
32076: GO 32222
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: LD_INT 81
32085: PUSH
32086: LD_VAR 0 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: LD_INT 21
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PPUSH
32116: CALL_OW 69
32120: ST_TO_ADDR
// for i in mines do
32121: LD_ADDR_VAR 0 4
32125: PUSH
32126: LD_VAR 0 2
32130: PUSH
32131: FOR_IN
32132: IFFALSE 32220
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32134: LD_VAR 0 4
32138: PUSH
32139: LD_INT 1
32141: ARRAY
32142: PPUSH
32143: LD_VAR 0 4
32147: PUSH
32148: LD_INT 2
32150: ARRAY
32151: PPUSH
32152: CALL_OW 458
32156: NOT
32157: IFFALSE 32161
// continue ;
32159: GO 32131
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32161: LD_VAR 0 4
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 4
32174: PUSH
32175: LD_INT 2
32177: ARRAY
32178: PPUSH
32179: CALL_OW 428
32183: PUSH
32184: LD_VAR 0 5
32188: IN
32189: IFFALSE 32218
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32191: LD_VAR 0 4
32195: PUSH
32196: LD_INT 1
32198: ARRAY
32199: PPUSH
32200: LD_VAR 0 4
32204: PUSH
32205: LD_INT 2
32207: ARRAY
32208: PPUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 456
// end ;
32218: GO 32131
32220: POP
32221: POP
// end ;
32222: LD_VAR 0 3
32226: RET
// export function Count ( array ) ; var i ; begin
32227: LD_INT 0
32229: PPUSH
32230: PPUSH
// result := 0 ;
32231: LD_ADDR_VAR 0 2
32235: PUSH
32236: LD_INT 0
32238: ST_TO_ADDR
// for i in array do
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_VAR 0 1
32248: PUSH
32249: FOR_IN
32250: IFFALSE 32274
// if i then
32252: LD_VAR 0 3
32256: IFFALSE 32272
// result := result + 1 ;
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_VAR 0 2
32267: PUSH
32268: LD_INT 1
32270: PLUS
32271: ST_TO_ADDR
32272: GO 32249
32274: POP
32275: POP
// end ;
32276: LD_VAR 0 2
32280: RET
// export function IsEmpty ( building ) ; begin
32281: LD_INT 0
32283: PPUSH
// if not building then
32284: LD_VAR 0 1
32288: NOT
32289: IFFALSE 32293
// exit ;
32291: GO 32336
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32293: LD_ADDR_VAR 0 2
32297: PUSH
32298: LD_VAR 0 1
32302: PUSH
32303: LD_INT 22
32305: PUSH
32306: LD_VAR 0 1
32310: PPUSH
32311: CALL_OW 255
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 58
32322: PUSH
32323: EMPTY
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PPUSH
32330: CALL_OW 69
32334: IN
32335: ST_TO_ADDR
// end ;
32336: LD_VAR 0 2
32340: RET
// export function IsNotFull ( building ) ; var places ; begin
32341: LD_INT 0
32343: PPUSH
32344: PPUSH
// if not building then
32345: LD_VAR 0 1
32349: NOT
32350: IFFALSE 32354
// exit ;
32352: GO 32525
// result := false ;
32354: LD_ADDR_VAR 0 2
32358: PUSH
32359: LD_INT 0
32361: ST_TO_ADDR
// places := 0 ;
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 0
32369: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32370: LD_VAR 0 1
32374: PPUSH
32375: CALL_OW 266
32379: PUSH
32380: LD_INT 0
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32442
32386: LD_INT 1
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32442
32392: LD_INT 6
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32442
32398: LD_INT 7
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32442
32404: LD_INT 8
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32442
32410: LD_INT 4
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32442
32416: LD_INT 5
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32442
32422: LD_INT 2
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32442
32428: LD_INT 3
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32442
32434: LD_INT 35
32436: DOUBLE
32437: EQUAL
32438: IFTRUE 32442
32440: GO 32453
32442: POP
// places := 6 ; b_bunker , b_breastwork :
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_INT 6
32450: ST_TO_ADDR
32451: GO 32498
32453: LD_INT 32
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32467
32459: LD_INT 31
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32478
32467: POP
// places := 1 ; b_control_tower :
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_INT 1
32475: ST_TO_ADDR
32476: GO 32498
32478: LD_INT 36
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32497
32486: POP
// places := 3 ; end ;
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 3
32494: ST_TO_ADDR
32495: GO 32498
32497: POP
// if places then
32498: LD_VAR 0 3
32502: IFFALSE 32525
// result := UnitsInside ( building ) < places ;
32504: LD_ADDR_VAR 0 2
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 313
32518: PUSH
32519: LD_VAR 0 3
32523: LESS
32524: ST_TO_ADDR
// end ;
32525: LD_VAR 0 2
32529: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
// tmp := [ ] ;
32536: LD_ADDR_VAR 0 3
32540: PUSH
32541: EMPTY
32542: ST_TO_ADDR
// list := [ ] ;
32543: LD_ADDR_VAR 0 5
32547: PUSH
32548: EMPTY
32549: ST_TO_ADDR
// for i = 16 to 25 do
32550: LD_ADDR_VAR 0 4
32554: PUSH
32555: DOUBLE
32556: LD_INT 16
32558: DEC
32559: ST_TO_ADDR
32560: LD_INT 25
32562: PUSH
32563: FOR_TO
32564: IFFALSE 32637
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32566: LD_ADDR_VAR 0 3
32570: PUSH
32571: LD_VAR 0 3
32575: PUSH
32576: LD_INT 22
32578: PUSH
32579: LD_VAR 0 1
32583: PPUSH
32584: CALL_OW 255
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 91
32595: PUSH
32596: LD_VAR 0 1
32600: PUSH
32601: LD_INT 6
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 30
32611: PUSH
32612: LD_VAR 0 4
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: PUSH
32626: EMPTY
32627: LIST
32628: PPUSH
32629: CALL_OW 69
32633: ADD
32634: ST_TO_ADDR
32635: GO 32563
32637: POP
32638: POP
// for i = 1 to tmp do
32639: LD_ADDR_VAR 0 4
32643: PUSH
32644: DOUBLE
32645: LD_INT 1
32647: DEC
32648: ST_TO_ADDR
32649: LD_VAR 0 3
32653: PUSH
32654: FOR_TO
32655: IFFALSE 32743
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32657: LD_ADDR_VAR 0 5
32661: PUSH
32662: LD_VAR 0 5
32666: PUSH
32667: LD_VAR 0 3
32671: PUSH
32672: LD_VAR 0 4
32676: ARRAY
32677: PPUSH
32678: CALL_OW 266
32682: PUSH
32683: LD_VAR 0 3
32687: PUSH
32688: LD_VAR 0 4
32692: ARRAY
32693: PPUSH
32694: CALL_OW 250
32698: PUSH
32699: LD_VAR 0 3
32703: PUSH
32704: LD_VAR 0 4
32708: ARRAY
32709: PPUSH
32710: CALL_OW 251
32714: PUSH
32715: LD_VAR 0 3
32719: PUSH
32720: LD_VAR 0 4
32724: ARRAY
32725: PPUSH
32726: CALL_OW 254
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: ADD
32740: ST_TO_ADDR
32741: GO 32654
32743: POP
32744: POP
// result := list ;
32745: LD_ADDR_VAR 0 2
32749: PUSH
32750: LD_VAR 0 5
32754: ST_TO_ADDR
// end ;
32755: LD_VAR 0 2
32759: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32760: LD_INT 0
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
// if not factory then
32769: LD_VAR 0 1
32773: NOT
32774: IFFALSE 32778
// exit ;
32776: GO 33371
// if control = control_apeman then
32778: LD_VAR 0 4
32782: PUSH
32783: LD_INT 5
32785: EQUAL
32786: IFFALSE 32895
// begin tmp := UnitsInside ( factory ) ;
32788: LD_ADDR_VAR 0 8
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 313
32802: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32803: LD_VAR 0 8
32807: PPUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 12
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 72
32822: NOT
32823: IFFALSE 32833
// control := control_manual ;
32825: LD_ADDR_VAR 0 4
32829: PUSH
32830: LD_INT 1
32832: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32833: LD_ADDR_VAR 0 8
32837: PUSH
32838: LD_VAR 0 1
32842: PPUSH
32843: CALL 32530 0 1
32847: ST_TO_ADDR
// if tmp then
32848: LD_VAR 0 8
32852: IFFALSE 32895
// begin for i in tmp do
32854: LD_ADDR_VAR 0 7
32858: PUSH
32859: LD_VAR 0 8
32863: PUSH
32864: FOR_IN
32865: IFFALSE 32893
// if i [ 1 ] = b_ext_radio then
32867: LD_VAR 0 7
32871: PUSH
32872: LD_INT 1
32874: ARRAY
32875: PUSH
32876: LD_INT 22
32878: EQUAL
32879: IFFALSE 32891
// begin control := control_remote ;
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: LD_INT 2
32888: ST_TO_ADDR
// break ;
32889: GO 32893
// end ;
32891: GO 32864
32893: POP
32894: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32895: LD_VAR 0 1
32899: PPUSH
32900: LD_VAR 0 2
32904: PPUSH
32905: LD_VAR 0 3
32909: PPUSH
32910: LD_VAR 0 4
32914: PPUSH
32915: LD_VAR 0 5
32919: PPUSH
32920: CALL_OW 448
32924: IFFALSE 32959
// begin result := [ chassis , engine , control , weapon ] ;
32926: LD_ADDR_VAR 0 6
32930: PUSH
32931: LD_VAR 0 2
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: LD_VAR 0 4
32945: PUSH
32946: LD_VAR 0 5
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: ST_TO_ADDR
// exit ;
32957: GO 33371
// end ; _chassis := AvailableChassisList ( factory ) ;
32959: LD_ADDR_VAR 0 9
32963: PUSH
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 475
32973: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32974: LD_ADDR_VAR 0 11
32978: PUSH
32979: LD_VAR 0 1
32983: PPUSH
32984: CALL_OW 476
32988: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32989: LD_ADDR_VAR 0 12
32993: PUSH
32994: LD_VAR 0 1
32998: PPUSH
32999: CALL_OW 477
33003: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33004: LD_ADDR_VAR 0 10
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 478
33018: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33019: LD_VAR 0 9
33023: NOT
33024: PUSH
33025: LD_VAR 0 11
33029: NOT
33030: OR
33031: PUSH
33032: LD_VAR 0 12
33036: NOT
33037: OR
33038: PUSH
33039: LD_VAR 0 10
33043: NOT
33044: OR
33045: IFFALSE 33080
// begin result := [ chassis , engine , control , weapon ] ;
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: LD_VAR 0 2
33056: PUSH
33057: LD_VAR 0 3
33061: PUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_VAR 0 5
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// exit ;
33078: GO 33371
// end ; if not chassis in _chassis then
33080: LD_VAR 0 2
33084: PUSH
33085: LD_VAR 0 9
33089: IN
33090: NOT
33091: IFFALSE 33117
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33093: LD_ADDR_VAR 0 2
33097: PUSH
33098: LD_VAR 0 9
33102: PUSH
33103: LD_INT 1
33105: PPUSH
33106: LD_VAR 0 9
33110: PPUSH
33111: CALL_OW 12
33115: ARRAY
33116: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33117: LD_VAR 0 2
33121: PPUSH
33122: LD_VAR 0 3
33126: PPUSH
33127: CALL 33376 0 2
33131: NOT
33132: IFFALSE 33191
// repeat engine := _engine [ 1 ] ;
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_VAR 0 11
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33148: LD_ADDR_VAR 0 11
33152: PUSH
33153: LD_VAR 0 11
33157: PPUSH
33158: LD_INT 1
33160: PPUSH
33161: CALL_OW 3
33165: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33166: LD_VAR 0 2
33170: PPUSH
33171: LD_VAR 0 3
33175: PPUSH
33176: CALL 33376 0 2
33180: PUSH
33181: LD_VAR 0 11
33185: PUSH
33186: EMPTY
33187: EQUAL
33188: OR
33189: IFFALSE 33134
// if not control in _control then
33191: LD_VAR 0 4
33195: PUSH
33196: LD_VAR 0 12
33200: IN
33201: NOT
33202: IFFALSE 33228
// control := _control [ rand ( 1 , _control ) ] ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_VAR 0 12
33213: PUSH
33214: LD_INT 1
33216: PPUSH
33217: LD_VAR 0 12
33221: PPUSH
33222: CALL_OW 12
33226: ARRAY
33227: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33228: LD_VAR 0 2
33232: PPUSH
33233: LD_VAR 0 5
33237: PPUSH
33238: CALL 33596 0 2
33242: NOT
33243: IFFALSE 33302
// repeat weapon := _weapon [ 1 ] ;
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_VAR 0 10
33254: PUSH
33255: LD_INT 1
33257: ARRAY
33258: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33259: LD_ADDR_VAR 0 10
33263: PUSH
33264: LD_VAR 0 10
33268: PPUSH
33269: LD_INT 1
33271: PPUSH
33272: CALL_OW 3
33276: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33277: LD_VAR 0 2
33281: PPUSH
33282: LD_VAR 0 5
33286: PPUSH
33287: CALL 33596 0 2
33291: PUSH
33292: LD_VAR 0 10
33296: PUSH
33297: EMPTY
33298: EQUAL
33299: OR
33300: IFFALSE 33245
// result := [ ] ;
33302: LD_ADDR_VAR 0 6
33306: PUSH
33307: EMPTY
33308: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33309: LD_VAR 0 1
33313: PPUSH
33314: LD_VAR 0 2
33318: PPUSH
33319: LD_VAR 0 3
33323: PPUSH
33324: LD_VAR 0 4
33328: PPUSH
33329: LD_VAR 0 5
33333: PPUSH
33334: CALL_OW 448
33338: IFFALSE 33371
// result := [ chassis , engine , control , weapon ] ;
33340: LD_ADDR_VAR 0 6
33344: PUSH
33345: LD_VAR 0 2
33349: PUSH
33350: LD_VAR 0 3
33354: PUSH
33355: LD_VAR 0 4
33359: PUSH
33360: LD_VAR 0 5
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
// end ;
33371: LD_VAR 0 6
33375: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33376: LD_INT 0
33378: PPUSH
// if not chassis or not engine then
33379: LD_VAR 0 1
33383: NOT
33384: PUSH
33385: LD_VAR 0 2
33389: NOT
33390: OR
33391: IFFALSE 33395
// exit ;
33393: GO 33591
// case engine of engine_solar :
33395: LD_VAR 0 2
33399: PUSH
33400: LD_INT 2
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33446
33408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_INT 11
33416: PUSH
33417: LD_INT 12
33419: PUSH
33420: LD_INT 13
33422: PUSH
33423: LD_INT 14
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
33444: GO 33575
33446: LD_INT 1
33448: DOUBLE
33449: EQUAL
33450: IFTRUE 33454
33452: GO 33516
33454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33455: LD_ADDR_VAR 0 3
33459: PUSH
33460: LD_INT 11
33462: PUSH
33463: LD_INT 12
33465: PUSH
33466: LD_INT 13
33468: PUSH
33469: LD_INT 14
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: LD_INT 21
33489: PUSH
33490: LD_INT 23
33492: PUSH
33493: LD_INT 22
33495: PUSH
33496: LD_INT 24
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
33514: GO 33575
33516: LD_INT 3
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33524
33522: GO 33574
33524: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_INT 13
33532: PUSH
33533: LD_INT 14
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 4
33544: PUSH
33545: LD_INT 5
33547: PUSH
33548: LD_INT 21
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 23
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
33572: GO 33575
33574: POP
// result := ( chassis in result ) ;
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_VAR 0 1
33584: PUSH
33585: LD_VAR 0 3
33589: IN
33590: ST_TO_ADDR
// end ;
33591: LD_VAR 0 3
33595: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33596: LD_INT 0
33598: PPUSH
// if not chassis or not weapon then
33599: LD_VAR 0 1
33603: NOT
33604: PUSH
33605: LD_VAR 0 2
33609: NOT
33610: OR
33611: IFFALSE 33615
// exit ;
33613: GO 34675
// case weapon of us_machine_gun :
33615: LD_VAR 0 2
33619: PUSH
33620: LD_INT 2
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 33658
33628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: LD_INT 5
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
33656: GO 34659
33658: LD_INT 3
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33696
33666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: ST_TO_ADDR
33694: GO 34659
33696: LD_INT 11
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33734
33704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33705: LD_ADDR_VAR 0 3
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
33732: GO 34659
33734: LD_INT 4
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33768
33742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: LD_INT 4
33756: PUSH
33757: LD_INT 5
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: ST_TO_ADDR
33766: GO 34659
33768: LD_INT 5
33770: DOUBLE
33771: EQUAL
33772: IFTRUE 33776
33774: GO 33802
33776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: LD_INT 5
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
33800: GO 34659
33802: LD_INT 9
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33836
33810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: LD_INT 4
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: ST_TO_ADDR
33834: GO 34659
33836: LD_INT 7
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33870
33844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 4
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 34659
33870: LD_INT 12
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33904
33878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33879: LD_ADDR_VAR 0 3
33883: PUSH
33884: LD_INT 2
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: LD_INT 4
33892: PUSH
33893: LD_INT 5
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: ST_TO_ADDR
33902: GO 34659
33904: LD_INT 13
33906: DOUBLE
33907: EQUAL
33908: IFTRUE 33912
33910: GO 33938
33912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33913: LD_ADDR_VAR 0 3
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: LD_INT 5
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
33936: GO 34659
33938: LD_INT 14
33940: DOUBLE
33941: EQUAL
33942: IFTRUE 33946
33944: GO 33964
33946: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33947: LD_ADDR_VAR 0 3
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: ST_TO_ADDR
33962: GO 34659
33964: LD_INT 6
33966: DOUBLE
33967: EQUAL
33968: IFTRUE 33972
33970: GO 33990
33972: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33973: LD_ADDR_VAR 0 3
33977: PUSH
33978: LD_INT 4
33980: PUSH
33981: LD_INT 5
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: ST_TO_ADDR
33988: GO 34659
33990: LD_INT 10
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34016
33998: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_INT 4
34006: PUSH
34007: LD_INT 5
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: ST_TO_ADDR
34014: GO 34659
34016: LD_INT 22
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34024
34022: GO 34050
34024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34025: LD_ADDR_VAR 0 3
34029: PUSH
34030: LD_INT 11
34032: PUSH
34033: LD_INT 12
34035: PUSH
34036: LD_INT 13
34038: PUSH
34039: LD_INT 14
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
34048: GO 34659
34050: LD_INT 23
34052: DOUBLE
34053: EQUAL
34054: IFTRUE 34058
34056: GO 34084
34058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_INT 11
34066: PUSH
34067: LD_INT 12
34069: PUSH
34070: LD_INT 13
34072: PUSH
34073: LD_INT 14
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34659
34084: LD_INT 24
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34118
34092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 11
34100: PUSH
34101: LD_INT 12
34103: PUSH
34104: LD_INT 13
34106: PUSH
34107: LD_INT 14
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: ST_TO_ADDR
34116: GO 34659
34118: LD_INT 30
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34126
34124: GO 34152
34126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_INT 11
34134: PUSH
34135: LD_INT 12
34137: PUSH
34138: LD_INT 13
34140: PUSH
34141: LD_INT 14
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
34150: GO 34659
34152: LD_INT 25
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34178
34160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_INT 13
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: ST_TO_ADDR
34176: GO 34659
34178: LD_INT 27
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34204
34186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_INT 13
34194: PUSH
34195: LD_INT 14
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: ST_TO_ADDR
34202: GO 34659
34204: LD_INT 92
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34238
34212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34213: LD_ADDR_VAR 0 3
34217: PUSH
34218: LD_INT 11
34220: PUSH
34221: LD_INT 12
34223: PUSH
34224: LD_INT 13
34226: PUSH
34227: LD_INT 14
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
34236: GO 34659
34238: LD_INT 28
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34246
34244: GO 34264
34246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34247: LD_ADDR_VAR 0 3
34251: PUSH
34252: LD_INT 13
34254: PUSH
34255: LD_INT 14
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: ST_TO_ADDR
34262: GO 34659
34264: LD_INT 29
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34272
34270: GO 34290
34272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34273: LD_ADDR_VAR 0 3
34277: PUSH
34278: LD_INT 13
34280: PUSH
34281: LD_INT 14
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: ST_TO_ADDR
34288: GO 34659
34290: LD_INT 31
34292: DOUBLE
34293: EQUAL
34294: IFTRUE 34298
34296: GO 34316
34298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34299: LD_ADDR_VAR 0 3
34303: PUSH
34304: LD_INT 13
34306: PUSH
34307: LD_INT 14
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: ST_TO_ADDR
34314: GO 34659
34316: LD_INT 26
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34342
34324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 13
34332: PUSH
34333: LD_INT 14
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: ST_TO_ADDR
34340: GO 34659
34342: LD_INT 42
34344: DOUBLE
34345: EQUAL
34346: IFTRUE 34350
34348: GO 34376
34350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34351: LD_ADDR_VAR 0 3
34355: PUSH
34356: LD_INT 21
34358: PUSH
34359: LD_INT 22
34361: PUSH
34362: LD_INT 23
34364: PUSH
34365: LD_INT 24
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: ST_TO_ADDR
34374: GO 34659
34376: LD_INT 43
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34410
34384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34385: LD_ADDR_VAR 0 3
34389: PUSH
34390: LD_INT 21
34392: PUSH
34393: LD_INT 22
34395: PUSH
34396: LD_INT 23
34398: PUSH
34399: LD_INT 24
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
34408: GO 34659
34410: LD_INT 44
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34444
34418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34419: LD_ADDR_VAR 0 3
34423: PUSH
34424: LD_INT 21
34426: PUSH
34427: LD_INT 22
34429: PUSH
34430: LD_INT 23
34432: PUSH
34433: LD_INT 24
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: ST_TO_ADDR
34442: GO 34659
34444: LD_INT 45
34446: DOUBLE
34447: EQUAL
34448: IFTRUE 34452
34450: GO 34478
34452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34453: LD_ADDR_VAR 0 3
34457: PUSH
34458: LD_INT 21
34460: PUSH
34461: LD_INT 22
34463: PUSH
34464: LD_INT 23
34466: PUSH
34467: LD_INT 24
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34659
34478: LD_INT 49
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34512
34486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 21
34494: PUSH
34495: LD_INT 22
34497: PUSH
34498: LD_INT 23
34500: PUSH
34501: LD_INT 24
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: ST_TO_ADDR
34510: GO 34659
34512: LD_INT 51
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34546
34520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_INT 21
34528: PUSH
34529: LD_INT 22
34531: PUSH
34532: LD_INT 23
34534: PUSH
34535: LD_INT 24
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
34544: GO 34659
34546: LD_INT 52
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34554
34552: GO 34580
34554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34555: LD_ADDR_VAR 0 3
34559: PUSH
34560: LD_INT 21
34562: PUSH
34563: LD_INT 22
34565: PUSH
34566: LD_INT 23
34568: PUSH
34569: LD_INT 24
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
34578: GO 34659
34580: LD_INT 53
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34588
34586: GO 34606
34588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_INT 23
34596: PUSH
34597: LD_INT 24
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: ST_TO_ADDR
34604: GO 34659
34606: LD_INT 46
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34632
34614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34615: LD_ADDR_VAR 0 3
34619: PUSH
34620: LD_INT 23
34622: PUSH
34623: LD_INT 24
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: ST_TO_ADDR
34630: GO 34659
34632: LD_INT 47
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34658
34640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 23
34648: PUSH
34649: LD_INT 24
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: ST_TO_ADDR
34656: GO 34659
34658: POP
// result := ( chassis in result ) ;
34659: LD_ADDR_VAR 0 3
34663: PUSH
34664: LD_VAR 0 1
34668: PUSH
34669: LD_VAR 0 3
34673: IN
34674: ST_TO_ADDR
// end ;
34675: LD_VAR 0 3
34679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34680: LD_INT 0
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
// result := array ;
34689: LD_ADDR_VAR 0 5
34693: PUSH
34694: LD_VAR 0 1
34698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34699: LD_VAR 0 1
34703: NOT
34704: PUSH
34705: LD_VAR 0 2
34709: NOT
34710: OR
34711: PUSH
34712: LD_VAR 0 3
34716: NOT
34717: OR
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 1
34728: GREATER
34729: OR
34730: PUSH
34731: LD_VAR 0 3
34735: PUSH
34736: LD_VAR 0 1
34740: GREATER
34741: OR
34742: IFFALSE 34746
// exit ;
34744: GO 35042
// if direction then
34746: LD_VAR 0 4
34750: IFFALSE 34814
// begin d := 1 ;
34752: LD_ADDR_VAR 0 9
34756: PUSH
34757: LD_INT 1
34759: ST_TO_ADDR
// if i_from > i_to then
34760: LD_VAR 0 2
34764: PUSH
34765: LD_VAR 0 3
34769: GREATER
34770: IFFALSE 34796
// length := ( array - i_from ) + i_to else
34772: LD_ADDR_VAR 0 11
34776: PUSH
34777: LD_VAR 0 1
34781: PUSH
34782: LD_VAR 0 2
34786: MINUS
34787: PUSH
34788: LD_VAR 0 3
34792: PLUS
34793: ST_TO_ADDR
34794: GO 34812
// length := i_to - i_from ;
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: LD_VAR 0 3
34805: PUSH
34806: LD_VAR 0 2
34810: MINUS
34811: ST_TO_ADDR
// end else
34812: GO 34875
// begin d := - 1 ;
34814: LD_ADDR_VAR 0 9
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: ST_TO_ADDR
// if i_from > i_to then
34823: LD_VAR 0 2
34827: PUSH
34828: LD_VAR 0 3
34832: GREATER
34833: IFFALSE 34853
// length := i_from - i_to else
34835: LD_ADDR_VAR 0 11
34839: PUSH
34840: LD_VAR 0 2
34844: PUSH
34845: LD_VAR 0 3
34849: MINUS
34850: ST_TO_ADDR
34851: GO 34875
// length := ( array - i_to ) + i_from ;
34853: LD_ADDR_VAR 0 11
34857: PUSH
34858: LD_VAR 0 1
34862: PUSH
34863: LD_VAR 0 3
34867: MINUS
34868: PUSH
34869: LD_VAR 0 2
34873: PLUS
34874: ST_TO_ADDR
// end ; if not length then
34875: LD_VAR 0 11
34879: NOT
34880: IFFALSE 34884
// exit ;
34882: GO 35042
// tmp := array ;
34884: LD_ADDR_VAR 0 10
34888: PUSH
34889: LD_VAR 0 1
34893: ST_TO_ADDR
// for i = 1 to length do
34894: LD_ADDR_VAR 0 6
34898: PUSH
34899: DOUBLE
34900: LD_INT 1
34902: DEC
34903: ST_TO_ADDR
34904: LD_VAR 0 11
34908: PUSH
34909: FOR_TO
34910: IFFALSE 35030
// begin for j = 1 to array do
34912: LD_ADDR_VAR 0 7
34916: PUSH
34917: DOUBLE
34918: LD_INT 1
34920: DEC
34921: ST_TO_ADDR
34922: LD_VAR 0 1
34926: PUSH
34927: FOR_TO
34928: IFFALSE 35016
// begin k := j + d ;
34930: LD_ADDR_VAR 0 8
34934: PUSH
34935: LD_VAR 0 7
34939: PUSH
34940: LD_VAR 0 9
34944: PLUS
34945: ST_TO_ADDR
// if k > array then
34946: LD_VAR 0 8
34950: PUSH
34951: LD_VAR 0 1
34955: GREATER
34956: IFFALSE 34966
// k := 1 ;
34958: LD_ADDR_VAR 0 8
34962: PUSH
34963: LD_INT 1
34965: ST_TO_ADDR
// if not k then
34966: LD_VAR 0 8
34970: NOT
34971: IFFALSE 34983
// k := array ;
34973: LD_ADDR_VAR 0 8
34977: PUSH
34978: LD_VAR 0 1
34982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34983: LD_ADDR_VAR 0 10
34987: PUSH
34988: LD_VAR 0 10
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: LD_VAR 0 1
35002: PUSH
35003: LD_VAR 0 7
35007: ARRAY
35008: PPUSH
35009: CALL_OW 1
35013: ST_TO_ADDR
// end ;
35014: GO 34927
35016: POP
35017: POP
// array := tmp ;
35018: LD_ADDR_VAR 0 1
35022: PUSH
35023: LD_VAR 0 10
35027: ST_TO_ADDR
// end ;
35028: GO 34909
35030: POP
35031: POP
// result := array ;
35032: LD_ADDR_VAR 0 5
35036: PUSH
35037: LD_VAR 0 1
35041: ST_TO_ADDR
// end ;
35042: LD_VAR 0 5
35046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35047: LD_INT 0
35049: PPUSH
35050: PPUSH
// result := 0 ;
35051: LD_ADDR_VAR 0 3
35055: PUSH
35056: LD_INT 0
35058: ST_TO_ADDR
// if not array or not value in array then
35059: LD_VAR 0 1
35063: NOT
35064: PUSH
35065: LD_VAR 0 2
35069: PUSH
35070: LD_VAR 0 1
35074: IN
35075: NOT
35076: OR
35077: IFFALSE 35081
// exit ;
35079: GO 35135
// for i = 1 to array do
35081: LD_ADDR_VAR 0 4
35085: PUSH
35086: DOUBLE
35087: LD_INT 1
35089: DEC
35090: ST_TO_ADDR
35091: LD_VAR 0 1
35095: PUSH
35096: FOR_TO
35097: IFFALSE 35133
// if value = array [ i ] then
35099: LD_VAR 0 2
35103: PUSH
35104: LD_VAR 0 1
35108: PUSH
35109: LD_VAR 0 4
35113: ARRAY
35114: EQUAL
35115: IFFALSE 35131
// begin result := i ;
35117: LD_ADDR_VAR 0 3
35121: PUSH
35122: LD_VAR 0 4
35126: ST_TO_ADDR
// exit ;
35127: POP
35128: POP
35129: GO 35135
// end ;
35131: GO 35096
35133: POP
35134: POP
// end ;
35135: LD_VAR 0 3
35139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35140: LD_INT 0
35142: PPUSH
// vc_chassis := chassis ;
35143: LD_ADDR_OWVAR 37
35147: PUSH
35148: LD_VAR 0 1
35152: ST_TO_ADDR
// vc_engine := engine ;
35153: LD_ADDR_OWVAR 39
35157: PUSH
35158: LD_VAR 0 2
35162: ST_TO_ADDR
// vc_control := control ;
35163: LD_ADDR_OWVAR 38
35167: PUSH
35168: LD_VAR 0 3
35172: ST_TO_ADDR
// vc_weapon := weapon ;
35173: LD_ADDR_OWVAR 40
35177: PUSH
35178: LD_VAR 0 4
35182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35183: LD_ADDR_OWVAR 41
35187: PUSH
35188: LD_VAR 0 5
35192: ST_TO_ADDR
// end ;
35193: LD_VAR 0 6
35197: RET
// export function WantPlant ( unit ) ; var task ; begin
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
// result := false ;
35202: LD_ADDR_VAR 0 2
35206: PUSH
35207: LD_INT 0
35209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 437
35224: ST_TO_ADDR
// if task then
35225: LD_VAR 0 3
35229: IFFALSE 35257
// if task [ 1 ] [ 1 ] = p then
35231: LD_VAR 0 3
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PUSH
35240: LD_INT 1
35242: ARRAY
35243: PUSH
35244: LD_STRING p
35246: EQUAL
35247: IFFALSE 35257
// result := true ;
35249: LD_ADDR_VAR 0 2
35253: PUSH
35254: LD_INT 1
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 2
35261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
35266: PPUSH
35267: PPUSH
// if pos < 1 then
35268: LD_VAR 0 2
35272: PUSH
35273: LD_INT 1
35275: LESS
35276: IFFALSE 35280
// exit ;
35278: GO 35583
// if pos = 1 then
35280: LD_VAR 0 2
35284: PUSH
35285: LD_INT 1
35287: EQUAL
35288: IFFALSE 35321
// result := Replace ( arr , pos [ 1 ] , value ) else
35290: LD_ADDR_VAR 0 4
35294: PUSH
35295: LD_VAR 0 1
35299: PPUSH
35300: LD_VAR 0 2
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: PPUSH
35309: LD_VAR 0 3
35313: PPUSH
35314: CALL_OW 1
35318: ST_TO_ADDR
35319: GO 35583
// begin tmp := arr ;
35321: LD_ADDR_VAR 0 6
35325: PUSH
35326: LD_VAR 0 1
35330: ST_TO_ADDR
// s_arr := [ tmp ] ;
35331: LD_ADDR_VAR 0 7
35335: PUSH
35336: LD_VAR 0 6
35340: PUSH
35341: EMPTY
35342: LIST
35343: ST_TO_ADDR
// for i = 1 to pos - 1 do
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: DOUBLE
35350: LD_INT 1
35352: DEC
35353: ST_TO_ADDR
35354: LD_VAR 0 2
35358: PUSH
35359: LD_INT 1
35361: MINUS
35362: PUSH
35363: FOR_TO
35364: IFFALSE 35409
// begin tmp := tmp [ pos [ i ] ] ;
35366: LD_ADDR_VAR 0 6
35370: PUSH
35371: LD_VAR 0 6
35375: PUSH
35376: LD_VAR 0 2
35380: PUSH
35381: LD_VAR 0 5
35385: ARRAY
35386: ARRAY
35387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35388: LD_ADDR_VAR 0 7
35392: PUSH
35393: LD_VAR 0 7
35397: PUSH
35398: LD_VAR 0 6
35402: PUSH
35403: EMPTY
35404: LIST
35405: ADD
35406: ST_TO_ADDR
// end ;
35407: GO 35363
35409: POP
35410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35411: LD_ADDR_VAR 0 6
35415: PUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: LD_VAR 0 2
35425: PUSH
35426: LD_VAR 0 2
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 3
35436: PPUSH
35437: CALL_OW 1
35441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35442: LD_ADDR_VAR 0 7
35446: PUSH
35447: LD_VAR 0 7
35451: PPUSH
35452: LD_VAR 0 7
35456: PPUSH
35457: LD_VAR 0 6
35461: PPUSH
35462: CALL_OW 1
35466: ST_TO_ADDR
// for i = s_arr downto 2 do
35467: LD_ADDR_VAR 0 5
35471: PUSH
35472: DOUBLE
35473: LD_VAR 0 7
35477: INC
35478: ST_TO_ADDR
35479: LD_INT 2
35481: PUSH
35482: FOR_DOWNTO
35483: IFFALSE 35567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35485: LD_ADDR_VAR 0 6
35489: PUSH
35490: LD_VAR 0 7
35494: PUSH
35495: LD_VAR 0 5
35499: PUSH
35500: LD_INT 1
35502: MINUS
35503: ARRAY
35504: PPUSH
35505: LD_VAR 0 2
35509: PUSH
35510: LD_VAR 0 5
35514: PUSH
35515: LD_INT 1
35517: MINUS
35518: ARRAY
35519: PPUSH
35520: LD_VAR 0 7
35524: PUSH
35525: LD_VAR 0 5
35529: ARRAY
35530: PPUSH
35531: CALL_OW 1
35535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35536: LD_ADDR_VAR 0 7
35540: PUSH
35541: LD_VAR 0 7
35545: PPUSH
35546: LD_VAR 0 5
35550: PUSH
35551: LD_INT 1
35553: MINUS
35554: PPUSH
35555: LD_VAR 0 6
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
// end ;
35565: GO 35482
35567: POP
35568: POP
// result := s_arr [ 1 ] ;
35569: LD_ADDR_VAR 0 4
35573: PUSH
35574: LD_VAR 0 7
35578: PUSH
35579: LD_INT 1
35581: ARRAY
35582: ST_TO_ADDR
// end ; end ;
35583: LD_VAR 0 4
35587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35588: LD_INT 0
35590: PPUSH
35591: PPUSH
// if not list then
35592: LD_VAR 0 1
35596: NOT
35597: IFFALSE 35601
// exit ;
35599: GO 35692
// i := list [ pos1 ] ;
35601: LD_ADDR_VAR 0 5
35605: PUSH
35606: LD_VAR 0 1
35610: PUSH
35611: LD_VAR 0 2
35615: ARRAY
35616: ST_TO_ADDR
// if not i then
35617: LD_VAR 0 5
35621: NOT
35622: IFFALSE 35626
// exit ;
35624: GO 35692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35626: LD_ADDR_VAR 0 1
35630: PUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_VAR 0 2
35640: PPUSH
35641: LD_VAR 0 1
35645: PUSH
35646: LD_VAR 0 3
35650: ARRAY
35651: PPUSH
35652: CALL_OW 1
35656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35657: LD_ADDR_VAR 0 1
35661: PUSH
35662: LD_VAR 0 1
35666: PPUSH
35667: LD_VAR 0 3
35671: PPUSH
35672: LD_VAR 0 5
35676: PPUSH
35677: CALL_OW 1
35681: ST_TO_ADDR
// result := list ;
35682: LD_ADDR_VAR 0 4
35686: PUSH
35687: LD_VAR 0 1
35691: ST_TO_ADDR
// end ;
35692: LD_VAR 0 4
35696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35697: LD_INT 0
35699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35700: LD_ADDR_VAR 0 5
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 250
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 251
35724: PPUSH
35725: LD_VAR 0 2
35729: PPUSH
35730: LD_VAR 0 3
35734: PPUSH
35735: LD_VAR 0 4
35739: PPUSH
35740: CALL 35750 0 5
35744: ST_TO_ADDR
// end ;
35745: LD_VAR 0 5
35749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35750: LD_INT 0
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
// if not list then
35756: LD_VAR 0 3
35760: NOT
35761: IFFALSE 35765
// exit ;
35763: GO 36153
// result := [ ] ;
35765: LD_ADDR_VAR 0 6
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// for i in list do
35772: LD_ADDR_VAR 0 7
35776: PUSH
35777: LD_VAR 0 3
35781: PUSH
35782: FOR_IN
35783: IFFALSE 35985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35785: LD_ADDR_VAR 0 9
35789: PUSH
35790: LD_VAR 0 7
35794: PPUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: LD_VAR 0 2
35804: PPUSH
35805: CALL_OW 297
35809: ST_TO_ADDR
// if not result then
35810: LD_VAR 0 6
35814: NOT
35815: IFFALSE 35841
// result := [ [ i , tmp ] ] else
35817: LD_ADDR_VAR 0 6
35821: PUSH
35822: LD_VAR 0 7
35826: PUSH
35827: LD_VAR 0 9
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: ST_TO_ADDR
35839: GO 35983
// begin if result [ result ] [ 2 ] < tmp then
35841: LD_VAR 0 6
35845: PUSH
35846: LD_VAR 0 6
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: PUSH
35856: LD_VAR 0 9
35860: LESS
35861: IFFALSE 35903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35863: LD_ADDR_VAR 0 6
35867: PUSH
35868: LD_VAR 0 6
35872: PPUSH
35873: LD_VAR 0 6
35877: PUSH
35878: LD_INT 1
35880: PLUS
35881: PPUSH
35882: LD_VAR 0 7
35886: PUSH
35887: LD_VAR 0 9
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PPUSH
35896: CALL_OW 2
35900: ST_TO_ADDR
35901: GO 35983
// for j = 1 to result do
35903: LD_ADDR_VAR 0 8
35907: PUSH
35908: DOUBLE
35909: LD_INT 1
35911: DEC
35912: ST_TO_ADDR
35913: LD_VAR 0 6
35917: PUSH
35918: FOR_TO
35919: IFFALSE 35981
// begin if tmp < result [ j ] [ 2 ] then
35921: LD_VAR 0 9
35925: PUSH
35926: LD_VAR 0 6
35930: PUSH
35931: LD_VAR 0 8
35935: ARRAY
35936: PUSH
35937: LD_INT 2
35939: ARRAY
35940: LESS
35941: IFFALSE 35979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35943: LD_ADDR_VAR 0 6
35947: PUSH
35948: LD_VAR 0 6
35952: PPUSH
35953: LD_VAR 0 8
35957: PPUSH
35958: LD_VAR 0 7
35962: PUSH
35963: LD_VAR 0 9
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 2
35976: ST_TO_ADDR
// break ;
35977: GO 35981
// end ; end ;
35979: GO 35918
35981: POP
35982: POP
// end ; end ;
35983: GO 35782
35985: POP
35986: POP
// if result and not asc then
35987: LD_VAR 0 6
35991: PUSH
35992: LD_VAR 0 4
35996: NOT
35997: AND
35998: IFFALSE 36073
// begin tmp := result ;
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_VAR 0 6
36009: ST_TO_ADDR
// for i = tmp downto 1 do
36010: LD_ADDR_VAR 0 7
36014: PUSH
36015: DOUBLE
36016: LD_VAR 0 9
36020: INC
36021: ST_TO_ADDR
36022: LD_INT 1
36024: PUSH
36025: FOR_DOWNTO
36026: IFFALSE 36071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36028: LD_ADDR_VAR 0 6
36032: PUSH
36033: LD_VAR 0 6
36037: PPUSH
36038: LD_VAR 0 9
36042: PUSH
36043: LD_VAR 0 7
36047: MINUS
36048: PUSH
36049: LD_INT 1
36051: PLUS
36052: PPUSH
36053: LD_VAR 0 9
36057: PUSH
36058: LD_VAR 0 7
36062: ARRAY
36063: PPUSH
36064: CALL_OW 1
36068: ST_TO_ADDR
36069: GO 36025
36071: POP
36072: POP
// end ; tmp := [ ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: EMPTY
36079: ST_TO_ADDR
// if mode then
36080: LD_VAR 0 5
36084: IFFALSE 36153
// begin for i = 1 to result do
36086: LD_ADDR_VAR 0 7
36090: PUSH
36091: DOUBLE
36092: LD_INT 1
36094: DEC
36095: ST_TO_ADDR
36096: LD_VAR 0 6
36100: PUSH
36101: FOR_TO
36102: IFFALSE 36141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36104: LD_ADDR_VAR 0 9
36108: PUSH
36109: LD_VAR 0 9
36113: PPUSH
36114: LD_VAR 0 7
36118: PPUSH
36119: LD_VAR 0 6
36123: PUSH
36124: LD_VAR 0 7
36128: ARRAY
36129: PUSH
36130: LD_INT 1
36132: ARRAY
36133: PPUSH
36134: CALL_OW 1
36138: ST_TO_ADDR
36139: GO 36101
36141: POP
36142: POP
// result := tmp ;
36143: LD_ADDR_VAR 0 6
36147: PUSH
36148: LD_VAR 0 9
36152: ST_TO_ADDR
// end ; end ;
36153: LD_VAR 0 6
36157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36158: LD_INT 0
36160: PPUSH
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
36165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36166: LD_ADDR_VAR 0 5
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: EMPTY
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// if not x or not y then
36188: LD_VAR 0 2
36192: NOT
36193: PUSH
36194: LD_VAR 0 3
36198: NOT
36199: OR
36200: IFFALSE 36204
// exit ;
36202: GO 37854
// if not range then
36204: LD_VAR 0 4
36208: NOT
36209: IFFALSE 36219
// range := 10 ;
36211: LD_ADDR_VAR 0 4
36215: PUSH
36216: LD_INT 10
36218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36219: LD_ADDR_VAR 0 8
36223: PUSH
36224: LD_INT 81
36226: PUSH
36227: LD_VAR 0 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 92
36238: PUSH
36239: LD_VAR 0 2
36243: PUSH
36244: LD_VAR 0 3
36248: PUSH
36249: LD_VAR 0 4
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: LD_INT 21
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: PPUSH
36282: CALL_OW 69
36286: ST_TO_ADDR
// if not tmp then
36287: LD_VAR 0 8
36291: NOT
36292: IFFALSE 36296
// exit ;
36294: GO 37854
// for i in tmp do
36296: LD_ADDR_VAR 0 6
36300: PUSH
36301: LD_VAR 0 8
36305: PUSH
36306: FOR_IN
36307: IFFALSE 37829
// begin points := [ 0 , 0 , 0 ] ;
36309: LD_ADDR_VAR 0 9
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: ST_TO_ADDR
// bpoints := 1 ;
36328: LD_ADDR_VAR 0 10
36332: PUSH
36333: LD_INT 1
36335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36336: LD_VAR 0 6
36340: PPUSH
36341: CALL_OW 247
36345: PUSH
36346: LD_INT 1
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36932
36354: POP
// begin if GetClass ( i ) = 1 then
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 257
36364: PUSH
36365: LD_INT 1
36367: EQUAL
36368: IFFALSE 36389
// points := [ 10 , 5 , 3 ] ;
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_INT 10
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36389: LD_VAR 0 6
36393: PPUSH
36394: CALL_OW 257
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 3
36404: PUSH
36405: LD_INT 4
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: IN
36413: IFFALSE 36434
// points := [ 3 , 2 , 1 ] ;
36415: LD_ADDR_VAR 0 9
36419: PUSH
36420: LD_INT 3
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36434: LD_VAR 0 6
36438: PPUSH
36439: CALL_OW 257
36443: PUSH
36444: LD_INT 5
36446: EQUAL
36447: IFFALSE 36468
// points := [ 130 , 5 , 2 ] ;
36449: LD_ADDR_VAR 0 9
36453: PUSH
36454: LD_INT 130
36456: PUSH
36457: LD_INT 5
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36468: LD_VAR 0 6
36472: PPUSH
36473: CALL_OW 257
36477: PUSH
36478: LD_INT 8
36480: EQUAL
36481: IFFALSE 36502
// points := [ 35 , 35 , 30 ] ;
36483: LD_ADDR_VAR 0 9
36487: PUSH
36488: LD_INT 35
36490: PUSH
36491: LD_INT 35
36493: PUSH
36494: LD_INT 30
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 257
36511: PUSH
36512: LD_INT 9
36514: EQUAL
36515: IFFALSE 36536
// points := [ 20 , 55 , 40 ] ;
36517: LD_ADDR_VAR 0 9
36521: PUSH
36522: LD_INT 20
36524: PUSH
36525: LD_INT 55
36527: PUSH
36528: LD_INT 40
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36536: LD_VAR 0 6
36540: PPUSH
36541: CALL_OW 257
36545: PUSH
36546: LD_INT 12
36548: PUSH
36549: LD_INT 16
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: IN
36556: IFFALSE 36577
// points := [ 5 , 3 , 2 ] ;
36558: LD_ADDR_VAR 0 9
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 3
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36577: LD_VAR 0 6
36581: PPUSH
36582: CALL_OW 257
36586: PUSH
36587: LD_INT 17
36589: EQUAL
36590: IFFALSE 36611
// points := [ 100 , 50 , 75 ] ;
36592: LD_ADDR_VAR 0 9
36596: PUSH
36597: LD_INT 100
36599: PUSH
36600: LD_INT 50
36602: PUSH
36603: LD_INT 75
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36611: LD_VAR 0 6
36615: PPUSH
36616: CALL_OW 257
36620: PUSH
36621: LD_INT 15
36623: EQUAL
36624: IFFALSE 36645
// points := [ 10 , 5 , 3 ] ;
36626: LD_ADDR_VAR 0 9
36630: PUSH
36631: LD_INT 10
36633: PUSH
36634: LD_INT 5
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36645: LD_VAR 0 6
36649: PPUSH
36650: CALL_OW 257
36654: PUSH
36655: LD_INT 14
36657: EQUAL
36658: IFFALSE 36679
// points := [ 10 , 0 , 0 ] ;
36660: LD_ADDR_VAR 0 9
36664: PUSH
36665: LD_INT 10
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36679: LD_VAR 0 6
36683: PPUSH
36684: CALL_OW 257
36688: PUSH
36689: LD_INT 11
36691: EQUAL
36692: IFFALSE 36713
// points := [ 30 , 10 , 5 ] ;
36694: LD_ADDR_VAR 0 9
36698: PUSH
36699: LD_INT 30
36701: PUSH
36702: LD_INT 10
36704: PUSH
36705: LD_INT 5
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_INT 5
36720: PPUSH
36721: CALL_OW 321
36725: PUSH
36726: LD_INT 2
36728: EQUAL
36729: IFFALSE 36746
// bpoints := bpoints * 1.8 ;
36731: LD_ADDR_VAR 0 10
36735: PUSH
36736: LD_VAR 0 10
36740: PUSH
36741: LD_REAL  1.80000000000000E+0000
36744: MUL
36745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36746: LD_VAR 0 6
36750: PPUSH
36751: CALL_OW 257
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: LD_INT 4
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: IN
36774: PUSH
36775: LD_VAR 0 1
36779: PPUSH
36780: LD_INT 51
36782: PPUSH
36783: CALL_OW 321
36787: PUSH
36788: LD_INT 2
36790: EQUAL
36791: AND
36792: IFFALSE 36809
// bpoints := bpoints * 1.2 ;
36794: LD_ADDR_VAR 0 10
36798: PUSH
36799: LD_VAR 0 10
36803: PUSH
36804: LD_REAL  1.20000000000000E+0000
36807: MUL
36808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 257
36818: PUSH
36819: LD_INT 5
36821: PUSH
36822: LD_INT 7
36824: PUSH
36825: LD_INT 9
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: IN
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: LD_INT 52
36841: PPUSH
36842: CALL_OW 321
36846: PUSH
36847: LD_INT 2
36849: EQUAL
36850: AND
36851: IFFALSE 36868
// bpoints := bpoints * 1.5 ;
36853: LD_ADDR_VAR 0 10
36857: PUSH
36858: LD_VAR 0 10
36862: PUSH
36863: LD_REAL  1.50000000000000E+0000
36866: MUL
36867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36868: LD_VAR 0 1
36872: PPUSH
36873: LD_INT 66
36875: PPUSH
36876: CALL_OW 321
36880: PUSH
36881: LD_INT 2
36883: EQUAL
36884: IFFALSE 36901
// bpoints := bpoints * 1.1 ;
36886: LD_ADDR_VAR 0 10
36890: PUSH
36891: LD_VAR 0 10
36895: PUSH
36896: LD_REAL  1.10000000000000E+0000
36899: MUL
36900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36901: LD_ADDR_VAR 0 10
36905: PUSH
36906: LD_VAR 0 10
36910: PUSH
36911: LD_VAR 0 6
36915: PPUSH
36916: LD_INT 1
36918: PPUSH
36919: CALL_OW 259
36923: PUSH
36924: LD_REAL  1.15000000000000E+0000
36927: MUL
36928: MUL
36929: ST_TO_ADDR
// end ; unit_vehicle :
36930: GO 37758
36932: LD_INT 2
36934: DOUBLE
36935: EQUAL
36936: IFTRUE 36940
36938: GO 37746
36940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36941: LD_VAR 0 6
36945: PPUSH
36946: CALL_OW 264
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 42
36956: PUSH
36957: LD_INT 24
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: IN
36965: IFFALSE 36986
// points := [ 25 , 5 , 3 ] ;
36967: LD_ADDR_VAR 0 9
36971: PUSH
36972: LD_INT 25
36974: PUSH
36975: LD_INT 5
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36986: LD_VAR 0 6
36990: PPUSH
36991: CALL_OW 264
36995: PUSH
36996: LD_INT 4
36998: PUSH
36999: LD_INT 43
37001: PUSH
37002: LD_INT 25
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: IN
37010: IFFALSE 37031
// points := [ 40 , 15 , 5 ] ;
37012: LD_ADDR_VAR 0 9
37016: PUSH
37017: LD_INT 40
37019: PUSH
37020: LD_INT 15
37022: PUSH
37023: LD_INT 5
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37031: LD_VAR 0 6
37035: PPUSH
37036: CALL_OW 264
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 23
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: IN
37051: IFFALSE 37072
// points := [ 7 , 25 , 8 ] ;
37053: LD_ADDR_VAR 0 9
37057: PUSH
37058: LD_INT 7
37060: PUSH
37061: LD_INT 25
37063: PUSH
37064: LD_INT 8
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37072: LD_VAR 0 6
37076: PPUSH
37077: CALL_OW 264
37081: PUSH
37082: LD_INT 5
37084: PUSH
37085: LD_INT 27
37087: PUSH
37088: LD_INT 44
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: IN
37096: IFFALSE 37117
// points := [ 14 , 50 , 16 ] ;
37098: LD_ADDR_VAR 0 9
37102: PUSH
37103: LD_INT 14
37105: PUSH
37106: LD_INT 50
37108: PUSH
37109: LD_INT 16
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37117: LD_VAR 0 6
37121: PPUSH
37122: CALL_OW 264
37126: PUSH
37127: LD_INT 6
37129: PUSH
37130: LD_INT 46
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: IN
37137: IFFALSE 37158
// points := [ 32 , 120 , 70 ] ;
37139: LD_ADDR_VAR 0 9
37143: PUSH
37144: LD_INT 32
37146: PUSH
37147: LD_INT 120
37149: PUSH
37150: LD_INT 70
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37158: LD_VAR 0 6
37162: PPUSH
37163: CALL_OW 264
37167: PUSH
37168: LD_INT 7
37170: PUSH
37171: LD_INT 28
37173: PUSH
37174: LD_INT 45
37176: PUSH
37177: LD_INT 92
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: IN
37186: IFFALSE 37207
// points := [ 35 , 20 , 45 ] ;
37188: LD_ADDR_VAR 0 9
37192: PUSH
37193: LD_INT 35
37195: PUSH
37196: LD_INT 20
37198: PUSH
37199: LD_INT 45
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37207: LD_VAR 0 6
37211: PPUSH
37212: CALL_OW 264
37216: PUSH
37217: LD_INT 47
37219: PUSH
37220: EMPTY
37221: LIST
37222: IN
37223: IFFALSE 37244
// points := [ 67 , 45 , 75 ] ;
37225: LD_ADDR_VAR 0 9
37229: PUSH
37230: LD_INT 67
37232: PUSH
37233: LD_INT 45
37235: PUSH
37236: LD_INT 75
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37244: LD_VAR 0 6
37248: PPUSH
37249: CALL_OW 264
37253: PUSH
37254: LD_INT 26
37256: PUSH
37257: EMPTY
37258: LIST
37259: IN
37260: IFFALSE 37281
// points := [ 120 , 30 , 80 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 120
37269: PUSH
37270: LD_INT 30
37272: PUSH
37273: LD_INT 80
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 264
37290: PUSH
37291: LD_INT 22
37293: PUSH
37294: EMPTY
37295: LIST
37296: IN
37297: IFFALSE 37318
// points := [ 40 , 1 , 1 ] ;
37299: LD_ADDR_VAR 0 9
37303: PUSH
37304: LD_INT 40
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 264
37327: PUSH
37328: LD_INT 29
37330: PUSH
37331: EMPTY
37332: LIST
37333: IN
37334: IFFALSE 37355
// points := [ 70 , 200 , 400 ] ;
37336: LD_ADDR_VAR 0 9
37340: PUSH
37341: LD_INT 70
37343: PUSH
37344: LD_INT 200
37346: PUSH
37347: LD_INT 400
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 264
37364: PUSH
37365: LD_INT 14
37367: PUSH
37368: LD_INT 53
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: IN
37375: IFFALSE 37396
// points := [ 40 , 10 , 20 ] ;
37377: LD_ADDR_VAR 0 9
37381: PUSH
37382: LD_INT 40
37384: PUSH
37385: LD_INT 10
37387: PUSH
37388: LD_INT 20
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37396: LD_VAR 0 6
37400: PPUSH
37401: CALL_OW 264
37405: PUSH
37406: LD_INT 9
37408: PUSH
37409: EMPTY
37410: LIST
37411: IN
37412: IFFALSE 37433
// points := [ 5 , 70 , 20 ] ;
37414: LD_ADDR_VAR 0 9
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: LD_INT 70
37424: PUSH
37425: LD_INT 20
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37433: LD_VAR 0 6
37437: PPUSH
37438: CALL_OW 264
37442: PUSH
37443: LD_INT 10
37445: PUSH
37446: EMPTY
37447: LIST
37448: IN
37449: IFFALSE 37470
// points := [ 35 , 110 , 70 ] ;
37451: LD_ADDR_VAR 0 9
37455: PUSH
37456: LD_INT 35
37458: PUSH
37459: LD_INT 110
37461: PUSH
37462: LD_INT 70
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37470: LD_VAR 0 6
37474: PPUSH
37475: CALL_OW 265
37479: PUSH
37480: LD_INT 25
37482: EQUAL
37483: IFFALSE 37504
// points := [ 80 , 65 , 100 ] ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_INT 80
37492: PUSH
37493: LD_INT 65
37495: PUSH
37496: LD_INT 100
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 263
37513: PUSH
37514: LD_INT 1
37516: EQUAL
37517: IFFALSE 37552
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37519: LD_ADDR_VAR 0 10
37523: PUSH
37524: LD_VAR 0 10
37528: PUSH
37529: LD_VAR 0 6
37533: PPUSH
37534: CALL_OW 311
37538: PPUSH
37539: LD_INT 3
37541: PPUSH
37542: CALL_OW 259
37546: PUSH
37547: LD_INT 4
37549: MUL
37550: MUL
37551: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37552: LD_VAR 0 6
37556: PPUSH
37557: CALL_OW 263
37561: PUSH
37562: LD_INT 2
37564: EQUAL
37565: IFFALSE 37616
// begin j := IsControledBy ( i ) ;
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: LD_VAR 0 6
37576: PPUSH
37577: CALL_OW 312
37581: ST_TO_ADDR
// if j then
37582: LD_VAR 0 7
37586: IFFALSE 37616
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37588: LD_ADDR_VAR 0 10
37592: PUSH
37593: LD_VAR 0 10
37597: PUSH
37598: LD_VAR 0 7
37602: PPUSH
37603: LD_INT 3
37605: PPUSH
37606: CALL_OW 259
37610: PUSH
37611: LD_INT 3
37613: MUL
37614: MUL
37615: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37616: LD_VAR 0 6
37620: PPUSH
37621: CALL_OW 264
37625: PUSH
37626: LD_INT 5
37628: PUSH
37629: LD_INT 6
37631: PUSH
37632: LD_INT 46
37634: PUSH
37635: LD_INT 44
37637: PUSH
37638: LD_INT 47
37640: PUSH
37641: LD_INT 45
37643: PUSH
37644: LD_INT 28
37646: PUSH
37647: LD_INT 7
37649: PUSH
37650: LD_INT 27
37652: PUSH
37653: LD_INT 29
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: IN
37668: PUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: LD_INT 52
37676: PPUSH
37677: CALL_OW 321
37681: PUSH
37682: LD_INT 2
37684: EQUAL
37685: AND
37686: IFFALSE 37703
// bpoints := bpoints * 1.2 ;
37688: LD_ADDR_VAR 0 10
37692: PUSH
37693: LD_VAR 0 10
37697: PUSH
37698: LD_REAL  1.20000000000000E+0000
37701: MUL
37702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37703: LD_VAR 0 6
37707: PPUSH
37708: CALL_OW 264
37712: PUSH
37713: LD_INT 6
37715: PUSH
37716: LD_INT 46
37718: PUSH
37719: LD_INT 47
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: IN
37727: IFFALSE 37744
// bpoints := bpoints * 1.2 ;
37729: LD_ADDR_VAR 0 10
37733: PUSH
37734: LD_VAR 0 10
37738: PUSH
37739: LD_REAL  1.20000000000000E+0000
37742: MUL
37743: ST_TO_ADDR
// end ; unit_building :
37744: GO 37758
37746: LD_INT 3
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 37757
37754: POP
// ; end ;
37755: GO 37758
37757: POP
// for j = 1 to 3 do
37758: LD_ADDR_VAR 0 7
37762: PUSH
37763: DOUBLE
37764: LD_INT 1
37766: DEC
37767: ST_TO_ADDR
37768: LD_INT 3
37770: PUSH
37771: FOR_TO
37772: IFFALSE 37825
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37774: LD_ADDR_VAR 0 5
37778: PUSH
37779: LD_VAR 0 5
37783: PPUSH
37784: LD_VAR 0 7
37788: PPUSH
37789: LD_VAR 0 5
37793: PUSH
37794: LD_VAR 0 7
37798: ARRAY
37799: PUSH
37800: LD_VAR 0 9
37804: PUSH
37805: LD_VAR 0 7
37809: ARRAY
37810: PUSH
37811: LD_VAR 0 10
37815: MUL
37816: PLUS
37817: PPUSH
37818: CALL_OW 1
37822: ST_TO_ADDR
37823: GO 37771
37825: POP
37826: POP
// end ;
37827: GO 36306
37829: POP
37830: POP
// result := Replace ( result , 4 , tmp ) ;
37831: LD_ADDR_VAR 0 5
37835: PUSH
37836: LD_VAR 0 5
37840: PPUSH
37841: LD_INT 4
37843: PPUSH
37844: LD_VAR 0 8
37848: PPUSH
37849: CALL_OW 1
37853: ST_TO_ADDR
// end ;
37854: LD_VAR 0 5
37858: RET
// export function DangerAtRange ( unit , range ) ; begin
37859: LD_INT 0
37861: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37862: LD_ADDR_VAR 0 3
37866: PUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 255
37876: PPUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 250
37886: PPUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 251
37896: PPUSH
37897: LD_VAR 0 2
37901: PPUSH
37902: CALL 36158 0 4
37906: ST_TO_ADDR
// end ;
37907: LD_VAR 0 3
37911: RET
// export function DangerInArea ( side , area ) ; begin
37912: LD_INT 0
37914: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37915: LD_ADDR_VAR 0 3
37919: PUSH
37920: LD_VAR 0 2
37924: PPUSH
37925: LD_INT 81
37927: PUSH
37928: LD_VAR 0 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PPUSH
37937: CALL_OW 70
37941: ST_TO_ADDR
// end ;
37942: LD_VAR 0 3
37946: RET
// export function IsExtension ( b ) ; begin
37947: LD_INT 0
37949: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37950: LD_ADDR_VAR 0 2
37954: PUSH
37955: LD_VAR 0 1
37959: PUSH
37960: LD_INT 23
37962: PUSH
37963: LD_INT 20
37965: PUSH
37966: LD_INT 22
37968: PUSH
37969: LD_INT 17
37971: PUSH
37972: LD_INT 24
37974: PUSH
37975: LD_INT 21
37977: PUSH
37978: LD_INT 19
37980: PUSH
37981: LD_INT 16
37983: PUSH
37984: LD_INT 25
37986: PUSH
37987: LD_INT 18
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: IN
38002: ST_TO_ADDR
// end ;
38003: LD_VAR 0 2
38007: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38008: LD_INT 0
38010: PPUSH
38011: PPUSH
38012: PPUSH
// result := [ ] ;
38013: LD_ADDR_VAR 0 4
38017: PUSH
38018: EMPTY
38019: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 2
38029: PPUSH
38030: LD_INT 21
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PPUSH
38040: CALL_OW 70
38044: ST_TO_ADDR
// if not tmp then
38045: LD_VAR 0 5
38049: NOT
38050: IFFALSE 38054
// exit ;
38052: GO 38118
// if checkLink then
38054: LD_VAR 0 3
38058: IFFALSE 38108
// begin for i in tmp do
38060: LD_ADDR_VAR 0 6
38064: PUSH
38065: LD_VAR 0 5
38069: PUSH
38070: FOR_IN
38071: IFFALSE 38106
// if GetBase ( i ) <> base then
38073: LD_VAR 0 6
38077: PPUSH
38078: CALL_OW 274
38082: PUSH
38083: LD_VAR 0 1
38087: NONEQUAL
38088: IFFALSE 38104
// ComLinkToBase ( base , i ) ;
38090: LD_VAR 0 1
38094: PPUSH
38095: LD_VAR 0 6
38099: PPUSH
38100: CALL_OW 169
38104: GO 38070
38106: POP
38107: POP
// end ; result := tmp ;
38108: LD_ADDR_VAR 0 4
38112: PUSH
38113: LD_VAR 0 5
38117: ST_TO_ADDR
// end ;
38118: LD_VAR 0 4
38122: RET
// export function ComComplete ( units , b ) ; var i ; begin
38123: LD_INT 0
38125: PPUSH
38126: PPUSH
// if not units then
38127: LD_VAR 0 1
38131: NOT
38132: IFFALSE 38136
// exit ;
38134: GO 38226
// for i in units do
38136: LD_ADDR_VAR 0 4
38140: PUSH
38141: LD_VAR 0 1
38145: PUSH
38146: FOR_IN
38147: IFFALSE 38224
// if BuildingStatus ( b ) = bs_build then
38149: LD_VAR 0 2
38153: PPUSH
38154: CALL_OW 461
38158: PUSH
38159: LD_INT 1
38161: EQUAL
38162: IFFALSE 38222
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38164: LD_VAR 0 4
38168: PPUSH
38169: LD_STRING h
38171: PUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL_OW 250
38181: PUSH
38182: LD_VAR 0 2
38186: PPUSH
38187: CALL_OW 251
38191: PUSH
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: PPUSH
38218: CALL_OW 446
38222: GO 38146
38224: POP
38225: POP
// end ;
38226: LD_VAR 0 3
38230: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38231: LD_INT 0
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38239: LD_VAR 0 1
38243: NOT
38244: PUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 263
38254: PUSH
38255: LD_INT 2
38257: NONEQUAL
38258: OR
38259: IFFALSE 38263
// exit ;
38261: GO 38579
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38263: LD_ADDR_VAR 0 6
38267: PUSH
38268: LD_INT 22
38270: PUSH
38271: LD_VAR 0 1
38275: PPUSH
38276: CALL_OW 255
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 36
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 34
38300: PUSH
38301: LD_INT 31
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PPUSH
38317: CALL_OW 69
38321: ST_TO_ADDR
// if not tmp then
38322: LD_VAR 0 6
38326: NOT
38327: IFFALSE 38331
// exit ;
38329: GO 38579
// result := [ ] ;
38331: LD_ADDR_VAR 0 2
38335: PUSH
38336: EMPTY
38337: ST_TO_ADDR
// for i in tmp do
38338: LD_ADDR_VAR 0 3
38342: PUSH
38343: LD_VAR 0 6
38347: PUSH
38348: FOR_IN
38349: IFFALSE 38420
// begin t := UnitsInside ( i ) ;
38351: LD_ADDR_VAR 0 4
38355: PUSH
38356: LD_VAR 0 3
38360: PPUSH
38361: CALL_OW 313
38365: ST_TO_ADDR
// if t then
38366: LD_VAR 0 4
38370: IFFALSE 38418
// for j in t do
38372: LD_ADDR_VAR 0 7
38376: PUSH
38377: LD_VAR 0 4
38381: PUSH
38382: FOR_IN
38383: IFFALSE 38416
// result := Replace ( result , result + 1 , j ) ;
38385: LD_ADDR_VAR 0 2
38389: PUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_VAR 0 2
38399: PUSH
38400: LD_INT 1
38402: PLUS
38403: PPUSH
38404: LD_VAR 0 7
38408: PPUSH
38409: CALL_OW 1
38413: ST_TO_ADDR
38414: GO 38382
38416: POP
38417: POP
// end ;
38418: GO 38348
38420: POP
38421: POP
// if not result then
38422: LD_VAR 0 2
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 38579
// mech := result [ 1 ] ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_VAR 0 2
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: ST_TO_ADDR
// if result > 1 then
38445: LD_VAR 0 2
38449: PUSH
38450: LD_INT 1
38452: GREATER
38453: IFFALSE 38565
// begin for i = 2 to result do
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: DOUBLE
38461: LD_INT 2
38463: DEC
38464: ST_TO_ADDR
38465: LD_VAR 0 2
38469: PUSH
38470: FOR_TO
38471: IFFALSE 38563
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38473: LD_ADDR_VAR 0 4
38477: PUSH
38478: LD_VAR 0 2
38482: PUSH
38483: LD_VAR 0 3
38487: ARRAY
38488: PPUSH
38489: LD_INT 3
38491: PPUSH
38492: CALL_OW 259
38496: PUSH
38497: LD_VAR 0 2
38501: PUSH
38502: LD_VAR 0 3
38506: ARRAY
38507: PPUSH
38508: CALL_OW 432
38512: MINUS
38513: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38514: LD_VAR 0 4
38518: PUSH
38519: LD_VAR 0 5
38523: PPUSH
38524: LD_INT 3
38526: PPUSH
38527: CALL_OW 259
38531: PUSH
38532: LD_VAR 0 5
38536: PPUSH
38537: CALL_OW 432
38541: MINUS
38542: GREATEREQUAL
38543: IFFALSE 38561
// mech := result [ i ] ;
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: LD_VAR 0 2
38554: PUSH
38555: LD_VAR 0 3
38559: ARRAY
38560: ST_TO_ADDR
// end ;
38561: GO 38470
38563: POP
38564: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38565: LD_VAR 0 1
38569: PPUSH
38570: LD_VAR 0 5
38574: PPUSH
38575: CALL_OW 135
// end ;
38579: LD_VAR 0 2
38583: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38584: LD_INT 0
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
38598: PPUSH
// result := [ ] ;
38599: LD_ADDR_VAR 0 7
38603: PUSH
38604: EMPTY
38605: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 266
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: IN
38626: NOT
38627: IFFALSE 38631
// exit ;
38629: GO 40265
// if name then
38631: LD_VAR 0 3
38635: IFFALSE 38651
// SetBName ( base_dep , name ) ;
38637: LD_VAR 0 1
38641: PPUSH
38642: LD_VAR 0 3
38646: PPUSH
38647: CALL_OW 500
// base := GetBase ( base_dep ) ;
38651: LD_ADDR_VAR 0 15
38655: PUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: CALL_OW 274
38665: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38666: LD_ADDR_VAR 0 16
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 255
38680: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38681: LD_ADDR_VAR 0 17
38685: PUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 248
38695: ST_TO_ADDR
// if sources then
38696: LD_VAR 0 5
38700: IFFALSE 38747
// for i = 1 to 3 do
38702: LD_ADDR_VAR 0 8
38706: PUSH
38707: DOUBLE
38708: LD_INT 1
38710: DEC
38711: ST_TO_ADDR
38712: LD_INT 3
38714: PUSH
38715: FOR_TO
38716: IFFALSE 38745
// AddResourceType ( base , i , sources [ i ] ) ;
38718: LD_VAR 0 15
38722: PPUSH
38723: LD_VAR 0 8
38727: PPUSH
38728: LD_VAR 0 5
38732: PUSH
38733: LD_VAR 0 8
38737: ARRAY
38738: PPUSH
38739: CALL_OW 276
38743: GO 38715
38745: POP
38746: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38747: LD_ADDR_VAR 0 18
38751: PUSH
38752: LD_VAR 0 15
38756: PPUSH
38757: LD_VAR 0 2
38761: PPUSH
38762: LD_INT 1
38764: PPUSH
38765: CALL 38008 0 3
38769: ST_TO_ADDR
// InitHc ;
38770: CALL_OW 19
// InitUc ;
38774: CALL_OW 18
// uc_side := side ;
38778: LD_ADDR_OWVAR 20
38782: PUSH
38783: LD_VAR 0 16
38787: ST_TO_ADDR
// uc_nation := nation ;
38788: LD_ADDR_OWVAR 21
38792: PUSH
38793: LD_VAR 0 17
38797: ST_TO_ADDR
// if buildings then
38798: LD_VAR 0 18
38802: IFFALSE 40124
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38804: LD_ADDR_VAR 0 19
38808: PUSH
38809: LD_VAR 0 18
38813: PPUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 30
38819: PUSH
38820: LD_INT 29
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 30
38829: PUSH
38830: LD_INT 30
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PPUSH
38842: CALL_OW 72
38846: ST_TO_ADDR
// if tmp then
38847: LD_VAR 0 19
38851: IFFALSE 38899
// for i in tmp do
38853: LD_ADDR_VAR 0 8
38857: PUSH
38858: LD_VAR 0 19
38862: PUSH
38863: FOR_IN
38864: IFFALSE 38897
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38866: LD_VAR 0 8
38870: PPUSH
38871: CALL_OW 250
38875: PPUSH
38876: LD_VAR 0 8
38880: PPUSH
38881: CALL_OW 251
38885: PPUSH
38886: LD_VAR 0 16
38890: PPUSH
38891: CALL_OW 441
38895: GO 38863
38897: POP
38898: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38899: LD_VAR 0 18
38903: PPUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 30
38909: PUSH
38910: LD_INT 32
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 30
38919: PUSH
38920: LD_INT 33
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: PPUSH
38932: CALL_OW 72
38936: IFFALSE 39024
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38938: LD_ADDR_VAR 0 8
38942: PUSH
38943: LD_VAR 0 18
38947: PPUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 30
38953: PUSH
38954: LD_INT 32
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 30
38963: PUSH
38964: LD_INT 33
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL_OW 72
38980: PUSH
38981: FOR_IN
38982: IFFALSE 39022
// begin if not GetBWeapon ( i ) then
38984: LD_VAR 0 8
38988: PPUSH
38989: CALL_OW 269
38993: NOT
38994: IFFALSE 39020
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38996: LD_VAR 0 8
39000: PPUSH
39001: LD_VAR 0 8
39005: PPUSH
39006: LD_VAR 0 2
39010: PPUSH
39011: CALL 40270 0 2
39015: PPUSH
39016: CALL_OW 431
// end ;
39020: GO 38981
39022: POP
39023: POP
// end ; for i = 1 to personel do
39024: LD_ADDR_VAR 0 8
39028: PUSH
39029: DOUBLE
39030: LD_INT 1
39032: DEC
39033: ST_TO_ADDR
39034: LD_VAR 0 6
39038: PUSH
39039: FOR_TO
39040: IFFALSE 40104
// begin if i > 4 then
39042: LD_VAR 0 8
39046: PUSH
39047: LD_INT 4
39049: GREATER
39050: IFFALSE 39054
// break ;
39052: GO 40104
// case i of 1 :
39054: LD_VAR 0 8
39058: PUSH
39059: LD_INT 1
39061: DOUBLE
39062: EQUAL
39063: IFTRUE 39067
39065: GO 39147
39067: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39068: LD_ADDR_VAR 0 12
39072: PUSH
39073: LD_VAR 0 18
39077: PPUSH
39078: LD_INT 22
39080: PUSH
39081: LD_VAR 0 16
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 58
39092: PUSH
39093: EMPTY
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 32
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 30
39111: PUSH
39112: LD_INT 4
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 30
39121: PUSH
39122: LD_INT 5
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: PPUSH
39140: CALL_OW 72
39144: ST_TO_ADDR
39145: GO 39369
39147: LD_INT 2
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39217
39155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39156: LD_ADDR_VAR 0 12
39160: PUSH
39161: LD_VAR 0 18
39165: PPUSH
39166: LD_INT 22
39168: PUSH
39169: LD_VAR 0 16
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 30
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 30
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PPUSH
39210: CALL_OW 72
39214: ST_TO_ADDR
39215: GO 39369
39217: LD_INT 3
39219: DOUBLE
39220: EQUAL
39221: IFTRUE 39225
39223: GO 39287
39225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39226: LD_ADDR_VAR 0 12
39230: PUSH
39231: LD_VAR 0 18
39235: PPUSH
39236: LD_INT 22
39238: PUSH
39239: LD_VAR 0 16
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 30
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PPUSH
39280: CALL_OW 72
39284: ST_TO_ADDR
39285: GO 39369
39287: LD_INT 4
39289: DOUBLE
39290: EQUAL
39291: IFTRUE 39295
39293: GO 39368
39295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39296: LD_ADDR_VAR 0 12
39300: PUSH
39301: LD_VAR 0 18
39305: PPUSH
39306: LD_INT 22
39308: PUSH
39309: LD_VAR 0 16
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: LD_INT 30
39323: PUSH
39324: LD_INT 6
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 30
39333: PUSH
39334: LD_INT 7
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 30
39343: PUSH
39344: LD_INT 8
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PPUSH
39361: CALL_OW 72
39365: ST_TO_ADDR
39366: GO 39369
39368: POP
// if i = 1 then
39369: LD_VAR 0 8
39373: PUSH
39374: LD_INT 1
39376: EQUAL
39377: IFFALSE 39488
// begin tmp := [ ] ;
39379: LD_ADDR_VAR 0 19
39383: PUSH
39384: EMPTY
39385: ST_TO_ADDR
// for j in f do
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_VAR 0 12
39395: PUSH
39396: FOR_IN
39397: IFFALSE 39470
// if GetBType ( j ) = b_bunker then
39399: LD_VAR 0 9
39403: PPUSH
39404: CALL_OW 266
39408: PUSH
39409: LD_INT 32
39411: EQUAL
39412: IFFALSE 39439
// tmp := Insert ( tmp , 1 , j ) else
39414: LD_ADDR_VAR 0 19
39418: PUSH
39419: LD_VAR 0 19
39423: PPUSH
39424: LD_INT 1
39426: PPUSH
39427: LD_VAR 0 9
39431: PPUSH
39432: CALL_OW 2
39436: ST_TO_ADDR
39437: GO 39468
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39439: LD_ADDR_VAR 0 19
39443: PUSH
39444: LD_VAR 0 19
39448: PPUSH
39449: LD_VAR 0 19
39453: PUSH
39454: LD_INT 1
39456: PLUS
39457: PPUSH
39458: LD_VAR 0 9
39462: PPUSH
39463: CALL_OW 2
39467: ST_TO_ADDR
39468: GO 39396
39470: POP
39471: POP
// if tmp then
39472: LD_VAR 0 19
39476: IFFALSE 39488
// f := tmp ;
39478: LD_ADDR_VAR 0 12
39482: PUSH
39483: LD_VAR 0 19
39487: ST_TO_ADDR
// end ; x := personel [ i ] ;
39488: LD_ADDR_VAR 0 13
39492: PUSH
39493: LD_VAR 0 6
39497: PUSH
39498: LD_VAR 0 8
39502: ARRAY
39503: ST_TO_ADDR
// if x = - 1 then
39504: LD_VAR 0 13
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: EQUAL
39513: IFFALSE 39722
// begin for j in f do
39515: LD_ADDR_VAR 0 9
39519: PUSH
39520: LD_VAR 0 12
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39718
// repeat InitHc ;
39528: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39532: LD_VAR 0 9
39536: PPUSH
39537: CALL_OW 266
39541: PUSH
39542: LD_INT 5
39544: EQUAL
39545: IFFALSE 39615
// begin if UnitsInside ( j ) < 3 then
39547: LD_VAR 0 9
39551: PPUSH
39552: CALL_OW 313
39556: PUSH
39557: LD_INT 3
39559: LESS
39560: IFFALSE 39596
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39562: LD_INT 0
39564: PPUSH
39565: LD_INT 5
39567: PUSH
39568: LD_INT 8
39570: PUSH
39571: LD_INT 9
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: PUSH
39579: LD_VAR 0 17
39583: ARRAY
39584: PPUSH
39585: LD_VAR 0 4
39589: PPUSH
39590: CALL_OW 380
39594: GO 39613
// PrepareHuman ( false , i , skill ) ;
39596: LD_INT 0
39598: PPUSH
39599: LD_VAR 0 8
39603: PPUSH
39604: LD_VAR 0 4
39608: PPUSH
39609: CALL_OW 380
// end else
39613: GO 39632
// PrepareHuman ( false , i , skill ) ;
39615: LD_INT 0
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_VAR 0 4
39627: PPUSH
39628: CALL_OW 380
// un := CreateHuman ;
39632: LD_ADDR_VAR 0 14
39636: PUSH
39637: CALL_OW 44
39641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39642: LD_ADDR_VAR 0 7
39646: PUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: LD_INT 1
39654: PPUSH
39655: LD_VAR 0 14
39659: PPUSH
39660: CALL_OW 2
39664: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39665: LD_VAR 0 14
39669: PPUSH
39670: LD_VAR 0 9
39674: PPUSH
39675: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39679: LD_VAR 0 9
39683: PPUSH
39684: CALL_OW 313
39688: PUSH
39689: LD_INT 6
39691: EQUAL
39692: PUSH
39693: LD_VAR 0 9
39697: PPUSH
39698: CALL_OW 266
39702: PUSH
39703: LD_INT 32
39705: PUSH
39706: LD_INT 31
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: IN
39713: OR
39714: IFFALSE 39528
39716: GO 39525
39718: POP
39719: POP
// end else
39720: GO 40102
// for j = 1 to x do
39722: LD_ADDR_VAR 0 9
39726: PUSH
39727: DOUBLE
39728: LD_INT 1
39730: DEC
39731: ST_TO_ADDR
39732: LD_VAR 0 13
39736: PUSH
39737: FOR_TO
39738: IFFALSE 40100
// begin InitHc ;
39740: CALL_OW 19
// if not f then
39744: LD_VAR 0 12
39748: NOT
39749: IFFALSE 39838
// begin PrepareHuman ( false , i , skill ) ;
39751: LD_INT 0
39753: PPUSH
39754: LD_VAR 0 8
39758: PPUSH
39759: LD_VAR 0 4
39763: PPUSH
39764: CALL_OW 380
// un := CreateHuman ;
39768: LD_ADDR_VAR 0 14
39772: PUSH
39773: CALL_OW 44
39777: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39778: LD_ADDR_VAR 0 7
39782: PUSH
39783: LD_VAR 0 7
39787: PPUSH
39788: LD_INT 1
39790: PPUSH
39791: LD_VAR 0 14
39795: PPUSH
39796: CALL_OW 2
39800: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39801: LD_VAR 0 14
39805: PPUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 250
39815: PPUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 251
39825: PPUSH
39826: LD_INT 10
39828: PPUSH
39829: LD_INT 0
39831: PPUSH
39832: CALL_OW 50
// continue ;
39836: GO 39737
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39838: LD_VAR 0 12
39842: PUSH
39843: LD_INT 1
39845: ARRAY
39846: PPUSH
39847: CALL_OW 313
39851: PUSH
39852: LD_VAR 0 12
39856: PUSH
39857: LD_INT 1
39859: ARRAY
39860: PPUSH
39861: CALL_OW 266
39865: PUSH
39866: LD_INT 32
39868: PUSH
39869: LD_INT 31
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: IN
39876: AND
39877: PUSH
39878: LD_VAR 0 12
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: PPUSH
39887: CALL_OW 313
39891: PUSH
39892: LD_INT 6
39894: EQUAL
39895: OR
39896: IFFALSE 39916
// f := Delete ( f , 1 ) ;
39898: LD_ADDR_VAR 0 12
39902: PUSH
39903: LD_VAR 0 12
39907: PPUSH
39908: LD_INT 1
39910: PPUSH
39911: CALL_OW 3
39915: ST_TO_ADDR
// if not f then
39916: LD_VAR 0 12
39920: NOT
39921: IFFALSE 39939
// begin x := x + 2 ;
39923: LD_ADDR_VAR 0 13
39927: PUSH
39928: LD_VAR 0 13
39932: PUSH
39933: LD_INT 2
39935: PLUS
39936: ST_TO_ADDR
// continue ;
39937: GO 39737
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39939: LD_VAR 0 12
39943: PUSH
39944: LD_INT 1
39946: ARRAY
39947: PPUSH
39948: CALL_OW 266
39952: PUSH
39953: LD_INT 5
39955: EQUAL
39956: IFFALSE 40030
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39958: LD_VAR 0 12
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: CALL_OW 313
39971: PUSH
39972: LD_INT 3
39974: LESS
39975: IFFALSE 40011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39977: LD_INT 0
39979: PPUSH
39980: LD_INT 5
39982: PUSH
39983: LD_INT 8
39985: PUSH
39986: LD_INT 9
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: PUSH
39994: LD_VAR 0 17
39998: ARRAY
39999: PPUSH
40000: LD_VAR 0 4
40004: PPUSH
40005: CALL_OW 380
40009: GO 40028
// PrepareHuman ( false , i , skill ) ;
40011: LD_INT 0
40013: PPUSH
40014: LD_VAR 0 8
40018: PPUSH
40019: LD_VAR 0 4
40023: PPUSH
40024: CALL_OW 380
// end else
40028: GO 40047
// PrepareHuman ( false , i , skill ) ;
40030: LD_INT 0
40032: PPUSH
40033: LD_VAR 0 8
40037: PPUSH
40038: LD_VAR 0 4
40042: PPUSH
40043: CALL_OW 380
// un := CreateHuman ;
40047: LD_ADDR_VAR 0 14
40051: PUSH
40052: CALL_OW 44
40056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40057: LD_ADDR_VAR 0 7
40061: PUSH
40062: LD_VAR 0 7
40066: PPUSH
40067: LD_INT 1
40069: PPUSH
40070: LD_VAR 0 14
40074: PPUSH
40075: CALL_OW 2
40079: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40080: LD_VAR 0 14
40084: PPUSH
40085: LD_VAR 0 12
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PPUSH
40094: CALL_OW 52
// end ;
40098: GO 39737
40100: POP
40101: POP
// end ;
40102: GO 39039
40104: POP
40105: POP
// result := result ^ buildings ;
40106: LD_ADDR_VAR 0 7
40110: PUSH
40111: LD_VAR 0 7
40115: PUSH
40116: LD_VAR 0 18
40120: ADD
40121: ST_TO_ADDR
// end else
40122: GO 40265
// begin for i = 1 to personel do
40124: LD_ADDR_VAR 0 8
40128: PUSH
40129: DOUBLE
40130: LD_INT 1
40132: DEC
40133: ST_TO_ADDR
40134: LD_VAR 0 6
40138: PUSH
40139: FOR_TO
40140: IFFALSE 40263
// begin if i > 4 then
40142: LD_VAR 0 8
40146: PUSH
40147: LD_INT 4
40149: GREATER
40150: IFFALSE 40154
// break ;
40152: GO 40263
// x := personel [ i ] ;
40154: LD_ADDR_VAR 0 13
40158: PUSH
40159: LD_VAR 0 6
40163: PUSH
40164: LD_VAR 0 8
40168: ARRAY
40169: ST_TO_ADDR
// if x = - 1 then
40170: LD_VAR 0 13
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: EQUAL
40179: IFFALSE 40183
// continue ;
40181: GO 40139
// PrepareHuman ( false , i , skill ) ;
40183: LD_INT 0
40185: PPUSH
40186: LD_VAR 0 8
40190: PPUSH
40191: LD_VAR 0 4
40195: PPUSH
40196: CALL_OW 380
// un := CreateHuman ;
40200: LD_ADDR_VAR 0 14
40204: PUSH
40205: CALL_OW 44
40209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40210: LD_VAR 0 14
40214: PPUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 250
40224: PPUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 251
40234: PPUSH
40235: LD_INT 10
40237: PPUSH
40238: LD_INT 0
40240: PPUSH
40241: CALL_OW 50
// result := result ^ un ;
40245: LD_ADDR_VAR 0 7
40249: PUSH
40250: LD_VAR 0 7
40254: PUSH
40255: LD_VAR 0 14
40259: ADD
40260: ST_TO_ADDR
// end ;
40261: GO 40139
40263: POP
40264: POP
// end ; end ;
40265: LD_VAR 0 7
40269: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40270: LD_INT 0
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
// result := false ;
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_INT 0
40295: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40296: LD_VAR 0 1
40300: NOT
40301: PUSH
40302: LD_VAR 0 1
40306: PPUSH
40307: CALL_OW 266
40311: PUSH
40312: LD_INT 32
40314: PUSH
40315: LD_INT 33
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: IN
40322: NOT
40323: OR
40324: IFFALSE 40328
// exit ;
40326: GO 41437
// nat := GetNation ( tower ) ;
40328: LD_ADDR_VAR 0 12
40332: PUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL_OW 248
40342: ST_TO_ADDR
// side := GetSide ( tower ) ;
40343: LD_ADDR_VAR 0 16
40347: PUSH
40348: LD_VAR 0 1
40352: PPUSH
40353: CALL_OW 255
40357: ST_TO_ADDR
// x := GetX ( tower ) ;
40358: LD_ADDR_VAR 0 10
40362: PUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 250
40372: ST_TO_ADDR
// y := GetY ( tower ) ;
40373: LD_ADDR_VAR 0 11
40377: PUSH
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 251
40387: ST_TO_ADDR
// if not x or not y then
40388: LD_VAR 0 10
40392: NOT
40393: PUSH
40394: LD_VAR 0 11
40398: NOT
40399: OR
40400: IFFALSE 40404
// exit ;
40402: GO 41437
// weapon := 0 ;
40404: LD_ADDR_VAR 0 18
40408: PUSH
40409: LD_INT 0
40411: ST_TO_ADDR
// fac_list := [ ] ;
40412: LD_ADDR_VAR 0 17
40416: PUSH
40417: EMPTY
40418: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40419: LD_ADDR_VAR 0 6
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 274
40433: PPUSH
40434: LD_VAR 0 2
40438: PPUSH
40439: LD_INT 0
40441: PPUSH
40442: CALL 38008 0 3
40446: PPUSH
40447: LD_INT 30
40449: PUSH
40450: LD_INT 3
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PPUSH
40457: CALL_OW 72
40461: ST_TO_ADDR
// if not factories then
40462: LD_VAR 0 6
40466: NOT
40467: IFFALSE 40471
// exit ;
40469: GO 41437
// for i in factories do
40471: LD_ADDR_VAR 0 8
40475: PUSH
40476: LD_VAR 0 6
40480: PUSH
40481: FOR_IN
40482: IFFALSE 40507
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40484: LD_ADDR_VAR 0 17
40488: PUSH
40489: LD_VAR 0 17
40493: PUSH
40494: LD_VAR 0 8
40498: PPUSH
40499: CALL_OW 478
40503: UNION
40504: ST_TO_ADDR
40505: GO 40481
40507: POP
40508: POP
// if not fac_list then
40509: LD_VAR 0 17
40513: NOT
40514: IFFALSE 40518
// exit ;
40516: GO 41437
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40518: LD_ADDR_VAR 0 5
40522: PUSH
40523: LD_INT 4
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 9
40531: PUSH
40532: LD_INT 10
40534: PUSH
40535: LD_INT 6
40537: PUSH
40538: LD_INT 7
40540: PUSH
40541: LD_INT 11
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 27
40555: PUSH
40556: LD_INT 28
40558: PUSH
40559: LD_INT 26
40561: PUSH
40562: LD_INT 30
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 43
40573: PUSH
40574: LD_INT 44
40576: PUSH
40577: LD_INT 46
40579: PUSH
40580: LD_INT 45
40582: PUSH
40583: LD_INT 47
40585: PUSH
40586: LD_INT 49
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: PUSH
40602: LD_VAR 0 12
40606: ARRAY
40607: ST_TO_ADDR
// list := list isect fac_list ;
40608: LD_ADDR_VAR 0 5
40612: PUSH
40613: LD_VAR 0 5
40617: PUSH
40618: LD_VAR 0 17
40622: ISECT
40623: ST_TO_ADDR
// if not list then
40624: LD_VAR 0 5
40628: NOT
40629: IFFALSE 40633
// exit ;
40631: GO 41437
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40633: LD_VAR 0 12
40637: PUSH
40638: LD_INT 3
40640: EQUAL
40641: PUSH
40642: LD_INT 49
40644: PUSH
40645: LD_VAR 0 5
40649: IN
40650: AND
40651: PUSH
40652: LD_INT 31
40654: PPUSH
40655: LD_VAR 0 16
40659: PPUSH
40660: CALL_OW 321
40664: PUSH
40665: LD_INT 2
40667: EQUAL
40668: AND
40669: IFFALSE 40729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40671: LD_INT 22
40673: PUSH
40674: LD_VAR 0 16
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 35
40685: PUSH
40686: LD_INT 49
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 91
40695: PUSH
40696: LD_VAR 0 1
40700: PUSH
40701: LD_INT 10
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: PPUSH
40714: CALL_OW 69
40718: NOT
40719: IFFALSE 40729
// weapon := ru_time_lapser ;
40721: LD_ADDR_VAR 0 18
40725: PUSH
40726: LD_INT 49
40728: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40729: LD_VAR 0 12
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: IN
40744: PUSH
40745: LD_INT 11
40747: PUSH
40748: LD_VAR 0 5
40752: IN
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: LD_VAR 0 5
40761: IN
40762: OR
40763: AND
40764: PUSH
40765: LD_INT 6
40767: PPUSH
40768: LD_VAR 0 16
40772: PPUSH
40773: CALL_OW 321
40777: PUSH
40778: LD_INT 2
40780: EQUAL
40781: AND
40782: IFFALSE 40947
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40784: LD_INT 22
40786: PUSH
40787: LD_VAR 0 16
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 35
40801: PUSH
40802: LD_INT 11
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 35
40811: PUSH
40812: LD_INT 30
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 91
40826: PUSH
40827: LD_VAR 0 1
40831: PUSH
40832: LD_INT 18
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: PPUSH
40845: CALL_OW 69
40849: NOT
40850: PUSH
40851: LD_INT 22
40853: PUSH
40854: LD_VAR 0 16
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 30
40868: PUSH
40869: LD_INT 32
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 30
40878: PUSH
40879: LD_INT 33
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 91
40893: PUSH
40894: LD_VAR 0 1
40898: PUSH
40899: LD_INT 12
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: PPUSH
40915: CALL_OW 69
40919: PUSH
40920: LD_INT 2
40922: GREATER
40923: AND
40924: IFFALSE 40947
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40926: LD_ADDR_VAR 0 18
40930: PUSH
40931: LD_INT 11
40933: PUSH
40934: LD_INT 30
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_VAR 0 12
40945: ARRAY
40946: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40947: LD_VAR 0 18
40951: NOT
40952: PUSH
40953: LD_INT 40
40955: PPUSH
40956: LD_VAR 0 16
40960: PPUSH
40961: CALL_OW 321
40965: PUSH
40966: LD_INT 2
40968: EQUAL
40969: AND
40970: PUSH
40971: LD_INT 7
40973: PUSH
40974: LD_VAR 0 5
40978: IN
40979: PUSH
40980: LD_INT 28
40982: PUSH
40983: LD_VAR 0 5
40987: IN
40988: OR
40989: PUSH
40990: LD_INT 45
40992: PUSH
40993: LD_VAR 0 5
40997: IN
40998: OR
40999: AND
41000: IFFALSE 41254
// begin hex := GetHexInfo ( x , y ) ;
41002: LD_ADDR_VAR 0 4
41006: PUSH
41007: LD_VAR 0 10
41011: PPUSH
41012: LD_VAR 0 11
41016: PPUSH
41017: CALL_OW 546
41021: ST_TO_ADDR
// if hex [ 1 ] then
41022: LD_VAR 0 4
41026: PUSH
41027: LD_INT 1
41029: ARRAY
41030: IFFALSE 41034
// exit ;
41032: GO 41437
// height := hex [ 2 ] ;
41034: LD_ADDR_VAR 0 15
41038: PUSH
41039: LD_VAR 0 4
41043: PUSH
41044: LD_INT 2
41046: ARRAY
41047: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41048: LD_ADDR_VAR 0 14
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 5
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: ST_TO_ADDR
// for i in tmp do
41071: LD_ADDR_VAR 0 8
41075: PUSH
41076: LD_VAR 0 14
41080: PUSH
41081: FOR_IN
41082: IFFALSE 41252
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41084: LD_ADDR_VAR 0 9
41088: PUSH
41089: LD_VAR 0 10
41093: PPUSH
41094: LD_VAR 0 8
41098: PPUSH
41099: LD_INT 5
41101: PPUSH
41102: CALL_OW 272
41106: PUSH
41107: LD_VAR 0 11
41111: PPUSH
41112: LD_VAR 0 8
41116: PPUSH
41117: LD_INT 5
41119: PPUSH
41120: CALL_OW 273
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41129: LD_VAR 0 9
41133: PUSH
41134: LD_INT 1
41136: ARRAY
41137: PPUSH
41138: LD_VAR 0 9
41142: PUSH
41143: LD_INT 2
41145: ARRAY
41146: PPUSH
41147: CALL_OW 488
41151: IFFALSE 41250
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41153: LD_ADDR_VAR 0 4
41157: PUSH
41158: LD_VAR 0 9
41162: PUSH
41163: LD_INT 1
41165: ARRAY
41166: PPUSH
41167: LD_VAR 0 9
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: PPUSH
41176: CALL_OW 546
41180: ST_TO_ADDR
// if hex [ 1 ] then
41181: LD_VAR 0 4
41185: PUSH
41186: LD_INT 1
41188: ARRAY
41189: IFFALSE 41193
// continue ;
41191: GO 41081
// h := hex [ 2 ] ;
41193: LD_ADDR_VAR 0 13
41197: PUSH
41198: LD_VAR 0 4
41202: PUSH
41203: LD_INT 2
41205: ARRAY
41206: ST_TO_ADDR
// if h + 7 < height then
41207: LD_VAR 0 13
41211: PUSH
41212: LD_INT 7
41214: PLUS
41215: PUSH
41216: LD_VAR 0 15
41220: LESS
41221: IFFALSE 41250
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41223: LD_ADDR_VAR 0 18
41227: PUSH
41228: LD_INT 7
41230: PUSH
41231: LD_INT 28
41233: PUSH
41234: LD_INT 45
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: PUSH
41242: LD_VAR 0 12
41246: ARRAY
41247: ST_TO_ADDR
// break ;
41248: GO 41252
// end ; end ; end ;
41250: GO 41081
41252: POP
41253: POP
// end ; if not weapon then
41254: LD_VAR 0 18
41258: NOT
41259: IFFALSE 41319
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41261: LD_ADDR_VAR 0 5
41265: PUSH
41266: LD_VAR 0 5
41270: PUSH
41271: LD_INT 11
41273: PUSH
41274: LD_INT 30
41276: PUSH
41277: LD_INT 49
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: DIFF
41285: ST_TO_ADDR
// if not list then
41286: LD_VAR 0 5
41290: NOT
41291: IFFALSE 41295
// exit ;
41293: GO 41437
// weapon := list [ rand ( 1 , list ) ] ;
41295: LD_ADDR_VAR 0 18
41299: PUSH
41300: LD_VAR 0 5
41304: PUSH
41305: LD_INT 1
41307: PPUSH
41308: LD_VAR 0 5
41312: PPUSH
41313: CALL_OW 12
41317: ARRAY
41318: ST_TO_ADDR
// end ; if weapon then
41319: LD_VAR 0 18
41323: IFFALSE 41437
// begin tmp := CostOfWeapon ( weapon ) ;
41325: LD_ADDR_VAR 0 14
41329: PUSH
41330: LD_VAR 0 18
41334: PPUSH
41335: CALL_OW 451
41339: ST_TO_ADDR
// j := GetBase ( tower ) ;
41340: LD_ADDR_VAR 0 9
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL_OW 274
41354: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41355: LD_VAR 0 9
41359: PPUSH
41360: LD_INT 1
41362: PPUSH
41363: CALL_OW 275
41367: PUSH
41368: LD_VAR 0 14
41372: PUSH
41373: LD_INT 1
41375: ARRAY
41376: GREATEREQUAL
41377: PUSH
41378: LD_VAR 0 9
41382: PPUSH
41383: LD_INT 2
41385: PPUSH
41386: CALL_OW 275
41390: PUSH
41391: LD_VAR 0 14
41395: PUSH
41396: LD_INT 2
41398: ARRAY
41399: GREATEREQUAL
41400: AND
41401: PUSH
41402: LD_VAR 0 9
41406: PPUSH
41407: LD_INT 3
41409: PPUSH
41410: CALL_OW 275
41414: PUSH
41415: LD_VAR 0 14
41419: PUSH
41420: LD_INT 3
41422: ARRAY
41423: GREATEREQUAL
41424: AND
41425: IFFALSE 41437
// result := weapon ;
41427: LD_ADDR_VAR 0 3
41431: PUSH
41432: LD_VAR 0 18
41436: ST_TO_ADDR
// end ; end ;
41437: LD_VAR 0 3
41441: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41442: LD_INT 0
41444: PPUSH
41445: PPUSH
// result := true ;
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 1
41453: ST_TO_ADDR
// if array1 = array2 then
41454: LD_VAR 0 1
41458: PUSH
41459: LD_VAR 0 2
41463: EQUAL
41464: IFFALSE 41524
// begin for i = 1 to array1 do
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: DOUBLE
41472: LD_INT 1
41474: DEC
41475: ST_TO_ADDR
41476: LD_VAR 0 1
41480: PUSH
41481: FOR_TO
41482: IFFALSE 41520
// if array1 [ i ] <> array2 [ i ] then
41484: LD_VAR 0 1
41488: PUSH
41489: LD_VAR 0 4
41493: ARRAY
41494: PUSH
41495: LD_VAR 0 2
41499: PUSH
41500: LD_VAR 0 4
41504: ARRAY
41505: NONEQUAL
41506: IFFALSE 41518
// begin result := false ;
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_INT 0
41515: ST_TO_ADDR
// break ;
41516: GO 41520
// end ;
41518: GO 41481
41520: POP
41521: POP
// end else
41522: GO 41532
// result := false ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// end ;
41532: LD_VAR 0 3
41536: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41537: LD_INT 0
41539: PPUSH
41540: PPUSH
// if not array1 or not array2 then
41541: LD_VAR 0 1
41545: NOT
41546: PUSH
41547: LD_VAR 0 2
41551: NOT
41552: OR
41553: IFFALSE 41557
// exit ;
41555: GO 41621
// result := true ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_INT 1
41564: ST_TO_ADDR
// for i = 1 to array1 do
41565: LD_ADDR_VAR 0 4
41569: PUSH
41570: DOUBLE
41571: LD_INT 1
41573: DEC
41574: ST_TO_ADDR
41575: LD_VAR 0 1
41579: PUSH
41580: FOR_TO
41581: IFFALSE 41619
// if array1 [ i ] <> array2 [ i ] then
41583: LD_VAR 0 1
41587: PUSH
41588: LD_VAR 0 4
41592: ARRAY
41593: PUSH
41594: LD_VAR 0 2
41598: PUSH
41599: LD_VAR 0 4
41603: ARRAY
41604: NONEQUAL
41605: IFFALSE 41617
// begin result := false ;
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_INT 0
41614: ST_TO_ADDR
// break ;
41615: GO 41619
// end ;
41617: GO 41580
41619: POP
41620: POP
// end ;
41621: LD_VAR 0 3
41625: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41626: LD_INT 0
41628: PPUSH
41629: PPUSH
41630: PPUSH
// pom := GetBase ( fac ) ;
41631: LD_ADDR_VAR 0 5
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 274
41645: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41646: LD_ADDR_VAR 0 4
41650: PUSH
41651: LD_VAR 0 2
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: LD_VAR 0 2
41664: PUSH
41665: LD_INT 2
41667: ARRAY
41668: PPUSH
41669: LD_VAR 0 2
41673: PUSH
41674: LD_INT 3
41676: ARRAY
41677: PPUSH
41678: LD_VAR 0 2
41682: PUSH
41683: LD_INT 4
41685: ARRAY
41686: PPUSH
41687: CALL_OW 449
41691: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_VAR 0 5
41701: PPUSH
41702: LD_INT 1
41704: PPUSH
41705: CALL_OW 275
41709: PUSH
41710: LD_VAR 0 4
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: GREATEREQUAL
41719: PUSH
41720: LD_VAR 0 5
41724: PPUSH
41725: LD_INT 2
41727: PPUSH
41728: CALL_OW 275
41732: PUSH
41733: LD_VAR 0 4
41737: PUSH
41738: LD_INT 2
41740: ARRAY
41741: GREATEREQUAL
41742: AND
41743: PUSH
41744: LD_VAR 0 5
41748: PPUSH
41749: LD_INT 3
41751: PPUSH
41752: CALL_OW 275
41756: PUSH
41757: LD_VAR 0 4
41761: PUSH
41762: LD_INT 3
41764: ARRAY
41765: GREATEREQUAL
41766: AND
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 3
41772: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41773: LD_INT 0
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
// pom := GetBase ( building ) ;
41779: LD_ADDR_VAR 0 3
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 274
41793: ST_TO_ADDR
// if not pom then
41794: LD_VAR 0 3
41798: NOT
41799: IFFALSE 41803
// exit ;
41801: GO 41973
// btype := GetBType ( building ) ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 266
41817: ST_TO_ADDR
// if btype = b_armoury then
41818: LD_VAR 0 5
41822: PUSH
41823: LD_INT 4
41825: EQUAL
41826: IFFALSE 41836
// btype := b_barracks ;
41828: LD_ADDR_VAR 0 5
41832: PUSH
41833: LD_INT 5
41835: ST_TO_ADDR
// if btype = b_depot then
41836: LD_VAR 0 5
41840: PUSH
41841: LD_INT 0
41843: EQUAL
41844: IFFALSE 41854
// btype := b_warehouse ;
41846: LD_ADDR_VAR 0 5
41850: PUSH
41851: LD_INT 1
41853: ST_TO_ADDR
// if btype = b_workshop then
41854: LD_VAR 0 5
41858: PUSH
41859: LD_INT 2
41861: EQUAL
41862: IFFALSE 41872
// btype := b_factory ;
41864: LD_ADDR_VAR 0 5
41868: PUSH
41869: LD_INT 3
41871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41872: LD_ADDR_VAR 0 4
41876: PUSH
41877: LD_VAR 0 5
41881: PPUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 248
41891: PPUSH
41892: CALL_OW 450
41896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41897: LD_ADDR_VAR 0 2
41901: PUSH
41902: LD_VAR 0 3
41906: PPUSH
41907: LD_INT 1
41909: PPUSH
41910: CALL_OW 275
41914: PUSH
41915: LD_VAR 0 4
41919: PUSH
41920: LD_INT 1
41922: ARRAY
41923: GREATEREQUAL
41924: PUSH
41925: LD_VAR 0 3
41929: PPUSH
41930: LD_INT 2
41932: PPUSH
41933: CALL_OW 275
41937: PUSH
41938: LD_VAR 0 4
41942: PUSH
41943: LD_INT 2
41945: ARRAY
41946: GREATEREQUAL
41947: AND
41948: PUSH
41949: LD_VAR 0 3
41953: PPUSH
41954: LD_INT 3
41956: PPUSH
41957: CALL_OW 275
41961: PUSH
41962: LD_VAR 0 4
41966: PUSH
41967: LD_INT 3
41969: ARRAY
41970: GREATEREQUAL
41971: AND
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 2
41977: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41978: LD_INT 0
41980: PPUSH
41981: PPUSH
41982: PPUSH
// pom := GetBase ( building ) ;
41983: LD_ADDR_VAR 0 4
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 274
41997: ST_TO_ADDR
// if not pom then
41998: LD_VAR 0 4
42002: NOT
42003: IFFALSE 42007
// exit ;
42005: GO 42108
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42007: LD_ADDR_VAR 0 5
42011: PUSH
42012: LD_VAR 0 2
42016: PPUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 248
42026: PPUSH
42027: CALL_OW 450
42031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_VAR 0 4
42041: PPUSH
42042: LD_INT 1
42044: PPUSH
42045: CALL_OW 275
42049: PUSH
42050: LD_VAR 0 5
42054: PUSH
42055: LD_INT 1
42057: ARRAY
42058: GREATEREQUAL
42059: PUSH
42060: LD_VAR 0 4
42064: PPUSH
42065: LD_INT 2
42067: PPUSH
42068: CALL_OW 275
42072: PUSH
42073: LD_VAR 0 5
42077: PUSH
42078: LD_INT 2
42080: ARRAY
42081: GREATEREQUAL
42082: AND
42083: PUSH
42084: LD_VAR 0 4
42088: PPUSH
42089: LD_INT 3
42091: PPUSH
42092: CALL_OW 275
42096: PUSH
42097: LD_VAR 0 5
42101: PUSH
42102: LD_INT 3
42104: ARRAY
42105: GREATEREQUAL
42106: AND
42107: ST_TO_ADDR
// end ;
42108: LD_VAR 0 3
42112: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42113: LD_INT 0
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
// result := false ;
42126: LD_ADDR_VAR 0 8
42130: PUSH
42131: LD_INT 0
42133: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42134: LD_VAR 0 5
42138: NOT
42139: PUSH
42140: LD_VAR 0 1
42144: NOT
42145: OR
42146: PUSH
42147: LD_VAR 0 2
42151: NOT
42152: OR
42153: PUSH
42154: LD_VAR 0 3
42158: NOT
42159: OR
42160: IFFALSE 42164
// exit ;
42162: GO 42978
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42164: LD_ADDR_VAR 0 14
42168: PUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: LD_VAR 0 2
42178: PPUSH
42179: LD_VAR 0 3
42183: PPUSH
42184: LD_VAR 0 4
42188: PPUSH
42189: LD_VAR 0 5
42193: PUSH
42194: LD_INT 1
42196: ARRAY
42197: PPUSH
42198: CALL_OW 248
42202: PPUSH
42203: LD_INT 0
42205: PPUSH
42206: CALL 44211 0 6
42210: ST_TO_ADDR
// if not hexes then
42211: LD_VAR 0 14
42215: NOT
42216: IFFALSE 42220
// exit ;
42218: GO 42978
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42220: LD_ADDR_VAR 0 17
42224: PUSH
42225: LD_VAR 0 5
42229: PPUSH
42230: LD_INT 22
42232: PUSH
42233: LD_VAR 0 13
42237: PPUSH
42238: CALL_OW 255
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 30
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 30
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PPUSH
42279: CALL_OW 72
42283: ST_TO_ADDR
// for i = 1 to hexes do
42284: LD_ADDR_VAR 0 9
42288: PUSH
42289: DOUBLE
42290: LD_INT 1
42292: DEC
42293: ST_TO_ADDR
42294: LD_VAR 0 14
42298: PUSH
42299: FOR_TO
42300: IFFALSE 42976
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42302: LD_ADDR_VAR 0 13
42306: PUSH
42307: LD_VAR 0 14
42311: PUSH
42312: LD_VAR 0 9
42316: ARRAY
42317: PUSH
42318: LD_INT 1
42320: ARRAY
42321: PPUSH
42322: LD_VAR 0 14
42326: PUSH
42327: LD_VAR 0 9
42331: ARRAY
42332: PUSH
42333: LD_INT 2
42335: ARRAY
42336: PPUSH
42337: CALL_OW 428
42341: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42342: LD_VAR 0 14
42346: PUSH
42347: LD_VAR 0 9
42351: ARRAY
42352: PUSH
42353: LD_INT 1
42355: ARRAY
42356: PPUSH
42357: LD_VAR 0 14
42361: PUSH
42362: LD_VAR 0 9
42366: ARRAY
42367: PUSH
42368: LD_INT 2
42370: ARRAY
42371: PPUSH
42372: CALL_OW 351
42376: PUSH
42377: LD_VAR 0 14
42381: PUSH
42382: LD_VAR 0 9
42386: ARRAY
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: PPUSH
42392: LD_VAR 0 14
42396: PUSH
42397: LD_VAR 0 9
42401: ARRAY
42402: PUSH
42403: LD_INT 2
42405: ARRAY
42406: PPUSH
42407: CALL_OW 488
42411: NOT
42412: OR
42413: PUSH
42414: LD_VAR 0 13
42418: PPUSH
42419: CALL_OW 247
42423: PUSH
42424: LD_INT 3
42426: EQUAL
42427: OR
42428: IFFALSE 42434
// exit ;
42430: POP
42431: POP
42432: GO 42978
// if not tmp then
42434: LD_VAR 0 13
42438: NOT
42439: IFFALSE 42443
// continue ;
42441: GO 42299
// result := true ;
42443: LD_ADDR_VAR 0 8
42447: PUSH
42448: LD_INT 1
42450: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42451: LD_VAR 0 6
42455: PUSH
42456: LD_VAR 0 13
42460: PPUSH
42461: CALL_OW 247
42465: PUSH
42466: LD_INT 2
42468: EQUAL
42469: AND
42470: PUSH
42471: LD_VAR 0 13
42475: PPUSH
42476: CALL_OW 263
42480: PUSH
42481: LD_INT 1
42483: EQUAL
42484: AND
42485: IFFALSE 42649
// begin if IsDrivenBy ( tmp ) then
42487: LD_VAR 0 13
42491: PPUSH
42492: CALL_OW 311
42496: IFFALSE 42500
// continue ;
42498: GO 42299
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42500: LD_VAR 0 6
42504: PPUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 60
42510: PUSH
42511: EMPTY
42512: LIST
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: LD_INT 55
42523: PUSH
42524: EMPTY
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PPUSH
42535: CALL_OW 72
42539: IFFALSE 42647
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42541: LD_ADDR_VAR 0 18
42545: PUSH
42546: LD_VAR 0 6
42550: PPUSH
42551: LD_INT 3
42553: PUSH
42554: LD_INT 60
42556: PUSH
42557: EMPTY
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: LD_INT 55
42569: PUSH
42570: EMPTY
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PPUSH
42581: CALL_OW 72
42585: PUSH
42586: LD_INT 1
42588: ARRAY
42589: ST_TO_ADDR
// if IsInUnit ( driver ) then
42590: LD_VAR 0 18
42594: PPUSH
42595: CALL_OW 310
42599: IFFALSE 42610
// ComExit ( driver ) ;
42601: LD_VAR 0 18
42605: PPUSH
42606: CALL 67899 0 1
// AddComEnterUnit ( driver , tmp ) ;
42610: LD_VAR 0 18
42614: PPUSH
42615: LD_VAR 0 13
42619: PPUSH
42620: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42624: LD_VAR 0 18
42628: PPUSH
42629: LD_VAR 0 7
42633: PPUSH
42634: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42638: LD_VAR 0 18
42642: PPUSH
42643: CALL_OW 181
// end ; continue ;
42647: GO 42299
// end ; if not cleaners or not tmp in cleaners then
42649: LD_VAR 0 6
42653: NOT
42654: PUSH
42655: LD_VAR 0 13
42659: PUSH
42660: LD_VAR 0 6
42664: IN
42665: NOT
42666: OR
42667: IFFALSE 42974
// begin if dep then
42669: LD_VAR 0 17
42673: IFFALSE 42809
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42675: LD_ADDR_VAR 0 16
42679: PUSH
42680: LD_VAR 0 17
42684: PUSH
42685: LD_INT 1
42687: ARRAY
42688: PPUSH
42689: CALL_OW 250
42693: PPUSH
42694: LD_VAR 0 17
42698: PUSH
42699: LD_INT 1
42701: ARRAY
42702: PPUSH
42703: CALL_OW 254
42707: PPUSH
42708: LD_INT 5
42710: PPUSH
42711: CALL_OW 272
42715: PUSH
42716: LD_VAR 0 17
42720: PUSH
42721: LD_INT 1
42723: ARRAY
42724: PPUSH
42725: CALL_OW 251
42729: PPUSH
42730: LD_VAR 0 17
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: PPUSH
42739: CALL_OW 254
42743: PPUSH
42744: LD_INT 5
42746: PPUSH
42747: CALL_OW 273
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42756: LD_VAR 0 16
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: LD_VAR 0 16
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: PPUSH
42774: CALL_OW 488
42778: IFFALSE 42809
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42780: LD_VAR 0 13
42784: PPUSH
42785: LD_VAR 0 16
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: PPUSH
42794: LD_VAR 0 16
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: PPUSH
42803: CALL_OW 111
// continue ;
42807: GO 42299
// end ; end ; r := GetDir ( tmp ) ;
42809: LD_ADDR_VAR 0 15
42813: PUSH
42814: LD_VAR 0 13
42818: PPUSH
42819: CALL_OW 254
42823: ST_TO_ADDR
// if r = 5 then
42824: LD_VAR 0 15
42828: PUSH
42829: LD_INT 5
42831: EQUAL
42832: IFFALSE 42842
// r := 0 ;
42834: LD_ADDR_VAR 0 15
42838: PUSH
42839: LD_INT 0
42841: ST_TO_ADDR
// for j = r to 5 do
42842: LD_ADDR_VAR 0 10
42846: PUSH
42847: DOUBLE
42848: LD_VAR 0 15
42852: DEC
42853: ST_TO_ADDR
42854: LD_INT 5
42856: PUSH
42857: FOR_TO
42858: IFFALSE 42972
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42860: LD_ADDR_VAR 0 11
42864: PUSH
42865: LD_VAR 0 13
42869: PPUSH
42870: CALL_OW 250
42874: PPUSH
42875: LD_VAR 0 10
42879: PPUSH
42880: LD_INT 2
42882: PPUSH
42883: CALL_OW 272
42887: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42888: LD_ADDR_VAR 0 12
42892: PUSH
42893: LD_VAR 0 13
42897: PPUSH
42898: CALL_OW 251
42902: PPUSH
42903: LD_VAR 0 10
42907: PPUSH
42908: LD_INT 2
42910: PPUSH
42911: CALL_OW 273
42915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42916: LD_VAR 0 11
42920: PPUSH
42921: LD_VAR 0 12
42925: PPUSH
42926: CALL_OW 488
42930: PUSH
42931: LD_VAR 0 11
42935: PPUSH
42936: LD_VAR 0 12
42940: PPUSH
42941: CALL_OW 428
42945: NOT
42946: AND
42947: IFFALSE 42970
// begin ComMoveXY ( tmp , _x , _y ) ;
42949: LD_VAR 0 13
42953: PPUSH
42954: LD_VAR 0 11
42958: PPUSH
42959: LD_VAR 0 12
42963: PPUSH
42964: CALL_OW 111
// break ;
42968: GO 42972
// end ; end ;
42970: GO 42857
42972: POP
42973: POP
// end ; end ;
42974: GO 42299
42976: POP
42977: POP
// end ;
42978: LD_VAR 0 8
42982: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42983: LD_INT 0
42985: PPUSH
// result := true ;
42986: LD_ADDR_VAR 0 3
42990: PUSH
42991: LD_INT 1
42993: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42994: LD_VAR 0 2
42998: PUSH
42999: LD_INT 24
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43013
43005: LD_INT 33
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43038
43013: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43014: LD_ADDR_VAR 0 3
43018: PUSH
43019: LD_INT 32
43021: PPUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 321
43031: PUSH
43032: LD_INT 2
43034: EQUAL
43035: ST_TO_ADDR
43036: GO 43354
43038: LD_INT 20
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43071
43046: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 6
43054: PPUSH
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 321
43064: PUSH
43065: LD_INT 2
43067: EQUAL
43068: ST_TO_ADDR
43069: GO 43354
43071: LD_INT 22
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43085
43077: LD_INT 36
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43110
43085: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 15
43093: PPUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 321
43103: PUSH
43104: LD_INT 2
43106: EQUAL
43107: ST_TO_ADDR
43108: GO 43354
43110: LD_INT 30
43112: DOUBLE
43113: EQUAL
43114: IFTRUE 43118
43116: GO 43143
43118: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43119: LD_ADDR_VAR 0 3
43123: PUSH
43124: LD_INT 20
43126: PPUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 321
43136: PUSH
43137: LD_INT 2
43139: EQUAL
43140: ST_TO_ADDR
43141: GO 43354
43143: LD_INT 28
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43157
43149: LD_INT 21
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43157
43155: GO 43182
43157: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_INT 21
43165: PPUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: CALL_OW 321
43175: PUSH
43176: LD_INT 2
43178: EQUAL
43179: ST_TO_ADDR
43180: GO 43354
43182: LD_INT 16
43184: DOUBLE
43185: EQUAL
43186: IFTRUE 43190
43188: GO 43215
43190: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: LD_INT 84
43198: PPUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: CALL_OW 321
43208: PUSH
43209: LD_INT 2
43211: EQUAL
43212: ST_TO_ADDR
43213: GO 43354
43215: LD_INT 19
43217: DOUBLE
43218: EQUAL
43219: IFTRUE 43229
43221: LD_INT 23
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43254
43229: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: LD_INT 83
43237: PPUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 321
43247: PUSH
43248: LD_INT 2
43250: EQUAL
43251: ST_TO_ADDR
43252: GO 43354
43254: LD_INT 17
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43262
43260: GO 43287
43262: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43263: LD_ADDR_VAR 0 3
43267: PUSH
43268: LD_INT 39
43270: PPUSH
43271: LD_VAR 0 1
43275: PPUSH
43276: CALL_OW 321
43280: PUSH
43281: LD_INT 2
43283: EQUAL
43284: ST_TO_ADDR
43285: GO 43354
43287: LD_INT 18
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43295
43293: GO 43320
43295: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_INT 40
43303: PPUSH
43304: LD_VAR 0 1
43308: PPUSH
43309: CALL_OW 321
43313: PUSH
43314: LD_INT 2
43316: EQUAL
43317: ST_TO_ADDR
43318: GO 43354
43320: LD_INT 27
43322: DOUBLE
43323: EQUAL
43324: IFTRUE 43328
43326: GO 43353
43328: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43329: LD_ADDR_VAR 0 3
43333: PUSH
43334: LD_INT 35
43336: PPUSH
43337: LD_VAR 0 1
43341: PPUSH
43342: CALL_OW 321
43346: PUSH
43347: LD_INT 2
43349: EQUAL
43350: ST_TO_ADDR
43351: GO 43354
43353: POP
// end ;
43354: LD_VAR 0 3
43358: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43359: LD_INT 0
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
// result := false ;
43372: LD_ADDR_VAR 0 6
43376: PUSH
43377: LD_INT 0
43379: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43380: LD_VAR 0 1
43384: NOT
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 266
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: IN
43406: NOT
43407: OR
43408: PUSH
43409: LD_VAR 0 2
43413: NOT
43414: OR
43415: PUSH
43416: LD_VAR 0 5
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: LD_INT 5
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: IN
43447: NOT
43448: OR
43449: PUSH
43450: LD_VAR 0 3
43454: PPUSH
43455: LD_VAR 0 4
43459: PPUSH
43460: CALL_OW 488
43464: NOT
43465: OR
43466: IFFALSE 43470
// exit ;
43468: GO 44206
// side := GetSide ( depot ) ;
43470: LD_ADDR_VAR 0 9
43474: PUSH
43475: LD_VAR 0 1
43479: PPUSH
43480: CALL_OW 255
43484: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43485: LD_VAR 0 9
43489: PPUSH
43490: LD_VAR 0 2
43494: PPUSH
43495: CALL 42983 0 2
43499: NOT
43500: IFFALSE 43504
// exit ;
43502: GO 44206
// pom := GetBase ( depot ) ;
43504: LD_ADDR_VAR 0 10
43508: PUSH
43509: LD_VAR 0 1
43513: PPUSH
43514: CALL_OW 274
43518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43519: LD_ADDR_VAR 0 11
43523: PUSH
43524: LD_VAR 0 2
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 248
43538: PPUSH
43539: CALL_OW 450
43543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43544: LD_VAR 0 10
43548: PPUSH
43549: LD_INT 1
43551: PPUSH
43552: CALL_OW 275
43556: PUSH
43557: LD_VAR 0 11
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: GREATEREQUAL
43566: PUSH
43567: LD_VAR 0 10
43571: PPUSH
43572: LD_INT 2
43574: PPUSH
43575: CALL_OW 275
43579: PUSH
43580: LD_VAR 0 11
43584: PUSH
43585: LD_INT 2
43587: ARRAY
43588: GREATEREQUAL
43589: AND
43590: PUSH
43591: LD_VAR 0 10
43595: PPUSH
43596: LD_INT 3
43598: PPUSH
43599: CALL_OW 275
43603: PUSH
43604: LD_VAR 0 11
43608: PUSH
43609: LD_INT 3
43611: ARRAY
43612: GREATEREQUAL
43613: AND
43614: NOT
43615: IFFALSE 43619
// exit ;
43617: GO 44206
// if GetBType ( depot ) = b_depot then
43619: LD_VAR 0 1
43623: PPUSH
43624: CALL_OW 266
43628: PUSH
43629: LD_INT 0
43631: EQUAL
43632: IFFALSE 43644
// dist := 28 else
43634: LD_ADDR_VAR 0 14
43638: PUSH
43639: LD_INT 28
43641: ST_TO_ADDR
43642: GO 43652
// dist := 36 ;
43644: LD_ADDR_VAR 0 14
43648: PUSH
43649: LD_INT 36
43651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43652: LD_VAR 0 1
43656: PPUSH
43657: LD_VAR 0 3
43661: PPUSH
43662: LD_VAR 0 4
43666: PPUSH
43667: CALL_OW 297
43671: PUSH
43672: LD_VAR 0 14
43676: GREATER
43677: IFFALSE 43681
// exit ;
43679: GO 44206
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43681: LD_ADDR_VAR 0 12
43685: PUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_VAR 0 3
43695: PPUSH
43696: LD_VAR 0 4
43700: PPUSH
43701: LD_VAR 0 5
43705: PPUSH
43706: LD_VAR 0 1
43710: PPUSH
43711: CALL_OW 248
43715: PPUSH
43716: LD_INT 0
43718: PPUSH
43719: CALL 44211 0 6
43723: ST_TO_ADDR
// if not hexes then
43724: LD_VAR 0 12
43728: NOT
43729: IFFALSE 43733
// exit ;
43731: GO 44206
// hex := GetHexInfo ( x , y ) ;
43733: LD_ADDR_VAR 0 15
43737: PUSH
43738: LD_VAR 0 3
43742: PPUSH
43743: LD_VAR 0 4
43747: PPUSH
43748: CALL_OW 546
43752: ST_TO_ADDR
// if hex [ 1 ] then
43753: LD_VAR 0 15
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: IFFALSE 43765
// exit ;
43763: GO 44206
// height := hex [ 2 ] ;
43765: LD_ADDR_VAR 0 13
43769: PUSH
43770: LD_VAR 0 15
43774: PUSH
43775: LD_INT 2
43777: ARRAY
43778: ST_TO_ADDR
// for i = 1 to hexes do
43779: LD_ADDR_VAR 0 7
43783: PUSH
43784: DOUBLE
43785: LD_INT 1
43787: DEC
43788: ST_TO_ADDR
43789: LD_VAR 0 12
43793: PUSH
43794: FOR_TO
43795: IFFALSE 44125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43797: LD_VAR 0 12
43801: PUSH
43802: LD_VAR 0 7
43806: ARRAY
43807: PUSH
43808: LD_INT 1
43810: ARRAY
43811: PPUSH
43812: LD_VAR 0 12
43816: PUSH
43817: LD_VAR 0 7
43821: ARRAY
43822: PUSH
43823: LD_INT 2
43825: ARRAY
43826: PPUSH
43827: CALL_OW 488
43831: NOT
43832: PUSH
43833: LD_VAR 0 12
43837: PUSH
43838: LD_VAR 0 7
43842: ARRAY
43843: PUSH
43844: LD_INT 1
43846: ARRAY
43847: PPUSH
43848: LD_VAR 0 12
43852: PUSH
43853: LD_VAR 0 7
43857: ARRAY
43858: PUSH
43859: LD_INT 2
43861: ARRAY
43862: PPUSH
43863: CALL_OW 428
43867: PUSH
43868: LD_INT 0
43870: GREATER
43871: OR
43872: PUSH
43873: LD_VAR 0 12
43877: PUSH
43878: LD_VAR 0 7
43882: ARRAY
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: PPUSH
43888: LD_VAR 0 12
43892: PUSH
43893: LD_VAR 0 7
43897: ARRAY
43898: PUSH
43899: LD_INT 2
43901: ARRAY
43902: PPUSH
43903: CALL_OW 351
43907: OR
43908: IFFALSE 43914
// exit ;
43910: POP
43911: POP
43912: GO 44206
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43914: LD_ADDR_VAR 0 8
43918: PUSH
43919: LD_VAR 0 12
43923: PUSH
43924: LD_VAR 0 7
43928: ARRAY
43929: PUSH
43930: LD_INT 1
43932: ARRAY
43933: PPUSH
43934: LD_VAR 0 12
43938: PUSH
43939: LD_VAR 0 7
43943: ARRAY
43944: PUSH
43945: LD_INT 2
43947: ARRAY
43948: PPUSH
43949: CALL_OW 546
43953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43954: LD_VAR 0 8
43958: PUSH
43959: LD_INT 1
43961: ARRAY
43962: PUSH
43963: LD_VAR 0 8
43967: PUSH
43968: LD_INT 2
43970: ARRAY
43971: PUSH
43972: LD_VAR 0 13
43976: PUSH
43977: LD_INT 2
43979: PLUS
43980: GREATER
43981: OR
43982: PUSH
43983: LD_VAR 0 8
43987: PUSH
43988: LD_INT 2
43990: ARRAY
43991: PUSH
43992: LD_VAR 0 13
43996: PUSH
43997: LD_INT 2
43999: MINUS
44000: LESS
44001: OR
44002: PUSH
44003: LD_VAR 0 8
44007: PUSH
44008: LD_INT 3
44010: ARRAY
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 8
44017: PUSH
44018: LD_INT 9
44020: PUSH
44021: LD_INT 10
44023: PUSH
44024: LD_INT 11
44026: PUSH
44027: LD_INT 12
44029: PUSH
44030: LD_INT 13
44032: PUSH
44033: LD_INT 16
44035: PUSH
44036: LD_INT 17
44038: PUSH
44039: LD_INT 18
44041: PUSH
44042: LD_INT 19
44044: PUSH
44045: LD_INT 20
44047: PUSH
44048: LD_INT 21
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: IN
44066: NOT
44067: OR
44068: PUSH
44069: LD_VAR 0 8
44073: PUSH
44074: LD_INT 5
44076: ARRAY
44077: NOT
44078: OR
44079: PUSH
44080: LD_VAR 0 8
44084: PUSH
44085: LD_INT 6
44087: ARRAY
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 7
44097: PUSH
44098: LD_INT 9
44100: PUSH
44101: LD_INT 10
44103: PUSH
44104: LD_INT 11
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: IN
44115: NOT
44116: OR
44117: IFFALSE 44123
// exit ;
44119: POP
44120: POP
44121: GO 44206
// end ;
44123: GO 43794
44125: POP
44126: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44127: LD_VAR 0 9
44131: PPUSH
44132: LD_VAR 0 3
44136: PPUSH
44137: LD_VAR 0 4
44141: PPUSH
44142: LD_INT 20
44144: PPUSH
44145: CALL 36158 0 4
44149: PUSH
44150: LD_INT 4
44152: ARRAY
44153: IFFALSE 44157
// exit ;
44155: GO 44206
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44157: LD_VAR 0 2
44161: PUSH
44162: LD_INT 29
44164: PUSH
44165: LD_INT 30
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: IN
44172: PUSH
44173: LD_VAR 0 3
44177: PPUSH
44178: LD_VAR 0 4
44182: PPUSH
44183: LD_VAR 0 9
44187: PPUSH
44188: CALL_OW 440
44192: NOT
44193: AND
44194: IFFALSE 44198
// exit ;
44196: GO 44206
// result := true ;
44198: LD_ADDR_VAR 0 6
44202: PUSH
44203: LD_INT 1
44205: ST_TO_ADDR
// end ;
44206: LD_VAR 0 6
44210: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44211: LD_INT 0
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
// result = [ ] ;
44271: LD_ADDR_VAR 0 7
44275: PUSH
44276: EMPTY
44277: ST_TO_ADDR
// temp_list = [ ] ;
44278: LD_ADDR_VAR 0 9
44282: PUSH
44283: EMPTY
44284: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44285: LD_VAR 0 4
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: LD_INT 4
44304: PUSH
44305: LD_INT 5
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: IN
44316: NOT
44317: PUSH
44318: LD_VAR 0 1
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: IN
44333: PUSH
44334: LD_VAR 0 5
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 3
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: IN
44353: NOT
44354: AND
44355: OR
44356: IFFALSE 44360
// exit ;
44358: GO 62751
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44360: LD_VAR 0 1
44364: PUSH
44365: LD_INT 6
44367: PUSH
44368: LD_INT 7
44370: PUSH
44371: LD_INT 8
44373: PUSH
44374: LD_INT 13
44376: PUSH
44377: LD_INT 12
44379: PUSH
44380: LD_INT 15
44382: PUSH
44383: LD_INT 11
44385: PUSH
44386: LD_INT 14
44388: PUSH
44389: LD_INT 10
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: IN
44403: IFFALSE 44413
// btype = b_lab ;
44405: LD_ADDR_VAR 0 1
44409: PUSH
44410: LD_INT 6
44412: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44413: LD_VAR 0 6
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: IN
44432: NOT
44433: PUSH
44434: LD_VAR 0 1
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: LD_INT 6
44453: PUSH
44454: LD_INT 36
44456: PUSH
44457: LD_INT 4
44459: PUSH
44460: LD_INT 5
44462: PUSH
44463: LD_INT 31
44465: PUSH
44466: LD_INT 32
44468: PUSH
44469: LD_INT 33
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: IN
44485: NOT
44486: PUSH
44487: LD_VAR 0 6
44491: PUSH
44492: LD_INT 1
44494: EQUAL
44495: AND
44496: OR
44497: PUSH
44498: LD_VAR 0 1
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: IN
44513: NOT
44514: PUSH
44515: LD_VAR 0 6
44519: PUSH
44520: LD_INT 2
44522: EQUAL
44523: AND
44524: OR
44525: IFFALSE 44535
// mode = 0 ;
44527: LD_ADDR_VAR 0 6
44531: PUSH
44532: LD_INT 0
44534: ST_TO_ADDR
// case mode of 0 :
44535: LD_VAR 0 6
44539: PUSH
44540: LD_INT 0
44542: DOUBLE
44543: EQUAL
44544: IFTRUE 44548
44546: GO 56001
44548: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44549: LD_ADDR_VAR 0 11
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44742: LD_ADDR_VAR 0 12
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 3
44899: NEG
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: NEG
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44938: LD_ADDR_VAR 0 13
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45137: LD_ADDR_VAR 0 14
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 3
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45333: LD_ADDR_VAR 0 15
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45526: LD_ADDR_VAR 0 16
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45719: LD_ADDR_VAR 0 17
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45949: LD_ADDR_VAR 0 18
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46179: LD_ADDR_VAR 0 19
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46409: LD_ADDR_VAR 0 20
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46639: LD_ADDR_VAR 0 21
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46869: LD_ADDR_VAR 0 22
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47099: LD_ADDR_VAR 0 23
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47379: LD_ADDR_VAR 0 24
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47655: LD_ADDR_VAR 0 25
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47929: LD_ADDR_VAR 0 26
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48205: LD_ADDR_VAR 0 27
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48485: LD_ADDR_VAR 0 28
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48767: LD_ADDR_VAR 0 29
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49046: LD_ADDR_VAR 0 30
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 3
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 3
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49324: LD_ADDR_VAR 0 31
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49602: LD_ADDR_VAR 0 32
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49880: LD_ADDR_VAR 0 33
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50159: LD_ADDR_VAR 0 34
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50439: LD_ADDR_VAR 0 35
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50551: LD_ADDR_VAR 0 36
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50663: LD_ADDR_VAR 0 37
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50775: LD_ADDR_VAR 0 38
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50887: LD_ADDR_VAR 0 39
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50999: LD_ADDR_VAR 0 40
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51111: LD_ADDR_VAR 0 41
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51461: LD_ADDR_VAR 0 42
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51811: LD_ADDR_VAR 0 43
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52159: LD_ADDR_VAR 0 44
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52509: LD_ADDR_VAR 0 45
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52859: LD_ADDR_VAR 0 46
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53207: LD_ADDR_VAR 0 47
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53358: LD_ADDR_VAR 0 48
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53505: LD_ADDR_VAR 0 49
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53649: LD_ADDR_VAR 0 50
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53793: LD_ADDR_VAR 0 51
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53940: LD_ADDR_VAR 0 52
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54091: LD_ADDR_VAR 0 53
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54321: LD_ADDR_VAR 0 54
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54551: LD_ADDR_VAR 0 55
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 56
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55011: LD_ADDR_VAR 0 57
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55241: LD_ADDR_VAR 0 58
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55471: LD_ADDR_VAR 0 59
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55559: LD_ADDR_VAR 0 60
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55647: LD_ADDR_VAR 0 61
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55735: LD_ADDR_VAR 0 62
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55823: LD_ADDR_VAR 0 63
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55911: LD_ADDR_VAR 0 64
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// end ; 1 :
55999: GO 61896
56001: LD_INT 1
56003: DOUBLE
56004: EQUAL
56005: IFTRUE 56009
56007: GO 58632
56009: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56010: LD_ADDR_VAR 0 11
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56054: LD_ADDR_VAR 0 12
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56095: LD_ADDR_VAR 0 13
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56135: LD_ADDR_VAR 0 14
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56176: LD_ADDR_VAR 0 15
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56220: LD_ADDR_VAR 0 16
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56266: LD_ADDR_VAR 0 17
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56310: LD_ADDR_VAR 0 18
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56351: LD_ADDR_VAR 0 19
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56391: LD_ADDR_VAR 0 20
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56432: LD_ADDR_VAR 0 21
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56476: LD_ADDR_VAR 0 22
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56522: LD_ADDR_VAR 0 23
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 4
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56566: LD_ADDR_VAR 0 24
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56607: LD_ADDR_VAR 0 25
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56647: LD_ADDR_VAR 0 26
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56688: LD_ADDR_VAR 0 27
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 4
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56732: LD_ADDR_VAR 0 28
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 4
56763: NEG
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56778: LD_ADDR_VAR 0 29
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 4
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 5
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 4
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 6
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 6
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 5
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56933: LD_ADDR_VAR 0 30
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 5
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 5
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 6
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 6
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57076: LD_ADDR_VAR 0 31
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 4
57123: PUSH
57124: LD_INT 4
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 5
57153: PUSH
57154: LD_INT 5
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: LD_INT 5
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 6
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 6
57183: PUSH
57184: LD_INT 6
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: LD_INT 6
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57215: LD_ADDR_VAR 0 32
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 5
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 6
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 6
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 5
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57358: LD_ADDR_VAR 0 33
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 4
57410: NEG
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 4
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 6
57478: NEG
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 6
57489: NEG
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57513: LD_ADDR_VAR 0 34
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: LD_INT 5
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: NEG
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 5
57616: NEG
57617: PUSH
57618: LD_INT 5
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: LD_INT 6
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 6
57640: NEG
57641: PUSH
57642: LD_INT 5
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 6
57652: NEG
57653: PUSH
57654: LD_INT 6
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57676: LD_ADDR_VAR 0 41
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57720: LD_ADDR_VAR 0 42
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57761: LD_ADDR_VAR 0 43
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57801: LD_ADDR_VAR 0 44
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57842: LD_ADDR_VAR 0 45
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57886: LD_ADDR_VAR 0 46
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57932: LD_ADDR_VAR 0 47
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57965: LD_ADDR_VAR 0 48
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57996: LD_ADDR_VAR 0 49
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58025: LD_ADDR_VAR 0 50
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58054: LD_ADDR_VAR 0 51
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58085: LD_ADDR_VAR 0 52
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58118: LD_ADDR_VAR 0 53
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58162: LD_ADDR_VAR 0 54
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58203: LD_ADDR_VAR 0 55
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58243: LD_ADDR_VAR 0 56
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58284: LD_ADDR_VAR 0 57
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58328: LD_ADDR_VAR 0 58
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 3
58347: NEG
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58374: LD_ADDR_VAR 0 59
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58418: LD_ADDR_VAR 0 60
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58459: LD_ADDR_VAR 0 61
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58499: LD_ADDR_VAR 0 62
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58540: LD_ADDR_VAR 0 63
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58584: LD_ADDR_VAR 0 64
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// end ; 2 :
58630: GO 61896
58632: LD_INT 2
58634: DOUBLE
58635: EQUAL
58636: IFTRUE 58640
58638: GO 61895
58640: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58641: LD_ADDR_VAR 0 29
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 5
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 5
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 4
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 5
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 4
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 4
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 5
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 5
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: LD_INT 5
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 4
59026: NEG
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 5
59098: NEG
59099: PUSH
59100: LD_INT 5
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 5
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59179: LD_ADDR_VAR 0 30
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 5
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 5
59216: PUSH
59217: LD_INT 5
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: LD_INT 5
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 5
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 4
59369: NEG
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 4
59414: NEG
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 5
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: LD_INT 4
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 4
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 4
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 5
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 4
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 5
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59726: LD_ADDR_VAR 0 31
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 4
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 5
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: LD_INT 5
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: LD_INT 4
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: LD_INT 5
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: NEG
60001: PUSH
60002: LD_INT 5
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 5
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 5
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 5
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60276: LD_ADDR_VAR 0 32
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 5
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: LD_INT 4
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 4
60445: NEG
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: LD_INT 5
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 4
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 4
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 5
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: LD_INT 3
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 5
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 4
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 4
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 4
60688: PUSH
60689: LD_INT 4
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 5
60708: PUSH
60709: LD_INT 4
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 5
60718: PUSH
60719: LD_INT 5
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 4
60728: PUSH
60729: LD_INT 5
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 5
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 5
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60823: LD_ADDR_VAR 0 33
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: LD_INT 4
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: LD_INT 5
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 5
60890: NEG
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: NEG
60903: PUSH
60904: LD_INT 5
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 5
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 4
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 4
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 5
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 5
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 4
61163: PUSH
61164: LD_INT 4
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 4
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 5
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61361: LD_ADDR_VAR 0 34
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 5
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: LD_INT 4
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 3
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 4
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 5
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 4
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: LD_INT 4
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 5
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 5
61593: PUSH
61594: LD_INT 5
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 4
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 5
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 5
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 4
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 4
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 5
61802: NEG
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: NEG
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: ST_TO_ADDR
// end ; end ;
61893: GO 61896
61895: POP
// case btype of b_depot , b_warehouse :
61896: LD_VAR 0 1
61900: PUSH
61901: LD_INT 0
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61915
61907: LD_INT 1
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61915
61913: GO 62116
61915: POP
// case nation of nation_american :
61916: LD_VAR 0 5
61920: PUSH
61921: LD_INT 1
61923: DOUBLE
61924: EQUAL
61925: IFTRUE 61929
61927: GO 61985
61929: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61930: LD_ADDR_VAR 0 9
61934: PUSH
61935: LD_VAR 0 11
61939: PUSH
61940: LD_VAR 0 12
61944: PUSH
61945: LD_VAR 0 13
61949: PUSH
61950: LD_VAR 0 14
61954: PUSH
61955: LD_VAR 0 15
61959: PUSH
61960: LD_VAR 0 16
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: PUSH
61973: LD_VAR 0 4
61977: PUSH
61978: LD_INT 1
61980: PLUS
61981: ARRAY
61982: ST_TO_ADDR
61983: GO 62114
61985: LD_INT 2
61987: DOUBLE
61988: EQUAL
61989: IFTRUE 61993
61991: GO 62049
61993: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61994: LD_ADDR_VAR 0 9
61998: PUSH
61999: LD_VAR 0 17
62003: PUSH
62004: LD_VAR 0 18
62008: PUSH
62009: LD_VAR 0 19
62013: PUSH
62014: LD_VAR 0 20
62018: PUSH
62019: LD_VAR 0 21
62023: PUSH
62024: LD_VAR 0 22
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: PUSH
62037: LD_VAR 0 4
62041: PUSH
62042: LD_INT 1
62044: PLUS
62045: ARRAY
62046: ST_TO_ADDR
62047: GO 62114
62049: LD_INT 3
62051: DOUBLE
62052: EQUAL
62053: IFTRUE 62057
62055: GO 62113
62057: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62058: LD_ADDR_VAR 0 9
62062: PUSH
62063: LD_VAR 0 23
62067: PUSH
62068: LD_VAR 0 24
62072: PUSH
62073: LD_VAR 0 25
62077: PUSH
62078: LD_VAR 0 26
62082: PUSH
62083: LD_VAR 0 27
62087: PUSH
62088: LD_VAR 0 28
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: PUSH
62101: LD_VAR 0 4
62105: PUSH
62106: LD_INT 1
62108: PLUS
62109: ARRAY
62110: ST_TO_ADDR
62111: GO 62114
62113: POP
62114: GO 62669
62116: LD_INT 2
62118: DOUBLE
62119: EQUAL
62120: IFTRUE 62130
62122: LD_INT 3
62124: DOUBLE
62125: EQUAL
62126: IFTRUE 62130
62128: GO 62186
62130: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62131: LD_ADDR_VAR 0 9
62135: PUSH
62136: LD_VAR 0 29
62140: PUSH
62141: LD_VAR 0 30
62145: PUSH
62146: LD_VAR 0 31
62150: PUSH
62151: LD_VAR 0 32
62155: PUSH
62156: LD_VAR 0 33
62160: PUSH
62161: LD_VAR 0 34
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: PUSH
62174: LD_VAR 0 4
62178: PUSH
62179: LD_INT 1
62181: PLUS
62182: ARRAY
62183: ST_TO_ADDR
62184: GO 62669
62186: LD_INT 16
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62248
62192: LD_INT 17
62194: DOUBLE
62195: EQUAL
62196: IFTRUE 62248
62198: LD_INT 18
62200: DOUBLE
62201: EQUAL
62202: IFTRUE 62248
62204: LD_INT 19
62206: DOUBLE
62207: EQUAL
62208: IFTRUE 62248
62210: LD_INT 22
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62248
62216: LD_INT 20
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62248
62222: LD_INT 21
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62248
62228: LD_INT 23
62230: DOUBLE
62231: EQUAL
62232: IFTRUE 62248
62234: LD_INT 24
62236: DOUBLE
62237: EQUAL
62238: IFTRUE 62248
62240: LD_INT 25
62242: DOUBLE
62243: EQUAL
62244: IFTRUE 62248
62246: GO 62304
62248: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62249: LD_ADDR_VAR 0 9
62253: PUSH
62254: LD_VAR 0 35
62258: PUSH
62259: LD_VAR 0 36
62263: PUSH
62264: LD_VAR 0 37
62268: PUSH
62269: LD_VAR 0 38
62273: PUSH
62274: LD_VAR 0 39
62278: PUSH
62279: LD_VAR 0 40
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: PUSH
62292: LD_VAR 0 4
62296: PUSH
62297: LD_INT 1
62299: PLUS
62300: ARRAY
62301: ST_TO_ADDR
62302: GO 62669
62304: LD_INT 6
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62360
62310: LD_INT 7
62312: DOUBLE
62313: EQUAL
62314: IFTRUE 62360
62316: LD_INT 8
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62360
62322: LD_INT 13
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62360
62328: LD_INT 12
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62360
62334: LD_INT 15
62336: DOUBLE
62337: EQUAL
62338: IFTRUE 62360
62340: LD_INT 11
62342: DOUBLE
62343: EQUAL
62344: IFTRUE 62360
62346: LD_INT 14
62348: DOUBLE
62349: EQUAL
62350: IFTRUE 62360
62352: LD_INT 10
62354: DOUBLE
62355: EQUAL
62356: IFTRUE 62360
62358: GO 62416
62360: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62361: LD_ADDR_VAR 0 9
62365: PUSH
62366: LD_VAR 0 41
62370: PUSH
62371: LD_VAR 0 42
62375: PUSH
62376: LD_VAR 0 43
62380: PUSH
62381: LD_VAR 0 44
62385: PUSH
62386: LD_VAR 0 45
62390: PUSH
62391: LD_VAR 0 46
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: PUSH
62404: LD_VAR 0 4
62408: PUSH
62409: LD_INT 1
62411: PLUS
62412: ARRAY
62413: ST_TO_ADDR
62414: GO 62669
62416: LD_INT 36
62418: DOUBLE
62419: EQUAL
62420: IFTRUE 62424
62422: GO 62480
62424: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62425: LD_ADDR_VAR 0 9
62429: PUSH
62430: LD_VAR 0 47
62434: PUSH
62435: LD_VAR 0 48
62439: PUSH
62440: LD_VAR 0 49
62444: PUSH
62445: LD_VAR 0 50
62449: PUSH
62450: LD_VAR 0 51
62454: PUSH
62455: LD_VAR 0 52
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 4
62472: PUSH
62473: LD_INT 1
62475: PLUS
62476: ARRAY
62477: ST_TO_ADDR
62478: GO 62669
62480: LD_INT 4
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62506
62486: LD_INT 5
62488: DOUBLE
62489: EQUAL
62490: IFTRUE 62506
62492: LD_INT 34
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62506
62498: LD_INT 37
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62506
62504: GO 62562
62506: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62507: LD_ADDR_VAR 0 9
62511: PUSH
62512: LD_VAR 0 53
62516: PUSH
62517: LD_VAR 0 54
62521: PUSH
62522: LD_VAR 0 55
62526: PUSH
62527: LD_VAR 0 56
62531: PUSH
62532: LD_VAR 0 57
62536: PUSH
62537: LD_VAR 0 58
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: PUSH
62550: LD_VAR 0 4
62554: PUSH
62555: LD_INT 1
62557: PLUS
62558: ARRAY
62559: ST_TO_ADDR
62560: GO 62669
62562: LD_INT 31
62564: DOUBLE
62565: EQUAL
62566: IFTRUE 62612
62568: LD_INT 32
62570: DOUBLE
62571: EQUAL
62572: IFTRUE 62612
62574: LD_INT 33
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62612
62580: LD_INT 27
62582: DOUBLE
62583: EQUAL
62584: IFTRUE 62612
62586: LD_INT 26
62588: DOUBLE
62589: EQUAL
62590: IFTRUE 62612
62592: LD_INT 28
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62612
62598: LD_INT 29
62600: DOUBLE
62601: EQUAL
62602: IFTRUE 62612
62604: LD_INT 30
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62612
62610: GO 62668
62612: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62613: LD_ADDR_VAR 0 9
62617: PUSH
62618: LD_VAR 0 59
62622: PUSH
62623: LD_VAR 0 60
62627: PUSH
62628: LD_VAR 0 61
62632: PUSH
62633: LD_VAR 0 62
62637: PUSH
62638: LD_VAR 0 63
62642: PUSH
62643: LD_VAR 0 64
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: PUSH
62656: LD_VAR 0 4
62660: PUSH
62661: LD_INT 1
62663: PLUS
62664: ARRAY
62665: ST_TO_ADDR
62666: GO 62669
62668: POP
// temp_list2 = [ ] ;
62669: LD_ADDR_VAR 0 10
62673: PUSH
62674: EMPTY
62675: ST_TO_ADDR
// for i in temp_list do
62676: LD_ADDR_VAR 0 8
62680: PUSH
62681: LD_VAR 0 9
62685: PUSH
62686: FOR_IN
62687: IFFALSE 62739
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62689: LD_ADDR_VAR 0 10
62693: PUSH
62694: LD_VAR 0 10
62698: PUSH
62699: LD_VAR 0 8
62703: PUSH
62704: LD_INT 1
62706: ARRAY
62707: PUSH
62708: LD_VAR 0 2
62712: PLUS
62713: PUSH
62714: LD_VAR 0 8
62718: PUSH
62719: LD_INT 2
62721: ARRAY
62722: PUSH
62723: LD_VAR 0 3
62727: PLUS
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: ADD
62736: ST_TO_ADDR
62737: GO 62686
62739: POP
62740: POP
// result = temp_list2 ;
62741: LD_ADDR_VAR 0 7
62745: PUSH
62746: LD_VAR 0 10
62750: ST_TO_ADDR
// end ;
62751: LD_VAR 0 7
62755: RET
// export function EnemyInRange ( unit , dist ) ; begin
62756: LD_INT 0
62758: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62759: LD_ADDR_VAR 0 3
62763: PUSH
62764: LD_VAR 0 1
62768: PPUSH
62769: CALL_OW 255
62773: PPUSH
62774: LD_VAR 0 1
62778: PPUSH
62779: CALL_OW 250
62783: PPUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: CALL_OW 251
62793: PPUSH
62794: LD_VAR 0 2
62798: PPUSH
62799: CALL 36158 0 4
62803: PUSH
62804: LD_INT 4
62806: ARRAY
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 3
62812: RET
// export function PlayerSeeMe ( unit ) ; begin
62813: LD_INT 0
62815: PPUSH
// result := See ( your_side , unit ) ;
62816: LD_ADDR_VAR 0 2
62820: PUSH
62821: LD_OWVAR 2
62825: PPUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 292
62835: ST_TO_ADDR
// end ;
62836: LD_VAR 0 2
62840: RET
// export function ReverseDir ( unit ) ; begin
62841: LD_INT 0
62843: PPUSH
// if not unit then
62844: LD_VAR 0 1
62848: NOT
62849: IFFALSE 62853
// exit ;
62851: GO 62876
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62853: LD_ADDR_VAR 0 2
62857: PUSH
62858: LD_VAR 0 1
62862: PPUSH
62863: CALL_OW 254
62867: PUSH
62868: LD_INT 3
62870: PLUS
62871: PUSH
62872: LD_INT 6
62874: MOD
62875: ST_TO_ADDR
// end ;
62876: LD_VAR 0 2
62880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62881: LD_INT 0
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
62887: PPUSH
62888: PPUSH
// if not unit or not hexes then
62889: LD_VAR 0 1
62893: NOT
62894: PUSH
62895: LD_VAR 0 2
62899: NOT
62900: OR
62901: IFFALSE 62905
// exit ;
62903: GO 63028
// dist := 9999 ;
62905: LD_ADDR_VAR 0 5
62909: PUSH
62910: LD_INT 9999
62912: ST_TO_ADDR
// for i = 1 to hexes do
62913: LD_ADDR_VAR 0 4
62917: PUSH
62918: DOUBLE
62919: LD_INT 1
62921: DEC
62922: ST_TO_ADDR
62923: LD_VAR 0 2
62927: PUSH
62928: FOR_TO
62929: IFFALSE 63016
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62931: LD_ADDR_VAR 0 6
62935: PUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: LD_VAR 0 2
62945: PUSH
62946: LD_VAR 0 4
62950: ARRAY
62951: PUSH
62952: LD_INT 1
62954: ARRAY
62955: PPUSH
62956: LD_VAR 0 2
62960: PUSH
62961: LD_VAR 0 4
62965: ARRAY
62966: PUSH
62967: LD_INT 2
62969: ARRAY
62970: PPUSH
62971: CALL_OW 297
62975: ST_TO_ADDR
// if tdist < dist then
62976: LD_VAR 0 6
62980: PUSH
62981: LD_VAR 0 5
62985: LESS
62986: IFFALSE 63014
// begin hex := hexes [ i ] ;
62988: LD_ADDR_VAR 0 8
62992: PUSH
62993: LD_VAR 0 2
62997: PUSH
62998: LD_VAR 0 4
63002: ARRAY
63003: ST_TO_ADDR
// dist := tdist ;
63004: LD_ADDR_VAR 0 5
63008: PUSH
63009: LD_VAR 0 6
63013: ST_TO_ADDR
// end ; end ;
63014: GO 62928
63016: POP
63017: POP
// result := hex ;
63018: LD_ADDR_VAR 0 3
63022: PUSH
63023: LD_VAR 0 8
63027: ST_TO_ADDR
// end ;
63028: LD_VAR 0 3
63032: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63033: LD_INT 0
63035: PPUSH
63036: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63037: LD_VAR 0 1
63041: NOT
63042: PUSH
63043: LD_VAR 0 1
63047: PUSH
63048: LD_INT 21
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 23
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PPUSH
63072: CALL_OW 69
63076: IN
63077: NOT
63078: OR
63079: IFFALSE 63083
// exit ;
63081: GO 63130
// for i = 1 to 3 do
63083: LD_ADDR_VAR 0 3
63087: PUSH
63088: DOUBLE
63089: LD_INT 1
63091: DEC
63092: ST_TO_ADDR
63093: LD_INT 3
63095: PUSH
63096: FOR_TO
63097: IFFALSE 63128
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 250
63108: PPUSH
63109: LD_VAR 0 1
63113: PPUSH
63114: CALL_OW 251
63118: PPUSH
63119: LD_INT 1
63121: PPUSH
63122: CALL_OW 453
63126: GO 63096
63128: POP
63129: POP
// end ;
63130: LD_VAR 0 2
63134: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63143: LD_VAR 0 1
63147: NOT
63148: PUSH
63149: LD_VAR 0 2
63153: NOT
63154: OR
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 314
63165: OR
63166: IFFALSE 63170
// exit ;
63168: GO 63611
// x := GetX ( enemy_unit ) ;
63170: LD_ADDR_VAR 0 7
63174: PUSH
63175: LD_VAR 0 2
63179: PPUSH
63180: CALL_OW 250
63184: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63185: LD_ADDR_VAR 0 8
63189: PUSH
63190: LD_VAR 0 2
63194: PPUSH
63195: CALL_OW 251
63199: ST_TO_ADDR
// if not x or not y then
63200: LD_VAR 0 7
63204: NOT
63205: PUSH
63206: LD_VAR 0 8
63210: NOT
63211: OR
63212: IFFALSE 63216
// exit ;
63214: GO 63611
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63216: LD_ADDR_VAR 0 6
63220: PUSH
63221: LD_VAR 0 7
63225: PPUSH
63226: LD_INT 0
63228: PPUSH
63229: LD_INT 4
63231: PPUSH
63232: CALL_OW 272
63236: PUSH
63237: LD_VAR 0 8
63241: PPUSH
63242: LD_INT 0
63244: PPUSH
63245: LD_INT 4
63247: PPUSH
63248: CALL_OW 273
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_VAR 0 7
63261: PPUSH
63262: LD_INT 1
63264: PPUSH
63265: LD_INT 4
63267: PPUSH
63268: CALL_OW 272
63272: PUSH
63273: LD_VAR 0 8
63277: PPUSH
63278: LD_INT 1
63280: PPUSH
63281: LD_INT 4
63283: PPUSH
63284: CALL_OW 273
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_VAR 0 7
63297: PPUSH
63298: LD_INT 2
63300: PPUSH
63301: LD_INT 4
63303: PPUSH
63304: CALL_OW 272
63308: PUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_INT 2
63316: PPUSH
63317: LD_INT 4
63319: PPUSH
63320: CALL_OW 273
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_VAR 0 7
63333: PPUSH
63334: LD_INT 3
63336: PPUSH
63337: LD_INT 4
63339: PPUSH
63340: CALL_OW 272
63344: PUSH
63345: LD_VAR 0 8
63349: PPUSH
63350: LD_INT 3
63352: PPUSH
63353: LD_INT 4
63355: PPUSH
63356: CALL_OW 273
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_VAR 0 7
63369: PPUSH
63370: LD_INT 4
63372: PPUSH
63373: LD_INT 4
63375: PPUSH
63376: CALL_OW 272
63380: PUSH
63381: LD_VAR 0 8
63385: PPUSH
63386: LD_INT 4
63388: PPUSH
63389: LD_INT 4
63391: PPUSH
63392: CALL_OW 273
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 7
63405: PPUSH
63406: LD_INT 5
63408: PPUSH
63409: LD_INT 4
63411: PPUSH
63412: CALL_OW 272
63416: PUSH
63417: LD_VAR 0 8
63421: PPUSH
63422: LD_INT 5
63424: PPUSH
63425: LD_INT 4
63427: PPUSH
63428: CALL_OW 273
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: ST_TO_ADDR
// for i = tmp downto 1 do
63445: LD_ADDR_VAR 0 4
63449: PUSH
63450: DOUBLE
63451: LD_VAR 0 6
63455: INC
63456: ST_TO_ADDR
63457: LD_INT 1
63459: PUSH
63460: FOR_DOWNTO
63461: IFFALSE 63562
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63463: LD_VAR 0 6
63467: PUSH
63468: LD_VAR 0 4
63472: ARRAY
63473: PUSH
63474: LD_INT 1
63476: ARRAY
63477: PPUSH
63478: LD_VAR 0 6
63482: PUSH
63483: LD_VAR 0 4
63487: ARRAY
63488: PUSH
63489: LD_INT 2
63491: ARRAY
63492: PPUSH
63493: CALL_OW 488
63497: NOT
63498: PUSH
63499: LD_VAR 0 6
63503: PUSH
63504: LD_VAR 0 4
63508: ARRAY
63509: PUSH
63510: LD_INT 1
63512: ARRAY
63513: PPUSH
63514: LD_VAR 0 6
63518: PUSH
63519: LD_VAR 0 4
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: PPUSH
63529: CALL_OW 428
63533: PUSH
63534: LD_INT 0
63536: NONEQUAL
63537: OR
63538: IFFALSE 63560
// tmp := Delete ( tmp , i ) ;
63540: LD_ADDR_VAR 0 6
63544: PUSH
63545: LD_VAR 0 6
63549: PPUSH
63550: LD_VAR 0 4
63554: PPUSH
63555: CALL_OW 3
63559: ST_TO_ADDR
63560: GO 63460
63562: POP
63563: POP
// j := GetClosestHex ( unit , tmp ) ;
63564: LD_ADDR_VAR 0 5
63568: PUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: LD_VAR 0 6
63578: PPUSH
63579: CALL 62881 0 2
63583: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63584: LD_VAR 0 1
63588: PPUSH
63589: LD_VAR 0 5
63593: PUSH
63594: LD_INT 1
63596: ARRAY
63597: PPUSH
63598: LD_VAR 0 5
63602: PUSH
63603: LD_INT 2
63605: ARRAY
63606: PPUSH
63607: CALL_OW 111
// end ;
63611: LD_VAR 0 3
63615: RET
// export function PrepareApemanSoldier ( ) ; begin
63616: LD_INT 0
63618: PPUSH
// uc_nation := 0 ;
63619: LD_ADDR_OWVAR 21
63623: PUSH
63624: LD_INT 0
63626: ST_TO_ADDR
// hc_sex := sex_male ;
63627: LD_ADDR_OWVAR 27
63631: PUSH
63632: LD_INT 1
63634: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63635: LD_ADDR_OWVAR 28
63639: PUSH
63640: LD_INT 15
63642: ST_TO_ADDR
// hc_gallery :=  ;
63643: LD_ADDR_OWVAR 33
63647: PUSH
63648: LD_STRING 
63650: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63651: LD_ADDR_OWVAR 31
63655: PUSH
63656: LD_INT 0
63658: PPUSH
63659: LD_INT 3
63661: PPUSH
63662: CALL_OW 12
63666: PUSH
63667: LD_INT 0
63669: PPUSH
63670: LD_INT 3
63672: PPUSH
63673: CALL_OW 12
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// end ;
63690: LD_VAR 0 1
63694: RET
// export function PrepareApemanEngineer ( ) ; begin
63695: LD_INT 0
63697: PPUSH
// uc_nation := 0 ;
63698: LD_ADDR_OWVAR 21
63702: PUSH
63703: LD_INT 0
63705: ST_TO_ADDR
// hc_sex := sex_male ;
63706: LD_ADDR_OWVAR 27
63710: PUSH
63711: LD_INT 1
63713: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63714: LD_ADDR_OWVAR 28
63718: PUSH
63719: LD_INT 16
63721: ST_TO_ADDR
// hc_gallery :=  ;
63722: LD_ADDR_OWVAR 33
63726: PUSH
63727: LD_STRING 
63729: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63730: LD_ADDR_OWVAR 31
63734: PUSH
63735: LD_INT 0
63737: PPUSH
63738: LD_INT 3
63740: PPUSH
63741: CALL_OW 12
63745: PUSH
63746: LD_INT 0
63748: PPUSH
63749: LD_INT 3
63751: PPUSH
63752: CALL_OW 12
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// end ;
63769: LD_VAR 0 1
63773: RET
// export function PrepareApeman ( agressivity ) ; begin
63774: LD_INT 0
63776: PPUSH
// uc_side := 0 ;
63777: LD_ADDR_OWVAR 20
63781: PUSH
63782: LD_INT 0
63784: ST_TO_ADDR
// uc_nation := 0 ;
63785: LD_ADDR_OWVAR 21
63789: PUSH
63790: LD_INT 0
63792: ST_TO_ADDR
// hc_sex := sex_male ;
63793: LD_ADDR_OWVAR 27
63797: PUSH
63798: LD_INT 1
63800: ST_TO_ADDR
// hc_class := class_apeman ;
63801: LD_ADDR_OWVAR 28
63805: PUSH
63806: LD_INT 12
63808: ST_TO_ADDR
// hc_gallery :=  ;
63809: LD_ADDR_OWVAR 33
63813: PUSH
63814: LD_STRING 
63816: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63817: LD_ADDR_OWVAR 35
63821: PUSH
63822: LD_VAR 0 1
63826: NEG
63827: PPUSH
63828: LD_VAR 0 1
63832: PPUSH
63833: CALL_OW 12
63837: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63838: LD_ADDR_OWVAR 31
63842: PUSH
63843: LD_INT 0
63845: PPUSH
63846: LD_INT 3
63848: PPUSH
63849: CALL_OW 12
63853: PUSH
63854: LD_INT 0
63856: PPUSH
63857: LD_INT 3
63859: PPUSH
63860: CALL_OW 12
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: ST_TO_ADDR
// end ;
63877: LD_VAR 0 2
63881: RET
// export function PrepareTiger ( agressivity ) ; begin
63882: LD_INT 0
63884: PPUSH
// uc_side := 0 ;
63885: LD_ADDR_OWVAR 20
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// uc_nation := 0 ;
63893: LD_ADDR_OWVAR 21
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// hc_class := class_tiger ;
63901: LD_ADDR_OWVAR 28
63905: PUSH
63906: LD_INT 14
63908: ST_TO_ADDR
// hc_gallery :=  ;
63909: LD_ADDR_OWVAR 33
63913: PUSH
63914: LD_STRING 
63916: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63917: LD_ADDR_OWVAR 35
63921: PUSH
63922: LD_VAR 0 1
63926: NEG
63927: PPUSH
63928: LD_VAR 0 1
63932: PPUSH
63933: CALL_OW 12
63937: ST_TO_ADDR
// end ;
63938: LD_VAR 0 2
63942: RET
// export function PrepareEnchidna ( ) ; begin
63943: LD_INT 0
63945: PPUSH
// uc_side := 0 ;
63946: LD_ADDR_OWVAR 20
63950: PUSH
63951: LD_INT 0
63953: ST_TO_ADDR
// uc_nation := 0 ;
63954: LD_ADDR_OWVAR 21
63958: PUSH
63959: LD_INT 0
63961: ST_TO_ADDR
// hc_class := class_baggie ;
63962: LD_ADDR_OWVAR 28
63966: PUSH
63967: LD_INT 13
63969: ST_TO_ADDR
// hc_gallery :=  ;
63970: LD_ADDR_OWVAR 33
63974: PUSH
63975: LD_STRING 
63977: ST_TO_ADDR
// end ;
63978: LD_VAR 0 1
63982: RET
// export function PrepareFrog ( ) ; begin
63983: LD_INT 0
63985: PPUSH
// uc_side := 0 ;
63986: LD_ADDR_OWVAR 20
63990: PUSH
63991: LD_INT 0
63993: ST_TO_ADDR
// uc_nation := 0 ;
63994: LD_ADDR_OWVAR 21
63998: PUSH
63999: LD_INT 0
64001: ST_TO_ADDR
// hc_class := class_frog ;
64002: LD_ADDR_OWVAR 28
64006: PUSH
64007: LD_INT 19
64009: ST_TO_ADDR
// hc_gallery :=  ;
64010: LD_ADDR_OWVAR 33
64014: PUSH
64015: LD_STRING 
64017: ST_TO_ADDR
// end ;
64018: LD_VAR 0 1
64022: RET
// export function PrepareFish ( ) ; begin
64023: LD_INT 0
64025: PPUSH
// uc_side := 0 ;
64026: LD_ADDR_OWVAR 20
64030: PUSH
64031: LD_INT 0
64033: ST_TO_ADDR
// uc_nation := 0 ;
64034: LD_ADDR_OWVAR 21
64038: PUSH
64039: LD_INT 0
64041: ST_TO_ADDR
// hc_class := class_fish ;
64042: LD_ADDR_OWVAR 28
64046: PUSH
64047: LD_INT 20
64049: ST_TO_ADDR
// hc_gallery :=  ;
64050: LD_ADDR_OWVAR 33
64054: PUSH
64055: LD_STRING 
64057: ST_TO_ADDR
// end ;
64058: LD_VAR 0 1
64062: RET
// export function PrepareBird ( ) ; begin
64063: LD_INT 0
64065: PPUSH
// uc_side := 0 ;
64066: LD_ADDR_OWVAR 20
64070: PUSH
64071: LD_INT 0
64073: ST_TO_ADDR
// uc_nation := 0 ;
64074: LD_ADDR_OWVAR 21
64078: PUSH
64079: LD_INT 0
64081: ST_TO_ADDR
// hc_class := class_phororhacos ;
64082: LD_ADDR_OWVAR 28
64086: PUSH
64087: LD_INT 18
64089: ST_TO_ADDR
// hc_gallery :=  ;
64090: LD_ADDR_OWVAR 33
64094: PUSH
64095: LD_STRING 
64097: ST_TO_ADDR
// end ;
64098: LD_VAR 0 1
64102: RET
// export function PrepareHorse ( ) ; begin
64103: LD_INT 0
64105: PPUSH
// uc_side := 0 ;
64106: LD_ADDR_OWVAR 20
64110: PUSH
64111: LD_INT 0
64113: ST_TO_ADDR
// uc_nation := 0 ;
64114: LD_ADDR_OWVAR 21
64118: PUSH
64119: LD_INT 0
64121: ST_TO_ADDR
// hc_class := class_horse ;
64122: LD_ADDR_OWVAR 28
64126: PUSH
64127: LD_INT 21
64129: ST_TO_ADDR
// hc_gallery :=  ;
64130: LD_ADDR_OWVAR 33
64134: PUSH
64135: LD_STRING 
64137: ST_TO_ADDR
// end ;
64138: LD_VAR 0 1
64142: RET
// export function PrepareMastodont ( ) ; begin
64143: LD_INT 0
64145: PPUSH
// uc_side := 0 ;
64146: LD_ADDR_OWVAR 20
64150: PUSH
64151: LD_INT 0
64153: ST_TO_ADDR
// uc_nation := 0 ;
64154: LD_ADDR_OWVAR 21
64158: PUSH
64159: LD_INT 0
64161: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64162: LD_ADDR_OWVAR 37
64166: PUSH
64167: LD_INT 31
64169: ST_TO_ADDR
// vc_control := control_rider ;
64170: LD_ADDR_OWVAR 38
64174: PUSH
64175: LD_INT 4
64177: ST_TO_ADDR
// end ;
64178: LD_VAR 0 1
64182: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64183: LD_INT 0
64185: PPUSH
64186: PPUSH
64187: PPUSH
// uc_side = 0 ;
64188: LD_ADDR_OWVAR 20
64192: PUSH
64193: LD_INT 0
64195: ST_TO_ADDR
// uc_nation = 0 ;
64196: LD_ADDR_OWVAR 21
64200: PUSH
64201: LD_INT 0
64203: ST_TO_ADDR
// InitHc_All ( ) ;
64204: CALL_OW 584
// InitVc ;
64208: CALL_OW 20
// if mastodonts then
64212: LD_VAR 0 6
64216: IFFALSE 64283
// for i = 1 to mastodonts do
64218: LD_ADDR_VAR 0 11
64222: PUSH
64223: DOUBLE
64224: LD_INT 1
64226: DEC
64227: ST_TO_ADDR
64228: LD_VAR 0 6
64232: PUSH
64233: FOR_TO
64234: IFFALSE 64281
// begin vc_chassis := 31 ;
64236: LD_ADDR_OWVAR 37
64240: PUSH
64241: LD_INT 31
64243: ST_TO_ADDR
// vc_control := control_rider ;
64244: LD_ADDR_OWVAR 38
64248: PUSH
64249: LD_INT 4
64251: ST_TO_ADDR
// animal := CreateVehicle ;
64252: LD_ADDR_VAR 0 12
64256: PUSH
64257: CALL_OW 45
64261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64262: LD_VAR 0 12
64266: PPUSH
64267: LD_VAR 0 8
64271: PPUSH
64272: LD_INT 0
64274: PPUSH
64275: CALL 66418 0 3
// end ;
64279: GO 64233
64281: POP
64282: POP
// if horses then
64283: LD_VAR 0 5
64287: IFFALSE 64354
// for i = 1 to horses do
64289: LD_ADDR_VAR 0 11
64293: PUSH
64294: DOUBLE
64295: LD_INT 1
64297: DEC
64298: ST_TO_ADDR
64299: LD_VAR 0 5
64303: PUSH
64304: FOR_TO
64305: IFFALSE 64352
// begin hc_class := 21 ;
64307: LD_ADDR_OWVAR 28
64311: PUSH
64312: LD_INT 21
64314: ST_TO_ADDR
// hc_gallery :=  ;
64315: LD_ADDR_OWVAR 33
64319: PUSH
64320: LD_STRING 
64322: ST_TO_ADDR
// animal := CreateHuman ;
64323: LD_ADDR_VAR 0 12
64327: PUSH
64328: CALL_OW 44
64332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64333: LD_VAR 0 12
64337: PPUSH
64338: LD_VAR 0 8
64342: PPUSH
64343: LD_INT 0
64345: PPUSH
64346: CALL 66418 0 3
// end ;
64350: GO 64304
64352: POP
64353: POP
// if birds then
64354: LD_VAR 0 1
64358: IFFALSE 64425
// for i = 1 to birds do
64360: LD_ADDR_VAR 0 11
64364: PUSH
64365: DOUBLE
64366: LD_INT 1
64368: DEC
64369: ST_TO_ADDR
64370: LD_VAR 0 1
64374: PUSH
64375: FOR_TO
64376: IFFALSE 64423
// begin hc_class = 18 ;
64378: LD_ADDR_OWVAR 28
64382: PUSH
64383: LD_INT 18
64385: ST_TO_ADDR
// hc_gallery =  ;
64386: LD_ADDR_OWVAR 33
64390: PUSH
64391: LD_STRING 
64393: ST_TO_ADDR
// animal := CreateHuman ;
64394: LD_ADDR_VAR 0 12
64398: PUSH
64399: CALL_OW 44
64403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64404: LD_VAR 0 12
64408: PPUSH
64409: LD_VAR 0 8
64413: PPUSH
64414: LD_INT 0
64416: PPUSH
64417: CALL 66418 0 3
// end ;
64421: GO 64375
64423: POP
64424: POP
// if tigers then
64425: LD_VAR 0 2
64429: IFFALSE 64513
// for i = 1 to tigers do
64431: LD_ADDR_VAR 0 11
64435: PUSH
64436: DOUBLE
64437: LD_INT 1
64439: DEC
64440: ST_TO_ADDR
64441: LD_VAR 0 2
64445: PUSH
64446: FOR_TO
64447: IFFALSE 64511
// begin hc_class = class_tiger ;
64449: LD_ADDR_OWVAR 28
64453: PUSH
64454: LD_INT 14
64456: ST_TO_ADDR
// hc_gallery =  ;
64457: LD_ADDR_OWVAR 33
64461: PUSH
64462: LD_STRING 
64464: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64465: LD_ADDR_OWVAR 35
64469: PUSH
64470: LD_INT 7
64472: NEG
64473: PPUSH
64474: LD_INT 7
64476: PPUSH
64477: CALL_OW 12
64481: ST_TO_ADDR
// animal := CreateHuman ;
64482: LD_ADDR_VAR 0 12
64486: PUSH
64487: CALL_OW 44
64491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64492: LD_VAR 0 12
64496: PPUSH
64497: LD_VAR 0 8
64501: PPUSH
64502: LD_INT 0
64504: PPUSH
64505: CALL 66418 0 3
// end ;
64509: GO 64446
64511: POP
64512: POP
// if apemans then
64513: LD_VAR 0 3
64517: IFFALSE 64640
// for i = 1 to apemans do
64519: LD_ADDR_VAR 0 11
64523: PUSH
64524: DOUBLE
64525: LD_INT 1
64527: DEC
64528: ST_TO_ADDR
64529: LD_VAR 0 3
64533: PUSH
64534: FOR_TO
64535: IFFALSE 64638
// begin hc_class = class_apeman ;
64537: LD_ADDR_OWVAR 28
64541: PUSH
64542: LD_INT 12
64544: ST_TO_ADDR
// hc_gallery =  ;
64545: LD_ADDR_OWVAR 33
64549: PUSH
64550: LD_STRING 
64552: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64553: LD_ADDR_OWVAR 35
64557: PUSH
64558: LD_INT 2
64560: NEG
64561: PPUSH
64562: LD_INT 2
64564: PPUSH
64565: CALL_OW 12
64569: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64570: LD_ADDR_OWVAR 31
64574: PUSH
64575: LD_INT 1
64577: PPUSH
64578: LD_INT 3
64580: PPUSH
64581: CALL_OW 12
64585: PUSH
64586: LD_INT 1
64588: PPUSH
64589: LD_INT 3
64591: PPUSH
64592: CALL_OW 12
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// animal := CreateHuman ;
64609: LD_ADDR_VAR 0 12
64613: PUSH
64614: CALL_OW 44
64618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64619: LD_VAR 0 12
64623: PPUSH
64624: LD_VAR 0 8
64628: PPUSH
64629: LD_INT 0
64631: PPUSH
64632: CALL 66418 0 3
// end ;
64636: GO 64534
64638: POP
64639: POP
// if enchidnas then
64640: LD_VAR 0 4
64644: IFFALSE 64711
// for i = 1 to enchidnas do
64646: LD_ADDR_VAR 0 11
64650: PUSH
64651: DOUBLE
64652: LD_INT 1
64654: DEC
64655: ST_TO_ADDR
64656: LD_VAR 0 4
64660: PUSH
64661: FOR_TO
64662: IFFALSE 64709
// begin hc_class = 13 ;
64664: LD_ADDR_OWVAR 28
64668: PUSH
64669: LD_INT 13
64671: ST_TO_ADDR
// hc_gallery =  ;
64672: LD_ADDR_OWVAR 33
64676: PUSH
64677: LD_STRING 
64679: ST_TO_ADDR
// animal := CreateHuman ;
64680: LD_ADDR_VAR 0 12
64684: PUSH
64685: CALL_OW 44
64689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64690: LD_VAR 0 12
64694: PPUSH
64695: LD_VAR 0 8
64699: PPUSH
64700: LD_INT 0
64702: PPUSH
64703: CALL 66418 0 3
// end ;
64707: GO 64661
64709: POP
64710: POP
// if fishes then
64711: LD_VAR 0 7
64715: IFFALSE 64782
// for i = 1 to fishes do
64717: LD_ADDR_VAR 0 11
64721: PUSH
64722: DOUBLE
64723: LD_INT 1
64725: DEC
64726: ST_TO_ADDR
64727: LD_VAR 0 7
64731: PUSH
64732: FOR_TO
64733: IFFALSE 64780
// begin hc_class = 20 ;
64735: LD_ADDR_OWVAR 28
64739: PUSH
64740: LD_INT 20
64742: ST_TO_ADDR
// hc_gallery =  ;
64743: LD_ADDR_OWVAR 33
64747: PUSH
64748: LD_STRING 
64750: ST_TO_ADDR
// animal := CreateHuman ;
64751: LD_ADDR_VAR 0 12
64755: PUSH
64756: CALL_OW 44
64760: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64761: LD_VAR 0 12
64765: PPUSH
64766: LD_VAR 0 9
64770: PPUSH
64771: LD_INT 0
64773: PPUSH
64774: CALL 66418 0 3
// end ;
64778: GO 64732
64780: POP
64781: POP
// end ;
64782: LD_VAR 0 10
64786: RET
// export function WantHeal ( sci , unit ) ; begin
64787: LD_INT 0
64789: PPUSH
// if GetTaskList ( sci ) > 0 then
64790: LD_VAR 0 1
64794: PPUSH
64795: CALL_OW 437
64799: PUSH
64800: LD_INT 0
64802: GREATER
64803: IFFALSE 64873
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64805: LD_VAR 0 1
64809: PPUSH
64810: CALL_OW 437
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PUSH
64819: LD_INT 1
64821: ARRAY
64822: PUSH
64823: LD_STRING l
64825: EQUAL
64826: PUSH
64827: LD_VAR 0 1
64831: PPUSH
64832: CALL_OW 437
64836: PUSH
64837: LD_INT 1
64839: ARRAY
64840: PUSH
64841: LD_INT 4
64843: ARRAY
64844: PUSH
64845: LD_VAR 0 2
64849: EQUAL
64850: AND
64851: IFFALSE 64863
// result := true else
64853: LD_ADDR_VAR 0 3
64857: PUSH
64858: LD_INT 1
64860: ST_TO_ADDR
64861: GO 64871
// result := false ;
64863: LD_ADDR_VAR 0 3
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
// end else
64871: GO 64881
// result := false ;
64873: LD_ADDR_VAR 0 3
64877: PUSH
64878: LD_INT 0
64880: ST_TO_ADDR
// end ;
64881: LD_VAR 0 3
64885: RET
// export function HealTarget ( sci ) ; begin
64886: LD_INT 0
64888: PPUSH
// if not sci then
64889: LD_VAR 0 1
64893: NOT
64894: IFFALSE 64898
// exit ;
64896: GO 64963
// result := 0 ;
64898: LD_ADDR_VAR 0 2
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
// if GetTaskList ( sci ) then
64906: LD_VAR 0 1
64910: PPUSH
64911: CALL_OW 437
64915: IFFALSE 64963
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 437
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PUSH
64935: LD_STRING l
64937: EQUAL
64938: IFFALSE 64963
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: CALL_OW 437
64954: PUSH
64955: LD_INT 1
64957: ARRAY
64958: PUSH
64959: LD_INT 4
64961: ARRAY
64962: ST_TO_ADDR
// end ;
64963: LD_VAR 0 2
64967: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64968: LD_INT 0
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
// if not base_units then
64974: LD_VAR 0 1
64978: NOT
64979: IFFALSE 64983
// exit ;
64981: GO 65070
// result := false ;
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 0
64990: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64991: LD_ADDR_VAR 0 5
64995: PUSH
64996: LD_VAR 0 1
65000: PPUSH
65001: LD_INT 21
65003: PUSH
65004: LD_INT 3
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PPUSH
65011: CALL_OW 72
65015: ST_TO_ADDR
// if not tmp then
65016: LD_VAR 0 5
65020: NOT
65021: IFFALSE 65025
// exit ;
65023: GO 65070
// for i in tmp do
65025: LD_ADDR_VAR 0 3
65029: PUSH
65030: LD_VAR 0 5
65034: PUSH
65035: FOR_IN
65036: IFFALSE 65068
// begin result := EnemyInRange ( i , 22 ) ;
65038: LD_ADDR_VAR 0 2
65042: PUSH
65043: LD_VAR 0 3
65047: PPUSH
65048: LD_INT 22
65050: PPUSH
65051: CALL 62756 0 2
65055: ST_TO_ADDR
// if result then
65056: LD_VAR 0 2
65060: IFFALSE 65066
// exit ;
65062: POP
65063: POP
65064: GO 65070
// end ;
65066: GO 65035
65068: POP
65069: POP
// end ;
65070: LD_VAR 0 2
65074: RET
// export function FilterByTag ( units , tag ) ; begin
65075: LD_INT 0
65077: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: LD_INT 120
65090: PUSH
65091: LD_VAR 0 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PPUSH
65100: CALL_OW 72
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 3
65109: RET
// export function IsDriver ( un ) ; begin
65110: LD_INT 0
65112: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65113: LD_ADDR_VAR 0 2
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_INT 55
65125: PUSH
65126: EMPTY
65127: LIST
65128: PPUSH
65129: CALL_OW 69
65133: IN
65134: ST_TO_ADDR
// end ;
65135: LD_VAR 0 2
65139: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65140: LD_INT 0
65142: PPUSH
65143: PPUSH
// list := [ ] ;
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: EMPTY
65150: ST_TO_ADDR
// case d of 0 :
65151: LD_VAR 0 3
65155: PUSH
65156: LD_INT 0
65158: DOUBLE
65159: EQUAL
65160: IFTRUE 65164
65162: GO 65297
65164: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65165: LD_ADDR_VAR 0 5
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_INT 4
65177: MINUS
65178: PUSH
65179: LD_VAR 0 2
65183: PUSH
65184: LD_INT 4
65186: MINUS
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 3
65203: MINUS
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: PUSH
65218: LD_VAR 0 1
65222: PUSH
65223: LD_INT 4
65225: PLUS
65226: PUSH
65227: LD_VAR 0 2
65231: PUSH
65232: LD_INT 4
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: PUSH
65240: LD_VAR 0 1
65244: PUSH
65245: LD_INT 3
65247: PLUS
65248: PUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_INT 3
65256: PLUS
65257: PUSH
65258: LD_INT 5
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: PUSH
65266: LD_VAR 0 1
65270: PUSH
65271: LD_VAR 0 2
65275: PUSH
65276: LD_INT 4
65278: PLUS
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// end ; 1 :
65295: GO 65995
65297: LD_INT 1
65299: DOUBLE
65300: EQUAL
65301: IFTRUE 65305
65303: GO 65438
65305: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65306: LD_ADDR_VAR 0 5
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_VAR 0 2
65320: PUSH
65321: LD_INT 4
65323: MINUS
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: PUSH
65333: LD_VAR 0 1
65337: PUSH
65338: LD_INT 3
65340: MINUS
65341: PUSH
65342: LD_VAR 0 2
65346: PUSH
65347: LD_INT 3
65349: MINUS
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: LD_INT 4
65366: MINUS
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: PUSH
65381: LD_VAR 0 1
65385: PUSH
65386: LD_VAR 0 2
65390: PUSH
65391: LD_INT 3
65393: PLUS
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: LD_VAR 0 1
65407: PUSH
65408: LD_INT 4
65410: PLUS
65411: PUSH
65412: LD_VAR 0 2
65416: PUSH
65417: LD_INT 4
65419: PLUS
65420: PUSH
65421: LD_INT 5
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: ST_TO_ADDR
// end ; 2 :
65436: GO 65995
65438: LD_INT 2
65440: DOUBLE
65441: EQUAL
65442: IFTRUE 65446
65444: GO 65575
65446: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65447: LD_ADDR_VAR 0 5
65451: PUSH
65452: LD_VAR 0 1
65456: PUSH
65457: LD_VAR 0 2
65461: PUSH
65462: LD_INT 3
65464: MINUS
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: LD_VAR 0 1
65478: PUSH
65479: LD_INT 4
65481: PLUS
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: PUSH
65496: LD_VAR 0 1
65500: PUSH
65501: LD_VAR 0 2
65505: PUSH
65506: LD_INT 4
65508: PLUS
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: PUSH
65518: LD_VAR 0 1
65522: PUSH
65523: LD_INT 3
65525: MINUS
65526: PUSH
65527: LD_VAR 0 2
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_INT 4
65547: MINUS
65548: PUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 4
65556: MINUS
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: ST_TO_ADDR
// end ; 3 :
65573: GO 65995
65575: LD_INT 3
65577: DOUBLE
65578: EQUAL
65579: IFTRUE 65583
65581: GO 65716
65583: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65584: LD_ADDR_VAR 0 5
65588: PUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_INT 3
65596: PLUS
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: LD_VAR 0 1
65615: PUSH
65616: LD_INT 4
65618: PLUS
65619: PUSH
65620: LD_VAR 0 2
65624: PUSH
65625: LD_INT 4
65627: PLUS
65628: PUSH
65629: LD_INT 5
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: PUSH
65637: LD_VAR 0 1
65641: PUSH
65642: LD_INT 4
65644: MINUS
65645: PUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: PUSH
65659: LD_VAR 0 1
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: LD_INT 4
65671: MINUS
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: PUSH
65681: LD_VAR 0 1
65685: PUSH
65686: LD_INT 3
65688: MINUS
65689: PUSH
65690: LD_VAR 0 2
65694: PUSH
65695: LD_INT 3
65697: MINUS
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: ST_TO_ADDR
// end ; 4 :
65714: GO 65995
65716: LD_INT 4
65718: DOUBLE
65719: EQUAL
65720: IFTRUE 65724
65722: GO 65857
65724: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65725: LD_ADDR_VAR 0 5
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_VAR 0 2
65739: PUSH
65740: LD_INT 4
65742: PLUS
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: PUSH
65752: LD_VAR 0 1
65756: PUSH
65757: LD_INT 3
65759: PLUS
65760: PUSH
65761: LD_VAR 0 2
65765: PUSH
65766: LD_INT 3
65768: PLUS
65769: PUSH
65770: LD_INT 5
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: LD_VAR 0 1
65782: PUSH
65783: LD_INT 4
65785: PLUS
65786: PUSH
65787: LD_VAR 0 2
65791: PUSH
65792: LD_INT 4
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_VAR 0 2
65809: PUSH
65810: LD_INT 3
65812: MINUS
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: PUSH
65822: LD_VAR 0 1
65826: PUSH
65827: LD_INT 4
65829: MINUS
65830: PUSH
65831: LD_VAR 0 2
65835: PUSH
65836: LD_INT 4
65838: MINUS
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: ST_TO_ADDR
// end ; 5 :
65855: GO 65995
65857: LD_INT 5
65859: DOUBLE
65860: EQUAL
65861: IFTRUE 65865
65863: GO 65994
65865: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65866: LD_ADDR_VAR 0 5
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 4
65878: MINUS
65879: PUSH
65880: LD_VAR 0 2
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: LD_VAR 0 1
65897: PUSH
65898: LD_VAR 0 2
65902: PUSH
65903: LD_INT 4
65905: MINUS
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_VAR 0 1
65919: PUSH
65920: LD_INT 4
65922: PLUS
65923: PUSH
65924: LD_VAR 0 2
65928: PUSH
65929: LD_INT 4
65931: PLUS
65932: PUSH
65933: LD_INT 5
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: PUSH
65941: LD_VAR 0 1
65945: PUSH
65946: LD_INT 3
65948: PLUS
65949: PUSH
65950: LD_VAR 0 2
65954: PUSH
65955: LD_INT 4
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: LD_VAR 0 1
65967: PUSH
65968: LD_VAR 0 2
65972: PUSH
65973: LD_INT 3
65975: PLUS
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: ST_TO_ADDR
// end ; end ;
65992: GO 65995
65994: POP
// result := list ;
65995: LD_ADDR_VAR 0 4
65999: PUSH
66000: LD_VAR 0 5
66004: ST_TO_ADDR
// end ;
66005: LD_VAR 0 4
66009: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66010: LD_INT 0
66012: PPUSH
66013: PPUSH
66014: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66015: LD_VAR 0 1
66019: NOT
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: IN
66044: NOT
66045: OR
66046: IFFALSE 66050
// exit ;
66048: GO 66142
// tmp := [ ] ;
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: EMPTY
66056: ST_TO_ADDR
// for i in units do
66057: LD_ADDR_VAR 0 4
66061: PUSH
66062: LD_VAR 0 1
66066: PUSH
66067: FOR_IN
66068: IFFALSE 66111
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66070: LD_ADDR_VAR 0 5
66074: PUSH
66075: LD_VAR 0 5
66079: PPUSH
66080: LD_VAR 0 5
66084: PUSH
66085: LD_INT 1
66087: PLUS
66088: PPUSH
66089: LD_VAR 0 4
66093: PPUSH
66094: LD_VAR 0 2
66098: PPUSH
66099: CALL_OW 259
66103: PPUSH
66104: CALL_OW 2
66108: ST_TO_ADDR
66109: GO 66067
66111: POP
66112: POP
// if not tmp then
66113: LD_VAR 0 5
66117: NOT
66118: IFFALSE 66122
// exit ;
66120: GO 66142
// result := SortListByListDesc ( units , tmp ) ;
66122: LD_ADDR_VAR 0 3
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_VAR 0 5
66136: PPUSH
66137: CALL_OW 77
66141: ST_TO_ADDR
// end ;
66142: LD_VAR 0 3
66146: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66147: LD_INT 0
66149: PPUSH
66150: PPUSH
66151: PPUSH
// result := false ;
66152: LD_ADDR_VAR 0 3
66156: PUSH
66157: LD_INT 0
66159: ST_TO_ADDR
// x := GetX ( building ) ;
66160: LD_ADDR_VAR 0 4
66164: PUSH
66165: LD_VAR 0 2
66169: PPUSH
66170: CALL_OW 250
66174: ST_TO_ADDR
// y := GetY ( building ) ;
66175: LD_ADDR_VAR 0 5
66179: PUSH
66180: LD_VAR 0 2
66184: PPUSH
66185: CALL_OW 251
66189: ST_TO_ADDR
// if not building or not x or not y then
66190: LD_VAR 0 2
66194: NOT
66195: PUSH
66196: LD_VAR 0 4
66200: NOT
66201: OR
66202: PUSH
66203: LD_VAR 0 5
66207: NOT
66208: OR
66209: IFFALSE 66213
// exit ;
66211: GO 66305
// if GetTaskList ( unit ) then
66213: LD_VAR 0 1
66217: PPUSH
66218: CALL_OW 437
66222: IFFALSE 66305
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66224: LD_STRING e
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: CALL_OW 437
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PUSH
66241: LD_INT 1
66243: ARRAY
66244: EQUAL
66245: PUSH
66246: LD_VAR 0 4
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 437
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PUSH
66265: LD_INT 2
66267: ARRAY
66268: EQUAL
66269: AND
66270: PUSH
66271: LD_VAR 0 5
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 437
66285: PUSH
66286: LD_INT 1
66288: ARRAY
66289: PUSH
66290: LD_INT 3
66292: ARRAY
66293: EQUAL
66294: AND
66295: IFFALSE 66305
// result := true end ;
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: LD_INT 1
66304: ST_TO_ADDR
// end ;
66305: LD_VAR 0 3
66309: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66310: LD_INT 0
66312: PPUSH
// result := false ;
66313: LD_ADDR_VAR 0 4
66317: PUSH
66318: LD_INT 0
66320: ST_TO_ADDR
// if GetTaskList ( unit ) then
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 437
66330: IFFALSE 66413
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66332: LD_STRING M
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: CALL_OW 437
66344: PUSH
66345: LD_INT 1
66347: ARRAY
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: EQUAL
66353: PUSH
66354: LD_VAR 0 2
66358: PUSH
66359: LD_VAR 0 1
66363: PPUSH
66364: CALL_OW 437
66368: PUSH
66369: LD_INT 1
66371: ARRAY
66372: PUSH
66373: LD_INT 2
66375: ARRAY
66376: EQUAL
66377: AND
66378: PUSH
66379: LD_VAR 0 3
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: CALL_OW 437
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PUSH
66398: LD_INT 3
66400: ARRAY
66401: EQUAL
66402: AND
66403: IFFALSE 66413
// result := true ;
66405: LD_ADDR_VAR 0 4
66409: PUSH
66410: LD_INT 1
66412: ST_TO_ADDR
// end ; end ;
66413: LD_VAR 0 4
66417: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66418: LD_INT 0
66420: PPUSH
66421: PPUSH
66422: PPUSH
66423: PPUSH
// if not unit or not area then
66424: LD_VAR 0 1
66428: NOT
66429: PUSH
66430: LD_VAR 0 2
66434: NOT
66435: OR
66436: IFFALSE 66440
// exit ;
66438: GO 66604
// tmp := AreaToList ( area , i ) ;
66440: LD_ADDR_VAR 0 6
66444: PUSH
66445: LD_VAR 0 2
66449: PPUSH
66450: LD_VAR 0 5
66454: PPUSH
66455: CALL_OW 517
66459: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66460: LD_ADDR_VAR 0 5
66464: PUSH
66465: DOUBLE
66466: LD_INT 1
66468: DEC
66469: ST_TO_ADDR
66470: LD_VAR 0 6
66474: PUSH
66475: LD_INT 1
66477: ARRAY
66478: PUSH
66479: FOR_TO
66480: IFFALSE 66602
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66482: LD_ADDR_VAR 0 7
66486: PUSH
66487: LD_VAR 0 6
66491: PUSH
66492: LD_INT 1
66494: ARRAY
66495: PUSH
66496: LD_VAR 0 5
66500: ARRAY
66501: PUSH
66502: LD_VAR 0 6
66506: PUSH
66507: LD_INT 2
66509: ARRAY
66510: PUSH
66511: LD_VAR 0 5
66515: ARRAY
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66521: LD_VAR 0 7
66525: PUSH
66526: LD_INT 1
66528: ARRAY
66529: PPUSH
66530: LD_VAR 0 7
66534: PUSH
66535: LD_INT 2
66537: ARRAY
66538: PPUSH
66539: CALL_OW 428
66543: PUSH
66544: LD_INT 0
66546: EQUAL
66547: IFFALSE 66600
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_VAR 0 7
66558: PUSH
66559: LD_INT 1
66561: ARRAY
66562: PPUSH
66563: LD_VAR 0 7
66567: PUSH
66568: LD_INT 2
66570: ARRAY
66571: PPUSH
66572: LD_VAR 0 3
66576: PPUSH
66577: CALL_OW 48
// result := IsPlaced ( unit ) ;
66581: LD_ADDR_VAR 0 4
66585: PUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 305
66595: ST_TO_ADDR
// exit ;
66596: POP
66597: POP
66598: GO 66604
// end ; end ;
66600: GO 66479
66602: POP
66603: POP
// end ;
66604: LD_VAR 0 4
66608: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66609: LD_INT 0
66611: PPUSH
66612: PPUSH
66613: PPUSH
// if not side or side > 8 then
66614: LD_VAR 0 1
66618: NOT
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_INT 8
66627: GREATER
66628: OR
66629: IFFALSE 66633
// exit ;
66631: GO 66820
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66633: LD_ADDR_VAR 0 4
66637: PUSH
66638: LD_INT 22
66640: PUSH
66641: LD_VAR 0 1
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 21
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PPUSH
66664: CALL_OW 69
66668: ST_TO_ADDR
// if not tmp then
66669: LD_VAR 0 4
66673: NOT
66674: IFFALSE 66678
// exit ;
66676: GO 66820
// enable_addtolog := true ;
66678: LD_ADDR_OWVAR 81
66682: PUSH
66683: LD_INT 1
66685: ST_TO_ADDR
// AddToLog ( [ ) ;
66686: LD_STRING [
66688: PPUSH
66689: CALL_OW 561
// for i in tmp do
66693: LD_ADDR_VAR 0 3
66697: PUSH
66698: LD_VAR 0 4
66702: PUSH
66703: FOR_IN
66704: IFFALSE 66811
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66706: LD_STRING [
66708: PUSH
66709: LD_VAR 0 3
66713: PPUSH
66714: CALL_OW 266
66718: STR
66719: PUSH
66720: LD_STRING , 
66722: STR
66723: PUSH
66724: LD_VAR 0 3
66728: PPUSH
66729: CALL_OW 250
66733: STR
66734: PUSH
66735: LD_STRING , 
66737: STR
66738: PUSH
66739: LD_VAR 0 3
66743: PPUSH
66744: CALL_OW 251
66748: STR
66749: PUSH
66750: LD_STRING , 
66752: STR
66753: PUSH
66754: LD_VAR 0 3
66758: PPUSH
66759: CALL_OW 254
66763: STR
66764: PUSH
66765: LD_STRING , 
66767: STR
66768: PUSH
66769: LD_VAR 0 3
66773: PPUSH
66774: LD_INT 1
66776: PPUSH
66777: CALL_OW 268
66781: STR
66782: PUSH
66783: LD_STRING , 
66785: STR
66786: PUSH
66787: LD_VAR 0 3
66791: PPUSH
66792: LD_INT 2
66794: PPUSH
66795: CALL_OW 268
66799: STR
66800: PUSH
66801: LD_STRING ],
66803: STR
66804: PPUSH
66805: CALL_OW 561
// end ;
66809: GO 66703
66811: POP
66812: POP
// AddToLog ( ]; ) ;
66813: LD_STRING ];
66815: PPUSH
66816: CALL_OW 561
// end ;
66820: LD_VAR 0 2
66824: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66825: LD_INT 0
66827: PPUSH
66828: PPUSH
66829: PPUSH
66830: PPUSH
66831: PPUSH
// if not area or not rate or not max then
66832: LD_VAR 0 1
66836: NOT
66837: PUSH
66838: LD_VAR 0 2
66842: NOT
66843: OR
66844: PUSH
66845: LD_VAR 0 4
66849: NOT
66850: OR
66851: IFFALSE 66855
// exit ;
66853: GO 67044
// while 1 do
66855: LD_INT 1
66857: IFFALSE 67044
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66859: LD_ADDR_VAR 0 9
66863: PUSH
66864: LD_VAR 0 1
66868: PPUSH
66869: LD_INT 1
66871: PPUSH
66872: CALL_OW 287
66876: PUSH
66877: LD_INT 10
66879: MUL
66880: ST_TO_ADDR
// r := rate / 10 ;
66881: LD_ADDR_VAR 0 7
66885: PUSH
66886: LD_VAR 0 2
66890: PUSH
66891: LD_INT 10
66893: DIVREAL
66894: ST_TO_ADDR
// time := 1 1$00 ;
66895: LD_ADDR_VAR 0 8
66899: PUSH
66900: LD_INT 2100
66902: ST_TO_ADDR
// if amount < min then
66903: LD_VAR 0 9
66907: PUSH
66908: LD_VAR 0 3
66912: LESS
66913: IFFALSE 66931
// r := r * 2 else
66915: LD_ADDR_VAR 0 7
66919: PUSH
66920: LD_VAR 0 7
66924: PUSH
66925: LD_INT 2
66927: MUL
66928: ST_TO_ADDR
66929: GO 66957
// if amount > max then
66931: LD_VAR 0 9
66935: PUSH
66936: LD_VAR 0 4
66940: GREATER
66941: IFFALSE 66957
// r := r / 2 ;
66943: LD_ADDR_VAR 0 7
66947: PUSH
66948: LD_VAR 0 7
66952: PUSH
66953: LD_INT 2
66955: DIVREAL
66956: ST_TO_ADDR
// time := time / r ;
66957: LD_ADDR_VAR 0 8
66961: PUSH
66962: LD_VAR 0 8
66966: PUSH
66967: LD_VAR 0 7
66971: DIVREAL
66972: ST_TO_ADDR
// if time < 0 then
66973: LD_VAR 0 8
66977: PUSH
66978: LD_INT 0
66980: LESS
66981: IFFALSE 66998
// time := time * - 1 ;
66983: LD_ADDR_VAR 0 8
66987: PUSH
66988: LD_VAR 0 8
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: MUL
66997: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66998: LD_VAR 0 8
67002: PUSH
67003: LD_INT 35
67005: PPUSH
67006: LD_INT 875
67008: PPUSH
67009: CALL_OW 12
67013: PLUS
67014: PPUSH
67015: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67019: LD_INT 1
67021: PPUSH
67022: LD_INT 5
67024: PPUSH
67025: CALL_OW 12
67029: PPUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_INT 1
67037: PPUSH
67038: CALL_OW 55
// end ;
67042: GO 66855
// end ;
67044: LD_VAR 0 5
67048: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67049: LD_INT 0
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
// if not turrets or not factories then
67059: LD_VAR 0 1
67063: NOT
67064: PUSH
67065: LD_VAR 0 2
67069: NOT
67070: OR
67071: IFFALSE 67075
// exit ;
67073: GO 67382
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67075: LD_ADDR_VAR 0 10
67079: PUSH
67080: LD_INT 5
67082: PUSH
67083: LD_INT 6
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: LD_INT 5
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 24
67117: PUSH
67118: LD_INT 25
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 23
67127: PUSH
67128: LD_INT 27
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 42
67141: PUSH
67142: LD_INT 43
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 44
67151: PUSH
67152: LD_INT 46
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 45
67161: PUSH
67162: LD_INT 47
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// result := [ ] ;
67179: LD_ADDR_VAR 0 3
67183: PUSH
67184: EMPTY
67185: ST_TO_ADDR
// for i in turrets do
67186: LD_ADDR_VAR 0 4
67190: PUSH
67191: LD_VAR 0 1
67195: PUSH
67196: FOR_IN
67197: IFFALSE 67380
// begin nat := GetNation ( i ) ;
67199: LD_ADDR_VAR 0 7
67203: PUSH
67204: LD_VAR 0 4
67208: PPUSH
67209: CALL_OW 248
67213: ST_TO_ADDR
// weapon := 0 ;
67214: LD_ADDR_VAR 0 8
67218: PUSH
67219: LD_INT 0
67221: ST_TO_ADDR
// if not nat then
67222: LD_VAR 0 7
67226: NOT
67227: IFFALSE 67231
// continue ;
67229: GO 67196
// for j in list [ nat ] do
67231: LD_ADDR_VAR 0 5
67235: PUSH
67236: LD_VAR 0 10
67240: PUSH
67241: LD_VAR 0 7
67245: ARRAY
67246: PUSH
67247: FOR_IN
67248: IFFALSE 67289
// if GetBWeapon ( i ) = j [ 1 ] then
67250: LD_VAR 0 4
67254: PPUSH
67255: CALL_OW 269
67259: PUSH
67260: LD_VAR 0 5
67264: PUSH
67265: LD_INT 1
67267: ARRAY
67268: EQUAL
67269: IFFALSE 67287
// begin weapon := j [ 2 ] ;
67271: LD_ADDR_VAR 0 8
67275: PUSH
67276: LD_VAR 0 5
67280: PUSH
67281: LD_INT 2
67283: ARRAY
67284: ST_TO_ADDR
// break ;
67285: GO 67289
// end ;
67287: GO 67247
67289: POP
67290: POP
// if not weapon then
67291: LD_VAR 0 8
67295: NOT
67296: IFFALSE 67300
// continue ;
67298: GO 67196
// for k in factories do
67300: LD_ADDR_VAR 0 6
67304: PUSH
67305: LD_VAR 0 2
67309: PUSH
67310: FOR_IN
67311: IFFALSE 67376
// begin weapons := AvailableWeaponList ( k ) ;
67313: LD_ADDR_VAR 0 9
67317: PUSH
67318: LD_VAR 0 6
67322: PPUSH
67323: CALL_OW 478
67327: ST_TO_ADDR
// if not weapons then
67328: LD_VAR 0 9
67332: NOT
67333: IFFALSE 67337
// continue ;
67335: GO 67310
// if weapon in weapons then
67337: LD_VAR 0 8
67341: PUSH
67342: LD_VAR 0 9
67346: IN
67347: IFFALSE 67374
// begin result := [ i , weapon ] ;
67349: LD_ADDR_VAR 0 3
67353: PUSH
67354: LD_VAR 0 4
67358: PUSH
67359: LD_VAR 0 8
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: ST_TO_ADDR
// exit ;
67368: POP
67369: POP
67370: POP
67371: POP
67372: GO 67382
// end ; end ;
67374: GO 67310
67376: POP
67377: POP
// end ;
67378: GO 67196
67380: POP
67381: POP
// end ;
67382: LD_VAR 0 3
67386: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67387: LD_INT 0
67389: PPUSH
// if not side or side > 8 then
67390: LD_VAR 0 3
67394: NOT
67395: PUSH
67396: LD_VAR 0 3
67400: PUSH
67401: LD_INT 8
67403: GREATER
67404: OR
67405: IFFALSE 67409
// exit ;
67407: GO 67468
// if not range then
67409: LD_VAR 0 4
67413: NOT
67414: IFFALSE 67425
// range := - 12 ;
67416: LD_ADDR_VAR 0 4
67420: PUSH
67421: LD_INT 12
67423: NEG
67424: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67425: LD_VAR 0 1
67429: PPUSH
67430: LD_VAR 0 2
67434: PPUSH
67435: LD_VAR 0 3
67439: PPUSH
67440: LD_VAR 0 4
67444: PPUSH
67445: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67449: LD_VAR 0 1
67453: PPUSH
67454: LD_VAR 0 2
67458: PPUSH
67459: LD_VAR 0 3
67463: PPUSH
67464: CALL_OW 331
// end ;
67468: LD_VAR 0 5
67472: RET
// export function Video ( mode ) ; begin
67473: LD_INT 0
67475: PPUSH
// ingame_video = mode ;
67476: LD_ADDR_OWVAR 52
67480: PUSH
67481: LD_VAR 0 1
67485: ST_TO_ADDR
// interface_hidden = mode ;
67486: LD_ADDR_OWVAR 54
67490: PUSH
67491: LD_VAR 0 1
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 2
67500: RET
// export function Join ( array , element ) ; begin
67501: LD_INT 0
67503: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67504: LD_ADDR_VAR 0 3
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: LD_VAR 0 1
67518: PUSH
67519: LD_INT 1
67521: PLUS
67522: PPUSH
67523: LD_VAR 0 2
67527: PPUSH
67528: CALL_OW 1
67532: ST_TO_ADDR
// end ;
67533: LD_VAR 0 3
67537: RET
// export function JoinUnion ( array , element ) ; begin
67538: LD_INT 0
67540: PPUSH
// result := array union element ;
67541: LD_ADDR_VAR 0 3
67545: PUSH
67546: LD_VAR 0 1
67550: PUSH
67551: LD_VAR 0 2
67555: UNION
67556: ST_TO_ADDR
// end ;
67557: LD_VAR 0 3
67561: RET
// export function GetBehemoths ( side ) ; begin
67562: LD_INT 0
67564: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67565: LD_ADDR_VAR 0 2
67569: PUSH
67570: LD_INT 22
67572: PUSH
67573: LD_VAR 0 1
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 31
67584: PUSH
67585: LD_INT 25
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PPUSH
67596: CALL_OW 69
67600: ST_TO_ADDR
// end ;
67601: LD_VAR 0 2
67605: RET
// export function Shuffle ( array ) ; var i , index ; begin
67606: LD_INT 0
67608: PPUSH
67609: PPUSH
67610: PPUSH
// result := [ ] ;
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: EMPTY
67617: ST_TO_ADDR
// if not array then
67618: LD_VAR 0 1
67622: NOT
67623: IFFALSE 67627
// exit ;
67625: GO 67726
// Randomize ;
67627: CALL_OW 10
// for i = array downto 1 do
67631: LD_ADDR_VAR 0 3
67635: PUSH
67636: DOUBLE
67637: LD_VAR 0 1
67641: INC
67642: ST_TO_ADDR
67643: LD_INT 1
67645: PUSH
67646: FOR_DOWNTO
67647: IFFALSE 67724
// begin index := rand ( 1 , array ) ;
67649: LD_ADDR_VAR 0 4
67653: PUSH
67654: LD_INT 1
67656: PPUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 12
67666: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67667: LD_ADDR_VAR 0 2
67671: PUSH
67672: LD_VAR 0 2
67676: PPUSH
67677: LD_VAR 0 2
67681: PUSH
67682: LD_INT 1
67684: PLUS
67685: PPUSH
67686: LD_VAR 0 1
67690: PUSH
67691: LD_VAR 0 4
67695: ARRAY
67696: PPUSH
67697: CALL_OW 2
67701: ST_TO_ADDR
// array := Delete ( array , index ) ;
67702: LD_ADDR_VAR 0 1
67706: PUSH
67707: LD_VAR 0 1
67711: PPUSH
67712: LD_VAR 0 4
67716: PPUSH
67717: CALL_OW 3
67721: ST_TO_ADDR
// end ;
67722: GO 67646
67724: POP
67725: POP
// end ;
67726: LD_VAR 0 2
67730: RET
// export function GetBaseMaterials ( base ) ; begin
67731: LD_INT 0
67733: PPUSH
// result := [ 0 , 0 , 0 ] ;
67734: LD_ADDR_VAR 0 2
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// if not base then
67753: LD_VAR 0 1
67757: NOT
67758: IFFALSE 67762
// exit ;
67760: GO 67811
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: LD_INT 1
67774: PPUSH
67775: CALL_OW 275
67779: PUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: LD_INT 2
67787: PPUSH
67788: CALL_OW 275
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: LD_INT 3
67800: PPUSH
67801: CALL_OW 275
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: LIST
67810: ST_TO_ADDR
// end ;
67811: LD_VAR 0 2
67815: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67816: LD_INT 0
67818: PPUSH
67819: PPUSH
// result := array ;
67820: LD_ADDR_VAR 0 3
67824: PUSH
67825: LD_VAR 0 1
67829: ST_TO_ADDR
// if size >= result then
67830: LD_VAR 0 2
67834: PUSH
67835: LD_VAR 0 3
67839: GREATEREQUAL
67840: IFFALSE 67844
// exit ;
67842: GO 67894
// if size then
67844: LD_VAR 0 2
67848: IFFALSE 67894
// for i := array downto size do
67850: LD_ADDR_VAR 0 4
67854: PUSH
67855: DOUBLE
67856: LD_VAR 0 1
67860: INC
67861: ST_TO_ADDR
67862: LD_VAR 0 2
67866: PUSH
67867: FOR_DOWNTO
67868: IFFALSE 67892
// result := Delete ( result , result ) ;
67870: LD_ADDR_VAR 0 3
67874: PUSH
67875: LD_VAR 0 3
67879: PPUSH
67880: LD_VAR 0 3
67884: PPUSH
67885: CALL_OW 3
67889: ST_TO_ADDR
67890: GO 67867
67892: POP
67893: POP
// end ;
67894: LD_VAR 0 3
67898: RET
// export function ComExit ( unit ) ; var tmp ; begin
67899: LD_INT 0
67901: PPUSH
67902: PPUSH
// if not IsInUnit ( unit ) then
67903: LD_VAR 0 1
67907: PPUSH
67908: CALL_OW 310
67912: NOT
67913: IFFALSE 67917
// exit ;
67915: GO 67977
// tmp := IsInUnit ( unit ) ;
67917: LD_ADDR_VAR 0 3
67921: PUSH
67922: LD_VAR 0 1
67926: PPUSH
67927: CALL_OW 310
67931: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67932: LD_VAR 0 3
67936: PPUSH
67937: CALL_OW 247
67941: PUSH
67942: LD_INT 2
67944: EQUAL
67945: IFFALSE 67958
// ComExitVehicle ( unit ) else
67947: LD_VAR 0 1
67951: PPUSH
67952: CALL_OW 121
67956: GO 67967
// ComExitBuilding ( unit ) ;
67958: LD_VAR 0 1
67962: PPUSH
67963: CALL_OW 122
// result := tmp ;
67967: LD_ADDR_VAR 0 2
67971: PUSH
67972: LD_VAR 0 3
67976: ST_TO_ADDR
// end ;
67977: LD_VAR 0 2
67981: RET
// export function ComExitAll ( units ) ; var i ; begin
67982: LD_INT 0
67984: PPUSH
67985: PPUSH
// if not units then
67986: LD_VAR 0 1
67990: NOT
67991: IFFALSE 67995
// exit ;
67993: GO 68021
// for i in units do
67995: LD_ADDR_VAR 0 3
67999: PUSH
68000: LD_VAR 0 1
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68019
// ComExit ( i ) ;
68008: LD_VAR 0 3
68012: PPUSH
68013: CALL 67899 0 1
68017: GO 68005
68019: POP
68020: POP
// end ;
68021: LD_VAR 0 2
68025: RET
// export function ResetHc ; begin
68026: LD_INT 0
68028: PPUSH
// InitHc ;
68029: CALL_OW 19
// hc_importance := 0 ;
68033: LD_ADDR_OWVAR 32
68037: PUSH
68038: LD_INT 0
68040: ST_TO_ADDR
// end ;
68041: LD_VAR 0 1
68045: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
68050: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68051: LD_ADDR_VAR 0 6
68055: PUSH
68056: LD_VAR 0 1
68060: PUSH
68061: LD_VAR 0 3
68065: PLUS
68066: PUSH
68067: LD_INT 2
68069: DIV
68070: ST_TO_ADDR
// if _x < 0 then
68071: LD_VAR 0 6
68075: PUSH
68076: LD_INT 0
68078: LESS
68079: IFFALSE 68096
// _x := _x * - 1 ;
68081: LD_ADDR_VAR 0 6
68085: PUSH
68086: LD_VAR 0 6
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: MUL
68095: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68096: LD_ADDR_VAR 0 7
68100: PUSH
68101: LD_VAR 0 2
68105: PUSH
68106: LD_VAR 0 4
68110: PLUS
68111: PUSH
68112: LD_INT 2
68114: DIV
68115: ST_TO_ADDR
// if _y < 0 then
68116: LD_VAR 0 7
68120: PUSH
68121: LD_INT 0
68123: LESS
68124: IFFALSE 68141
// _y := _y * - 1 ;
68126: LD_ADDR_VAR 0 7
68130: PUSH
68131: LD_VAR 0 7
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: MUL
68140: ST_TO_ADDR
// result := [ _x , _y ] ;
68141: LD_ADDR_VAR 0 5
68145: PUSH
68146: LD_VAR 0 6
68150: PUSH
68151: LD_VAR 0 7
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// end ;
68160: LD_VAR 0 5
68164: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68165: LD_INT 0
68167: PPUSH
68168: PPUSH
68169: PPUSH
68170: PPUSH
// task := GetTaskList ( unit ) ;
68171: LD_ADDR_VAR 0 7
68175: PUSH
68176: LD_VAR 0 1
68180: PPUSH
68181: CALL_OW 437
68185: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68186: LD_VAR 0 7
68190: NOT
68191: PUSH
68192: LD_VAR 0 1
68196: PPUSH
68197: LD_VAR 0 2
68201: PPUSH
68202: CALL_OW 308
68206: NOT
68207: AND
68208: IFFALSE 68212
// exit ;
68210: GO 68330
// if IsInArea ( unit , area ) then
68212: LD_VAR 0 1
68216: PPUSH
68217: LD_VAR 0 2
68221: PPUSH
68222: CALL_OW 308
68226: IFFALSE 68244
// begin ComMoveToArea ( unit , goAway ) ;
68228: LD_VAR 0 1
68232: PPUSH
68233: LD_VAR 0 3
68237: PPUSH
68238: CALL_OW 113
// exit ;
68242: GO 68330
// end ; if task [ 1 ] [ 1 ] <> M then
68244: LD_VAR 0 7
68248: PUSH
68249: LD_INT 1
68251: ARRAY
68252: PUSH
68253: LD_INT 1
68255: ARRAY
68256: PUSH
68257: LD_STRING M
68259: NONEQUAL
68260: IFFALSE 68264
// exit ;
68262: GO 68330
// x := task [ 1 ] [ 2 ] ;
68264: LD_ADDR_VAR 0 5
68268: PUSH
68269: LD_VAR 0 7
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: PUSH
68278: LD_INT 2
68280: ARRAY
68281: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68282: LD_ADDR_VAR 0 6
68286: PUSH
68287: LD_VAR 0 7
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 3
68298: ARRAY
68299: ST_TO_ADDR
// if InArea ( x , y , area ) then
68300: LD_VAR 0 5
68304: PPUSH
68305: LD_VAR 0 6
68309: PPUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: CALL_OW 309
68319: IFFALSE 68330
// ComStop ( unit ) ;
68321: LD_VAR 0 1
68325: PPUSH
68326: CALL_OW 141
// end ;
68330: LD_VAR 0 4
68334: RET
// export function Abs ( value ) ; begin
68335: LD_INT 0
68337: PPUSH
// result := value ;
68338: LD_ADDR_VAR 0 2
68342: PUSH
68343: LD_VAR 0 1
68347: ST_TO_ADDR
// if value < 0 then
68348: LD_VAR 0 1
68352: PUSH
68353: LD_INT 0
68355: LESS
68356: IFFALSE 68373
// result := value * - 1 ;
68358: LD_ADDR_VAR 0 2
68362: PUSH
68363: LD_VAR 0 1
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: MUL
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 2
68377: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68378: LD_INT 0
68380: PPUSH
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
// if not unit or not building then
68388: LD_VAR 0 1
68392: NOT
68393: PUSH
68394: LD_VAR 0 2
68398: NOT
68399: OR
68400: IFFALSE 68404
// exit ;
68402: GO 68630
// x := GetX ( building ) ;
68404: LD_ADDR_VAR 0 4
68408: PUSH
68409: LD_VAR 0 2
68413: PPUSH
68414: CALL_OW 250
68418: ST_TO_ADDR
// y := GetY ( building ) ;
68419: LD_ADDR_VAR 0 6
68423: PUSH
68424: LD_VAR 0 2
68428: PPUSH
68429: CALL_OW 251
68433: ST_TO_ADDR
// d := GetDir ( building ) ;
68434: LD_ADDR_VAR 0 8
68438: PUSH
68439: LD_VAR 0 2
68443: PPUSH
68444: CALL_OW 254
68448: ST_TO_ADDR
// r := 4 ;
68449: LD_ADDR_VAR 0 9
68453: PUSH
68454: LD_INT 4
68456: ST_TO_ADDR
// for i := 1 to 5 do
68457: LD_ADDR_VAR 0 10
68461: PUSH
68462: DOUBLE
68463: LD_INT 1
68465: DEC
68466: ST_TO_ADDR
68467: LD_INT 5
68469: PUSH
68470: FOR_TO
68471: IFFALSE 68628
// begin _x := ShiftX ( x , d , r + i ) ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: LD_VAR 0 4
68482: PPUSH
68483: LD_VAR 0 8
68487: PPUSH
68488: LD_VAR 0 9
68492: PUSH
68493: LD_VAR 0 10
68497: PLUS
68498: PPUSH
68499: CALL_OW 272
68503: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68504: LD_ADDR_VAR 0 7
68508: PUSH
68509: LD_VAR 0 6
68513: PPUSH
68514: LD_VAR 0 8
68518: PPUSH
68519: LD_VAR 0 9
68523: PUSH
68524: LD_VAR 0 10
68528: PLUS
68529: PPUSH
68530: CALL_OW 273
68534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68535: LD_VAR 0 5
68539: PPUSH
68540: LD_VAR 0 7
68544: PPUSH
68545: CALL_OW 488
68549: PUSH
68550: LD_VAR 0 5
68554: PPUSH
68555: LD_VAR 0 7
68559: PPUSH
68560: CALL_OW 428
68564: PPUSH
68565: CALL_OW 247
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: LD_INT 2
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: IN
68580: NOT
68581: AND
68582: IFFALSE 68626
// begin ComMoveXY ( unit , _x , _y ) ;
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_VAR 0 5
68593: PPUSH
68594: LD_VAR 0 7
68598: PPUSH
68599: CALL_OW 111
// result := [ _x , _y ] ;
68603: LD_ADDR_VAR 0 3
68607: PUSH
68608: LD_VAR 0 5
68612: PUSH
68613: LD_VAR 0 7
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: ST_TO_ADDR
// exit ;
68622: POP
68623: POP
68624: GO 68630
// end ; end ;
68626: GO 68470
68628: POP
68629: POP
// end ;
68630: LD_VAR 0 3
68634: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68635: LD_INT 0
68637: PPUSH
68638: PPUSH
68639: PPUSH
// result := 0 ;
68640: LD_ADDR_VAR 0 3
68644: PUSH
68645: LD_INT 0
68647: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68648: LD_VAR 0 1
68652: PUSH
68653: LD_INT 0
68655: LESS
68656: PUSH
68657: LD_VAR 0 1
68661: PUSH
68662: LD_INT 8
68664: GREATER
68665: OR
68666: PUSH
68667: LD_VAR 0 2
68671: PUSH
68672: LD_INT 0
68674: LESS
68675: OR
68676: PUSH
68677: LD_VAR 0 2
68681: PUSH
68682: LD_INT 8
68684: GREATER
68685: OR
68686: IFFALSE 68690
// exit ;
68688: GO 68765
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68690: LD_ADDR_VAR 0 4
68694: PUSH
68695: LD_INT 22
68697: PUSH
68698: LD_VAR 0 2
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PPUSH
68707: CALL_OW 69
68711: PUSH
68712: FOR_IN
68713: IFFALSE 68763
// begin un := UnitShoot ( i ) ;
68715: LD_ADDR_VAR 0 5
68719: PUSH
68720: LD_VAR 0 4
68724: PPUSH
68725: CALL_OW 504
68729: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68730: LD_VAR 0 5
68734: PPUSH
68735: CALL_OW 255
68739: PUSH
68740: LD_VAR 0 1
68744: EQUAL
68745: IFFALSE 68761
// begin result := un ;
68747: LD_ADDR_VAR 0 3
68751: PUSH
68752: LD_VAR 0 5
68756: ST_TO_ADDR
// exit ;
68757: POP
68758: POP
68759: GO 68765
// end ; end ;
68761: GO 68712
68763: POP
68764: POP
// end ;
68765: LD_VAR 0 3
68769: RET
// export function GetCargoBay ( units ) ; begin
68770: LD_INT 0
68772: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68773: LD_ADDR_VAR 0 2
68777: PUSH
68778: LD_VAR 0 1
68782: PPUSH
68783: LD_INT 2
68785: PUSH
68786: LD_INT 34
68788: PUSH
68789: LD_INT 12
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 34
68798: PUSH
68799: LD_INT 51
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 34
68808: PUSH
68809: LD_INT 32
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 34
68818: PUSH
68819: LD_INT 89
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: PPUSH
68833: CALL_OW 72
68837: ST_TO_ADDR
// end ;
68838: LD_VAR 0 2
68842: RET
// export function Negate ( value ) ; begin
68843: LD_INT 0
68845: PPUSH
// result := not value ;
68846: LD_ADDR_VAR 0 2
68850: PUSH
68851: LD_VAR 0 1
68855: NOT
68856: ST_TO_ADDR
// end ;
68857: LD_VAR 0 2
68861: RET
// export function Inc ( value ) ; begin
68862: LD_INT 0
68864: PPUSH
// result := value + 1 ;
68865: LD_ADDR_VAR 0 2
68869: PUSH
68870: LD_VAR 0 1
68874: PUSH
68875: LD_INT 1
68877: PLUS
68878: ST_TO_ADDR
// end ;
68879: LD_VAR 0 2
68883: RET
// export function Dec ( value ) ; begin
68884: LD_INT 0
68886: PPUSH
// result := value - 1 ;
68887: LD_ADDR_VAR 0 2
68891: PUSH
68892: LD_VAR 0 1
68896: PUSH
68897: LD_INT 1
68899: MINUS
68900: ST_TO_ADDR
// end ;
68901: LD_VAR 0 2
68905: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68906: LD_INT 0
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
68915: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_VAR 0 2
68925: PPUSH
68926: CALL_OW 488
68930: NOT
68931: PUSH
68932: LD_VAR 0 3
68936: PPUSH
68937: LD_VAR 0 4
68941: PPUSH
68942: CALL_OW 488
68946: NOT
68947: OR
68948: IFFALSE 68961
// begin result := - 1 ;
68950: LD_ADDR_VAR 0 5
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: ST_TO_ADDR
// exit ;
68959: GO 69196
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68961: LD_ADDR_VAR 0 12
68965: PUSH
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 2
68975: PPUSH
68976: LD_VAR 0 3
68980: PPUSH
68981: LD_VAR 0 4
68985: PPUSH
68986: CALL 68046 0 4
68990: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68991: LD_ADDR_VAR 0 11
68995: PUSH
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 2
69005: PPUSH
69006: LD_VAR 0 12
69010: PUSH
69011: LD_INT 1
69013: ARRAY
69014: PPUSH
69015: LD_VAR 0 12
69019: PUSH
69020: LD_INT 2
69022: ARRAY
69023: PPUSH
69024: CALL_OW 298
69028: ST_TO_ADDR
// distance := 9999 ;
69029: LD_ADDR_VAR 0 10
69033: PUSH
69034: LD_INT 9999
69036: ST_TO_ADDR
// for i := 0 to 5 do
69037: LD_ADDR_VAR 0 6
69041: PUSH
69042: DOUBLE
69043: LD_INT 0
69045: DEC
69046: ST_TO_ADDR
69047: LD_INT 5
69049: PUSH
69050: FOR_TO
69051: IFFALSE 69194
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69053: LD_ADDR_VAR 0 7
69057: PUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: LD_VAR 0 6
69067: PPUSH
69068: LD_VAR 0 11
69072: PPUSH
69073: CALL_OW 272
69077: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69078: LD_ADDR_VAR 0 8
69082: PUSH
69083: LD_VAR 0 2
69087: PPUSH
69088: LD_VAR 0 6
69092: PPUSH
69093: LD_VAR 0 11
69097: PPUSH
69098: CALL_OW 273
69102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69103: LD_VAR 0 7
69107: PPUSH
69108: LD_VAR 0 8
69112: PPUSH
69113: CALL_OW 488
69117: NOT
69118: IFFALSE 69122
// continue ;
69120: GO 69050
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69122: LD_ADDR_VAR 0 9
69126: PUSH
69127: LD_VAR 0 12
69131: PUSH
69132: LD_INT 1
69134: ARRAY
69135: PPUSH
69136: LD_VAR 0 12
69140: PUSH
69141: LD_INT 2
69143: ARRAY
69144: PPUSH
69145: LD_VAR 0 7
69149: PPUSH
69150: LD_VAR 0 8
69154: PPUSH
69155: CALL_OW 298
69159: ST_TO_ADDR
// if tmp < distance then
69160: LD_VAR 0 9
69164: PUSH
69165: LD_VAR 0 10
69169: LESS
69170: IFFALSE 69192
// begin result := i ;
69172: LD_ADDR_VAR 0 5
69176: PUSH
69177: LD_VAR 0 6
69181: ST_TO_ADDR
// distance := tmp ;
69182: LD_ADDR_VAR 0 10
69186: PUSH
69187: LD_VAR 0 9
69191: ST_TO_ADDR
// end ; end ;
69192: GO 69050
69194: POP
69195: POP
// end ;
69196: LD_VAR 0 5
69200: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69201: LD_INT 0
69203: PPUSH
69204: PPUSH
// if not driver or not IsInUnit ( driver ) then
69205: LD_VAR 0 1
69209: NOT
69210: PUSH
69211: LD_VAR 0 1
69215: PPUSH
69216: CALL_OW 310
69220: NOT
69221: OR
69222: IFFALSE 69226
// exit ;
69224: GO 69316
// vehicle := IsInUnit ( driver ) ;
69226: LD_ADDR_VAR 0 3
69230: PUSH
69231: LD_VAR 0 1
69235: PPUSH
69236: CALL_OW 310
69240: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69241: LD_VAR 0 1
69245: PPUSH
69246: LD_STRING \
69248: PUSH
69249: LD_INT 0
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: PUSH
69276: LD_STRING E
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_VAR 0 3
69289: PUSH
69290: LD_INT 0
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PPUSH
69312: CALL_OW 446
// end ;
69316: LD_VAR 0 2
69320: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69321: LD_INT 0
69323: PPUSH
69324: PPUSH
// if not driver or not IsInUnit ( driver ) then
69325: LD_VAR 0 1
69329: NOT
69330: PUSH
69331: LD_VAR 0 1
69335: PPUSH
69336: CALL_OW 310
69340: NOT
69341: OR
69342: IFFALSE 69346
// exit ;
69344: GO 69436
// vehicle := IsInUnit ( driver ) ;
69346: LD_ADDR_VAR 0 3
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: CALL_OW 310
69360: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69361: LD_VAR 0 1
69365: PPUSH
69366: LD_STRING \
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: LD_INT 0
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: PUSH
69396: LD_STRING E
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: LD_VAR 0 3
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PPUSH
69432: CALL_OW 447
// end ;
69436: LD_VAR 0 2
69440: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69441: LD_INT 0
69443: PPUSH
69444: PPUSH
69445: PPUSH
// tmp := [ ] ;
69446: LD_ADDR_VAR 0 5
69450: PUSH
69451: EMPTY
69452: ST_TO_ADDR
// for i in units do
69453: LD_ADDR_VAR 0 4
69457: PUSH
69458: LD_VAR 0 1
69462: PUSH
69463: FOR_IN
69464: IFFALSE 69502
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69466: LD_ADDR_VAR 0 5
69470: PUSH
69471: LD_VAR 0 5
69475: PPUSH
69476: LD_VAR 0 5
69480: PUSH
69481: LD_INT 1
69483: PLUS
69484: PPUSH
69485: LD_VAR 0 4
69489: PPUSH
69490: CALL_OW 256
69494: PPUSH
69495: CALL_OW 2
69499: ST_TO_ADDR
69500: GO 69463
69502: POP
69503: POP
// if not tmp then
69504: LD_VAR 0 5
69508: NOT
69509: IFFALSE 69513
// exit ;
69511: GO 69561
// if asc then
69513: LD_VAR 0 2
69517: IFFALSE 69541
// result := SortListByListAsc ( units , tmp ) else
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: LD_VAR 0 1
69528: PPUSH
69529: LD_VAR 0 5
69533: PPUSH
69534: CALL_OW 76
69538: ST_TO_ADDR
69539: GO 69561
// result := SortListByListDesc ( units , tmp ) ;
69541: LD_ADDR_VAR 0 3
69545: PUSH
69546: LD_VAR 0 1
69550: PPUSH
69551: LD_VAR 0 5
69555: PPUSH
69556: CALL_OW 77
69560: ST_TO_ADDR
// end ;
69561: LD_VAR 0 3
69565: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69566: LD_INT 0
69568: PPUSH
69569: PPUSH
// task := GetTaskList ( mech ) ;
69570: LD_ADDR_VAR 0 4
69574: PUSH
69575: LD_VAR 0 1
69579: PPUSH
69580: CALL_OW 437
69584: ST_TO_ADDR
// if not task then
69585: LD_VAR 0 4
69589: NOT
69590: IFFALSE 69594
// exit ;
69592: GO 69636
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69594: LD_ADDR_VAR 0 3
69598: PUSH
69599: LD_VAR 0 4
69603: PUSH
69604: LD_INT 1
69606: ARRAY
69607: PUSH
69608: LD_INT 1
69610: ARRAY
69611: PUSH
69612: LD_STRING r
69614: EQUAL
69615: PUSH
69616: LD_VAR 0 4
69620: PUSH
69621: LD_INT 1
69623: ARRAY
69624: PUSH
69625: LD_INT 4
69627: ARRAY
69628: PUSH
69629: LD_VAR 0 2
69633: EQUAL
69634: AND
69635: ST_TO_ADDR
// end ;
69636: LD_VAR 0 3
69640: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69641: LD_INT 0
69643: PPUSH
// SetDir ( unit , d ) ;
69644: LD_VAR 0 1
69648: PPUSH
69649: LD_VAR 0 4
69653: PPUSH
69654: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69658: LD_VAR 0 1
69662: PPUSH
69663: LD_VAR 0 2
69667: PPUSH
69668: LD_VAR 0 3
69672: PPUSH
69673: LD_VAR 0 5
69677: PPUSH
69678: CALL_OW 48
// end ;
69682: LD_VAR 0 6
69686: RET
// export function ToNaturalNumber ( number ) ; begin
69687: LD_INT 0
69689: PPUSH
// result := number div 1 ;
69690: LD_ADDR_VAR 0 2
69694: PUSH
69695: LD_VAR 0 1
69699: PUSH
69700: LD_INT 1
69702: DIV
69703: ST_TO_ADDR
// if number < 0 then
69704: LD_VAR 0 1
69708: PUSH
69709: LD_INT 0
69711: LESS
69712: IFFALSE 69722
// result := 0 ;
69714: LD_ADDR_VAR 0 2
69718: PUSH
69719: LD_INT 0
69721: ST_TO_ADDR
// end ;
69722: LD_VAR 0 2
69726: RET
// export function SortByClass ( units , class ) ; var un ; begin
69727: LD_INT 0
69729: PPUSH
69730: PPUSH
// if not units or not class then
69731: LD_VAR 0 1
69735: NOT
69736: PUSH
69737: LD_VAR 0 2
69741: NOT
69742: OR
69743: IFFALSE 69747
// exit ;
69745: GO 69842
// result := [ ] ;
69747: LD_ADDR_VAR 0 3
69751: PUSH
69752: EMPTY
69753: ST_TO_ADDR
// for un in units do
69754: LD_ADDR_VAR 0 4
69758: PUSH
69759: LD_VAR 0 1
69763: PUSH
69764: FOR_IN
69765: IFFALSE 69840
// if GetClass ( un ) = class then
69767: LD_VAR 0 4
69771: PPUSH
69772: CALL_OW 257
69776: PUSH
69777: LD_VAR 0 2
69781: EQUAL
69782: IFFALSE 69809
// result := Insert ( result , 1 , un ) else
69784: LD_ADDR_VAR 0 3
69788: PUSH
69789: LD_VAR 0 3
69793: PPUSH
69794: LD_INT 1
69796: PPUSH
69797: LD_VAR 0 4
69801: PPUSH
69802: CALL_OW 2
69806: ST_TO_ADDR
69807: GO 69838
// result := Replace ( result , result + 1 , un ) ;
69809: LD_ADDR_VAR 0 3
69813: PUSH
69814: LD_VAR 0 3
69818: PPUSH
69819: LD_VAR 0 3
69823: PUSH
69824: LD_INT 1
69826: PLUS
69827: PPUSH
69828: LD_VAR 0 4
69832: PPUSH
69833: CALL_OW 1
69837: ST_TO_ADDR
69838: GO 69764
69840: POP
69841: POP
// end ;
69842: LD_VAR 0 3
69846: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69847: LD_INT 0
69849: PPUSH
69850: PPUSH
69851: PPUSH
69852: PPUSH
69853: PPUSH
69854: PPUSH
69855: PPUSH
// result := [ ] ;
69856: LD_ADDR_VAR 0 4
69860: PUSH
69861: EMPTY
69862: ST_TO_ADDR
// if x - r < 0 then
69863: LD_VAR 0 1
69867: PUSH
69868: LD_VAR 0 3
69872: MINUS
69873: PUSH
69874: LD_INT 0
69876: LESS
69877: IFFALSE 69889
// min_x := 0 else
69879: LD_ADDR_VAR 0 8
69883: PUSH
69884: LD_INT 0
69886: ST_TO_ADDR
69887: GO 69905
// min_x := x - r ;
69889: LD_ADDR_VAR 0 8
69893: PUSH
69894: LD_VAR 0 1
69898: PUSH
69899: LD_VAR 0 3
69903: MINUS
69904: ST_TO_ADDR
// if y - r < 0 then
69905: LD_VAR 0 2
69909: PUSH
69910: LD_VAR 0 3
69914: MINUS
69915: PUSH
69916: LD_INT 0
69918: LESS
69919: IFFALSE 69931
// min_y := 0 else
69921: LD_ADDR_VAR 0 7
69925: PUSH
69926: LD_INT 0
69928: ST_TO_ADDR
69929: GO 69947
// min_y := y - r ;
69931: LD_ADDR_VAR 0 7
69935: PUSH
69936: LD_VAR 0 2
69940: PUSH
69941: LD_VAR 0 3
69945: MINUS
69946: ST_TO_ADDR
// max_x := x + r ;
69947: LD_ADDR_VAR 0 9
69951: PUSH
69952: LD_VAR 0 1
69956: PUSH
69957: LD_VAR 0 3
69961: PLUS
69962: ST_TO_ADDR
// max_y := y + r ;
69963: LD_ADDR_VAR 0 10
69967: PUSH
69968: LD_VAR 0 2
69972: PUSH
69973: LD_VAR 0 3
69977: PLUS
69978: ST_TO_ADDR
// for _x = min_x to max_x do
69979: LD_ADDR_VAR 0 5
69983: PUSH
69984: DOUBLE
69985: LD_VAR 0 8
69989: DEC
69990: ST_TO_ADDR
69991: LD_VAR 0 9
69995: PUSH
69996: FOR_TO
69997: IFFALSE 70098
// for _y = min_y to max_y do
69999: LD_ADDR_VAR 0 6
70003: PUSH
70004: DOUBLE
70005: LD_VAR 0 7
70009: DEC
70010: ST_TO_ADDR
70011: LD_VAR 0 10
70015: PUSH
70016: FOR_TO
70017: IFFALSE 70094
// begin if not ValidHex ( _x , _y ) then
70019: LD_VAR 0 5
70023: PPUSH
70024: LD_VAR 0 6
70028: PPUSH
70029: CALL_OW 488
70033: NOT
70034: IFFALSE 70038
// continue ;
70036: GO 70016
// if GetResourceTypeXY ( _x , _y ) then
70038: LD_VAR 0 5
70042: PPUSH
70043: LD_VAR 0 6
70047: PPUSH
70048: CALL_OW 283
70052: IFFALSE 70092
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70054: LD_ADDR_VAR 0 4
70058: PUSH
70059: LD_VAR 0 4
70063: PPUSH
70064: LD_VAR 0 4
70068: PUSH
70069: LD_INT 1
70071: PLUS
70072: PPUSH
70073: LD_VAR 0 5
70077: PUSH
70078: LD_VAR 0 6
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PPUSH
70087: CALL_OW 1
70091: ST_TO_ADDR
// end ;
70092: GO 70016
70094: POP
70095: POP
70096: GO 69996
70098: POP
70099: POP
// end ;
70100: LD_VAR 0 4
70104: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70105: LD_INT 0
70107: PPUSH
70108: PPUSH
70109: PPUSH
70110: PPUSH
70111: PPUSH
70112: PPUSH
70113: PPUSH
70114: PPUSH
// if not units then
70115: LD_VAR 0 1
70119: NOT
70120: IFFALSE 70124
// exit ;
70122: GO 70648
// result := UnitFilter ( units , [ f_ok ] ) ;
70124: LD_ADDR_VAR 0 3
70128: PUSH
70129: LD_VAR 0 1
70133: PPUSH
70134: LD_INT 50
70136: PUSH
70137: EMPTY
70138: LIST
70139: PPUSH
70140: CALL_OW 72
70144: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70145: LD_ADDR_VAR 0 8
70149: PUSH
70150: LD_VAR 0 1
70154: PUSH
70155: LD_INT 1
70157: ARRAY
70158: PPUSH
70159: CALL_OW 255
70163: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70164: LD_ADDR_VAR 0 10
70168: PUSH
70169: LD_INT 29
70171: PUSH
70172: LD_INT 91
70174: PUSH
70175: LD_INT 49
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: ST_TO_ADDR
// if not result then
70183: LD_VAR 0 3
70187: NOT
70188: IFFALSE 70192
// exit ;
70190: GO 70648
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70192: LD_ADDR_VAR 0 5
70196: PUSH
70197: LD_INT 81
70199: PUSH
70200: LD_VAR 0 8
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PPUSH
70209: CALL_OW 69
70213: ST_TO_ADDR
// for i in result do
70214: LD_ADDR_VAR 0 4
70218: PUSH
70219: LD_VAR 0 3
70223: PUSH
70224: FOR_IN
70225: IFFALSE 70646
// begin tag := GetTag ( i ) + 1 ;
70227: LD_ADDR_VAR 0 9
70231: PUSH
70232: LD_VAR 0 4
70236: PPUSH
70237: CALL_OW 110
70241: PUSH
70242: LD_INT 1
70244: PLUS
70245: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70246: LD_ADDR_VAR 0 7
70250: PUSH
70251: LD_VAR 0 4
70255: PPUSH
70256: CALL_OW 250
70260: PPUSH
70261: LD_VAR 0 4
70265: PPUSH
70266: CALL_OW 251
70270: PPUSH
70271: LD_INT 6
70273: PPUSH
70274: CALL 69847 0 3
70278: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70279: LD_VAR 0 4
70283: PPUSH
70284: CALL_OW 247
70288: PUSH
70289: LD_INT 2
70291: EQUAL
70292: PUSH
70293: LD_VAR 0 7
70297: AND
70298: PUSH
70299: LD_VAR 0 4
70303: PPUSH
70304: CALL_OW 264
70308: PUSH
70309: LD_VAR 0 10
70313: IN
70314: NOT
70315: AND
70316: IFFALSE 70355
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70318: LD_VAR 0 4
70322: PPUSH
70323: LD_VAR 0 7
70327: PUSH
70328: LD_INT 1
70330: ARRAY
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PPUSH
70336: LD_VAR 0 7
70340: PUSH
70341: LD_INT 1
70343: ARRAY
70344: PUSH
70345: LD_INT 2
70347: ARRAY
70348: PPUSH
70349: CALL_OW 116
70353: GO 70644
// if path > tag then
70355: LD_VAR 0 2
70359: PUSH
70360: LD_VAR 0 9
70364: GREATER
70365: IFFALSE 70573
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70367: LD_ADDR_VAR 0 6
70371: PUSH
70372: LD_VAR 0 5
70376: PPUSH
70377: LD_INT 91
70379: PUSH
70380: LD_VAR 0 4
70384: PUSH
70385: LD_INT 8
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: LIST
70392: PPUSH
70393: CALL_OW 72
70397: ST_TO_ADDR
// if nearEnemy then
70398: LD_VAR 0 6
70402: IFFALSE 70471
// begin if GetWeapon ( i ) = ru_time_lapser then
70404: LD_VAR 0 4
70408: PPUSH
70409: CALL_OW 264
70413: PUSH
70414: LD_INT 49
70416: EQUAL
70417: IFFALSE 70445
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70419: LD_VAR 0 4
70423: PPUSH
70424: LD_VAR 0 6
70428: PPUSH
70429: LD_VAR 0 4
70433: PPUSH
70434: CALL_OW 74
70438: PPUSH
70439: CALL_OW 112
70443: GO 70469
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70445: LD_VAR 0 4
70449: PPUSH
70450: LD_VAR 0 6
70454: PPUSH
70455: LD_VAR 0 4
70459: PPUSH
70460: CALL_OW 74
70464: PPUSH
70465: CALL_OW 115
// end else
70469: GO 70571
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70471: LD_VAR 0 4
70475: PPUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_VAR 0 9
70485: ARRAY
70486: PUSH
70487: LD_INT 1
70489: ARRAY
70490: PPUSH
70491: LD_VAR 0 2
70495: PUSH
70496: LD_VAR 0 9
70500: ARRAY
70501: PUSH
70502: LD_INT 2
70504: ARRAY
70505: PPUSH
70506: CALL_OW 297
70510: PUSH
70511: LD_INT 6
70513: GREATER
70514: IFFALSE 70557
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70516: LD_VAR 0 4
70520: PPUSH
70521: LD_VAR 0 2
70525: PUSH
70526: LD_VAR 0 9
70530: ARRAY
70531: PUSH
70532: LD_INT 1
70534: ARRAY
70535: PPUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_VAR 0 9
70545: ARRAY
70546: PUSH
70547: LD_INT 2
70549: ARRAY
70550: PPUSH
70551: CALL_OW 114
70555: GO 70571
// SetTag ( i , tag ) ;
70557: LD_VAR 0 4
70561: PPUSH
70562: LD_VAR 0 9
70566: PPUSH
70567: CALL_OW 109
// end else
70571: GO 70644
// if enemy then
70573: LD_VAR 0 5
70577: IFFALSE 70644
// begin if GetWeapon ( i ) = ru_time_lapser then
70579: LD_VAR 0 4
70583: PPUSH
70584: CALL_OW 264
70588: PUSH
70589: LD_INT 49
70591: EQUAL
70592: IFFALSE 70620
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70594: LD_VAR 0 4
70598: PPUSH
70599: LD_VAR 0 5
70603: PPUSH
70604: LD_VAR 0 4
70608: PPUSH
70609: CALL_OW 74
70613: PPUSH
70614: CALL_OW 112
70618: GO 70644
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70620: LD_VAR 0 4
70624: PPUSH
70625: LD_VAR 0 5
70629: PPUSH
70630: LD_VAR 0 4
70634: PPUSH
70635: CALL_OW 74
70639: PPUSH
70640: CALL_OW 115
// end ; end ;
70644: GO 70224
70646: POP
70647: POP
// end ;
70648: LD_VAR 0 3
70652: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70653: LD_INT 0
70655: PPUSH
70656: PPUSH
70657: PPUSH
// if not unit or IsInUnit ( unit ) then
70658: LD_VAR 0 1
70662: NOT
70663: PUSH
70664: LD_VAR 0 1
70668: PPUSH
70669: CALL_OW 310
70673: OR
70674: IFFALSE 70678
// exit ;
70676: GO 70769
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70678: LD_ADDR_VAR 0 4
70682: PUSH
70683: LD_VAR 0 1
70687: PPUSH
70688: CALL_OW 250
70692: PPUSH
70693: LD_VAR 0 2
70697: PPUSH
70698: LD_INT 1
70700: PPUSH
70701: CALL_OW 272
70705: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70706: LD_ADDR_VAR 0 5
70710: PUSH
70711: LD_VAR 0 1
70715: PPUSH
70716: CALL_OW 251
70720: PPUSH
70721: LD_VAR 0 2
70725: PPUSH
70726: LD_INT 1
70728: PPUSH
70729: CALL_OW 273
70733: ST_TO_ADDR
// if ValidHex ( x , y ) then
70734: LD_VAR 0 4
70738: PPUSH
70739: LD_VAR 0 5
70743: PPUSH
70744: CALL_OW 488
70748: IFFALSE 70769
// ComTurnXY ( unit , x , y ) ;
70750: LD_VAR 0 1
70754: PPUSH
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 5
70764: PPUSH
70765: CALL_OW 118
// end ;
70769: LD_VAR 0 3
70773: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70774: LD_INT 0
70776: PPUSH
70777: PPUSH
// result := false ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_INT 0
70785: ST_TO_ADDR
// if not units then
70786: LD_VAR 0 2
70790: NOT
70791: IFFALSE 70795
// exit ;
70793: GO 70840
// for i in units do
70795: LD_ADDR_VAR 0 4
70799: PUSH
70800: LD_VAR 0 2
70804: PUSH
70805: FOR_IN
70806: IFFALSE 70838
// if See ( side , i ) then
70808: LD_VAR 0 1
70812: PPUSH
70813: LD_VAR 0 4
70817: PPUSH
70818: CALL_OW 292
70822: IFFALSE 70836
// begin result := true ;
70824: LD_ADDR_VAR 0 3
70828: PUSH
70829: LD_INT 1
70831: ST_TO_ADDR
// exit ;
70832: POP
70833: POP
70834: GO 70840
// end ;
70836: GO 70805
70838: POP
70839: POP
// end ;
70840: LD_VAR 0 3
70844: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70845: LD_INT 0
70847: PPUSH
70848: PPUSH
70849: PPUSH
70850: PPUSH
// if not unit or not points then
70851: LD_VAR 0 1
70855: NOT
70856: PUSH
70857: LD_VAR 0 2
70861: NOT
70862: OR
70863: IFFALSE 70867
// exit ;
70865: GO 70957
// dist := 99999 ;
70867: LD_ADDR_VAR 0 5
70871: PUSH
70872: LD_INT 99999
70874: ST_TO_ADDR
// for i in points do
70875: LD_ADDR_VAR 0 4
70879: PUSH
70880: LD_VAR 0 2
70884: PUSH
70885: FOR_IN
70886: IFFALSE 70955
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70888: LD_ADDR_VAR 0 6
70892: PUSH
70893: LD_VAR 0 1
70897: PPUSH
70898: LD_VAR 0 4
70902: PUSH
70903: LD_INT 1
70905: ARRAY
70906: PPUSH
70907: LD_VAR 0 4
70911: PUSH
70912: LD_INT 2
70914: ARRAY
70915: PPUSH
70916: CALL_OW 297
70920: ST_TO_ADDR
// if tmpDist < dist then
70921: LD_VAR 0 6
70925: PUSH
70926: LD_VAR 0 5
70930: LESS
70931: IFFALSE 70953
// begin result := i ;
70933: LD_ADDR_VAR 0 3
70937: PUSH
70938: LD_VAR 0 4
70942: ST_TO_ADDR
// dist := tmpDist ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: LD_VAR 0 6
70952: ST_TO_ADDR
// end ; end ;
70953: GO 70885
70955: POP
70956: POP
// end ;
70957: LD_VAR 0 3
70961: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70962: LD_INT 0
70964: PPUSH
// uc_side := side ;
70965: LD_ADDR_OWVAR 20
70969: PUSH
70970: LD_VAR 0 1
70974: ST_TO_ADDR
// uc_nation := 3 ;
70975: LD_ADDR_OWVAR 21
70979: PUSH
70980: LD_INT 3
70982: ST_TO_ADDR
// vc_chassis := 25 ;
70983: LD_ADDR_OWVAR 37
70987: PUSH
70988: LD_INT 25
70990: ST_TO_ADDR
// vc_engine := engine_siberite ;
70991: LD_ADDR_OWVAR 39
70995: PUSH
70996: LD_INT 3
70998: ST_TO_ADDR
// vc_control := control_computer ;
70999: LD_ADDR_OWVAR 38
71003: PUSH
71004: LD_INT 3
71006: ST_TO_ADDR
// vc_weapon := 59 ;
71007: LD_ADDR_OWVAR 40
71011: PUSH
71012: LD_INT 59
71014: ST_TO_ADDR
// result := CreateVehicle ;
71015: LD_ADDR_VAR 0 5
71019: PUSH
71020: CALL_OW 45
71024: ST_TO_ADDR
// SetDir ( result , d ) ;
71025: LD_VAR 0 5
71029: PPUSH
71030: LD_VAR 0 4
71034: PPUSH
71035: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71039: LD_VAR 0 5
71043: PPUSH
71044: LD_VAR 0 2
71048: PPUSH
71049: LD_VAR 0 3
71053: PPUSH
71054: LD_INT 0
71056: PPUSH
71057: CALL_OW 48
// end ;
71061: LD_VAR 0 5
71065: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71066: LD_INT 0
71068: PPUSH
71069: PPUSH
71070: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71071: LD_ADDR_VAR 0 2
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71094: LD_VAR 0 1
71098: NOT
71099: PUSH
71100: LD_VAR 0 1
71104: PPUSH
71105: CALL_OW 264
71109: PUSH
71110: LD_INT 12
71112: PUSH
71113: LD_INT 51
71115: PUSH
71116: LD_INT 32
71118: PUSH
71119: LD_INT 89
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: IN
71128: NOT
71129: OR
71130: IFFALSE 71134
// exit ;
71132: GO 71232
// for i := 1 to 3 do
71134: LD_ADDR_VAR 0 3
71138: PUSH
71139: DOUBLE
71140: LD_INT 1
71142: DEC
71143: ST_TO_ADDR
71144: LD_INT 3
71146: PUSH
71147: FOR_TO
71148: IFFALSE 71230
// begin tmp := GetCargo ( cargo , i ) ;
71150: LD_ADDR_VAR 0 4
71154: PUSH
71155: LD_VAR 0 1
71159: PPUSH
71160: LD_VAR 0 3
71164: PPUSH
71165: CALL_OW 289
71169: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71170: LD_ADDR_VAR 0 2
71174: PUSH
71175: LD_VAR 0 2
71179: PPUSH
71180: LD_VAR 0 3
71184: PPUSH
71185: LD_VAR 0 4
71189: PPUSH
71190: CALL_OW 1
71194: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71195: LD_ADDR_VAR 0 2
71199: PUSH
71200: LD_VAR 0 2
71204: PPUSH
71205: LD_INT 4
71207: PPUSH
71208: LD_VAR 0 2
71212: PUSH
71213: LD_INT 4
71215: ARRAY
71216: PUSH
71217: LD_VAR 0 4
71221: PLUS
71222: PPUSH
71223: CALL_OW 1
71227: ST_TO_ADDR
// end ;
71228: GO 71147
71230: POP
71231: POP
// end ;
71232: LD_VAR 0 2
71236: RET
// export function Length ( array ) ; begin
71237: LD_INT 0
71239: PPUSH
// result := array + 0 ;
71240: LD_ADDR_VAR 0 2
71244: PUSH
71245: LD_VAR 0 1
71249: PUSH
71250: LD_INT 0
71252: PLUS
71253: ST_TO_ADDR
// end ;
71254: LD_VAR 0 2
71258: RET
// export function PrepareArray ( array ) ; begin
71259: LD_INT 0
71261: PPUSH
// result := array diff 0 ;
71262: LD_ADDR_VAR 0 2
71266: PUSH
71267: LD_VAR 0 1
71271: PUSH
71272: LD_INT 0
71274: DIFF
71275: ST_TO_ADDR
// if not result [ 1 ] then
71276: LD_VAR 0 2
71280: PUSH
71281: LD_INT 1
71283: ARRAY
71284: NOT
71285: IFFALSE 71305
// result := Delete ( result , 1 ) ;
71287: LD_ADDR_VAR 0 2
71291: PUSH
71292: LD_VAR 0 2
71296: PPUSH
71297: LD_INT 1
71299: PPUSH
71300: CALL_OW 3
71304: ST_TO_ADDR
// end ; end_of_file
71305: LD_VAR 0 2
71309: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71310: LD_VAR 0 1
71314: PUSH
71315: LD_INT 200
71317: DOUBLE
71318: GREATEREQUAL
71319: IFFALSE 71327
71321: LD_INT 299
71323: DOUBLE
71324: LESSEQUAL
71325: IFTRUE 71329
71327: GO 71361
71329: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71330: LD_VAR 0 1
71334: PPUSH
71335: LD_VAR 0 2
71339: PPUSH
71340: LD_VAR 0 3
71344: PPUSH
71345: LD_VAR 0 4
71349: PPUSH
71350: LD_VAR 0 5
71354: PPUSH
71355: CALL 10563 0 5
71359: GO 71438
71361: LD_INT 300
71363: DOUBLE
71364: GREATEREQUAL
71365: IFFALSE 71373
71367: LD_INT 399
71369: DOUBLE
71370: LESSEQUAL
71371: IFTRUE 71375
71373: GO 71437
71375: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71376: LD_VAR 0 1
71380: PPUSH
71381: LD_VAR 0 2
71385: PPUSH
71386: LD_VAR 0 3
71390: PPUSH
71391: LD_VAR 0 4
71395: PPUSH
71396: LD_VAR 0 5
71400: PPUSH
71401: LD_VAR 0 6
71405: PPUSH
71406: LD_VAR 0 7
71410: PPUSH
71411: LD_VAR 0 8
71415: PPUSH
71416: LD_VAR 0 9
71420: PPUSH
71421: LD_VAR 0 10
71425: PPUSH
71426: LD_VAR 0 11
71430: PPUSH
71431: CALL 26834 0 11
71435: GO 71438
71437: POP
// end ;
71438: PPOPN 11
71440: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71441: LD_VAR 0 1
71445: PPUSH
71446: LD_VAR 0 2
71450: PPUSH
71451: LD_VAR 0 3
71455: PPUSH
71456: LD_VAR 0 4
71460: PPUSH
71461: LD_VAR 0 5
71465: PPUSH
71466: CALL 10299 0 5
// end ; end_of_file
71470: PPOPN 5
71472: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71473: LD_VAR 0 1
71477: PPUSH
71478: LD_VAR 0 2
71482: PPUSH
71483: LD_VAR 0 3
71487: PPUSH
71488: LD_VAR 0 4
71492: PPUSH
71493: LD_VAR 0 5
71497: PPUSH
71498: LD_VAR 0 6
71502: PPUSH
71503: CALL 14527 0 6
// end ;
71507: PPOPN 6
71509: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71510: LD_INT 0
71512: PPUSH
// begin if not units then
71513: LD_VAR 0 1
71517: NOT
71518: IFFALSE 71522
// exit ;
71520: GO 71522
// end ;
71522: PPOPN 7
71524: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71525: CALL 14498 0 0
// end ;
71529: PPOPN 1
71531: END
