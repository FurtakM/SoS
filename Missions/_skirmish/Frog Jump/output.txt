// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7129 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6916 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1939 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9253 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5732 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: PUSH
1579: LD_EXP 9
1583: AND
1584: IFFALSE 1731
1586: GO 1588
1588: DISABLE
1589: LD_INT 0
1591: PPUSH
// begin enable ;
1592: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1593: LD_ADDR_EXP 31
1597: PUSH
1598: LD_EXP 31
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1607: LD_ADDR_VAR 0 1
1611: PUSH
1612: DOUBLE
1613: LD_INT 1
1615: DEC
1616: ST_TO_ADDR
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_OWVAR 67
1635: ARRAY
1636: PUSH
1637: LD_EXP 31
1641: PLUS
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1674
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1646: LD_INT 1
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 2
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: CALL 1133 0 1
1672: GO 1643
1674: POP
1675: POP
// repeat wait ( 0 0$01 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1683: LD_EXP 32
1687: PUSH
1688: LD_INT 4
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_OWVAR 67
1706: ARRAY
1707: PUSH
1708: LD_EXP 31
1712: PLUS
1713: GREATEREQUAL
1714: IFFALSE 1676
// AddComMoveXY ( al_force , 143 , 178 ) ;
1716: LD_EXP 32
1720: PPUSH
1721: LD_INT 143
1723: PPUSH
1724: LD_INT 178
1726: PPUSH
1727: CALL_OW 171
// end ;
1731: PPOPN 1
1733: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1734: LD_INT 6
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: IFFALSE 1831
1753: GO 1755
1755: DISABLE
1756: LD_INT 0
1758: PPUSH
// begin enable ;
1759: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 6
1767: PPUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 7
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 70
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_INT 81
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 255
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 74
1822: PPUSH
1823: CALL_OW 115
1827: GO 1783
1829: POP
1830: POP
// end ;
1831: PPOPN 1
1833: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1834: LD_EXP 9
1838: IFFALSE 1936
1840: GO 1842
1842: DISABLE
1843: LD_INT 0
1845: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1846: LD_ADDR_VAR 0 1
1850: PUSH
1851: LD_INT 18900
1853: PUSH
1854: LD_INT 18200
1856: PUSH
1857: LD_INT 16450
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_OWVAR 67
1869: ARRAY
1870: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1871: CALL 8616 0 0
// wait ( reload_time / 2 ) ;
1875: LD_VAR 0 1
1879: PUSH
1880: LD_INT 2
1882: DIVREAL
1883: PPUSH
1884: CALL_OW 67
// ActiveArtifact2 ( ) ;
1888: CALL 9061 0 0
// wait ( reload_time / 2 ) ;
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 2
1899: DIVREAL
1900: PPUSH
1901: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1905: LD_INT 22
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 8
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: NOT
1934: IFFALSE 1871
// end ; end_of_file
1936: PPOPN 1
1938: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// uc_side := 8 ;
1947: LD_ADDR_OWVAR 20
1951: PUSH
1952: LD_INT 8
1954: ST_TO_ADDR
// uc_nation := 2 ;
1955: LD_ADDR_OWVAR 21
1959: PUSH
1960: LD_INT 2
1962: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: LD_INT 7
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 9
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_OWVAR 67
1986: ARRAY
1987: ST_TO_ADDR
// dep := ar_base ;
1988: LD_ADDR_VAR 0 5
1992: PUSH
1993: LD_INT 57
1995: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1996: LD_ADDR_VAR 0 6
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 8
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2034: LD_VAR 0 5
2038: PPUSH
2039: CALL_OW 274
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 999999
2049: PPUSH
2050: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2054: LD_VAR 0 5
2058: PPUSH
2059: CALL_OW 274
2063: PPUSH
2064: LD_INT 2
2066: PPUSH
2067: LD_INT 10000
2069: PPUSH
2070: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 274
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 10000
2089: PPUSH
2090: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2094: LD_INT 68
2096: PPUSH
2097: LD_INT 224
2099: PPUSH
2100: LD_INT 5
2102: PPUSH
2103: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 6
2115: PPUSH
2116: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2120: LD_ADDR_OWVAR 26
2124: PUSH
2125: LD_STRING Nicolas Vervecken
2127: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2128: LD_ADDR_OWVAR 33
2132: PUSH
2133: LD_STRING SecondCharsGal
2135: ST_TO_ADDR
// hc_face_number := 3 ;
2136: LD_ADDR_OWVAR 34
2140: PUSH
2141: LD_INT 3
2143: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2144: LD_ADDR_OWVAR 29
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: LD_INT 10
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: ST_TO_ADDR
// Vervecken := CreateHuman ;
2159: LD_ADDR_EXP 3
2163: PUSH
2164: CALL_OW 44
2168: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2169: LD_EXP 3
2173: PPUSH
2174: LD_VAR 0 5
2178: PPUSH
2179: CALL_OW 52
// InitHc_All ( ) ;
2183: CALL_OW 584
// for i = 1 to 4 do
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: DOUBLE
2193: LD_INT 1
2195: DEC
2196: ST_TO_ADDR
2197: LD_INT 4
2199: PUSH
2200: FOR_TO
2201: IFFALSE 2262
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2203: LD_INT 0
2205: PPUSH
2206: LD_INT 9
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2218: CALL_OW 44
2222: PPUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 30
2235: PUSH
2236: LD_INT 5
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PPUSH
2256: CALL_OW 52
// end ;
2260: GO 2200
2262: POP
2263: POP
// for i = 1 to 2 do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 2
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2339
// begin PrepareHuman ( false , 4 , skill ) ;
2280: LD_INT 0
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_VAR 0 4
2290: PPUSH
2291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2295: CALL_OW 44
2299: PPUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 30
2312: PUSH
2313: LD_INT 8
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: CALL_OW 52
// end ;
2337: GO 2277
2339: POP
2340: POP
// for i = 1 to 6 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 6
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2392
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2357: LD_INT 0
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_VAR 0 4
2367: PUSH
2368: LD_INT 1
2370: PLUS
2371: PPUSH
2372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2376: CALL_OW 44
2380: PPUSH
2381: LD_VAR 0 6
2385: PPUSH
2386: CALL_OW 52
// end ;
2390: GO 2354
2392: POP
2393: POP
// uc_nation := 0 ;
2394: LD_ADDR_OWVAR 21
2398: PUSH
2399: LD_INT 0
2401: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2402: LD_ADDR_VAR 0 2
2406: PUSH
2407: LD_INT 22
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 30
2419: PUSH
2420: LD_INT 32
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL_OW 69
2435: PUSH
2436: FOR_IN
2437: IFFALSE 2474
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2439: LD_INT 0
2441: PPUSH
2442: LD_INT 15
2444: PPUSH
2445: LD_VAR 0 4
2449: PUSH
2450: LD_INT 1
2452: PLUS
2453: PPUSH
2454: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2458: CALL_OW 44
2462: PPUSH
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL_OW 52
// end ;
2472: GO 2436
2474: POP
2475: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 5
2481: PPUSH
2482: LD_INT 10
2484: PPUSH
2485: CALL_OW 380
// un := CreateHuman ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: CALL_OW 44
2498: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 175
2506: PPUSH
2507: LD_INT 128
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 115
2524: PPUSH
2525: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 380
// un := CreateHuman ;
2542: LD_ADDR_VAR 0 3
2546: PUSH
2547: CALL_OW 44
2551: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_INT 240
2559: PPUSH
2560: LD_INT 128
2562: PPUSH
2563: CALL_OW 428
2567: PPUSH
2568: CALL_OW 52
// un := CreateHuman ;
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: CALL_OW 44
2581: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 260
2601: PPUSH
2602: LD_INT 147
2604: PPUSH
2605: CALL_OW 428
2609: PPUSH
2610: CALL_OW 52
// for i = 1 to 2 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 2
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2653
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2630: LD_VAR 0 6
2634: PPUSH
2635: LD_INT 14
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: LD_INT 31
2646: PPUSH
2647: CALL_OW 185
2651: GO 2627
2653: POP
2654: POP
// end ;
2655: LD_VAR 0 1
2659: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
// for i = 1 to num do
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: DOUBLE
2670: LD_INT 1
2672: DEC
2673: ST_TO_ADDR
2674: LD_VAR 0 1
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2752
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 30
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: PPUSH
2715: LD_INT 11
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_INT 23
2726: PUSH
2727: LD_INT 24
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 12
2744: ARRAY
2745: PPUSH
2746: CALL_OW 185
2750: GO 2679
2752: POP
2753: POP
// end ;
2754: LD_VAR 0 2
2758: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
// uc_side := 8 ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_INT 8
2771: ST_TO_ADDR
// uc_nation := 0 ;
2772: LD_ADDR_OWVAR 21
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// hc_class := 17 ;
2780: LD_ADDR_OWVAR 28
2784: PUSH
2785: LD_INT 17
2787: ST_TO_ADDR
// hc_gallery :=  ;
2788: LD_ADDR_OWVAR 33
2792: PUSH
2793: LD_STRING 
2795: ST_TO_ADDR
// hc_name :=  ;
2796: LD_ADDR_OWVAR 26
2800: PUSH
2801: LD_STRING 
2803: ST_TO_ADDR
// hc_importance := 0 ;
2804: LD_ADDR_OWVAR 32
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2812: LD_ADDR_OWVAR 31
2816: PUSH
2817: LD_INT 10
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: ST_TO_ADDR
// if ar_base then
2835: LD_INT 57
2837: IFFALSE 2882
// begin un := CreateHuman ;
2839: LD_ADDR_VAR 0 3
2843: PUSH
2844: CALL_OW 44
2848: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_INT 57
2856: PPUSH
2857: CALL_OW 52
// ComExitBuilding ( un ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 68
2877: PPUSH
2878: CALL_OW 180
// end ; end ;
2882: LD_VAR 0 1
2886: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// legion_force := [ ] ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// l_allow_attack := false ;
2898: LD_ADDR_EXP 34
2902: PUSH
2903: LD_INT 0
2905: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2906: LD_VAR 0 1
2910: PPUSH
2911: CALL 2660 0 1
// repeat wait ( 0 0$01 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// until legion_force >= n1 ;
2922: LD_EXP 33
2926: PUSH
2927: LD_VAR 0 1
2931: GREATEREQUAL
2932: IFFALSE 2915
// l_allow_attack := true ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// for i = 1 to n2 do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_VAR 0 2
2956: PUSH
2957: FOR_TO
2958: IFFALSE 2966
// begin AddKamikaze ( ) ;
2960: CALL 2759 0 0
// end ;
2964: GO 2957
2966: POP
2967: POP
// end ;
2968: LD_VAR 0 3
2972: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2973: LD_INT 22
2975: PUSH
2976: LD_INT 8
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 50
2985: PUSH
2986: EMPTY
2987: LIST
2988: PUSH
2989: LD_INT 33
2991: PUSH
2992: LD_INT 2
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: LD_INT 61
3004: PUSH
3005: EMPTY
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: IFFALSE 3102
3024: GO 3026
3026: DISABLE
3027: LD_INT 0
3029: PPUSH
// begin enable ;
3030: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3031: LD_ADDR_VAR 0 1
3035: PUSH
3036: LD_INT 22
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 33
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 61
3067: PUSH
3068: EMPTY
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: FOR_IN
3087: IFFALSE 3100
// Connect ( i ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 38337 0 1
3098: GO 3086
3100: POP
3101: POP
// end ;
3102: PPOPN 1
3104: END
// every 5 5$00 trigger legion_attacks_active do
3105: LD_EXP 7
3109: IFFALSE 3161
3111: GO 3113
3113: DISABLE
// begin enable ;
3114: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3115: LD_INT 5250
3117: PUSH
3118: LD_INT 2100
3120: PUSH
3121: LD_INT 1050
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PPUSH
3135: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3139: LD_EXP 8
3143: PUSH
3144: LD_INT 2
3146: MINUS
3147: PUSH
3148: LD_OWVAR 67
3152: PLUS
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL 2887 0 2
// end ;
3161: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3162: LD_EXP 34
3166: PUSH
3167: LD_EXP 33
3171: PPUSH
3172: LD_INT 3
3174: PUSH
3175: LD_INT 60
3177: PUSH
3178: EMPTY
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 61
3187: PUSH
3188: EMPTY
3189: LIST
3190: PUSH
3191: LD_INT 50
3193: PUSH
3194: EMPTY
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 72
3206: AND
3207: IFFALSE 3338
3209: GO 3211
3211: DISABLE
3212: LD_INT 0
3214: PPUSH
3215: PPUSH
// begin enable ;
3216: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 33
3226: PPUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 60
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 61
3242: PUSH
3243: EMPTY
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 72
3261: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3262: LD_ADDR_VAR 0 1
3266: PUSH
3267: LD_INT 150
3269: PUSH
3270: LD_INT 93
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 232
3279: PUSH
3280: LD_INT 88
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 209
3289: PUSH
3290: LD_INT 50
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 208
3299: PUSH
3300: LD_INT 29
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 191
3309: PUSH
3310: LD_INT 17
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3324: LD_VAR 0 2
3328: PPUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 70335 0 2
// end ;
3338: PPOPN 2
3340: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3341: LD_INT 6
3343: PPUSH
3344: LD_INT 22
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 25
3356: PUSH
3357: LD_INT 17
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 70
3372: IFFALSE 3459
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 6
3388: PPUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 25
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PPUSH
3413: CALL_OW 70
3417: PUSH
3418: FOR_IN
3419: IFFALSE 3457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3421: LD_VAR 0 1
3425: PPUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 6
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 74
3450: PPUSH
3451: CALL_OW 115
3455: GO 3418
3457: POP
3458: POP
// end ;
3459: PPOPN 1
3461: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3462: LD_INT 68
3464: IFFALSE 3695
3466: GO 3468
3468: DISABLE
3469: LD_INT 0
3471: PPUSH
3472: PPUSH
3473: PPUSH
// begin enable ;
3474: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 224
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 160
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 228
3502: PUSH
3503: LD_INT 56
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 271
3512: PUSH
3513: LD_INT 87
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: ST_TO_ADDR
// for i = 1 to 3 do
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 3
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3556
// EraseResourceArea ( telArea , i ) ;
3542: LD_INT 7
3544: PPUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: CALL_OW 286
3554: GO 3539
3556: POP
3557: POP
// for i = xy downto 1 do
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: DOUBLE
3564: LD_VAR 0 2
3568: INC
3569: ST_TO_ADDR
3570: LD_INT 1
3572: PUSH
3573: FOR_DOWNTO
3574: IFFALSE 3656
// begin k := rand ( 1 , xy ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3594: LD_VAR 0 2
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: LD_VAR 0 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PUSH
3620: LD_INT 2
3622: ARRAY
3623: PPUSH
3624: CALL_OW 428
3628: IFFALSE 3652
// xy := Delete ( xy , k ) else
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 3
3649: ST_TO_ADDR
3650: GO 3654
// break ;
3652: GO 3656
// end ;
3654: GO 3573
3656: POP
3657: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3658: LD_INT 68
3660: PPUSH
3661: LD_VAR 0 2
3665: PUSH
3666: LD_VAR 0 1
3670: ARRAY
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: LD_VAR 0 2
3680: PUSH
3681: LD_VAR 0 1
3685: ARRAY
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 243
// end ; end_of_file
3695: PPOPN 3
3697: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3698: LD_INT 0
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
// uc_side := 6 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 6
3714: ST_TO_ADDR
// uc_nation := nation_russian ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 3
3722: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3723: LD_INT 6
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3733: LD_ADDR_VAR 0 6
3737: PUSH
3738: LD_INT 9
3740: PUSH
3741: LD_INT 4
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 8
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 8
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: LD_INT 8
3789: PUSH
3790: LD_INT 7
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: ST_TO_ADDR
// tmp := [ ] ;
3804: LD_ADDR_VAR 0 5
3808: PUSH
3809: EMPTY
3810: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3811: LD_ADDR_EXP 2
3815: PUSH
3816: LD_STRING Davidov
3818: PPUSH
3819: CALL_OW 25
3823: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3824: LD_EXP 2
3828: PPUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 7
3834: PPUSH
3835: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3839: LD_EXP 2
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: LD_INT 8
3849: PPUSH
3850: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3854: LD_EXP 2
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: LD_INT 6
3864: PPUSH
3865: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3869: LD_EXP 2
3873: PPUSH
3874: LD_INT 4
3876: PPUSH
3877: LD_INT 10
3879: PPUSH
3880: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3884: LD_EXP 2
3888: PPUSH
3889: LD_INT 4
3891: PPUSH
3892: CALL_OW 336
// InitHc_All ( ) ;
3896: CALL_OW 584
// while amount [ 1 ] do
3900: LD_VAR 0 6
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: IFFALSE 4241
// begin Wait ( 1 ) ;
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3917: LD_ADDR_VAR 0 7
3921: PUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: CALL_OW 12
3932: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3933: LD_VAR 0 6
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PUSH
3942: LD_VAR 0 5
3946: AND
3947: IFFALSE 4102
// begin if k in [ 1 , 2 ] then
3949: LD_VAR 0 7
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: IN
3964: IFFALSE 3974
// k := 3 ;
3966: LD_ADDR_VAR 0 7
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: LD_INT 24
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 12
3999: ARRAY
4000: ST_TO_ADDR
// vc_engine := engine_siberite ;
4001: LD_ADDR_OWVAR 39
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// vc_control := control_manual ;
4009: LD_ADDR_OWVAR 38
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4017: LD_ADDR_OWVAR 40
4021: PUSH
4022: LD_INT 44
4024: PUSH
4025: LD_INT 45
4027: PUSH
4028: LD_INT 43
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 3
4041: PPUSH
4042: CALL_OW 12
4046: ARRAY
4047: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4048: LD_ADDR_VAR 0 5
4052: PUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 45
4065: PPUSH
4066: CALL_OW 2
4070: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 6
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: PUSH
4093: LD_INT 1
4095: MINUS
4096: PPUSH
4097: CALL_OW 1
4101: ST_TO_ADDR
// end ; if not tmp then
4102: LD_VAR 0 5
4106: NOT
4107: IFFALSE 4117
// k := 2 ;
4109: LD_ADDR_VAR 0 7
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4117: LD_VAR 0 6
4121: PUSH
4122: LD_INT 2
4124: ARRAY
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: PUSH
4130: LD_VAR 0 7
4134: PUSH
4135: LD_INT 3
4137: EQUAL
4138: AND
4139: IFFALSE 4168
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_INT 9
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: CALL_OW 12
4166: ARRAY
4167: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4168: LD_INT 0
4170: PPUSH
4171: LD_VAR 0 7
4175: PPUSH
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4185: LD_ADDR_VAR 0 5
4189: PUSH
4190: LD_VAR 0 5
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 44
4202: PPUSH
4203: CALL_OW 2
4207: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4208: LD_ADDR_VAR 0 6
4212: PUSH
4213: LD_VAR 0 6
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_VAR 0 6
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PUSH
4230: LD_INT 1
4232: MINUS
4233: PPUSH
4234: CALL_OW 1
4238: ST_TO_ADDR
// end ;
4239: GO 3900
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4241: LD_ADDR_VAR 0 5
4245: PUSH
4246: LD_VAR 0 5
4250: PPUSH
4251: LD_VAR 0 5
4255: PUSH
4256: LD_INT 1
4258: PLUS
4259: PPUSH
4260: LD_EXP 2
4264: PPUSH
4265: CALL_OW 2
4269: ST_TO_ADDR
// for i = tmp downto 1 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_VAR 0 5
4280: INC
4281: ST_TO_ADDR
4282: LD_INT 1
4284: PUSH
4285: FOR_DOWNTO
4286: IFFALSE 4448
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4288: LD_VAR 0 5
4292: PUSH
4293: LD_VAR 0 2
4297: ARRAY
4298: PPUSH
4299: CALL_OW 247
4303: PUSH
4304: LD_INT 2
4306: EQUAL
4307: IFFALSE 4397
// begin SetDir ( tmp [ i ] , 3 ) ;
4309: LD_VAR 0 5
4313: PUSH
4314: LD_VAR 0 2
4318: ARRAY
4319: PPUSH
4320: LD_INT 3
4322: PPUSH
4323: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4327: LD_VAR 0 5
4331: PUSH
4332: LD_VAR 0 2
4336: ARRAY
4337: PPUSH
4338: LD_INT 193
4340: PPUSH
4341: LD_INT 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4351: LD_VAR 0 5
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: MINUS
4364: ARRAY
4365: PPUSH
4366: LD_VAR 0 5
4370: PUSH
4371: LD_VAR 0 2
4375: ARRAY
4376: PPUSH
4377: CALL_OW 52
// i := i - 1 ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: MINUS
4394: ST_TO_ADDR
// end else
4395: GO 4418
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4397: LD_VAR 0 5
4401: PUSH
4402: LD_VAR 0 2
4406: ARRAY
4407: PPUSH
4408: LD_INT 2
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4418: LD_VAR 0 5
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: PPUSH
4429: LD_INT 197
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 111
// Wait ( 0 0$02 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// end ;
4446: GO 4285
4448: POP
4449: POP
// Wait ( 0 0$02 ) ;
4450: LD_INT 70
4452: PPUSH
4453: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4457: LD_ADDR_OWVAR 37
4461: PUSH
4462: LD_INT 22
4464: ST_TO_ADDR
// vc_engine := engine_siberite ;
4465: LD_ADDR_OWVAR 39
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// vc_control := control_computer ;
4473: LD_ADDR_OWVAR 38
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4481: LD_ADDR_OWVAR 40
4485: PUSH
4486: LD_INT 51
4488: ST_TO_ADDR
// tmp := CreateVehicle ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: CALL_OW 45
4498: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4499: LD_VAR 0 5
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4511: LD_VAR 0 5
4515: PPUSH
4516: LD_INT 193
4518: PPUSH
4519: LD_INT 3
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 60
4539: PPUSH
4540: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4544: LD_VAR 0 5
4548: PPUSH
4549: LD_INT 197
4551: PPUSH
4552: LD_INT 22
4554: PPUSH
4555: CALL_OW 111
// end ; end_of_file
4559: LD_VAR 0 1
4563: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4564: LD_INT 0
4566: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4567: LD_VAR 0 1
4571: PPUSH
4572: LD_VAR 0 2
4576: PPUSH
4577: CALL 9619 0 2
// side := GetSide ( fac ) ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: CALL_OW 255
4595: ST_TO_ADDR
// case side of 7 :
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 7
4603: DOUBLE
4604: EQUAL
4605: IFTRUE 4609
4607: GO 4656
4609: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4610: LD_ADDR_EXP 32
4614: PUSH
4615: LD_EXP 32
4619: PPUSH
4620: LD_EXP 32
4624: PUSH
4625: LD_INT 1
4627: PLUS
4628: PPUSH
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL_OW 1
4638: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_INT 112
4646: PPUSH
4647: LD_INT 175
4649: PPUSH
4650: CALL_OW 171
// end ; 8 :
4654: GO 4742
4656: LD_INT 8
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4741
4664: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4665: LD_VAR 0 1
4669: PPUSH
4670: CALL_OW 264
4674: PUSH
4675: LD_INT 31
4677: EQUAL
4678: IFFALSE 4695
// ComMoveXY ( veh , 145 , 66 ) ;
4680: LD_VAR 0 1
4684: PPUSH
4685: LD_INT 145
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 265
4704: PUSH
4705: LD_INT 11
4707: EQUAL
4708: IFFALSE 4739
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4710: LD_ADDR_EXP 33
4714: PUSH
4715: LD_EXP 33
4719: PPUSH
4720: LD_EXP 33
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: PPUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 1
4738: ST_TO_ADDR
// end ; end ;
4739: GO 4742
4741: POP
// end ;
4742: PPOPN 3
4744: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL 9499 0 1
// if un in legion_force then
4754: LD_VAR 0 1
4758: PUSH
4759: LD_EXP 33
4763: IN
4764: IFFALSE 4782
// legion_force := legion_force diff un ;
4766: LD_ADDR_EXP 33
4770: PUSH
4771: LD_EXP 33
4775: PUSH
4776: LD_VAR 0 1
4780: DIFF
4781: ST_TO_ADDR
// if un in al_force then
4782: LD_VAR 0 1
4786: PUSH
4787: LD_EXP 32
4791: IN
4792: IFFALSE 4810
// al_force := al_force diff un ;
4794: LD_ADDR_EXP 32
4798: PUSH
4799: LD_EXP 32
4803: PUSH
4804: LD_VAR 0 1
4808: DIFF
4809: ST_TO_ADDR
// end ;
4810: PPOPN 1
4812: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4813: LD_VAR 0 1
4817: PUSH
4818: LD_INT 68
4820: EQUAL
4821: PUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: CALL_OW 257
4831: PUSH
4832: LD_INT 17
4834: EQUAL
4835: AND
4836: IFFALSE 4879
// begin Wait ( 0 0$01 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 6
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 74
4874: PPUSH
4875: CALL_OW 115
// end ; end ;
4879: PPOPN 2
4881: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4882: LD_VAR 0 1
4886: PUSH
4887: LD_EXP 32
4891: IN
4892: IFFALSE 4910
// al_force := al_force diff un ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_VAR 0 1
4908: DIFF
4909: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 263
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4934
// ComUnlink ( un ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 8
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 21
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: IN
4968: IFFALSE 4986
// begin wait ( 0 0$2 ) ;
4970: LD_INT 70
4972: PPUSH
4973: CALL_OW 67
// ComAutodestruct ( un ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL 63232 0 1
// end ; end ;
4986: PPOPN 1
4988: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 25
4996: EQUAL
4997: IFFALSE 5007
// player_start_res_sib_bomb := true ;
4999: LD_ADDR_EXP 4
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// if tech = tech_artifact then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 24
5014: EQUAL
5015: IFFALSE 5025
// player_start_res_artifact := true ;
5017: LD_ADDR_EXP 5
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// end ;
5025: PPOPN 2
5027: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 6
5035: EQUAL
5036: IFFALSE 5046
// player_artifact_loaded := false ;
5038: LD_ADDR_EXP 18
5042: PUSH
5043: LD_INT 0
5045: ST_TO_ADDR
// end ;
5046: PPOPN 2
5048: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 6
5056: EQUAL
5057: IFFALSE 5067
// player_artifact_loaded := true ;
5059: LD_ADDR_EXP 18
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// end ;
5067: PPOPN 2
5069: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5070: LD_INT 0
5072: PPUSH
// begin player_used_sib_bomb := true ;
5073: LD_ADDR_EXP 12
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// for i = 1 to 3 do
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5168
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_EXP 15
5111: PUSH
5112: LD_VAR 0 4
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 15
5126: PUSH
5127: LD_VAR 0 4
5131: ARRAY
5132: PUSH
5133: LD_INT 2
5135: ARRAY
5136: PPUSH
5137: CALL_OW 298
5141: PUSH
5142: LD_EXP 17
5146: LESSEQUAL
5147: IFFALSE 5166
// begin wait ( 0 0$5 ) ;
5149: LD_INT 175
5151: PPUSH
5152: CALL_OW 67
// artifact_destroyed := true ;
5156: LD_ADDR_EXP 16
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// break ;
5164: GO 5168
// end ; end ;
5166: GO 5094
5168: POP
5169: POP
// end ;
5170: PPOPN 4
5172: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5173: LD_VAR 0 1
5177: PPUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: CALL 9595 0 3
// end ;
5192: PPOPN 3
5194: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 9603 0 1
// end ; end_of_file
5204: PPOPN 1
5206: END
// export function CreateArtifact ( type , x , y ) ; begin
5207: LD_INT 0
5209: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5210: LD_INT 4
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 58
// end ;
5235: LD_VAR 0 4
5239: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5240: LD_INT 0
5242: PPUSH
5243: PPUSH
5244: PPUSH
// result := 0 ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5253: LD_ADDR_VAR 0 4
5257: PUSH
5258: LD_INT 22
5260: PUSH
5261: LD_VAR 0 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 2
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: ST_TO_ADDR
// if deps then
5307: LD_VAR 0 4
5311: IFFALSE 5359
// for i in deps do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: PUSH
5323: FOR_IN
5324: IFFALSE 5357
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5326: LD_ADDR_VAR 0 2
5330: PUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 3
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 275
5353: PLUS
5354: ST_TO_ADDR
5355: GO 5323
5357: POP
5358: POP
// end ;
5359: LD_VAR 0 2
5363: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5364: LD_INT 0
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
// if val <= 0 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 0
5377: LESSEQUAL
5378: IFFALSE 5382
// exit ;
5380: GO 5574
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 30
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 69
5435: ST_TO_ADDR
// if deps then
5436: LD_VAR 0 5
5440: IFFALSE 5574
// for i in deps do
5442: LD_ADDR_VAR 0 4
5446: PUSH
5447: LD_VAR 0 5
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5572
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5455: LD_ADDR_VAR 0 6
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 274
5469: PPUSH
5470: LD_INT 3
5472: PPUSH
5473: CALL_OW 275
5477: ST_TO_ADDR
// if val < s then
5478: LD_VAR 0 2
5482: PUSH
5483: LD_VAR 0 6
5487: LESS
5488: IFFALSE 5534
// begin s := s - val ;
5490: LD_ADDR_VAR 0 6
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: LD_VAR 0 2
5504: MINUS
5505: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5506: LD_VAR 0 4
5510: PPUSH
5511: CALL_OW 274
5515: PPUSH
5516: LD_INT 3
5518: PPUSH
5519: LD_VAR 0 6
5523: PPUSH
5524: CALL_OW 277
// exit ;
5528: POP
5529: POP
5530: GO 5574
// end else
5532: GO 5570
// begin val := val - s ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 6
5548: MINUS
5549: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: CALL_OW 274
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 277
// end ; end ;
5570: GO 5452
5572: POP
5573: POP
// end ;
5574: LD_VAR 0 3
5578: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_EXP 35
5588: IN
5589: NOT
5590: IFFALSE 5621
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5592: LD_ADDR_EXP 35
5596: PUSH
5597: LD_EXP 35
5601: PPUSH
5602: LD_EXP 35
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: PPUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// end ;
5621: PPOPN 1
5623: END
// export function DestinationReachable ( unit , x , y ) ; begin
5624: LD_INT 0
5626: PPUSH
// if ValidHex ( x , y ) then
5627: LD_VAR 0 2
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 488
5641: IFFALSE 5667
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 428
5662: PPUSH
5663: CALL_OW 115
// wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// if unit in unreachableList then
5674: LD_VAR 0 1
5678: PUSH
5679: LD_EXP 35
5683: IN
5684: IFFALSE 5696
// result := false else
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
5694: GO 5704
// result := true ;
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if not result then
5704: LD_VAR 0 4
5708: NOT
5709: IFFALSE 5727
// unreachableList := unreachableList diff unit ;
5711: LD_ADDR_EXP 35
5715: PUSH
5716: LD_EXP 35
5720: PUSH
5721: LD_VAR 0 1
5725: DIFF
5726: ST_TO_ADDR
// end ; end_of_file
5727: LD_VAR 0 4
5731: RET
// export function Action ; var dial ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5736: LD_INT 192
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 86
// InGameOn ;
5746: CALL_OW 8
// PrepareRussian ;
5750: CALL 3698 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 6
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 25
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 4
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: PUSH
5828: LD_EXP 2
5832: DIFF
5833: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5834: LD_VAR 0 2
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: LD_INT 202
5845: PPUSH
5846: LD_INT 40
5848: PPUSH
5849: CALL_OW 111
// Wait ( 0 0$03 ) ;
5853: LD_INT 105
5855: PPUSH
5856: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5860: LD_EXP 2
5864: PPUSH
5865: LD_STRING DDav-1
5867: PPUSH
5868: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5872: LD_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_EXP 2
5885: PPUSH
5886: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5890: LD_EXP 2
5894: PPUSH
5895: LD_VAR 0 2
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5908: LD_INT 202
5910: PPUSH
5911: LD_INT 40
5913: PPUSH
5914: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5918: LD_VAR 0 2
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_STRING DRus-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5934: LD_EXP 2
5938: PPUSH
5939: LD_STRING DDav-2
5941: PPUSH
5942: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5946: LD_VAR 0 2
5950: PUSH
5951: LD_INT 1
5953: ARRAY
5954: PPUSH
5955: LD_STRING DRus-2
5957: PPUSH
5958: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5962: LD_EXP 2
5966: PPUSH
5967: LD_STRING DDav-3
5969: PPUSH
5970: CALL_OW 88
// InGameOff ;
5974: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5985: LD_STRING C1
5987: PPUSH
5988: CALL_OW 337
// SaveForQuickRestart ;
5992: CALL_OW 22
// end ;
5996: LD_VAR 0 1
6000: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6001: LD_INT 22
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 6
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 8
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: IFFALSE 6158
6060: GO 6062
6062: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6063: LD_EXP 2
6067: PPUSH
6068: LD_STRING DDav-4
6070: PPUSH
6071: CALL_OW 88
// Wait ( 0 0$40 ) ;
6075: LD_INT 1400
6077: PPUSH
6078: CALL_OW 67
// DialogueOn ;
6082: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6086: LD_EXP 3
6090: PPUSH
6091: LD_STRING Dver-Meet-1
6093: PPUSH
6094: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6098: LD_EXP 2
6102: PPUSH
6103: LD_STRING DDav-Meet-1
6105: PPUSH
6106: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6110: LD_EXP 3
6114: PPUSH
6115: LD_STRING Dver-Meet-2
6117: PPUSH
6118: CALL_OW 94
// DialogueOff ;
6122: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6126: LD_INT 19600
6128: PUSH
6129: LD_INT 15400
6131: PUSH
6132: LD_INT 13300
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_OWVAR 67
6144: ARRAY
6145: PPUSH
6146: CALL_OW 67
// legion_attacks_active := true ;
6150: LD_ADDR_EXP 7
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// end ;
6158: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 30
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_OWVAR 1
6192: PUSH
6193: LD_INT 21000
6195: GREATER
6196: OR
6197: IFFALSE 6431
6199: GO 6201
6201: DISABLE
6202: LD_INT 0
6204: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6205: LD_ADDR_VAR 0 1
6209: PUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 6
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PUSH
6279: LD_EXP 2
6283: DIFF
6284: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6285: LD_VAR 0 1
6289: PUSH
6290: LD_INT 1
6292: ARRAY
6293: PPUSH
6294: LD_STRING DRus-3
6296: PPUSH
6297: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6301: LD_EXP 2
6305: PPUSH
6306: LD_STRING DDav-5
6308: PPUSH
6309: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6313: LD_VAR 0 1
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_STRING DRus-4
6324: PPUSH
6325: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6329: LD_EXP 2
6333: PPUSH
6334: LD_STRING DDav-6
6336: PPUSH
6337: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6341: LD_STRING C2
6343: PPUSH
6344: CALL_OW 337
// Wait ( 5 5$00 ) ;
6348: LD_INT 10500
6350: PPUSH
6351: CALL_OW 67
// DialogueOn ;
6355: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6359: LD_EXP 1
6363: PPUSH
6364: LD_STRING DBag-1
6366: PPUSH
6367: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6371: LD_EXP 2
6375: PPUSH
6376: LD_STRING DDavB-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING DBag-2
6390: PPUSH
6391: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6395: LD_EXP 2
6399: PPUSH
6400: LD_STRING DDavB-2
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6407: LD_EXP 1
6411: PPUSH
6412: LD_STRING DBag-3
6414: PPUSH
6415: CALL_OW 94
// DialogueOff ;
6419: CALL_OW 7
// alliance_attack_active := true ;
6423: LD_ADDR_EXP 9
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// end ;
6431: PPOPN 1
6433: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6434: LD_EXP 10
6438: IFFALSE 6485
6440: GO 6442
6442: DISABLE
// begin DialogueOn ;
6443: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6447: LD_EXP 10
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: LD_EXP 10
6460: PUSH
6461: LD_INT 2
6463: ARRAY
6464: PPUSH
6465: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6469: LD_EXP 2
6473: PPUSH
6474: LD_STRING DDav-Artifact1-1
6476: PPUSH
6477: CALL_OW 88
// DialogueOff ;
6481: CALL_OW 7
// end ;
6485: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6486: LD_EXP 11
6490: IFFALSE 6537
6492: GO 6494
6494: DISABLE
// begin DialogueOn ;
6495: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6499: LD_EXP 11
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: PPUSH
6508: LD_EXP 11
6512: PUSH
6513: LD_INT 2
6515: ARRAY
6516: PPUSH
6517: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6521: LD_EXP 2
6525: PPUSH
6526: LD_STRING DDav-Artifact2-1
6528: PPUSH
6529: CALL_OW 88
// DialogueOff ;
6533: CALL_OW 7
// end ;
6537: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6538: LD_EXP 16
6542: PUSH
6543: LD_INT 6
6545: PPUSH
6546: CALL_OW 469
6550: NOT
6551: PUSH
6552: LD_EXP 18
6556: NOT
6557: AND
6558: OR
6559: IFFALSE 6571
6561: GO 6563
6563: DISABLE
// YouLost ( artifact_destroyed ) ;
6564: LD_STRING artifact_destroyed
6566: PPUSH
6567: CALL_OW 104
6571: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6572: LD_EXP 2
6576: PPUSH
6577: CALL_OW 301
6581: IFFALSE 6593
6583: GO 6585
6585: DISABLE
// YouLost ( dead ) ;
6586: LD_STRING dead
6588: PPUSH
6589: CALL_OW 104
6593: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6594: LD_INT 22
6596: PUSH
6597: LD_INT 7
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6760
6628: GO 6630
6630: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6631: LD_OWVAR 1
6635: PUSH
6636: LD_INT 252000
6638: PUSH
6639: LD_INT 210000
6641: PUSH
6642: LD_INT 189000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_OWVAR 67
6654: ARRAY
6655: LESS
6656: IFFALSE 6670
// AddMedal ( med1 , 1 ) else
6658: LD_STRING med1
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: CALL_OW 101
6668: GO 6681
// AddMedal ( med1 , - 1 ) ;
6670: LD_STRING med1
6672: PPUSH
6673: LD_INT 1
6675: NEG
6676: PPUSH
6677: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: IFFALSE 6710
// AddMedal ( med2 , - 1 ) else
6697: LD_STRING med2
6699: PPUSH
6700: LD_INT 1
6702: NEG
6703: PPUSH
6704: CALL_OW 101
6708: GO 6720
// AddMedal ( med2 , 1 ) ;
6710: LD_STRING med2
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: CALL_OW 101
// if player_used_sib_bomb then
6720: LD_EXP 12
6724: IFFALSE 6739
// AddMedal ( med3 , - 1 ) else
6726: LD_STRING med3
6728: PPUSH
6729: LD_INT 1
6731: NEG
6732: PPUSH
6733: CALL_OW 101
6737: GO 6749
// AddMedal ( med3 , 1 ) ;
6739: LD_STRING med3
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 101
// GiveMedals ( MAIN ) ;
6749: LD_STRING MAIN
6751: PPUSH
6752: CALL_OW 102
// YouWin ;
6756: CALL_OW 103
// end ; end_of_file
6760: END
// every 0 0$22 + 0 0$2 do
6761: GO 6763
6763: DISABLE
// begin enable ;
6764: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6765: LD_INT 4
6767: PPUSH
6768: LD_INT 5
6770: PPUSH
6771: CALL_OW 12
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: LD_INT 1
6781: PPUSH
6782: CALL_OW 55
// if tick >= 4 4$00 then
6786: LD_OWVAR 1
6790: PUSH
6791: LD_INT 8400
6793: GREATEREQUAL
6794: IFFALSE 6801
// begin disable ;
6796: DISABLE
// CratesSpawn ( ) ;
6797: CALL 6802 0 0
// end ; end ;
6801: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6802: LD_INT 0
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 30000
6815: PUSH
6816: LD_INT 20000
6818: PUSH
6819: LD_INT 10000
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_OWVAR 67
6831: ARRAY
6832: ST_TO_ADDR
// while amount > 0 do
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6911
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6843: LD_INT 1050
6845: PPUSH
6846: LD_INT 3150
6848: PPUSH
6849: CALL_OW 12
6853: PPUSH
6854: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6858: LD_ADDR_VAR 0 4
6862: PUSH
6863: LD_INT 1
6865: PPUSH
6866: LD_INT 5
6868: PPUSH
6869: CALL_OW 12
6873: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: LD_VAR 0 3
6883: PUSH
6884: LD_VAR 0 4
6888: PUSH
6889: LD_INT 10
6891: MUL
6892: MINUS
6893: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6894: LD_VAR 0 4
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 55
// end ;
6909: GO 6833
// end ; end_of_file
6911: LD_VAR 0 1
6915: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
// InitHc_All ( ) ;
6920: CALL_OW 584
// for i := 1 to num1 do
6924: LD_ADDR_VAR 0 6
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 1
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6968
// begin PrepareApeman ( 5 ) ;
6942: LD_INT 5
6944: PPUSH
6945: CALL 63999 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6949: CALL_OW 44
6953: PPUSH
6954: LD_VAR 0 4
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6939
6968: POP
6969: POP
// for i := 1 to num2 do
6970: LD_ADDR_VAR 0 6
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_VAR 0 2
6984: PUSH
6985: FOR_TO
6986: IFFALSE 7014
// begin PrepareTiger ( 5 ) ;
6988: LD_INT 5
6990: PPUSH
6991: CALL 64107 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6995: CALL_OW 44
6999: PPUSH
7000: LD_VAR 0 4
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: CALL_OW 49
// end ;
7012: GO 6985
7014: POP
7015: POP
// for i := 1 to num3 do
7016: LD_ADDR_VAR 0 6
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7057
// begin PrepareBird ( ) ;
7034: CALL 64288 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7038: CALL_OW 44
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// end ;
7055: GO 7031
7057: POP
7058: POP
// end ; end_of_file
7059: LD_VAR 0 5
7063: RET
// export function DebugArtifact ; begin
7064: LD_INT 0
7066: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7067: LD_STRING Artifact is loaded: 
7069: PUSH
7070: LD_EXP 18
7074: STR
7075: PPUSH
7076: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7080: LD_STRING Artifact is active: 
7082: PUSH
7083: LD_EXP 29
7087: STR
7088: PPUSH
7089: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7093: LD_STRING Artifact is researched: 
7095: PUSH
7096: LD_EXP 22
7100: STR
7101: PPUSH
7102: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7106: LD_STRING Artifact coords 
7108: PUSH
7109: LD_EXP 19
7113: PPUSH
7114: CALL_OW 469
7118: STR
7119: PPUSH
7120: CALL_OW 561
// end ;
7124: LD_VAR 0 1
7128: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7135: LD_ADDR_VAR 0 4
7139: PUSH
7140: LD_INT 100
7142: PUSH
7143: LD_INT 185
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 99
7152: PUSH
7153: LD_INT 175
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 191
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
// for i = 1 to artifacts_type do
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_EXP 14
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7293
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7193: LD_ADDR_VAR 0 3
7197: PUSH
7198: LD_VAR 0 4
7202: PUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_VAR 0 4
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7217: LD_ADDR_VAR 0 4
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_VAR 0 3
7231: DIFF
7232: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7233: LD_ADDR_EXP 15
7237: PUSH
7238: LD_EXP 15
7242: PPUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7258: LD_EXP 14
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL 5207 0 3
// end ;
7291: GO 7190
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 1
7299: RET
// export function GetUseCost ( dist ) ; begin
7300: LD_INT 0
7302: PPUSH
// if dist < 30 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 30
7310: LESS
7311: IFFALSE 7321
// result := 10 ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 10
7320: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7321: LD_VAR 0 1
7325: PUSH
7326: LD_INT 30
7328: GREATEREQUAL
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: LD_INT 50
7337: LESS
7338: AND
7339: IFFALSE 7349
// result := 35 ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 35
7348: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 50
7356: GREATEREQUAL
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_INT 80
7365: LESS
7366: AND
7367: IFFALSE 7377
// result := 70 ;
7369: LD_ADDR_VAR 0 2
7373: PUSH
7374: LD_INT 70
7376: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 80
7384: GREATEREQUAL
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: LD_INT 120
7393: LESS
7394: AND
7395: IFFALSE 7405
// result := 100 ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 100
7404: ST_TO_ADDR
// if dist >= 120 then
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 120
7412: GREATEREQUAL
7413: IFFALSE 7423
// result := 150 ;
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_INT 150
7422: ST_TO_ADDR
// end ;
7423: LD_VAR 0 2
7427: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 255
7437: PUSH
7438: LD_OWVAR 2
7442: EQUAL
7443: IFFALSE 7453
// player_artifact_researched := true ;
7445: LD_ADDR_EXP 22
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// end ;
7453: PPOPN 1
7455: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7456: LD_INT 22
7458: PUSH
7459: LD_OWVAR 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 30
7473: PUSH
7474: LD_INT 8
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 69
7504: PUSH
7505: LD_EXP 22
7509: AND
7510: PUSH
7511: LD_EXP 18
7515: NOT
7516: AND
7517: IFFALSE 7971
7519: GO 7521
7521: DISABLE
7522: LD_INT 0
7524: PPUSH
7525: PPUSH
// begin enable ;
7526: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_EXP 19
7536: PPUSH
7537: CALL_OW 469
7541: ST_TO_ADDR
// if not coords then
7542: LD_VAR 0 2
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7971
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7551: LD_ADDR_VAR 0 1
7555: PUSH
7556: LD_INT 22
7558: PUSH
7559: LD_OWVAR 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 30
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 2
7621: ARRAY
7622: PPUSH
7623: CALL_OW 73
7627: ST_TO_ADDR
// if not lab then
7628: LD_VAR 0 1
7632: NOT
7633: IFFALSE 7650
// begin if debug then
7635: LD_EXP 6
7639: IFFALSE 7648
// AddToLog ( Cannot find lab for artifact! ) ;
7641: LD_STRING Cannot find lab for artifact!
7643: PPUSH
7644: CALL_OW 561
// exit ;
7648: GO 7971
// end ; if not player_artifact_ready then
7650: LD_EXP 29
7654: NOT
7655: IFFALSE 7779
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 2
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PPUSH
7680: CALL_OW 297
7684: PUSH
7685: LD_EXP 23
7689: LESS
7690: IFFALSE 7755
// begin if BuildingStatus ( lab ) = bs_idle then
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 461
7701: PUSH
7702: LD_INT 2
7704: EQUAL
7705: IFFALSE 7731
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7707: LD_OWVAR 2
7711: PPUSH
7712: LD_EXP 25
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 468
7729: GO 7753
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7731: LD_OWVAR 2
7735: PPUSH
7736: LD_EXP 25
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 468
// end else
7753: GO 7777
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7755: LD_OWVAR 2
7759: PPUSH
7760: LD_EXP 25
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 468
// end else
7777: GO 7971
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_VAR 0 2
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 297
7806: PUSH
7807: LD_EXP 23
7811: LESS
7812: IFFALSE 7927
// begin if BuildingStatus ( lab ) = bs_idle then
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 461
7823: PUSH
7824: LD_INT 2
7826: EQUAL
7827: IFFALSE 7881
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7829: LD_OWVAR 2
7833: PPUSH
7834: LD_EXP 20
7838: PPUSH
7839: LD_INT 4
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 468
// if player_artifact_selected_unit then
7851: LD_EXP 30
7855: IFFALSE 7879
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7857: LD_OWVAR 2
7861: PPUSH
7862: LD_EXP 21
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 468
// end else
7879: GO 7925
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7881: LD_OWVAR 2
7885: PPUSH
7886: LD_EXP 20
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7903: LD_OWVAR 2
7907: PPUSH
7908: LD_EXP 21
7912: PPUSH
7913: LD_INT 1
7915: PPUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 468
// end ; end else
7925: GO 7971
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7927: LD_OWVAR 2
7931: PPUSH
7932: LD_EXP 20
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7949: LD_OWVAR 2
7953: PPUSH
7954: LD_EXP 21
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 468
// end ; end ;
7971: PPOPN 2
7973: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: LD_EXP 19
7991: PPUSH
7992: CALL_OW 469
7996: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_OWVAR 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 30
8019: PUSH
8020: LD_INT 8
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 11
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: PPUSH
8051: LD_VAR 0 5
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PPUSH
8060: LD_VAR 0 5
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PPUSH
8069: CALL_OW 73
8073: ST_TO_ADDR
// if not lab then
8074: LD_VAR 0 7
8078: NOT
8079: IFFALSE 8096
// begin if debug then
8081: LD_EXP 6
8085: IFFALSE 8094
// AddToLog ( Cannot find lab! ) ;
8087: LD_STRING Cannot find lab!
8089: PPUSH
8090: CALL_OW 561
// exit ;
8094: GO 8531
// end ; if icon = player_artifact_icon_res then
8096: LD_VAR 0 2
8100: PUSH
8101: LD_EXP 25
8105: EQUAL
8106: IFFALSE 8147
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8125: LD_OWVAR 2
8129: PPUSH
8130: LD_EXP 25
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: CALL_OW 468
// end ; if icon = player_artifact_icon then
8147: LD_VAR 0 2
8151: PUSH
8152: LD_EXP 20
8156: EQUAL
8157: IFFALSE 8196
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8159: LD_VAR 0 3
8163: PPUSH
8164: CALL_OW 247
8168: PUSH
8169: LD_INT 1
8171: EQUAL
8172: PUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 310
8182: NOT
8183: AND
8184: IFFALSE 8196
// player_artifact_selected_unit := cr1 ;
8186: LD_ADDR_EXP 30
8190: PUSH
8191: LD_VAR 0 3
8195: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8196: LD_VAR 0 2
8200: PUSH
8201: LD_EXP 21
8205: EQUAL
8206: IFFALSE 8521
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 428
8222: PUSH
8223: LD_INT 0
8225: NONEQUAL
8226: PUSH
8227: LD_VAR 0 3
8231: PPUSH
8232: LD_VAR 0 4
8236: PPUSH
8237: CALL_OW 546
8241: PUSH
8242: LD_INT 6
8244: ARRAY
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: LD_INT 4
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 6
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: OR
8265: IFFALSE 8269
// exit ;
8267: GO 8531
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_EXP 30
8278: PPUSH
8279: CALL_OW 250
8283: PPUSH
8284: LD_EXP 30
8288: PPUSH
8289: CALL_OW 251
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: LD_VAR 0 4
8303: PPUSH
8304: CALL_OW 298
8308: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8309: LD_ADDR_VAR 0 10
8313: PUSH
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL 7300 0 1
8323: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8324: LD_VAR 0 10
8328: PUSH
8329: LD_OWVAR 2
8333: PPUSH
8334: CALL 5240 0 1
8338: GREATER
8339: IFFALSE 8353
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8341: LD_STRING ArtFrogJumpCost
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: CALL_OW 338
// exit ;
8351: GO 8531
// end ; SetSibResources ( your_side , cost ) ;
8353: LD_OWVAR 2
8357: PPUSH
8358: LD_VAR 0 10
8362: PPUSH
8363: CALL 5364 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 6
8379: PPUSH
8380: LD_INT 5
8382: NEG
8383: PPUSH
8384: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 6
8400: PPUSH
8401: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8405: LD_EXP 30
8409: PPUSH
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: LD_INT 1
8425: PPUSH
8426: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8430: LD_VAR 0 3
8434: PPUSH
8435: LD_VAR 0 4
8439: PPUSH
8440: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8444: LD_ADDR_EXP 30
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// player_artifact_researched := false ;
8452: LD_ADDR_EXP 22
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8460: LD_OWVAR 2
8464: PPUSH
8465: LD_EXP 20
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_EXP 21
8491: PPUSH
8492: LD_INT 0
8494: PPUSH
8495: LD_VAR 0 7
8499: PPUSH
8500: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8504: LD_EXP 26
8508: PPUSH
8509: CALL_OW 67
// player_artifact_researched := true ;
8513: LD_ADDR_EXP 22
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// end ; if debug then
8521: LD_EXP 6
8525: IFFALSE 8531
// DebugArtifact ;
8527: CALL 7064 0 0
// end ;
8531: PPOPN 10
8533: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 255
8543: PUSH
8544: LD_OWVAR 2
8548: EQUAL
8549: IFFALSE 8588
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8551: LD_OWVAR 2
8555: PPUSH
8556: LD_EXP 25
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 468
// player_artifact_ready := true ;
8573: LD_ADDR_EXP 29
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8581: LD_STRING ArtFrogJump
8583: PPUSH
8584: CALL_OW 339
// end ; end ;
8588: PPOPN 1
8590: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8591: LD_OWVAR 2
8595: PPUSH
8596: LD_EXP 25
8600: PPUSH
8601: LD_INT 2
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 468
// end ;
8613: PPOPN 2
8615: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: LD_INT 81
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 34
8639: PUSH
8640: LD_INT 48
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 81
8658: PUSH
8659: LD_INT 7
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: ADD
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 34
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: LD_INT 49
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 47
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 34
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 31
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: ST_TO_ADDR
// if not tmp then
8926: LD_VAR 0 3
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9056
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 34
8942: PUSH
8943: LD_INT 48
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 72
8954: IFFALSE 8987
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8956: LD_ADDR_VAR 0 4
8960: PUSH
8961: LD_VAR 0 3
8965: PPUSH
8966: LD_INT 34
8968: PUSH
8969: LD_INT 48
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: ST_TO_ADDR
8985: GO 9011
// un := tmp [ rand ( 1 , tmp ) ] ;
8987: LD_ADDR_VAR 0 4
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: CALL_OW 12
9009: ARRAY
9010: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9011: LD_EXP 10
9015: NOT
9016: IFFALSE 9047
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9018: LD_ADDR_EXP 10
9022: PUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 250
9032: PUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: CALL_OW 251
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// KillUnit ( un ) ;
9047: LD_VAR 0 4
9051: PPUSH
9052: CALL_OW 66
// end ;
9056: LD_VAR 0 1
9060: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 6
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 33
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: ST_TO_ADDR
// if not tmp then
9101: LD_VAR 0 4
9105: NOT
9106: IFFALSE 9110
// exit ;
9108: GO 9248
// un := tmp [ rand ( 1 , tmp ) ] ;
9110: LD_ADDR_VAR 0 3
9114: PUSH
9115: LD_VAR 0 4
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 12
9132: ARRAY
9133: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 7
9141: PPUSH
9142: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 264
9155: PUSH
9156: LD_INT 48
9158: EQUAL
9159: IFFALSE 9178
// ComAttackPlace ( un , 194 , 19 ) else
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 194
9168: PPUSH
9169: LD_INT 19
9171: PPUSH
9172: CALL_OW 116
9176: GO 9212
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_INT 81
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: CALL_OW 74
9207: PPUSH
9208: CALL_OW 115
// if not alliance_used_artifact_2 then
9212: LD_EXP 11
9216: NOT
9217: IFFALSE 9248
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9219: LD_ADDR_EXP 11
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 250
9233: PUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 251
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: ST_TO_ADDR
// end ; end_of_file
9248: LD_VAR 0 1
9252: RET
// export function DebugMode ; var i , j , b ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
// enable_addtolog = true ;
9259: LD_ADDR_OWVAR 81
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// FogOff ( 6 ) ;
9267: LD_INT 6
9269: PPUSH
9270: CALL_OW 344
// uc_side = 6 ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_INT 6
9281: ST_TO_ADDR
// uc_nation = 3 ;
9282: LD_ADDR_OWVAR 21
9286: PUSH
9287: LD_INT 3
9289: ST_TO_ADDR
// bc_level = 10 ;
9290: LD_ADDR_OWVAR 43
9294: PUSH
9295: LD_INT 10
9297: ST_TO_ADDR
// bc_type := b_lab_full ;
9298: LD_ADDR_OWVAR 42
9302: PUSH
9303: LD_INT 8
9305: ST_TO_ADDR
// bc_kind1 := 11 ;
9306: LD_ADDR_OWVAR 44
9310: PUSH
9311: LD_INT 11
9313: ST_TO_ADDR
// bc_kind2 := 12 ;
9314: LD_ADDR_OWVAR 45
9318: PUSH
9319: LD_INT 12
9321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9322: LD_INT 189
9324: PPUSH
9325: LD_INT 20
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 47
// bc_type := b_warehouse ;
9335: LD_ADDR_OWVAR 42
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: LD_INT 201
9350: PPUSH
9351: LD_INT 22
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 47
9361: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 274
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 10000
9377: PPUSH
9378: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: LD_INT 10000
9397: PPUSH
9398: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9402: LD_VAR 0 4
9406: PPUSH
9407: CALL_OW 274
9411: PPUSH
9412: LD_INT 3
9414: PPUSH
9415: LD_INT 10000
9417: PPUSH
9418: CALL_OW 277
// bc_type := b_siberite_power ;
9422: LD_ADDR_OWVAR 42
9426: PUSH
9427: LD_INT 28
9429: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9430: LD_ADDR_VAR 0 4
9434: PUSH
9435: LD_INT 216
9437: PPUSH
9438: LD_INT 16
9440: PPUSH
9441: LD_INT 4
9443: PPUSH
9444: CALL_OW 47
9448: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: LD_INT 219
9456: PPUSH
9457: LD_INT 16
9459: PPUSH
9460: LD_INT 4
9462: PPUSH
9463: CALL_OW 47
9467: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9468: LD_INT 55
9470: PPUSH
9471: LD_INT 6
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9481: LD_INT 56
9483: PPUSH
9484: LD_INT 6
9486: PPUSH
9487: LD_INT 2
9489: PPUSH
9490: CALL_OW 322
// end ; end_of_file
9494: LD_VAR 0 1
9498: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 264
9514: PUSH
9515: LD_INT 91
9517: EQUAL
9518: IFFALSE 9590
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
9520: LD_INT 68
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 255
9532: PPUSH
9533: CALL_OW 321
9537: PUSH
9538: LD_INT 2
9540: EQUAL
9541: IFFALSE 9553
// eff := 70 else
9543: LD_ADDR_VAR 0 4
9547: PUSH
9548: LD_INT 70
9550: ST_TO_ADDR
9551: GO 9561
// eff := 30 ;
9553: LD_ADDR_VAR 0 4
9557: PUSH
9558: LD_INT 30
9560: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: CALL_OW 250
9570: PPUSH
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 251
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: CALL_OW 495
// end ; end ;
9590: LD_VAR 0 2
9594: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9595: LD_INT 0
9597: PPUSH
// end ;
9598: LD_VAR 0 4
9602: RET
// export function SOS_Command ( cmd ) ; begin
9603: LD_INT 0
9605: PPUSH
// end ;
9606: LD_VAR 0 2
9610: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9611: LD_INT 0
9613: PPUSH
// end ;
9614: LD_VAR 0 6
9618: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
// if not vehicle or not factory then
9623: LD_VAR 0 1
9627: NOT
9628: PUSH
9629: LD_VAR 0 2
9633: NOT
9634: OR
9635: IFFALSE 9639
// exit ;
9637: GO 9870
// if factoryWaypoints >= factory then
9639: LD_EXP 105
9643: PUSH
9644: LD_VAR 0 2
9648: GREATEREQUAL
9649: IFFALSE 9870
// if factoryWaypoints [ factory ] then
9651: LD_EXP 105
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: IFFALSE 9870
// begin if GetControl ( vehicle ) = control_manual then
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9757
// begin driver := IsDrivenBy ( vehicle ) ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 311
9692: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9693: LD_VAR 0 4
9697: PPUSH
9698: LD_EXP 105
9702: PUSH
9703: LD_VAR 0 2
9707: ARRAY
9708: PUSH
9709: LD_INT 3
9711: ARRAY
9712: PPUSH
9713: LD_EXP 105
9717: PUSH
9718: LD_VAR 0 2
9722: ARRAY
9723: PUSH
9724: LD_INT 4
9726: ARRAY
9727: PPUSH
9728: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9732: LD_VAR 0 4
9736: PPUSH
9737: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
9741: LD_VAR 0 4
9745: PPUSH
9746: LD_VAR 0 2
9750: PPUSH
9751: CALL_OW 180
// end else
9755: GO 9870
// if GetControl ( vehicle ) = control_remote then
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 263
9766: PUSH
9767: LD_INT 2
9769: EQUAL
9770: IFFALSE 9831
// begin wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// if Connect ( vehicle ) then
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL 38337 0 1
9788: IFFALSE 9829
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_EXP 105
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: PUSH
9806: LD_INT 3
9808: ARRAY
9809: PPUSH
9810: LD_EXP 105
9814: PUSH
9815: LD_VAR 0 2
9819: ARRAY
9820: PUSH
9821: LD_INT 4
9823: ARRAY
9824: PPUSH
9825: CALL_OW 171
// end else
9829: GO 9870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_EXP 105
9840: PUSH
9841: LD_VAR 0 2
9845: ARRAY
9846: PUSH
9847: LD_INT 3
9849: ARRAY
9850: PPUSH
9851: LD_EXP 105
9855: PUSH
9856: LD_VAR 0 2
9860: ARRAY
9861: PUSH
9862: LD_INT 4
9864: ARRAY
9865: PPUSH
9866: CALL_OW 171
// end ; end ;
9870: LD_VAR 0 3
9874: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
9875: LD_INT 0
9877: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
9878: LD_VAR 0 1
9882: PUSH
9883: LD_INT 250
9885: EQUAL
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 81
9899: EQUAL
9900: AND
9901: IFFALSE 9922
// MinerPlaceMine ( unit , x , y ) ;
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: LD_VAR 0 5
9917: PPUSH
9918: CALL 12746 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
9922: LD_VAR 0 1
9926: PUSH
9927: LD_INT 251
9929: EQUAL
9930: PUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: CALL_OW 264
9940: PUSH
9941: LD_INT 81
9943: EQUAL
9944: AND
9945: IFFALSE 9966
// MinerDetonateMine ( unit , x , y ) ;
9947: LD_VAR 0 2
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 13021 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
9966: LD_VAR 0 1
9970: PUSH
9971: LD_INT 252
9973: EQUAL
9974: PUSH
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 264
9984: PUSH
9985: LD_INT 81
9987: EQUAL
9988: AND
9989: IFFALSE 10010
// MinerCreateMinefield ( unit , x , y ) ;
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 4
10000: PPUSH
10001: LD_VAR 0 5
10005: PPUSH
10006: CALL 13438 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 253
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 257
10028: PUSH
10029: LD_INT 5
10031: EQUAL
10032: AND
10033: IFFALSE 10054
// ComBinocular ( unit , x , y ) ;
10035: LD_VAR 0 2
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_VAR 0 5
10049: PPUSH
10050: CALL 13807 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10054: LD_VAR 0 1
10058: PUSH
10059: LD_INT 254
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 264
10072: PUSH
10073: LD_INT 99
10075: EQUAL
10076: AND
10077: PUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: CALL_OW 263
10087: PUSH
10088: LD_INT 3
10090: EQUAL
10091: AND
10092: IFFALSE 10108
// HackDestroyVehicle ( unit , selectedUnit ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: CALL 12110 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10108: LD_VAR 0 1
10112: PUSH
10113: LD_INT 255
10115: EQUAL
10116: PUSH
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL_OW 264
10126: PUSH
10127: LD_INT 14
10129: PUSH
10130: LD_INT 53
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: IN
10137: AND
10138: PUSH
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 5
10148: PPUSH
10149: CALL_OW 488
10153: AND
10154: IFFALSE 10178
// CutTreeXYR ( unit , x , y , 12 ) ;
10156: LD_VAR 0 2
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: LD_VAR 0 5
10170: PPUSH
10171: LD_INT 12
10173: PPUSH
10174: CALL 10273 0 4
// if cmd = 256 then
10178: LD_VAR 0 1
10182: PUSH
10183: LD_INT 256
10185: EQUAL
10186: IFFALSE 10207
// SetFactoryWaypoint ( unit , x , y ) ;
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: LD_VAR 0 5
10202: PPUSH
10203: CALL 28718 0 3
// if cmd = 257 then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_INT 257
10214: EQUAL
10215: IFFALSE 10236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: LD_VAR 0 5
10231: PPUSH
10232: CALL 29080 0 3
// if cmd = 258 then
10236: LD_VAR 0 1
10240: PUSH
10241: LD_INT 258
10243: EQUAL
10244: IFFALSE 10268
// BurnTreeXYR ( unit , x , y , 8 ) ;
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 4
10255: PPUSH
10256: LD_VAR 0 5
10260: PPUSH
10261: LD_INT 8
10263: PPUSH
10264: CALL 10667 0 4
// end ;
10268: LD_VAR 0 6
10272: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10273: LD_INT 0
10275: PPUSH
10276: PPUSH
10277: PPUSH
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10284: LD_VAR 0 1
10288: PPUSH
10289: CALL_OW 302
10293: NOT
10294: PUSH
10295: LD_VAR 0 2
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: CALL_OW 488
10309: NOT
10310: OR
10311: PUSH
10312: LD_VAR 0 4
10316: NOT
10317: OR
10318: IFFALSE 10322
// exit ;
10320: GO 10662
// list := [ ] ;
10322: LD_ADDR_VAR 0 13
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// if x - r < 0 then
10329: LD_VAR 0 2
10333: PUSH
10334: LD_VAR 0 4
10338: MINUS
10339: PUSH
10340: LD_INT 0
10342: LESS
10343: IFFALSE 10355
// min_x := 0 else
10345: LD_ADDR_VAR 0 7
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
10353: GO 10371
// min_x := x - r ;
10355: LD_ADDR_VAR 0 7
10359: PUSH
10360: LD_VAR 0 2
10364: PUSH
10365: LD_VAR 0 4
10369: MINUS
10370: ST_TO_ADDR
// if y - r < 0 then
10371: LD_VAR 0 3
10375: PUSH
10376: LD_VAR 0 4
10380: MINUS
10381: PUSH
10382: LD_INT 0
10384: LESS
10385: IFFALSE 10397
// min_y := 0 else
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
10395: GO 10413
// min_y := y - r ;
10397: LD_ADDR_VAR 0 8
10401: PUSH
10402: LD_VAR 0 3
10406: PUSH
10407: LD_VAR 0 4
10411: MINUS
10412: ST_TO_ADDR
// max_x := x + r ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_VAR 0 2
10422: PUSH
10423: LD_VAR 0 4
10427: PLUS
10428: ST_TO_ADDR
// max_y := y + r ;
10429: LD_ADDR_VAR 0 10
10433: PUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_VAR 0 4
10443: PLUS
10444: ST_TO_ADDR
// for _x = min_x to max_x do
10445: LD_ADDR_VAR 0 11
10449: PUSH
10450: DOUBLE
10451: LD_VAR 0 7
10455: DEC
10456: ST_TO_ADDR
10457: LD_VAR 0 9
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10580
// for _y = min_y to max_y do
10465: LD_ADDR_VAR 0 12
10469: PUSH
10470: DOUBLE
10471: LD_VAR 0 8
10475: DEC
10476: ST_TO_ADDR
10477: LD_VAR 0 10
10481: PUSH
10482: FOR_TO
10483: IFFALSE 10576
// begin if not ValidHex ( _x , _y ) then
10485: LD_VAR 0 11
10489: PPUSH
10490: LD_VAR 0 12
10494: PPUSH
10495: CALL_OW 488
10499: NOT
10500: IFFALSE 10504
// continue ;
10502: GO 10482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10504: LD_VAR 0 11
10508: PPUSH
10509: LD_VAR 0 12
10513: PPUSH
10514: CALL_OW 351
10518: PUSH
10519: LD_VAR 0 11
10523: PPUSH
10524: LD_VAR 0 12
10528: PPUSH
10529: CALL_OW 554
10533: AND
10534: IFFALSE 10574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10536: LD_ADDR_VAR 0 13
10540: PUSH
10541: LD_VAR 0 13
10545: PPUSH
10546: LD_VAR 0 13
10550: PUSH
10551: LD_INT 1
10553: PLUS
10554: PPUSH
10555: LD_VAR 0 11
10559: PUSH
10560: LD_VAR 0 12
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PPUSH
10569: CALL_OW 2
10573: ST_TO_ADDR
// end ;
10574: GO 10482
10576: POP
10577: POP
10578: GO 10462
10580: POP
10581: POP
// if not list then
10582: LD_VAR 0 13
10586: NOT
10587: IFFALSE 10591
// exit ;
10589: GO 10662
// for i in list do
10591: LD_ADDR_VAR 0 6
10595: PUSH
10596: LD_VAR 0 13
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_STRING M
10611: PUSH
10612: LD_VAR 0 6
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PUSH
10621: LD_VAR 0 6
10625: PUSH
10626: LD_INT 2
10628: ARRAY
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: LD_INT 0
10635: PUSH
10636: LD_INT 0
10638: PUSH
10639: LD_INT 0
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: PPUSH
10654: CALL_OW 447
10658: GO 10601
10660: POP
10661: POP
// end ;
10662: LD_VAR 0 5
10666: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
10673: PPUSH
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
10678: LD_VAR 0 1
10682: PPUSH
10683: CALL_OW 302
10687: NOT
10688: PUSH
10689: LD_VAR 0 2
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: CALL_OW 488
10703: NOT
10704: OR
10705: PUSH
10706: LD_VAR 0 4
10710: NOT
10711: OR
10712: IFFALSE 10716
// exit ;
10714: GO 11064
// list := [ ] ;
10716: LD_ADDR_VAR 0 13
10720: PUSH
10721: EMPTY
10722: ST_TO_ADDR
// if x - r < 0 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_VAR 0 4
10732: MINUS
10733: PUSH
10734: LD_INT 0
10736: LESS
10737: IFFALSE 10749
// min_x := 0 else
10739: LD_ADDR_VAR 0 7
10743: PUSH
10744: LD_INT 0
10746: ST_TO_ADDR
10747: GO 10765
// min_x := x - r ;
10749: LD_ADDR_VAR 0 7
10753: PUSH
10754: LD_VAR 0 2
10758: PUSH
10759: LD_VAR 0 4
10763: MINUS
10764: ST_TO_ADDR
// if y - r < 0 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_VAR 0 4
10774: MINUS
10775: PUSH
10776: LD_INT 0
10778: LESS
10779: IFFALSE 10791
// min_y := 0 else
10781: LD_ADDR_VAR 0 8
10785: PUSH
10786: LD_INT 0
10788: ST_TO_ADDR
10789: GO 10807
// min_y := y - r ;
10791: LD_ADDR_VAR 0 8
10795: PUSH
10796: LD_VAR 0 3
10800: PUSH
10801: LD_VAR 0 4
10805: MINUS
10806: ST_TO_ADDR
// max_x := x + r ;
10807: LD_ADDR_VAR 0 9
10811: PUSH
10812: LD_VAR 0 2
10816: PUSH
10817: LD_VAR 0 4
10821: PLUS
10822: ST_TO_ADDR
// max_y := y + r ;
10823: LD_ADDR_VAR 0 10
10827: PUSH
10828: LD_VAR 0 3
10832: PUSH
10833: LD_VAR 0 4
10837: PLUS
10838: ST_TO_ADDR
// for _x = min_x to max_x do
10839: LD_ADDR_VAR 0 11
10843: PUSH
10844: DOUBLE
10845: LD_VAR 0 7
10849: DEC
10850: ST_TO_ADDR
10851: LD_VAR 0 9
10855: PUSH
10856: FOR_TO
10857: IFFALSE 10974
// for _y = min_y to max_y do
10859: LD_ADDR_VAR 0 12
10863: PUSH
10864: DOUBLE
10865: LD_VAR 0 8
10869: DEC
10870: ST_TO_ADDR
10871: LD_VAR 0 10
10875: PUSH
10876: FOR_TO
10877: IFFALSE 10970
// begin if not ValidHex ( _x , _y ) then
10879: LD_VAR 0 11
10883: PPUSH
10884: LD_VAR 0 12
10888: PPUSH
10889: CALL_OW 488
10893: NOT
10894: IFFALSE 10898
// continue ;
10896: GO 10876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10898: LD_VAR 0 11
10902: PPUSH
10903: LD_VAR 0 12
10907: PPUSH
10908: CALL_OW 351
10912: PUSH
10913: LD_VAR 0 11
10917: PPUSH
10918: LD_VAR 0 12
10922: PPUSH
10923: CALL_OW 554
10927: AND
10928: IFFALSE 10968
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10930: LD_ADDR_VAR 0 13
10934: PUSH
10935: LD_VAR 0 13
10939: PPUSH
10940: LD_VAR 0 13
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: PPUSH
10949: LD_VAR 0 11
10953: PUSH
10954: LD_VAR 0 12
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PPUSH
10963: CALL_OW 2
10967: ST_TO_ADDR
// end ;
10968: GO 10876
10970: POP
10971: POP
10972: GO 10856
10974: POP
10975: POP
// if not list then
10976: LD_VAR 0 13
10980: NOT
10981: IFFALSE 10985
// exit ;
10983: GO 11064
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
10985: LD_ADDR_VAR 0 13
10989: PUSH
10990: LD_VAR 0 1
10994: PPUSH
10995: LD_VAR 0 13
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL 35479 0 4
11010: ST_TO_ADDR
// ComStop ( flame ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 141
// for i in list do
11020: LD_ADDR_VAR 0 6
11024: PUSH
11025: LD_VAR 0 13
11029: PUSH
11030: FOR_IN
11031: IFFALSE 11062
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: LD_VAR 0 6
11042: PUSH
11043: LD_INT 1
11045: ARRAY
11046: PPUSH
11047: LD_VAR 0 6
11051: PUSH
11052: LD_INT 2
11054: ARRAY
11055: PPUSH
11056: CALL_OW 176
11060: GO 11030
11062: POP
11063: POP
// end ;
11064: LD_VAR 0 5
11068: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11069: LD_EXP 36
11073: NOT
11074: IFFALSE 11124
11076: GO 11078
11078: DISABLE
// begin initHack := true ;
11079: LD_ADDR_EXP 36
11083: PUSH
11084: LD_INT 1
11086: ST_TO_ADDR
// hackTanks := [ ] ;
11087: LD_ADDR_EXP 37
11091: PUSH
11092: EMPTY
11093: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11094: LD_ADDR_EXP 38
11098: PUSH
11099: EMPTY
11100: ST_TO_ADDR
// hackLimit := 3 ;
11101: LD_ADDR_EXP 39
11105: PUSH
11106: LD_INT 3
11108: ST_TO_ADDR
// hackDist := 12 ;
11109: LD_ADDR_EXP 40
11113: PUSH
11114: LD_INT 12
11116: ST_TO_ADDR
// hackCounter := [ ] ;
11117: LD_ADDR_EXP 41
11121: PUSH
11122: EMPTY
11123: ST_TO_ADDR
// end ;
11124: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11125: LD_EXP 36
11129: PUSH
11130: LD_INT 34
11132: PUSH
11133: LD_INT 99
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 69
11144: AND
11145: IFFALSE 11398
11147: GO 11149
11149: DISABLE
11150: LD_INT 0
11152: PPUSH
11153: PPUSH
// begin enable ;
11154: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11155: LD_ADDR_VAR 0 1
11159: PUSH
11160: LD_INT 34
11162: PUSH
11163: LD_INT 99
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 69
11174: PUSH
11175: FOR_IN
11176: IFFALSE 11396
// begin if not i in hackTanks then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_EXP 37
11187: IN
11188: NOT
11189: IFFALSE 11272
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11191: LD_ADDR_EXP 37
11195: PUSH
11196: LD_EXP 37
11200: PPUSH
11201: LD_EXP 37
11205: PUSH
11206: LD_INT 1
11208: PLUS
11209: PPUSH
11210: LD_VAR 0 1
11214: PPUSH
11215: CALL_OW 1
11219: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11220: LD_ADDR_EXP 38
11224: PUSH
11225: LD_EXP 38
11229: PPUSH
11230: LD_EXP 38
11234: PUSH
11235: LD_INT 1
11237: PLUS
11238: PPUSH
11239: EMPTY
11240: PPUSH
11241: CALL_OW 1
11245: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11246: LD_ADDR_EXP 41
11250: PUSH
11251: LD_EXP 41
11255: PPUSH
11256: LD_EXP 41
11260: PUSH
11261: LD_INT 1
11263: PLUS
11264: PPUSH
11265: EMPTY
11266: PPUSH
11267: CALL_OW 1
11271: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11272: LD_VAR 0 1
11276: PPUSH
11277: CALL_OW 302
11281: NOT
11282: IFFALSE 11295
// begin HackUnlinkAll ( i ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL 11401 0 1
// continue ;
11293: GO 11175
// end ; HackCheckCapturedStatus ( i ) ;
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL 11844 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: LD_INT 81
11311: PUSH
11312: LD_VAR 0 1
11316: PPUSH
11317: CALL_OW 255
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 33
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 91
11338: PUSH
11339: LD_VAR 0 1
11343: PUSH
11344: LD_EXP 40
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 50
11356: PUSH
11357: EMPTY
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// if not tmp then
11371: LD_VAR 0 2
11375: NOT
11376: IFFALSE 11380
// continue ;
11378: GO 11175
// HackLink ( i , tmp ) ;
11380: LD_VAR 0 1
11384: PPUSH
11385: LD_VAR 0 2
11389: PPUSH
11390: CALL 11537 0 2
// end ;
11394: GO 11175
11396: POP
11397: POP
// end ;
11398: PPOPN 2
11400: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11401: LD_INT 0
11403: PPUSH
11404: PPUSH
11405: PPUSH
// if not hack in hackTanks then
11406: LD_VAR 0 1
11410: PUSH
11411: LD_EXP 37
11415: IN
11416: NOT
11417: IFFALSE 11421
// exit ;
11419: GO 11532
// index := GetElementIndex ( hackTanks , hack ) ;
11421: LD_ADDR_VAR 0 4
11425: PUSH
11426: LD_EXP 37
11430: PPUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL 34776 0 2
11440: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11441: LD_EXP 38
11445: PUSH
11446: LD_VAR 0 4
11450: ARRAY
11451: IFFALSE 11532
// begin for i in hackTanksCaptured [ index ] do
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_EXP 38
11462: PUSH
11463: LD_VAR 0 4
11467: ARRAY
11468: PUSH
11469: FOR_IN
11470: IFFALSE 11496
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11472: LD_VAR 0 3
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PPUSH
11481: LD_VAR 0 3
11485: PUSH
11486: LD_INT 2
11488: ARRAY
11489: PPUSH
11490: CALL_OW 235
11494: GO 11469
11496: POP
11497: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11498: LD_ADDR_EXP 38
11502: PUSH
11503: LD_EXP 38
11507: PPUSH
11508: LD_VAR 0 4
11512: PPUSH
11513: EMPTY
11514: PPUSH
11515: CALL_OW 1
11519: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11520: LD_VAR 0 1
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 505
// end ; end ;
11532: LD_VAR 0 2
11536: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11537: LD_INT 0
11539: PPUSH
11540: PPUSH
11541: PPUSH
// if not hack in hackTanks or not vehicles then
11542: LD_VAR 0 1
11546: PUSH
11547: LD_EXP 37
11551: IN
11552: NOT
11553: PUSH
11554: LD_VAR 0 2
11558: NOT
11559: OR
11560: IFFALSE 11564
// exit ;
11562: GO 11839
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_VAR 0 1
11573: PPUSH
11574: LD_VAR 0 2
11578: PPUSH
11579: LD_INT 1
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL 35426 0 4
11589: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11590: LD_ADDR_VAR 0 5
11594: PUSH
11595: LD_EXP 37
11599: PPUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL 34776 0 2
11609: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11610: LD_EXP 38
11614: PUSH
11615: LD_VAR 0 5
11619: ARRAY
11620: PUSH
11621: LD_EXP 39
11625: LESS
11626: IFFALSE 11815
// begin for i := 1 to vehicles do
11628: LD_ADDR_VAR 0 4
11632: PUSH
11633: DOUBLE
11634: LD_INT 1
11636: DEC
11637: ST_TO_ADDR
11638: LD_VAR 0 2
11642: PUSH
11643: FOR_TO
11644: IFFALSE 11813
// begin if hackTanksCaptured [ index ] = hackLimit then
11646: LD_EXP 38
11650: PUSH
11651: LD_VAR 0 5
11655: ARRAY
11656: PUSH
11657: LD_EXP 39
11661: EQUAL
11662: IFFALSE 11666
// break ;
11664: GO 11813
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11666: LD_ADDR_EXP 41
11670: PUSH
11671: LD_EXP 41
11675: PPUSH
11676: LD_VAR 0 5
11680: PPUSH
11681: LD_EXP 41
11685: PUSH
11686: LD_VAR 0 5
11690: ARRAY
11691: PUSH
11692: LD_INT 1
11694: PLUS
11695: PPUSH
11696: CALL_OW 1
11700: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11701: LD_ADDR_EXP 38
11705: PUSH
11706: LD_EXP 38
11710: PPUSH
11711: LD_VAR 0 5
11715: PUSH
11716: LD_EXP 38
11720: PUSH
11721: LD_VAR 0 5
11725: ARRAY
11726: PUSH
11727: LD_INT 1
11729: PLUS
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PPUSH
11735: LD_VAR 0 2
11739: PUSH
11740: LD_VAR 0 4
11744: ARRAY
11745: PUSH
11746: LD_VAR 0 2
11750: PUSH
11751: LD_VAR 0 4
11755: ARRAY
11756: PPUSH
11757: CALL_OW 255
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PPUSH
11766: CALL 34991 0 3
11770: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11771: LD_VAR 0 2
11775: PUSH
11776: LD_VAR 0 4
11780: ARRAY
11781: PPUSH
11782: LD_VAR 0 1
11786: PPUSH
11787: CALL_OW 255
11791: PPUSH
11792: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_VAR 0 4
11805: ARRAY
11806: PPUSH
11807: CALL_OW 141
// end ;
11811: GO 11643
11813: POP
11814: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11815: LD_VAR 0 1
11819: PPUSH
11820: LD_EXP 38
11824: PUSH
11825: LD_VAR 0 5
11829: ARRAY
11830: PUSH
11831: LD_INT 0
11833: PLUS
11834: PPUSH
11835: CALL_OW 505
// end ;
11839: LD_VAR 0 3
11843: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
11844: LD_INT 0
11846: PPUSH
11847: PPUSH
11848: PPUSH
11849: PPUSH
// if not hack in hackTanks then
11850: LD_VAR 0 1
11854: PUSH
11855: LD_EXP 37
11859: IN
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 12105
// index := GetElementIndex ( hackTanks , hack ) ;
11865: LD_ADDR_VAR 0 4
11869: PUSH
11870: LD_EXP 37
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL 34776 0 2
11884: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: DOUBLE
11891: LD_EXP 38
11895: PUSH
11896: LD_VAR 0 4
11900: ARRAY
11901: INC
11902: ST_TO_ADDR
11903: LD_INT 1
11905: PUSH
11906: FOR_DOWNTO
11907: IFFALSE 12079
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
11909: LD_ADDR_VAR 0 5
11913: PUSH
11914: LD_EXP 38
11918: PUSH
11919: LD_VAR 0 4
11923: ARRAY
11924: PUSH
11925: LD_VAR 0 3
11929: ARRAY
11930: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
11931: LD_VAR 0 5
11935: PUSH
11936: LD_INT 1
11938: ARRAY
11939: PPUSH
11940: CALL_OW 302
11944: NOT
11945: PUSH
11946: LD_VAR 0 5
11950: PUSH
11951: LD_INT 1
11953: ARRAY
11954: PPUSH
11955: CALL_OW 255
11959: PUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 255
11969: NONEQUAL
11970: OR
11971: IFFALSE 12077
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
11973: LD_VAR 0 5
11977: PUSH
11978: LD_INT 1
11980: ARRAY
11981: PPUSH
11982: CALL_OW 305
11986: PUSH
11987: LD_VAR 0 5
11991: PUSH
11992: LD_INT 1
11994: ARRAY
11995: PPUSH
11996: CALL_OW 255
12000: PUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 255
12010: EQUAL
12011: AND
12012: IFFALSE 12036
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12014: LD_VAR 0 5
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PPUSH
12023: LD_VAR 0 5
12027: PUSH
12028: LD_INT 2
12030: ARRAY
12031: PPUSH
12032: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12036: LD_ADDR_EXP 38
12040: PUSH
12041: LD_EXP 38
12045: PPUSH
12046: LD_VAR 0 4
12050: PPUSH
12051: LD_EXP 38
12055: PUSH
12056: LD_VAR 0 4
12060: ARRAY
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: CALL_OW 3
12071: PPUSH
12072: CALL_OW 1
12076: ST_TO_ADDR
// end ; end ;
12077: GO 11906
12079: POP
12080: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12081: LD_VAR 0 1
12085: PPUSH
12086: LD_EXP 38
12090: PUSH
12091: LD_VAR 0 4
12095: ARRAY
12096: PUSH
12097: LD_INT 0
12099: PLUS
12100: PPUSH
12101: CALL_OW 505
// end ;
12105: LD_VAR 0 2
12109: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12110: LD_INT 0
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
// if not hack in hackTanks then
12116: LD_VAR 0 1
12120: PUSH
12121: LD_EXP 37
12125: IN
12126: NOT
12127: IFFALSE 12131
// exit ;
12129: GO 12216
// index := GetElementIndex ( hackTanks , hack ) ;
12131: LD_ADDR_VAR 0 5
12135: PUSH
12136: LD_EXP 37
12140: PPUSH
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL 34776 0 2
12150: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12151: LD_ADDR_VAR 0 4
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_EXP 38
12165: PUSH
12166: LD_VAR 0 5
12170: ARRAY
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12214
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12175: LD_EXP 38
12179: PUSH
12180: LD_VAR 0 5
12184: ARRAY
12185: PUSH
12186: LD_VAR 0 4
12190: ARRAY
12191: PUSH
12192: LD_INT 1
12194: ARRAY
12195: PUSH
12196: LD_VAR 0 2
12200: EQUAL
12201: IFFALSE 12212
// KillUnit ( vehicle ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 66
12212: GO 12172
12214: POP
12215: POP
// end ;
12216: LD_VAR 0 3
12220: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12221: LD_EXP 42
12225: NOT
12226: IFFALSE 12261
12228: GO 12230
12230: DISABLE
// begin initMiner := true ;
12231: LD_ADDR_EXP 42
12235: PUSH
12236: LD_INT 1
12238: ST_TO_ADDR
// minersList := [ ] ;
12239: LD_ADDR_EXP 43
12243: PUSH
12244: EMPTY
12245: ST_TO_ADDR
// minerMinesList := [ ] ;
12246: LD_ADDR_EXP 44
12250: PUSH
12251: EMPTY
12252: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12253: LD_ADDR_EXP 45
12257: PUSH
12258: LD_INT 5
12260: ST_TO_ADDR
// end ;
12261: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12262: LD_EXP 42
12266: PUSH
12267: LD_INT 34
12269: PUSH
12270: LD_INT 81
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: AND
12282: IFFALSE 12743
12284: GO 12286
12286: DISABLE
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
12291: PPUSH
12292: PPUSH
// begin enable ;
12293: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12294: LD_ADDR_VAR 0 1
12298: PUSH
12299: LD_INT 34
12301: PUSH
12302: LD_INT 81
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 69
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12387
// begin if not i in minersList then
12317: LD_VAR 0 1
12321: PUSH
12322: LD_EXP 43
12326: IN
12327: NOT
12328: IFFALSE 12385
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12330: LD_ADDR_EXP 43
12334: PUSH
12335: LD_EXP 43
12339: PPUSH
12340: LD_EXP 43
12344: PUSH
12345: LD_INT 1
12347: PLUS
12348: PPUSH
12349: LD_VAR 0 1
12353: PPUSH
12354: CALL_OW 1
12358: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12359: LD_ADDR_EXP 44
12363: PUSH
12364: LD_EXP 44
12368: PPUSH
12369: LD_EXP 44
12373: PUSH
12374: LD_INT 1
12376: PLUS
12377: PPUSH
12378: EMPTY
12379: PPUSH
12380: CALL_OW 1
12384: ST_TO_ADDR
// end end ;
12385: GO 12314
12387: POP
12388: POP
// for i := minerMinesList downto 1 do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: DOUBLE
12395: LD_EXP 44
12399: INC
12400: ST_TO_ADDR
12401: LD_INT 1
12403: PUSH
12404: FOR_DOWNTO
12405: IFFALSE 12741
// begin if IsLive ( minersList [ i ] ) then
12407: LD_EXP 43
12411: PUSH
12412: LD_VAR 0 1
12416: ARRAY
12417: PPUSH
12418: CALL_OW 300
12422: IFFALSE 12450
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12424: LD_EXP 43
12428: PUSH
12429: LD_VAR 0 1
12433: ARRAY
12434: PPUSH
12435: LD_EXP 44
12439: PUSH
12440: LD_VAR 0 1
12444: ARRAY
12445: PPUSH
12446: CALL_OW 505
// if not minerMinesList [ i ] then
12450: LD_EXP 44
12454: PUSH
12455: LD_VAR 0 1
12459: ARRAY
12460: NOT
12461: IFFALSE 12465
// continue ;
12463: GO 12404
// for j := minerMinesList [ i ] downto 1 do
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: DOUBLE
12471: LD_EXP 44
12475: PUSH
12476: LD_VAR 0 1
12480: ARRAY
12481: INC
12482: ST_TO_ADDR
12483: LD_INT 1
12485: PUSH
12486: FOR_DOWNTO
12487: IFFALSE 12737
// begin side := GetSide ( minersList [ i ] ) ;
12489: LD_ADDR_VAR 0 3
12493: PUSH
12494: LD_EXP 43
12498: PUSH
12499: LD_VAR 0 1
12503: ARRAY
12504: PPUSH
12505: CALL_OW 255
12509: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12510: LD_ADDR_VAR 0 4
12514: PUSH
12515: LD_EXP 44
12519: PUSH
12520: LD_VAR 0 1
12524: ARRAY
12525: PUSH
12526: LD_VAR 0 2
12530: ARRAY
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: LD_EXP 44
12540: PUSH
12541: LD_VAR 0 1
12545: ARRAY
12546: PUSH
12547: LD_VAR 0 2
12551: ARRAY
12552: PUSH
12553: LD_INT 2
12555: ARRAY
12556: PPUSH
12557: CALL_OW 428
12561: ST_TO_ADDR
// if not tmp then
12562: LD_VAR 0 4
12566: NOT
12567: IFFALSE 12571
// continue ;
12569: GO 12486
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12571: LD_VAR 0 4
12575: PUSH
12576: LD_INT 81
12578: PUSH
12579: LD_VAR 0 3
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: IN
12593: PUSH
12594: LD_EXP 44
12598: PUSH
12599: LD_VAR 0 1
12603: ARRAY
12604: PUSH
12605: LD_VAR 0 2
12609: ARRAY
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: LD_EXP 44
12619: PUSH
12620: LD_VAR 0 1
12624: ARRAY
12625: PUSH
12626: LD_VAR 0 2
12630: ARRAY
12631: PUSH
12632: LD_INT 2
12634: ARRAY
12635: PPUSH
12636: CALL_OW 458
12640: AND
12641: IFFALSE 12735
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12643: LD_EXP 44
12647: PUSH
12648: LD_VAR 0 1
12652: ARRAY
12653: PUSH
12654: LD_VAR 0 2
12658: ARRAY
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_VAR 0 1
12673: ARRAY
12674: PUSH
12675: LD_VAR 0 2
12679: ARRAY
12680: PUSH
12681: LD_INT 2
12683: ARRAY
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12694: LD_ADDR_EXP 44
12698: PUSH
12699: LD_EXP 44
12703: PPUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: LD_EXP 44
12713: PUSH
12714: LD_VAR 0 1
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 2
12724: PPUSH
12725: CALL_OW 3
12729: PPUSH
12730: CALL_OW 1
12734: ST_TO_ADDR
// end ; end ;
12735: GO 12486
12737: POP
12738: POP
// end ;
12739: GO 12404
12741: POP
12742: POP
// end ;
12743: PPOPN 4
12745: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12746: LD_INT 0
12748: PPUSH
12749: PPUSH
// result := false ;
12750: LD_ADDR_VAR 0 4
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12758: LD_VAR 0 1
12762: PPUSH
12763: CALL_OW 264
12767: PUSH
12768: LD_INT 81
12770: EQUAL
12771: NOT
12772: IFFALSE 12776
// exit ;
12774: GO 13016
// index := GetElementIndex ( minersList , unit ) ;
12776: LD_ADDR_VAR 0 5
12780: PUSH
12781: LD_EXP 43
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL 34776 0 2
12795: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
12796: LD_EXP 44
12800: PUSH
12801: LD_VAR 0 5
12805: ARRAY
12806: PUSH
12807: LD_EXP 45
12811: GREATEREQUAL
12812: IFFALSE 12816
// exit ;
12814: GO 13016
// ComMoveXY ( unit , x , y ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_VAR 0 2
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12835: LD_INT 35
12837: PPUSH
12838: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
12842: LD_VAR 0 1
12846: PPUSH
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: CALL 66528 0 3
12861: NOT
12862: PUSH
12863: LD_VAR 0 1
12867: PPUSH
12868: CALL_OW 314
12872: AND
12873: IFFALSE 12877
// exit ;
12875: GO 13016
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
12877: LD_VAR 0 2
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: CALL_OW 428
12891: PUSH
12892: LD_VAR 0 1
12896: EQUAL
12897: PUSH
12898: LD_VAR 0 1
12902: PPUSH
12903: CALL_OW 314
12907: NOT
12908: AND
12909: IFFALSE 12835
// PlaySoundXY ( x , y , PlantMine ) ;
12911: LD_VAR 0 2
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_STRING PlantMine
12923: PPUSH
12924: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
12928: LD_VAR 0 2
12932: PPUSH
12933: LD_VAR 0 3
12937: PPUSH
12938: LD_VAR 0 1
12942: PPUSH
12943: CALL_OW 255
12947: PPUSH
12948: LD_INT 0
12950: PPUSH
12951: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
12955: LD_ADDR_EXP 44
12959: PUSH
12960: LD_EXP 44
12964: PPUSH
12965: LD_VAR 0 5
12969: PUSH
12970: LD_EXP 44
12974: PUSH
12975: LD_VAR 0 5
12979: ARRAY
12980: PUSH
12981: LD_INT 1
12983: PLUS
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PPUSH
12989: LD_VAR 0 2
12993: PUSH
12994: LD_VAR 0 3
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: CALL 34991 0 3
13007: ST_TO_ADDR
// result := true ;
13008: LD_ADDR_VAR 0 4
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// end ;
13016: LD_VAR 0 4
13020: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// if not unit in minersList then
13026: LD_VAR 0 1
13030: PUSH
13031: LD_EXP 43
13035: IN
13036: NOT
13037: IFFALSE 13041
// exit ;
13039: GO 13433
// index := GetElementIndex ( minersList , unit ) ;
13041: LD_ADDR_VAR 0 6
13045: PUSH
13046: LD_EXP 43
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL 34776 0 2
13060: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13061: LD_ADDR_VAR 0 5
13065: PUSH
13066: DOUBLE
13067: LD_EXP 44
13071: PUSH
13072: LD_VAR 0 6
13076: ARRAY
13077: INC
13078: ST_TO_ADDR
13079: LD_INT 1
13081: PUSH
13082: FOR_DOWNTO
13083: IFFALSE 13244
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13085: LD_EXP 44
13089: PUSH
13090: LD_VAR 0 6
13094: ARRAY
13095: PUSH
13096: LD_VAR 0 5
13100: ARRAY
13101: PUSH
13102: LD_INT 1
13104: ARRAY
13105: PUSH
13106: LD_VAR 0 2
13110: EQUAL
13111: PUSH
13112: LD_EXP 44
13116: PUSH
13117: LD_VAR 0 6
13121: ARRAY
13122: PUSH
13123: LD_VAR 0 5
13127: ARRAY
13128: PUSH
13129: LD_INT 2
13131: ARRAY
13132: PUSH
13133: LD_VAR 0 3
13137: EQUAL
13138: AND
13139: IFFALSE 13242
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13141: LD_EXP 44
13145: PUSH
13146: LD_VAR 0 6
13150: ARRAY
13151: PUSH
13152: LD_VAR 0 5
13156: ARRAY
13157: PUSH
13158: LD_INT 1
13160: ARRAY
13161: PPUSH
13162: LD_EXP 44
13166: PUSH
13167: LD_VAR 0 6
13171: ARRAY
13172: PUSH
13173: LD_VAR 0 5
13177: ARRAY
13178: PUSH
13179: LD_INT 2
13181: ARRAY
13182: PPUSH
13183: LD_VAR 0 1
13187: PPUSH
13188: CALL_OW 255
13192: PPUSH
13193: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13197: LD_ADDR_EXP 44
13201: PUSH
13202: LD_EXP 44
13206: PPUSH
13207: LD_VAR 0 6
13211: PPUSH
13212: LD_EXP 44
13216: PUSH
13217: LD_VAR 0 6
13221: ARRAY
13222: PPUSH
13223: LD_VAR 0 5
13227: PPUSH
13228: CALL_OW 3
13232: PPUSH
13233: CALL_OW 1
13237: ST_TO_ADDR
// exit ;
13238: POP
13239: POP
13240: GO 13433
// end ; end ;
13242: GO 13082
13244: POP
13245: POP
// for i := minerMinesList [ index ] downto 1 do
13246: LD_ADDR_VAR 0 5
13250: PUSH
13251: DOUBLE
13252: LD_EXP 44
13256: PUSH
13257: LD_VAR 0 6
13261: ARRAY
13262: INC
13263: ST_TO_ADDR
13264: LD_INT 1
13266: PUSH
13267: FOR_DOWNTO
13268: IFFALSE 13431
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13270: LD_EXP 44
13274: PUSH
13275: LD_VAR 0 6
13279: ARRAY
13280: PUSH
13281: LD_VAR 0 5
13285: ARRAY
13286: PUSH
13287: LD_INT 1
13289: ARRAY
13290: PPUSH
13291: LD_EXP 44
13295: PUSH
13296: LD_VAR 0 6
13300: ARRAY
13301: PUSH
13302: LD_VAR 0 5
13306: ARRAY
13307: PUSH
13308: LD_INT 2
13310: ARRAY
13311: PPUSH
13312: LD_VAR 0 2
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: CALL_OW 298
13326: PUSH
13327: LD_INT 6
13329: LESS
13330: IFFALSE 13429
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13332: LD_EXP 44
13336: PUSH
13337: LD_VAR 0 6
13341: ARRAY
13342: PUSH
13343: LD_VAR 0 5
13347: ARRAY
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: LD_EXP 44
13357: PUSH
13358: LD_VAR 0 6
13362: ARRAY
13363: PUSH
13364: LD_VAR 0 5
13368: ARRAY
13369: PUSH
13370: LD_INT 2
13372: ARRAY
13373: PPUSH
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL_OW 255
13383: PPUSH
13384: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13388: LD_ADDR_EXP 44
13392: PUSH
13393: LD_EXP 44
13397: PPUSH
13398: LD_VAR 0 6
13402: PPUSH
13403: LD_EXP 44
13407: PUSH
13408: LD_VAR 0 6
13412: ARRAY
13413: PPUSH
13414: LD_VAR 0 5
13418: PPUSH
13419: CALL_OW 3
13423: PPUSH
13424: CALL_OW 1
13428: ST_TO_ADDR
// end ; end ;
13429: GO 13267
13431: POP
13432: POP
// end ;
13433: LD_VAR 0 4
13437: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 264
13458: PUSH
13459: LD_INT 81
13461: EQUAL
13462: NOT
13463: PUSH
13464: LD_VAR 0 1
13468: PUSH
13469: LD_EXP 43
13473: IN
13474: NOT
13475: OR
13476: IFFALSE 13480
// exit ;
13478: GO 13802
// index := GetElementIndex ( minersList , unit ) ;
13480: LD_ADDR_VAR 0 6
13484: PUSH
13485: LD_EXP 43
13489: PPUSH
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL 34776 0 2
13499: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13500: LD_ADDR_VAR 0 8
13504: PUSH
13505: LD_EXP 45
13509: PUSH
13510: LD_EXP 44
13514: PUSH
13515: LD_VAR 0 6
13519: ARRAY
13520: MINUS
13521: ST_TO_ADDR
// if not minesFreeAmount then
13522: LD_VAR 0 8
13526: NOT
13527: IFFALSE 13531
// exit ;
13529: GO 13802
// tmp := [ ] ;
13531: LD_ADDR_VAR 0 7
13535: PUSH
13536: EMPTY
13537: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13538: LD_ADDR_VAR 0 5
13542: PUSH
13543: DOUBLE
13544: LD_INT 1
13546: DEC
13547: ST_TO_ADDR
13548: LD_VAR 0 8
13552: PUSH
13553: FOR_TO
13554: IFFALSE 13749
// begin _d := rand ( 0 , 5 ) ;
13556: LD_ADDR_VAR 0 11
13560: PUSH
13561: LD_INT 0
13563: PPUSH
13564: LD_INT 5
13566: PPUSH
13567: CALL_OW 12
13571: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13572: LD_ADDR_VAR 0 12
13576: PUSH
13577: LD_INT 2
13579: PPUSH
13580: LD_INT 6
13582: PPUSH
13583: CALL_OW 12
13587: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13588: LD_ADDR_VAR 0 9
13592: PUSH
13593: LD_VAR 0 2
13597: PPUSH
13598: LD_VAR 0 11
13602: PPUSH
13603: LD_VAR 0 12
13607: PPUSH
13608: CALL_OW 272
13612: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13613: LD_ADDR_VAR 0 10
13617: PUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_VAR 0 11
13627: PPUSH
13628: LD_VAR 0 12
13632: PPUSH
13633: CALL_OW 273
13637: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13638: LD_VAR 0 9
13642: PPUSH
13643: LD_VAR 0 10
13647: PPUSH
13648: CALL_OW 488
13652: PUSH
13653: LD_VAR 0 9
13657: PUSH
13658: LD_VAR 0 10
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_VAR 0 7
13671: IN
13672: NOT
13673: AND
13674: PUSH
13675: LD_VAR 0 9
13679: PPUSH
13680: LD_VAR 0 10
13684: PPUSH
13685: CALL_OW 458
13689: NOT
13690: AND
13691: IFFALSE 13733
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13693: LD_ADDR_VAR 0 7
13697: PUSH
13698: LD_VAR 0 7
13702: PPUSH
13703: LD_VAR 0 7
13707: PUSH
13708: LD_INT 1
13710: PLUS
13711: PPUSH
13712: LD_VAR 0 9
13716: PUSH
13717: LD_VAR 0 10
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 1
13730: ST_TO_ADDR
13731: GO 13747
// i := i - 1 ;
13733: LD_ADDR_VAR 0 5
13737: PUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_INT 1
13745: MINUS
13746: ST_TO_ADDR
// end ;
13747: GO 13553
13749: POP
13750: POP
// for i in tmp do
13751: LD_ADDR_VAR 0 5
13755: PUSH
13756: LD_VAR 0 7
13760: PUSH
13761: FOR_IN
13762: IFFALSE 13800
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13764: LD_VAR 0 1
13768: PPUSH
13769: LD_VAR 0 5
13773: PUSH
13774: LD_INT 1
13776: ARRAY
13777: PPUSH
13778: LD_VAR 0 5
13782: PUSH
13783: LD_INT 2
13785: ARRAY
13786: PPUSH
13787: CALL 12746 0 3
13791: NOT
13792: IFFALSE 13798
// exit ;
13794: POP
13795: POP
13796: GO 13802
13798: GO 13761
13800: POP
13801: POP
// end ;
13802: LD_VAR 0 4
13806: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
13807: LD_INT 0
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
// if not GetClass ( unit ) = class_sniper then
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 257
13825: PUSH
13826: LD_INT 5
13828: EQUAL
13829: NOT
13830: IFFALSE 13834
// exit ;
13832: GO 14222
// dist := 8 ;
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: LD_INT 8
13841: ST_TO_ADDR
// viewRange := 12 ;
13842: LD_ADDR_VAR 0 7
13846: PUSH
13847: LD_INT 12
13849: ST_TO_ADDR
// side := GetSide ( unit ) ;
13850: LD_ADDR_VAR 0 6
13854: PUSH
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 255
13864: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
13865: LD_INT 61
13867: PPUSH
13868: LD_VAR 0 6
13872: PPUSH
13873: CALL_OW 321
13877: PUSH
13878: LD_INT 2
13880: EQUAL
13881: IFFALSE 13891
// viewRange := 16 ;
13883: LD_ADDR_VAR 0 7
13887: PUSH
13888: LD_INT 16
13890: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
13891: LD_VAR 0 1
13895: PPUSH
13896: LD_VAR 0 2
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: CALL_OW 297
13910: PUSH
13911: LD_VAR 0 5
13915: GREATER
13916: IFFALSE 13995
// begin ComMoveXY ( unit , x , y ) ;
13918: LD_VAR 0 1
13922: PPUSH
13923: LD_VAR 0 2
13927: PPUSH
13928: LD_VAR 0 3
13932: PPUSH
13933: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13937: LD_INT 35
13939: PPUSH
13940: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_VAR 0 2
13953: PPUSH
13954: LD_VAR 0 3
13958: PPUSH
13959: CALL 66528 0 3
13963: NOT
13964: IFFALSE 13968
// exit ;
13966: GO 14222
// until GetDistUnitXY ( unit , x , y ) < dist ;
13968: LD_VAR 0 1
13972: PPUSH
13973: LD_VAR 0 2
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: CALL_OW 297
13987: PUSH
13988: LD_VAR 0 5
13992: LESS
13993: IFFALSE 13937
// end ; ComTurnXY ( unit , x , y ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: CALL_OW 118
// wait ( 5 ) ;
14014: LD_INT 5
14016: PPUSH
14017: CALL_OW 67
// _d := GetDir ( unit ) ;
14021: LD_ADDR_VAR 0 10
14025: PUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 254
14035: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14036: LD_ADDR_VAR 0 8
14040: PUSH
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 250
14050: PPUSH
14051: LD_VAR 0 10
14055: PPUSH
14056: LD_VAR 0 5
14060: PPUSH
14061: CALL_OW 272
14065: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14066: LD_ADDR_VAR 0 9
14070: PUSH
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 251
14080: PPUSH
14081: LD_VAR 0 10
14085: PPUSH
14086: LD_VAR 0 5
14090: PPUSH
14091: CALL_OW 273
14095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14096: LD_VAR 0 8
14100: PPUSH
14101: LD_VAR 0 9
14105: PPUSH
14106: CALL_OW 488
14110: NOT
14111: IFFALSE 14115
// exit ;
14113: GO 14222
// ComAnimCustom ( unit , 1 ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14127: LD_VAR 0 8
14131: PPUSH
14132: LD_VAR 0 9
14136: PPUSH
14137: LD_VAR 0 6
14141: PPUSH
14142: LD_VAR 0 7
14146: PPUSH
14147: CALL_OW 330
// repeat wait ( 1 ) ;
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: CALL_OW 316
14167: PUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 314
14177: OR
14178: PUSH
14179: LD_VAR 0 1
14183: PPUSH
14184: CALL_OW 302
14188: NOT
14189: OR
14190: PUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 301
14200: OR
14201: IFFALSE 14151
// RemoveSeeing ( _x , _y , side ) ;
14203: LD_VAR 0 8
14207: PPUSH
14208: LD_VAR 0 9
14212: PPUSH
14213: LD_VAR 0 6
14217: PPUSH
14218: CALL_OW 331
// end ; end_of_file
14222: LD_VAR 0 4
14226: RET
// export globalGameSaveCounter ; every 0 0$1 do
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14231: LD_STRING updateTimer(
14233: PUSH
14234: LD_OWVAR 1
14238: STR
14239: PUSH
14240: LD_STRING );
14242: STR
14243: PPUSH
14244: CALL_OW 559
// end ;
14248: END
// every 0 0$1 do
14249: GO 14251
14251: DISABLE
// begin globalGameSaveCounter := 0 ;
14252: LD_ADDR_EXP 46
14256: PUSH
14257: LD_INT 0
14259: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14260: LD_STRING setGameSaveCounter(0)
14262: PPUSH
14263: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14267: LD_STRING initStreamRollete();
14269: PPUSH
14270: CALL_OW 559
// InitStreamMode ;
14274: CALL 15600 0 0
// DefineStreamItems ( false ) ;
14278: LD_INT 0
14280: PPUSH
14281: CALL 16064 0 1
// end ;
14285: END
// export function SOS_MapStart ( ) ; begin
14286: LD_INT 0
14288: PPUSH
// if streamModeActive then
14289: LD_EXP 47
14293: IFFALSE 14302
// DefineStreamItems ( true ) ;
14295: LD_INT 1
14297: PPUSH
14298: CALL 16064 0 1
// UpdateLuaVariables ( ) ;
14302: CALL 14319 0 0
// UpdateFactoryWaypoints ( ) ;
14306: CALL 28933 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14310: CALL 29190 0 0
// end ;
14314: LD_VAR 0 1
14318: RET
// function UpdateLuaVariables ( ) ; begin
14319: LD_INT 0
14321: PPUSH
// if globalGameSaveCounter then
14322: LD_EXP 46
14326: IFFALSE 14360
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14328: LD_ADDR_EXP 46
14332: PUSH
14333: LD_EXP 46
14337: PPUSH
14338: CALL 69092 0 1
14342: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14343: LD_STRING setGameSaveCounter(
14345: PUSH
14346: LD_EXP 46
14350: STR
14351: PUSH
14352: LD_STRING )
14354: STR
14355: PPUSH
14356: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14360: LD_STRING setGameDifficulty(
14362: PUSH
14363: LD_OWVAR 67
14367: STR
14368: PUSH
14369: LD_STRING )
14371: STR
14372: PPUSH
14373: CALL_OW 559
// end ;
14377: LD_VAR 0 1
14381: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14382: LD_INT 0
14384: PPUSH
// if p2 = stream_mode then
14385: LD_VAR 0 2
14389: PUSH
14390: LD_INT 100
14392: EQUAL
14393: IFFALSE 15396
// begin if not StreamModeActive then
14395: LD_EXP 47
14399: NOT
14400: IFFALSE 14410
// StreamModeActive := true ;
14402: LD_ADDR_EXP 47
14406: PUSH
14407: LD_INT 1
14409: ST_TO_ADDR
// if p3 = 0 then
14410: LD_VAR 0 3
14414: PUSH
14415: LD_INT 0
14417: EQUAL
14418: IFFALSE 14424
// InitStreamMode ;
14420: CALL 15600 0 0
// if p3 = 1 then
14424: LD_VAR 0 3
14428: PUSH
14429: LD_INT 1
14431: EQUAL
14432: IFFALSE 14442
// sRocket := true ;
14434: LD_ADDR_EXP 52
14438: PUSH
14439: LD_INT 1
14441: ST_TO_ADDR
// if p3 = 2 then
14442: LD_VAR 0 3
14446: PUSH
14447: LD_INT 2
14449: EQUAL
14450: IFFALSE 14460
// sSpeed := true ;
14452: LD_ADDR_EXP 51
14456: PUSH
14457: LD_INT 1
14459: ST_TO_ADDR
// if p3 = 3 then
14460: LD_VAR 0 3
14464: PUSH
14465: LD_INT 3
14467: EQUAL
14468: IFFALSE 14478
// sEngine := true ;
14470: LD_ADDR_EXP 53
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// if p3 = 4 then
14478: LD_VAR 0 3
14482: PUSH
14483: LD_INT 4
14485: EQUAL
14486: IFFALSE 14496
// sSpec := true ;
14488: LD_ADDR_EXP 50
14492: PUSH
14493: LD_INT 1
14495: ST_TO_ADDR
// if p3 = 5 then
14496: LD_VAR 0 3
14500: PUSH
14501: LD_INT 5
14503: EQUAL
14504: IFFALSE 14514
// sLevel := true ;
14506: LD_ADDR_EXP 54
14510: PUSH
14511: LD_INT 1
14513: ST_TO_ADDR
// if p3 = 6 then
14514: LD_VAR 0 3
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: IFFALSE 14532
// sArmoury := true ;
14524: LD_ADDR_EXP 55
14528: PUSH
14529: LD_INT 1
14531: ST_TO_ADDR
// if p3 = 7 then
14532: LD_VAR 0 3
14536: PUSH
14537: LD_INT 7
14539: EQUAL
14540: IFFALSE 14550
// sRadar := true ;
14542: LD_ADDR_EXP 56
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
// if p3 = 8 then
14550: LD_VAR 0 3
14554: PUSH
14555: LD_INT 8
14557: EQUAL
14558: IFFALSE 14568
// sBunker := true ;
14560: LD_ADDR_EXP 57
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// if p3 = 9 then
14568: LD_VAR 0 3
14572: PUSH
14573: LD_INT 9
14575: EQUAL
14576: IFFALSE 14586
// sHack := true ;
14578: LD_ADDR_EXP 58
14582: PUSH
14583: LD_INT 1
14585: ST_TO_ADDR
// if p3 = 10 then
14586: LD_VAR 0 3
14590: PUSH
14591: LD_INT 10
14593: EQUAL
14594: IFFALSE 14604
// sFire := true ;
14596: LD_ADDR_EXP 59
14600: PUSH
14601: LD_INT 1
14603: ST_TO_ADDR
// if p3 = 11 then
14604: LD_VAR 0 3
14608: PUSH
14609: LD_INT 11
14611: EQUAL
14612: IFFALSE 14622
// sRefresh := true ;
14614: LD_ADDR_EXP 60
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// if p3 = 12 then
14622: LD_VAR 0 3
14626: PUSH
14627: LD_INT 12
14629: EQUAL
14630: IFFALSE 14640
// sExp := true ;
14632: LD_ADDR_EXP 61
14636: PUSH
14637: LD_INT 1
14639: ST_TO_ADDR
// if p3 = 13 then
14640: LD_VAR 0 3
14644: PUSH
14645: LD_INT 13
14647: EQUAL
14648: IFFALSE 14658
// sDepot := true ;
14650: LD_ADDR_EXP 62
14654: PUSH
14655: LD_INT 1
14657: ST_TO_ADDR
// if p3 = 14 then
14658: LD_VAR 0 3
14662: PUSH
14663: LD_INT 14
14665: EQUAL
14666: IFFALSE 14676
// sFlag := true ;
14668: LD_ADDR_EXP 63
14672: PUSH
14673: LD_INT 1
14675: ST_TO_ADDR
// if p3 = 15 then
14676: LD_VAR 0 3
14680: PUSH
14681: LD_INT 15
14683: EQUAL
14684: IFFALSE 14694
// sKamikadze := true ;
14686: LD_ADDR_EXP 71
14690: PUSH
14691: LD_INT 1
14693: ST_TO_ADDR
// if p3 = 16 then
14694: LD_VAR 0 3
14698: PUSH
14699: LD_INT 16
14701: EQUAL
14702: IFFALSE 14712
// sTroll := true ;
14704: LD_ADDR_EXP 72
14708: PUSH
14709: LD_INT 1
14711: ST_TO_ADDR
// if p3 = 17 then
14712: LD_VAR 0 3
14716: PUSH
14717: LD_INT 17
14719: EQUAL
14720: IFFALSE 14730
// sSlow := true ;
14722: LD_ADDR_EXP 73
14726: PUSH
14727: LD_INT 1
14729: ST_TO_ADDR
// if p3 = 18 then
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 18
14737: EQUAL
14738: IFFALSE 14748
// sLack := true ;
14740: LD_ADDR_EXP 74
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// if p3 = 19 then
14748: LD_VAR 0 3
14752: PUSH
14753: LD_INT 19
14755: EQUAL
14756: IFFALSE 14766
// sTank := true ;
14758: LD_ADDR_EXP 76
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// if p3 = 20 then
14766: LD_VAR 0 3
14770: PUSH
14771: LD_INT 20
14773: EQUAL
14774: IFFALSE 14784
// sRemote := true ;
14776: LD_ADDR_EXP 77
14780: PUSH
14781: LD_INT 1
14783: ST_TO_ADDR
// if p3 = 21 then
14784: LD_VAR 0 3
14788: PUSH
14789: LD_INT 21
14791: EQUAL
14792: IFFALSE 14802
// sPowell := true ;
14794: LD_ADDR_EXP 78
14798: PUSH
14799: LD_INT 1
14801: ST_TO_ADDR
// if p3 = 22 then
14802: LD_VAR 0 3
14806: PUSH
14807: LD_INT 22
14809: EQUAL
14810: IFFALSE 14820
// sTeleport := true ;
14812: LD_ADDR_EXP 81
14816: PUSH
14817: LD_INT 1
14819: ST_TO_ADDR
// if p3 = 23 then
14820: LD_VAR 0 3
14824: PUSH
14825: LD_INT 23
14827: EQUAL
14828: IFFALSE 14838
// sOilTower := true ;
14830: LD_ADDR_EXP 83
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// if p3 = 24 then
14838: LD_VAR 0 3
14842: PUSH
14843: LD_INT 24
14845: EQUAL
14846: IFFALSE 14856
// sShovel := true ;
14848: LD_ADDR_EXP 84
14852: PUSH
14853: LD_INT 1
14855: ST_TO_ADDR
// if p3 = 25 then
14856: LD_VAR 0 3
14860: PUSH
14861: LD_INT 25
14863: EQUAL
14864: IFFALSE 14874
// sSheik := true ;
14866: LD_ADDR_EXP 85
14870: PUSH
14871: LD_INT 1
14873: ST_TO_ADDR
// if p3 = 26 then
14874: LD_VAR 0 3
14878: PUSH
14879: LD_INT 26
14881: EQUAL
14882: IFFALSE 14892
// sEarthquake := true ;
14884: LD_ADDR_EXP 87
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// if p3 = 27 then
14892: LD_VAR 0 3
14896: PUSH
14897: LD_INT 27
14899: EQUAL
14900: IFFALSE 14910
// sAI := true ;
14902: LD_ADDR_EXP 88
14906: PUSH
14907: LD_INT 1
14909: ST_TO_ADDR
// if p3 = 28 then
14910: LD_VAR 0 3
14914: PUSH
14915: LD_INT 28
14917: EQUAL
14918: IFFALSE 14928
// sCargo := true ;
14920: LD_ADDR_EXP 91
14924: PUSH
14925: LD_INT 1
14927: ST_TO_ADDR
// if p3 = 29 then
14928: LD_VAR 0 3
14932: PUSH
14933: LD_INT 29
14935: EQUAL
14936: IFFALSE 14946
// sDLaser := true ;
14938: LD_ADDR_EXP 92
14942: PUSH
14943: LD_INT 1
14945: ST_TO_ADDR
// if p3 = 30 then
14946: LD_VAR 0 3
14950: PUSH
14951: LD_INT 30
14953: EQUAL
14954: IFFALSE 14964
// sExchange := true ;
14956: LD_ADDR_EXP 93
14960: PUSH
14961: LD_INT 1
14963: ST_TO_ADDR
// if p3 = 31 then
14964: LD_VAR 0 3
14968: PUSH
14969: LD_INT 31
14971: EQUAL
14972: IFFALSE 14982
// sFac := true ;
14974: LD_ADDR_EXP 94
14978: PUSH
14979: LD_INT 1
14981: ST_TO_ADDR
// if p3 = 32 then
14982: LD_VAR 0 3
14986: PUSH
14987: LD_INT 32
14989: EQUAL
14990: IFFALSE 15000
// sPower := true ;
14992: LD_ADDR_EXP 95
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
// if p3 = 33 then
15000: LD_VAR 0 3
15004: PUSH
15005: LD_INT 33
15007: EQUAL
15008: IFFALSE 15018
// sRandom := true ;
15010: LD_ADDR_EXP 96
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// if p3 = 34 then
15018: LD_VAR 0 3
15022: PUSH
15023: LD_INT 34
15025: EQUAL
15026: IFFALSE 15036
// sShield := true ;
15028: LD_ADDR_EXP 97
15032: PUSH
15033: LD_INT 1
15035: ST_TO_ADDR
// if p3 = 35 then
15036: LD_VAR 0 3
15040: PUSH
15041: LD_INT 35
15043: EQUAL
15044: IFFALSE 15054
// sTime := true ;
15046: LD_ADDR_EXP 98
15050: PUSH
15051: LD_INT 1
15053: ST_TO_ADDR
// if p3 = 36 then
15054: LD_VAR 0 3
15058: PUSH
15059: LD_INT 36
15061: EQUAL
15062: IFFALSE 15072
// sTools := true ;
15064: LD_ADDR_EXP 99
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// if p3 = 101 then
15072: LD_VAR 0 3
15076: PUSH
15077: LD_INT 101
15079: EQUAL
15080: IFFALSE 15090
// sSold := true ;
15082: LD_ADDR_EXP 64
15086: PUSH
15087: LD_INT 1
15089: ST_TO_ADDR
// if p3 = 102 then
15090: LD_VAR 0 3
15094: PUSH
15095: LD_INT 102
15097: EQUAL
15098: IFFALSE 15108
// sDiff := true ;
15100: LD_ADDR_EXP 65
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if p3 = 103 then
15108: LD_VAR 0 3
15112: PUSH
15113: LD_INT 103
15115: EQUAL
15116: IFFALSE 15126
// sFog := true ;
15118: LD_ADDR_EXP 68
15122: PUSH
15123: LD_INT 1
15125: ST_TO_ADDR
// if p3 = 104 then
15126: LD_VAR 0 3
15130: PUSH
15131: LD_INT 104
15133: EQUAL
15134: IFFALSE 15144
// sReset := true ;
15136: LD_ADDR_EXP 69
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// if p3 = 105 then
15144: LD_VAR 0 3
15148: PUSH
15149: LD_INT 105
15151: EQUAL
15152: IFFALSE 15162
// sSun := true ;
15154: LD_ADDR_EXP 70
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// if p3 = 106 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_INT 106
15169: EQUAL
15170: IFFALSE 15180
// sTiger := true ;
15172: LD_ADDR_EXP 66
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// if p3 = 107 then
15180: LD_VAR 0 3
15184: PUSH
15185: LD_INT 107
15187: EQUAL
15188: IFFALSE 15198
// sBomb := true ;
15190: LD_ADDR_EXP 67
15194: PUSH
15195: LD_INT 1
15197: ST_TO_ADDR
// if p3 = 108 then
15198: LD_VAR 0 3
15202: PUSH
15203: LD_INT 108
15205: EQUAL
15206: IFFALSE 15216
// sWound := true ;
15208: LD_ADDR_EXP 75
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if p3 = 109 then
15216: LD_VAR 0 3
15220: PUSH
15221: LD_INT 109
15223: EQUAL
15224: IFFALSE 15234
// sBetray := true ;
15226: LD_ADDR_EXP 79
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if p3 = 110 then
15234: LD_VAR 0 3
15238: PUSH
15239: LD_INT 110
15241: EQUAL
15242: IFFALSE 15252
// sContamin := true ;
15244: LD_ADDR_EXP 80
15248: PUSH
15249: LD_INT 1
15251: ST_TO_ADDR
// if p3 = 111 then
15252: LD_VAR 0 3
15256: PUSH
15257: LD_INT 111
15259: EQUAL
15260: IFFALSE 15270
// sOil := true ;
15262: LD_ADDR_EXP 82
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// if p3 = 112 then
15270: LD_VAR 0 3
15274: PUSH
15275: LD_INT 112
15277: EQUAL
15278: IFFALSE 15288
// sStu := true ;
15280: LD_ADDR_EXP 86
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// if p3 = 113 then
15288: LD_VAR 0 3
15292: PUSH
15293: LD_INT 113
15295: EQUAL
15296: IFFALSE 15306
// sBazooka := true ;
15298: LD_ADDR_EXP 89
15302: PUSH
15303: LD_INT 1
15305: ST_TO_ADDR
// if p3 = 114 then
15306: LD_VAR 0 3
15310: PUSH
15311: LD_INT 114
15313: EQUAL
15314: IFFALSE 15324
// sMortar := true ;
15316: LD_ADDR_EXP 90
15320: PUSH
15321: LD_INT 1
15323: ST_TO_ADDR
// if p3 = 115 then
15324: LD_VAR 0 3
15328: PUSH
15329: LD_INT 115
15331: EQUAL
15332: IFFALSE 15342
// sRanger := true ;
15334: LD_ADDR_EXP 100
15338: PUSH
15339: LD_INT 1
15341: ST_TO_ADDR
// if p3 = 116 then
15342: LD_VAR 0 3
15346: PUSH
15347: LD_INT 116
15349: EQUAL
15350: IFFALSE 15360
// sComputer := true ;
15352: LD_ADDR_EXP 101
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// if p3 = 117 then
15360: LD_VAR 0 3
15364: PUSH
15365: LD_INT 117
15367: EQUAL
15368: IFFALSE 15378
// s30 := true ;
15370: LD_ADDR_EXP 102
15374: PUSH
15375: LD_INT 1
15377: ST_TO_ADDR
// if p3 = 118 then
15378: LD_VAR 0 3
15382: PUSH
15383: LD_INT 118
15385: EQUAL
15386: IFFALSE 15396
// s60 := true ;
15388: LD_ADDR_EXP 103
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// end ; if p2 = hack_mode then
15396: LD_VAR 0 2
15400: PUSH
15401: LD_INT 101
15403: EQUAL
15404: IFFALSE 15532
// begin case p3 of 1 :
15406: LD_VAR 0 3
15410: PUSH
15411: LD_INT 1
15413: DOUBLE
15414: EQUAL
15415: IFTRUE 15419
15417: GO 15426
15419: POP
// hHackUnlimitedResources ; 2 :
15420: CALL 27679 0 0
15424: GO 15532
15426: LD_INT 2
15428: DOUBLE
15429: EQUAL
15430: IFTRUE 15434
15432: GO 15441
15434: POP
// hHackSetLevel10 ; 3 :
15435: CALL 27812 0 0
15439: GO 15532
15441: LD_INT 3
15443: DOUBLE
15444: EQUAL
15445: IFTRUE 15449
15447: GO 15456
15449: POP
// hHackSetLevel10YourUnits ; 4 :
15450: CALL 27897 0 0
15454: GO 15532
15456: LD_INT 4
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15471
15464: POP
// hHackInvincible ; 5 :
15465: CALL 28345 0 0
15469: GO 15532
15471: LD_INT 5
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15486
15479: POP
// hHackInvisible ; 6 :
15480: CALL 28456 0 0
15484: GO 15532
15486: LD_INT 6
15488: DOUBLE
15489: EQUAL
15490: IFTRUE 15494
15492: GO 15501
15494: POP
// hHackChangeYourSide ; 7 :
15495: CALL 28513 0 0
15499: GO 15532
15501: LD_INT 7
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15516
15509: POP
// hHackChangeUnitSide ; 8 :
15510: CALL 28555 0 0
15514: GO 15532
15516: LD_INT 8
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15531
15524: POP
// hHackFog ; end ;
15525: CALL 28656 0 0
15529: GO 15532
15531: POP
// end ; if p2 = game_save_mode then
15532: LD_VAR 0 2
15536: PUSH
15537: LD_INT 102
15539: EQUAL
15540: IFFALSE 15595
// begin if p3 = 1 then
15542: LD_VAR 0 3
15546: PUSH
15547: LD_INT 1
15549: EQUAL
15550: IFFALSE 15562
// globalGameSaveCounter := p4 ;
15552: LD_ADDR_EXP 46
15556: PUSH
15557: LD_VAR 0 4
15561: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15562: LD_VAR 0 3
15566: PUSH
15567: LD_INT 2
15569: EQUAL
15570: PUSH
15571: LD_EXP 46
15575: AND
15576: IFFALSE 15595
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15578: LD_STRING setGameSaveCounter(
15580: PUSH
15581: LD_EXP 46
15585: STR
15586: PUSH
15587: LD_STRING )
15589: STR
15590: PPUSH
15591: CALL_OW 559
// end ; end ;
15595: LD_VAR 0 7
15599: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15600: LD_INT 0
15602: PPUSH
// streamModeActive := false ;
15603: LD_ADDR_EXP 47
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// normalCounter := 36 ;
15611: LD_ADDR_EXP 48
15615: PUSH
15616: LD_INT 36
15618: ST_TO_ADDR
// hardcoreCounter := 18 ;
15619: LD_ADDR_EXP 49
15623: PUSH
15624: LD_INT 18
15626: ST_TO_ADDR
// sRocket := false ;
15627: LD_ADDR_EXP 52
15631: PUSH
15632: LD_INT 0
15634: ST_TO_ADDR
// sSpeed := false ;
15635: LD_ADDR_EXP 51
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// sEngine := false ;
15643: LD_ADDR_EXP 53
15647: PUSH
15648: LD_INT 0
15650: ST_TO_ADDR
// sSpec := false ;
15651: LD_ADDR_EXP 50
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// sLevel := false ;
15659: LD_ADDR_EXP 54
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// sArmoury := false ;
15667: LD_ADDR_EXP 55
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// sRadar := false ;
15675: LD_ADDR_EXP 56
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// sBunker := false ;
15683: LD_ADDR_EXP 57
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// sHack := false ;
15691: LD_ADDR_EXP 58
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// sFire := false ;
15699: LD_ADDR_EXP 59
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// sRefresh := false ;
15707: LD_ADDR_EXP 60
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// sExp := false ;
15715: LD_ADDR_EXP 61
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// sDepot := false ;
15723: LD_ADDR_EXP 62
15727: PUSH
15728: LD_INT 0
15730: ST_TO_ADDR
// sFlag := false ;
15731: LD_ADDR_EXP 63
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// sKamikadze := false ;
15739: LD_ADDR_EXP 71
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// sTroll := false ;
15747: LD_ADDR_EXP 72
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// sSlow := false ;
15755: LD_ADDR_EXP 73
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// sLack := false ;
15763: LD_ADDR_EXP 74
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// sTank := false ;
15771: LD_ADDR_EXP 76
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// sRemote := false ;
15779: LD_ADDR_EXP 77
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// sPowell := false ;
15787: LD_ADDR_EXP 78
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// sTeleport := false ;
15795: LD_ADDR_EXP 81
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// sOilTower := false ;
15803: LD_ADDR_EXP 83
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// sShovel := false ;
15811: LD_ADDR_EXP 84
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// sSheik := false ;
15819: LD_ADDR_EXP 85
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// sEarthquake := false ;
15827: LD_ADDR_EXP 87
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// sAI := false ;
15835: LD_ADDR_EXP 88
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// sCargo := false ;
15843: LD_ADDR_EXP 91
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// sDLaser := false ;
15851: LD_ADDR_EXP 92
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// sExchange := false ;
15859: LD_ADDR_EXP 93
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
// sFac := false ;
15867: LD_ADDR_EXP 94
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// sPower := false ;
15875: LD_ADDR_EXP 95
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// sRandom := false ;
15883: LD_ADDR_EXP 96
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// sShield := false ;
15891: LD_ADDR_EXP 97
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// sTime := false ;
15899: LD_ADDR_EXP 98
15903: PUSH
15904: LD_INT 0
15906: ST_TO_ADDR
// sTools := false ;
15907: LD_ADDR_EXP 99
15911: PUSH
15912: LD_INT 0
15914: ST_TO_ADDR
// sSold := false ;
15915: LD_ADDR_EXP 64
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sDiff := false ;
15923: LD_ADDR_EXP 65
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sFog := false ;
15931: LD_ADDR_EXP 68
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sReset := false ;
15939: LD_ADDR_EXP 69
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sSun := false ;
15947: LD_ADDR_EXP 70
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sTiger := false ;
15955: LD_ADDR_EXP 66
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// sBomb := false ;
15963: LD_ADDR_EXP 67
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// sWound := false ;
15971: LD_ADDR_EXP 75
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// sBetray := false ;
15979: LD_ADDR_EXP 79
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// sContamin := false ;
15987: LD_ADDR_EXP 80
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// sOil := false ;
15995: LD_ADDR_EXP 82
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// sStu := false ;
16003: LD_ADDR_EXP 86
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// sBazooka := false ;
16011: LD_ADDR_EXP 89
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sMortar := false ;
16019: LD_ADDR_EXP 90
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sRanger := false ;
16027: LD_ADDR_EXP 100
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sComputer := false ;
16035: LD_ADDR_EXP 101
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// s30 := false ;
16043: LD_ADDR_EXP 102
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// s60 := false ;
16051: LD_ADDR_EXP 103
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// end ;
16059: LD_VAR 0 1
16063: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
// result := [ ] ;
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: EMPTY
16079: ST_TO_ADDR
// if campaign_id = 1 then
16080: LD_OWVAR 69
16084: PUSH
16085: LD_INT 1
16087: EQUAL
16088: IFFALSE 19254
// begin case mission_number of 1 :
16090: LD_OWVAR 70
16094: PUSH
16095: LD_INT 1
16097: DOUBLE
16098: EQUAL
16099: IFTRUE 16103
16101: GO 16179
16103: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16104: LD_ADDR_VAR 0 2
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: LD_INT 4
16114: PUSH
16115: LD_INT 11
16117: PUSH
16118: LD_INT 12
16120: PUSH
16121: LD_INT 15
16123: PUSH
16124: LD_INT 16
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_INT 23
16132: PUSH
16133: LD_INT 26
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 101
16149: PUSH
16150: LD_INT 102
16152: PUSH
16153: LD_INT 106
16155: PUSH
16156: LD_INT 116
16158: PUSH
16159: LD_INT 117
16161: PUSH
16162: LD_INT 118
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: ST_TO_ADDR
16177: GO 19252
16179: LD_INT 2
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16271
16187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16188: LD_ADDR_VAR 0 2
16192: PUSH
16193: LD_INT 2
16195: PUSH
16196: LD_INT 4
16198: PUSH
16199: LD_INT 11
16201: PUSH
16202: LD_INT 12
16204: PUSH
16205: LD_INT 15
16207: PUSH
16208: LD_INT 16
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 26
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 101
16233: PUSH
16234: LD_INT 102
16236: PUSH
16237: LD_INT 105
16239: PUSH
16240: LD_INT 106
16242: PUSH
16243: LD_INT 108
16245: PUSH
16246: LD_INT 116
16248: PUSH
16249: LD_INT 117
16251: PUSH
16252: LD_INT 118
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: ST_TO_ADDR
16269: GO 19252
16271: LD_INT 3
16273: DOUBLE
16274: EQUAL
16275: IFTRUE 16279
16277: GO 16367
16279: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 4
16290: PUSH
16291: LD_INT 5
16293: PUSH
16294: LD_INT 11
16296: PUSH
16297: LD_INT 12
16299: PUSH
16300: LD_INT 15
16302: PUSH
16303: LD_INT 16
16305: PUSH
16306: LD_INT 22
16308: PUSH
16309: LD_INT 26
16311: PUSH
16312: LD_INT 36
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 101
16329: PUSH
16330: LD_INT 102
16332: PUSH
16333: LD_INT 105
16335: PUSH
16336: LD_INT 106
16338: PUSH
16339: LD_INT 108
16341: PUSH
16342: LD_INT 116
16344: PUSH
16345: LD_INT 117
16347: PUSH
16348: LD_INT 118
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: ST_TO_ADDR
16365: GO 19252
16367: LD_INT 4
16369: DOUBLE
16370: EQUAL
16371: IFTRUE 16375
16373: GO 16471
16375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16376: LD_ADDR_VAR 0 2
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 4
16386: PUSH
16387: LD_INT 5
16389: PUSH
16390: LD_INT 8
16392: PUSH
16393: LD_INT 11
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: LD_INT 15
16401: PUSH
16402: LD_INT 16
16404: PUSH
16405: LD_INT 22
16407: PUSH
16408: LD_INT 23
16410: PUSH
16411: LD_INT 26
16413: PUSH
16414: LD_INT 36
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 101
16433: PUSH
16434: LD_INT 102
16436: PUSH
16437: LD_INT 105
16439: PUSH
16440: LD_INT 106
16442: PUSH
16443: LD_INT 108
16445: PUSH
16446: LD_INT 116
16448: PUSH
16449: LD_INT 117
16451: PUSH
16452: LD_INT 118
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: ST_TO_ADDR
16469: GO 19252
16471: LD_INT 5
16473: DOUBLE
16474: EQUAL
16475: IFTRUE 16479
16477: GO 16591
16479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 4
16490: PUSH
16491: LD_INT 5
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: LD_INT 8
16499: PUSH
16500: LD_INT 11
16502: PUSH
16503: LD_INT 12
16505: PUSH
16506: LD_INT 15
16508: PUSH
16509: LD_INT 16
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_INT 23
16517: PUSH
16518: LD_INT 25
16520: PUSH
16521: LD_INT 26
16523: PUSH
16524: LD_INT 36
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 101
16545: PUSH
16546: LD_INT 102
16548: PUSH
16549: LD_INT 105
16551: PUSH
16552: LD_INT 106
16554: PUSH
16555: LD_INT 108
16557: PUSH
16558: LD_INT 109
16560: PUSH
16561: LD_INT 112
16563: PUSH
16564: LD_INT 116
16566: PUSH
16567: LD_INT 117
16569: PUSH
16570: LD_INT 118
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: ST_TO_ADDR
16589: GO 19252
16591: LD_INT 6
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16731
16599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16600: LD_ADDR_VAR 0 2
16604: PUSH
16605: LD_INT 2
16607: PUSH
16608: LD_INT 4
16610: PUSH
16611: LD_INT 5
16613: PUSH
16614: LD_INT 6
16616: PUSH
16617: LD_INT 8
16619: PUSH
16620: LD_INT 11
16622: PUSH
16623: LD_INT 12
16625: PUSH
16626: LD_INT 15
16628: PUSH
16629: LD_INT 16
16631: PUSH
16632: LD_INT 20
16634: PUSH
16635: LD_INT 21
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_INT 23
16643: PUSH
16644: LD_INT 25
16646: PUSH
16647: LD_INT 26
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 31
16655: PUSH
16656: LD_INT 32
16658: PUSH
16659: LD_INT 36
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 101
16685: PUSH
16686: LD_INT 102
16688: PUSH
16689: LD_INT 105
16691: PUSH
16692: LD_INT 106
16694: PUSH
16695: LD_INT 108
16697: PUSH
16698: LD_INT 109
16700: PUSH
16701: LD_INT 112
16703: PUSH
16704: LD_INT 116
16706: PUSH
16707: LD_INT 117
16709: PUSH
16710: LD_INT 118
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: ST_TO_ADDR
16729: GO 19252
16731: LD_INT 7
16733: DOUBLE
16734: EQUAL
16735: IFTRUE 16739
16737: GO 16851
16739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16740: LD_ADDR_VAR 0 2
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 4
16750: PUSH
16751: LD_INT 5
16753: PUSH
16754: LD_INT 7
16756: PUSH
16757: LD_INT 11
16759: PUSH
16760: LD_INT 12
16762: PUSH
16763: LD_INT 15
16765: PUSH
16766: LD_INT 16
16768: PUSH
16769: LD_INT 20
16771: PUSH
16772: LD_INT 21
16774: PUSH
16775: LD_INT 22
16777: PUSH
16778: LD_INT 23
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 26
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 101
16805: PUSH
16806: LD_INT 102
16808: PUSH
16809: LD_INT 103
16811: PUSH
16812: LD_INT 105
16814: PUSH
16815: LD_INT 106
16817: PUSH
16818: LD_INT 108
16820: PUSH
16821: LD_INT 112
16823: PUSH
16824: LD_INT 116
16826: PUSH
16827: LD_INT 117
16829: PUSH
16830: LD_INT 118
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: ST_TO_ADDR
16849: GO 19252
16851: LD_INT 8
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16999
16859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: LD_INT 2
16867: PUSH
16868: LD_INT 4
16870: PUSH
16871: LD_INT 5
16873: PUSH
16874: LD_INT 6
16876: PUSH
16877: LD_INT 7
16879: PUSH
16880: LD_INT 8
16882: PUSH
16883: LD_INT 11
16885: PUSH
16886: LD_INT 12
16888: PUSH
16889: LD_INT 15
16891: PUSH
16892: LD_INT 16
16894: PUSH
16895: LD_INT 20
16897: PUSH
16898: LD_INT 21
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_INT 23
16906: PUSH
16907: LD_INT 25
16909: PUSH
16910: LD_INT 26
16912: PUSH
16913: LD_INT 30
16915: PUSH
16916: LD_INT 31
16918: PUSH
16919: LD_INT 32
16921: PUSH
16922: LD_INT 36
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 101
16949: PUSH
16950: LD_INT 102
16952: PUSH
16953: LD_INT 103
16955: PUSH
16956: LD_INT 105
16958: PUSH
16959: LD_INT 106
16961: PUSH
16962: LD_INT 108
16964: PUSH
16965: LD_INT 109
16967: PUSH
16968: LD_INT 112
16970: PUSH
16971: LD_INT 116
16973: PUSH
16974: LD_INT 117
16976: PUSH
16977: LD_INT 118
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: ST_TO_ADDR
16997: GO 19252
16999: LD_INT 9
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17155
17007: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17008: LD_ADDR_VAR 0 2
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 4
17018: PUSH
17019: LD_INT 5
17021: PUSH
17022: LD_INT 6
17024: PUSH
17025: LD_INT 7
17027: PUSH
17028: LD_INT 8
17030: PUSH
17031: LD_INT 11
17033: PUSH
17034: LD_INT 12
17036: PUSH
17037: LD_INT 15
17039: PUSH
17040: LD_INT 16
17042: PUSH
17043: LD_INT 20
17045: PUSH
17046: LD_INT 21
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_INT 23
17054: PUSH
17055: LD_INT 25
17057: PUSH
17058: LD_INT 26
17060: PUSH
17061: LD_INT 28
17063: PUSH
17064: LD_INT 30
17066: PUSH
17067: LD_INT 31
17069: PUSH
17070: LD_INT 32
17072: PUSH
17073: LD_INT 36
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 101
17101: PUSH
17102: LD_INT 102
17104: PUSH
17105: LD_INT 103
17107: PUSH
17108: LD_INT 105
17110: PUSH
17111: LD_INT 106
17113: PUSH
17114: LD_INT 108
17116: PUSH
17117: LD_INT 109
17119: PUSH
17120: LD_INT 112
17122: PUSH
17123: LD_INT 114
17125: PUSH
17126: LD_INT 116
17128: PUSH
17129: LD_INT 117
17131: PUSH
17132: LD_INT 118
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: ST_TO_ADDR
17153: GO 19252
17155: LD_INT 10
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17359
17163: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17164: LD_ADDR_VAR 0 2
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 4
17174: PUSH
17175: LD_INT 5
17177: PUSH
17178: LD_INT 6
17180: PUSH
17181: LD_INT 7
17183: PUSH
17184: LD_INT 8
17186: PUSH
17187: LD_INT 9
17189: PUSH
17190: LD_INT 10
17192: PUSH
17193: LD_INT 11
17195: PUSH
17196: LD_INT 12
17198: PUSH
17199: LD_INT 13
17201: PUSH
17202: LD_INT 14
17204: PUSH
17205: LD_INT 15
17207: PUSH
17208: LD_INT 16
17210: PUSH
17211: LD_INT 17
17213: PUSH
17214: LD_INT 18
17216: PUSH
17217: LD_INT 19
17219: PUSH
17220: LD_INT 20
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_INT 23
17231: PUSH
17232: LD_INT 24
17234: PUSH
17235: LD_INT 25
17237: PUSH
17238: LD_INT 26
17240: PUSH
17241: LD_INT 28
17243: PUSH
17244: LD_INT 30
17246: PUSH
17247: LD_INT 31
17249: PUSH
17250: LD_INT 32
17252: PUSH
17253: LD_INT 36
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 101
17289: PUSH
17290: LD_INT 102
17292: PUSH
17293: LD_INT 103
17295: PUSH
17296: LD_INT 104
17298: PUSH
17299: LD_INT 105
17301: PUSH
17302: LD_INT 106
17304: PUSH
17305: LD_INT 107
17307: PUSH
17308: LD_INT 108
17310: PUSH
17311: LD_INT 109
17313: PUSH
17314: LD_INT 110
17316: PUSH
17317: LD_INT 111
17319: PUSH
17320: LD_INT 112
17322: PUSH
17323: LD_INT 114
17325: PUSH
17326: LD_INT 116
17328: PUSH
17329: LD_INT 117
17331: PUSH
17332: LD_INT 118
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: ST_TO_ADDR
17357: GO 19252
17359: LD_INT 11
17361: DOUBLE
17362: EQUAL
17363: IFTRUE 17367
17365: GO 17571
17367: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: LD_INT 4
17381: PUSH
17382: LD_INT 5
17384: PUSH
17385: LD_INT 6
17387: PUSH
17388: LD_INT 7
17390: PUSH
17391: LD_INT 8
17393: PUSH
17394: LD_INT 9
17396: PUSH
17397: LD_INT 10
17399: PUSH
17400: LD_INT 11
17402: PUSH
17403: LD_INT 12
17405: PUSH
17406: LD_INT 13
17408: PUSH
17409: LD_INT 14
17411: PUSH
17412: LD_INT 15
17414: PUSH
17415: LD_INT 16
17417: PUSH
17418: LD_INT 17
17420: PUSH
17421: LD_INT 18
17423: PUSH
17424: LD_INT 19
17426: PUSH
17427: LD_INT 20
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 22
17435: PUSH
17436: LD_INT 23
17438: PUSH
17439: LD_INT 24
17441: PUSH
17442: LD_INT 25
17444: PUSH
17445: LD_INT 26
17447: PUSH
17448: LD_INT 28
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 31
17456: PUSH
17457: LD_INT 32
17459: PUSH
17460: LD_INT 34
17462: PUSH
17463: LD_INT 36
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 101
17501: PUSH
17502: LD_INT 102
17504: PUSH
17505: LD_INT 103
17507: PUSH
17508: LD_INT 104
17510: PUSH
17511: LD_INT 105
17513: PUSH
17514: LD_INT 106
17516: PUSH
17517: LD_INT 107
17519: PUSH
17520: LD_INT 108
17522: PUSH
17523: LD_INT 109
17525: PUSH
17526: LD_INT 110
17528: PUSH
17529: LD_INT 111
17531: PUSH
17532: LD_INT 112
17534: PUSH
17535: LD_INT 114
17537: PUSH
17538: LD_INT 116
17540: PUSH
17541: LD_INT 117
17543: PUSH
17544: LD_INT 118
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: ST_TO_ADDR
17569: GO 19252
17571: LD_INT 12
17573: DOUBLE
17574: EQUAL
17575: IFTRUE 17579
17577: GO 17799
17579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17580: LD_ADDR_VAR 0 2
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 3
17593: PUSH
17594: LD_INT 4
17596: PUSH
17597: LD_INT 5
17599: PUSH
17600: LD_INT 6
17602: PUSH
17603: LD_INT 7
17605: PUSH
17606: LD_INT 8
17608: PUSH
17609: LD_INT 9
17611: PUSH
17612: LD_INT 10
17614: PUSH
17615: LD_INT 11
17617: PUSH
17618: LD_INT 12
17620: PUSH
17621: LD_INT 13
17623: PUSH
17624: LD_INT 14
17626: PUSH
17627: LD_INT 15
17629: PUSH
17630: LD_INT 16
17632: PUSH
17633: LD_INT 17
17635: PUSH
17636: LD_INT 18
17638: PUSH
17639: LD_INT 19
17641: PUSH
17642: LD_INT 20
17644: PUSH
17645: LD_INT 21
17647: PUSH
17648: LD_INT 22
17650: PUSH
17651: LD_INT 23
17653: PUSH
17654: LD_INT 24
17656: PUSH
17657: LD_INT 25
17659: PUSH
17660: LD_INT 26
17662: PUSH
17663: LD_INT 27
17665: PUSH
17666: LD_INT 28
17668: PUSH
17669: LD_INT 30
17671: PUSH
17672: LD_INT 31
17674: PUSH
17675: LD_INT 32
17677: PUSH
17678: LD_INT 33
17680: PUSH
17681: LD_INT 34
17683: PUSH
17684: LD_INT 36
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 101
17725: PUSH
17726: LD_INT 102
17728: PUSH
17729: LD_INT 103
17731: PUSH
17732: LD_INT 104
17734: PUSH
17735: LD_INT 105
17737: PUSH
17738: LD_INT 106
17740: PUSH
17741: LD_INT 107
17743: PUSH
17744: LD_INT 108
17746: PUSH
17747: LD_INT 109
17749: PUSH
17750: LD_INT 110
17752: PUSH
17753: LD_INT 111
17755: PUSH
17756: LD_INT 112
17758: PUSH
17759: LD_INT 113
17761: PUSH
17762: LD_INT 114
17764: PUSH
17765: LD_INT 116
17767: PUSH
17768: LD_INT 117
17770: PUSH
17771: LD_INT 118
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: ST_TO_ADDR
17797: GO 19252
17799: LD_INT 13
17801: DOUBLE
17802: EQUAL
17803: IFTRUE 17807
17805: GO 18015
17807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: LD_INT 4
17824: PUSH
17825: LD_INT 5
17827: PUSH
17828: LD_INT 8
17830: PUSH
17831: LD_INT 9
17833: PUSH
17834: LD_INT 10
17836: PUSH
17837: LD_INT 11
17839: PUSH
17840: LD_INT 12
17842: PUSH
17843: LD_INT 14
17845: PUSH
17846: LD_INT 15
17848: PUSH
17849: LD_INT 16
17851: PUSH
17852: LD_INT 17
17854: PUSH
17855: LD_INT 18
17857: PUSH
17858: LD_INT 19
17860: PUSH
17861: LD_INT 20
17863: PUSH
17864: LD_INT 21
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 23
17872: PUSH
17873: LD_INT 24
17875: PUSH
17876: LD_INT 25
17878: PUSH
17879: LD_INT 26
17881: PUSH
17882: LD_INT 27
17884: PUSH
17885: LD_INT 28
17887: PUSH
17888: LD_INT 30
17890: PUSH
17891: LD_INT 31
17893: PUSH
17894: LD_INT 32
17896: PUSH
17897: LD_INT 33
17899: PUSH
17900: LD_INT 34
17902: PUSH
17903: LD_INT 36
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 101
17941: PUSH
17942: LD_INT 102
17944: PUSH
17945: LD_INT 103
17947: PUSH
17948: LD_INT 104
17950: PUSH
17951: LD_INT 105
17953: PUSH
17954: LD_INT 106
17956: PUSH
17957: LD_INT 107
17959: PUSH
17960: LD_INT 108
17962: PUSH
17963: LD_INT 109
17965: PUSH
17966: LD_INT 110
17968: PUSH
17969: LD_INT 111
17971: PUSH
17972: LD_INT 112
17974: PUSH
17975: LD_INT 113
17977: PUSH
17978: LD_INT 114
17980: PUSH
17981: LD_INT 116
17983: PUSH
17984: LD_INT 117
17986: PUSH
17987: LD_INT 118
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: ST_TO_ADDR
18013: GO 19252
18015: LD_INT 14
18017: DOUBLE
18018: EQUAL
18019: IFTRUE 18023
18021: GO 18247
18023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: LD_INT 1
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: LD_INT 3
18037: PUSH
18038: LD_INT 4
18040: PUSH
18041: LD_INT 5
18043: PUSH
18044: LD_INT 6
18046: PUSH
18047: LD_INT 7
18049: PUSH
18050: LD_INT 8
18052: PUSH
18053: LD_INT 9
18055: PUSH
18056: LD_INT 10
18058: PUSH
18059: LD_INT 11
18061: PUSH
18062: LD_INT 12
18064: PUSH
18065: LD_INT 13
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: LD_INT 15
18073: PUSH
18074: LD_INT 16
18076: PUSH
18077: LD_INT 17
18079: PUSH
18080: LD_INT 18
18082: PUSH
18083: LD_INT 19
18085: PUSH
18086: LD_INT 20
18088: PUSH
18089: LD_INT 21
18091: PUSH
18092: LD_INT 22
18094: PUSH
18095: LD_INT 23
18097: PUSH
18098: LD_INT 24
18100: PUSH
18101: LD_INT 25
18103: PUSH
18104: LD_INT 26
18106: PUSH
18107: LD_INT 27
18109: PUSH
18110: LD_INT 28
18112: PUSH
18113: LD_INT 29
18115: PUSH
18116: LD_INT 30
18118: PUSH
18119: LD_INT 31
18121: PUSH
18122: LD_INT 32
18124: PUSH
18125: LD_INT 33
18127: PUSH
18128: LD_INT 34
18130: PUSH
18131: LD_INT 36
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 101
18173: PUSH
18174: LD_INT 102
18176: PUSH
18177: LD_INT 103
18179: PUSH
18180: LD_INT 104
18182: PUSH
18183: LD_INT 105
18185: PUSH
18186: LD_INT 106
18188: PUSH
18189: LD_INT 107
18191: PUSH
18192: LD_INT 108
18194: PUSH
18195: LD_INT 109
18197: PUSH
18198: LD_INT 110
18200: PUSH
18201: LD_INT 111
18203: PUSH
18204: LD_INT 112
18206: PUSH
18207: LD_INT 113
18209: PUSH
18210: LD_INT 114
18212: PUSH
18213: LD_INT 116
18215: PUSH
18216: LD_INT 117
18218: PUSH
18219: LD_INT 118
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: ST_TO_ADDR
18245: GO 19252
18247: LD_INT 15
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18479
18255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: LD_INT 4
18272: PUSH
18273: LD_INT 5
18275: PUSH
18276: LD_INT 6
18278: PUSH
18279: LD_INT 7
18281: PUSH
18282: LD_INT 8
18284: PUSH
18285: LD_INT 9
18287: PUSH
18288: LD_INT 10
18290: PUSH
18291: LD_INT 11
18293: PUSH
18294: LD_INT 12
18296: PUSH
18297: LD_INT 13
18299: PUSH
18300: LD_INT 14
18302: PUSH
18303: LD_INT 15
18305: PUSH
18306: LD_INT 16
18308: PUSH
18309: LD_INT 17
18311: PUSH
18312: LD_INT 18
18314: PUSH
18315: LD_INT 19
18317: PUSH
18318: LD_INT 20
18320: PUSH
18321: LD_INT 21
18323: PUSH
18324: LD_INT 22
18326: PUSH
18327: LD_INT 23
18329: PUSH
18330: LD_INT 24
18332: PUSH
18333: LD_INT 25
18335: PUSH
18336: LD_INT 26
18338: PUSH
18339: LD_INT 27
18341: PUSH
18342: LD_INT 28
18344: PUSH
18345: LD_INT 29
18347: PUSH
18348: LD_INT 30
18350: PUSH
18351: LD_INT 31
18353: PUSH
18354: LD_INT 32
18356: PUSH
18357: LD_INT 33
18359: PUSH
18360: LD_INT 34
18362: PUSH
18363: LD_INT 36
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 101
18405: PUSH
18406: LD_INT 102
18408: PUSH
18409: LD_INT 103
18411: PUSH
18412: LD_INT 104
18414: PUSH
18415: LD_INT 105
18417: PUSH
18418: LD_INT 106
18420: PUSH
18421: LD_INT 107
18423: PUSH
18424: LD_INT 108
18426: PUSH
18427: LD_INT 109
18429: PUSH
18430: LD_INT 110
18432: PUSH
18433: LD_INT 111
18435: PUSH
18436: LD_INT 112
18438: PUSH
18439: LD_INT 113
18441: PUSH
18442: LD_INT 114
18444: PUSH
18445: LD_INT 116
18447: PUSH
18448: LD_INT 117
18450: PUSH
18451: LD_INT 118
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: ST_TO_ADDR
18477: GO 19252
18479: LD_INT 16
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18623
18487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 4
18498: PUSH
18499: LD_INT 5
18501: PUSH
18502: LD_INT 7
18504: PUSH
18505: LD_INT 11
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 15
18513: PUSH
18514: LD_INT 16
18516: PUSH
18517: LD_INT 20
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_INT 23
18528: PUSH
18529: LD_INT 25
18531: PUSH
18532: LD_INT 26
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 31
18540: PUSH
18541: LD_INT 32
18543: PUSH
18544: LD_INT 33
18546: PUSH
18547: LD_INT 34
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 101
18573: PUSH
18574: LD_INT 102
18576: PUSH
18577: LD_INT 103
18579: PUSH
18580: LD_INT 106
18582: PUSH
18583: LD_INT 108
18585: PUSH
18586: LD_INT 112
18588: PUSH
18589: LD_INT 113
18591: PUSH
18592: LD_INT 114
18594: PUSH
18595: LD_INT 116
18597: PUSH
18598: LD_INT 117
18600: PUSH
18601: LD_INT 118
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: ST_TO_ADDR
18621: GO 19252
18623: LD_INT 17
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18855
18631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: LD_INT 4
18648: PUSH
18649: LD_INT 5
18651: PUSH
18652: LD_INT 6
18654: PUSH
18655: LD_INT 7
18657: PUSH
18658: LD_INT 8
18660: PUSH
18661: LD_INT 9
18663: PUSH
18664: LD_INT 10
18666: PUSH
18667: LD_INT 11
18669: PUSH
18670: LD_INT 12
18672: PUSH
18673: LD_INT 13
18675: PUSH
18676: LD_INT 14
18678: PUSH
18679: LD_INT 15
18681: PUSH
18682: LD_INT 16
18684: PUSH
18685: LD_INT 17
18687: PUSH
18688: LD_INT 18
18690: PUSH
18691: LD_INT 19
18693: PUSH
18694: LD_INT 20
18696: PUSH
18697: LD_INT 21
18699: PUSH
18700: LD_INT 22
18702: PUSH
18703: LD_INT 23
18705: PUSH
18706: LD_INT 24
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 26
18714: PUSH
18715: LD_INT 27
18717: PUSH
18718: LD_INT 28
18720: PUSH
18721: LD_INT 29
18723: PUSH
18724: LD_INT 30
18726: PUSH
18727: LD_INT 31
18729: PUSH
18730: LD_INT 32
18732: PUSH
18733: LD_INT 33
18735: PUSH
18736: LD_INT 34
18738: PUSH
18739: LD_INT 36
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 101
18781: PUSH
18782: LD_INT 102
18784: PUSH
18785: LD_INT 103
18787: PUSH
18788: LD_INT 104
18790: PUSH
18791: LD_INT 105
18793: PUSH
18794: LD_INT 106
18796: PUSH
18797: LD_INT 107
18799: PUSH
18800: LD_INT 108
18802: PUSH
18803: LD_INT 109
18805: PUSH
18806: LD_INT 110
18808: PUSH
18809: LD_INT 111
18811: PUSH
18812: LD_INT 112
18814: PUSH
18815: LD_INT 113
18817: PUSH
18818: LD_INT 114
18820: PUSH
18821: LD_INT 116
18823: PUSH
18824: LD_INT 117
18826: PUSH
18827: LD_INT 118
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: ST_TO_ADDR
18853: GO 19252
18855: LD_INT 18
18857: DOUBLE
18858: EQUAL
18859: IFTRUE 18863
18861: GO 19011
18863: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18864: LD_ADDR_VAR 0 2
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 4
18874: PUSH
18875: LD_INT 5
18877: PUSH
18878: LD_INT 7
18880: PUSH
18881: LD_INT 11
18883: PUSH
18884: LD_INT 12
18886: PUSH
18887: LD_INT 15
18889: PUSH
18890: LD_INT 16
18892: PUSH
18893: LD_INT 20
18895: PUSH
18896: LD_INT 21
18898: PUSH
18899: LD_INT 22
18901: PUSH
18902: LD_INT 23
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 26
18910: PUSH
18911: LD_INT 30
18913: PUSH
18914: LD_INT 31
18916: PUSH
18917: LD_INT 32
18919: PUSH
18920: LD_INT 33
18922: PUSH
18923: LD_INT 34
18925: PUSH
18926: LD_INT 35
18928: PUSH
18929: LD_INT 36
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 101
18957: PUSH
18958: LD_INT 102
18960: PUSH
18961: LD_INT 103
18963: PUSH
18964: LD_INT 106
18966: PUSH
18967: LD_INT 108
18969: PUSH
18970: LD_INT 112
18972: PUSH
18973: LD_INT 113
18975: PUSH
18976: LD_INT 114
18978: PUSH
18979: LD_INT 115
18981: PUSH
18982: LD_INT 116
18984: PUSH
18985: LD_INT 117
18987: PUSH
18988: LD_INT 118
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: ST_TO_ADDR
19009: GO 19252
19011: LD_INT 19
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19251
19019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: LD_INT 4
19036: PUSH
19037: LD_INT 5
19039: PUSH
19040: LD_INT 6
19042: PUSH
19043: LD_INT 7
19045: PUSH
19046: LD_INT 8
19048: PUSH
19049: LD_INT 9
19051: PUSH
19052: LD_INT 10
19054: PUSH
19055: LD_INT 11
19057: PUSH
19058: LD_INT 12
19060: PUSH
19061: LD_INT 13
19063: PUSH
19064: LD_INT 14
19066: PUSH
19067: LD_INT 15
19069: PUSH
19070: LD_INT 16
19072: PUSH
19073: LD_INT 17
19075: PUSH
19076: LD_INT 18
19078: PUSH
19079: LD_INT 19
19081: PUSH
19082: LD_INT 20
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 22
19090: PUSH
19091: LD_INT 23
19093: PUSH
19094: LD_INT 24
19096: PUSH
19097: LD_INT 25
19099: PUSH
19100: LD_INT 26
19102: PUSH
19103: LD_INT 27
19105: PUSH
19106: LD_INT 28
19108: PUSH
19109: LD_INT 29
19111: PUSH
19112: LD_INT 30
19114: PUSH
19115: LD_INT 31
19117: PUSH
19118: LD_INT 32
19120: PUSH
19121: LD_INT 33
19123: PUSH
19124: LD_INT 34
19126: PUSH
19127: LD_INT 35
19129: PUSH
19130: LD_INT 36
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 101
19173: PUSH
19174: LD_INT 102
19176: PUSH
19177: LD_INT 103
19179: PUSH
19180: LD_INT 104
19182: PUSH
19183: LD_INT 105
19185: PUSH
19186: LD_INT 106
19188: PUSH
19189: LD_INT 107
19191: PUSH
19192: LD_INT 108
19194: PUSH
19195: LD_INT 109
19197: PUSH
19198: LD_INT 110
19200: PUSH
19201: LD_INT 111
19203: PUSH
19204: LD_INT 112
19206: PUSH
19207: LD_INT 113
19209: PUSH
19210: LD_INT 114
19212: PUSH
19213: LD_INT 115
19215: PUSH
19216: LD_INT 116
19218: PUSH
19219: LD_INT 117
19221: PUSH
19222: LD_INT 118
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: ST_TO_ADDR
19249: GO 19252
19251: POP
// end else
19252: GO 19483
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19254: LD_ADDR_VAR 0 2
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 3
19267: PUSH
19268: LD_INT 4
19270: PUSH
19271: LD_INT 5
19273: PUSH
19274: LD_INT 6
19276: PUSH
19277: LD_INT 7
19279: PUSH
19280: LD_INT 8
19282: PUSH
19283: LD_INT 9
19285: PUSH
19286: LD_INT 10
19288: PUSH
19289: LD_INT 11
19291: PUSH
19292: LD_INT 12
19294: PUSH
19295: LD_INT 13
19297: PUSH
19298: LD_INT 14
19300: PUSH
19301: LD_INT 15
19303: PUSH
19304: LD_INT 16
19306: PUSH
19307: LD_INT 17
19309: PUSH
19310: LD_INT 18
19312: PUSH
19313: LD_INT 19
19315: PUSH
19316: LD_INT 20
19318: PUSH
19319: LD_INT 21
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 23
19327: PUSH
19328: LD_INT 24
19330: PUSH
19331: LD_INT 25
19333: PUSH
19334: LD_INT 26
19336: PUSH
19337: LD_INT 27
19339: PUSH
19340: LD_INT 28
19342: PUSH
19343: LD_INT 29
19345: PUSH
19346: LD_INT 30
19348: PUSH
19349: LD_INT 31
19351: PUSH
19352: LD_INT 32
19354: PUSH
19355: LD_INT 33
19357: PUSH
19358: LD_INT 34
19360: PUSH
19361: LD_INT 35
19363: PUSH
19364: LD_INT 36
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 101
19407: PUSH
19408: LD_INT 102
19410: PUSH
19411: LD_INT 103
19413: PUSH
19414: LD_INT 104
19416: PUSH
19417: LD_INT 105
19419: PUSH
19420: LD_INT 106
19422: PUSH
19423: LD_INT 107
19425: PUSH
19426: LD_INT 108
19428: PUSH
19429: LD_INT 109
19431: PUSH
19432: LD_INT 110
19434: PUSH
19435: LD_INT 111
19437: PUSH
19438: LD_INT 112
19440: PUSH
19441: LD_INT 113
19443: PUSH
19444: LD_INT 114
19446: PUSH
19447: LD_INT 115
19449: PUSH
19450: LD_INT 116
19452: PUSH
19453: LD_INT 117
19455: PUSH
19456: LD_INT 118
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: ST_TO_ADDR
// if result then
19483: LD_VAR 0 2
19487: IFFALSE 20273
// begin normal :=  ;
19489: LD_ADDR_VAR 0 5
19493: PUSH
19494: LD_STRING 
19496: ST_TO_ADDR
// hardcore :=  ;
19497: LD_ADDR_VAR 0 6
19501: PUSH
19502: LD_STRING 
19504: ST_TO_ADDR
// active :=  ;
19505: LD_ADDR_VAR 0 7
19509: PUSH
19510: LD_STRING 
19512: ST_TO_ADDR
// for i = 1 to normalCounter do
19513: LD_ADDR_VAR 0 8
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_EXP 48
19527: PUSH
19528: FOR_TO
19529: IFFALSE 19630
// begin tmp := 0 ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_STRING 0
19538: ST_TO_ADDR
// if result [ 1 ] then
19539: LD_VAR 0 2
19543: PUSH
19544: LD_INT 1
19546: ARRAY
19547: IFFALSE 19612
// if result [ 1 ] [ 1 ] = i then
19549: LD_VAR 0 2
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PUSH
19558: LD_INT 1
19560: ARRAY
19561: PUSH
19562: LD_VAR 0 8
19566: EQUAL
19567: IFFALSE 19612
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: LD_VAR 0 2
19578: PPUSH
19579: LD_INT 1
19581: PPUSH
19582: LD_VAR 0 2
19586: PUSH
19587: LD_INT 1
19589: ARRAY
19590: PPUSH
19591: LD_INT 1
19593: PPUSH
19594: CALL_OW 3
19598: PPUSH
19599: CALL_OW 1
19603: ST_TO_ADDR
// tmp := 1 ;
19604: LD_ADDR_VAR 0 3
19608: PUSH
19609: LD_STRING 1
19611: ST_TO_ADDR
// end ; normal := normal & tmp ;
19612: LD_ADDR_VAR 0 5
19616: PUSH
19617: LD_VAR 0 5
19621: PUSH
19622: LD_VAR 0 3
19626: STR
19627: ST_TO_ADDR
// end ;
19628: GO 19528
19630: POP
19631: POP
// for i = 1 to hardcoreCounter do
19632: LD_ADDR_VAR 0 8
19636: PUSH
19637: DOUBLE
19638: LD_INT 1
19640: DEC
19641: ST_TO_ADDR
19642: LD_EXP 49
19646: PUSH
19647: FOR_TO
19648: IFFALSE 19753
// begin tmp := 0 ;
19650: LD_ADDR_VAR 0 3
19654: PUSH
19655: LD_STRING 0
19657: ST_TO_ADDR
// if result [ 2 ] then
19658: LD_VAR 0 2
19662: PUSH
19663: LD_INT 2
19665: ARRAY
19666: IFFALSE 19735
// if result [ 2 ] [ 1 ] = 100 + i then
19668: LD_VAR 0 2
19672: PUSH
19673: LD_INT 2
19675: ARRAY
19676: PUSH
19677: LD_INT 1
19679: ARRAY
19680: PUSH
19681: LD_INT 100
19683: PUSH
19684: LD_VAR 0 8
19688: PLUS
19689: EQUAL
19690: IFFALSE 19735
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_VAR 0 2
19701: PPUSH
19702: LD_INT 2
19704: PPUSH
19705: LD_VAR 0 2
19709: PUSH
19710: LD_INT 2
19712: ARRAY
19713: PPUSH
19714: LD_INT 1
19716: PPUSH
19717: CALL_OW 3
19721: PPUSH
19722: CALL_OW 1
19726: ST_TO_ADDR
// tmp := 1 ;
19727: LD_ADDR_VAR 0 3
19731: PUSH
19732: LD_STRING 1
19734: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19735: LD_ADDR_VAR 0 6
19739: PUSH
19740: LD_VAR 0 6
19744: PUSH
19745: LD_VAR 0 3
19749: STR
19750: ST_TO_ADDR
// end ;
19751: GO 19647
19753: POP
19754: POP
// if isGameLoad then
19755: LD_VAR 0 1
19759: IFFALSE 20234
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19761: LD_ADDR_VAR 0 4
19765: PUSH
19766: LD_EXP 52
19770: PUSH
19771: LD_EXP 51
19775: PUSH
19776: LD_EXP 53
19780: PUSH
19781: LD_EXP 50
19785: PUSH
19786: LD_EXP 54
19790: PUSH
19791: LD_EXP 55
19795: PUSH
19796: LD_EXP 56
19800: PUSH
19801: LD_EXP 57
19805: PUSH
19806: LD_EXP 58
19810: PUSH
19811: LD_EXP 59
19815: PUSH
19816: LD_EXP 60
19820: PUSH
19821: LD_EXP 61
19825: PUSH
19826: LD_EXP 62
19830: PUSH
19831: LD_EXP 63
19835: PUSH
19836: LD_EXP 71
19840: PUSH
19841: LD_EXP 72
19845: PUSH
19846: LD_EXP 73
19850: PUSH
19851: LD_EXP 74
19855: PUSH
19856: LD_EXP 76
19860: PUSH
19861: LD_EXP 77
19865: PUSH
19866: LD_EXP 78
19870: PUSH
19871: LD_EXP 81
19875: PUSH
19876: LD_EXP 83
19880: PUSH
19881: LD_EXP 84
19885: PUSH
19886: LD_EXP 85
19890: PUSH
19891: LD_EXP 87
19895: PUSH
19896: LD_EXP 88
19900: PUSH
19901: LD_EXP 91
19905: PUSH
19906: LD_EXP 92
19910: PUSH
19911: LD_EXP 93
19915: PUSH
19916: LD_EXP 94
19920: PUSH
19921: LD_EXP 95
19925: PUSH
19926: LD_EXP 96
19930: PUSH
19931: LD_EXP 97
19935: PUSH
19936: LD_EXP 98
19940: PUSH
19941: LD_EXP 99
19945: PUSH
19946: LD_EXP 64
19950: PUSH
19951: LD_EXP 65
19955: PUSH
19956: LD_EXP 68
19960: PUSH
19961: LD_EXP 69
19965: PUSH
19966: LD_EXP 70
19970: PUSH
19971: LD_EXP 66
19975: PUSH
19976: LD_EXP 67
19980: PUSH
19981: LD_EXP 75
19985: PUSH
19986: LD_EXP 79
19990: PUSH
19991: LD_EXP 80
19995: PUSH
19996: LD_EXP 82
20000: PUSH
20001: LD_EXP 86
20005: PUSH
20006: LD_EXP 89
20010: PUSH
20011: LD_EXP 90
20015: PUSH
20016: LD_EXP 100
20020: PUSH
20021: LD_EXP 101
20025: PUSH
20026: LD_EXP 102
20030: PUSH
20031: LD_EXP 103
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: ST_TO_ADDR
// tmp :=  ;
20092: LD_ADDR_VAR 0 3
20096: PUSH
20097: LD_STRING 
20099: ST_TO_ADDR
// for i = 1 to normalCounter do
20100: LD_ADDR_VAR 0 8
20104: PUSH
20105: DOUBLE
20106: LD_INT 1
20108: DEC
20109: ST_TO_ADDR
20110: LD_EXP 48
20114: PUSH
20115: FOR_TO
20116: IFFALSE 20152
// begin if flags [ i ] then
20118: LD_VAR 0 4
20122: PUSH
20123: LD_VAR 0 8
20127: ARRAY
20128: IFFALSE 20150
// tmp := tmp & i & ; ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_VAR 0 3
20139: PUSH
20140: LD_VAR 0 8
20144: STR
20145: PUSH
20146: LD_STRING ;
20148: STR
20149: ST_TO_ADDR
// end ;
20150: GO 20115
20152: POP
20153: POP
// for i = 1 to hardcoreCounter do
20154: LD_ADDR_VAR 0 8
20158: PUSH
20159: DOUBLE
20160: LD_INT 1
20162: DEC
20163: ST_TO_ADDR
20164: LD_EXP 49
20168: PUSH
20169: FOR_TO
20170: IFFALSE 20216
// begin if flags [ normalCounter + i ] then
20172: LD_VAR 0 4
20176: PUSH
20177: LD_EXP 48
20181: PUSH
20182: LD_VAR 0 8
20186: PLUS
20187: ARRAY
20188: IFFALSE 20214
// tmp := tmp & ( 100 + i ) & ; ;
20190: LD_ADDR_VAR 0 3
20194: PUSH
20195: LD_VAR 0 3
20199: PUSH
20200: LD_INT 100
20202: PUSH
20203: LD_VAR 0 8
20207: PLUS
20208: STR
20209: PUSH
20210: LD_STRING ;
20212: STR
20213: ST_TO_ADDR
// end ;
20214: GO 20169
20216: POP
20217: POP
// if tmp then
20218: LD_VAR 0 3
20222: IFFALSE 20234
// active := tmp ;
20224: LD_ADDR_VAR 0 7
20228: PUSH
20229: LD_VAR 0 3
20233: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20234: LD_STRING getStreamItemsFromMission("
20236: PUSH
20237: LD_VAR 0 5
20241: STR
20242: PUSH
20243: LD_STRING ","
20245: STR
20246: PUSH
20247: LD_VAR 0 6
20251: STR
20252: PUSH
20253: LD_STRING ","
20255: STR
20256: PUSH
20257: LD_VAR 0 7
20261: STR
20262: PUSH
20263: LD_STRING ")
20265: STR
20266: PPUSH
20267: CALL_OW 559
// end else
20271: GO 20280
// ToLua ( getStreamItemsFromMission("","","") ) ;
20273: LD_STRING getStreamItemsFromMission("","","")
20275: PPUSH
20276: CALL_OW 559
// end ;
20280: LD_VAR 0 2
20284: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20285: LD_EXP 47
20289: PUSH
20290: LD_EXP 52
20294: AND
20295: IFFALSE 20419
20297: GO 20299
20299: DISABLE
20300: LD_INT 0
20302: PPUSH
20303: PPUSH
// begin enable ;
20304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20305: LD_ADDR_VAR 0 2
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_OWVAR 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 34
20327: PUSH
20328: LD_INT 7
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 34
20337: PUSH
20338: LD_INT 45
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 34
20347: PUSH
20348: LD_INT 28
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 34
20357: PUSH
20358: LD_INT 47
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// if not tmp then
20381: LD_VAR 0 2
20385: NOT
20386: IFFALSE 20390
// exit ;
20388: GO 20419
// for i in tmp do
20390: LD_ADDR_VAR 0 1
20394: PUSH
20395: LD_VAR 0 2
20399: PUSH
20400: FOR_IN
20401: IFFALSE 20417
// begin SetLives ( i , 0 ) ;
20403: LD_VAR 0 1
20407: PPUSH
20408: LD_INT 0
20410: PPUSH
20411: CALL_OW 234
// end ;
20415: GO 20400
20417: POP
20418: POP
// end ;
20419: PPOPN 2
20421: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20422: LD_EXP 47
20426: PUSH
20427: LD_EXP 53
20431: AND
20432: IFFALSE 20516
20434: GO 20436
20436: DISABLE
20437: LD_INT 0
20439: PPUSH
20440: PPUSH
// begin enable ;
20441: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: LD_INT 22
20449: PUSH
20450: LD_OWVAR 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 32
20461: PUSH
20462: LD_INT 3
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PPUSH
20473: CALL_OW 69
20477: ST_TO_ADDR
// if not tmp then
20478: LD_VAR 0 2
20482: NOT
20483: IFFALSE 20487
// exit ;
20485: GO 20516
// for i in tmp do
20487: LD_ADDR_VAR 0 1
20491: PUSH
20492: LD_VAR 0 2
20496: PUSH
20497: FOR_IN
20498: IFFALSE 20514
// begin SetLives ( i , 0 ) ;
20500: LD_VAR 0 1
20504: PPUSH
20505: LD_INT 0
20507: PPUSH
20508: CALL_OW 234
// end ;
20512: GO 20497
20514: POP
20515: POP
// end ;
20516: PPOPN 2
20518: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20519: LD_EXP 47
20523: PUSH
20524: LD_EXP 50
20528: AND
20529: IFFALSE 20622
20531: GO 20533
20533: DISABLE
20534: LD_INT 0
20536: PPUSH
// begin enable ;
20537: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20538: LD_ADDR_VAR 0 1
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 5
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 25
20570: PUSH
20571: LD_INT 9
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 25
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PPUSH
20598: CALL_OW 69
20602: PUSH
20603: FOR_IN
20604: IFFALSE 20620
// begin SetClass ( i , 1 ) ;
20606: LD_VAR 0 1
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: CALL_OW 336
// end ;
20618: GO 20603
20620: POP
20621: POP
// end ;
20622: PPOPN 1
20624: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20625: LD_EXP 47
20629: PUSH
20630: LD_EXP 51
20634: AND
20635: PUSH
20636: LD_OWVAR 65
20640: PUSH
20641: LD_INT 7
20643: LESS
20644: AND
20645: IFFALSE 20659
20647: GO 20649
20649: DISABLE
// begin enable ;
20650: ENABLE
// game_speed := 7 ;
20651: LD_ADDR_OWVAR 65
20655: PUSH
20656: LD_INT 7
20658: ST_TO_ADDR
// end ;
20659: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20660: LD_EXP 47
20664: PUSH
20665: LD_EXP 54
20669: AND
20670: IFFALSE 20872
20672: GO 20674
20674: DISABLE
20675: LD_INT 0
20677: PPUSH
20678: PPUSH
20679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20680: LD_ADDR_VAR 0 3
20684: PUSH
20685: LD_INT 81
20687: PUSH
20688: LD_OWVAR 2
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 21
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PPUSH
20711: CALL_OW 69
20715: ST_TO_ADDR
// if not tmp then
20716: LD_VAR 0 3
20720: NOT
20721: IFFALSE 20725
// exit ;
20723: GO 20872
// if tmp > 5 then
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 5
20732: GREATER
20733: IFFALSE 20745
// k := 5 else
20735: LD_ADDR_VAR 0 2
20739: PUSH
20740: LD_INT 5
20742: ST_TO_ADDR
20743: GO 20755
// k := tmp ;
20745: LD_ADDR_VAR 0 2
20749: PUSH
20750: LD_VAR 0 3
20754: ST_TO_ADDR
// for i := 1 to k do
20755: LD_ADDR_VAR 0 1
20759: PUSH
20760: DOUBLE
20761: LD_INT 1
20763: DEC
20764: ST_TO_ADDR
20765: LD_VAR 0 2
20769: PUSH
20770: FOR_TO
20771: IFFALSE 20870
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_VAR 0 1
20782: ARRAY
20783: PPUSH
20784: LD_VAR 0 1
20788: PUSH
20789: LD_INT 4
20791: MOD
20792: PUSH
20793: LD_INT 1
20795: PLUS
20796: PPUSH
20797: CALL_OW 259
20801: PUSH
20802: LD_INT 10
20804: LESS
20805: IFFALSE 20868
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20807: LD_VAR 0 3
20811: PUSH
20812: LD_VAR 0 1
20816: ARRAY
20817: PPUSH
20818: LD_VAR 0 1
20822: PUSH
20823: LD_INT 4
20825: MOD
20826: PUSH
20827: LD_INT 1
20829: PLUS
20830: PPUSH
20831: LD_VAR 0 3
20835: PUSH
20836: LD_VAR 0 1
20840: ARRAY
20841: PPUSH
20842: LD_VAR 0 1
20846: PUSH
20847: LD_INT 4
20849: MOD
20850: PUSH
20851: LD_INT 1
20853: PLUS
20854: PPUSH
20855: CALL_OW 259
20859: PUSH
20860: LD_INT 1
20862: PLUS
20863: PPUSH
20864: CALL_OW 237
20868: GO 20770
20870: POP
20871: POP
// end ;
20872: PPOPN 3
20874: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20875: LD_EXP 47
20879: PUSH
20880: LD_EXP 55
20884: AND
20885: IFFALSE 20905
20887: GO 20889
20889: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20890: LD_INT 4
20892: PPUSH
20893: LD_OWVAR 2
20897: PPUSH
20898: LD_INT 0
20900: PPUSH
20901: CALL_OW 324
20905: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20906: LD_EXP 47
20910: PUSH
20911: LD_EXP 84
20915: AND
20916: IFFALSE 20936
20918: GO 20920
20920: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20921: LD_INT 19
20923: PPUSH
20924: LD_OWVAR 2
20928: PPUSH
20929: LD_INT 0
20931: PPUSH
20932: CALL_OW 324
20936: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20937: LD_EXP 47
20941: PUSH
20942: LD_EXP 56
20946: AND
20947: IFFALSE 21049
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
// begin enable ;
20956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 2
20976: PUSH
20977: LD_INT 34
20979: PUSH
20980: LD_INT 11
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 34
20989: PUSH
20990: LD_INT 30
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: ST_TO_ADDR
// if not tmp then
21011: LD_VAR 0 2
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21049
// for i in tmp do
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: LD_VAR 0 2
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21047
// begin SetLives ( i , 0 ) ;
21033: LD_VAR 0 1
21037: PPUSH
21038: LD_INT 0
21040: PPUSH
21041: CALL_OW 234
// end ;
21045: GO 21030
21047: POP
21048: POP
// end ;
21049: PPOPN 2
21051: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21052: LD_EXP 47
21056: PUSH
21057: LD_EXP 57
21061: AND
21062: IFFALSE 21082
21064: GO 21066
21066: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21067: LD_INT 32
21069: PPUSH
21070: LD_OWVAR 2
21074: PPUSH
21075: LD_INT 0
21077: PPUSH
21078: CALL_OW 324
21082: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21083: LD_EXP 47
21087: PUSH
21088: LD_EXP 58
21092: AND
21093: IFFALSE 21274
21095: GO 21097
21097: DISABLE
21098: LD_INT 0
21100: PPUSH
21101: PPUSH
21102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21103: LD_ADDR_VAR 0 2
21107: PUSH
21108: LD_INT 22
21110: PUSH
21111: LD_OWVAR 2
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 33
21122: PUSH
21123: LD_INT 3
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PPUSH
21134: CALL_OW 69
21138: ST_TO_ADDR
// if not tmp then
21139: LD_VAR 0 2
21143: NOT
21144: IFFALSE 21148
// exit ;
21146: GO 21274
// side := 0 ;
21148: LD_ADDR_VAR 0 3
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// for i := 1 to 8 do
21156: LD_ADDR_VAR 0 1
21160: PUSH
21161: DOUBLE
21162: LD_INT 1
21164: DEC
21165: ST_TO_ADDR
21166: LD_INT 8
21168: PUSH
21169: FOR_TO
21170: IFFALSE 21218
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21172: LD_OWVAR 2
21176: PUSH
21177: LD_VAR 0 1
21181: NONEQUAL
21182: PUSH
21183: LD_OWVAR 2
21187: PPUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 81
21197: PUSH
21198: LD_INT 2
21200: EQUAL
21201: AND
21202: IFFALSE 21216
// begin side := i ;
21204: LD_ADDR_VAR 0 3
21208: PUSH
21209: LD_VAR 0 1
21213: ST_TO_ADDR
// break ;
21214: GO 21218
// end ;
21216: GO 21169
21218: POP
21219: POP
// if not side then
21220: LD_VAR 0 3
21224: NOT
21225: IFFALSE 21229
// exit ;
21227: GO 21274
// for i := 1 to tmp do
21229: LD_ADDR_VAR 0 1
21233: PUSH
21234: DOUBLE
21235: LD_INT 1
21237: DEC
21238: ST_TO_ADDR
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_TO
21245: IFFALSE 21272
// if Prob ( 60 ) then
21247: LD_INT 60
21249: PPUSH
21250: CALL_OW 13
21254: IFFALSE 21270
// SetSide ( i , side ) ;
21256: LD_VAR 0 1
21260: PPUSH
21261: LD_VAR 0 3
21265: PPUSH
21266: CALL_OW 235
21270: GO 21244
21272: POP
21273: POP
// end ;
21274: PPOPN 3
21276: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21277: LD_EXP 47
21281: PUSH
21282: LD_EXP 60
21286: AND
21287: IFFALSE 21406
21289: GO 21291
21291: DISABLE
21292: LD_INT 0
21294: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21295: LD_ADDR_VAR 0 1
21299: PUSH
21300: LD_INT 22
21302: PUSH
21303: LD_OWVAR 2
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 21
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 3
21324: PUSH
21325: LD_INT 23
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: PUSH
21349: FOR_IN
21350: IFFALSE 21404
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 257
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 4
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: IN
21380: IFFALSE 21402
// SetClass ( un , rand ( 1 , 4 ) ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: LD_INT 4
21392: PPUSH
21393: CALL_OW 12
21397: PPUSH
21398: CALL_OW 336
21402: GO 21349
21404: POP
21405: POP
// end ;
21406: PPOPN 1
21408: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21409: LD_EXP 47
21413: PUSH
21414: LD_EXP 59
21418: AND
21419: IFFALSE 21498
21421: GO 21423
21423: DISABLE
21424: LD_INT 0
21426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21427: LD_ADDR_VAR 0 1
21431: PUSH
21432: LD_INT 22
21434: PUSH
21435: LD_OWVAR 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: ST_TO_ADDR
// if not tmp then
21463: LD_VAR 0 1
21467: NOT
21468: IFFALSE 21472
// exit ;
21470: GO 21498
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21472: LD_VAR 0 1
21476: PUSH
21477: LD_INT 1
21479: PPUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 12
21489: ARRAY
21490: PPUSH
21491: LD_INT 100
21493: PPUSH
21494: CALL_OW 234
// end ;
21498: PPOPN 1
21500: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21501: LD_EXP 47
21505: PUSH
21506: LD_EXP 61
21510: AND
21511: IFFALSE 21609
21513: GO 21515
21515: DISABLE
21516: LD_INT 0
21518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_OWVAR 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 21
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PPUSH
21550: CALL_OW 69
21554: ST_TO_ADDR
// if not tmp then
21555: LD_VAR 0 1
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 21609
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21564: LD_VAR 0 1
21568: PUSH
21569: LD_INT 1
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 12
21581: ARRAY
21582: PPUSH
21583: LD_INT 1
21585: PPUSH
21586: LD_INT 4
21588: PPUSH
21589: CALL_OW 12
21593: PPUSH
21594: LD_INT 3000
21596: PPUSH
21597: LD_INT 9000
21599: PPUSH
21600: CALL_OW 12
21604: PPUSH
21605: CALL_OW 492
// end ;
21609: PPOPN 1
21611: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21612: LD_EXP 47
21616: PUSH
21617: LD_EXP 62
21621: AND
21622: IFFALSE 21642
21624: GO 21626
21626: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21627: LD_INT 1
21629: PPUSH
21630: LD_OWVAR 2
21634: PPUSH
21635: LD_INT 0
21637: PPUSH
21638: CALL_OW 324
21642: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21643: LD_EXP 47
21647: PUSH
21648: LD_EXP 63
21652: AND
21653: IFFALSE 21736
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 21
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 2
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21736
// for i in tmp do
21707: LD_ADDR_VAR 0 1
21711: PUSH
21712: LD_VAR 0 2
21716: PUSH
21717: FOR_IN
21718: IFFALSE 21734
// SetBLevel ( i , 10 ) ;
21720: LD_VAR 0 1
21724: PPUSH
21725: LD_INT 10
21727: PPUSH
21728: CALL_OW 241
21732: GO 21717
21734: POP
21735: POP
// end ;
21736: PPOPN 2
21738: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21739: LD_EXP 47
21743: PUSH
21744: LD_EXP 64
21748: AND
21749: IFFALSE 21860
21751: GO 21753
21753: DISABLE
21754: LD_INT 0
21756: PPUSH
21757: PPUSH
21758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21759: LD_ADDR_VAR 0 3
21763: PUSH
21764: LD_INT 22
21766: PUSH
21767: LD_OWVAR 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 25
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PPUSH
21790: CALL_OW 69
21794: ST_TO_ADDR
// if not tmp then
21795: LD_VAR 0 3
21799: NOT
21800: IFFALSE 21804
// exit ;
21802: GO 21860
// un := tmp [ rand ( 1 , tmp ) ] ;
21804: LD_ADDR_VAR 0 2
21808: PUSH
21809: LD_VAR 0 3
21813: PUSH
21814: LD_INT 1
21816: PPUSH
21817: LD_VAR 0 3
21821: PPUSH
21822: CALL_OW 12
21826: ARRAY
21827: ST_TO_ADDR
// if Crawls ( un ) then
21828: LD_VAR 0 2
21832: PPUSH
21833: CALL_OW 318
21837: IFFALSE 21848
// ComWalk ( un ) ;
21839: LD_VAR 0 2
21843: PPUSH
21844: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21848: LD_VAR 0 2
21852: PPUSH
21853: LD_INT 5
21855: PPUSH
21856: CALL_OW 336
// end ;
21860: PPOPN 3
21862: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21863: LD_EXP 47
21867: PUSH
21868: LD_EXP 65
21872: AND
21873: PUSH
21874: LD_OWVAR 67
21878: PUSH
21879: LD_INT 4
21881: LESS
21882: AND
21883: IFFALSE 21902
21885: GO 21887
21887: DISABLE
// begin Difficulty := Difficulty + 1 ;
21888: LD_ADDR_OWVAR 67
21892: PUSH
21893: LD_OWVAR 67
21897: PUSH
21898: LD_INT 1
21900: PLUS
21901: ST_TO_ADDR
// end ;
21902: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21903: LD_EXP 47
21907: PUSH
21908: LD_EXP 66
21912: AND
21913: IFFALSE 22016
21915: GO 21917
21917: DISABLE
21918: LD_INT 0
21920: PPUSH
// begin for i := 1 to 5 do
21921: LD_ADDR_VAR 0 1
21925: PUSH
21926: DOUBLE
21927: LD_INT 1
21929: DEC
21930: ST_TO_ADDR
21931: LD_INT 5
21933: PUSH
21934: FOR_TO
21935: IFFALSE 22014
// begin uc_nation := nation_nature ;
21937: LD_ADDR_OWVAR 21
21941: PUSH
21942: LD_INT 0
21944: ST_TO_ADDR
// uc_side := 0 ;
21945: LD_ADDR_OWVAR 20
21949: PUSH
21950: LD_INT 0
21952: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21953: LD_ADDR_OWVAR 29
21957: PUSH
21958: LD_INT 12
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: ST_TO_ADDR
// hc_agressivity := 20 ;
21968: LD_ADDR_OWVAR 35
21972: PUSH
21973: LD_INT 20
21975: ST_TO_ADDR
// hc_class := class_tiger ;
21976: LD_ADDR_OWVAR 28
21980: PUSH
21981: LD_INT 14
21983: ST_TO_ADDR
// hc_gallery :=  ;
21984: LD_ADDR_OWVAR 33
21988: PUSH
21989: LD_STRING 
21991: ST_TO_ADDR
// hc_name :=  ;
21992: LD_ADDR_OWVAR 26
21996: PUSH
21997: LD_STRING 
21999: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22000: CALL_OW 44
22004: PPUSH
22005: LD_INT 0
22007: PPUSH
22008: CALL_OW 51
// end ;
22012: GO 21934
22014: POP
22015: POP
// end ;
22016: PPOPN 1
22018: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22019: LD_EXP 47
22023: PUSH
22024: LD_EXP 67
22028: AND
22029: IFFALSE 22038
22031: GO 22033
22033: DISABLE
// StreamSibBomb ;
22034: CALL 22039 0 0
22038: END
// export function StreamSibBomb ; var i , x , y ; begin
22039: LD_INT 0
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
// result := false ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
// for i := 1 to 16 do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_INT 16
22065: PUSH
22066: FOR_TO
22067: IFFALSE 22266
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22069: LD_ADDR_VAR 0 3
22073: PUSH
22074: LD_INT 10
22076: PUSH
22077: LD_INT 20
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 40
22085: PUSH
22086: LD_INT 50
22088: PUSH
22089: LD_INT 60
22091: PUSH
22092: LD_INT 70
22094: PUSH
22095: LD_INT 80
22097: PUSH
22098: LD_INT 90
22100: PUSH
22101: LD_INT 100
22103: PUSH
22104: LD_INT 110
22106: PUSH
22107: LD_INT 120
22109: PUSH
22110: LD_INT 130
22112: PUSH
22113: LD_INT 140
22115: PUSH
22116: LD_INT 150
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: PPUSH
22139: LD_INT 15
22141: PPUSH
22142: CALL_OW 12
22146: ARRAY
22147: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22148: LD_ADDR_VAR 0 4
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 20
22158: PUSH
22159: LD_INT 30
22161: PUSH
22162: LD_INT 40
22164: PUSH
22165: LD_INT 50
22167: PUSH
22168: LD_INT 60
22170: PUSH
22171: LD_INT 70
22173: PUSH
22174: LD_INT 80
22176: PUSH
22177: LD_INT 90
22179: PUSH
22180: LD_INT 100
22182: PUSH
22183: LD_INT 110
22185: PUSH
22186: LD_INT 120
22188: PUSH
22189: LD_INT 130
22191: PUSH
22192: LD_INT 140
22194: PUSH
22195: LD_INT 150
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PPUSH
22218: LD_INT 15
22220: PPUSH
22221: CALL_OW 12
22225: ARRAY
22226: ST_TO_ADDR
// if ValidHex ( x , y ) then
22227: LD_VAR 0 3
22231: PPUSH
22232: LD_VAR 0 4
22236: PPUSH
22237: CALL_OW 488
22241: IFFALSE 22264
// begin result := [ x , y ] ;
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: LD_VAR 0 3
22252: PUSH
22253: LD_VAR 0 4
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// break ;
22262: GO 22266
// end ; end ;
22264: GO 22066
22266: POP
22267: POP
// if result then
22268: LD_VAR 0 1
22272: IFFALSE 22332
// begin ToLua ( playSibBomb() ) ;
22274: LD_STRING playSibBomb()
22276: PPUSH
22277: CALL_OW 559
// wait ( 0 0$14 ) ;
22281: LD_INT 490
22283: PPUSH
22284: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22288: LD_VAR 0 1
22292: PUSH
22293: LD_INT 1
22295: ARRAY
22296: PPUSH
22297: LD_VAR 0 1
22301: PUSH
22302: LD_INT 2
22304: ARRAY
22305: PPUSH
22306: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22310: LD_VAR 0 1
22314: PUSH
22315: LD_INT 1
22317: ARRAY
22318: PPUSH
22319: LD_VAR 0 1
22323: PUSH
22324: LD_INT 2
22326: ARRAY
22327: PPUSH
22328: CALL_OW 429
// end ; end ;
22332: LD_VAR 0 1
22336: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22337: LD_EXP 47
22341: PUSH
22342: LD_EXP 69
22346: AND
22347: IFFALSE 22359
22349: GO 22351
22351: DISABLE
// YouLost (  ) ;
22352: LD_STRING 
22354: PPUSH
22355: CALL_OW 104
22359: END
// every 0 0$1 trigger StreamModeActive and sFog do
22360: LD_EXP 47
22364: PUSH
22365: LD_EXP 68
22369: AND
22370: IFFALSE 22384
22372: GO 22374
22374: DISABLE
// FogOff ( your_side ) ;
22375: LD_OWVAR 2
22379: PPUSH
22380: CALL_OW 344
22384: END
// every 0 0$1 trigger StreamModeActive and sSun do
22385: LD_EXP 47
22389: PUSH
22390: LD_EXP 70
22394: AND
22395: IFFALSE 22423
22397: GO 22399
22399: DISABLE
// begin solar_recharge_percent := 0 ;
22400: LD_ADDR_OWVAR 79
22404: PUSH
22405: LD_INT 0
22407: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22408: LD_INT 10500
22410: PPUSH
22411: CALL_OW 67
// solar_recharge_percent := 100 ;
22415: LD_ADDR_OWVAR 79
22419: PUSH
22420: LD_INT 100
22422: ST_TO_ADDR
// end ;
22423: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22424: LD_EXP 47
22428: PUSH
22429: LD_EXP 71
22433: AND
22434: IFFALSE 22673
22436: GO 22438
22438: DISABLE
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
22443: PPUSH
// begin tmp := [ ] ;
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: EMPTY
22450: ST_TO_ADDR
// for i := 1 to 6 do
22451: LD_ADDR_VAR 0 1
22455: PUSH
22456: DOUBLE
22457: LD_INT 1
22459: DEC
22460: ST_TO_ADDR
22461: LD_INT 6
22463: PUSH
22464: FOR_TO
22465: IFFALSE 22570
// begin uc_nation := nation_nature ;
22467: LD_ADDR_OWVAR 21
22471: PUSH
22472: LD_INT 0
22474: ST_TO_ADDR
// uc_side := 0 ;
22475: LD_ADDR_OWVAR 20
22479: PUSH
22480: LD_INT 0
22482: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22483: LD_ADDR_OWVAR 29
22487: PUSH
22488: LD_INT 12
22490: PUSH
22491: LD_INT 12
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: ST_TO_ADDR
// hc_agressivity := 20 ;
22498: LD_ADDR_OWVAR 35
22502: PUSH
22503: LD_INT 20
22505: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22506: LD_ADDR_OWVAR 28
22510: PUSH
22511: LD_INT 17
22513: ST_TO_ADDR
// hc_gallery :=  ;
22514: LD_ADDR_OWVAR 33
22518: PUSH
22519: LD_STRING 
22521: ST_TO_ADDR
// hc_name :=  ;
22522: LD_ADDR_OWVAR 26
22526: PUSH
22527: LD_STRING 
22529: ST_TO_ADDR
// un := CreateHuman ;
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: CALL_OW 44
22539: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22540: LD_VAR 0 2
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 51
// tmp := tmp ^ un ;
22552: LD_ADDR_VAR 0 3
22556: PUSH
22557: LD_VAR 0 3
22561: PUSH
22562: LD_VAR 0 2
22566: ADD
22567: ST_TO_ADDR
// end ;
22568: GO 22464
22570: POP
22571: POP
// repeat wait ( 0 0$1 ) ;
22572: LD_INT 35
22574: PPUSH
22575: CALL_OW 67
// for un in tmp do
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_VAR 0 3
22588: PUSH
22589: FOR_IN
22590: IFFALSE 22664
// begin if IsDead ( un ) then
22592: LD_VAR 0 2
22596: PPUSH
22597: CALL_OW 301
22601: IFFALSE 22621
// begin tmp := tmp diff un ;
22603: LD_ADDR_VAR 0 3
22607: PUSH
22608: LD_VAR 0 3
22612: PUSH
22613: LD_VAR 0 2
22617: DIFF
22618: ST_TO_ADDR
// continue ;
22619: GO 22589
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22621: LD_VAR 0 2
22625: PPUSH
22626: LD_INT 3
22628: PUSH
22629: LD_INT 22
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: PPUSH
22648: LD_VAR 0 2
22652: PPUSH
22653: CALL_OW 74
22657: PPUSH
22658: CALL_OW 115
// end ;
22662: GO 22589
22664: POP
22665: POP
// until not tmp ;
22666: LD_VAR 0 3
22670: NOT
22671: IFFALSE 22572
// end ;
22673: PPOPN 3
22675: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22676: LD_EXP 47
22680: PUSH
22681: LD_EXP 72
22685: AND
22686: IFFALSE 22740
22688: GO 22690
22690: DISABLE
// begin ToLua ( displayTroll(); ) ;
22691: LD_STRING displayTroll();
22693: PPUSH
22694: CALL_OW 559
// wait ( 3 3$00 ) ;
22698: LD_INT 6300
22700: PPUSH
22701: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22705: LD_STRING hideTroll();
22707: PPUSH
22708: CALL_OW 559
// wait ( 1 1$00 ) ;
22712: LD_INT 2100
22714: PPUSH
22715: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22719: LD_STRING displayTroll();
22721: PPUSH
22722: CALL_OW 559
// wait ( 1 1$00 ) ;
22726: LD_INT 2100
22728: PPUSH
22729: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22733: LD_STRING hideTroll();
22735: PPUSH
22736: CALL_OW 559
// end ;
22740: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22741: LD_EXP 47
22745: PUSH
22746: LD_EXP 73
22750: AND
22751: IFFALSE 22814
22753: GO 22755
22755: DISABLE
22756: LD_INT 0
22758: PPUSH
// begin p := 0 ;
22759: LD_ADDR_VAR 0 1
22763: PUSH
22764: LD_INT 0
22766: ST_TO_ADDR
// repeat game_speed := 1 ;
22767: LD_ADDR_OWVAR 65
22771: PUSH
22772: LD_INT 1
22774: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22775: LD_INT 35
22777: PPUSH
22778: CALL_OW 67
// p := p + 1 ;
22782: LD_ADDR_VAR 0 1
22786: PUSH
22787: LD_VAR 0 1
22791: PUSH
22792: LD_INT 1
22794: PLUS
22795: ST_TO_ADDR
// until p >= 60 ;
22796: LD_VAR 0 1
22800: PUSH
22801: LD_INT 60
22803: GREATEREQUAL
22804: IFFALSE 22767
// game_speed := 4 ;
22806: LD_ADDR_OWVAR 65
22810: PUSH
22811: LD_INT 4
22813: ST_TO_ADDR
// end ;
22814: PPOPN 1
22816: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22817: LD_EXP 47
22821: PUSH
22822: LD_EXP 74
22826: AND
22827: IFFALSE 22973
22829: GO 22831
22831: DISABLE
22832: LD_INT 0
22834: PPUSH
22835: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22836: LD_ADDR_VAR 0 1
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_OWVAR 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 30
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PPUSH
22885: CALL_OW 69
22889: ST_TO_ADDR
// if not depot then
22890: LD_VAR 0 1
22894: NOT
22895: IFFALSE 22899
// exit ;
22897: GO 22973
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_VAR 0 1
22908: PUSH
22909: LD_INT 1
22911: PPUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 12
22921: ARRAY
22922: PPUSH
22923: CALL_OW 274
22927: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: LD_INT 0
22938: PPUSH
22939: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22943: LD_VAR 0 2
22947: PPUSH
22948: LD_INT 2
22950: PPUSH
22951: LD_INT 0
22953: PPUSH
22954: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22958: LD_VAR 0 2
22962: PPUSH
22963: LD_INT 3
22965: PPUSH
22966: LD_INT 0
22968: PPUSH
22969: CALL_OW 277
// end ;
22973: PPOPN 2
22975: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22976: LD_EXP 47
22980: PUSH
22981: LD_EXP 75
22985: AND
22986: IFFALSE 23083
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22994: LD_ADDR_VAR 0 1
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_OWVAR 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 21
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 3
23023: PUSH
23024: LD_INT 23
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL_OW 69
23047: ST_TO_ADDR
// if not tmp then
23048: LD_VAR 0 1
23052: NOT
23053: IFFALSE 23057
// exit ;
23055: GO 23083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23057: LD_VAR 0 1
23061: PUSH
23062: LD_INT 1
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 12
23074: ARRAY
23075: PPUSH
23076: LD_INT 200
23078: PPUSH
23079: CALL_OW 234
// end ;
23083: PPOPN 1
23085: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23086: LD_EXP 47
23090: PUSH
23091: LD_EXP 76
23095: AND
23096: IFFALSE 23175
23098: GO 23100
23100: DISABLE
23101: LD_INT 0
23103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23104: LD_ADDR_VAR 0 1
23108: PUSH
23109: LD_INT 22
23111: PUSH
23112: LD_OWVAR 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 21
23123: PUSH
23124: LD_INT 2
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PPUSH
23135: CALL_OW 69
23139: ST_TO_ADDR
// if not tmp then
23140: LD_VAR 0 1
23144: NOT
23145: IFFALSE 23149
// exit ;
23147: GO 23175
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23149: LD_VAR 0 1
23153: PUSH
23154: LD_INT 1
23156: PPUSH
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 12
23166: ARRAY
23167: PPUSH
23168: LD_INT 60
23170: PPUSH
23171: CALL_OW 234
// end ;
23175: PPOPN 1
23177: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23178: LD_EXP 47
23182: PUSH
23183: LD_EXP 77
23187: AND
23188: IFFALSE 23287
23190: GO 23192
23192: DISABLE
23193: LD_INT 0
23195: PPUSH
23196: PPUSH
// begin enable ;
23197: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23198: LD_ADDR_VAR 0 1
23202: PUSH
23203: LD_INT 22
23205: PUSH
23206: LD_OWVAR 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 61
23217: PUSH
23218: EMPTY
23219: LIST
23220: PUSH
23221: LD_INT 33
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 69
23240: ST_TO_ADDR
// if not tmp then
23241: LD_VAR 0 1
23245: NOT
23246: IFFALSE 23250
// exit ;
23248: GO 23287
// for i in tmp do
23250: LD_ADDR_VAR 0 2
23254: PUSH
23255: LD_VAR 0 1
23259: PUSH
23260: FOR_IN
23261: IFFALSE 23285
// if IsControledBy ( i ) then
23263: LD_VAR 0 2
23267: PPUSH
23268: CALL_OW 312
23272: IFFALSE 23283
// ComUnlink ( i ) ;
23274: LD_VAR 0 2
23278: PPUSH
23279: CALL_OW 136
23283: GO 23260
23285: POP
23286: POP
// end ;
23287: PPOPN 2
23289: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23290: LD_EXP 47
23294: PUSH
23295: LD_EXP 78
23299: AND
23300: IFFALSE 23440
23302: GO 23304
23304: DISABLE
23305: LD_INT 0
23307: PPUSH
23308: PPUSH
// begin ToLua ( displayPowell(); ) ;
23309: LD_STRING displayPowell();
23311: PPUSH
23312: CALL_OW 559
// uc_side := 0 ;
23316: LD_ADDR_OWVAR 20
23320: PUSH
23321: LD_INT 0
23323: ST_TO_ADDR
// uc_nation := 2 ;
23324: LD_ADDR_OWVAR 21
23328: PUSH
23329: LD_INT 2
23331: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23332: LD_ADDR_OWVAR 37
23336: PUSH
23337: LD_INT 14
23339: ST_TO_ADDR
// vc_engine := engine_siberite ;
23340: LD_ADDR_OWVAR 39
23344: PUSH
23345: LD_INT 3
23347: ST_TO_ADDR
// vc_control := control_apeman ;
23348: LD_ADDR_OWVAR 38
23352: PUSH
23353: LD_INT 5
23355: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23356: LD_ADDR_OWVAR 40
23360: PUSH
23361: LD_INT 29
23363: ST_TO_ADDR
// un := CreateVehicle ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: CALL_OW 45
23373: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23374: LD_VAR 0 2
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23386: LD_INT 35
23388: PPUSH
23389: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23393: LD_VAR 0 2
23397: PPUSH
23398: LD_INT 22
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: PPUSH
23415: LD_VAR 0 2
23419: PPUSH
23420: CALL_OW 74
23424: PPUSH
23425: CALL_OW 115
// until IsDead ( un ) ;
23429: LD_VAR 0 2
23433: PPUSH
23434: CALL_OW 301
23438: IFFALSE 23386
// end ;
23440: PPOPN 2
23442: END
// every 0 0$1 trigger StreamModeActive and sStu do
23443: LD_EXP 47
23447: PUSH
23448: LD_EXP 86
23452: AND
23453: IFFALSE 23469
23455: GO 23457
23457: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23458: LD_STRING displayStucuk();
23460: PPUSH
23461: CALL_OW 559
// ResetFog ;
23465: CALL_OW 335
// end ;
23469: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23470: LD_EXP 47
23474: PUSH
23475: LD_EXP 79
23479: AND
23480: IFFALSE 23621
23482: GO 23484
23484: DISABLE
23485: LD_INT 0
23487: PPUSH
23488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23489: LD_ADDR_VAR 0 2
23493: PUSH
23494: LD_INT 22
23496: PUSH
23497: LD_OWVAR 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 21
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PPUSH
23520: CALL_OW 69
23524: ST_TO_ADDR
// if not tmp then
23525: LD_VAR 0 2
23529: NOT
23530: IFFALSE 23534
// exit ;
23532: GO 23621
// un := tmp [ rand ( 1 , tmp ) ] ;
23534: LD_ADDR_VAR 0 1
23538: PUSH
23539: LD_VAR 0 2
23543: PUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_VAR 0 2
23551: PPUSH
23552: CALL_OW 12
23556: ARRAY
23557: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23558: LD_VAR 0 1
23562: PPUSH
23563: LD_INT 0
23565: PPUSH
23566: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23570: LD_VAR 0 1
23574: PPUSH
23575: LD_OWVAR 3
23579: PUSH
23580: LD_VAR 0 1
23584: DIFF
23585: PPUSH
23586: LD_VAR 0 1
23590: PPUSH
23591: CALL_OW 74
23595: PPUSH
23596: CALL_OW 115
// wait ( 0 0$20 ) ;
23600: LD_INT 700
23602: PPUSH
23603: CALL_OW 67
// SetSide ( un , your_side ) ;
23607: LD_VAR 0 1
23611: PPUSH
23612: LD_OWVAR 2
23616: PPUSH
23617: CALL_OW 235
// end ;
23621: PPOPN 2
23623: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23624: LD_EXP 47
23628: PUSH
23629: LD_EXP 80
23633: AND
23634: IFFALSE 23740
23636: GO 23638
23638: DISABLE
23639: LD_INT 0
23641: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23642: LD_ADDR_VAR 0 1
23646: PUSH
23647: LD_INT 22
23649: PUSH
23650: LD_OWVAR 2
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 30
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 30
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL_OW 69
23695: ST_TO_ADDR
// if not depot then
23696: LD_VAR 0 1
23700: NOT
23701: IFFALSE 23705
// exit ;
23703: GO 23740
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23705: LD_VAR 0 1
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: PPUSH
23714: CALL_OW 250
23718: PPUSH
23719: LD_VAR 0 1
23723: PUSH
23724: LD_INT 1
23726: ARRAY
23727: PPUSH
23728: CALL_OW 251
23732: PPUSH
23733: LD_INT 70
23735: PPUSH
23736: CALL_OW 495
// end ;
23740: PPOPN 1
23742: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23743: LD_EXP 47
23747: PUSH
23748: LD_EXP 81
23752: AND
23753: IFFALSE 23964
23755: GO 23757
23757: DISABLE
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23765: LD_ADDR_VAR 0 5
23769: PUSH
23770: LD_INT 22
23772: PUSH
23773: LD_OWVAR 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 21
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PPUSH
23796: CALL_OW 69
23800: ST_TO_ADDR
// if not tmp then
23801: LD_VAR 0 5
23805: NOT
23806: IFFALSE 23810
// exit ;
23808: GO 23964
// for i in tmp do
23810: LD_ADDR_VAR 0 1
23814: PUSH
23815: LD_VAR 0 5
23819: PUSH
23820: FOR_IN
23821: IFFALSE 23962
// begin d := rand ( 0 , 5 ) ;
23823: LD_ADDR_VAR 0 4
23827: PUSH
23828: LD_INT 0
23830: PPUSH
23831: LD_INT 5
23833: PPUSH
23834: CALL_OW 12
23838: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23839: LD_ADDR_VAR 0 2
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 250
23853: PPUSH
23854: LD_VAR 0 4
23858: PPUSH
23859: LD_INT 3
23861: PPUSH
23862: LD_INT 12
23864: PPUSH
23865: CALL_OW 12
23869: PPUSH
23870: CALL_OW 272
23874: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL_OW 251
23889: PPUSH
23890: LD_VAR 0 4
23894: PPUSH
23895: LD_INT 3
23897: PPUSH
23898: LD_INT 12
23900: PPUSH
23901: CALL_OW 12
23905: PPUSH
23906: CALL_OW 273
23910: ST_TO_ADDR
// if ValidHex ( x , y ) then
23911: LD_VAR 0 2
23915: PPUSH
23916: LD_VAR 0 3
23920: PPUSH
23921: CALL_OW 488
23925: IFFALSE 23960
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23927: LD_VAR 0 1
23931: PPUSH
23932: LD_VAR 0 2
23936: PPUSH
23937: LD_VAR 0 3
23941: PPUSH
23942: LD_INT 3
23944: PPUSH
23945: LD_INT 6
23947: PPUSH
23948: CALL_OW 12
23952: PPUSH
23953: LD_INT 1
23955: PPUSH
23956: CALL_OW 483
// end ;
23960: GO 23820
23962: POP
23963: POP
// end ;
23964: PPOPN 5
23966: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23967: LD_EXP 47
23971: PUSH
23972: LD_EXP 82
23976: AND
23977: IFFALSE 24071
23979: GO 23981
23981: DISABLE
23982: LD_INT 0
23984: PPUSH
23985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23986: LD_ADDR_VAR 0 2
23990: PUSH
23991: LD_INT 22
23993: PUSH
23994: LD_OWVAR 2
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 32
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 21
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: PPUSH
24028: CALL_OW 69
24032: ST_TO_ADDR
// if not tmp then
24033: LD_VAR 0 2
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24071
// for i in tmp do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: LD_VAR 0 2
24051: PUSH
24052: FOR_IN
24053: IFFALSE 24069
// SetFuel ( i , 0 ) ;
24055: LD_VAR 0 1
24059: PPUSH
24060: LD_INT 0
24062: PPUSH
24063: CALL_OW 240
24067: GO 24052
24069: POP
24070: POP
// end ;
24071: PPOPN 2
24073: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24074: LD_EXP 47
24078: PUSH
24079: LD_EXP 83
24083: AND
24084: IFFALSE 24150
24086: GO 24088
24088: DISABLE
24089: LD_INT 0
24091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24092: LD_ADDR_VAR 0 1
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_OWVAR 2
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 30
24111: PUSH
24112: LD_INT 29
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PPUSH
24123: CALL_OW 69
24127: ST_TO_ADDR
// if not tmp then
24128: LD_VAR 0 1
24132: NOT
24133: IFFALSE 24137
// exit ;
24135: GO 24150
// DestroyUnit ( tmp [ 1 ] ) ;
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PPUSH
24146: CALL_OW 65
// end ;
24150: PPOPN 1
24152: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24153: LD_EXP 47
24157: PUSH
24158: LD_EXP 85
24162: AND
24163: IFFALSE 24292
24165: GO 24167
24167: DISABLE
24168: LD_INT 0
24170: PPUSH
// begin uc_side := 0 ;
24171: LD_ADDR_OWVAR 20
24175: PUSH
24176: LD_INT 0
24178: ST_TO_ADDR
// uc_nation := nation_arabian ;
24179: LD_ADDR_OWVAR 21
24183: PUSH
24184: LD_INT 2
24186: ST_TO_ADDR
// hc_gallery :=  ;
24187: LD_ADDR_OWVAR 33
24191: PUSH
24192: LD_STRING 
24194: ST_TO_ADDR
// hc_name :=  ;
24195: LD_ADDR_OWVAR 26
24199: PUSH
24200: LD_STRING 
24202: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24203: LD_INT 1
24205: PPUSH
24206: LD_INT 11
24208: PPUSH
24209: LD_INT 10
24211: PPUSH
24212: CALL_OW 380
// un := CreateHuman ;
24216: LD_ADDR_VAR 0 1
24220: PUSH
24221: CALL_OW 44
24225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24226: LD_VAR 0 1
24230: PPUSH
24231: LD_INT 1
24233: PPUSH
24234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24238: LD_INT 35
24240: PPUSH
24241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_INT 22
24252: PUSH
24253: LD_OWVAR 2
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 69
24266: PPUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 74
24276: PPUSH
24277: CALL_OW 115
// until IsDead ( un ) ;
24281: LD_VAR 0 1
24285: PPUSH
24286: CALL_OW 301
24290: IFFALSE 24238
// end ;
24292: PPOPN 1
24294: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24295: LD_EXP 47
24299: PUSH
24300: LD_EXP 87
24304: AND
24305: IFFALSE 24317
24307: GO 24309
24309: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24310: LD_STRING earthquake(getX(game), 0, 32)
24312: PPUSH
24313: CALL_OW 559
24317: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24318: LD_EXP 47
24322: PUSH
24323: LD_EXP 88
24327: AND
24328: IFFALSE 24419
24330: GO 24332
24332: DISABLE
24333: LD_INT 0
24335: PPUSH
// begin enable ;
24336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24337: LD_ADDR_VAR 0 1
24341: PUSH
24342: LD_INT 22
24344: PUSH
24345: LD_OWVAR 2
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 21
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 33
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PPUSH
24379: CALL_OW 69
24383: ST_TO_ADDR
// if not tmp then
24384: LD_VAR 0 1
24388: NOT
24389: IFFALSE 24393
// exit ;
24391: GO 24419
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24393: LD_VAR 0 1
24397: PUSH
24398: LD_INT 1
24400: PPUSH
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 12
24410: ARRAY
24411: PPUSH
24412: LD_INT 1
24414: PPUSH
24415: CALL_OW 234
// end ;
24419: PPOPN 1
24421: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24422: LD_EXP 47
24426: PUSH
24427: LD_EXP 89
24431: AND
24432: IFFALSE 24573
24434: GO 24436
24436: DISABLE
24437: LD_INT 0
24439: PPUSH
24440: PPUSH
24441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: LD_INT 22
24449: PUSH
24450: LD_OWVAR 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 25
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PPUSH
24473: CALL_OW 69
24477: ST_TO_ADDR
// if not tmp then
24478: LD_VAR 0 3
24482: NOT
24483: IFFALSE 24487
// exit ;
24485: GO 24573
// un := tmp [ rand ( 1 , tmp ) ] ;
24487: LD_ADDR_VAR 0 2
24491: PUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 1
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 12
24509: ARRAY
24510: ST_TO_ADDR
// if Crawls ( un ) then
24511: LD_VAR 0 2
24515: PPUSH
24516: CALL_OW 318
24520: IFFALSE 24531
// ComWalk ( un ) ;
24522: LD_VAR 0 2
24526: PPUSH
24527: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24531: LD_VAR 0 2
24535: PPUSH
24536: LD_INT 9
24538: PPUSH
24539: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24543: LD_INT 28
24545: PPUSH
24546: LD_OWVAR 2
24550: PPUSH
24551: LD_INT 2
24553: PPUSH
24554: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24558: LD_INT 29
24560: PPUSH
24561: LD_OWVAR 2
24565: PPUSH
24566: LD_INT 2
24568: PPUSH
24569: CALL_OW 322
// end ;
24573: PPOPN 3
24575: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24576: LD_EXP 47
24580: PUSH
24581: LD_EXP 90
24585: AND
24586: IFFALSE 24697
24588: GO 24590
24590: DISABLE
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
24595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24596: LD_ADDR_VAR 0 3
24600: PUSH
24601: LD_INT 22
24603: PUSH
24604: LD_OWVAR 2
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 25
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: ST_TO_ADDR
// if not tmp then
24632: LD_VAR 0 3
24636: NOT
24637: IFFALSE 24641
// exit ;
24639: GO 24697
// un := tmp [ rand ( 1 , tmp ) ] ;
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_VAR 0 3
24650: PUSH
24651: LD_INT 1
24653: PPUSH
24654: LD_VAR 0 3
24658: PPUSH
24659: CALL_OW 12
24663: ARRAY
24664: ST_TO_ADDR
// if Crawls ( un ) then
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 318
24674: IFFALSE 24685
// ComWalk ( un ) ;
24676: LD_VAR 0 2
24680: PPUSH
24681: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24685: LD_VAR 0 2
24689: PPUSH
24690: LD_INT 8
24692: PPUSH
24693: CALL_OW 336
// end ;
24697: PPOPN 3
24699: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24700: LD_EXP 47
24704: PUSH
24705: LD_EXP 91
24709: AND
24710: IFFALSE 24854
24712: GO 24714
24714: DISABLE
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_INT 22
24726: PUSH
24727: LD_OWVAR 2
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 21
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 34
24751: PUSH
24752: LD_INT 12
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 34
24761: PUSH
24762: LD_INT 51
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 34
24771: PUSH
24772: LD_INT 32
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: ST_TO_ADDR
// if not tmp then
24795: LD_VAR 0 2
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24854
// for i in tmp do
24804: LD_ADDR_VAR 0 1
24808: PUSH
24809: LD_VAR 0 2
24813: PUSH
24814: FOR_IN
24815: IFFALSE 24852
// if GetCargo ( i , mat_artifact ) = 0 then
24817: LD_VAR 0 1
24821: PPUSH
24822: LD_INT 4
24824: PPUSH
24825: CALL_OW 289
24829: PUSH
24830: LD_INT 0
24832: EQUAL
24833: IFFALSE 24850
// SetCargo ( i , mat_siberit , 100 ) ;
24835: LD_VAR 0 1
24839: PPUSH
24840: LD_INT 3
24842: PPUSH
24843: LD_INT 100
24845: PPUSH
24846: CALL_OW 290
24850: GO 24814
24852: POP
24853: POP
// end ;
24854: PPOPN 2
24856: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24857: LD_EXP 47
24861: PUSH
24862: LD_EXP 92
24866: AND
24867: IFFALSE 25050
24869: GO 24871
24871: DISABLE
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24876: LD_ADDR_VAR 0 2
24880: PUSH
24881: LD_INT 22
24883: PUSH
24884: LD_OWVAR 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 69
24897: ST_TO_ADDR
// if not tmp then
24898: LD_VAR 0 2
24902: NOT
24903: IFFALSE 24907
// exit ;
24905: GO 25050
// for i := 1 to 2 do
24907: LD_ADDR_VAR 0 1
24911: PUSH
24912: DOUBLE
24913: LD_INT 1
24915: DEC
24916: ST_TO_ADDR
24917: LD_INT 2
24919: PUSH
24920: FOR_TO
24921: IFFALSE 25048
// begin uc_side := your_side ;
24923: LD_ADDR_OWVAR 20
24927: PUSH
24928: LD_OWVAR 2
24932: ST_TO_ADDR
// uc_nation := nation_american ;
24933: LD_ADDR_OWVAR 21
24937: PUSH
24938: LD_INT 1
24940: ST_TO_ADDR
// vc_chassis := us_morphling ;
24941: LD_ADDR_OWVAR 37
24945: PUSH
24946: LD_INT 5
24948: ST_TO_ADDR
// vc_engine := engine_siberite ;
24949: LD_ADDR_OWVAR 39
24953: PUSH
24954: LD_INT 3
24956: ST_TO_ADDR
// vc_control := control_computer ;
24957: LD_ADDR_OWVAR 38
24961: PUSH
24962: LD_INT 3
24964: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24965: LD_ADDR_OWVAR 40
24969: PUSH
24970: LD_INT 10
24972: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24973: LD_VAR 0 2
24977: PUSH
24978: LD_INT 1
24980: ARRAY
24981: PPUSH
24982: CALL_OW 310
24986: NOT
24987: IFFALSE 25034
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24989: CALL_OW 45
24993: PPUSH
24994: LD_VAR 0 2
24998: PUSH
24999: LD_INT 1
25001: ARRAY
25002: PPUSH
25003: CALL_OW 250
25007: PPUSH
25008: LD_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PPUSH
25017: CALL_OW 251
25021: PPUSH
25022: LD_INT 12
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 50
25032: GO 25046
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25034: CALL_OW 45
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: CALL_OW 51
// end ;
25046: GO 24920
25048: POP
25049: POP
// end ;
25050: PPOPN 2
25052: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25053: LD_EXP 47
25057: PUSH
25058: LD_EXP 93
25062: AND
25063: IFFALSE 25285
25065: GO 25067
25067: DISABLE
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25076: LD_ADDR_VAR 0 6
25080: PUSH
25081: LD_INT 22
25083: PUSH
25084: LD_OWVAR 2
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 21
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 23
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: ST_TO_ADDR
// if not tmp then
25130: LD_VAR 0 6
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25285
// s1 := rand ( 1 , 4 ) ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_INT 1
25146: PPUSH
25147: LD_INT 4
25149: PPUSH
25150: CALL_OW 12
25154: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25155: LD_ADDR_VAR 0 4
25159: PUSH
25160: LD_VAR 0 6
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: PPUSH
25169: LD_VAR 0 2
25173: PPUSH
25174: CALL_OW 259
25178: ST_TO_ADDR
// if s1 = 1 then
25179: LD_VAR 0 2
25183: PUSH
25184: LD_INT 1
25186: EQUAL
25187: IFFALSE 25207
// s2 := rand ( 2 , 4 ) else
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 2
25196: PPUSH
25197: LD_INT 4
25199: PPUSH
25200: CALL_OW 12
25204: ST_TO_ADDR
25205: GO 25215
// s2 := 1 ;
25207: LD_ADDR_VAR 0 3
25211: PUSH
25212: LD_INT 1
25214: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25215: LD_ADDR_VAR 0 5
25219: PUSH
25220: LD_VAR 0 6
25224: PUSH
25225: LD_INT 1
25227: ARRAY
25228: PPUSH
25229: LD_VAR 0 3
25233: PPUSH
25234: CALL_OW 259
25238: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25239: LD_VAR 0 6
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: PPUSH
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_VAR 0 5
25257: PPUSH
25258: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25262: LD_VAR 0 6
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: LD_VAR 0 4
25280: PPUSH
25281: CALL_OW 237
// end ;
25285: PPOPN 6
25287: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25288: LD_EXP 47
25292: PUSH
25293: LD_EXP 94
25297: AND
25298: IFFALSE 25377
25300: GO 25302
25302: DISABLE
25303: LD_INT 0
25305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25306: LD_ADDR_VAR 0 1
25310: PUSH
25311: LD_INT 22
25313: PUSH
25314: LD_OWVAR 2
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PPUSH
25337: CALL_OW 69
25341: ST_TO_ADDR
// if not tmp then
25342: LD_VAR 0 1
25346: NOT
25347: IFFALSE 25351
// exit ;
25349: GO 25377
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25351: LD_VAR 0 1
25355: PUSH
25356: LD_INT 1
25358: PPUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 12
25368: ARRAY
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: CALL_OW 234
// end ;
25377: PPOPN 1
25379: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25380: LD_EXP 47
25384: PUSH
25385: LD_EXP 95
25389: AND
25390: IFFALSE 25502
25392: GO 25394
25394: DISABLE
25395: LD_INT 0
25397: PPUSH
25398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25399: LD_ADDR_VAR 0 2
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_OWVAR 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 30
25421: PUSH
25422: LD_INT 27
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 30
25431: PUSH
25432: LD_INT 26
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: LD_INT 28
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 69
25463: ST_TO_ADDR
// if not tmp then
25464: LD_VAR 0 2
25468: NOT
25469: IFFALSE 25473
// exit ;
25471: GO 25502
// for i in tmp do
25473: LD_ADDR_VAR 0 1
25477: PUSH
25478: LD_VAR 0 2
25482: PUSH
25483: FOR_IN
25484: IFFALSE 25500
// SetLives ( i , 1 ) ;
25486: LD_VAR 0 1
25490: PPUSH
25491: LD_INT 1
25493: PPUSH
25494: CALL_OW 234
25498: GO 25483
25500: POP
25501: POP
// end ;
25502: PPOPN 2
25504: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25505: LD_EXP 47
25509: PUSH
25510: LD_EXP 96
25514: AND
25515: IFFALSE 25802
25517: GO 25519
25519: DISABLE
25520: LD_INT 0
25522: PPUSH
25523: PPUSH
25524: PPUSH
// begin i := rand ( 1 , 7 ) ;
25525: LD_ADDR_VAR 0 1
25529: PUSH
25530: LD_INT 1
25532: PPUSH
25533: LD_INT 7
25535: PPUSH
25536: CALL_OW 12
25540: ST_TO_ADDR
// case i of 1 :
25541: LD_VAR 0 1
25545: PUSH
25546: LD_INT 1
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25554
25552: GO 25564
25554: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25555: LD_STRING earthquake(getX(game), 0, 32)
25557: PPUSH
25558: CALL_OW 559
25562: GO 25802
25564: LD_INT 2
25566: DOUBLE
25567: EQUAL
25568: IFTRUE 25572
25570: GO 25586
25572: POP
// begin ToLua ( displayStucuk(); ) ;
25573: LD_STRING displayStucuk();
25575: PPUSH
25576: CALL_OW 559
// ResetFog ;
25580: CALL_OW 335
// end ; 3 :
25584: GO 25802
25586: LD_INT 3
25588: DOUBLE
25589: EQUAL
25590: IFTRUE 25594
25592: GO 25698
25594: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25595: LD_ADDR_VAR 0 2
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_OWVAR 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 25
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PPUSH
25626: CALL_OW 69
25630: ST_TO_ADDR
// if not tmp then
25631: LD_VAR 0 2
25635: NOT
25636: IFFALSE 25640
// exit ;
25638: GO 25802
// un := tmp [ rand ( 1 , tmp ) ] ;
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_VAR 0 2
25649: PUSH
25650: LD_INT 1
25652: PPUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: CALL_OW 12
25662: ARRAY
25663: ST_TO_ADDR
// if Crawls ( un ) then
25664: LD_VAR 0 3
25668: PPUSH
25669: CALL_OW 318
25673: IFFALSE 25684
// ComWalk ( un ) ;
25675: LD_VAR 0 3
25679: PPUSH
25680: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25684: LD_VAR 0 3
25688: PPUSH
25689: LD_INT 8
25691: PPUSH
25692: CALL_OW 336
// end ; 4 :
25696: GO 25802
25698: LD_INT 4
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25706
25704: GO 25780
25706: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_INT 22
25714: PUSH
25715: LD_OWVAR 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 30
25726: PUSH
25727: LD_INT 29
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PPUSH
25738: CALL_OW 69
25742: ST_TO_ADDR
// if not tmp then
25743: LD_VAR 0 2
25747: NOT
25748: IFFALSE 25752
// exit ;
25750: GO 25802
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25752: LD_VAR 0 2
25756: PUSH
25757: LD_INT 1
25759: ARRAY
25760: PPUSH
25761: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25765: LD_VAR 0 2
25769: PUSH
25770: LD_INT 1
25772: ARRAY
25773: PPUSH
25774: CALL_OW 65
// end ; 5 .. 7 :
25778: GO 25802
25780: LD_INT 5
25782: DOUBLE
25783: GREATEREQUAL
25784: IFFALSE 25792
25786: LD_INT 7
25788: DOUBLE
25789: LESSEQUAL
25790: IFTRUE 25794
25792: GO 25801
25794: POP
// StreamSibBomb ; end ;
25795: CALL 22039 0 0
25799: GO 25802
25801: POP
// end ;
25802: PPOPN 3
25804: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25805: LD_EXP 47
25809: PUSH
25810: LD_EXP 97
25814: AND
25815: IFFALSE 25971
25817: GO 25819
25819: DISABLE
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
25824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25825: LD_ADDR_VAR 0 2
25829: PUSH
25830: LD_INT 81
25832: PUSH
25833: LD_OWVAR 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 21
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PPUSH
25874: CALL_OW 69
25878: ST_TO_ADDR
// if not tmp then
25879: LD_VAR 0 2
25883: NOT
25884: IFFALSE 25888
// exit ;
25886: GO 25971
// p := 0 ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_INT 0
25895: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25896: LD_INT 35
25898: PPUSH
25899: CALL_OW 67
// p := p + 1 ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_INT 1
25915: PLUS
25916: ST_TO_ADDR
// for i in tmp do
25917: LD_ADDR_VAR 0 1
25921: PUSH
25922: LD_VAR 0 2
25926: PUSH
25927: FOR_IN
25928: IFFALSE 25959
// if GetLives ( i ) < 1000 then
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 256
25939: PUSH
25940: LD_INT 1000
25942: LESS
25943: IFFALSE 25957
// SetLives ( i , 1000 ) ;
25945: LD_VAR 0 1
25949: PPUSH
25950: LD_INT 1000
25952: PPUSH
25953: CALL_OW 234
25957: GO 25927
25959: POP
25960: POP
// until p > 20 ;
25961: LD_VAR 0 3
25965: PUSH
25966: LD_INT 20
25968: GREATER
25969: IFFALSE 25896
// end ;
25971: PPOPN 3
25973: END
// every 0 0$1 trigger StreamModeActive and sTime do
25974: LD_EXP 47
25978: PUSH
25979: LD_EXP 98
25983: AND
25984: IFFALSE 26019
25986: GO 25988
25988: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25989: LD_INT 28
25991: PPUSH
25992: LD_OWVAR 2
25996: PPUSH
25997: LD_INT 2
25999: PPUSH
26000: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26004: LD_INT 30
26006: PPUSH
26007: LD_OWVAR 2
26011: PPUSH
26012: LD_INT 2
26014: PPUSH
26015: CALL_OW 322
// end ;
26019: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26020: LD_EXP 47
26024: PUSH
26025: LD_EXP 99
26029: AND
26030: IFFALSE 26151
26032: GO 26034
26034: DISABLE
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26039: LD_ADDR_VAR 0 2
26043: PUSH
26044: LD_INT 22
26046: PUSH
26047: LD_OWVAR 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 21
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 3
26068: PUSH
26069: LD_INT 23
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: PPUSH
26088: CALL_OW 69
26092: ST_TO_ADDR
// if not tmp then
26093: LD_VAR 0 2
26097: NOT
26098: IFFALSE 26102
// exit ;
26100: GO 26151
// for i in tmp do
26102: LD_ADDR_VAR 0 1
26106: PUSH
26107: LD_VAR 0 2
26111: PUSH
26112: FOR_IN
26113: IFFALSE 26149
// begin if Crawls ( i ) then
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 318
26124: IFFALSE 26135
// ComWalk ( i ) ;
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 138
// SetClass ( i , 2 ) ;
26135: LD_VAR 0 1
26139: PPUSH
26140: LD_INT 2
26142: PPUSH
26143: CALL_OW 336
// end ;
26147: GO 26112
26149: POP
26150: POP
// end ;
26151: PPOPN 2
26153: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26154: LD_EXP 47
26158: PUSH
26159: LD_EXP 100
26163: AND
26164: IFFALSE 26452
26166: GO 26168
26168: DISABLE
26169: LD_INT 0
26171: PPUSH
26172: PPUSH
26173: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26174: LD_OWVAR 2
26178: PPUSH
26179: LD_INT 9
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: LD_INT 1
26187: PPUSH
26188: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26192: LD_INT 9
26194: PPUSH
26195: LD_OWVAR 2
26199: PPUSH
26200: CALL_OW 343
// uc_side := 9 ;
26204: LD_ADDR_OWVAR 20
26208: PUSH
26209: LD_INT 9
26211: ST_TO_ADDR
// uc_nation := 2 ;
26212: LD_ADDR_OWVAR 21
26216: PUSH
26217: LD_INT 2
26219: ST_TO_ADDR
// hc_name := Dark Warrior ;
26220: LD_ADDR_OWVAR 26
26224: PUSH
26225: LD_STRING Dark Warrior
26227: ST_TO_ADDR
// hc_gallery :=  ;
26228: LD_ADDR_OWVAR 33
26232: PUSH
26233: LD_STRING 
26235: ST_TO_ADDR
// hc_noskilllimit := true ;
26236: LD_ADDR_OWVAR 76
26240: PUSH
26241: LD_INT 1
26243: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26244: LD_ADDR_OWVAR 31
26248: PUSH
26249: LD_INT 30
26251: PUSH
26252: LD_INT 30
26254: PUSH
26255: LD_INT 30
26257: PUSH
26258: LD_INT 30
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// un := CreateHuman ;
26267: LD_ADDR_VAR 0 3
26271: PUSH
26272: CALL_OW 44
26276: ST_TO_ADDR
// hc_noskilllimit := false ;
26277: LD_ADDR_OWVAR 76
26281: PUSH
26282: LD_INT 0
26284: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26285: LD_VAR 0 3
26289: PPUSH
26290: LD_INT 1
26292: PPUSH
26293: CALL_OW 51
// ToLua ( playRanger() ) ;
26297: LD_STRING playRanger()
26299: PPUSH
26300: CALL_OW 559
// p := 0 ;
26304: LD_ADDR_VAR 0 2
26308: PUSH
26309: LD_INT 0
26311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26312: LD_INT 35
26314: PPUSH
26315: CALL_OW 67
// p := p + 1 ;
26319: LD_ADDR_VAR 0 2
26323: PUSH
26324: LD_VAR 0 2
26328: PUSH
26329: LD_INT 1
26331: PLUS
26332: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL_OW 256
26342: PUSH
26343: LD_INT 1000
26345: LESS
26346: IFFALSE 26360
// SetLives ( un , 1000 ) ;
26348: LD_VAR 0 3
26352: PPUSH
26353: LD_INT 1000
26355: PPUSH
26356: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26360: LD_VAR 0 3
26364: PPUSH
26365: LD_INT 81
26367: PUSH
26368: LD_OWVAR 2
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 91
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_INT 30
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PPUSH
26397: CALL_OW 69
26401: PPUSH
26402: LD_VAR 0 3
26406: PPUSH
26407: CALL_OW 74
26411: PPUSH
26412: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26416: LD_VAR 0 2
26420: PUSH
26421: LD_INT 80
26423: GREATER
26424: PUSH
26425: LD_VAR 0 3
26429: PPUSH
26430: CALL_OW 301
26434: OR
26435: IFFALSE 26312
// if un then
26437: LD_VAR 0 3
26441: IFFALSE 26452
// RemoveUnit ( un ) ;
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 64
// end ;
26452: PPOPN 3
26454: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26455: LD_EXP 101
26459: IFFALSE 26575
26461: GO 26463
26463: DISABLE
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
26468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: LD_INT 81
26476: PUSH
26477: LD_OWVAR 2
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 21
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 69
26504: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26505: LD_STRING playComputer()
26507: PPUSH
26508: CALL_OW 559
// if not tmp then
26512: LD_VAR 0 2
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26575
// for i in tmp do
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: LD_VAR 0 2
26530: PUSH
26531: FOR_IN
26532: IFFALSE 26573
// for j := 1 to 4 do
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: DOUBLE
26540: LD_INT 1
26542: DEC
26543: ST_TO_ADDR
26544: LD_INT 4
26546: PUSH
26547: FOR_TO
26548: IFFALSE 26569
// SetSkill ( i , j , 10 ) ;
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_VAR 0 3
26559: PPUSH
26560: LD_INT 10
26562: PPUSH
26563: CALL_OW 237
26567: GO 26547
26569: POP
26570: POP
26571: GO 26531
26573: POP
26574: POP
// end ;
26575: PPOPN 3
26577: END
// every 0 0$1 trigger s30 do var i , tmp ;
26578: LD_EXP 102
26582: IFFALSE 26651
26584: GO 26586
26586: DISABLE
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26591: LD_ADDR_VAR 0 2
26595: PUSH
26596: LD_INT 22
26598: PUSH
26599: LD_OWVAR 2
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 69
26612: ST_TO_ADDR
// if not tmp then
26613: LD_VAR 0 2
26617: NOT
26618: IFFALSE 26622
// exit ;
26620: GO 26651
// for i in tmp do
26622: LD_ADDR_VAR 0 1
26626: PUSH
26627: LD_VAR 0 2
26631: PUSH
26632: FOR_IN
26633: IFFALSE 26649
// SetLives ( i , 300 ) ;
26635: LD_VAR 0 1
26639: PPUSH
26640: LD_INT 300
26642: PPUSH
26643: CALL_OW 234
26647: GO 26632
26649: POP
26650: POP
// end ;
26651: PPOPN 2
26653: END
// every 0 0$1 trigger s60 do var i , tmp ;
26654: LD_EXP 103
26658: IFFALSE 26727
26660: GO 26662
26662: DISABLE
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_INT 22
26674: PUSH
26675: LD_OWVAR 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PPUSH
26684: CALL_OW 69
26688: ST_TO_ADDR
// if not tmp then
26689: LD_VAR 0 2
26693: NOT
26694: IFFALSE 26698
// exit ;
26696: GO 26727
// for i in tmp do
26698: LD_ADDR_VAR 0 1
26702: PUSH
26703: LD_VAR 0 2
26707: PUSH
26708: FOR_IN
26709: IFFALSE 26725
// SetLives ( i , 600 ) ;
26711: LD_VAR 0 1
26715: PPUSH
26716: LD_INT 600
26718: PPUSH
26719: CALL_OW 234
26723: GO 26708
26725: POP
26726: POP
// end ;
26727: PPOPN 2
26729: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26730: LD_INT 0
26732: PPUSH
// case cmd of 301 :
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 301
26740: DOUBLE
26741: EQUAL
26742: IFTRUE 26746
26744: GO 26778
26746: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26747: LD_VAR 0 6
26751: PPUSH
26752: LD_VAR 0 7
26756: PPUSH
26757: LD_VAR 0 8
26761: PPUSH
26762: LD_VAR 0 4
26766: PPUSH
26767: LD_VAR 0 5
26771: PPUSH
26772: CALL 27987 0 5
26776: GO 26899
26778: LD_INT 302
26780: DOUBLE
26781: EQUAL
26782: IFTRUE 26786
26784: GO 26823
26786: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26787: LD_VAR 0 6
26791: PPUSH
26792: LD_VAR 0 7
26796: PPUSH
26797: LD_VAR 0 8
26801: PPUSH
26802: LD_VAR 0 9
26806: PPUSH
26807: LD_VAR 0 4
26811: PPUSH
26812: LD_VAR 0 5
26816: PPUSH
26817: CALL 28078 0 6
26821: GO 26899
26823: LD_INT 303
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 26868
26831: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26832: LD_VAR 0 6
26836: PPUSH
26837: LD_VAR 0 7
26841: PPUSH
26842: LD_VAR 0 8
26846: PPUSH
26847: LD_VAR 0 9
26851: PPUSH
26852: LD_VAR 0 4
26856: PPUSH
26857: LD_VAR 0 5
26861: PPUSH
26862: CALL 26904 0 6
26866: GO 26899
26868: LD_INT 304
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26876
26874: GO 26898
26876: POP
// hHackTeleport ( unit , x , y ) ; end ;
26877: LD_VAR 0 2
26881: PPUSH
26882: LD_VAR 0 4
26886: PPUSH
26887: LD_VAR 0 5
26891: PPUSH
26892: CALL 28671 0 3
26896: GO 26899
26898: POP
// end ;
26899: LD_VAR 0 12
26903: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26904: LD_INT 0
26906: PPUSH
26907: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26908: LD_VAR 0 1
26912: PUSH
26913: LD_INT 1
26915: LESS
26916: PUSH
26917: LD_VAR 0 1
26921: PUSH
26922: LD_INT 3
26924: GREATER
26925: OR
26926: PUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: LD_VAR 0 6
26936: PPUSH
26937: CALL_OW 428
26941: OR
26942: IFFALSE 26946
// exit ;
26944: GO 27674
// uc_side := your_side ;
26946: LD_ADDR_OWVAR 20
26950: PUSH
26951: LD_OWVAR 2
26955: ST_TO_ADDR
// uc_nation := nation ;
26956: LD_ADDR_OWVAR 21
26960: PUSH
26961: LD_VAR 0 1
26965: ST_TO_ADDR
// bc_level = 1 ;
26966: LD_ADDR_OWVAR 43
26970: PUSH
26971: LD_INT 1
26973: ST_TO_ADDR
// case btype of 1 :
26974: LD_VAR 0 2
26978: PUSH
26979: LD_INT 1
26981: DOUBLE
26982: EQUAL
26983: IFTRUE 26987
26985: GO 26998
26987: POP
// bc_type := b_depot ; 2 :
26988: LD_ADDR_OWVAR 42
26992: PUSH
26993: LD_INT 0
26995: ST_TO_ADDR
26996: GO 27618
26998: LD_INT 2
27000: DOUBLE
27001: EQUAL
27002: IFTRUE 27006
27004: GO 27017
27006: POP
// bc_type := b_warehouse ; 3 :
27007: LD_ADDR_OWVAR 42
27011: PUSH
27012: LD_INT 1
27014: ST_TO_ADDR
27015: GO 27618
27017: LD_INT 3
27019: DOUBLE
27020: EQUAL
27021: IFTRUE 27025
27023: GO 27036
27025: POP
// bc_type := b_lab ; 4 .. 9 :
27026: LD_ADDR_OWVAR 42
27030: PUSH
27031: LD_INT 6
27033: ST_TO_ADDR
27034: GO 27618
27036: LD_INT 4
27038: DOUBLE
27039: GREATEREQUAL
27040: IFFALSE 27048
27042: LD_INT 9
27044: DOUBLE
27045: LESSEQUAL
27046: IFTRUE 27050
27048: GO 27110
27050: POP
// begin bc_type := b_lab_half ;
27051: LD_ADDR_OWVAR 42
27055: PUSH
27056: LD_INT 7
27058: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27059: LD_ADDR_OWVAR 44
27063: PUSH
27064: LD_INT 10
27066: PUSH
27067: LD_INT 11
27069: PUSH
27070: LD_INT 12
27072: PUSH
27073: LD_INT 15
27075: PUSH
27076: LD_INT 14
27078: PUSH
27079: LD_INT 13
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: LD_VAR 0 2
27094: PUSH
27095: LD_INT 3
27097: MINUS
27098: ARRAY
27099: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
27100: LD_ADDR_OWVAR 45
27104: PUSH
27105: LD_INT 9
27107: ST_TO_ADDR
// end ; 10 .. 13 :
27108: GO 27618
27110: LD_INT 10
27112: DOUBLE
27113: GREATEREQUAL
27114: IFFALSE 27122
27116: LD_INT 13
27118: DOUBLE
27119: LESSEQUAL
27120: IFTRUE 27124
27122: GO 27201
27124: POP
// begin bc_type := b_lab_full ;
27125: LD_ADDR_OWVAR 42
27129: PUSH
27130: LD_INT 8
27132: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27133: LD_ADDR_OWVAR 44
27137: PUSH
27138: LD_INT 10
27140: PUSH
27141: LD_INT 12
27143: PUSH
27144: LD_INT 14
27146: PUSH
27147: LD_INT 13
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_VAR 0 2
27160: PUSH
27161: LD_INT 9
27163: MINUS
27164: ARRAY
27165: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27166: LD_ADDR_OWVAR 45
27170: PUSH
27171: LD_INT 11
27173: PUSH
27174: LD_INT 15
27176: PUSH
27177: LD_INT 12
27179: PUSH
27180: LD_INT 15
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: PUSH
27189: LD_VAR 0 2
27193: PUSH
27194: LD_INT 9
27196: MINUS
27197: ARRAY
27198: ST_TO_ADDR
// end ; 14 :
27199: GO 27618
27201: LD_INT 14
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27220
27209: POP
// bc_type := b_workshop ; 15 :
27210: LD_ADDR_OWVAR 42
27214: PUSH
27215: LD_INT 2
27217: ST_TO_ADDR
27218: GO 27618
27220: LD_INT 15
27222: DOUBLE
27223: EQUAL
27224: IFTRUE 27228
27226: GO 27239
27228: POP
// bc_type := b_factory ; 16 :
27229: LD_ADDR_OWVAR 42
27233: PUSH
27234: LD_INT 3
27236: ST_TO_ADDR
27237: GO 27618
27239: LD_INT 16
27241: DOUBLE
27242: EQUAL
27243: IFTRUE 27247
27245: GO 27258
27247: POP
// bc_type := b_ext_gun ; 17 :
27248: LD_ADDR_OWVAR 42
27252: PUSH
27253: LD_INT 17
27255: ST_TO_ADDR
27256: GO 27618
27258: LD_INT 17
27260: DOUBLE
27261: EQUAL
27262: IFTRUE 27266
27264: GO 27294
27266: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27267: LD_ADDR_OWVAR 42
27271: PUSH
27272: LD_INT 19
27274: PUSH
27275: LD_INT 23
27277: PUSH
27278: LD_INT 19
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: PUSH
27286: LD_VAR 0 1
27290: ARRAY
27291: ST_TO_ADDR
27292: GO 27618
27294: LD_INT 18
27296: DOUBLE
27297: EQUAL
27298: IFTRUE 27302
27300: GO 27313
27302: POP
// bc_type := b_ext_radar ; 19 :
27303: LD_ADDR_OWVAR 42
27307: PUSH
27308: LD_INT 20
27310: ST_TO_ADDR
27311: GO 27618
27313: LD_INT 19
27315: DOUBLE
27316: EQUAL
27317: IFTRUE 27321
27319: GO 27332
27321: POP
// bc_type := b_ext_radio ; 20 :
27322: LD_ADDR_OWVAR 42
27326: PUSH
27327: LD_INT 22
27329: ST_TO_ADDR
27330: GO 27618
27332: LD_INT 20
27334: DOUBLE
27335: EQUAL
27336: IFTRUE 27340
27338: GO 27351
27340: POP
// bc_type := b_ext_siberium ; 21 :
27341: LD_ADDR_OWVAR 42
27345: PUSH
27346: LD_INT 21
27348: ST_TO_ADDR
27349: GO 27618
27351: LD_INT 21
27353: DOUBLE
27354: EQUAL
27355: IFTRUE 27359
27357: GO 27370
27359: POP
// bc_type := b_ext_computer ; 22 :
27360: LD_ADDR_OWVAR 42
27364: PUSH
27365: LD_INT 24
27367: ST_TO_ADDR
27368: GO 27618
27370: LD_INT 22
27372: DOUBLE
27373: EQUAL
27374: IFTRUE 27378
27376: GO 27389
27378: POP
// bc_type := b_ext_track ; 23 :
27379: LD_ADDR_OWVAR 42
27383: PUSH
27384: LD_INT 16
27386: ST_TO_ADDR
27387: GO 27618
27389: LD_INT 23
27391: DOUBLE
27392: EQUAL
27393: IFTRUE 27397
27395: GO 27408
27397: POP
// bc_type := b_ext_laser ; 24 :
27398: LD_ADDR_OWVAR 42
27402: PUSH
27403: LD_INT 25
27405: ST_TO_ADDR
27406: GO 27618
27408: LD_INT 24
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27427
27416: POP
// bc_type := b_control_tower ; 25 :
27417: LD_ADDR_OWVAR 42
27421: PUSH
27422: LD_INT 36
27424: ST_TO_ADDR
27425: GO 27618
27427: LD_INT 25
27429: DOUBLE
27430: EQUAL
27431: IFTRUE 27435
27433: GO 27446
27435: POP
// bc_type := b_breastwork ; 26 :
27436: LD_ADDR_OWVAR 42
27440: PUSH
27441: LD_INT 31
27443: ST_TO_ADDR
27444: GO 27618
27446: LD_INT 26
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27465
27454: POP
// bc_type := b_bunker ; 27 :
27455: LD_ADDR_OWVAR 42
27459: PUSH
27460: LD_INT 32
27462: ST_TO_ADDR
27463: GO 27618
27465: LD_INT 27
27467: DOUBLE
27468: EQUAL
27469: IFTRUE 27473
27471: GO 27484
27473: POP
// bc_type := b_turret ; 28 :
27474: LD_ADDR_OWVAR 42
27478: PUSH
27479: LD_INT 33
27481: ST_TO_ADDR
27482: GO 27618
27484: LD_INT 28
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27492
27490: GO 27503
27492: POP
// bc_type := b_armoury ; 29 :
27493: LD_ADDR_OWVAR 42
27497: PUSH
27498: LD_INT 4
27500: ST_TO_ADDR
27501: GO 27618
27503: LD_INT 29
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27522
27511: POP
// bc_type := b_barracks ; 30 :
27512: LD_ADDR_OWVAR 42
27516: PUSH
27517: LD_INT 5
27519: ST_TO_ADDR
27520: GO 27618
27522: LD_INT 30
27524: DOUBLE
27525: EQUAL
27526: IFTRUE 27530
27528: GO 27541
27530: POP
// bc_type := b_solar_power ; 31 :
27531: LD_ADDR_OWVAR 42
27535: PUSH
27536: LD_INT 27
27538: ST_TO_ADDR
27539: GO 27618
27541: LD_INT 31
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27560
27549: POP
// bc_type := b_oil_power ; 32 :
27550: LD_ADDR_OWVAR 42
27554: PUSH
27555: LD_INT 26
27557: ST_TO_ADDR
27558: GO 27618
27560: LD_INT 32
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27568
27566: GO 27579
27568: POP
// bc_type := b_siberite_power ; 33 :
27569: LD_ADDR_OWVAR 42
27573: PUSH
27574: LD_INT 28
27576: ST_TO_ADDR
27577: GO 27618
27579: LD_INT 33
27581: DOUBLE
27582: EQUAL
27583: IFTRUE 27587
27585: GO 27598
27587: POP
// bc_type := b_oil_mine ; 34 :
27588: LD_ADDR_OWVAR 42
27592: PUSH
27593: LD_INT 29
27595: ST_TO_ADDR
27596: GO 27618
27598: LD_INT 34
27600: DOUBLE
27601: EQUAL
27602: IFTRUE 27606
27604: GO 27617
27606: POP
// bc_type := b_siberite_mine ; end ;
27607: LD_ADDR_OWVAR 42
27611: PUSH
27612: LD_INT 30
27614: ST_TO_ADDR
27615: GO 27618
27617: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27618: LD_ADDR_VAR 0 8
27622: PUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: LD_VAR 0 6
27632: PPUSH
27633: LD_VAR 0 3
27637: PPUSH
27638: CALL_OW 47
27642: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27643: LD_OWVAR 42
27647: PUSH
27648: LD_INT 32
27650: PUSH
27651: LD_INT 33
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: IN
27658: IFFALSE 27674
// PlaceWeaponTurret ( b , weapon ) ;
27660: LD_VAR 0 8
27664: PPUSH
27665: LD_VAR 0 4
27669: PPUSH
27670: CALL_OW 431
// end ;
27674: LD_VAR 0 7
27678: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27679: LD_INT 0
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27685: LD_ADDR_VAR 0 4
27689: PUSH
27690: LD_INT 22
27692: PUSH
27693: LD_OWVAR 2
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: LD_INT 30
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 30
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PPUSH
27734: CALL_OW 69
27738: ST_TO_ADDR
// if not tmp then
27739: LD_VAR 0 4
27743: NOT
27744: IFFALSE 27748
// exit ;
27746: GO 27807
// for i in tmp do
27748: LD_ADDR_VAR 0 2
27752: PUSH
27753: LD_VAR 0 4
27757: PUSH
27758: FOR_IN
27759: IFFALSE 27805
// for j = 1 to 3 do
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: DOUBLE
27767: LD_INT 1
27769: DEC
27770: ST_TO_ADDR
27771: LD_INT 3
27773: PUSH
27774: FOR_TO
27775: IFFALSE 27801
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 274
27786: PPUSH
27787: LD_VAR 0 3
27791: PPUSH
27792: LD_INT 99999
27794: PPUSH
27795: CALL_OW 277
27799: GO 27774
27801: POP
27802: POP
27803: GO 27758
27805: POP
27806: POP
// end ;
27807: LD_VAR 0 1
27811: RET
// export function hHackSetLevel10 ; var i , j ; begin
27812: LD_INT 0
27814: PPUSH
27815: PPUSH
27816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: PUSH
27837: FOR_IN
27838: IFFALSE 27890
// if IsSelected ( i ) then
27840: LD_VAR 0 2
27844: PPUSH
27845: CALL_OW 306
27849: IFFALSE 27888
// begin for j := 1 to 4 do
27851: LD_ADDR_VAR 0 3
27855: PUSH
27856: DOUBLE
27857: LD_INT 1
27859: DEC
27860: ST_TO_ADDR
27861: LD_INT 4
27863: PUSH
27864: FOR_TO
27865: IFFALSE 27886
// SetSkill ( i , j , 10 ) ;
27867: LD_VAR 0 2
27871: PPUSH
27872: LD_VAR 0 3
27876: PPUSH
27877: LD_INT 10
27879: PPUSH
27880: CALL_OW 237
27884: GO 27864
27886: POP
27887: POP
// end ;
27888: GO 27837
27890: POP
27891: POP
// end ;
27892: LD_VAR 0 1
27896: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27897: LD_INT 0
27899: PPUSH
27900: PPUSH
27901: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27902: LD_ADDR_VAR 0 2
27906: PUSH
27907: LD_INT 22
27909: PUSH
27910: LD_OWVAR 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 21
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 69
27937: PUSH
27938: FOR_IN
27939: IFFALSE 27980
// begin for j := 1 to 4 do
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: DOUBLE
27947: LD_INT 1
27949: DEC
27950: ST_TO_ADDR
27951: LD_INT 4
27953: PUSH
27954: FOR_TO
27955: IFFALSE 27976
// SetSkill ( i , j , 10 ) ;
27957: LD_VAR 0 2
27961: PPUSH
27962: LD_VAR 0 3
27966: PPUSH
27967: LD_INT 10
27969: PPUSH
27970: CALL_OW 237
27974: GO 27954
27976: POP
27977: POP
// end ;
27978: GO 27938
27980: POP
27981: POP
// end ;
27982: LD_VAR 0 1
27986: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27987: LD_INT 0
27989: PPUSH
// uc_side := your_side ;
27990: LD_ADDR_OWVAR 20
27994: PUSH
27995: LD_OWVAR 2
27999: ST_TO_ADDR
// uc_nation := nation ;
28000: LD_ADDR_OWVAR 21
28004: PUSH
28005: LD_VAR 0 1
28009: ST_TO_ADDR
// InitHc ;
28010: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28014: LD_INT 0
28016: PPUSH
28017: LD_VAR 0 2
28021: PPUSH
28022: LD_VAR 0 3
28026: PPUSH
28027: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28031: LD_VAR 0 4
28035: PPUSH
28036: LD_VAR 0 5
28040: PPUSH
28041: CALL_OW 428
28045: PUSH
28046: LD_INT 0
28048: EQUAL
28049: IFFALSE 28073
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28051: CALL_OW 44
28055: PPUSH
28056: LD_VAR 0 4
28060: PPUSH
28061: LD_VAR 0 5
28065: PPUSH
28066: LD_INT 1
28068: PPUSH
28069: CALL_OW 48
// end ;
28073: LD_VAR 0 6
28077: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28078: LD_INT 0
28080: PPUSH
28081: PPUSH
// uc_side := your_side ;
28082: LD_ADDR_OWVAR 20
28086: PUSH
28087: LD_OWVAR 2
28091: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28092: LD_VAR 0 1
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: LD_INT 3
28105: PUSH
28106: LD_INT 4
28108: PUSH
28109: LD_INT 5
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: IN
28119: IFFALSE 28131
// uc_nation := nation_american else
28121: LD_ADDR_OWVAR 21
28125: PUSH
28126: LD_INT 1
28128: ST_TO_ADDR
28129: GO 28174
// if chassis in [ 11 , 12 , 13 , 14 ] then
28131: LD_VAR 0 1
28135: PUSH
28136: LD_INT 11
28138: PUSH
28139: LD_INT 12
28141: PUSH
28142: LD_INT 13
28144: PUSH
28145: LD_INT 14
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: IN
28154: IFFALSE 28166
// uc_nation := nation_arabian else
28156: LD_ADDR_OWVAR 21
28160: PUSH
28161: LD_INT 2
28163: ST_TO_ADDR
28164: GO 28174
// uc_nation := nation_russian ;
28166: LD_ADDR_OWVAR 21
28170: PUSH
28171: LD_INT 3
28173: ST_TO_ADDR
// vc_chassis := chassis ;
28174: LD_ADDR_OWVAR 37
28178: PUSH
28179: LD_VAR 0 1
28183: ST_TO_ADDR
// vc_engine := engine ;
28184: LD_ADDR_OWVAR 39
28188: PUSH
28189: LD_VAR 0 2
28193: ST_TO_ADDR
// vc_control := control ;
28194: LD_ADDR_OWVAR 38
28198: PUSH
28199: LD_VAR 0 3
28203: ST_TO_ADDR
// vc_weapon := weapon ;
28204: LD_ADDR_OWVAR 40
28208: PUSH
28209: LD_VAR 0 4
28213: ST_TO_ADDR
// un := CreateVehicle ;
28214: LD_ADDR_VAR 0 8
28218: PUSH
28219: CALL_OW 45
28223: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28224: LD_VAR 0 8
28228: PPUSH
28229: LD_INT 0
28231: PPUSH
28232: LD_INT 5
28234: PPUSH
28235: CALL_OW 12
28239: PPUSH
28240: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28244: LD_VAR 0 8
28248: PPUSH
28249: LD_VAR 0 5
28253: PPUSH
28254: LD_VAR 0 6
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: CALL_OW 48
// end ;
28266: LD_VAR 0 7
28270: RET
// export hInvincible ; every 1 do
28271: GO 28273
28273: DISABLE
// hInvincible := [ ] ;
28274: LD_ADDR_EXP 104
28278: PUSH
28279: EMPTY
28280: ST_TO_ADDR
28281: END
// every 10 do var i ;
28282: GO 28284
28284: DISABLE
28285: LD_INT 0
28287: PPUSH
// begin enable ;
28288: ENABLE
// if not hInvincible then
28289: LD_EXP 104
28293: NOT
28294: IFFALSE 28298
// exit ;
28296: GO 28342
// for i in hInvincible do
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: LD_EXP 104
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28340
// if GetLives ( i ) < 1000 then
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 256
28320: PUSH
28321: LD_INT 1000
28323: LESS
28324: IFFALSE 28338
// SetLives ( i , 1000 ) ;
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_INT 1000
28333: PPUSH
28334: CALL_OW 234
28338: GO 28308
28340: POP
28341: POP
// end ;
28342: PPOPN 1
28344: END
// export function hHackInvincible ; var i ; begin
28345: LD_INT 0
28347: PPUSH
28348: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28349: LD_ADDR_VAR 0 2
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 21
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 21
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 69
28386: PUSH
28387: FOR_IN
28388: IFFALSE 28449
// if IsSelected ( i ) then
28390: LD_VAR 0 2
28394: PPUSH
28395: CALL_OW 306
28399: IFFALSE 28447
// begin if i in hInvincible then
28401: LD_VAR 0 2
28405: PUSH
28406: LD_EXP 104
28410: IN
28411: IFFALSE 28431
// hInvincible := hInvincible diff i else
28413: LD_ADDR_EXP 104
28417: PUSH
28418: LD_EXP 104
28422: PUSH
28423: LD_VAR 0 2
28427: DIFF
28428: ST_TO_ADDR
28429: GO 28447
// hInvincible := hInvincible union i ;
28431: LD_ADDR_EXP 104
28435: PUSH
28436: LD_EXP 104
28440: PUSH
28441: LD_VAR 0 2
28445: UNION
28446: ST_TO_ADDR
// end ;
28447: GO 28387
28449: POP
28450: POP
// end ;
28451: LD_VAR 0 1
28455: RET
// export function hHackInvisible ; var i , j ; begin
28456: LD_INT 0
28458: PPUSH
28459: PPUSH
28460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28461: LD_ADDR_VAR 0 2
28465: PUSH
28466: LD_INT 21
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PPUSH
28476: CALL_OW 69
28480: PUSH
28481: FOR_IN
28482: IFFALSE 28506
// if IsSelected ( i ) then
28484: LD_VAR 0 2
28488: PPUSH
28489: CALL_OW 306
28493: IFFALSE 28504
// ComForceInvisible ( i ) ;
28495: LD_VAR 0 2
28499: PPUSH
28500: CALL_OW 496
28504: GO 28481
28506: POP
28507: POP
// end ;
28508: LD_VAR 0 1
28512: RET
// export function hHackChangeYourSide ; begin
28513: LD_INT 0
28515: PPUSH
// if your_side = 8 then
28516: LD_OWVAR 2
28520: PUSH
28521: LD_INT 8
28523: EQUAL
28524: IFFALSE 28536
// your_side := 0 else
28526: LD_ADDR_OWVAR 2
28530: PUSH
28531: LD_INT 0
28533: ST_TO_ADDR
28534: GO 28550
// your_side := your_side + 1 ;
28536: LD_ADDR_OWVAR 2
28540: PUSH
28541: LD_OWVAR 2
28545: PUSH
28546: LD_INT 1
28548: PLUS
28549: ST_TO_ADDR
// end ;
28550: LD_VAR 0 1
28554: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28555: LD_INT 0
28557: PPUSH
28558: PPUSH
28559: PPUSH
// for i in all_units do
28560: LD_ADDR_VAR 0 2
28564: PUSH
28565: LD_OWVAR 3
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28649
// if IsSelected ( i ) then
28573: LD_VAR 0 2
28577: PPUSH
28578: CALL_OW 306
28582: IFFALSE 28647
// begin j := GetSide ( i ) ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_VAR 0 2
28593: PPUSH
28594: CALL_OW 255
28598: ST_TO_ADDR
// if j = 8 then
28599: LD_VAR 0 3
28603: PUSH
28604: LD_INT 8
28606: EQUAL
28607: IFFALSE 28619
// j := 0 else
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: LD_INT 0
28616: ST_TO_ADDR
28617: GO 28633
// j := j + 1 ;
28619: LD_ADDR_VAR 0 3
28623: PUSH
28624: LD_VAR 0 3
28628: PUSH
28629: LD_INT 1
28631: PLUS
28632: ST_TO_ADDR
// SetSide ( i , j ) ;
28633: LD_VAR 0 2
28637: PPUSH
28638: LD_VAR 0 3
28642: PPUSH
28643: CALL_OW 235
// end ;
28647: GO 28570
28649: POP
28650: POP
// end ;
28651: LD_VAR 0 1
28655: RET
// export function hHackFog ; begin
28656: LD_INT 0
28658: PPUSH
// FogOff ( true ) ;
28659: LD_INT 1
28661: PPUSH
28662: CALL_OW 344
// end ;
28666: LD_VAR 0 1
28670: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28671: LD_INT 0
28673: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28674: LD_VAR 0 1
28678: PPUSH
28679: LD_VAR 0 2
28683: PPUSH
28684: LD_VAR 0 3
28688: PPUSH
28689: LD_INT 1
28691: PPUSH
28692: LD_INT 1
28694: PPUSH
28695: CALL_OW 483
// CenterOnXY ( x , y ) ;
28699: LD_VAR 0 2
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 84
// end ;
28713: LD_VAR 0 4
28717: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28722: LD_VAR 0 1
28726: NOT
28727: PUSH
28728: LD_VAR 0 2
28732: PPUSH
28733: LD_VAR 0 3
28737: PPUSH
28738: CALL_OW 488
28742: NOT
28743: OR
28744: PUSH
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 266
28754: PUSH
28755: LD_INT 3
28757: NONEQUAL
28758: PUSH
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 247
28768: PUSH
28769: LD_INT 1
28771: EQUAL
28772: NOT
28773: AND
28774: OR
28775: IFFALSE 28779
// exit ;
28777: GO 28928
// if GetType ( factory ) = unit_human then
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 247
28788: PUSH
28789: LD_INT 1
28791: EQUAL
28792: IFFALSE 28809
// factory := IsInUnit ( factory ) ;
28794: LD_ADDR_VAR 0 1
28798: PUSH
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 310
28808: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 266
28818: PUSH
28819: LD_INT 3
28821: NONEQUAL
28822: IFFALSE 28826
// exit ;
28824: GO 28928
// if HexInfo ( x , y ) = factory then
28826: LD_VAR 0 2
28830: PPUSH
28831: LD_VAR 0 3
28835: PPUSH
28836: CALL_OW 428
28840: PUSH
28841: LD_VAR 0 1
28845: EQUAL
28846: IFFALSE 28873
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28848: LD_ADDR_EXP 105
28852: PUSH
28853: LD_EXP 105
28857: PPUSH
28858: LD_VAR 0 1
28862: PPUSH
28863: LD_INT 0
28865: PPUSH
28866: CALL_OW 1
28870: ST_TO_ADDR
28871: GO 28924
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28873: LD_ADDR_EXP 105
28877: PUSH
28878: LD_EXP 105
28882: PPUSH
28883: LD_VAR 0 1
28887: PPUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 255
28897: PUSH
28898: LD_VAR 0 1
28902: PUSH
28903: LD_VAR 0 2
28907: PUSH
28908: LD_VAR 0 3
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 1
28923: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28924: CALL 28933 0 0
// end ;
28928: LD_VAR 0 4
28932: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28933: LD_INT 0
28935: PPUSH
28936: PPUSH
28937: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28938: LD_STRING resetFactoryWaypoint();
28940: PPUSH
28941: CALL_OW 559
// if factoryWaypoints then
28945: LD_EXP 105
28949: IFFALSE 29075
// begin list := PrepareArray ( factoryWaypoints ) ;
28951: LD_ADDR_VAR 0 3
28955: PUSH
28956: LD_EXP 105
28960: PPUSH
28961: CALL 71489 0 1
28965: ST_TO_ADDR
// for i := 1 to list do
28966: LD_ADDR_VAR 0 2
28970: PUSH
28971: DOUBLE
28972: LD_INT 1
28974: DEC
28975: ST_TO_ADDR
28976: LD_VAR 0 3
28980: PUSH
28981: FOR_TO
28982: IFFALSE 29073
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28984: LD_STRING setFactoryWaypointXY(
28986: PUSH
28987: LD_VAR 0 3
28991: PUSH
28992: LD_VAR 0 2
28996: ARRAY
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: STR
29002: PUSH
29003: LD_STRING ,
29005: STR
29006: PUSH
29007: LD_VAR 0 3
29011: PUSH
29012: LD_VAR 0 2
29016: ARRAY
29017: PUSH
29018: LD_INT 2
29020: ARRAY
29021: STR
29022: PUSH
29023: LD_STRING ,
29025: STR
29026: PUSH
29027: LD_VAR 0 3
29031: PUSH
29032: LD_VAR 0 2
29036: ARRAY
29037: PUSH
29038: LD_INT 3
29040: ARRAY
29041: STR
29042: PUSH
29043: LD_STRING ,
29045: STR
29046: PUSH
29047: LD_VAR 0 3
29051: PUSH
29052: LD_VAR 0 2
29056: ARRAY
29057: PUSH
29058: LD_INT 4
29060: ARRAY
29061: STR
29062: PUSH
29063: LD_STRING )
29065: STR
29066: PPUSH
29067: CALL_OW 559
29071: GO 28981
29073: POP
29074: POP
// end ; end ;
29075: LD_VAR 0 1
29079: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29080: LD_INT 0
29082: PPUSH
// if HexInfo ( x , y ) = warehouse then
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: CALL_OW 428
29097: PUSH
29098: LD_VAR 0 1
29102: EQUAL
29103: IFFALSE 29130
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29105: LD_ADDR_EXP 106
29109: PUSH
29110: LD_EXP 106
29114: PPUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_INT 0
29122: PPUSH
29123: CALL_OW 1
29127: ST_TO_ADDR
29128: GO 29181
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29130: LD_ADDR_EXP 106
29134: PUSH
29135: LD_EXP 106
29139: PPUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 255
29154: PUSH
29155: LD_VAR 0 1
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: LD_VAR 0 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: PPUSH
29176: CALL_OW 1
29180: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29181: CALL 29190 0 0
// end ;
29185: LD_VAR 0 4
29189: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29190: LD_INT 0
29192: PPUSH
29193: PPUSH
29194: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29195: LD_STRING resetWarehouseGatheringPoints();
29197: PPUSH
29198: CALL_OW 559
// if warehouseGatheringPoints then
29202: LD_EXP 106
29206: IFFALSE 29332
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_EXP 106
29217: PPUSH
29218: CALL 71489 0 1
29222: ST_TO_ADDR
// for i := 1 to list do
29223: LD_ADDR_VAR 0 2
29227: PUSH
29228: DOUBLE
29229: LD_INT 1
29231: DEC
29232: ST_TO_ADDR
29233: LD_VAR 0 3
29237: PUSH
29238: FOR_TO
29239: IFFALSE 29330
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29241: LD_STRING setWarehouseGatheringPointXY(
29243: PUSH
29244: LD_VAR 0 3
29248: PUSH
29249: LD_VAR 0 2
29253: ARRAY
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: STR
29259: PUSH
29260: LD_STRING ,
29262: STR
29263: PUSH
29264: LD_VAR 0 3
29268: PUSH
29269: LD_VAR 0 2
29273: ARRAY
29274: PUSH
29275: LD_INT 2
29277: ARRAY
29278: STR
29279: PUSH
29280: LD_STRING ,
29282: STR
29283: PUSH
29284: LD_VAR 0 3
29288: PUSH
29289: LD_VAR 0 2
29293: ARRAY
29294: PUSH
29295: LD_INT 3
29297: ARRAY
29298: STR
29299: PUSH
29300: LD_STRING ,
29302: STR
29303: PUSH
29304: LD_VAR 0 3
29308: PUSH
29309: LD_VAR 0 2
29313: ARRAY
29314: PUSH
29315: LD_INT 4
29317: ARRAY
29318: STR
29319: PUSH
29320: LD_STRING )
29322: STR
29323: PPUSH
29324: CALL_OW 559
29328: GO 29238
29330: POP
29331: POP
// end ; end ;
29332: LD_VAR 0 1
29336: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29337: LD_EXP 106
29341: IFFALSE 30026
29343: GO 29345
29345: DISABLE
29346: LD_INT 0
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
// begin enable ;
29357: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_EXP 106
29367: PPUSH
29368: CALL 71489 0 1
29372: ST_TO_ADDR
// if not list then
29373: LD_VAR 0 3
29377: NOT
29378: IFFALSE 29382
// exit ;
29380: GO 30026
// for i := 1 to list do
29382: LD_ADDR_VAR 0 1
29386: PUSH
29387: DOUBLE
29388: LD_INT 1
29390: DEC
29391: ST_TO_ADDR
29392: LD_VAR 0 3
29396: PUSH
29397: FOR_TO
29398: IFFALSE 30024
// begin depot := list [ i ] [ 2 ] ;
29400: LD_ADDR_VAR 0 8
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_VAR 0 1
29414: ARRAY
29415: PUSH
29416: LD_INT 2
29418: ARRAY
29419: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29420: LD_ADDR_VAR 0 5
29424: PUSH
29425: LD_VAR 0 3
29429: PUSH
29430: LD_VAR 0 1
29434: ARRAY
29435: PUSH
29436: LD_INT 1
29438: ARRAY
29439: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29440: LD_VAR 0 8
29444: PPUSH
29445: CALL_OW 301
29449: PUSH
29450: LD_VAR 0 5
29454: PUSH
29455: LD_VAR 0 8
29459: PPUSH
29460: CALL_OW 255
29464: NONEQUAL
29465: OR
29466: IFFALSE 29495
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29468: LD_ADDR_EXP 106
29472: PUSH
29473: LD_EXP 106
29477: PPUSH
29478: LD_VAR 0 8
29482: PPUSH
29483: LD_INT 0
29485: PPUSH
29486: CALL_OW 1
29490: ST_TO_ADDR
// exit ;
29491: POP
29492: POP
29493: GO 30026
// end ; x := list [ i ] [ 3 ] ;
29495: LD_ADDR_VAR 0 6
29499: PUSH
29500: LD_VAR 0 3
29504: PUSH
29505: LD_VAR 0 1
29509: ARRAY
29510: PUSH
29511: LD_INT 3
29513: ARRAY
29514: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29515: LD_ADDR_VAR 0 7
29519: PUSH
29520: LD_VAR 0 3
29524: PUSH
29525: LD_VAR 0 1
29529: ARRAY
29530: PUSH
29531: LD_INT 4
29533: ARRAY
29534: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_VAR 0 6
29544: PPUSH
29545: LD_VAR 0 7
29549: PPUSH
29550: LD_INT 16
29552: PPUSH
29553: CALL 70077 0 3
29557: ST_TO_ADDR
// if not cratesNearbyPoint then
29558: LD_VAR 0 9
29562: NOT
29563: IFFALSE 29569
// exit ;
29565: POP
29566: POP
29567: GO 30026
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29569: LD_ADDR_VAR 0 4
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_VAR 0 5
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 3
29588: PUSH
29589: LD_INT 60
29591: PUSH
29592: EMPTY
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 91
29601: PUSH
29602: LD_VAR 0 8
29606: PUSH
29607: LD_INT 6
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 25
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 25
29630: PUSH
29631: LD_INT 16
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: PPUSH
29649: CALL_OW 69
29653: PUSH
29654: LD_VAR 0 8
29658: PPUSH
29659: CALL_OW 313
29663: PPUSH
29664: LD_INT 3
29666: PUSH
29667: LD_INT 60
29669: PUSH
29670: EMPTY
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 25
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 25
29692: PUSH
29693: LD_INT 16
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PPUSH
29709: CALL_OW 72
29713: UNION
29714: ST_TO_ADDR
// if tmp then
29715: LD_VAR 0 4
29719: IFFALSE 29799
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29721: LD_ADDR_VAR 0 4
29725: PUSH
29726: LD_VAR 0 4
29730: PPUSH
29731: LD_INT 3
29733: PPUSH
29734: CALL 68046 0 2
29738: ST_TO_ADDR
// for j in tmp do
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_VAR 0 4
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29793
// begin if IsInUnit ( j ) then
29752: LD_VAR 0 2
29756: PPUSH
29757: CALL_OW 310
29761: IFFALSE 29772
// ComExit ( j ) ;
29763: LD_VAR 0 2
29767: PPUSH
29768: CALL 68129 0 1
// AddComCollect ( j , x , y ) ;
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 6
29781: PPUSH
29782: LD_VAR 0 7
29786: PPUSH
29787: CALL_OW 177
// end ;
29791: GO 29749
29793: POP
29794: POP
// exit ;
29795: POP
29796: POP
29797: GO 30026
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29799: LD_ADDR_VAR 0 4
29803: PUSH
29804: LD_INT 22
29806: PUSH
29807: LD_VAR 0 5
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 91
29818: PUSH
29819: LD_VAR 0 8
29823: PUSH
29824: LD_INT 8
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 34
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 34
29847: PUSH
29848: LD_INT 51
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 34
29857: PUSH
29858: LD_INT 32
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 34
29867: PUSH
29868: LD_INT 89
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 69
29891: ST_TO_ADDR
// if tmp then
29892: LD_VAR 0 4
29896: IFFALSE 30022
// begin for j in tmp do
29898: LD_ADDR_VAR 0 2
29902: PUSH
29903: LD_VAR 0 4
29907: PUSH
29908: FOR_IN
29909: IFFALSE 30020
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29911: LD_VAR 0 2
29915: PPUSH
29916: CALL_OW 262
29920: PUSH
29921: LD_INT 3
29923: EQUAL
29924: PUSH
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 261
29934: PUSH
29935: LD_INT 20
29937: GREATER
29938: OR
29939: PUSH
29940: LD_VAR 0 2
29944: PPUSH
29945: CALL_OW 314
29949: NOT
29950: AND
29951: PUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: CALL_OW 263
29961: PUSH
29962: LD_INT 1
29964: NONEQUAL
29965: PUSH
29966: LD_VAR 0 2
29970: PPUSH
29971: CALL_OW 311
29975: OR
29976: AND
29977: IFFALSE 30018
// begin ComCollect ( j , x , y ) ;
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 6
29988: PPUSH
29989: LD_VAR 0 7
29993: PPUSH
29994: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29998: LD_VAR 0 2
30002: PPUSH
30003: LD_VAR 0 8
30007: PPUSH
30008: CALL_OW 172
// exit ;
30012: POP
30013: POP
30014: POP
30015: POP
30016: GO 30026
// end ;
30018: GO 29908
30020: POP
30021: POP
// end ; end ;
30022: GO 29397
30024: POP
30025: POP
// end ; end_of_file end_of_file
30026: PPOPN 9
30028: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
// if exist_mode then
30033: LD_VAR 0 2
30037: IFFALSE 30062
// unit := CreateCharacter ( prefix & ident ) else
30039: LD_ADDR_VAR 0 5
30043: PUSH
30044: LD_VAR 0 3
30048: PUSH
30049: LD_VAR 0 1
30053: STR
30054: PPUSH
30055: CALL_OW 34
30059: ST_TO_ADDR
30060: GO 30077
// unit := NewCharacter ( ident ) ;
30062: LD_ADDR_VAR 0 5
30066: PUSH
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 25
30076: ST_TO_ADDR
// result := unit ;
30077: LD_ADDR_VAR 0 4
30081: PUSH
30082: LD_VAR 0 5
30086: ST_TO_ADDR
// end ;
30087: LD_VAR 0 4
30091: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
// if not side or not nation then
30096: LD_VAR 0 1
30100: NOT
30101: PUSH
30102: LD_VAR 0 2
30106: NOT
30107: OR
30108: IFFALSE 30112
// exit ;
30110: GO 30880
// case nation of nation_american :
30112: LD_VAR 0 2
30116: PUSH
30117: LD_INT 1
30119: DOUBLE
30120: EQUAL
30121: IFTRUE 30125
30123: GO 30339
30125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30126: LD_ADDR_VAR 0 4
30130: PUSH
30131: LD_INT 35
30133: PUSH
30134: LD_INT 45
30136: PUSH
30137: LD_INT 46
30139: PUSH
30140: LD_INT 47
30142: PUSH
30143: LD_INT 82
30145: PUSH
30146: LD_INT 83
30148: PUSH
30149: LD_INT 84
30151: PUSH
30152: LD_INT 85
30154: PUSH
30155: LD_INT 86
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 6
30166: PUSH
30167: LD_INT 15
30169: PUSH
30170: LD_INT 16
30172: PUSH
30173: LD_INT 7
30175: PUSH
30176: LD_INT 12
30178: PUSH
30179: LD_INT 13
30181: PUSH
30182: LD_INT 10
30184: PUSH
30185: LD_INT 14
30187: PUSH
30188: LD_INT 20
30190: PUSH
30191: LD_INT 21
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_INT 25
30199: PUSH
30200: LD_INT 32
30202: PUSH
30203: LD_INT 27
30205: PUSH
30206: LD_INT 36
30208: PUSH
30209: LD_INT 69
30211: PUSH
30212: LD_INT 39
30214: PUSH
30215: LD_INT 34
30217: PUSH
30218: LD_INT 40
30220: PUSH
30221: LD_INT 48
30223: PUSH
30224: LD_INT 49
30226: PUSH
30227: LD_INT 50
30229: PUSH
30230: LD_INT 51
30232: PUSH
30233: LD_INT 52
30235: PUSH
30236: LD_INT 53
30238: PUSH
30239: LD_INT 54
30241: PUSH
30242: LD_INT 55
30244: PUSH
30245: LD_INT 56
30247: PUSH
30248: LD_INT 57
30250: PUSH
30251: LD_INT 58
30253: PUSH
30254: LD_INT 59
30256: PUSH
30257: LD_INT 60
30259: PUSH
30260: LD_INT 61
30262: PUSH
30263: LD_INT 62
30265: PUSH
30266: LD_INT 80
30268: PUSH
30269: LD_INT 82
30271: PUSH
30272: LD_INT 83
30274: PUSH
30275: LD_INT 84
30277: PUSH
30278: LD_INT 85
30280: PUSH
30281: LD_INT 86
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
30337: GO 30804
30339: LD_INT 2
30341: DOUBLE
30342: EQUAL
30343: IFTRUE 30347
30345: GO 30573
30347: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30348: LD_ADDR_VAR 0 4
30352: PUSH
30353: LD_INT 35
30355: PUSH
30356: LD_INT 45
30358: PUSH
30359: LD_INT 46
30361: PUSH
30362: LD_INT 47
30364: PUSH
30365: LD_INT 82
30367: PUSH
30368: LD_INT 83
30370: PUSH
30371: LD_INT 84
30373: PUSH
30374: LD_INT 85
30376: PUSH
30377: LD_INT 87
30379: PUSH
30380: LD_INT 70
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 11
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 4
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: LD_INT 6
30400: PUSH
30401: LD_INT 15
30403: PUSH
30404: LD_INT 18
30406: PUSH
30407: LD_INT 7
30409: PUSH
30410: LD_INT 17
30412: PUSH
30413: LD_INT 8
30415: PUSH
30416: LD_INT 20
30418: PUSH
30419: LD_INT 21
30421: PUSH
30422: LD_INT 22
30424: PUSH
30425: LD_INT 72
30427: PUSH
30428: LD_INT 26
30430: PUSH
30431: LD_INT 69
30433: PUSH
30434: LD_INT 39
30436: PUSH
30437: LD_INT 40
30439: PUSH
30440: LD_INT 41
30442: PUSH
30443: LD_INT 42
30445: PUSH
30446: LD_INT 43
30448: PUSH
30449: LD_INT 48
30451: PUSH
30452: LD_INT 49
30454: PUSH
30455: LD_INT 50
30457: PUSH
30458: LD_INT 51
30460: PUSH
30461: LD_INT 52
30463: PUSH
30464: LD_INT 53
30466: PUSH
30467: LD_INT 54
30469: PUSH
30470: LD_INT 55
30472: PUSH
30473: LD_INT 56
30475: PUSH
30476: LD_INT 60
30478: PUSH
30479: LD_INT 61
30481: PUSH
30482: LD_INT 62
30484: PUSH
30485: LD_INT 66
30487: PUSH
30488: LD_INT 67
30490: PUSH
30491: LD_INT 68
30493: PUSH
30494: LD_INT 81
30496: PUSH
30497: LD_INT 82
30499: PUSH
30500: LD_INT 83
30502: PUSH
30503: LD_INT 84
30505: PUSH
30506: LD_INT 85
30508: PUSH
30509: LD_INT 87
30511: PUSH
30512: LD_INT 88
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: ST_TO_ADDR
30571: GO 30804
30573: LD_INT 3
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30803
30581: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30582: LD_ADDR_VAR 0 4
30586: PUSH
30587: LD_INT 46
30589: PUSH
30590: LD_INT 47
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 82
30601: PUSH
30602: LD_INT 83
30604: PUSH
30605: LD_INT 84
30607: PUSH
30608: LD_INT 85
30610: PUSH
30611: LD_INT 86
30613: PUSH
30614: LD_INT 11
30616: PUSH
30617: LD_INT 9
30619: PUSH
30620: LD_INT 20
30622: PUSH
30623: LD_INT 19
30625: PUSH
30626: LD_INT 21
30628: PUSH
30629: LD_INT 24
30631: PUSH
30632: LD_INT 22
30634: PUSH
30635: LD_INT 25
30637: PUSH
30638: LD_INT 28
30640: PUSH
30641: LD_INT 29
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: LD_INT 31
30649: PUSH
30650: LD_INT 37
30652: PUSH
30653: LD_INT 38
30655: PUSH
30656: LD_INT 32
30658: PUSH
30659: LD_INT 27
30661: PUSH
30662: LD_INT 33
30664: PUSH
30665: LD_INT 69
30667: PUSH
30668: LD_INT 39
30670: PUSH
30671: LD_INT 34
30673: PUSH
30674: LD_INT 40
30676: PUSH
30677: LD_INT 71
30679: PUSH
30680: LD_INT 23
30682: PUSH
30683: LD_INT 44
30685: PUSH
30686: LD_INT 48
30688: PUSH
30689: LD_INT 49
30691: PUSH
30692: LD_INT 50
30694: PUSH
30695: LD_INT 51
30697: PUSH
30698: LD_INT 52
30700: PUSH
30701: LD_INT 53
30703: PUSH
30704: LD_INT 54
30706: PUSH
30707: LD_INT 55
30709: PUSH
30710: LD_INT 56
30712: PUSH
30713: LD_INT 57
30715: PUSH
30716: LD_INT 58
30718: PUSH
30719: LD_INT 59
30721: PUSH
30722: LD_INT 63
30724: PUSH
30725: LD_INT 64
30727: PUSH
30728: LD_INT 65
30730: PUSH
30731: LD_INT 82
30733: PUSH
30734: LD_INT 83
30736: PUSH
30737: LD_INT 84
30739: PUSH
30740: LD_INT 85
30742: PUSH
30743: LD_INT 86
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
30801: GO 30804
30803: POP
// if state > - 1 and state < 3 then
30804: LD_VAR 0 3
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: GREATER
30813: PUSH
30814: LD_VAR 0 3
30818: PUSH
30819: LD_INT 3
30821: LESS
30822: AND
30823: IFFALSE 30880
// for i in result do
30825: LD_ADDR_VAR 0 5
30829: PUSH
30830: LD_VAR 0 4
30834: PUSH
30835: FOR_IN
30836: IFFALSE 30878
// if GetTech ( i , side ) <> state then
30838: LD_VAR 0 5
30842: PPUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 321
30852: PUSH
30853: LD_VAR 0 3
30857: NONEQUAL
30858: IFFALSE 30876
// result := result diff i ;
30860: LD_ADDR_VAR 0 4
30864: PUSH
30865: LD_VAR 0 4
30869: PUSH
30870: LD_VAR 0 5
30874: DIFF
30875: ST_TO_ADDR
30876: GO 30835
30878: POP
30879: POP
// end ;
30880: LD_VAR 0 4
30884: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30885: LD_INT 0
30887: PPUSH
30888: PPUSH
30889: PPUSH
// result := true ;
30890: LD_ADDR_VAR 0 3
30894: PUSH
30895: LD_INT 1
30897: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30898: LD_ADDR_VAR 0 5
30902: PUSH
30903: LD_VAR 0 2
30907: PPUSH
30908: CALL_OW 480
30912: ST_TO_ADDR
// if not tmp then
30913: LD_VAR 0 5
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 30971
// for i in tmp do
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_VAR 0 5
30931: PUSH
30932: FOR_IN
30933: IFFALSE 30969
// if GetTech ( i , side ) <> state_researched then
30935: LD_VAR 0 4
30939: PPUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: CALL_OW 321
30949: PUSH
30950: LD_INT 2
30952: NONEQUAL
30953: IFFALSE 30967
// begin result := false ;
30955: LD_ADDR_VAR 0 3
30959: PUSH
30960: LD_INT 0
30962: ST_TO_ADDR
// exit ;
30963: POP
30964: POP
30965: GO 30971
// end ;
30967: GO 30932
30969: POP
30970: POP
// end ;
30971: LD_VAR 0 3
30975: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30991: LD_VAR 0 1
30995: NOT
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 257
31006: PUSH
31007: LD_INT 9
31009: NONEQUAL
31010: OR
31011: IFFALSE 31015
// exit ;
31013: GO 31588
// side := GetSide ( unit ) ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_VAR 0 1
31024: PPUSH
31025: CALL_OW 255
31029: ST_TO_ADDR
// tech_space := tech_spacanom ;
31030: LD_ADDR_VAR 0 12
31034: PUSH
31035: LD_INT 29
31037: ST_TO_ADDR
// tech_time := tech_taurad ;
31038: LD_ADDR_VAR 0 13
31042: PUSH
31043: LD_INT 28
31045: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31046: LD_ADDR_VAR 0 11
31050: PUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 310
31060: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31061: LD_VAR 0 11
31065: PPUSH
31066: CALL_OW 247
31070: PUSH
31071: LD_INT 2
31073: EQUAL
31074: IFFALSE 31078
// exit ;
31076: GO 31588
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31078: LD_ADDR_VAR 0 8
31082: PUSH
31083: LD_INT 81
31085: PUSH
31086: LD_VAR 0 9
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: LD_INT 21
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PPUSH
31116: CALL_OW 69
31120: ST_TO_ADDR
// if not tmp then
31121: LD_VAR 0 8
31125: NOT
31126: IFFALSE 31130
// exit ;
31128: GO 31588
// if in_unit then
31130: LD_VAR 0 11
31134: IFFALSE 31158
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31136: LD_ADDR_VAR 0 10
31140: PUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: LD_VAR 0 11
31150: PPUSH
31151: CALL_OW 74
31155: ST_TO_ADDR
31156: GO 31178
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31158: LD_ADDR_VAR 0 10
31162: PUSH
31163: LD_VAR 0 8
31167: PPUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 74
31177: ST_TO_ADDR
// if not enemy then
31178: LD_VAR 0 10
31182: NOT
31183: IFFALSE 31187
// exit ;
31185: GO 31588
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31187: LD_VAR 0 11
31191: PUSH
31192: LD_VAR 0 11
31196: PPUSH
31197: LD_VAR 0 10
31201: PPUSH
31202: CALL_OW 296
31206: PUSH
31207: LD_INT 13
31209: GREATER
31210: AND
31211: PUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: LD_VAR 0 10
31221: PPUSH
31222: CALL_OW 296
31226: PUSH
31227: LD_INT 12
31229: GREATER
31230: OR
31231: IFFALSE 31235
// exit ;
31233: GO 31588
// missile := [ 1 ] ;
31235: LD_ADDR_VAR 0 14
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31246: LD_VAR 0 9
31250: PPUSH
31251: LD_VAR 0 12
31255: PPUSH
31256: CALL_OW 325
31260: IFFALSE 31289
// missile := Replace ( missile , missile + 1 , 2 ) ;
31262: LD_ADDR_VAR 0 14
31266: PUSH
31267: LD_VAR 0 14
31271: PPUSH
31272: LD_VAR 0 14
31276: PUSH
31277: LD_INT 1
31279: PLUS
31280: PPUSH
31281: LD_INT 2
31283: PPUSH
31284: CALL_OW 1
31288: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31289: LD_VAR 0 9
31293: PPUSH
31294: LD_VAR 0 13
31298: PPUSH
31299: CALL_OW 325
31303: PUSH
31304: LD_VAR 0 10
31308: PPUSH
31309: CALL_OW 255
31313: PPUSH
31314: LD_VAR 0 13
31318: PPUSH
31319: CALL_OW 325
31323: NOT
31324: AND
31325: IFFALSE 31354
// missile := Replace ( missile , missile + 1 , 3 ) ;
31327: LD_ADDR_VAR 0 14
31331: PUSH
31332: LD_VAR 0 14
31336: PPUSH
31337: LD_VAR 0 14
31341: PUSH
31342: LD_INT 1
31344: PLUS
31345: PPUSH
31346: LD_INT 3
31348: PPUSH
31349: CALL_OW 1
31353: ST_TO_ADDR
// if missile < 2 then
31354: LD_VAR 0 14
31358: PUSH
31359: LD_INT 2
31361: LESS
31362: IFFALSE 31366
// exit ;
31364: GO 31588
// x := GetX ( enemy ) ;
31366: LD_ADDR_VAR 0 4
31370: PUSH
31371: LD_VAR 0 10
31375: PPUSH
31376: CALL_OW 250
31380: ST_TO_ADDR
// y := GetY ( enemy ) ;
31381: LD_ADDR_VAR 0 5
31385: PUSH
31386: LD_VAR 0 10
31390: PPUSH
31391: CALL_OW 251
31395: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31396: LD_ADDR_VAR 0 6
31400: PUSH
31401: LD_VAR 0 4
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PPUSH
31410: LD_INT 1
31412: PPUSH
31413: CALL_OW 12
31417: PLUS
31418: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31419: LD_ADDR_VAR 0 7
31423: PUSH
31424: LD_VAR 0 5
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PPUSH
31433: LD_INT 1
31435: PPUSH
31436: CALL_OW 12
31440: PLUS
31441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31442: LD_VAR 0 6
31446: PPUSH
31447: LD_VAR 0 7
31451: PPUSH
31452: CALL_OW 488
31456: NOT
31457: IFFALSE 31479
// begin _x := x ;
31459: LD_ADDR_VAR 0 6
31463: PUSH
31464: LD_VAR 0 4
31468: ST_TO_ADDR
// _y := y ;
31469: LD_ADDR_VAR 0 7
31473: PUSH
31474: LD_VAR 0 5
31478: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_INT 1
31486: PPUSH
31487: LD_VAR 0 14
31491: PPUSH
31492: CALL_OW 12
31496: ST_TO_ADDR
// case i of 1 :
31497: LD_VAR 0 3
31501: PUSH
31502: LD_INT 1
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31527
31510: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_VAR 0 10
31520: PPUSH
31521: CALL_OW 115
31525: GO 31588
31527: LD_INT 2
31529: DOUBLE
31530: EQUAL
31531: IFTRUE 31535
31533: GO 31557
31535: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_VAR 0 6
31545: PPUSH
31546: LD_VAR 0 7
31550: PPUSH
31551: CALL_OW 153
31555: GO 31588
31557: LD_INT 3
31559: DOUBLE
31560: EQUAL
31561: IFTRUE 31565
31563: GO 31587
31565: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31566: LD_VAR 0 1
31570: PPUSH
31571: LD_VAR 0 6
31575: PPUSH
31576: LD_VAR 0 7
31580: PPUSH
31581: CALL_OW 154
31585: GO 31588
31587: POP
// end ;
31588: LD_VAR 0 2
31592: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31593: LD_INT 0
31595: PPUSH
31596: PPUSH
31597: PPUSH
31598: PPUSH
31599: PPUSH
31600: PPUSH
// if not unit or not building then
31601: LD_VAR 0 1
31605: NOT
31606: PUSH
31607: LD_VAR 0 2
31611: NOT
31612: OR
31613: IFFALSE 31617
// exit ;
31615: GO 31775
// x := GetX ( building ) ;
31617: LD_ADDR_VAR 0 5
31621: PUSH
31622: LD_VAR 0 2
31626: PPUSH
31627: CALL_OW 250
31631: ST_TO_ADDR
// y := GetY ( building ) ;
31632: LD_ADDR_VAR 0 6
31636: PUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: CALL_OW 251
31646: ST_TO_ADDR
// for i = 0 to 5 do
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: DOUBLE
31653: LD_INT 0
31655: DEC
31656: ST_TO_ADDR
31657: LD_INT 5
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31773
// begin _x := ShiftX ( x , i , 3 ) ;
31663: LD_ADDR_VAR 0 7
31667: PUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: LD_VAR 0 4
31677: PPUSH
31678: LD_INT 3
31680: PPUSH
31681: CALL_OW 272
31685: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31686: LD_ADDR_VAR 0 8
31690: PUSH
31691: LD_VAR 0 6
31695: PPUSH
31696: LD_VAR 0 4
31700: PPUSH
31701: LD_INT 3
31703: PPUSH
31704: CALL_OW 273
31708: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31709: LD_VAR 0 7
31713: PPUSH
31714: LD_VAR 0 8
31718: PPUSH
31719: CALL_OW 488
31723: NOT
31724: IFFALSE 31728
// continue ;
31726: GO 31660
// if HexInfo ( _x , _y ) = 0 then
31728: LD_VAR 0 7
31732: PPUSH
31733: LD_VAR 0 8
31737: PPUSH
31738: CALL_OW 428
31742: PUSH
31743: LD_INT 0
31745: EQUAL
31746: IFFALSE 31771
// begin ComMoveXY ( unit , _x , _y ) ;
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_VAR 0 7
31757: PPUSH
31758: LD_VAR 0 8
31762: PPUSH
31763: CALL_OW 111
// exit ;
31767: POP
31768: POP
31769: GO 31775
// end ; end ;
31771: GO 31660
31773: POP
31774: POP
// end ;
31775: LD_VAR 0 3
31779: RET
// export function ScanBase ( side , base_area ) ; begin
31780: LD_INT 0
31782: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_VAR 0 2
31792: PPUSH
31793: LD_INT 81
31795: PUSH
31796: LD_VAR 0 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PPUSH
31805: CALL_OW 70
31809: ST_TO_ADDR
// end ;
31810: LD_VAR 0 3
31814: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31815: LD_INT 0
31817: PPUSH
31818: PPUSH
31819: PPUSH
31820: PPUSH
// result := false ;
31821: LD_ADDR_VAR 0 2
31825: PUSH
31826: LD_INT 0
31828: ST_TO_ADDR
// side := GetSide ( unit ) ;
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_VAR 0 1
31838: PPUSH
31839: CALL_OW 255
31843: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31844: LD_ADDR_VAR 0 4
31848: PUSH
31849: LD_VAR 0 1
31853: PPUSH
31854: CALL_OW 248
31858: ST_TO_ADDR
// case nat of 1 :
31859: LD_VAR 0 4
31863: PUSH
31864: LD_INT 1
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31883
31872: POP
// tech := tech_lassight ; 2 :
31873: LD_ADDR_VAR 0 5
31877: PUSH
31878: LD_INT 12
31880: ST_TO_ADDR
31881: GO 31922
31883: LD_INT 2
31885: DOUBLE
31886: EQUAL
31887: IFTRUE 31891
31889: GO 31902
31891: POP
// tech := tech_mortar ; 3 :
31892: LD_ADDR_VAR 0 5
31896: PUSH
31897: LD_INT 41
31899: ST_TO_ADDR
31900: GO 31922
31902: LD_INT 3
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// tech := tech_bazooka ; end ;
31911: LD_ADDR_VAR 0 5
31915: PUSH
31916: LD_INT 44
31918: ST_TO_ADDR
31919: GO 31922
31921: POP
// if Researched ( side , tech ) then
31922: LD_VAR 0 3
31926: PPUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: CALL_OW 325
31936: IFFALSE 31963
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31938: LD_ADDR_VAR 0 2
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 8
31948: PUSH
31949: LD_INT 9
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: PUSH
31957: LD_VAR 0 4
31961: ARRAY
31962: ST_TO_ADDR
// end ;
31963: LD_VAR 0 2
31967: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31968: LD_INT 0
31970: PPUSH
31971: PPUSH
31972: PPUSH
// if not mines then
31973: LD_VAR 0 2
31977: NOT
31978: IFFALSE 31982
// exit ;
31980: GO 32126
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31982: LD_ADDR_VAR 0 5
31986: PUSH
31987: LD_INT 81
31989: PUSH
31990: LD_VAR 0 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: LD_INT 21
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PPUSH
32020: CALL_OW 69
32024: ST_TO_ADDR
// for i in mines do
32025: LD_ADDR_VAR 0 4
32029: PUSH
32030: LD_VAR 0 2
32034: PUSH
32035: FOR_IN
32036: IFFALSE 32124
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32038: LD_VAR 0 4
32042: PUSH
32043: LD_INT 1
32045: ARRAY
32046: PPUSH
32047: LD_VAR 0 4
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PPUSH
32056: CALL_OW 458
32060: NOT
32061: IFFALSE 32065
// continue ;
32063: GO 32035
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32065: LD_VAR 0 4
32069: PUSH
32070: LD_INT 1
32072: ARRAY
32073: PPUSH
32074: LD_VAR 0 4
32078: PUSH
32079: LD_INT 2
32081: ARRAY
32082: PPUSH
32083: CALL_OW 428
32087: PUSH
32088: LD_VAR 0 5
32092: IN
32093: IFFALSE 32122
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32095: LD_VAR 0 4
32099: PUSH
32100: LD_INT 1
32102: ARRAY
32103: PPUSH
32104: LD_VAR 0 4
32108: PUSH
32109: LD_INT 2
32111: ARRAY
32112: PPUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: CALL_OW 456
// end ;
32122: GO 32035
32124: POP
32125: POP
// end ;
32126: LD_VAR 0 3
32130: RET
// export function Count ( array ) ; begin
32131: LD_INT 0
32133: PPUSH
// result := array + 0 ;
32134: LD_ADDR_VAR 0 2
32138: PUSH
32139: LD_VAR 0 1
32143: PUSH
32144: LD_INT 0
32146: PLUS
32147: ST_TO_ADDR
// end ;
32148: LD_VAR 0 2
32152: RET
// export function IsEmpty ( building ) ; begin
32153: LD_INT 0
32155: PPUSH
// if not building then
32156: LD_VAR 0 1
32160: NOT
32161: IFFALSE 32165
// exit ;
32163: GO 32208
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32165: LD_ADDR_VAR 0 2
32169: PUSH
32170: LD_VAR 0 1
32174: PUSH
32175: LD_INT 22
32177: PUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: CALL_OW 255
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 58
32194: PUSH
32195: EMPTY
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PPUSH
32202: CALL_OW 69
32206: IN
32207: ST_TO_ADDR
// end ;
32208: LD_VAR 0 2
32212: RET
// export function IsNotFull ( building ) ; var places ; begin
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
// if not building then
32217: LD_VAR 0 1
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32254
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32226: LD_ADDR_VAR 0 2
32230: PUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 62
32241: PUSH
32242: EMPTY
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PPUSH
32249: CALL_OW 72
32253: ST_TO_ADDR
// end ;
32254: LD_VAR 0 2
32258: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32259: LD_INT 0
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
// tmp := [ ] ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: EMPTY
32271: ST_TO_ADDR
// list := [ ] ;
32272: LD_ADDR_VAR 0 5
32276: PUSH
32277: EMPTY
32278: ST_TO_ADDR
// for i = 16 to 25 do
32279: LD_ADDR_VAR 0 4
32283: PUSH
32284: DOUBLE
32285: LD_INT 16
32287: DEC
32288: ST_TO_ADDR
32289: LD_INT 25
32291: PUSH
32292: FOR_TO
32293: IFFALSE 32366
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32295: LD_ADDR_VAR 0 3
32299: PUSH
32300: LD_VAR 0 3
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 255
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 91
32324: PUSH
32325: LD_VAR 0 1
32329: PUSH
32330: LD_INT 6
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 30
32340: PUSH
32341: LD_VAR 0 4
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: PUSH
32355: EMPTY
32356: LIST
32357: PPUSH
32358: CALL_OW 69
32362: ADD
32363: ST_TO_ADDR
32364: GO 32292
32366: POP
32367: POP
// for i = 1 to tmp do
32368: LD_ADDR_VAR 0 4
32372: PUSH
32373: DOUBLE
32374: LD_INT 1
32376: DEC
32377: ST_TO_ADDR
32378: LD_VAR 0 3
32382: PUSH
32383: FOR_TO
32384: IFFALSE 32472
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: LD_VAR 0 5
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: LD_VAR 0 4
32405: ARRAY
32406: PPUSH
32407: CALL_OW 266
32411: PUSH
32412: LD_VAR 0 3
32416: PUSH
32417: LD_VAR 0 4
32421: ARRAY
32422: PPUSH
32423: CALL_OW 250
32427: PUSH
32428: LD_VAR 0 3
32432: PUSH
32433: LD_VAR 0 4
32437: ARRAY
32438: PPUSH
32439: CALL_OW 251
32443: PUSH
32444: LD_VAR 0 3
32448: PUSH
32449: LD_VAR 0 4
32453: ARRAY
32454: PPUSH
32455: CALL_OW 254
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: ADD
32469: ST_TO_ADDR
32470: GO 32383
32472: POP
32473: POP
// result := list ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_VAR 0 5
32483: ST_TO_ADDR
// end ;
32484: LD_VAR 0 2
32488: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32489: LD_INT 0
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
// if not factory then
32498: LD_VAR 0 1
32502: NOT
32503: IFFALSE 32507
// exit ;
32505: GO 33100
// if control = control_apeman then
32507: LD_VAR 0 4
32511: PUSH
32512: LD_INT 5
32514: EQUAL
32515: IFFALSE 32624
// begin tmp := UnitsInside ( factory ) ;
32517: LD_ADDR_VAR 0 8
32521: PUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: CALL_OW 313
32531: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32532: LD_VAR 0 8
32536: PPUSH
32537: LD_INT 25
32539: PUSH
32540: LD_INT 12
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PPUSH
32547: CALL_OW 72
32551: NOT
32552: IFFALSE 32562
// control := control_manual ;
32554: LD_ADDR_VAR 0 4
32558: PUSH
32559: LD_INT 1
32561: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32562: LD_ADDR_VAR 0 8
32566: PUSH
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL 32259 0 1
32576: ST_TO_ADDR
// if tmp then
32577: LD_VAR 0 8
32581: IFFALSE 32624
// begin for i in tmp do
32583: LD_ADDR_VAR 0 7
32587: PUSH
32588: LD_VAR 0 8
32592: PUSH
32593: FOR_IN
32594: IFFALSE 32622
// if i [ 1 ] = b_ext_radio then
32596: LD_VAR 0 7
32600: PUSH
32601: LD_INT 1
32603: ARRAY
32604: PUSH
32605: LD_INT 22
32607: EQUAL
32608: IFFALSE 32620
// begin control := control_remote ;
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_INT 2
32617: ST_TO_ADDR
// break ;
32618: GO 32622
// end ;
32620: GO 32593
32622: POP
32623: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: LD_VAR 0 3
32638: PPUSH
32639: LD_VAR 0 4
32643: PPUSH
32644: LD_VAR 0 5
32648: PPUSH
32649: CALL_OW 448
32653: IFFALSE 32688
// begin result := [ chassis , engine , control , weapon ] ;
32655: LD_ADDR_VAR 0 6
32659: PUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_VAR 0 3
32669: PUSH
32670: LD_VAR 0 4
32674: PUSH
32675: LD_VAR 0 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: ST_TO_ADDR
// exit ;
32686: GO 33100
// end ; _chassis := AvailableChassisList ( factory ) ;
32688: LD_ADDR_VAR 0 9
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: CALL_OW 475
32702: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32703: LD_ADDR_VAR 0 11
32707: PUSH
32708: LD_VAR 0 1
32712: PPUSH
32713: CALL_OW 476
32717: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32718: LD_ADDR_VAR 0 12
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 477
32732: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32733: LD_ADDR_VAR 0 10
32737: PUSH
32738: LD_VAR 0 1
32742: PPUSH
32743: CALL_OW 478
32747: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32748: LD_VAR 0 9
32752: NOT
32753: PUSH
32754: LD_VAR 0 11
32758: NOT
32759: OR
32760: PUSH
32761: LD_VAR 0 12
32765: NOT
32766: OR
32767: PUSH
32768: LD_VAR 0 10
32772: NOT
32773: OR
32774: IFFALSE 32809
// begin result := [ chassis , engine , control , weapon ] ;
32776: LD_ADDR_VAR 0 6
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: LD_VAR 0 3
32790: PUSH
32791: LD_VAR 0 4
32795: PUSH
32796: LD_VAR 0 5
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// exit ;
32807: GO 33100
// end ; if not chassis in _chassis then
32809: LD_VAR 0 2
32813: PUSH
32814: LD_VAR 0 9
32818: IN
32819: NOT
32820: IFFALSE 32846
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32822: LD_ADDR_VAR 0 2
32826: PUSH
32827: LD_VAR 0 9
32831: PUSH
32832: LD_INT 1
32834: PPUSH
32835: LD_VAR 0 9
32839: PPUSH
32840: CALL_OW 12
32844: ARRAY
32845: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32846: LD_VAR 0 2
32850: PPUSH
32851: LD_VAR 0 3
32855: PPUSH
32856: CALL 33105 0 2
32860: NOT
32861: IFFALSE 32920
// repeat engine := _engine [ 1 ] ;
32863: LD_ADDR_VAR 0 3
32867: PUSH
32868: LD_VAR 0 11
32872: PUSH
32873: LD_INT 1
32875: ARRAY
32876: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32877: LD_ADDR_VAR 0 11
32881: PUSH
32882: LD_VAR 0 11
32886: PPUSH
32887: LD_INT 1
32889: PPUSH
32890: CALL_OW 3
32894: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32895: LD_VAR 0 2
32899: PPUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: CALL 33105 0 2
32909: PUSH
32910: LD_VAR 0 11
32914: PUSH
32915: EMPTY
32916: EQUAL
32917: OR
32918: IFFALSE 32863
// if not control in _control then
32920: LD_VAR 0 4
32924: PUSH
32925: LD_VAR 0 12
32929: IN
32930: NOT
32931: IFFALSE 32957
// control := _control [ rand ( 1 , _control ) ] ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_VAR 0 12
32942: PUSH
32943: LD_INT 1
32945: PPUSH
32946: LD_VAR 0 12
32950: PPUSH
32951: CALL_OW 12
32955: ARRAY
32956: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32957: LD_VAR 0 2
32961: PPUSH
32962: LD_VAR 0 5
32966: PPUSH
32967: CALL 33325 0 2
32971: NOT
32972: IFFALSE 33031
// repeat weapon := _weapon [ 1 ] ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_VAR 0 10
32983: PUSH
32984: LD_INT 1
32986: ARRAY
32987: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32988: LD_ADDR_VAR 0 10
32992: PUSH
32993: LD_VAR 0 10
32997: PPUSH
32998: LD_INT 1
33000: PPUSH
33001: CALL_OW 3
33005: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33006: LD_VAR 0 2
33010: PPUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: CALL 33325 0 2
33020: PUSH
33021: LD_VAR 0 10
33025: PUSH
33026: EMPTY
33027: EQUAL
33028: OR
33029: IFFALSE 32974
// result := [ ] ;
33031: LD_ADDR_VAR 0 6
33035: PUSH
33036: EMPTY
33037: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33038: LD_VAR 0 1
33042: PPUSH
33043: LD_VAR 0 2
33047: PPUSH
33048: LD_VAR 0 3
33052: PPUSH
33053: LD_VAR 0 4
33057: PPUSH
33058: LD_VAR 0 5
33062: PPUSH
33063: CALL_OW 448
33067: IFFALSE 33100
// result := [ chassis , engine , control , weapon ] ;
33069: LD_ADDR_VAR 0 6
33073: PUSH
33074: LD_VAR 0 2
33078: PUSH
33079: LD_VAR 0 3
33083: PUSH
33084: LD_VAR 0 4
33088: PUSH
33089: LD_VAR 0 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: ST_TO_ADDR
// end ;
33100: LD_VAR 0 6
33104: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33105: LD_INT 0
33107: PPUSH
// if not chassis or not engine then
33108: LD_VAR 0 1
33112: NOT
33113: PUSH
33114: LD_VAR 0 2
33118: NOT
33119: OR
33120: IFFALSE 33124
// exit ;
33122: GO 33320
// case engine of engine_solar :
33124: LD_VAR 0 2
33128: PUSH
33129: LD_INT 2
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33175
33137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 11
33145: PUSH
33146: LD_INT 12
33148: PUSH
33149: LD_INT 13
33151: PUSH
33152: LD_INT 14
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33304
33175: LD_INT 1
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33245
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: LD_INT 4
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: LD_INT 21
33218: PUSH
33219: LD_INT 23
33221: PUSH
33222: LD_INT 22
33224: PUSH
33225: LD_INT 24
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: ST_TO_ADDR
33243: GO 33304
33245: LD_INT 3
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33303
33253: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_INT 13
33261: PUSH
33262: LD_INT 14
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: LD_INT 4
33273: PUSH
33274: LD_INT 5
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 22
33282: PUSH
33283: LD_INT 23
33285: PUSH
33286: LD_INT 24
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: ST_TO_ADDR
33301: GO 33304
33303: POP
// result := ( chassis in result ) ;
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_VAR 0 1
33313: PUSH
33314: LD_VAR 0 3
33318: IN
33319: ST_TO_ADDR
// end ;
33320: LD_VAR 0 3
33324: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33325: LD_INT 0
33327: PPUSH
// if not chassis or not weapon then
33328: LD_VAR 0 1
33332: NOT
33333: PUSH
33334: LD_VAR 0 2
33338: NOT
33339: OR
33340: IFFALSE 33344
// exit ;
33342: GO 34404
// case weapon of us_machine_gun :
33344: LD_VAR 0 2
33348: PUSH
33349: LD_INT 2
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33387
33357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: LD_INT 5
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
33385: GO 34388
33387: LD_INT 3
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33395
33393: GO 33425
33395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33396: LD_ADDR_VAR 0 3
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 3
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: LD_INT 5
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
33423: GO 34388
33425: LD_INT 11
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33463
33433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 34388
33463: LD_INT 4
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33497
33471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
33495: GO 34388
33497: LD_INT 5
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33531
33505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33506: LD_ADDR_VAR 0 3
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: LD_INT 5
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 34388
33531: LD_INT 9
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33565
33539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 4
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
33563: GO 34388
33565: LD_INT 7
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33599
33573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
33597: GO 34388
33599: LD_INT 12
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33633
33607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: LD_INT 5
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: ST_TO_ADDR
33631: GO 34388
33633: LD_INT 13
33635: DOUBLE
33636: EQUAL
33637: IFTRUE 33641
33639: GO 33667
33641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33642: LD_ADDR_VAR 0 3
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 5
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: ST_TO_ADDR
33665: GO 34388
33667: LD_INT 14
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33675
33673: GO 33693
33675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: ST_TO_ADDR
33691: GO 34388
33693: LD_INT 6
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33719
33701: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 4
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 34388
33719: LD_INT 10
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33745
33727: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: ST_TO_ADDR
33743: GO 34388
33745: LD_INT 22
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33779
33753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33754: LD_ADDR_VAR 0 3
33758: PUSH
33759: LD_INT 11
33761: PUSH
33762: LD_INT 12
33764: PUSH
33765: LD_INT 13
33767: PUSH
33768: LD_INT 14
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: ST_TO_ADDR
33777: GO 34388
33779: LD_INT 23
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33813
33787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: LD_INT 11
33795: PUSH
33796: LD_INT 12
33798: PUSH
33799: LD_INT 13
33801: PUSH
33802: LD_INT 14
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
33811: GO 34388
33813: LD_INT 24
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33847
33821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33822: LD_ADDR_VAR 0 3
33826: PUSH
33827: LD_INT 11
33829: PUSH
33830: LD_INT 12
33832: PUSH
33833: LD_INT 13
33835: PUSH
33836: LD_INT 14
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 34388
33847: LD_INT 30
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33881
33855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 11
33863: PUSH
33864: LD_INT 12
33866: PUSH
33867: LD_INT 13
33869: PUSH
33870: LD_INT 14
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
33879: GO 34388
33881: LD_INT 25
33883: DOUBLE
33884: EQUAL
33885: IFTRUE 33889
33887: GO 33907
33889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_INT 13
33897: PUSH
33898: LD_INT 14
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34388
33907: LD_INT 27
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33933
33915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 13
33923: PUSH
33924: LD_INT 14
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: ST_TO_ADDR
33931: GO 34388
33933: LD_INT 92
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33967
33941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_INT 11
33949: PUSH
33950: LD_INT 12
33952: PUSH
33953: LD_INT 13
33955: PUSH
33956: LD_INT 14
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
33965: GO 34388
33967: LD_INT 28
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33975
33973: GO 33993
33975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_INT 13
33983: PUSH
33984: LD_INT 14
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: ST_TO_ADDR
33991: GO 34388
33993: LD_INT 29
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34019
34001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 13
34009: PUSH
34010: LD_INT 14
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34388
34019: LD_INT 31
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34045
34027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 13
34035: PUSH
34036: LD_INT 14
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: ST_TO_ADDR
34043: GO 34388
34045: LD_INT 26
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34071
34053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34054: LD_ADDR_VAR 0 3
34058: PUSH
34059: LD_INT 13
34061: PUSH
34062: LD_INT 14
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: ST_TO_ADDR
34069: GO 34388
34071: LD_INT 42
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34105
34079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_INT 21
34087: PUSH
34088: LD_INT 22
34090: PUSH
34091: LD_INT 23
34093: PUSH
34094: LD_INT 24
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: ST_TO_ADDR
34103: GO 34388
34105: LD_INT 43
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34113
34111: GO 34139
34113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34114: LD_ADDR_VAR 0 3
34118: PUSH
34119: LD_INT 21
34121: PUSH
34122: LD_INT 22
34124: PUSH
34125: LD_INT 23
34127: PUSH
34128: LD_INT 24
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: ST_TO_ADDR
34137: GO 34388
34139: LD_INT 44
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34173
34147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_INT 21
34155: PUSH
34156: LD_INT 22
34158: PUSH
34159: LD_INT 23
34161: PUSH
34162: LD_INT 24
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: ST_TO_ADDR
34171: GO 34388
34173: LD_INT 45
34175: DOUBLE
34176: EQUAL
34177: IFTRUE 34181
34179: GO 34207
34181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_INT 21
34189: PUSH
34190: LD_INT 22
34192: PUSH
34193: LD_INT 23
34195: PUSH
34196: LD_INT 24
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
34205: GO 34388
34207: LD_INT 49
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34241
34215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 21
34223: PUSH
34224: LD_INT 22
34226: PUSH
34227: LD_INT 23
34229: PUSH
34230: LD_INT 24
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
34239: GO 34388
34241: LD_INT 51
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34275
34249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 21
34257: PUSH
34258: LD_INT 22
34260: PUSH
34261: LD_INT 23
34263: PUSH
34264: LD_INT 24
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34388
34275: LD_INT 52
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34309
34283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 21
34291: PUSH
34292: LD_INT 22
34294: PUSH
34295: LD_INT 23
34297: PUSH
34298: LD_INT 24
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
34307: GO 34388
34309: LD_INT 53
34311: DOUBLE
34312: EQUAL
34313: IFTRUE 34317
34315: GO 34335
34317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_INT 23
34325: PUSH
34326: LD_INT 24
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: ST_TO_ADDR
34333: GO 34388
34335: LD_INT 46
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34361
34343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 23
34351: PUSH
34352: LD_INT 24
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: ST_TO_ADDR
34359: GO 34388
34361: LD_INT 47
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34387
34369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_INT 23
34377: PUSH
34378: LD_INT 24
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34388
34387: POP
// result := ( chassis in result ) ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_VAR 0 1
34397: PUSH
34398: LD_VAR 0 3
34402: IN
34403: ST_TO_ADDR
// end ;
34404: LD_VAR 0 3
34408: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
// result := array ;
34418: LD_ADDR_VAR 0 5
34422: PUSH
34423: LD_VAR 0 1
34427: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34428: LD_VAR 0 1
34432: NOT
34433: PUSH
34434: LD_VAR 0 2
34438: NOT
34439: OR
34440: PUSH
34441: LD_VAR 0 3
34445: NOT
34446: OR
34447: PUSH
34448: LD_VAR 0 2
34452: PUSH
34453: LD_VAR 0 1
34457: GREATER
34458: OR
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 1
34469: GREATER
34470: OR
34471: IFFALSE 34475
// exit ;
34473: GO 34771
// if direction then
34475: LD_VAR 0 4
34479: IFFALSE 34543
// begin d := 1 ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 1
34488: ST_TO_ADDR
// if i_from > i_to then
34489: LD_VAR 0 2
34493: PUSH
34494: LD_VAR 0 3
34498: GREATER
34499: IFFALSE 34525
// length := ( array - i_from ) + i_to else
34501: LD_ADDR_VAR 0 11
34505: PUSH
34506: LD_VAR 0 1
34510: PUSH
34511: LD_VAR 0 2
34515: MINUS
34516: PUSH
34517: LD_VAR 0 3
34521: PLUS
34522: ST_TO_ADDR
34523: GO 34541
// length := i_to - i_from ;
34525: LD_ADDR_VAR 0 11
34529: PUSH
34530: LD_VAR 0 3
34534: PUSH
34535: LD_VAR 0 2
34539: MINUS
34540: ST_TO_ADDR
// end else
34541: GO 34604
// begin d := - 1 ;
34543: LD_ADDR_VAR 0 9
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: ST_TO_ADDR
// if i_from > i_to then
34552: LD_VAR 0 2
34556: PUSH
34557: LD_VAR 0 3
34561: GREATER
34562: IFFALSE 34582
// length := i_from - i_to else
34564: LD_ADDR_VAR 0 11
34568: PUSH
34569: LD_VAR 0 2
34573: PUSH
34574: LD_VAR 0 3
34578: MINUS
34579: ST_TO_ADDR
34580: GO 34604
// length := ( array - i_to ) + i_from ;
34582: LD_ADDR_VAR 0 11
34586: PUSH
34587: LD_VAR 0 1
34591: PUSH
34592: LD_VAR 0 3
34596: MINUS
34597: PUSH
34598: LD_VAR 0 2
34602: PLUS
34603: ST_TO_ADDR
// end ; if not length then
34604: LD_VAR 0 11
34608: NOT
34609: IFFALSE 34613
// exit ;
34611: GO 34771
// tmp := array ;
34613: LD_ADDR_VAR 0 10
34617: PUSH
34618: LD_VAR 0 1
34622: ST_TO_ADDR
// for i = 1 to length do
34623: LD_ADDR_VAR 0 6
34627: PUSH
34628: DOUBLE
34629: LD_INT 1
34631: DEC
34632: ST_TO_ADDR
34633: LD_VAR 0 11
34637: PUSH
34638: FOR_TO
34639: IFFALSE 34759
// begin for j = 1 to array do
34641: LD_ADDR_VAR 0 7
34645: PUSH
34646: DOUBLE
34647: LD_INT 1
34649: DEC
34650: ST_TO_ADDR
34651: LD_VAR 0 1
34655: PUSH
34656: FOR_TO
34657: IFFALSE 34745
// begin k := j + d ;
34659: LD_ADDR_VAR 0 8
34663: PUSH
34664: LD_VAR 0 7
34668: PUSH
34669: LD_VAR 0 9
34673: PLUS
34674: ST_TO_ADDR
// if k > array then
34675: LD_VAR 0 8
34679: PUSH
34680: LD_VAR 0 1
34684: GREATER
34685: IFFALSE 34695
// k := 1 ;
34687: LD_ADDR_VAR 0 8
34691: PUSH
34692: LD_INT 1
34694: ST_TO_ADDR
// if not k then
34695: LD_VAR 0 8
34699: NOT
34700: IFFALSE 34712
// k := array ;
34702: LD_ADDR_VAR 0 8
34706: PUSH
34707: LD_VAR 0 1
34711: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34712: LD_ADDR_VAR 0 10
34716: PUSH
34717: LD_VAR 0 10
34721: PPUSH
34722: LD_VAR 0 8
34726: PPUSH
34727: LD_VAR 0 1
34731: PUSH
34732: LD_VAR 0 7
34736: ARRAY
34737: PPUSH
34738: CALL_OW 1
34742: ST_TO_ADDR
// end ;
34743: GO 34656
34745: POP
34746: POP
// array := tmp ;
34747: LD_ADDR_VAR 0 1
34751: PUSH
34752: LD_VAR 0 10
34756: ST_TO_ADDR
// end ;
34757: GO 34638
34759: POP
34760: POP
// result := array ;
34761: LD_ADDR_VAR 0 5
34765: PUSH
34766: LD_VAR 0 1
34770: ST_TO_ADDR
// end ;
34771: LD_VAR 0 5
34775: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
// result := 0 ;
34780: LD_ADDR_VAR 0 3
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// if not array or not value in array then
34788: LD_VAR 0 1
34792: NOT
34793: PUSH
34794: LD_VAR 0 2
34798: PUSH
34799: LD_VAR 0 1
34803: IN
34804: NOT
34805: OR
34806: IFFALSE 34810
// exit ;
34808: GO 34864
// for i = 1 to array do
34810: LD_ADDR_VAR 0 4
34814: PUSH
34815: DOUBLE
34816: LD_INT 1
34818: DEC
34819: ST_TO_ADDR
34820: LD_VAR 0 1
34824: PUSH
34825: FOR_TO
34826: IFFALSE 34862
// if value = array [ i ] then
34828: LD_VAR 0 2
34832: PUSH
34833: LD_VAR 0 1
34837: PUSH
34838: LD_VAR 0 4
34842: ARRAY
34843: EQUAL
34844: IFFALSE 34860
// begin result := i ;
34846: LD_ADDR_VAR 0 3
34850: PUSH
34851: LD_VAR 0 4
34855: ST_TO_ADDR
// exit ;
34856: POP
34857: POP
34858: GO 34864
// end ;
34860: GO 34825
34862: POP
34863: POP
// end ;
34864: LD_VAR 0 3
34868: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34869: LD_INT 0
34871: PPUSH
// vc_chassis := chassis ;
34872: LD_ADDR_OWVAR 37
34876: PUSH
34877: LD_VAR 0 1
34881: ST_TO_ADDR
// vc_engine := engine ;
34882: LD_ADDR_OWVAR 39
34886: PUSH
34887: LD_VAR 0 2
34891: ST_TO_ADDR
// vc_control := control ;
34892: LD_ADDR_OWVAR 38
34896: PUSH
34897: LD_VAR 0 3
34901: ST_TO_ADDR
// vc_weapon := weapon ;
34902: LD_ADDR_OWVAR 40
34906: PUSH
34907: LD_VAR 0 4
34911: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34912: LD_ADDR_OWVAR 41
34916: PUSH
34917: LD_VAR 0 5
34921: ST_TO_ADDR
// end ;
34922: LD_VAR 0 6
34926: RET
// export function WantPlant ( unit ) ; var task ; begin
34927: LD_INT 0
34929: PPUSH
34930: PPUSH
// result := false ;
34931: LD_ADDR_VAR 0 2
34935: PUSH
34936: LD_INT 0
34938: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: CALL_OW 437
34953: ST_TO_ADDR
// if task then
34954: LD_VAR 0 3
34958: IFFALSE 34986
// if task [ 1 ] [ 1 ] = p then
34960: LD_VAR 0 3
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PUSH
34969: LD_INT 1
34971: ARRAY
34972: PUSH
34973: LD_STRING p
34975: EQUAL
34976: IFFALSE 34986
// result := true ;
34978: LD_ADDR_VAR 0 2
34982: PUSH
34983: LD_INT 1
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 2
34990: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34991: LD_INT 0
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
// if pos < 1 then
34997: LD_VAR 0 2
35001: PUSH
35002: LD_INT 1
35004: LESS
35005: IFFALSE 35009
// exit ;
35007: GO 35312
// if pos = 1 then
35009: LD_VAR 0 2
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: IFFALSE 35050
// result := Replace ( arr , pos [ 1 ] , value ) else
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_INT 1
35036: ARRAY
35037: PPUSH
35038: LD_VAR 0 3
35042: PPUSH
35043: CALL_OW 1
35047: ST_TO_ADDR
35048: GO 35312
// begin tmp := arr ;
35050: LD_ADDR_VAR 0 6
35054: PUSH
35055: LD_VAR 0 1
35059: ST_TO_ADDR
// s_arr := [ tmp ] ;
35060: LD_ADDR_VAR 0 7
35064: PUSH
35065: LD_VAR 0 6
35069: PUSH
35070: EMPTY
35071: LIST
35072: ST_TO_ADDR
// for i = 1 to pos - 1 do
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: DOUBLE
35079: LD_INT 1
35081: DEC
35082: ST_TO_ADDR
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 1
35090: MINUS
35091: PUSH
35092: FOR_TO
35093: IFFALSE 35138
// begin tmp := tmp [ pos [ i ] ] ;
35095: LD_ADDR_VAR 0 6
35099: PUSH
35100: LD_VAR 0 6
35104: PUSH
35105: LD_VAR 0 2
35109: PUSH
35110: LD_VAR 0 5
35114: ARRAY
35115: ARRAY
35116: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35117: LD_ADDR_VAR 0 7
35121: PUSH
35122: LD_VAR 0 7
35126: PUSH
35127: LD_VAR 0 6
35131: PUSH
35132: EMPTY
35133: LIST
35134: ADD
35135: ST_TO_ADDR
// end ;
35136: GO 35092
35138: POP
35139: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35140: LD_ADDR_VAR 0 6
35144: PUSH
35145: LD_VAR 0 6
35149: PPUSH
35150: LD_VAR 0 2
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: PPUSH
35161: LD_VAR 0 3
35165: PPUSH
35166: CALL_OW 1
35170: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35171: LD_ADDR_VAR 0 7
35175: PUSH
35176: LD_VAR 0 7
35180: PPUSH
35181: LD_VAR 0 7
35185: PPUSH
35186: LD_VAR 0 6
35190: PPUSH
35191: CALL_OW 1
35195: ST_TO_ADDR
// for i = s_arr downto 2 do
35196: LD_ADDR_VAR 0 5
35200: PUSH
35201: DOUBLE
35202: LD_VAR 0 7
35206: INC
35207: ST_TO_ADDR
35208: LD_INT 2
35210: PUSH
35211: FOR_DOWNTO
35212: IFFALSE 35296
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35214: LD_ADDR_VAR 0 6
35218: PUSH
35219: LD_VAR 0 7
35223: PUSH
35224: LD_VAR 0 5
35228: PUSH
35229: LD_INT 1
35231: MINUS
35232: ARRAY
35233: PPUSH
35234: LD_VAR 0 2
35238: PUSH
35239: LD_VAR 0 5
35243: PUSH
35244: LD_INT 1
35246: MINUS
35247: ARRAY
35248: PPUSH
35249: LD_VAR 0 7
35253: PUSH
35254: LD_VAR 0 5
35258: ARRAY
35259: PPUSH
35260: CALL_OW 1
35264: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35265: LD_ADDR_VAR 0 7
35269: PUSH
35270: LD_VAR 0 7
35274: PPUSH
35275: LD_VAR 0 5
35279: PUSH
35280: LD_INT 1
35282: MINUS
35283: PPUSH
35284: LD_VAR 0 6
35288: PPUSH
35289: CALL_OW 1
35293: ST_TO_ADDR
// end ;
35294: GO 35211
35296: POP
35297: POP
// result := s_arr [ 1 ] ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_VAR 0 7
35307: PUSH
35308: LD_INT 1
35310: ARRAY
35311: ST_TO_ADDR
// end ; end ;
35312: LD_VAR 0 4
35316: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35317: LD_INT 0
35319: PPUSH
35320: PPUSH
// if not list then
35321: LD_VAR 0 1
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 35421
// i := list [ pos1 ] ;
35330: LD_ADDR_VAR 0 5
35334: PUSH
35335: LD_VAR 0 1
35339: PUSH
35340: LD_VAR 0 2
35344: ARRAY
35345: ST_TO_ADDR
// if not i then
35346: LD_VAR 0 5
35350: NOT
35351: IFFALSE 35355
// exit ;
35353: GO 35421
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35355: LD_ADDR_VAR 0 1
35359: PUSH
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 1
35374: PUSH
35375: LD_VAR 0 3
35379: ARRAY
35380: PPUSH
35381: CALL_OW 1
35385: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35386: LD_ADDR_VAR 0 1
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: LD_VAR 0 3
35400: PPUSH
35401: LD_VAR 0 5
35405: PPUSH
35406: CALL_OW 1
35410: ST_TO_ADDR
// result := list ;
35411: LD_ADDR_VAR 0 4
35415: PUSH
35416: LD_VAR 0 1
35420: ST_TO_ADDR
// end ;
35421: LD_VAR 0 4
35425: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35426: LD_INT 0
35428: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35429: LD_ADDR_VAR 0 5
35433: PUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 250
35443: PPUSH
35444: LD_VAR 0 1
35448: PPUSH
35449: CALL_OW 251
35453: PPUSH
35454: LD_VAR 0 2
35458: PPUSH
35459: LD_VAR 0 3
35463: PPUSH
35464: LD_VAR 0 4
35468: PPUSH
35469: CALL 35847 0 5
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 5
35478: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
// if not list or not unit then
35485: LD_VAR 0 2
35489: NOT
35490: PUSH
35491: LD_VAR 0 1
35495: NOT
35496: OR
35497: IFFALSE 35501
// exit ;
35499: GO 35842
// result := [ ] ;
35501: LD_ADDR_VAR 0 5
35505: PUSH
35506: EMPTY
35507: ST_TO_ADDR
// for i in list do
35508: LD_ADDR_VAR 0 6
35512: PUSH
35513: LD_VAR 0 2
35517: PUSH
35518: FOR_IN
35519: IFFALSE 35737
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35521: LD_ADDR_VAR 0 8
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: LD_VAR 0 6
35535: PUSH
35536: LD_INT 1
35538: ARRAY
35539: PPUSH
35540: LD_VAR 0 6
35544: PUSH
35545: LD_INT 2
35547: ARRAY
35548: PPUSH
35549: CALL_OW 297
35553: ST_TO_ADDR
// if not Count ( result ) then
35554: LD_VAR 0 5
35558: PPUSH
35559: CALL 32131 0 1
35563: NOT
35564: IFFALSE 35597
// begin result := Join ( result , [ i , tmp ] ) ;
35566: LD_ADDR_VAR 0 5
35570: PUSH
35571: LD_VAR 0 5
35575: PPUSH
35576: LD_VAR 0 6
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PPUSH
35590: CALL 67731 0 2
35594: ST_TO_ADDR
// continue ;
35595: GO 35518
// end ; if result [ result ] [ 2 ] <= tmp then
35597: LD_VAR 0 5
35601: PUSH
35602: LD_VAR 0 5
35606: ARRAY
35607: PUSH
35608: LD_INT 2
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 8
35616: LESSEQUAL
35617: IFFALSE 35650
// result := Join ( result , [ i , tmp ] ) else
35619: LD_ADDR_VAR 0 5
35623: PUSH
35624: LD_VAR 0 5
35628: PPUSH
35629: LD_VAR 0 6
35633: PUSH
35634: LD_VAR 0 8
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PPUSH
35643: CALL 67731 0 2
35647: ST_TO_ADDR
35648: GO 35735
// begin for j := 1 to Count ( result ) do
35650: LD_ADDR_VAR 0 7
35654: PUSH
35655: DOUBLE
35656: LD_INT 1
35658: DEC
35659: ST_TO_ADDR
35660: LD_VAR 0 5
35664: PPUSH
35665: CALL 32131 0 1
35669: PUSH
35670: FOR_TO
35671: IFFALSE 35733
// begin if tmp < result [ j ] [ 2 ] then
35673: LD_VAR 0 8
35677: PUSH
35678: LD_VAR 0 5
35682: PUSH
35683: LD_VAR 0 7
35687: ARRAY
35688: PUSH
35689: LD_INT 2
35691: ARRAY
35692: LESS
35693: IFFALSE 35731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35695: LD_ADDR_VAR 0 5
35699: PUSH
35700: LD_VAR 0 5
35704: PPUSH
35705: LD_VAR 0 7
35709: PPUSH
35710: LD_VAR 0 6
35714: PUSH
35715: LD_VAR 0 8
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PPUSH
35724: CALL_OW 2
35728: ST_TO_ADDR
// break ;
35729: GO 35733
// end ; end ;
35731: GO 35670
35733: POP
35734: POP
// end ; end ;
35735: GO 35518
35737: POP
35738: POP
// if result and not asc then
35739: LD_VAR 0 5
35743: PUSH
35744: LD_VAR 0 3
35748: NOT
35749: AND
35750: IFFALSE 35767
// result := ReverseArray ( result ) ;
35752: LD_ADDR_VAR 0 5
35756: PUSH
35757: LD_VAR 0 5
35761: PPUSH
35762: CALL 63007 0 1
35766: ST_TO_ADDR
// tmp := [ ] ;
35767: LD_ADDR_VAR 0 8
35771: PUSH
35772: EMPTY
35773: ST_TO_ADDR
// if mode then
35774: LD_VAR 0 4
35778: IFFALSE 35842
// begin for i := 1 to result do
35780: LD_ADDR_VAR 0 6
35784: PUSH
35785: DOUBLE
35786: LD_INT 1
35788: DEC
35789: ST_TO_ADDR
35790: LD_VAR 0 5
35794: PUSH
35795: FOR_TO
35796: IFFALSE 35830
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35798: LD_ADDR_VAR 0 8
35802: PUSH
35803: LD_VAR 0 8
35807: PPUSH
35808: LD_VAR 0 5
35812: PUSH
35813: LD_VAR 0 6
35817: ARRAY
35818: PUSH
35819: LD_INT 1
35821: ARRAY
35822: PPUSH
35823: CALL 67731 0 2
35827: ST_TO_ADDR
35828: GO 35795
35830: POP
35831: POP
// result := tmp ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: LD_VAR 0 8
35841: ST_TO_ADDR
// end ; end ;
35842: LD_VAR 0 5
35846: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
// if not list then
35853: LD_VAR 0 3
35857: NOT
35858: IFFALSE 35862
// exit ;
35860: GO 36250
// result := [ ] ;
35862: LD_ADDR_VAR 0 6
35866: PUSH
35867: EMPTY
35868: ST_TO_ADDR
// for i in list do
35869: LD_ADDR_VAR 0 7
35873: PUSH
35874: LD_VAR 0 3
35878: PUSH
35879: FOR_IN
35880: IFFALSE 36082
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35882: LD_ADDR_VAR 0 9
35886: PUSH
35887: LD_VAR 0 7
35891: PPUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: LD_VAR 0 2
35901: PPUSH
35902: CALL_OW 297
35906: ST_TO_ADDR
// if not result then
35907: LD_VAR 0 6
35911: NOT
35912: IFFALSE 35938
// result := [ [ i , tmp ] ] else
35914: LD_ADDR_VAR 0 6
35918: PUSH
35919: LD_VAR 0 7
35923: PUSH
35924: LD_VAR 0 9
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: EMPTY
35934: LIST
35935: ST_TO_ADDR
35936: GO 36080
// begin if result [ result ] [ 2 ] < tmp then
35938: LD_VAR 0 6
35942: PUSH
35943: LD_VAR 0 6
35947: ARRAY
35948: PUSH
35949: LD_INT 2
35951: ARRAY
35952: PUSH
35953: LD_VAR 0 9
35957: LESS
35958: IFFALSE 36000
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35960: LD_ADDR_VAR 0 6
35964: PUSH
35965: LD_VAR 0 6
35969: PPUSH
35970: LD_VAR 0 6
35974: PUSH
35975: LD_INT 1
35977: PLUS
35978: PPUSH
35979: LD_VAR 0 7
35983: PUSH
35984: LD_VAR 0 9
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PPUSH
35993: CALL_OW 2
35997: ST_TO_ADDR
35998: GO 36080
// for j = 1 to result do
36000: LD_ADDR_VAR 0 8
36004: PUSH
36005: DOUBLE
36006: LD_INT 1
36008: DEC
36009: ST_TO_ADDR
36010: LD_VAR 0 6
36014: PUSH
36015: FOR_TO
36016: IFFALSE 36078
// begin if tmp < result [ j ] [ 2 ] then
36018: LD_VAR 0 9
36022: PUSH
36023: LD_VAR 0 6
36027: PUSH
36028: LD_VAR 0 8
36032: ARRAY
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: LESS
36038: IFFALSE 36076
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36040: LD_ADDR_VAR 0 6
36044: PUSH
36045: LD_VAR 0 6
36049: PPUSH
36050: LD_VAR 0 8
36054: PPUSH
36055: LD_VAR 0 7
36059: PUSH
36060: LD_VAR 0 9
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PPUSH
36069: CALL_OW 2
36073: ST_TO_ADDR
// break ;
36074: GO 36078
// end ; end ;
36076: GO 36015
36078: POP
36079: POP
// end ; end ;
36080: GO 35879
36082: POP
36083: POP
// if result and not asc then
36084: LD_VAR 0 6
36088: PUSH
36089: LD_VAR 0 4
36093: NOT
36094: AND
36095: IFFALSE 36170
// begin tmp := result ;
36097: LD_ADDR_VAR 0 9
36101: PUSH
36102: LD_VAR 0 6
36106: ST_TO_ADDR
// for i = tmp downto 1 do
36107: LD_ADDR_VAR 0 7
36111: PUSH
36112: DOUBLE
36113: LD_VAR 0 9
36117: INC
36118: ST_TO_ADDR
36119: LD_INT 1
36121: PUSH
36122: FOR_DOWNTO
36123: IFFALSE 36168
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36125: LD_ADDR_VAR 0 6
36129: PUSH
36130: LD_VAR 0 6
36134: PPUSH
36135: LD_VAR 0 9
36139: PUSH
36140: LD_VAR 0 7
36144: MINUS
36145: PUSH
36146: LD_INT 1
36148: PLUS
36149: PPUSH
36150: LD_VAR 0 9
36154: PUSH
36155: LD_VAR 0 7
36159: ARRAY
36160: PPUSH
36161: CALL_OW 1
36165: ST_TO_ADDR
36166: GO 36122
36168: POP
36169: POP
// end ; tmp := [ ] ;
36170: LD_ADDR_VAR 0 9
36174: PUSH
36175: EMPTY
36176: ST_TO_ADDR
// if mode then
36177: LD_VAR 0 5
36181: IFFALSE 36250
// begin for i = 1 to result do
36183: LD_ADDR_VAR 0 7
36187: PUSH
36188: DOUBLE
36189: LD_INT 1
36191: DEC
36192: ST_TO_ADDR
36193: LD_VAR 0 6
36197: PUSH
36198: FOR_TO
36199: IFFALSE 36238
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36201: LD_ADDR_VAR 0 9
36205: PUSH
36206: LD_VAR 0 9
36210: PPUSH
36211: LD_VAR 0 7
36215: PPUSH
36216: LD_VAR 0 6
36220: PUSH
36221: LD_VAR 0 7
36225: ARRAY
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: CALL_OW 1
36235: ST_TO_ADDR
36236: GO 36198
36238: POP
36239: POP
// result := tmp ;
36240: LD_ADDR_VAR 0 6
36244: PUSH
36245: LD_VAR 0 9
36249: ST_TO_ADDR
// end ; end ;
36250: LD_VAR 0 6
36254: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36255: LD_INT 0
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// if not x or not y then
36285: LD_VAR 0 2
36289: NOT
36290: PUSH
36291: LD_VAR 0 3
36295: NOT
36296: OR
36297: IFFALSE 36301
// exit ;
36299: GO 37951
// if not range then
36301: LD_VAR 0 4
36305: NOT
36306: IFFALSE 36316
// range := 10 ;
36308: LD_ADDR_VAR 0 4
36312: PUSH
36313: LD_INT 10
36315: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36316: LD_ADDR_VAR 0 8
36320: PUSH
36321: LD_INT 81
36323: PUSH
36324: LD_VAR 0 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 92
36335: PUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_VAR 0 3
36345: PUSH
36346: LD_VAR 0 4
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: LD_INT 21
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: PPUSH
36379: CALL_OW 69
36383: ST_TO_ADDR
// if not tmp then
36384: LD_VAR 0 8
36388: NOT
36389: IFFALSE 36393
// exit ;
36391: GO 37951
// for i in tmp do
36393: LD_ADDR_VAR 0 6
36397: PUSH
36398: LD_VAR 0 8
36402: PUSH
36403: FOR_IN
36404: IFFALSE 37926
// begin points := [ 0 , 0 , 0 ] ;
36406: LD_ADDR_VAR 0 9
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: ST_TO_ADDR
// bpoints := 1 ;
36425: LD_ADDR_VAR 0 10
36429: PUSH
36430: LD_INT 1
36432: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36433: LD_VAR 0 6
36437: PPUSH
36438: CALL_OW 247
36442: PUSH
36443: LD_INT 1
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 37029
36451: POP
// begin if GetClass ( i ) = 1 then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 257
36461: PUSH
36462: LD_INT 1
36464: EQUAL
36465: IFFALSE 36486
// points := [ 10 , 5 , 3 ] ;
36467: LD_ADDR_VAR 0 9
36471: PUSH
36472: LD_INT 10
36474: PUSH
36475: LD_INT 5
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36486: LD_VAR 0 6
36490: PPUSH
36491: CALL_OW 257
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: LD_INT 4
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: IN
36510: IFFALSE 36531
// points := [ 3 , 2 , 1 ] ;
36512: LD_ADDR_VAR 0 9
36516: PUSH
36517: LD_INT 3
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36531: LD_VAR 0 6
36535: PPUSH
36536: CALL_OW 257
36540: PUSH
36541: LD_INT 5
36543: EQUAL
36544: IFFALSE 36565
// points := [ 130 , 5 , 2 ] ;
36546: LD_ADDR_VAR 0 9
36550: PUSH
36551: LD_INT 130
36553: PUSH
36554: LD_INT 5
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36565: LD_VAR 0 6
36569: PPUSH
36570: CALL_OW 257
36574: PUSH
36575: LD_INT 8
36577: EQUAL
36578: IFFALSE 36599
// points := [ 35 , 35 , 30 ] ;
36580: LD_ADDR_VAR 0 9
36584: PUSH
36585: LD_INT 35
36587: PUSH
36588: LD_INT 35
36590: PUSH
36591: LD_INT 30
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36599: LD_VAR 0 6
36603: PPUSH
36604: CALL_OW 257
36608: PUSH
36609: LD_INT 9
36611: EQUAL
36612: IFFALSE 36633
// points := [ 20 , 55 , 40 ] ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_INT 20
36621: PUSH
36622: LD_INT 55
36624: PUSH
36625: LD_INT 40
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36633: LD_VAR 0 6
36637: PPUSH
36638: CALL_OW 257
36642: PUSH
36643: LD_INT 12
36645: PUSH
36646: LD_INT 16
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: IN
36653: IFFALSE 36674
// points := [ 5 , 3 , 2 ] ;
36655: LD_ADDR_VAR 0 9
36659: PUSH
36660: LD_INT 5
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36674: LD_VAR 0 6
36678: PPUSH
36679: CALL_OW 257
36683: PUSH
36684: LD_INT 17
36686: EQUAL
36687: IFFALSE 36708
// points := [ 100 , 50 , 75 ] ;
36689: LD_ADDR_VAR 0 9
36693: PUSH
36694: LD_INT 100
36696: PUSH
36697: LD_INT 50
36699: PUSH
36700: LD_INT 75
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36708: LD_VAR 0 6
36712: PPUSH
36713: CALL_OW 257
36717: PUSH
36718: LD_INT 15
36720: EQUAL
36721: IFFALSE 36742
// points := [ 10 , 5 , 3 ] ;
36723: LD_ADDR_VAR 0 9
36727: PUSH
36728: LD_INT 10
36730: PUSH
36731: LD_INT 5
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36742: LD_VAR 0 6
36746: PPUSH
36747: CALL_OW 257
36751: PUSH
36752: LD_INT 14
36754: EQUAL
36755: IFFALSE 36776
// points := [ 10 , 0 , 0 ] ;
36757: LD_ADDR_VAR 0 9
36761: PUSH
36762: LD_INT 10
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36776: LD_VAR 0 6
36780: PPUSH
36781: CALL_OW 257
36785: PUSH
36786: LD_INT 11
36788: EQUAL
36789: IFFALSE 36810
// points := [ 30 , 10 , 5 ] ;
36791: LD_ADDR_VAR 0 9
36795: PUSH
36796: LD_INT 30
36798: PUSH
36799: LD_INT 10
36801: PUSH
36802: LD_INT 5
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36810: LD_VAR 0 1
36814: PPUSH
36815: LD_INT 5
36817: PPUSH
36818: CALL_OW 321
36822: PUSH
36823: LD_INT 2
36825: EQUAL
36826: IFFALSE 36843
// bpoints := bpoints * 1.8 ;
36828: LD_ADDR_VAR 0 10
36832: PUSH
36833: LD_VAR 0 10
36837: PUSH
36838: LD_REAL  1.80000000000000E+0000
36841: MUL
36842: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36843: LD_VAR 0 6
36847: PPUSH
36848: CALL_OW 257
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: IN
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_INT 51
36879: PPUSH
36880: CALL_OW 321
36884: PUSH
36885: LD_INT 2
36887: EQUAL
36888: AND
36889: IFFALSE 36906
// bpoints := bpoints * 1.2 ;
36891: LD_ADDR_VAR 0 10
36895: PUSH
36896: LD_VAR 0 10
36900: PUSH
36901: LD_REAL  1.20000000000000E+0000
36904: MUL
36905: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36906: LD_VAR 0 6
36910: PPUSH
36911: CALL_OW 257
36915: PUSH
36916: LD_INT 5
36918: PUSH
36919: LD_INT 7
36921: PUSH
36922: LD_INT 9
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: IN
36930: PUSH
36931: LD_VAR 0 1
36935: PPUSH
36936: LD_INT 52
36938: PPUSH
36939: CALL_OW 321
36943: PUSH
36944: LD_INT 2
36946: EQUAL
36947: AND
36948: IFFALSE 36965
// bpoints := bpoints * 1.5 ;
36950: LD_ADDR_VAR 0 10
36954: PUSH
36955: LD_VAR 0 10
36959: PUSH
36960: LD_REAL  1.50000000000000E+0000
36963: MUL
36964: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36965: LD_VAR 0 1
36969: PPUSH
36970: LD_INT 66
36972: PPUSH
36973: CALL_OW 321
36977: PUSH
36978: LD_INT 2
36980: EQUAL
36981: IFFALSE 36998
// bpoints := bpoints * 1.1 ;
36983: LD_ADDR_VAR 0 10
36987: PUSH
36988: LD_VAR 0 10
36992: PUSH
36993: LD_REAL  1.10000000000000E+0000
36996: MUL
36997: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36998: LD_ADDR_VAR 0 10
37002: PUSH
37003: LD_VAR 0 10
37007: PUSH
37008: LD_VAR 0 6
37012: PPUSH
37013: LD_INT 1
37015: PPUSH
37016: CALL_OW 259
37020: PUSH
37021: LD_REAL  1.15000000000000E+0000
37024: MUL
37025: MUL
37026: ST_TO_ADDR
// end ; unit_vehicle :
37027: GO 37855
37029: LD_INT 2
37031: DOUBLE
37032: EQUAL
37033: IFTRUE 37037
37035: GO 37843
37037: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37038: LD_VAR 0 6
37042: PPUSH
37043: CALL_OW 264
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: LD_INT 42
37053: PUSH
37054: LD_INT 24
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: IN
37062: IFFALSE 37083
// points := [ 25 , 5 , 3 ] ;
37064: LD_ADDR_VAR 0 9
37068: PUSH
37069: LD_INT 25
37071: PUSH
37072: LD_INT 5
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37083: LD_VAR 0 6
37087: PPUSH
37088: CALL_OW 264
37092: PUSH
37093: LD_INT 4
37095: PUSH
37096: LD_INT 43
37098: PUSH
37099: LD_INT 25
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: IN
37107: IFFALSE 37128
// points := [ 40 , 15 , 5 ] ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 40
37116: PUSH
37117: LD_INT 15
37119: PUSH
37120: LD_INT 5
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 264
37137: PUSH
37138: LD_INT 3
37140: PUSH
37141: LD_INT 23
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: IN
37148: IFFALSE 37169
// points := [ 7 , 25 , 8 ] ;
37150: LD_ADDR_VAR 0 9
37154: PUSH
37155: LD_INT 7
37157: PUSH
37158: LD_INT 25
37160: PUSH
37161: LD_INT 8
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37169: LD_VAR 0 6
37173: PPUSH
37174: CALL_OW 264
37178: PUSH
37179: LD_INT 5
37181: PUSH
37182: LD_INT 27
37184: PUSH
37185: LD_INT 44
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: IN
37193: IFFALSE 37214
// points := [ 14 , 50 , 16 ] ;
37195: LD_ADDR_VAR 0 9
37199: PUSH
37200: LD_INT 14
37202: PUSH
37203: LD_INT 50
37205: PUSH
37206: LD_INT 16
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37214: LD_VAR 0 6
37218: PPUSH
37219: CALL_OW 264
37223: PUSH
37224: LD_INT 6
37226: PUSH
37227: LD_INT 46
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: IN
37234: IFFALSE 37255
// points := [ 32 , 120 , 70 ] ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: LD_INT 32
37243: PUSH
37244: LD_INT 120
37246: PUSH
37247: LD_INT 70
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 264
37264: PUSH
37265: LD_INT 7
37267: PUSH
37268: LD_INT 28
37270: PUSH
37271: LD_INT 45
37273: PUSH
37274: LD_INT 92
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: IN
37283: IFFALSE 37304
// points := [ 35 , 20 , 45 ] ;
37285: LD_ADDR_VAR 0 9
37289: PUSH
37290: LD_INT 35
37292: PUSH
37293: LD_INT 20
37295: PUSH
37296: LD_INT 45
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37304: LD_VAR 0 6
37308: PPUSH
37309: CALL_OW 264
37313: PUSH
37314: LD_INT 47
37316: PUSH
37317: EMPTY
37318: LIST
37319: IN
37320: IFFALSE 37341
// points := [ 67 , 45 , 75 ] ;
37322: LD_ADDR_VAR 0 9
37326: PUSH
37327: LD_INT 67
37329: PUSH
37330: LD_INT 45
37332: PUSH
37333: LD_INT 75
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37341: LD_VAR 0 6
37345: PPUSH
37346: CALL_OW 264
37350: PUSH
37351: LD_INT 26
37353: PUSH
37354: EMPTY
37355: LIST
37356: IN
37357: IFFALSE 37378
// points := [ 120 , 30 , 80 ] ;
37359: LD_ADDR_VAR 0 9
37363: PUSH
37364: LD_INT 120
37366: PUSH
37367: LD_INT 30
37369: PUSH
37370: LD_INT 80
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37378: LD_VAR 0 6
37382: PPUSH
37383: CALL_OW 264
37387: PUSH
37388: LD_INT 22
37390: PUSH
37391: EMPTY
37392: LIST
37393: IN
37394: IFFALSE 37415
// points := [ 40 , 1 , 1 ] ;
37396: LD_ADDR_VAR 0 9
37400: PUSH
37401: LD_INT 40
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 264
37424: PUSH
37425: LD_INT 29
37427: PUSH
37428: EMPTY
37429: LIST
37430: IN
37431: IFFALSE 37452
// points := [ 70 , 200 , 400 ] ;
37433: LD_ADDR_VAR 0 9
37437: PUSH
37438: LD_INT 70
37440: PUSH
37441: LD_INT 200
37443: PUSH
37444: LD_INT 400
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37452: LD_VAR 0 6
37456: PPUSH
37457: CALL_OW 264
37461: PUSH
37462: LD_INT 14
37464: PUSH
37465: LD_INT 53
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: IN
37472: IFFALSE 37493
// points := [ 40 , 10 , 20 ] ;
37474: LD_ADDR_VAR 0 9
37478: PUSH
37479: LD_INT 40
37481: PUSH
37482: LD_INT 10
37484: PUSH
37485: LD_INT 20
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37493: LD_VAR 0 6
37497: PPUSH
37498: CALL_OW 264
37502: PUSH
37503: LD_INT 9
37505: PUSH
37506: EMPTY
37507: LIST
37508: IN
37509: IFFALSE 37530
// points := [ 5 , 70 , 20 ] ;
37511: LD_ADDR_VAR 0 9
37515: PUSH
37516: LD_INT 5
37518: PUSH
37519: LD_INT 70
37521: PUSH
37522: LD_INT 20
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL_OW 264
37539: PUSH
37540: LD_INT 10
37542: PUSH
37543: EMPTY
37544: LIST
37545: IN
37546: IFFALSE 37567
// points := [ 35 , 110 , 70 ] ;
37548: LD_ADDR_VAR 0 9
37552: PUSH
37553: LD_INT 35
37555: PUSH
37556: LD_INT 110
37558: PUSH
37559: LD_INT 70
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37567: LD_VAR 0 6
37571: PPUSH
37572: CALL_OW 265
37576: PUSH
37577: LD_INT 25
37579: EQUAL
37580: IFFALSE 37601
// points := [ 80 , 65 , 100 ] ;
37582: LD_ADDR_VAR 0 9
37586: PUSH
37587: LD_INT 80
37589: PUSH
37590: LD_INT 65
37592: PUSH
37593: LD_INT 100
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37601: LD_VAR 0 6
37605: PPUSH
37606: CALL_OW 263
37610: PUSH
37611: LD_INT 1
37613: EQUAL
37614: IFFALSE 37649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37616: LD_ADDR_VAR 0 10
37620: PUSH
37621: LD_VAR 0 10
37625: PUSH
37626: LD_VAR 0 6
37630: PPUSH
37631: CALL_OW 311
37635: PPUSH
37636: LD_INT 3
37638: PPUSH
37639: CALL_OW 259
37643: PUSH
37644: LD_INT 4
37646: MUL
37647: MUL
37648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37649: LD_VAR 0 6
37653: PPUSH
37654: CALL_OW 263
37658: PUSH
37659: LD_INT 2
37661: EQUAL
37662: IFFALSE 37713
// begin j := IsControledBy ( i ) ;
37664: LD_ADDR_VAR 0 7
37668: PUSH
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 312
37678: ST_TO_ADDR
// if j then
37679: LD_VAR 0 7
37683: IFFALSE 37713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37685: LD_ADDR_VAR 0 10
37689: PUSH
37690: LD_VAR 0 10
37694: PUSH
37695: LD_VAR 0 7
37699: PPUSH
37700: LD_INT 3
37702: PPUSH
37703: CALL_OW 259
37707: PUSH
37708: LD_INT 3
37710: MUL
37711: MUL
37712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 264
37722: PUSH
37723: LD_INT 5
37725: PUSH
37726: LD_INT 6
37728: PUSH
37729: LD_INT 46
37731: PUSH
37732: LD_INT 44
37734: PUSH
37735: LD_INT 47
37737: PUSH
37738: LD_INT 45
37740: PUSH
37741: LD_INT 28
37743: PUSH
37744: LD_INT 7
37746: PUSH
37747: LD_INT 27
37749: PUSH
37750: LD_INT 29
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: IN
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: LD_INT 52
37773: PPUSH
37774: CALL_OW 321
37778: PUSH
37779: LD_INT 2
37781: EQUAL
37782: AND
37783: IFFALSE 37800
// bpoints := bpoints * 1.2 ;
37785: LD_ADDR_VAR 0 10
37789: PUSH
37790: LD_VAR 0 10
37794: PUSH
37795: LD_REAL  1.20000000000000E+0000
37798: MUL
37799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37800: LD_VAR 0 6
37804: PPUSH
37805: CALL_OW 264
37809: PUSH
37810: LD_INT 6
37812: PUSH
37813: LD_INT 46
37815: PUSH
37816: LD_INT 47
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: IN
37824: IFFALSE 37841
// bpoints := bpoints * 1.2 ;
37826: LD_ADDR_VAR 0 10
37830: PUSH
37831: LD_VAR 0 10
37835: PUSH
37836: LD_REAL  1.20000000000000E+0000
37839: MUL
37840: ST_TO_ADDR
// end ; unit_building :
37841: GO 37855
37843: LD_INT 3
37845: DOUBLE
37846: EQUAL
37847: IFTRUE 37851
37849: GO 37854
37851: POP
// ; end ;
37852: GO 37855
37854: POP
// for j = 1 to 3 do
37855: LD_ADDR_VAR 0 7
37859: PUSH
37860: DOUBLE
37861: LD_INT 1
37863: DEC
37864: ST_TO_ADDR
37865: LD_INT 3
37867: PUSH
37868: FOR_TO
37869: IFFALSE 37922
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37871: LD_ADDR_VAR 0 5
37875: PUSH
37876: LD_VAR 0 5
37880: PPUSH
37881: LD_VAR 0 7
37885: PPUSH
37886: LD_VAR 0 5
37890: PUSH
37891: LD_VAR 0 7
37895: ARRAY
37896: PUSH
37897: LD_VAR 0 9
37901: PUSH
37902: LD_VAR 0 7
37906: ARRAY
37907: PUSH
37908: LD_VAR 0 10
37912: MUL
37913: PLUS
37914: PPUSH
37915: CALL_OW 1
37919: ST_TO_ADDR
37920: GO 37868
37922: POP
37923: POP
// end ;
37924: GO 36403
37926: POP
37927: POP
// result := Replace ( result , 4 , tmp ) ;
37928: LD_ADDR_VAR 0 5
37932: PUSH
37933: LD_VAR 0 5
37937: PPUSH
37938: LD_INT 4
37940: PPUSH
37941: LD_VAR 0 8
37945: PPUSH
37946: CALL_OW 1
37950: ST_TO_ADDR
// end ;
37951: LD_VAR 0 5
37955: RET
// export function DangerAtRange ( unit , range ) ; begin
37956: LD_INT 0
37958: PPUSH
// if not unit then
37959: LD_VAR 0 1
37963: NOT
37964: IFFALSE 37968
// exit ;
37966: GO 38013
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 255
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 250
37992: PPUSH
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 251
38002: PPUSH
38003: LD_VAR 0 2
38007: PPUSH
38008: CALL 36255 0 4
38012: ST_TO_ADDR
// end ;
38013: LD_VAR 0 3
38017: RET
// export function DangerInArea ( side , area ) ; begin
38018: LD_INT 0
38020: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_VAR 0 2
38030: PPUSH
38031: LD_INT 81
38033: PUSH
38034: LD_VAR 0 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PPUSH
38043: CALL_OW 70
38047: ST_TO_ADDR
// end ;
38048: LD_VAR 0 3
38052: RET
// export function IsExtension ( b ) ; begin
38053: LD_INT 0
38055: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38056: LD_ADDR_VAR 0 2
38060: PUSH
38061: LD_VAR 0 1
38065: PUSH
38066: LD_INT 23
38068: PUSH
38069: LD_INT 20
38071: PUSH
38072: LD_INT 22
38074: PUSH
38075: LD_INT 17
38077: PUSH
38078: LD_INT 24
38080: PUSH
38081: LD_INT 21
38083: PUSH
38084: LD_INT 19
38086: PUSH
38087: LD_INT 16
38089: PUSH
38090: LD_INT 25
38092: PUSH
38093: LD_INT 18
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: IN
38108: ST_TO_ADDR
// end ;
38109: LD_VAR 0 2
38113: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38114: LD_INT 0
38116: PPUSH
38117: PPUSH
38118: PPUSH
// result := [ ] ;
38119: LD_ADDR_VAR 0 4
38123: PUSH
38124: EMPTY
38125: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38126: LD_ADDR_VAR 0 5
38130: PUSH
38131: LD_VAR 0 2
38135: PPUSH
38136: LD_INT 21
38138: PUSH
38139: LD_INT 3
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PPUSH
38146: CALL_OW 70
38150: ST_TO_ADDR
// if not tmp then
38151: LD_VAR 0 5
38155: NOT
38156: IFFALSE 38160
// exit ;
38158: GO 38224
// if checkLink then
38160: LD_VAR 0 3
38164: IFFALSE 38214
// begin for i in tmp do
38166: LD_ADDR_VAR 0 6
38170: PUSH
38171: LD_VAR 0 5
38175: PUSH
38176: FOR_IN
38177: IFFALSE 38212
// if GetBase ( i ) <> base then
38179: LD_VAR 0 6
38183: PPUSH
38184: CALL_OW 274
38188: PUSH
38189: LD_VAR 0 1
38193: NONEQUAL
38194: IFFALSE 38210
// ComLinkToBase ( base , i ) ;
38196: LD_VAR 0 1
38200: PPUSH
38201: LD_VAR 0 6
38205: PPUSH
38206: CALL_OW 169
38210: GO 38176
38212: POP
38213: POP
// end ; result := tmp ;
38214: LD_ADDR_VAR 0 4
38218: PUSH
38219: LD_VAR 0 5
38223: ST_TO_ADDR
// end ;
38224: LD_VAR 0 4
38228: RET
// export function ComComplete ( units , b ) ; var i ; begin
38229: LD_INT 0
38231: PPUSH
38232: PPUSH
// if not units then
38233: LD_VAR 0 1
38237: NOT
38238: IFFALSE 38242
// exit ;
38240: GO 38332
// for i in units do
38242: LD_ADDR_VAR 0 4
38246: PUSH
38247: LD_VAR 0 1
38251: PUSH
38252: FOR_IN
38253: IFFALSE 38330
// if BuildingStatus ( b ) = bs_build then
38255: LD_VAR 0 2
38259: PPUSH
38260: CALL_OW 461
38264: PUSH
38265: LD_INT 1
38267: EQUAL
38268: IFFALSE 38328
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38270: LD_VAR 0 4
38274: PPUSH
38275: LD_STRING h
38277: PUSH
38278: LD_VAR 0 2
38282: PPUSH
38283: CALL_OW 250
38287: PUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL_OW 251
38297: PUSH
38298: LD_VAR 0 2
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: PPUSH
38324: CALL_OW 446
38328: GO 38252
38330: POP
38331: POP
// end ;
38332: LD_VAR 0 3
38336: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38337: LD_INT 0
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38345: LD_VAR 0 1
38349: NOT
38350: PUSH
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 263
38360: PUSH
38361: LD_INT 2
38363: NONEQUAL
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 38685
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38369: LD_ADDR_VAR 0 6
38373: PUSH
38374: LD_INT 22
38376: PUSH
38377: LD_VAR 0 1
38381: PPUSH
38382: CALL_OW 255
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 30
38396: PUSH
38397: LD_INT 36
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 34
38406: PUSH
38407: LD_INT 31
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PPUSH
38423: CALL_OW 69
38427: ST_TO_ADDR
// if not tmp then
38428: LD_VAR 0 6
38432: NOT
38433: IFFALSE 38437
// exit ;
38435: GO 38685
// result := [ ] ;
38437: LD_ADDR_VAR 0 2
38441: PUSH
38442: EMPTY
38443: ST_TO_ADDR
// for i in tmp do
38444: LD_ADDR_VAR 0 3
38448: PUSH
38449: LD_VAR 0 6
38453: PUSH
38454: FOR_IN
38455: IFFALSE 38526
// begin t := UnitsInside ( i ) ;
38457: LD_ADDR_VAR 0 4
38461: PUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: CALL_OW 313
38471: ST_TO_ADDR
// if t then
38472: LD_VAR 0 4
38476: IFFALSE 38524
// for j in t do
38478: LD_ADDR_VAR 0 7
38482: PUSH
38483: LD_VAR 0 4
38487: PUSH
38488: FOR_IN
38489: IFFALSE 38522
// result := Replace ( result , result + 1 , j ) ;
38491: LD_ADDR_VAR 0 2
38495: PUSH
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_VAR 0 2
38505: PUSH
38506: LD_INT 1
38508: PLUS
38509: PPUSH
38510: LD_VAR 0 7
38514: PPUSH
38515: CALL_OW 1
38519: ST_TO_ADDR
38520: GO 38488
38522: POP
38523: POP
// end ;
38524: GO 38454
38526: POP
38527: POP
// if not result then
38528: LD_VAR 0 2
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38685
// mech := result [ 1 ] ;
38537: LD_ADDR_VAR 0 5
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_INT 1
38549: ARRAY
38550: ST_TO_ADDR
// if result > 1 then
38551: LD_VAR 0 2
38555: PUSH
38556: LD_INT 1
38558: GREATER
38559: IFFALSE 38671
// begin for i = 2 to result do
38561: LD_ADDR_VAR 0 3
38565: PUSH
38566: DOUBLE
38567: LD_INT 2
38569: DEC
38570: ST_TO_ADDR
38571: LD_VAR 0 2
38575: PUSH
38576: FOR_TO
38577: IFFALSE 38669
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38579: LD_ADDR_VAR 0 4
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_VAR 0 3
38593: ARRAY
38594: PPUSH
38595: LD_INT 3
38597: PPUSH
38598: CALL_OW 259
38602: PUSH
38603: LD_VAR 0 2
38607: PUSH
38608: LD_VAR 0 3
38612: ARRAY
38613: PPUSH
38614: CALL_OW 432
38618: MINUS
38619: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38620: LD_VAR 0 4
38624: PUSH
38625: LD_VAR 0 5
38629: PPUSH
38630: LD_INT 3
38632: PPUSH
38633: CALL_OW 259
38637: PUSH
38638: LD_VAR 0 5
38642: PPUSH
38643: CALL_OW 432
38647: MINUS
38648: GREATEREQUAL
38649: IFFALSE 38667
// mech := result [ i ] ;
38651: LD_ADDR_VAR 0 5
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_VAR 0 3
38665: ARRAY
38666: ST_TO_ADDR
// end ;
38667: GO 38576
38669: POP
38670: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_VAR 0 5
38680: PPUSH
38681: CALL_OW 135
// end ;
38685: LD_VAR 0 2
38689: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38690: LD_INT 0
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
// result := [ ] ;
38705: LD_ADDR_VAR 0 7
38709: PUSH
38710: EMPTY
38711: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38712: LD_VAR 0 1
38716: PPUSH
38717: CALL_OW 266
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: IN
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 40371
// if name then
38737: LD_VAR 0 3
38741: IFFALSE 38757
// SetBName ( base_dep , name ) ;
38743: LD_VAR 0 1
38747: PPUSH
38748: LD_VAR 0 3
38752: PPUSH
38753: CALL_OW 500
// base := GetBase ( base_dep ) ;
38757: LD_ADDR_VAR 0 15
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 274
38771: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38772: LD_ADDR_VAR 0 16
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 255
38786: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38787: LD_ADDR_VAR 0 17
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 248
38801: ST_TO_ADDR
// if sources then
38802: LD_VAR 0 5
38806: IFFALSE 38853
// for i = 1 to 3 do
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: DOUBLE
38814: LD_INT 1
38816: DEC
38817: ST_TO_ADDR
38818: LD_INT 3
38820: PUSH
38821: FOR_TO
38822: IFFALSE 38851
// AddResourceType ( base , i , sources [ i ] ) ;
38824: LD_VAR 0 15
38828: PPUSH
38829: LD_VAR 0 8
38833: PPUSH
38834: LD_VAR 0 5
38838: PUSH
38839: LD_VAR 0 8
38843: ARRAY
38844: PPUSH
38845: CALL_OW 276
38849: GO 38821
38851: POP
38852: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38853: LD_ADDR_VAR 0 18
38857: PUSH
38858: LD_VAR 0 15
38862: PPUSH
38863: LD_VAR 0 2
38867: PPUSH
38868: LD_INT 1
38870: PPUSH
38871: CALL 38114 0 3
38875: ST_TO_ADDR
// InitHc ;
38876: CALL_OW 19
// InitUc ;
38880: CALL_OW 18
// uc_side := side ;
38884: LD_ADDR_OWVAR 20
38888: PUSH
38889: LD_VAR 0 16
38893: ST_TO_ADDR
// uc_nation := nation ;
38894: LD_ADDR_OWVAR 21
38898: PUSH
38899: LD_VAR 0 17
38903: ST_TO_ADDR
// if buildings then
38904: LD_VAR 0 18
38908: IFFALSE 40230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38910: LD_ADDR_VAR 0 19
38914: PUSH
38915: LD_VAR 0 18
38919: PPUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 30
38925: PUSH
38926: LD_INT 29
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 30
38935: PUSH
38936: LD_INT 30
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 72
38952: ST_TO_ADDR
// if tmp then
38953: LD_VAR 0 19
38957: IFFALSE 39005
// for i in tmp do
38959: LD_ADDR_VAR 0 8
38963: PUSH
38964: LD_VAR 0 19
38968: PUSH
38969: FOR_IN
38970: IFFALSE 39003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38972: LD_VAR 0 8
38976: PPUSH
38977: CALL_OW 250
38981: PPUSH
38982: LD_VAR 0 8
38986: PPUSH
38987: CALL_OW 251
38991: PPUSH
38992: LD_VAR 0 16
38996: PPUSH
38997: CALL_OW 441
39001: GO 38969
39003: POP
39004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39005: LD_VAR 0 18
39009: PPUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 30
39015: PUSH
39016: LD_INT 32
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 30
39025: PUSH
39026: LD_INT 33
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: PPUSH
39038: CALL_OW 72
39042: IFFALSE 39130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39044: LD_ADDR_VAR 0 8
39048: PUSH
39049: LD_VAR 0 18
39053: PPUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 30
39059: PUSH
39060: LD_INT 32
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 30
39069: PUSH
39070: LD_INT 33
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: PPUSH
39082: CALL_OW 72
39086: PUSH
39087: FOR_IN
39088: IFFALSE 39128
// begin if not GetBWeapon ( i ) then
39090: LD_VAR 0 8
39094: PPUSH
39095: CALL_OW 269
39099: NOT
39100: IFFALSE 39126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 8
39111: PPUSH
39112: LD_VAR 0 2
39116: PPUSH
39117: CALL 40376 0 2
39121: PPUSH
39122: CALL_OW 431
// end ;
39126: GO 39087
39128: POP
39129: POP
// end ; for i = 1 to personel do
39130: LD_ADDR_VAR 0 8
39134: PUSH
39135: DOUBLE
39136: LD_INT 1
39138: DEC
39139: ST_TO_ADDR
39140: LD_VAR 0 6
39144: PUSH
39145: FOR_TO
39146: IFFALSE 40210
// begin if i > 4 then
39148: LD_VAR 0 8
39152: PUSH
39153: LD_INT 4
39155: GREATER
39156: IFFALSE 39160
// break ;
39158: GO 40210
// case i of 1 :
39160: LD_VAR 0 8
39164: PUSH
39165: LD_INT 1
39167: DOUBLE
39168: EQUAL
39169: IFTRUE 39173
39171: GO 39253
39173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39174: LD_ADDR_VAR 0 12
39178: PUSH
39179: LD_VAR 0 18
39183: PPUSH
39184: LD_INT 22
39186: PUSH
39187: LD_VAR 0 16
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 58
39198: PUSH
39199: EMPTY
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: LD_INT 30
39207: PUSH
39208: LD_INT 32
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 30
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 30
39227: PUSH
39228: LD_INT 5
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: PPUSH
39246: CALL_OW 72
39250: ST_TO_ADDR
39251: GO 39475
39253: LD_INT 2
39255: DOUBLE
39256: EQUAL
39257: IFTRUE 39261
39259: GO 39323
39261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39262: LD_ADDR_VAR 0 12
39266: PUSH
39267: LD_VAR 0 18
39271: PPUSH
39272: LD_INT 22
39274: PUSH
39275: LD_VAR 0 16
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 30
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 30
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: ST_TO_ADDR
39321: GO 39475
39323: LD_INT 3
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39393
39331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39332: LD_ADDR_VAR 0 12
39336: PUSH
39337: LD_VAR 0 18
39341: PPUSH
39342: LD_INT 22
39344: PUSH
39345: LD_VAR 0 16
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: LD_INT 30
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 30
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PPUSH
39386: CALL_OW 72
39390: ST_TO_ADDR
39391: GO 39475
39393: LD_INT 4
39395: DOUBLE
39396: EQUAL
39397: IFTRUE 39401
39399: GO 39474
39401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39402: LD_ADDR_VAR 0 12
39406: PUSH
39407: LD_VAR 0 18
39411: PPUSH
39412: LD_INT 22
39414: PUSH
39415: LD_VAR 0 16
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 30
39429: PUSH
39430: LD_INT 6
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 30
39439: PUSH
39440: LD_INT 7
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 30
39449: PUSH
39450: LD_INT 8
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PPUSH
39467: CALL_OW 72
39471: ST_TO_ADDR
39472: GO 39475
39474: POP
// if i = 1 then
39475: LD_VAR 0 8
39479: PUSH
39480: LD_INT 1
39482: EQUAL
39483: IFFALSE 39594
// begin tmp := [ ] ;
39485: LD_ADDR_VAR 0 19
39489: PUSH
39490: EMPTY
39491: ST_TO_ADDR
// for j in f do
39492: LD_ADDR_VAR 0 9
39496: PUSH
39497: LD_VAR 0 12
39501: PUSH
39502: FOR_IN
39503: IFFALSE 39576
// if GetBType ( j ) = b_bunker then
39505: LD_VAR 0 9
39509: PPUSH
39510: CALL_OW 266
39514: PUSH
39515: LD_INT 32
39517: EQUAL
39518: IFFALSE 39545
// tmp := Insert ( tmp , 1 , j ) else
39520: LD_ADDR_VAR 0 19
39524: PUSH
39525: LD_VAR 0 19
39529: PPUSH
39530: LD_INT 1
39532: PPUSH
39533: LD_VAR 0 9
39537: PPUSH
39538: CALL_OW 2
39542: ST_TO_ADDR
39543: GO 39574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39545: LD_ADDR_VAR 0 19
39549: PUSH
39550: LD_VAR 0 19
39554: PPUSH
39555: LD_VAR 0 19
39559: PUSH
39560: LD_INT 1
39562: PLUS
39563: PPUSH
39564: LD_VAR 0 9
39568: PPUSH
39569: CALL_OW 2
39573: ST_TO_ADDR
39574: GO 39502
39576: POP
39577: POP
// if tmp then
39578: LD_VAR 0 19
39582: IFFALSE 39594
// f := tmp ;
39584: LD_ADDR_VAR 0 12
39588: PUSH
39589: LD_VAR 0 19
39593: ST_TO_ADDR
// end ; x := personel [ i ] ;
39594: LD_ADDR_VAR 0 13
39598: PUSH
39599: LD_VAR 0 6
39603: PUSH
39604: LD_VAR 0 8
39608: ARRAY
39609: ST_TO_ADDR
// if x = - 1 then
39610: LD_VAR 0 13
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: EQUAL
39619: IFFALSE 39828
// begin for j in f do
39621: LD_ADDR_VAR 0 9
39625: PUSH
39626: LD_VAR 0 12
39630: PUSH
39631: FOR_IN
39632: IFFALSE 39824
// repeat InitHc ;
39634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39638: LD_VAR 0 9
39642: PPUSH
39643: CALL_OW 266
39647: PUSH
39648: LD_INT 5
39650: EQUAL
39651: IFFALSE 39721
// begin if UnitsInside ( j ) < 3 then
39653: LD_VAR 0 9
39657: PPUSH
39658: CALL_OW 313
39662: PUSH
39663: LD_INT 3
39665: LESS
39666: IFFALSE 39702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39668: LD_INT 0
39670: PPUSH
39671: LD_INT 5
39673: PUSH
39674: LD_INT 8
39676: PUSH
39677: LD_INT 9
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 17
39689: ARRAY
39690: PPUSH
39691: LD_VAR 0 4
39695: PPUSH
39696: CALL_OW 380
39700: GO 39719
// PrepareHuman ( false , i , skill ) ;
39702: LD_INT 0
39704: PPUSH
39705: LD_VAR 0 8
39709: PPUSH
39710: LD_VAR 0 4
39714: PPUSH
39715: CALL_OW 380
// end else
39719: GO 39738
// PrepareHuman ( false , i , skill ) ;
39721: LD_INT 0
39723: PPUSH
39724: LD_VAR 0 8
39728: PPUSH
39729: LD_VAR 0 4
39733: PPUSH
39734: CALL_OW 380
// un := CreateHuman ;
39738: LD_ADDR_VAR 0 14
39742: PUSH
39743: CALL_OW 44
39747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39748: LD_ADDR_VAR 0 7
39752: PUSH
39753: LD_VAR 0 7
39757: PPUSH
39758: LD_INT 1
39760: PPUSH
39761: LD_VAR 0 14
39765: PPUSH
39766: CALL_OW 2
39770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39771: LD_VAR 0 14
39775: PPUSH
39776: LD_VAR 0 9
39780: PPUSH
39781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39785: LD_VAR 0 9
39789: PPUSH
39790: CALL_OW 313
39794: PUSH
39795: LD_INT 6
39797: EQUAL
39798: PUSH
39799: LD_VAR 0 9
39803: PPUSH
39804: CALL_OW 266
39808: PUSH
39809: LD_INT 32
39811: PUSH
39812: LD_INT 31
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: IN
39819: OR
39820: IFFALSE 39634
39822: GO 39631
39824: POP
39825: POP
// end else
39826: GO 40208
// for j = 1 to x do
39828: LD_ADDR_VAR 0 9
39832: PUSH
39833: DOUBLE
39834: LD_INT 1
39836: DEC
39837: ST_TO_ADDR
39838: LD_VAR 0 13
39842: PUSH
39843: FOR_TO
39844: IFFALSE 40206
// begin InitHc ;
39846: CALL_OW 19
// if not f then
39850: LD_VAR 0 12
39854: NOT
39855: IFFALSE 39944
// begin PrepareHuman ( false , i , skill ) ;
39857: LD_INT 0
39859: PPUSH
39860: LD_VAR 0 8
39864: PPUSH
39865: LD_VAR 0 4
39869: PPUSH
39870: CALL_OW 380
// un := CreateHuman ;
39874: LD_ADDR_VAR 0 14
39878: PUSH
39879: CALL_OW 44
39883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39884: LD_ADDR_VAR 0 7
39888: PUSH
39889: LD_VAR 0 7
39893: PPUSH
39894: LD_INT 1
39896: PPUSH
39897: LD_VAR 0 14
39901: PPUSH
39902: CALL_OW 2
39906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39907: LD_VAR 0 14
39911: PPUSH
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 250
39921: PPUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 251
39931: PPUSH
39932: LD_INT 10
39934: PPUSH
39935: LD_INT 0
39937: PPUSH
39938: CALL_OW 50
// continue ;
39942: GO 39843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39944: LD_VAR 0 12
39948: PUSH
39949: LD_INT 1
39951: ARRAY
39952: PPUSH
39953: CALL_OW 313
39957: PUSH
39958: LD_VAR 0 12
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: CALL_OW 266
39971: PUSH
39972: LD_INT 32
39974: PUSH
39975: LD_INT 31
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: IN
39982: AND
39983: PUSH
39984: LD_VAR 0 12
39988: PUSH
39989: LD_INT 1
39991: ARRAY
39992: PPUSH
39993: CALL_OW 313
39997: PUSH
39998: LD_INT 6
40000: EQUAL
40001: OR
40002: IFFALSE 40022
// f := Delete ( f , 1 ) ;
40004: LD_ADDR_VAR 0 12
40008: PUSH
40009: LD_VAR 0 12
40013: PPUSH
40014: LD_INT 1
40016: PPUSH
40017: CALL_OW 3
40021: ST_TO_ADDR
// if not f then
40022: LD_VAR 0 12
40026: NOT
40027: IFFALSE 40045
// begin x := x + 2 ;
40029: LD_ADDR_VAR 0 13
40033: PUSH
40034: LD_VAR 0 13
40038: PUSH
40039: LD_INT 2
40041: PLUS
40042: ST_TO_ADDR
// continue ;
40043: GO 39843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40045: LD_VAR 0 12
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: PPUSH
40054: CALL_OW 266
40058: PUSH
40059: LD_INT 5
40061: EQUAL
40062: IFFALSE 40136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40064: LD_VAR 0 12
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: PPUSH
40073: CALL_OW 313
40077: PUSH
40078: LD_INT 3
40080: LESS
40081: IFFALSE 40117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40083: LD_INT 0
40085: PPUSH
40086: LD_INT 5
40088: PUSH
40089: LD_INT 8
40091: PUSH
40092: LD_INT 9
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: PUSH
40100: LD_VAR 0 17
40104: ARRAY
40105: PPUSH
40106: LD_VAR 0 4
40110: PPUSH
40111: CALL_OW 380
40115: GO 40134
// PrepareHuman ( false , i , skill ) ;
40117: LD_INT 0
40119: PPUSH
40120: LD_VAR 0 8
40124: PPUSH
40125: LD_VAR 0 4
40129: PPUSH
40130: CALL_OW 380
// end else
40134: GO 40153
// PrepareHuman ( false , i , skill ) ;
40136: LD_INT 0
40138: PPUSH
40139: LD_VAR 0 8
40143: PPUSH
40144: LD_VAR 0 4
40148: PPUSH
40149: CALL_OW 380
// un := CreateHuman ;
40153: LD_ADDR_VAR 0 14
40157: PUSH
40158: CALL_OW 44
40162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40163: LD_ADDR_VAR 0 7
40167: PUSH
40168: LD_VAR 0 7
40172: PPUSH
40173: LD_INT 1
40175: PPUSH
40176: LD_VAR 0 14
40180: PPUSH
40181: CALL_OW 2
40185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40186: LD_VAR 0 14
40190: PPUSH
40191: LD_VAR 0 12
40195: PUSH
40196: LD_INT 1
40198: ARRAY
40199: PPUSH
40200: CALL_OW 52
// end ;
40204: GO 39843
40206: POP
40207: POP
// end ;
40208: GO 39145
40210: POP
40211: POP
// result := result ^ buildings ;
40212: LD_ADDR_VAR 0 7
40216: PUSH
40217: LD_VAR 0 7
40221: PUSH
40222: LD_VAR 0 18
40226: ADD
40227: ST_TO_ADDR
// end else
40228: GO 40371
// begin for i = 1 to personel do
40230: LD_ADDR_VAR 0 8
40234: PUSH
40235: DOUBLE
40236: LD_INT 1
40238: DEC
40239: ST_TO_ADDR
40240: LD_VAR 0 6
40244: PUSH
40245: FOR_TO
40246: IFFALSE 40369
// begin if i > 4 then
40248: LD_VAR 0 8
40252: PUSH
40253: LD_INT 4
40255: GREATER
40256: IFFALSE 40260
// break ;
40258: GO 40369
// x := personel [ i ] ;
40260: LD_ADDR_VAR 0 13
40264: PUSH
40265: LD_VAR 0 6
40269: PUSH
40270: LD_VAR 0 8
40274: ARRAY
40275: ST_TO_ADDR
// if x = - 1 then
40276: LD_VAR 0 13
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: EQUAL
40285: IFFALSE 40289
// continue ;
40287: GO 40245
// PrepareHuman ( false , i , skill ) ;
40289: LD_INT 0
40291: PPUSH
40292: LD_VAR 0 8
40296: PPUSH
40297: LD_VAR 0 4
40301: PPUSH
40302: CALL_OW 380
// un := CreateHuman ;
40306: LD_ADDR_VAR 0 14
40310: PUSH
40311: CALL_OW 44
40315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40316: LD_VAR 0 14
40320: PPUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 250
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 251
40340: PPUSH
40341: LD_INT 10
40343: PPUSH
40344: LD_INT 0
40346: PPUSH
40347: CALL_OW 50
// result := result ^ un ;
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: LD_VAR 0 7
40360: PUSH
40361: LD_VAR 0 14
40365: ADD
40366: ST_TO_ADDR
// end ;
40367: GO 40245
40369: POP
40370: POP
// end ; end ;
40371: LD_VAR 0 7
40375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40376: LD_INT 0
40378: PPUSH
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
// result := false ;
40394: LD_ADDR_VAR 0 3
40398: PUSH
40399: LD_INT 0
40401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40402: LD_VAR 0 1
40406: NOT
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 266
40417: PUSH
40418: LD_INT 32
40420: PUSH
40421: LD_INT 33
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: IN
40428: NOT
40429: OR
40430: IFFALSE 40434
// exit ;
40432: GO 41543
// nat := GetNation ( tower ) ;
40434: LD_ADDR_VAR 0 12
40438: PUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 248
40448: ST_TO_ADDR
// side := GetSide ( tower ) ;
40449: LD_ADDR_VAR 0 16
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 255
40463: ST_TO_ADDR
// x := GetX ( tower ) ;
40464: LD_ADDR_VAR 0 10
40468: PUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 250
40478: ST_TO_ADDR
// y := GetY ( tower ) ;
40479: LD_ADDR_VAR 0 11
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 251
40493: ST_TO_ADDR
// if not x or not y then
40494: LD_VAR 0 10
40498: NOT
40499: PUSH
40500: LD_VAR 0 11
40504: NOT
40505: OR
40506: IFFALSE 40510
// exit ;
40508: GO 41543
// weapon := 0 ;
40510: LD_ADDR_VAR 0 18
40514: PUSH
40515: LD_INT 0
40517: ST_TO_ADDR
// fac_list := [ ] ;
40518: LD_ADDR_VAR 0 17
40522: PUSH
40523: EMPTY
40524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40525: LD_ADDR_VAR 0 6
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 274
40539: PPUSH
40540: LD_VAR 0 2
40544: PPUSH
40545: LD_INT 0
40547: PPUSH
40548: CALL 38114 0 3
40552: PPUSH
40553: LD_INT 30
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 72
40567: ST_TO_ADDR
// if not factories then
40568: LD_VAR 0 6
40572: NOT
40573: IFFALSE 40577
// exit ;
40575: GO 41543
// for i in factories do
40577: LD_ADDR_VAR 0 8
40581: PUSH
40582: LD_VAR 0 6
40586: PUSH
40587: FOR_IN
40588: IFFALSE 40613
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40590: LD_ADDR_VAR 0 17
40594: PUSH
40595: LD_VAR 0 17
40599: PUSH
40600: LD_VAR 0 8
40604: PPUSH
40605: CALL_OW 478
40609: UNION
40610: ST_TO_ADDR
40611: GO 40587
40613: POP
40614: POP
// if not fac_list then
40615: LD_VAR 0 17
40619: NOT
40620: IFFALSE 40624
// exit ;
40622: GO 41543
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40624: LD_ADDR_VAR 0 5
40628: PUSH
40629: LD_INT 4
40631: PUSH
40632: LD_INT 5
40634: PUSH
40635: LD_INT 9
40637: PUSH
40638: LD_INT 10
40640: PUSH
40641: LD_INT 6
40643: PUSH
40644: LD_INT 7
40646: PUSH
40647: LD_INT 11
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 27
40661: PUSH
40662: LD_INT 28
40664: PUSH
40665: LD_INT 26
40667: PUSH
40668: LD_INT 30
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 43
40679: PUSH
40680: LD_INT 44
40682: PUSH
40683: LD_INT 46
40685: PUSH
40686: LD_INT 45
40688: PUSH
40689: LD_INT 47
40691: PUSH
40692: LD_INT 49
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: PUSH
40708: LD_VAR 0 12
40712: ARRAY
40713: ST_TO_ADDR
// list := list isect fac_list ;
40714: LD_ADDR_VAR 0 5
40718: PUSH
40719: LD_VAR 0 5
40723: PUSH
40724: LD_VAR 0 17
40728: ISECT
40729: ST_TO_ADDR
// if not list then
40730: LD_VAR 0 5
40734: NOT
40735: IFFALSE 40739
// exit ;
40737: GO 41543
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40739: LD_VAR 0 12
40743: PUSH
40744: LD_INT 3
40746: EQUAL
40747: PUSH
40748: LD_INT 49
40750: PUSH
40751: LD_VAR 0 5
40755: IN
40756: AND
40757: PUSH
40758: LD_INT 31
40760: PPUSH
40761: LD_VAR 0 16
40765: PPUSH
40766: CALL_OW 321
40770: PUSH
40771: LD_INT 2
40773: EQUAL
40774: AND
40775: IFFALSE 40835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40777: LD_INT 22
40779: PUSH
40780: LD_VAR 0 16
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 35
40791: PUSH
40792: LD_INT 49
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 91
40801: PUSH
40802: LD_VAR 0 1
40806: PUSH
40807: LD_INT 10
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: PPUSH
40820: CALL_OW 69
40824: NOT
40825: IFFALSE 40835
// weapon := ru_time_lapser ;
40827: LD_ADDR_VAR 0 18
40831: PUSH
40832: LD_INT 49
40834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40835: LD_VAR 0 12
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: IN
40850: PUSH
40851: LD_INT 11
40853: PUSH
40854: LD_VAR 0 5
40858: IN
40859: PUSH
40860: LD_INT 30
40862: PUSH
40863: LD_VAR 0 5
40867: IN
40868: OR
40869: AND
40870: PUSH
40871: LD_INT 6
40873: PPUSH
40874: LD_VAR 0 16
40878: PPUSH
40879: CALL_OW 321
40883: PUSH
40884: LD_INT 2
40886: EQUAL
40887: AND
40888: IFFALSE 41053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40890: LD_INT 22
40892: PUSH
40893: LD_VAR 0 16
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 35
40907: PUSH
40908: LD_INT 11
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 35
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 91
40932: PUSH
40933: LD_VAR 0 1
40937: PUSH
40938: LD_INT 18
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: PPUSH
40951: CALL_OW 69
40955: NOT
40956: PUSH
40957: LD_INT 22
40959: PUSH
40960: LD_VAR 0 16
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 30
40974: PUSH
40975: LD_INT 32
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 30
40984: PUSH
40985: LD_INT 33
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 91
40999: PUSH
41000: LD_VAR 0 1
41004: PUSH
41005: LD_INT 12
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: PPUSH
41021: CALL_OW 69
41025: PUSH
41026: LD_INT 2
41028: GREATER
41029: AND
41030: IFFALSE 41053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41032: LD_ADDR_VAR 0 18
41036: PUSH
41037: LD_INT 11
41039: PUSH
41040: LD_INT 30
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_VAR 0 12
41051: ARRAY
41052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41053: LD_VAR 0 18
41057: NOT
41058: PUSH
41059: LD_INT 40
41061: PPUSH
41062: LD_VAR 0 16
41066: PPUSH
41067: CALL_OW 321
41071: PUSH
41072: LD_INT 2
41074: EQUAL
41075: AND
41076: PUSH
41077: LD_INT 7
41079: PUSH
41080: LD_VAR 0 5
41084: IN
41085: PUSH
41086: LD_INT 28
41088: PUSH
41089: LD_VAR 0 5
41093: IN
41094: OR
41095: PUSH
41096: LD_INT 45
41098: PUSH
41099: LD_VAR 0 5
41103: IN
41104: OR
41105: AND
41106: IFFALSE 41360
// begin hex := GetHexInfo ( x , y ) ;
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: LD_VAR 0 10
41117: PPUSH
41118: LD_VAR 0 11
41122: PPUSH
41123: CALL_OW 546
41127: ST_TO_ADDR
// if hex [ 1 ] then
41128: LD_VAR 0 4
41132: PUSH
41133: LD_INT 1
41135: ARRAY
41136: IFFALSE 41140
// exit ;
41138: GO 41543
// height := hex [ 2 ] ;
41140: LD_ADDR_VAR 0 15
41144: PUSH
41145: LD_VAR 0 4
41149: PUSH
41150: LD_INT 2
41152: ARRAY
41153: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41154: LD_ADDR_VAR 0 14
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: LD_INT 5
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// for i in tmp do
41177: LD_ADDR_VAR 0 8
41181: PUSH
41182: LD_VAR 0 14
41186: PUSH
41187: FOR_IN
41188: IFFALSE 41358
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41190: LD_ADDR_VAR 0 9
41194: PUSH
41195: LD_VAR 0 10
41199: PPUSH
41200: LD_VAR 0 8
41204: PPUSH
41205: LD_INT 5
41207: PPUSH
41208: CALL_OW 272
41212: PUSH
41213: LD_VAR 0 11
41217: PPUSH
41218: LD_VAR 0 8
41222: PPUSH
41223: LD_INT 5
41225: PPUSH
41226: CALL_OW 273
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41235: LD_VAR 0 9
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: PPUSH
41244: LD_VAR 0 9
41248: PUSH
41249: LD_INT 2
41251: ARRAY
41252: PPUSH
41253: CALL_OW 488
41257: IFFALSE 41356
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41259: LD_ADDR_VAR 0 4
41263: PUSH
41264: LD_VAR 0 9
41268: PUSH
41269: LD_INT 1
41271: ARRAY
41272: PPUSH
41273: LD_VAR 0 9
41277: PUSH
41278: LD_INT 2
41280: ARRAY
41281: PPUSH
41282: CALL_OW 546
41286: ST_TO_ADDR
// if hex [ 1 ] then
41287: LD_VAR 0 4
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: IFFALSE 41299
// continue ;
41297: GO 41187
// h := hex [ 2 ] ;
41299: LD_ADDR_VAR 0 13
41303: PUSH
41304: LD_VAR 0 4
41308: PUSH
41309: LD_INT 2
41311: ARRAY
41312: ST_TO_ADDR
// if h + 7 < height then
41313: LD_VAR 0 13
41317: PUSH
41318: LD_INT 7
41320: PLUS
41321: PUSH
41322: LD_VAR 0 15
41326: LESS
41327: IFFALSE 41356
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41329: LD_ADDR_VAR 0 18
41333: PUSH
41334: LD_INT 7
41336: PUSH
41337: LD_INT 28
41339: PUSH
41340: LD_INT 45
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: LIST
41347: PUSH
41348: LD_VAR 0 12
41352: ARRAY
41353: ST_TO_ADDR
// break ;
41354: GO 41358
// end ; end ; end ;
41356: GO 41187
41358: POP
41359: POP
// end ; if not weapon then
41360: LD_VAR 0 18
41364: NOT
41365: IFFALSE 41425
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41367: LD_ADDR_VAR 0 5
41371: PUSH
41372: LD_VAR 0 5
41376: PUSH
41377: LD_INT 11
41379: PUSH
41380: LD_INT 30
41382: PUSH
41383: LD_INT 49
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: DIFF
41391: ST_TO_ADDR
// if not list then
41392: LD_VAR 0 5
41396: NOT
41397: IFFALSE 41401
// exit ;
41399: GO 41543
// weapon := list [ rand ( 1 , list ) ] ;
41401: LD_ADDR_VAR 0 18
41405: PUSH
41406: LD_VAR 0 5
41410: PUSH
41411: LD_INT 1
41413: PPUSH
41414: LD_VAR 0 5
41418: PPUSH
41419: CALL_OW 12
41423: ARRAY
41424: ST_TO_ADDR
// end ; if weapon then
41425: LD_VAR 0 18
41429: IFFALSE 41543
// begin tmp := CostOfWeapon ( weapon ) ;
41431: LD_ADDR_VAR 0 14
41435: PUSH
41436: LD_VAR 0 18
41440: PPUSH
41441: CALL_OW 451
41445: ST_TO_ADDR
// j := GetBase ( tower ) ;
41446: LD_ADDR_VAR 0 9
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 274
41460: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41461: LD_VAR 0 9
41465: PPUSH
41466: LD_INT 1
41468: PPUSH
41469: CALL_OW 275
41473: PUSH
41474: LD_VAR 0 14
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: GREATEREQUAL
41483: PUSH
41484: LD_VAR 0 9
41488: PPUSH
41489: LD_INT 2
41491: PPUSH
41492: CALL_OW 275
41496: PUSH
41497: LD_VAR 0 14
41501: PUSH
41502: LD_INT 2
41504: ARRAY
41505: GREATEREQUAL
41506: AND
41507: PUSH
41508: LD_VAR 0 9
41512: PPUSH
41513: LD_INT 3
41515: PPUSH
41516: CALL_OW 275
41520: PUSH
41521: LD_VAR 0 14
41525: PUSH
41526: LD_INT 3
41528: ARRAY
41529: GREATEREQUAL
41530: AND
41531: IFFALSE 41543
// result := weapon ;
41533: LD_ADDR_VAR 0 3
41537: PUSH
41538: LD_VAR 0 18
41542: ST_TO_ADDR
// end ; end ;
41543: LD_VAR 0 3
41547: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41548: LD_INT 0
41550: PPUSH
41551: PPUSH
// result := true ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_INT 1
41559: ST_TO_ADDR
// if array1 = array2 then
41560: LD_VAR 0 1
41564: PUSH
41565: LD_VAR 0 2
41569: EQUAL
41570: IFFALSE 41630
// begin for i = 1 to array1 do
41572: LD_ADDR_VAR 0 4
41576: PUSH
41577: DOUBLE
41578: LD_INT 1
41580: DEC
41581: ST_TO_ADDR
41582: LD_VAR 0 1
41586: PUSH
41587: FOR_TO
41588: IFFALSE 41626
// if array1 [ i ] <> array2 [ i ] then
41590: LD_VAR 0 1
41594: PUSH
41595: LD_VAR 0 4
41599: ARRAY
41600: PUSH
41601: LD_VAR 0 2
41605: PUSH
41606: LD_VAR 0 4
41610: ARRAY
41611: NONEQUAL
41612: IFFALSE 41624
// begin result := false ;
41614: LD_ADDR_VAR 0 3
41618: PUSH
41619: LD_INT 0
41621: ST_TO_ADDR
// break ;
41622: GO 41626
// end ;
41624: GO 41587
41626: POP
41627: POP
// end else
41628: GO 41638
// result := false ;
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 0
41637: ST_TO_ADDR
// end ;
41638: LD_VAR 0 3
41642: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41643: LD_INT 0
41645: PPUSH
41646: PPUSH
// if not array1 or not array2 then
41647: LD_VAR 0 1
41651: NOT
41652: PUSH
41653: LD_VAR 0 2
41657: NOT
41658: OR
41659: IFFALSE 41663
// exit ;
41661: GO 41727
// result := true ;
41663: LD_ADDR_VAR 0 3
41667: PUSH
41668: LD_INT 1
41670: ST_TO_ADDR
// for i = 1 to array1 do
41671: LD_ADDR_VAR 0 4
41675: PUSH
41676: DOUBLE
41677: LD_INT 1
41679: DEC
41680: ST_TO_ADDR
41681: LD_VAR 0 1
41685: PUSH
41686: FOR_TO
41687: IFFALSE 41725
// if array1 [ i ] <> array2 [ i ] then
41689: LD_VAR 0 1
41693: PUSH
41694: LD_VAR 0 4
41698: ARRAY
41699: PUSH
41700: LD_VAR 0 2
41704: PUSH
41705: LD_VAR 0 4
41709: ARRAY
41710: NONEQUAL
41711: IFFALSE 41723
// begin result := false ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_INT 0
41720: ST_TO_ADDR
// break ;
41721: GO 41725
// end ;
41723: GO 41686
41725: POP
41726: POP
// end ;
41727: LD_VAR 0 3
41731: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41732: LD_INT 0
41734: PPUSH
41735: PPUSH
41736: PPUSH
// pom := GetBase ( fac ) ;
41737: LD_ADDR_VAR 0 5
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 274
41751: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41752: LD_ADDR_VAR 0 4
41756: PUSH
41757: LD_VAR 0 2
41761: PUSH
41762: LD_INT 1
41764: ARRAY
41765: PPUSH
41766: LD_VAR 0 2
41770: PUSH
41771: LD_INT 2
41773: ARRAY
41774: PPUSH
41775: LD_VAR 0 2
41779: PUSH
41780: LD_INT 3
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_INT 4
41791: ARRAY
41792: PPUSH
41793: CALL_OW 449
41797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_VAR 0 5
41807: PPUSH
41808: LD_INT 1
41810: PPUSH
41811: CALL_OW 275
41815: PUSH
41816: LD_VAR 0 4
41820: PUSH
41821: LD_INT 1
41823: ARRAY
41824: GREATEREQUAL
41825: PUSH
41826: LD_VAR 0 5
41830: PPUSH
41831: LD_INT 2
41833: PPUSH
41834: CALL_OW 275
41838: PUSH
41839: LD_VAR 0 4
41843: PUSH
41844: LD_INT 2
41846: ARRAY
41847: GREATEREQUAL
41848: AND
41849: PUSH
41850: LD_VAR 0 5
41854: PPUSH
41855: LD_INT 3
41857: PPUSH
41858: CALL_OW 275
41862: PUSH
41863: LD_VAR 0 4
41867: PUSH
41868: LD_INT 3
41870: ARRAY
41871: GREATEREQUAL
41872: AND
41873: ST_TO_ADDR
// end ;
41874: LD_VAR 0 3
41878: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41879: LD_INT 0
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
// pom := GetBase ( building ) ;
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_VAR 0 1
41894: PPUSH
41895: CALL_OW 274
41899: ST_TO_ADDR
// if not pom then
41900: LD_VAR 0 3
41904: NOT
41905: IFFALSE 41909
// exit ;
41907: GO 42079
// btype := GetBType ( building ) ;
41909: LD_ADDR_VAR 0 5
41913: PUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 266
41923: ST_TO_ADDR
// if btype = b_armoury then
41924: LD_VAR 0 5
41928: PUSH
41929: LD_INT 4
41931: EQUAL
41932: IFFALSE 41942
// btype := b_barracks ;
41934: LD_ADDR_VAR 0 5
41938: PUSH
41939: LD_INT 5
41941: ST_TO_ADDR
// if btype = b_depot then
41942: LD_VAR 0 5
41946: PUSH
41947: LD_INT 0
41949: EQUAL
41950: IFFALSE 41960
// btype := b_warehouse ;
41952: LD_ADDR_VAR 0 5
41956: PUSH
41957: LD_INT 1
41959: ST_TO_ADDR
// if btype = b_workshop then
41960: LD_VAR 0 5
41964: PUSH
41965: LD_INT 2
41967: EQUAL
41968: IFFALSE 41978
// btype := b_factory ;
41970: LD_ADDR_VAR 0 5
41974: PUSH
41975: LD_INT 3
41977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41978: LD_ADDR_VAR 0 4
41982: PUSH
41983: LD_VAR 0 5
41987: PPUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 248
41997: PPUSH
41998: CALL_OW 450
42002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42003: LD_ADDR_VAR 0 2
42007: PUSH
42008: LD_VAR 0 3
42012: PPUSH
42013: LD_INT 1
42015: PPUSH
42016: CALL_OW 275
42020: PUSH
42021: LD_VAR 0 4
42025: PUSH
42026: LD_INT 1
42028: ARRAY
42029: GREATEREQUAL
42030: PUSH
42031: LD_VAR 0 3
42035: PPUSH
42036: LD_INT 2
42038: PPUSH
42039: CALL_OW 275
42043: PUSH
42044: LD_VAR 0 4
42048: PUSH
42049: LD_INT 2
42051: ARRAY
42052: GREATEREQUAL
42053: AND
42054: PUSH
42055: LD_VAR 0 3
42059: PPUSH
42060: LD_INT 3
42062: PPUSH
42063: CALL_OW 275
42067: PUSH
42068: LD_VAR 0 4
42072: PUSH
42073: LD_INT 3
42075: ARRAY
42076: GREATEREQUAL
42077: AND
42078: ST_TO_ADDR
// end ;
42079: LD_VAR 0 2
42083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42084: LD_INT 0
42086: PPUSH
42087: PPUSH
42088: PPUSH
// pom := GetBase ( building ) ;
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: CALL_OW 274
42103: ST_TO_ADDR
// if not pom then
42104: LD_VAR 0 4
42108: NOT
42109: IFFALSE 42113
// exit ;
42111: GO 42214
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42113: LD_ADDR_VAR 0 5
42117: PUSH
42118: LD_VAR 0 2
42122: PPUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 248
42132: PPUSH
42133: CALL_OW 450
42137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42138: LD_ADDR_VAR 0 3
42142: PUSH
42143: LD_VAR 0 4
42147: PPUSH
42148: LD_INT 1
42150: PPUSH
42151: CALL_OW 275
42155: PUSH
42156: LD_VAR 0 5
42160: PUSH
42161: LD_INT 1
42163: ARRAY
42164: GREATEREQUAL
42165: PUSH
42166: LD_VAR 0 4
42170: PPUSH
42171: LD_INT 2
42173: PPUSH
42174: CALL_OW 275
42178: PUSH
42179: LD_VAR 0 5
42183: PUSH
42184: LD_INT 2
42186: ARRAY
42187: GREATEREQUAL
42188: AND
42189: PUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: LD_INT 3
42197: PPUSH
42198: CALL_OW 275
42202: PUSH
42203: LD_VAR 0 5
42207: PUSH
42208: LD_INT 3
42210: ARRAY
42211: GREATEREQUAL
42212: AND
42213: ST_TO_ADDR
// end ;
42214: LD_VAR 0 3
42218: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42219: LD_INT 0
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
// result := false ;
42232: LD_ADDR_VAR 0 8
42236: PUSH
42237: LD_INT 0
42239: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42240: LD_VAR 0 5
42244: NOT
42245: PUSH
42246: LD_VAR 0 1
42250: NOT
42251: OR
42252: PUSH
42253: LD_VAR 0 2
42257: NOT
42258: OR
42259: PUSH
42260: LD_VAR 0 3
42264: NOT
42265: OR
42266: IFFALSE 42270
// exit ;
42268: GO 43084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42270: LD_ADDR_VAR 0 14
42274: PUSH
42275: LD_VAR 0 1
42279: PPUSH
42280: LD_VAR 0 2
42284: PPUSH
42285: LD_VAR 0 3
42289: PPUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: LD_VAR 0 5
42299: PUSH
42300: LD_INT 1
42302: ARRAY
42303: PPUSH
42304: CALL_OW 248
42308: PPUSH
42309: LD_INT 0
42311: PPUSH
42312: CALL 44337 0 6
42316: ST_TO_ADDR
// if not hexes then
42317: LD_VAR 0 14
42321: NOT
42322: IFFALSE 42326
// exit ;
42324: GO 43084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42326: LD_ADDR_VAR 0 17
42330: PUSH
42331: LD_VAR 0 5
42335: PPUSH
42336: LD_INT 22
42338: PUSH
42339: LD_VAR 0 13
42343: PPUSH
42344: CALL_OW 255
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 30
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 30
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PPUSH
42385: CALL_OW 72
42389: ST_TO_ADDR
// for i = 1 to hexes do
42390: LD_ADDR_VAR 0 9
42394: PUSH
42395: DOUBLE
42396: LD_INT 1
42398: DEC
42399: ST_TO_ADDR
42400: LD_VAR 0 14
42404: PUSH
42405: FOR_TO
42406: IFFALSE 43082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42408: LD_ADDR_VAR 0 13
42412: PUSH
42413: LD_VAR 0 14
42417: PUSH
42418: LD_VAR 0 9
42422: ARRAY
42423: PUSH
42424: LD_INT 1
42426: ARRAY
42427: PPUSH
42428: LD_VAR 0 14
42432: PUSH
42433: LD_VAR 0 9
42437: ARRAY
42438: PUSH
42439: LD_INT 2
42441: ARRAY
42442: PPUSH
42443: CALL_OW 428
42447: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42448: LD_VAR 0 14
42452: PUSH
42453: LD_VAR 0 9
42457: ARRAY
42458: PUSH
42459: LD_INT 1
42461: ARRAY
42462: PPUSH
42463: LD_VAR 0 14
42467: PUSH
42468: LD_VAR 0 9
42472: ARRAY
42473: PUSH
42474: LD_INT 2
42476: ARRAY
42477: PPUSH
42478: CALL_OW 351
42482: PUSH
42483: LD_VAR 0 14
42487: PUSH
42488: LD_VAR 0 9
42492: ARRAY
42493: PUSH
42494: LD_INT 1
42496: ARRAY
42497: PPUSH
42498: LD_VAR 0 14
42502: PUSH
42503: LD_VAR 0 9
42507: ARRAY
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: PPUSH
42513: CALL_OW 488
42517: NOT
42518: OR
42519: PUSH
42520: LD_VAR 0 13
42524: PPUSH
42525: CALL_OW 247
42529: PUSH
42530: LD_INT 3
42532: EQUAL
42533: OR
42534: IFFALSE 42540
// exit ;
42536: POP
42537: POP
42538: GO 43084
// if not tmp then
42540: LD_VAR 0 13
42544: NOT
42545: IFFALSE 42549
// continue ;
42547: GO 42405
// result := true ;
42549: LD_ADDR_VAR 0 8
42553: PUSH
42554: LD_INT 1
42556: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42557: LD_VAR 0 6
42561: PUSH
42562: LD_VAR 0 13
42566: PPUSH
42567: CALL_OW 247
42571: PUSH
42572: LD_INT 2
42574: EQUAL
42575: AND
42576: PUSH
42577: LD_VAR 0 13
42581: PPUSH
42582: CALL_OW 263
42586: PUSH
42587: LD_INT 1
42589: EQUAL
42590: AND
42591: IFFALSE 42755
// begin if IsDrivenBy ( tmp ) then
42593: LD_VAR 0 13
42597: PPUSH
42598: CALL_OW 311
42602: IFFALSE 42606
// continue ;
42604: GO 42405
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42606: LD_VAR 0 6
42610: PPUSH
42611: LD_INT 3
42613: PUSH
42614: LD_INT 60
42616: PUSH
42617: EMPTY
42618: LIST
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 55
42629: PUSH
42630: EMPTY
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PPUSH
42641: CALL_OW 72
42645: IFFALSE 42753
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42647: LD_ADDR_VAR 0 18
42651: PUSH
42652: LD_VAR 0 6
42656: PPUSH
42657: LD_INT 3
42659: PUSH
42660: LD_INT 60
42662: PUSH
42663: EMPTY
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 55
42675: PUSH
42676: EMPTY
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PPUSH
42687: CALL_OW 72
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: ST_TO_ADDR
// if IsInUnit ( driver ) then
42696: LD_VAR 0 18
42700: PPUSH
42701: CALL_OW 310
42705: IFFALSE 42716
// ComExit ( driver ) ;
42707: LD_VAR 0 18
42711: PPUSH
42712: CALL 68129 0 1
// AddComEnterUnit ( driver , tmp ) ;
42716: LD_VAR 0 18
42720: PPUSH
42721: LD_VAR 0 13
42725: PPUSH
42726: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42730: LD_VAR 0 18
42734: PPUSH
42735: LD_VAR 0 7
42739: PPUSH
42740: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42744: LD_VAR 0 18
42748: PPUSH
42749: CALL_OW 181
// end ; continue ;
42753: GO 42405
// end ; if not cleaners or not tmp in cleaners then
42755: LD_VAR 0 6
42759: NOT
42760: PUSH
42761: LD_VAR 0 13
42765: PUSH
42766: LD_VAR 0 6
42770: IN
42771: NOT
42772: OR
42773: IFFALSE 43080
// begin if dep then
42775: LD_VAR 0 17
42779: IFFALSE 42915
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42781: LD_ADDR_VAR 0 16
42785: PUSH
42786: LD_VAR 0 17
42790: PUSH
42791: LD_INT 1
42793: ARRAY
42794: PPUSH
42795: CALL_OW 250
42799: PPUSH
42800: LD_VAR 0 17
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: CALL_OW 254
42813: PPUSH
42814: LD_INT 5
42816: PPUSH
42817: CALL_OW 272
42821: PUSH
42822: LD_VAR 0 17
42826: PUSH
42827: LD_INT 1
42829: ARRAY
42830: PPUSH
42831: CALL_OW 251
42835: PPUSH
42836: LD_VAR 0 17
42840: PUSH
42841: LD_INT 1
42843: ARRAY
42844: PPUSH
42845: CALL_OW 254
42849: PPUSH
42850: LD_INT 5
42852: PPUSH
42853: CALL_OW 273
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42862: LD_VAR 0 16
42866: PUSH
42867: LD_INT 1
42869: ARRAY
42870: PPUSH
42871: LD_VAR 0 16
42875: PUSH
42876: LD_INT 2
42878: ARRAY
42879: PPUSH
42880: CALL_OW 488
42884: IFFALSE 42915
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42886: LD_VAR 0 13
42890: PPUSH
42891: LD_VAR 0 16
42895: PUSH
42896: LD_INT 1
42898: ARRAY
42899: PPUSH
42900: LD_VAR 0 16
42904: PUSH
42905: LD_INT 2
42907: ARRAY
42908: PPUSH
42909: CALL_OW 111
// continue ;
42913: GO 42405
// end ; end ; r := GetDir ( tmp ) ;
42915: LD_ADDR_VAR 0 15
42919: PUSH
42920: LD_VAR 0 13
42924: PPUSH
42925: CALL_OW 254
42929: ST_TO_ADDR
// if r = 5 then
42930: LD_VAR 0 15
42934: PUSH
42935: LD_INT 5
42937: EQUAL
42938: IFFALSE 42948
// r := 0 ;
42940: LD_ADDR_VAR 0 15
42944: PUSH
42945: LD_INT 0
42947: ST_TO_ADDR
// for j = r to 5 do
42948: LD_ADDR_VAR 0 10
42952: PUSH
42953: DOUBLE
42954: LD_VAR 0 15
42958: DEC
42959: ST_TO_ADDR
42960: LD_INT 5
42962: PUSH
42963: FOR_TO
42964: IFFALSE 43078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42966: LD_ADDR_VAR 0 11
42970: PUSH
42971: LD_VAR 0 13
42975: PPUSH
42976: CALL_OW 250
42980: PPUSH
42981: LD_VAR 0 10
42985: PPUSH
42986: LD_INT 2
42988: PPUSH
42989: CALL_OW 272
42993: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42994: LD_ADDR_VAR 0 12
42998: PUSH
42999: LD_VAR 0 13
43003: PPUSH
43004: CALL_OW 251
43008: PPUSH
43009: LD_VAR 0 10
43013: PPUSH
43014: LD_INT 2
43016: PPUSH
43017: CALL_OW 273
43021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43022: LD_VAR 0 11
43026: PPUSH
43027: LD_VAR 0 12
43031: PPUSH
43032: CALL_OW 488
43036: PUSH
43037: LD_VAR 0 11
43041: PPUSH
43042: LD_VAR 0 12
43046: PPUSH
43047: CALL_OW 428
43051: NOT
43052: AND
43053: IFFALSE 43076
// begin ComMoveXY ( tmp , _x , _y ) ;
43055: LD_VAR 0 13
43059: PPUSH
43060: LD_VAR 0 11
43064: PPUSH
43065: LD_VAR 0 12
43069: PPUSH
43070: CALL_OW 111
// break ;
43074: GO 43078
// end ; end ;
43076: GO 42963
43078: POP
43079: POP
// end ; end ;
43080: GO 42405
43082: POP
43083: POP
// end ;
43084: LD_VAR 0 8
43088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43089: LD_INT 0
43091: PPUSH
// result := true ;
43092: LD_ADDR_VAR 0 3
43096: PUSH
43097: LD_INT 1
43099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43100: LD_VAR 0 2
43104: PUSH
43105: LD_INT 24
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43119
43111: LD_INT 33
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43119
43117: GO 43144
43119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_INT 32
43127: PPUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 321
43137: PUSH
43138: LD_INT 2
43140: EQUAL
43141: ST_TO_ADDR
43142: GO 43460
43144: LD_INT 20
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43177
43152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43153: LD_ADDR_VAR 0 3
43157: PUSH
43158: LD_INT 6
43160: PPUSH
43161: LD_VAR 0 1
43165: PPUSH
43166: CALL_OW 321
43170: PUSH
43171: LD_INT 2
43173: EQUAL
43174: ST_TO_ADDR
43175: GO 43460
43177: LD_INT 22
43179: DOUBLE
43180: EQUAL
43181: IFTRUE 43191
43183: LD_INT 36
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43216
43191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43192: LD_ADDR_VAR 0 3
43196: PUSH
43197: LD_INT 15
43199: PPUSH
43200: LD_VAR 0 1
43204: PPUSH
43205: CALL_OW 321
43209: PUSH
43210: LD_INT 2
43212: EQUAL
43213: ST_TO_ADDR
43214: GO 43460
43216: LD_INT 30
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43249
43224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_INT 20
43232: PPUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 321
43242: PUSH
43243: LD_INT 2
43245: EQUAL
43246: ST_TO_ADDR
43247: GO 43460
43249: LD_INT 28
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43263
43255: LD_INT 21
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43288
43263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 21
43271: PPUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: CALL_OW 321
43281: PUSH
43282: LD_INT 2
43284: EQUAL
43285: ST_TO_ADDR
43286: GO 43460
43288: LD_INT 16
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43296
43294: GO 43321
43296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43297: LD_ADDR_VAR 0 3
43301: PUSH
43302: LD_INT 84
43304: PPUSH
43305: LD_VAR 0 1
43309: PPUSH
43310: CALL_OW 321
43314: PUSH
43315: LD_INT 2
43317: EQUAL
43318: ST_TO_ADDR
43319: GO 43460
43321: LD_INT 19
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43335
43327: LD_INT 23
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43335
43333: GO 43360
43335: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43336: LD_ADDR_VAR 0 3
43340: PUSH
43341: LD_INT 83
43343: PPUSH
43344: LD_VAR 0 1
43348: PPUSH
43349: CALL_OW 321
43353: PUSH
43354: LD_INT 2
43356: EQUAL
43357: ST_TO_ADDR
43358: GO 43460
43360: LD_INT 17
43362: DOUBLE
43363: EQUAL
43364: IFTRUE 43368
43366: GO 43393
43368: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_INT 39
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 321
43386: PUSH
43387: LD_INT 2
43389: EQUAL
43390: ST_TO_ADDR
43391: GO 43460
43393: LD_INT 18
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43401
43399: GO 43426
43401: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_INT 40
43409: PPUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 321
43419: PUSH
43420: LD_INT 2
43422: EQUAL
43423: ST_TO_ADDR
43424: GO 43460
43426: LD_INT 27
43428: DOUBLE
43429: EQUAL
43430: IFTRUE 43434
43432: GO 43459
43434: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_INT 35
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 321
43452: PUSH
43453: LD_INT 2
43455: EQUAL
43456: ST_TO_ADDR
43457: GO 43460
43459: POP
// end ;
43460: LD_VAR 0 3
43464: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43465: LD_INT 0
43467: PPUSH
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
43472: PPUSH
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
43477: PPUSH
// result := false ;
43478: LD_ADDR_VAR 0 6
43482: PUSH
43483: LD_INT 0
43485: ST_TO_ADDR
// if btype = b_depot then
43486: LD_VAR 0 2
43490: PUSH
43491: LD_INT 0
43493: EQUAL
43494: IFFALSE 43506
// begin result := true ;
43496: LD_ADDR_VAR 0 6
43500: PUSH
43501: LD_INT 1
43503: ST_TO_ADDR
// exit ;
43504: GO 44332
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43506: LD_VAR 0 1
43510: NOT
43511: PUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: CALL_OW 266
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: IN
43532: NOT
43533: OR
43534: PUSH
43535: LD_VAR 0 2
43539: NOT
43540: OR
43541: PUSH
43542: LD_VAR 0 5
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 4
43561: PUSH
43562: LD_INT 5
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: IN
43573: NOT
43574: OR
43575: PUSH
43576: LD_VAR 0 3
43580: PPUSH
43581: LD_VAR 0 4
43585: PPUSH
43586: CALL_OW 488
43590: NOT
43591: OR
43592: IFFALSE 43596
// exit ;
43594: GO 44332
// side := GetSide ( depot ) ;
43596: LD_ADDR_VAR 0 9
43600: PUSH
43601: LD_VAR 0 1
43605: PPUSH
43606: CALL_OW 255
43610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43611: LD_VAR 0 9
43615: PPUSH
43616: LD_VAR 0 2
43620: PPUSH
43621: CALL 43089 0 2
43625: NOT
43626: IFFALSE 43630
// exit ;
43628: GO 44332
// pom := GetBase ( depot ) ;
43630: LD_ADDR_VAR 0 10
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 274
43644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43645: LD_ADDR_VAR 0 11
43649: PUSH
43650: LD_VAR 0 2
43654: PPUSH
43655: LD_VAR 0 1
43659: PPUSH
43660: CALL_OW 248
43664: PPUSH
43665: CALL_OW 450
43669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43670: LD_VAR 0 10
43674: PPUSH
43675: LD_INT 1
43677: PPUSH
43678: CALL_OW 275
43682: PUSH
43683: LD_VAR 0 11
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: GREATEREQUAL
43692: PUSH
43693: LD_VAR 0 10
43697: PPUSH
43698: LD_INT 2
43700: PPUSH
43701: CALL_OW 275
43705: PUSH
43706: LD_VAR 0 11
43710: PUSH
43711: LD_INT 2
43713: ARRAY
43714: GREATEREQUAL
43715: AND
43716: PUSH
43717: LD_VAR 0 10
43721: PPUSH
43722: LD_INT 3
43724: PPUSH
43725: CALL_OW 275
43729: PUSH
43730: LD_VAR 0 11
43734: PUSH
43735: LD_INT 3
43737: ARRAY
43738: GREATEREQUAL
43739: AND
43740: NOT
43741: IFFALSE 43745
// exit ;
43743: GO 44332
// if GetBType ( depot ) = b_depot then
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 266
43754: PUSH
43755: LD_INT 0
43757: EQUAL
43758: IFFALSE 43770
// dist := 28 else
43760: LD_ADDR_VAR 0 14
43764: PUSH
43765: LD_INT 28
43767: ST_TO_ADDR
43768: GO 43778
// dist := 36 ;
43770: LD_ADDR_VAR 0 14
43774: PUSH
43775: LD_INT 36
43777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43778: LD_VAR 0 1
43782: PPUSH
43783: LD_VAR 0 3
43787: PPUSH
43788: LD_VAR 0 4
43792: PPUSH
43793: CALL_OW 297
43797: PUSH
43798: LD_VAR 0 14
43802: GREATER
43803: IFFALSE 43807
// exit ;
43805: GO 44332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43807: LD_ADDR_VAR 0 12
43811: PUSH
43812: LD_VAR 0 2
43816: PPUSH
43817: LD_VAR 0 3
43821: PPUSH
43822: LD_VAR 0 4
43826: PPUSH
43827: LD_VAR 0 5
43831: PPUSH
43832: LD_VAR 0 1
43836: PPUSH
43837: CALL_OW 248
43841: PPUSH
43842: LD_INT 0
43844: PPUSH
43845: CALL 44337 0 6
43849: ST_TO_ADDR
// if not hexes then
43850: LD_VAR 0 12
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44332
// hex := GetHexInfo ( x , y ) ;
43859: LD_ADDR_VAR 0 15
43863: PUSH
43864: LD_VAR 0 3
43868: PPUSH
43869: LD_VAR 0 4
43873: PPUSH
43874: CALL_OW 546
43878: ST_TO_ADDR
// if hex [ 1 ] then
43879: LD_VAR 0 15
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: IFFALSE 43891
// exit ;
43889: GO 44332
// height := hex [ 2 ] ;
43891: LD_ADDR_VAR 0 13
43895: PUSH
43896: LD_VAR 0 15
43900: PUSH
43901: LD_INT 2
43903: ARRAY
43904: ST_TO_ADDR
// for i = 1 to hexes do
43905: LD_ADDR_VAR 0 7
43909: PUSH
43910: DOUBLE
43911: LD_INT 1
43913: DEC
43914: ST_TO_ADDR
43915: LD_VAR 0 12
43919: PUSH
43920: FOR_TO
43921: IFFALSE 44251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43923: LD_VAR 0 12
43927: PUSH
43928: LD_VAR 0 7
43932: ARRAY
43933: PUSH
43934: LD_INT 1
43936: ARRAY
43937: PPUSH
43938: LD_VAR 0 12
43942: PUSH
43943: LD_VAR 0 7
43947: ARRAY
43948: PUSH
43949: LD_INT 2
43951: ARRAY
43952: PPUSH
43953: CALL_OW 488
43957: NOT
43958: PUSH
43959: LD_VAR 0 12
43963: PUSH
43964: LD_VAR 0 7
43968: ARRAY
43969: PUSH
43970: LD_INT 1
43972: ARRAY
43973: PPUSH
43974: LD_VAR 0 12
43978: PUSH
43979: LD_VAR 0 7
43983: ARRAY
43984: PUSH
43985: LD_INT 2
43987: ARRAY
43988: PPUSH
43989: CALL_OW 428
43993: PUSH
43994: LD_INT 0
43996: GREATER
43997: OR
43998: PUSH
43999: LD_VAR 0 12
44003: PUSH
44004: LD_VAR 0 7
44008: ARRAY
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: PPUSH
44014: LD_VAR 0 12
44018: PUSH
44019: LD_VAR 0 7
44023: ARRAY
44024: PUSH
44025: LD_INT 2
44027: ARRAY
44028: PPUSH
44029: CALL_OW 351
44033: OR
44034: IFFALSE 44040
// exit ;
44036: POP
44037: POP
44038: GO 44332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44040: LD_ADDR_VAR 0 8
44044: PUSH
44045: LD_VAR 0 12
44049: PUSH
44050: LD_VAR 0 7
44054: ARRAY
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PPUSH
44060: LD_VAR 0 12
44064: PUSH
44065: LD_VAR 0 7
44069: ARRAY
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: PPUSH
44075: CALL_OW 546
44079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44080: LD_VAR 0 8
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PUSH
44089: LD_VAR 0 8
44093: PUSH
44094: LD_INT 2
44096: ARRAY
44097: PUSH
44098: LD_VAR 0 13
44102: PUSH
44103: LD_INT 2
44105: PLUS
44106: GREATER
44107: OR
44108: PUSH
44109: LD_VAR 0 8
44113: PUSH
44114: LD_INT 2
44116: ARRAY
44117: PUSH
44118: LD_VAR 0 13
44122: PUSH
44123: LD_INT 2
44125: MINUS
44126: LESS
44127: OR
44128: PUSH
44129: LD_VAR 0 8
44133: PUSH
44134: LD_INT 3
44136: ARRAY
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 8
44143: PUSH
44144: LD_INT 9
44146: PUSH
44147: LD_INT 10
44149: PUSH
44150: LD_INT 11
44152: PUSH
44153: LD_INT 12
44155: PUSH
44156: LD_INT 13
44158: PUSH
44159: LD_INT 16
44161: PUSH
44162: LD_INT 17
44164: PUSH
44165: LD_INT 18
44167: PUSH
44168: LD_INT 19
44170: PUSH
44171: LD_INT 20
44173: PUSH
44174: LD_INT 21
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: IN
44192: NOT
44193: OR
44194: PUSH
44195: LD_VAR 0 8
44199: PUSH
44200: LD_INT 5
44202: ARRAY
44203: NOT
44204: OR
44205: PUSH
44206: LD_VAR 0 8
44210: PUSH
44211: LD_INT 6
44213: ARRAY
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 7
44223: PUSH
44224: LD_INT 9
44226: PUSH
44227: LD_INT 10
44229: PUSH
44230: LD_INT 11
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: IN
44241: NOT
44242: OR
44243: IFFALSE 44249
// exit ;
44245: POP
44246: POP
44247: GO 44332
// end ;
44249: GO 43920
44251: POP
44252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44253: LD_VAR 0 9
44257: PPUSH
44258: LD_VAR 0 3
44262: PPUSH
44263: LD_VAR 0 4
44267: PPUSH
44268: LD_INT 20
44270: PPUSH
44271: CALL 36255 0 4
44275: PUSH
44276: LD_INT 4
44278: ARRAY
44279: IFFALSE 44283
// exit ;
44281: GO 44332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44283: LD_VAR 0 2
44287: PUSH
44288: LD_INT 29
44290: PUSH
44291: LD_INT 30
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: IN
44298: PUSH
44299: LD_VAR 0 3
44303: PPUSH
44304: LD_VAR 0 4
44308: PPUSH
44309: LD_VAR 0 9
44313: PPUSH
44314: CALL_OW 440
44318: NOT
44319: AND
44320: IFFALSE 44324
// exit ;
44322: GO 44332
// result := true ;
44324: LD_ADDR_VAR 0 6
44328: PUSH
44329: LD_INT 1
44331: ST_TO_ADDR
// end ;
44332: LD_VAR 0 6
44336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44337: LD_INT 0
44339: PPUSH
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
44383: PPUSH
44384: PPUSH
44385: PPUSH
44386: PPUSH
44387: PPUSH
44388: PPUSH
44389: PPUSH
44390: PPUSH
44391: PPUSH
44392: PPUSH
44393: PPUSH
44394: PPUSH
44395: PPUSH
44396: PPUSH
// result = [ ] ;
44397: LD_ADDR_VAR 0 7
44401: PUSH
44402: EMPTY
44403: ST_TO_ADDR
// temp_list = [ ] ;
44404: LD_ADDR_VAR 0 9
44408: PUSH
44409: EMPTY
44410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44411: LD_VAR 0 4
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 3
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: LD_INT 5
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: IN
44442: NOT
44443: PUSH
44444: LD_VAR 0 1
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: IN
44459: PUSH
44460: LD_VAR 0 5
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: IN
44479: NOT
44480: AND
44481: OR
44482: IFFALSE 44486
// exit ;
44484: GO 62877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44486: LD_VAR 0 1
44490: PUSH
44491: LD_INT 6
44493: PUSH
44494: LD_INT 7
44496: PUSH
44497: LD_INT 8
44499: PUSH
44500: LD_INT 13
44502: PUSH
44503: LD_INT 12
44505: PUSH
44506: LD_INT 15
44508: PUSH
44509: LD_INT 11
44511: PUSH
44512: LD_INT 14
44514: PUSH
44515: LD_INT 10
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: IN
44529: IFFALSE 44539
// btype = b_lab ;
44531: LD_ADDR_VAR 0 1
44535: PUSH
44536: LD_INT 6
44538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44539: LD_VAR 0 6
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: IN
44558: NOT
44559: PUSH
44560: LD_VAR 0 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: LD_INT 6
44579: PUSH
44580: LD_INT 36
44582: PUSH
44583: LD_INT 4
44585: PUSH
44586: LD_INT 5
44588: PUSH
44589: LD_INT 31
44591: PUSH
44592: LD_INT 32
44594: PUSH
44595: LD_INT 33
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: IN
44611: NOT
44612: PUSH
44613: LD_VAR 0 6
44617: PUSH
44618: LD_INT 1
44620: EQUAL
44621: AND
44622: OR
44623: PUSH
44624: LD_VAR 0 1
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: IN
44639: NOT
44640: PUSH
44641: LD_VAR 0 6
44645: PUSH
44646: LD_INT 2
44648: EQUAL
44649: AND
44650: OR
44651: IFFALSE 44661
// mode = 0 ;
44653: LD_ADDR_VAR 0 6
44657: PUSH
44658: LD_INT 0
44660: ST_TO_ADDR
// case mode of 0 :
44661: LD_VAR 0 6
44665: PUSH
44666: LD_INT 0
44668: DOUBLE
44669: EQUAL
44670: IFTRUE 44674
44672: GO 56127
44674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44675: LD_ADDR_VAR 0 11
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44868: LD_ADDR_VAR 0 12
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45064: LD_ADDR_VAR 0 13
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 3
45235: NEG
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45263: LD_ADDR_VAR 0 14
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 3
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45459: LD_ADDR_VAR 0 15
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 3
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45652: LD_ADDR_VAR 0 16
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: LD_INT 3
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45845: LD_ADDR_VAR 0 17
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46075: LD_ADDR_VAR 0 18
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46305: LD_ADDR_VAR 0 19
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46535: LD_ADDR_VAR 0 20
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46765: LD_ADDR_VAR 0 21
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46995: LD_ADDR_VAR 0 22
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47225: LD_ADDR_VAR 0 23
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47505: LD_ADDR_VAR 0 24
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47781: LD_ADDR_VAR 0 25
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48055: LD_ADDR_VAR 0 26
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 3
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48331: LD_ADDR_VAR 0 27
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48611: LD_ADDR_VAR 0 28
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 3
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 3
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48893: LD_ADDR_VAR 0 29
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49172: LD_ADDR_VAR 0 30
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 3
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49450: LD_ADDR_VAR 0 31
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49728: LD_ADDR_VAR 0 32
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50006: LD_ADDR_VAR 0 33
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50285: LD_ADDR_VAR 0 34
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50565: LD_ADDR_VAR 0 35
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50677: LD_ADDR_VAR 0 36
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50789: LD_ADDR_VAR 0 37
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50901: LD_ADDR_VAR 0 38
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51013: LD_ADDR_VAR 0 39
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51125: LD_ADDR_VAR 0 40
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51237: LD_ADDR_VAR 0 41
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51587: LD_ADDR_VAR 0 42
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51937: LD_ADDR_VAR 0 43
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52285: LD_ADDR_VAR 0 44
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52635: LD_ADDR_VAR 0 45
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52985: LD_ADDR_VAR 0 46
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 3
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53333: LD_ADDR_VAR 0 47
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53484: LD_ADDR_VAR 0 48
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53631: LD_ADDR_VAR 0 49
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53775: LD_ADDR_VAR 0 50
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53919: LD_ADDR_VAR 0 51
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54066: LD_ADDR_VAR 0 52
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54217: LD_ADDR_VAR 0 53
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54447: LD_ADDR_VAR 0 54
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54677: LD_ADDR_VAR 0 55
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54907: LD_ADDR_VAR 0 56
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55137: LD_ADDR_VAR 0 57
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55367: LD_ADDR_VAR 0 58
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55597: LD_ADDR_VAR 0 59
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55685: LD_ADDR_VAR 0 60
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55773: LD_ADDR_VAR 0 61
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55861: LD_ADDR_VAR 0 62
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55949: LD_ADDR_VAR 0 63
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56037: LD_ADDR_VAR 0 64
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: ST_TO_ADDR
// end ; 1 :
56125: GO 62022
56127: LD_INT 1
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56135
56133: GO 58758
56135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56136: LD_ADDR_VAR 0 11
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56180: LD_ADDR_VAR 0 12
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56221: LD_ADDR_VAR 0 13
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56261: LD_ADDR_VAR 0 14
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56302: LD_ADDR_VAR 0 15
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56346: LD_ADDR_VAR 0 16
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: NEG
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56392: LD_ADDR_VAR 0 17
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56436: LD_ADDR_VAR 0 18
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56477: LD_ADDR_VAR 0 19
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56517: LD_ADDR_VAR 0 20
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 21
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56602: LD_ADDR_VAR 0 22
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: LIST
56647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56648: LD_ADDR_VAR 0 23
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56692: LD_ADDR_VAR 0 24
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56733: LD_ADDR_VAR 0 25
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56773: LD_ADDR_VAR 0 26
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56814: LD_ADDR_VAR 0 27
56818: PUSH
56819: LD_INT 3
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56858: LD_ADDR_VAR 0 28
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: LD_INT 4
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 4
56889: NEG
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56904: LD_ADDR_VAR 0 29
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 5
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 5
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 4
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 6
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 6
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57059: LD_ADDR_VAR 0 30
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 4
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 5
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 6
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 6
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57202: LD_ADDR_VAR 0 31
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 4
57249: PUSH
57250: LD_INT 4
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: LD_INT 4
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 5
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 5
57279: PUSH
57280: LD_INT 5
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 4
57289: PUSH
57290: LD_INT 5
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 6
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 6
57309: PUSH
57310: LD_INT 6
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: LD_INT 6
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57341: LD_ADDR_VAR 0 32
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 4
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 5
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 5
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 6
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 6
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57484: LD_ADDR_VAR 0 33
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 5
57570: NEG
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: NEG
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 6
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 6
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57639: LD_ADDR_VAR 0 34
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: LD_INT 5
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 5
57742: NEG
57743: PUSH
57744: LD_INT 5
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 5
57754: NEG
57755: PUSH
57756: LD_INT 6
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 6
57766: NEG
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 6
57778: NEG
57779: PUSH
57780: LD_INT 6
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57802: LD_ADDR_VAR 0 41
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57846: LD_ADDR_VAR 0 42
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57887: LD_ADDR_VAR 0 43
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57927: LD_ADDR_VAR 0 44
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57968: LD_ADDR_VAR 0 45
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58012: LD_ADDR_VAR 0 46
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58058: LD_ADDR_VAR 0 47
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58091: LD_ADDR_VAR 0 48
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58122: LD_ADDR_VAR 0 49
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58151: LD_ADDR_VAR 0 50
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58180: LD_ADDR_VAR 0 51
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58211: LD_ADDR_VAR 0 52
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58244: LD_ADDR_VAR 0 53
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58288: LD_ADDR_VAR 0 54
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58329: LD_ADDR_VAR 0 55
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58369: LD_ADDR_VAR 0 56
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58410: LD_ADDR_VAR 0 57
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58454: LD_ADDR_VAR 0 58
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58500: LD_ADDR_VAR 0 59
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58544: LD_ADDR_VAR 0 60
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58585: LD_ADDR_VAR 0 61
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58625: LD_ADDR_VAR 0 62
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58666: LD_ADDR_VAR 0 63
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58710: LD_ADDR_VAR 0 64
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// end ; 2 :
58756: GO 62022
58758: LD_INT 2
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58766
58764: GO 62021
58766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58767: LD_ADDR_VAR 0 29
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 5
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 5
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 4
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 4
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 5
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 5
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 5
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 4
59129: NEG
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: NEG
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: LD_INT 5
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: LD_INT 4
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: NEG
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 5
59212: NEG
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: LD_INT 5
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: NEG
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: NEG
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59305: LD_ADDR_VAR 0 30
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: LD_INT 4
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: LD_INT 5
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 5
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 4
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 5
59551: NEG
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 5
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 5
59574: NEG
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 4
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: NEG
59670: PUSH
59671: LD_INT 4
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 5
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 4
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 5
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59852: LD_ADDR_VAR 0 31
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 4
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 5
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 5
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 4
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: LD_INT 5
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 4
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 4
60054: NEG
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: NEG
60067: PUSH
60068: LD_INT 5
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 4
60102: NEG
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 5
60114: NEG
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: NEG
60127: PUSH
60128: LD_INT 5
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 5
60150: NEG
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 4
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 5
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 5
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 4
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 5
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60402: LD_ADDR_VAR 0 32
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 4
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 5
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 5
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: LD_INT 3
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: LD_INT 4
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 4
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 4
60607: NEG
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 4
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 5
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 4
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 4
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 5
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 5
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 4
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 5
60834: PUSH
60835: LD_INT 4
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 5
60844: PUSH
60845: LD_INT 5
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 5
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60949: LD_ADDR_VAR 0 33
60953: PUSH
60954: LD_INT 4
60956: NEG
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 4
61004: NEG
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: NEG
61017: PUSH
61018: LD_INT 4
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: NEG
61029: PUSH
61030: LD_INT 5
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 5
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 4
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 3
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 3
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 4
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 4
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 4
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 5
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 4
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 4
61329: PUSH
61330: LD_INT 2
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 4
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: LD_INT 5
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61487: LD_ADDR_VAR 0 34
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 5
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 4
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 4
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 5
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 5
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 4
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 4
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 4
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 5
61709: PUSH
61710: LD_INT 4
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 5
61719: PUSH
61720: LD_INT 5
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 4
61729: PUSH
61730: LD_INT 5
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 4
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 5
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 5
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 4
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 4
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 4
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 4
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 5
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 5
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 5
61951: NEG
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 3
61963: NEG
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// end ; end ;
62019: GO 62022
62021: POP
// case btype of b_depot , b_warehouse :
62022: LD_VAR 0 1
62026: PUSH
62027: LD_INT 0
62029: DOUBLE
62030: EQUAL
62031: IFTRUE 62041
62033: LD_INT 1
62035: DOUBLE
62036: EQUAL
62037: IFTRUE 62041
62039: GO 62242
62041: POP
// case nation of nation_american :
62042: LD_VAR 0 5
62046: PUSH
62047: LD_INT 1
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62055
62053: GO 62111
62055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62056: LD_ADDR_VAR 0 9
62060: PUSH
62061: LD_VAR 0 11
62065: PUSH
62066: LD_VAR 0 12
62070: PUSH
62071: LD_VAR 0 13
62075: PUSH
62076: LD_VAR 0 14
62080: PUSH
62081: LD_VAR 0 15
62085: PUSH
62086: LD_VAR 0 16
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: PUSH
62099: LD_VAR 0 4
62103: PUSH
62104: LD_INT 1
62106: PLUS
62107: ARRAY
62108: ST_TO_ADDR
62109: GO 62240
62111: LD_INT 2
62113: DOUBLE
62114: EQUAL
62115: IFTRUE 62119
62117: GO 62175
62119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62120: LD_ADDR_VAR 0 9
62124: PUSH
62125: LD_VAR 0 17
62129: PUSH
62130: LD_VAR 0 18
62134: PUSH
62135: LD_VAR 0 19
62139: PUSH
62140: LD_VAR 0 20
62144: PUSH
62145: LD_VAR 0 21
62149: PUSH
62150: LD_VAR 0 22
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: LD_VAR 0 4
62167: PUSH
62168: LD_INT 1
62170: PLUS
62171: ARRAY
62172: ST_TO_ADDR
62173: GO 62240
62175: LD_INT 3
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62183
62181: GO 62239
62183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62184: LD_ADDR_VAR 0 9
62188: PUSH
62189: LD_VAR 0 23
62193: PUSH
62194: LD_VAR 0 24
62198: PUSH
62199: LD_VAR 0 25
62203: PUSH
62204: LD_VAR 0 26
62208: PUSH
62209: LD_VAR 0 27
62213: PUSH
62214: LD_VAR 0 28
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: PUSH
62227: LD_VAR 0 4
62231: PUSH
62232: LD_INT 1
62234: PLUS
62235: ARRAY
62236: ST_TO_ADDR
62237: GO 62240
62239: POP
62240: GO 62795
62242: LD_INT 2
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62256
62248: LD_INT 3
62250: DOUBLE
62251: EQUAL
62252: IFTRUE 62256
62254: GO 62312
62256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62257: LD_ADDR_VAR 0 9
62261: PUSH
62262: LD_VAR 0 29
62266: PUSH
62267: LD_VAR 0 30
62271: PUSH
62272: LD_VAR 0 31
62276: PUSH
62277: LD_VAR 0 32
62281: PUSH
62282: LD_VAR 0 33
62286: PUSH
62287: LD_VAR 0 34
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: PUSH
62300: LD_VAR 0 4
62304: PUSH
62305: LD_INT 1
62307: PLUS
62308: ARRAY
62309: ST_TO_ADDR
62310: GO 62795
62312: LD_INT 16
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62374
62318: LD_INT 17
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62374
62324: LD_INT 18
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62374
62330: LD_INT 19
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62374
62336: LD_INT 22
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62374
62342: LD_INT 20
62344: DOUBLE
62345: EQUAL
62346: IFTRUE 62374
62348: LD_INT 21
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62374
62354: LD_INT 23
62356: DOUBLE
62357: EQUAL
62358: IFTRUE 62374
62360: LD_INT 24
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62374
62366: LD_INT 25
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62374
62372: GO 62430
62374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62375: LD_ADDR_VAR 0 9
62379: PUSH
62380: LD_VAR 0 35
62384: PUSH
62385: LD_VAR 0 36
62389: PUSH
62390: LD_VAR 0 37
62394: PUSH
62395: LD_VAR 0 38
62399: PUSH
62400: LD_VAR 0 39
62404: PUSH
62405: LD_VAR 0 40
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: PUSH
62418: LD_VAR 0 4
62422: PUSH
62423: LD_INT 1
62425: PLUS
62426: ARRAY
62427: ST_TO_ADDR
62428: GO 62795
62430: LD_INT 6
62432: DOUBLE
62433: EQUAL
62434: IFTRUE 62486
62436: LD_INT 7
62438: DOUBLE
62439: EQUAL
62440: IFTRUE 62486
62442: LD_INT 8
62444: DOUBLE
62445: EQUAL
62446: IFTRUE 62486
62448: LD_INT 13
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62486
62454: LD_INT 12
62456: DOUBLE
62457: EQUAL
62458: IFTRUE 62486
62460: LD_INT 15
62462: DOUBLE
62463: EQUAL
62464: IFTRUE 62486
62466: LD_INT 11
62468: DOUBLE
62469: EQUAL
62470: IFTRUE 62486
62472: LD_INT 14
62474: DOUBLE
62475: EQUAL
62476: IFTRUE 62486
62478: LD_INT 10
62480: DOUBLE
62481: EQUAL
62482: IFTRUE 62486
62484: GO 62542
62486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62487: LD_ADDR_VAR 0 9
62491: PUSH
62492: LD_VAR 0 41
62496: PUSH
62497: LD_VAR 0 42
62501: PUSH
62502: LD_VAR 0 43
62506: PUSH
62507: LD_VAR 0 44
62511: PUSH
62512: LD_VAR 0 45
62516: PUSH
62517: LD_VAR 0 46
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: PUSH
62530: LD_VAR 0 4
62534: PUSH
62535: LD_INT 1
62537: PLUS
62538: ARRAY
62539: ST_TO_ADDR
62540: GO 62795
62542: LD_INT 36
62544: DOUBLE
62545: EQUAL
62546: IFTRUE 62550
62548: GO 62606
62550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62551: LD_ADDR_VAR 0 9
62555: PUSH
62556: LD_VAR 0 47
62560: PUSH
62561: LD_VAR 0 48
62565: PUSH
62566: LD_VAR 0 49
62570: PUSH
62571: LD_VAR 0 50
62575: PUSH
62576: LD_VAR 0 51
62580: PUSH
62581: LD_VAR 0 52
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: PUSH
62594: LD_VAR 0 4
62598: PUSH
62599: LD_INT 1
62601: PLUS
62602: ARRAY
62603: ST_TO_ADDR
62604: GO 62795
62606: LD_INT 4
62608: DOUBLE
62609: EQUAL
62610: IFTRUE 62632
62612: LD_INT 5
62614: DOUBLE
62615: EQUAL
62616: IFTRUE 62632
62618: LD_INT 34
62620: DOUBLE
62621: EQUAL
62622: IFTRUE 62632
62624: LD_INT 37
62626: DOUBLE
62627: EQUAL
62628: IFTRUE 62632
62630: GO 62688
62632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62633: LD_ADDR_VAR 0 9
62637: PUSH
62638: LD_VAR 0 53
62642: PUSH
62643: LD_VAR 0 54
62647: PUSH
62648: LD_VAR 0 55
62652: PUSH
62653: LD_VAR 0 56
62657: PUSH
62658: LD_VAR 0 57
62662: PUSH
62663: LD_VAR 0 58
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: LD_VAR 0 4
62680: PUSH
62681: LD_INT 1
62683: PLUS
62684: ARRAY
62685: ST_TO_ADDR
62686: GO 62795
62688: LD_INT 31
62690: DOUBLE
62691: EQUAL
62692: IFTRUE 62738
62694: LD_INT 32
62696: DOUBLE
62697: EQUAL
62698: IFTRUE 62738
62700: LD_INT 33
62702: DOUBLE
62703: EQUAL
62704: IFTRUE 62738
62706: LD_INT 27
62708: DOUBLE
62709: EQUAL
62710: IFTRUE 62738
62712: LD_INT 26
62714: DOUBLE
62715: EQUAL
62716: IFTRUE 62738
62718: LD_INT 28
62720: DOUBLE
62721: EQUAL
62722: IFTRUE 62738
62724: LD_INT 29
62726: DOUBLE
62727: EQUAL
62728: IFTRUE 62738
62730: LD_INT 30
62732: DOUBLE
62733: EQUAL
62734: IFTRUE 62738
62736: GO 62794
62738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62739: LD_ADDR_VAR 0 9
62743: PUSH
62744: LD_VAR 0 59
62748: PUSH
62749: LD_VAR 0 60
62753: PUSH
62754: LD_VAR 0 61
62758: PUSH
62759: LD_VAR 0 62
62763: PUSH
62764: LD_VAR 0 63
62768: PUSH
62769: LD_VAR 0 64
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: PUSH
62782: LD_VAR 0 4
62786: PUSH
62787: LD_INT 1
62789: PLUS
62790: ARRAY
62791: ST_TO_ADDR
62792: GO 62795
62794: POP
// temp_list2 = [ ] ;
62795: LD_ADDR_VAR 0 10
62799: PUSH
62800: EMPTY
62801: ST_TO_ADDR
// for i in temp_list do
62802: LD_ADDR_VAR 0 8
62806: PUSH
62807: LD_VAR 0 9
62811: PUSH
62812: FOR_IN
62813: IFFALSE 62865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62815: LD_ADDR_VAR 0 10
62819: PUSH
62820: LD_VAR 0 10
62824: PUSH
62825: LD_VAR 0 8
62829: PUSH
62830: LD_INT 1
62832: ARRAY
62833: PUSH
62834: LD_VAR 0 2
62838: PLUS
62839: PUSH
62840: LD_VAR 0 8
62844: PUSH
62845: LD_INT 2
62847: ARRAY
62848: PUSH
62849: LD_VAR 0 3
62853: PLUS
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: ADD
62862: ST_TO_ADDR
62863: GO 62812
62865: POP
62866: POP
// result = temp_list2 ;
62867: LD_ADDR_VAR 0 7
62871: PUSH
62872: LD_VAR 0 10
62876: ST_TO_ADDR
// end ;
62877: LD_VAR 0 7
62881: RET
// export function EnemyInRange ( unit , dist ) ; begin
62882: LD_INT 0
62884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL_OW 255
62899: PPUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: CALL_OW 250
62909: PPUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 251
62919: PPUSH
62920: LD_VAR 0 2
62924: PPUSH
62925: CALL 36255 0 4
62929: PUSH
62930: LD_INT 4
62932: ARRAY
62933: ST_TO_ADDR
// end ;
62934: LD_VAR 0 3
62938: RET
// export function PlayerSeeMe ( unit ) ; begin
62939: LD_INT 0
62941: PPUSH
// result := See ( your_side , unit ) ;
62942: LD_ADDR_VAR 0 2
62946: PUSH
62947: LD_OWVAR 2
62951: PPUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 292
62961: ST_TO_ADDR
// end ;
62962: LD_VAR 0 2
62966: RET
// export function ReverseDir ( unit ) ; begin
62967: LD_INT 0
62969: PPUSH
// if not unit then
62970: LD_VAR 0 1
62974: NOT
62975: IFFALSE 62979
// exit ;
62977: GO 63002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62979: LD_ADDR_VAR 0 2
62983: PUSH
62984: LD_VAR 0 1
62988: PPUSH
62989: CALL_OW 254
62993: PUSH
62994: LD_INT 3
62996: PLUS
62997: PUSH
62998: LD_INT 6
63000: MOD
63001: ST_TO_ADDR
// end ;
63002: LD_VAR 0 2
63006: RET
// export function ReverseArray ( array ) ; var i ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
// if not array then
63011: LD_VAR 0 1
63015: NOT
63016: IFFALSE 63020
// exit ;
63018: GO 63075
// result := [ ] ;
63020: LD_ADDR_VAR 0 2
63024: PUSH
63025: EMPTY
63026: ST_TO_ADDR
// for i := array downto 1 do
63027: LD_ADDR_VAR 0 3
63031: PUSH
63032: DOUBLE
63033: LD_VAR 0 1
63037: INC
63038: ST_TO_ADDR
63039: LD_INT 1
63041: PUSH
63042: FOR_DOWNTO
63043: IFFALSE 63073
// result := Join ( result , array [ i ] ) ;
63045: LD_ADDR_VAR 0 2
63049: PUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: LD_VAR 0 1
63059: PUSH
63060: LD_VAR 0 3
63064: ARRAY
63065: PPUSH
63066: CALL 67731 0 2
63070: ST_TO_ADDR
63071: GO 63042
63073: POP
63074: POP
// end ;
63075: LD_VAR 0 2
63079: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63080: LD_INT 0
63082: PPUSH
63083: PPUSH
63084: PPUSH
63085: PPUSH
63086: PPUSH
63087: PPUSH
// if not unit or not hexes then
63088: LD_VAR 0 1
63092: NOT
63093: PUSH
63094: LD_VAR 0 2
63098: NOT
63099: OR
63100: IFFALSE 63104
// exit ;
63102: GO 63227
// dist := 9999 ;
63104: LD_ADDR_VAR 0 5
63108: PUSH
63109: LD_INT 9999
63111: ST_TO_ADDR
// for i = 1 to hexes do
63112: LD_ADDR_VAR 0 4
63116: PUSH
63117: DOUBLE
63118: LD_INT 1
63120: DEC
63121: ST_TO_ADDR
63122: LD_VAR 0 2
63126: PUSH
63127: FOR_TO
63128: IFFALSE 63215
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63130: LD_ADDR_VAR 0 6
63134: PUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: LD_VAR 0 2
63144: PUSH
63145: LD_VAR 0 4
63149: ARRAY
63150: PUSH
63151: LD_INT 1
63153: ARRAY
63154: PPUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_VAR 0 4
63164: ARRAY
63165: PUSH
63166: LD_INT 2
63168: ARRAY
63169: PPUSH
63170: CALL_OW 297
63174: ST_TO_ADDR
// if tdist < dist then
63175: LD_VAR 0 6
63179: PUSH
63180: LD_VAR 0 5
63184: LESS
63185: IFFALSE 63213
// begin hex := hexes [ i ] ;
63187: LD_ADDR_VAR 0 8
63191: PUSH
63192: LD_VAR 0 2
63196: PUSH
63197: LD_VAR 0 4
63201: ARRAY
63202: ST_TO_ADDR
// dist := tdist ;
63203: LD_ADDR_VAR 0 5
63207: PUSH
63208: LD_VAR 0 6
63212: ST_TO_ADDR
// end ; end ;
63213: GO 63127
63215: POP
63216: POP
// result := hex ;
63217: LD_ADDR_VAR 0 3
63221: PUSH
63222: LD_VAR 0 8
63226: ST_TO_ADDR
// end ;
63227: LD_VAR 0 3
63231: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63232: LD_INT 0
63234: PPUSH
63235: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63236: LD_VAR 0 1
63240: NOT
63241: PUSH
63242: LD_VAR 0 1
63246: PUSH
63247: LD_INT 21
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 23
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PPUSH
63271: CALL_OW 69
63275: IN
63276: NOT
63277: OR
63278: IFFALSE 63282
// exit ;
63280: GO 63329
// for i = 1 to 3 do
63282: LD_ADDR_VAR 0 3
63286: PUSH
63287: DOUBLE
63288: LD_INT 1
63290: DEC
63291: ST_TO_ADDR
63292: LD_INT 3
63294: PUSH
63295: FOR_TO
63296: IFFALSE 63327
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 250
63307: PPUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 251
63317: PPUSH
63318: LD_INT 1
63320: PPUSH
63321: CALL_OW 453
63325: GO 63295
63327: POP
63328: POP
// end ;
63329: LD_VAR 0 2
63333: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63334: LD_INT 0
63336: PPUSH
63337: PPUSH
63338: PPUSH
63339: PPUSH
63340: PPUSH
63341: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63342: LD_VAR 0 1
63346: NOT
63347: PUSH
63348: LD_VAR 0 2
63352: NOT
63353: OR
63354: PUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 314
63364: OR
63365: IFFALSE 63369
// exit ;
63367: GO 63836
// if GetLives ( i ) < 250 then
63369: LD_VAR 0 4
63373: PPUSH
63374: CALL_OW 256
63378: PUSH
63379: LD_INT 250
63381: LESS
63382: IFFALSE 63395
// begin ComAutodestruct ( i ) ;
63384: LD_VAR 0 4
63388: PPUSH
63389: CALL 63232 0 1
// exit ;
63393: GO 63836
// end ; x := GetX ( enemy_unit ) ;
63395: LD_ADDR_VAR 0 7
63399: PUSH
63400: LD_VAR 0 2
63404: PPUSH
63405: CALL_OW 250
63409: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63410: LD_ADDR_VAR 0 8
63414: PUSH
63415: LD_VAR 0 2
63419: PPUSH
63420: CALL_OW 251
63424: ST_TO_ADDR
// if not x or not y then
63425: LD_VAR 0 7
63429: NOT
63430: PUSH
63431: LD_VAR 0 8
63435: NOT
63436: OR
63437: IFFALSE 63441
// exit ;
63439: GO 63836
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63441: LD_ADDR_VAR 0 6
63445: PUSH
63446: LD_VAR 0 7
63450: PPUSH
63451: LD_INT 0
63453: PPUSH
63454: LD_INT 4
63456: PPUSH
63457: CALL_OW 272
63461: PUSH
63462: LD_VAR 0 8
63466: PPUSH
63467: LD_INT 0
63469: PPUSH
63470: LD_INT 4
63472: PPUSH
63473: CALL_OW 273
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_VAR 0 7
63486: PPUSH
63487: LD_INT 1
63489: PPUSH
63490: LD_INT 4
63492: PPUSH
63493: CALL_OW 272
63497: PUSH
63498: LD_VAR 0 8
63502: PPUSH
63503: LD_INT 1
63505: PPUSH
63506: LD_INT 4
63508: PPUSH
63509: CALL_OW 273
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_VAR 0 7
63522: PPUSH
63523: LD_INT 2
63525: PPUSH
63526: LD_INT 4
63528: PPUSH
63529: CALL_OW 272
63533: PUSH
63534: LD_VAR 0 8
63538: PPUSH
63539: LD_INT 2
63541: PPUSH
63542: LD_INT 4
63544: PPUSH
63545: CALL_OW 273
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_VAR 0 7
63558: PPUSH
63559: LD_INT 3
63561: PPUSH
63562: LD_INT 4
63564: PPUSH
63565: CALL_OW 272
63569: PUSH
63570: LD_VAR 0 8
63574: PPUSH
63575: LD_INT 3
63577: PPUSH
63578: LD_INT 4
63580: PPUSH
63581: CALL_OW 273
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_VAR 0 7
63594: PPUSH
63595: LD_INT 4
63597: PPUSH
63598: LD_INT 4
63600: PPUSH
63601: CALL_OW 272
63605: PUSH
63606: LD_VAR 0 8
63610: PPUSH
63611: LD_INT 4
63613: PPUSH
63614: LD_INT 4
63616: PPUSH
63617: CALL_OW 273
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_VAR 0 7
63630: PPUSH
63631: LD_INT 5
63633: PPUSH
63634: LD_INT 4
63636: PPUSH
63637: CALL_OW 272
63641: PUSH
63642: LD_VAR 0 8
63646: PPUSH
63647: LD_INT 5
63649: PPUSH
63650: LD_INT 4
63652: PPUSH
63653: CALL_OW 273
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: ST_TO_ADDR
// for i = tmp downto 1 do
63670: LD_ADDR_VAR 0 4
63674: PUSH
63675: DOUBLE
63676: LD_VAR 0 6
63680: INC
63681: ST_TO_ADDR
63682: LD_INT 1
63684: PUSH
63685: FOR_DOWNTO
63686: IFFALSE 63787
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63688: LD_VAR 0 6
63692: PUSH
63693: LD_VAR 0 4
63697: ARRAY
63698: PUSH
63699: LD_INT 1
63701: ARRAY
63702: PPUSH
63703: LD_VAR 0 6
63707: PUSH
63708: LD_VAR 0 4
63712: ARRAY
63713: PUSH
63714: LD_INT 2
63716: ARRAY
63717: PPUSH
63718: CALL_OW 488
63722: NOT
63723: PUSH
63724: LD_VAR 0 6
63728: PUSH
63729: LD_VAR 0 4
63733: ARRAY
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PPUSH
63739: LD_VAR 0 6
63743: PUSH
63744: LD_VAR 0 4
63748: ARRAY
63749: PUSH
63750: LD_INT 2
63752: ARRAY
63753: PPUSH
63754: CALL_OW 428
63758: PUSH
63759: LD_INT 0
63761: NONEQUAL
63762: OR
63763: IFFALSE 63785
// tmp := Delete ( tmp , i ) ;
63765: LD_ADDR_VAR 0 6
63769: PUSH
63770: LD_VAR 0 6
63774: PPUSH
63775: LD_VAR 0 4
63779: PPUSH
63780: CALL_OW 3
63784: ST_TO_ADDR
63785: GO 63685
63787: POP
63788: POP
// j := GetClosestHex ( unit , tmp ) ;
63789: LD_ADDR_VAR 0 5
63793: PUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: LD_VAR 0 6
63803: PPUSH
63804: CALL 63080 0 2
63808: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_VAR 0 5
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 5
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: PPUSH
63832: CALL_OW 111
// end ;
63836: LD_VAR 0 3
63840: RET
// export function PrepareApemanSoldier ( ) ; begin
63841: LD_INT 0
63843: PPUSH
// uc_nation := 0 ;
63844: LD_ADDR_OWVAR 21
63848: PUSH
63849: LD_INT 0
63851: ST_TO_ADDR
// hc_sex := sex_male ;
63852: LD_ADDR_OWVAR 27
63856: PUSH
63857: LD_INT 1
63859: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63860: LD_ADDR_OWVAR 28
63864: PUSH
63865: LD_INT 15
63867: ST_TO_ADDR
// hc_gallery :=  ;
63868: LD_ADDR_OWVAR 33
63872: PUSH
63873: LD_STRING 
63875: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63876: LD_ADDR_OWVAR 31
63880: PUSH
63881: LD_INT 0
63883: PPUSH
63884: LD_INT 3
63886: PPUSH
63887: CALL_OW 12
63891: PUSH
63892: LD_INT 0
63894: PPUSH
63895: LD_INT 3
63897: PPUSH
63898: CALL_OW 12
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// end ;
63915: LD_VAR 0 1
63919: RET
// export function PrepareApemanEngineer ( ) ; begin
63920: LD_INT 0
63922: PPUSH
// uc_nation := 0 ;
63923: LD_ADDR_OWVAR 21
63927: PUSH
63928: LD_INT 0
63930: ST_TO_ADDR
// hc_sex := sex_male ;
63931: LD_ADDR_OWVAR 27
63935: PUSH
63936: LD_INT 1
63938: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63939: LD_ADDR_OWVAR 28
63943: PUSH
63944: LD_INT 16
63946: ST_TO_ADDR
// hc_gallery :=  ;
63947: LD_ADDR_OWVAR 33
63951: PUSH
63952: LD_STRING 
63954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63955: LD_ADDR_OWVAR 31
63959: PUSH
63960: LD_INT 0
63962: PPUSH
63963: LD_INT 3
63965: PPUSH
63966: CALL_OW 12
63970: PUSH
63971: LD_INT 0
63973: PPUSH
63974: LD_INT 3
63976: PPUSH
63977: CALL_OW 12
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// end ;
63994: LD_VAR 0 1
63998: RET
// export function PrepareApeman ( agressivity ) ; begin
63999: LD_INT 0
64001: PPUSH
// uc_side := 0 ;
64002: LD_ADDR_OWVAR 20
64006: PUSH
64007: LD_INT 0
64009: ST_TO_ADDR
// uc_nation := 0 ;
64010: LD_ADDR_OWVAR 21
64014: PUSH
64015: LD_INT 0
64017: ST_TO_ADDR
// hc_sex := sex_male ;
64018: LD_ADDR_OWVAR 27
64022: PUSH
64023: LD_INT 1
64025: ST_TO_ADDR
// hc_class := class_apeman ;
64026: LD_ADDR_OWVAR 28
64030: PUSH
64031: LD_INT 12
64033: ST_TO_ADDR
// hc_gallery :=  ;
64034: LD_ADDR_OWVAR 33
64038: PUSH
64039: LD_STRING 
64041: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64042: LD_ADDR_OWVAR 35
64046: PUSH
64047: LD_VAR 0 1
64051: NEG
64052: PPUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 12
64062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64063: LD_ADDR_OWVAR 31
64067: PUSH
64068: LD_INT 0
64070: PPUSH
64071: LD_INT 3
64073: PPUSH
64074: CALL_OW 12
64078: PUSH
64079: LD_INT 0
64081: PPUSH
64082: LD_INT 3
64084: PPUSH
64085: CALL_OW 12
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// end ;
64102: LD_VAR 0 2
64106: RET
// export function PrepareTiger ( agressivity ) ; begin
64107: LD_INT 0
64109: PPUSH
// uc_side := 0 ;
64110: LD_ADDR_OWVAR 20
64114: PUSH
64115: LD_INT 0
64117: ST_TO_ADDR
// uc_nation := 0 ;
64118: LD_ADDR_OWVAR 21
64122: PUSH
64123: LD_INT 0
64125: ST_TO_ADDR
// hc_class := class_tiger ;
64126: LD_ADDR_OWVAR 28
64130: PUSH
64131: LD_INT 14
64133: ST_TO_ADDR
// hc_gallery :=  ;
64134: LD_ADDR_OWVAR 33
64138: PUSH
64139: LD_STRING 
64141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64142: LD_ADDR_OWVAR 35
64146: PUSH
64147: LD_VAR 0 1
64151: NEG
64152: PPUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: CALL_OW 12
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 2
64167: RET
// export function PrepareEnchidna ( ) ; begin
64168: LD_INT 0
64170: PPUSH
// uc_side := 0 ;
64171: LD_ADDR_OWVAR 20
64175: PUSH
64176: LD_INT 0
64178: ST_TO_ADDR
// uc_nation := 0 ;
64179: LD_ADDR_OWVAR 21
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// hc_class := class_baggie ;
64187: LD_ADDR_OWVAR 28
64191: PUSH
64192: LD_INT 13
64194: ST_TO_ADDR
// hc_gallery :=  ;
64195: LD_ADDR_OWVAR 33
64199: PUSH
64200: LD_STRING 
64202: ST_TO_ADDR
// end ;
64203: LD_VAR 0 1
64207: RET
// export function PrepareFrog ( ) ; begin
64208: LD_INT 0
64210: PPUSH
// uc_side := 0 ;
64211: LD_ADDR_OWVAR 20
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
// uc_nation := 0 ;
64219: LD_ADDR_OWVAR 21
64223: PUSH
64224: LD_INT 0
64226: ST_TO_ADDR
// hc_class := class_frog ;
64227: LD_ADDR_OWVAR 28
64231: PUSH
64232: LD_INT 19
64234: ST_TO_ADDR
// hc_gallery :=  ;
64235: LD_ADDR_OWVAR 33
64239: PUSH
64240: LD_STRING 
64242: ST_TO_ADDR
// end ;
64243: LD_VAR 0 1
64247: RET
// export function PrepareFish ( ) ; begin
64248: LD_INT 0
64250: PPUSH
// uc_side := 0 ;
64251: LD_ADDR_OWVAR 20
64255: PUSH
64256: LD_INT 0
64258: ST_TO_ADDR
// uc_nation := 0 ;
64259: LD_ADDR_OWVAR 21
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// hc_class := class_fish ;
64267: LD_ADDR_OWVAR 28
64271: PUSH
64272: LD_INT 20
64274: ST_TO_ADDR
// hc_gallery :=  ;
64275: LD_ADDR_OWVAR 33
64279: PUSH
64280: LD_STRING 
64282: ST_TO_ADDR
// end ;
64283: LD_VAR 0 1
64287: RET
// export function PrepareBird ( ) ; begin
64288: LD_INT 0
64290: PPUSH
// uc_side := 0 ;
64291: LD_ADDR_OWVAR 20
64295: PUSH
64296: LD_INT 0
64298: ST_TO_ADDR
// uc_nation := 0 ;
64299: LD_ADDR_OWVAR 21
64303: PUSH
64304: LD_INT 0
64306: ST_TO_ADDR
// hc_class := class_phororhacos ;
64307: LD_ADDR_OWVAR 28
64311: PUSH
64312: LD_INT 18
64314: ST_TO_ADDR
// hc_gallery :=  ;
64315: LD_ADDR_OWVAR 33
64319: PUSH
64320: LD_STRING 
64322: ST_TO_ADDR
// end ;
64323: LD_VAR 0 1
64327: RET
// export function PrepareHorse ( ) ; begin
64328: LD_INT 0
64330: PPUSH
// uc_side := 0 ;
64331: LD_ADDR_OWVAR 20
64335: PUSH
64336: LD_INT 0
64338: ST_TO_ADDR
// uc_nation := 0 ;
64339: LD_ADDR_OWVAR 21
64343: PUSH
64344: LD_INT 0
64346: ST_TO_ADDR
// hc_class := class_horse ;
64347: LD_ADDR_OWVAR 28
64351: PUSH
64352: LD_INT 21
64354: ST_TO_ADDR
// hc_gallery :=  ;
64355: LD_ADDR_OWVAR 33
64359: PUSH
64360: LD_STRING 
64362: ST_TO_ADDR
// end ;
64363: LD_VAR 0 1
64367: RET
// export function PrepareMastodont ( ) ; begin
64368: LD_INT 0
64370: PPUSH
// uc_side := 0 ;
64371: LD_ADDR_OWVAR 20
64375: PUSH
64376: LD_INT 0
64378: ST_TO_ADDR
// uc_nation := 0 ;
64379: LD_ADDR_OWVAR 21
64383: PUSH
64384: LD_INT 0
64386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64387: LD_ADDR_OWVAR 37
64391: PUSH
64392: LD_INT 31
64394: ST_TO_ADDR
// vc_control := control_rider ;
64395: LD_ADDR_OWVAR 38
64399: PUSH
64400: LD_INT 4
64402: ST_TO_ADDR
// end ;
64403: LD_VAR 0 1
64407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
64412: PPUSH
// uc_side = 0 ;
64413: LD_ADDR_OWVAR 20
64417: PUSH
64418: LD_INT 0
64420: ST_TO_ADDR
// uc_nation = 0 ;
64421: LD_ADDR_OWVAR 21
64425: PUSH
64426: LD_INT 0
64428: ST_TO_ADDR
// InitHc_All ( ) ;
64429: CALL_OW 584
// InitVc ;
64433: CALL_OW 20
// if mastodonts then
64437: LD_VAR 0 6
64441: IFFALSE 64508
// for i = 1 to mastodonts do
64443: LD_ADDR_VAR 0 11
64447: PUSH
64448: DOUBLE
64449: LD_INT 1
64451: DEC
64452: ST_TO_ADDR
64453: LD_VAR 0 6
64457: PUSH
64458: FOR_TO
64459: IFFALSE 64506
// begin vc_chassis := 31 ;
64461: LD_ADDR_OWVAR 37
64465: PUSH
64466: LD_INT 31
64468: ST_TO_ADDR
// vc_control := control_rider ;
64469: LD_ADDR_OWVAR 38
64473: PUSH
64474: LD_INT 4
64476: ST_TO_ADDR
// animal := CreateVehicle ;
64477: LD_ADDR_VAR 0 12
64481: PUSH
64482: CALL_OW 45
64486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64487: LD_VAR 0 12
64491: PPUSH
64492: LD_VAR 0 8
64496: PPUSH
64497: LD_INT 0
64499: PPUSH
64500: CALL 66636 0 3
// end ;
64504: GO 64458
64506: POP
64507: POP
// if horses then
64508: LD_VAR 0 5
64512: IFFALSE 64579
// for i = 1 to horses do
64514: LD_ADDR_VAR 0 11
64518: PUSH
64519: DOUBLE
64520: LD_INT 1
64522: DEC
64523: ST_TO_ADDR
64524: LD_VAR 0 5
64528: PUSH
64529: FOR_TO
64530: IFFALSE 64577
// begin hc_class := 21 ;
64532: LD_ADDR_OWVAR 28
64536: PUSH
64537: LD_INT 21
64539: ST_TO_ADDR
// hc_gallery :=  ;
64540: LD_ADDR_OWVAR 33
64544: PUSH
64545: LD_STRING 
64547: ST_TO_ADDR
// animal := CreateHuman ;
64548: LD_ADDR_VAR 0 12
64552: PUSH
64553: CALL_OW 44
64557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64558: LD_VAR 0 12
64562: PPUSH
64563: LD_VAR 0 8
64567: PPUSH
64568: LD_INT 0
64570: PPUSH
64571: CALL 66636 0 3
// end ;
64575: GO 64529
64577: POP
64578: POP
// if birds then
64579: LD_VAR 0 1
64583: IFFALSE 64650
// for i = 1 to birds do
64585: LD_ADDR_VAR 0 11
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 1
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64648
// begin hc_class := 18 ;
64603: LD_ADDR_OWVAR 28
64607: PUSH
64608: LD_INT 18
64610: ST_TO_ADDR
// hc_gallery =  ;
64611: LD_ADDR_OWVAR 33
64615: PUSH
64616: LD_STRING 
64618: ST_TO_ADDR
// animal := CreateHuman ;
64619: LD_ADDR_VAR 0 12
64623: PUSH
64624: CALL_OW 44
64628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64629: LD_VAR 0 12
64633: PPUSH
64634: LD_VAR 0 8
64638: PPUSH
64639: LD_INT 0
64641: PPUSH
64642: CALL 66636 0 3
// end ;
64646: GO 64600
64648: POP
64649: POP
// if tigers then
64650: LD_VAR 0 2
64654: IFFALSE 64738
// for i = 1 to tigers do
64656: LD_ADDR_VAR 0 11
64660: PUSH
64661: DOUBLE
64662: LD_INT 1
64664: DEC
64665: ST_TO_ADDR
64666: LD_VAR 0 2
64670: PUSH
64671: FOR_TO
64672: IFFALSE 64736
// begin hc_class = class_tiger ;
64674: LD_ADDR_OWVAR 28
64678: PUSH
64679: LD_INT 14
64681: ST_TO_ADDR
// hc_gallery =  ;
64682: LD_ADDR_OWVAR 33
64686: PUSH
64687: LD_STRING 
64689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64690: LD_ADDR_OWVAR 35
64694: PUSH
64695: LD_INT 7
64697: NEG
64698: PPUSH
64699: LD_INT 7
64701: PPUSH
64702: CALL_OW 12
64706: ST_TO_ADDR
// animal := CreateHuman ;
64707: LD_ADDR_VAR 0 12
64711: PUSH
64712: CALL_OW 44
64716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64717: LD_VAR 0 12
64721: PPUSH
64722: LD_VAR 0 8
64726: PPUSH
64727: LD_INT 0
64729: PPUSH
64730: CALL 66636 0 3
// end ;
64734: GO 64671
64736: POP
64737: POP
// if apemans then
64738: LD_VAR 0 3
64742: IFFALSE 64865
// for i = 1 to apemans do
64744: LD_ADDR_VAR 0 11
64748: PUSH
64749: DOUBLE
64750: LD_INT 1
64752: DEC
64753: ST_TO_ADDR
64754: LD_VAR 0 3
64758: PUSH
64759: FOR_TO
64760: IFFALSE 64863
// begin hc_class = class_apeman ;
64762: LD_ADDR_OWVAR 28
64766: PUSH
64767: LD_INT 12
64769: ST_TO_ADDR
// hc_gallery =  ;
64770: LD_ADDR_OWVAR 33
64774: PUSH
64775: LD_STRING 
64777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64778: LD_ADDR_OWVAR 35
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PPUSH
64787: LD_INT 2
64789: PPUSH
64790: CALL_OW 12
64794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64795: LD_ADDR_OWVAR 31
64799: PUSH
64800: LD_INT 1
64802: PPUSH
64803: LD_INT 3
64805: PPUSH
64806: CALL_OW 12
64810: PUSH
64811: LD_INT 1
64813: PPUSH
64814: LD_INT 3
64816: PPUSH
64817: CALL_OW 12
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: ST_TO_ADDR
// animal := CreateHuman ;
64834: LD_ADDR_VAR 0 12
64838: PUSH
64839: CALL_OW 44
64843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64844: LD_VAR 0 12
64848: PPUSH
64849: LD_VAR 0 8
64853: PPUSH
64854: LD_INT 0
64856: PPUSH
64857: CALL 66636 0 3
// end ;
64861: GO 64759
64863: POP
64864: POP
// if enchidnas then
64865: LD_VAR 0 4
64869: IFFALSE 64936
// for i = 1 to enchidnas do
64871: LD_ADDR_VAR 0 11
64875: PUSH
64876: DOUBLE
64877: LD_INT 1
64879: DEC
64880: ST_TO_ADDR
64881: LD_VAR 0 4
64885: PUSH
64886: FOR_TO
64887: IFFALSE 64934
// begin hc_class = 13 ;
64889: LD_ADDR_OWVAR 28
64893: PUSH
64894: LD_INT 13
64896: ST_TO_ADDR
// hc_gallery =  ;
64897: LD_ADDR_OWVAR 33
64901: PUSH
64902: LD_STRING 
64904: ST_TO_ADDR
// animal := CreateHuman ;
64905: LD_ADDR_VAR 0 12
64909: PUSH
64910: CALL_OW 44
64914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64915: LD_VAR 0 12
64919: PPUSH
64920: LD_VAR 0 8
64924: PPUSH
64925: LD_INT 0
64927: PPUSH
64928: CALL 66636 0 3
// end ;
64932: GO 64886
64934: POP
64935: POP
// if fishes then
64936: LD_VAR 0 7
64940: IFFALSE 65007
// for i = 1 to fishes do
64942: LD_ADDR_VAR 0 11
64946: PUSH
64947: DOUBLE
64948: LD_INT 1
64950: DEC
64951: ST_TO_ADDR
64952: LD_VAR 0 7
64956: PUSH
64957: FOR_TO
64958: IFFALSE 65005
// begin hc_class = 20 ;
64960: LD_ADDR_OWVAR 28
64964: PUSH
64965: LD_INT 20
64967: ST_TO_ADDR
// hc_gallery =  ;
64968: LD_ADDR_OWVAR 33
64972: PUSH
64973: LD_STRING 
64975: ST_TO_ADDR
// animal := CreateHuman ;
64976: LD_ADDR_VAR 0 12
64980: PUSH
64981: CALL_OW 44
64985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64986: LD_VAR 0 12
64990: PPUSH
64991: LD_VAR 0 9
64995: PPUSH
64996: LD_INT 0
64998: PPUSH
64999: CALL 66636 0 3
// end ;
65003: GO 64957
65005: POP
65006: POP
// end ;
65007: LD_VAR 0 10
65011: RET
// export function WantHeal ( sci , unit ) ; begin
65012: LD_INT 0
65014: PPUSH
// if GetTaskList ( sci ) > 0 then
65015: LD_VAR 0 1
65019: PPUSH
65020: CALL_OW 437
65024: PUSH
65025: LD_INT 0
65027: GREATER
65028: IFFALSE 65098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 437
65039: PUSH
65040: LD_INT 1
65042: ARRAY
65043: PUSH
65044: LD_INT 1
65046: ARRAY
65047: PUSH
65048: LD_STRING l
65050: EQUAL
65051: PUSH
65052: LD_VAR 0 1
65056: PPUSH
65057: CALL_OW 437
65061: PUSH
65062: LD_INT 1
65064: ARRAY
65065: PUSH
65066: LD_INT 4
65068: ARRAY
65069: PUSH
65070: LD_VAR 0 2
65074: EQUAL
65075: AND
65076: IFFALSE 65088
// result := true else
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_INT 1
65085: ST_TO_ADDR
65086: GO 65096
// result := false ;
65088: LD_ADDR_VAR 0 3
65092: PUSH
65093: LD_INT 0
65095: ST_TO_ADDR
// end else
65096: GO 65106
// result := false ;
65098: LD_ADDR_VAR 0 3
65102: PUSH
65103: LD_INT 0
65105: ST_TO_ADDR
// end ;
65106: LD_VAR 0 3
65110: RET
// export function HealTarget ( sci ) ; begin
65111: LD_INT 0
65113: PPUSH
// if not sci then
65114: LD_VAR 0 1
65118: NOT
65119: IFFALSE 65123
// exit ;
65121: GO 65188
// result := 0 ;
65123: LD_ADDR_VAR 0 2
65127: PUSH
65128: LD_INT 0
65130: ST_TO_ADDR
// if GetTaskList ( sci ) then
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 437
65140: IFFALSE 65188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 437
65151: PUSH
65152: LD_INT 1
65154: ARRAY
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PUSH
65160: LD_STRING l
65162: EQUAL
65163: IFFALSE 65188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65165: LD_ADDR_VAR 0 2
65169: PUSH
65170: LD_VAR 0 1
65174: PPUSH
65175: CALL_OW 437
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: PUSH
65184: LD_INT 4
65186: ARRAY
65187: ST_TO_ADDR
// end ;
65188: LD_VAR 0 2
65192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65193: LD_INT 0
65195: PPUSH
65196: PPUSH
65197: PPUSH
65198: PPUSH
// if not base_units then
65199: LD_VAR 0 1
65203: NOT
65204: IFFALSE 65208
// exit ;
65206: GO 65295
// result := false ;
65208: LD_ADDR_VAR 0 2
65212: PUSH
65213: LD_INT 0
65215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65216: LD_ADDR_VAR 0 5
65220: PUSH
65221: LD_VAR 0 1
65225: PPUSH
65226: LD_INT 21
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PPUSH
65236: CALL_OW 72
65240: ST_TO_ADDR
// if not tmp then
65241: LD_VAR 0 5
65245: NOT
65246: IFFALSE 65250
// exit ;
65248: GO 65295
// for i in tmp do
65250: LD_ADDR_VAR 0 3
65254: PUSH
65255: LD_VAR 0 5
65259: PUSH
65260: FOR_IN
65261: IFFALSE 65293
// begin result := EnemyInRange ( i , 22 ) ;
65263: LD_ADDR_VAR 0 2
65267: PUSH
65268: LD_VAR 0 3
65272: PPUSH
65273: LD_INT 22
65275: PPUSH
65276: CALL 62882 0 2
65280: ST_TO_ADDR
// if result then
65281: LD_VAR 0 2
65285: IFFALSE 65291
// exit ;
65287: POP
65288: POP
65289: GO 65295
// end ;
65291: GO 65260
65293: POP
65294: POP
// end ;
65295: LD_VAR 0 2
65299: RET
// export function FilterByTag ( units , tag ) ; begin
65300: LD_INT 0
65302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65303: LD_ADDR_VAR 0 3
65307: PUSH
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_INT 120
65315: PUSH
65316: LD_VAR 0 2
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PPUSH
65325: CALL_OW 72
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 3
65334: RET
// export function IsDriver ( un ) ; begin
65335: LD_INT 0
65337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65338: LD_ADDR_VAR 0 2
65342: PUSH
65343: LD_VAR 0 1
65347: PUSH
65348: LD_INT 55
65350: PUSH
65351: EMPTY
65352: LIST
65353: PPUSH
65354: CALL_OW 69
65358: IN
65359: ST_TO_ADDR
// end ;
65360: LD_VAR 0 2
65364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
// list := [ ] ;
65369: LD_ADDR_VAR 0 5
65373: PUSH
65374: EMPTY
65375: ST_TO_ADDR
// case d of 0 :
65376: LD_VAR 0 3
65380: PUSH
65381: LD_INT 0
65383: DOUBLE
65384: EQUAL
65385: IFTRUE 65389
65387: GO 65522
65389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65390: LD_ADDR_VAR 0 5
65394: PUSH
65395: LD_VAR 0 1
65399: PUSH
65400: LD_INT 4
65402: MINUS
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: LD_INT 4
65411: MINUS
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 1
65425: PUSH
65426: LD_INT 3
65428: MINUS
65429: PUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: LD_INT 4
65450: PLUS
65451: PUSH
65452: LD_VAR 0 2
65456: PUSH
65457: LD_INT 4
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: PUSH
65465: LD_VAR 0 1
65469: PUSH
65470: LD_INT 3
65472: PLUS
65473: PUSH
65474: LD_VAR 0 2
65478: PUSH
65479: LD_INT 3
65481: PLUS
65482: PUSH
65483: LD_INT 5
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: PUSH
65491: LD_VAR 0 1
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: LD_INT 4
65503: PLUS
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// end ; 1 :
65520: GO 66220
65522: LD_INT 1
65524: DOUBLE
65525: EQUAL
65526: IFTRUE 65530
65528: GO 65663
65530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65531: LD_ADDR_VAR 0 5
65535: PUSH
65536: LD_VAR 0 1
65540: PUSH
65541: LD_VAR 0 2
65545: PUSH
65546: LD_INT 4
65548: MINUS
65549: PUSH
65550: LD_INT 3
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: PUSH
65558: LD_VAR 0 1
65562: PUSH
65563: LD_INT 3
65565: MINUS
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_INT 3
65574: MINUS
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 4
65591: MINUS
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: PUSH
65606: LD_VAR 0 1
65610: PUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_INT 3
65618: PLUS
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: PUSH
65628: LD_VAR 0 1
65632: PUSH
65633: LD_INT 4
65635: PLUS
65636: PUSH
65637: LD_VAR 0 2
65641: PUSH
65642: LD_INT 4
65644: PLUS
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// end ; 2 :
65661: GO 66220
65663: LD_INT 2
65665: DOUBLE
65666: EQUAL
65667: IFTRUE 65671
65669: GO 65800
65671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65672: LD_ADDR_VAR 0 5
65676: PUSH
65677: LD_VAR 0 1
65681: PUSH
65682: LD_VAR 0 2
65686: PUSH
65687: LD_INT 3
65689: MINUS
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: LD_VAR 0 1
65703: PUSH
65704: LD_INT 4
65706: PLUS
65707: PUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: PUSH
65721: LD_VAR 0 1
65725: PUSH
65726: LD_VAR 0 2
65730: PUSH
65731: LD_INT 4
65733: PLUS
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: LIST
65742: PUSH
65743: LD_VAR 0 1
65747: PUSH
65748: LD_INT 3
65750: MINUS
65751: PUSH
65752: LD_VAR 0 2
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: PUSH
65765: LD_VAR 0 1
65769: PUSH
65770: LD_INT 4
65772: MINUS
65773: PUSH
65774: LD_VAR 0 2
65778: PUSH
65779: LD_INT 4
65781: MINUS
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// end ; 3 :
65798: GO 66220
65800: LD_INT 3
65802: DOUBLE
65803: EQUAL
65804: IFTRUE 65808
65806: GO 65941
65808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65809: LD_ADDR_VAR 0 5
65813: PUSH
65814: LD_VAR 0 1
65818: PUSH
65819: LD_INT 3
65821: PLUS
65822: PUSH
65823: LD_VAR 0 2
65827: PUSH
65828: LD_INT 4
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: PUSH
65836: LD_VAR 0 1
65840: PUSH
65841: LD_INT 4
65843: PLUS
65844: PUSH
65845: LD_VAR 0 2
65849: PUSH
65850: LD_INT 4
65852: PLUS
65853: PUSH
65854: LD_INT 5
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 4
65869: MINUS
65870: PUSH
65871: LD_VAR 0 2
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_INT 4
65896: MINUS
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 3
65913: MINUS
65914: PUSH
65915: LD_VAR 0 2
65919: PUSH
65920: LD_INT 3
65922: MINUS
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// end ; 4 :
65939: GO 66220
65941: LD_INT 4
65943: DOUBLE
65944: EQUAL
65945: IFTRUE 65949
65947: GO 66082
65949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65950: LD_ADDR_VAR 0 5
65954: PUSH
65955: LD_VAR 0 1
65959: PUSH
65960: LD_VAR 0 2
65964: PUSH
65965: LD_INT 4
65967: PLUS
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: PUSH
65977: LD_VAR 0 1
65981: PUSH
65982: LD_INT 3
65984: PLUS
65985: PUSH
65986: LD_VAR 0 2
65990: PUSH
65991: LD_INT 3
65993: PLUS
65994: PUSH
65995: LD_INT 5
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: LD_VAR 0 1
66007: PUSH
66008: LD_INT 4
66010: PLUS
66011: PUSH
66012: LD_VAR 0 2
66016: PUSH
66017: LD_INT 4
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: PUSH
66025: LD_VAR 0 1
66029: PUSH
66030: LD_VAR 0 2
66034: PUSH
66035: LD_INT 3
66037: MINUS
66038: PUSH
66039: LD_INT 3
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: PUSH
66047: LD_VAR 0 1
66051: PUSH
66052: LD_INT 4
66054: MINUS
66055: PUSH
66056: LD_VAR 0 2
66060: PUSH
66061: LD_INT 4
66063: MINUS
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: ST_TO_ADDR
// end ; 5 :
66080: GO 66220
66082: LD_INT 5
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66090
66088: GO 66219
66090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66091: LD_ADDR_VAR 0 5
66095: PUSH
66096: LD_VAR 0 1
66100: PUSH
66101: LD_INT 4
66103: MINUS
66104: PUSH
66105: LD_VAR 0 2
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_VAR 0 2
66127: PUSH
66128: LD_INT 4
66130: MINUS
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: PUSH
66140: LD_VAR 0 1
66144: PUSH
66145: LD_INT 4
66147: PLUS
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: LD_INT 4
66156: PLUS
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: PUSH
66166: LD_VAR 0 1
66170: PUSH
66171: LD_INT 3
66173: PLUS
66174: PUSH
66175: LD_VAR 0 2
66179: PUSH
66180: LD_INT 4
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: LD_VAR 0 1
66192: PUSH
66193: LD_VAR 0 2
66197: PUSH
66198: LD_INT 3
66200: PLUS
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: ST_TO_ADDR
// end ; end ;
66217: GO 66220
66219: POP
// result := list ;
66220: LD_ADDR_VAR 0 4
66224: PUSH
66225: LD_VAR 0 5
66229: ST_TO_ADDR
// end ;
66230: LD_VAR 0 4
66234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66235: LD_INT 0
66237: PPUSH
66238: PPUSH
66239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66240: LD_VAR 0 1
66244: NOT
66245: PUSH
66246: LD_VAR 0 2
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 4
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: IN
66269: NOT
66270: OR
66271: IFFALSE 66275
// exit ;
66273: GO 66358
// tmp := [ ] ;
66275: LD_ADDR_VAR 0 5
66279: PUSH
66280: EMPTY
66281: ST_TO_ADDR
// for i in units do
66282: LD_ADDR_VAR 0 4
66286: PUSH
66287: LD_VAR 0 1
66291: PUSH
66292: FOR_IN
66293: IFFALSE 66327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66295: LD_ADDR_VAR 0 5
66299: PUSH
66300: LD_VAR 0 5
66304: PPUSH
66305: LD_VAR 0 4
66309: PPUSH
66310: LD_VAR 0 2
66314: PPUSH
66315: CALL_OW 259
66319: PPUSH
66320: CALL 67731 0 2
66324: ST_TO_ADDR
66325: GO 66292
66327: POP
66328: POP
// if not tmp then
66329: LD_VAR 0 5
66333: NOT
66334: IFFALSE 66338
// exit ;
66336: GO 66358
// result := SortListByListDesc ( units , tmp ) ;
66338: LD_ADDR_VAR 0 3
66342: PUSH
66343: LD_VAR 0 1
66347: PPUSH
66348: LD_VAR 0 5
66352: PPUSH
66353: CALL_OW 77
66357: ST_TO_ADDR
// end ;
66358: LD_VAR 0 3
66362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66363: LD_INT 0
66365: PPUSH
66366: PPUSH
66367: PPUSH
// result := false ;
66368: LD_ADDR_VAR 0 3
66372: PUSH
66373: LD_INT 0
66375: ST_TO_ADDR
// if not building then
66376: LD_VAR 0 2
66380: NOT
66381: IFFALSE 66385
// exit ;
66383: GO 66523
// x := GetX ( building ) ;
66385: LD_ADDR_VAR 0 4
66389: PUSH
66390: LD_VAR 0 2
66394: PPUSH
66395: CALL_OW 250
66399: ST_TO_ADDR
// y := GetY ( building ) ;
66400: LD_ADDR_VAR 0 5
66404: PUSH
66405: LD_VAR 0 2
66409: PPUSH
66410: CALL_OW 251
66414: ST_TO_ADDR
// if not x or not y then
66415: LD_VAR 0 4
66419: NOT
66420: PUSH
66421: LD_VAR 0 5
66425: NOT
66426: OR
66427: IFFALSE 66431
// exit ;
66429: GO 66523
// if GetTaskList ( unit ) then
66431: LD_VAR 0 1
66435: PPUSH
66436: CALL_OW 437
66440: IFFALSE 66523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66442: LD_STRING e
66444: PUSH
66445: LD_VAR 0 1
66449: PPUSH
66450: CALL_OW 437
66454: PUSH
66455: LD_INT 1
66457: ARRAY
66458: PUSH
66459: LD_INT 1
66461: ARRAY
66462: EQUAL
66463: PUSH
66464: LD_VAR 0 4
66468: PUSH
66469: LD_VAR 0 1
66473: PPUSH
66474: CALL_OW 437
66478: PUSH
66479: LD_INT 1
66481: ARRAY
66482: PUSH
66483: LD_INT 2
66485: ARRAY
66486: EQUAL
66487: AND
66488: PUSH
66489: LD_VAR 0 5
66493: PUSH
66494: LD_VAR 0 1
66498: PPUSH
66499: CALL_OW 437
66503: PUSH
66504: LD_INT 1
66506: ARRAY
66507: PUSH
66508: LD_INT 3
66510: ARRAY
66511: EQUAL
66512: AND
66513: IFFALSE 66523
// result := true end ;
66515: LD_ADDR_VAR 0 3
66519: PUSH
66520: LD_INT 1
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 3
66527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66528: LD_INT 0
66530: PPUSH
// result := false ;
66531: LD_ADDR_VAR 0 4
66535: PUSH
66536: LD_INT 0
66538: ST_TO_ADDR
// if GetTaskList ( unit ) then
66539: LD_VAR 0 1
66543: PPUSH
66544: CALL_OW 437
66548: IFFALSE 66631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66550: LD_STRING M
66552: PUSH
66553: LD_VAR 0 1
66557: PPUSH
66558: CALL_OW 437
66562: PUSH
66563: LD_INT 1
66565: ARRAY
66566: PUSH
66567: LD_INT 1
66569: ARRAY
66570: EQUAL
66571: PUSH
66572: LD_VAR 0 2
66576: PUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: CALL_OW 437
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PUSH
66591: LD_INT 2
66593: ARRAY
66594: EQUAL
66595: AND
66596: PUSH
66597: LD_VAR 0 3
66601: PUSH
66602: LD_VAR 0 1
66606: PPUSH
66607: CALL_OW 437
66611: PUSH
66612: LD_INT 1
66614: ARRAY
66615: PUSH
66616: LD_INT 3
66618: ARRAY
66619: EQUAL
66620: AND
66621: IFFALSE 66631
// result := true ;
66623: LD_ADDR_VAR 0 4
66627: PUSH
66628: LD_INT 1
66630: ST_TO_ADDR
// end ; end ;
66631: LD_VAR 0 4
66635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66636: LD_INT 0
66638: PPUSH
66639: PPUSH
66640: PPUSH
66641: PPUSH
// if not unit or not area then
66642: LD_VAR 0 1
66646: NOT
66647: PUSH
66648: LD_VAR 0 2
66652: NOT
66653: OR
66654: IFFALSE 66658
// exit ;
66656: GO 66834
// tmp := AreaToList ( area , i ) ;
66658: LD_ADDR_VAR 0 6
66662: PUSH
66663: LD_VAR 0 2
66667: PPUSH
66668: LD_VAR 0 5
66672: PPUSH
66673: CALL_OW 517
66677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66678: LD_ADDR_VAR 0 5
66682: PUSH
66683: DOUBLE
66684: LD_INT 1
66686: DEC
66687: ST_TO_ADDR
66688: LD_VAR 0 6
66692: PUSH
66693: LD_INT 1
66695: ARRAY
66696: PUSH
66697: FOR_TO
66698: IFFALSE 66832
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66700: LD_ADDR_VAR 0 7
66704: PUSH
66705: LD_VAR 0 6
66709: PUSH
66710: LD_INT 1
66712: ARRAY
66713: PUSH
66714: LD_VAR 0 5
66718: ARRAY
66719: PUSH
66720: LD_VAR 0 6
66724: PUSH
66725: LD_INT 2
66727: ARRAY
66728: PUSH
66729: LD_VAR 0 5
66733: ARRAY
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66739: LD_INT 92
66741: PUSH
66742: LD_VAR 0 7
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: PUSH
66751: LD_VAR 0 7
66755: PUSH
66756: LD_INT 2
66758: ARRAY
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: PPUSH
66769: CALL_OW 69
66773: PUSH
66774: LD_INT 0
66776: EQUAL
66777: IFFALSE 66830
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 7
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: PPUSH
66793: LD_VAR 0 7
66797: PUSH
66798: LD_INT 2
66800: ARRAY
66801: PPUSH
66802: LD_VAR 0 3
66806: PPUSH
66807: CALL_OW 48
// result := IsPlaced ( unit ) ;
66811: LD_ADDR_VAR 0 4
66815: PUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: CALL_OW 305
66825: ST_TO_ADDR
// exit ;
66826: POP
66827: POP
66828: GO 66834
// end ; end ;
66830: GO 66697
66832: POP
66833: POP
// end ;
66834: LD_VAR 0 4
66838: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66839: LD_INT 0
66841: PPUSH
66842: PPUSH
66843: PPUSH
// if not side or side > 8 then
66844: LD_VAR 0 1
66848: NOT
66849: PUSH
66850: LD_VAR 0 1
66854: PUSH
66855: LD_INT 8
66857: GREATER
66858: OR
66859: IFFALSE 66863
// exit ;
66861: GO 67050
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66863: LD_ADDR_VAR 0 4
66867: PUSH
66868: LD_INT 22
66870: PUSH
66871: LD_VAR 0 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 21
66882: PUSH
66883: LD_INT 3
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PPUSH
66894: CALL_OW 69
66898: ST_TO_ADDR
// if not tmp then
66899: LD_VAR 0 4
66903: NOT
66904: IFFALSE 66908
// exit ;
66906: GO 67050
// enable_addtolog := true ;
66908: LD_ADDR_OWVAR 81
66912: PUSH
66913: LD_INT 1
66915: ST_TO_ADDR
// AddToLog ( [ ) ;
66916: LD_STRING [
66918: PPUSH
66919: CALL_OW 561
// for i in tmp do
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_VAR 0 4
66932: PUSH
66933: FOR_IN
66934: IFFALSE 67041
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66936: LD_STRING [
66938: PUSH
66939: LD_VAR 0 3
66943: PPUSH
66944: CALL_OW 266
66948: STR
66949: PUSH
66950: LD_STRING , 
66952: STR
66953: PUSH
66954: LD_VAR 0 3
66958: PPUSH
66959: CALL_OW 250
66963: STR
66964: PUSH
66965: LD_STRING , 
66967: STR
66968: PUSH
66969: LD_VAR 0 3
66973: PPUSH
66974: CALL_OW 251
66978: STR
66979: PUSH
66980: LD_STRING , 
66982: STR
66983: PUSH
66984: LD_VAR 0 3
66988: PPUSH
66989: CALL_OW 254
66993: STR
66994: PUSH
66995: LD_STRING , 
66997: STR
66998: PUSH
66999: LD_VAR 0 3
67003: PPUSH
67004: LD_INT 1
67006: PPUSH
67007: CALL_OW 268
67011: STR
67012: PUSH
67013: LD_STRING , 
67015: STR
67016: PUSH
67017: LD_VAR 0 3
67021: PPUSH
67022: LD_INT 2
67024: PPUSH
67025: CALL_OW 268
67029: STR
67030: PUSH
67031: LD_STRING ],
67033: STR
67034: PPUSH
67035: CALL_OW 561
// end ;
67039: GO 66933
67041: POP
67042: POP
// AddToLog ( ]; ) ;
67043: LD_STRING ];
67045: PPUSH
67046: CALL_OW 561
// end ;
67050: LD_VAR 0 2
67054: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67055: LD_INT 0
67057: PPUSH
67058: PPUSH
67059: PPUSH
67060: PPUSH
67061: PPUSH
// if not area or not rate or not max then
67062: LD_VAR 0 1
67066: NOT
67067: PUSH
67068: LD_VAR 0 2
67072: NOT
67073: OR
67074: PUSH
67075: LD_VAR 0 4
67079: NOT
67080: OR
67081: IFFALSE 67085
// exit ;
67083: GO 67274
// while 1 do
67085: LD_INT 1
67087: IFFALSE 67274
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67089: LD_ADDR_VAR 0 9
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_INT 1
67101: PPUSH
67102: CALL_OW 287
67106: PUSH
67107: LD_INT 10
67109: MUL
67110: ST_TO_ADDR
// r := rate / 10 ;
67111: LD_ADDR_VAR 0 7
67115: PUSH
67116: LD_VAR 0 2
67120: PUSH
67121: LD_INT 10
67123: DIVREAL
67124: ST_TO_ADDR
// time := 1 1$00 ;
67125: LD_ADDR_VAR 0 8
67129: PUSH
67130: LD_INT 2100
67132: ST_TO_ADDR
// if amount < min then
67133: LD_VAR 0 9
67137: PUSH
67138: LD_VAR 0 3
67142: LESS
67143: IFFALSE 67161
// r := r * 2 else
67145: LD_ADDR_VAR 0 7
67149: PUSH
67150: LD_VAR 0 7
67154: PUSH
67155: LD_INT 2
67157: MUL
67158: ST_TO_ADDR
67159: GO 67187
// if amount > max then
67161: LD_VAR 0 9
67165: PUSH
67166: LD_VAR 0 4
67170: GREATER
67171: IFFALSE 67187
// r := r / 2 ;
67173: LD_ADDR_VAR 0 7
67177: PUSH
67178: LD_VAR 0 7
67182: PUSH
67183: LD_INT 2
67185: DIVREAL
67186: ST_TO_ADDR
// time := time / r ;
67187: LD_ADDR_VAR 0 8
67191: PUSH
67192: LD_VAR 0 8
67196: PUSH
67197: LD_VAR 0 7
67201: DIVREAL
67202: ST_TO_ADDR
// if time < 0 then
67203: LD_VAR 0 8
67207: PUSH
67208: LD_INT 0
67210: LESS
67211: IFFALSE 67228
// time := time * - 1 ;
67213: LD_ADDR_VAR 0 8
67217: PUSH
67218: LD_VAR 0 8
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: MUL
67227: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67228: LD_VAR 0 8
67232: PUSH
67233: LD_INT 35
67235: PPUSH
67236: LD_INT 875
67238: PPUSH
67239: CALL_OW 12
67243: PLUS
67244: PPUSH
67245: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67249: LD_INT 1
67251: PPUSH
67252: LD_INT 5
67254: PPUSH
67255: CALL_OW 12
67259: PPUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: LD_INT 1
67267: PPUSH
67268: CALL_OW 55
// end ;
67272: GO 67085
// end ;
67274: LD_VAR 0 5
67278: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
67283: PPUSH
67284: PPUSH
67285: PPUSH
67286: PPUSH
67287: PPUSH
67288: PPUSH
// if not turrets or not factories then
67289: LD_VAR 0 1
67293: NOT
67294: PUSH
67295: LD_VAR 0 2
67299: NOT
67300: OR
67301: IFFALSE 67305
// exit ;
67303: GO 67612
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67305: LD_ADDR_VAR 0 10
67309: PUSH
67310: LD_INT 5
67312: PUSH
67313: LD_INT 6
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 4
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: LD_INT 5
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 24
67347: PUSH
67348: LD_INT 25
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 23
67357: PUSH
67358: LD_INT 27
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 42
67371: PUSH
67372: LD_INT 43
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 44
67381: PUSH
67382: LD_INT 46
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 45
67391: PUSH
67392: LD_INT 47
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// result := [ ] ;
67409: LD_ADDR_VAR 0 3
67413: PUSH
67414: EMPTY
67415: ST_TO_ADDR
// for i in turrets do
67416: LD_ADDR_VAR 0 4
67420: PUSH
67421: LD_VAR 0 1
67425: PUSH
67426: FOR_IN
67427: IFFALSE 67610
// begin nat := GetNation ( i ) ;
67429: LD_ADDR_VAR 0 7
67433: PUSH
67434: LD_VAR 0 4
67438: PPUSH
67439: CALL_OW 248
67443: ST_TO_ADDR
// weapon := 0 ;
67444: LD_ADDR_VAR 0 8
67448: PUSH
67449: LD_INT 0
67451: ST_TO_ADDR
// if not nat then
67452: LD_VAR 0 7
67456: NOT
67457: IFFALSE 67461
// continue ;
67459: GO 67426
// for j in list [ nat ] do
67461: LD_ADDR_VAR 0 5
67465: PUSH
67466: LD_VAR 0 10
67470: PUSH
67471: LD_VAR 0 7
67475: ARRAY
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67519
// if GetBWeapon ( i ) = j [ 1 ] then
67480: LD_VAR 0 4
67484: PPUSH
67485: CALL_OW 269
67489: PUSH
67490: LD_VAR 0 5
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: EQUAL
67499: IFFALSE 67517
// begin weapon := j [ 2 ] ;
67501: LD_ADDR_VAR 0 8
67505: PUSH
67506: LD_VAR 0 5
67510: PUSH
67511: LD_INT 2
67513: ARRAY
67514: ST_TO_ADDR
// break ;
67515: GO 67519
// end ;
67517: GO 67477
67519: POP
67520: POP
// if not weapon then
67521: LD_VAR 0 8
67525: NOT
67526: IFFALSE 67530
// continue ;
67528: GO 67426
// for k in factories do
67530: LD_ADDR_VAR 0 6
67534: PUSH
67535: LD_VAR 0 2
67539: PUSH
67540: FOR_IN
67541: IFFALSE 67606
// begin weapons := AvailableWeaponList ( k ) ;
67543: LD_ADDR_VAR 0 9
67547: PUSH
67548: LD_VAR 0 6
67552: PPUSH
67553: CALL_OW 478
67557: ST_TO_ADDR
// if not weapons then
67558: LD_VAR 0 9
67562: NOT
67563: IFFALSE 67567
// continue ;
67565: GO 67540
// if weapon in weapons then
67567: LD_VAR 0 8
67571: PUSH
67572: LD_VAR 0 9
67576: IN
67577: IFFALSE 67604
// begin result := [ i , weapon ] ;
67579: LD_ADDR_VAR 0 3
67583: PUSH
67584: LD_VAR 0 4
67588: PUSH
67589: LD_VAR 0 8
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: ST_TO_ADDR
// exit ;
67598: POP
67599: POP
67600: POP
67601: POP
67602: GO 67612
// end ; end ;
67604: GO 67540
67606: POP
67607: POP
// end ;
67608: GO 67426
67610: POP
67611: POP
// end ;
67612: LD_VAR 0 3
67616: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67617: LD_INT 0
67619: PPUSH
// if not side or side > 8 then
67620: LD_VAR 0 3
67624: NOT
67625: PUSH
67626: LD_VAR 0 3
67630: PUSH
67631: LD_INT 8
67633: GREATER
67634: OR
67635: IFFALSE 67639
// exit ;
67637: GO 67698
// if not range then
67639: LD_VAR 0 4
67643: NOT
67644: IFFALSE 67655
// range := - 12 ;
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: LD_INT 12
67653: NEG
67654: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_VAR 0 2
67664: PPUSH
67665: LD_VAR 0 3
67669: PPUSH
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67679: LD_VAR 0 1
67683: PPUSH
67684: LD_VAR 0 2
67688: PPUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: CALL_OW 331
// end ;
67698: LD_VAR 0 5
67702: RET
// export function Video ( mode ) ; begin
67703: LD_INT 0
67705: PPUSH
// ingame_video = mode ;
67706: LD_ADDR_OWVAR 52
67710: PUSH
67711: LD_VAR 0 1
67715: ST_TO_ADDR
// interface_hidden = mode ;
67716: LD_ADDR_OWVAR 54
67720: PUSH
67721: LD_VAR 0 1
67725: ST_TO_ADDR
// end ;
67726: LD_VAR 0 2
67730: RET
// export function Join ( array , element ) ; begin
67731: LD_INT 0
67733: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67734: LD_ADDR_VAR 0 3
67738: PUSH
67739: LD_VAR 0 1
67743: PPUSH
67744: LD_VAR 0 1
67748: PUSH
67749: LD_INT 1
67751: PLUS
67752: PPUSH
67753: LD_VAR 0 2
67757: PPUSH
67758: CALL_OW 1
67762: ST_TO_ADDR
// end ;
67763: LD_VAR 0 3
67767: RET
// export function JoinUnion ( array , element ) ; begin
67768: LD_INT 0
67770: PPUSH
// result := array union element ;
67771: LD_ADDR_VAR 0 3
67775: PUSH
67776: LD_VAR 0 1
67780: PUSH
67781: LD_VAR 0 2
67785: UNION
67786: ST_TO_ADDR
// end ;
67787: LD_VAR 0 3
67791: RET
// export function GetBehemoths ( side ) ; begin
67792: LD_INT 0
67794: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67795: LD_ADDR_VAR 0 2
67799: PUSH
67800: LD_INT 22
67802: PUSH
67803: LD_VAR 0 1
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 31
67814: PUSH
67815: LD_INT 25
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PPUSH
67826: CALL_OW 69
67830: ST_TO_ADDR
// end ;
67831: LD_VAR 0 2
67835: RET
// export function Shuffle ( array ) ; var i , index ; begin
67836: LD_INT 0
67838: PPUSH
67839: PPUSH
67840: PPUSH
// result := [ ] ;
67841: LD_ADDR_VAR 0 2
67845: PUSH
67846: EMPTY
67847: ST_TO_ADDR
// if not array then
67848: LD_VAR 0 1
67852: NOT
67853: IFFALSE 67857
// exit ;
67855: GO 67956
// Randomize ;
67857: CALL_OW 10
// for i = array downto 1 do
67861: LD_ADDR_VAR 0 3
67865: PUSH
67866: DOUBLE
67867: LD_VAR 0 1
67871: INC
67872: ST_TO_ADDR
67873: LD_INT 1
67875: PUSH
67876: FOR_DOWNTO
67877: IFFALSE 67954
// begin index := rand ( 1 , array ) ;
67879: LD_ADDR_VAR 0 4
67883: PUSH
67884: LD_INT 1
67886: PPUSH
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 12
67896: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67897: LD_ADDR_VAR 0 2
67901: PUSH
67902: LD_VAR 0 2
67906: PPUSH
67907: LD_VAR 0 2
67911: PUSH
67912: LD_INT 1
67914: PLUS
67915: PPUSH
67916: LD_VAR 0 1
67920: PUSH
67921: LD_VAR 0 4
67925: ARRAY
67926: PPUSH
67927: CALL_OW 2
67931: ST_TO_ADDR
// array := Delete ( array , index ) ;
67932: LD_ADDR_VAR 0 1
67936: PUSH
67937: LD_VAR 0 1
67941: PPUSH
67942: LD_VAR 0 4
67946: PPUSH
67947: CALL_OW 3
67951: ST_TO_ADDR
// end ;
67952: GO 67876
67954: POP
67955: POP
// end ;
67956: LD_VAR 0 2
67960: RET
// export function GetBaseMaterials ( base ) ; begin
67961: LD_INT 0
67963: PPUSH
// result := [ 0 , 0 , 0 ] ;
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: ST_TO_ADDR
// if not base then
67983: LD_VAR 0 1
67987: NOT
67988: IFFALSE 67992
// exit ;
67990: GO 68041
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67992: LD_ADDR_VAR 0 2
67996: PUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: LD_INT 1
68004: PPUSH
68005: CALL_OW 275
68009: PUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: LD_INT 2
68017: PPUSH
68018: CALL_OW 275
68022: PUSH
68023: LD_VAR 0 1
68027: PPUSH
68028: LD_INT 3
68030: PPUSH
68031: CALL_OW 275
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: ST_TO_ADDR
// end ;
68041: LD_VAR 0 2
68045: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
// result := array ;
68050: LD_ADDR_VAR 0 3
68054: PUSH
68055: LD_VAR 0 1
68059: ST_TO_ADDR
// if size >= result then
68060: LD_VAR 0 2
68064: PUSH
68065: LD_VAR 0 3
68069: GREATEREQUAL
68070: IFFALSE 68074
// exit ;
68072: GO 68124
// if size then
68074: LD_VAR 0 2
68078: IFFALSE 68124
// for i := array downto size do
68080: LD_ADDR_VAR 0 4
68084: PUSH
68085: DOUBLE
68086: LD_VAR 0 1
68090: INC
68091: ST_TO_ADDR
68092: LD_VAR 0 2
68096: PUSH
68097: FOR_DOWNTO
68098: IFFALSE 68122
// result := Delete ( result , result ) ;
68100: LD_ADDR_VAR 0 3
68104: PUSH
68105: LD_VAR 0 3
68109: PPUSH
68110: LD_VAR 0 3
68114: PPUSH
68115: CALL_OW 3
68119: ST_TO_ADDR
68120: GO 68097
68122: POP
68123: POP
// end ;
68124: LD_VAR 0 3
68128: RET
// export function ComExit ( unit ) ; var tmp ; begin
68129: LD_INT 0
68131: PPUSH
68132: PPUSH
// if not IsInUnit ( unit ) then
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 310
68142: NOT
68143: IFFALSE 68147
// exit ;
68145: GO 68207
// tmp := IsInUnit ( unit ) ;
68147: LD_ADDR_VAR 0 3
68151: PUSH
68152: LD_VAR 0 1
68156: PPUSH
68157: CALL_OW 310
68161: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68162: LD_VAR 0 3
68166: PPUSH
68167: CALL_OW 247
68171: PUSH
68172: LD_INT 2
68174: EQUAL
68175: IFFALSE 68188
// ComExitVehicle ( unit ) else
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL_OW 121
68186: GO 68197
// ComExitBuilding ( unit ) ;
68188: LD_VAR 0 1
68192: PPUSH
68193: CALL_OW 122
// result := tmp ;
68197: LD_ADDR_VAR 0 2
68201: PUSH
68202: LD_VAR 0 3
68206: ST_TO_ADDR
// end ;
68207: LD_VAR 0 2
68211: RET
// export function ComExitAll ( units ) ; var i ; begin
68212: LD_INT 0
68214: PPUSH
68215: PPUSH
// if not units then
68216: LD_VAR 0 1
68220: NOT
68221: IFFALSE 68225
// exit ;
68223: GO 68251
// for i in units do
68225: LD_ADDR_VAR 0 3
68229: PUSH
68230: LD_VAR 0 1
68234: PUSH
68235: FOR_IN
68236: IFFALSE 68249
// ComExit ( i ) ;
68238: LD_VAR 0 3
68242: PPUSH
68243: CALL 68129 0 1
68247: GO 68235
68249: POP
68250: POP
// end ;
68251: LD_VAR 0 2
68255: RET
// export function ResetHc ; begin
68256: LD_INT 0
68258: PPUSH
// InitHc ;
68259: CALL_OW 19
// hc_importance := 0 ;
68263: LD_ADDR_OWVAR 32
68267: PUSH
68268: LD_INT 0
68270: ST_TO_ADDR
// end ;
68271: LD_VAR 0 1
68275: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68276: LD_INT 0
68278: PPUSH
68279: PPUSH
68280: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68281: LD_ADDR_VAR 0 6
68285: PUSH
68286: LD_VAR 0 1
68290: PUSH
68291: LD_VAR 0 3
68295: PLUS
68296: PUSH
68297: LD_INT 2
68299: DIV
68300: ST_TO_ADDR
// if _x < 0 then
68301: LD_VAR 0 6
68305: PUSH
68306: LD_INT 0
68308: LESS
68309: IFFALSE 68326
// _x := _x * - 1 ;
68311: LD_ADDR_VAR 0 6
68315: PUSH
68316: LD_VAR 0 6
68320: PUSH
68321: LD_INT 1
68323: NEG
68324: MUL
68325: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68326: LD_ADDR_VAR 0 7
68330: PUSH
68331: LD_VAR 0 2
68335: PUSH
68336: LD_VAR 0 4
68340: PLUS
68341: PUSH
68342: LD_INT 2
68344: DIV
68345: ST_TO_ADDR
// if _y < 0 then
68346: LD_VAR 0 7
68350: PUSH
68351: LD_INT 0
68353: LESS
68354: IFFALSE 68371
// _y := _y * - 1 ;
68356: LD_ADDR_VAR 0 7
68360: PUSH
68361: LD_VAR 0 7
68365: PUSH
68366: LD_INT 1
68368: NEG
68369: MUL
68370: ST_TO_ADDR
// result := [ _x , _y ] ;
68371: LD_ADDR_VAR 0 5
68375: PUSH
68376: LD_VAR 0 6
68380: PUSH
68381: LD_VAR 0 7
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: ST_TO_ADDR
// end ;
68390: LD_VAR 0 5
68394: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68395: LD_INT 0
68397: PPUSH
68398: PPUSH
68399: PPUSH
68400: PPUSH
// task := GetTaskList ( unit ) ;
68401: LD_ADDR_VAR 0 7
68405: PUSH
68406: LD_VAR 0 1
68410: PPUSH
68411: CALL_OW 437
68415: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68416: LD_VAR 0 7
68420: NOT
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: CALL_OW 308
68436: NOT
68437: AND
68438: IFFALSE 68442
// exit ;
68440: GO 68560
// if IsInArea ( unit , area ) then
68442: LD_VAR 0 1
68446: PPUSH
68447: LD_VAR 0 2
68451: PPUSH
68452: CALL_OW 308
68456: IFFALSE 68474
// begin ComMoveToArea ( unit , goAway ) ;
68458: LD_VAR 0 1
68462: PPUSH
68463: LD_VAR 0 3
68467: PPUSH
68468: CALL_OW 113
// exit ;
68472: GO 68560
// end ; if task [ 1 ] [ 1 ] <> M then
68474: LD_VAR 0 7
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PUSH
68487: LD_STRING M
68489: NONEQUAL
68490: IFFALSE 68494
// exit ;
68492: GO 68560
// x := task [ 1 ] [ 2 ] ;
68494: LD_ADDR_VAR 0 5
68498: PUSH
68499: LD_VAR 0 7
68503: PUSH
68504: LD_INT 1
68506: ARRAY
68507: PUSH
68508: LD_INT 2
68510: ARRAY
68511: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68512: LD_ADDR_VAR 0 6
68516: PUSH
68517: LD_VAR 0 7
68521: PUSH
68522: LD_INT 1
68524: ARRAY
68525: PUSH
68526: LD_INT 3
68528: ARRAY
68529: ST_TO_ADDR
// if InArea ( x , y , area ) then
68530: LD_VAR 0 5
68534: PPUSH
68535: LD_VAR 0 6
68539: PPUSH
68540: LD_VAR 0 2
68544: PPUSH
68545: CALL_OW 309
68549: IFFALSE 68560
// ComStop ( unit ) ;
68551: LD_VAR 0 1
68555: PPUSH
68556: CALL_OW 141
// end ;
68560: LD_VAR 0 4
68564: RET
// export function Abs ( value ) ; begin
68565: LD_INT 0
68567: PPUSH
// result := value ;
68568: LD_ADDR_VAR 0 2
68572: PUSH
68573: LD_VAR 0 1
68577: ST_TO_ADDR
// if value < 0 then
68578: LD_VAR 0 1
68582: PUSH
68583: LD_INT 0
68585: LESS
68586: IFFALSE 68603
// result := value * - 1 ;
68588: LD_ADDR_VAR 0 2
68592: PUSH
68593: LD_VAR 0 1
68597: PUSH
68598: LD_INT 1
68600: NEG
68601: MUL
68602: ST_TO_ADDR
// end ;
68603: LD_VAR 0 2
68607: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68608: LD_INT 0
68610: PPUSH
68611: PPUSH
68612: PPUSH
68613: PPUSH
68614: PPUSH
68615: PPUSH
68616: PPUSH
68617: PPUSH
// if not unit or not building then
68618: LD_VAR 0 1
68622: NOT
68623: PUSH
68624: LD_VAR 0 2
68628: NOT
68629: OR
68630: IFFALSE 68634
// exit ;
68632: GO 68860
// x := GetX ( building ) ;
68634: LD_ADDR_VAR 0 4
68638: PUSH
68639: LD_VAR 0 2
68643: PPUSH
68644: CALL_OW 250
68648: ST_TO_ADDR
// y := GetY ( building ) ;
68649: LD_ADDR_VAR 0 6
68653: PUSH
68654: LD_VAR 0 2
68658: PPUSH
68659: CALL_OW 251
68663: ST_TO_ADDR
// d := GetDir ( building ) ;
68664: LD_ADDR_VAR 0 8
68668: PUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: CALL_OW 254
68678: ST_TO_ADDR
// r := 4 ;
68679: LD_ADDR_VAR 0 9
68683: PUSH
68684: LD_INT 4
68686: ST_TO_ADDR
// for i := 1 to 5 do
68687: LD_ADDR_VAR 0 10
68691: PUSH
68692: DOUBLE
68693: LD_INT 1
68695: DEC
68696: ST_TO_ADDR
68697: LD_INT 5
68699: PUSH
68700: FOR_TO
68701: IFFALSE 68858
// begin _x := ShiftX ( x , d , r + i ) ;
68703: LD_ADDR_VAR 0 5
68707: PUSH
68708: LD_VAR 0 4
68712: PPUSH
68713: LD_VAR 0 8
68717: PPUSH
68718: LD_VAR 0 9
68722: PUSH
68723: LD_VAR 0 10
68727: PLUS
68728: PPUSH
68729: CALL_OW 272
68733: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68734: LD_ADDR_VAR 0 7
68738: PUSH
68739: LD_VAR 0 6
68743: PPUSH
68744: LD_VAR 0 8
68748: PPUSH
68749: LD_VAR 0 9
68753: PUSH
68754: LD_VAR 0 10
68758: PLUS
68759: PPUSH
68760: CALL_OW 273
68764: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68765: LD_VAR 0 5
68769: PPUSH
68770: LD_VAR 0 7
68774: PPUSH
68775: CALL_OW 488
68779: PUSH
68780: LD_VAR 0 5
68784: PPUSH
68785: LD_VAR 0 7
68789: PPUSH
68790: CALL_OW 428
68794: PPUSH
68795: CALL_OW 247
68799: PUSH
68800: LD_INT 3
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: IN
68810: NOT
68811: AND
68812: IFFALSE 68856
// begin ComMoveXY ( unit , _x , _y ) ;
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_VAR 0 5
68823: PPUSH
68824: LD_VAR 0 7
68828: PPUSH
68829: CALL_OW 111
// result := [ _x , _y ] ;
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: LD_VAR 0 5
68842: PUSH
68843: LD_VAR 0 7
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: ST_TO_ADDR
// exit ;
68852: POP
68853: POP
68854: GO 68860
// end ; end ;
68856: GO 68700
68858: POP
68859: POP
// end ;
68860: LD_VAR 0 3
68864: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68865: LD_INT 0
68867: PPUSH
68868: PPUSH
68869: PPUSH
// result := 0 ;
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68878: LD_VAR 0 1
68882: PUSH
68883: LD_INT 0
68885: LESS
68886: PUSH
68887: LD_VAR 0 1
68891: PUSH
68892: LD_INT 8
68894: GREATER
68895: OR
68896: PUSH
68897: LD_VAR 0 2
68901: PUSH
68902: LD_INT 0
68904: LESS
68905: OR
68906: PUSH
68907: LD_VAR 0 2
68911: PUSH
68912: LD_INT 8
68914: GREATER
68915: OR
68916: IFFALSE 68920
// exit ;
68918: GO 68995
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68920: LD_ADDR_VAR 0 4
68924: PUSH
68925: LD_INT 22
68927: PUSH
68928: LD_VAR 0 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PPUSH
68937: CALL_OW 69
68941: PUSH
68942: FOR_IN
68943: IFFALSE 68993
// begin un := UnitShoot ( i ) ;
68945: LD_ADDR_VAR 0 5
68949: PUSH
68950: LD_VAR 0 4
68954: PPUSH
68955: CALL_OW 504
68959: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68960: LD_VAR 0 5
68964: PPUSH
68965: CALL_OW 255
68969: PUSH
68970: LD_VAR 0 1
68974: EQUAL
68975: IFFALSE 68991
// begin result := un ;
68977: LD_ADDR_VAR 0 3
68981: PUSH
68982: LD_VAR 0 5
68986: ST_TO_ADDR
// exit ;
68987: POP
68988: POP
68989: GO 68995
// end ; end ;
68991: GO 68942
68993: POP
68994: POP
// end ;
68995: LD_VAR 0 3
68999: RET
// export function GetCargoBay ( units ) ; begin
69000: LD_INT 0
69002: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69003: LD_ADDR_VAR 0 2
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_INT 2
69015: PUSH
69016: LD_INT 34
69018: PUSH
69019: LD_INT 12
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 34
69028: PUSH
69029: LD_INT 51
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 34
69038: PUSH
69039: LD_INT 32
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 34
69048: PUSH
69049: LD_INT 89
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: PPUSH
69063: CALL_OW 72
69067: ST_TO_ADDR
// end ;
69068: LD_VAR 0 2
69072: RET
// export function Negate ( value ) ; begin
69073: LD_INT 0
69075: PPUSH
// result := not value ;
69076: LD_ADDR_VAR 0 2
69080: PUSH
69081: LD_VAR 0 1
69085: NOT
69086: ST_TO_ADDR
// end ;
69087: LD_VAR 0 2
69091: RET
// export function Inc ( value ) ; begin
69092: LD_INT 0
69094: PPUSH
// result := value + 1 ;
69095: LD_ADDR_VAR 0 2
69099: PUSH
69100: LD_VAR 0 1
69104: PUSH
69105: LD_INT 1
69107: PLUS
69108: ST_TO_ADDR
// end ;
69109: LD_VAR 0 2
69113: RET
// export function Dec ( value ) ; begin
69114: LD_INT 0
69116: PPUSH
// result := value - 1 ;
69117: LD_ADDR_VAR 0 2
69121: PUSH
69122: LD_VAR 0 1
69126: PUSH
69127: LD_INT 1
69129: MINUS
69130: ST_TO_ADDR
// end ;
69131: LD_VAR 0 2
69135: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69136: LD_INT 0
69138: PPUSH
69139: PPUSH
69140: PPUSH
69141: PPUSH
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69146: LD_VAR 0 1
69150: PPUSH
69151: LD_VAR 0 2
69155: PPUSH
69156: CALL_OW 488
69160: NOT
69161: PUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: LD_VAR 0 4
69171: PPUSH
69172: CALL_OW 488
69176: NOT
69177: OR
69178: IFFALSE 69191
// begin result := - 1 ;
69180: LD_ADDR_VAR 0 5
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: ST_TO_ADDR
// exit ;
69189: GO 69426
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69191: LD_ADDR_VAR 0 12
69195: PUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: LD_VAR 0 2
69205: PPUSH
69206: LD_VAR 0 3
69210: PPUSH
69211: LD_VAR 0 4
69215: PPUSH
69216: CALL 68276 0 4
69220: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69221: LD_ADDR_VAR 0 11
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: LD_VAR 0 2
69235: PPUSH
69236: LD_VAR 0 12
69240: PUSH
69241: LD_INT 1
69243: ARRAY
69244: PPUSH
69245: LD_VAR 0 12
69249: PUSH
69250: LD_INT 2
69252: ARRAY
69253: PPUSH
69254: CALL_OW 298
69258: ST_TO_ADDR
// distance := 9999 ;
69259: LD_ADDR_VAR 0 10
69263: PUSH
69264: LD_INT 9999
69266: ST_TO_ADDR
// for i := 0 to 5 do
69267: LD_ADDR_VAR 0 6
69271: PUSH
69272: DOUBLE
69273: LD_INT 0
69275: DEC
69276: ST_TO_ADDR
69277: LD_INT 5
69279: PUSH
69280: FOR_TO
69281: IFFALSE 69424
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69283: LD_ADDR_VAR 0 7
69287: PUSH
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_VAR 0 6
69297: PPUSH
69298: LD_VAR 0 11
69302: PPUSH
69303: CALL_OW 272
69307: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69308: LD_ADDR_VAR 0 8
69312: PUSH
69313: LD_VAR 0 2
69317: PPUSH
69318: LD_VAR 0 6
69322: PPUSH
69323: LD_VAR 0 11
69327: PPUSH
69328: CALL_OW 273
69332: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69333: LD_VAR 0 7
69337: PPUSH
69338: LD_VAR 0 8
69342: PPUSH
69343: CALL_OW 488
69347: NOT
69348: IFFALSE 69352
// continue ;
69350: GO 69280
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69352: LD_ADDR_VAR 0 9
69356: PUSH
69357: LD_VAR 0 12
69361: PUSH
69362: LD_INT 1
69364: ARRAY
69365: PPUSH
69366: LD_VAR 0 12
69370: PUSH
69371: LD_INT 2
69373: ARRAY
69374: PPUSH
69375: LD_VAR 0 7
69379: PPUSH
69380: LD_VAR 0 8
69384: PPUSH
69385: CALL_OW 298
69389: ST_TO_ADDR
// if tmp < distance then
69390: LD_VAR 0 9
69394: PUSH
69395: LD_VAR 0 10
69399: LESS
69400: IFFALSE 69422
// begin result := i ;
69402: LD_ADDR_VAR 0 5
69406: PUSH
69407: LD_VAR 0 6
69411: ST_TO_ADDR
// distance := tmp ;
69412: LD_ADDR_VAR 0 10
69416: PUSH
69417: LD_VAR 0 9
69421: ST_TO_ADDR
// end ; end ;
69422: GO 69280
69424: POP
69425: POP
// end ;
69426: LD_VAR 0 5
69430: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69431: LD_INT 0
69433: PPUSH
69434: PPUSH
// if not driver or not IsInUnit ( driver ) then
69435: LD_VAR 0 1
69439: NOT
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: CALL_OW 310
69450: NOT
69451: OR
69452: IFFALSE 69456
// exit ;
69454: GO 69546
// vehicle := IsInUnit ( driver ) ;
69456: LD_ADDR_VAR 0 3
69460: PUSH
69461: LD_VAR 0 1
69465: PPUSH
69466: CALL_OW 310
69470: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69471: LD_VAR 0 1
69475: PPUSH
69476: LD_STRING \
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: LD_INT 0
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: PUSH
69506: LD_STRING E
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: LD_VAR 0 3
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 0
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PPUSH
69542: CALL_OW 446
// end ;
69546: LD_VAR 0 2
69550: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
// if not driver or not IsInUnit ( driver ) then
69555: LD_VAR 0 1
69559: NOT
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 310
69570: NOT
69571: OR
69572: IFFALSE 69576
// exit ;
69574: GO 69666
// vehicle := IsInUnit ( driver ) ;
69576: LD_ADDR_VAR 0 3
69580: PUSH
69581: LD_VAR 0 1
69585: PPUSH
69586: CALL_OW 310
69590: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69591: LD_VAR 0 1
69595: PPUSH
69596: LD_STRING \
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: PUSH
69626: LD_STRING E
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_VAR 0 3
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PPUSH
69662: CALL_OW 447
// end ;
69666: LD_VAR 0 2
69670: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69671: LD_INT 0
69673: PPUSH
69674: PPUSH
69675: PPUSH
// tmp := [ ] ;
69676: LD_ADDR_VAR 0 5
69680: PUSH
69681: EMPTY
69682: ST_TO_ADDR
// for i in units do
69683: LD_ADDR_VAR 0 4
69687: PUSH
69688: LD_VAR 0 1
69692: PUSH
69693: FOR_IN
69694: IFFALSE 69732
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69696: LD_ADDR_VAR 0 5
69700: PUSH
69701: LD_VAR 0 5
69705: PPUSH
69706: LD_VAR 0 5
69710: PUSH
69711: LD_INT 1
69713: PLUS
69714: PPUSH
69715: LD_VAR 0 4
69719: PPUSH
69720: CALL_OW 256
69724: PPUSH
69725: CALL_OW 2
69729: ST_TO_ADDR
69730: GO 69693
69732: POP
69733: POP
// if not tmp then
69734: LD_VAR 0 5
69738: NOT
69739: IFFALSE 69743
// exit ;
69741: GO 69791
// if asc then
69743: LD_VAR 0 2
69747: IFFALSE 69771
// result := SortListByListAsc ( units , tmp ) else
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: LD_VAR 0 1
69758: PPUSH
69759: LD_VAR 0 5
69763: PPUSH
69764: CALL_OW 76
69768: ST_TO_ADDR
69769: GO 69791
// result := SortListByListDesc ( units , tmp ) ;
69771: LD_ADDR_VAR 0 3
69775: PUSH
69776: LD_VAR 0 1
69780: PPUSH
69781: LD_VAR 0 5
69785: PPUSH
69786: CALL_OW 77
69790: ST_TO_ADDR
// end ;
69791: LD_VAR 0 3
69795: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69796: LD_INT 0
69798: PPUSH
69799: PPUSH
// task := GetTaskList ( mech ) ;
69800: LD_ADDR_VAR 0 4
69804: PUSH
69805: LD_VAR 0 1
69809: PPUSH
69810: CALL_OW 437
69814: ST_TO_ADDR
// if not task then
69815: LD_VAR 0 4
69819: NOT
69820: IFFALSE 69824
// exit ;
69822: GO 69866
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69824: LD_ADDR_VAR 0 3
69828: PUSH
69829: LD_VAR 0 4
69833: PUSH
69834: LD_INT 1
69836: ARRAY
69837: PUSH
69838: LD_INT 1
69840: ARRAY
69841: PUSH
69842: LD_STRING r
69844: EQUAL
69845: PUSH
69846: LD_VAR 0 4
69850: PUSH
69851: LD_INT 1
69853: ARRAY
69854: PUSH
69855: LD_INT 4
69857: ARRAY
69858: PUSH
69859: LD_VAR 0 2
69863: EQUAL
69864: AND
69865: ST_TO_ADDR
// end ;
69866: LD_VAR 0 3
69870: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69871: LD_INT 0
69873: PPUSH
// SetDir ( unit , d ) ;
69874: LD_VAR 0 1
69878: PPUSH
69879: LD_VAR 0 4
69883: PPUSH
69884: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69888: LD_VAR 0 1
69892: PPUSH
69893: LD_VAR 0 2
69897: PPUSH
69898: LD_VAR 0 3
69902: PPUSH
69903: LD_VAR 0 5
69907: PPUSH
69908: CALL_OW 48
// end ;
69912: LD_VAR 0 6
69916: RET
// export function ToNaturalNumber ( number ) ; begin
69917: LD_INT 0
69919: PPUSH
// result := number div 1 ;
69920: LD_ADDR_VAR 0 2
69924: PUSH
69925: LD_VAR 0 1
69929: PUSH
69930: LD_INT 1
69932: DIV
69933: ST_TO_ADDR
// if number < 0 then
69934: LD_VAR 0 1
69938: PUSH
69939: LD_INT 0
69941: LESS
69942: IFFALSE 69952
// result := 0 ;
69944: LD_ADDR_VAR 0 2
69948: PUSH
69949: LD_INT 0
69951: ST_TO_ADDR
// end ;
69952: LD_VAR 0 2
69956: RET
// export function SortByClass ( units , class ) ; var un ; begin
69957: LD_INT 0
69959: PPUSH
69960: PPUSH
// if not units or not class then
69961: LD_VAR 0 1
69965: NOT
69966: PUSH
69967: LD_VAR 0 2
69971: NOT
69972: OR
69973: IFFALSE 69977
// exit ;
69975: GO 70072
// result := [ ] ;
69977: LD_ADDR_VAR 0 3
69981: PUSH
69982: EMPTY
69983: ST_TO_ADDR
// for un in units do
69984: LD_ADDR_VAR 0 4
69988: PUSH
69989: LD_VAR 0 1
69993: PUSH
69994: FOR_IN
69995: IFFALSE 70070
// if GetClass ( un ) = class then
69997: LD_VAR 0 4
70001: PPUSH
70002: CALL_OW 257
70006: PUSH
70007: LD_VAR 0 2
70011: EQUAL
70012: IFFALSE 70039
// result := Insert ( result , 1 , un ) else
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: LD_VAR 0 3
70023: PPUSH
70024: LD_INT 1
70026: PPUSH
70027: LD_VAR 0 4
70031: PPUSH
70032: CALL_OW 2
70036: ST_TO_ADDR
70037: GO 70068
// result := Replace ( result , result + 1 , un ) ;
70039: LD_ADDR_VAR 0 3
70043: PUSH
70044: LD_VAR 0 3
70048: PPUSH
70049: LD_VAR 0 3
70053: PUSH
70054: LD_INT 1
70056: PLUS
70057: PPUSH
70058: LD_VAR 0 4
70062: PPUSH
70063: CALL_OW 1
70067: ST_TO_ADDR
70068: GO 69994
70070: POP
70071: POP
// end ;
70072: LD_VAR 0 3
70076: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70077: LD_INT 0
70079: PPUSH
70080: PPUSH
70081: PPUSH
70082: PPUSH
70083: PPUSH
70084: PPUSH
70085: PPUSH
// result := [ ] ;
70086: LD_ADDR_VAR 0 4
70090: PUSH
70091: EMPTY
70092: ST_TO_ADDR
// if x - r < 0 then
70093: LD_VAR 0 1
70097: PUSH
70098: LD_VAR 0 3
70102: MINUS
70103: PUSH
70104: LD_INT 0
70106: LESS
70107: IFFALSE 70119
// min_x := 0 else
70109: LD_ADDR_VAR 0 8
70113: PUSH
70114: LD_INT 0
70116: ST_TO_ADDR
70117: GO 70135
// min_x := x - r ;
70119: LD_ADDR_VAR 0 8
70123: PUSH
70124: LD_VAR 0 1
70128: PUSH
70129: LD_VAR 0 3
70133: MINUS
70134: ST_TO_ADDR
// if y - r < 0 then
70135: LD_VAR 0 2
70139: PUSH
70140: LD_VAR 0 3
70144: MINUS
70145: PUSH
70146: LD_INT 0
70148: LESS
70149: IFFALSE 70161
// min_y := 0 else
70151: LD_ADDR_VAR 0 7
70155: PUSH
70156: LD_INT 0
70158: ST_TO_ADDR
70159: GO 70177
// min_y := y - r ;
70161: LD_ADDR_VAR 0 7
70165: PUSH
70166: LD_VAR 0 2
70170: PUSH
70171: LD_VAR 0 3
70175: MINUS
70176: ST_TO_ADDR
// max_x := x + r ;
70177: LD_ADDR_VAR 0 9
70181: PUSH
70182: LD_VAR 0 1
70186: PUSH
70187: LD_VAR 0 3
70191: PLUS
70192: ST_TO_ADDR
// max_y := y + r ;
70193: LD_ADDR_VAR 0 10
70197: PUSH
70198: LD_VAR 0 2
70202: PUSH
70203: LD_VAR 0 3
70207: PLUS
70208: ST_TO_ADDR
// for _x = min_x to max_x do
70209: LD_ADDR_VAR 0 5
70213: PUSH
70214: DOUBLE
70215: LD_VAR 0 8
70219: DEC
70220: ST_TO_ADDR
70221: LD_VAR 0 9
70225: PUSH
70226: FOR_TO
70227: IFFALSE 70328
// for _y = min_y to max_y do
70229: LD_ADDR_VAR 0 6
70233: PUSH
70234: DOUBLE
70235: LD_VAR 0 7
70239: DEC
70240: ST_TO_ADDR
70241: LD_VAR 0 10
70245: PUSH
70246: FOR_TO
70247: IFFALSE 70324
// begin if not ValidHex ( _x , _y ) then
70249: LD_VAR 0 5
70253: PPUSH
70254: LD_VAR 0 6
70258: PPUSH
70259: CALL_OW 488
70263: NOT
70264: IFFALSE 70268
// continue ;
70266: GO 70246
// if GetResourceTypeXY ( _x , _y ) then
70268: LD_VAR 0 5
70272: PPUSH
70273: LD_VAR 0 6
70277: PPUSH
70278: CALL_OW 283
70282: IFFALSE 70322
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70284: LD_ADDR_VAR 0 4
70288: PUSH
70289: LD_VAR 0 4
70293: PPUSH
70294: LD_VAR 0 4
70298: PUSH
70299: LD_INT 1
70301: PLUS
70302: PPUSH
70303: LD_VAR 0 5
70307: PUSH
70308: LD_VAR 0 6
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PPUSH
70317: CALL_OW 1
70321: ST_TO_ADDR
// end ;
70322: GO 70246
70324: POP
70325: POP
70326: GO 70226
70328: POP
70329: POP
// end ;
70330: LD_VAR 0 4
70334: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70335: LD_INT 0
70337: PPUSH
70338: PPUSH
70339: PPUSH
70340: PPUSH
70341: PPUSH
70342: PPUSH
70343: PPUSH
70344: PPUSH
// if not units then
70345: LD_VAR 0 1
70349: NOT
70350: IFFALSE 70354
// exit ;
70352: GO 70878
// result := UnitFilter ( units , [ f_ok ] ) ;
70354: LD_ADDR_VAR 0 3
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: LD_INT 50
70366: PUSH
70367: EMPTY
70368: LIST
70369: PPUSH
70370: CALL_OW 72
70374: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70375: LD_ADDR_VAR 0 8
70379: PUSH
70380: LD_VAR 0 1
70384: PUSH
70385: LD_INT 1
70387: ARRAY
70388: PPUSH
70389: CALL_OW 255
70393: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70394: LD_ADDR_VAR 0 10
70398: PUSH
70399: LD_INT 29
70401: PUSH
70402: LD_INT 91
70404: PUSH
70405: LD_INT 49
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: ST_TO_ADDR
// if not result then
70413: LD_VAR 0 3
70417: NOT
70418: IFFALSE 70422
// exit ;
70420: GO 70878
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70422: LD_ADDR_VAR 0 5
70426: PUSH
70427: LD_INT 81
70429: PUSH
70430: LD_VAR 0 8
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PPUSH
70439: CALL_OW 69
70443: ST_TO_ADDR
// for i in result do
70444: LD_ADDR_VAR 0 4
70448: PUSH
70449: LD_VAR 0 3
70453: PUSH
70454: FOR_IN
70455: IFFALSE 70876
// begin tag := GetTag ( i ) + 1 ;
70457: LD_ADDR_VAR 0 9
70461: PUSH
70462: LD_VAR 0 4
70466: PPUSH
70467: CALL_OW 110
70471: PUSH
70472: LD_INT 1
70474: PLUS
70475: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70476: LD_ADDR_VAR 0 7
70480: PUSH
70481: LD_VAR 0 4
70485: PPUSH
70486: CALL_OW 250
70490: PPUSH
70491: LD_VAR 0 4
70495: PPUSH
70496: CALL_OW 251
70500: PPUSH
70501: LD_INT 6
70503: PPUSH
70504: CALL 70077 0 3
70508: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70509: LD_VAR 0 4
70513: PPUSH
70514: CALL_OW 247
70518: PUSH
70519: LD_INT 2
70521: EQUAL
70522: PUSH
70523: LD_VAR 0 7
70527: AND
70528: PUSH
70529: LD_VAR 0 4
70533: PPUSH
70534: CALL_OW 264
70538: PUSH
70539: LD_VAR 0 10
70543: IN
70544: NOT
70545: AND
70546: IFFALSE 70585
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70548: LD_VAR 0 4
70552: PPUSH
70553: LD_VAR 0 7
70557: PUSH
70558: LD_INT 1
70560: ARRAY
70561: PUSH
70562: LD_INT 1
70564: ARRAY
70565: PPUSH
70566: LD_VAR 0 7
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PUSH
70575: LD_INT 2
70577: ARRAY
70578: PPUSH
70579: CALL_OW 116
70583: GO 70874
// if path > tag then
70585: LD_VAR 0 2
70589: PUSH
70590: LD_VAR 0 9
70594: GREATER
70595: IFFALSE 70803
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70597: LD_ADDR_VAR 0 6
70601: PUSH
70602: LD_VAR 0 5
70606: PPUSH
70607: LD_INT 91
70609: PUSH
70610: LD_VAR 0 4
70614: PUSH
70615: LD_INT 8
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: PPUSH
70623: CALL_OW 72
70627: ST_TO_ADDR
// if nearEnemy then
70628: LD_VAR 0 6
70632: IFFALSE 70701
// begin if GetWeapon ( i ) = ru_time_lapser then
70634: LD_VAR 0 4
70638: PPUSH
70639: CALL_OW 264
70643: PUSH
70644: LD_INT 49
70646: EQUAL
70647: IFFALSE 70675
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70649: LD_VAR 0 4
70653: PPUSH
70654: LD_VAR 0 6
70658: PPUSH
70659: LD_VAR 0 4
70663: PPUSH
70664: CALL_OW 74
70668: PPUSH
70669: CALL_OW 112
70673: GO 70699
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70675: LD_VAR 0 4
70679: PPUSH
70680: LD_VAR 0 6
70684: PPUSH
70685: LD_VAR 0 4
70689: PPUSH
70690: CALL_OW 74
70694: PPUSH
70695: CALL 71803 0 2
// end else
70699: GO 70801
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70701: LD_VAR 0 4
70705: PPUSH
70706: LD_VAR 0 2
70710: PUSH
70711: LD_VAR 0 9
70715: ARRAY
70716: PUSH
70717: LD_INT 1
70719: ARRAY
70720: PPUSH
70721: LD_VAR 0 2
70725: PUSH
70726: LD_VAR 0 9
70730: ARRAY
70731: PUSH
70732: LD_INT 2
70734: ARRAY
70735: PPUSH
70736: CALL_OW 297
70740: PUSH
70741: LD_INT 6
70743: GREATER
70744: IFFALSE 70787
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70746: LD_VAR 0 4
70750: PPUSH
70751: LD_VAR 0 2
70755: PUSH
70756: LD_VAR 0 9
70760: ARRAY
70761: PUSH
70762: LD_INT 1
70764: ARRAY
70765: PPUSH
70766: LD_VAR 0 2
70770: PUSH
70771: LD_VAR 0 9
70775: ARRAY
70776: PUSH
70777: LD_INT 2
70779: ARRAY
70780: PPUSH
70781: CALL_OW 114
70785: GO 70801
// SetTag ( i , tag ) ;
70787: LD_VAR 0 4
70791: PPUSH
70792: LD_VAR 0 9
70796: PPUSH
70797: CALL_OW 109
// end else
70801: GO 70874
// if enemy then
70803: LD_VAR 0 5
70807: IFFALSE 70874
// begin if GetWeapon ( i ) = ru_time_lapser then
70809: LD_VAR 0 4
70813: PPUSH
70814: CALL_OW 264
70818: PUSH
70819: LD_INT 49
70821: EQUAL
70822: IFFALSE 70850
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70824: LD_VAR 0 4
70828: PPUSH
70829: LD_VAR 0 5
70833: PPUSH
70834: LD_VAR 0 4
70838: PPUSH
70839: CALL_OW 74
70843: PPUSH
70844: CALL_OW 112
70848: GO 70874
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70850: LD_VAR 0 4
70854: PPUSH
70855: LD_VAR 0 5
70859: PPUSH
70860: LD_VAR 0 4
70864: PPUSH
70865: CALL_OW 74
70869: PPUSH
70870: CALL 71803 0 2
// end ; end ;
70874: GO 70454
70876: POP
70877: POP
// end ;
70878: LD_VAR 0 3
70882: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70883: LD_INT 0
70885: PPUSH
70886: PPUSH
70887: PPUSH
// if not unit or IsInUnit ( unit ) then
70888: LD_VAR 0 1
70892: NOT
70893: PUSH
70894: LD_VAR 0 1
70898: PPUSH
70899: CALL_OW 310
70903: OR
70904: IFFALSE 70908
// exit ;
70906: GO 70999
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70908: LD_ADDR_VAR 0 4
70912: PUSH
70913: LD_VAR 0 1
70917: PPUSH
70918: CALL_OW 250
70922: PPUSH
70923: LD_VAR 0 2
70927: PPUSH
70928: LD_INT 1
70930: PPUSH
70931: CALL_OW 272
70935: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70936: LD_ADDR_VAR 0 5
70940: PUSH
70941: LD_VAR 0 1
70945: PPUSH
70946: CALL_OW 251
70950: PPUSH
70951: LD_VAR 0 2
70955: PPUSH
70956: LD_INT 1
70958: PPUSH
70959: CALL_OW 273
70963: ST_TO_ADDR
// if ValidHex ( x , y ) then
70964: LD_VAR 0 4
70968: PPUSH
70969: LD_VAR 0 5
70973: PPUSH
70974: CALL_OW 488
70978: IFFALSE 70999
// ComTurnXY ( unit , x , y ) ;
70980: LD_VAR 0 1
70984: PPUSH
70985: LD_VAR 0 4
70989: PPUSH
70990: LD_VAR 0 5
70994: PPUSH
70995: CALL_OW 118
// end ;
70999: LD_VAR 0 3
71003: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71004: LD_INT 0
71006: PPUSH
71007: PPUSH
// result := false ;
71008: LD_ADDR_VAR 0 3
71012: PUSH
71013: LD_INT 0
71015: ST_TO_ADDR
// if not units then
71016: LD_VAR 0 2
71020: NOT
71021: IFFALSE 71025
// exit ;
71023: GO 71070
// for i in units do
71025: LD_ADDR_VAR 0 4
71029: PUSH
71030: LD_VAR 0 2
71034: PUSH
71035: FOR_IN
71036: IFFALSE 71068
// if See ( side , i ) then
71038: LD_VAR 0 1
71042: PPUSH
71043: LD_VAR 0 4
71047: PPUSH
71048: CALL_OW 292
71052: IFFALSE 71066
// begin result := true ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_INT 1
71061: ST_TO_ADDR
// exit ;
71062: POP
71063: POP
71064: GO 71070
// end ;
71066: GO 71035
71068: POP
71069: POP
// end ;
71070: LD_VAR 0 3
71074: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71075: LD_INT 0
71077: PPUSH
71078: PPUSH
71079: PPUSH
71080: PPUSH
// if not unit or not points then
71081: LD_VAR 0 1
71085: NOT
71086: PUSH
71087: LD_VAR 0 2
71091: NOT
71092: OR
71093: IFFALSE 71097
// exit ;
71095: GO 71187
// dist := 99999 ;
71097: LD_ADDR_VAR 0 5
71101: PUSH
71102: LD_INT 99999
71104: ST_TO_ADDR
// for i in points do
71105: LD_ADDR_VAR 0 4
71109: PUSH
71110: LD_VAR 0 2
71114: PUSH
71115: FOR_IN
71116: IFFALSE 71185
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71118: LD_ADDR_VAR 0 6
71122: PUSH
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_VAR 0 4
71132: PUSH
71133: LD_INT 1
71135: ARRAY
71136: PPUSH
71137: LD_VAR 0 4
71141: PUSH
71142: LD_INT 2
71144: ARRAY
71145: PPUSH
71146: CALL_OW 297
71150: ST_TO_ADDR
// if tmpDist < dist then
71151: LD_VAR 0 6
71155: PUSH
71156: LD_VAR 0 5
71160: LESS
71161: IFFALSE 71183
// begin result := i ;
71163: LD_ADDR_VAR 0 3
71167: PUSH
71168: LD_VAR 0 4
71172: ST_TO_ADDR
// dist := tmpDist ;
71173: LD_ADDR_VAR 0 5
71177: PUSH
71178: LD_VAR 0 6
71182: ST_TO_ADDR
// end ; end ;
71183: GO 71115
71185: POP
71186: POP
// end ;
71187: LD_VAR 0 3
71191: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71192: LD_INT 0
71194: PPUSH
// uc_side := side ;
71195: LD_ADDR_OWVAR 20
71199: PUSH
71200: LD_VAR 0 1
71204: ST_TO_ADDR
// uc_nation := 3 ;
71205: LD_ADDR_OWVAR 21
71209: PUSH
71210: LD_INT 3
71212: ST_TO_ADDR
// vc_chassis := 25 ;
71213: LD_ADDR_OWVAR 37
71217: PUSH
71218: LD_INT 25
71220: ST_TO_ADDR
// vc_engine := engine_siberite ;
71221: LD_ADDR_OWVAR 39
71225: PUSH
71226: LD_INT 3
71228: ST_TO_ADDR
// vc_control := control_computer ;
71229: LD_ADDR_OWVAR 38
71233: PUSH
71234: LD_INT 3
71236: ST_TO_ADDR
// vc_weapon := 59 ;
71237: LD_ADDR_OWVAR 40
71241: PUSH
71242: LD_INT 59
71244: ST_TO_ADDR
// result := CreateVehicle ;
71245: LD_ADDR_VAR 0 5
71249: PUSH
71250: CALL_OW 45
71254: ST_TO_ADDR
// SetDir ( result , d ) ;
71255: LD_VAR 0 5
71259: PPUSH
71260: LD_VAR 0 4
71264: PPUSH
71265: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71269: LD_VAR 0 5
71273: PPUSH
71274: LD_VAR 0 2
71278: PPUSH
71279: LD_VAR 0 3
71283: PPUSH
71284: LD_INT 0
71286: PPUSH
71287: CALL_OW 48
// end ;
71291: LD_VAR 0 5
71295: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71296: LD_INT 0
71298: PPUSH
71299: PPUSH
71300: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71301: LD_ADDR_VAR 0 2
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71324: LD_VAR 0 1
71328: NOT
71329: PUSH
71330: LD_VAR 0 1
71334: PPUSH
71335: CALL_OW 264
71339: PUSH
71340: LD_INT 12
71342: PUSH
71343: LD_INT 51
71345: PUSH
71346: LD_INT 32
71348: PUSH
71349: LD_INT 89
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: IN
71358: NOT
71359: OR
71360: IFFALSE 71364
// exit ;
71362: GO 71462
// for i := 1 to 3 do
71364: LD_ADDR_VAR 0 3
71368: PUSH
71369: DOUBLE
71370: LD_INT 1
71372: DEC
71373: ST_TO_ADDR
71374: LD_INT 3
71376: PUSH
71377: FOR_TO
71378: IFFALSE 71460
// begin tmp := GetCargo ( cargo , i ) ;
71380: LD_ADDR_VAR 0 4
71384: PUSH
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_VAR 0 3
71394: PPUSH
71395: CALL_OW 289
71399: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71400: LD_ADDR_VAR 0 2
71404: PUSH
71405: LD_VAR 0 2
71409: PPUSH
71410: LD_VAR 0 3
71414: PPUSH
71415: LD_VAR 0 4
71419: PPUSH
71420: CALL_OW 1
71424: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71425: LD_ADDR_VAR 0 2
71429: PUSH
71430: LD_VAR 0 2
71434: PPUSH
71435: LD_INT 4
71437: PPUSH
71438: LD_VAR 0 2
71442: PUSH
71443: LD_INT 4
71445: ARRAY
71446: PUSH
71447: LD_VAR 0 4
71451: PLUS
71452: PPUSH
71453: CALL_OW 1
71457: ST_TO_ADDR
// end ;
71458: GO 71377
71460: POP
71461: POP
// end ;
71462: LD_VAR 0 2
71466: RET
// export function Length ( array ) ; begin
71467: LD_INT 0
71469: PPUSH
// result := array + 0 ;
71470: LD_ADDR_VAR 0 2
71474: PUSH
71475: LD_VAR 0 1
71479: PUSH
71480: LD_INT 0
71482: PLUS
71483: ST_TO_ADDR
// end ;
71484: LD_VAR 0 2
71488: RET
// export function PrepareArray ( array ) ; begin
71489: LD_INT 0
71491: PPUSH
// result := array diff 0 ;
71492: LD_ADDR_VAR 0 2
71496: PUSH
71497: LD_VAR 0 1
71501: PUSH
71502: LD_INT 0
71504: DIFF
71505: ST_TO_ADDR
// if not result [ 1 ] then
71506: LD_VAR 0 2
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: NOT
71515: IFFALSE 71535
// result := Delete ( result , 1 ) ;
71517: LD_ADDR_VAR 0 2
71521: PUSH
71522: LD_VAR 0 2
71526: PPUSH
71527: LD_INT 1
71529: PPUSH
71530: CALL_OW 3
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 2
71539: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
71544: PPUSH
71545: PPUSH
// sibRocketRange := 25 ;
71546: LD_ADDR_VAR 0 6
71550: PUSH
71551: LD_INT 25
71553: ST_TO_ADDR
// result := false ;
71554: LD_ADDR_VAR 0 4
71558: PUSH
71559: LD_INT 0
71561: ST_TO_ADDR
// for i := 0 to 5 do
71562: LD_ADDR_VAR 0 5
71566: PUSH
71567: DOUBLE
71568: LD_INT 0
71570: DEC
71571: ST_TO_ADDR
71572: LD_INT 5
71574: PUSH
71575: FOR_TO
71576: IFFALSE 71643
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71578: LD_VAR 0 1
71582: PPUSH
71583: LD_VAR 0 5
71587: PPUSH
71588: LD_VAR 0 6
71592: PPUSH
71593: CALL_OW 272
71597: PPUSH
71598: LD_VAR 0 2
71602: PPUSH
71603: LD_VAR 0 5
71607: PPUSH
71608: LD_VAR 0 6
71612: PPUSH
71613: CALL_OW 273
71617: PPUSH
71618: LD_VAR 0 3
71622: PPUSH
71623: CALL_OW 309
71627: IFFALSE 71641
// begin result := true ;
71629: LD_ADDR_VAR 0 4
71633: PUSH
71634: LD_INT 1
71636: ST_TO_ADDR
// exit ;
71637: POP
71638: POP
71639: GO 71645
// end ;
71641: GO 71575
71643: POP
71644: POP
// end ;
71645: LD_VAR 0 4
71649: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71650: LD_INT 0
71652: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71653: LD_VAR 0 1
71657: PPUSH
71658: LD_VAR 0 2
71662: PPUSH
71663: LD_INT 0
71665: PPUSH
71666: LD_INT 0
71668: PPUSH
71669: LD_INT 1
71671: PPUSH
71672: LD_INT 0
71674: PPUSH
71675: CALL_OW 587
// end ;
71679: LD_VAR 0 3
71683: RET
// export function CenterOnNow ( unit ) ; begin
71684: LD_INT 0
71686: PPUSH
// result := IsInUnit ( unit ) ;
71687: LD_ADDR_VAR 0 2
71691: PUSH
71692: LD_VAR 0 1
71696: PPUSH
71697: CALL_OW 310
71701: ST_TO_ADDR
// if not result then
71702: LD_VAR 0 2
71706: NOT
71707: IFFALSE 71719
// result := unit ;
71709: LD_ADDR_VAR 0 2
71713: PUSH
71714: LD_VAR 0 1
71718: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 87
// end ;
71728: LD_VAR 0 2
71732: RET
// export function ComMoveHex ( unit , hex ) ; begin
71733: LD_INT 0
71735: PPUSH
// if not hex then
71736: LD_VAR 0 2
71740: NOT
71741: IFFALSE 71745
// exit ;
71743: GO 71798
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71745: LD_VAR 0 2
71749: PUSH
71750: LD_INT 1
71752: ARRAY
71753: PPUSH
71754: LD_VAR 0 2
71758: PUSH
71759: LD_INT 2
71761: ARRAY
71762: PPUSH
71763: CALL_OW 428
71767: IFFALSE 71771
// exit ;
71769: GO 71798
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71771: LD_VAR 0 1
71775: PPUSH
71776: LD_VAR 0 2
71780: PUSH
71781: LD_INT 1
71783: ARRAY
71784: PPUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_INT 2
71792: ARRAY
71793: PPUSH
71794: CALL_OW 111
// end ;
71798: LD_VAR 0 3
71802: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71803: LD_INT 0
71805: PPUSH
71806: PPUSH
71807: PPUSH
// if not unit or not enemy then
71808: LD_VAR 0 1
71812: NOT
71813: PUSH
71814: LD_VAR 0 2
71818: NOT
71819: OR
71820: IFFALSE 71824
// exit ;
71822: GO 71948
// x := GetX ( enemy ) ;
71824: LD_ADDR_VAR 0 4
71828: PUSH
71829: LD_VAR 0 2
71833: PPUSH
71834: CALL_OW 250
71838: ST_TO_ADDR
// y := GetY ( enemy ) ;
71839: LD_ADDR_VAR 0 5
71843: PUSH
71844: LD_VAR 0 2
71848: PPUSH
71849: CALL_OW 251
71853: ST_TO_ADDR
// if ValidHex ( x , y ) then
71854: LD_VAR 0 4
71858: PPUSH
71859: LD_VAR 0 5
71863: PPUSH
71864: CALL_OW 488
71868: IFFALSE 71948
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71870: LD_VAR 0 2
71874: PPUSH
71875: CALL_OW 247
71879: PUSH
71880: LD_INT 3
71882: PUSH
71883: LD_INT 2
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: IN
71890: PUSH
71891: LD_VAR 0 1
71895: PPUSH
71896: CALL_OW 255
71900: PPUSH
71901: LD_VAR 0 2
71905: PPUSH
71906: CALL_OW 292
71910: AND
71911: IFFALSE 71929
// ComAttackUnit ( unit , enemy ) else
71913: LD_VAR 0 1
71917: PPUSH
71918: LD_VAR 0 2
71922: PPUSH
71923: CALL_OW 115
71927: GO 71948
// ComAgressiveMove ( unit , x , y ) ;
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_VAR 0 4
71938: PPUSH
71939: LD_VAR 0 5
71943: PPUSH
71944: CALL_OW 114
// end ; end_of_file
71948: LD_VAR 0 3
71952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71953: LD_VAR 0 1
71957: PUSH
71958: LD_INT 200
71960: DOUBLE
71961: GREATEREQUAL
71962: IFFALSE 71970
71964: LD_INT 299
71966: DOUBLE
71967: LESSEQUAL
71968: IFTRUE 71972
71970: GO 72004
71972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71973: LD_VAR 0 1
71977: PPUSH
71978: LD_VAR 0 2
71982: PPUSH
71983: LD_VAR 0 3
71987: PPUSH
71988: LD_VAR 0 4
71992: PPUSH
71993: LD_VAR 0 5
71997: PPUSH
71998: CALL 9875 0 5
72002: GO 72081
72004: LD_INT 300
72006: DOUBLE
72007: GREATEREQUAL
72008: IFFALSE 72016
72010: LD_INT 399
72012: DOUBLE
72013: LESSEQUAL
72014: IFTRUE 72018
72016: GO 72080
72018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72019: LD_VAR 0 1
72023: PPUSH
72024: LD_VAR 0 2
72028: PPUSH
72029: LD_VAR 0 3
72033: PPUSH
72034: LD_VAR 0 4
72038: PPUSH
72039: LD_VAR 0 5
72043: PPUSH
72044: LD_VAR 0 6
72048: PPUSH
72049: LD_VAR 0 7
72053: PPUSH
72054: LD_VAR 0 8
72058: PPUSH
72059: LD_VAR 0 9
72063: PPUSH
72064: LD_VAR 0 10
72068: PPUSH
72069: LD_VAR 0 11
72073: PPUSH
72074: CALL 26730 0 11
72078: GO 72081
72080: POP
// end ;
72081: PPOPN 11
72083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72084: LD_VAR 0 1
72088: PPUSH
72089: LD_VAR 0 2
72093: PPUSH
72094: LD_VAR 0 3
72098: PPUSH
72099: LD_VAR 0 4
72103: PPUSH
72104: LD_VAR 0 5
72108: PPUSH
72109: CALL 9611 0 5
// end ; end_of_file
72113: PPOPN 5
72115: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72116: LD_VAR 0 1
72120: PPUSH
72121: LD_VAR 0 2
72125: PPUSH
72126: LD_VAR 0 3
72130: PPUSH
72131: LD_VAR 0 4
72135: PPUSH
72136: LD_VAR 0 5
72140: PPUSH
72141: LD_VAR 0 6
72145: PPUSH
72146: CALL 14382 0 6
// end ;
72150: PPOPN 6
72152: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72153: LD_INT 0
72155: PPUSH
// begin if not units then
72156: LD_VAR 0 1
72160: NOT
72161: IFFALSE 72165
// exit ;
72163: GO 72165
// end ;
72165: PPOPN 7
72167: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72168: CALL 14286 0 0
// end ;
72172: PPOPN 1
72174: END
