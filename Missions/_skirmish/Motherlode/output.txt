// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35297 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 42561 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 61278 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 61158 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; var i ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
// result := 0 ;
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// for i in array do
3254: LD_ADDR_VAR 0 3
3258: PUSH
3259: LD_VAR 0 1
3263: PUSH
3264: FOR_IN
3265: IFFALSE 3289
// if i then
3267: LD_VAR 0 3
3271: IFFALSE 3287
// result := result + 1 ;
3273: LD_ADDR_VAR 0 2
3277: PUSH
3278: LD_VAR 0 2
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: ST_TO_ADDR
3287: GO 3264
3289: POP
3290: POP
// end ;
3291: LD_VAR 0 2
3295: RET
// export function IsEmpty ( building ) ; begin
3296: LD_INT 0
3298: PPUSH
// if not building then
3299: LD_VAR 0 1
3303: NOT
3304: IFFALSE 3308
// exit ;
3306: GO 3351
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_VAR 0 1
3317: PUSH
3318: LD_INT 22
3320: PUSH
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 255
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 58
3337: PUSH
3338: EMPTY
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: IN
3350: ST_TO_ADDR
// end ;
3351: LD_VAR 0 2
3355: RET
// export function IsNotFull ( building ) ; var places ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
// if not building then
3360: LD_VAR 0 1
3364: NOT
3365: IFFALSE 3369
// exit ;
3367: GO 3540
// result := false ;
3369: LD_ADDR_VAR 0 2
3373: PUSH
3374: LD_INT 0
3376: ST_TO_ADDR
// places := 0 ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 0
3384: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 266
3394: PUSH
3395: LD_INT 0
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3457
3401: LD_INT 1
3403: DOUBLE
3404: EQUAL
3405: IFTRUE 3457
3407: LD_INT 6
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3457
3413: LD_INT 7
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3457
3419: LD_INT 8
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3457
3425: LD_INT 4
3427: DOUBLE
3428: EQUAL
3429: IFTRUE 3457
3431: LD_INT 5
3433: DOUBLE
3434: EQUAL
3435: IFTRUE 3457
3437: LD_INT 2
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3457
3443: LD_INT 3
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3457
3449: LD_INT 35
3451: DOUBLE
3452: EQUAL
3453: IFTRUE 3457
3455: GO 3468
3457: POP
// places := 6 ; b_bunker , b_breastwork :
3458: LD_ADDR_VAR 0 3
3462: PUSH
3463: LD_INT 6
3465: ST_TO_ADDR
3466: GO 3513
3468: LD_INT 32
3470: DOUBLE
3471: EQUAL
3472: IFTRUE 3482
3474: LD_INT 31
3476: DOUBLE
3477: EQUAL
3478: IFTRUE 3482
3480: GO 3493
3482: POP
// places := 1 ; b_control_tower :
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ST_TO_ADDR
3491: GO 3513
3493: LD_INT 36
3495: DOUBLE
3496: EQUAL
3497: IFTRUE 3501
3499: GO 3512
3501: POP
// places := 3 ; end ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
3510: GO 3513
3512: POP
// if places then
3513: LD_VAR 0 3
3517: IFFALSE 3540
// result := UnitsInside ( building ) < places ;
3519: LD_ADDR_VAR 0 2
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: CALL_OW 313
3533: PUSH
3534: LD_VAR 0 3
3538: LESS
3539: ST_TO_ADDR
// end ;
3540: LD_VAR 0 2
3544: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3545: LD_INT 0
3547: PPUSH
3548: PPUSH
3549: PPUSH
3550: PPUSH
// tmp := [ ] ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: EMPTY
3557: ST_TO_ADDR
// list := [ ] ;
3558: LD_ADDR_VAR 0 5
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i = 16 to 25 do
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: DOUBLE
3571: LD_INT 16
3573: DEC
3574: ST_TO_ADDR
3575: LD_INT 25
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3652
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_INT 22
3593: PUSH
3594: LD_VAR 0 1
3598: PPUSH
3599: CALL_OW 255
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 91
3610: PUSH
3611: LD_VAR 0 1
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_VAR 0 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: PPUSH
3644: CALL_OW 69
3648: ADD
3649: ST_TO_ADDR
3650: GO 3578
3652: POP
3653: POP
// for i = 1 to tmp do
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_VAR 0 3
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3758
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3672: LD_ADDR_VAR 0 5
3676: PUSH
3677: LD_VAR 0 5
3681: PUSH
3682: LD_VAR 0 3
3686: PUSH
3687: LD_VAR 0 4
3691: ARRAY
3692: PPUSH
3693: CALL_OW 266
3697: PUSH
3698: LD_VAR 0 3
3702: PUSH
3703: LD_VAR 0 4
3707: ARRAY
3708: PPUSH
3709: CALL_OW 250
3713: PUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_VAR 0 4
3723: ARRAY
3724: PPUSH
3725: CALL_OW 251
3729: PUSH
3730: LD_VAR 0 3
3734: PUSH
3735: LD_VAR 0 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 254
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: ADD
3755: ST_TO_ADDR
3756: GO 3669
3758: POP
3759: POP
// result := list ;
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: LD_VAR 0 5
3769: ST_TO_ADDR
// end ;
3770: LD_VAR 0 2
3774: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3775: LD_INT 0
3777: PPUSH
3778: PPUSH
3779: PPUSH
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
// if not factory then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 4386
// if control = control_apeman then
3793: LD_VAR 0 4
3797: PUSH
3798: LD_INT 5
3800: EQUAL
3801: IFFALSE 3910
// begin tmp := UnitsInside ( factory ) ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 1
3812: PPUSH
3813: CALL_OW 313
3817: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3818: LD_VAR 0 8
3822: PPUSH
3823: LD_INT 25
3825: PUSH
3826: LD_INT 12
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 72
3837: NOT
3838: IFFALSE 3848
// control := control_manual ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3848: LD_ADDR_VAR 0 8
3852: PUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL 3545 0 1
3862: ST_TO_ADDR
// if tmp then
3863: LD_VAR 0 8
3867: IFFALSE 3910
// begin for i in tmp do
3869: LD_ADDR_VAR 0 7
3873: PUSH
3874: LD_VAR 0 8
3878: PUSH
3879: FOR_IN
3880: IFFALSE 3908
// if i [ 1 ] = b_ext_radio then
3882: LD_VAR 0 7
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PUSH
3891: LD_INT 22
3893: EQUAL
3894: IFFALSE 3906
// begin control := control_remote ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_INT 2
3903: ST_TO_ADDR
// break ;
3904: GO 3908
// end ;
3906: GO 3879
3908: POP
3909: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_VAR 0 2
3919: PPUSH
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_VAR 0 5
3934: PPUSH
3935: CALL_OW 448
3939: IFFALSE 3974
// begin result := [ chassis , engine , control , weapon ] ;
3941: LD_ADDR_VAR 0 6
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_VAR 0 3
3955: PUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_VAR 0 5
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: ST_TO_ADDR
// exit ;
3972: GO 4386
// end ; _chassis := AvailableChassisList ( factory ) ;
3974: LD_ADDR_VAR 0 9
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 475
3988: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3989: LD_ADDR_VAR 0 11
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 476
4003: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4004: LD_ADDR_VAR 0 12
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 477
4018: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4019: LD_ADDR_VAR 0 10
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 478
4033: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4034: LD_VAR 0 9
4038: NOT
4039: PUSH
4040: LD_VAR 0 11
4044: NOT
4045: OR
4046: PUSH
4047: LD_VAR 0 12
4051: NOT
4052: OR
4053: PUSH
4054: LD_VAR 0 10
4058: NOT
4059: OR
4060: IFFALSE 4095
// begin result := [ chassis , engine , control , weapon ] ;
4062: LD_ADDR_VAR 0 6
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// exit ;
4093: GO 4386
// end ; if not chassis in _chassis then
4095: LD_VAR 0 2
4099: PUSH
4100: LD_VAR 0 9
4104: IN
4105: NOT
4106: IFFALSE 4132
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_VAR 0 9
4117: PUSH
4118: LD_INT 1
4120: PPUSH
4121: LD_VAR 0 9
4125: PPUSH
4126: CALL_OW 12
4130: ARRAY
4131: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4132: LD_VAR 0 2
4136: PPUSH
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL 4391 0 2
4146: NOT
4147: IFFALSE 4206
// repeat engine := _engine [ 1 ] ;
4149: LD_ADDR_VAR 0 3
4153: PUSH
4154: LD_VAR 0 11
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4163: LD_ADDR_VAR 0 11
4167: PUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 3
4180: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4181: LD_VAR 0 2
4185: PPUSH
4186: LD_VAR 0 3
4190: PPUSH
4191: CALL 4391 0 2
4195: PUSH
4196: LD_VAR 0 11
4200: PUSH
4201: EMPTY
4202: EQUAL
4203: OR
4204: IFFALSE 4149
// if not control in _control then
4206: LD_VAR 0 4
4210: PUSH
4211: LD_VAR 0 12
4215: IN
4216: NOT
4217: IFFALSE 4243
// control := _control [ rand ( 1 , _control ) ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 12
4228: PUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_VAR 0 12
4236: PPUSH
4237: CALL_OW 12
4241: ARRAY
4242: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4243: LD_VAR 0 2
4247: PPUSH
4248: LD_VAR 0 5
4252: PPUSH
4253: CALL 4611 0 2
4257: NOT
4258: IFFALSE 4317
// repeat weapon := _weapon [ 1 ] ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_VAR 0 10
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4274: LD_ADDR_VAR 0 10
4278: PUSH
4279: LD_VAR 0 10
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 3
4291: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: CALL 4611 0 2
4306: PUSH
4307: LD_VAR 0 10
4311: PUSH
4312: EMPTY
4313: EQUAL
4314: OR
4315: IFFALSE 4260
// result := [ ] ;
4317: LD_ADDR_VAR 0 6
4321: PUSH
4322: EMPTY
4323: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4324: LD_VAR 0 1
4328: PPUSH
4329: LD_VAR 0 2
4333: PPUSH
4334: LD_VAR 0 3
4338: PPUSH
4339: LD_VAR 0 4
4343: PPUSH
4344: LD_VAR 0 5
4348: PPUSH
4349: CALL_OW 448
4353: IFFALSE 4386
// result := [ chassis , engine , control , weapon ] ;
4355: LD_ADDR_VAR 0 6
4359: PUSH
4360: LD_VAR 0 2
4364: PUSH
4365: LD_VAR 0 3
4369: PUSH
4370: LD_VAR 0 4
4374: PUSH
4375: LD_VAR 0 5
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: ST_TO_ADDR
// end ;
4386: LD_VAR 0 6
4390: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4391: LD_INT 0
4393: PPUSH
// if not chassis or not engine then
4394: LD_VAR 0 1
4398: NOT
4399: PUSH
4400: LD_VAR 0 2
4404: NOT
4405: OR
4406: IFFALSE 4410
// exit ;
4408: GO 4606
// case engine of engine_solar :
4410: LD_VAR 0 2
4414: PUSH
4415: LD_INT 2
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4461
4423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 11
4431: PUSH
4432: LD_INT 12
4434: PUSH
4435: LD_INT 13
4437: PUSH
4438: LD_INT 14
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: ST_TO_ADDR
4459: GO 4590
4461: LD_INT 1
4463: DOUBLE
4464: EQUAL
4465: IFTRUE 4469
4467: GO 4531
4469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: LD_INT 11
4477: PUSH
4478: LD_INT 12
4480: PUSH
4481: LD_INT 13
4483: PUSH
4484: LD_INT 14
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 23
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 24
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
4529: GO 4590
4531: LD_INT 3
4533: DOUBLE
4534: EQUAL
4535: IFTRUE 4539
4537: GO 4589
4539: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: LD_INT 13
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 4
4559: PUSH
4560: LD_INT 5
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 23
4571: PUSH
4572: LD_INT 24
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: ST_TO_ADDR
4587: GO 4590
4589: POP
// result := ( chassis in result ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_VAR 0 1
4599: PUSH
4600: LD_VAR 0 3
4604: IN
4605: ST_TO_ADDR
// end ;
4606: LD_VAR 0 3
4610: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4611: LD_INT 0
4613: PPUSH
// if not chassis or not weapon then
4614: LD_VAR 0 1
4618: NOT
4619: PUSH
4620: LD_VAR 0 2
4624: NOT
4625: OR
4626: IFFALSE 4630
// exit ;
4628: GO 5690
// case weapon of us_machine_gun :
4630: LD_VAR 0 2
4634: PUSH
4635: LD_INT 2
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4673
4643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: LD_INT 4
4660: PUSH
4661: LD_INT 5
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: ST_TO_ADDR
4671: GO 5674
4673: LD_INT 3
4675: DOUBLE
4676: EQUAL
4677: IFTRUE 4681
4679: GO 4711
4681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 5674
4711: LD_INT 11
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4749
4719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4720: LD_ADDR_VAR 0 3
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 5674
4749: LD_INT 4
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5674
4783: LD_INT 5
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 5674
4817: LD_INT 9
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4851
4825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 2
4833: PUSH
4834: LD_INT 3
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: LD_INT 5
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5674
4851: LD_INT 7
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 2
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5674
4885: LD_INT 12
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 5
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5674
4919: LD_INT 13
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5674
4953: LD_INT 14
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5674
4979: LD_INT 6
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 4
4995: PUSH
4996: LD_INT 5
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 5674
5005: LD_INT 10
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5674
5031: LD_INT 22
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5039
5037: GO 5065
5039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5040: LD_ADDR_VAR 0 3
5044: PUSH
5045: LD_INT 11
5047: PUSH
5048: LD_INT 12
5050: PUSH
5051: LD_INT 13
5053: PUSH
5054: LD_INT 14
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
5063: GO 5674
5065: LD_INT 23
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5099
5073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_INT 11
5081: PUSH
5082: LD_INT 12
5084: PUSH
5085: LD_INT 13
5087: PUSH
5088: LD_INT 14
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 5674
5099: LD_INT 24
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5133
5107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5108: LD_ADDR_VAR 0 3
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: LD_INT 12
5118: PUSH
5119: LD_INT 13
5121: PUSH
5122: LD_INT 14
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: ST_TO_ADDR
5131: GO 5674
5133: LD_INT 30
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5141
5139: GO 5167
5141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 12
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: ST_TO_ADDR
5165: GO 5674
5167: LD_INT 25
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5175
5173: GO 5193
5175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_INT 13
5183: PUSH
5184: LD_INT 14
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 5674
5193: LD_INT 27
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5219
5201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 13
5209: PUSH
5210: LD_INT 14
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: ST_TO_ADDR
5217: GO 5674
5219: LD_INT 92
5221: DOUBLE
5222: EQUAL
5223: IFTRUE 5227
5225: GO 5253
5227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5228: LD_ADDR_VAR 0 3
5232: PUSH
5233: LD_INT 11
5235: PUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 13
5241: PUSH
5242: LD_INT 14
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
5251: GO 5674
5253: LD_INT 28
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5279
5261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_INT 13
5269: PUSH
5270: LD_INT 14
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: ST_TO_ADDR
5277: GO 5674
5279: LD_INT 29
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5305
5287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 13
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: ST_TO_ADDR
5303: GO 5674
5305: LD_INT 31
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5313
5311: GO 5331
5313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5314: LD_ADDR_VAR 0 3
5318: PUSH
5319: LD_INT 13
5321: PUSH
5322: LD_INT 14
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 5674
5331: LD_INT 26
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5357
5339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: LD_INT 13
5347: PUSH
5348: LD_INT 14
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
5355: GO 5674
5357: LD_INT 42
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5391
5365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 23
5379: PUSH
5380: LD_INT 24
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: ST_TO_ADDR
5389: GO 5674
5391: LD_INT 43
5393: DOUBLE
5394: EQUAL
5395: IFTRUE 5399
5397: GO 5425
5399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_INT 21
5407: PUSH
5408: LD_INT 22
5410: PUSH
5411: LD_INT 23
5413: PUSH
5414: LD_INT 24
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: ST_TO_ADDR
5423: GO 5674
5425: LD_INT 44
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5459
5433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: LD_INT 21
5441: PUSH
5442: LD_INT 22
5444: PUSH
5445: LD_INT 23
5447: PUSH
5448: LD_INT 24
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: ST_TO_ADDR
5457: GO 5674
5459: LD_INT 45
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5493
5467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_INT 21
5475: PUSH
5476: LD_INT 22
5478: PUSH
5479: LD_INT 23
5481: PUSH
5482: LD_INT 24
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: ST_TO_ADDR
5491: GO 5674
5493: LD_INT 49
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5527
5501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: LD_INT 21
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 23
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 5674
5527: LD_INT 51
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5561
5535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 22
5546: PUSH
5547: LD_INT 23
5549: PUSH
5550: LD_INT 24
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 5674
5561: LD_INT 52
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 21
5577: PUSH
5578: LD_INT 22
5580: PUSH
5581: LD_INT 23
5583: PUSH
5584: LD_INT 24
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 5674
5595: LD_INT 53
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 23
5611: PUSH
5612: LD_INT 24
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 5674
5621: LD_INT 46
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 23
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 5674
5647: LD_INT 47
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 23
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 5674
5673: POP
// result := ( chassis in result ) ;
5674: LD_ADDR_VAR 0 3
5678: PUSH
5679: LD_VAR 0 1
5683: PUSH
5684: LD_VAR 0 3
5688: IN
5689: ST_TO_ADDR
// end ;
5690: LD_VAR 0 3
5694: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5695: LD_INT 0
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
// result := array ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5714: LD_VAR 0 1
5718: NOT
5719: PUSH
5720: LD_VAR 0 2
5724: NOT
5725: OR
5726: PUSH
5727: LD_VAR 0 3
5731: NOT
5732: OR
5733: PUSH
5734: LD_VAR 0 2
5738: PUSH
5739: LD_VAR 0 1
5743: GREATER
5744: OR
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 1
5755: GREATER
5756: OR
5757: IFFALSE 5761
// exit ;
5759: GO 6057
// if direction then
5761: LD_VAR 0 4
5765: IFFALSE 5829
// begin d := 1 ;
5767: LD_ADDR_VAR 0 9
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// if i_from > i_to then
5775: LD_VAR 0 2
5779: PUSH
5780: LD_VAR 0 3
5784: GREATER
5785: IFFALSE 5811
// length := ( array - i_from ) + i_to else
5787: LD_ADDR_VAR 0 11
5791: PUSH
5792: LD_VAR 0 1
5796: PUSH
5797: LD_VAR 0 2
5801: MINUS
5802: PUSH
5803: LD_VAR 0 3
5807: PLUS
5808: ST_TO_ADDR
5809: GO 5827
// length := i_to - i_from ;
5811: LD_ADDR_VAR 0 11
5815: PUSH
5816: LD_VAR 0 3
5820: PUSH
5821: LD_VAR 0 2
5825: MINUS
5826: ST_TO_ADDR
// end else
5827: GO 5890
// begin d := - 1 ;
5829: LD_ADDR_VAR 0 9
5833: PUSH
5834: LD_INT 1
5836: NEG
5837: ST_TO_ADDR
// if i_from > i_to then
5838: LD_VAR 0 2
5842: PUSH
5843: LD_VAR 0 3
5847: GREATER
5848: IFFALSE 5868
// length := i_from - i_to else
5850: LD_ADDR_VAR 0 11
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 3
5864: MINUS
5865: ST_TO_ADDR
5866: GO 5890
// length := ( array - i_to ) + i_from ;
5868: LD_ADDR_VAR 0 11
5872: PUSH
5873: LD_VAR 0 1
5877: PUSH
5878: LD_VAR 0 3
5882: MINUS
5883: PUSH
5884: LD_VAR 0 2
5888: PLUS
5889: ST_TO_ADDR
// end ; if not length then
5890: LD_VAR 0 11
5894: NOT
5895: IFFALSE 5899
// exit ;
5897: GO 6057
// tmp := array ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 1
5908: ST_TO_ADDR
// for i = 1 to length do
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: DOUBLE
5915: LD_INT 1
5917: DEC
5918: ST_TO_ADDR
5919: LD_VAR 0 11
5923: PUSH
5924: FOR_TO
5925: IFFALSE 6045
// begin for j = 1 to array do
5927: LD_ADDR_VAR 0 7
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_VAR 0 1
5941: PUSH
5942: FOR_TO
5943: IFFALSE 6031
// begin k := j + d ;
5945: LD_ADDR_VAR 0 8
5949: PUSH
5950: LD_VAR 0 7
5954: PUSH
5955: LD_VAR 0 9
5959: PLUS
5960: ST_TO_ADDR
// if k > array then
5961: LD_VAR 0 8
5965: PUSH
5966: LD_VAR 0 1
5970: GREATER
5971: IFFALSE 5981
// k := 1 ;
5973: LD_ADDR_VAR 0 8
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if not k then
5981: LD_VAR 0 8
5985: NOT
5986: IFFALSE 5998
// k := array ;
5988: LD_ADDR_VAR 0 8
5992: PUSH
5993: LD_VAR 0 1
5997: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5998: LD_ADDR_VAR 0 10
6002: PUSH
6003: LD_VAR 0 10
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: LD_VAR 0 1
6017: PUSH
6018: LD_VAR 0 7
6022: ARRAY
6023: PPUSH
6024: CALL_OW 1
6028: ST_TO_ADDR
// end ;
6029: GO 5942
6031: POP
6032: POP
// array := tmp ;
6033: LD_ADDR_VAR 0 1
6037: PUSH
6038: LD_VAR 0 10
6042: ST_TO_ADDR
// end ;
6043: GO 5924
6045: POP
6046: POP
// result := array ;
6047: LD_ADDR_VAR 0 5
6051: PUSH
6052: LD_VAR 0 1
6056: ST_TO_ADDR
// end ;
6057: LD_VAR 0 5
6061: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
// result := 0 ;
6066: LD_ADDR_VAR 0 3
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// if not array or not value in array then
6074: LD_VAR 0 1
6078: NOT
6079: PUSH
6080: LD_VAR 0 2
6084: PUSH
6085: LD_VAR 0 1
6089: IN
6090: NOT
6091: OR
6092: IFFALSE 6096
// exit ;
6094: GO 6150
// for i = 1 to array do
6096: LD_ADDR_VAR 0 4
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_VAR 0 1
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6148
// if value = array [ i ] then
6114: LD_VAR 0 2
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: LD_VAR 0 4
6128: ARRAY
6129: EQUAL
6130: IFFALSE 6146
// begin result := i ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_VAR 0 4
6141: ST_TO_ADDR
// exit ;
6142: POP
6143: POP
6144: GO 6150
// end ;
6146: GO 6111
6148: POP
6149: POP
// end ;
6150: LD_VAR 0 3
6154: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6155: LD_INT 0
6157: PPUSH
// vc_chassis := chassis ;
6158: LD_ADDR_OWVAR 37
6162: PUSH
6163: LD_VAR 0 1
6167: ST_TO_ADDR
// vc_engine := engine ;
6168: LD_ADDR_OWVAR 39
6172: PUSH
6173: LD_VAR 0 2
6177: ST_TO_ADDR
// vc_control := control ;
6178: LD_ADDR_OWVAR 38
6182: PUSH
6183: LD_VAR 0 3
6187: ST_TO_ADDR
// vc_weapon := weapon ;
6188: LD_ADDR_OWVAR 40
6192: PUSH
6193: LD_VAR 0 4
6197: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6198: LD_ADDR_OWVAR 41
6202: PUSH
6203: LD_VAR 0 5
6207: ST_TO_ADDR
// end ;
6208: LD_VAR 0 6
6212: RET
// export function WantPlant ( unit ) ; var task ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// result := false ;
6217: LD_ADDR_VAR 0 2
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6225: LD_ADDR_VAR 0 3
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 437
6239: ST_TO_ADDR
// if task then
6240: LD_VAR 0 3
6244: IFFALSE 6272
// if task [ 1 ] [ 1 ] = p then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PUSH
6259: LD_STRING p
6261: EQUAL
6262: IFFALSE 6272
// result := true ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: LD_INT 1
6271: ST_TO_ADDR
// end ;
6272: LD_VAR 0 2
6276: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// if pos < 1 then
6283: LD_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: LESS
6291: IFFALSE 6295
// exit ;
6293: GO 6598
// if pos = 1 then
6295: LD_VAR 0 2
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6336
// result := Replace ( arr , pos [ 1 ] , value ) else
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_VAR 0 1
6314: PPUSH
6315: LD_VAR 0 2
6319: PUSH
6320: LD_INT 1
6322: ARRAY
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 1
6333: ST_TO_ADDR
6334: GO 6598
// begin tmp := arr ;
6336: LD_ADDR_VAR 0 6
6340: PUSH
6341: LD_VAR 0 1
6345: ST_TO_ADDR
// s_arr := [ tmp ] ;
6346: LD_ADDR_VAR 0 7
6350: PUSH
6351: LD_VAR 0 6
6355: PUSH
6356: EMPTY
6357: LIST
6358: ST_TO_ADDR
// for i = 1 to pos - 1 do
6359: LD_ADDR_VAR 0 5
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_VAR 0 2
6373: PUSH
6374: LD_INT 1
6376: MINUS
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6424
// begin tmp := tmp [ pos [ i ] ] ;
6381: LD_ADDR_VAR 0 6
6385: PUSH
6386: LD_VAR 0 6
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: LD_VAR 0 5
6400: ARRAY
6401: ARRAY
6402: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6403: LD_ADDR_VAR 0 7
6407: PUSH
6408: LD_VAR 0 7
6412: PUSH
6413: LD_VAR 0 6
6417: PUSH
6418: EMPTY
6419: LIST
6420: ADD
6421: ST_TO_ADDR
// end ;
6422: GO 6378
6424: POP
6425: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6426: LD_ADDR_VAR 0 6
6430: PUSH
6431: LD_VAR 0 6
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_VAR 0 2
6445: ARRAY
6446: PPUSH
6447: LD_VAR 0 3
6451: PPUSH
6452: CALL_OW 1
6456: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6457: LD_ADDR_VAR 0 7
6461: PUSH
6462: LD_VAR 0 7
6466: PPUSH
6467: LD_VAR 0 7
6471: PPUSH
6472: LD_VAR 0 6
6476: PPUSH
6477: CALL_OW 1
6481: ST_TO_ADDR
// for i = s_arr downto 2 do
6482: LD_ADDR_VAR 0 5
6486: PUSH
6487: DOUBLE
6488: LD_VAR 0 7
6492: INC
6493: ST_TO_ADDR
6494: LD_INT 2
6496: PUSH
6497: FOR_DOWNTO
6498: IFFALSE 6582
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6500: LD_ADDR_VAR 0 6
6504: PUSH
6505: LD_VAR 0 7
6509: PUSH
6510: LD_VAR 0 5
6514: PUSH
6515: LD_INT 1
6517: MINUS
6518: ARRAY
6519: PPUSH
6520: LD_VAR 0 2
6524: PUSH
6525: LD_VAR 0 5
6529: PUSH
6530: LD_INT 1
6532: MINUS
6533: ARRAY
6534: PPUSH
6535: LD_VAR 0 7
6539: PUSH
6540: LD_VAR 0 5
6544: ARRAY
6545: PPUSH
6546: CALL_OW 1
6550: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6551: LD_ADDR_VAR 0 7
6555: PUSH
6556: LD_VAR 0 7
6560: PPUSH
6561: LD_VAR 0 5
6565: PUSH
6566: LD_INT 1
6568: MINUS
6569: PPUSH
6570: LD_VAR 0 6
6574: PPUSH
6575: CALL_OW 1
6579: ST_TO_ADDR
// end ;
6580: GO 6497
6582: POP
6583: POP
// result := s_arr [ 1 ] ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_VAR 0 7
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: ST_TO_ADDR
// end ; end ;
6598: LD_VAR 0 4
6602: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// if not list then
6607: LD_VAR 0 1
6611: NOT
6612: IFFALSE 6616
// exit ;
6614: GO 6707
// i := list [ pos1 ] ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_VAR 0 1
6625: PUSH
6626: LD_VAR 0 2
6630: ARRAY
6631: ST_TO_ADDR
// if not i then
6632: LD_VAR 0 5
6636: NOT
6637: IFFALSE 6641
// exit ;
6639: GO 6707
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6641: LD_ADDR_VAR 0 1
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_VAR 0 2
6655: PPUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_VAR 0 3
6665: ARRAY
6666: PPUSH
6667: CALL_OW 1
6671: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6672: LD_ADDR_VAR 0 1
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_VAR 0 5
6691: PPUSH
6692: CALL_OW 1
6696: ST_TO_ADDR
// result := list ;
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ST_TO_ADDR
// end ;
6707: LD_VAR 0 4
6711: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6712: LD_INT 0
6714: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 250
6729: PPUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 251
6739: PPUSH
6740: LD_VAR 0 2
6744: PPUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_VAR 0 4
6754: PPUSH
6755: CALL 6765 0 5
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 5
6764: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// if not list then
6771: LD_VAR 0 3
6775: NOT
6776: IFFALSE 6780
// exit ;
6778: GO 7168
// result := [ ] ;
6780: LD_ADDR_VAR 0 6
6784: PUSH
6785: EMPTY
6786: ST_TO_ADDR
// for i in list do
6787: LD_ADDR_VAR 0 7
6791: PUSH
6792: LD_VAR 0 3
6796: PUSH
6797: FOR_IN
6798: IFFALSE 7000
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6800: LD_ADDR_VAR 0 9
6804: PUSH
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: LD_VAR 0 2
6819: PPUSH
6820: CALL_OW 297
6824: ST_TO_ADDR
// if not result then
6825: LD_VAR 0 6
6829: NOT
6830: IFFALSE 6856
// result := [ [ i , tmp ] ] else
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: LD_VAR 0 7
6841: PUSH
6842: LD_VAR 0 9
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: ST_TO_ADDR
6854: GO 6998
// begin if result [ result ] [ 2 ] < tmp then
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 6
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PUSH
6871: LD_VAR 0 9
6875: LESS
6876: IFFALSE 6918
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_VAR 0 6
6887: PPUSH
6888: LD_VAR 0 6
6892: PUSH
6893: LD_INT 1
6895: PLUS
6896: PPUSH
6897: LD_VAR 0 7
6901: PUSH
6902: LD_VAR 0 9
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 2
6915: ST_TO_ADDR
6916: GO 6998
// for j = 1 to result do
6918: LD_ADDR_VAR 0 8
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_VAR 0 6
6932: PUSH
6933: FOR_TO
6934: IFFALSE 6996
// begin if tmp < result [ j ] [ 2 ] then
6936: LD_VAR 0 9
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: LD_VAR 0 8
6950: ARRAY
6951: PUSH
6952: LD_INT 2
6954: ARRAY
6955: LESS
6956: IFFALSE 6994
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 6
6967: PPUSH
6968: LD_VAR 0 8
6972: PPUSH
6973: LD_VAR 0 7
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 2
6991: ST_TO_ADDR
// break ;
6992: GO 6996
// end ; end ;
6994: GO 6933
6996: POP
6997: POP
// end ; end ;
6998: GO 6797
7000: POP
7001: POP
// if result and not asc then
7002: LD_VAR 0 6
7006: PUSH
7007: LD_VAR 0 4
7011: NOT
7012: AND
7013: IFFALSE 7088
// begin tmp := result ;
7015: LD_ADDR_VAR 0 9
7019: PUSH
7020: LD_VAR 0 6
7024: ST_TO_ADDR
// for i = tmp downto 1 do
7025: LD_ADDR_VAR 0 7
7029: PUSH
7030: DOUBLE
7031: LD_VAR 0 9
7035: INC
7036: ST_TO_ADDR
7037: LD_INT 1
7039: PUSH
7040: FOR_DOWNTO
7041: IFFALSE 7086
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7043: LD_ADDR_VAR 0 6
7047: PUSH
7048: LD_VAR 0 6
7052: PPUSH
7053: LD_VAR 0 9
7057: PUSH
7058: LD_VAR 0 7
7062: MINUS
7063: PUSH
7064: LD_INT 1
7066: PLUS
7067: PPUSH
7068: LD_VAR 0 9
7072: PUSH
7073: LD_VAR 0 7
7077: ARRAY
7078: PPUSH
7079: CALL_OW 1
7083: ST_TO_ADDR
7084: GO 7040
7086: POP
7087: POP
// end ; tmp := [ ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: EMPTY
7094: ST_TO_ADDR
// if mode then
7095: LD_VAR 0 5
7099: IFFALSE 7168
// begin for i = 1 to result do
7101: LD_ADDR_VAR 0 7
7105: PUSH
7106: DOUBLE
7107: LD_INT 1
7109: DEC
7110: ST_TO_ADDR
7111: LD_VAR 0 6
7115: PUSH
7116: FOR_TO
7117: IFFALSE 7156
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7119: LD_ADDR_VAR 0 9
7123: PUSH
7124: LD_VAR 0 9
7128: PPUSH
7129: LD_VAR 0 7
7133: PPUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 7
7143: ARRAY
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
7154: GO 7116
7156: POP
7157: POP
// result := tmp ;
7158: LD_ADDR_VAR 0 6
7162: PUSH
7163: LD_VAR 0 9
7167: ST_TO_ADDR
// end ; end ;
7168: LD_VAR 0 6
7172: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: EMPTY
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
// if not x or not y then
7203: LD_VAR 0 2
7207: NOT
7208: PUSH
7209: LD_VAR 0 3
7213: NOT
7214: OR
7215: IFFALSE 7219
// exit ;
7217: GO 8869
// if not range then
7219: LD_VAR 0 4
7223: NOT
7224: IFFALSE 7234
// range := 10 ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_INT 10
7233: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_INT 81
7241: PUSH
7242: LD_VAR 0 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 92
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: ST_TO_ADDR
// if not tmp then
7302: LD_VAR 0 8
7306: NOT
7307: IFFALSE 7311
// exit ;
7309: GO 8869
// for i in tmp do
7311: LD_ADDR_VAR 0 6
7315: PUSH
7316: LD_VAR 0 8
7320: PUSH
7321: FOR_IN
7322: IFFALSE 8844
// begin points := [ 0 , 0 , 0 ] ;
7324: LD_ADDR_VAR 0 9
7328: PUSH
7329: LD_INT 0
7331: PUSH
7332: LD_INT 0
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: ST_TO_ADDR
// bpoints := 1 ;
7343: LD_ADDR_VAR 0 10
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 247
7360: PUSH
7361: LD_INT 1
7363: DOUBLE
7364: EQUAL
7365: IFTRUE 7369
7367: GO 7947
7369: POP
// begin if GetClass ( i ) = 1 then
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 257
7379: PUSH
7380: LD_INT 1
7382: EQUAL
7383: IFFALSE 7404
// points := [ 10 , 5 , 3 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 10
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 257
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: IN
7428: IFFALSE 7449
// points := [ 3 , 2 , 1 ] ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7449: LD_VAR 0 6
7453: PPUSH
7454: CALL_OW 257
7458: PUSH
7459: LD_INT 5
7461: EQUAL
7462: IFFALSE 7483
// points := [ 130 , 5 , 2 ] ;
7464: LD_ADDR_VAR 0 9
7468: PUSH
7469: LD_INT 130
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 257
7492: PUSH
7493: LD_INT 8
7495: EQUAL
7496: IFFALSE 7517
// points := [ 35 , 35 , 30 ] ;
7498: LD_ADDR_VAR 0 9
7502: PUSH
7503: LD_INT 35
7505: PUSH
7506: LD_INT 35
7508: PUSH
7509: LD_INT 30
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7517: LD_VAR 0 6
7521: PPUSH
7522: CALL_OW 257
7526: PUSH
7527: LD_INT 9
7529: EQUAL
7530: IFFALSE 7551
// points := [ 20 , 55 , 40 ] ;
7532: LD_ADDR_VAR 0 9
7536: PUSH
7537: LD_INT 20
7539: PUSH
7540: LD_INT 55
7542: PUSH
7543: LD_INT 40
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7551: LD_VAR 0 6
7555: PPUSH
7556: CALL_OW 257
7560: PUSH
7561: LD_INT 12
7563: PUSH
7564: LD_INT 16
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: IN
7571: IFFALSE 7592
// points := [ 5 , 3 , 2 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_INT 5
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7592: LD_VAR 0 6
7596: PPUSH
7597: CALL_OW 257
7601: PUSH
7602: LD_INT 17
7604: EQUAL
7605: IFFALSE 7626
// points := [ 100 , 50 , 75 ] ;
7607: LD_ADDR_VAR 0 9
7611: PUSH
7612: LD_INT 100
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: LD_INT 75
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7626: LD_VAR 0 6
7630: PPUSH
7631: CALL_OW 257
7635: PUSH
7636: LD_INT 15
7638: EQUAL
7639: IFFALSE 7660
// points := [ 10 , 5 , 3 ] ;
7641: LD_ADDR_VAR 0 9
7645: PUSH
7646: LD_INT 10
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: LD_INT 3
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7660: LD_VAR 0 6
7664: PPUSH
7665: CALL_OW 257
7669: PUSH
7670: LD_INT 14
7672: EQUAL
7673: IFFALSE 7694
// points := [ 10 , 0 , 0 ] ;
7675: LD_ADDR_VAR 0 9
7679: PUSH
7680: LD_INT 10
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7694: LD_VAR 0 6
7698: PPUSH
7699: CALL_OW 257
7703: PUSH
7704: LD_INT 11
7706: EQUAL
7707: IFFALSE 7728
// points := [ 30 , 10 , 5 ] ;
7709: LD_ADDR_VAR 0 9
7713: PUSH
7714: LD_INT 30
7716: PUSH
7717: LD_INT 10
7719: PUSH
7720: LD_INT 5
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7728: LD_VAR 0 1
7732: PPUSH
7733: LD_INT 5
7735: PPUSH
7736: CALL_OW 321
7740: PUSH
7741: LD_INT 2
7743: EQUAL
7744: IFFALSE 7761
// bpoints := bpoints * 1.8 ;
7746: LD_ADDR_VAR 0 10
7750: PUSH
7751: LD_VAR 0 10
7755: PUSH
7756: LD_REAL  1.80000000000000E+0000
7759: MUL
7760: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7761: LD_VAR 0 6
7765: PPUSH
7766: CALL_OW 257
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 4
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: PUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: LD_INT 51
7797: PPUSH
7798: CALL_OW 321
7802: PUSH
7803: LD_INT 2
7805: EQUAL
7806: AND
7807: IFFALSE 7824
// bpoints := bpoints * 1.2 ;
7809: LD_ADDR_VAR 0 10
7813: PUSH
7814: LD_VAR 0 10
7818: PUSH
7819: LD_REAL  1.20000000000000E+0000
7822: MUL
7823: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7824: LD_VAR 0 6
7828: PPUSH
7829: CALL_OW 257
7833: PUSH
7834: LD_INT 5
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: LD_INT 9
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: IN
7848: PUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_INT 52
7856: PPUSH
7857: CALL_OW 321
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: AND
7866: IFFALSE 7883
// bpoints := bpoints * 1.5 ;
7868: LD_ADDR_VAR 0 10
7872: PUSH
7873: LD_VAR 0 10
7877: PUSH
7878: LD_REAL  1.50000000000000E+0000
7881: MUL
7882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 66
7890: PPUSH
7891: CALL_OW 321
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: IFFALSE 7916
// bpoints := bpoints * 1.1 ;
7901: LD_ADDR_VAR 0 10
7905: PUSH
7906: LD_VAR 0 10
7910: PUSH
7911: LD_REAL  1.10000000000000E+0000
7914: MUL
7915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7916: LD_ADDR_VAR 0 10
7920: PUSH
7921: LD_VAR 0 10
7925: PUSH
7926: LD_VAR 0 6
7930: PPUSH
7931: LD_INT 1
7933: PPUSH
7934: CALL_OW 259
7938: PUSH
7939: LD_REAL  1.15000000000000E+0000
7942: MUL
7943: MUL
7944: ST_TO_ADDR
// end ; unit_vehicle :
7945: GO 8773
7947: LD_INT 2
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8761
7955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7956: LD_VAR 0 6
7960: PPUSH
7961: CALL_OW 264
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 42
7971: PUSH
7972: LD_INT 24
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 25 , 5 , 3 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 25
7989: PUSH
7990: LD_INT 5
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 4
8013: PUSH
8014: LD_INT 43
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: IN
8025: IFFALSE 8046
// points := [ 40 , 15 , 5 ] ;
8027: LD_ADDR_VAR 0 9
8031: PUSH
8032: LD_INT 40
8034: PUSH
8035: LD_INT 15
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8046: LD_VAR 0 6
8050: PPUSH
8051: CALL_OW 264
8055: PUSH
8056: LD_INT 3
8058: PUSH
8059: LD_INT 23
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: IN
8066: IFFALSE 8087
// points := [ 7 , 25 , 8 ] ;
8068: LD_ADDR_VAR 0 9
8072: PUSH
8073: LD_INT 7
8075: PUSH
8076: LD_INT 25
8078: PUSH
8079: LD_INT 8
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 264
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: LD_INT 27
8102: PUSH
8103: LD_INT 44
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: IN
8111: IFFALSE 8132
// points := [ 14 , 50 , 16 ] ;
8113: LD_ADDR_VAR 0 9
8117: PUSH
8118: LD_INT 14
8120: PUSH
8121: LD_INT 50
8123: PUSH
8124: LD_INT 16
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8132: LD_VAR 0 6
8136: PPUSH
8137: CALL_OW 264
8141: PUSH
8142: LD_INT 6
8144: PUSH
8145: LD_INT 46
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: IN
8152: IFFALSE 8173
// points := [ 32 , 120 , 70 ] ;
8154: LD_ADDR_VAR 0 9
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 120
8164: PUSH
8165: LD_INT 70
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 264
8182: PUSH
8183: LD_INT 7
8185: PUSH
8186: LD_INT 28
8188: PUSH
8189: LD_INT 45
8191: PUSH
8192: LD_INT 92
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: IN
8201: IFFALSE 8222
// points := [ 35 , 20 , 45 ] ;
8203: LD_ADDR_VAR 0 9
8207: PUSH
8208: LD_INT 35
8210: PUSH
8211: LD_INT 20
8213: PUSH
8214: LD_INT 45
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8222: LD_VAR 0 6
8226: PPUSH
8227: CALL_OW 264
8231: PUSH
8232: LD_INT 47
8234: PUSH
8235: EMPTY
8236: LIST
8237: IN
8238: IFFALSE 8259
// points := [ 67 , 45 , 75 ] ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_INT 67
8247: PUSH
8248: LD_INT 45
8250: PUSH
8251: LD_INT 75
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 264
8268: PUSH
8269: LD_INT 26
8271: PUSH
8272: EMPTY
8273: LIST
8274: IN
8275: IFFALSE 8296
// points := [ 120 , 30 , 80 ] ;
8277: LD_ADDR_VAR 0 9
8281: PUSH
8282: LD_INT 120
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 80
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8296: LD_VAR 0 6
8300: PPUSH
8301: CALL_OW 264
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: EMPTY
8310: LIST
8311: IN
8312: IFFALSE 8333
// points := [ 40 , 1 , 1 ] ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 40
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8333: LD_VAR 0 6
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 29
8345: PUSH
8346: EMPTY
8347: LIST
8348: IN
8349: IFFALSE 8370
// points := [ 70 , 200 , 400 ] ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_INT 70
8358: PUSH
8359: LD_INT 200
8361: PUSH
8362: LD_INT 400
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 264
8379: PUSH
8380: LD_INT 14
8382: PUSH
8383: LD_INT 53
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: IN
8390: IFFALSE 8411
// points := [ 40 , 10 , 20 ] ;
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: LD_INT 40
8399: PUSH
8400: LD_INT 10
8402: PUSH
8403: LD_INT 20
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8411: LD_VAR 0 6
8415: PPUSH
8416: CALL_OW 264
8420: PUSH
8421: LD_INT 9
8423: PUSH
8424: EMPTY
8425: LIST
8426: IN
8427: IFFALSE 8448
// points := [ 5 , 70 , 20 ] ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 70
8439: PUSH
8440: LD_INT 20
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 264
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: EMPTY
8462: LIST
8463: IN
8464: IFFALSE 8485
// points := [ 35 , 110 , 70 ] ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_INT 35
8473: PUSH
8474: LD_INT 110
8476: PUSH
8477: LD_INT 70
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8485: LD_VAR 0 6
8489: PPUSH
8490: CALL_OW 265
8494: PUSH
8495: LD_INT 25
8497: EQUAL
8498: IFFALSE 8519
// points := [ 80 , 65 , 100 ] ;
8500: LD_ADDR_VAR 0 9
8504: PUSH
8505: LD_INT 80
8507: PUSH
8508: LD_INT 65
8510: PUSH
8511: LD_INT 100
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8519: LD_VAR 0 6
8523: PPUSH
8524: CALL_OW 263
8528: PUSH
8529: LD_INT 1
8531: EQUAL
8532: IFFALSE 8567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8534: LD_ADDR_VAR 0 10
8538: PUSH
8539: LD_VAR 0 10
8543: PUSH
8544: LD_VAR 0 6
8548: PPUSH
8549: CALL_OW 311
8553: PPUSH
8554: LD_INT 3
8556: PPUSH
8557: CALL_OW 259
8561: PUSH
8562: LD_INT 4
8564: MUL
8565: MUL
8566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8567: LD_VAR 0 6
8571: PPUSH
8572: CALL_OW 263
8576: PUSH
8577: LD_INT 2
8579: EQUAL
8580: IFFALSE 8631
// begin j := IsControledBy ( i ) ;
8582: LD_ADDR_VAR 0 7
8586: PUSH
8587: LD_VAR 0 6
8591: PPUSH
8592: CALL_OW 312
8596: ST_TO_ADDR
// if j then
8597: LD_VAR 0 7
8601: IFFALSE 8631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8603: LD_ADDR_VAR 0 10
8607: PUSH
8608: LD_VAR 0 10
8612: PUSH
8613: LD_VAR 0 7
8617: PPUSH
8618: LD_INT 3
8620: PPUSH
8621: CALL_OW 259
8625: PUSH
8626: LD_INT 3
8628: MUL
8629: MUL
8630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8631: LD_VAR 0 6
8635: PPUSH
8636: CALL_OW 264
8640: PUSH
8641: LD_INT 5
8643: PUSH
8644: LD_INT 6
8646: PUSH
8647: LD_INT 46
8649: PUSH
8650: LD_INT 44
8652: PUSH
8653: LD_INT 47
8655: PUSH
8656: LD_INT 45
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 27
8667: PUSH
8668: LD_INT 29
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: IN
8683: PUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 52
8691: PPUSH
8692: CALL_OW 321
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: AND
8701: IFFALSE 8718
// bpoints := bpoints * 1.2 ;
8703: LD_ADDR_VAR 0 10
8707: PUSH
8708: LD_VAR 0 10
8712: PUSH
8713: LD_REAL  1.20000000000000E+0000
8716: MUL
8717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8718: LD_VAR 0 6
8722: PPUSH
8723: CALL_OW 264
8727: PUSH
8728: LD_INT 6
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: LD_INT 47
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: IN
8742: IFFALSE 8759
// bpoints := bpoints * 1.2 ;
8744: LD_ADDR_VAR 0 10
8748: PUSH
8749: LD_VAR 0 10
8753: PUSH
8754: LD_REAL  1.20000000000000E+0000
8757: MUL
8758: ST_TO_ADDR
// end ; unit_building :
8759: GO 8773
8761: LD_INT 3
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8772
8769: POP
// ; end ;
8770: GO 8773
8772: POP
// for j = 1 to 3 do
8773: LD_ADDR_VAR 0 7
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 3
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 5
8798: PPUSH
8799: LD_VAR 0 7
8803: PPUSH
8804: LD_VAR 0 5
8808: PUSH
8809: LD_VAR 0 7
8813: ARRAY
8814: PUSH
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 7
8824: ARRAY
8825: PUSH
8826: LD_VAR 0 10
8830: MUL
8831: PLUS
8832: PPUSH
8833: CALL_OW 1
8837: ST_TO_ADDR
8838: GO 8786
8840: POP
8841: POP
// end ;
8842: GO 7321
8844: POP
8845: POP
// result := Replace ( result , 4 , tmp ) ;
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_VAR 0 5
8855: PPUSH
8856: LD_INT 4
8858: PPUSH
8859: LD_VAR 0 8
8863: PPUSH
8864: CALL_OW 1
8868: ST_TO_ADDR
// end ;
8869: LD_VAR 0 5
8873: RET
// export function DangerAtRange ( unit , range ) ; begin
8874: LD_INT 0
8876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 255
8891: PPUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 250
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 251
8911: PPUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL 7173 0 4
8921: ST_TO_ADDR
// end ;
8922: LD_VAR 0 3
8926: RET
// export function DangerInArea ( side , area ) ; begin
8927: LD_INT 0
8929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: LD_INT 81
8942: PUSH
8943: LD_VAR 0 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// end ;
8957: LD_VAR 0 3
8961: RET
// export function IsExtension ( b ) ; begin
8962: LD_INT 0
8964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_VAR 0 1
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 20
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_INT 17
8986: PUSH
8987: LD_INT 24
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 19
8995: PUSH
8996: LD_INT 16
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 18
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: IN
9017: ST_TO_ADDR
// end ;
9018: LD_VAR 0 2
9022: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9023: LD_INT 0
9025: PPUSH
9026: PPUSH
9027: PPUSH
// result := [ ] ;
9028: LD_ADDR_VAR 0 4
9032: PUSH
9033: EMPTY
9034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9035: LD_ADDR_VAR 0 5
9039: PUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 21
9047: PUSH
9048: LD_INT 3
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 70
9059: ST_TO_ADDR
// if not tmp then
9060: LD_VAR 0 5
9064: NOT
9065: IFFALSE 9069
// exit ;
9067: GO 9133
// if checkLink then
9069: LD_VAR 0 3
9073: IFFALSE 9123
// begin for i in tmp do
9075: LD_ADDR_VAR 0 6
9079: PUSH
9080: LD_VAR 0 5
9084: PUSH
9085: FOR_IN
9086: IFFALSE 9121
// if GetBase ( i ) <> base then
9088: LD_VAR 0 6
9092: PPUSH
9093: CALL_OW 274
9097: PUSH
9098: LD_VAR 0 1
9102: NONEQUAL
9103: IFFALSE 9119
// ComLinkToBase ( base , i ) ;
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 169
9119: GO 9085
9121: POP
9122: POP
// end ; result := tmp ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: LD_VAR 0 5
9132: ST_TO_ADDR
// end ;
9133: LD_VAR 0 4
9137: RET
// export function ComComplete ( units , b ) ; var i ; begin
9138: LD_INT 0
9140: PPUSH
9141: PPUSH
// if not units then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9241
// for i in units do
9151: LD_ADDR_VAR 0 4
9155: PUSH
9156: LD_VAR 0 1
9160: PUSH
9161: FOR_IN
9162: IFFALSE 9239
// if BuildingStatus ( b ) = bs_build then
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 461
9173: PUSH
9174: LD_INT 1
9176: EQUAL
9177: IFFALSE 9237
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9179: LD_VAR 0 4
9183: PPUSH
9184: LD_STRING h
9186: PUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 250
9196: PUSH
9197: LD_VAR 0 2
9201: PPUSH
9202: CALL_OW 251
9206: PUSH
9207: LD_VAR 0 2
9211: PUSH
9212: LD_INT 0
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: LD_INT 0
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: PPUSH
9233: CALL_OW 446
9237: GO 9161
9239: POP
9240: POP
// end ;
9241: LD_VAR 0 3
9245: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9254: LD_VAR 0 1
9258: NOT
9259: PUSH
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 263
9269: PUSH
9270: LD_INT 2
9272: NONEQUAL
9273: OR
9274: IFFALSE 9278
// exit ;
9276: GO 9594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9278: LD_ADDR_VAR 0 6
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_VAR 0 1
9290: PPUSH
9291: CALL_OW 255
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 36
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 34
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not tmp then
9337: LD_VAR 0 6
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9594
// result := [ ] ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: EMPTY
9352: ST_TO_ADDR
// for i in tmp do
9353: LD_ADDR_VAR 0 3
9357: PUSH
9358: LD_VAR 0 6
9362: PUSH
9363: FOR_IN
9364: IFFALSE 9435
// begin t := UnitsInside ( i ) ;
9366: LD_ADDR_VAR 0 4
9370: PUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: CALL_OW 313
9380: ST_TO_ADDR
// if t then
9381: LD_VAR 0 4
9385: IFFALSE 9433
// for j in t do
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9431
// result := Replace ( result , result + 1 , j ) ;
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_INT 1
9417: PLUS
9418: PPUSH
9419: LD_VAR 0 7
9423: PPUSH
9424: CALL_OW 1
9428: ST_TO_ADDR
9429: GO 9397
9431: POP
9432: POP
// end ;
9433: GO 9363
9435: POP
9436: POP
// if not result then
9437: LD_VAR 0 2
9441: NOT
9442: IFFALSE 9446
// exit ;
9444: GO 9594
// mech := result [ 1 ] ;
9446: LD_ADDR_VAR 0 5
9450: PUSH
9451: LD_VAR 0 2
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: ST_TO_ADDR
// if result > 1 then
9460: LD_VAR 0 2
9464: PUSH
9465: LD_INT 1
9467: GREATER
9468: IFFALSE 9580
// begin for i = 2 to result do
9470: LD_ADDR_VAR 0 3
9474: PUSH
9475: DOUBLE
9476: LD_INT 2
9478: DEC
9479: ST_TO_ADDR
9480: LD_VAR 0 2
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 2
9497: PUSH
9498: LD_VAR 0 3
9502: ARRAY
9503: PPUSH
9504: LD_INT 3
9506: PPUSH
9507: CALL_OW 259
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: LD_VAR 0 3
9521: ARRAY
9522: PPUSH
9523: CALL_OW 432
9527: MINUS
9528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9529: LD_VAR 0 4
9533: PUSH
9534: LD_VAR 0 5
9538: PPUSH
9539: LD_INT 3
9541: PPUSH
9542: CALL_OW 259
9546: PUSH
9547: LD_VAR 0 5
9551: PPUSH
9552: CALL_OW 432
9556: MINUS
9557: GREATEREQUAL
9558: IFFALSE 9576
// mech := result [ i ] ;
9560: LD_ADDR_VAR 0 5
9564: PUSH
9565: LD_VAR 0 2
9569: PUSH
9570: LD_VAR 0 3
9574: ARRAY
9575: ST_TO_ADDR
// end ;
9576: GO 9485
9578: POP
9579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 5
9589: PPUSH
9590: CALL_OW 135
// end ;
9594: LD_VAR 0 2
9598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// result := [ ] ;
9614: LD_ADDR_VAR 0 7
9618: PUSH
9619: EMPTY
9620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 266
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11280
// if name then
9646: LD_VAR 0 3
9650: IFFALSE 9666
// SetBName ( base_dep , name ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: CALL_OW 500
// base := GetBase ( base_dep ) ;
9666: LD_ADDR_VAR 0 15
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 274
9680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9681: LD_ADDR_VAR 0 16
9685: PUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: CALL_OW 255
9695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9696: LD_ADDR_VAR 0 17
9700: PUSH
9701: LD_VAR 0 1
9705: PPUSH
9706: CALL_OW 248
9710: ST_TO_ADDR
// if sources then
9711: LD_VAR 0 5
9715: IFFALSE 9762
// for i = 1 to 3 do
9717: LD_ADDR_VAR 0 8
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 3
9729: PUSH
9730: FOR_TO
9731: IFFALSE 9760
// AddResourceType ( base , i , sources [ i ] ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 8
9742: PPUSH
9743: LD_VAR 0 5
9747: PUSH
9748: LD_VAR 0 8
9752: ARRAY
9753: PPUSH
9754: CALL_OW 276
9758: GO 9730
9760: POP
9761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9762: LD_ADDR_VAR 0 18
9766: PUSH
9767: LD_VAR 0 15
9771: PPUSH
9772: LD_VAR 0 2
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL 9023 0 3
9784: ST_TO_ADDR
// InitHc ;
9785: CALL_OW 19
// InitUc ;
9789: CALL_OW 18
// uc_side := side ;
9793: LD_ADDR_OWVAR 20
9797: PUSH
9798: LD_VAR 0 16
9802: ST_TO_ADDR
// uc_nation := nation ;
9803: LD_ADDR_OWVAR 21
9807: PUSH
9808: LD_VAR 0 17
9812: ST_TO_ADDR
// if buildings then
9813: LD_VAR 0 18
9817: IFFALSE 11139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9819: LD_ADDR_VAR 0 19
9823: PUSH
9824: LD_VAR 0 18
9828: PPUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 29
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 72
9861: ST_TO_ADDR
// if tmp then
9862: LD_VAR 0 19
9866: IFFALSE 9914
// for i in tmp do
9868: LD_ADDR_VAR 0 8
9872: PUSH
9873: LD_VAR 0 19
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 250
9890: PPUSH
9891: LD_VAR 0 8
9895: PPUSH
9896: CALL_OW 251
9900: PPUSH
9901: LD_VAR 0 16
9905: PPUSH
9906: CALL_OW 441
9910: GO 9878
9912: POP
9913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9914: LD_VAR 0 18
9918: PPUSH
9919: LD_INT 2
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 32
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 33
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 72
9951: IFFALSE 10039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9953: LD_ADDR_VAR 0 8
9957: PUSH
9958: LD_VAR 0 18
9962: PPUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 32
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 33
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 72
9995: PUSH
9996: FOR_IN
9997: IFFALSE 10037
// begin if not GetBWeapon ( i ) then
9999: LD_VAR 0 8
10003: PPUSH
10004: CALL_OW 269
10008: NOT
10009: IFFALSE 10035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10011: LD_VAR 0 8
10015: PPUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: LD_VAR 0 2
10025: PPUSH
10026: CALL 11285 0 2
10030: PPUSH
10031: CALL_OW 431
// end ;
10035: GO 9996
10037: POP
10038: POP
// end ; for i = 1 to personel do
10039: LD_ADDR_VAR 0 8
10043: PUSH
10044: DOUBLE
10045: LD_INT 1
10047: DEC
10048: ST_TO_ADDR
10049: LD_VAR 0 6
10053: PUSH
10054: FOR_TO
10055: IFFALSE 11119
// begin if i > 4 then
10057: LD_VAR 0 8
10061: PUSH
10062: LD_INT 4
10064: GREATER
10065: IFFALSE 10069
// break ;
10067: GO 11119
// case i of 1 :
10069: LD_VAR 0 8
10073: PUSH
10074: LD_INT 1
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10162
10082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10083: LD_ADDR_VAR 0 12
10087: PUSH
10088: LD_VAR 0 18
10092: PPUSH
10093: LD_INT 22
10095: PUSH
10096: LD_VAR 0 16
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 58
10107: PUSH
10108: EMPTY
10109: LIST
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 32
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 72
10159: ST_TO_ADDR
10160: GO 10384
10162: LD_INT 2
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10232
10170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10171: LD_ADDR_VAR 0 12
10175: PUSH
10176: LD_VAR 0 18
10180: PPUSH
10181: LD_INT 22
10183: PUSH
10184: LD_VAR 0 16
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 0
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 30
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 72
10229: ST_TO_ADDR
10230: GO 10384
10232: LD_INT 3
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10302
10240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10241: LD_ADDR_VAR 0 12
10245: PUSH
10246: LD_VAR 0 18
10250: PPUSH
10251: LD_INT 22
10253: PUSH
10254: LD_VAR 0 16
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 72
10299: ST_TO_ADDR
10300: GO 10384
10302: LD_INT 4
10304: DOUBLE
10305: EQUAL
10306: IFTRUE 10310
10308: GO 10383
10310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10311: LD_ADDR_VAR 0 12
10315: PUSH
10316: LD_VAR 0 18
10320: PPUSH
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 16
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 6
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 7
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 30
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 72
10380: ST_TO_ADDR
10381: GO 10384
10383: POP
// if i = 1 then
10384: LD_VAR 0 8
10388: PUSH
10389: LD_INT 1
10391: EQUAL
10392: IFFALSE 10503
// begin tmp := [ ] ;
10394: LD_ADDR_VAR 0 19
10398: PUSH
10399: EMPTY
10400: ST_TO_ADDR
// for j in f do
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_VAR 0 12
10410: PUSH
10411: FOR_IN
10412: IFFALSE 10485
// if GetBType ( j ) = b_bunker then
10414: LD_VAR 0 9
10418: PPUSH
10419: CALL_OW 266
10423: PUSH
10424: LD_INT 32
10426: EQUAL
10427: IFFALSE 10454
// tmp := Insert ( tmp , 1 , j ) else
10429: LD_ADDR_VAR 0 19
10433: PUSH
10434: LD_VAR 0 19
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: LD_VAR 0 9
10446: PPUSH
10447: CALL_OW 2
10451: ST_TO_ADDR
10452: GO 10483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10454: LD_ADDR_VAR 0 19
10458: PUSH
10459: LD_VAR 0 19
10463: PPUSH
10464: LD_VAR 0 19
10468: PUSH
10469: LD_INT 1
10471: PLUS
10472: PPUSH
10473: LD_VAR 0 9
10477: PPUSH
10478: CALL_OW 2
10482: ST_TO_ADDR
10483: GO 10411
10485: POP
10486: POP
// if tmp then
10487: LD_VAR 0 19
10491: IFFALSE 10503
// f := tmp ;
10493: LD_ADDR_VAR 0 12
10497: PUSH
10498: LD_VAR 0 19
10502: ST_TO_ADDR
// end ; x := personel [ i ] ;
10503: LD_ADDR_VAR 0 13
10507: PUSH
10508: LD_VAR 0 6
10512: PUSH
10513: LD_VAR 0 8
10517: ARRAY
10518: ST_TO_ADDR
// if x = - 1 then
10519: LD_VAR 0 13
10523: PUSH
10524: LD_INT 1
10526: NEG
10527: EQUAL
10528: IFFALSE 10737
// begin for j in f do
10530: LD_ADDR_VAR 0 9
10534: PUSH
10535: LD_VAR 0 12
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10733
// repeat InitHc ;
10543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10547: LD_VAR 0 9
10551: PPUSH
10552: CALL_OW 266
10556: PUSH
10557: LD_INT 5
10559: EQUAL
10560: IFFALSE 10630
// begin if UnitsInside ( j ) < 3 then
10562: LD_VAR 0 9
10566: PPUSH
10567: CALL_OW 313
10571: PUSH
10572: LD_INT 3
10574: LESS
10575: IFFALSE 10611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10577: LD_INT 0
10579: PPUSH
10580: LD_INT 5
10582: PUSH
10583: LD_INT 8
10585: PUSH
10586: LD_INT 9
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 17
10598: ARRAY
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: CALL_OW 380
10609: GO 10628
// PrepareHuman ( false , i , skill ) ;
10611: LD_INT 0
10613: PPUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: LD_VAR 0 4
10623: PPUSH
10624: CALL_OW 380
// end else
10628: GO 10647
// PrepareHuman ( false , i , skill ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_VAR 0 8
10637: PPUSH
10638: LD_VAR 0 4
10642: PPUSH
10643: CALL_OW 380
// un := CreateHuman ;
10647: LD_ADDR_VAR 0 14
10651: PUSH
10652: CALL_OW 44
10656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10657: LD_ADDR_VAR 0 7
10661: PUSH
10662: LD_VAR 0 7
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: LD_VAR 0 14
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10680: LD_VAR 0 14
10684: PPUSH
10685: LD_VAR 0 9
10689: PPUSH
10690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10694: LD_VAR 0 9
10698: PPUSH
10699: CALL_OW 313
10703: PUSH
10704: LD_INT 6
10706: EQUAL
10707: PUSH
10708: LD_VAR 0 9
10712: PPUSH
10713: CALL_OW 266
10717: PUSH
10718: LD_INT 32
10720: PUSH
10721: LD_INT 31
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: IN
10728: OR
10729: IFFALSE 10543
10731: GO 10540
10733: POP
10734: POP
// end else
10735: GO 11117
// for j = 1 to x do
10737: LD_ADDR_VAR 0 9
10741: PUSH
10742: DOUBLE
10743: LD_INT 1
10745: DEC
10746: ST_TO_ADDR
10747: LD_VAR 0 13
10751: PUSH
10752: FOR_TO
10753: IFFALSE 11115
// begin InitHc ;
10755: CALL_OW 19
// if not f then
10759: LD_VAR 0 12
10763: NOT
10764: IFFALSE 10853
// begin PrepareHuman ( false , i , skill ) ;
10766: LD_INT 0
10768: PPUSH
10769: LD_VAR 0 8
10773: PPUSH
10774: LD_VAR 0 4
10778: PPUSH
10779: CALL_OW 380
// un := CreateHuman ;
10783: LD_ADDR_VAR 0 14
10787: PUSH
10788: CALL_OW 44
10792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10793: LD_ADDR_VAR 0 7
10797: PUSH
10798: LD_VAR 0 7
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: LD_VAR 0 14
10810: PPUSH
10811: CALL_OW 2
10815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10816: LD_VAR 0 14
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 250
10830: PPUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 251
10840: PPUSH
10841: LD_INT 10
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: CALL_OW 50
// continue ;
10851: GO 10752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10853: LD_VAR 0 12
10857: PUSH
10858: LD_INT 1
10860: ARRAY
10861: PPUSH
10862: CALL_OW 313
10866: PUSH
10867: LD_VAR 0 12
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: CALL_OW 266
10880: PUSH
10881: LD_INT 32
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: IN
10891: AND
10892: PUSH
10893: LD_VAR 0 12
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: CALL_OW 313
10906: PUSH
10907: LD_INT 6
10909: EQUAL
10910: OR
10911: IFFALSE 10931
// f := Delete ( f , 1 ) ;
10913: LD_ADDR_VAR 0 12
10917: PUSH
10918: LD_VAR 0 12
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 3
10930: ST_TO_ADDR
// if not f then
10931: LD_VAR 0 12
10935: NOT
10936: IFFALSE 10954
// begin x := x + 2 ;
10938: LD_ADDR_VAR 0 13
10942: PUSH
10943: LD_VAR 0 13
10947: PUSH
10948: LD_INT 2
10950: PLUS
10951: ST_TO_ADDR
// continue ;
10952: GO 10752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10954: LD_VAR 0 12
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: CALL_OW 266
10967: PUSH
10968: LD_INT 5
10970: EQUAL
10971: IFFALSE 11045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10973: LD_VAR 0 12
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: CALL_OW 313
10986: PUSH
10987: LD_INT 3
10989: LESS
10990: IFFALSE 11026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10992: LD_INT 0
10994: PPUSH
10995: LD_INT 5
10997: PUSH
10998: LD_INT 8
11000: PUSH
11001: LD_INT 9
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_VAR 0 17
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 380
11024: GO 11043
// PrepareHuman ( false , i , skill ) ;
11026: LD_INT 0
11028: PPUSH
11029: LD_VAR 0 8
11033: PPUSH
11034: LD_VAR 0 4
11038: PPUSH
11039: CALL_OW 380
// end else
11043: GO 11062
// PrepareHuman ( false , i , skill ) ;
11045: LD_INT 0
11047: PPUSH
11048: LD_VAR 0 8
11052: PPUSH
11053: LD_VAR 0 4
11057: PPUSH
11058: CALL_OW 380
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 14
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: LD_VAR 0 7
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: LD_VAR 0 14
11089: PPUSH
11090: CALL_OW 2
11094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11095: LD_VAR 0 14
11099: PPUSH
11100: LD_VAR 0 12
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PPUSH
11109: CALL_OW 52
// end ;
11113: GO 10752
11115: POP
11116: POP
// end ;
11117: GO 10054
11119: POP
11120: POP
// result := result ^ buildings ;
11121: LD_ADDR_VAR 0 7
11125: PUSH
11126: LD_VAR 0 7
11130: PUSH
11131: LD_VAR 0 18
11135: ADD
11136: ST_TO_ADDR
// end else
11137: GO 11280
// begin for i = 1 to personel do
11139: LD_ADDR_VAR 0 8
11143: PUSH
11144: DOUBLE
11145: LD_INT 1
11147: DEC
11148: ST_TO_ADDR
11149: LD_VAR 0 6
11153: PUSH
11154: FOR_TO
11155: IFFALSE 11278
// begin if i > 4 then
11157: LD_VAR 0 8
11161: PUSH
11162: LD_INT 4
11164: GREATER
11165: IFFALSE 11169
// break ;
11167: GO 11278
// x := personel [ i ] ;
11169: LD_ADDR_VAR 0 13
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_VAR 0 8
11183: ARRAY
11184: ST_TO_ADDR
// if x = - 1 then
11185: LD_VAR 0 13
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: EQUAL
11194: IFFALSE 11198
// continue ;
11196: GO 11154
// PrepareHuman ( false , i , skill ) ;
11198: LD_INT 0
11200: PPUSH
11201: LD_VAR 0 8
11205: PPUSH
11206: LD_VAR 0 4
11210: PPUSH
11211: CALL_OW 380
// un := CreateHuman ;
11215: LD_ADDR_VAR 0 14
11219: PUSH
11220: CALL_OW 44
11224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 250
11239: PPUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 251
11249: PPUSH
11250: LD_INT 10
11252: PPUSH
11253: LD_INT 0
11255: PPUSH
11256: CALL_OW 50
// result := result ^ un ;
11260: LD_ADDR_VAR 0 7
11264: PUSH
11265: LD_VAR 0 7
11269: PUSH
11270: LD_VAR 0 14
11274: ADD
11275: ST_TO_ADDR
// end ;
11276: GO 11154
11278: POP
11279: POP
// end ; end ;
11280: LD_VAR 0 7
11284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
11297: PPUSH
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
11302: PPUSH
// result := false ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11311: LD_VAR 0 1
11315: NOT
11316: PUSH
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 266
11326: PUSH
11327: LD_INT 32
11329: PUSH
11330: LD_INT 33
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: IN
11337: NOT
11338: OR
11339: IFFALSE 11343
// exit ;
11341: GO 12452
// nat := GetNation ( tower ) ;
11343: LD_ADDR_VAR 0 12
11347: PUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 248
11357: ST_TO_ADDR
// side := GetSide ( tower ) ;
11358: LD_ADDR_VAR 0 16
11362: PUSH
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 255
11372: ST_TO_ADDR
// x := GetX ( tower ) ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 1
11382: PPUSH
11383: CALL_OW 250
11387: ST_TO_ADDR
// y := GetY ( tower ) ;
11388: LD_ADDR_VAR 0 11
11392: PUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 251
11402: ST_TO_ADDR
// if not x or not y then
11403: LD_VAR 0 10
11407: NOT
11408: PUSH
11409: LD_VAR 0 11
11413: NOT
11414: OR
11415: IFFALSE 11419
// exit ;
11417: GO 12452
// weapon := 0 ;
11419: LD_ADDR_VAR 0 18
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// fac_list := [ ] ;
11427: LD_ADDR_VAR 0 17
11431: PUSH
11432: EMPTY
11433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11434: LD_ADDR_VAR 0 6
11438: PUSH
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 274
11448: PPUSH
11449: LD_VAR 0 2
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL 9023 0 3
11461: PPUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 3
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 72
11476: ST_TO_ADDR
// if not factories then
11477: LD_VAR 0 6
11481: NOT
11482: IFFALSE 11486
// exit ;
11484: GO 12452
// for i in factories do
11486: LD_ADDR_VAR 0 8
11490: PUSH
11491: LD_VAR 0 6
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11499: LD_ADDR_VAR 0 17
11503: PUSH
11504: LD_VAR 0 17
11508: PUSH
11509: LD_VAR 0 8
11513: PPUSH
11514: CALL_OW 478
11518: UNION
11519: ST_TO_ADDR
11520: GO 11496
11522: POP
11523: POP
// if not fac_list then
11524: LD_VAR 0 17
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 12452
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11533: LD_ADDR_VAR 0 5
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: LD_INT 5
11543: PUSH
11544: LD_INT 9
11546: PUSH
11547: LD_INT 10
11549: PUSH
11550: LD_INT 6
11552: PUSH
11553: LD_INT 7
11555: PUSH
11556: LD_INT 11
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 27
11570: PUSH
11571: LD_INT 28
11573: PUSH
11574: LD_INT 26
11576: PUSH
11577: LD_INT 30
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 43
11588: PUSH
11589: LD_INT 44
11591: PUSH
11592: LD_INT 46
11594: PUSH
11595: LD_INT 45
11597: PUSH
11598: LD_INT 47
11600: PUSH
11601: LD_INT 49
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_VAR 0 12
11621: ARRAY
11622: ST_TO_ADDR
// list := list isect fac_list ;
11623: LD_ADDR_VAR 0 5
11627: PUSH
11628: LD_VAR 0 5
11632: PUSH
11633: LD_VAR 0 17
11637: ISECT
11638: ST_TO_ADDR
// if not list then
11639: LD_VAR 0 5
11643: NOT
11644: IFFALSE 11648
// exit ;
11646: GO 12452
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11648: LD_VAR 0 12
11652: PUSH
11653: LD_INT 3
11655: EQUAL
11656: PUSH
11657: LD_INT 49
11659: PUSH
11660: LD_VAR 0 5
11664: IN
11665: AND
11666: PUSH
11667: LD_INT 31
11669: PPUSH
11670: LD_VAR 0 16
11674: PPUSH
11675: CALL_OW 321
11679: PUSH
11680: LD_INT 2
11682: EQUAL
11683: AND
11684: IFFALSE 11744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11686: LD_INT 22
11688: PUSH
11689: LD_VAR 0 16
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 35
11700: PUSH
11701: LD_INT 49
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 91
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: LD_INT 10
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: NOT
11734: IFFALSE 11744
// weapon := ru_time_lapser ;
11736: LD_ADDR_VAR 0 18
11740: PUSH
11741: LD_INT 49
11743: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11744: LD_VAR 0 12
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: IN
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_VAR 0 5
11767: IN
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_VAR 0 5
11776: IN
11777: OR
11778: AND
11779: PUSH
11780: LD_INT 6
11782: PPUSH
11783: LD_VAR 0 16
11787: PPUSH
11788: CALL_OW 321
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11799: LD_INT 22
11801: PUSH
11802: LD_VAR 0 16
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 35
11816: PUSH
11817: LD_INT 11
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 35
11826: PUSH
11827: LD_INT 30
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 91
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 18
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: NOT
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_VAR 0 16
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 32
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 30
11893: PUSH
11894: LD_INT 33
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 91
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 12
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_INT 2
11937: GREATER
11938: AND
11939: IFFALSE 11962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11941: LD_ADDR_VAR 0 18
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_VAR 0 12
11960: ARRAY
11961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11962: LD_VAR 0 18
11966: NOT
11967: PUSH
11968: LD_INT 40
11970: PPUSH
11971: LD_VAR 0 16
11975: PPUSH
11976: CALL_OW 321
11980: PUSH
11981: LD_INT 2
11983: EQUAL
11984: AND
11985: PUSH
11986: LD_INT 7
11988: PUSH
11989: LD_VAR 0 5
11993: IN
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_VAR 0 5
12002: IN
12003: OR
12004: PUSH
12005: LD_INT 45
12007: PUSH
12008: LD_VAR 0 5
12012: IN
12013: OR
12014: AND
12015: IFFALSE 12269
// begin hex := GetHexInfo ( x , y ) ;
12017: LD_ADDR_VAR 0 4
12021: PUSH
12022: LD_VAR 0 10
12026: PPUSH
12027: LD_VAR 0 11
12031: PPUSH
12032: CALL_OW 546
12036: ST_TO_ADDR
// if hex [ 1 ] then
12037: LD_VAR 0 4
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: IFFALSE 12049
// exit ;
12047: GO 12452
// height := hex [ 2 ] ;
12049: LD_ADDR_VAR 0 15
12053: PUSH
12054: LD_VAR 0 4
12058: PUSH
12059: LD_INT 2
12061: ARRAY
12062: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12063: LD_ADDR_VAR 0 14
12067: PUSH
12068: LD_INT 0
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 5
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: ST_TO_ADDR
// for i in tmp do
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_VAR 0 14
12095: PUSH
12096: FOR_IN
12097: IFFALSE 12267
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12099: LD_ADDR_VAR 0 9
12103: PUSH
12104: LD_VAR 0 10
12108: PPUSH
12109: LD_VAR 0 8
12113: PPUSH
12114: LD_INT 5
12116: PPUSH
12117: CALL_OW 272
12121: PUSH
12122: LD_VAR 0 11
12126: PPUSH
12127: LD_VAR 0 8
12131: PPUSH
12132: LD_INT 5
12134: PPUSH
12135: CALL_OW 273
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12144: LD_VAR 0 9
12148: PUSH
12149: LD_INT 1
12151: ARRAY
12152: PPUSH
12153: LD_VAR 0 9
12157: PUSH
12158: LD_INT 2
12160: ARRAY
12161: PPUSH
12162: CALL_OW 488
12166: IFFALSE 12265
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12168: LD_ADDR_VAR 0 4
12172: PUSH
12173: LD_VAR 0 9
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: LD_VAR 0 9
12186: PUSH
12187: LD_INT 2
12189: ARRAY
12190: PPUSH
12191: CALL_OW 546
12195: ST_TO_ADDR
// if hex [ 1 ] then
12196: LD_VAR 0 4
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: IFFALSE 12208
// continue ;
12206: GO 12096
// h := hex [ 2 ] ;
12208: LD_ADDR_VAR 0 13
12212: PUSH
12213: LD_VAR 0 4
12217: PUSH
12218: LD_INT 2
12220: ARRAY
12221: ST_TO_ADDR
// if h + 7 < height then
12222: LD_VAR 0 13
12226: PUSH
12227: LD_INT 7
12229: PLUS
12230: PUSH
12231: LD_VAR 0 15
12235: LESS
12236: IFFALSE 12265
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12238: LD_ADDR_VAR 0 18
12242: PUSH
12243: LD_INT 7
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 45
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_VAR 0 12
12261: ARRAY
12262: ST_TO_ADDR
// break ;
12263: GO 12267
// end ; end ; end ;
12265: GO 12096
12267: POP
12268: POP
// end ; if not weapon then
12269: LD_VAR 0 18
12273: NOT
12274: IFFALSE 12334
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12276: LD_ADDR_VAR 0 5
12280: PUSH
12281: LD_VAR 0 5
12285: PUSH
12286: LD_INT 11
12288: PUSH
12289: LD_INT 30
12291: PUSH
12292: LD_INT 49
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: DIFF
12300: ST_TO_ADDR
// if not list then
12301: LD_VAR 0 5
12305: NOT
12306: IFFALSE 12310
// exit ;
12308: GO 12452
// weapon := list [ rand ( 1 , list ) ] ;
12310: LD_ADDR_VAR 0 18
12314: PUSH
12315: LD_VAR 0 5
12319: PUSH
12320: LD_INT 1
12322: PPUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: CALL_OW 12
12332: ARRAY
12333: ST_TO_ADDR
// end ; if weapon then
12334: LD_VAR 0 18
12338: IFFALSE 12452
// begin tmp := CostOfWeapon ( weapon ) ;
12340: LD_ADDR_VAR 0 14
12344: PUSH
12345: LD_VAR 0 18
12349: PPUSH
12350: CALL_OW 451
12354: ST_TO_ADDR
// j := GetBase ( tower ) ;
12355: LD_ADDR_VAR 0 9
12359: PUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 274
12369: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12370: LD_VAR 0 9
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 275
12382: PUSH
12383: LD_VAR 0 14
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: GREATEREQUAL
12392: PUSH
12393: LD_VAR 0 9
12397: PPUSH
12398: LD_INT 2
12400: PPUSH
12401: CALL_OW 275
12405: PUSH
12406: LD_VAR 0 14
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: GREATEREQUAL
12415: AND
12416: PUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: CALL_OW 275
12429: PUSH
12430: LD_VAR 0 14
12434: PUSH
12435: LD_INT 3
12437: ARRAY
12438: GREATEREQUAL
12439: AND
12440: IFFALSE 12452
// result := weapon ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_VAR 0 18
12451: ST_TO_ADDR
// end ; end ;
12452: LD_VAR 0 3
12456: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12457: LD_INT 0
12459: PPUSH
12460: PPUSH
// result := true ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if array1 = array2 then
12469: LD_VAR 0 1
12473: PUSH
12474: LD_VAR 0 2
12478: EQUAL
12479: IFFALSE 12539
// begin for i = 1 to array1 do
12481: LD_ADDR_VAR 0 4
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_VAR 0 1
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12535
// if array1 [ i ] <> array2 [ i ] then
12499: LD_VAR 0 1
12503: PUSH
12504: LD_VAR 0 4
12508: ARRAY
12509: PUSH
12510: LD_VAR 0 2
12514: PUSH
12515: LD_VAR 0 4
12519: ARRAY
12520: NONEQUAL
12521: IFFALSE 12533
// begin result := false ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// break ;
12531: GO 12535
// end ;
12533: GO 12496
12535: POP
12536: POP
// end else
12537: GO 12547
// result := false ;
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 3
12551: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// if not array1 or not array2 then
12556: LD_VAR 0 1
12560: NOT
12561: PUSH
12562: LD_VAR 0 2
12566: NOT
12567: OR
12568: IFFALSE 12572
// exit ;
12570: GO 12636
// result := true ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 1
12579: ST_TO_ADDR
// for i = 1 to array1 do
12580: LD_ADDR_VAR 0 4
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_VAR 0 1
12594: PUSH
12595: FOR_TO
12596: IFFALSE 12634
// if array1 [ i ] <> array2 [ i ] then
12598: LD_VAR 0 1
12602: PUSH
12603: LD_VAR 0 4
12607: ARRAY
12608: PUSH
12609: LD_VAR 0 2
12613: PUSH
12614: LD_VAR 0 4
12618: ARRAY
12619: NONEQUAL
12620: IFFALSE 12632
// begin result := false ;
12622: LD_ADDR_VAR 0 3
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// break ;
12630: GO 12634
// end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: LD_VAR 0 3
12640: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12641: LD_INT 0
12643: PPUSH
12644: PPUSH
12645: PPUSH
// pom := GetBase ( fac ) ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 274
12660: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 2
12679: PUSH
12680: LD_INT 2
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 3
12691: ARRAY
12692: PPUSH
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 4
12700: ARRAY
12701: PPUSH
12702: CALL_OW 449
12706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_VAR 0 5
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 275
12724: PUSH
12725: LD_VAR 0 4
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: GREATEREQUAL
12734: PUSH
12735: LD_VAR 0 5
12739: PPUSH
12740: LD_INT 2
12742: PPUSH
12743: CALL_OW 275
12747: PUSH
12748: LD_VAR 0 4
12752: PUSH
12753: LD_INT 2
12755: ARRAY
12756: GREATEREQUAL
12757: AND
12758: PUSH
12759: LD_VAR 0 5
12763: PPUSH
12764: LD_INT 3
12766: PPUSH
12767: CALL_OW 275
12771: PUSH
12772: LD_VAR 0 4
12776: PUSH
12777: LD_INT 3
12779: ARRAY
12780: GREATEREQUAL
12781: AND
12782: ST_TO_ADDR
// end ;
12783: LD_VAR 0 3
12787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12788: LD_INT 0
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// pom := GetBase ( building ) ;
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 274
12808: ST_TO_ADDR
// if not pom then
12809: LD_VAR 0 3
12813: NOT
12814: IFFALSE 12818
// exit ;
12816: GO 12988
// btype := GetBType ( building ) ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 266
12832: ST_TO_ADDR
// if btype = b_armoury then
12833: LD_VAR 0 5
12837: PUSH
12838: LD_INT 4
12840: EQUAL
12841: IFFALSE 12851
// btype := b_barracks ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_INT 5
12850: ST_TO_ADDR
// if btype = b_depot then
12851: LD_VAR 0 5
12855: PUSH
12856: LD_INT 0
12858: EQUAL
12859: IFFALSE 12869
// btype := b_warehouse ;
12861: LD_ADDR_VAR 0 5
12865: PUSH
12866: LD_INT 1
12868: ST_TO_ADDR
// if btype = b_workshop then
12869: LD_VAR 0 5
12873: PUSH
12874: LD_INT 2
12876: EQUAL
12877: IFFALSE 12887
// btype := b_factory ;
12879: LD_ADDR_VAR 0 5
12883: PUSH
12884: LD_INT 3
12886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_VAR 0 5
12896: PPUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 248
12906: PPUSH
12907: CALL_OW 450
12911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 275
12929: PUSH
12930: LD_VAR 0 4
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: GREATEREQUAL
12939: PUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 2
12947: PPUSH
12948: CALL_OW 275
12952: PUSH
12953: LD_VAR 0 4
12957: PUSH
12958: LD_INT 2
12960: ARRAY
12961: GREATEREQUAL
12962: AND
12963: PUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 3
12971: PPUSH
12972: CALL_OW 275
12976: PUSH
12977: LD_VAR 0 4
12981: PUSH
12982: LD_INT 3
12984: ARRAY
12985: GREATEREQUAL
12986: AND
12987: ST_TO_ADDR
// end ;
12988: LD_VAR 0 2
12992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12993: LD_INT 0
12995: PPUSH
12996: PPUSH
12997: PPUSH
// pom := GetBase ( building ) ;
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 274
13012: ST_TO_ADDR
// if not pom then
13013: LD_VAR 0 4
13017: NOT
13018: IFFALSE 13022
// exit ;
13020: GO 13123
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_VAR 0 2
13031: PPUSH
13032: LD_VAR 0 1
13036: PPUSH
13037: CALL_OW 248
13041: PPUSH
13042: CALL_OW 450
13046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_VAR 0 4
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 275
13064: PUSH
13065: LD_VAR 0 5
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: GREATEREQUAL
13074: PUSH
13075: LD_VAR 0 4
13079: PPUSH
13080: LD_INT 2
13082: PPUSH
13083: CALL_OW 275
13087: PUSH
13088: LD_VAR 0 5
13092: PUSH
13093: LD_INT 2
13095: ARRAY
13096: GREATEREQUAL
13097: AND
13098: PUSH
13099: LD_VAR 0 4
13103: PPUSH
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 275
13111: PUSH
13112: LD_VAR 0 5
13116: PUSH
13117: LD_INT 3
13119: ARRAY
13120: GREATEREQUAL
13121: AND
13122: ST_TO_ADDR
// end ;
13123: LD_VAR 0 3
13127: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// result := false ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13149: LD_VAR 0 5
13153: NOT
13154: PUSH
13155: LD_VAR 0 1
13159: NOT
13160: OR
13161: PUSH
13162: LD_VAR 0 2
13166: NOT
13167: OR
13168: PUSH
13169: LD_VAR 0 3
13173: NOT
13174: OR
13175: IFFALSE 13179
// exit ;
13177: GO 13993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13179: LD_ADDR_VAR 0 14
13183: PUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: LD_VAR 0 2
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_VAR 0 4
13203: PPUSH
13204: LD_VAR 0 5
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PPUSH
13213: CALL_OW 248
13217: PPUSH
13218: LD_INT 0
13220: PPUSH
13221: CALL 15226 0 6
13225: ST_TO_ADDR
// if not hexes then
13226: LD_VAR 0 14
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13993
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13235: LD_ADDR_VAR 0 17
13239: PUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: LD_INT 22
13247: PUSH
13248: LD_VAR 0 13
13252: PPUSH
13253: CALL_OW 255
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 30
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 30
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 72
13298: ST_TO_ADDR
// for i = 1 to hexes do
13299: LD_ADDR_VAR 0 9
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 14
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13317: LD_ADDR_VAR 0 13
13321: PUSH
13322: LD_VAR 0 14
13326: PUSH
13327: LD_VAR 0 9
13331: ARRAY
13332: PUSH
13333: LD_INT 1
13335: ARRAY
13336: PPUSH
13337: LD_VAR 0 14
13341: PUSH
13342: LD_VAR 0 9
13346: ARRAY
13347: PUSH
13348: LD_INT 2
13350: ARRAY
13351: PPUSH
13352: CALL_OW 428
13356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13357: LD_VAR 0 14
13361: PUSH
13362: LD_VAR 0 9
13366: ARRAY
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_VAR 0 14
13376: PUSH
13377: LD_VAR 0 9
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: CALL_OW 351
13391: PUSH
13392: LD_VAR 0 14
13396: PUSH
13397: LD_VAR 0 9
13401: ARRAY
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 14
13411: PUSH
13412: LD_VAR 0 9
13416: ARRAY
13417: PUSH
13418: LD_INT 2
13420: ARRAY
13421: PPUSH
13422: CALL_OW 488
13426: NOT
13427: OR
13428: PUSH
13429: LD_VAR 0 13
13433: PPUSH
13434: CALL_OW 247
13438: PUSH
13439: LD_INT 3
13441: EQUAL
13442: OR
13443: IFFALSE 13449
// exit ;
13445: POP
13446: POP
13447: GO 13993
// if not tmp then
13449: LD_VAR 0 13
13453: NOT
13454: IFFALSE 13458
// continue ;
13456: GO 13314
// result := true ;
13458: LD_ADDR_VAR 0 8
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13466: LD_VAR 0 6
13470: PUSH
13471: LD_VAR 0 13
13475: PPUSH
13476: CALL_OW 247
13480: PUSH
13481: LD_INT 2
13483: EQUAL
13484: AND
13485: PUSH
13486: LD_VAR 0 13
13490: PPUSH
13491: CALL_OW 263
13495: PUSH
13496: LD_INT 1
13498: EQUAL
13499: AND
13500: IFFALSE 13664
// begin if IsDrivenBy ( tmp ) then
13502: LD_VAR 0 13
13506: PPUSH
13507: CALL_OW 311
13511: IFFALSE 13515
// continue ;
13513: GO 13314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13515: LD_VAR 0 6
13519: PPUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 60
13525: PUSH
13526: EMPTY
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 3
13535: PUSH
13536: LD_INT 55
13538: PUSH
13539: EMPTY
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: IFFALSE 13662
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13556: LD_ADDR_VAR 0 18
13560: PUSH
13561: LD_VAR 0 6
13565: PPUSH
13566: LD_INT 3
13568: PUSH
13569: LD_INT 60
13571: PUSH
13572: EMPTY
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: LD_INT 55
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: ST_TO_ADDR
// if IsInUnit ( driver ) then
13605: LD_VAR 0 18
13609: PPUSH
13610: CALL_OW 310
13614: IFFALSE 13625
// ComExit ( driver ) ;
13616: LD_VAR 0 18
13620: PPUSH
13621: CALL 39006 0 1
// AddComEnterUnit ( driver , tmp ) ;
13625: LD_VAR 0 18
13629: PPUSH
13630: LD_VAR 0 13
13634: PPUSH
13635: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13639: LD_VAR 0 18
13643: PPUSH
13644: LD_VAR 0 7
13648: PPUSH
13649: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13653: LD_VAR 0 18
13657: PPUSH
13658: CALL_OW 181
// end ; continue ;
13662: GO 13314
// end ; if not cleaners or not tmp in cleaners then
13664: LD_VAR 0 6
13668: NOT
13669: PUSH
13670: LD_VAR 0 13
13674: PUSH
13675: LD_VAR 0 6
13679: IN
13680: NOT
13681: OR
13682: IFFALSE 13989
// begin if dep then
13684: LD_VAR 0 17
13688: IFFALSE 13824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13690: LD_ADDR_VAR 0 16
13694: PUSH
13695: LD_VAR 0 17
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 250
13708: PPUSH
13709: LD_VAR 0 17
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: PPUSH
13718: CALL_OW 254
13722: PPUSH
13723: LD_INT 5
13725: PPUSH
13726: CALL_OW 272
13730: PUSH
13731: LD_VAR 0 17
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PPUSH
13740: CALL_OW 251
13744: PPUSH
13745: LD_VAR 0 17
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 254
13758: PPUSH
13759: LD_INT 5
13761: PPUSH
13762: CALL_OW 273
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13771: LD_VAR 0 16
13775: PUSH
13776: LD_INT 1
13778: ARRAY
13779: PPUSH
13780: LD_VAR 0 16
13784: PUSH
13785: LD_INT 2
13787: ARRAY
13788: PPUSH
13789: CALL_OW 488
13793: IFFALSE 13824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13795: LD_VAR 0 13
13799: PPUSH
13800: LD_VAR 0 16
13804: PUSH
13805: LD_INT 1
13807: ARRAY
13808: PPUSH
13809: LD_VAR 0 16
13813: PUSH
13814: LD_INT 2
13816: ARRAY
13817: PPUSH
13818: CALL_OW 111
// continue ;
13822: GO 13314
// end ; end ; r := GetDir ( tmp ) ;
13824: LD_ADDR_VAR 0 15
13828: PUSH
13829: LD_VAR 0 13
13833: PPUSH
13834: CALL_OW 254
13838: ST_TO_ADDR
// if r = 5 then
13839: LD_VAR 0 15
13843: PUSH
13844: LD_INT 5
13846: EQUAL
13847: IFFALSE 13857
// r := 0 ;
13849: LD_ADDR_VAR 0 15
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// for j = r to 5 do
13857: LD_ADDR_VAR 0 10
13861: PUSH
13862: DOUBLE
13863: LD_VAR 0 15
13867: DEC
13868: ST_TO_ADDR
13869: LD_INT 5
13871: PUSH
13872: FOR_TO
13873: IFFALSE 13987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13875: LD_ADDR_VAR 0 11
13879: PUSH
13880: LD_VAR 0 13
13884: PPUSH
13885: CALL_OW 250
13889: PPUSH
13890: LD_VAR 0 10
13894: PPUSH
13895: LD_INT 2
13897: PPUSH
13898: CALL_OW 272
13902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13903: LD_ADDR_VAR 0 12
13907: PUSH
13908: LD_VAR 0 13
13912: PPUSH
13913: CALL_OW 251
13917: PPUSH
13918: LD_VAR 0 10
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 273
13930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13931: LD_VAR 0 11
13935: PPUSH
13936: LD_VAR 0 12
13940: PPUSH
13941: CALL_OW 488
13945: PUSH
13946: LD_VAR 0 11
13950: PPUSH
13951: LD_VAR 0 12
13955: PPUSH
13956: CALL_OW 428
13960: NOT
13961: AND
13962: IFFALSE 13985
// begin ComMoveXY ( tmp , _x , _y ) ;
13964: LD_VAR 0 13
13968: PPUSH
13969: LD_VAR 0 11
13973: PPUSH
13974: LD_VAR 0 12
13978: PPUSH
13979: CALL_OW 111
// break ;
13983: GO 13987
// end ; end ;
13985: GO 13872
13987: POP
13988: POP
// end ; end ;
13989: GO 13314
13991: POP
13992: POP
// end ;
13993: LD_VAR 0 8
13997: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13998: LD_INT 0
14000: PPUSH
// result := true ;
14001: LD_ADDR_VAR 0 3
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14009: LD_VAR 0 2
14013: PUSH
14014: LD_INT 24
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14028
14020: LD_INT 33
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14053
14028: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 32
14036: PPUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 321
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: ST_TO_ADDR
14051: GO 14369
14053: LD_INT 20
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14086
14061: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14062: LD_ADDR_VAR 0 3
14066: PUSH
14067: LD_INT 6
14069: PPUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: ST_TO_ADDR
14084: GO 14369
14086: LD_INT 22
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14100
14092: LD_INT 36
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14125
14100: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14101: LD_ADDR_VAR 0 3
14105: PUSH
14106: LD_INT 15
14108: PPUSH
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 321
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: ST_TO_ADDR
14123: GO 14369
14125: LD_INT 30
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14158
14133: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14134: LD_ADDR_VAR 0 3
14138: PUSH
14139: LD_INT 20
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 321
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: ST_TO_ADDR
14156: GO 14369
14158: LD_INT 28
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14172
14164: LD_INT 21
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14197
14172: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 21
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 321
14190: PUSH
14191: LD_INT 2
14193: EQUAL
14194: ST_TO_ADDR
14195: GO 14369
14197: LD_INT 16
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14230
14205: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_INT 84
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 321
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: ST_TO_ADDR
14228: GO 14369
14230: LD_INT 19
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14244
14236: LD_INT 23
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14269
14244: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 83
14252: PPUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 321
14262: PUSH
14263: LD_INT 2
14265: EQUAL
14266: ST_TO_ADDR
14267: GO 14369
14269: LD_INT 17
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14302
14277: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 39
14285: PPUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 321
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: ST_TO_ADDR
14300: GO 14369
14302: LD_INT 18
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14335
14310: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 40
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 321
14328: PUSH
14329: LD_INT 2
14331: EQUAL
14332: ST_TO_ADDR
14333: GO 14369
14335: LD_INT 27
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14368
14343: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 35
14351: PPUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 321
14361: PUSH
14362: LD_INT 2
14364: EQUAL
14365: ST_TO_ADDR
14366: GO 14369
14368: POP
// end ;
14369: LD_VAR 0 3
14373: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// result := false ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14395: LD_VAR 0 1
14399: NOT
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: IN
14421: NOT
14422: OR
14423: PUSH
14424: LD_VAR 0 2
14428: NOT
14429: OR
14430: PUSH
14431: LD_VAR 0 5
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: IN
14462: NOT
14463: OR
14464: PUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_VAR 0 4
14474: PPUSH
14475: CALL_OW 488
14479: NOT
14480: OR
14481: IFFALSE 14485
// exit ;
14483: GO 15221
// side := GetSide ( depot ) ;
14485: LD_ADDR_VAR 0 9
14489: PUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14500: LD_VAR 0 9
14504: PPUSH
14505: LD_VAR 0 2
14509: PPUSH
14510: CALL 13998 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 15221
// pom := GetBase ( depot ) ;
14519: LD_ADDR_VAR 0 10
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 274
14533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14534: LD_ADDR_VAR 0 11
14538: PUSH
14539: LD_VAR 0 2
14543: PPUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 248
14553: PPUSH
14554: CALL_OW 450
14558: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14559: LD_VAR 0 10
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 275
14571: PUSH
14572: LD_VAR 0 11
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: GREATEREQUAL
14581: PUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 11
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: GREATEREQUAL
14604: AND
14605: PUSH
14606: LD_VAR 0 10
14610: PPUSH
14611: LD_INT 3
14613: PPUSH
14614: CALL_OW 275
14618: PUSH
14619: LD_VAR 0 11
14623: PUSH
14624: LD_INT 3
14626: ARRAY
14627: GREATEREQUAL
14628: AND
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 15221
// if GetBType ( depot ) = b_depot then
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 266
14643: PUSH
14644: LD_INT 0
14646: EQUAL
14647: IFFALSE 14659
// dist := 28 else
14649: LD_ADDR_VAR 0 14
14653: PUSH
14654: LD_INT 28
14656: ST_TO_ADDR
14657: GO 14667
// dist := 36 ;
14659: LD_ADDR_VAR 0 14
14663: PUSH
14664: LD_INT 36
14666: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_VAR 0 4
14681: PPUSH
14682: CALL_OW 297
14686: PUSH
14687: LD_VAR 0 14
14691: GREATER
14692: IFFALSE 14696
// exit ;
14694: GO 15221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14696: LD_ADDR_VAR 0 12
14700: PUSH
14701: LD_VAR 0 2
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: LD_VAR 0 5
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 248
14730: PPUSH
14731: LD_INT 0
14733: PPUSH
14734: CALL 15226 0 6
14738: ST_TO_ADDR
// if not hexes then
14739: LD_VAR 0 12
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 15221
// hex := GetHexInfo ( x , y ) ;
14748: LD_ADDR_VAR 0 15
14752: PUSH
14753: LD_VAR 0 3
14757: PPUSH
14758: LD_VAR 0 4
14762: PPUSH
14763: CALL_OW 546
14767: ST_TO_ADDR
// if hex [ 1 ] then
14768: LD_VAR 0 15
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: IFFALSE 14780
// exit ;
14778: GO 15221
// height := hex [ 2 ] ;
14780: LD_ADDR_VAR 0 13
14784: PUSH
14785: LD_VAR 0 15
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: ST_TO_ADDR
// for i = 1 to hexes do
14794: LD_ADDR_VAR 0 7
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_VAR 0 12
14808: PUSH
14809: FOR_TO
14810: IFFALSE 15140
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14812: LD_VAR 0 12
14816: PUSH
14817: LD_VAR 0 7
14821: ARRAY
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: LD_VAR 0 12
14831: PUSH
14832: LD_VAR 0 7
14836: ARRAY
14837: PUSH
14838: LD_INT 2
14840: ARRAY
14841: PPUSH
14842: CALL_OW 488
14846: NOT
14847: PUSH
14848: LD_VAR 0 12
14852: PUSH
14853: LD_VAR 0 7
14857: ARRAY
14858: PUSH
14859: LD_INT 1
14861: ARRAY
14862: PPUSH
14863: LD_VAR 0 12
14867: PUSH
14868: LD_VAR 0 7
14872: ARRAY
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: CALL_OW 428
14882: PUSH
14883: LD_INT 0
14885: GREATER
14886: OR
14887: PUSH
14888: LD_VAR 0 12
14892: PUSH
14893: LD_VAR 0 7
14897: ARRAY
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: PPUSH
14903: LD_VAR 0 12
14907: PUSH
14908: LD_VAR 0 7
14912: ARRAY
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: CALL_OW 351
14922: OR
14923: IFFALSE 14929
// exit ;
14925: POP
14926: POP
14927: GO 15221
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14929: LD_ADDR_VAR 0 8
14933: PUSH
14934: LD_VAR 0 12
14938: PUSH
14939: LD_VAR 0 7
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 12
14953: PUSH
14954: LD_VAR 0 7
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: PPUSH
14964: CALL_OW 546
14968: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14969: LD_VAR 0 8
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PUSH
14978: LD_VAR 0 8
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PUSH
14987: LD_VAR 0 13
14991: PUSH
14992: LD_INT 2
14994: PLUS
14995: GREATER
14996: OR
14997: PUSH
14998: LD_VAR 0 8
15002: PUSH
15003: LD_INT 2
15005: ARRAY
15006: PUSH
15007: LD_VAR 0 13
15011: PUSH
15012: LD_INT 2
15014: MINUS
15015: LESS
15016: OR
15017: PUSH
15018: LD_VAR 0 8
15022: PUSH
15023: LD_INT 3
15025: ARRAY
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 8
15032: PUSH
15033: LD_INT 9
15035: PUSH
15036: LD_INT 10
15038: PUSH
15039: LD_INT 11
15041: PUSH
15042: LD_INT 12
15044: PUSH
15045: LD_INT 13
15047: PUSH
15048: LD_INT 16
15050: PUSH
15051: LD_INT 17
15053: PUSH
15054: LD_INT 18
15056: PUSH
15057: LD_INT 19
15059: PUSH
15060: LD_INT 20
15062: PUSH
15063: LD_INT 21
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: IN
15081: NOT
15082: OR
15083: PUSH
15084: LD_VAR 0 8
15088: PUSH
15089: LD_INT 5
15091: ARRAY
15092: NOT
15093: OR
15094: PUSH
15095: LD_VAR 0 8
15099: PUSH
15100: LD_INT 6
15102: ARRAY
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: LD_INT 7
15112: PUSH
15113: LD_INT 9
15115: PUSH
15116: LD_INT 10
15118: PUSH
15119: LD_INT 11
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: IN
15130: NOT
15131: OR
15132: IFFALSE 15138
// exit ;
15134: POP
15135: POP
15136: GO 15221
// end ;
15138: GO 14809
15140: POP
15141: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15142: LD_VAR 0 9
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_VAR 0 4
15156: PPUSH
15157: LD_INT 20
15159: PPUSH
15160: CALL 7173 0 4
15164: PUSH
15165: LD_INT 4
15167: ARRAY
15168: IFFALSE 15172
// exit ;
15170: GO 15221
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 29
15179: PUSH
15180: LD_INT 30
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: IN
15187: PUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_VAR 0 4
15197: PPUSH
15198: LD_VAR 0 9
15202: PPUSH
15203: CALL_OW 440
15207: NOT
15208: AND
15209: IFFALSE 15213
// exit ;
15211: GO 15221
// result := true ;
15213: LD_ADDR_VAR 0 6
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// end ;
15221: LD_VAR 0 6
15225: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
// result = [ ] ;
15286: LD_ADDR_VAR 0 7
15290: PUSH
15291: EMPTY
15292: ST_TO_ADDR
// temp_list = [ ] ;
15293: LD_ADDR_VAR 0 9
15297: PUSH
15298: EMPTY
15299: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15300: LD_VAR 0 4
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 4
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: IN
15331: NOT
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: IN
15348: PUSH
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: AND
15370: OR
15371: IFFALSE 15375
// exit ;
15373: GO 33766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 6
15382: PUSH
15383: LD_INT 7
15385: PUSH
15386: LD_INT 8
15388: PUSH
15389: LD_INT 13
15391: PUSH
15392: LD_INT 12
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: LD_INT 10
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: IN
15418: IFFALSE 15428
// btype = b_lab ;
15420: LD_ADDR_VAR 0 1
15424: PUSH
15425: LD_INT 6
15427: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15428: LD_VAR 0 6
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: IN
15447: NOT
15448: PUSH
15449: LD_VAR 0 1
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: LD_INT 3
15465: PUSH
15466: LD_INT 6
15468: PUSH
15469: LD_INT 36
15471: PUSH
15472: LD_INT 4
15474: PUSH
15475: LD_INT 5
15477: PUSH
15478: LD_INT 31
15480: PUSH
15481: LD_INT 32
15483: PUSH
15484: LD_INT 33
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: IN
15500: NOT
15501: PUSH
15502: LD_VAR 0 6
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: OR
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: IN
15528: NOT
15529: PUSH
15530: LD_VAR 0 6
15534: PUSH
15535: LD_INT 2
15537: EQUAL
15538: AND
15539: OR
15540: IFFALSE 15550
// mode = 0 ;
15542: LD_ADDR_VAR 0 6
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// case mode of 0 :
15550: LD_VAR 0 6
15554: PUSH
15555: LD_INT 0
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 27016
15563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15564: LD_ADDR_VAR 0 11
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 2
15649: NEG
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 2
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: NEG
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15757: LD_ADDR_VAR 0 12
15761: PUSH
15762: LD_INT 0
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: LD_INT 1
15777: NEG
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 1
15815: NEG
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: NEG
15827: PUSH
15828: LD_INT 1
15830: NEG
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 2
15880: NEG
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 2
15891: NEG
15892: PUSH
15893: LD_INT 1
15895: NEG
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: NEG
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 3
15914: NEG
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 3
15925: NEG
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15953: LD_ADDR_VAR 0 13
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 2
16076: NEG
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: NEG
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: NEG
16101: PUSH
16102: LD_INT 3
16104: NEG
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 3
16112: NEG
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 3
16124: NEG
16125: PUSH
16126: LD_INT 3
16128: NEG
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16152: LD_ADDR_VAR 0 14
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: NEG
16222: PUSH
16223: LD_INT 1
16225: NEG
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 2
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: LD_INT 2
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: NEG
16299: PUSH
16300: LD_INT 3
16302: NEG
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 3
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 2
16324: NEG
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16348: LD_ADDR_VAR 0 15
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 3
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16541: LD_ADDR_VAR 0 16
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 2
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 2
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 2
16664: NEG
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: NEG
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16734: LD_ADDR_VAR 0 17
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 1
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: LD_INT 0
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: LD_INT 1
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 1
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: NEG
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 2
16921: NEG
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: NEG
16934: PUSH
16935: LD_INT 2
16937: NEG
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16964: LD_ADDR_VAR 0 18
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: NEG
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: LD_INT 2
17049: NEG
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 1
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: NEG
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: NEG
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17194: LD_ADDR_VAR 0 19
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: NEG
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: NEG
17394: PUSH
17395: LD_INT 2
17397: NEG
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17424: LD_ADDR_VAR 0 20
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: NEG
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 2
17509: NEG
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 2
17600: NEG
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 2
17627: NEG
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17654: LD_ADDR_VAR 0 21
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 0
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: NEG
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: NEG
17736: PUSH
17737: LD_INT 2
17739: NEG
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: NEG
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17884: LD_ADDR_VAR 0 22
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 2
18060: NEG
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18114: LD_ADDR_VAR 0 23
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: NEG
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 2
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: LD_INT 3
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 3
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18394: LD_ADDR_VAR 0 24
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 3
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18670: LD_ADDR_VAR 0 25
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 2
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: NEG
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18944: LD_ADDR_VAR 0 26
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19220: LD_ADDR_VAR 0 27
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 3
19453: NEG
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 3
19465: NEG
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19500: LD_ADDR_VAR 0 28
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: LD_INT 3
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 3
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 3
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 3
19747: NEG
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19782: LD_ADDR_VAR 0 29
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: NEG
19973: PUSH
19974: LD_INT 3
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 3
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 3
20026: NEG
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20061: LD_ADDR_VAR 0 30
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 3
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20339: LD_ADDR_VAR 0 31
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 2
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 3
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 3
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: NEG
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20617: LD_ADDR_VAR 0 32
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 3
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 3
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 3
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20895: LD_ADDR_VAR 0 33
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: LD_INT 3
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 3
21139: NEG
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21174: LD_ADDR_VAR 0 34
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 3
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 3
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21454: LD_ADDR_VAR 0 35
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21566: LD_ADDR_VAR 0 36
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21678: LD_ADDR_VAR 0 37
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 1
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21790: LD_ADDR_VAR 0 38
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21902: LD_ADDR_VAR 0 39
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22014: LD_ADDR_VAR 0 40
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22126: LD_ADDR_VAR 0 41
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 3
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 3
22400: NEG
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 3
22411: NEG
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 3
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 3
22435: NEG
22436: PUSH
22437: LD_INT 3
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22476: LD_ADDR_VAR 0 42
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: LD_INT 3
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: LD_INT 2
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 3
22773: NEG
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: NEG
22786: PUSH
22787: LD_INT 3
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22826: LD_ADDR_VAR 0 43
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: LD_INT 3
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 3
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 3
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 3
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 3
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23174: LD_ADDR_VAR 0 44
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: LD_INT 3
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 3
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 3
23459: NEG
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 3
23483: NEG
23484: PUSH
23485: LD_INT 3
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23524: LD_ADDR_VAR 0 45
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 3
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 3
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: NEG
23834: PUSH
23835: LD_INT 3
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23874: LD_ADDR_VAR 0 46
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 2
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 3
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 3
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 3
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24222: LD_ADDR_VAR 0 47
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24373: LD_ADDR_VAR 0 48
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24520: LD_ADDR_VAR 0 49
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24664: LD_ADDR_VAR 0 50
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24808: LD_ADDR_VAR 0 51
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24955: LD_ADDR_VAR 0 52
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25106: LD_ADDR_VAR 0 53
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25336: LD_ADDR_VAR 0 54
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25566: LD_ADDR_VAR 0 55
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25796: LD_ADDR_VAR 0 56
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26026: LD_ADDR_VAR 0 57
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26256: LD_ADDR_VAR 0 58
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26486: LD_ADDR_VAR 0 59
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26574: LD_ADDR_VAR 0 60
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26662: LD_ADDR_VAR 0 61
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26750: LD_ADDR_VAR 0 62
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26838: LD_ADDR_VAR 0 63
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26926: LD_ADDR_VAR 0 64
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: ST_TO_ADDR
// end ; 1 :
27014: GO 32911
27016: LD_INT 1
27018: DOUBLE
27019: EQUAL
27020: IFTRUE 27024
27022: GO 29647
27024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27025: LD_ADDR_VAR 0 11
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27069: LD_ADDR_VAR 0 12
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27110: LD_ADDR_VAR 0 13
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27150: LD_ADDR_VAR 0 14
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27191: LD_ADDR_VAR 0 15
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27235: LD_ADDR_VAR 0 16
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 3
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27281: LD_ADDR_VAR 0 17
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 3
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 3
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 2
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27325: LD_ADDR_VAR 0 18
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27366: LD_ADDR_VAR 0 19
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27406: LD_ADDR_VAR 0 20
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 3
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27447: LD_ADDR_VAR 0 21
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: NEG
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27491: LD_ADDR_VAR 0 22
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 3
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 3
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 3
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27537: LD_ADDR_VAR 0 23
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 4
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27581: LD_ADDR_VAR 0 24
27585: PUSH
27586: LD_INT 3
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27622: LD_ADDR_VAR 0 25
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: LD_INT 3
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27662: LD_ADDR_VAR 0 26
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27703: LD_ADDR_VAR 0 27
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 4
27732: NEG
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27747: LD_ADDR_VAR 0 28
27751: PUSH
27752: LD_INT 3
27754: NEG
27755: PUSH
27756: LD_INT 3
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: NEG
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 4
27778: NEG
27779: PUSH
27780: LD_INT 3
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27793: LD_ADDR_VAR 0 29
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 3
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 3
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 4
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 4
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 5
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 5
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 4
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: LD_INT 6
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 6
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 5
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27948: LD_ADDR_VAR 0 30
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 4
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 4
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 4
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 5
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 6
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28091: LD_ADDR_VAR 0 31
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 3
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 4
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 4
28138: PUSH
28139: LD_INT 4
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 4
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 5
28158: PUSH
28159: LD_INT 4
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: LD_INT 5
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 6
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 6
28198: PUSH
28199: LD_INT 6
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 5
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28230: LD_ADDR_VAR 0 32
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 4
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 4
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 5
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 6
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 6
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 5
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28373: LD_ADDR_VAR 0 33
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 3
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 3
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 4
28425: NEG
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 4
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 4
28448: NEG
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 5
28459: NEG
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 5
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 5
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 6
28493: NEG
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 6
28504: NEG
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28528: LD_ADDR_VAR 0 34
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 3
28547: NEG
28548: PUSH
28549: LD_INT 2
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 3
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 4
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 4
28583: NEG
28584: PUSH
28585: LD_INT 3
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 4
28595: NEG
28596: PUSH
28597: LD_INT 4
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 4
28607: NEG
28608: PUSH
28609: LD_INT 5
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 5
28619: NEG
28620: PUSH
28621: LD_INT 4
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 5
28631: NEG
28632: PUSH
28633: LD_INT 5
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 5
28643: NEG
28644: PUSH
28645: LD_INT 6
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 6
28655: NEG
28656: PUSH
28657: LD_INT 5
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 6
28667: NEG
28668: PUSH
28669: LD_INT 6
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28691: LD_ADDR_VAR 0 41
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28735: LD_ADDR_VAR 0 42
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28776: LD_ADDR_VAR 0 43
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28816: LD_ADDR_VAR 0 44
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28857: LD_ADDR_VAR 0 45
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28901: LD_ADDR_VAR 0 46
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 3
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28947: LD_ADDR_VAR 0 47
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 3
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28980: LD_ADDR_VAR 0 48
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29011: LD_ADDR_VAR 0 49
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29040: LD_ADDR_VAR 0 50
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29069: LD_ADDR_VAR 0 51
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29100: LD_ADDR_VAR 0 52
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 53
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 54
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 55
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 56
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 57
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 58
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29389: LD_ADDR_VAR 0 59
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29433: LD_ADDR_VAR 0 60
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29474: LD_ADDR_VAR 0 61
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29514: LD_ADDR_VAR 0 62
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 63
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29599: LD_ADDR_VAR 0 64
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// end ; 2 :
29645: GO 32911
29647: LD_INT 2
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 32910
29655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29656: LD_ADDR_VAR 0 29
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 5
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 5
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 4
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: LD_INT 4
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 4
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 5
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 4
29995: NEG
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 4
30006: NEG
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: NEG
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 4
30053: NEG
30054: PUSH
30055: LD_INT 5
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 5
30101: NEG
30102: PUSH
30103: LD_INT 4
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 5
30113: NEG
30114: PUSH
30115: LD_INT 5
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: LD_INT 5
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 5
30137: NEG
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30194: LD_ADDR_VAR 0 30
30198: PUSH
30199: LD_INT 4
30201: PUSH
30202: LD_INT 4
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 5
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 5
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 5
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 4
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 4
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 4
30384: NEG
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 4
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: NEG
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 5
30440: NEG
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 5
30451: NEG
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 4
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 4
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 4
30558: NEG
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 4
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 4
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 5
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30741: LD_ADDR_VAR 0 31
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 4
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 4
30943: NEG
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: LD_INT 5
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: LD_INT 4
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 4
30991: NEG
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: LD_INT 4
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 5
31015: NEG
31016: PUSH
31017: LD_INT 5
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: LD_INT 5
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 5
31039: NEG
31040: PUSH
31041: LD_INT 3
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 4
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 5
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31291: LD_ADDR_VAR 0 32
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 4
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 5
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 5
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: LD_INT 4
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: LD_INT 3
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 4
31460: NEG
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 4
31472: NEG
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 4
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 4
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 5
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 5
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 4
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 4
31703: PUSH
31704: LD_INT 4
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 4
31743: PUSH
31744: LD_INT 5
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31838: LD_ADDR_VAR 0 33
31842: PUSH
31843: LD_INT 4
31845: NEG
31846: PUSH
31847: LD_INT 4
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 4
31857: NEG
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 5
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 5
31917: NEG
31918: PUSH
31919: LD_INT 5
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 5
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 4
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 5
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32376: LD_ADDR_VAR 0 34
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 5
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 4
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 5
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 4
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 4
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 3
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 4
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 5
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 5
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 5
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// end ; end ;
32908: GO 32911
32910: POP
// case btype of b_depot , b_warehouse :
32911: LD_VAR 0 1
32915: PUSH
32916: LD_INT 0
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32930
32922: LD_INT 1
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 33131
32930: POP
// case nation of nation_american :
32931: LD_VAR 0 5
32935: PUSH
32936: LD_INT 1
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 33000
32944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32945: LD_ADDR_VAR 0 9
32949: PUSH
32950: LD_VAR 0 11
32954: PUSH
32955: LD_VAR 0 12
32959: PUSH
32960: LD_VAR 0 13
32964: PUSH
32965: LD_VAR 0 14
32969: PUSH
32970: LD_VAR 0 15
32974: PUSH
32975: LD_VAR 0 16
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: LD_VAR 0 4
32992: PUSH
32993: LD_INT 1
32995: PLUS
32996: ARRAY
32997: ST_TO_ADDR
32998: GO 33129
33000: LD_INT 2
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33064
33008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33009: LD_ADDR_VAR 0 9
33013: PUSH
33014: LD_VAR 0 17
33018: PUSH
33019: LD_VAR 0 18
33023: PUSH
33024: LD_VAR 0 19
33028: PUSH
33029: LD_VAR 0 20
33033: PUSH
33034: LD_VAR 0 21
33038: PUSH
33039: LD_VAR 0 22
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: LD_VAR 0 4
33056: PUSH
33057: LD_INT 1
33059: PLUS
33060: ARRAY
33061: ST_TO_ADDR
33062: GO 33129
33064: LD_INT 3
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33128
33072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33073: LD_ADDR_VAR 0 9
33077: PUSH
33078: LD_VAR 0 23
33082: PUSH
33083: LD_VAR 0 24
33087: PUSH
33088: LD_VAR 0 25
33092: PUSH
33093: LD_VAR 0 26
33097: PUSH
33098: LD_VAR 0 27
33102: PUSH
33103: LD_VAR 0 28
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 1
33123: PLUS
33124: ARRAY
33125: ST_TO_ADDR
33126: GO 33129
33128: POP
33129: GO 33684
33131: LD_INT 2
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33145
33137: LD_INT 3
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33201
33145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_VAR 0 29
33155: PUSH
33156: LD_VAR 0 30
33160: PUSH
33161: LD_VAR 0 31
33165: PUSH
33166: LD_VAR 0 32
33170: PUSH
33171: LD_VAR 0 33
33175: PUSH
33176: LD_VAR 0 34
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: PUSH
33189: LD_VAR 0 4
33193: PUSH
33194: LD_INT 1
33196: PLUS
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33684
33201: LD_INT 16
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33263
33207: LD_INT 17
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33263
33213: LD_INT 18
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33263
33219: LD_INT 19
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33263
33225: LD_INT 22
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33263
33231: LD_INT 20
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33263
33237: LD_INT 21
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33263
33243: LD_INT 23
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33263
33249: LD_INT 24
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33263
33255: LD_INT 25
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33319
33263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33264: LD_ADDR_VAR 0 9
33268: PUSH
33269: LD_VAR 0 35
33273: PUSH
33274: LD_VAR 0 36
33278: PUSH
33279: LD_VAR 0 37
33283: PUSH
33284: LD_VAR 0 38
33288: PUSH
33289: LD_VAR 0 39
33293: PUSH
33294: LD_VAR 0 40
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: PUSH
33307: LD_VAR 0 4
33311: PUSH
33312: LD_INT 1
33314: PLUS
33315: ARRAY
33316: ST_TO_ADDR
33317: GO 33684
33319: LD_INT 6
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33375
33325: LD_INT 7
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33375
33331: LD_INT 8
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33375
33337: LD_INT 13
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33375
33343: LD_INT 12
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33375
33349: LD_INT 15
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33375
33355: LD_INT 11
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33375
33361: LD_INT 14
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33375
33367: LD_INT 10
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33431
33375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33376: LD_ADDR_VAR 0 9
33380: PUSH
33381: LD_VAR 0 41
33385: PUSH
33386: LD_VAR 0 42
33390: PUSH
33391: LD_VAR 0 43
33395: PUSH
33396: LD_VAR 0 44
33400: PUSH
33401: LD_VAR 0 45
33405: PUSH
33406: LD_VAR 0 46
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: LD_VAR 0 4
33423: PUSH
33424: LD_INT 1
33426: PLUS
33427: ARRAY
33428: ST_TO_ADDR
33429: GO 33684
33431: LD_INT 36
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33495
33439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33440: LD_ADDR_VAR 0 9
33444: PUSH
33445: LD_VAR 0 47
33449: PUSH
33450: LD_VAR 0 48
33454: PUSH
33455: LD_VAR 0 49
33459: PUSH
33460: LD_VAR 0 50
33464: PUSH
33465: LD_VAR 0 51
33469: PUSH
33470: LD_VAR 0 52
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: LD_VAR 0 4
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: ARRAY
33492: ST_TO_ADDR
33493: GO 33684
33495: LD_INT 4
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33521
33501: LD_INT 5
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33521
33507: LD_INT 34
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33521
33513: LD_INT 37
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33577
33521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_VAR 0 53
33531: PUSH
33532: LD_VAR 0 54
33536: PUSH
33537: LD_VAR 0 55
33541: PUSH
33542: LD_VAR 0 56
33546: PUSH
33547: LD_VAR 0 57
33551: PUSH
33552: LD_VAR 0 58
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: PUSH
33565: LD_VAR 0 4
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: ARRAY
33574: ST_TO_ADDR
33575: GO 33684
33577: LD_INT 31
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33627
33583: LD_INT 32
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33627
33589: LD_INT 33
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33627
33595: LD_INT 27
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33627
33601: LD_INT 26
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33627
33607: LD_INT 28
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33627
33613: LD_INT 29
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33627
33619: LD_INT 30
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33683
33627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_VAR 0 59
33637: PUSH
33638: LD_VAR 0 60
33642: PUSH
33643: LD_VAR 0 61
33647: PUSH
33648: LD_VAR 0 62
33652: PUSH
33653: LD_VAR 0 63
33657: PUSH
33658: LD_VAR 0 64
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PUSH
33671: LD_VAR 0 4
33675: PUSH
33676: LD_INT 1
33678: PLUS
33679: ARRAY
33680: ST_TO_ADDR
33681: GO 33684
33683: POP
// temp_list2 = [ ] ;
33684: LD_ADDR_VAR 0 10
33688: PUSH
33689: EMPTY
33690: ST_TO_ADDR
// for i in temp_list do
33691: LD_ADDR_VAR 0 8
33695: PUSH
33696: LD_VAR 0 9
33700: PUSH
33701: FOR_IN
33702: IFFALSE 33754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33704: LD_ADDR_VAR 0 10
33708: PUSH
33709: LD_VAR 0 10
33713: PUSH
33714: LD_VAR 0 8
33718: PUSH
33719: LD_INT 1
33721: ARRAY
33722: PUSH
33723: LD_VAR 0 2
33727: PLUS
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: LD_INT 2
33736: ARRAY
33737: PUSH
33738: LD_VAR 0 3
33742: PLUS
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: ADD
33751: ST_TO_ADDR
33752: GO 33701
33754: POP
33755: POP
// result = temp_list2 ;
33756: LD_ADDR_VAR 0 7
33760: PUSH
33761: LD_VAR 0 10
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 7
33770: RET
// export function EnemyInRange ( unit , dist ) ; begin
33771: LD_INT 0
33773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL_OW 255
33788: PPUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 250
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 251
33808: PPUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: CALL 7173 0 4
33818: PUSH
33819: LD_INT 4
33821: ARRAY
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 3
33827: RET
// export function PlayerSeeMe ( unit ) ; begin
33828: LD_INT 0
33830: PPUSH
// result := See ( your_side , unit ) ;
33831: LD_ADDR_VAR 0 2
33835: PUSH
33836: LD_OWVAR 2
33840: PPUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 292
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 2
33855: RET
// export function ReverseDir ( unit ) ; begin
33856: LD_INT 0
33858: PPUSH
// if not unit then
33859: LD_VAR 0 1
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 33891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33868: LD_ADDR_VAR 0 2
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 254
33882: PUSH
33883: LD_INT 3
33885: PLUS
33886: PUSH
33887: LD_INT 6
33889: MOD
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 2
33895: RET
// export function ReverseArray ( array ) ; var i ; begin
33896: LD_INT 0
33898: PPUSH
33899: PPUSH
// if not array then
33900: LD_VAR 0 1
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 33964
// result := [ ] ;
33909: LD_ADDR_VAR 0 2
33913: PUSH
33914: EMPTY
33915: ST_TO_ADDR
// for i := array downto 1 do
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: DOUBLE
33922: LD_VAR 0 1
33926: INC
33927: ST_TO_ADDR
33928: LD_INT 1
33930: PUSH
33931: FOR_DOWNTO
33932: IFFALSE 33962
// result := Join ( result , array [ i ] ) ;
33934: LD_ADDR_VAR 0 2
33938: PUSH
33939: LD_VAR 0 2
33943: PPUSH
33944: LD_VAR 0 1
33948: PUSH
33949: LD_VAR 0 3
33953: ARRAY
33954: PPUSH
33955: CALL 38608 0 2
33959: ST_TO_ADDR
33960: GO 33931
33962: POP
33963: POP
// end ;
33964: LD_VAR 0 2
33968: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33969: LD_INT 0
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
// if not unit or not hexes then
33977: LD_VAR 0 1
33981: NOT
33982: PUSH
33983: LD_VAR 0 2
33987: NOT
33988: OR
33989: IFFALSE 33993
// exit ;
33991: GO 34116
// dist := 9999 ;
33993: LD_ADDR_VAR 0 5
33997: PUSH
33998: LD_INT 9999
34000: ST_TO_ADDR
// for i = 1 to hexes do
34001: LD_ADDR_VAR 0 4
34005: PUSH
34006: DOUBLE
34007: LD_INT 1
34009: DEC
34010: ST_TO_ADDR
34011: LD_VAR 0 2
34015: PUSH
34016: FOR_TO
34017: IFFALSE 34104
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34019: LD_ADDR_VAR 0 6
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: LD_VAR 0 2
34033: PUSH
34034: LD_VAR 0 4
34038: ARRAY
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 2
34048: PUSH
34049: LD_VAR 0 4
34053: ARRAY
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: PPUSH
34059: CALL_OW 297
34063: ST_TO_ADDR
// if tdist < dist then
34064: LD_VAR 0 6
34068: PUSH
34069: LD_VAR 0 5
34073: LESS
34074: IFFALSE 34102
// begin hex := hexes [ i ] ;
34076: LD_ADDR_VAR 0 8
34080: PUSH
34081: LD_VAR 0 2
34085: PUSH
34086: LD_VAR 0 4
34090: ARRAY
34091: ST_TO_ADDR
// dist := tdist ;
34092: LD_ADDR_VAR 0 5
34096: PUSH
34097: LD_VAR 0 6
34101: ST_TO_ADDR
// end ; end ;
34102: GO 34016
34104: POP
34105: POP
// result := hex ;
34106: LD_ADDR_VAR 0 3
34110: PUSH
34111: LD_VAR 0 8
34115: ST_TO_ADDR
// end ;
34116: LD_VAR 0 3
34120: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34121: LD_INT 0
34123: PPUSH
34124: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34125: LD_VAR 0 1
34129: NOT
34130: PUSH
34131: LD_VAR 0 1
34135: PUSH
34136: LD_INT 21
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 23
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PPUSH
34160: CALL_OW 69
34164: IN
34165: NOT
34166: OR
34167: IFFALSE 34171
// exit ;
34169: GO 34218
// for i = 1 to 3 do
34171: LD_ADDR_VAR 0 3
34175: PUSH
34176: DOUBLE
34177: LD_INT 1
34179: DEC
34180: ST_TO_ADDR
34181: LD_INT 3
34183: PUSH
34184: FOR_TO
34185: IFFALSE 34216
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 250
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 251
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL_OW 453
34214: GO 34184
34216: POP
34217: POP
// end ;
34218: LD_VAR 0 2
34222: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34223: LD_INT 0
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34231: LD_VAR 0 1
34235: NOT
34236: PUSH
34237: LD_VAR 0 2
34241: NOT
34242: OR
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 314
34253: OR
34254: IFFALSE 34258
// exit ;
34256: GO 34725
// if GetLives ( i ) < 250 then
34258: LD_VAR 0 4
34262: PPUSH
34263: CALL_OW 256
34267: PUSH
34268: LD_INT 250
34270: LESS
34271: IFFALSE 34284
// begin ComAutodestruct ( i ) ;
34273: LD_VAR 0 4
34277: PPUSH
34278: CALL 34121 0 1
// exit ;
34282: GO 34725
// end ; x := GetX ( enemy_unit ) ;
34284: LD_ADDR_VAR 0 7
34288: PUSH
34289: LD_VAR 0 2
34293: PPUSH
34294: CALL_OW 250
34298: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34299: LD_ADDR_VAR 0 8
34303: PUSH
34304: LD_VAR 0 2
34308: PPUSH
34309: CALL_OW 251
34313: ST_TO_ADDR
// if not x or not y then
34314: LD_VAR 0 7
34318: NOT
34319: PUSH
34320: LD_VAR 0 8
34324: NOT
34325: OR
34326: IFFALSE 34330
// exit ;
34328: GO 34725
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34330: LD_ADDR_VAR 0 6
34334: PUSH
34335: LD_VAR 0 7
34339: PPUSH
34340: LD_INT 0
34342: PPUSH
34343: LD_INT 4
34345: PPUSH
34346: CALL_OW 272
34350: PUSH
34351: LD_VAR 0 8
34355: PPUSH
34356: LD_INT 0
34358: PPUSH
34359: LD_INT 4
34361: PPUSH
34362: CALL_OW 273
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_VAR 0 7
34375: PPUSH
34376: LD_INT 1
34378: PPUSH
34379: LD_INT 4
34381: PPUSH
34382: CALL_OW 272
34386: PUSH
34387: LD_VAR 0 8
34391: PPUSH
34392: LD_INT 1
34394: PPUSH
34395: LD_INT 4
34397: PPUSH
34398: CALL_OW 273
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_VAR 0 7
34411: PPUSH
34412: LD_INT 2
34414: PPUSH
34415: LD_INT 4
34417: PPUSH
34418: CALL_OW 272
34422: PUSH
34423: LD_VAR 0 8
34427: PPUSH
34428: LD_INT 2
34430: PPUSH
34431: LD_INT 4
34433: PPUSH
34434: CALL_OW 273
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_VAR 0 7
34447: PPUSH
34448: LD_INT 3
34450: PPUSH
34451: LD_INT 4
34453: PPUSH
34454: CALL_OW 272
34458: PUSH
34459: LD_VAR 0 8
34463: PPUSH
34464: LD_INT 3
34466: PPUSH
34467: LD_INT 4
34469: PPUSH
34470: CALL_OW 273
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_VAR 0 7
34483: PPUSH
34484: LD_INT 4
34486: PPUSH
34487: LD_INT 4
34489: PPUSH
34490: CALL_OW 272
34494: PUSH
34495: LD_VAR 0 8
34499: PPUSH
34500: LD_INT 4
34502: PPUSH
34503: LD_INT 4
34505: PPUSH
34506: CALL_OW 273
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_VAR 0 7
34519: PPUSH
34520: LD_INT 5
34522: PPUSH
34523: LD_INT 4
34525: PPUSH
34526: CALL_OW 272
34530: PUSH
34531: LD_VAR 0 8
34535: PPUSH
34536: LD_INT 5
34538: PPUSH
34539: LD_INT 4
34541: PPUSH
34542: CALL_OW 273
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
// for i = tmp downto 1 do
34559: LD_ADDR_VAR 0 4
34563: PUSH
34564: DOUBLE
34565: LD_VAR 0 6
34569: INC
34570: ST_TO_ADDR
34571: LD_INT 1
34573: PUSH
34574: FOR_DOWNTO
34575: IFFALSE 34676
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34577: LD_VAR 0 6
34581: PUSH
34582: LD_VAR 0 4
34586: ARRAY
34587: PUSH
34588: LD_INT 1
34590: ARRAY
34591: PPUSH
34592: LD_VAR 0 6
34596: PUSH
34597: LD_VAR 0 4
34601: ARRAY
34602: PUSH
34603: LD_INT 2
34605: ARRAY
34606: PPUSH
34607: CALL_OW 488
34611: NOT
34612: PUSH
34613: LD_VAR 0 6
34617: PUSH
34618: LD_VAR 0 4
34622: ARRAY
34623: PUSH
34624: LD_INT 1
34626: ARRAY
34627: PPUSH
34628: LD_VAR 0 6
34632: PUSH
34633: LD_VAR 0 4
34637: ARRAY
34638: PUSH
34639: LD_INT 2
34641: ARRAY
34642: PPUSH
34643: CALL_OW 428
34647: PUSH
34648: LD_INT 0
34650: NONEQUAL
34651: OR
34652: IFFALSE 34674
// tmp := Delete ( tmp , i ) ;
34654: LD_ADDR_VAR 0 6
34658: PUSH
34659: LD_VAR 0 6
34663: PPUSH
34664: LD_VAR 0 4
34668: PPUSH
34669: CALL_OW 3
34673: ST_TO_ADDR
34674: GO 34574
34676: POP
34677: POP
// j := GetClosestHex ( unit , tmp ) ;
34678: LD_ADDR_VAR 0 5
34682: PUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: LD_VAR 0 6
34692: PPUSH
34693: CALL 33969 0 2
34697: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34698: LD_VAR 0 1
34702: PPUSH
34703: LD_VAR 0 5
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PPUSH
34712: LD_VAR 0 5
34716: PUSH
34717: LD_INT 2
34719: ARRAY
34720: PPUSH
34721: CALL_OW 111
// end ;
34725: LD_VAR 0 3
34729: RET
// export function PrepareApemanSoldier ( ) ; begin
34730: LD_INT 0
34732: PPUSH
// uc_nation := 0 ;
34733: LD_ADDR_OWVAR 21
34737: PUSH
34738: LD_INT 0
34740: ST_TO_ADDR
// hc_sex := sex_male ;
34741: LD_ADDR_OWVAR 27
34745: PUSH
34746: LD_INT 1
34748: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34749: LD_ADDR_OWVAR 28
34753: PUSH
34754: LD_INT 15
34756: ST_TO_ADDR
// hc_gallery :=  ;
34757: LD_ADDR_OWVAR 33
34761: PUSH
34762: LD_STRING 
34764: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34765: LD_ADDR_OWVAR 31
34769: PUSH
34770: LD_INT 0
34772: PPUSH
34773: LD_INT 3
34775: PPUSH
34776: CALL_OW 12
34780: PUSH
34781: LD_INT 0
34783: PPUSH
34784: LD_INT 3
34786: PPUSH
34787: CALL_OW 12
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// end ;
34804: LD_VAR 0 1
34808: RET
// export function PrepareApemanEngineer ( ) ; begin
34809: LD_INT 0
34811: PPUSH
// uc_nation := 0 ;
34812: LD_ADDR_OWVAR 21
34816: PUSH
34817: LD_INT 0
34819: ST_TO_ADDR
// hc_sex := sex_male ;
34820: LD_ADDR_OWVAR 27
34824: PUSH
34825: LD_INT 1
34827: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34828: LD_ADDR_OWVAR 28
34832: PUSH
34833: LD_INT 16
34835: ST_TO_ADDR
// hc_gallery :=  ;
34836: LD_ADDR_OWVAR 33
34840: PUSH
34841: LD_STRING 
34843: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34844: LD_ADDR_OWVAR 31
34848: PUSH
34849: LD_INT 0
34851: PPUSH
34852: LD_INT 3
34854: PPUSH
34855: CALL_OW 12
34859: PUSH
34860: LD_INT 0
34862: PPUSH
34863: LD_INT 3
34865: PPUSH
34866: CALL_OW 12
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: ST_TO_ADDR
// end ;
34883: LD_VAR 0 1
34887: RET
// export function PrepareApeman ( agressivity ) ; begin
34888: LD_INT 0
34890: PPUSH
// uc_side := 0 ;
34891: LD_ADDR_OWVAR 20
34895: PUSH
34896: LD_INT 0
34898: ST_TO_ADDR
// uc_nation := 0 ;
34899: LD_ADDR_OWVAR 21
34903: PUSH
34904: LD_INT 0
34906: ST_TO_ADDR
// hc_sex := sex_male ;
34907: LD_ADDR_OWVAR 27
34911: PUSH
34912: LD_INT 1
34914: ST_TO_ADDR
// hc_class := class_apeman ;
34915: LD_ADDR_OWVAR 28
34919: PUSH
34920: LD_INT 12
34922: ST_TO_ADDR
// hc_gallery :=  ;
34923: LD_ADDR_OWVAR 33
34927: PUSH
34928: LD_STRING 
34930: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34931: LD_ADDR_OWVAR 35
34935: PUSH
34936: LD_VAR 0 1
34940: NEG
34941: PPUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 12
34951: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34952: LD_ADDR_OWVAR 31
34956: PUSH
34957: LD_INT 0
34959: PPUSH
34960: LD_INT 3
34962: PPUSH
34963: CALL_OW 12
34967: PUSH
34968: LD_INT 0
34970: PPUSH
34971: LD_INT 3
34973: PPUSH
34974: CALL_OW 12
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: ST_TO_ADDR
// end ;
34991: LD_VAR 0 2
34995: RET
// export function PrepareTiger ( agressivity ) ; begin
34996: LD_INT 0
34998: PPUSH
// uc_side := 0 ;
34999: LD_ADDR_OWVAR 20
35003: PUSH
35004: LD_INT 0
35006: ST_TO_ADDR
// uc_nation := 0 ;
35007: LD_ADDR_OWVAR 21
35011: PUSH
35012: LD_INT 0
35014: ST_TO_ADDR
// hc_class := class_tiger ;
35015: LD_ADDR_OWVAR 28
35019: PUSH
35020: LD_INT 14
35022: ST_TO_ADDR
// hc_gallery :=  ;
35023: LD_ADDR_OWVAR 33
35027: PUSH
35028: LD_STRING 
35030: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35031: LD_ADDR_OWVAR 35
35035: PUSH
35036: LD_VAR 0 1
35040: NEG
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 12
35051: ST_TO_ADDR
// end ;
35052: LD_VAR 0 2
35056: RET
// export function PrepareEnchidna ( ) ; begin
35057: LD_INT 0
35059: PPUSH
// uc_side := 0 ;
35060: LD_ADDR_OWVAR 20
35064: PUSH
35065: LD_INT 0
35067: ST_TO_ADDR
// uc_nation := 0 ;
35068: LD_ADDR_OWVAR 21
35072: PUSH
35073: LD_INT 0
35075: ST_TO_ADDR
// hc_class := class_baggie ;
35076: LD_ADDR_OWVAR 28
35080: PUSH
35081: LD_INT 13
35083: ST_TO_ADDR
// hc_gallery :=  ;
35084: LD_ADDR_OWVAR 33
35088: PUSH
35089: LD_STRING 
35091: ST_TO_ADDR
// end ;
35092: LD_VAR 0 1
35096: RET
// export function PrepareFrog ( ) ; begin
35097: LD_INT 0
35099: PPUSH
// uc_side := 0 ;
35100: LD_ADDR_OWVAR 20
35104: PUSH
35105: LD_INT 0
35107: ST_TO_ADDR
// uc_nation := 0 ;
35108: LD_ADDR_OWVAR 21
35112: PUSH
35113: LD_INT 0
35115: ST_TO_ADDR
// hc_class := class_frog ;
35116: LD_ADDR_OWVAR 28
35120: PUSH
35121: LD_INT 19
35123: ST_TO_ADDR
// hc_gallery :=  ;
35124: LD_ADDR_OWVAR 33
35128: PUSH
35129: LD_STRING 
35131: ST_TO_ADDR
// end ;
35132: LD_VAR 0 1
35136: RET
// export function PrepareFish ( ) ; begin
35137: LD_INT 0
35139: PPUSH
// uc_side := 0 ;
35140: LD_ADDR_OWVAR 20
35144: PUSH
35145: LD_INT 0
35147: ST_TO_ADDR
// uc_nation := 0 ;
35148: LD_ADDR_OWVAR 21
35152: PUSH
35153: LD_INT 0
35155: ST_TO_ADDR
// hc_class := class_fish ;
35156: LD_ADDR_OWVAR 28
35160: PUSH
35161: LD_INT 20
35163: ST_TO_ADDR
// hc_gallery :=  ;
35164: LD_ADDR_OWVAR 33
35168: PUSH
35169: LD_STRING 
35171: ST_TO_ADDR
// end ;
35172: LD_VAR 0 1
35176: RET
// export function PrepareBird ( ) ; begin
35177: LD_INT 0
35179: PPUSH
// uc_side := 0 ;
35180: LD_ADDR_OWVAR 20
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// uc_nation := 0 ;
35188: LD_ADDR_OWVAR 21
35192: PUSH
35193: LD_INT 0
35195: ST_TO_ADDR
// hc_class := class_phororhacos ;
35196: LD_ADDR_OWVAR 28
35200: PUSH
35201: LD_INT 18
35203: ST_TO_ADDR
// hc_gallery :=  ;
35204: LD_ADDR_OWVAR 33
35208: PUSH
35209: LD_STRING 
35211: ST_TO_ADDR
// end ;
35212: LD_VAR 0 1
35216: RET
// export function PrepareHorse ( ) ; begin
35217: LD_INT 0
35219: PPUSH
// uc_side := 0 ;
35220: LD_ADDR_OWVAR 20
35224: PUSH
35225: LD_INT 0
35227: ST_TO_ADDR
// uc_nation := 0 ;
35228: LD_ADDR_OWVAR 21
35232: PUSH
35233: LD_INT 0
35235: ST_TO_ADDR
// hc_class := class_horse ;
35236: LD_ADDR_OWVAR 28
35240: PUSH
35241: LD_INT 21
35243: ST_TO_ADDR
// hc_gallery :=  ;
35244: LD_ADDR_OWVAR 33
35248: PUSH
35249: LD_STRING 
35251: ST_TO_ADDR
// end ;
35252: LD_VAR 0 1
35256: RET
// export function PrepareMastodont ( ) ; begin
35257: LD_INT 0
35259: PPUSH
// uc_side := 0 ;
35260: LD_ADDR_OWVAR 20
35264: PUSH
35265: LD_INT 0
35267: ST_TO_ADDR
// uc_nation := 0 ;
35268: LD_ADDR_OWVAR 21
35272: PUSH
35273: LD_INT 0
35275: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35276: LD_ADDR_OWVAR 37
35280: PUSH
35281: LD_INT 31
35283: ST_TO_ADDR
// vc_control := control_rider ;
35284: LD_ADDR_OWVAR 38
35288: PUSH
35289: LD_INT 4
35291: ST_TO_ADDR
// end ;
35292: LD_VAR 0 1
35296: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35297: LD_INT 0
35299: PPUSH
35300: PPUSH
35301: PPUSH
// uc_side = 0 ;
35302: LD_ADDR_OWVAR 20
35306: PUSH
35307: LD_INT 0
35309: ST_TO_ADDR
// uc_nation = 0 ;
35310: LD_ADDR_OWVAR 21
35314: PUSH
35315: LD_INT 0
35317: ST_TO_ADDR
// InitHc_All ( ) ;
35318: CALL_OW 584
// InitVc ;
35322: CALL_OW 20
// if mastodonts then
35326: LD_VAR 0 6
35330: IFFALSE 35397
// for i = 1 to mastodonts do
35332: LD_ADDR_VAR 0 11
35336: PUSH
35337: DOUBLE
35338: LD_INT 1
35340: DEC
35341: ST_TO_ADDR
35342: LD_VAR 0 6
35346: PUSH
35347: FOR_TO
35348: IFFALSE 35395
// begin vc_chassis := 31 ;
35350: LD_ADDR_OWVAR 37
35354: PUSH
35355: LD_INT 31
35357: ST_TO_ADDR
// vc_control := control_rider ;
35358: LD_ADDR_OWVAR 38
35362: PUSH
35363: LD_INT 4
35365: ST_TO_ADDR
// animal := CreateVehicle ;
35366: LD_ADDR_VAR 0 12
35370: PUSH
35371: CALL_OW 45
35375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35376: LD_VAR 0 12
35380: PPUSH
35381: LD_VAR 0 8
35385: PPUSH
35386: LD_INT 0
35388: PPUSH
35389: CALL 37525 0 3
// end ;
35393: GO 35347
35395: POP
35396: POP
// if horses then
35397: LD_VAR 0 5
35401: IFFALSE 35468
// for i = 1 to horses do
35403: LD_ADDR_VAR 0 11
35407: PUSH
35408: DOUBLE
35409: LD_INT 1
35411: DEC
35412: ST_TO_ADDR
35413: LD_VAR 0 5
35417: PUSH
35418: FOR_TO
35419: IFFALSE 35466
// begin hc_class := 21 ;
35421: LD_ADDR_OWVAR 28
35425: PUSH
35426: LD_INT 21
35428: ST_TO_ADDR
// hc_gallery :=  ;
35429: LD_ADDR_OWVAR 33
35433: PUSH
35434: LD_STRING 
35436: ST_TO_ADDR
// animal := CreateHuman ;
35437: LD_ADDR_VAR 0 12
35441: PUSH
35442: CALL_OW 44
35446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35447: LD_VAR 0 12
35451: PPUSH
35452: LD_VAR 0 8
35456: PPUSH
35457: LD_INT 0
35459: PPUSH
35460: CALL 37525 0 3
// end ;
35464: GO 35418
35466: POP
35467: POP
// if birds then
35468: LD_VAR 0 1
35472: IFFALSE 35539
// for i = 1 to birds do
35474: LD_ADDR_VAR 0 11
35478: PUSH
35479: DOUBLE
35480: LD_INT 1
35482: DEC
35483: ST_TO_ADDR
35484: LD_VAR 0 1
35488: PUSH
35489: FOR_TO
35490: IFFALSE 35537
// begin hc_class = 18 ;
35492: LD_ADDR_OWVAR 28
35496: PUSH
35497: LD_INT 18
35499: ST_TO_ADDR
// hc_gallery =  ;
35500: LD_ADDR_OWVAR 33
35504: PUSH
35505: LD_STRING 
35507: ST_TO_ADDR
// animal := CreateHuman ;
35508: LD_ADDR_VAR 0 12
35512: PUSH
35513: CALL_OW 44
35517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35518: LD_VAR 0 12
35522: PPUSH
35523: LD_VAR 0 8
35527: PPUSH
35528: LD_INT 0
35530: PPUSH
35531: CALL 37525 0 3
// end ;
35535: GO 35489
35537: POP
35538: POP
// if tigers then
35539: LD_VAR 0 2
35543: IFFALSE 35627
// for i = 1 to tigers do
35545: LD_ADDR_VAR 0 11
35549: PUSH
35550: DOUBLE
35551: LD_INT 1
35553: DEC
35554: ST_TO_ADDR
35555: LD_VAR 0 2
35559: PUSH
35560: FOR_TO
35561: IFFALSE 35625
// begin hc_class = class_tiger ;
35563: LD_ADDR_OWVAR 28
35567: PUSH
35568: LD_INT 14
35570: ST_TO_ADDR
// hc_gallery =  ;
35571: LD_ADDR_OWVAR 33
35575: PUSH
35576: LD_STRING 
35578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35579: LD_ADDR_OWVAR 35
35583: PUSH
35584: LD_INT 7
35586: NEG
35587: PPUSH
35588: LD_INT 7
35590: PPUSH
35591: CALL_OW 12
35595: ST_TO_ADDR
// animal := CreateHuman ;
35596: LD_ADDR_VAR 0 12
35600: PUSH
35601: CALL_OW 44
35605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35606: LD_VAR 0 12
35610: PPUSH
35611: LD_VAR 0 8
35615: PPUSH
35616: LD_INT 0
35618: PPUSH
35619: CALL 37525 0 3
// end ;
35623: GO 35560
35625: POP
35626: POP
// if apemans then
35627: LD_VAR 0 3
35631: IFFALSE 35754
// for i = 1 to apemans do
35633: LD_ADDR_VAR 0 11
35637: PUSH
35638: DOUBLE
35639: LD_INT 1
35641: DEC
35642: ST_TO_ADDR
35643: LD_VAR 0 3
35647: PUSH
35648: FOR_TO
35649: IFFALSE 35752
// begin hc_class = class_apeman ;
35651: LD_ADDR_OWVAR 28
35655: PUSH
35656: LD_INT 12
35658: ST_TO_ADDR
// hc_gallery =  ;
35659: LD_ADDR_OWVAR 33
35663: PUSH
35664: LD_STRING 
35666: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35667: LD_ADDR_OWVAR 35
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PPUSH
35676: LD_INT 2
35678: PPUSH
35679: CALL_OW 12
35683: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35684: LD_ADDR_OWVAR 31
35688: PUSH
35689: LD_INT 1
35691: PPUSH
35692: LD_INT 3
35694: PPUSH
35695: CALL_OW 12
35699: PUSH
35700: LD_INT 1
35702: PPUSH
35703: LD_INT 3
35705: PPUSH
35706: CALL_OW 12
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// animal := CreateHuman ;
35723: LD_ADDR_VAR 0 12
35727: PUSH
35728: CALL_OW 44
35732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35733: LD_VAR 0 12
35737: PPUSH
35738: LD_VAR 0 8
35742: PPUSH
35743: LD_INT 0
35745: PPUSH
35746: CALL 37525 0 3
// end ;
35750: GO 35648
35752: POP
35753: POP
// if enchidnas then
35754: LD_VAR 0 4
35758: IFFALSE 35825
// for i = 1 to enchidnas do
35760: LD_ADDR_VAR 0 11
35764: PUSH
35765: DOUBLE
35766: LD_INT 1
35768: DEC
35769: ST_TO_ADDR
35770: LD_VAR 0 4
35774: PUSH
35775: FOR_TO
35776: IFFALSE 35823
// begin hc_class = 13 ;
35778: LD_ADDR_OWVAR 28
35782: PUSH
35783: LD_INT 13
35785: ST_TO_ADDR
// hc_gallery =  ;
35786: LD_ADDR_OWVAR 33
35790: PUSH
35791: LD_STRING 
35793: ST_TO_ADDR
// animal := CreateHuman ;
35794: LD_ADDR_VAR 0 12
35798: PUSH
35799: CALL_OW 44
35803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35804: LD_VAR 0 12
35808: PPUSH
35809: LD_VAR 0 8
35813: PPUSH
35814: LD_INT 0
35816: PPUSH
35817: CALL 37525 0 3
// end ;
35821: GO 35775
35823: POP
35824: POP
// if fishes then
35825: LD_VAR 0 7
35829: IFFALSE 35896
// for i = 1 to fishes do
35831: LD_ADDR_VAR 0 11
35835: PUSH
35836: DOUBLE
35837: LD_INT 1
35839: DEC
35840: ST_TO_ADDR
35841: LD_VAR 0 7
35845: PUSH
35846: FOR_TO
35847: IFFALSE 35894
// begin hc_class = 20 ;
35849: LD_ADDR_OWVAR 28
35853: PUSH
35854: LD_INT 20
35856: ST_TO_ADDR
// hc_gallery =  ;
35857: LD_ADDR_OWVAR 33
35861: PUSH
35862: LD_STRING 
35864: ST_TO_ADDR
// animal := CreateHuman ;
35865: LD_ADDR_VAR 0 12
35869: PUSH
35870: CALL_OW 44
35874: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35875: LD_VAR 0 12
35879: PPUSH
35880: LD_VAR 0 9
35884: PPUSH
35885: LD_INT 0
35887: PPUSH
35888: CALL 37525 0 3
// end ;
35892: GO 35846
35894: POP
35895: POP
// end ;
35896: LD_VAR 0 10
35900: RET
// export function WantHeal ( sci , unit ) ; begin
35901: LD_INT 0
35903: PPUSH
// if GetTaskList ( sci ) > 0 then
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 437
35913: PUSH
35914: LD_INT 0
35916: GREATER
35917: IFFALSE 35987
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 437
35928: PUSH
35929: LD_INT 1
35931: ARRAY
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PUSH
35937: LD_STRING l
35939: EQUAL
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 437
35950: PUSH
35951: LD_INT 1
35953: ARRAY
35954: PUSH
35955: LD_INT 4
35957: ARRAY
35958: PUSH
35959: LD_VAR 0 2
35963: EQUAL
35964: AND
35965: IFFALSE 35977
// result := true else
35967: LD_ADDR_VAR 0 3
35971: PUSH
35972: LD_INT 1
35974: ST_TO_ADDR
35975: GO 35985
// result := false ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_INT 0
35984: ST_TO_ADDR
// end else
35985: GO 35995
// result := false ;
35987: LD_ADDR_VAR 0 3
35991: PUSH
35992: LD_INT 0
35994: ST_TO_ADDR
// end ;
35995: LD_VAR 0 3
35999: RET
// export function HealTarget ( sci ) ; begin
36000: LD_INT 0
36002: PPUSH
// if not sci then
36003: LD_VAR 0 1
36007: NOT
36008: IFFALSE 36012
// exit ;
36010: GO 36077
// result := 0 ;
36012: LD_ADDR_VAR 0 2
36016: PUSH
36017: LD_INT 0
36019: ST_TO_ADDR
// if GetTaskList ( sci ) then
36020: LD_VAR 0 1
36024: PPUSH
36025: CALL_OW 437
36029: IFFALSE 36077
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 437
36040: PUSH
36041: LD_INT 1
36043: ARRAY
36044: PUSH
36045: LD_INT 1
36047: ARRAY
36048: PUSH
36049: LD_STRING l
36051: EQUAL
36052: IFFALSE 36077
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36054: LD_ADDR_VAR 0 2
36058: PUSH
36059: LD_VAR 0 1
36063: PPUSH
36064: CALL_OW 437
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PUSH
36073: LD_INT 4
36075: ARRAY
36076: ST_TO_ADDR
// end ;
36077: LD_VAR 0 2
36081: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36082: LD_INT 0
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
// if not base_units then
36088: LD_VAR 0 1
36092: NOT
36093: IFFALSE 36097
// exit ;
36095: GO 36184
// result := false ;
36097: LD_ADDR_VAR 0 2
36101: PUSH
36102: LD_INT 0
36104: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36105: LD_ADDR_VAR 0 5
36109: PUSH
36110: LD_VAR 0 1
36114: PPUSH
36115: LD_INT 21
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PPUSH
36125: CALL_OW 72
36129: ST_TO_ADDR
// if not tmp then
36130: LD_VAR 0 5
36134: NOT
36135: IFFALSE 36139
// exit ;
36137: GO 36184
// for i in tmp do
36139: LD_ADDR_VAR 0 3
36143: PUSH
36144: LD_VAR 0 5
36148: PUSH
36149: FOR_IN
36150: IFFALSE 36182
// begin result := EnemyInRange ( i , 22 ) ;
36152: LD_ADDR_VAR 0 2
36156: PUSH
36157: LD_VAR 0 3
36161: PPUSH
36162: LD_INT 22
36164: PPUSH
36165: CALL 33771 0 2
36169: ST_TO_ADDR
// if result then
36170: LD_VAR 0 2
36174: IFFALSE 36180
// exit ;
36176: POP
36177: POP
36178: GO 36184
// end ;
36180: GO 36149
36182: POP
36183: POP
// end ;
36184: LD_VAR 0 2
36188: RET
// export function FilterByTag ( units , tag ) ; begin
36189: LD_INT 0
36191: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36192: LD_ADDR_VAR 0 3
36196: PUSH
36197: LD_VAR 0 1
36201: PPUSH
36202: LD_INT 120
36204: PUSH
36205: LD_VAR 0 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PPUSH
36214: CALL_OW 72
36218: ST_TO_ADDR
// end ;
36219: LD_VAR 0 3
36223: RET
// export function IsDriver ( un ) ; begin
36224: LD_INT 0
36226: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36227: LD_ADDR_VAR 0 2
36231: PUSH
36232: LD_VAR 0 1
36236: PUSH
36237: LD_INT 55
36239: PUSH
36240: EMPTY
36241: LIST
36242: PPUSH
36243: CALL_OW 69
36247: IN
36248: ST_TO_ADDR
// end ;
36249: LD_VAR 0 2
36253: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36254: LD_INT 0
36256: PPUSH
36257: PPUSH
// list := [ ] ;
36258: LD_ADDR_VAR 0 5
36262: PUSH
36263: EMPTY
36264: ST_TO_ADDR
// case d of 0 :
36265: LD_VAR 0 3
36269: PUSH
36270: LD_INT 0
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36411
36278: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: LD_VAR 0 1
36288: PUSH
36289: LD_INT 4
36291: MINUS
36292: PUSH
36293: LD_VAR 0 2
36297: PUSH
36298: LD_INT 4
36300: MINUS
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: PUSH
36310: LD_VAR 0 1
36314: PUSH
36315: LD_INT 3
36317: MINUS
36318: PUSH
36319: LD_VAR 0 2
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: PUSH
36332: LD_VAR 0 1
36336: PUSH
36337: LD_INT 4
36339: PLUS
36340: PUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: PUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_INT 3
36361: PLUS
36362: PUSH
36363: LD_VAR 0 2
36367: PUSH
36368: LD_INT 3
36370: PLUS
36371: PUSH
36372: LD_INT 5
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: LD_VAR 0 1
36384: PUSH
36385: LD_VAR 0 2
36389: PUSH
36390: LD_INT 4
36392: PLUS
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: ST_TO_ADDR
// end ; 1 :
36409: GO 37109
36411: LD_INT 1
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36419
36417: GO 36552
36419: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36420: LD_ADDR_VAR 0 5
36424: PUSH
36425: LD_VAR 0 1
36429: PUSH
36430: LD_VAR 0 2
36434: PUSH
36435: LD_INT 4
36437: MINUS
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PUSH
36447: LD_VAR 0 1
36451: PUSH
36452: LD_INT 3
36454: MINUS
36455: PUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_INT 3
36463: MINUS
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: PUSH
36473: LD_VAR 0 1
36477: PUSH
36478: LD_INT 4
36480: MINUS
36481: PUSH
36482: LD_VAR 0 2
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_VAR 0 2
36504: PUSH
36505: LD_INT 3
36507: PLUS
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: PUSH
36517: LD_VAR 0 1
36521: PUSH
36522: LD_INT 4
36524: PLUS
36525: PUSH
36526: LD_VAR 0 2
36530: PUSH
36531: LD_INT 4
36533: PLUS
36534: PUSH
36535: LD_INT 5
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: ST_TO_ADDR
// end ; 2 :
36550: GO 37109
36552: LD_INT 2
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36560
36558: GO 36689
36560: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_VAR 0 2
36575: PUSH
36576: LD_INT 3
36578: MINUS
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: PUSH
36588: LD_VAR 0 1
36592: PUSH
36593: LD_INT 4
36595: PLUS
36596: PUSH
36597: LD_VAR 0 2
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: PUSH
36610: LD_VAR 0 1
36614: PUSH
36615: LD_VAR 0 2
36619: PUSH
36620: LD_INT 4
36622: PLUS
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: PUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_INT 3
36639: MINUS
36640: PUSH
36641: LD_VAR 0 2
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: PUSH
36654: LD_VAR 0 1
36658: PUSH
36659: LD_INT 4
36661: MINUS
36662: PUSH
36663: LD_VAR 0 2
36667: PUSH
36668: LD_INT 4
36670: MINUS
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
// end ; 3 :
36687: GO 37109
36689: LD_INT 3
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36830
36697: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_INT 3
36710: PLUS
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 4
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PUSH
36725: LD_VAR 0 1
36729: PUSH
36730: LD_INT 4
36732: PLUS
36733: PUSH
36734: LD_VAR 0 2
36738: PUSH
36739: LD_INT 4
36741: PLUS
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_INT 4
36758: MINUS
36759: PUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: PUSH
36773: LD_VAR 0 1
36777: PUSH
36778: LD_VAR 0 2
36782: PUSH
36783: LD_INT 4
36785: MINUS
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: PUSH
36795: LD_VAR 0 1
36799: PUSH
36800: LD_INT 3
36802: MINUS
36803: PUSH
36804: LD_VAR 0 2
36808: PUSH
36809: LD_INT 3
36811: MINUS
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: ST_TO_ADDR
// end ; 4 :
36828: GO 37109
36830: LD_INT 4
36832: DOUBLE
36833: EQUAL
36834: IFTRUE 36838
36836: GO 36971
36838: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36839: LD_ADDR_VAR 0 5
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_INT 4
36856: PLUS
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: PUSH
36866: LD_VAR 0 1
36870: PUSH
36871: LD_INT 3
36873: PLUS
36874: PUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 3
36882: PLUS
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PUSH
36892: LD_VAR 0 1
36896: PUSH
36897: LD_INT 4
36899: PLUS
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: LD_INT 4
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: PUSH
36914: LD_VAR 0 1
36918: PUSH
36919: LD_VAR 0 2
36923: PUSH
36924: LD_INT 3
36926: MINUS
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: PUSH
36936: LD_VAR 0 1
36940: PUSH
36941: LD_INT 4
36943: MINUS
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_INT 4
36952: MINUS
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// end ; 5 :
36969: GO 37109
36971: LD_INT 5
36973: DOUBLE
36974: EQUAL
36975: IFTRUE 36979
36977: GO 37108
36979: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36980: LD_ADDR_VAR 0 5
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: MINUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_VAR 0 2
37016: PUSH
37017: LD_INT 4
37019: MINUS
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: PUSH
37029: LD_VAR 0 1
37033: PUSH
37034: LD_INT 4
37036: PLUS
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 4
37045: PLUS
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: LD_VAR 0 1
37059: PUSH
37060: LD_INT 3
37062: PLUS
37063: PUSH
37064: LD_VAR 0 2
37068: PUSH
37069: LD_INT 4
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: PUSH
37077: LD_VAR 0 1
37081: PUSH
37082: LD_VAR 0 2
37086: PUSH
37087: LD_INT 3
37089: PLUS
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// end ; end ;
37106: GO 37109
37108: POP
// result := list ;
37109: LD_ADDR_VAR 0 4
37113: PUSH
37114: LD_VAR 0 5
37118: ST_TO_ADDR
// end ;
37119: LD_VAR 0 4
37123: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37124: LD_INT 0
37126: PPUSH
37127: PPUSH
37128: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37129: LD_VAR 0 1
37133: NOT
37134: PUSH
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: LD_INT 4
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: IN
37158: NOT
37159: OR
37160: IFFALSE 37164
// exit ;
37162: GO 37247
// tmp := [ ] ;
37164: LD_ADDR_VAR 0 5
37168: PUSH
37169: EMPTY
37170: ST_TO_ADDR
// for i in units do
37171: LD_ADDR_VAR 0 4
37175: PUSH
37176: LD_VAR 0 1
37180: PUSH
37181: FOR_IN
37182: IFFALSE 37216
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: LD_VAR 0 4
37198: PPUSH
37199: LD_VAR 0 2
37203: PPUSH
37204: CALL_OW 259
37208: PPUSH
37209: CALL 38608 0 2
37213: ST_TO_ADDR
37214: GO 37181
37216: POP
37217: POP
// if not tmp then
37218: LD_VAR 0 5
37222: NOT
37223: IFFALSE 37227
// exit ;
37225: GO 37247
// result := SortListByListDesc ( units , tmp ) ;
37227: LD_ADDR_VAR 0 3
37231: PUSH
37232: LD_VAR 0 1
37236: PPUSH
37237: LD_VAR 0 5
37241: PPUSH
37242: CALL_OW 77
37246: ST_TO_ADDR
// end ;
37247: LD_VAR 0 3
37251: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37252: LD_INT 0
37254: PPUSH
37255: PPUSH
37256: PPUSH
// result := false ;
37257: LD_ADDR_VAR 0 3
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// if not building then
37265: LD_VAR 0 2
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 37412
// x := GetX ( building ) ;
37274: LD_ADDR_VAR 0 4
37278: PUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: CALL_OW 250
37288: ST_TO_ADDR
// y := GetY ( building ) ;
37289: LD_ADDR_VAR 0 5
37293: PUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL_OW 251
37303: ST_TO_ADDR
// if not x or not y then
37304: LD_VAR 0 4
37308: NOT
37309: PUSH
37310: LD_VAR 0 5
37314: NOT
37315: OR
37316: IFFALSE 37320
// exit ;
37318: GO 37412
// if GetTaskList ( unit ) then
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 437
37329: IFFALSE 37412
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37331: LD_STRING e
37333: PUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: CALL_OW 437
37343: PUSH
37344: LD_INT 1
37346: ARRAY
37347: PUSH
37348: LD_INT 1
37350: ARRAY
37351: EQUAL
37352: PUSH
37353: LD_VAR 0 4
37357: PUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL_OW 437
37367: PUSH
37368: LD_INT 1
37370: ARRAY
37371: PUSH
37372: LD_INT 2
37374: ARRAY
37375: EQUAL
37376: AND
37377: PUSH
37378: LD_VAR 0 5
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 437
37392: PUSH
37393: LD_INT 1
37395: ARRAY
37396: PUSH
37397: LD_INT 3
37399: ARRAY
37400: EQUAL
37401: AND
37402: IFFALSE 37412
// result := true end ;
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 1
37411: ST_TO_ADDR
// end ;
37412: LD_VAR 0 3
37416: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37417: LD_INT 0
37419: PPUSH
// result := false ;
37420: LD_ADDR_VAR 0 4
37424: PUSH
37425: LD_INT 0
37427: ST_TO_ADDR
// if GetTaskList ( unit ) then
37428: LD_VAR 0 1
37432: PPUSH
37433: CALL_OW 437
37437: IFFALSE 37520
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37439: LD_STRING M
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 437
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: EQUAL
37460: PUSH
37461: LD_VAR 0 2
37465: PUSH
37466: LD_VAR 0 1
37470: PPUSH
37471: CALL_OW 437
37475: PUSH
37476: LD_INT 1
37478: ARRAY
37479: PUSH
37480: LD_INT 2
37482: ARRAY
37483: EQUAL
37484: AND
37485: PUSH
37486: LD_VAR 0 3
37490: PUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: CALL_OW 437
37500: PUSH
37501: LD_INT 1
37503: ARRAY
37504: PUSH
37505: LD_INT 3
37507: ARRAY
37508: EQUAL
37509: AND
37510: IFFALSE 37520
// result := true ;
37512: LD_ADDR_VAR 0 4
37516: PUSH
37517: LD_INT 1
37519: ST_TO_ADDR
// end ; end ;
37520: LD_VAR 0 4
37524: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37525: LD_INT 0
37527: PPUSH
37528: PPUSH
37529: PPUSH
37530: PPUSH
// if not unit or not area then
37531: LD_VAR 0 1
37535: NOT
37536: PUSH
37537: LD_VAR 0 2
37541: NOT
37542: OR
37543: IFFALSE 37547
// exit ;
37545: GO 37711
// tmp := AreaToList ( area , i ) ;
37547: LD_ADDR_VAR 0 6
37551: PUSH
37552: LD_VAR 0 2
37556: PPUSH
37557: LD_VAR 0 5
37561: PPUSH
37562: CALL_OW 517
37566: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37567: LD_ADDR_VAR 0 5
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_VAR 0 6
37581: PUSH
37582: LD_INT 1
37584: ARRAY
37585: PUSH
37586: FOR_TO
37587: IFFALSE 37709
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37589: LD_ADDR_VAR 0 7
37593: PUSH
37594: LD_VAR 0 6
37598: PUSH
37599: LD_INT 1
37601: ARRAY
37602: PUSH
37603: LD_VAR 0 5
37607: ARRAY
37608: PUSH
37609: LD_VAR 0 6
37613: PUSH
37614: LD_INT 2
37616: ARRAY
37617: PUSH
37618: LD_VAR 0 5
37622: ARRAY
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37628: LD_VAR 0 7
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: PPUSH
37637: LD_VAR 0 7
37641: PUSH
37642: LD_INT 2
37644: ARRAY
37645: PPUSH
37646: CALL_OW 428
37650: PUSH
37651: LD_INT 0
37653: EQUAL
37654: IFFALSE 37707
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37656: LD_VAR 0 1
37660: PPUSH
37661: LD_VAR 0 7
37665: PUSH
37666: LD_INT 1
37668: ARRAY
37669: PPUSH
37670: LD_VAR 0 7
37674: PUSH
37675: LD_INT 2
37677: ARRAY
37678: PPUSH
37679: LD_VAR 0 3
37683: PPUSH
37684: CALL_OW 48
// result := IsPlaced ( unit ) ;
37688: LD_ADDR_VAR 0 4
37692: PUSH
37693: LD_VAR 0 1
37697: PPUSH
37698: CALL_OW 305
37702: ST_TO_ADDR
// exit ;
37703: POP
37704: POP
37705: GO 37711
// end ; end ;
37707: GO 37586
37709: POP
37710: POP
// end ;
37711: LD_VAR 0 4
37715: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37716: LD_INT 0
37718: PPUSH
37719: PPUSH
37720: PPUSH
// if not side or side > 8 then
37721: LD_VAR 0 1
37725: NOT
37726: PUSH
37727: LD_VAR 0 1
37731: PUSH
37732: LD_INT 8
37734: GREATER
37735: OR
37736: IFFALSE 37740
// exit ;
37738: GO 37927
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37740: LD_ADDR_VAR 0 4
37744: PUSH
37745: LD_INT 22
37747: PUSH
37748: LD_VAR 0 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 21
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PPUSH
37771: CALL_OW 69
37775: ST_TO_ADDR
// if not tmp then
37776: LD_VAR 0 4
37780: NOT
37781: IFFALSE 37785
// exit ;
37783: GO 37927
// enable_addtolog := true ;
37785: LD_ADDR_OWVAR 81
37789: PUSH
37790: LD_INT 1
37792: ST_TO_ADDR
// AddToLog ( [ ) ;
37793: LD_STRING [
37795: PPUSH
37796: CALL_OW 561
// for i in tmp do
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_VAR 0 4
37809: PUSH
37810: FOR_IN
37811: IFFALSE 37918
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37813: LD_STRING [
37815: PUSH
37816: LD_VAR 0 3
37820: PPUSH
37821: CALL_OW 266
37825: STR
37826: PUSH
37827: LD_STRING , 
37829: STR
37830: PUSH
37831: LD_VAR 0 3
37835: PPUSH
37836: CALL_OW 250
37840: STR
37841: PUSH
37842: LD_STRING , 
37844: STR
37845: PUSH
37846: LD_VAR 0 3
37850: PPUSH
37851: CALL_OW 251
37855: STR
37856: PUSH
37857: LD_STRING , 
37859: STR
37860: PUSH
37861: LD_VAR 0 3
37865: PPUSH
37866: CALL_OW 254
37870: STR
37871: PUSH
37872: LD_STRING , 
37874: STR
37875: PUSH
37876: LD_VAR 0 3
37880: PPUSH
37881: LD_INT 1
37883: PPUSH
37884: CALL_OW 268
37888: STR
37889: PUSH
37890: LD_STRING , 
37892: STR
37893: PUSH
37894: LD_VAR 0 3
37898: PPUSH
37899: LD_INT 2
37901: PPUSH
37902: CALL_OW 268
37906: STR
37907: PUSH
37908: LD_STRING ],
37910: STR
37911: PPUSH
37912: CALL_OW 561
// end ;
37916: GO 37810
37918: POP
37919: POP
// AddToLog ( ]; ) ;
37920: LD_STRING ];
37922: PPUSH
37923: CALL_OW 561
// end ;
37927: LD_VAR 0 2
37931: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
// if not area or not rate or not max then
37939: LD_VAR 0 1
37943: NOT
37944: PUSH
37945: LD_VAR 0 2
37949: NOT
37950: OR
37951: PUSH
37952: LD_VAR 0 4
37956: NOT
37957: OR
37958: IFFALSE 37962
// exit ;
37960: GO 38151
// while 1 do
37962: LD_INT 1
37964: IFFALSE 38151
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_VAR 0 1
37975: PPUSH
37976: LD_INT 1
37978: PPUSH
37979: CALL_OW 287
37983: PUSH
37984: LD_INT 10
37986: MUL
37987: ST_TO_ADDR
// r := rate / 10 ;
37988: LD_ADDR_VAR 0 7
37992: PUSH
37993: LD_VAR 0 2
37997: PUSH
37998: LD_INT 10
38000: DIVREAL
38001: ST_TO_ADDR
// time := 1 1$00 ;
38002: LD_ADDR_VAR 0 8
38006: PUSH
38007: LD_INT 2100
38009: ST_TO_ADDR
// if amount < min then
38010: LD_VAR 0 9
38014: PUSH
38015: LD_VAR 0 3
38019: LESS
38020: IFFALSE 38038
// r := r * 2 else
38022: LD_ADDR_VAR 0 7
38026: PUSH
38027: LD_VAR 0 7
38031: PUSH
38032: LD_INT 2
38034: MUL
38035: ST_TO_ADDR
38036: GO 38064
// if amount > max then
38038: LD_VAR 0 9
38042: PUSH
38043: LD_VAR 0 4
38047: GREATER
38048: IFFALSE 38064
// r := r / 2 ;
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_VAR 0 7
38059: PUSH
38060: LD_INT 2
38062: DIVREAL
38063: ST_TO_ADDR
// time := time / r ;
38064: LD_ADDR_VAR 0 8
38068: PUSH
38069: LD_VAR 0 8
38073: PUSH
38074: LD_VAR 0 7
38078: DIVREAL
38079: ST_TO_ADDR
// if time < 0 then
38080: LD_VAR 0 8
38084: PUSH
38085: LD_INT 0
38087: LESS
38088: IFFALSE 38105
// time := time * - 1 ;
38090: LD_ADDR_VAR 0 8
38094: PUSH
38095: LD_VAR 0 8
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: MUL
38104: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38105: LD_VAR 0 8
38109: PUSH
38110: LD_INT 35
38112: PPUSH
38113: LD_INT 875
38115: PPUSH
38116: CALL_OW 12
38120: PLUS
38121: PPUSH
38122: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38126: LD_INT 1
38128: PPUSH
38129: LD_INT 5
38131: PPUSH
38132: CALL_OW 12
38136: PPUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: LD_INT 1
38144: PPUSH
38145: CALL_OW 55
// end ;
38149: GO 37962
// end ;
38151: LD_VAR 0 5
38155: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38156: LD_INT 0
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
// if not turrets or not factories then
38166: LD_VAR 0 1
38170: NOT
38171: PUSH
38172: LD_VAR 0 2
38176: NOT
38177: OR
38178: IFFALSE 38182
// exit ;
38180: GO 38489
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38182: LD_ADDR_VAR 0 10
38186: PUSH
38187: LD_INT 5
38189: PUSH
38190: LD_INT 6
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 5
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 24
38224: PUSH
38225: LD_INT 25
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 23
38234: PUSH
38235: LD_INT 27
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 42
38248: PUSH
38249: LD_INT 43
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 44
38258: PUSH
38259: LD_INT 46
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 45
38268: PUSH
38269: LD_INT 47
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// result := [ ] ;
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: EMPTY
38292: ST_TO_ADDR
// for i in turrets do
38293: LD_ADDR_VAR 0 4
38297: PUSH
38298: LD_VAR 0 1
38302: PUSH
38303: FOR_IN
38304: IFFALSE 38487
// begin nat := GetNation ( i ) ;
38306: LD_ADDR_VAR 0 7
38310: PUSH
38311: LD_VAR 0 4
38315: PPUSH
38316: CALL_OW 248
38320: ST_TO_ADDR
// weapon := 0 ;
38321: LD_ADDR_VAR 0 8
38325: PUSH
38326: LD_INT 0
38328: ST_TO_ADDR
// if not nat then
38329: LD_VAR 0 7
38333: NOT
38334: IFFALSE 38338
// continue ;
38336: GO 38303
// for j in list [ nat ] do
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: LD_VAR 0 10
38347: PUSH
38348: LD_VAR 0 7
38352: ARRAY
38353: PUSH
38354: FOR_IN
38355: IFFALSE 38396
// if GetBWeapon ( i ) = j [ 1 ] then
38357: LD_VAR 0 4
38361: PPUSH
38362: CALL_OW 269
38366: PUSH
38367: LD_VAR 0 5
38371: PUSH
38372: LD_INT 1
38374: ARRAY
38375: EQUAL
38376: IFFALSE 38394
// begin weapon := j [ 2 ] ;
38378: LD_ADDR_VAR 0 8
38382: PUSH
38383: LD_VAR 0 5
38387: PUSH
38388: LD_INT 2
38390: ARRAY
38391: ST_TO_ADDR
// break ;
38392: GO 38396
// end ;
38394: GO 38354
38396: POP
38397: POP
// if not weapon then
38398: LD_VAR 0 8
38402: NOT
38403: IFFALSE 38407
// continue ;
38405: GO 38303
// for k in factories do
38407: LD_ADDR_VAR 0 6
38411: PUSH
38412: LD_VAR 0 2
38416: PUSH
38417: FOR_IN
38418: IFFALSE 38483
// begin weapons := AvailableWeaponList ( k ) ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_VAR 0 6
38429: PPUSH
38430: CALL_OW 478
38434: ST_TO_ADDR
// if not weapons then
38435: LD_VAR 0 9
38439: NOT
38440: IFFALSE 38444
// continue ;
38442: GO 38417
// if weapon in weapons then
38444: LD_VAR 0 8
38448: PUSH
38449: LD_VAR 0 9
38453: IN
38454: IFFALSE 38481
// begin result := [ i , weapon ] ;
38456: LD_ADDR_VAR 0 3
38460: PUSH
38461: LD_VAR 0 4
38465: PUSH
38466: LD_VAR 0 8
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// exit ;
38475: POP
38476: POP
38477: POP
38478: POP
38479: GO 38489
// end ; end ;
38481: GO 38417
38483: POP
38484: POP
// end ;
38485: GO 38303
38487: POP
38488: POP
// end ;
38489: LD_VAR 0 3
38493: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38494: LD_INT 0
38496: PPUSH
// if not side or side > 8 then
38497: LD_VAR 0 3
38501: NOT
38502: PUSH
38503: LD_VAR 0 3
38507: PUSH
38508: LD_INT 8
38510: GREATER
38511: OR
38512: IFFALSE 38516
// exit ;
38514: GO 38575
// if not range then
38516: LD_VAR 0 4
38520: NOT
38521: IFFALSE 38532
// range := - 12 ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_INT 12
38530: NEG
38531: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38532: LD_VAR 0 1
38536: PPUSH
38537: LD_VAR 0 2
38541: PPUSH
38542: LD_VAR 0 3
38546: PPUSH
38547: LD_VAR 0 4
38551: PPUSH
38552: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_VAR 0 2
38565: PPUSH
38566: LD_VAR 0 3
38570: PPUSH
38571: CALL_OW 331
// end ;
38575: LD_VAR 0 5
38579: RET
// export function Video ( mode ) ; begin
38580: LD_INT 0
38582: PPUSH
// ingame_video = mode ;
38583: LD_ADDR_OWVAR 52
38587: PUSH
38588: LD_VAR 0 1
38592: ST_TO_ADDR
// interface_hidden = mode ;
38593: LD_ADDR_OWVAR 54
38597: PUSH
38598: LD_VAR 0 1
38602: ST_TO_ADDR
// end ;
38603: LD_VAR 0 2
38607: RET
// export function Join ( array , element ) ; begin
38608: LD_INT 0
38610: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38611: LD_ADDR_VAR 0 3
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: LD_VAR 0 1
38625: PUSH
38626: LD_INT 1
38628: PLUS
38629: PPUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: CALL_OW 1
38639: ST_TO_ADDR
// end ;
38640: LD_VAR 0 3
38644: RET
// export function JoinUnion ( array , element ) ; begin
38645: LD_INT 0
38647: PPUSH
// result := array union element ;
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_VAR 0 1
38657: PUSH
38658: LD_VAR 0 2
38662: UNION
38663: ST_TO_ADDR
// end ;
38664: LD_VAR 0 3
38668: RET
// export function GetBehemoths ( side ) ; begin
38669: LD_INT 0
38671: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38672: LD_ADDR_VAR 0 2
38676: PUSH
38677: LD_INT 22
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 31
38691: PUSH
38692: LD_INT 25
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 69
38707: ST_TO_ADDR
// end ;
38708: LD_VAR 0 2
38712: RET
// export function Shuffle ( array ) ; var i , index ; begin
38713: LD_INT 0
38715: PPUSH
38716: PPUSH
38717: PPUSH
// result := [ ] ;
38718: LD_ADDR_VAR 0 2
38722: PUSH
38723: EMPTY
38724: ST_TO_ADDR
// if not array then
38725: LD_VAR 0 1
38729: NOT
38730: IFFALSE 38734
// exit ;
38732: GO 38833
// Randomize ;
38734: CALL_OW 10
// for i = array downto 1 do
38738: LD_ADDR_VAR 0 3
38742: PUSH
38743: DOUBLE
38744: LD_VAR 0 1
38748: INC
38749: ST_TO_ADDR
38750: LD_INT 1
38752: PUSH
38753: FOR_DOWNTO
38754: IFFALSE 38831
// begin index := rand ( 1 , array ) ;
38756: LD_ADDR_VAR 0 4
38760: PUSH
38761: LD_INT 1
38763: PPUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 12
38773: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38774: LD_ADDR_VAR 0 2
38778: PUSH
38779: LD_VAR 0 2
38783: PPUSH
38784: LD_VAR 0 2
38788: PUSH
38789: LD_INT 1
38791: PLUS
38792: PPUSH
38793: LD_VAR 0 1
38797: PUSH
38798: LD_VAR 0 4
38802: ARRAY
38803: PPUSH
38804: CALL_OW 2
38808: ST_TO_ADDR
// array := Delete ( array , index ) ;
38809: LD_ADDR_VAR 0 1
38813: PUSH
38814: LD_VAR 0 1
38818: PPUSH
38819: LD_VAR 0 4
38823: PPUSH
38824: CALL_OW 3
38828: ST_TO_ADDR
// end ;
38829: GO 38753
38831: POP
38832: POP
// end ;
38833: LD_VAR 0 2
38837: RET
// export function GetBaseMaterials ( base ) ; begin
38838: LD_INT 0
38840: PPUSH
// result := [ 0 , 0 , 0 ] ;
38841: LD_ADDR_VAR 0 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// if not base then
38860: LD_VAR 0 1
38864: NOT
38865: IFFALSE 38869
// exit ;
38867: GO 38918
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38869: LD_ADDR_VAR 0 2
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: LD_INT 1
38881: PPUSH
38882: CALL_OW 275
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_INT 2
38894: PPUSH
38895: CALL_OW 275
38899: PUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: LD_INT 3
38907: PPUSH
38908: CALL_OW 275
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 2
38922: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
// result := array ;
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_VAR 0 1
38936: ST_TO_ADDR
// if size >= result then
38937: LD_VAR 0 2
38941: PUSH
38942: LD_VAR 0 3
38946: GREATEREQUAL
38947: IFFALSE 38951
// exit ;
38949: GO 39001
// if size then
38951: LD_VAR 0 2
38955: IFFALSE 39001
// for i := array downto size do
38957: LD_ADDR_VAR 0 4
38961: PUSH
38962: DOUBLE
38963: LD_VAR 0 1
38967: INC
38968: ST_TO_ADDR
38969: LD_VAR 0 2
38973: PUSH
38974: FOR_DOWNTO
38975: IFFALSE 38999
// result := Delete ( result , result ) ;
38977: LD_ADDR_VAR 0 3
38981: PUSH
38982: LD_VAR 0 3
38986: PPUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: CALL_OW 3
38996: ST_TO_ADDR
38997: GO 38974
38999: POP
39000: POP
// end ;
39001: LD_VAR 0 3
39005: RET
// export function ComExit ( unit ) ; var tmp ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
// if not IsInUnit ( unit ) then
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 310
39019: NOT
39020: IFFALSE 39024
// exit ;
39022: GO 39084
// tmp := IsInUnit ( unit ) ;
39024: LD_ADDR_VAR 0 3
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 310
39038: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39039: LD_VAR 0 3
39043: PPUSH
39044: CALL_OW 247
39048: PUSH
39049: LD_INT 2
39051: EQUAL
39052: IFFALSE 39065
// ComExitVehicle ( unit ) else
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 121
39063: GO 39074
// ComExitBuilding ( unit ) ;
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 122
// result := tmp ;
39074: LD_ADDR_VAR 0 2
39078: PUSH
39079: LD_VAR 0 3
39083: ST_TO_ADDR
// end ;
39084: LD_VAR 0 2
39088: RET
// export function ComExitAll ( units ) ; var i ; begin
39089: LD_INT 0
39091: PPUSH
39092: PPUSH
// if not units then
39093: LD_VAR 0 1
39097: NOT
39098: IFFALSE 39102
// exit ;
39100: GO 39128
// for i in units do
39102: LD_ADDR_VAR 0 3
39106: PUSH
39107: LD_VAR 0 1
39111: PUSH
39112: FOR_IN
39113: IFFALSE 39126
// ComExit ( i ) ;
39115: LD_VAR 0 3
39119: PPUSH
39120: CALL 39006 0 1
39124: GO 39112
39126: POP
39127: POP
// end ;
39128: LD_VAR 0 2
39132: RET
// export function ResetHc ; begin
39133: LD_INT 0
39135: PPUSH
// InitHc ;
39136: CALL_OW 19
// hc_importance := 0 ;
39140: LD_ADDR_OWVAR 32
39144: PUSH
39145: LD_INT 0
39147: ST_TO_ADDR
// end ;
39148: LD_VAR 0 1
39152: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39158: LD_ADDR_VAR 0 6
39162: PUSH
39163: LD_VAR 0 1
39167: PUSH
39168: LD_VAR 0 3
39172: PLUS
39173: PUSH
39174: LD_INT 2
39176: DIV
39177: ST_TO_ADDR
// if _x < 0 then
39178: LD_VAR 0 6
39182: PUSH
39183: LD_INT 0
39185: LESS
39186: IFFALSE 39203
// _x := _x * - 1 ;
39188: LD_ADDR_VAR 0 6
39192: PUSH
39193: LD_VAR 0 6
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: MUL
39202: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39203: LD_ADDR_VAR 0 7
39207: PUSH
39208: LD_VAR 0 2
39212: PUSH
39213: LD_VAR 0 4
39217: PLUS
39218: PUSH
39219: LD_INT 2
39221: DIV
39222: ST_TO_ADDR
// if _y < 0 then
39223: LD_VAR 0 7
39227: PUSH
39228: LD_INT 0
39230: LESS
39231: IFFALSE 39248
// _y := _y * - 1 ;
39233: LD_ADDR_VAR 0 7
39237: PUSH
39238: LD_VAR 0 7
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: MUL
39247: ST_TO_ADDR
// result := [ _x , _y ] ;
39248: LD_ADDR_VAR 0 5
39252: PUSH
39253: LD_VAR 0 6
39257: PUSH
39258: LD_VAR 0 7
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// end ;
39267: LD_VAR 0 5
39271: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39272: LD_INT 0
39274: PPUSH
39275: PPUSH
39276: PPUSH
39277: PPUSH
// task := GetTaskList ( unit ) ;
39278: LD_ADDR_VAR 0 7
39282: PUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: CALL_OW 437
39292: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39293: LD_VAR 0 7
39297: NOT
39298: PUSH
39299: LD_VAR 0 1
39303: PPUSH
39304: LD_VAR 0 2
39308: PPUSH
39309: CALL_OW 308
39313: NOT
39314: AND
39315: IFFALSE 39319
// exit ;
39317: GO 39437
// if IsInArea ( unit , area ) then
39319: LD_VAR 0 1
39323: PPUSH
39324: LD_VAR 0 2
39328: PPUSH
39329: CALL_OW 308
39333: IFFALSE 39351
// begin ComMoveToArea ( unit , goAway ) ;
39335: LD_VAR 0 1
39339: PPUSH
39340: LD_VAR 0 3
39344: PPUSH
39345: CALL_OW 113
// exit ;
39349: GO 39437
// end ; if task [ 1 ] [ 1 ] <> M then
39351: LD_VAR 0 7
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PUSH
39360: LD_INT 1
39362: ARRAY
39363: PUSH
39364: LD_STRING M
39366: NONEQUAL
39367: IFFALSE 39371
// exit ;
39369: GO 39437
// x := task [ 1 ] [ 2 ] ;
39371: LD_ADDR_VAR 0 5
39375: PUSH
39376: LD_VAR 0 7
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39389: LD_ADDR_VAR 0 6
39393: PUSH
39394: LD_VAR 0 7
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PUSH
39403: LD_INT 3
39405: ARRAY
39406: ST_TO_ADDR
// if InArea ( x , y , area ) then
39407: LD_VAR 0 5
39411: PPUSH
39412: LD_VAR 0 6
39416: PPUSH
39417: LD_VAR 0 2
39421: PPUSH
39422: CALL_OW 309
39426: IFFALSE 39437
// ComStop ( unit ) ;
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 141
// end ;
39437: LD_VAR 0 4
39441: RET
// export function Abs ( value ) ; begin
39442: LD_INT 0
39444: PPUSH
// result := value ;
39445: LD_ADDR_VAR 0 2
39449: PUSH
39450: LD_VAR 0 1
39454: ST_TO_ADDR
// if value < 0 then
39455: LD_VAR 0 1
39459: PUSH
39460: LD_INT 0
39462: LESS
39463: IFFALSE 39480
// result := value * - 1 ;
39465: LD_ADDR_VAR 0 2
39469: PUSH
39470: LD_VAR 0 1
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: MUL
39479: ST_TO_ADDR
// end ;
39480: LD_VAR 0 2
39484: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
// if not unit or not building then
39495: LD_VAR 0 1
39499: NOT
39500: PUSH
39501: LD_VAR 0 2
39505: NOT
39506: OR
39507: IFFALSE 39511
// exit ;
39509: GO 39737
// x := GetX ( building ) ;
39511: LD_ADDR_VAR 0 4
39515: PUSH
39516: LD_VAR 0 2
39520: PPUSH
39521: CALL_OW 250
39525: ST_TO_ADDR
// y := GetY ( building ) ;
39526: LD_ADDR_VAR 0 6
39530: PUSH
39531: LD_VAR 0 2
39535: PPUSH
39536: CALL_OW 251
39540: ST_TO_ADDR
// d := GetDir ( building ) ;
39541: LD_ADDR_VAR 0 8
39545: PUSH
39546: LD_VAR 0 2
39550: PPUSH
39551: CALL_OW 254
39555: ST_TO_ADDR
// r := 4 ;
39556: LD_ADDR_VAR 0 9
39560: PUSH
39561: LD_INT 4
39563: ST_TO_ADDR
// for i := 1 to 5 do
39564: LD_ADDR_VAR 0 10
39568: PUSH
39569: DOUBLE
39570: LD_INT 1
39572: DEC
39573: ST_TO_ADDR
39574: LD_INT 5
39576: PUSH
39577: FOR_TO
39578: IFFALSE 39735
// begin _x := ShiftX ( x , d , r + i ) ;
39580: LD_ADDR_VAR 0 5
39584: PUSH
39585: LD_VAR 0 4
39589: PPUSH
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_VAR 0 9
39599: PUSH
39600: LD_VAR 0 10
39604: PLUS
39605: PPUSH
39606: CALL_OW 272
39610: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39611: LD_ADDR_VAR 0 7
39615: PUSH
39616: LD_VAR 0 6
39620: PPUSH
39621: LD_VAR 0 8
39625: PPUSH
39626: LD_VAR 0 9
39630: PUSH
39631: LD_VAR 0 10
39635: PLUS
39636: PPUSH
39637: CALL_OW 273
39641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39642: LD_VAR 0 5
39646: PPUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: CALL_OW 488
39656: PUSH
39657: LD_VAR 0 5
39661: PPUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: CALL_OW 428
39671: PPUSH
39672: CALL_OW 247
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: IN
39687: NOT
39688: AND
39689: IFFALSE 39733
// begin ComMoveXY ( unit , _x , _y ) ;
39691: LD_VAR 0 1
39695: PPUSH
39696: LD_VAR 0 5
39700: PPUSH
39701: LD_VAR 0 7
39705: PPUSH
39706: CALL_OW 111
// result := [ _x , _y ] ;
39710: LD_ADDR_VAR 0 3
39714: PUSH
39715: LD_VAR 0 5
39719: PUSH
39720: LD_VAR 0 7
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: ST_TO_ADDR
// exit ;
39729: POP
39730: POP
39731: GO 39737
// end ; end ;
39733: GO 39577
39735: POP
39736: POP
// end ;
39737: LD_VAR 0 3
39741: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39742: LD_INT 0
39744: PPUSH
39745: PPUSH
39746: PPUSH
// result := 0 ;
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_INT 0
39754: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39755: LD_VAR 0 1
39759: PUSH
39760: LD_INT 0
39762: LESS
39763: PUSH
39764: LD_VAR 0 1
39768: PUSH
39769: LD_INT 8
39771: GREATER
39772: OR
39773: PUSH
39774: LD_VAR 0 2
39778: PUSH
39779: LD_INT 0
39781: LESS
39782: OR
39783: PUSH
39784: LD_VAR 0 2
39788: PUSH
39789: LD_INT 8
39791: GREATER
39792: OR
39793: IFFALSE 39797
// exit ;
39795: GO 39872
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39797: LD_ADDR_VAR 0 4
39801: PUSH
39802: LD_INT 22
39804: PUSH
39805: LD_VAR 0 2
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PPUSH
39814: CALL_OW 69
39818: PUSH
39819: FOR_IN
39820: IFFALSE 39870
// begin un := UnitShoot ( i ) ;
39822: LD_ADDR_VAR 0 5
39826: PUSH
39827: LD_VAR 0 4
39831: PPUSH
39832: CALL_OW 504
39836: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39837: LD_VAR 0 5
39841: PPUSH
39842: CALL_OW 255
39846: PUSH
39847: LD_VAR 0 1
39851: EQUAL
39852: IFFALSE 39868
// begin result := un ;
39854: LD_ADDR_VAR 0 3
39858: PUSH
39859: LD_VAR 0 5
39863: ST_TO_ADDR
// exit ;
39864: POP
39865: POP
39866: GO 39872
// end ; end ;
39868: GO 39819
39870: POP
39871: POP
// end ;
39872: LD_VAR 0 3
39876: RET
// export function GetCargoBay ( units ) ; begin
39877: LD_INT 0
39879: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39880: LD_ADDR_VAR 0 2
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 34
39895: PUSH
39896: LD_INT 12
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 34
39905: PUSH
39906: LD_INT 51
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 34
39915: PUSH
39916: LD_INT 32
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 34
39925: PUSH
39926: LD_INT 89
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: PPUSH
39940: CALL_OW 72
39944: ST_TO_ADDR
// end ;
39945: LD_VAR 0 2
39949: RET
// export function Negate ( value ) ; begin
39950: LD_INT 0
39952: PPUSH
// result := not value ;
39953: LD_ADDR_VAR 0 2
39957: PUSH
39958: LD_VAR 0 1
39962: NOT
39963: ST_TO_ADDR
// end ;
39964: LD_VAR 0 2
39968: RET
// export function Inc ( value ) ; begin
39969: LD_INT 0
39971: PPUSH
// result := value + 1 ;
39972: LD_ADDR_VAR 0 2
39976: PUSH
39977: LD_VAR 0 1
39981: PUSH
39982: LD_INT 1
39984: PLUS
39985: ST_TO_ADDR
// end ;
39986: LD_VAR 0 2
39990: RET
// export function Dec ( value ) ; begin
39991: LD_INT 0
39993: PPUSH
// result := value - 1 ;
39994: LD_ADDR_VAR 0 2
39998: PUSH
39999: LD_VAR 0 1
40003: PUSH
40004: LD_INT 1
40006: MINUS
40007: ST_TO_ADDR
// end ;
40008: LD_VAR 0 2
40012: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40013: LD_INT 0
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40023: LD_VAR 0 1
40027: PPUSH
40028: LD_VAR 0 2
40032: PPUSH
40033: CALL_OW 488
40037: NOT
40038: PUSH
40039: LD_VAR 0 3
40043: PPUSH
40044: LD_VAR 0 4
40048: PPUSH
40049: CALL_OW 488
40053: NOT
40054: OR
40055: IFFALSE 40068
// begin result := - 1 ;
40057: LD_ADDR_VAR 0 5
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: ST_TO_ADDR
// exit ;
40066: GO 40303
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40068: LD_ADDR_VAR 0 12
40072: PUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: LD_VAR 0 2
40082: PPUSH
40083: LD_VAR 0 3
40087: PPUSH
40088: LD_VAR 0 4
40092: PPUSH
40093: CALL 39153 0 4
40097: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40098: LD_ADDR_VAR 0 11
40102: PUSH
40103: LD_VAR 0 1
40107: PPUSH
40108: LD_VAR 0 2
40112: PPUSH
40113: LD_VAR 0 12
40117: PUSH
40118: LD_INT 1
40120: ARRAY
40121: PPUSH
40122: LD_VAR 0 12
40126: PUSH
40127: LD_INT 2
40129: ARRAY
40130: PPUSH
40131: CALL_OW 298
40135: ST_TO_ADDR
// distance := 9999 ;
40136: LD_ADDR_VAR 0 10
40140: PUSH
40141: LD_INT 9999
40143: ST_TO_ADDR
// for i := 0 to 5 do
40144: LD_ADDR_VAR 0 6
40148: PUSH
40149: DOUBLE
40150: LD_INT 0
40152: DEC
40153: ST_TO_ADDR
40154: LD_INT 5
40156: PUSH
40157: FOR_TO
40158: IFFALSE 40301
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_VAR 0 6
40174: PPUSH
40175: LD_VAR 0 11
40179: PPUSH
40180: CALL_OW 272
40184: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40185: LD_ADDR_VAR 0 8
40189: PUSH
40190: LD_VAR 0 2
40194: PPUSH
40195: LD_VAR 0 6
40199: PPUSH
40200: LD_VAR 0 11
40204: PPUSH
40205: CALL_OW 273
40209: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40210: LD_VAR 0 7
40214: PPUSH
40215: LD_VAR 0 8
40219: PPUSH
40220: CALL_OW 488
40224: NOT
40225: IFFALSE 40229
// continue ;
40227: GO 40157
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40229: LD_ADDR_VAR 0 9
40233: PUSH
40234: LD_VAR 0 12
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 12
40247: PUSH
40248: LD_INT 2
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 7
40256: PPUSH
40257: LD_VAR 0 8
40261: PPUSH
40262: CALL_OW 298
40266: ST_TO_ADDR
// if tmp < distance then
40267: LD_VAR 0 9
40271: PUSH
40272: LD_VAR 0 10
40276: LESS
40277: IFFALSE 40299
// begin result := i ;
40279: LD_ADDR_VAR 0 5
40283: PUSH
40284: LD_VAR 0 6
40288: ST_TO_ADDR
// distance := tmp ;
40289: LD_ADDR_VAR 0 10
40293: PUSH
40294: LD_VAR 0 9
40298: ST_TO_ADDR
// end ; end ;
40299: GO 40157
40301: POP
40302: POP
// end ;
40303: LD_VAR 0 5
40307: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40308: LD_INT 0
40310: PPUSH
40311: PPUSH
// if not driver or not IsInUnit ( driver ) then
40312: LD_VAR 0 1
40316: NOT
40317: PUSH
40318: LD_VAR 0 1
40322: PPUSH
40323: CALL_OW 310
40327: NOT
40328: OR
40329: IFFALSE 40333
// exit ;
40331: GO 40423
// vehicle := IsInUnit ( driver ) ;
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 310
40347: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40348: LD_VAR 0 1
40352: PPUSH
40353: LD_STRING \
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: LD_STRING E
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_VAR 0 3
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PPUSH
40419: CALL_OW 446
// end ;
40423: LD_VAR 0 2
40427: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
// if not driver or not IsInUnit ( driver ) then
40432: LD_VAR 0 1
40436: NOT
40437: PUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: CALL_OW 310
40447: NOT
40448: OR
40449: IFFALSE 40453
// exit ;
40451: GO 40543
// vehicle := IsInUnit ( driver ) ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: CALL_OW 310
40467: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40468: LD_VAR 0 1
40472: PPUSH
40473: LD_STRING \
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: LD_STRING E
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_VAR 0 3
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PPUSH
40539: CALL_OW 447
// end ;
40543: LD_VAR 0 2
40547: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40548: LD_INT 0
40550: PPUSH
40551: PPUSH
40552: PPUSH
// tmp := [ ] ;
40553: LD_ADDR_VAR 0 5
40557: PUSH
40558: EMPTY
40559: ST_TO_ADDR
// for i in units do
40560: LD_ADDR_VAR 0 4
40564: PUSH
40565: LD_VAR 0 1
40569: PUSH
40570: FOR_IN
40571: IFFALSE 40609
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40573: LD_ADDR_VAR 0 5
40577: PUSH
40578: LD_VAR 0 5
40582: PPUSH
40583: LD_VAR 0 5
40587: PUSH
40588: LD_INT 1
40590: PLUS
40591: PPUSH
40592: LD_VAR 0 4
40596: PPUSH
40597: CALL_OW 256
40601: PPUSH
40602: CALL_OW 2
40606: ST_TO_ADDR
40607: GO 40570
40609: POP
40610: POP
// if not tmp then
40611: LD_VAR 0 5
40615: NOT
40616: IFFALSE 40620
// exit ;
40618: GO 40668
// if asc then
40620: LD_VAR 0 2
40624: IFFALSE 40648
// result := SortListByListAsc ( units , tmp ) else
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: LD_VAR 0 5
40640: PPUSH
40641: CALL_OW 76
40645: ST_TO_ADDR
40646: GO 40668
// result := SortListByListDesc ( units , tmp ) ;
40648: LD_ADDR_VAR 0 3
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: LD_VAR 0 5
40662: PPUSH
40663: CALL_OW 77
40667: ST_TO_ADDR
// end ;
40668: LD_VAR 0 3
40672: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40673: LD_INT 0
40675: PPUSH
40676: PPUSH
// task := GetTaskList ( mech ) ;
40677: LD_ADDR_VAR 0 4
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 437
40691: ST_TO_ADDR
// if not task then
40692: LD_VAR 0 4
40696: NOT
40697: IFFALSE 40701
// exit ;
40699: GO 40743
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40701: LD_ADDR_VAR 0 3
40705: PUSH
40706: LD_VAR 0 4
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: PUSH
40719: LD_STRING r
40721: EQUAL
40722: PUSH
40723: LD_VAR 0 4
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PUSH
40732: LD_INT 4
40734: ARRAY
40735: PUSH
40736: LD_VAR 0 2
40740: EQUAL
40741: AND
40742: ST_TO_ADDR
// end ;
40743: LD_VAR 0 3
40747: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40748: LD_INT 0
40750: PPUSH
// SetDir ( unit , d ) ;
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_VAR 0 4
40760: PPUSH
40761: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40765: LD_VAR 0 1
40769: PPUSH
40770: LD_VAR 0 2
40774: PPUSH
40775: LD_VAR 0 3
40779: PPUSH
40780: LD_VAR 0 5
40784: PPUSH
40785: CALL_OW 48
// end ;
40789: LD_VAR 0 6
40793: RET
// export function ToNaturalNumber ( number ) ; begin
40794: LD_INT 0
40796: PPUSH
// result := number div 1 ;
40797: LD_ADDR_VAR 0 2
40801: PUSH
40802: LD_VAR 0 1
40806: PUSH
40807: LD_INT 1
40809: DIV
40810: ST_TO_ADDR
// if number < 0 then
40811: LD_VAR 0 1
40815: PUSH
40816: LD_INT 0
40818: LESS
40819: IFFALSE 40829
// result := 0 ;
40821: LD_ADDR_VAR 0 2
40825: PUSH
40826: LD_INT 0
40828: ST_TO_ADDR
// end ;
40829: LD_VAR 0 2
40833: RET
// export function SortByClass ( units , class ) ; var un ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
// if not units or not class then
40838: LD_VAR 0 1
40842: NOT
40843: PUSH
40844: LD_VAR 0 2
40848: NOT
40849: OR
40850: IFFALSE 40854
// exit ;
40852: GO 40949
// result := [ ] ;
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: EMPTY
40860: ST_TO_ADDR
// for un in units do
40861: LD_ADDR_VAR 0 4
40865: PUSH
40866: LD_VAR 0 1
40870: PUSH
40871: FOR_IN
40872: IFFALSE 40947
// if GetClass ( un ) = class then
40874: LD_VAR 0 4
40878: PPUSH
40879: CALL_OW 257
40883: PUSH
40884: LD_VAR 0 2
40888: EQUAL
40889: IFFALSE 40916
// result := Insert ( result , 1 , un ) else
40891: LD_ADDR_VAR 0 3
40895: PUSH
40896: LD_VAR 0 3
40900: PPUSH
40901: LD_INT 1
40903: PPUSH
40904: LD_VAR 0 4
40908: PPUSH
40909: CALL_OW 2
40913: ST_TO_ADDR
40914: GO 40945
// result := Replace ( result , result + 1 , un ) ;
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_VAR 0 3
40925: PPUSH
40926: LD_VAR 0 3
40930: PUSH
40931: LD_INT 1
40933: PLUS
40934: PPUSH
40935: LD_VAR 0 4
40939: PPUSH
40940: CALL_OW 1
40944: ST_TO_ADDR
40945: GO 40871
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 3
40953: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
// result := [ ] ;
40963: LD_ADDR_VAR 0 4
40967: PUSH
40968: EMPTY
40969: ST_TO_ADDR
// if x - r < 0 then
40970: LD_VAR 0 1
40974: PUSH
40975: LD_VAR 0 3
40979: MINUS
40980: PUSH
40981: LD_INT 0
40983: LESS
40984: IFFALSE 40996
// min_x := 0 else
40986: LD_ADDR_VAR 0 8
40990: PUSH
40991: LD_INT 0
40993: ST_TO_ADDR
40994: GO 41012
// min_x := x - r ;
40996: LD_ADDR_VAR 0 8
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_VAR 0 3
41010: MINUS
41011: ST_TO_ADDR
// if y - r < 0 then
41012: LD_VAR 0 2
41016: PUSH
41017: LD_VAR 0 3
41021: MINUS
41022: PUSH
41023: LD_INT 0
41025: LESS
41026: IFFALSE 41038
// min_y := 0 else
41028: LD_ADDR_VAR 0 7
41032: PUSH
41033: LD_INT 0
41035: ST_TO_ADDR
41036: GO 41054
// min_y := y - r ;
41038: LD_ADDR_VAR 0 7
41042: PUSH
41043: LD_VAR 0 2
41047: PUSH
41048: LD_VAR 0 3
41052: MINUS
41053: ST_TO_ADDR
// max_x := x + r ;
41054: LD_ADDR_VAR 0 9
41058: PUSH
41059: LD_VAR 0 1
41063: PUSH
41064: LD_VAR 0 3
41068: PLUS
41069: ST_TO_ADDR
// max_y := y + r ;
41070: LD_ADDR_VAR 0 10
41074: PUSH
41075: LD_VAR 0 2
41079: PUSH
41080: LD_VAR 0 3
41084: PLUS
41085: ST_TO_ADDR
// for _x = min_x to max_x do
41086: LD_ADDR_VAR 0 5
41090: PUSH
41091: DOUBLE
41092: LD_VAR 0 8
41096: DEC
41097: ST_TO_ADDR
41098: LD_VAR 0 9
41102: PUSH
41103: FOR_TO
41104: IFFALSE 41205
// for _y = min_y to max_y do
41106: LD_ADDR_VAR 0 6
41110: PUSH
41111: DOUBLE
41112: LD_VAR 0 7
41116: DEC
41117: ST_TO_ADDR
41118: LD_VAR 0 10
41122: PUSH
41123: FOR_TO
41124: IFFALSE 41201
// begin if not ValidHex ( _x , _y ) then
41126: LD_VAR 0 5
41130: PPUSH
41131: LD_VAR 0 6
41135: PPUSH
41136: CALL_OW 488
41140: NOT
41141: IFFALSE 41145
// continue ;
41143: GO 41123
// if GetResourceTypeXY ( _x , _y ) then
41145: LD_VAR 0 5
41149: PPUSH
41150: LD_VAR 0 6
41154: PPUSH
41155: CALL_OW 283
41159: IFFALSE 41199
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41161: LD_ADDR_VAR 0 4
41165: PUSH
41166: LD_VAR 0 4
41170: PPUSH
41171: LD_VAR 0 4
41175: PUSH
41176: LD_INT 1
41178: PLUS
41179: PPUSH
41180: LD_VAR 0 5
41184: PUSH
41185: LD_VAR 0 6
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PPUSH
41194: CALL_OW 1
41198: ST_TO_ADDR
// end ;
41199: GO 41123
41201: POP
41202: POP
41203: GO 41103
41205: POP
41206: POP
// end ;
41207: LD_VAR 0 4
41211: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41212: LD_INT 0
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
// if not units then
41222: LD_VAR 0 1
41226: NOT
41227: IFFALSE 41231
// exit ;
41229: GO 41755
// result := UnitFilter ( units , [ f_ok ] ) ;
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_VAR 0 1
41240: PPUSH
41241: LD_INT 50
41243: PUSH
41244: EMPTY
41245: LIST
41246: PPUSH
41247: CALL_OW 72
41251: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41252: LD_ADDR_VAR 0 8
41256: PUSH
41257: LD_VAR 0 1
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: PPUSH
41266: CALL_OW 255
41270: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41271: LD_ADDR_VAR 0 10
41275: PUSH
41276: LD_INT 29
41278: PUSH
41279: LD_INT 91
41281: PUSH
41282: LD_INT 49
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// if not result then
41290: LD_VAR 0 3
41294: NOT
41295: IFFALSE 41299
// exit ;
41297: GO 41755
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41299: LD_ADDR_VAR 0 5
41303: PUSH
41304: LD_INT 81
41306: PUSH
41307: LD_VAR 0 8
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 69
41320: ST_TO_ADDR
// for i in result do
41321: LD_ADDR_VAR 0 4
41325: PUSH
41326: LD_VAR 0 3
41330: PUSH
41331: FOR_IN
41332: IFFALSE 41753
// begin tag := GetTag ( i ) + 1 ;
41334: LD_ADDR_VAR 0 9
41338: PUSH
41339: LD_VAR 0 4
41343: PPUSH
41344: CALL_OW 110
41348: PUSH
41349: LD_INT 1
41351: PLUS
41352: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41353: LD_ADDR_VAR 0 7
41357: PUSH
41358: LD_VAR 0 4
41362: PPUSH
41363: CALL_OW 250
41367: PPUSH
41368: LD_VAR 0 4
41372: PPUSH
41373: CALL_OW 251
41377: PPUSH
41378: LD_INT 6
41380: PPUSH
41381: CALL 40954 0 3
41385: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41386: LD_VAR 0 4
41390: PPUSH
41391: CALL_OW 247
41395: PUSH
41396: LD_INT 2
41398: EQUAL
41399: PUSH
41400: LD_VAR 0 7
41404: AND
41405: PUSH
41406: LD_VAR 0 4
41410: PPUSH
41411: CALL_OW 264
41415: PUSH
41416: LD_VAR 0 10
41420: IN
41421: NOT
41422: AND
41423: IFFALSE 41462
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41425: LD_VAR 0 4
41429: PPUSH
41430: LD_VAR 0 7
41434: PUSH
41435: LD_INT 1
41437: ARRAY
41438: PUSH
41439: LD_INT 1
41441: ARRAY
41442: PPUSH
41443: LD_VAR 0 7
41447: PUSH
41448: LD_INT 1
41450: ARRAY
41451: PUSH
41452: LD_INT 2
41454: ARRAY
41455: PPUSH
41456: CALL_OW 116
41460: GO 41751
// if path > tag then
41462: LD_VAR 0 2
41466: PUSH
41467: LD_VAR 0 9
41471: GREATER
41472: IFFALSE 41680
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41474: LD_ADDR_VAR 0 6
41478: PUSH
41479: LD_VAR 0 5
41483: PPUSH
41484: LD_INT 91
41486: PUSH
41487: LD_VAR 0 4
41491: PUSH
41492: LD_INT 8
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: PPUSH
41500: CALL_OW 72
41504: ST_TO_ADDR
// if nearEnemy then
41505: LD_VAR 0 6
41509: IFFALSE 41578
// begin if GetWeapon ( i ) = ru_time_lapser then
41511: LD_VAR 0 4
41515: PPUSH
41516: CALL_OW 264
41520: PUSH
41521: LD_INT 49
41523: EQUAL
41524: IFFALSE 41552
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41526: LD_VAR 0 4
41530: PPUSH
41531: LD_VAR 0 6
41535: PPUSH
41536: LD_VAR 0 4
41540: PPUSH
41541: CALL_OW 74
41545: PPUSH
41546: CALL_OW 112
41550: GO 41576
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41552: LD_VAR 0 4
41556: PPUSH
41557: LD_VAR 0 6
41561: PPUSH
41562: LD_VAR 0 4
41566: PPUSH
41567: CALL_OW 74
41571: PPUSH
41572: CALL_OW 115
// end else
41576: GO 41678
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41578: LD_VAR 0 4
41582: PPUSH
41583: LD_VAR 0 2
41587: PUSH
41588: LD_VAR 0 9
41592: ARRAY
41593: PUSH
41594: LD_INT 1
41596: ARRAY
41597: PPUSH
41598: LD_VAR 0 2
41602: PUSH
41603: LD_VAR 0 9
41607: ARRAY
41608: PUSH
41609: LD_INT 2
41611: ARRAY
41612: PPUSH
41613: CALL_OW 297
41617: PUSH
41618: LD_INT 6
41620: GREATER
41621: IFFALSE 41664
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41623: LD_VAR 0 4
41627: PPUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_VAR 0 9
41637: ARRAY
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: PPUSH
41643: LD_VAR 0 2
41647: PUSH
41648: LD_VAR 0 9
41652: ARRAY
41653: PUSH
41654: LD_INT 2
41656: ARRAY
41657: PPUSH
41658: CALL_OW 114
41662: GO 41678
// SetTag ( i , tag ) ;
41664: LD_VAR 0 4
41668: PPUSH
41669: LD_VAR 0 9
41673: PPUSH
41674: CALL_OW 109
// end else
41678: GO 41751
// if enemy then
41680: LD_VAR 0 5
41684: IFFALSE 41751
// begin if GetWeapon ( i ) = ru_time_lapser then
41686: LD_VAR 0 4
41690: PPUSH
41691: CALL_OW 264
41695: PUSH
41696: LD_INT 49
41698: EQUAL
41699: IFFALSE 41727
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41701: LD_VAR 0 4
41705: PPUSH
41706: LD_VAR 0 5
41710: PPUSH
41711: LD_VAR 0 4
41715: PPUSH
41716: CALL_OW 74
41720: PPUSH
41721: CALL_OW 112
41725: GO 41751
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 5
41736: PPUSH
41737: LD_VAR 0 4
41741: PPUSH
41742: CALL_OW 74
41746: PPUSH
41747: CALL_OW 115
// end ; end ;
41751: GO 41331
41753: POP
41754: POP
// end ;
41755: LD_VAR 0 3
41759: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
41764: PPUSH
// if not unit or IsInUnit ( unit ) then
41765: LD_VAR 0 1
41769: NOT
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 310
41780: OR
41781: IFFALSE 41785
// exit ;
41783: GO 41876
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_VAR 0 1
41794: PPUSH
41795: CALL_OW 250
41799: PPUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: LD_INT 1
41807: PPUSH
41808: CALL_OW 272
41812: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41813: LD_ADDR_VAR 0 5
41817: PUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: CALL_OW 251
41827: PPUSH
41828: LD_VAR 0 2
41832: PPUSH
41833: LD_INT 1
41835: PPUSH
41836: CALL_OW 273
41840: ST_TO_ADDR
// if ValidHex ( x , y ) then
41841: LD_VAR 0 4
41845: PPUSH
41846: LD_VAR 0 5
41850: PPUSH
41851: CALL_OW 488
41855: IFFALSE 41876
// ComTurnXY ( unit , x , y ) ;
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_VAR 0 4
41866: PPUSH
41867: LD_VAR 0 5
41871: PPUSH
41872: CALL_OW 118
// end ;
41876: LD_VAR 0 3
41880: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41881: LD_INT 0
41883: PPUSH
41884: PPUSH
// result := false ;
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_INT 0
41892: ST_TO_ADDR
// if not units then
41893: LD_VAR 0 2
41897: NOT
41898: IFFALSE 41902
// exit ;
41900: GO 41947
// for i in units do
41902: LD_ADDR_VAR 0 4
41906: PUSH
41907: LD_VAR 0 2
41911: PUSH
41912: FOR_IN
41913: IFFALSE 41945
// if See ( side , i ) then
41915: LD_VAR 0 1
41919: PPUSH
41920: LD_VAR 0 4
41924: PPUSH
41925: CALL_OW 292
41929: IFFALSE 41943
// begin result := true ;
41931: LD_ADDR_VAR 0 3
41935: PUSH
41936: LD_INT 1
41938: ST_TO_ADDR
// exit ;
41939: POP
41940: POP
41941: GO 41947
// end ;
41943: GO 41912
41945: POP
41946: POP
// end ;
41947: LD_VAR 0 3
41951: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41952: LD_INT 0
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
// if not unit or not points then
41958: LD_VAR 0 1
41962: NOT
41963: PUSH
41964: LD_VAR 0 2
41968: NOT
41969: OR
41970: IFFALSE 41974
// exit ;
41972: GO 42064
// dist := 99999 ;
41974: LD_ADDR_VAR 0 5
41978: PUSH
41979: LD_INT 99999
41981: ST_TO_ADDR
// for i in points do
41982: LD_ADDR_VAR 0 4
41986: PUSH
41987: LD_VAR 0 2
41991: PUSH
41992: FOR_IN
41993: IFFALSE 42062
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41995: LD_ADDR_VAR 0 6
41999: PUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: LD_VAR 0 4
42009: PUSH
42010: LD_INT 1
42012: ARRAY
42013: PPUSH
42014: LD_VAR 0 4
42018: PUSH
42019: LD_INT 2
42021: ARRAY
42022: PPUSH
42023: CALL_OW 297
42027: ST_TO_ADDR
// if tmpDist < dist then
42028: LD_VAR 0 6
42032: PUSH
42033: LD_VAR 0 5
42037: LESS
42038: IFFALSE 42060
// begin result := i ;
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: LD_VAR 0 4
42049: ST_TO_ADDR
// dist := tmpDist ;
42050: LD_ADDR_VAR 0 5
42054: PUSH
42055: LD_VAR 0 6
42059: ST_TO_ADDR
// end ; end ;
42060: GO 41992
42062: POP
42063: POP
// end ;
42064: LD_VAR 0 3
42068: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42069: LD_INT 0
42071: PPUSH
// uc_side := side ;
42072: LD_ADDR_OWVAR 20
42076: PUSH
42077: LD_VAR 0 1
42081: ST_TO_ADDR
// uc_nation := 3 ;
42082: LD_ADDR_OWVAR 21
42086: PUSH
42087: LD_INT 3
42089: ST_TO_ADDR
// vc_chassis := 25 ;
42090: LD_ADDR_OWVAR 37
42094: PUSH
42095: LD_INT 25
42097: ST_TO_ADDR
// vc_engine := engine_siberite ;
42098: LD_ADDR_OWVAR 39
42102: PUSH
42103: LD_INT 3
42105: ST_TO_ADDR
// vc_control := control_computer ;
42106: LD_ADDR_OWVAR 38
42110: PUSH
42111: LD_INT 3
42113: ST_TO_ADDR
// vc_weapon := 59 ;
42114: LD_ADDR_OWVAR 40
42118: PUSH
42119: LD_INT 59
42121: ST_TO_ADDR
// result := CreateVehicle ;
42122: LD_ADDR_VAR 0 5
42126: PUSH
42127: CALL_OW 45
42131: ST_TO_ADDR
// SetDir ( result , d ) ;
42132: LD_VAR 0 5
42136: PPUSH
42137: LD_VAR 0 4
42141: PPUSH
42142: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42146: LD_VAR 0 5
42150: PPUSH
42151: LD_VAR 0 2
42155: PPUSH
42156: LD_VAR 0 3
42160: PPUSH
42161: LD_INT 0
42163: PPUSH
42164: CALL_OW 48
// end ;
42168: LD_VAR 0 5
42172: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42173: LD_INT 0
42175: PPUSH
42176: PPUSH
42177: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42178: LD_ADDR_VAR 0 2
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42201: LD_VAR 0 1
42205: NOT
42206: PUSH
42207: LD_VAR 0 1
42211: PPUSH
42212: CALL_OW 264
42216: PUSH
42217: LD_INT 12
42219: PUSH
42220: LD_INT 51
42222: PUSH
42223: LD_INT 32
42225: PUSH
42226: LD_INT 89
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: IN
42235: NOT
42236: OR
42237: IFFALSE 42241
// exit ;
42239: GO 42339
// for i := 1 to 3 do
42241: LD_ADDR_VAR 0 3
42245: PUSH
42246: DOUBLE
42247: LD_INT 1
42249: DEC
42250: ST_TO_ADDR
42251: LD_INT 3
42253: PUSH
42254: FOR_TO
42255: IFFALSE 42337
// begin tmp := GetCargo ( cargo , i ) ;
42257: LD_ADDR_VAR 0 4
42261: PUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: LD_VAR 0 3
42271: PPUSH
42272: CALL_OW 289
42276: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42277: LD_ADDR_VAR 0 2
42281: PUSH
42282: LD_VAR 0 2
42286: PPUSH
42287: LD_VAR 0 3
42291: PPUSH
42292: LD_VAR 0 4
42296: PPUSH
42297: CALL_OW 1
42301: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42302: LD_ADDR_VAR 0 2
42306: PUSH
42307: LD_VAR 0 2
42311: PPUSH
42312: LD_INT 4
42314: PPUSH
42315: LD_VAR 0 2
42319: PUSH
42320: LD_INT 4
42322: ARRAY
42323: PUSH
42324: LD_VAR 0 4
42328: PLUS
42329: PPUSH
42330: CALL_OW 1
42334: ST_TO_ADDR
// end ;
42335: GO 42254
42337: POP
42338: POP
// end ;
42339: LD_VAR 0 2
42343: RET
// export function Length ( array ) ; begin
42344: LD_INT 0
42346: PPUSH
// result := array + 0 ;
42347: LD_ADDR_VAR 0 2
42351: PUSH
42352: LD_VAR 0 1
42356: PUSH
42357: LD_INT 0
42359: PLUS
42360: ST_TO_ADDR
// end ;
42361: LD_VAR 0 2
42365: RET
// export function PrepareArray ( array ) ; begin
42366: LD_INT 0
42368: PPUSH
// result := array diff 0 ;
42369: LD_ADDR_VAR 0 2
42373: PUSH
42374: LD_VAR 0 1
42378: PUSH
42379: LD_INT 0
42381: DIFF
42382: ST_TO_ADDR
// if not result [ 1 ] then
42383: LD_VAR 0 2
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: NOT
42392: IFFALSE 42412
// result := Delete ( result , 1 ) ;
42394: LD_ADDR_VAR 0 2
42398: PUSH
42399: LD_VAR 0 2
42403: PPUSH
42404: LD_INT 1
42406: PPUSH
42407: CALL_OW 3
42411: ST_TO_ADDR
// end ;
42412: LD_VAR 0 2
42416: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42417: LD_INT 0
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
// sibRocketRange := 25 ;
42423: LD_ADDR_VAR 0 6
42427: PUSH
42428: LD_INT 25
42430: ST_TO_ADDR
// result := false ;
42431: LD_ADDR_VAR 0 4
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// for i := 0 to 5 do
42439: LD_ADDR_VAR 0 5
42443: PUSH
42444: DOUBLE
42445: LD_INT 0
42447: DEC
42448: ST_TO_ADDR
42449: LD_INT 5
42451: PUSH
42452: FOR_TO
42453: IFFALSE 42520
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42455: LD_VAR 0 1
42459: PPUSH
42460: LD_VAR 0 5
42464: PPUSH
42465: LD_VAR 0 6
42469: PPUSH
42470: CALL_OW 272
42474: PPUSH
42475: LD_VAR 0 2
42479: PPUSH
42480: LD_VAR 0 5
42484: PPUSH
42485: LD_VAR 0 6
42489: PPUSH
42490: CALL_OW 273
42494: PPUSH
42495: LD_VAR 0 3
42499: PPUSH
42500: CALL_OW 309
42504: IFFALSE 42518
// begin result := true ;
42506: LD_ADDR_VAR 0 4
42510: PUSH
42511: LD_INT 1
42513: ST_TO_ADDR
// exit ;
42514: POP
42515: POP
42516: GO 42522
// end ;
42518: GO 42452
42520: POP
42521: POP
// end ;
42522: LD_VAR 0 4
42526: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42527: LD_INT 0
42529: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42530: LD_VAR 0 1
42534: PPUSH
42535: LD_VAR 0 2
42539: PPUSH
42540: LD_INT 0
42542: PPUSH
42543: LD_INT 0
42545: PPUSH
42546: LD_INT 1
42548: PPUSH
42549: LD_INT 0
42551: PPUSH
42552: CALL_OW 587
// end ; end_of_file
42556: LD_VAR 0 3
42560: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
42561: LD_INT 0
42563: PPUSH
42564: PPUSH
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
// ecoStartPoint := startPoint ;
42570: LD_ADDR_EXP 6
42574: PUSH
42575: LD_VAR 0 1
42579: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42580: LD_EXP 6
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: PPUSH
42589: LD_EXP 6
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PPUSH
42598: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
42602: LD_ADDR_EXP 8
42606: PUSH
42607: LD_VAR 0 2
42611: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
42612: LD_ADDR_EXP 12
42616: PUSH
42617: LD_VAR 0 3
42621: ST_TO_ADDR
// if debug then
42622: LD_EXP 1
42626: IFFALSE 42670
// begin side := 1 ;
42628: LD_ADDR_VAR 0 7
42632: PUSH
42633: LD_INT 1
42635: ST_TO_ADDR
// nation := 1 ;
42636: LD_ADDR_VAR 0 8
42640: PUSH
42641: LD_INT 1
42643: ST_TO_ADDR
// peopleAmount := 15 ;
42644: LD_ADDR_VAR 0 9
42648: PUSH
42649: LD_INT 15
42651: ST_TO_ADDR
// resourcesAmount := 2 ;
42652: LD_ADDR_VAR 0 10
42656: PUSH
42657: LD_INT 2
42659: ST_TO_ADDR
// ecoCratesDrop := 3 ;
42660: LD_ADDR_EXP 7
42664: PUSH
42665: LD_INT 3
42667: ST_TO_ADDR
// end else
42668: GO 42766
// begin side := GetMultiplayerSetting ( 0 ) ;
42670: LD_ADDR_VAR 0 7
42674: PUSH
42675: LD_INT 0
42677: PPUSH
42678: CALL_OW 426
42682: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
42683: LD_ADDR_VAR 0 8
42687: PUSH
42688: LD_INT 1
42690: PPUSH
42691: CALL_OW 426
42695: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_INT 6
42703: PUSH
42704: LD_INT 9
42706: PUSH
42707: LD_INT 12
42709: PUSH
42710: LD_INT 15
42712: PUSH
42713: LD_INT 18
42715: PUSH
42716: LD_INT 21
42718: PUSH
42719: LD_INT 24
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PPUSH
42734: CALL_OW 426
42738: ARRAY
42739: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
42740: LD_ADDR_VAR 0 10
42744: PUSH
42745: LD_INT 3
42747: PPUSH
42748: CALL_OW 426
42752: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
42753: LD_ADDR_EXP 7
42757: PUSH
42758: LD_INT 4
42760: PPUSH
42761: CALL_OW 426
42765: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
42766: LD_ADDR_EXP 9
42770: PUSH
42771: LD_INT 1
42773: ST_TO_ADDR
// ecoEventsAllow := false ;
42774: LD_ADDR_EXP 11
42778: PUSH
42779: LD_INT 0
42781: ST_TO_ADDR
// ecoAttacksAllow := false ;
42782: LD_ADDR_EXP 10
42786: PUSH
42787: LD_INT 0
42789: ST_TO_ADDR
// ecoSide := side ;
42790: LD_ADDR_EXP 3
42794: PUSH
42795: LD_VAR 0 7
42799: ST_TO_ADDR
// your_side := side ;
42800: LD_ADDR_OWVAR 2
42804: PUSH
42805: LD_VAR 0 7
42809: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
42810: LD_INT 1
42812: PPUSH
42813: LD_VAR 0 7
42817: PPUSH
42818: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
42822: LD_INT 1
42824: PPUSH
42825: LD_INT 1
42827: PPUSH
42828: LD_VAR 0 7
42832: PPUSH
42833: LD_INT 32793
42835: NEG
42836: PPUSH
42837: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
42841: LD_INT 1
42843: PPUSH
42844: LD_INT 1
42846: PPUSH
42847: LD_VAR 0 7
42851: PPUSH
42852: CALL_OW 331
// ecoNation := nation ;
42856: LD_ADDR_EXP 4
42860: PUSH
42861: LD_VAR 0 8
42865: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
42866: LD_ADDR_EXP 5
42870: PUSH
42871: LD_VAR 0 9
42875: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: DOUBLE
42882: LD_INT 1
42884: DEC
42885: ST_TO_ADDR
42886: LD_VAR 0 10
42890: PUSH
42891: LD_INT 5
42893: MUL
42894: PUSH
42895: FOR_TO
42896: IFFALSE 42934
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
42898: LD_INT 1
42900: PPUSH
42901: LD_INT 5
42903: PPUSH
42904: LD_EXP 6
42908: PUSH
42909: LD_INT 1
42911: ARRAY
42912: PPUSH
42913: LD_EXP 6
42917: PUSH
42918: LD_INT 2
42920: ARRAY
42921: PPUSH
42922: LD_INT 6
42924: PPUSH
42925: LD_INT 0
42927: PPUSH
42928: CALL_OW 60
42932: GO 42895
42934: POP
42935: POP
// uc_side := side ;
42936: LD_ADDR_OWVAR 20
42940: PUSH
42941: LD_VAR 0 7
42945: ST_TO_ADDR
// uc_nation := nation ;
42946: LD_ADDR_OWVAR 21
42950: PUSH
42951: LD_VAR 0 8
42955: ST_TO_ADDR
// hc_importance := 100 ;
42956: LD_ADDR_OWVAR 32
42960: PUSH
42961: LD_INT 100
42963: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
42964: LD_INT 0
42966: PPUSH
42967: LD_INT 1
42969: PPUSH
42970: LD_INT 4
42972: PPUSH
42973: CALL_OW 380
// if side = 1 and nation = 1 then
42977: LD_VAR 0 7
42981: PUSH
42982: LD_INT 1
42984: EQUAL
42985: PUSH
42986: LD_VAR 0 8
42990: PUSH
42991: LD_INT 1
42993: EQUAL
42994: AND
42995: IFFALSE 43029
// begin hc_name := John Macmilan ;
42997: LD_ADDR_OWVAR 26
43001: PUSH
43002: LD_STRING John Macmilan
43004: ST_TO_ADDR
// hc_gallery := us ;
43005: LD_ADDR_OWVAR 33
43009: PUSH
43010: LD_STRING us
43012: ST_TO_ADDR
// hc_face_number := 5 ;
43013: LD_ADDR_OWVAR 34
43017: PUSH
43018: LD_INT 5
43020: ST_TO_ADDR
// hc_sex := sex_male ;
43021: LD_ADDR_OWVAR 27
43025: PUSH
43026: LD_INT 1
43028: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
43029: LD_VAR 0 7
43033: PUSH
43034: LD_INT 2
43036: EQUAL
43037: PUSH
43038: LD_VAR 0 8
43042: PUSH
43043: LD_INT 2
43045: EQUAL
43046: AND
43047: IFFALSE 43081
// begin hc_name := Heike Steyer ;
43049: LD_ADDR_OWVAR 26
43053: PUSH
43054: LD_STRING Heike Steyer
43056: ST_TO_ADDR
// hc_gallery := sandar ;
43057: LD_ADDR_OWVAR 33
43061: PUSH
43062: LD_STRING sandar
43064: ST_TO_ADDR
// hc_face_number := 14 ;
43065: LD_ADDR_OWVAR 34
43069: PUSH
43070: LD_INT 14
43072: ST_TO_ADDR
// hc_sex := sex_female ;
43073: LD_ADDR_OWVAR 27
43077: PUSH
43078: LD_INT 2
43080: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
43081: LD_VAR 0 7
43085: PUSH
43086: LD_INT 5
43088: EQUAL
43089: PUSH
43090: LD_VAR 0 8
43094: PUSH
43095: LD_INT 2
43097: EQUAL
43098: AND
43099: IFFALSE 43141
// begin hc_name := Omar Ali ;
43101: LD_ADDR_OWVAR 26
43105: PUSH
43106: LD_STRING Omar Ali
43108: ST_TO_ADDR
// hc_gallery := sandar ;
43109: LD_ADDR_OWVAR 33
43113: PUSH
43114: LD_STRING sandar
43116: ST_TO_ADDR
// hc_face_number := 6 ;
43117: LD_ADDR_OWVAR 34
43121: PUSH
43122: LD_INT 6
43124: ST_TO_ADDR
// hc_sex := sex_male ;
43125: LD_ADDR_OWVAR 27
43129: PUSH
43130: LD_INT 1
43132: ST_TO_ADDR
// hc_class := class_desert_warior ;
43133: LD_ADDR_OWVAR 28
43137: PUSH
43138: LD_INT 11
43140: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
43141: LD_VAR 0 7
43145: PUSH
43146: LD_INT 6
43148: EQUAL
43149: PUSH
43150: LD_VAR 0 8
43154: PUSH
43155: LD_INT 3
43157: EQUAL
43158: AND
43159: IFFALSE 43206
// begin PrepareHuman ( false , 3 , 4 ) ;
43161: LD_INT 0
43163: PPUSH
43164: LD_INT 3
43166: PPUSH
43167: LD_INT 4
43169: PPUSH
43170: CALL_OW 380
// hc_name := Yuri I. Burlak ;
43174: LD_ADDR_OWVAR 26
43178: PUSH
43179: LD_STRING Yuri I. Burlak
43181: ST_TO_ADDR
// hc_gallery := ru ;
43182: LD_ADDR_OWVAR 33
43186: PUSH
43187: LD_STRING ru
43189: ST_TO_ADDR
// hc_face_number := 1 ;
43190: LD_ADDR_OWVAR 34
43194: PUSH
43195: LD_INT 1
43197: ST_TO_ADDR
// hc_sex := sex_male ;
43198: LD_ADDR_OWVAR 27
43202: PUSH
43203: LD_INT 1
43205: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
43206: LD_VAR 0 7
43210: PUSH
43211: LD_INT 4
43213: EQUAL
43214: PUSH
43215: LD_VAR 0 8
43219: PUSH
43220: LD_INT 1
43222: EQUAL
43223: AND
43224: IFFALSE 43258
// begin hc_name := Arthur Powell ;
43226: LD_ADDR_OWVAR 26
43230: PUSH
43231: LD_STRING Arthur Powell
43233: ST_TO_ADDR
// hc_gallery := us ;
43234: LD_ADDR_OWVAR 33
43238: PUSH
43239: LD_STRING us
43241: ST_TO_ADDR
// hc_face_number := 7 ;
43242: LD_ADDR_OWVAR 34
43246: PUSH
43247: LD_INT 7
43249: ST_TO_ADDR
// hc_sex := sex_male ;
43250: LD_ADDR_OWVAR 27
43254: PUSH
43255: LD_INT 1
43257: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
43258: LD_VAR 0 7
43262: PUSH
43263: LD_INT 3
43265: EQUAL
43266: PUSH
43267: LD_VAR 0 8
43271: PUSH
43272: LD_INT 3
43274: EQUAL
43275: AND
43276: IFFALSE 43310
// begin hc_name := Mjr. Platonov ;
43278: LD_ADDR_OWVAR 26
43282: PUSH
43283: LD_STRING Mjr. Platonov
43285: ST_TO_ADDR
// hc_gallery := ru ;
43286: LD_ADDR_OWVAR 33
43290: PUSH
43291: LD_STRING ru
43293: ST_TO_ADDR
// hc_face_number := 60 ;
43294: LD_ADDR_OWVAR 34
43298: PUSH
43299: LD_INT 60
43301: ST_TO_ADDR
// hc_sex := sex_male ;
43302: LD_ADDR_OWVAR 27
43306: PUSH
43307: LD_INT 1
43309: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43310: LD_VAR 0 7
43314: PUSH
43315: LD_INT 7
43317: EQUAL
43318: PUSH
43319: LD_VAR 0 8
43323: PUSH
43324: LD_INT 1
43326: EQUAL
43327: AND
43328: IFFALSE 43375
// begin PrepareHuman ( false , 4 , 4 ) ;
43330: LD_INT 0
43332: PPUSH
43333: LD_INT 4
43335: PPUSH
43336: LD_INT 4
43338: PPUSH
43339: CALL_OW 380
// hc_name := Peter Roth ;
43343: LD_ADDR_OWVAR 26
43347: PUSH
43348: LD_STRING Peter Roth
43350: ST_TO_ADDR
// hc_gallery := us ;
43351: LD_ADDR_OWVAR 33
43355: PUSH
43356: LD_STRING us
43358: ST_TO_ADDR
// hc_face_number := 22 ;
43359: LD_ADDR_OWVAR 34
43363: PUSH
43364: LD_INT 22
43366: ST_TO_ADDR
// hc_sex := sex_male ;
43367: LD_ADDR_OWVAR 27
43371: PUSH
43372: LD_INT 1
43374: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43375: LD_VAR 0 7
43379: PUSH
43380: LD_INT 7
43382: EQUAL
43383: PUSH
43384: LD_VAR 0 8
43388: PUSH
43389: LD_INT 3
43391: EQUAL
43392: AND
43393: IFFALSE 43440
// begin PrepareHuman ( false , 4 , 4 ) ;
43395: LD_INT 0
43397: PPUSH
43398: LD_INT 4
43400: PPUSH
43401: LD_INT 4
43403: PPUSH
43404: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43408: LD_ADDR_OWVAR 26
43412: PUSH
43413: LD_STRING Prof. Gossudarov
43415: ST_TO_ADDR
// hc_gallery := ru ;
43416: LD_ADDR_OWVAR 33
43420: PUSH
43421: LD_STRING ru
43423: ST_TO_ADDR
// hc_face_number := 61 ;
43424: LD_ADDR_OWVAR 34
43428: PUSH
43429: LD_INT 61
43431: ST_TO_ADDR
// hc_sex := sex_male ;
43432: LD_ADDR_OWVAR 27
43436: PUSH
43437: LD_INT 1
43439: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43440: LD_VAR 0 7
43444: PUSH
43445: LD_INT 8
43447: EQUAL
43448: PUSH
43449: LD_VAR 0 8
43453: PUSH
43454: LD_INT 1
43456: EQUAL
43457: AND
43458: IFFALSE 43492
// begin hc_name := Ron Harisson ;
43460: LD_ADDR_OWVAR 26
43464: PUSH
43465: LD_STRING Ron Harisson
43467: ST_TO_ADDR
// hc_gallery := us ;
43468: LD_ADDR_OWVAR 33
43472: PUSH
43473: LD_STRING us
43475: ST_TO_ADDR
// hc_face_number := 6 ;
43476: LD_ADDR_OWVAR 34
43480: PUSH
43481: LD_INT 6
43483: ST_TO_ADDR
// hc_sex := sex_male ;
43484: LD_ADDR_OWVAR 27
43488: PUSH
43489: LD_INT 1
43491: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43492: LD_VAR 0 7
43496: PUSH
43497: LD_INT 8
43499: EQUAL
43500: PUSH
43501: LD_VAR 0 8
43505: PUSH
43506: LD_INT 2
43508: EQUAL
43509: AND
43510: IFFALSE 43544
// begin hc_name := Louis Schulz ;
43512: LD_ADDR_OWVAR 26
43516: PUSH
43517: LD_STRING Louis Schulz
43519: ST_TO_ADDR
// hc_gallery := sandar ;
43520: LD_ADDR_OWVAR 33
43524: PUSH
43525: LD_STRING sandar
43527: ST_TO_ADDR
// hc_face_number := 1 ;
43528: LD_ADDR_OWVAR 34
43532: PUSH
43533: LD_INT 1
43535: ST_TO_ADDR
// hc_sex := sex_male ;
43536: LD_ADDR_OWVAR 27
43540: PUSH
43541: LD_INT 1
43543: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43544: CALL_OW 44
43548: PPUSH
43549: LD_EXP 6
43553: PUSH
43554: LD_INT 1
43556: ARRAY
43557: PPUSH
43558: LD_EXP 6
43562: PUSH
43563: LD_INT 2
43565: ARRAY
43566: PPUSH
43567: LD_INT 12
43569: PPUSH
43570: LD_INT 0
43572: PPUSH
43573: CALL_OW 50
// InitHc_All ( ) ;
43577: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
43581: LD_ADDR_VAR 0 5
43585: PUSH
43586: DOUBLE
43587: LD_INT 1
43589: DEC
43590: ST_TO_ADDR
43591: LD_VAR 0 9
43595: PUSH
43596: LD_INT 1
43598: MINUS
43599: PUSH
43600: FOR_TO
43601: IFFALSE 43696
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
43603: LD_INT 0
43605: PPUSH
43606: LD_VAR 0 5
43610: PUSH
43611: LD_INT 4
43613: MOD
43614: PUSH
43615: LD_INT 1
43617: PLUS
43618: PPUSH
43619: LD_INT 3
43621: PPUSH
43622: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
43626: LD_ADDR_VAR 0 6
43630: PUSH
43631: LD_VAR 0 6
43635: PPUSH
43636: LD_VAR 0 6
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PPUSH
43645: CALL_OW 44
43649: PPUSH
43650: CALL_OW 1
43654: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43655: LD_VAR 0 6
43659: PUSH
43660: LD_VAR 0 6
43664: ARRAY
43665: PPUSH
43666: LD_EXP 6
43670: PUSH
43671: LD_INT 1
43673: ARRAY
43674: PPUSH
43675: LD_EXP 6
43679: PUSH
43680: LD_INT 2
43682: ARRAY
43683: PPUSH
43684: LD_INT 12
43686: PPUSH
43687: LD_INT 0
43689: PPUSH
43690: CALL_OW 50
// end ;
43694: GO 43600
43696: POP
43697: POP
// end ;
43698: LD_VAR 0 4
43702: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
43703: LD_EXP 7
43707: PUSH
43708: LD_EXP 8
43712: AND
43713: IFFALSE 43883
43715: GO 43717
43717: DISABLE
43718: LD_INT 0
43720: PPUSH
43721: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43722: LD_ADDR_VAR 0 1
43726: PUSH
43727: LD_INT 700
43729: PUSH
43730: LD_INT 350
43732: PUSH
43733: LD_INT 175
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: LD_EXP 7
43745: ARRAY
43746: ST_TO_ADDR
// while true do
43747: LD_INT 1
43749: IFFALSE 43883
// begin wait ( time ) ;
43751: LD_VAR 0 1
43755: PPUSH
43756: CALL_OW 67
// if not ecoCratesDropAllow then
43760: LD_EXP 9
43764: NOT
43765: IFFALSE 43769
// continue ;
43767: GO 43747
// time := time + 0 0$2 ;
43769: LD_ADDR_VAR 0 1
43773: PUSH
43774: LD_VAR 0 1
43778: PUSH
43779: LD_INT 70
43781: PLUS
43782: ST_TO_ADDR
// if time > 0 0$40 then
43783: LD_VAR 0 1
43787: PUSH
43788: LD_INT 1400
43790: GREATER
43791: IFFALSE 43818
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43793: LD_ADDR_VAR 0 1
43797: PUSH
43798: LD_INT 700
43800: PUSH
43801: LD_INT 350
43803: PUSH
43804: LD_INT 175
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: PUSH
43812: LD_EXP 7
43816: ARRAY
43817: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
43818: LD_ADDR_VAR 0 2
43822: PUSH
43823: LD_EXP 8
43827: PUSH
43828: LD_INT 1
43830: PPUSH
43831: LD_EXP 8
43835: PPUSH
43836: CALL_OW 12
43840: ARRAY
43841: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
43842: LD_INT 1
43844: PPUSH
43845: LD_INT 5
43847: PPUSH
43848: CALL_OW 12
43852: PPUSH
43853: LD_VAR 0 2
43857: PUSH
43858: LD_INT 1
43860: ARRAY
43861: PPUSH
43862: LD_VAR 0 2
43866: PUSH
43867: LD_INT 2
43869: ARRAY
43870: PPUSH
43871: LD_INT 14
43873: PPUSH
43874: LD_INT 1
43876: PPUSH
43877: CALL_OW 56
// end ;
43881: GO 43747
// end ;
43883: PPOPN 2
43885: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
43886: LD_EXP 12
43890: PUSH
43891: LD_EXP 10
43895: AND
43896: IFFALSE 44660
43898: GO 43900
43900: DISABLE
43901: LD_INT 0
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
// begin time := 3 3$00 ;
43912: LD_ADDR_VAR 0 1
43916: PUSH
43917: LD_INT 6300
43919: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
43920: LD_ADDR_VAR 0 8
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 9
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PPUSH
43938: LD_INT 2
43940: PPUSH
43941: CALL_OW 12
43945: ARRAY
43946: ST_TO_ADDR
// waveBonus := 0 ;
43947: LD_ADDR_VAR 0 9
43951: PUSH
43952: LD_INT 0
43954: ST_TO_ADDR
// if ecoSide = enemySide then
43955: LD_EXP 3
43959: PUSH
43960: LD_VAR 0 8
43964: EQUAL
43965: IFFALSE 43975
// enemySide := 1 ;
43967: LD_ADDR_VAR 0 8
43971: PUSH
43972: LD_INT 1
43974: ST_TO_ADDR
// while true do
43975: LD_INT 1
43977: IFFALSE 44660
// begin wait ( time ) ;
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 67
// if not ecoAttacksAllow then
43988: LD_EXP 10
43992: NOT
43993: IFFALSE 43997
// continue ;
43995: GO 43975
// waveBonus := waveBonus + 2 ;
43997: LD_ADDR_VAR 0 9
44001: PUSH
44002: LD_VAR 0 9
44006: PUSH
44007: LD_INT 2
44009: PLUS
44010: ST_TO_ADDR
// if waveBonus > 20 then
44011: LD_VAR 0 9
44015: PUSH
44016: LD_INT 20
44018: GREATER
44019: IFFALSE 44029
// waveBonus := 20 ;
44021: LD_ADDR_VAR 0 9
44025: PUSH
44026: LD_INT 20
44028: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
44029: LD_ADDR_VAR 0 2
44033: PUSH
44034: LD_EXP 12
44038: PUSH
44039: LD_INT 1
44041: PPUSH
44042: LD_EXP 12
44046: PPUSH
44047: CALL_OW 12
44051: ARRAY
44052: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
44053: LD_ADDR_VAR 0 3
44057: PUSH
44058: LD_VAR 0 2
44062: PPUSH
44063: LD_INT 0
44065: PPUSH
44066: CALL_OW 517
44070: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44071: LD_ADDR_VAR 0 7
44075: PUSH
44076: LD_VAR 0 3
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 3
44093: PUSH
44094: LD_INT 2
44096: ARRAY
44097: PUSH
44098: LD_INT 1
44100: ARRAY
44101: PPUSH
44102: LD_EXP 6
44106: PUSH
44107: LD_INT 1
44109: ARRAY
44110: PPUSH
44111: LD_EXP 6
44115: PUSH
44116: LD_INT 2
44118: ARRAY
44119: PPUSH
44120: CALL 40013 0 4
44124: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44125: LD_ADDR_VAR 0 5
44129: PUSH
44130: LD_VAR 0 3
44134: PUSH
44135: LD_INT 1
44137: ARRAY
44138: PUSH
44139: LD_INT 1
44141: ARRAY
44142: PPUSH
44143: LD_VAR 0 3
44147: PUSH
44148: LD_INT 2
44150: ARRAY
44151: PUSH
44152: LD_INT 1
44154: ARRAY
44155: PPUSH
44156: LD_EXP 6
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: LD_EXP 6
44169: PUSH
44170: LD_INT 2
44172: ARRAY
44173: PPUSH
44174: CALL 39153 0 4
44178: ST_TO_ADDR
// tmp := [ ] ;
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: EMPTY
44185: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
44186: LD_ADDR_VAR 0 4
44190: PUSH
44191: DOUBLE
44192: LD_INT 1
44194: DEC
44195: ST_TO_ADDR
44196: LD_INT 6
44198: PUSH
44199: LD_VAR 0 9
44203: PLUS
44204: PUSH
44205: FOR_TO
44206: IFFALSE 44525
// begin uc_side := enemySide ;
44208: LD_ADDR_OWVAR 20
44212: PUSH
44213: LD_VAR 0 8
44217: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
44218: LD_ADDR_OWVAR 21
44222: PUSH
44223: LD_INT 1
44225: PPUSH
44226: LD_INT 3
44228: PPUSH
44229: CALL_OW 12
44233: ST_TO_ADDR
// case uc_nation of 1 :
44234: LD_OWVAR 21
44238: PUSH
44239: LD_INT 1
44241: DOUBLE
44242: EQUAL
44243: IFTRUE 44247
44245: GO 44288
44247: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
44248: LD_INT 5
44250: PPUSH
44251: LD_INT 3
44253: PPUSH
44254: LD_INT 3
44256: PPUSH
44257: LD_INT 6
44259: PUSH
44260: LD_INT 7
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PPUSH
44270: LD_INT 2
44272: PPUSH
44273: CALL_OW 12
44277: ARRAY
44278: PPUSH
44279: LD_INT 100
44281: PPUSH
44282: CALL 6155 0 5
44286: GO 44391
44288: LD_INT 2
44290: DOUBLE
44291: EQUAL
44292: IFTRUE 44296
44294: GO 44341
44296: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44297: LD_INT 14
44299: PPUSH
44300: LD_INT 3
44302: PPUSH
44303: LD_INT 5
44305: PPUSH
44306: LD_INT 27
44308: PUSH
44309: LD_INT 28
44311: PUSH
44312: LD_INT 29
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PPUSH
44323: LD_INT 3
44325: PPUSH
44326: CALL_OW 12
44330: ARRAY
44331: PPUSH
44332: LD_INT 100
44334: PPUSH
44335: CALL 6155 0 5
44339: GO 44391
44341: LD_INT 3
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44390
44349: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44350: LD_INT 24
44352: PPUSH
44353: LD_INT 3
44355: PPUSH
44356: LD_INT 3
44358: PPUSH
44359: LD_INT 46
44361: PUSH
44362: LD_INT 47
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PPUSH
44372: LD_INT 2
44374: PPUSH
44375: CALL_OW 12
44379: ARRAY
44380: PPUSH
44381: LD_INT 100
44383: PPUSH
44384: CALL 6155 0 5
44388: GO 44391
44390: POP
// veh := CreateVehicle ;
44391: LD_ADDR_VAR 0 6
44395: PUSH
44396: CALL_OW 45
44400: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44401: LD_VAR 0 6
44405: PPUSH
44406: LD_VAR 0 7
44410: PPUSH
44411: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44415: LD_VAR 0 6
44419: PPUSH
44420: LD_VAR 0 2
44424: PPUSH
44425: LD_INT 0
44427: PPUSH
44428: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44432: LD_ADDR_VAR 0 3
44436: PUSH
44437: LD_VAR 0 3
44441: PPUSH
44442: LD_VAR 0 3
44446: PUSH
44447: LD_INT 1
44449: PLUS
44450: PPUSH
44451: LD_VAR 0 6
44455: PPUSH
44456: CALL_OW 1
44460: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44461: LD_VAR 0 5
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: PPUSH
44470: LD_VAR 0 5
44474: PUSH
44475: LD_INT 2
44477: ARRAY
44478: PPUSH
44479: CALL_OW 428
44483: PUSH
44484: LD_INT 0
44486: EQUAL
44487: IFFALSE 44516
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44489: LD_VAR 0 6
44493: PPUSH
44494: LD_VAR 0 5
44498: PUSH
44499: LD_INT 1
44501: ARRAY
44502: PPUSH
44503: LD_VAR 0 5
44507: PUSH
44508: LD_INT 2
44510: ARRAY
44511: PPUSH
44512: CALL_OW 111
// wait ( 0 0$0.5 ) ;
44516: LD_INT 18
44518: PPUSH
44519: CALL_OW 67
// end ;
44523: GO 44205
44525: POP
44526: POP
// if tmp then
44527: LD_VAR 0 3
44531: IFFALSE 44658
// begin repeat wait ( 0 0$2 ) ;
44533: LD_INT 70
44535: PPUSH
44536: CALL_OW 67
// for i in tmp do
44540: LD_ADDR_VAR 0 4
44544: PUSH
44545: LD_VAR 0 3
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44649
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
44553: LD_VAR 0 4
44557: PPUSH
44558: CALL_OW 301
44562: PUSH
44563: LD_VAR 0 4
44567: PPUSH
44568: CALL_OW 305
44572: NOT
44573: OR
44574: PUSH
44575: LD_VAR 0 4
44579: PPUSH
44580: CALL_OW 255
44584: PUSH
44585: LD_VAR 0 8
44589: NONEQUAL
44590: OR
44591: IFFALSE 44611
// tmp := tmp diff i else
44593: LD_ADDR_VAR 0 3
44597: PUSH
44598: LD_VAR 0 3
44602: PUSH
44603: LD_VAR 0 4
44607: DIFF
44608: ST_TO_ADDR
44609: GO 44647
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
44611: LD_VAR 0 4
44615: PPUSH
44616: LD_INT 22
44618: PUSH
44619: LD_EXP 3
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PPUSH
44628: CALL_OW 69
44632: PPUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: CALL_OW 74
44642: PPUSH
44643: CALL_OW 115
// end ;
44647: GO 44550
44649: POP
44650: POP
// until not tmp ;
44651: LD_VAR 0 3
44655: NOT
44656: IFFALSE 44533
// end ; end ;
44658: GO 43975
// end ;
44660: PPOPN 9
44662: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
44663: LD_EXP 11
44667: IFFALSE 44720
44669: GO 44671
44671: DISABLE
44672: LD_INT 0
44674: PPUSH
44675: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
44676: LD_ADDR_VAR 0 1
44680: PUSH
44681: LD_INT 2100
44683: PPUSH
44684: LD_INT 21000
44686: PPUSH
44687: CALL_OW 12
44691: ST_TO_ADDR
// while true do
44692: LD_INT 1
44694: IFFALSE 44720
// begin wait ( time ) ;
44696: LD_VAR 0 1
44700: PPUSH
44701: CALL_OW 67
// if not ecoEventsAllow then
44705: LD_EXP 11
44709: NOT
44710: IFFALSE 44714
// continue ;
44712: GO 44692
// EcoEvent ( ) ;
44714: CALL 44723 0 0
// end ;
44718: GO 44692
// end ;
44720: PPOPN 2
44722: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
44723: LD_INT 0
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
// event := rand ( 1 , 5 ) ;
44729: LD_ADDR_VAR 0 2
44733: PUSH
44734: LD_INT 1
44736: PPUSH
44737: LD_INT 5
44739: PPUSH
44740: CALL_OW 12
44744: ST_TO_ADDR
// case event of 1 :
44745: LD_VAR 0 2
44749: PUSH
44750: LD_INT 1
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44758
44756: GO 44844
44758: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_INT 21
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PPUSH
44774: CALL_OW 69
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 30
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 30
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: PPUSH
44807: CALL_OW 69
44811: DIFF
44812: ST_TO_ADDR
// if tmp then
44813: LD_VAR 0 3
44817: IFFALSE 44842
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44819: LD_VAR 0 3
44823: PUSH
44824: LD_INT 1
44826: PPUSH
44827: LD_VAR 0 3
44831: PPUSH
44832: CALL_OW 12
44836: ARRAY
44837: PPUSH
44838: CALL_OW 65
// end ; 2 :
44842: GO 45043
44844: LD_INT 2
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 44908
44852: POP
// begin uc_side := ecoSide ;
44853: LD_ADDR_OWVAR 20
44857: PUSH
44858: LD_EXP 3
44862: ST_TO_ADDR
// uc_nation := ecoNation ;
44863: LD_ADDR_OWVAR 21
44867: PUSH
44868: LD_EXP 4
44872: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
44873: LD_INT 0
44875: PPUSH
44876: LD_INT 1
44878: PPUSH
44879: LD_INT 4
44881: PPUSH
44882: CALL_OW 12
44886: PPUSH
44887: LD_INT 8
44889: PPUSH
44890: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
44894: CALL_OW 44
44898: PPUSH
44899: LD_INT 1
44901: PPUSH
44902: CALL_OW 51
// end ; 3 :
44906: GO 45043
44908: LD_INT 3
44910: DOUBLE
44911: EQUAL
44912: IFTRUE 44916
44914: GO 44968
44916: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
44917: LD_ADDR_VAR 0 3
44921: PUSH
44922: LD_INT 21
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PPUSH
44932: CALL_OW 69
44936: ST_TO_ADDR
// if tmp then
44937: LD_VAR 0 3
44941: IFFALSE 44966
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44943: LD_VAR 0 3
44947: PUSH
44948: LD_INT 1
44950: PPUSH
44951: LD_VAR 0 3
44955: PPUSH
44956: CALL_OW 12
44960: ARRAY
44961: PPUSH
44962: CALL_OW 65
// end ; 4 :
44966: GO 45043
44968: LD_INT 4
44970: DOUBLE
44971: EQUAL
44972: IFTRUE 44976
44974: GO 45031
44976: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
44977: LD_ADDR_VAR 0 3
44981: PUSH
44982: LD_INT 21
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PPUSH
44992: CALL_OW 69
44996: ST_TO_ADDR
// if tmp then
44997: LD_VAR 0 3
45001: IFFALSE 45029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
45003: LD_VAR 0 3
45007: PUSH
45008: LD_INT 1
45010: PPUSH
45011: LD_VAR 0 3
45015: PPUSH
45016: CALL_OW 12
45020: ARRAY
45021: PPUSH
45022: LD_INT 190
45024: PPUSH
45025: CALL_OW 234
// end ; 5 :
45029: GO 45043
45031: LD_INT 5
45033: DOUBLE
45034: EQUAL
45035: IFTRUE 45039
45037: GO 45042
45039: POP
// begin end ; end ;
45040: GO 45043
45042: POP
// end ;
45043: LD_VAR 0 1
45047: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
45048: LD_INT 0
45050: PPUSH
45051: PPUSH
// for i := 1 to 100 do
45052: LD_ADDR_VAR 0 2
45056: PUSH
45057: DOUBLE
45058: LD_INT 1
45060: DEC
45061: ST_TO_ADDR
45062: LD_INT 100
45064: PUSH
45065: FOR_TO
45066: IFFALSE 45087
// SetTech ( i , ecoSide , state_researched ) ;
45068: LD_VAR 0 2
45072: PPUSH
45073: LD_EXP 3
45077: PPUSH
45078: LD_INT 2
45080: PPUSH
45081: CALL_OW 322
45085: GO 45065
45087: POP
45088: POP
// end ;
45089: LD_VAR 0 1
45093: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
45094: LD_VAR 0 2
45098: PUSH
45099: LD_INT 102
45101: EQUAL
45102: IFFALSE 45294
// begin case p3 of 1 :
45104: LD_VAR 0 3
45108: PUSH
45109: LD_INT 1
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45135
45117: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
45118: LD_ADDR_EXP 11
45122: PUSH
45123: LD_EXP 11
45127: PPUSH
45128: CALL 39950 0 1
45132: ST_TO_ADDR
45133: GO 45292
45135: LD_INT 2
45137: DOUBLE
45138: EQUAL
45139: IFTRUE 45143
45141: GO 45161
45143: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
45144: LD_ADDR_EXP 10
45148: PUSH
45149: LD_EXP 10
45153: PPUSH
45154: CALL 39950 0 1
45158: ST_TO_ADDR
45159: GO 45292
45161: LD_INT 3
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45187
45169: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
45170: LD_ADDR_EXP 9
45174: PUSH
45175: LD_EXP 9
45179: PPUSH
45180: CALL 39950 0 1
45184: ST_TO_ADDR
45185: GO 45292
45187: LD_INT 4
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45195
45193: GO 45202
45195: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
45196: CALL 45048 0 0
45200: GO 45292
45202: LD_INT 5
45204: DOUBLE
45205: GREATEREQUAL
45206: IFFALSE 45214
45208: LD_INT 8
45210: DOUBLE
45211: LESSEQUAL
45212: IFTRUE 45216
45214: GO 45291
45216: POP
// begin uc_side := ecoSide ;
45217: LD_ADDR_OWVAR 20
45221: PUSH
45222: LD_EXP 3
45226: ST_TO_ADDR
// uc_nation := ecoNation ;
45227: LD_ADDR_OWVAR 21
45231: PUSH
45232: LD_EXP 4
45236: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
45237: LD_INT 0
45239: PPUSH
45240: LD_VAR 0 3
45244: PUSH
45245: LD_INT 4
45247: MINUS
45248: PPUSH
45249: LD_INT 4
45251: PPUSH
45252: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
45256: CALL_OW 44
45260: PPUSH
45261: LD_EXP 6
45265: PUSH
45266: LD_INT 1
45268: ARRAY
45269: PPUSH
45270: LD_EXP 6
45274: PUSH
45275: LD_INT 2
45277: ARRAY
45278: PPUSH
45279: LD_INT 12
45281: PPUSH
45282: LD_INT 1
45284: PPUSH
45285: CALL_OW 50
// end ; end ;
45289: GO 45292
45291: POP
// end else
45292: GO 45328
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45294: LD_VAR 0 1
45298: PPUSH
45299: LD_VAR 0 2
45303: PPUSH
45304: LD_VAR 0 3
45308: PPUSH
45309: LD_VAR 0 4
45313: PPUSH
45314: LD_VAR 0 5
45318: PPUSH
45319: LD_VAR 0 6
45323: PPUSH
45324: CALL 45519 0 6
// end ;
45328: PPOPN 6
45330: END
// on MapStart ( p ) do begin if gameType = 1 then
45331: LD_EXP 2
45335: PUSH
45336: LD_INT 1
45338: EQUAL
45339: IFFALSE 45350
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45341: LD_STRING SKIRMISH_GAME_TYPE = 1
45343: PPUSH
45344: CALL_OW 559
45348: GO 45357
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45350: LD_STRING SKIRMISH_GAME_TYPE = 0
45352: PPUSH
45353: CALL_OW 559
// SOS_MapStart ( ) ;
45357: CALL 45423 0 0
// end ; end_of_file
45361: PPOPN 1
45363: END
// export globalGameSaveCounter ; every 0 0$1 do
45364: GO 45366
45366: DISABLE
// begin enable ;
45367: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45368: LD_STRING updateTimer(
45370: PUSH
45371: LD_OWVAR 1
45375: STR
45376: PUSH
45377: LD_STRING );
45379: STR
45380: PPUSH
45381: CALL_OW 559
// end ;
45385: END
// every 0 0$1 do
45386: GO 45388
45388: DISABLE
// begin globalGameSaveCounter := 0 ;
45389: LD_ADDR_EXP 14
45393: PUSH
45394: LD_INT 0
45396: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
45397: LD_STRING setGameSaveCounter(0)
45399: PPUSH
45400: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
45404: LD_STRING initStreamRollete();
45406: PPUSH
45407: CALL_OW 559
// InitStreamMode ;
45411: CALL 46737 0 0
// DefineStreamItems ( false ) ;
45415: LD_INT 0
45417: PPUSH
45418: CALL 47201 0 1
// end ;
45422: END
// export function SOS_MapStart ( ) ; begin
45423: LD_INT 0
45425: PPUSH
// if streamModeActive then
45426: LD_EXP 15
45430: IFFALSE 45439
// DefineStreamItems ( true ) ;
45432: LD_INT 1
45434: PPUSH
45435: CALL 47201 0 1
// UpdateLuaVariables ( ) ;
45439: CALL 45456 0 0
// UpdateFactoryWaypoints ( ) ;
45443: CALL 60062 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45447: CALL 60319 0 0
// end ;
45451: LD_VAR 0 1
45455: RET
// function UpdateLuaVariables ( ) ; begin
45456: LD_INT 0
45458: PPUSH
// if globalGameSaveCounter then
45459: LD_EXP 14
45463: IFFALSE 45497
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
45465: LD_ADDR_EXP 14
45469: PUSH
45470: LD_EXP 14
45474: PPUSH
45475: CALL 39969 0 1
45479: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
45480: LD_STRING setGameSaveCounter(
45482: PUSH
45483: LD_EXP 14
45487: STR
45488: PUSH
45489: LD_STRING )
45491: STR
45492: PPUSH
45493: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
45497: LD_STRING setGameDifficulty(
45499: PUSH
45500: LD_OWVAR 67
45504: STR
45505: PUSH
45506: LD_STRING )
45508: STR
45509: PPUSH
45510: CALL_OW 559
// end ;
45514: LD_VAR 0 1
45518: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45519: LD_INT 0
45521: PPUSH
// if p2 = stream_mode then
45522: LD_VAR 0 2
45526: PUSH
45527: LD_INT 100
45529: EQUAL
45530: IFFALSE 46533
// begin if not StreamModeActive then
45532: LD_EXP 15
45536: NOT
45537: IFFALSE 45547
// StreamModeActive := true ;
45539: LD_ADDR_EXP 15
45543: PUSH
45544: LD_INT 1
45546: ST_TO_ADDR
// if p3 = 0 then
45547: LD_VAR 0 3
45551: PUSH
45552: LD_INT 0
45554: EQUAL
45555: IFFALSE 45561
// InitStreamMode ;
45557: CALL 46737 0 0
// if p3 = 1 then
45561: LD_VAR 0 3
45565: PUSH
45566: LD_INT 1
45568: EQUAL
45569: IFFALSE 45579
// sRocket := true ;
45571: LD_ADDR_EXP 20
45575: PUSH
45576: LD_INT 1
45578: ST_TO_ADDR
// if p3 = 2 then
45579: LD_VAR 0 3
45583: PUSH
45584: LD_INT 2
45586: EQUAL
45587: IFFALSE 45597
// sSpeed := true ;
45589: LD_ADDR_EXP 19
45593: PUSH
45594: LD_INT 1
45596: ST_TO_ADDR
// if p3 = 3 then
45597: LD_VAR 0 3
45601: PUSH
45602: LD_INT 3
45604: EQUAL
45605: IFFALSE 45615
// sEngine := true ;
45607: LD_ADDR_EXP 21
45611: PUSH
45612: LD_INT 1
45614: ST_TO_ADDR
// if p3 = 4 then
45615: LD_VAR 0 3
45619: PUSH
45620: LD_INT 4
45622: EQUAL
45623: IFFALSE 45633
// sSpec := true ;
45625: LD_ADDR_EXP 18
45629: PUSH
45630: LD_INT 1
45632: ST_TO_ADDR
// if p3 = 5 then
45633: LD_VAR 0 3
45637: PUSH
45638: LD_INT 5
45640: EQUAL
45641: IFFALSE 45651
// sLevel := true ;
45643: LD_ADDR_EXP 22
45647: PUSH
45648: LD_INT 1
45650: ST_TO_ADDR
// if p3 = 6 then
45651: LD_VAR 0 3
45655: PUSH
45656: LD_INT 6
45658: EQUAL
45659: IFFALSE 45669
// sArmoury := true ;
45661: LD_ADDR_EXP 23
45665: PUSH
45666: LD_INT 1
45668: ST_TO_ADDR
// if p3 = 7 then
45669: LD_VAR 0 3
45673: PUSH
45674: LD_INT 7
45676: EQUAL
45677: IFFALSE 45687
// sRadar := true ;
45679: LD_ADDR_EXP 24
45683: PUSH
45684: LD_INT 1
45686: ST_TO_ADDR
// if p3 = 8 then
45687: LD_VAR 0 3
45691: PUSH
45692: LD_INT 8
45694: EQUAL
45695: IFFALSE 45705
// sBunker := true ;
45697: LD_ADDR_EXP 25
45701: PUSH
45702: LD_INT 1
45704: ST_TO_ADDR
// if p3 = 9 then
45705: LD_VAR 0 3
45709: PUSH
45710: LD_INT 9
45712: EQUAL
45713: IFFALSE 45723
// sHack := true ;
45715: LD_ADDR_EXP 26
45719: PUSH
45720: LD_INT 1
45722: ST_TO_ADDR
// if p3 = 10 then
45723: LD_VAR 0 3
45727: PUSH
45728: LD_INT 10
45730: EQUAL
45731: IFFALSE 45741
// sFire := true ;
45733: LD_ADDR_EXP 27
45737: PUSH
45738: LD_INT 1
45740: ST_TO_ADDR
// if p3 = 11 then
45741: LD_VAR 0 3
45745: PUSH
45746: LD_INT 11
45748: EQUAL
45749: IFFALSE 45759
// sRefresh := true ;
45751: LD_ADDR_EXP 28
45755: PUSH
45756: LD_INT 1
45758: ST_TO_ADDR
// if p3 = 12 then
45759: LD_VAR 0 3
45763: PUSH
45764: LD_INT 12
45766: EQUAL
45767: IFFALSE 45777
// sExp := true ;
45769: LD_ADDR_EXP 29
45773: PUSH
45774: LD_INT 1
45776: ST_TO_ADDR
// if p3 = 13 then
45777: LD_VAR 0 3
45781: PUSH
45782: LD_INT 13
45784: EQUAL
45785: IFFALSE 45795
// sDepot := true ;
45787: LD_ADDR_EXP 30
45791: PUSH
45792: LD_INT 1
45794: ST_TO_ADDR
// if p3 = 14 then
45795: LD_VAR 0 3
45799: PUSH
45800: LD_INT 14
45802: EQUAL
45803: IFFALSE 45813
// sFlag := true ;
45805: LD_ADDR_EXP 31
45809: PUSH
45810: LD_INT 1
45812: ST_TO_ADDR
// if p3 = 15 then
45813: LD_VAR 0 3
45817: PUSH
45818: LD_INT 15
45820: EQUAL
45821: IFFALSE 45831
// sKamikadze := true ;
45823: LD_ADDR_EXP 39
45827: PUSH
45828: LD_INT 1
45830: ST_TO_ADDR
// if p3 = 16 then
45831: LD_VAR 0 3
45835: PUSH
45836: LD_INT 16
45838: EQUAL
45839: IFFALSE 45849
// sTroll := true ;
45841: LD_ADDR_EXP 40
45845: PUSH
45846: LD_INT 1
45848: ST_TO_ADDR
// if p3 = 17 then
45849: LD_VAR 0 3
45853: PUSH
45854: LD_INT 17
45856: EQUAL
45857: IFFALSE 45867
// sSlow := true ;
45859: LD_ADDR_EXP 41
45863: PUSH
45864: LD_INT 1
45866: ST_TO_ADDR
// if p3 = 18 then
45867: LD_VAR 0 3
45871: PUSH
45872: LD_INT 18
45874: EQUAL
45875: IFFALSE 45885
// sLack := true ;
45877: LD_ADDR_EXP 42
45881: PUSH
45882: LD_INT 1
45884: ST_TO_ADDR
// if p3 = 19 then
45885: LD_VAR 0 3
45889: PUSH
45890: LD_INT 19
45892: EQUAL
45893: IFFALSE 45903
// sTank := true ;
45895: LD_ADDR_EXP 44
45899: PUSH
45900: LD_INT 1
45902: ST_TO_ADDR
// if p3 = 20 then
45903: LD_VAR 0 3
45907: PUSH
45908: LD_INT 20
45910: EQUAL
45911: IFFALSE 45921
// sRemote := true ;
45913: LD_ADDR_EXP 45
45917: PUSH
45918: LD_INT 1
45920: ST_TO_ADDR
// if p3 = 21 then
45921: LD_VAR 0 3
45925: PUSH
45926: LD_INT 21
45928: EQUAL
45929: IFFALSE 45939
// sPowell := true ;
45931: LD_ADDR_EXP 46
45935: PUSH
45936: LD_INT 1
45938: ST_TO_ADDR
// if p3 = 22 then
45939: LD_VAR 0 3
45943: PUSH
45944: LD_INT 22
45946: EQUAL
45947: IFFALSE 45957
// sTeleport := true ;
45949: LD_ADDR_EXP 49
45953: PUSH
45954: LD_INT 1
45956: ST_TO_ADDR
// if p3 = 23 then
45957: LD_VAR 0 3
45961: PUSH
45962: LD_INT 23
45964: EQUAL
45965: IFFALSE 45975
// sOilTower := true ;
45967: LD_ADDR_EXP 51
45971: PUSH
45972: LD_INT 1
45974: ST_TO_ADDR
// if p3 = 24 then
45975: LD_VAR 0 3
45979: PUSH
45980: LD_INT 24
45982: EQUAL
45983: IFFALSE 45993
// sShovel := true ;
45985: LD_ADDR_EXP 52
45989: PUSH
45990: LD_INT 1
45992: ST_TO_ADDR
// if p3 = 25 then
45993: LD_VAR 0 3
45997: PUSH
45998: LD_INT 25
46000: EQUAL
46001: IFFALSE 46011
// sSheik := true ;
46003: LD_ADDR_EXP 53
46007: PUSH
46008: LD_INT 1
46010: ST_TO_ADDR
// if p3 = 26 then
46011: LD_VAR 0 3
46015: PUSH
46016: LD_INT 26
46018: EQUAL
46019: IFFALSE 46029
// sEarthquake := true ;
46021: LD_ADDR_EXP 55
46025: PUSH
46026: LD_INT 1
46028: ST_TO_ADDR
// if p3 = 27 then
46029: LD_VAR 0 3
46033: PUSH
46034: LD_INT 27
46036: EQUAL
46037: IFFALSE 46047
// sAI := true ;
46039: LD_ADDR_EXP 56
46043: PUSH
46044: LD_INT 1
46046: ST_TO_ADDR
// if p3 = 28 then
46047: LD_VAR 0 3
46051: PUSH
46052: LD_INT 28
46054: EQUAL
46055: IFFALSE 46065
// sCargo := true ;
46057: LD_ADDR_EXP 59
46061: PUSH
46062: LD_INT 1
46064: ST_TO_ADDR
// if p3 = 29 then
46065: LD_VAR 0 3
46069: PUSH
46070: LD_INT 29
46072: EQUAL
46073: IFFALSE 46083
// sDLaser := true ;
46075: LD_ADDR_EXP 60
46079: PUSH
46080: LD_INT 1
46082: ST_TO_ADDR
// if p3 = 30 then
46083: LD_VAR 0 3
46087: PUSH
46088: LD_INT 30
46090: EQUAL
46091: IFFALSE 46101
// sExchange := true ;
46093: LD_ADDR_EXP 61
46097: PUSH
46098: LD_INT 1
46100: ST_TO_ADDR
// if p3 = 31 then
46101: LD_VAR 0 3
46105: PUSH
46106: LD_INT 31
46108: EQUAL
46109: IFFALSE 46119
// sFac := true ;
46111: LD_ADDR_EXP 62
46115: PUSH
46116: LD_INT 1
46118: ST_TO_ADDR
// if p3 = 32 then
46119: LD_VAR 0 3
46123: PUSH
46124: LD_INT 32
46126: EQUAL
46127: IFFALSE 46137
// sPower := true ;
46129: LD_ADDR_EXP 63
46133: PUSH
46134: LD_INT 1
46136: ST_TO_ADDR
// if p3 = 33 then
46137: LD_VAR 0 3
46141: PUSH
46142: LD_INT 33
46144: EQUAL
46145: IFFALSE 46155
// sRandom := true ;
46147: LD_ADDR_EXP 64
46151: PUSH
46152: LD_INT 1
46154: ST_TO_ADDR
// if p3 = 34 then
46155: LD_VAR 0 3
46159: PUSH
46160: LD_INT 34
46162: EQUAL
46163: IFFALSE 46173
// sShield := true ;
46165: LD_ADDR_EXP 65
46169: PUSH
46170: LD_INT 1
46172: ST_TO_ADDR
// if p3 = 35 then
46173: LD_VAR 0 3
46177: PUSH
46178: LD_INT 35
46180: EQUAL
46181: IFFALSE 46191
// sTime := true ;
46183: LD_ADDR_EXP 66
46187: PUSH
46188: LD_INT 1
46190: ST_TO_ADDR
// if p3 = 36 then
46191: LD_VAR 0 3
46195: PUSH
46196: LD_INT 36
46198: EQUAL
46199: IFFALSE 46209
// sTools := true ;
46201: LD_ADDR_EXP 67
46205: PUSH
46206: LD_INT 1
46208: ST_TO_ADDR
// if p3 = 101 then
46209: LD_VAR 0 3
46213: PUSH
46214: LD_INT 101
46216: EQUAL
46217: IFFALSE 46227
// sSold := true ;
46219: LD_ADDR_EXP 32
46223: PUSH
46224: LD_INT 1
46226: ST_TO_ADDR
// if p3 = 102 then
46227: LD_VAR 0 3
46231: PUSH
46232: LD_INT 102
46234: EQUAL
46235: IFFALSE 46245
// sDiff := true ;
46237: LD_ADDR_EXP 33
46241: PUSH
46242: LD_INT 1
46244: ST_TO_ADDR
// if p3 = 103 then
46245: LD_VAR 0 3
46249: PUSH
46250: LD_INT 103
46252: EQUAL
46253: IFFALSE 46263
// sFog := true ;
46255: LD_ADDR_EXP 36
46259: PUSH
46260: LD_INT 1
46262: ST_TO_ADDR
// if p3 = 104 then
46263: LD_VAR 0 3
46267: PUSH
46268: LD_INT 104
46270: EQUAL
46271: IFFALSE 46281
// sReset := true ;
46273: LD_ADDR_EXP 37
46277: PUSH
46278: LD_INT 1
46280: ST_TO_ADDR
// if p3 = 105 then
46281: LD_VAR 0 3
46285: PUSH
46286: LD_INT 105
46288: EQUAL
46289: IFFALSE 46299
// sSun := true ;
46291: LD_ADDR_EXP 38
46295: PUSH
46296: LD_INT 1
46298: ST_TO_ADDR
// if p3 = 106 then
46299: LD_VAR 0 3
46303: PUSH
46304: LD_INT 106
46306: EQUAL
46307: IFFALSE 46317
// sTiger := true ;
46309: LD_ADDR_EXP 34
46313: PUSH
46314: LD_INT 1
46316: ST_TO_ADDR
// if p3 = 107 then
46317: LD_VAR 0 3
46321: PUSH
46322: LD_INT 107
46324: EQUAL
46325: IFFALSE 46335
// sBomb := true ;
46327: LD_ADDR_EXP 35
46331: PUSH
46332: LD_INT 1
46334: ST_TO_ADDR
// if p3 = 108 then
46335: LD_VAR 0 3
46339: PUSH
46340: LD_INT 108
46342: EQUAL
46343: IFFALSE 46353
// sWound := true ;
46345: LD_ADDR_EXP 43
46349: PUSH
46350: LD_INT 1
46352: ST_TO_ADDR
// if p3 = 109 then
46353: LD_VAR 0 3
46357: PUSH
46358: LD_INT 109
46360: EQUAL
46361: IFFALSE 46371
// sBetray := true ;
46363: LD_ADDR_EXP 47
46367: PUSH
46368: LD_INT 1
46370: ST_TO_ADDR
// if p3 = 110 then
46371: LD_VAR 0 3
46375: PUSH
46376: LD_INT 110
46378: EQUAL
46379: IFFALSE 46389
// sContamin := true ;
46381: LD_ADDR_EXP 48
46385: PUSH
46386: LD_INT 1
46388: ST_TO_ADDR
// if p3 = 111 then
46389: LD_VAR 0 3
46393: PUSH
46394: LD_INT 111
46396: EQUAL
46397: IFFALSE 46407
// sOil := true ;
46399: LD_ADDR_EXP 50
46403: PUSH
46404: LD_INT 1
46406: ST_TO_ADDR
// if p3 = 112 then
46407: LD_VAR 0 3
46411: PUSH
46412: LD_INT 112
46414: EQUAL
46415: IFFALSE 46425
// sStu := true ;
46417: LD_ADDR_EXP 54
46421: PUSH
46422: LD_INT 1
46424: ST_TO_ADDR
// if p3 = 113 then
46425: LD_VAR 0 3
46429: PUSH
46430: LD_INT 113
46432: EQUAL
46433: IFFALSE 46443
// sBazooka := true ;
46435: LD_ADDR_EXP 57
46439: PUSH
46440: LD_INT 1
46442: ST_TO_ADDR
// if p3 = 114 then
46443: LD_VAR 0 3
46447: PUSH
46448: LD_INT 114
46450: EQUAL
46451: IFFALSE 46461
// sMortar := true ;
46453: LD_ADDR_EXP 58
46457: PUSH
46458: LD_INT 1
46460: ST_TO_ADDR
// if p3 = 115 then
46461: LD_VAR 0 3
46465: PUSH
46466: LD_INT 115
46468: EQUAL
46469: IFFALSE 46479
// sRanger := true ;
46471: LD_ADDR_EXP 68
46475: PUSH
46476: LD_INT 1
46478: ST_TO_ADDR
// if p3 = 116 then
46479: LD_VAR 0 3
46483: PUSH
46484: LD_INT 116
46486: EQUAL
46487: IFFALSE 46497
// sComputer := true ;
46489: LD_ADDR_EXP 69
46493: PUSH
46494: LD_INT 1
46496: ST_TO_ADDR
// if p3 = 117 then
46497: LD_VAR 0 3
46501: PUSH
46502: LD_INT 117
46504: EQUAL
46505: IFFALSE 46515
// s30 := true ;
46507: LD_ADDR_EXP 70
46511: PUSH
46512: LD_INT 1
46514: ST_TO_ADDR
// if p3 = 118 then
46515: LD_VAR 0 3
46519: PUSH
46520: LD_INT 118
46522: EQUAL
46523: IFFALSE 46533
// s60 := true ;
46525: LD_ADDR_EXP 71
46529: PUSH
46530: LD_INT 1
46532: ST_TO_ADDR
// end ; if p2 = hack_mode then
46533: LD_VAR 0 2
46537: PUSH
46538: LD_INT 101
46540: EQUAL
46541: IFFALSE 46669
// begin case p3 of 1 :
46543: LD_VAR 0 3
46547: PUSH
46548: LD_INT 1
46550: DOUBLE
46551: EQUAL
46552: IFTRUE 46556
46554: GO 46563
46556: POP
// hHackUnlimitedResources ; 2 :
46557: CALL 58808 0 0
46561: GO 46669
46563: LD_INT 2
46565: DOUBLE
46566: EQUAL
46567: IFTRUE 46571
46569: GO 46578
46571: POP
// hHackSetLevel10 ; 3 :
46572: CALL 58941 0 0
46576: GO 46669
46578: LD_INT 3
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 46593
46586: POP
// hHackSetLevel10YourUnits ; 4 :
46587: CALL 59026 0 0
46591: GO 46669
46593: LD_INT 4
46595: DOUBLE
46596: EQUAL
46597: IFTRUE 46601
46599: GO 46608
46601: POP
// hHackInvincible ; 5 :
46602: CALL 59474 0 0
46606: GO 46669
46608: LD_INT 5
46610: DOUBLE
46611: EQUAL
46612: IFTRUE 46616
46614: GO 46623
46616: POP
// hHackInvisible ; 6 :
46617: CALL 59585 0 0
46621: GO 46669
46623: LD_INT 6
46625: DOUBLE
46626: EQUAL
46627: IFTRUE 46631
46629: GO 46638
46631: POP
// hHackChangeYourSide ; 7 :
46632: CALL 59642 0 0
46636: GO 46669
46638: LD_INT 7
46640: DOUBLE
46641: EQUAL
46642: IFTRUE 46646
46644: GO 46653
46646: POP
// hHackChangeUnitSide ; 8 :
46647: CALL 59684 0 0
46651: GO 46669
46653: LD_INT 8
46655: DOUBLE
46656: EQUAL
46657: IFTRUE 46661
46659: GO 46668
46661: POP
// hHackFog ; end ;
46662: CALL 59785 0 0
46666: GO 46669
46668: POP
// end ; if p2 = game_save_mode then
46669: LD_VAR 0 2
46673: PUSH
46674: LD_INT 102
46676: EQUAL
46677: IFFALSE 46732
// begin if p3 = 1 then
46679: LD_VAR 0 3
46683: PUSH
46684: LD_INT 1
46686: EQUAL
46687: IFFALSE 46699
// globalGameSaveCounter := p4 ;
46689: LD_ADDR_EXP 14
46693: PUSH
46694: LD_VAR 0 4
46698: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
46699: LD_VAR 0 3
46703: PUSH
46704: LD_INT 2
46706: EQUAL
46707: PUSH
46708: LD_EXP 14
46712: AND
46713: IFFALSE 46732
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46715: LD_STRING setGameSaveCounter(
46717: PUSH
46718: LD_EXP 14
46722: STR
46723: PUSH
46724: LD_STRING )
46726: STR
46727: PPUSH
46728: CALL_OW 559
// end ; end ;
46732: LD_VAR 0 7
46736: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
46737: LD_INT 0
46739: PPUSH
// streamModeActive := false ;
46740: LD_ADDR_EXP 15
46744: PUSH
46745: LD_INT 0
46747: ST_TO_ADDR
// normalCounter := 36 ;
46748: LD_ADDR_EXP 16
46752: PUSH
46753: LD_INT 36
46755: ST_TO_ADDR
// hardcoreCounter := 18 ;
46756: LD_ADDR_EXP 17
46760: PUSH
46761: LD_INT 18
46763: ST_TO_ADDR
// sRocket := false ;
46764: LD_ADDR_EXP 20
46768: PUSH
46769: LD_INT 0
46771: ST_TO_ADDR
// sSpeed := false ;
46772: LD_ADDR_EXP 19
46776: PUSH
46777: LD_INT 0
46779: ST_TO_ADDR
// sEngine := false ;
46780: LD_ADDR_EXP 21
46784: PUSH
46785: LD_INT 0
46787: ST_TO_ADDR
// sSpec := false ;
46788: LD_ADDR_EXP 18
46792: PUSH
46793: LD_INT 0
46795: ST_TO_ADDR
// sLevel := false ;
46796: LD_ADDR_EXP 22
46800: PUSH
46801: LD_INT 0
46803: ST_TO_ADDR
// sArmoury := false ;
46804: LD_ADDR_EXP 23
46808: PUSH
46809: LD_INT 0
46811: ST_TO_ADDR
// sRadar := false ;
46812: LD_ADDR_EXP 24
46816: PUSH
46817: LD_INT 0
46819: ST_TO_ADDR
// sBunker := false ;
46820: LD_ADDR_EXP 25
46824: PUSH
46825: LD_INT 0
46827: ST_TO_ADDR
// sHack := false ;
46828: LD_ADDR_EXP 26
46832: PUSH
46833: LD_INT 0
46835: ST_TO_ADDR
// sFire := false ;
46836: LD_ADDR_EXP 27
46840: PUSH
46841: LD_INT 0
46843: ST_TO_ADDR
// sRefresh := false ;
46844: LD_ADDR_EXP 28
46848: PUSH
46849: LD_INT 0
46851: ST_TO_ADDR
// sExp := false ;
46852: LD_ADDR_EXP 29
46856: PUSH
46857: LD_INT 0
46859: ST_TO_ADDR
// sDepot := false ;
46860: LD_ADDR_EXP 30
46864: PUSH
46865: LD_INT 0
46867: ST_TO_ADDR
// sFlag := false ;
46868: LD_ADDR_EXP 31
46872: PUSH
46873: LD_INT 0
46875: ST_TO_ADDR
// sKamikadze := false ;
46876: LD_ADDR_EXP 39
46880: PUSH
46881: LD_INT 0
46883: ST_TO_ADDR
// sTroll := false ;
46884: LD_ADDR_EXP 40
46888: PUSH
46889: LD_INT 0
46891: ST_TO_ADDR
// sSlow := false ;
46892: LD_ADDR_EXP 41
46896: PUSH
46897: LD_INT 0
46899: ST_TO_ADDR
// sLack := false ;
46900: LD_ADDR_EXP 42
46904: PUSH
46905: LD_INT 0
46907: ST_TO_ADDR
// sTank := false ;
46908: LD_ADDR_EXP 44
46912: PUSH
46913: LD_INT 0
46915: ST_TO_ADDR
// sRemote := false ;
46916: LD_ADDR_EXP 45
46920: PUSH
46921: LD_INT 0
46923: ST_TO_ADDR
// sPowell := false ;
46924: LD_ADDR_EXP 46
46928: PUSH
46929: LD_INT 0
46931: ST_TO_ADDR
// sTeleport := false ;
46932: LD_ADDR_EXP 49
46936: PUSH
46937: LD_INT 0
46939: ST_TO_ADDR
// sOilTower := false ;
46940: LD_ADDR_EXP 51
46944: PUSH
46945: LD_INT 0
46947: ST_TO_ADDR
// sShovel := false ;
46948: LD_ADDR_EXP 52
46952: PUSH
46953: LD_INT 0
46955: ST_TO_ADDR
// sSheik := false ;
46956: LD_ADDR_EXP 53
46960: PUSH
46961: LD_INT 0
46963: ST_TO_ADDR
// sEarthquake := false ;
46964: LD_ADDR_EXP 55
46968: PUSH
46969: LD_INT 0
46971: ST_TO_ADDR
// sAI := false ;
46972: LD_ADDR_EXP 56
46976: PUSH
46977: LD_INT 0
46979: ST_TO_ADDR
// sCargo := false ;
46980: LD_ADDR_EXP 59
46984: PUSH
46985: LD_INT 0
46987: ST_TO_ADDR
// sDLaser := false ;
46988: LD_ADDR_EXP 60
46992: PUSH
46993: LD_INT 0
46995: ST_TO_ADDR
// sExchange := false ;
46996: LD_ADDR_EXP 61
47000: PUSH
47001: LD_INT 0
47003: ST_TO_ADDR
// sFac := false ;
47004: LD_ADDR_EXP 62
47008: PUSH
47009: LD_INT 0
47011: ST_TO_ADDR
// sPower := false ;
47012: LD_ADDR_EXP 63
47016: PUSH
47017: LD_INT 0
47019: ST_TO_ADDR
// sRandom := false ;
47020: LD_ADDR_EXP 64
47024: PUSH
47025: LD_INT 0
47027: ST_TO_ADDR
// sShield := false ;
47028: LD_ADDR_EXP 65
47032: PUSH
47033: LD_INT 0
47035: ST_TO_ADDR
// sTime := false ;
47036: LD_ADDR_EXP 66
47040: PUSH
47041: LD_INT 0
47043: ST_TO_ADDR
// sTools := false ;
47044: LD_ADDR_EXP 67
47048: PUSH
47049: LD_INT 0
47051: ST_TO_ADDR
// sSold := false ;
47052: LD_ADDR_EXP 32
47056: PUSH
47057: LD_INT 0
47059: ST_TO_ADDR
// sDiff := false ;
47060: LD_ADDR_EXP 33
47064: PUSH
47065: LD_INT 0
47067: ST_TO_ADDR
// sFog := false ;
47068: LD_ADDR_EXP 36
47072: PUSH
47073: LD_INT 0
47075: ST_TO_ADDR
// sReset := false ;
47076: LD_ADDR_EXP 37
47080: PUSH
47081: LD_INT 0
47083: ST_TO_ADDR
// sSun := false ;
47084: LD_ADDR_EXP 38
47088: PUSH
47089: LD_INT 0
47091: ST_TO_ADDR
// sTiger := false ;
47092: LD_ADDR_EXP 34
47096: PUSH
47097: LD_INT 0
47099: ST_TO_ADDR
// sBomb := false ;
47100: LD_ADDR_EXP 35
47104: PUSH
47105: LD_INT 0
47107: ST_TO_ADDR
// sWound := false ;
47108: LD_ADDR_EXP 43
47112: PUSH
47113: LD_INT 0
47115: ST_TO_ADDR
// sBetray := false ;
47116: LD_ADDR_EXP 47
47120: PUSH
47121: LD_INT 0
47123: ST_TO_ADDR
// sContamin := false ;
47124: LD_ADDR_EXP 48
47128: PUSH
47129: LD_INT 0
47131: ST_TO_ADDR
// sOil := false ;
47132: LD_ADDR_EXP 50
47136: PUSH
47137: LD_INT 0
47139: ST_TO_ADDR
// sStu := false ;
47140: LD_ADDR_EXP 54
47144: PUSH
47145: LD_INT 0
47147: ST_TO_ADDR
// sBazooka := false ;
47148: LD_ADDR_EXP 57
47152: PUSH
47153: LD_INT 0
47155: ST_TO_ADDR
// sMortar := false ;
47156: LD_ADDR_EXP 58
47160: PUSH
47161: LD_INT 0
47163: ST_TO_ADDR
// sRanger := false ;
47164: LD_ADDR_EXP 68
47168: PUSH
47169: LD_INT 0
47171: ST_TO_ADDR
// sComputer := false ;
47172: LD_ADDR_EXP 69
47176: PUSH
47177: LD_INT 0
47179: ST_TO_ADDR
// s30 := false ;
47180: LD_ADDR_EXP 70
47184: PUSH
47185: LD_INT 0
47187: ST_TO_ADDR
// s60 := false ;
47188: LD_ADDR_EXP 71
47192: PUSH
47193: LD_INT 0
47195: ST_TO_ADDR
// end ;
47196: LD_VAR 0 1
47200: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47201: LD_INT 0
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
47209: PPUSH
// result := [ ] ;
47210: LD_ADDR_VAR 0 2
47214: PUSH
47215: EMPTY
47216: ST_TO_ADDR
// if campaign_id = 1 then
47217: LD_OWVAR 69
47221: PUSH
47222: LD_INT 1
47224: EQUAL
47225: IFFALSE 50391
// begin case mission_number of 1 :
47227: LD_OWVAR 70
47231: PUSH
47232: LD_INT 1
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47316
47240: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47241: LD_ADDR_VAR 0 2
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 4
47251: PUSH
47252: LD_INT 11
47254: PUSH
47255: LD_INT 12
47257: PUSH
47258: LD_INT 15
47260: PUSH
47261: LD_INT 16
47263: PUSH
47264: LD_INT 22
47266: PUSH
47267: LD_INT 23
47269: PUSH
47270: LD_INT 26
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 101
47286: PUSH
47287: LD_INT 102
47289: PUSH
47290: LD_INT 106
47292: PUSH
47293: LD_INT 116
47295: PUSH
47296: LD_INT 117
47298: PUSH
47299: LD_INT 118
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: ST_TO_ADDR
47314: GO 50389
47316: LD_INT 2
47318: DOUBLE
47319: EQUAL
47320: IFTRUE 47324
47322: GO 47408
47324: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47325: LD_ADDR_VAR 0 2
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: LD_INT 11
47338: PUSH
47339: LD_INT 12
47341: PUSH
47342: LD_INT 15
47344: PUSH
47345: LD_INT 16
47347: PUSH
47348: LD_INT 22
47350: PUSH
47351: LD_INT 23
47353: PUSH
47354: LD_INT 26
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 101
47370: PUSH
47371: LD_INT 102
47373: PUSH
47374: LD_INT 105
47376: PUSH
47377: LD_INT 106
47379: PUSH
47380: LD_INT 108
47382: PUSH
47383: LD_INT 116
47385: PUSH
47386: LD_INT 117
47388: PUSH
47389: LD_INT 118
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: ST_TO_ADDR
47406: GO 50389
47408: LD_INT 3
47410: DOUBLE
47411: EQUAL
47412: IFTRUE 47416
47414: GO 47504
47416: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47417: LD_ADDR_VAR 0 2
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 4
47427: PUSH
47428: LD_INT 5
47430: PUSH
47431: LD_INT 11
47433: PUSH
47434: LD_INT 12
47436: PUSH
47437: LD_INT 15
47439: PUSH
47440: LD_INT 16
47442: PUSH
47443: LD_INT 22
47445: PUSH
47446: LD_INT 26
47448: PUSH
47449: LD_INT 36
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 101
47466: PUSH
47467: LD_INT 102
47469: PUSH
47470: LD_INT 105
47472: PUSH
47473: LD_INT 106
47475: PUSH
47476: LD_INT 108
47478: PUSH
47479: LD_INT 116
47481: PUSH
47482: LD_INT 117
47484: PUSH
47485: LD_INT 118
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: ST_TO_ADDR
47502: GO 50389
47504: LD_INT 4
47506: DOUBLE
47507: EQUAL
47508: IFTRUE 47512
47510: GO 47608
47512: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47513: LD_ADDR_VAR 0 2
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 5
47526: PUSH
47527: LD_INT 8
47529: PUSH
47530: LD_INT 11
47532: PUSH
47533: LD_INT 12
47535: PUSH
47536: LD_INT 15
47538: PUSH
47539: LD_INT 16
47541: PUSH
47542: LD_INT 22
47544: PUSH
47545: LD_INT 23
47547: PUSH
47548: LD_INT 26
47550: PUSH
47551: LD_INT 36
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 101
47570: PUSH
47571: LD_INT 102
47573: PUSH
47574: LD_INT 105
47576: PUSH
47577: LD_INT 106
47579: PUSH
47580: LD_INT 108
47582: PUSH
47583: LD_INT 116
47585: PUSH
47586: LD_INT 117
47588: PUSH
47589: LD_INT 118
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: ST_TO_ADDR
47606: GO 50389
47608: LD_INT 5
47610: DOUBLE
47611: EQUAL
47612: IFTRUE 47616
47614: GO 47728
47616: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47617: LD_ADDR_VAR 0 2
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 4
47627: PUSH
47628: LD_INT 5
47630: PUSH
47631: LD_INT 6
47633: PUSH
47634: LD_INT 8
47636: PUSH
47637: LD_INT 11
47639: PUSH
47640: LD_INT 12
47642: PUSH
47643: LD_INT 15
47645: PUSH
47646: LD_INT 16
47648: PUSH
47649: LD_INT 22
47651: PUSH
47652: LD_INT 23
47654: PUSH
47655: LD_INT 25
47657: PUSH
47658: LD_INT 26
47660: PUSH
47661: LD_INT 36
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 101
47682: PUSH
47683: LD_INT 102
47685: PUSH
47686: LD_INT 105
47688: PUSH
47689: LD_INT 106
47691: PUSH
47692: LD_INT 108
47694: PUSH
47695: LD_INT 109
47697: PUSH
47698: LD_INT 112
47700: PUSH
47701: LD_INT 116
47703: PUSH
47704: LD_INT 117
47706: PUSH
47707: LD_INT 118
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: ST_TO_ADDR
47726: GO 50389
47728: LD_INT 6
47730: DOUBLE
47731: EQUAL
47732: IFTRUE 47736
47734: GO 47868
47736: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47737: LD_ADDR_VAR 0 2
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 4
47747: PUSH
47748: LD_INT 5
47750: PUSH
47751: LD_INT 6
47753: PUSH
47754: LD_INT 8
47756: PUSH
47757: LD_INT 11
47759: PUSH
47760: LD_INT 12
47762: PUSH
47763: LD_INT 15
47765: PUSH
47766: LD_INT 16
47768: PUSH
47769: LD_INT 20
47771: PUSH
47772: LD_INT 21
47774: PUSH
47775: LD_INT 22
47777: PUSH
47778: LD_INT 23
47780: PUSH
47781: LD_INT 25
47783: PUSH
47784: LD_INT 26
47786: PUSH
47787: LD_INT 30
47789: PUSH
47790: LD_INT 31
47792: PUSH
47793: LD_INT 32
47795: PUSH
47796: LD_INT 36
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 101
47822: PUSH
47823: LD_INT 102
47825: PUSH
47826: LD_INT 105
47828: PUSH
47829: LD_INT 106
47831: PUSH
47832: LD_INT 108
47834: PUSH
47835: LD_INT 109
47837: PUSH
47838: LD_INT 112
47840: PUSH
47841: LD_INT 116
47843: PUSH
47844: LD_INT 117
47846: PUSH
47847: LD_INT 118
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: ST_TO_ADDR
47866: GO 50389
47868: LD_INT 7
47870: DOUBLE
47871: EQUAL
47872: IFTRUE 47876
47874: GO 47988
47876: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47877: LD_ADDR_VAR 0 2
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: LD_INT 5
47890: PUSH
47891: LD_INT 7
47893: PUSH
47894: LD_INT 11
47896: PUSH
47897: LD_INT 12
47899: PUSH
47900: LD_INT 15
47902: PUSH
47903: LD_INT 16
47905: PUSH
47906: LD_INT 20
47908: PUSH
47909: LD_INT 21
47911: PUSH
47912: LD_INT 22
47914: PUSH
47915: LD_INT 23
47917: PUSH
47918: LD_INT 25
47920: PUSH
47921: LD_INT 26
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 101
47942: PUSH
47943: LD_INT 102
47945: PUSH
47946: LD_INT 103
47948: PUSH
47949: LD_INT 105
47951: PUSH
47952: LD_INT 106
47954: PUSH
47955: LD_INT 108
47957: PUSH
47958: LD_INT 112
47960: PUSH
47961: LD_INT 116
47963: PUSH
47964: LD_INT 117
47966: PUSH
47967: LD_INT 118
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: ST_TO_ADDR
47986: GO 50389
47988: LD_INT 8
47990: DOUBLE
47991: EQUAL
47992: IFTRUE 47996
47994: GO 48136
47996: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47997: LD_ADDR_VAR 0 2
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: LD_INT 5
48010: PUSH
48011: LD_INT 6
48013: PUSH
48014: LD_INT 7
48016: PUSH
48017: LD_INT 8
48019: PUSH
48020: LD_INT 11
48022: PUSH
48023: LD_INT 12
48025: PUSH
48026: LD_INT 15
48028: PUSH
48029: LD_INT 16
48031: PUSH
48032: LD_INT 20
48034: PUSH
48035: LD_INT 21
48037: PUSH
48038: LD_INT 22
48040: PUSH
48041: LD_INT 23
48043: PUSH
48044: LD_INT 25
48046: PUSH
48047: LD_INT 26
48049: PUSH
48050: LD_INT 30
48052: PUSH
48053: LD_INT 31
48055: PUSH
48056: LD_INT 32
48058: PUSH
48059: LD_INT 36
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 101
48086: PUSH
48087: LD_INT 102
48089: PUSH
48090: LD_INT 103
48092: PUSH
48093: LD_INT 105
48095: PUSH
48096: LD_INT 106
48098: PUSH
48099: LD_INT 108
48101: PUSH
48102: LD_INT 109
48104: PUSH
48105: LD_INT 112
48107: PUSH
48108: LD_INT 116
48110: PUSH
48111: LD_INT 117
48113: PUSH
48114: LD_INT 118
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: ST_TO_ADDR
48134: GO 50389
48136: LD_INT 9
48138: DOUBLE
48139: EQUAL
48140: IFTRUE 48144
48142: GO 48292
48144: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48145: LD_ADDR_VAR 0 2
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 4
48155: PUSH
48156: LD_INT 5
48158: PUSH
48159: LD_INT 6
48161: PUSH
48162: LD_INT 7
48164: PUSH
48165: LD_INT 8
48167: PUSH
48168: LD_INT 11
48170: PUSH
48171: LD_INT 12
48173: PUSH
48174: LD_INT 15
48176: PUSH
48177: LD_INT 16
48179: PUSH
48180: LD_INT 20
48182: PUSH
48183: LD_INT 21
48185: PUSH
48186: LD_INT 22
48188: PUSH
48189: LD_INT 23
48191: PUSH
48192: LD_INT 25
48194: PUSH
48195: LD_INT 26
48197: PUSH
48198: LD_INT 28
48200: PUSH
48201: LD_INT 30
48203: PUSH
48204: LD_INT 31
48206: PUSH
48207: LD_INT 32
48209: PUSH
48210: LD_INT 36
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 101
48238: PUSH
48239: LD_INT 102
48241: PUSH
48242: LD_INT 103
48244: PUSH
48245: LD_INT 105
48247: PUSH
48248: LD_INT 106
48250: PUSH
48251: LD_INT 108
48253: PUSH
48254: LD_INT 109
48256: PUSH
48257: LD_INT 112
48259: PUSH
48260: LD_INT 114
48262: PUSH
48263: LD_INT 116
48265: PUSH
48266: LD_INT 117
48268: PUSH
48269: LD_INT 118
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: ST_TO_ADDR
48290: GO 50389
48292: LD_INT 10
48294: DOUBLE
48295: EQUAL
48296: IFTRUE 48300
48298: GO 48496
48300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48301: LD_ADDR_VAR 0 2
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 4
48311: PUSH
48312: LD_INT 5
48314: PUSH
48315: LD_INT 6
48317: PUSH
48318: LD_INT 7
48320: PUSH
48321: LD_INT 8
48323: PUSH
48324: LD_INT 9
48326: PUSH
48327: LD_INT 10
48329: PUSH
48330: LD_INT 11
48332: PUSH
48333: LD_INT 12
48335: PUSH
48336: LD_INT 13
48338: PUSH
48339: LD_INT 14
48341: PUSH
48342: LD_INT 15
48344: PUSH
48345: LD_INT 16
48347: PUSH
48348: LD_INT 17
48350: PUSH
48351: LD_INT 18
48353: PUSH
48354: LD_INT 19
48356: PUSH
48357: LD_INT 20
48359: PUSH
48360: LD_INT 21
48362: PUSH
48363: LD_INT 22
48365: PUSH
48366: LD_INT 23
48368: PUSH
48369: LD_INT 24
48371: PUSH
48372: LD_INT 25
48374: PUSH
48375: LD_INT 26
48377: PUSH
48378: LD_INT 28
48380: PUSH
48381: LD_INT 30
48383: PUSH
48384: LD_INT 31
48386: PUSH
48387: LD_INT 32
48389: PUSH
48390: LD_INT 36
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 101
48426: PUSH
48427: LD_INT 102
48429: PUSH
48430: LD_INT 103
48432: PUSH
48433: LD_INT 104
48435: PUSH
48436: LD_INT 105
48438: PUSH
48439: LD_INT 106
48441: PUSH
48442: LD_INT 107
48444: PUSH
48445: LD_INT 108
48447: PUSH
48448: LD_INT 109
48450: PUSH
48451: LD_INT 110
48453: PUSH
48454: LD_INT 111
48456: PUSH
48457: LD_INT 112
48459: PUSH
48460: LD_INT 114
48462: PUSH
48463: LD_INT 116
48465: PUSH
48466: LD_INT 117
48468: PUSH
48469: LD_INT 118
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: ST_TO_ADDR
48494: GO 50389
48496: LD_INT 11
48498: DOUBLE
48499: EQUAL
48500: IFTRUE 48504
48502: GO 48708
48504: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48505: LD_ADDR_VAR 0 2
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 4
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: LD_INT 6
48524: PUSH
48525: LD_INT 7
48527: PUSH
48528: LD_INT 8
48530: PUSH
48531: LD_INT 9
48533: PUSH
48534: LD_INT 10
48536: PUSH
48537: LD_INT 11
48539: PUSH
48540: LD_INT 12
48542: PUSH
48543: LD_INT 13
48545: PUSH
48546: LD_INT 14
48548: PUSH
48549: LD_INT 15
48551: PUSH
48552: LD_INT 16
48554: PUSH
48555: LD_INT 17
48557: PUSH
48558: LD_INT 18
48560: PUSH
48561: LD_INT 19
48563: PUSH
48564: LD_INT 20
48566: PUSH
48567: LD_INT 21
48569: PUSH
48570: LD_INT 22
48572: PUSH
48573: LD_INT 23
48575: PUSH
48576: LD_INT 24
48578: PUSH
48579: LD_INT 25
48581: PUSH
48582: LD_INT 26
48584: PUSH
48585: LD_INT 28
48587: PUSH
48588: LD_INT 30
48590: PUSH
48591: LD_INT 31
48593: PUSH
48594: LD_INT 32
48596: PUSH
48597: LD_INT 34
48599: PUSH
48600: LD_INT 36
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 101
48638: PUSH
48639: LD_INT 102
48641: PUSH
48642: LD_INT 103
48644: PUSH
48645: LD_INT 104
48647: PUSH
48648: LD_INT 105
48650: PUSH
48651: LD_INT 106
48653: PUSH
48654: LD_INT 107
48656: PUSH
48657: LD_INT 108
48659: PUSH
48660: LD_INT 109
48662: PUSH
48663: LD_INT 110
48665: PUSH
48666: LD_INT 111
48668: PUSH
48669: LD_INT 112
48671: PUSH
48672: LD_INT 114
48674: PUSH
48675: LD_INT 116
48677: PUSH
48678: LD_INT 117
48680: PUSH
48681: LD_INT 118
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: ST_TO_ADDR
48706: GO 50389
48708: LD_INT 12
48710: DOUBLE
48711: EQUAL
48712: IFTRUE 48716
48714: GO 48936
48716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48717: LD_ADDR_VAR 0 2
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: LD_INT 5
48736: PUSH
48737: LD_INT 6
48739: PUSH
48740: LD_INT 7
48742: PUSH
48743: LD_INT 8
48745: PUSH
48746: LD_INT 9
48748: PUSH
48749: LD_INT 10
48751: PUSH
48752: LD_INT 11
48754: PUSH
48755: LD_INT 12
48757: PUSH
48758: LD_INT 13
48760: PUSH
48761: LD_INT 14
48763: PUSH
48764: LD_INT 15
48766: PUSH
48767: LD_INT 16
48769: PUSH
48770: LD_INT 17
48772: PUSH
48773: LD_INT 18
48775: PUSH
48776: LD_INT 19
48778: PUSH
48779: LD_INT 20
48781: PUSH
48782: LD_INT 21
48784: PUSH
48785: LD_INT 22
48787: PUSH
48788: LD_INT 23
48790: PUSH
48791: LD_INT 24
48793: PUSH
48794: LD_INT 25
48796: PUSH
48797: LD_INT 26
48799: PUSH
48800: LD_INT 27
48802: PUSH
48803: LD_INT 28
48805: PUSH
48806: LD_INT 30
48808: PUSH
48809: LD_INT 31
48811: PUSH
48812: LD_INT 32
48814: PUSH
48815: LD_INT 33
48817: PUSH
48818: LD_INT 34
48820: PUSH
48821: LD_INT 36
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 101
48862: PUSH
48863: LD_INT 102
48865: PUSH
48866: LD_INT 103
48868: PUSH
48869: LD_INT 104
48871: PUSH
48872: LD_INT 105
48874: PUSH
48875: LD_INT 106
48877: PUSH
48878: LD_INT 107
48880: PUSH
48881: LD_INT 108
48883: PUSH
48884: LD_INT 109
48886: PUSH
48887: LD_INT 110
48889: PUSH
48890: LD_INT 111
48892: PUSH
48893: LD_INT 112
48895: PUSH
48896: LD_INT 113
48898: PUSH
48899: LD_INT 114
48901: PUSH
48902: LD_INT 116
48904: PUSH
48905: LD_INT 117
48907: PUSH
48908: LD_INT 118
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: ST_TO_ADDR
48934: GO 50389
48936: LD_INT 13
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48944
48942: GO 49152
48944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48945: LD_ADDR_VAR 0 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: LD_INT 5
48964: PUSH
48965: LD_INT 8
48967: PUSH
48968: LD_INT 9
48970: PUSH
48971: LD_INT 10
48973: PUSH
48974: LD_INT 11
48976: PUSH
48977: LD_INT 12
48979: PUSH
48980: LD_INT 14
48982: PUSH
48983: LD_INT 15
48985: PUSH
48986: LD_INT 16
48988: PUSH
48989: LD_INT 17
48991: PUSH
48992: LD_INT 18
48994: PUSH
48995: LD_INT 19
48997: PUSH
48998: LD_INT 20
49000: PUSH
49001: LD_INT 21
49003: PUSH
49004: LD_INT 22
49006: PUSH
49007: LD_INT 23
49009: PUSH
49010: LD_INT 24
49012: PUSH
49013: LD_INT 25
49015: PUSH
49016: LD_INT 26
49018: PUSH
49019: LD_INT 27
49021: PUSH
49022: LD_INT 28
49024: PUSH
49025: LD_INT 30
49027: PUSH
49028: LD_INT 31
49030: PUSH
49031: LD_INT 32
49033: PUSH
49034: LD_INT 33
49036: PUSH
49037: LD_INT 34
49039: PUSH
49040: LD_INT 36
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 101
49078: PUSH
49079: LD_INT 102
49081: PUSH
49082: LD_INT 103
49084: PUSH
49085: LD_INT 104
49087: PUSH
49088: LD_INT 105
49090: PUSH
49091: LD_INT 106
49093: PUSH
49094: LD_INT 107
49096: PUSH
49097: LD_INT 108
49099: PUSH
49100: LD_INT 109
49102: PUSH
49103: LD_INT 110
49105: PUSH
49106: LD_INT 111
49108: PUSH
49109: LD_INT 112
49111: PUSH
49112: LD_INT 113
49114: PUSH
49115: LD_INT 114
49117: PUSH
49118: LD_INT 116
49120: PUSH
49121: LD_INT 117
49123: PUSH
49124: LD_INT 118
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: ST_TO_ADDR
49150: GO 50389
49152: LD_INT 14
49154: DOUBLE
49155: EQUAL
49156: IFTRUE 49160
49158: GO 49384
49160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49161: LD_ADDR_VAR 0 2
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 4
49177: PUSH
49178: LD_INT 5
49180: PUSH
49181: LD_INT 6
49183: PUSH
49184: LD_INT 7
49186: PUSH
49187: LD_INT 8
49189: PUSH
49190: LD_INT 9
49192: PUSH
49193: LD_INT 10
49195: PUSH
49196: LD_INT 11
49198: PUSH
49199: LD_INT 12
49201: PUSH
49202: LD_INT 13
49204: PUSH
49205: LD_INT 14
49207: PUSH
49208: LD_INT 15
49210: PUSH
49211: LD_INT 16
49213: PUSH
49214: LD_INT 17
49216: PUSH
49217: LD_INT 18
49219: PUSH
49220: LD_INT 19
49222: PUSH
49223: LD_INT 20
49225: PUSH
49226: LD_INT 21
49228: PUSH
49229: LD_INT 22
49231: PUSH
49232: LD_INT 23
49234: PUSH
49235: LD_INT 24
49237: PUSH
49238: LD_INT 25
49240: PUSH
49241: LD_INT 26
49243: PUSH
49244: LD_INT 27
49246: PUSH
49247: LD_INT 28
49249: PUSH
49250: LD_INT 29
49252: PUSH
49253: LD_INT 30
49255: PUSH
49256: LD_INT 31
49258: PUSH
49259: LD_INT 32
49261: PUSH
49262: LD_INT 33
49264: PUSH
49265: LD_INT 34
49267: PUSH
49268: LD_INT 36
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 101
49310: PUSH
49311: LD_INT 102
49313: PUSH
49314: LD_INT 103
49316: PUSH
49317: LD_INT 104
49319: PUSH
49320: LD_INT 105
49322: PUSH
49323: LD_INT 106
49325: PUSH
49326: LD_INT 107
49328: PUSH
49329: LD_INT 108
49331: PUSH
49332: LD_INT 109
49334: PUSH
49335: LD_INT 110
49337: PUSH
49338: LD_INT 111
49340: PUSH
49341: LD_INT 112
49343: PUSH
49344: LD_INT 113
49346: PUSH
49347: LD_INT 114
49349: PUSH
49350: LD_INT 116
49352: PUSH
49353: LD_INT 117
49355: PUSH
49356: LD_INT 118
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: ST_TO_ADDR
49382: GO 50389
49384: LD_INT 15
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49392
49390: GO 49616
49392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49393: LD_ADDR_VAR 0 2
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 4
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: LD_INT 6
49415: PUSH
49416: LD_INT 7
49418: PUSH
49419: LD_INT 8
49421: PUSH
49422: LD_INT 9
49424: PUSH
49425: LD_INT 10
49427: PUSH
49428: LD_INT 11
49430: PUSH
49431: LD_INT 12
49433: PUSH
49434: LD_INT 13
49436: PUSH
49437: LD_INT 14
49439: PUSH
49440: LD_INT 15
49442: PUSH
49443: LD_INT 16
49445: PUSH
49446: LD_INT 17
49448: PUSH
49449: LD_INT 18
49451: PUSH
49452: LD_INT 19
49454: PUSH
49455: LD_INT 20
49457: PUSH
49458: LD_INT 21
49460: PUSH
49461: LD_INT 22
49463: PUSH
49464: LD_INT 23
49466: PUSH
49467: LD_INT 24
49469: PUSH
49470: LD_INT 25
49472: PUSH
49473: LD_INT 26
49475: PUSH
49476: LD_INT 27
49478: PUSH
49479: LD_INT 28
49481: PUSH
49482: LD_INT 29
49484: PUSH
49485: LD_INT 30
49487: PUSH
49488: LD_INT 31
49490: PUSH
49491: LD_INT 32
49493: PUSH
49494: LD_INT 33
49496: PUSH
49497: LD_INT 34
49499: PUSH
49500: LD_INT 36
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 101
49542: PUSH
49543: LD_INT 102
49545: PUSH
49546: LD_INT 103
49548: PUSH
49549: LD_INT 104
49551: PUSH
49552: LD_INT 105
49554: PUSH
49555: LD_INT 106
49557: PUSH
49558: LD_INT 107
49560: PUSH
49561: LD_INT 108
49563: PUSH
49564: LD_INT 109
49566: PUSH
49567: LD_INT 110
49569: PUSH
49570: LD_INT 111
49572: PUSH
49573: LD_INT 112
49575: PUSH
49576: LD_INT 113
49578: PUSH
49579: LD_INT 114
49581: PUSH
49582: LD_INT 116
49584: PUSH
49585: LD_INT 117
49587: PUSH
49588: LD_INT 118
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: ST_TO_ADDR
49614: GO 50389
49616: LD_INT 16
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49624
49622: GO 49760
49624: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49625: LD_ADDR_VAR 0 2
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 4
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: LD_INT 7
49641: PUSH
49642: LD_INT 11
49644: PUSH
49645: LD_INT 12
49647: PUSH
49648: LD_INT 15
49650: PUSH
49651: LD_INT 16
49653: PUSH
49654: LD_INT 20
49656: PUSH
49657: LD_INT 21
49659: PUSH
49660: LD_INT 22
49662: PUSH
49663: LD_INT 23
49665: PUSH
49666: LD_INT 25
49668: PUSH
49669: LD_INT 26
49671: PUSH
49672: LD_INT 30
49674: PUSH
49675: LD_INT 31
49677: PUSH
49678: LD_INT 32
49680: PUSH
49681: LD_INT 33
49683: PUSH
49684: LD_INT 34
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 101
49710: PUSH
49711: LD_INT 102
49713: PUSH
49714: LD_INT 103
49716: PUSH
49717: LD_INT 106
49719: PUSH
49720: LD_INT 108
49722: PUSH
49723: LD_INT 112
49725: PUSH
49726: LD_INT 113
49728: PUSH
49729: LD_INT 114
49731: PUSH
49732: LD_INT 116
49734: PUSH
49735: LD_INT 117
49737: PUSH
49738: LD_INT 118
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: ST_TO_ADDR
49758: GO 50389
49760: LD_INT 17
49762: DOUBLE
49763: EQUAL
49764: IFTRUE 49768
49766: GO 49992
49768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49769: LD_ADDR_VAR 0 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: LD_INT 4
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: LD_INT 6
49791: PUSH
49792: LD_INT 7
49794: PUSH
49795: LD_INT 8
49797: PUSH
49798: LD_INT 9
49800: PUSH
49801: LD_INT 10
49803: PUSH
49804: LD_INT 11
49806: PUSH
49807: LD_INT 12
49809: PUSH
49810: LD_INT 13
49812: PUSH
49813: LD_INT 14
49815: PUSH
49816: LD_INT 15
49818: PUSH
49819: LD_INT 16
49821: PUSH
49822: LD_INT 17
49824: PUSH
49825: LD_INT 18
49827: PUSH
49828: LD_INT 19
49830: PUSH
49831: LD_INT 20
49833: PUSH
49834: LD_INT 21
49836: PUSH
49837: LD_INT 22
49839: PUSH
49840: LD_INT 23
49842: PUSH
49843: LD_INT 24
49845: PUSH
49846: LD_INT 25
49848: PUSH
49849: LD_INT 26
49851: PUSH
49852: LD_INT 27
49854: PUSH
49855: LD_INT 28
49857: PUSH
49858: LD_INT 29
49860: PUSH
49861: LD_INT 30
49863: PUSH
49864: LD_INT 31
49866: PUSH
49867: LD_INT 32
49869: PUSH
49870: LD_INT 33
49872: PUSH
49873: LD_INT 34
49875: PUSH
49876: LD_INT 36
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 101
49918: PUSH
49919: LD_INT 102
49921: PUSH
49922: LD_INT 103
49924: PUSH
49925: LD_INT 104
49927: PUSH
49928: LD_INT 105
49930: PUSH
49931: LD_INT 106
49933: PUSH
49934: LD_INT 107
49936: PUSH
49937: LD_INT 108
49939: PUSH
49940: LD_INT 109
49942: PUSH
49943: LD_INT 110
49945: PUSH
49946: LD_INT 111
49948: PUSH
49949: LD_INT 112
49951: PUSH
49952: LD_INT 113
49954: PUSH
49955: LD_INT 114
49957: PUSH
49958: LD_INT 116
49960: PUSH
49961: LD_INT 117
49963: PUSH
49964: LD_INT 118
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: ST_TO_ADDR
49990: GO 50389
49992: LD_INT 18
49994: DOUBLE
49995: EQUAL
49996: IFTRUE 50000
49998: GO 50148
50000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50001: LD_ADDR_VAR 0 2
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: LD_INT 5
50014: PUSH
50015: LD_INT 7
50017: PUSH
50018: LD_INT 11
50020: PUSH
50021: LD_INT 12
50023: PUSH
50024: LD_INT 15
50026: PUSH
50027: LD_INT 16
50029: PUSH
50030: LD_INT 20
50032: PUSH
50033: LD_INT 21
50035: PUSH
50036: LD_INT 22
50038: PUSH
50039: LD_INT 23
50041: PUSH
50042: LD_INT 25
50044: PUSH
50045: LD_INT 26
50047: PUSH
50048: LD_INT 30
50050: PUSH
50051: LD_INT 31
50053: PUSH
50054: LD_INT 32
50056: PUSH
50057: LD_INT 33
50059: PUSH
50060: LD_INT 34
50062: PUSH
50063: LD_INT 35
50065: PUSH
50066: LD_INT 36
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 101
50094: PUSH
50095: LD_INT 102
50097: PUSH
50098: LD_INT 103
50100: PUSH
50101: LD_INT 106
50103: PUSH
50104: LD_INT 108
50106: PUSH
50107: LD_INT 112
50109: PUSH
50110: LD_INT 113
50112: PUSH
50113: LD_INT 114
50115: PUSH
50116: LD_INT 115
50118: PUSH
50119: LD_INT 116
50121: PUSH
50122: LD_INT 117
50124: PUSH
50125: LD_INT 118
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: ST_TO_ADDR
50146: GO 50389
50148: LD_INT 19
50150: DOUBLE
50151: EQUAL
50152: IFTRUE 50156
50154: GO 50388
50156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50157: LD_ADDR_VAR 0 2
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: LD_INT 5
50176: PUSH
50177: LD_INT 6
50179: PUSH
50180: LD_INT 7
50182: PUSH
50183: LD_INT 8
50185: PUSH
50186: LD_INT 9
50188: PUSH
50189: LD_INT 10
50191: PUSH
50192: LD_INT 11
50194: PUSH
50195: LD_INT 12
50197: PUSH
50198: LD_INT 13
50200: PUSH
50201: LD_INT 14
50203: PUSH
50204: LD_INT 15
50206: PUSH
50207: LD_INT 16
50209: PUSH
50210: LD_INT 17
50212: PUSH
50213: LD_INT 18
50215: PUSH
50216: LD_INT 19
50218: PUSH
50219: LD_INT 20
50221: PUSH
50222: LD_INT 21
50224: PUSH
50225: LD_INT 22
50227: PUSH
50228: LD_INT 23
50230: PUSH
50231: LD_INT 24
50233: PUSH
50234: LD_INT 25
50236: PUSH
50237: LD_INT 26
50239: PUSH
50240: LD_INT 27
50242: PUSH
50243: LD_INT 28
50245: PUSH
50246: LD_INT 29
50248: PUSH
50249: LD_INT 30
50251: PUSH
50252: LD_INT 31
50254: PUSH
50255: LD_INT 32
50257: PUSH
50258: LD_INT 33
50260: PUSH
50261: LD_INT 34
50263: PUSH
50264: LD_INT 35
50266: PUSH
50267: LD_INT 36
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 101
50310: PUSH
50311: LD_INT 102
50313: PUSH
50314: LD_INT 103
50316: PUSH
50317: LD_INT 104
50319: PUSH
50320: LD_INT 105
50322: PUSH
50323: LD_INT 106
50325: PUSH
50326: LD_INT 107
50328: PUSH
50329: LD_INT 108
50331: PUSH
50332: LD_INT 109
50334: PUSH
50335: LD_INT 110
50337: PUSH
50338: LD_INT 111
50340: PUSH
50341: LD_INT 112
50343: PUSH
50344: LD_INT 113
50346: PUSH
50347: LD_INT 114
50349: PUSH
50350: LD_INT 115
50352: PUSH
50353: LD_INT 116
50355: PUSH
50356: LD_INT 117
50358: PUSH
50359: LD_INT 118
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: ST_TO_ADDR
50386: GO 50389
50388: POP
// end else
50389: GO 50620
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50391: LD_ADDR_VAR 0 2
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: LD_INT 4
50407: PUSH
50408: LD_INT 5
50410: PUSH
50411: LD_INT 6
50413: PUSH
50414: LD_INT 7
50416: PUSH
50417: LD_INT 8
50419: PUSH
50420: LD_INT 9
50422: PUSH
50423: LD_INT 10
50425: PUSH
50426: LD_INT 11
50428: PUSH
50429: LD_INT 12
50431: PUSH
50432: LD_INT 13
50434: PUSH
50435: LD_INT 14
50437: PUSH
50438: LD_INT 15
50440: PUSH
50441: LD_INT 16
50443: PUSH
50444: LD_INT 17
50446: PUSH
50447: LD_INT 18
50449: PUSH
50450: LD_INT 19
50452: PUSH
50453: LD_INT 20
50455: PUSH
50456: LD_INT 21
50458: PUSH
50459: LD_INT 22
50461: PUSH
50462: LD_INT 23
50464: PUSH
50465: LD_INT 24
50467: PUSH
50468: LD_INT 25
50470: PUSH
50471: LD_INT 26
50473: PUSH
50474: LD_INT 27
50476: PUSH
50477: LD_INT 28
50479: PUSH
50480: LD_INT 29
50482: PUSH
50483: LD_INT 30
50485: PUSH
50486: LD_INT 31
50488: PUSH
50489: LD_INT 32
50491: PUSH
50492: LD_INT 33
50494: PUSH
50495: LD_INT 34
50497: PUSH
50498: LD_INT 35
50500: PUSH
50501: LD_INT 36
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 101
50544: PUSH
50545: LD_INT 102
50547: PUSH
50548: LD_INT 103
50550: PUSH
50551: LD_INT 104
50553: PUSH
50554: LD_INT 105
50556: PUSH
50557: LD_INT 106
50559: PUSH
50560: LD_INT 107
50562: PUSH
50563: LD_INT 108
50565: PUSH
50566: LD_INT 109
50568: PUSH
50569: LD_INT 110
50571: PUSH
50572: LD_INT 111
50574: PUSH
50575: LD_INT 112
50577: PUSH
50578: LD_INT 113
50580: PUSH
50581: LD_INT 114
50583: PUSH
50584: LD_INT 115
50586: PUSH
50587: LD_INT 116
50589: PUSH
50590: LD_INT 117
50592: PUSH
50593: LD_INT 118
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: ST_TO_ADDR
// if result then
50620: LD_VAR 0 2
50624: IFFALSE 51410
// begin normal :=  ;
50626: LD_ADDR_VAR 0 5
50630: PUSH
50631: LD_STRING 
50633: ST_TO_ADDR
// hardcore :=  ;
50634: LD_ADDR_VAR 0 6
50638: PUSH
50639: LD_STRING 
50641: ST_TO_ADDR
// active :=  ;
50642: LD_ADDR_VAR 0 7
50646: PUSH
50647: LD_STRING 
50649: ST_TO_ADDR
// for i = 1 to normalCounter do
50650: LD_ADDR_VAR 0 8
50654: PUSH
50655: DOUBLE
50656: LD_INT 1
50658: DEC
50659: ST_TO_ADDR
50660: LD_EXP 16
50664: PUSH
50665: FOR_TO
50666: IFFALSE 50767
// begin tmp := 0 ;
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_STRING 0
50675: ST_TO_ADDR
// if result [ 1 ] then
50676: LD_VAR 0 2
50680: PUSH
50681: LD_INT 1
50683: ARRAY
50684: IFFALSE 50749
// if result [ 1 ] [ 1 ] = i then
50686: LD_VAR 0 2
50690: PUSH
50691: LD_INT 1
50693: ARRAY
50694: PUSH
50695: LD_INT 1
50697: ARRAY
50698: PUSH
50699: LD_VAR 0 8
50703: EQUAL
50704: IFFALSE 50749
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50706: LD_ADDR_VAR 0 2
50710: PUSH
50711: LD_VAR 0 2
50715: PPUSH
50716: LD_INT 1
50718: PPUSH
50719: LD_VAR 0 2
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: PPUSH
50728: LD_INT 1
50730: PPUSH
50731: CALL_OW 3
50735: PPUSH
50736: CALL_OW 1
50740: ST_TO_ADDR
// tmp := 1 ;
50741: LD_ADDR_VAR 0 3
50745: PUSH
50746: LD_STRING 1
50748: ST_TO_ADDR
// end ; normal := normal & tmp ;
50749: LD_ADDR_VAR 0 5
50753: PUSH
50754: LD_VAR 0 5
50758: PUSH
50759: LD_VAR 0 3
50763: STR
50764: ST_TO_ADDR
// end ;
50765: GO 50665
50767: POP
50768: POP
// for i = 1 to hardcoreCounter do
50769: LD_ADDR_VAR 0 8
50773: PUSH
50774: DOUBLE
50775: LD_INT 1
50777: DEC
50778: ST_TO_ADDR
50779: LD_EXP 17
50783: PUSH
50784: FOR_TO
50785: IFFALSE 50890
// begin tmp := 0 ;
50787: LD_ADDR_VAR 0 3
50791: PUSH
50792: LD_STRING 0
50794: ST_TO_ADDR
// if result [ 2 ] then
50795: LD_VAR 0 2
50799: PUSH
50800: LD_INT 2
50802: ARRAY
50803: IFFALSE 50872
// if result [ 2 ] [ 1 ] = 100 + i then
50805: LD_VAR 0 2
50809: PUSH
50810: LD_INT 2
50812: ARRAY
50813: PUSH
50814: LD_INT 1
50816: ARRAY
50817: PUSH
50818: LD_INT 100
50820: PUSH
50821: LD_VAR 0 8
50825: PLUS
50826: EQUAL
50827: IFFALSE 50872
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50829: LD_ADDR_VAR 0 2
50833: PUSH
50834: LD_VAR 0 2
50838: PPUSH
50839: LD_INT 2
50841: PPUSH
50842: LD_VAR 0 2
50846: PUSH
50847: LD_INT 2
50849: ARRAY
50850: PPUSH
50851: LD_INT 1
50853: PPUSH
50854: CALL_OW 3
50858: PPUSH
50859: CALL_OW 1
50863: ST_TO_ADDR
// tmp := 1 ;
50864: LD_ADDR_VAR 0 3
50868: PUSH
50869: LD_STRING 1
50871: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50872: LD_ADDR_VAR 0 6
50876: PUSH
50877: LD_VAR 0 6
50881: PUSH
50882: LD_VAR 0 3
50886: STR
50887: ST_TO_ADDR
// end ;
50888: GO 50784
50890: POP
50891: POP
// if isGameLoad then
50892: LD_VAR 0 1
50896: IFFALSE 51371
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50898: LD_ADDR_VAR 0 4
50902: PUSH
50903: LD_EXP 20
50907: PUSH
50908: LD_EXP 19
50912: PUSH
50913: LD_EXP 21
50917: PUSH
50918: LD_EXP 18
50922: PUSH
50923: LD_EXP 22
50927: PUSH
50928: LD_EXP 23
50932: PUSH
50933: LD_EXP 24
50937: PUSH
50938: LD_EXP 25
50942: PUSH
50943: LD_EXP 26
50947: PUSH
50948: LD_EXP 27
50952: PUSH
50953: LD_EXP 28
50957: PUSH
50958: LD_EXP 29
50962: PUSH
50963: LD_EXP 30
50967: PUSH
50968: LD_EXP 31
50972: PUSH
50973: LD_EXP 39
50977: PUSH
50978: LD_EXP 40
50982: PUSH
50983: LD_EXP 41
50987: PUSH
50988: LD_EXP 42
50992: PUSH
50993: LD_EXP 44
50997: PUSH
50998: LD_EXP 45
51002: PUSH
51003: LD_EXP 46
51007: PUSH
51008: LD_EXP 49
51012: PUSH
51013: LD_EXP 51
51017: PUSH
51018: LD_EXP 52
51022: PUSH
51023: LD_EXP 53
51027: PUSH
51028: LD_EXP 55
51032: PUSH
51033: LD_EXP 56
51037: PUSH
51038: LD_EXP 59
51042: PUSH
51043: LD_EXP 60
51047: PUSH
51048: LD_EXP 61
51052: PUSH
51053: LD_EXP 62
51057: PUSH
51058: LD_EXP 63
51062: PUSH
51063: LD_EXP 64
51067: PUSH
51068: LD_EXP 65
51072: PUSH
51073: LD_EXP 66
51077: PUSH
51078: LD_EXP 67
51082: PUSH
51083: LD_EXP 32
51087: PUSH
51088: LD_EXP 33
51092: PUSH
51093: LD_EXP 36
51097: PUSH
51098: LD_EXP 37
51102: PUSH
51103: LD_EXP 38
51107: PUSH
51108: LD_EXP 34
51112: PUSH
51113: LD_EXP 35
51117: PUSH
51118: LD_EXP 43
51122: PUSH
51123: LD_EXP 47
51127: PUSH
51128: LD_EXP 48
51132: PUSH
51133: LD_EXP 50
51137: PUSH
51138: LD_EXP 54
51142: PUSH
51143: LD_EXP 57
51147: PUSH
51148: LD_EXP 58
51152: PUSH
51153: LD_EXP 68
51157: PUSH
51158: LD_EXP 69
51162: PUSH
51163: LD_EXP 70
51167: PUSH
51168: LD_EXP 71
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: ST_TO_ADDR
// tmp :=  ;
51229: LD_ADDR_VAR 0 3
51233: PUSH
51234: LD_STRING 
51236: ST_TO_ADDR
// for i = 1 to normalCounter do
51237: LD_ADDR_VAR 0 8
51241: PUSH
51242: DOUBLE
51243: LD_INT 1
51245: DEC
51246: ST_TO_ADDR
51247: LD_EXP 16
51251: PUSH
51252: FOR_TO
51253: IFFALSE 51289
// begin if flags [ i ] then
51255: LD_VAR 0 4
51259: PUSH
51260: LD_VAR 0 8
51264: ARRAY
51265: IFFALSE 51287
// tmp := tmp & i & ; ;
51267: LD_ADDR_VAR 0 3
51271: PUSH
51272: LD_VAR 0 3
51276: PUSH
51277: LD_VAR 0 8
51281: STR
51282: PUSH
51283: LD_STRING ;
51285: STR
51286: ST_TO_ADDR
// end ;
51287: GO 51252
51289: POP
51290: POP
// for i = 1 to hardcoreCounter do
51291: LD_ADDR_VAR 0 8
51295: PUSH
51296: DOUBLE
51297: LD_INT 1
51299: DEC
51300: ST_TO_ADDR
51301: LD_EXP 17
51305: PUSH
51306: FOR_TO
51307: IFFALSE 51353
// begin if flags [ normalCounter + i ] then
51309: LD_VAR 0 4
51313: PUSH
51314: LD_EXP 16
51318: PUSH
51319: LD_VAR 0 8
51323: PLUS
51324: ARRAY
51325: IFFALSE 51351
// tmp := tmp & ( 100 + i ) & ; ;
51327: LD_ADDR_VAR 0 3
51331: PUSH
51332: LD_VAR 0 3
51336: PUSH
51337: LD_INT 100
51339: PUSH
51340: LD_VAR 0 8
51344: PLUS
51345: STR
51346: PUSH
51347: LD_STRING ;
51349: STR
51350: ST_TO_ADDR
// end ;
51351: GO 51306
51353: POP
51354: POP
// if tmp then
51355: LD_VAR 0 3
51359: IFFALSE 51371
// active := tmp ;
51361: LD_ADDR_VAR 0 7
51365: PUSH
51366: LD_VAR 0 3
51370: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51371: LD_STRING getStreamItemsFromMission("
51373: PUSH
51374: LD_VAR 0 5
51378: STR
51379: PUSH
51380: LD_STRING ","
51382: STR
51383: PUSH
51384: LD_VAR 0 6
51388: STR
51389: PUSH
51390: LD_STRING ","
51392: STR
51393: PUSH
51394: LD_VAR 0 7
51398: STR
51399: PUSH
51400: LD_STRING ")
51402: STR
51403: PPUSH
51404: CALL_OW 559
// end else
51408: GO 51417
// ToLua ( getStreamItemsFromMission("","","") ) ;
51410: LD_STRING getStreamItemsFromMission("","","")
51412: PPUSH
51413: CALL_OW 559
// end ;
51417: LD_VAR 0 2
51421: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51422: LD_EXP 15
51426: PUSH
51427: LD_EXP 20
51431: AND
51432: IFFALSE 51556
51434: GO 51436
51436: DISABLE
51437: LD_INT 0
51439: PPUSH
51440: PPUSH
// begin enable ;
51441: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51442: LD_ADDR_VAR 0 2
51446: PUSH
51447: LD_INT 22
51449: PUSH
51450: LD_OWVAR 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 34
51464: PUSH
51465: LD_INT 7
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 34
51474: PUSH
51475: LD_INT 45
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 34
51484: PUSH
51485: LD_INT 28
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 34
51494: PUSH
51495: LD_INT 47
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PPUSH
51513: CALL_OW 69
51517: ST_TO_ADDR
// if not tmp then
51518: LD_VAR 0 2
51522: NOT
51523: IFFALSE 51527
// exit ;
51525: GO 51556
// for i in tmp do
51527: LD_ADDR_VAR 0 1
51531: PUSH
51532: LD_VAR 0 2
51536: PUSH
51537: FOR_IN
51538: IFFALSE 51554
// begin SetLives ( i , 0 ) ;
51540: LD_VAR 0 1
51544: PPUSH
51545: LD_INT 0
51547: PPUSH
51548: CALL_OW 234
// end ;
51552: GO 51537
51554: POP
51555: POP
// end ;
51556: PPOPN 2
51558: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51559: LD_EXP 15
51563: PUSH
51564: LD_EXP 21
51568: AND
51569: IFFALSE 51653
51571: GO 51573
51573: DISABLE
51574: LD_INT 0
51576: PPUSH
51577: PPUSH
// begin enable ;
51578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51579: LD_ADDR_VAR 0 2
51583: PUSH
51584: LD_INT 22
51586: PUSH
51587: LD_OWVAR 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 32
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PPUSH
51610: CALL_OW 69
51614: ST_TO_ADDR
// if not tmp then
51615: LD_VAR 0 2
51619: NOT
51620: IFFALSE 51624
// exit ;
51622: GO 51653
// for i in tmp do
51624: LD_ADDR_VAR 0 1
51628: PUSH
51629: LD_VAR 0 2
51633: PUSH
51634: FOR_IN
51635: IFFALSE 51651
// begin SetLives ( i , 0 ) ;
51637: LD_VAR 0 1
51641: PPUSH
51642: LD_INT 0
51644: PPUSH
51645: CALL_OW 234
// end ;
51649: GO 51634
51651: POP
51652: POP
// end ;
51653: PPOPN 2
51655: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51656: LD_EXP 15
51660: PUSH
51661: LD_EXP 18
51665: AND
51666: IFFALSE 51759
51668: GO 51670
51670: DISABLE
51671: LD_INT 0
51673: PPUSH
// begin enable ;
51674: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51675: LD_ADDR_VAR 0 1
51679: PUSH
51680: LD_INT 22
51682: PUSH
51683: LD_OWVAR 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 25
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 25
51707: PUSH
51708: LD_INT 9
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 25
51717: PUSH
51718: LD_INT 8
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PPUSH
51735: CALL_OW 69
51739: PUSH
51740: FOR_IN
51741: IFFALSE 51757
// begin SetClass ( i , 1 ) ;
51743: LD_VAR 0 1
51747: PPUSH
51748: LD_INT 1
51750: PPUSH
51751: CALL_OW 336
// end ;
51755: GO 51740
51757: POP
51758: POP
// end ;
51759: PPOPN 1
51761: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51762: LD_EXP 15
51766: PUSH
51767: LD_EXP 19
51771: AND
51772: PUSH
51773: LD_OWVAR 65
51777: PUSH
51778: LD_INT 7
51780: LESS
51781: AND
51782: IFFALSE 51796
51784: GO 51786
51786: DISABLE
// begin enable ;
51787: ENABLE
// game_speed := 7 ;
51788: LD_ADDR_OWVAR 65
51792: PUSH
51793: LD_INT 7
51795: ST_TO_ADDR
// end ;
51796: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51797: LD_EXP 15
51801: PUSH
51802: LD_EXP 22
51806: AND
51807: IFFALSE 52009
51809: GO 51811
51811: DISABLE
51812: LD_INT 0
51814: PPUSH
51815: PPUSH
51816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_INT 81
51824: PUSH
51825: LD_OWVAR 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 21
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PPUSH
51848: CALL_OW 69
51852: ST_TO_ADDR
// if not tmp then
51853: LD_VAR 0 3
51857: NOT
51858: IFFALSE 51862
// exit ;
51860: GO 52009
// if tmp > 5 then
51862: LD_VAR 0 3
51866: PUSH
51867: LD_INT 5
51869: GREATER
51870: IFFALSE 51882
// k := 5 else
51872: LD_ADDR_VAR 0 2
51876: PUSH
51877: LD_INT 5
51879: ST_TO_ADDR
51880: GO 51892
// k := tmp ;
51882: LD_ADDR_VAR 0 2
51886: PUSH
51887: LD_VAR 0 3
51891: ST_TO_ADDR
// for i := 1 to k do
51892: LD_ADDR_VAR 0 1
51896: PUSH
51897: DOUBLE
51898: LD_INT 1
51900: DEC
51901: ST_TO_ADDR
51902: LD_VAR 0 2
51906: PUSH
51907: FOR_TO
51908: IFFALSE 52007
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51910: LD_VAR 0 3
51914: PUSH
51915: LD_VAR 0 1
51919: ARRAY
51920: PPUSH
51921: LD_VAR 0 1
51925: PUSH
51926: LD_INT 4
51928: MOD
51929: PUSH
51930: LD_INT 1
51932: PLUS
51933: PPUSH
51934: CALL_OW 259
51938: PUSH
51939: LD_INT 10
51941: LESS
51942: IFFALSE 52005
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51944: LD_VAR 0 3
51948: PUSH
51949: LD_VAR 0 1
51953: ARRAY
51954: PPUSH
51955: LD_VAR 0 1
51959: PUSH
51960: LD_INT 4
51962: MOD
51963: PUSH
51964: LD_INT 1
51966: PLUS
51967: PPUSH
51968: LD_VAR 0 3
51972: PUSH
51973: LD_VAR 0 1
51977: ARRAY
51978: PPUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 4
51986: MOD
51987: PUSH
51988: LD_INT 1
51990: PLUS
51991: PPUSH
51992: CALL_OW 259
51996: PUSH
51997: LD_INT 1
51999: PLUS
52000: PPUSH
52001: CALL_OW 237
52005: GO 51907
52007: POP
52008: POP
// end ;
52009: PPOPN 3
52011: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52012: LD_EXP 15
52016: PUSH
52017: LD_EXP 23
52021: AND
52022: IFFALSE 52042
52024: GO 52026
52026: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52027: LD_INT 4
52029: PPUSH
52030: LD_OWVAR 2
52034: PPUSH
52035: LD_INT 0
52037: PPUSH
52038: CALL_OW 324
52042: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52043: LD_EXP 15
52047: PUSH
52048: LD_EXP 52
52052: AND
52053: IFFALSE 52073
52055: GO 52057
52057: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52058: LD_INT 19
52060: PPUSH
52061: LD_OWVAR 2
52065: PPUSH
52066: LD_INT 0
52068: PPUSH
52069: CALL_OW 324
52073: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52074: LD_EXP 15
52078: PUSH
52079: LD_EXP 24
52083: AND
52084: IFFALSE 52186
52086: GO 52088
52088: DISABLE
52089: LD_INT 0
52091: PPUSH
52092: PPUSH
// begin enable ;
52093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52094: LD_ADDR_VAR 0 2
52098: PUSH
52099: LD_INT 22
52101: PUSH
52102: LD_OWVAR 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 34
52116: PUSH
52117: LD_INT 11
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 34
52126: PUSH
52127: LD_INT 30
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PPUSH
52143: CALL_OW 69
52147: ST_TO_ADDR
// if not tmp then
52148: LD_VAR 0 2
52152: NOT
52153: IFFALSE 52157
// exit ;
52155: GO 52186
// for i in tmp do
52157: LD_ADDR_VAR 0 1
52161: PUSH
52162: LD_VAR 0 2
52166: PUSH
52167: FOR_IN
52168: IFFALSE 52184
// begin SetLives ( i , 0 ) ;
52170: LD_VAR 0 1
52174: PPUSH
52175: LD_INT 0
52177: PPUSH
52178: CALL_OW 234
// end ;
52182: GO 52167
52184: POP
52185: POP
// end ;
52186: PPOPN 2
52188: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52189: LD_EXP 15
52193: PUSH
52194: LD_EXP 25
52198: AND
52199: IFFALSE 52219
52201: GO 52203
52203: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52204: LD_INT 32
52206: PPUSH
52207: LD_OWVAR 2
52211: PPUSH
52212: LD_INT 0
52214: PPUSH
52215: CALL_OW 324
52219: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52220: LD_EXP 15
52224: PUSH
52225: LD_EXP 26
52229: AND
52230: IFFALSE 52411
52232: GO 52234
52234: DISABLE
52235: LD_INT 0
52237: PPUSH
52238: PPUSH
52239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52240: LD_ADDR_VAR 0 2
52244: PUSH
52245: LD_INT 22
52247: PUSH
52248: LD_OWVAR 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 33
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PPUSH
52271: CALL_OW 69
52275: ST_TO_ADDR
// if not tmp then
52276: LD_VAR 0 2
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52411
// side := 0 ;
52285: LD_ADDR_VAR 0 3
52289: PUSH
52290: LD_INT 0
52292: ST_TO_ADDR
// for i := 1 to 8 do
52293: LD_ADDR_VAR 0 1
52297: PUSH
52298: DOUBLE
52299: LD_INT 1
52301: DEC
52302: ST_TO_ADDR
52303: LD_INT 8
52305: PUSH
52306: FOR_TO
52307: IFFALSE 52355
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52309: LD_OWVAR 2
52313: PUSH
52314: LD_VAR 0 1
52318: NONEQUAL
52319: PUSH
52320: LD_OWVAR 2
52324: PPUSH
52325: LD_VAR 0 1
52329: PPUSH
52330: CALL_OW 81
52334: PUSH
52335: LD_INT 2
52337: EQUAL
52338: AND
52339: IFFALSE 52353
// begin side := i ;
52341: LD_ADDR_VAR 0 3
52345: PUSH
52346: LD_VAR 0 1
52350: ST_TO_ADDR
// break ;
52351: GO 52355
// end ;
52353: GO 52306
52355: POP
52356: POP
// if not side then
52357: LD_VAR 0 3
52361: NOT
52362: IFFALSE 52366
// exit ;
52364: GO 52411
// for i := 1 to tmp do
52366: LD_ADDR_VAR 0 1
52370: PUSH
52371: DOUBLE
52372: LD_INT 1
52374: DEC
52375: ST_TO_ADDR
52376: LD_VAR 0 2
52380: PUSH
52381: FOR_TO
52382: IFFALSE 52409
// if Prob ( 60 ) then
52384: LD_INT 60
52386: PPUSH
52387: CALL_OW 13
52391: IFFALSE 52407
// SetSide ( i , side ) ;
52393: LD_VAR 0 1
52397: PPUSH
52398: LD_VAR 0 3
52402: PPUSH
52403: CALL_OW 235
52407: GO 52381
52409: POP
52410: POP
// end ;
52411: PPOPN 3
52413: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52414: LD_EXP 15
52418: PUSH
52419: LD_EXP 28
52423: AND
52424: IFFALSE 52543
52426: GO 52428
52428: DISABLE
52429: LD_INT 0
52431: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52432: LD_ADDR_VAR 0 1
52436: PUSH
52437: LD_INT 22
52439: PUSH
52440: LD_OWVAR 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 21
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 23
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: PPUSH
52481: CALL_OW 69
52485: PUSH
52486: FOR_IN
52487: IFFALSE 52541
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52489: LD_VAR 0 1
52493: PPUSH
52494: CALL_OW 257
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 4
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: IN
52517: IFFALSE 52539
// SetClass ( un , rand ( 1 , 4 ) ) ;
52519: LD_VAR 0 1
52523: PPUSH
52524: LD_INT 1
52526: PPUSH
52527: LD_INT 4
52529: PPUSH
52530: CALL_OW 12
52534: PPUSH
52535: CALL_OW 336
52539: GO 52486
52541: POP
52542: POP
// end ;
52543: PPOPN 1
52545: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52546: LD_EXP 15
52550: PUSH
52551: LD_EXP 27
52555: AND
52556: IFFALSE 52635
52558: GO 52560
52560: DISABLE
52561: LD_INT 0
52563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52564: LD_ADDR_VAR 0 1
52568: PUSH
52569: LD_INT 22
52571: PUSH
52572: LD_OWVAR 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 21
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PPUSH
52595: CALL_OW 69
52599: ST_TO_ADDR
// if not tmp then
52600: LD_VAR 0 1
52604: NOT
52605: IFFALSE 52609
// exit ;
52607: GO 52635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 1
52616: PPUSH
52617: LD_VAR 0 1
52621: PPUSH
52622: CALL_OW 12
52626: ARRAY
52627: PPUSH
52628: LD_INT 100
52630: PPUSH
52631: CALL_OW 234
// end ;
52635: PPOPN 1
52637: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52638: LD_EXP 15
52642: PUSH
52643: LD_EXP 29
52647: AND
52648: IFFALSE 52746
52650: GO 52652
52652: DISABLE
52653: LD_INT 0
52655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52656: LD_ADDR_VAR 0 1
52660: PUSH
52661: LD_INT 22
52663: PUSH
52664: LD_OWVAR 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 21
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PPUSH
52687: CALL_OW 69
52691: ST_TO_ADDR
// if not tmp then
52692: LD_VAR 0 1
52696: NOT
52697: IFFALSE 52701
// exit ;
52699: GO 52746
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52701: LD_VAR 0 1
52705: PUSH
52706: LD_INT 1
52708: PPUSH
52709: LD_VAR 0 1
52713: PPUSH
52714: CALL_OW 12
52718: ARRAY
52719: PPUSH
52720: LD_INT 1
52722: PPUSH
52723: LD_INT 4
52725: PPUSH
52726: CALL_OW 12
52730: PPUSH
52731: LD_INT 3000
52733: PPUSH
52734: LD_INT 9000
52736: PPUSH
52737: CALL_OW 12
52741: PPUSH
52742: CALL_OW 492
// end ;
52746: PPOPN 1
52748: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52749: LD_EXP 15
52753: PUSH
52754: LD_EXP 30
52758: AND
52759: IFFALSE 52779
52761: GO 52763
52763: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52764: LD_INT 1
52766: PPUSH
52767: LD_OWVAR 2
52771: PPUSH
52772: LD_INT 0
52774: PPUSH
52775: CALL_OW 324
52779: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52780: LD_EXP 15
52784: PUSH
52785: LD_EXP 31
52789: AND
52790: IFFALSE 52873
52792: GO 52794
52794: DISABLE
52795: LD_INT 0
52797: PPUSH
52798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52799: LD_ADDR_VAR 0 2
52803: PUSH
52804: LD_INT 22
52806: PUSH
52807: LD_OWVAR 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 21
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PPUSH
52830: CALL_OW 69
52834: ST_TO_ADDR
// if not tmp then
52835: LD_VAR 0 2
52839: NOT
52840: IFFALSE 52844
// exit ;
52842: GO 52873
// for i in tmp do
52844: LD_ADDR_VAR 0 1
52848: PUSH
52849: LD_VAR 0 2
52853: PUSH
52854: FOR_IN
52855: IFFALSE 52871
// SetBLevel ( i , 10 ) ;
52857: LD_VAR 0 1
52861: PPUSH
52862: LD_INT 10
52864: PPUSH
52865: CALL_OW 241
52869: GO 52854
52871: POP
52872: POP
// end ;
52873: PPOPN 2
52875: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52876: LD_EXP 15
52880: PUSH
52881: LD_EXP 32
52885: AND
52886: IFFALSE 52997
52888: GO 52890
52890: DISABLE
52891: LD_INT 0
52893: PPUSH
52894: PPUSH
52895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52896: LD_ADDR_VAR 0 3
52900: PUSH
52901: LD_INT 22
52903: PUSH
52904: LD_OWVAR 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 25
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PPUSH
52927: CALL_OW 69
52931: ST_TO_ADDR
// if not tmp then
52932: LD_VAR 0 3
52936: NOT
52937: IFFALSE 52941
// exit ;
52939: GO 52997
// un := tmp [ rand ( 1 , tmp ) ] ;
52941: LD_ADDR_VAR 0 2
52945: PUSH
52946: LD_VAR 0 3
52950: PUSH
52951: LD_INT 1
52953: PPUSH
52954: LD_VAR 0 3
52958: PPUSH
52959: CALL_OW 12
52963: ARRAY
52964: ST_TO_ADDR
// if Crawls ( un ) then
52965: LD_VAR 0 2
52969: PPUSH
52970: CALL_OW 318
52974: IFFALSE 52985
// ComWalk ( un ) ;
52976: LD_VAR 0 2
52980: PPUSH
52981: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52985: LD_VAR 0 2
52989: PPUSH
52990: LD_INT 5
52992: PPUSH
52993: CALL_OW 336
// end ;
52997: PPOPN 3
52999: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53000: LD_EXP 15
53004: PUSH
53005: LD_EXP 33
53009: AND
53010: PUSH
53011: LD_OWVAR 67
53015: PUSH
53016: LD_INT 4
53018: LESS
53019: AND
53020: IFFALSE 53039
53022: GO 53024
53024: DISABLE
// begin Difficulty := Difficulty + 1 ;
53025: LD_ADDR_OWVAR 67
53029: PUSH
53030: LD_OWVAR 67
53034: PUSH
53035: LD_INT 1
53037: PLUS
53038: ST_TO_ADDR
// end ;
53039: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53040: LD_EXP 15
53044: PUSH
53045: LD_EXP 34
53049: AND
53050: IFFALSE 53153
53052: GO 53054
53054: DISABLE
53055: LD_INT 0
53057: PPUSH
// begin for i := 1 to 5 do
53058: LD_ADDR_VAR 0 1
53062: PUSH
53063: DOUBLE
53064: LD_INT 1
53066: DEC
53067: ST_TO_ADDR
53068: LD_INT 5
53070: PUSH
53071: FOR_TO
53072: IFFALSE 53151
// begin uc_nation := nation_nature ;
53074: LD_ADDR_OWVAR 21
53078: PUSH
53079: LD_INT 0
53081: ST_TO_ADDR
// uc_side := 0 ;
53082: LD_ADDR_OWVAR 20
53086: PUSH
53087: LD_INT 0
53089: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53090: LD_ADDR_OWVAR 29
53094: PUSH
53095: LD_INT 12
53097: PUSH
53098: LD_INT 12
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// hc_agressivity := 20 ;
53105: LD_ADDR_OWVAR 35
53109: PUSH
53110: LD_INT 20
53112: ST_TO_ADDR
// hc_class := class_tiger ;
53113: LD_ADDR_OWVAR 28
53117: PUSH
53118: LD_INT 14
53120: ST_TO_ADDR
// hc_gallery :=  ;
53121: LD_ADDR_OWVAR 33
53125: PUSH
53126: LD_STRING 
53128: ST_TO_ADDR
// hc_name :=  ;
53129: LD_ADDR_OWVAR 26
53133: PUSH
53134: LD_STRING 
53136: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53137: CALL_OW 44
53141: PPUSH
53142: LD_INT 0
53144: PPUSH
53145: CALL_OW 51
// end ;
53149: GO 53071
53151: POP
53152: POP
// end ;
53153: PPOPN 1
53155: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53156: LD_EXP 15
53160: PUSH
53161: LD_EXP 35
53165: AND
53166: IFFALSE 53175
53168: GO 53170
53170: DISABLE
// StreamSibBomb ;
53171: CALL 53176 0 0
53175: END
// export function StreamSibBomb ; var i , x , y ; begin
53176: LD_INT 0
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
// result := false ;
53182: LD_ADDR_VAR 0 1
53186: PUSH
53187: LD_INT 0
53189: ST_TO_ADDR
// for i := 1 to 16 do
53190: LD_ADDR_VAR 0 2
53194: PUSH
53195: DOUBLE
53196: LD_INT 1
53198: DEC
53199: ST_TO_ADDR
53200: LD_INT 16
53202: PUSH
53203: FOR_TO
53204: IFFALSE 53403
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53206: LD_ADDR_VAR 0 3
53210: PUSH
53211: LD_INT 10
53213: PUSH
53214: LD_INT 20
53216: PUSH
53217: LD_INT 30
53219: PUSH
53220: LD_INT 40
53222: PUSH
53223: LD_INT 50
53225: PUSH
53226: LD_INT 60
53228: PUSH
53229: LD_INT 70
53231: PUSH
53232: LD_INT 80
53234: PUSH
53235: LD_INT 90
53237: PUSH
53238: LD_INT 100
53240: PUSH
53241: LD_INT 110
53243: PUSH
53244: LD_INT 120
53246: PUSH
53247: LD_INT 130
53249: PUSH
53250: LD_INT 140
53252: PUSH
53253: LD_INT 150
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PPUSH
53276: LD_INT 15
53278: PPUSH
53279: CALL_OW 12
53283: ARRAY
53284: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53285: LD_ADDR_VAR 0 4
53289: PUSH
53290: LD_INT 10
53292: PUSH
53293: LD_INT 20
53295: PUSH
53296: LD_INT 30
53298: PUSH
53299: LD_INT 40
53301: PUSH
53302: LD_INT 50
53304: PUSH
53305: LD_INT 60
53307: PUSH
53308: LD_INT 70
53310: PUSH
53311: LD_INT 80
53313: PUSH
53314: LD_INT 90
53316: PUSH
53317: LD_INT 100
53319: PUSH
53320: LD_INT 110
53322: PUSH
53323: LD_INT 120
53325: PUSH
53326: LD_INT 130
53328: PUSH
53329: LD_INT 140
53331: PUSH
53332: LD_INT 150
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PPUSH
53355: LD_INT 15
53357: PPUSH
53358: CALL_OW 12
53362: ARRAY
53363: ST_TO_ADDR
// if ValidHex ( x , y ) then
53364: LD_VAR 0 3
53368: PPUSH
53369: LD_VAR 0 4
53373: PPUSH
53374: CALL_OW 488
53378: IFFALSE 53401
// begin result := [ x , y ] ;
53380: LD_ADDR_VAR 0 1
53384: PUSH
53385: LD_VAR 0 3
53389: PUSH
53390: LD_VAR 0 4
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// break ;
53399: GO 53403
// end ; end ;
53401: GO 53203
53403: POP
53404: POP
// if result then
53405: LD_VAR 0 1
53409: IFFALSE 53469
// begin ToLua ( playSibBomb() ) ;
53411: LD_STRING playSibBomb()
53413: PPUSH
53414: CALL_OW 559
// wait ( 0 0$14 ) ;
53418: LD_INT 490
53420: PPUSH
53421: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53425: LD_VAR 0 1
53429: PUSH
53430: LD_INT 1
53432: ARRAY
53433: PPUSH
53434: LD_VAR 0 1
53438: PUSH
53439: LD_INT 2
53441: ARRAY
53442: PPUSH
53443: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53447: LD_VAR 0 1
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: PPUSH
53456: LD_VAR 0 1
53460: PUSH
53461: LD_INT 2
53463: ARRAY
53464: PPUSH
53465: CALL_OW 429
// end ; end ;
53469: LD_VAR 0 1
53473: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53474: LD_EXP 15
53478: PUSH
53479: LD_EXP 37
53483: AND
53484: IFFALSE 53496
53486: GO 53488
53488: DISABLE
// YouLost (  ) ;
53489: LD_STRING 
53491: PPUSH
53492: CALL_OW 104
53496: END
// every 0 0$1 trigger StreamModeActive and sFog do
53497: LD_EXP 15
53501: PUSH
53502: LD_EXP 36
53506: AND
53507: IFFALSE 53521
53509: GO 53511
53511: DISABLE
// FogOff ( your_side ) ;
53512: LD_OWVAR 2
53516: PPUSH
53517: CALL_OW 344
53521: END
// every 0 0$1 trigger StreamModeActive and sSun do
53522: LD_EXP 15
53526: PUSH
53527: LD_EXP 38
53531: AND
53532: IFFALSE 53560
53534: GO 53536
53536: DISABLE
// begin solar_recharge_percent := 0 ;
53537: LD_ADDR_OWVAR 79
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53545: LD_INT 10500
53547: PPUSH
53548: CALL_OW 67
// solar_recharge_percent := 100 ;
53552: LD_ADDR_OWVAR 79
53556: PUSH
53557: LD_INT 100
53559: ST_TO_ADDR
// end ;
53560: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53561: LD_EXP 15
53565: PUSH
53566: LD_EXP 39
53570: AND
53571: IFFALSE 53810
53573: GO 53575
53575: DISABLE
53576: LD_INT 0
53578: PPUSH
53579: PPUSH
53580: PPUSH
// begin tmp := [ ] ;
53581: LD_ADDR_VAR 0 3
53585: PUSH
53586: EMPTY
53587: ST_TO_ADDR
// for i := 1 to 6 do
53588: LD_ADDR_VAR 0 1
53592: PUSH
53593: DOUBLE
53594: LD_INT 1
53596: DEC
53597: ST_TO_ADDR
53598: LD_INT 6
53600: PUSH
53601: FOR_TO
53602: IFFALSE 53707
// begin uc_nation := nation_nature ;
53604: LD_ADDR_OWVAR 21
53608: PUSH
53609: LD_INT 0
53611: ST_TO_ADDR
// uc_side := 0 ;
53612: LD_ADDR_OWVAR 20
53616: PUSH
53617: LD_INT 0
53619: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53620: LD_ADDR_OWVAR 29
53624: PUSH
53625: LD_INT 12
53627: PUSH
53628: LD_INT 12
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: ST_TO_ADDR
// hc_agressivity := 20 ;
53635: LD_ADDR_OWVAR 35
53639: PUSH
53640: LD_INT 20
53642: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53643: LD_ADDR_OWVAR 28
53647: PUSH
53648: LD_INT 17
53650: ST_TO_ADDR
// hc_gallery :=  ;
53651: LD_ADDR_OWVAR 33
53655: PUSH
53656: LD_STRING 
53658: ST_TO_ADDR
// hc_name :=  ;
53659: LD_ADDR_OWVAR 26
53663: PUSH
53664: LD_STRING 
53666: ST_TO_ADDR
// un := CreateHuman ;
53667: LD_ADDR_VAR 0 2
53671: PUSH
53672: CALL_OW 44
53676: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53677: LD_VAR 0 2
53681: PPUSH
53682: LD_INT 1
53684: PPUSH
53685: CALL_OW 51
// tmp := tmp ^ un ;
53689: LD_ADDR_VAR 0 3
53693: PUSH
53694: LD_VAR 0 3
53698: PUSH
53699: LD_VAR 0 2
53703: ADD
53704: ST_TO_ADDR
// end ;
53705: GO 53601
53707: POP
53708: POP
// repeat wait ( 0 0$1 ) ;
53709: LD_INT 35
53711: PPUSH
53712: CALL_OW 67
// for un in tmp do
53716: LD_ADDR_VAR 0 2
53720: PUSH
53721: LD_VAR 0 3
53725: PUSH
53726: FOR_IN
53727: IFFALSE 53801
// begin if IsDead ( un ) then
53729: LD_VAR 0 2
53733: PPUSH
53734: CALL_OW 301
53738: IFFALSE 53758
// begin tmp := tmp diff un ;
53740: LD_ADDR_VAR 0 3
53744: PUSH
53745: LD_VAR 0 3
53749: PUSH
53750: LD_VAR 0 2
53754: DIFF
53755: ST_TO_ADDR
// continue ;
53756: GO 53726
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53758: LD_VAR 0 2
53762: PPUSH
53763: LD_INT 3
53765: PUSH
53766: LD_INT 22
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PPUSH
53780: CALL_OW 69
53784: PPUSH
53785: LD_VAR 0 2
53789: PPUSH
53790: CALL_OW 74
53794: PPUSH
53795: CALL_OW 115
// end ;
53799: GO 53726
53801: POP
53802: POP
// until not tmp ;
53803: LD_VAR 0 3
53807: NOT
53808: IFFALSE 53709
// end ;
53810: PPOPN 3
53812: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53813: LD_EXP 15
53817: PUSH
53818: LD_EXP 40
53822: AND
53823: IFFALSE 53877
53825: GO 53827
53827: DISABLE
// begin ToLua ( displayTroll(); ) ;
53828: LD_STRING displayTroll();
53830: PPUSH
53831: CALL_OW 559
// wait ( 3 3$00 ) ;
53835: LD_INT 6300
53837: PPUSH
53838: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53842: LD_STRING hideTroll();
53844: PPUSH
53845: CALL_OW 559
// wait ( 1 1$00 ) ;
53849: LD_INT 2100
53851: PPUSH
53852: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53856: LD_STRING displayTroll();
53858: PPUSH
53859: CALL_OW 559
// wait ( 1 1$00 ) ;
53863: LD_INT 2100
53865: PPUSH
53866: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53870: LD_STRING hideTroll();
53872: PPUSH
53873: CALL_OW 559
// end ;
53877: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53878: LD_EXP 15
53882: PUSH
53883: LD_EXP 41
53887: AND
53888: IFFALSE 53951
53890: GO 53892
53892: DISABLE
53893: LD_INT 0
53895: PPUSH
// begin p := 0 ;
53896: LD_ADDR_VAR 0 1
53900: PUSH
53901: LD_INT 0
53903: ST_TO_ADDR
// repeat game_speed := 1 ;
53904: LD_ADDR_OWVAR 65
53908: PUSH
53909: LD_INT 1
53911: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53912: LD_INT 35
53914: PPUSH
53915: CALL_OW 67
// p := p + 1 ;
53919: LD_ADDR_VAR 0 1
53923: PUSH
53924: LD_VAR 0 1
53928: PUSH
53929: LD_INT 1
53931: PLUS
53932: ST_TO_ADDR
// until p >= 60 ;
53933: LD_VAR 0 1
53937: PUSH
53938: LD_INT 60
53940: GREATEREQUAL
53941: IFFALSE 53904
// game_speed := 4 ;
53943: LD_ADDR_OWVAR 65
53947: PUSH
53948: LD_INT 4
53950: ST_TO_ADDR
// end ;
53951: PPOPN 1
53953: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53954: LD_EXP 15
53958: PUSH
53959: LD_EXP 42
53963: AND
53964: IFFALSE 54110
53966: GO 53968
53968: DISABLE
53969: LD_INT 0
53971: PPUSH
53972: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53973: LD_ADDR_VAR 0 1
53977: PUSH
53978: LD_INT 22
53980: PUSH
53981: LD_OWVAR 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 30
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 30
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PPUSH
54022: CALL_OW 69
54026: ST_TO_ADDR
// if not depot then
54027: LD_VAR 0 1
54031: NOT
54032: IFFALSE 54036
// exit ;
54034: GO 54110
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54036: LD_ADDR_VAR 0 2
54040: PUSH
54041: LD_VAR 0 1
54045: PUSH
54046: LD_INT 1
54048: PPUSH
54049: LD_VAR 0 1
54053: PPUSH
54054: CALL_OW 12
54058: ARRAY
54059: PPUSH
54060: CALL_OW 274
54064: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54065: LD_VAR 0 2
54069: PPUSH
54070: LD_INT 1
54072: PPUSH
54073: LD_INT 0
54075: PPUSH
54076: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54080: LD_VAR 0 2
54084: PPUSH
54085: LD_INT 2
54087: PPUSH
54088: LD_INT 0
54090: PPUSH
54091: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54095: LD_VAR 0 2
54099: PPUSH
54100: LD_INT 3
54102: PPUSH
54103: LD_INT 0
54105: PPUSH
54106: CALL_OW 277
// end ;
54110: PPOPN 2
54112: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54113: LD_EXP 15
54117: PUSH
54118: LD_EXP 43
54122: AND
54123: IFFALSE 54220
54125: GO 54127
54127: DISABLE
54128: LD_INT 0
54130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54131: LD_ADDR_VAR 0 1
54135: PUSH
54136: LD_INT 22
54138: PUSH
54139: LD_OWVAR 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 21
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: LD_INT 23
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: PPUSH
54180: CALL_OW 69
54184: ST_TO_ADDR
// if not tmp then
54185: LD_VAR 0 1
54189: NOT
54190: IFFALSE 54194
// exit ;
54192: GO 54220
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54194: LD_VAR 0 1
54198: PUSH
54199: LD_INT 1
54201: PPUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 12
54211: ARRAY
54212: PPUSH
54213: LD_INT 200
54215: PPUSH
54216: CALL_OW 234
// end ;
54220: PPOPN 1
54222: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54223: LD_EXP 15
54227: PUSH
54228: LD_EXP 44
54232: AND
54233: IFFALSE 54312
54235: GO 54237
54237: DISABLE
54238: LD_INT 0
54240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54241: LD_ADDR_VAR 0 1
54245: PUSH
54246: LD_INT 22
54248: PUSH
54249: LD_OWVAR 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 21
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PPUSH
54272: CALL_OW 69
54276: ST_TO_ADDR
// if not tmp then
54277: LD_VAR 0 1
54281: NOT
54282: IFFALSE 54286
// exit ;
54284: GO 54312
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54286: LD_VAR 0 1
54290: PUSH
54291: LD_INT 1
54293: PPUSH
54294: LD_VAR 0 1
54298: PPUSH
54299: CALL_OW 12
54303: ARRAY
54304: PPUSH
54305: LD_INT 60
54307: PPUSH
54308: CALL_OW 234
// end ;
54312: PPOPN 1
54314: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54315: LD_EXP 15
54319: PUSH
54320: LD_EXP 45
54324: AND
54325: IFFALSE 54424
54327: GO 54329
54329: DISABLE
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
// begin enable ;
54334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54335: LD_ADDR_VAR 0 1
54339: PUSH
54340: LD_INT 22
54342: PUSH
54343: LD_OWVAR 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 61
54354: PUSH
54355: EMPTY
54356: LIST
54357: PUSH
54358: LD_INT 33
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: PPUSH
54373: CALL_OW 69
54377: ST_TO_ADDR
// if not tmp then
54378: LD_VAR 0 1
54382: NOT
54383: IFFALSE 54387
// exit ;
54385: GO 54424
// for i in tmp do
54387: LD_ADDR_VAR 0 2
54391: PUSH
54392: LD_VAR 0 1
54396: PUSH
54397: FOR_IN
54398: IFFALSE 54422
// if IsControledBy ( i ) then
54400: LD_VAR 0 2
54404: PPUSH
54405: CALL_OW 312
54409: IFFALSE 54420
// ComUnlink ( i ) ;
54411: LD_VAR 0 2
54415: PPUSH
54416: CALL_OW 136
54420: GO 54397
54422: POP
54423: POP
// end ;
54424: PPOPN 2
54426: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54427: LD_EXP 15
54431: PUSH
54432: LD_EXP 46
54436: AND
54437: IFFALSE 54577
54439: GO 54441
54441: DISABLE
54442: LD_INT 0
54444: PPUSH
54445: PPUSH
// begin ToLua ( displayPowell(); ) ;
54446: LD_STRING displayPowell();
54448: PPUSH
54449: CALL_OW 559
// uc_side := 0 ;
54453: LD_ADDR_OWVAR 20
54457: PUSH
54458: LD_INT 0
54460: ST_TO_ADDR
// uc_nation := 2 ;
54461: LD_ADDR_OWVAR 21
54465: PUSH
54466: LD_INT 2
54468: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54469: LD_ADDR_OWVAR 37
54473: PUSH
54474: LD_INT 14
54476: ST_TO_ADDR
// vc_engine := engine_siberite ;
54477: LD_ADDR_OWVAR 39
54481: PUSH
54482: LD_INT 3
54484: ST_TO_ADDR
// vc_control := control_apeman ;
54485: LD_ADDR_OWVAR 38
54489: PUSH
54490: LD_INT 5
54492: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54493: LD_ADDR_OWVAR 40
54497: PUSH
54498: LD_INT 29
54500: ST_TO_ADDR
// un := CreateVehicle ;
54501: LD_ADDR_VAR 0 2
54505: PUSH
54506: CALL_OW 45
54510: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54511: LD_VAR 0 2
54515: PPUSH
54516: LD_INT 1
54518: PPUSH
54519: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54523: LD_INT 35
54525: PPUSH
54526: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54530: LD_VAR 0 2
54534: PPUSH
54535: LD_INT 22
54537: PUSH
54538: LD_OWVAR 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PPUSH
54547: CALL_OW 69
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: CALL_OW 74
54561: PPUSH
54562: CALL_OW 115
// until IsDead ( un ) ;
54566: LD_VAR 0 2
54570: PPUSH
54571: CALL_OW 301
54575: IFFALSE 54523
// end ;
54577: PPOPN 2
54579: END
// every 0 0$1 trigger StreamModeActive and sStu do
54580: LD_EXP 15
54584: PUSH
54585: LD_EXP 54
54589: AND
54590: IFFALSE 54606
54592: GO 54594
54594: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54595: LD_STRING displayStucuk();
54597: PPUSH
54598: CALL_OW 559
// ResetFog ;
54602: CALL_OW 335
// end ;
54606: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54607: LD_EXP 15
54611: PUSH
54612: LD_EXP 47
54616: AND
54617: IFFALSE 54758
54619: GO 54621
54621: DISABLE
54622: LD_INT 0
54624: PPUSH
54625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54626: LD_ADDR_VAR 0 2
54630: PUSH
54631: LD_INT 22
54633: PUSH
54634: LD_OWVAR 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 21
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 69
54661: ST_TO_ADDR
// if not tmp then
54662: LD_VAR 0 2
54666: NOT
54667: IFFALSE 54671
// exit ;
54669: GO 54758
// un := tmp [ rand ( 1 , tmp ) ] ;
54671: LD_ADDR_VAR 0 1
54675: PUSH
54676: LD_VAR 0 2
54680: PUSH
54681: LD_INT 1
54683: PPUSH
54684: LD_VAR 0 2
54688: PPUSH
54689: CALL_OW 12
54693: ARRAY
54694: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54695: LD_VAR 0 1
54699: PPUSH
54700: LD_INT 0
54702: PPUSH
54703: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54707: LD_VAR 0 1
54711: PPUSH
54712: LD_OWVAR 3
54716: PUSH
54717: LD_VAR 0 1
54721: DIFF
54722: PPUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL_OW 74
54732: PPUSH
54733: CALL_OW 115
// wait ( 0 0$20 ) ;
54737: LD_INT 700
54739: PPUSH
54740: CALL_OW 67
// SetSide ( un , your_side ) ;
54744: LD_VAR 0 1
54748: PPUSH
54749: LD_OWVAR 2
54753: PPUSH
54754: CALL_OW 235
// end ;
54758: PPOPN 2
54760: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54761: LD_EXP 15
54765: PUSH
54766: LD_EXP 48
54770: AND
54771: IFFALSE 54877
54773: GO 54775
54775: DISABLE
54776: LD_INT 0
54778: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54779: LD_ADDR_VAR 0 1
54783: PUSH
54784: LD_INT 22
54786: PUSH
54787: LD_OWVAR 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 30
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 30
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PPUSH
54828: CALL_OW 69
54832: ST_TO_ADDR
// if not depot then
54833: LD_VAR 0 1
54837: NOT
54838: IFFALSE 54842
// exit ;
54840: GO 54877
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54842: LD_VAR 0 1
54846: PUSH
54847: LD_INT 1
54849: ARRAY
54850: PPUSH
54851: CALL_OW 250
54855: PPUSH
54856: LD_VAR 0 1
54860: PUSH
54861: LD_INT 1
54863: ARRAY
54864: PPUSH
54865: CALL_OW 251
54869: PPUSH
54870: LD_INT 70
54872: PPUSH
54873: CALL_OW 495
// end ;
54877: PPOPN 1
54879: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54880: LD_EXP 15
54884: PUSH
54885: LD_EXP 49
54889: AND
54890: IFFALSE 55101
54892: GO 54894
54894: DISABLE
54895: LD_INT 0
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
54901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54902: LD_ADDR_VAR 0 5
54906: PUSH
54907: LD_INT 22
54909: PUSH
54910: LD_OWVAR 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 21
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PPUSH
54933: CALL_OW 69
54937: ST_TO_ADDR
// if not tmp then
54938: LD_VAR 0 5
54942: NOT
54943: IFFALSE 54947
// exit ;
54945: GO 55101
// for i in tmp do
54947: LD_ADDR_VAR 0 1
54951: PUSH
54952: LD_VAR 0 5
54956: PUSH
54957: FOR_IN
54958: IFFALSE 55099
// begin d := rand ( 0 , 5 ) ;
54960: LD_ADDR_VAR 0 4
54964: PUSH
54965: LD_INT 0
54967: PPUSH
54968: LD_INT 5
54970: PPUSH
54971: CALL_OW 12
54975: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54976: LD_ADDR_VAR 0 2
54980: PUSH
54981: LD_VAR 0 1
54985: PPUSH
54986: CALL_OW 250
54990: PPUSH
54991: LD_VAR 0 4
54995: PPUSH
54996: LD_INT 3
54998: PPUSH
54999: LD_INT 12
55001: PPUSH
55002: CALL_OW 12
55006: PPUSH
55007: CALL_OW 272
55011: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55012: LD_ADDR_VAR 0 3
55016: PUSH
55017: LD_VAR 0 1
55021: PPUSH
55022: CALL_OW 251
55026: PPUSH
55027: LD_VAR 0 4
55031: PPUSH
55032: LD_INT 3
55034: PPUSH
55035: LD_INT 12
55037: PPUSH
55038: CALL_OW 12
55042: PPUSH
55043: CALL_OW 273
55047: ST_TO_ADDR
// if ValidHex ( x , y ) then
55048: LD_VAR 0 2
55052: PPUSH
55053: LD_VAR 0 3
55057: PPUSH
55058: CALL_OW 488
55062: IFFALSE 55097
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55064: LD_VAR 0 1
55068: PPUSH
55069: LD_VAR 0 2
55073: PPUSH
55074: LD_VAR 0 3
55078: PPUSH
55079: LD_INT 3
55081: PPUSH
55082: LD_INT 6
55084: PPUSH
55085: CALL_OW 12
55089: PPUSH
55090: LD_INT 1
55092: PPUSH
55093: CALL_OW 483
// end ;
55097: GO 54957
55099: POP
55100: POP
// end ;
55101: PPOPN 5
55103: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55104: LD_EXP 15
55108: PUSH
55109: LD_EXP 50
55113: AND
55114: IFFALSE 55208
55116: GO 55118
55118: DISABLE
55119: LD_INT 0
55121: PPUSH
55122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55123: LD_ADDR_VAR 0 2
55127: PUSH
55128: LD_INT 22
55130: PUSH
55131: LD_OWVAR 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 32
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 21
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: LIST
55164: PPUSH
55165: CALL_OW 69
55169: ST_TO_ADDR
// if not tmp then
55170: LD_VAR 0 2
55174: NOT
55175: IFFALSE 55179
// exit ;
55177: GO 55208
// for i in tmp do
55179: LD_ADDR_VAR 0 1
55183: PUSH
55184: LD_VAR 0 2
55188: PUSH
55189: FOR_IN
55190: IFFALSE 55206
// SetFuel ( i , 0 ) ;
55192: LD_VAR 0 1
55196: PPUSH
55197: LD_INT 0
55199: PPUSH
55200: CALL_OW 240
55204: GO 55189
55206: POP
55207: POP
// end ;
55208: PPOPN 2
55210: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55211: LD_EXP 15
55215: PUSH
55216: LD_EXP 51
55220: AND
55221: IFFALSE 55287
55223: GO 55225
55225: DISABLE
55226: LD_INT 0
55228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55229: LD_ADDR_VAR 0 1
55233: PUSH
55234: LD_INT 22
55236: PUSH
55237: LD_OWVAR 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 30
55248: PUSH
55249: LD_INT 29
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PPUSH
55260: CALL_OW 69
55264: ST_TO_ADDR
// if not tmp then
55265: LD_VAR 0 1
55269: NOT
55270: IFFALSE 55274
// exit ;
55272: GO 55287
// DestroyUnit ( tmp [ 1 ] ) ;
55274: LD_VAR 0 1
55278: PUSH
55279: LD_INT 1
55281: ARRAY
55282: PPUSH
55283: CALL_OW 65
// end ;
55287: PPOPN 1
55289: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55290: LD_EXP 15
55294: PUSH
55295: LD_EXP 53
55299: AND
55300: IFFALSE 55429
55302: GO 55304
55304: DISABLE
55305: LD_INT 0
55307: PPUSH
// begin uc_side := 0 ;
55308: LD_ADDR_OWVAR 20
55312: PUSH
55313: LD_INT 0
55315: ST_TO_ADDR
// uc_nation := nation_arabian ;
55316: LD_ADDR_OWVAR 21
55320: PUSH
55321: LD_INT 2
55323: ST_TO_ADDR
// hc_gallery :=  ;
55324: LD_ADDR_OWVAR 33
55328: PUSH
55329: LD_STRING 
55331: ST_TO_ADDR
// hc_name :=  ;
55332: LD_ADDR_OWVAR 26
55336: PUSH
55337: LD_STRING 
55339: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55340: LD_INT 1
55342: PPUSH
55343: LD_INT 11
55345: PPUSH
55346: LD_INT 10
55348: PPUSH
55349: CALL_OW 380
// un := CreateHuman ;
55353: LD_ADDR_VAR 0 1
55357: PUSH
55358: CALL_OW 44
55362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55363: LD_VAR 0 1
55367: PPUSH
55368: LD_INT 1
55370: PPUSH
55371: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55375: LD_INT 35
55377: PPUSH
55378: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55382: LD_VAR 0 1
55386: PPUSH
55387: LD_INT 22
55389: PUSH
55390: LD_OWVAR 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PPUSH
55399: CALL_OW 69
55403: PPUSH
55404: LD_VAR 0 1
55408: PPUSH
55409: CALL_OW 74
55413: PPUSH
55414: CALL_OW 115
// until IsDead ( un ) ;
55418: LD_VAR 0 1
55422: PPUSH
55423: CALL_OW 301
55427: IFFALSE 55375
// end ;
55429: PPOPN 1
55431: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55432: LD_EXP 15
55436: PUSH
55437: LD_EXP 55
55441: AND
55442: IFFALSE 55454
55444: GO 55446
55446: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55447: LD_STRING earthquake(getX(game), 0, 32)
55449: PPUSH
55450: CALL_OW 559
55454: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55455: LD_EXP 15
55459: PUSH
55460: LD_EXP 56
55464: AND
55465: IFFALSE 55556
55467: GO 55469
55469: DISABLE
55470: LD_INT 0
55472: PPUSH
// begin enable ;
55473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55474: LD_ADDR_VAR 0 1
55478: PUSH
55479: LD_INT 22
55481: PUSH
55482: LD_OWVAR 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 21
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 33
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: PPUSH
55516: CALL_OW 69
55520: ST_TO_ADDR
// if not tmp then
55521: LD_VAR 0 1
55525: NOT
55526: IFFALSE 55530
// exit ;
55528: GO 55556
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55530: LD_VAR 0 1
55534: PUSH
55535: LD_INT 1
55537: PPUSH
55538: LD_VAR 0 1
55542: PPUSH
55543: CALL_OW 12
55547: ARRAY
55548: PPUSH
55549: LD_INT 1
55551: PPUSH
55552: CALL_OW 234
// end ;
55556: PPOPN 1
55558: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55559: LD_EXP 15
55563: PUSH
55564: LD_EXP 57
55568: AND
55569: IFFALSE 55710
55571: GO 55573
55573: DISABLE
55574: LD_INT 0
55576: PPUSH
55577: PPUSH
55578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55579: LD_ADDR_VAR 0 3
55583: PUSH
55584: LD_INT 22
55586: PUSH
55587: LD_OWVAR 2
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 25
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PPUSH
55610: CALL_OW 69
55614: ST_TO_ADDR
// if not tmp then
55615: LD_VAR 0 3
55619: NOT
55620: IFFALSE 55624
// exit ;
55622: GO 55710
// un := tmp [ rand ( 1 , tmp ) ] ;
55624: LD_ADDR_VAR 0 2
55628: PUSH
55629: LD_VAR 0 3
55633: PUSH
55634: LD_INT 1
55636: PPUSH
55637: LD_VAR 0 3
55641: PPUSH
55642: CALL_OW 12
55646: ARRAY
55647: ST_TO_ADDR
// if Crawls ( un ) then
55648: LD_VAR 0 2
55652: PPUSH
55653: CALL_OW 318
55657: IFFALSE 55668
// ComWalk ( un ) ;
55659: LD_VAR 0 2
55663: PPUSH
55664: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55668: LD_VAR 0 2
55672: PPUSH
55673: LD_INT 9
55675: PPUSH
55676: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55680: LD_INT 28
55682: PPUSH
55683: LD_OWVAR 2
55687: PPUSH
55688: LD_INT 2
55690: PPUSH
55691: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55695: LD_INT 29
55697: PPUSH
55698: LD_OWVAR 2
55702: PPUSH
55703: LD_INT 2
55705: PPUSH
55706: CALL_OW 322
// end ;
55710: PPOPN 3
55712: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55713: LD_EXP 15
55717: PUSH
55718: LD_EXP 58
55722: AND
55723: IFFALSE 55834
55725: GO 55727
55727: DISABLE
55728: LD_INT 0
55730: PPUSH
55731: PPUSH
55732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: LD_INT 22
55740: PUSH
55741: LD_OWVAR 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 25
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PPUSH
55764: CALL_OW 69
55768: ST_TO_ADDR
// if not tmp then
55769: LD_VAR 0 3
55773: NOT
55774: IFFALSE 55778
// exit ;
55776: GO 55834
// un := tmp [ rand ( 1 , tmp ) ] ;
55778: LD_ADDR_VAR 0 2
55782: PUSH
55783: LD_VAR 0 3
55787: PUSH
55788: LD_INT 1
55790: PPUSH
55791: LD_VAR 0 3
55795: PPUSH
55796: CALL_OW 12
55800: ARRAY
55801: ST_TO_ADDR
// if Crawls ( un ) then
55802: LD_VAR 0 2
55806: PPUSH
55807: CALL_OW 318
55811: IFFALSE 55822
// ComWalk ( un ) ;
55813: LD_VAR 0 2
55817: PPUSH
55818: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55822: LD_VAR 0 2
55826: PPUSH
55827: LD_INT 8
55829: PPUSH
55830: CALL_OW 336
// end ;
55834: PPOPN 3
55836: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55837: LD_EXP 15
55841: PUSH
55842: LD_EXP 59
55846: AND
55847: IFFALSE 55991
55849: GO 55851
55851: DISABLE
55852: LD_INT 0
55854: PPUSH
55855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55856: LD_ADDR_VAR 0 2
55860: PUSH
55861: LD_INT 22
55863: PUSH
55864: LD_OWVAR 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 21
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 34
55888: PUSH
55889: LD_INT 12
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 34
55898: PUSH
55899: LD_INT 51
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 34
55908: PUSH
55909: LD_INT 32
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: PPUSH
55927: CALL_OW 69
55931: ST_TO_ADDR
// if not tmp then
55932: LD_VAR 0 2
55936: NOT
55937: IFFALSE 55941
// exit ;
55939: GO 55991
// for i in tmp do
55941: LD_ADDR_VAR 0 1
55945: PUSH
55946: LD_VAR 0 2
55950: PUSH
55951: FOR_IN
55952: IFFALSE 55989
// if GetCargo ( i , mat_artifact ) = 0 then
55954: LD_VAR 0 1
55958: PPUSH
55959: LD_INT 4
55961: PPUSH
55962: CALL_OW 289
55966: PUSH
55967: LD_INT 0
55969: EQUAL
55970: IFFALSE 55987
// SetCargo ( i , mat_siberit , 100 ) ;
55972: LD_VAR 0 1
55976: PPUSH
55977: LD_INT 3
55979: PPUSH
55980: LD_INT 100
55982: PPUSH
55983: CALL_OW 290
55987: GO 55951
55989: POP
55990: POP
// end ;
55991: PPOPN 2
55993: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55994: LD_EXP 15
55998: PUSH
55999: LD_EXP 60
56003: AND
56004: IFFALSE 56187
56006: GO 56008
56008: DISABLE
56009: LD_INT 0
56011: PPUSH
56012: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56013: LD_ADDR_VAR 0 2
56017: PUSH
56018: LD_INT 22
56020: PUSH
56021: LD_OWVAR 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PPUSH
56030: CALL_OW 69
56034: ST_TO_ADDR
// if not tmp then
56035: LD_VAR 0 2
56039: NOT
56040: IFFALSE 56044
// exit ;
56042: GO 56187
// for i := 1 to 2 do
56044: LD_ADDR_VAR 0 1
56048: PUSH
56049: DOUBLE
56050: LD_INT 1
56052: DEC
56053: ST_TO_ADDR
56054: LD_INT 2
56056: PUSH
56057: FOR_TO
56058: IFFALSE 56185
// begin uc_side := your_side ;
56060: LD_ADDR_OWVAR 20
56064: PUSH
56065: LD_OWVAR 2
56069: ST_TO_ADDR
// uc_nation := nation_american ;
56070: LD_ADDR_OWVAR 21
56074: PUSH
56075: LD_INT 1
56077: ST_TO_ADDR
// vc_chassis := us_morphling ;
56078: LD_ADDR_OWVAR 37
56082: PUSH
56083: LD_INT 5
56085: ST_TO_ADDR
// vc_engine := engine_siberite ;
56086: LD_ADDR_OWVAR 39
56090: PUSH
56091: LD_INT 3
56093: ST_TO_ADDR
// vc_control := control_computer ;
56094: LD_ADDR_OWVAR 38
56098: PUSH
56099: LD_INT 3
56101: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56102: LD_ADDR_OWVAR 40
56106: PUSH
56107: LD_INT 10
56109: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56110: LD_VAR 0 2
56114: PUSH
56115: LD_INT 1
56117: ARRAY
56118: PPUSH
56119: CALL_OW 310
56123: NOT
56124: IFFALSE 56171
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56126: CALL_OW 45
56130: PPUSH
56131: LD_VAR 0 2
56135: PUSH
56136: LD_INT 1
56138: ARRAY
56139: PPUSH
56140: CALL_OW 250
56144: PPUSH
56145: LD_VAR 0 2
56149: PUSH
56150: LD_INT 1
56152: ARRAY
56153: PPUSH
56154: CALL_OW 251
56158: PPUSH
56159: LD_INT 12
56161: PPUSH
56162: LD_INT 1
56164: PPUSH
56165: CALL_OW 50
56169: GO 56183
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56171: CALL_OW 45
56175: PPUSH
56176: LD_INT 1
56178: PPUSH
56179: CALL_OW 51
// end ;
56183: GO 56057
56185: POP
56186: POP
// end ;
56187: PPOPN 2
56189: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56190: LD_EXP 15
56194: PUSH
56195: LD_EXP 61
56199: AND
56200: IFFALSE 56422
56202: GO 56204
56204: DISABLE
56205: LD_INT 0
56207: PPUSH
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
56212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56213: LD_ADDR_VAR 0 6
56217: PUSH
56218: LD_INT 22
56220: PUSH
56221: LD_OWVAR 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 21
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: LD_INT 23
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: PPUSH
56262: CALL_OW 69
56266: ST_TO_ADDR
// if not tmp then
56267: LD_VAR 0 6
56271: NOT
56272: IFFALSE 56276
// exit ;
56274: GO 56422
// s1 := rand ( 1 , 4 ) ;
56276: LD_ADDR_VAR 0 2
56280: PUSH
56281: LD_INT 1
56283: PPUSH
56284: LD_INT 4
56286: PPUSH
56287: CALL_OW 12
56291: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56292: LD_ADDR_VAR 0 4
56296: PUSH
56297: LD_VAR 0 6
56301: PUSH
56302: LD_INT 1
56304: ARRAY
56305: PPUSH
56306: LD_VAR 0 2
56310: PPUSH
56311: CALL_OW 259
56315: ST_TO_ADDR
// if s1 = 1 then
56316: LD_VAR 0 2
56320: PUSH
56321: LD_INT 1
56323: EQUAL
56324: IFFALSE 56344
// s2 := rand ( 2 , 4 ) else
56326: LD_ADDR_VAR 0 3
56330: PUSH
56331: LD_INT 2
56333: PPUSH
56334: LD_INT 4
56336: PPUSH
56337: CALL_OW 12
56341: ST_TO_ADDR
56342: GO 56352
// s2 := 1 ;
56344: LD_ADDR_VAR 0 3
56348: PUSH
56349: LD_INT 1
56351: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56352: LD_ADDR_VAR 0 5
56356: PUSH
56357: LD_VAR 0 6
56361: PUSH
56362: LD_INT 1
56364: ARRAY
56365: PPUSH
56366: LD_VAR 0 3
56370: PPUSH
56371: CALL_OW 259
56375: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56376: LD_VAR 0 6
56380: PUSH
56381: LD_INT 1
56383: ARRAY
56384: PPUSH
56385: LD_VAR 0 2
56389: PPUSH
56390: LD_VAR 0 5
56394: PPUSH
56395: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56399: LD_VAR 0 6
56403: PUSH
56404: LD_INT 1
56406: ARRAY
56407: PPUSH
56408: LD_VAR 0 3
56412: PPUSH
56413: LD_VAR 0 4
56417: PPUSH
56418: CALL_OW 237
// end ;
56422: PPOPN 6
56424: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56425: LD_EXP 15
56429: PUSH
56430: LD_EXP 62
56434: AND
56435: IFFALSE 56514
56437: GO 56439
56439: DISABLE
56440: LD_INT 0
56442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56443: LD_ADDR_VAR 0 1
56447: PUSH
56448: LD_INT 22
56450: PUSH
56451: LD_OWVAR 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 30
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PPUSH
56474: CALL_OW 69
56478: ST_TO_ADDR
// if not tmp then
56479: LD_VAR 0 1
56483: NOT
56484: IFFALSE 56488
// exit ;
56486: GO 56514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56488: LD_VAR 0 1
56492: PUSH
56493: LD_INT 1
56495: PPUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 12
56505: ARRAY
56506: PPUSH
56507: LD_INT 1
56509: PPUSH
56510: CALL_OW 234
// end ;
56514: PPOPN 1
56516: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56517: LD_EXP 15
56521: PUSH
56522: LD_EXP 63
56526: AND
56527: IFFALSE 56639
56529: GO 56531
56531: DISABLE
56532: LD_INT 0
56534: PPUSH
56535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56536: LD_ADDR_VAR 0 2
56540: PUSH
56541: LD_INT 22
56543: PUSH
56544: LD_OWVAR 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 30
56558: PUSH
56559: LD_INT 27
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 30
56568: PUSH
56569: LD_INT 26
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 30
56578: PUSH
56579: LD_INT 28
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PPUSH
56596: CALL_OW 69
56600: ST_TO_ADDR
// if not tmp then
56601: LD_VAR 0 2
56605: NOT
56606: IFFALSE 56610
// exit ;
56608: GO 56639
// for i in tmp do
56610: LD_ADDR_VAR 0 1
56614: PUSH
56615: LD_VAR 0 2
56619: PUSH
56620: FOR_IN
56621: IFFALSE 56637
// SetLives ( i , 1 ) ;
56623: LD_VAR 0 1
56627: PPUSH
56628: LD_INT 1
56630: PPUSH
56631: CALL_OW 234
56635: GO 56620
56637: POP
56638: POP
// end ;
56639: PPOPN 2
56641: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56642: LD_EXP 15
56646: PUSH
56647: LD_EXP 64
56651: AND
56652: IFFALSE 56939
56654: GO 56656
56656: DISABLE
56657: LD_INT 0
56659: PPUSH
56660: PPUSH
56661: PPUSH
// begin i := rand ( 1 , 7 ) ;
56662: LD_ADDR_VAR 0 1
56666: PUSH
56667: LD_INT 1
56669: PPUSH
56670: LD_INT 7
56672: PPUSH
56673: CALL_OW 12
56677: ST_TO_ADDR
// case i of 1 :
56678: LD_VAR 0 1
56682: PUSH
56683: LD_INT 1
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56691
56689: GO 56701
56691: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56692: LD_STRING earthquake(getX(game), 0, 32)
56694: PPUSH
56695: CALL_OW 559
56699: GO 56939
56701: LD_INT 2
56703: DOUBLE
56704: EQUAL
56705: IFTRUE 56709
56707: GO 56723
56709: POP
// begin ToLua ( displayStucuk(); ) ;
56710: LD_STRING displayStucuk();
56712: PPUSH
56713: CALL_OW 559
// ResetFog ;
56717: CALL_OW 335
// end ; 3 :
56721: GO 56939
56723: LD_INT 3
56725: DOUBLE
56726: EQUAL
56727: IFTRUE 56731
56729: GO 56835
56731: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56732: LD_ADDR_VAR 0 2
56736: PUSH
56737: LD_INT 22
56739: PUSH
56740: LD_OWVAR 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 25
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PPUSH
56763: CALL_OW 69
56767: ST_TO_ADDR
// if not tmp then
56768: LD_VAR 0 2
56772: NOT
56773: IFFALSE 56777
// exit ;
56775: GO 56939
// un := tmp [ rand ( 1 , tmp ) ] ;
56777: LD_ADDR_VAR 0 3
56781: PUSH
56782: LD_VAR 0 2
56786: PUSH
56787: LD_INT 1
56789: PPUSH
56790: LD_VAR 0 2
56794: PPUSH
56795: CALL_OW 12
56799: ARRAY
56800: ST_TO_ADDR
// if Crawls ( un ) then
56801: LD_VAR 0 3
56805: PPUSH
56806: CALL_OW 318
56810: IFFALSE 56821
// ComWalk ( un ) ;
56812: LD_VAR 0 3
56816: PPUSH
56817: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56821: LD_VAR 0 3
56825: PPUSH
56826: LD_INT 8
56828: PPUSH
56829: CALL_OW 336
// end ; 4 :
56833: GO 56939
56835: LD_INT 4
56837: DOUBLE
56838: EQUAL
56839: IFTRUE 56843
56841: GO 56917
56843: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56844: LD_ADDR_VAR 0 2
56848: PUSH
56849: LD_INT 22
56851: PUSH
56852: LD_OWVAR 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 30
56863: PUSH
56864: LD_INT 29
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PPUSH
56875: CALL_OW 69
56879: ST_TO_ADDR
// if not tmp then
56880: LD_VAR 0 2
56884: NOT
56885: IFFALSE 56889
// exit ;
56887: GO 56939
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56889: LD_VAR 0 2
56893: PUSH
56894: LD_INT 1
56896: ARRAY
56897: PPUSH
56898: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56902: LD_VAR 0 2
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: CALL_OW 65
// end ; 5 .. 7 :
56915: GO 56939
56917: LD_INT 5
56919: DOUBLE
56920: GREATEREQUAL
56921: IFFALSE 56929
56923: LD_INT 7
56925: DOUBLE
56926: LESSEQUAL
56927: IFTRUE 56931
56929: GO 56938
56931: POP
// StreamSibBomb ; end ;
56932: CALL 53176 0 0
56936: GO 56939
56938: POP
// end ;
56939: PPOPN 3
56941: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56942: LD_EXP 15
56946: PUSH
56947: LD_EXP 65
56951: AND
56952: IFFALSE 57108
56954: GO 56956
56956: DISABLE
56957: LD_INT 0
56959: PPUSH
56960: PPUSH
56961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56962: LD_ADDR_VAR 0 2
56966: PUSH
56967: LD_INT 81
56969: PUSH
56970: LD_OWVAR 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 21
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 21
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PPUSH
57011: CALL_OW 69
57015: ST_TO_ADDR
// if not tmp then
57016: LD_VAR 0 2
57020: NOT
57021: IFFALSE 57025
// exit ;
57023: GO 57108
// p := 0 ;
57025: LD_ADDR_VAR 0 3
57029: PUSH
57030: LD_INT 0
57032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57033: LD_INT 35
57035: PPUSH
57036: CALL_OW 67
// p := p + 1 ;
57040: LD_ADDR_VAR 0 3
57044: PUSH
57045: LD_VAR 0 3
57049: PUSH
57050: LD_INT 1
57052: PLUS
57053: ST_TO_ADDR
// for i in tmp do
57054: LD_ADDR_VAR 0 1
57058: PUSH
57059: LD_VAR 0 2
57063: PUSH
57064: FOR_IN
57065: IFFALSE 57096
// if GetLives ( i ) < 1000 then
57067: LD_VAR 0 1
57071: PPUSH
57072: CALL_OW 256
57076: PUSH
57077: LD_INT 1000
57079: LESS
57080: IFFALSE 57094
// SetLives ( i , 1000 ) ;
57082: LD_VAR 0 1
57086: PPUSH
57087: LD_INT 1000
57089: PPUSH
57090: CALL_OW 234
57094: GO 57064
57096: POP
57097: POP
// until p > 20 ;
57098: LD_VAR 0 3
57102: PUSH
57103: LD_INT 20
57105: GREATER
57106: IFFALSE 57033
// end ;
57108: PPOPN 3
57110: END
// every 0 0$1 trigger StreamModeActive and sTime do
57111: LD_EXP 15
57115: PUSH
57116: LD_EXP 66
57120: AND
57121: IFFALSE 57156
57123: GO 57125
57125: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57126: LD_INT 28
57128: PPUSH
57129: LD_OWVAR 2
57133: PPUSH
57134: LD_INT 2
57136: PPUSH
57137: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57141: LD_INT 30
57143: PPUSH
57144: LD_OWVAR 2
57148: PPUSH
57149: LD_INT 2
57151: PPUSH
57152: CALL_OW 322
// end ;
57156: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57157: LD_EXP 15
57161: PUSH
57162: LD_EXP 67
57166: AND
57167: IFFALSE 57288
57169: GO 57171
57171: DISABLE
57172: LD_INT 0
57174: PPUSH
57175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57176: LD_ADDR_VAR 0 2
57180: PUSH
57181: LD_INT 22
57183: PUSH
57184: LD_OWVAR 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 21
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 23
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: PPUSH
57225: CALL_OW 69
57229: ST_TO_ADDR
// if not tmp then
57230: LD_VAR 0 2
57234: NOT
57235: IFFALSE 57239
// exit ;
57237: GO 57288
// for i in tmp do
57239: LD_ADDR_VAR 0 1
57243: PUSH
57244: LD_VAR 0 2
57248: PUSH
57249: FOR_IN
57250: IFFALSE 57286
// begin if Crawls ( i ) then
57252: LD_VAR 0 1
57256: PPUSH
57257: CALL_OW 318
57261: IFFALSE 57272
// ComWalk ( i ) ;
57263: LD_VAR 0 1
57267: PPUSH
57268: CALL_OW 138
// SetClass ( i , 2 ) ;
57272: LD_VAR 0 1
57276: PPUSH
57277: LD_INT 2
57279: PPUSH
57280: CALL_OW 336
// end ;
57284: GO 57249
57286: POP
57287: POP
// end ;
57288: PPOPN 2
57290: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57291: LD_EXP 15
57295: PUSH
57296: LD_EXP 68
57300: AND
57301: IFFALSE 57589
57303: GO 57305
57305: DISABLE
57306: LD_INT 0
57308: PPUSH
57309: PPUSH
57310: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57311: LD_OWVAR 2
57315: PPUSH
57316: LD_INT 9
57318: PPUSH
57319: LD_INT 1
57321: PPUSH
57322: LD_INT 1
57324: PPUSH
57325: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57329: LD_INT 9
57331: PPUSH
57332: LD_OWVAR 2
57336: PPUSH
57337: CALL_OW 343
// uc_side := 9 ;
57341: LD_ADDR_OWVAR 20
57345: PUSH
57346: LD_INT 9
57348: ST_TO_ADDR
// uc_nation := 2 ;
57349: LD_ADDR_OWVAR 21
57353: PUSH
57354: LD_INT 2
57356: ST_TO_ADDR
// hc_name := Dark Warrior ;
57357: LD_ADDR_OWVAR 26
57361: PUSH
57362: LD_STRING Dark Warrior
57364: ST_TO_ADDR
// hc_gallery :=  ;
57365: LD_ADDR_OWVAR 33
57369: PUSH
57370: LD_STRING 
57372: ST_TO_ADDR
// hc_noskilllimit := true ;
57373: LD_ADDR_OWVAR 76
57377: PUSH
57378: LD_INT 1
57380: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57381: LD_ADDR_OWVAR 31
57385: PUSH
57386: LD_INT 30
57388: PUSH
57389: LD_INT 30
57391: PUSH
57392: LD_INT 30
57394: PUSH
57395: LD_INT 30
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// un := CreateHuman ;
57404: LD_ADDR_VAR 0 3
57408: PUSH
57409: CALL_OW 44
57413: ST_TO_ADDR
// hc_noskilllimit := false ;
57414: LD_ADDR_OWVAR 76
57418: PUSH
57419: LD_INT 0
57421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57422: LD_VAR 0 3
57426: PPUSH
57427: LD_INT 1
57429: PPUSH
57430: CALL_OW 51
// ToLua ( playRanger() ) ;
57434: LD_STRING playRanger()
57436: PPUSH
57437: CALL_OW 559
// p := 0 ;
57441: LD_ADDR_VAR 0 2
57445: PUSH
57446: LD_INT 0
57448: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57449: LD_INT 35
57451: PPUSH
57452: CALL_OW 67
// p := p + 1 ;
57456: LD_ADDR_VAR 0 2
57460: PUSH
57461: LD_VAR 0 2
57465: PUSH
57466: LD_INT 1
57468: PLUS
57469: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL_OW 256
57479: PUSH
57480: LD_INT 1000
57482: LESS
57483: IFFALSE 57497
// SetLives ( un , 1000 ) ;
57485: LD_VAR 0 3
57489: PPUSH
57490: LD_INT 1000
57492: PPUSH
57493: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57497: LD_VAR 0 3
57501: PPUSH
57502: LD_INT 81
57504: PUSH
57505: LD_OWVAR 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 91
57516: PUSH
57517: LD_VAR 0 3
57521: PUSH
57522: LD_INT 30
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PPUSH
57534: CALL_OW 69
57538: PPUSH
57539: LD_VAR 0 3
57543: PPUSH
57544: CALL_OW 74
57548: PPUSH
57549: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57553: LD_VAR 0 2
57557: PUSH
57558: LD_INT 80
57560: GREATER
57561: PUSH
57562: LD_VAR 0 3
57566: PPUSH
57567: CALL_OW 301
57571: OR
57572: IFFALSE 57449
// if un then
57574: LD_VAR 0 3
57578: IFFALSE 57589
// RemoveUnit ( un ) ;
57580: LD_VAR 0 3
57584: PPUSH
57585: CALL_OW 64
// end ;
57589: PPOPN 3
57591: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57592: LD_EXP 69
57596: IFFALSE 57712
57598: GO 57600
57600: DISABLE
57601: LD_INT 0
57603: PPUSH
57604: PPUSH
57605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57606: LD_ADDR_VAR 0 2
57610: PUSH
57611: LD_INT 81
57613: PUSH
57614: LD_OWVAR 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 21
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PPUSH
57637: CALL_OW 69
57641: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57642: LD_STRING playComputer()
57644: PPUSH
57645: CALL_OW 559
// if not tmp then
57649: LD_VAR 0 2
57653: NOT
57654: IFFALSE 57658
// exit ;
57656: GO 57712
// for i in tmp do
57658: LD_ADDR_VAR 0 1
57662: PUSH
57663: LD_VAR 0 2
57667: PUSH
57668: FOR_IN
57669: IFFALSE 57710
// for j := 1 to 4 do
57671: LD_ADDR_VAR 0 3
57675: PUSH
57676: DOUBLE
57677: LD_INT 1
57679: DEC
57680: ST_TO_ADDR
57681: LD_INT 4
57683: PUSH
57684: FOR_TO
57685: IFFALSE 57706
// SetSkill ( i , j , 10 ) ;
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_VAR 0 3
57696: PPUSH
57697: LD_INT 10
57699: PPUSH
57700: CALL_OW 237
57704: GO 57684
57706: POP
57707: POP
57708: GO 57668
57710: POP
57711: POP
// end ;
57712: PPOPN 3
57714: END
// every 0 0$1 trigger s30 do var i , tmp ;
57715: LD_EXP 70
57719: IFFALSE 57788
57721: GO 57723
57723: DISABLE
57724: LD_INT 0
57726: PPUSH
57727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57728: LD_ADDR_VAR 0 2
57732: PUSH
57733: LD_INT 22
57735: PUSH
57736: LD_OWVAR 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 69
57749: ST_TO_ADDR
// if not tmp then
57750: LD_VAR 0 2
57754: NOT
57755: IFFALSE 57759
// exit ;
57757: GO 57788
// for i in tmp do
57759: LD_ADDR_VAR 0 1
57763: PUSH
57764: LD_VAR 0 2
57768: PUSH
57769: FOR_IN
57770: IFFALSE 57786
// SetLives ( i , 300 ) ;
57772: LD_VAR 0 1
57776: PPUSH
57777: LD_INT 300
57779: PPUSH
57780: CALL_OW 234
57784: GO 57769
57786: POP
57787: POP
// end ;
57788: PPOPN 2
57790: END
// every 0 0$1 trigger s60 do var i , tmp ;
57791: LD_EXP 71
57795: IFFALSE 57864
57797: GO 57799
57799: DISABLE
57800: LD_INT 0
57802: PPUSH
57803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57804: LD_ADDR_VAR 0 2
57808: PUSH
57809: LD_INT 22
57811: PUSH
57812: LD_OWVAR 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PPUSH
57821: CALL_OW 69
57825: ST_TO_ADDR
// if not tmp then
57826: LD_VAR 0 2
57830: NOT
57831: IFFALSE 57835
// exit ;
57833: GO 57864
// for i in tmp do
57835: LD_ADDR_VAR 0 1
57839: PUSH
57840: LD_VAR 0 2
57844: PUSH
57845: FOR_IN
57846: IFFALSE 57862
// SetLives ( i , 600 ) ;
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_INT 600
57855: PPUSH
57856: CALL_OW 234
57860: GO 57845
57862: POP
57863: POP
// end ;
57864: PPOPN 2
57866: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57867: LD_INT 0
57869: PPUSH
// case cmd of 301 :
57870: LD_VAR 0 1
57874: PUSH
57875: LD_INT 301
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 57915
57883: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57884: LD_VAR 0 6
57888: PPUSH
57889: LD_VAR 0 7
57893: PPUSH
57894: LD_VAR 0 8
57898: PPUSH
57899: LD_VAR 0 4
57903: PPUSH
57904: LD_VAR 0 5
57908: PPUSH
57909: CALL 59116 0 5
57913: GO 58036
57915: LD_INT 302
57917: DOUBLE
57918: EQUAL
57919: IFTRUE 57923
57921: GO 57960
57923: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57924: LD_VAR 0 6
57928: PPUSH
57929: LD_VAR 0 7
57933: PPUSH
57934: LD_VAR 0 8
57938: PPUSH
57939: LD_VAR 0 9
57943: PPUSH
57944: LD_VAR 0 4
57948: PPUSH
57949: LD_VAR 0 5
57953: PPUSH
57954: CALL 59207 0 6
57958: GO 58036
57960: LD_INT 303
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 57968
57966: GO 58005
57968: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57969: LD_VAR 0 6
57973: PPUSH
57974: LD_VAR 0 7
57978: PPUSH
57979: LD_VAR 0 8
57983: PPUSH
57984: LD_VAR 0 9
57988: PPUSH
57989: LD_VAR 0 4
57993: PPUSH
57994: LD_VAR 0 5
57998: PPUSH
57999: CALL 58041 0 6
58003: GO 58036
58005: LD_INT 304
58007: DOUBLE
58008: EQUAL
58009: IFTRUE 58013
58011: GO 58035
58013: POP
// hHackTeleport ( unit , x , y ) ; end ;
58014: LD_VAR 0 2
58018: PPUSH
58019: LD_VAR 0 4
58023: PPUSH
58024: LD_VAR 0 5
58028: PPUSH
58029: CALL 59800 0 3
58033: GO 58036
58035: POP
// end ;
58036: LD_VAR 0 12
58040: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58041: LD_INT 0
58043: PPUSH
58044: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58045: LD_VAR 0 1
58049: PUSH
58050: LD_INT 1
58052: LESS
58053: PUSH
58054: LD_VAR 0 1
58058: PUSH
58059: LD_INT 3
58061: GREATER
58062: OR
58063: PUSH
58064: LD_VAR 0 5
58068: PPUSH
58069: LD_VAR 0 6
58073: PPUSH
58074: CALL_OW 428
58078: OR
58079: IFFALSE 58083
// exit ;
58081: GO 58803
// uc_side := your_side ;
58083: LD_ADDR_OWVAR 20
58087: PUSH
58088: LD_OWVAR 2
58092: ST_TO_ADDR
// uc_nation := nation ;
58093: LD_ADDR_OWVAR 21
58097: PUSH
58098: LD_VAR 0 1
58102: ST_TO_ADDR
// bc_level = 1 ;
58103: LD_ADDR_OWVAR 43
58107: PUSH
58108: LD_INT 1
58110: ST_TO_ADDR
// case btype of 1 :
58111: LD_VAR 0 2
58115: PUSH
58116: LD_INT 1
58118: DOUBLE
58119: EQUAL
58120: IFTRUE 58124
58122: GO 58135
58124: POP
// bc_type := b_depot ; 2 :
58125: LD_ADDR_OWVAR 42
58129: PUSH
58130: LD_INT 0
58132: ST_TO_ADDR
58133: GO 58747
58135: LD_INT 2
58137: DOUBLE
58138: EQUAL
58139: IFTRUE 58143
58141: GO 58154
58143: POP
// bc_type := b_warehouse ; 3 :
58144: LD_ADDR_OWVAR 42
58148: PUSH
58149: LD_INT 1
58151: ST_TO_ADDR
58152: GO 58747
58154: LD_INT 3
58156: DOUBLE
58157: EQUAL
58158: IFTRUE 58162
58160: GO 58173
58162: POP
// bc_type := b_lab ; 4 .. 9 :
58163: LD_ADDR_OWVAR 42
58167: PUSH
58168: LD_INT 6
58170: ST_TO_ADDR
58171: GO 58747
58173: LD_INT 4
58175: DOUBLE
58176: GREATEREQUAL
58177: IFFALSE 58185
58179: LD_INT 9
58181: DOUBLE
58182: LESSEQUAL
58183: IFTRUE 58187
58185: GO 58239
58187: POP
// begin bc_type := b_lab_half ;
58188: LD_ADDR_OWVAR 42
58192: PUSH
58193: LD_INT 7
58195: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58196: LD_ADDR_OWVAR 44
58200: PUSH
58201: LD_INT 10
58203: PUSH
58204: LD_INT 11
58206: PUSH
58207: LD_INT 12
58209: PUSH
58210: LD_INT 15
58212: PUSH
58213: LD_INT 14
58215: PUSH
58216: LD_INT 13
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: PUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_INT 3
58234: MINUS
58235: ARRAY
58236: ST_TO_ADDR
// end ; 10 .. 13 :
58237: GO 58747
58239: LD_INT 10
58241: DOUBLE
58242: GREATEREQUAL
58243: IFFALSE 58251
58245: LD_INT 13
58247: DOUBLE
58248: LESSEQUAL
58249: IFTRUE 58253
58251: GO 58330
58253: POP
// begin bc_type := b_lab_full ;
58254: LD_ADDR_OWVAR 42
58258: PUSH
58259: LD_INT 8
58261: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58262: LD_ADDR_OWVAR 44
58266: PUSH
58267: LD_INT 10
58269: PUSH
58270: LD_INT 12
58272: PUSH
58273: LD_INT 14
58275: PUSH
58276: LD_INT 13
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 9
58292: MINUS
58293: ARRAY
58294: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58295: LD_ADDR_OWVAR 45
58299: PUSH
58300: LD_INT 11
58302: PUSH
58303: LD_INT 15
58305: PUSH
58306: LD_INT 12
58308: PUSH
58309: LD_INT 15
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: LD_INT 9
58325: MINUS
58326: ARRAY
58327: ST_TO_ADDR
// end ; 14 :
58328: GO 58747
58330: LD_INT 14
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58338
58336: GO 58349
58338: POP
// bc_type := b_workshop ; 15 :
58339: LD_ADDR_OWVAR 42
58343: PUSH
58344: LD_INT 2
58346: ST_TO_ADDR
58347: GO 58747
58349: LD_INT 15
58351: DOUBLE
58352: EQUAL
58353: IFTRUE 58357
58355: GO 58368
58357: POP
// bc_type := b_factory ; 16 :
58358: LD_ADDR_OWVAR 42
58362: PUSH
58363: LD_INT 3
58365: ST_TO_ADDR
58366: GO 58747
58368: LD_INT 16
58370: DOUBLE
58371: EQUAL
58372: IFTRUE 58376
58374: GO 58387
58376: POP
// bc_type := b_ext_gun ; 17 :
58377: LD_ADDR_OWVAR 42
58381: PUSH
58382: LD_INT 17
58384: ST_TO_ADDR
58385: GO 58747
58387: LD_INT 17
58389: DOUBLE
58390: EQUAL
58391: IFTRUE 58395
58393: GO 58423
58395: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58396: LD_ADDR_OWVAR 42
58400: PUSH
58401: LD_INT 19
58403: PUSH
58404: LD_INT 23
58406: PUSH
58407: LD_INT 19
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 1
58419: ARRAY
58420: ST_TO_ADDR
58421: GO 58747
58423: LD_INT 18
58425: DOUBLE
58426: EQUAL
58427: IFTRUE 58431
58429: GO 58442
58431: POP
// bc_type := b_ext_radar ; 19 :
58432: LD_ADDR_OWVAR 42
58436: PUSH
58437: LD_INT 20
58439: ST_TO_ADDR
58440: GO 58747
58442: LD_INT 19
58444: DOUBLE
58445: EQUAL
58446: IFTRUE 58450
58448: GO 58461
58450: POP
// bc_type := b_ext_radio ; 20 :
58451: LD_ADDR_OWVAR 42
58455: PUSH
58456: LD_INT 22
58458: ST_TO_ADDR
58459: GO 58747
58461: LD_INT 20
58463: DOUBLE
58464: EQUAL
58465: IFTRUE 58469
58467: GO 58480
58469: POP
// bc_type := b_ext_siberium ; 21 :
58470: LD_ADDR_OWVAR 42
58474: PUSH
58475: LD_INT 21
58477: ST_TO_ADDR
58478: GO 58747
58480: LD_INT 21
58482: DOUBLE
58483: EQUAL
58484: IFTRUE 58488
58486: GO 58499
58488: POP
// bc_type := b_ext_computer ; 22 :
58489: LD_ADDR_OWVAR 42
58493: PUSH
58494: LD_INT 24
58496: ST_TO_ADDR
58497: GO 58747
58499: LD_INT 22
58501: DOUBLE
58502: EQUAL
58503: IFTRUE 58507
58505: GO 58518
58507: POP
// bc_type := b_ext_track ; 23 :
58508: LD_ADDR_OWVAR 42
58512: PUSH
58513: LD_INT 16
58515: ST_TO_ADDR
58516: GO 58747
58518: LD_INT 23
58520: DOUBLE
58521: EQUAL
58522: IFTRUE 58526
58524: GO 58537
58526: POP
// bc_type := b_ext_laser ; 24 :
58527: LD_ADDR_OWVAR 42
58531: PUSH
58532: LD_INT 25
58534: ST_TO_ADDR
58535: GO 58747
58537: LD_INT 24
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58545
58543: GO 58556
58545: POP
// bc_type := b_control_tower ; 25 :
58546: LD_ADDR_OWVAR 42
58550: PUSH
58551: LD_INT 36
58553: ST_TO_ADDR
58554: GO 58747
58556: LD_INT 25
58558: DOUBLE
58559: EQUAL
58560: IFTRUE 58564
58562: GO 58575
58564: POP
// bc_type := b_breastwork ; 26 :
58565: LD_ADDR_OWVAR 42
58569: PUSH
58570: LD_INT 31
58572: ST_TO_ADDR
58573: GO 58747
58575: LD_INT 26
58577: DOUBLE
58578: EQUAL
58579: IFTRUE 58583
58581: GO 58594
58583: POP
// bc_type := b_bunker ; 27 :
58584: LD_ADDR_OWVAR 42
58588: PUSH
58589: LD_INT 32
58591: ST_TO_ADDR
58592: GO 58747
58594: LD_INT 27
58596: DOUBLE
58597: EQUAL
58598: IFTRUE 58602
58600: GO 58613
58602: POP
// bc_type := b_turret ; 28 :
58603: LD_ADDR_OWVAR 42
58607: PUSH
58608: LD_INT 33
58610: ST_TO_ADDR
58611: GO 58747
58613: LD_INT 28
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58621
58619: GO 58632
58621: POP
// bc_type := b_armoury ; 29 :
58622: LD_ADDR_OWVAR 42
58626: PUSH
58627: LD_INT 4
58629: ST_TO_ADDR
58630: GO 58747
58632: LD_INT 29
58634: DOUBLE
58635: EQUAL
58636: IFTRUE 58640
58638: GO 58651
58640: POP
// bc_type := b_barracks ; 30 :
58641: LD_ADDR_OWVAR 42
58645: PUSH
58646: LD_INT 5
58648: ST_TO_ADDR
58649: GO 58747
58651: LD_INT 30
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 58670
58659: POP
// bc_type := b_solar_power ; 31 :
58660: LD_ADDR_OWVAR 42
58664: PUSH
58665: LD_INT 27
58667: ST_TO_ADDR
58668: GO 58747
58670: LD_INT 31
58672: DOUBLE
58673: EQUAL
58674: IFTRUE 58678
58676: GO 58689
58678: POP
// bc_type := b_oil_power ; 32 :
58679: LD_ADDR_OWVAR 42
58683: PUSH
58684: LD_INT 26
58686: ST_TO_ADDR
58687: GO 58747
58689: LD_INT 32
58691: DOUBLE
58692: EQUAL
58693: IFTRUE 58697
58695: GO 58708
58697: POP
// bc_type := b_siberite_power ; 33 :
58698: LD_ADDR_OWVAR 42
58702: PUSH
58703: LD_INT 28
58705: ST_TO_ADDR
58706: GO 58747
58708: LD_INT 33
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 58727
58716: POP
// bc_type := b_oil_mine ; 34 :
58717: LD_ADDR_OWVAR 42
58721: PUSH
58722: LD_INT 29
58724: ST_TO_ADDR
58725: GO 58747
58727: LD_INT 34
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58735
58733: GO 58746
58735: POP
// bc_type := b_siberite_mine ; end ;
58736: LD_ADDR_OWVAR 42
58740: PUSH
58741: LD_INT 30
58743: ST_TO_ADDR
58744: GO 58747
58746: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58747: LD_ADDR_VAR 0 8
58751: PUSH
58752: LD_VAR 0 5
58756: PPUSH
58757: LD_VAR 0 6
58761: PPUSH
58762: LD_VAR 0 3
58766: PPUSH
58767: CALL_OW 47
58771: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58772: LD_OWVAR 42
58776: PUSH
58777: LD_INT 32
58779: PUSH
58780: LD_INT 33
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: IN
58787: IFFALSE 58803
// PlaceWeaponTurret ( b , weapon ) ;
58789: LD_VAR 0 8
58793: PPUSH
58794: LD_VAR 0 4
58798: PPUSH
58799: CALL_OW 431
// end ;
58803: LD_VAR 0 7
58807: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58808: LD_INT 0
58810: PPUSH
58811: PPUSH
58812: PPUSH
58813: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58814: LD_ADDR_VAR 0 4
58818: PUSH
58819: LD_INT 22
58821: PUSH
58822: LD_OWVAR 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 30
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 30
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PPUSH
58863: CALL_OW 69
58867: ST_TO_ADDR
// if not tmp then
58868: LD_VAR 0 4
58872: NOT
58873: IFFALSE 58877
// exit ;
58875: GO 58936
// for i in tmp do
58877: LD_ADDR_VAR 0 2
58881: PUSH
58882: LD_VAR 0 4
58886: PUSH
58887: FOR_IN
58888: IFFALSE 58934
// for j = 1 to 3 do
58890: LD_ADDR_VAR 0 3
58894: PUSH
58895: DOUBLE
58896: LD_INT 1
58898: DEC
58899: ST_TO_ADDR
58900: LD_INT 3
58902: PUSH
58903: FOR_TO
58904: IFFALSE 58930
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58906: LD_VAR 0 2
58910: PPUSH
58911: CALL_OW 274
58915: PPUSH
58916: LD_VAR 0 3
58920: PPUSH
58921: LD_INT 99999
58923: PPUSH
58924: CALL_OW 277
58928: GO 58903
58930: POP
58931: POP
58932: GO 58887
58934: POP
58935: POP
// end ;
58936: LD_VAR 0 1
58940: RET
// export function hHackSetLevel10 ; var i , j ; begin
58941: LD_INT 0
58943: PPUSH
58944: PPUSH
58945: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58946: LD_ADDR_VAR 0 2
58950: PUSH
58951: LD_INT 21
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PPUSH
58961: CALL_OW 69
58965: PUSH
58966: FOR_IN
58967: IFFALSE 59019
// if IsSelected ( i ) then
58969: LD_VAR 0 2
58973: PPUSH
58974: CALL_OW 306
58978: IFFALSE 59017
// begin for j := 1 to 4 do
58980: LD_ADDR_VAR 0 3
58984: PUSH
58985: DOUBLE
58986: LD_INT 1
58988: DEC
58989: ST_TO_ADDR
58990: LD_INT 4
58992: PUSH
58993: FOR_TO
58994: IFFALSE 59015
// SetSkill ( i , j , 10 ) ;
58996: LD_VAR 0 2
59000: PPUSH
59001: LD_VAR 0 3
59005: PPUSH
59006: LD_INT 10
59008: PPUSH
59009: CALL_OW 237
59013: GO 58993
59015: POP
59016: POP
// end ;
59017: GO 58966
59019: POP
59020: POP
// end ;
59021: LD_VAR 0 1
59025: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59026: LD_INT 0
59028: PPUSH
59029: PPUSH
59030: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59031: LD_ADDR_VAR 0 2
59035: PUSH
59036: LD_INT 22
59038: PUSH
59039: LD_OWVAR 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 21
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PPUSH
59062: CALL_OW 69
59066: PUSH
59067: FOR_IN
59068: IFFALSE 59109
// begin for j := 1 to 4 do
59070: LD_ADDR_VAR 0 3
59074: PUSH
59075: DOUBLE
59076: LD_INT 1
59078: DEC
59079: ST_TO_ADDR
59080: LD_INT 4
59082: PUSH
59083: FOR_TO
59084: IFFALSE 59105
// SetSkill ( i , j , 10 ) ;
59086: LD_VAR 0 2
59090: PPUSH
59091: LD_VAR 0 3
59095: PPUSH
59096: LD_INT 10
59098: PPUSH
59099: CALL_OW 237
59103: GO 59083
59105: POP
59106: POP
// end ;
59107: GO 59067
59109: POP
59110: POP
// end ;
59111: LD_VAR 0 1
59115: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59116: LD_INT 0
59118: PPUSH
// uc_side := your_side ;
59119: LD_ADDR_OWVAR 20
59123: PUSH
59124: LD_OWVAR 2
59128: ST_TO_ADDR
// uc_nation := nation ;
59129: LD_ADDR_OWVAR 21
59133: PUSH
59134: LD_VAR 0 1
59138: ST_TO_ADDR
// InitHc ;
59139: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59143: LD_INT 0
59145: PPUSH
59146: LD_VAR 0 2
59150: PPUSH
59151: LD_VAR 0 3
59155: PPUSH
59156: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59160: LD_VAR 0 4
59164: PPUSH
59165: LD_VAR 0 5
59169: PPUSH
59170: CALL_OW 428
59174: PUSH
59175: LD_INT 0
59177: EQUAL
59178: IFFALSE 59202
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59180: CALL_OW 44
59184: PPUSH
59185: LD_VAR 0 4
59189: PPUSH
59190: LD_VAR 0 5
59194: PPUSH
59195: LD_INT 1
59197: PPUSH
59198: CALL_OW 48
// end ;
59202: LD_VAR 0 6
59206: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59207: LD_INT 0
59209: PPUSH
59210: PPUSH
// uc_side := your_side ;
59211: LD_ADDR_OWVAR 20
59215: PUSH
59216: LD_OWVAR 2
59220: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59221: LD_VAR 0 1
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: IN
59248: IFFALSE 59260
// uc_nation := nation_american else
59250: LD_ADDR_OWVAR 21
59254: PUSH
59255: LD_INT 1
59257: ST_TO_ADDR
59258: GO 59303
// if chassis in [ 11 , 12 , 13 , 14 ] then
59260: LD_VAR 0 1
59264: PUSH
59265: LD_INT 11
59267: PUSH
59268: LD_INT 12
59270: PUSH
59271: LD_INT 13
59273: PUSH
59274: LD_INT 14
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: IN
59283: IFFALSE 59295
// uc_nation := nation_arabian else
59285: LD_ADDR_OWVAR 21
59289: PUSH
59290: LD_INT 2
59292: ST_TO_ADDR
59293: GO 59303
// uc_nation := nation_russian ;
59295: LD_ADDR_OWVAR 21
59299: PUSH
59300: LD_INT 3
59302: ST_TO_ADDR
// vc_chassis := chassis ;
59303: LD_ADDR_OWVAR 37
59307: PUSH
59308: LD_VAR 0 1
59312: ST_TO_ADDR
// vc_engine := engine ;
59313: LD_ADDR_OWVAR 39
59317: PUSH
59318: LD_VAR 0 2
59322: ST_TO_ADDR
// vc_control := control ;
59323: LD_ADDR_OWVAR 38
59327: PUSH
59328: LD_VAR 0 3
59332: ST_TO_ADDR
// vc_weapon := weapon ;
59333: LD_ADDR_OWVAR 40
59337: PUSH
59338: LD_VAR 0 4
59342: ST_TO_ADDR
// un := CreateVehicle ;
59343: LD_ADDR_VAR 0 8
59347: PUSH
59348: CALL_OW 45
59352: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59353: LD_VAR 0 8
59357: PPUSH
59358: LD_INT 0
59360: PPUSH
59361: LD_INT 5
59363: PPUSH
59364: CALL_OW 12
59368: PPUSH
59369: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59373: LD_VAR 0 8
59377: PPUSH
59378: LD_VAR 0 5
59382: PPUSH
59383: LD_VAR 0 6
59387: PPUSH
59388: LD_INT 1
59390: PPUSH
59391: CALL_OW 48
// end ;
59395: LD_VAR 0 7
59399: RET
// export hInvincible ; every 1 do
59400: GO 59402
59402: DISABLE
// hInvincible := [ ] ;
59403: LD_ADDR_EXP 72
59407: PUSH
59408: EMPTY
59409: ST_TO_ADDR
59410: END
// every 10 do var i ;
59411: GO 59413
59413: DISABLE
59414: LD_INT 0
59416: PPUSH
// begin enable ;
59417: ENABLE
// if not hInvincible then
59418: LD_EXP 72
59422: NOT
59423: IFFALSE 59427
// exit ;
59425: GO 59471
// for i in hInvincible do
59427: LD_ADDR_VAR 0 1
59431: PUSH
59432: LD_EXP 72
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59469
// if GetLives ( i ) < 1000 then
59440: LD_VAR 0 1
59444: PPUSH
59445: CALL_OW 256
59449: PUSH
59450: LD_INT 1000
59452: LESS
59453: IFFALSE 59467
// SetLives ( i , 1000 ) ;
59455: LD_VAR 0 1
59459: PPUSH
59460: LD_INT 1000
59462: PPUSH
59463: CALL_OW 234
59467: GO 59437
59469: POP
59470: POP
// end ;
59471: PPOPN 1
59473: END
// export function hHackInvincible ; var i ; begin
59474: LD_INT 0
59476: PPUSH
59477: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59478: LD_ADDR_VAR 0 2
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 21
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 21
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: PPUSH
59511: CALL_OW 69
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59578
// if IsSelected ( i ) then
59519: LD_VAR 0 2
59523: PPUSH
59524: CALL_OW 306
59528: IFFALSE 59576
// begin if i in hInvincible then
59530: LD_VAR 0 2
59534: PUSH
59535: LD_EXP 72
59539: IN
59540: IFFALSE 59560
// hInvincible := hInvincible diff i else
59542: LD_ADDR_EXP 72
59546: PUSH
59547: LD_EXP 72
59551: PUSH
59552: LD_VAR 0 2
59556: DIFF
59557: ST_TO_ADDR
59558: GO 59576
// hInvincible := hInvincible union i ;
59560: LD_ADDR_EXP 72
59564: PUSH
59565: LD_EXP 72
59569: PUSH
59570: LD_VAR 0 2
59574: UNION
59575: ST_TO_ADDR
// end ;
59576: GO 59516
59578: POP
59579: POP
// end ;
59580: LD_VAR 0 1
59584: RET
// export function hHackInvisible ; var i , j ; begin
59585: LD_INT 0
59587: PPUSH
59588: PPUSH
59589: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59590: LD_ADDR_VAR 0 2
59594: PUSH
59595: LD_INT 21
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PPUSH
59605: CALL_OW 69
59609: PUSH
59610: FOR_IN
59611: IFFALSE 59635
// if IsSelected ( i ) then
59613: LD_VAR 0 2
59617: PPUSH
59618: CALL_OW 306
59622: IFFALSE 59633
// ComForceInvisible ( i ) ;
59624: LD_VAR 0 2
59628: PPUSH
59629: CALL_OW 496
59633: GO 59610
59635: POP
59636: POP
// end ;
59637: LD_VAR 0 1
59641: RET
// export function hHackChangeYourSide ; begin
59642: LD_INT 0
59644: PPUSH
// if your_side = 8 then
59645: LD_OWVAR 2
59649: PUSH
59650: LD_INT 8
59652: EQUAL
59653: IFFALSE 59665
// your_side := 0 else
59655: LD_ADDR_OWVAR 2
59659: PUSH
59660: LD_INT 0
59662: ST_TO_ADDR
59663: GO 59679
// your_side := your_side + 1 ;
59665: LD_ADDR_OWVAR 2
59669: PUSH
59670: LD_OWVAR 2
59674: PUSH
59675: LD_INT 1
59677: PLUS
59678: ST_TO_ADDR
// end ;
59679: LD_VAR 0 1
59683: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59684: LD_INT 0
59686: PPUSH
59687: PPUSH
59688: PPUSH
// for i in all_units do
59689: LD_ADDR_VAR 0 2
59693: PUSH
59694: LD_OWVAR 3
59698: PUSH
59699: FOR_IN
59700: IFFALSE 59778
// if IsSelected ( i ) then
59702: LD_VAR 0 2
59706: PPUSH
59707: CALL_OW 306
59711: IFFALSE 59776
// begin j := GetSide ( i ) ;
59713: LD_ADDR_VAR 0 3
59717: PUSH
59718: LD_VAR 0 2
59722: PPUSH
59723: CALL_OW 255
59727: ST_TO_ADDR
// if j = 8 then
59728: LD_VAR 0 3
59732: PUSH
59733: LD_INT 8
59735: EQUAL
59736: IFFALSE 59748
// j := 0 else
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_INT 0
59745: ST_TO_ADDR
59746: GO 59762
// j := j + 1 ;
59748: LD_ADDR_VAR 0 3
59752: PUSH
59753: LD_VAR 0 3
59757: PUSH
59758: LD_INT 1
59760: PLUS
59761: ST_TO_ADDR
// SetSide ( i , j ) ;
59762: LD_VAR 0 2
59766: PPUSH
59767: LD_VAR 0 3
59771: PPUSH
59772: CALL_OW 235
// end ;
59776: GO 59699
59778: POP
59779: POP
// end ;
59780: LD_VAR 0 1
59784: RET
// export function hHackFog ; begin
59785: LD_INT 0
59787: PPUSH
// FogOff ( true ) ;
59788: LD_INT 1
59790: PPUSH
59791: CALL_OW 344
// end ;
59795: LD_VAR 0 1
59799: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59800: LD_INT 0
59802: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59803: LD_VAR 0 1
59807: PPUSH
59808: LD_VAR 0 2
59812: PPUSH
59813: LD_VAR 0 3
59817: PPUSH
59818: LD_INT 1
59820: PPUSH
59821: LD_INT 1
59823: PPUSH
59824: CALL_OW 483
// CenterOnXY ( x , y ) ;
59828: LD_VAR 0 2
59832: PPUSH
59833: LD_VAR 0 3
59837: PPUSH
59838: CALL_OW 84
// end ;
59842: LD_VAR 0 4
59846: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59851: LD_VAR 0 1
59855: NOT
59856: PUSH
59857: LD_VAR 0 2
59861: PPUSH
59862: LD_VAR 0 3
59866: PPUSH
59867: CALL_OW 488
59871: NOT
59872: OR
59873: PUSH
59874: LD_VAR 0 1
59878: PPUSH
59879: CALL_OW 266
59883: PUSH
59884: LD_INT 3
59886: NONEQUAL
59887: PUSH
59888: LD_VAR 0 1
59892: PPUSH
59893: CALL_OW 247
59897: PUSH
59898: LD_INT 1
59900: EQUAL
59901: NOT
59902: AND
59903: OR
59904: IFFALSE 59908
// exit ;
59906: GO 60057
// if GetType ( factory ) = unit_human then
59908: LD_VAR 0 1
59912: PPUSH
59913: CALL_OW 247
59917: PUSH
59918: LD_INT 1
59920: EQUAL
59921: IFFALSE 59938
// factory := IsInUnit ( factory ) ;
59923: LD_ADDR_VAR 0 1
59927: PUSH
59928: LD_VAR 0 1
59932: PPUSH
59933: CALL_OW 310
59937: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59938: LD_VAR 0 1
59942: PPUSH
59943: CALL_OW 266
59947: PUSH
59948: LD_INT 3
59950: NONEQUAL
59951: IFFALSE 59955
// exit ;
59953: GO 60057
// if HexInfo ( x , y ) = factory then
59955: LD_VAR 0 2
59959: PPUSH
59960: LD_VAR 0 3
59964: PPUSH
59965: CALL_OW 428
59969: PUSH
59970: LD_VAR 0 1
59974: EQUAL
59975: IFFALSE 60002
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59977: LD_ADDR_EXP 73
59981: PUSH
59982: LD_EXP 73
59986: PPUSH
59987: LD_VAR 0 1
59991: PPUSH
59992: LD_INT 0
59994: PPUSH
59995: CALL_OW 1
59999: ST_TO_ADDR
60000: GO 60053
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60002: LD_ADDR_EXP 73
60006: PUSH
60007: LD_EXP 73
60011: PPUSH
60012: LD_VAR 0 1
60016: PPUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: CALL_OW 255
60026: PUSH
60027: LD_VAR 0 1
60031: PUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_VAR 0 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: PPUSH
60048: CALL_OW 1
60052: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60053: CALL 60062 0 0
// end ;
60057: LD_VAR 0 4
60061: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60062: LD_INT 0
60064: PPUSH
60065: PPUSH
60066: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60067: LD_STRING resetFactoryWaypoint();
60069: PPUSH
60070: CALL_OW 559
// if factoryWaypoints then
60074: LD_EXP 73
60078: IFFALSE 60204
// begin list := PrepareArray ( factoryWaypoints ) ;
60080: LD_ADDR_VAR 0 3
60084: PUSH
60085: LD_EXP 73
60089: PPUSH
60090: CALL 42366 0 1
60094: ST_TO_ADDR
// for i := 1 to list do
60095: LD_ADDR_VAR 0 2
60099: PUSH
60100: DOUBLE
60101: LD_INT 1
60103: DEC
60104: ST_TO_ADDR
60105: LD_VAR 0 3
60109: PUSH
60110: FOR_TO
60111: IFFALSE 60202
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60113: LD_STRING setFactoryWaypointXY(
60115: PUSH
60116: LD_VAR 0 3
60120: PUSH
60121: LD_VAR 0 2
60125: ARRAY
60126: PUSH
60127: LD_INT 1
60129: ARRAY
60130: STR
60131: PUSH
60132: LD_STRING ,
60134: STR
60135: PUSH
60136: LD_VAR 0 3
60140: PUSH
60141: LD_VAR 0 2
60145: ARRAY
60146: PUSH
60147: LD_INT 2
60149: ARRAY
60150: STR
60151: PUSH
60152: LD_STRING ,
60154: STR
60155: PUSH
60156: LD_VAR 0 3
60160: PUSH
60161: LD_VAR 0 2
60165: ARRAY
60166: PUSH
60167: LD_INT 3
60169: ARRAY
60170: STR
60171: PUSH
60172: LD_STRING ,
60174: STR
60175: PUSH
60176: LD_VAR 0 3
60180: PUSH
60181: LD_VAR 0 2
60185: ARRAY
60186: PUSH
60187: LD_INT 4
60189: ARRAY
60190: STR
60191: PUSH
60192: LD_STRING )
60194: STR
60195: PPUSH
60196: CALL_OW 559
60200: GO 60110
60202: POP
60203: POP
// end ; end ;
60204: LD_VAR 0 1
60208: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60209: LD_INT 0
60211: PPUSH
// if HexInfo ( x , y ) = warehouse then
60212: LD_VAR 0 2
60216: PPUSH
60217: LD_VAR 0 3
60221: PPUSH
60222: CALL_OW 428
60226: PUSH
60227: LD_VAR 0 1
60231: EQUAL
60232: IFFALSE 60259
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60234: LD_ADDR_EXP 74
60238: PUSH
60239: LD_EXP 74
60243: PPUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: LD_INT 0
60251: PPUSH
60252: CALL_OW 1
60256: ST_TO_ADDR
60257: GO 60310
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60259: LD_ADDR_EXP 74
60263: PUSH
60264: LD_EXP 74
60268: PPUSH
60269: LD_VAR 0 1
60273: PPUSH
60274: LD_VAR 0 1
60278: PPUSH
60279: CALL_OW 255
60283: PUSH
60284: LD_VAR 0 1
60288: PUSH
60289: LD_VAR 0 2
60293: PUSH
60294: LD_VAR 0 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: PPUSH
60305: CALL_OW 1
60309: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60310: CALL 60319 0 0
// end ;
60314: LD_VAR 0 4
60318: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60319: LD_INT 0
60321: PPUSH
60322: PPUSH
60323: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60324: LD_STRING resetWarehouseGatheringPoints();
60326: PPUSH
60327: CALL_OW 559
// if warehouseGatheringPoints then
60331: LD_EXP 74
60335: IFFALSE 60461
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60337: LD_ADDR_VAR 0 3
60341: PUSH
60342: LD_EXP 74
60346: PPUSH
60347: CALL 42366 0 1
60351: ST_TO_ADDR
// for i := 1 to list do
60352: LD_ADDR_VAR 0 2
60356: PUSH
60357: DOUBLE
60358: LD_INT 1
60360: DEC
60361: ST_TO_ADDR
60362: LD_VAR 0 3
60366: PUSH
60367: FOR_TO
60368: IFFALSE 60459
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60370: LD_STRING setWarehouseGatheringPointXY(
60372: PUSH
60373: LD_VAR 0 3
60377: PUSH
60378: LD_VAR 0 2
60382: ARRAY
60383: PUSH
60384: LD_INT 1
60386: ARRAY
60387: STR
60388: PUSH
60389: LD_STRING ,
60391: STR
60392: PUSH
60393: LD_VAR 0 3
60397: PUSH
60398: LD_VAR 0 2
60402: ARRAY
60403: PUSH
60404: LD_INT 2
60406: ARRAY
60407: STR
60408: PUSH
60409: LD_STRING ,
60411: STR
60412: PUSH
60413: LD_VAR 0 3
60417: PUSH
60418: LD_VAR 0 2
60422: ARRAY
60423: PUSH
60424: LD_INT 3
60426: ARRAY
60427: STR
60428: PUSH
60429: LD_STRING ,
60431: STR
60432: PUSH
60433: LD_VAR 0 3
60437: PUSH
60438: LD_VAR 0 2
60442: ARRAY
60443: PUSH
60444: LD_INT 4
60446: ARRAY
60447: STR
60448: PUSH
60449: LD_STRING )
60451: STR
60452: PPUSH
60453: CALL_OW 559
60457: GO 60367
60459: POP
60460: POP
// end ; end ;
60461: LD_VAR 0 1
60465: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60466: LD_EXP 74
60470: IFFALSE 61155
60472: GO 60474
60474: DISABLE
60475: LD_INT 0
60477: PPUSH
60478: PPUSH
60479: PPUSH
60480: PPUSH
60481: PPUSH
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
// begin enable ;
60486: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60487: LD_ADDR_VAR 0 3
60491: PUSH
60492: LD_EXP 74
60496: PPUSH
60497: CALL 42366 0 1
60501: ST_TO_ADDR
// if not list then
60502: LD_VAR 0 3
60506: NOT
60507: IFFALSE 60511
// exit ;
60509: GO 61155
// for i := 1 to list do
60511: LD_ADDR_VAR 0 1
60515: PUSH
60516: DOUBLE
60517: LD_INT 1
60519: DEC
60520: ST_TO_ADDR
60521: LD_VAR 0 3
60525: PUSH
60526: FOR_TO
60527: IFFALSE 61153
// begin depot := list [ i ] [ 2 ] ;
60529: LD_ADDR_VAR 0 8
60533: PUSH
60534: LD_VAR 0 3
60538: PUSH
60539: LD_VAR 0 1
60543: ARRAY
60544: PUSH
60545: LD_INT 2
60547: ARRAY
60548: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60549: LD_ADDR_VAR 0 5
60553: PUSH
60554: LD_VAR 0 3
60558: PUSH
60559: LD_VAR 0 1
60563: ARRAY
60564: PUSH
60565: LD_INT 1
60567: ARRAY
60568: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60569: LD_VAR 0 8
60573: PPUSH
60574: CALL_OW 301
60578: PUSH
60579: LD_VAR 0 5
60583: PUSH
60584: LD_VAR 0 8
60588: PPUSH
60589: CALL_OW 255
60593: NONEQUAL
60594: OR
60595: IFFALSE 60624
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60597: LD_ADDR_EXP 74
60601: PUSH
60602: LD_EXP 74
60606: PPUSH
60607: LD_VAR 0 8
60611: PPUSH
60612: LD_INT 0
60614: PPUSH
60615: CALL_OW 1
60619: ST_TO_ADDR
// exit ;
60620: POP
60621: POP
60622: GO 61155
// end ; x := list [ i ] [ 3 ] ;
60624: LD_ADDR_VAR 0 6
60628: PUSH
60629: LD_VAR 0 3
60633: PUSH
60634: LD_VAR 0 1
60638: ARRAY
60639: PUSH
60640: LD_INT 3
60642: ARRAY
60643: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60644: LD_ADDR_VAR 0 7
60648: PUSH
60649: LD_VAR 0 3
60653: PUSH
60654: LD_VAR 0 1
60658: ARRAY
60659: PUSH
60660: LD_INT 4
60662: ARRAY
60663: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60664: LD_ADDR_VAR 0 9
60668: PUSH
60669: LD_VAR 0 6
60673: PPUSH
60674: LD_VAR 0 7
60678: PPUSH
60679: LD_INT 16
60681: PPUSH
60682: CALL 40954 0 3
60686: ST_TO_ADDR
// if not cratesNearbyPoint then
60687: LD_VAR 0 9
60691: NOT
60692: IFFALSE 60698
// exit ;
60694: POP
60695: POP
60696: GO 61155
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60698: LD_ADDR_VAR 0 4
60702: PUSH
60703: LD_INT 22
60705: PUSH
60706: LD_VAR 0 5
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 60
60720: PUSH
60721: EMPTY
60722: LIST
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 91
60730: PUSH
60731: LD_VAR 0 8
60735: PUSH
60736: LD_INT 6
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 25
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 25
60759: PUSH
60760: LD_INT 16
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: PPUSH
60778: CALL_OW 69
60782: PUSH
60783: LD_VAR 0 8
60787: PPUSH
60788: CALL_OW 313
60792: PPUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 60
60798: PUSH
60799: EMPTY
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 25
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 25
60821: PUSH
60822: LD_INT 16
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PPUSH
60838: CALL_OW 72
60842: UNION
60843: ST_TO_ADDR
// if tmp then
60844: LD_VAR 0 4
60848: IFFALSE 60928
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60850: LD_ADDR_VAR 0 4
60854: PUSH
60855: LD_VAR 0 4
60859: PPUSH
60860: LD_INT 3
60862: PPUSH
60863: CALL 38923 0 2
60867: ST_TO_ADDR
// for j in tmp do
60868: LD_ADDR_VAR 0 2
60872: PUSH
60873: LD_VAR 0 4
60877: PUSH
60878: FOR_IN
60879: IFFALSE 60922
// begin if IsInUnit ( j ) then
60881: LD_VAR 0 2
60885: PPUSH
60886: CALL_OW 310
60890: IFFALSE 60901
// ComExit ( j ) ;
60892: LD_VAR 0 2
60896: PPUSH
60897: CALL 39006 0 1
// AddComCollect ( j , x , y ) ;
60901: LD_VAR 0 2
60905: PPUSH
60906: LD_VAR 0 6
60910: PPUSH
60911: LD_VAR 0 7
60915: PPUSH
60916: CALL_OW 177
// end ;
60920: GO 60878
60922: POP
60923: POP
// exit ;
60924: POP
60925: POP
60926: GO 61155
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60928: LD_ADDR_VAR 0 4
60932: PUSH
60933: LD_INT 22
60935: PUSH
60936: LD_VAR 0 5
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 91
60947: PUSH
60948: LD_VAR 0 8
60952: PUSH
60953: LD_INT 8
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 34
60966: PUSH
60967: LD_INT 12
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 34
60976: PUSH
60977: LD_INT 51
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 34
60986: PUSH
60987: LD_INT 32
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 34
60996: PUSH
60997: LD_INT 89
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: LIST
61015: PPUSH
61016: CALL_OW 69
61020: ST_TO_ADDR
// if tmp then
61021: LD_VAR 0 4
61025: IFFALSE 61151
// begin for j in tmp do
61027: LD_ADDR_VAR 0 2
61031: PUSH
61032: LD_VAR 0 4
61036: PUSH
61037: FOR_IN
61038: IFFALSE 61149
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61040: LD_VAR 0 2
61044: PPUSH
61045: CALL_OW 262
61049: PUSH
61050: LD_INT 3
61052: EQUAL
61053: PUSH
61054: LD_VAR 0 2
61058: PPUSH
61059: CALL_OW 261
61063: PUSH
61064: LD_INT 20
61066: GREATER
61067: OR
61068: PUSH
61069: LD_VAR 0 2
61073: PPUSH
61074: CALL_OW 314
61078: NOT
61079: AND
61080: PUSH
61081: LD_VAR 0 2
61085: PPUSH
61086: CALL_OW 263
61090: PUSH
61091: LD_INT 1
61093: NONEQUAL
61094: PUSH
61095: LD_VAR 0 2
61099: PPUSH
61100: CALL_OW 311
61104: OR
61105: AND
61106: IFFALSE 61147
// begin ComCollect ( j , x , y ) ;
61108: LD_VAR 0 2
61112: PPUSH
61113: LD_VAR 0 6
61117: PPUSH
61118: LD_VAR 0 7
61122: PPUSH
61123: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61127: LD_VAR 0 2
61131: PPUSH
61132: LD_VAR 0 8
61136: PPUSH
61137: CALL_OW 172
// exit ;
61141: POP
61142: POP
61143: POP
61144: POP
61145: GO 61155
// end ;
61147: GO 61037
61149: POP
61150: POP
// end ; end ;
61151: GO 60526
61153: POP
61154: POP
// end ; end_of_file end_of_file
61155: PPOPN 9
61157: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61158: LD_INT 0
61160: PPUSH
61161: PPUSH
61162: PPUSH
61163: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61164: LD_VAR 0 1
61168: PPUSH
61169: CALL_OW 264
61173: PUSH
61174: LD_INT 91
61176: EQUAL
61177: IFFALSE 61249
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61179: LD_INT 68
61181: PPUSH
61182: LD_VAR 0 1
61186: PPUSH
61187: CALL_OW 255
61191: PPUSH
61192: CALL_OW 321
61196: PUSH
61197: LD_INT 2
61199: EQUAL
61200: IFFALSE 61212
// eff := 70 else
61202: LD_ADDR_VAR 0 4
61206: PUSH
61207: LD_INT 70
61209: ST_TO_ADDR
61210: GO 61220
// eff := 30 ;
61212: LD_ADDR_VAR 0 4
61216: PUSH
61217: LD_INT 30
61219: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 250
61229: PPUSH
61230: LD_VAR 0 1
61234: PPUSH
61235: CALL_OW 251
61239: PPUSH
61240: LD_VAR 0 4
61244: PPUSH
61245: CALL_OW 495
// end ; end ;
61249: LD_VAR 0 2
61253: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61254: LD_INT 0
61256: PPUSH
// end ;
61257: LD_VAR 0 4
61261: RET
// export function SOS_Command ( cmd ) ; begin
61262: LD_INT 0
61264: PPUSH
// end ;
61265: LD_VAR 0 2
61269: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61270: LD_INT 0
61272: PPUSH
// end ;
61273: LD_VAR 0 6
61277: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61278: LD_INT 0
61280: PPUSH
61281: PPUSH
// if not vehicle or not factory then
61282: LD_VAR 0 1
61286: NOT
61287: PUSH
61288: LD_VAR 0 2
61292: NOT
61293: OR
61294: IFFALSE 61298
// exit ;
61296: GO 61529
// if factoryWaypoints >= factory then
61298: LD_EXP 73
61302: PUSH
61303: LD_VAR 0 2
61307: GREATEREQUAL
61308: IFFALSE 61529
// if factoryWaypoints [ factory ] then
61310: LD_EXP 73
61314: PUSH
61315: LD_VAR 0 2
61319: ARRAY
61320: IFFALSE 61529
// begin if GetControl ( vehicle ) = control_manual then
61322: LD_VAR 0 1
61326: PPUSH
61327: CALL_OW 263
61331: PUSH
61332: LD_INT 1
61334: EQUAL
61335: IFFALSE 61416
// begin driver := IsDrivenBy ( vehicle ) ;
61337: LD_ADDR_VAR 0 4
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 311
61351: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61352: LD_VAR 0 4
61356: PPUSH
61357: LD_EXP 73
61361: PUSH
61362: LD_VAR 0 2
61366: ARRAY
61367: PUSH
61368: LD_INT 3
61370: ARRAY
61371: PPUSH
61372: LD_EXP 73
61376: PUSH
61377: LD_VAR 0 2
61381: ARRAY
61382: PUSH
61383: LD_INT 4
61385: ARRAY
61386: PPUSH
61387: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61391: LD_VAR 0 4
61395: PPUSH
61396: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61400: LD_VAR 0 4
61404: PPUSH
61405: LD_VAR 0 2
61409: PPUSH
61410: CALL_OW 180
// end else
61414: GO 61529
// if GetControl ( vehicle ) = control_remote then
61416: LD_VAR 0 1
61420: PPUSH
61421: CALL_OW 263
61425: PUSH
61426: LD_INT 2
61428: EQUAL
61429: IFFALSE 61490
// begin wait ( 0 0$2 ) ;
61431: LD_INT 70
61433: PPUSH
61434: CALL_OW 67
// if Connect ( vehicle ) then
61438: LD_VAR 0 1
61442: PPUSH
61443: CALL 9246 0 1
61447: IFFALSE 61488
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61449: LD_VAR 0 1
61453: PPUSH
61454: LD_EXP 73
61458: PUSH
61459: LD_VAR 0 2
61463: ARRAY
61464: PUSH
61465: LD_INT 3
61467: ARRAY
61468: PPUSH
61469: LD_EXP 73
61473: PUSH
61474: LD_VAR 0 2
61478: ARRAY
61479: PUSH
61480: LD_INT 4
61482: ARRAY
61483: PPUSH
61484: CALL_OW 171
// end else
61488: GO 61529
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61490: LD_VAR 0 1
61494: PPUSH
61495: LD_EXP 73
61499: PUSH
61500: LD_VAR 0 2
61504: ARRAY
61505: PUSH
61506: LD_INT 3
61508: ARRAY
61509: PPUSH
61510: LD_EXP 73
61514: PUSH
61515: LD_VAR 0 2
61519: ARRAY
61520: PUSH
61521: LD_INT 4
61523: ARRAY
61524: PPUSH
61525: CALL_OW 171
// end ; end ;
61529: LD_VAR 0 3
61533: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61534: LD_INT 0
61536: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61537: LD_VAR 0 1
61541: PUSH
61542: LD_INT 250
61544: EQUAL
61545: PUSH
61546: LD_VAR 0 2
61550: PPUSH
61551: CALL_OW 264
61555: PUSH
61556: LD_INT 81
61558: EQUAL
61559: AND
61560: IFFALSE 61581
// MinerPlaceMine ( unit , x , y ) ;
61562: LD_VAR 0 2
61566: PPUSH
61567: LD_VAR 0 4
61571: PPUSH
61572: LD_VAR 0 5
61576: PPUSH
61577: CALL 63966 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61581: LD_VAR 0 1
61585: PUSH
61586: LD_INT 251
61588: EQUAL
61589: PUSH
61590: LD_VAR 0 2
61594: PPUSH
61595: CALL_OW 264
61599: PUSH
61600: LD_INT 81
61602: EQUAL
61603: AND
61604: IFFALSE 61625
// MinerDetonateMine ( unit , x , y ) ;
61606: LD_VAR 0 2
61610: PPUSH
61611: LD_VAR 0 4
61615: PPUSH
61616: LD_VAR 0 5
61620: PPUSH
61621: CALL 64241 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61625: LD_VAR 0 1
61629: PUSH
61630: LD_INT 252
61632: EQUAL
61633: PUSH
61634: LD_VAR 0 2
61638: PPUSH
61639: CALL_OW 264
61643: PUSH
61644: LD_INT 81
61646: EQUAL
61647: AND
61648: IFFALSE 61669
// MinerCreateMinefield ( unit , x , y ) ;
61650: LD_VAR 0 2
61654: PPUSH
61655: LD_VAR 0 4
61659: PPUSH
61660: LD_VAR 0 5
61664: PPUSH
61665: CALL 64658 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61669: LD_VAR 0 1
61673: PUSH
61674: LD_INT 253
61676: EQUAL
61677: PUSH
61678: LD_VAR 0 2
61682: PPUSH
61683: CALL_OW 257
61687: PUSH
61688: LD_INT 5
61690: EQUAL
61691: AND
61692: IFFALSE 61713
// ComBinocular ( unit , x , y ) ;
61694: LD_VAR 0 2
61698: PPUSH
61699: LD_VAR 0 4
61703: PPUSH
61704: LD_VAR 0 5
61708: PPUSH
61709: CALL 65027 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61713: LD_VAR 0 1
61717: PUSH
61718: LD_INT 254
61720: EQUAL
61721: PUSH
61722: LD_VAR 0 2
61726: PPUSH
61727: CALL_OW 264
61731: PUSH
61732: LD_INT 99
61734: EQUAL
61735: AND
61736: PUSH
61737: LD_VAR 0 3
61741: PPUSH
61742: CALL_OW 263
61746: PUSH
61747: LD_INT 3
61749: EQUAL
61750: AND
61751: IFFALSE 61767
// HackDestroyVehicle ( unit , selectedUnit ) ;
61753: LD_VAR 0 2
61757: PPUSH
61758: LD_VAR 0 3
61762: PPUSH
61763: CALL 63330 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61767: LD_VAR 0 1
61771: PUSH
61772: LD_INT 255
61774: EQUAL
61775: PUSH
61776: LD_VAR 0 2
61780: PPUSH
61781: CALL_OW 264
61785: PUSH
61786: LD_INT 14
61788: PUSH
61789: LD_INT 53
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: IN
61796: AND
61797: PUSH
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 5
61807: PPUSH
61808: CALL_OW 488
61812: AND
61813: IFFALSE 61837
// CutTreeXYR ( unit , x , y , 12 ) ;
61815: LD_VAR 0 2
61819: PPUSH
61820: LD_VAR 0 4
61824: PPUSH
61825: LD_VAR 0 5
61829: PPUSH
61830: LD_INT 12
61832: PPUSH
61833: CALL 61900 0 4
// if cmd = 256 then
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 256
61844: EQUAL
61845: IFFALSE 61866
// SetFactoryWaypoint ( unit , x , y ) ;
61847: LD_VAR 0 2
61851: PPUSH
61852: LD_VAR 0 4
61856: PPUSH
61857: LD_VAR 0 5
61861: PPUSH
61862: CALL 59847 0 3
// if cmd = 257 then
61866: LD_VAR 0 1
61870: PUSH
61871: LD_INT 257
61873: EQUAL
61874: IFFALSE 61895
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61876: LD_VAR 0 2
61880: PPUSH
61881: LD_VAR 0 4
61885: PPUSH
61886: LD_VAR 0 5
61890: PPUSH
61891: CALL 60209 0 3
// end ;
61895: LD_VAR 0 6
61899: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
61904: PPUSH
61905: PPUSH
61906: PPUSH
61907: PPUSH
61908: PPUSH
61909: PPUSH
61910: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61911: LD_VAR 0 1
61915: NOT
61916: PUSH
61917: LD_VAR 0 2
61921: PPUSH
61922: LD_VAR 0 3
61926: PPUSH
61927: CALL_OW 488
61931: NOT
61932: OR
61933: PUSH
61934: LD_VAR 0 4
61938: NOT
61939: OR
61940: IFFALSE 61944
// exit ;
61942: GO 62284
// list := [ ] ;
61944: LD_ADDR_VAR 0 13
61948: PUSH
61949: EMPTY
61950: ST_TO_ADDR
// if x - r < 0 then
61951: LD_VAR 0 2
61955: PUSH
61956: LD_VAR 0 4
61960: MINUS
61961: PUSH
61962: LD_INT 0
61964: LESS
61965: IFFALSE 61977
// min_x := 0 else
61967: LD_ADDR_VAR 0 7
61971: PUSH
61972: LD_INT 0
61974: ST_TO_ADDR
61975: GO 61993
// min_x := x - r ;
61977: LD_ADDR_VAR 0 7
61981: PUSH
61982: LD_VAR 0 2
61986: PUSH
61987: LD_VAR 0 4
61991: MINUS
61992: ST_TO_ADDR
// if y - r < 0 then
61993: LD_VAR 0 3
61997: PUSH
61998: LD_VAR 0 4
62002: MINUS
62003: PUSH
62004: LD_INT 0
62006: LESS
62007: IFFALSE 62019
// min_y := 0 else
62009: LD_ADDR_VAR 0 8
62013: PUSH
62014: LD_INT 0
62016: ST_TO_ADDR
62017: GO 62035
// min_y := y - r ;
62019: LD_ADDR_VAR 0 8
62023: PUSH
62024: LD_VAR 0 3
62028: PUSH
62029: LD_VAR 0 4
62033: MINUS
62034: ST_TO_ADDR
// max_x := x + r ;
62035: LD_ADDR_VAR 0 9
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_VAR 0 4
62049: PLUS
62050: ST_TO_ADDR
// max_y := y + r ;
62051: LD_ADDR_VAR 0 10
62055: PUSH
62056: LD_VAR 0 3
62060: PUSH
62061: LD_VAR 0 4
62065: PLUS
62066: ST_TO_ADDR
// for _x = min_x to max_x do
62067: LD_ADDR_VAR 0 11
62071: PUSH
62072: DOUBLE
62073: LD_VAR 0 7
62077: DEC
62078: ST_TO_ADDR
62079: LD_VAR 0 9
62083: PUSH
62084: FOR_TO
62085: IFFALSE 62202
// for _y = min_y to max_y do
62087: LD_ADDR_VAR 0 12
62091: PUSH
62092: DOUBLE
62093: LD_VAR 0 8
62097: DEC
62098: ST_TO_ADDR
62099: LD_VAR 0 10
62103: PUSH
62104: FOR_TO
62105: IFFALSE 62198
// begin if not ValidHex ( _x , _y ) then
62107: LD_VAR 0 11
62111: PPUSH
62112: LD_VAR 0 12
62116: PPUSH
62117: CALL_OW 488
62121: NOT
62122: IFFALSE 62126
// continue ;
62124: GO 62104
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62126: LD_VAR 0 11
62130: PPUSH
62131: LD_VAR 0 12
62135: PPUSH
62136: CALL_OW 351
62140: PUSH
62141: LD_VAR 0 11
62145: PPUSH
62146: LD_VAR 0 12
62150: PPUSH
62151: CALL_OW 554
62155: AND
62156: IFFALSE 62196
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62158: LD_ADDR_VAR 0 13
62162: PUSH
62163: LD_VAR 0 13
62167: PPUSH
62168: LD_VAR 0 13
62172: PUSH
62173: LD_INT 1
62175: PLUS
62176: PPUSH
62177: LD_VAR 0 11
62181: PUSH
62182: LD_VAR 0 12
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 2
62195: ST_TO_ADDR
// end ;
62196: GO 62104
62198: POP
62199: POP
62200: GO 62084
62202: POP
62203: POP
// if not list then
62204: LD_VAR 0 13
62208: NOT
62209: IFFALSE 62213
// exit ;
62211: GO 62284
// for i in list do
62213: LD_ADDR_VAR 0 6
62217: PUSH
62218: LD_VAR 0 13
62222: PUSH
62223: FOR_IN
62224: IFFALSE 62282
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_STRING M
62233: PUSH
62234: LD_VAR 0 6
62238: PUSH
62239: LD_INT 1
62241: ARRAY
62242: PUSH
62243: LD_VAR 0 6
62247: PUSH
62248: LD_INT 2
62250: ARRAY
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: PUSH
62273: EMPTY
62274: LIST
62275: PPUSH
62276: CALL_OW 447
62280: GO 62223
62282: POP
62283: POP
// end ;
62284: LD_VAR 0 5
62288: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62289: LD_EXP 76
62293: NOT
62294: IFFALSE 62344
62296: GO 62298
62298: DISABLE
// begin initHack := true ;
62299: LD_ADDR_EXP 76
62303: PUSH
62304: LD_INT 1
62306: ST_TO_ADDR
// hackTanks := [ ] ;
62307: LD_ADDR_EXP 77
62311: PUSH
62312: EMPTY
62313: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62314: LD_ADDR_EXP 78
62318: PUSH
62319: EMPTY
62320: ST_TO_ADDR
// hackLimit := 3 ;
62321: LD_ADDR_EXP 79
62325: PUSH
62326: LD_INT 3
62328: ST_TO_ADDR
// hackDist := 12 ;
62329: LD_ADDR_EXP 80
62333: PUSH
62334: LD_INT 12
62336: ST_TO_ADDR
// hackCounter := [ ] ;
62337: LD_ADDR_EXP 81
62341: PUSH
62342: EMPTY
62343: ST_TO_ADDR
// end ;
62344: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62345: LD_EXP 76
62349: PUSH
62350: LD_INT 34
62352: PUSH
62353: LD_INT 99
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PPUSH
62360: CALL_OW 69
62364: AND
62365: IFFALSE 62618
62367: GO 62369
62369: DISABLE
62370: LD_INT 0
62372: PPUSH
62373: PPUSH
// begin enable ;
62374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62375: LD_ADDR_VAR 0 1
62379: PUSH
62380: LD_INT 34
62382: PUSH
62383: LD_INT 99
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PPUSH
62390: CALL_OW 69
62394: PUSH
62395: FOR_IN
62396: IFFALSE 62616
// begin if not i in hackTanks then
62398: LD_VAR 0 1
62402: PUSH
62403: LD_EXP 77
62407: IN
62408: NOT
62409: IFFALSE 62492
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62411: LD_ADDR_EXP 77
62415: PUSH
62416: LD_EXP 77
62420: PPUSH
62421: LD_EXP 77
62425: PUSH
62426: LD_INT 1
62428: PLUS
62429: PPUSH
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 1
62439: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62440: LD_ADDR_EXP 78
62444: PUSH
62445: LD_EXP 78
62449: PPUSH
62450: LD_EXP 78
62454: PUSH
62455: LD_INT 1
62457: PLUS
62458: PPUSH
62459: EMPTY
62460: PPUSH
62461: CALL_OW 1
62465: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62466: LD_ADDR_EXP 81
62470: PUSH
62471: LD_EXP 81
62475: PPUSH
62476: LD_EXP 81
62480: PUSH
62481: LD_INT 1
62483: PLUS
62484: PPUSH
62485: EMPTY
62486: PPUSH
62487: CALL_OW 1
62491: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62492: LD_VAR 0 1
62496: PPUSH
62497: CALL_OW 302
62501: NOT
62502: IFFALSE 62515
// begin HackUnlinkAll ( i ) ;
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL 62621 0 1
// continue ;
62513: GO 62395
// end ; HackCheckCapturedStatus ( i ) ;
62515: LD_VAR 0 1
62519: PPUSH
62520: CALL 63064 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_INT 81
62531: PUSH
62532: LD_VAR 0 1
62536: PPUSH
62537: CALL_OW 255
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 33
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 91
62558: PUSH
62559: LD_VAR 0 1
62563: PUSH
62564: LD_EXP 80
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 50
62576: PUSH
62577: EMPTY
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: PPUSH
62586: CALL_OW 69
62590: ST_TO_ADDR
// if not tmp then
62591: LD_VAR 0 2
62595: NOT
62596: IFFALSE 62600
// continue ;
62598: GO 62395
// HackLink ( i , tmp ) ;
62600: LD_VAR 0 1
62604: PPUSH
62605: LD_VAR 0 2
62609: PPUSH
62610: CALL 62757 0 2
// end ;
62614: GO 62395
62616: POP
62617: POP
// end ;
62618: PPOPN 2
62620: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
// if not hack in hackTanks then
62626: LD_VAR 0 1
62630: PUSH
62631: LD_EXP 77
62635: IN
62636: NOT
62637: IFFALSE 62641
// exit ;
62639: GO 62752
// index := GetElementIndex ( hackTanks , hack ) ;
62641: LD_ADDR_VAR 0 4
62645: PUSH
62646: LD_EXP 77
62650: PPUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: CALL 6062 0 2
62660: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62661: LD_EXP 78
62665: PUSH
62666: LD_VAR 0 4
62670: ARRAY
62671: IFFALSE 62752
// begin for i in hackTanksCaptured [ index ] do
62673: LD_ADDR_VAR 0 3
62677: PUSH
62678: LD_EXP 78
62682: PUSH
62683: LD_VAR 0 4
62687: ARRAY
62688: PUSH
62689: FOR_IN
62690: IFFALSE 62716
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62692: LD_VAR 0 3
62696: PUSH
62697: LD_INT 1
62699: ARRAY
62700: PPUSH
62701: LD_VAR 0 3
62705: PUSH
62706: LD_INT 2
62708: ARRAY
62709: PPUSH
62710: CALL_OW 235
62714: GO 62689
62716: POP
62717: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62718: LD_ADDR_EXP 78
62722: PUSH
62723: LD_EXP 78
62727: PPUSH
62728: LD_VAR 0 4
62732: PPUSH
62733: EMPTY
62734: PPUSH
62735: CALL_OW 1
62739: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62740: LD_VAR 0 1
62744: PPUSH
62745: LD_INT 0
62747: PPUSH
62748: CALL_OW 505
// end ; end ;
62752: LD_VAR 0 2
62756: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62757: LD_INT 0
62759: PPUSH
62760: PPUSH
62761: PPUSH
// if not hack in hackTanks or not vehicles then
62762: LD_VAR 0 1
62766: PUSH
62767: LD_EXP 77
62771: IN
62772: NOT
62773: PUSH
62774: LD_VAR 0 2
62778: NOT
62779: OR
62780: IFFALSE 62784
// exit ;
62782: GO 63059
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62784: LD_ADDR_VAR 0 2
62788: PUSH
62789: LD_VAR 0 1
62793: PPUSH
62794: LD_VAR 0 2
62798: PPUSH
62799: LD_INT 1
62801: PPUSH
62802: LD_INT 1
62804: PPUSH
62805: CALL 6712 0 4
62809: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62810: LD_ADDR_VAR 0 5
62814: PUSH
62815: LD_EXP 77
62819: PPUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL 6062 0 2
62829: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62830: LD_EXP 78
62834: PUSH
62835: LD_VAR 0 5
62839: ARRAY
62840: PUSH
62841: LD_EXP 79
62845: LESS
62846: IFFALSE 63035
// begin for i := 1 to vehicles do
62848: LD_ADDR_VAR 0 4
62852: PUSH
62853: DOUBLE
62854: LD_INT 1
62856: DEC
62857: ST_TO_ADDR
62858: LD_VAR 0 2
62862: PUSH
62863: FOR_TO
62864: IFFALSE 63033
// begin if hackTanksCaptured [ index ] = hackLimit then
62866: LD_EXP 78
62870: PUSH
62871: LD_VAR 0 5
62875: ARRAY
62876: PUSH
62877: LD_EXP 79
62881: EQUAL
62882: IFFALSE 62886
// break ;
62884: GO 63033
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62886: LD_ADDR_EXP 81
62890: PUSH
62891: LD_EXP 81
62895: PPUSH
62896: LD_VAR 0 5
62900: PPUSH
62901: LD_EXP 81
62905: PUSH
62906: LD_VAR 0 5
62910: ARRAY
62911: PUSH
62912: LD_INT 1
62914: PLUS
62915: PPUSH
62916: CALL_OW 1
62920: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62921: LD_ADDR_EXP 78
62925: PUSH
62926: LD_EXP 78
62930: PPUSH
62931: LD_VAR 0 5
62935: PUSH
62936: LD_EXP 78
62940: PUSH
62941: LD_VAR 0 5
62945: ARRAY
62946: PUSH
62947: LD_INT 1
62949: PLUS
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PPUSH
62955: LD_VAR 0 2
62959: PUSH
62960: LD_VAR 0 4
62964: ARRAY
62965: PUSH
62966: LD_VAR 0 2
62970: PUSH
62971: LD_VAR 0 4
62975: ARRAY
62976: PPUSH
62977: CALL_OW 255
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PPUSH
62986: CALL 6277 0 3
62990: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62991: LD_VAR 0 2
62995: PUSH
62996: LD_VAR 0 4
63000: ARRAY
63001: PPUSH
63002: LD_VAR 0 1
63006: PPUSH
63007: CALL_OW 255
63011: PPUSH
63012: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63016: LD_VAR 0 2
63020: PUSH
63021: LD_VAR 0 4
63025: ARRAY
63026: PPUSH
63027: CALL_OW 141
// end ;
63031: GO 62863
63033: POP
63034: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_EXP 78
63044: PUSH
63045: LD_VAR 0 5
63049: ARRAY
63050: PUSH
63051: LD_INT 0
63053: PLUS
63054: PPUSH
63055: CALL_OW 505
// end ;
63059: LD_VAR 0 3
63063: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63064: LD_INT 0
63066: PPUSH
63067: PPUSH
63068: PPUSH
63069: PPUSH
// if not hack in hackTanks then
63070: LD_VAR 0 1
63074: PUSH
63075: LD_EXP 77
63079: IN
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63325
// index := GetElementIndex ( hackTanks , hack ) ;
63085: LD_ADDR_VAR 0 4
63089: PUSH
63090: LD_EXP 77
63094: PPUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL 6062 0 2
63104: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63105: LD_ADDR_VAR 0 3
63109: PUSH
63110: DOUBLE
63111: LD_EXP 78
63115: PUSH
63116: LD_VAR 0 4
63120: ARRAY
63121: INC
63122: ST_TO_ADDR
63123: LD_INT 1
63125: PUSH
63126: FOR_DOWNTO
63127: IFFALSE 63299
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63129: LD_ADDR_VAR 0 5
63133: PUSH
63134: LD_EXP 78
63138: PUSH
63139: LD_VAR 0 4
63143: ARRAY
63144: PUSH
63145: LD_VAR 0 3
63149: ARRAY
63150: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63151: LD_VAR 0 5
63155: PUSH
63156: LD_INT 1
63158: ARRAY
63159: PPUSH
63160: CALL_OW 302
63164: NOT
63165: PUSH
63166: LD_VAR 0 5
63170: PUSH
63171: LD_INT 1
63173: ARRAY
63174: PPUSH
63175: CALL_OW 255
63179: PUSH
63180: LD_VAR 0 1
63184: PPUSH
63185: CALL_OW 255
63189: NONEQUAL
63190: OR
63191: IFFALSE 63297
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63193: LD_VAR 0 5
63197: PUSH
63198: LD_INT 1
63200: ARRAY
63201: PPUSH
63202: CALL_OW 305
63206: PUSH
63207: LD_VAR 0 5
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PPUSH
63216: CALL_OW 255
63220: PUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 255
63230: EQUAL
63231: AND
63232: IFFALSE 63256
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63234: LD_VAR 0 5
63238: PUSH
63239: LD_INT 1
63241: ARRAY
63242: PPUSH
63243: LD_VAR 0 5
63247: PUSH
63248: LD_INT 2
63250: ARRAY
63251: PPUSH
63252: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63256: LD_ADDR_EXP 78
63260: PUSH
63261: LD_EXP 78
63265: PPUSH
63266: LD_VAR 0 4
63270: PPUSH
63271: LD_EXP 78
63275: PUSH
63276: LD_VAR 0 4
63280: ARRAY
63281: PPUSH
63282: LD_VAR 0 3
63286: PPUSH
63287: CALL_OW 3
63291: PPUSH
63292: CALL_OW 1
63296: ST_TO_ADDR
// end ; end ;
63297: GO 63126
63299: POP
63300: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63301: LD_VAR 0 1
63305: PPUSH
63306: LD_EXP 78
63310: PUSH
63311: LD_VAR 0 4
63315: ARRAY
63316: PUSH
63317: LD_INT 0
63319: PLUS
63320: PPUSH
63321: CALL_OW 505
// end ;
63325: LD_VAR 0 2
63329: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63330: LD_INT 0
63332: PPUSH
63333: PPUSH
63334: PPUSH
63335: PPUSH
// if not hack in hackTanks then
63336: LD_VAR 0 1
63340: PUSH
63341: LD_EXP 77
63345: IN
63346: NOT
63347: IFFALSE 63351
// exit ;
63349: GO 63436
// index := GetElementIndex ( hackTanks , hack ) ;
63351: LD_ADDR_VAR 0 5
63355: PUSH
63356: LD_EXP 77
63360: PPUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL 6062 0 2
63370: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63371: LD_ADDR_VAR 0 4
63375: PUSH
63376: DOUBLE
63377: LD_INT 1
63379: DEC
63380: ST_TO_ADDR
63381: LD_EXP 78
63385: PUSH
63386: LD_VAR 0 5
63390: ARRAY
63391: PUSH
63392: FOR_TO
63393: IFFALSE 63434
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63395: LD_EXP 78
63399: PUSH
63400: LD_VAR 0 5
63404: ARRAY
63405: PUSH
63406: LD_VAR 0 4
63410: ARRAY
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PUSH
63416: LD_VAR 0 2
63420: EQUAL
63421: IFFALSE 63432
// KillUnit ( vehicle ) ;
63423: LD_VAR 0 2
63427: PPUSH
63428: CALL_OW 66
63432: GO 63392
63434: POP
63435: POP
// end ;
63436: LD_VAR 0 3
63440: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63441: LD_EXP 82
63445: NOT
63446: IFFALSE 63481
63448: GO 63450
63450: DISABLE
// begin initMiner := true ;
63451: LD_ADDR_EXP 82
63455: PUSH
63456: LD_INT 1
63458: ST_TO_ADDR
// minersList := [ ] ;
63459: LD_ADDR_EXP 83
63463: PUSH
63464: EMPTY
63465: ST_TO_ADDR
// minerMinesList := [ ] ;
63466: LD_ADDR_EXP 84
63470: PUSH
63471: EMPTY
63472: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63473: LD_ADDR_EXP 85
63477: PUSH
63478: LD_INT 5
63480: ST_TO_ADDR
// end ;
63481: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63482: LD_EXP 82
63486: PUSH
63487: LD_INT 34
63489: PUSH
63490: LD_INT 81
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PPUSH
63497: CALL_OW 69
63501: AND
63502: IFFALSE 63963
63504: GO 63506
63506: DISABLE
63507: LD_INT 0
63509: PPUSH
63510: PPUSH
63511: PPUSH
63512: PPUSH
// begin enable ;
63513: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63514: LD_ADDR_VAR 0 1
63518: PUSH
63519: LD_INT 34
63521: PUSH
63522: LD_INT 81
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PPUSH
63529: CALL_OW 69
63533: PUSH
63534: FOR_IN
63535: IFFALSE 63607
// begin if not i in minersList then
63537: LD_VAR 0 1
63541: PUSH
63542: LD_EXP 83
63546: IN
63547: NOT
63548: IFFALSE 63605
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63550: LD_ADDR_EXP 83
63554: PUSH
63555: LD_EXP 83
63559: PPUSH
63560: LD_EXP 83
63564: PUSH
63565: LD_INT 1
63567: PLUS
63568: PPUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: CALL_OW 1
63578: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63579: LD_ADDR_EXP 84
63583: PUSH
63584: LD_EXP 84
63588: PPUSH
63589: LD_EXP 84
63593: PUSH
63594: LD_INT 1
63596: PLUS
63597: PPUSH
63598: EMPTY
63599: PPUSH
63600: CALL_OW 1
63604: ST_TO_ADDR
// end end ;
63605: GO 63534
63607: POP
63608: POP
// for i := minerMinesList downto 1 do
63609: LD_ADDR_VAR 0 1
63613: PUSH
63614: DOUBLE
63615: LD_EXP 84
63619: INC
63620: ST_TO_ADDR
63621: LD_INT 1
63623: PUSH
63624: FOR_DOWNTO
63625: IFFALSE 63961
// begin if IsLive ( minersList [ i ] ) then
63627: LD_EXP 83
63631: PUSH
63632: LD_VAR 0 1
63636: ARRAY
63637: PPUSH
63638: CALL_OW 300
63642: IFFALSE 63670
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63644: LD_EXP 83
63648: PUSH
63649: LD_VAR 0 1
63653: ARRAY
63654: PPUSH
63655: LD_EXP 84
63659: PUSH
63660: LD_VAR 0 1
63664: ARRAY
63665: PPUSH
63666: CALL_OW 505
// if not minerMinesList [ i ] then
63670: LD_EXP 84
63674: PUSH
63675: LD_VAR 0 1
63679: ARRAY
63680: NOT
63681: IFFALSE 63685
// continue ;
63683: GO 63624
// for j := minerMinesList [ i ] downto 1 do
63685: LD_ADDR_VAR 0 2
63689: PUSH
63690: DOUBLE
63691: LD_EXP 84
63695: PUSH
63696: LD_VAR 0 1
63700: ARRAY
63701: INC
63702: ST_TO_ADDR
63703: LD_INT 1
63705: PUSH
63706: FOR_DOWNTO
63707: IFFALSE 63957
// begin side := GetSide ( minersList [ i ] ) ;
63709: LD_ADDR_VAR 0 3
63713: PUSH
63714: LD_EXP 83
63718: PUSH
63719: LD_VAR 0 1
63723: ARRAY
63724: PPUSH
63725: CALL_OW 255
63729: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63730: LD_ADDR_VAR 0 4
63734: PUSH
63735: LD_EXP 84
63739: PUSH
63740: LD_VAR 0 1
63744: ARRAY
63745: PUSH
63746: LD_VAR 0 2
63750: ARRAY
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PPUSH
63756: LD_EXP 84
63760: PUSH
63761: LD_VAR 0 1
63765: ARRAY
63766: PUSH
63767: LD_VAR 0 2
63771: ARRAY
63772: PUSH
63773: LD_INT 2
63775: ARRAY
63776: PPUSH
63777: CALL_OW 428
63781: ST_TO_ADDR
// if not tmp then
63782: LD_VAR 0 4
63786: NOT
63787: IFFALSE 63791
// continue ;
63789: GO 63706
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63791: LD_VAR 0 4
63795: PUSH
63796: LD_INT 81
63798: PUSH
63799: LD_VAR 0 3
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PPUSH
63808: CALL_OW 69
63812: IN
63813: PUSH
63814: LD_EXP 84
63818: PUSH
63819: LD_VAR 0 1
63823: ARRAY
63824: PUSH
63825: LD_VAR 0 2
63829: ARRAY
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PPUSH
63835: LD_EXP 84
63839: PUSH
63840: LD_VAR 0 1
63844: ARRAY
63845: PUSH
63846: LD_VAR 0 2
63850: ARRAY
63851: PUSH
63852: LD_INT 2
63854: ARRAY
63855: PPUSH
63856: CALL_OW 458
63860: AND
63861: IFFALSE 63955
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63863: LD_EXP 84
63867: PUSH
63868: LD_VAR 0 1
63872: ARRAY
63873: PUSH
63874: LD_VAR 0 2
63878: ARRAY
63879: PUSH
63880: LD_INT 1
63882: ARRAY
63883: PPUSH
63884: LD_EXP 84
63888: PUSH
63889: LD_VAR 0 1
63893: ARRAY
63894: PUSH
63895: LD_VAR 0 2
63899: ARRAY
63900: PUSH
63901: LD_INT 2
63903: ARRAY
63904: PPUSH
63905: LD_VAR 0 3
63909: PPUSH
63910: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63914: LD_ADDR_EXP 84
63918: PUSH
63919: LD_EXP 84
63923: PPUSH
63924: LD_VAR 0 1
63928: PPUSH
63929: LD_EXP 84
63933: PUSH
63934: LD_VAR 0 1
63938: ARRAY
63939: PPUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: CALL_OW 3
63949: PPUSH
63950: CALL_OW 1
63954: ST_TO_ADDR
// end ; end ;
63955: GO 63706
63957: POP
63958: POP
// end ;
63959: GO 63624
63961: POP
63962: POP
// end ;
63963: PPOPN 4
63965: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63966: LD_INT 0
63968: PPUSH
63969: PPUSH
// result := false ;
63970: LD_ADDR_VAR 0 4
63974: PUSH
63975: LD_INT 0
63977: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63978: LD_VAR 0 1
63982: PPUSH
63983: CALL_OW 264
63987: PUSH
63988: LD_INT 81
63990: EQUAL
63991: NOT
63992: IFFALSE 63996
// exit ;
63994: GO 64236
// index := GetElementIndex ( minersList , unit ) ;
63996: LD_ADDR_VAR 0 5
64000: PUSH
64001: LD_EXP 83
64005: PPUSH
64006: LD_VAR 0 1
64010: PPUSH
64011: CALL 6062 0 2
64015: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64016: LD_EXP 84
64020: PUSH
64021: LD_VAR 0 5
64025: ARRAY
64026: PUSH
64027: LD_EXP 85
64031: GREATEREQUAL
64032: IFFALSE 64036
// exit ;
64034: GO 64236
// ComMoveXY ( unit , x , y ) ;
64036: LD_VAR 0 1
64040: PPUSH
64041: LD_VAR 0 2
64045: PPUSH
64046: LD_VAR 0 3
64050: PPUSH
64051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64055: LD_INT 35
64057: PPUSH
64058: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64062: LD_VAR 0 1
64066: PPUSH
64067: LD_VAR 0 2
64071: PPUSH
64072: LD_VAR 0 3
64076: PPUSH
64077: CALL 37417 0 3
64081: NOT
64082: PUSH
64083: LD_VAR 0 1
64087: PPUSH
64088: CALL_OW 314
64092: AND
64093: IFFALSE 64097
// exit ;
64095: GO 64236
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64097: LD_VAR 0 2
64101: PPUSH
64102: LD_VAR 0 3
64106: PPUSH
64107: CALL_OW 428
64111: PUSH
64112: LD_VAR 0 1
64116: EQUAL
64117: PUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 314
64127: NOT
64128: AND
64129: IFFALSE 64055
// PlaySoundXY ( x , y , PlantMine ) ;
64131: LD_VAR 0 2
64135: PPUSH
64136: LD_VAR 0 3
64140: PPUSH
64141: LD_STRING PlantMine
64143: PPUSH
64144: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64148: LD_VAR 0 2
64152: PPUSH
64153: LD_VAR 0 3
64157: PPUSH
64158: LD_VAR 0 1
64162: PPUSH
64163: CALL_OW 255
64167: PPUSH
64168: LD_INT 0
64170: PPUSH
64171: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64175: LD_ADDR_EXP 84
64179: PUSH
64180: LD_EXP 84
64184: PPUSH
64185: LD_VAR 0 5
64189: PUSH
64190: LD_EXP 84
64194: PUSH
64195: LD_VAR 0 5
64199: ARRAY
64200: PUSH
64201: LD_INT 1
64203: PLUS
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PPUSH
64209: LD_VAR 0 2
64213: PUSH
64214: LD_VAR 0 3
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PPUSH
64223: CALL 6277 0 3
64227: ST_TO_ADDR
// result := true ;
64228: LD_ADDR_VAR 0 4
64232: PUSH
64233: LD_INT 1
64235: ST_TO_ADDR
// end ;
64236: LD_VAR 0 4
64240: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64241: LD_INT 0
64243: PPUSH
64244: PPUSH
64245: PPUSH
// if not unit in minersList then
64246: LD_VAR 0 1
64250: PUSH
64251: LD_EXP 83
64255: IN
64256: NOT
64257: IFFALSE 64261
// exit ;
64259: GO 64653
// index := GetElementIndex ( minersList , unit ) ;
64261: LD_ADDR_VAR 0 6
64265: PUSH
64266: LD_EXP 83
64270: PPUSH
64271: LD_VAR 0 1
64275: PPUSH
64276: CALL 6062 0 2
64280: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64281: LD_ADDR_VAR 0 5
64285: PUSH
64286: DOUBLE
64287: LD_EXP 84
64291: PUSH
64292: LD_VAR 0 6
64296: ARRAY
64297: INC
64298: ST_TO_ADDR
64299: LD_INT 1
64301: PUSH
64302: FOR_DOWNTO
64303: IFFALSE 64464
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64305: LD_EXP 84
64309: PUSH
64310: LD_VAR 0 6
64314: ARRAY
64315: PUSH
64316: LD_VAR 0 5
64320: ARRAY
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PUSH
64326: LD_VAR 0 2
64330: EQUAL
64331: PUSH
64332: LD_EXP 84
64336: PUSH
64337: LD_VAR 0 6
64341: ARRAY
64342: PUSH
64343: LD_VAR 0 5
64347: ARRAY
64348: PUSH
64349: LD_INT 2
64351: ARRAY
64352: PUSH
64353: LD_VAR 0 3
64357: EQUAL
64358: AND
64359: IFFALSE 64462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64361: LD_EXP 84
64365: PUSH
64366: LD_VAR 0 6
64370: ARRAY
64371: PUSH
64372: LD_VAR 0 5
64376: ARRAY
64377: PUSH
64378: LD_INT 1
64380: ARRAY
64381: PPUSH
64382: LD_EXP 84
64386: PUSH
64387: LD_VAR 0 6
64391: ARRAY
64392: PUSH
64393: LD_VAR 0 5
64397: ARRAY
64398: PUSH
64399: LD_INT 2
64401: ARRAY
64402: PPUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 255
64412: PPUSH
64413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64417: LD_ADDR_EXP 84
64421: PUSH
64422: LD_EXP 84
64426: PPUSH
64427: LD_VAR 0 6
64431: PPUSH
64432: LD_EXP 84
64436: PUSH
64437: LD_VAR 0 6
64441: ARRAY
64442: PPUSH
64443: LD_VAR 0 5
64447: PPUSH
64448: CALL_OW 3
64452: PPUSH
64453: CALL_OW 1
64457: ST_TO_ADDR
// exit ;
64458: POP
64459: POP
64460: GO 64653
// end ; end ;
64462: GO 64302
64464: POP
64465: POP
// for i := minerMinesList [ index ] downto 1 do
64466: LD_ADDR_VAR 0 5
64470: PUSH
64471: DOUBLE
64472: LD_EXP 84
64476: PUSH
64477: LD_VAR 0 6
64481: ARRAY
64482: INC
64483: ST_TO_ADDR
64484: LD_INT 1
64486: PUSH
64487: FOR_DOWNTO
64488: IFFALSE 64651
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64490: LD_EXP 84
64494: PUSH
64495: LD_VAR 0 6
64499: ARRAY
64500: PUSH
64501: LD_VAR 0 5
64505: ARRAY
64506: PUSH
64507: LD_INT 1
64509: ARRAY
64510: PPUSH
64511: LD_EXP 84
64515: PUSH
64516: LD_VAR 0 6
64520: ARRAY
64521: PUSH
64522: LD_VAR 0 5
64526: ARRAY
64527: PUSH
64528: LD_INT 2
64530: ARRAY
64531: PPUSH
64532: LD_VAR 0 2
64536: PPUSH
64537: LD_VAR 0 3
64541: PPUSH
64542: CALL_OW 298
64546: PUSH
64547: LD_INT 6
64549: LESS
64550: IFFALSE 64649
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64552: LD_EXP 84
64556: PUSH
64557: LD_VAR 0 6
64561: ARRAY
64562: PUSH
64563: LD_VAR 0 5
64567: ARRAY
64568: PUSH
64569: LD_INT 1
64571: ARRAY
64572: PPUSH
64573: LD_EXP 84
64577: PUSH
64578: LD_VAR 0 6
64582: ARRAY
64583: PUSH
64584: LD_VAR 0 5
64588: ARRAY
64589: PUSH
64590: LD_INT 2
64592: ARRAY
64593: PPUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 255
64603: PPUSH
64604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64608: LD_ADDR_EXP 84
64612: PUSH
64613: LD_EXP 84
64617: PPUSH
64618: LD_VAR 0 6
64622: PPUSH
64623: LD_EXP 84
64627: PUSH
64628: LD_VAR 0 6
64632: ARRAY
64633: PPUSH
64634: LD_VAR 0 5
64638: PPUSH
64639: CALL_OW 3
64643: PPUSH
64644: CALL_OW 1
64648: ST_TO_ADDR
// end ; end ;
64649: GO 64487
64651: POP
64652: POP
// end ;
64653: LD_VAR 0 4
64657: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64658: LD_INT 0
64660: PPUSH
64661: PPUSH
64662: PPUSH
64663: PPUSH
64664: PPUSH
64665: PPUSH
64666: PPUSH
64667: PPUSH
64668: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64669: LD_VAR 0 1
64673: PPUSH
64674: CALL_OW 264
64678: PUSH
64679: LD_INT 81
64681: EQUAL
64682: NOT
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_EXP 83
64693: IN
64694: NOT
64695: OR
64696: IFFALSE 64700
// exit ;
64698: GO 65022
// index := GetElementIndex ( minersList , unit ) ;
64700: LD_ADDR_VAR 0 6
64704: PUSH
64705: LD_EXP 83
64709: PPUSH
64710: LD_VAR 0 1
64714: PPUSH
64715: CALL 6062 0 2
64719: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64720: LD_ADDR_VAR 0 8
64724: PUSH
64725: LD_EXP 85
64729: PUSH
64730: LD_EXP 84
64734: PUSH
64735: LD_VAR 0 6
64739: ARRAY
64740: MINUS
64741: ST_TO_ADDR
// if not minesFreeAmount then
64742: LD_VAR 0 8
64746: NOT
64747: IFFALSE 64751
// exit ;
64749: GO 65022
// tmp := [ ] ;
64751: LD_ADDR_VAR 0 7
64755: PUSH
64756: EMPTY
64757: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64758: LD_ADDR_VAR 0 5
64762: PUSH
64763: DOUBLE
64764: LD_INT 1
64766: DEC
64767: ST_TO_ADDR
64768: LD_VAR 0 8
64772: PUSH
64773: FOR_TO
64774: IFFALSE 64969
// begin _d := rand ( 0 , 5 ) ;
64776: LD_ADDR_VAR 0 11
64780: PUSH
64781: LD_INT 0
64783: PPUSH
64784: LD_INT 5
64786: PPUSH
64787: CALL_OW 12
64791: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64792: LD_ADDR_VAR 0 12
64796: PUSH
64797: LD_INT 2
64799: PPUSH
64800: LD_INT 6
64802: PPUSH
64803: CALL_OW 12
64807: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64808: LD_ADDR_VAR 0 9
64812: PUSH
64813: LD_VAR 0 2
64817: PPUSH
64818: LD_VAR 0 11
64822: PPUSH
64823: LD_VAR 0 12
64827: PPUSH
64828: CALL_OW 272
64832: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64833: LD_ADDR_VAR 0 10
64837: PUSH
64838: LD_VAR 0 3
64842: PPUSH
64843: LD_VAR 0 11
64847: PPUSH
64848: LD_VAR 0 12
64852: PPUSH
64853: CALL_OW 273
64857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64858: LD_VAR 0 9
64862: PPUSH
64863: LD_VAR 0 10
64867: PPUSH
64868: CALL_OW 488
64872: PUSH
64873: LD_VAR 0 9
64877: PUSH
64878: LD_VAR 0 10
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_VAR 0 7
64891: IN
64892: NOT
64893: AND
64894: PUSH
64895: LD_VAR 0 9
64899: PPUSH
64900: LD_VAR 0 10
64904: PPUSH
64905: CALL_OW 458
64909: NOT
64910: AND
64911: IFFALSE 64953
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64913: LD_ADDR_VAR 0 7
64917: PUSH
64918: LD_VAR 0 7
64922: PPUSH
64923: LD_VAR 0 7
64927: PUSH
64928: LD_INT 1
64930: PLUS
64931: PPUSH
64932: LD_VAR 0 9
64936: PUSH
64937: LD_VAR 0 10
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PPUSH
64946: CALL_OW 1
64950: ST_TO_ADDR
64951: GO 64967
// i := i - 1 ;
64953: LD_ADDR_VAR 0 5
64957: PUSH
64958: LD_VAR 0 5
64962: PUSH
64963: LD_INT 1
64965: MINUS
64966: ST_TO_ADDR
// end ;
64967: GO 64773
64969: POP
64970: POP
// for i in tmp do
64971: LD_ADDR_VAR 0 5
64975: PUSH
64976: LD_VAR 0 7
64980: PUSH
64981: FOR_IN
64982: IFFALSE 65020
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 5
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PPUSH
64998: LD_VAR 0 5
65002: PUSH
65003: LD_INT 2
65005: ARRAY
65006: PPUSH
65007: CALL 63966 0 3
65011: NOT
65012: IFFALSE 65018
// exit ;
65014: POP
65015: POP
65016: GO 65022
65018: GO 64981
65020: POP
65021: POP
// end ;
65022: LD_VAR 0 4
65026: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65027: LD_INT 0
65029: PPUSH
65030: PPUSH
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
// if not GetClass ( unit ) = class_sniper then
65036: LD_VAR 0 1
65040: PPUSH
65041: CALL_OW 257
65045: PUSH
65046: LD_INT 5
65048: EQUAL
65049: NOT
65050: IFFALSE 65054
// exit ;
65052: GO 65442
// dist := 8 ;
65054: LD_ADDR_VAR 0 5
65058: PUSH
65059: LD_INT 8
65061: ST_TO_ADDR
// viewRange := 12 ;
65062: LD_ADDR_VAR 0 7
65066: PUSH
65067: LD_INT 12
65069: ST_TO_ADDR
// side := GetSide ( unit ) ;
65070: LD_ADDR_VAR 0 6
65074: PUSH
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL_OW 255
65084: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65085: LD_INT 61
65087: PPUSH
65088: LD_VAR 0 6
65092: PPUSH
65093: CALL_OW 321
65097: PUSH
65098: LD_INT 2
65100: EQUAL
65101: IFFALSE 65111
// viewRange := 16 ;
65103: LD_ADDR_VAR 0 7
65107: PUSH
65108: LD_INT 16
65110: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_VAR 0 3
65125: PPUSH
65126: CALL_OW 297
65130: PUSH
65131: LD_VAR 0 5
65135: GREATER
65136: IFFALSE 65215
// begin ComMoveXY ( unit , x , y ) ;
65138: LD_VAR 0 1
65142: PPUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: LD_VAR 0 3
65152: PPUSH
65153: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65157: LD_INT 35
65159: PPUSH
65160: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65164: LD_VAR 0 1
65168: PPUSH
65169: LD_VAR 0 2
65173: PPUSH
65174: LD_VAR 0 3
65178: PPUSH
65179: CALL 37417 0 3
65183: NOT
65184: IFFALSE 65188
// exit ;
65186: GO 65442
// until GetDistUnitXY ( unit , x , y ) < dist ;
65188: LD_VAR 0 1
65192: PPUSH
65193: LD_VAR 0 2
65197: PPUSH
65198: LD_VAR 0 3
65202: PPUSH
65203: CALL_OW 297
65207: PUSH
65208: LD_VAR 0 5
65212: LESS
65213: IFFALSE 65157
// end ; ComTurnXY ( unit , x , y ) ;
65215: LD_VAR 0 1
65219: PPUSH
65220: LD_VAR 0 2
65224: PPUSH
65225: LD_VAR 0 3
65229: PPUSH
65230: CALL_OW 118
// wait ( 5 ) ;
65234: LD_INT 5
65236: PPUSH
65237: CALL_OW 67
// _d := GetDir ( unit ) ;
65241: LD_ADDR_VAR 0 10
65245: PUSH
65246: LD_VAR 0 1
65250: PPUSH
65251: CALL_OW 254
65255: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65256: LD_ADDR_VAR 0 8
65260: PUSH
65261: LD_VAR 0 1
65265: PPUSH
65266: CALL_OW 250
65270: PPUSH
65271: LD_VAR 0 10
65275: PPUSH
65276: LD_VAR 0 5
65280: PPUSH
65281: CALL_OW 272
65285: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65286: LD_ADDR_VAR 0 9
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: CALL_OW 251
65300: PPUSH
65301: LD_VAR 0 10
65305: PPUSH
65306: LD_VAR 0 5
65310: PPUSH
65311: CALL_OW 273
65315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65316: LD_VAR 0 8
65320: PPUSH
65321: LD_VAR 0 9
65325: PPUSH
65326: CALL_OW 488
65330: NOT
65331: IFFALSE 65335
// exit ;
65333: GO 65442
// ComAnimCustom ( unit , 1 ) ;
65335: LD_VAR 0 1
65339: PPUSH
65340: LD_INT 1
65342: PPUSH
65343: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65347: LD_VAR 0 8
65351: PPUSH
65352: LD_VAR 0 9
65356: PPUSH
65357: LD_VAR 0 6
65361: PPUSH
65362: LD_VAR 0 7
65366: PPUSH
65367: CALL_OW 330
// repeat wait ( 1 ) ;
65371: LD_INT 1
65373: PPUSH
65374: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 316
65387: PUSH
65388: LD_VAR 0 1
65392: PPUSH
65393: CALL_OW 314
65397: OR
65398: PUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 302
65408: NOT
65409: OR
65410: PUSH
65411: LD_VAR 0 1
65415: PPUSH
65416: CALL_OW 301
65420: OR
65421: IFFALSE 65371
// RemoveSeeing ( _x , _y , side ) ;
65423: LD_VAR 0 8
65427: PPUSH
65428: LD_VAR 0 9
65432: PPUSH
65433: LD_VAR 0 6
65437: PPUSH
65438: CALL_OW 331
// end ; end_of_file
65442: LD_VAR 0 4
65446: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65447: LD_VAR 0 1
65451: PUSH
65452: LD_INT 200
65454: DOUBLE
65455: GREATEREQUAL
65456: IFFALSE 65464
65458: LD_INT 299
65460: DOUBLE
65461: LESSEQUAL
65462: IFTRUE 65466
65464: GO 65498
65466: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65467: LD_VAR 0 1
65471: PPUSH
65472: LD_VAR 0 2
65476: PPUSH
65477: LD_VAR 0 3
65481: PPUSH
65482: LD_VAR 0 4
65486: PPUSH
65487: LD_VAR 0 5
65491: PPUSH
65492: CALL 61534 0 5
65496: GO 65575
65498: LD_INT 300
65500: DOUBLE
65501: GREATEREQUAL
65502: IFFALSE 65510
65504: LD_INT 399
65506: DOUBLE
65507: LESSEQUAL
65508: IFTRUE 65512
65510: GO 65574
65512: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65513: LD_VAR 0 1
65517: PPUSH
65518: LD_VAR 0 2
65522: PPUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: LD_VAR 0 4
65532: PPUSH
65533: LD_VAR 0 5
65537: PPUSH
65538: LD_VAR 0 6
65542: PPUSH
65543: LD_VAR 0 7
65547: PPUSH
65548: LD_VAR 0 8
65552: PPUSH
65553: LD_VAR 0 9
65557: PPUSH
65558: LD_VAR 0 10
65562: PPUSH
65563: LD_VAR 0 11
65567: PPUSH
65568: CALL 57867 0 11
65572: GO 65575
65574: POP
// end ;
65575: PPOPN 11
65577: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: LD_VAR 0 4
65597: PPUSH
65598: LD_VAR 0 5
65602: PPUSH
65603: CALL 61270 0 5
// end ;
65607: PPOPN 5
65609: END
